{"files":[{"patch":"@@ -1725,0 +1725,14 @@\n+<h4 id=\"building-for-windows-aarch64\">Building for Windows AArch64<\/h4>\n+<p>The Visual Studio Build Tools can be used for building the JDK\n+without a full Visual Studio installation. To set up the Visual Studio\n+2022 Build Tools on a Windows AArch64 machine for a native build, launch\n+the installer as follows in a Windows command prompt:<\/p>\n+<pre><code>vs_buildtools.exe --quiet --wait --norestart --nocache ^\n+--installPath &quot;%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\BuildTools&quot; ^\n+--add Microsoft.VisualStudio.Component.VC.CoreBuildTools ^\n+--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^\n+--add Microsoft.VisualStudio.Component.Windows11SDK.22621<\/code><\/pre>\n+<p>To generate Windows AArch64 builds using Cygwin on a Windows x64\n+machine, you must set the proper target platform by adding\n+<code>--openjdk-target=aarch64-unknown-cygwin<\/code> to your configure\n+command line.<\/p>\n","filename":"doc\/building.html","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1460,0 +1460,18 @@\n+#### Building for Windows AArch64\n+The Visual Studio Build Tools can be used for building the JDK without a full\n+Visual Studio installation. To set up the Visual Studio 2022 Build Tools on a\n+Windows AArch64 machine for a native build, launch the installer as follows\n+in a Windows command prompt:\n+\n+```\n+vs_buildtools.exe --quiet --wait --norestart --nocache ^\n+--installPath \"%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\BuildTools\" ^\n+--add Microsoft.VisualStudio.Component.VC.CoreBuildTools ^\n+--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^\n+--add Microsoft.VisualStudio.Component.Windows11SDK.22621\n+```\n+\n+To generate Windows AArch64 builds using Cygwin on a Windows x64 machine,\n+you must set the proper target platform by adding\n+`--openjdk-target=aarch64-unknown-cygwin` to your configure command line.\n+\n","filename":"doc\/building.md","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -932,0 +932,5 @@\n+  ifneq ($$(findstring --enable-preview, $$(JTREG_ALL_OPTIONS)), )\n+    JTREG_AUTO_PROBLEM_LISTS += ProblemList-enable-preview.txt\n+  endif\n+\n+\n","filename":"make\/RunTests.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,7 +77,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(hdr, obj);\n-    ldrb(hdr, Address(hdr, Klass::misc_flags_offset()));\n-    tst(hdr, KlassFlags::_misc_is_value_based_class);\n-    br(Assembler::NE, slow_case);\n-  }\n-\n@@ -87,0 +80,8 @@\n+\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(hdr, obj);\n+      ldrb(hdr, Address(hdr, Klass::misc_flags_offset()));\n+      tst(hdr, KlassFlags::_misc_is_value_based_class);\n+      br(Assembler::NE, slow_case);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-      str(zr, Address(rthread, JavaThread::vm_result_offset()));\n+      str(zr, Address(rthread, JavaThread::vm_result_oop_offset()));\n@@ -97,1 +97,1 @@\n-      str(zr, Address(rthread, JavaThread::vm_result_2_offset()));\n+      str(zr, Address(rthread, JavaThread::vm_result_metadata_offset()));\n@@ -111,1 +111,1 @@\n-    get_vm_result(oop_result1, rthread);\n+    get_vm_result_oop(oop_result1, rthread);\n@@ -114,1 +114,1 @@\n-    get_vm_result_2(metadata_result, rthread);\n+    get_vm_result_metadata(metadata_result, rthread);\n@@ -409,2 +409,2 @@\n-    __ str(zr, Address(rthread, JavaThread::vm_result_offset()));\n-    __ str(zr, Address(rthread, JavaThread::vm_result_2_offset()));\n+    __ str(zr, Address(rthread, JavaThread::vm_result_oop_offset()));\n+    __ str(zr, Address(rthread, JavaThread::vm_result_metadata_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -33,3 +35,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n-#include \"interpreter\/interpreter.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"interpreter\/interpreter.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -26,0 +25,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-void ICache::initialize() {}\n+void ICache::initialize(int phase) {}\n","filename":"src\/hotspot\/cpu\/aarch64\/icache_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -785,7 +785,0 @@\n-    if (DiagnoseSyncOnValueBasedClasses != 0) {\n-      load_klass(tmp, obj_reg);\n-      ldrb(tmp, Address(tmp, Klass::misc_flags_offset()));\n-      tst(tmp, KlassFlags::_misc_is_value_based_class);\n-      br(Assembler::NE, slow_case);\n-    }\n-\n@@ -796,0 +789,8 @@\n+\n+      if (DiagnoseSyncOnValueBasedClasses != 0) {\n+        load_klass(tmp, obj_reg);\n+        ldrb(tmp, Address(tmp, Klass::misc_flags_offset()));\n+        tst(tmp, KlassFlags::_misc_is_value_based_class);\n+        br(Assembler::NE, slow_case);\n+      }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -857,1 +857,1 @@\n-    get_vm_result(oop_result, java_thread);\n+    get_vm_result_oop(oop_result, java_thread);\n@@ -1153,3 +1153,3 @@\n-void MacroAssembler::get_vm_result(Register oop_result, Register java_thread) {\n-  ldr(oop_result, Address(java_thread, JavaThread::vm_result_offset()));\n-  str(zr, Address(java_thread, JavaThread::vm_result_offset()));\n+void MacroAssembler::get_vm_result_oop(Register oop_result, Register java_thread) {\n+  ldr(oop_result, Address(java_thread, JavaThread::vm_result_oop_offset()));\n+  str(zr, Address(java_thread, JavaThread::vm_result_oop_offset()));\n@@ -1159,3 +1159,3 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result, Register java_thread) {\n-  ldr(metadata_result, Address(java_thread, JavaThread::vm_result_2_offset()));\n-  str(zr, Address(java_thread, JavaThread::vm_result_2_offset()));\n+void MacroAssembler::get_vm_result_metadata(Register metadata_result, Register java_thread) {\n+  ldr(metadata_result, Address(java_thread, JavaThread::vm_result_metadata_offset()));\n+  str(zr, Address(java_thread, JavaThread::vm_result_metadata_offset()));\n@@ -2049,1 +2049,1 @@\n-  subs(zr, scratch, InstanceKlass::fully_initialized);\n+  cmp(scratch, InstanceKlass::fully_initialized);\n@@ -7824,1 +7824,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -7828,0 +7828,7 @@\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n+    load_klass(t1, obj);\n+    ldrb(t1, Address(t1, Klass::misc_flags_offset()));\n+    tst(t1, KlassFlags::_misc_is_value_based_class);\n+    br(Assembler::NE, slow);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -854,2 +854,2 @@\n-  void get_vm_result  (Register oop_result, Register thread);\n-  void get_vm_result_2(Register metadata_result, Register thread);\n+  void get_vm_result_oop(Register oop_result, Register thread);\n+  void get_vm_result_metadata(Register metadata_result, Register thread);\n@@ -1689,5 +1689,9 @@\n-  void cc20_quarter_round(FloatRegister aVec, FloatRegister bVec,\n-          FloatRegister cVec, FloatRegister dVec, FloatRegister scratch,\n-          FloatRegister tbl);\n-  void cc20_shift_lane_org(FloatRegister bVec, FloatRegister cVec,\n-          FloatRegister dVec, bool colToDiag);\n+  void cc20_qr_add4(FloatRegister (&addFirst)[4],\n+          FloatRegister (&addSecond)[4]);\n+  void cc20_qr_xor4(FloatRegister (&firstElem)[4],\n+          FloatRegister (&secondElem)[4], FloatRegister (&result)[4]);\n+  void cc20_qr_lrot4(FloatRegister (&sourceReg)[4],\n+          FloatRegister (&destReg)[4], int bits, FloatRegister table);\n+  void cc20_set_qr_registers(FloatRegister (&vectorSet)[4],\n+          const FloatRegister (&stateVectors)[16], int idx1, int idx2,\n+          int idx3, int idx4);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,2 +31,6 @@\n- * Perform the quarter round calculations on values contained within\n- * four SIMD registers.\n+ * Perform the vectorized add for a group of 4 quarter round operations.\n+ * In the ChaCha20 quarter round, there are two add ops: a += b and c += d.\n+ * Each parameter is a set of 4 registers representing the 4 registers\n+ * for the each addend in the add operation for each of the quarter rounds.\n+ * (e.g. for \"a\" it would consist of v0\/v1\/v2\/v3).  The result of the add\n+ * is placed into the vectors in the \"addFirst\" array.\n@@ -34,6 +38,2 @@\n- * @param aVec the SIMD register containing only the \"a\" values\n- * @param bVec the SIMD register containing only the \"b\" values\n- * @param cVec the SIMD register containing only the \"c\" values\n- * @param dVec the SIMD register containing only the \"d\" values\n- * @param scratch scratch SIMD register used for 12 and 7 bit left rotations\n- * @param table the SIMD register used as a table for 8 bit left rotations\n+ * @param addFirst array of SIMD registers representing the first addend.\n+ * @param addSecond array of SIMD registers representing the second addend.\n@@ -41,3 +41,52 @@\n-void MacroAssembler::cc20_quarter_round(FloatRegister aVec, FloatRegister bVec,\n-    FloatRegister cVec, FloatRegister dVec, FloatRegister scratch,\n-     FloatRegister table) {\n+void MacroAssembler::cc20_qr_add4(FloatRegister (&addFirst)[4],\n+    FloatRegister (&addSecond)[4]) {\n+  for (int i = 0; i < 4; i++) {\n+      addv(addFirst[i], T4S, addFirst[i], addSecond[i]);\n+  }\n+}\n+\n+\n+\/**\n+ * Perform the vectorized XOR for a group of 4 quarter round operations.\n+ * In the ChaCha20 quarter round, there are two XOR ops: d ^= a and b ^= c\n+ * Each parameter is a set of 4 registers representing the 4 registers\n+ * for the each element in the xor operation for each of the quarter rounds.\n+ * (e.g. for \"a\" it would consist of v0\/v1\/v2\/v3)\n+ * Note: because the b ^= c ops precede a non-byte-aligned left-rotation,\n+ *       there is a third parameter which can take a set of scratch registers\n+ *       for the result, which facilitates doing the subsequent operations for\n+ *       the left rotation.\n+ *\n+ * @param firstElem array of SIMD registers representing the first element.\n+ * @param secondElem array of SIMD registers representing the second element.\n+ * @param result array of SIMD registers representing the destination.\n+ *        May be the same as firstElem or secondElem, or a separate array.\n+ *\/\n+void MacroAssembler::cc20_qr_xor4(FloatRegister (&firstElem)[4],\n+    FloatRegister (&secondElem)[4], FloatRegister (&result)[4]) {\n+  for (int i = 0; i < 4; i++) {\n+    eor(result[i], T16B, firstElem[i], secondElem[i]);\n+  }\n+}\n+\n+\/**\n+ * Perform the vectorized left-rotation on 32-bit lanes for a group of\n+ * 4 quarter round operations.\n+ * Each parameter is a set of 4 registers representing the 4 registers\n+ * for the each element in the source and destination for each of the quarter\n+ * rounds (e.g. for \"d\" it would consist of v12\/v13\/v14\/v15 on columns and\n+ * v15\/v12\/v13\/v14 on diagonal alignments).\n+ *\n+ * @param sourceReg array of SIMD registers representing the source\n+ * @param destReg array of SIMD registers representing the destination\n+ * @param bits the distance of the rotation in bits, must be 16\/12\/8\/7 per\n+ *        the ChaCha20 specification.\n+ *\/\n+void MacroAssembler::cc20_qr_lrot4(FloatRegister (&sourceReg)[4],\n+    FloatRegister (&destReg)[4], int bits, FloatRegister table) {\n+  switch (bits) {\n+  case 16:      \/\/ reg <<<= 16, in-place swap of half-words\n+    for (int i = 0; i < 4; i++) {\n+      rev32(destReg[i], T8H, sourceReg[i]);\n+    }\n+    break;\n@@ -45,4 +94,5 @@\n-  \/\/ a += b, d ^= a, d <<<= 16\n-  addv(aVec, T4S, aVec, bVec);\n-  eor(dVec, T16B, dVec, aVec);\n-  rev32(dVec, T8H, dVec);\n+  case 7:       \/\/ reg <<<= (12 || 7)\n+  case 12:      \/\/ r-shift src -> dest, l-shift src & ins to dest\n+    for (int i = 0; i < 4; i++) {\n+      ushr(destReg[i], T4S, sourceReg[i], 32 - bits);\n+    }\n@@ -50,5 +100,4 @@\n-  \/\/ c += d, b ^= c, b <<<= 12\n-  addv(cVec, T4S, cVec, dVec);\n-  eor(scratch, T16B, bVec, cVec);\n-  ushr(bVec, T4S, scratch, 20);\n-  sli(bVec, T4S, scratch, 12);\n+    for (int i = 0; i < 4; i++) {\n+      sli(destReg[i], T4S, sourceReg[i], bits);\n+    }\n+    break;\n@@ -56,4 +105,5 @@\n-  \/\/ a += b, d ^= a, d <<<= 8\n-  addv(aVec, T4S, aVec, bVec);\n-  eor(dVec, T16B, dVec, aVec);\n-  tbl(dVec, T16B, dVec,  1, table);\n+  case 8:       \/\/ reg <<<= 8, simulate left rotation with table reorg\n+    for (int i = 0; i < 4; i++) {\n+      tbl(destReg[i], T16B, sourceReg[i], 1, table);\n+    }\n+    break;\n@@ -61,5 +111,5 @@\n-  \/\/ c += d, b ^= c, b <<<= 7\n-  addv(cVec, T4S, cVec, dVec);\n-  eor(scratch, T16B, bVec, cVec);\n-  ushr(bVec, T4S, scratch, 25);\n-  sli(bVec, T4S, scratch, 7);\n+  default:\n+    \/\/ The caller shouldn't be sending bit rotation values outside\n+    \/\/ of the 16\/12\/8\/7 as defined in the specification.\n+    ShouldNotReachHere();\n+  }\n@@ -69,2 +119,5 @@\n- * Shift the b, c, and d vectors between columnar and diagonal representations.\n- * Note that the \"a\" vector does not shift.\n+ * Set the FloatRegisters for a 4-vector register set.  These will be used\n+ * during various quarter round transformations (adds, xors and left-rotations).\n+ * This method itself does not result in the output of any assembly\n+ * instructions.  It just organizes the vectors so they can be in columnar or\n+ * diagonal alignments.\n@@ -72,5 +125,13 @@\n- * @param bVec the SIMD register containing only the \"b\" values\n- * @param cVec the SIMD register containing only the \"c\" values\n- * @param dVec the SIMD register containing only the \"d\" values\n- * @param colToDiag true if moving columnar to diagonal, false if\n- *                  moving diagonal back to columnar.\n+ * @param vectorSet a 4-vector array to be altered into a new alignment\n+ * @param stateVectors the 16-vector array that represents the current\n+ *        working state.  The indices of this array match up with the\n+ *        organization of the ChaCha20 state per RFC 7539 (e.g. stateVectors[12]\n+ *        would contain the vector that holds the 32-bit counter, etc.)\n+ * @param idx1 the index of the stateVectors array to be assigned to the\n+ *        first vectorSet element.\n+ * @param idx2 the index of the stateVectors array to be assigned to the\n+ *        second vectorSet element.\n+ * @param idx3 the index of the stateVectors array to be assigned to the\n+ *        third vectorSet element.\n+ * @param idx4 the index of the stateVectors array to be assigned to the\n+ *        fourth vectorSet element.\n@@ -78,9 +139,7 @@\n-void MacroAssembler::cc20_shift_lane_org(FloatRegister bVec, FloatRegister cVec,\n-    FloatRegister dVec, bool colToDiag) {\n-  int bShift = colToDiag ? 4 : 12;\n-  int cShift = 8;\n-  int dShift = colToDiag ? 12 : 4;\n-\n-  ext(bVec, T16B, bVec, bVec, bShift);\n-  ext(cVec, T16B, cVec, cVec, cShift);\n-  ext(dVec, T16B, dVec, dVec, dShift);\n+void MacroAssembler::cc20_set_qr_registers(FloatRegister (&vectorSet)[4],\n+    const FloatRegister (&stateVectors)[16], int idx1, int idx2,\n+    int idx3, int idx4) {\n+  vectorSet[0] = stateVectors[idx1];\n+  vectorSet[1] = stateVectors[idx2];\n+  vectorSet[2] = stateVectors[idx3];\n+  vectorSet[3] = stateVectors[idx4];\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_chacha.cpp","additions":104,"deletions":45,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -96,0 +96,46 @@\n+void MethodHandles::verify_method(MacroAssembler* _masm, Register method, vmIntrinsics::ID iid) {\n+  BLOCK_COMMENT(\"verify_method {\");\n+  __ verify_method_ptr(method);\n+  if (VerifyMethodHandles) {\n+    Label L_ok;\n+    assert_different_registers(method, rscratch1, rscratch2);\n+    const Register method_holder = rscratch1;\n+    __ load_method_holder(method_holder, method);\n+\n+    switch (iid) {\n+      case vmIntrinsicID::_invokeBasic:\n+        \/\/ Require compiled LambdaForm class to be fully initialized.\n+        __ lea(rscratch2, Address(method_holder, InstanceKlass::init_state_offset()));\n+        __ ldarb(rscratch2, rscratch2);\n+        __ cmp(rscratch2, InstanceKlass::fully_initialized);\n+        __ br(Assembler::EQ, L_ok);\n+        break;\n+\n+      case vmIntrinsicID::_linkToStatic:\n+        __ clinit_barrier(method_holder, rscratch2, &L_ok);\n+        break;\n+\n+      case vmIntrinsicID::_linkToVirtual:\n+      case vmIntrinsicID::_linkToSpecial:\n+      case vmIntrinsicID::_linkToInterface:\n+        \/\/ Class initialization check is too strong here. Just ensure that class initialization has been initiated.\n+        __ lea(rscratch2, Address(method_holder, InstanceKlass::init_state_offset()));\n+        __ ldarb(rscratch2, rscratch2);\n+        __ cmp(rscratch2, InstanceKlass::being_initialized);\n+        __ br(Assembler::GE, L_ok);\n+\n+        \/\/ init_state check failed, but it may be an abstract interface method\n+        __ ldrh(rscratch2, Address(method, Method::access_flags_offset()));\n+        __ tbnz(rscratch2, exact_log2(JVM_ACC_ABSTRACT), L_ok);\n+        break;\n+\n+      default:\n+        fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n+    }\n+\n+    \/\/ Method holder init state check failed for a concrete method.\n+    __ stop(\"Method holder klass is not initialized\");\n+    __ bind(L_ok);\n+  }\n+  BLOCK_COMMENT(\"} verify_method\");\n+}\n@@ -99,1 +145,1 @@\n-                                            bool for_compiler_entry) {\n+                                            bool for_compiler_entry, vmIntrinsics::ID iid) {\n@@ -103,1 +149,1 @@\n-  __ verify_method_ptr(method);\n+  verify_method(_masm, method, iid);\n@@ -167,1 +213,1 @@\n-  jump_from_method_handle(_masm, method_temp, temp2, for_compiler_entry);\n+  jump_from_method_handle(_masm, method_temp, temp2, for_compiler_entry, vmIntrinsics::_invokeBasic);\n@@ -454,2 +500,1 @@\n-    __ verify_method_ptr(rmethod);\n-    jump_from_method_handle(_masm, rmethod, temp1, for_compiler_entry);\n+    jump_from_method_handle(_masm, rmethod, temp1, for_compiler_entry, iid);\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":50,"deletions":5,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+  static void verify_method(MacroAssembler* _masm, Register method, vmIntrinsics::ID iid) NOT_DEBUG_RETURN;\n+\n@@ -52,1 +54,1 @@\n-                                      bool for_compiler_entry);\n+                                      bool for_compiler_entry, vmIntrinsics::ID iid);\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3065,1 +3065,1 @@\n-  __ get_vm_result_2(rmethod, rthread);\n+  __ get_vm_result_metadata(rmethod, rthread);\n@@ -3084,1 +3084,1 @@\n-  __ str(zr, Address(rthread, JavaThread::vm_result_offset()));\n+  __ str(zr, Address(rthread, JavaThread::vm_result_oop_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  do_arch_blob(compiler, 75000 ZGC_ONLY(+5000))                         \\\n+  do_arch_blob(compiler, 65000 ZGC_ONLY(+5000))                         \\\n","filename":"src\/hotspot\/cpu\/aarch64\/stubDeclarations_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4430,44 +4430,3 @@\n-  \/**\n-   *  Arguments:\n-   *\n-   * Inputs:\n-   *   c_rarg0   - int crc\n-   *   c_rarg1   - byte* buf\n-   *   c_rarg2   - int length\n-   *\n-   * Output:\n-   *       rax   - int crc result\n-   *\/\n-  address generate_updateBytesCRC32() {\n-    assert(UseCRC32Intrinsics, \"what are we doing here?\");\n-\n-    __ align(CodeEntryAlignment);\n-    StubGenStubId stub_id = StubGenStubId::updateBytesCRC32_id;\n-    StubCodeMark mark(this, stub_id);\n-\n-    address start = __ pc();\n-\n-    const Register crc   = c_rarg0;  \/\/ crc\n-    const Register buf   = c_rarg1;  \/\/ source java byte array address\n-    const Register len   = c_rarg2;  \/\/ length\n-    const Register table0 = c_rarg3; \/\/ crc_table address\n-    const Register table1 = c_rarg4;\n-    const Register table2 = c_rarg5;\n-    const Register table3 = c_rarg6;\n-    const Register tmp3 = c_rarg7;\n-\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-    __ kernel_crc32(crc, buf, len,\n-              table0, table1, table2, table3, rscratch1, rscratch2, tmp3);\n-\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(lr);\n-\n-    return start;\n-  }\n-\n-  \/\/ ChaCha20 block function.  This version parallelizes 4 quarter\n-  \/\/ round operations at a time.  It uses 16 SIMD registers to\n-  \/\/ produce 4 blocks of key stream.\n+  \/\/ ChaCha20 block function.  This version parallelizes the 32-bit\n+  \/\/ state elements on each of 16 vectors, producing 4 blocks of\n+  \/\/ keystream at a time.\n@@ -4477,1 +4436,1 @@\n-  \/\/ return - number of bytes of keystream (always 256)\n+  \/\/ return - number of bytes of produced keystream (always 256)\n@@ -4479,26 +4438,23 @@\n-  \/\/ In this approach, we load the 512-bit start state sequentially into\n-  \/\/ 4 128-bit vectors.  We then make 4 4-vector copies of that starting\n-  \/\/ state, with each successive set of 4 vectors having a +1 added into\n-  \/\/ the first 32-bit lane of the 4th vector in that group (the counter).\n-  \/\/ By doing this, we can perform the block function on 4 512-bit blocks\n-  \/\/ within one run of this intrinsic.\n-  \/\/ The alignment of the data across the 4-vector group is such that at\n-  \/\/ the start it is already aligned for the first round of each two-round\n-  \/\/ loop iteration.  In other words, the corresponding lanes of each vector\n-  \/\/ will contain the values needed for that quarter round operation (e.g.\n-  \/\/ elements 0\/4\/8\/12, 1\/5\/9\/13, 2\/6\/10\/14, etc.).\n-  \/\/ In between each full round, a lane shift must occur.  Within a loop\n-  \/\/ iteration, between the first and second rounds, the 2nd, 3rd, and 4th\n-  \/\/ vectors are rotated left 32, 64 and 96 bits, respectively.  The result\n-  \/\/ is effectively a diagonal orientation in columnar form.  After the\n-  \/\/ second full round, those registers are left-rotated again, this time\n-  \/\/ 96, 64, and 32 bits - returning the vectors to their columnar organization.\n-  \/\/ After all 10 iterations, the original state is added to each 4-vector\n-  \/\/ working state along with the add mask, and the 4 vector groups are\n-  \/\/ sequentially written to the memory dedicated for the output key stream.\n-  \/\/\n-  \/\/ For a more detailed explanation, see Goll and Gueron, \"Vectorization of\n-  \/\/ ChaCha Stream Cipher\", 2014 11th Int. Conf. on Information Technology:\n-  \/\/ New Generations, Las Vegas, NV, USA, April 2014, DOI: 10.1109\/ITNG.2014.33\n-  address generate_chacha20Block_qrpar() {\n-    Label L_Q_twoRounds, L_Q_cc20_const;\n+  \/\/ This implementation takes each 32-bit integer from the state\n+  \/\/ array and broadcasts it across all 4 32-bit lanes of a vector register\n+  \/\/ (e.g. state[0] is replicated on all 4 lanes of v4, state[1] to all 4 lanes\n+  \/\/ of v5, etc.).  Once all 16 elements have been broadcast onto 16 vectors,\n+  \/\/ the quarter round schedule is implemented as outlined in RFC 7539 section\n+  \/\/ 2.3.  However, instead of sequentially processing the 3 quarter round\n+  \/\/ operations represented by one QUARTERROUND function, we instead stack all\n+  \/\/ the adds, xors and left-rotations from the first 4 quarter rounds together\n+  \/\/ and then do the same for the second set of 4 quarter rounds.  This removes\n+  \/\/ some latency that would otherwise be incurred by waiting for an add to\n+  \/\/ complete before performing an xor (which depends on the result of the\n+  \/\/ add), etc. An adjustment happens between the first and second groups of 4\n+  \/\/ quarter rounds, but this is done only in the inputs to the macro functions\n+  \/\/ that generate the assembly instructions - these adjustments themselves are\n+  \/\/ not part of the resulting assembly.\n+  \/\/ The 4 registers v0-v3 are used during the quarter round operations as\n+  \/\/ scratch registers.  Once the 20 rounds are complete, these 4 scratch\n+  \/\/ registers become the vectors involved in adding the start state back onto\n+  \/\/ the post-QR working state.  After the adds are complete, each of the 16\n+  \/\/ vectors write their first lane back to the keystream buffer, followed\n+  \/\/ by the second lane from all vectors and so on.\n+  address generate_chacha20Block_blockpar() {\n+    Label L_twoRounds, L_cc20_const;\n@@ -4506,2 +4462,2 @@\n-    \/\/ onto SIMD registers.  The first 128 bits are a counter add overlay\n-    \/\/ that adds +1\/+0\/+0\/+0 to the vectors holding replicated state[12].\n+    \/\/ onto FloatRegisters.  The first 128 bits are a counter add overlay\n+    \/\/ that adds +0\/+1\/+2\/+3 to the vector holding replicated state[12].\n@@ -4509,4 +4465,3 @@\n-    \/\/ on 32-bit lanes within a SIMD register.\n-    __ BIND(L_Q_cc20_const);\n-    __ emit_int64(0x0000000000000001UL);\n-    __ emit_int64(0x0000000000000000UL);\n+    __ BIND(L_cc20_const);\n+    __ emit_int64(0x0000000100000000UL);\n+    __ emit_int64(0x0000000300000002UL);\n@@ -4522,0 +4477,1 @@\n+    int i, j;\n@@ -4526,0 +4482,12 @@\n+    const FloatRegister ctrAddOverlay = v28;\n+    const FloatRegister lrot8Tbl = v29;\n+\n+    \/\/ Organize SIMD registers in an array that facilitates\n+    \/\/ putting repetitive opcodes into loop structures.  It is\n+    \/\/ important that each grouping of 4 registers is monotonically\n+    \/\/ increasing to support the requirements of multi-register\n+    \/\/ instructions (e.g. ld4r, st4, etc.)\n+    const FloatRegister workSt[16] = {\n+         v4,  v5,  v6,  v7, v16, v17, v18, v19,\n+        v20, v21, v22, v23, v24, v25, v26, v27\n+    };\n@@ -4527,57 +4495,34 @@\n-    const FloatRegister aState = v0;\n-    const FloatRegister bState = v1;\n-    const FloatRegister cState = v2;\n-    const FloatRegister dState = v3;\n-    const FloatRegister a1Vec = v4;\n-    const FloatRegister b1Vec = v5;\n-    const FloatRegister c1Vec = v6;\n-    const FloatRegister d1Vec = v7;\n-    \/\/ Skip the callee-saved registers v8 - v15\n-    const FloatRegister a2Vec = v16;\n-    const FloatRegister b2Vec = v17;\n-    const FloatRegister c2Vec = v18;\n-    const FloatRegister d2Vec = v19;\n-    const FloatRegister a3Vec = v20;\n-    const FloatRegister b3Vec = v21;\n-    const FloatRegister c3Vec = v22;\n-    const FloatRegister d3Vec = v23;\n-    const FloatRegister a4Vec = v24;\n-    const FloatRegister b4Vec = v25;\n-    const FloatRegister c4Vec = v26;\n-    const FloatRegister d4Vec = v27;\n-    const FloatRegister scratch = v28;\n-    const FloatRegister addMask = v29;\n-    const FloatRegister lrot8Tbl = v30;\n-\n-    \/\/ Load the initial state in the first 4 quadword registers,\n-    \/\/ then copy the initial state into the next 4 quadword registers\n-    \/\/ that will be used for the working state.\n-    __ ld1(aState, bState, cState, dState, __ T16B, Address(state));\n-\n-    \/\/ Load the index register for 2 constant 128-bit data fields.\n-    \/\/ The first represents the +1\/+0\/+0\/+0 add mask.  The second is\n-    \/\/ the 8-bit left rotation.\n-    __ adr(tmpAddr, L_Q_cc20_const);\n-    __ ldpq(addMask, lrot8Tbl, Address(tmpAddr));\n-\n-    __ mov(a1Vec, __ T16B, aState);\n-    __ mov(b1Vec, __ T16B, bState);\n-    __ mov(c1Vec, __ T16B, cState);\n-    __ mov(d1Vec, __ T16B, dState);\n-\n-    __ mov(a2Vec, __ T16B, aState);\n-    __ mov(b2Vec, __ T16B, bState);\n-    __ mov(c2Vec, __ T16B, cState);\n-    __ addv(d2Vec, __ T4S, d1Vec, addMask);\n-\n-    __ mov(a3Vec, __ T16B, aState);\n-    __ mov(b3Vec, __ T16B, bState);\n-    __ mov(c3Vec, __ T16B, cState);\n-    __ addv(d3Vec, __ T4S, d2Vec, addMask);\n-\n-    __ mov(a4Vec, __ T16B, aState);\n-    __ mov(b4Vec, __ T16B, bState);\n-    __ mov(c4Vec, __ T16B, cState);\n-    __ addv(d4Vec, __ T4S, d3Vec, addMask);\n-\n-    \/\/ Set up the 10 iteration loop\n+    \/\/ Pull in constant data.  The first 16 bytes are the add overlay\n+    \/\/ which is applied to the vector holding the counter (state[12]).\n+    \/\/ The second 16 bytes is the index register for the 8-bit left\n+    \/\/ rotation tbl instruction.\n+    __ adr(tmpAddr, L_cc20_const);\n+    __ ldpq(ctrAddOverlay, lrot8Tbl, Address(tmpAddr));\n+\n+    \/\/ Load from memory and interlace across 16 SIMD registers,\n+    \/\/ With each word from memory being broadcast to all lanes of\n+    \/\/ each successive SIMD register.\n+    \/\/      Addr(0) -> All lanes in workSt[i]\n+    \/\/      Addr(4) -> All lanes workSt[i + 1], etc.\n+    __ mov(tmpAddr, state);\n+    for (i = 0; i < 16; i += 4) {\n+      __ ld4r(workSt[i], workSt[i + 1], workSt[i + 2], workSt[i + 3], __ T4S,\n+          __ post(tmpAddr, 16));\n+    }\n+    __ addv(workSt[12], __ T4S, workSt[12], ctrAddOverlay); \/\/ Add ctr overlay\n+\n+    \/\/ Before entering the loop, create 5 4-register arrays.  These\n+    \/\/ will hold the 4 registers that represent the a\/b\/c\/d fields\n+    \/\/ in the quarter round operation.  For instance the \"b\" field\n+    \/\/ for the first 4 quarter round operations is the set of v16\/v17\/v18\/v19,\n+    \/\/ but in the second 4 quarter rounds it gets adjusted to v17\/v18\/v19\/v16\n+    \/\/ since it is part of a diagonal organization.  The aSet and scratch\n+    \/\/ register sets are defined at declaration time because they do not change\n+    \/\/ organization at any point during the 20-round processing.\n+    FloatRegister aSet[4] = { v4, v5, v6, v7 };\n+    FloatRegister bSet[4];\n+    FloatRegister cSet[4];\n+    FloatRegister dSet[4];\n+    FloatRegister scratch[4] = { v0, v1, v2, v3 };\n+\n+    \/\/ Set up the 10 iteration loop and perform all 8 quarter round ops\n@@ -4585,38 +4530,51 @@\n-    __ BIND(L_Q_twoRounds);\n-\n-    \/\/ The first set of operations on the vectors covers the first 4 quarter\n-    \/\/ round operations:\n-    \/\/  Qround(state, 0, 4, 8,12)\n-    \/\/  Qround(state, 1, 5, 9,13)\n-    \/\/  Qround(state, 2, 6,10,14)\n-    \/\/  Qround(state, 3, 7,11,15)\n-    __ cc20_quarter_round(a1Vec, b1Vec, c1Vec, d1Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a2Vec, b2Vec, c2Vec, d2Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a3Vec, b3Vec, c3Vec, d3Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a4Vec, b4Vec, c4Vec, d4Vec, scratch, lrot8Tbl);\n-\n-    \/\/ Shuffle the b1Vec\/c1Vec\/d1Vec to reorganize the state vectors to\n-    \/\/ diagonals. The a1Vec does not need to change orientation.\n-    __ cc20_shift_lane_org(b1Vec, c1Vec, d1Vec, true);\n-    __ cc20_shift_lane_org(b2Vec, c2Vec, d2Vec, true);\n-    __ cc20_shift_lane_org(b3Vec, c3Vec, d3Vec, true);\n-    __ cc20_shift_lane_org(b4Vec, c4Vec, d4Vec, true);\n-\n-    \/\/ The second set of operations on the vectors covers the second 4 quarter\n-    \/\/ round operations, now acting on the diagonals:\n-    \/\/  Qround(state, 0, 5,10,15)\n-    \/\/  Qround(state, 1, 6,11,12)\n-    \/\/  Qround(state, 2, 7, 8,13)\n-    \/\/  Qround(state, 3, 4, 9,14)\n-    __ cc20_quarter_round(a1Vec, b1Vec, c1Vec, d1Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a2Vec, b2Vec, c2Vec, d2Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a3Vec, b3Vec, c3Vec, d3Vec, scratch, lrot8Tbl);\n-    __ cc20_quarter_round(a4Vec, b4Vec, c4Vec, d4Vec, scratch, lrot8Tbl);\n-\n-    \/\/ Before we start the next iteration, we need to perform shuffles\n-    \/\/ on the b\/c\/d vectors to move them back to columnar organizations\n-    \/\/ from their current diagonal orientation.\n-    __ cc20_shift_lane_org(b1Vec, c1Vec, d1Vec, false);\n-    __ cc20_shift_lane_org(b2Vec, c2Vec, d2Vec, false);\n-    __ cc20_shift_lane_org(b3Vec, c3Vec, d3Vec, false);\n-    __ cc20_shift_lane_org(b4Vec, c4Vec, d4Vec, false);\n+    __ BIND(L_twoRounds);\n+\n+    \/\/ Set to columnar organization and do the following 4 quarter-rounds:\n+    \/\/ QUARTERROUND(0, 4, 8, 12)\n+    \/\/ QUARTERROUND(1, 5, 9, 13)\n+    \/\/ QUARTERROUND(2, 6, 10, 14)\n+    \/\/ QUARTERROUND(3, 7, 11, 15)\n+    __ cc20_set_qr_registers(bSet, workSt, 4, 5, 6, 7);\n+    __ cc20_set_qr_registers(cSet, workSt, 8, 9, 10, 11);\n+    __ cc20_set_qr_registers(dSet, workSt, 12, 13, 14, 15);\n+\n+    __ cc20_qr_add4(aSet, bSet);                    \/\/ a += b\n+    __ cc20_qr_xor4(dSet, aSet, dSet);              \/\/ d ^= a\n+    __ cc20_qr_lrot4(dSet, dSet, 16, lrot8Tbl);     \/\/ d <<<= 16\n+\n+    __ cc20_qr_add4(cSet, dSet);                    \/\/ c += d\n+    __ cc20_qr_xor4(bSet, cSet, scratch);           \/\/ b ^= c (scratch)\n+    __ cc20_qr_lrot4(scratch, bSet, 12, lrot8Tbl);  \/\/ b <<<= 12\n+\n+    __ cc20_qr_add4(aSet, bSet);                    \/\/ a += b\n+    __ cc20_qr_xor4(dSet, aSet, dSet);              \/\/ d ^= a\n+    __ cc20_qr_lrot4(dSet, dSet, 8, lrot8Tbl);      \/\/ d <<<= 8\n+\n+    __ cc20_qr_add4(cSet, dSet);                    \/\/ c += d\n+    __ cc20_qr_xor4(bSet, cSet, scratch);           \/\/ b ^= c (scratch)\n+    __ cc20_qr_lrot4(scratch, bSet, 7, lrot8Tbl);   \/\/ b <<<= 12\n+\n+    \/\/ Set to diagonal organization and do the next 4 quarter-rounds:\n+    \/\/ QUARTERROUND(0, 5, 10, 15)\n+    \/\/ QUARTERROUND(1, 6, 11, 12)\n+    \/\/ QUARTERROUND(2, 7, 8, 13)\n+    \/\/ QUARTERROUND(3, 4, 9, 14)\n+    __ cc20_set_qr_registers(bSet, workSt, 5, 6, 7, 4);\n+    __ cc20_set_qr_registers(cSet, workSt, 10, 11, 8, 9);\n+    __ cc20_set_qr_registers(dSet, workSt, 15, 12, 13, 14);\n+\n+    __ cc20_qr_add4(aSet, bSet);                    \/\/ a += b\n+    __ cc20_qr_xor4(dSet, aSet, dSet);              \/\/ d ^= a\n+    __ cc20_qr_lrot4(dSet, dSet, 16, lrot8Tbl);     \/\/ d <<<= 16\n+\n+    __ cc20_qr_add4(cSet, dSet);                    \/\/ c += d\n+    __ cc20_qr_xor4(bSet, cSet, scratch);           \/\/ b ^= c (scratch)\n+    __ cc20_qr_lrot4(scratch, bSet, 12, lrot8Tbl);  \/\/ b <<<= 12\n+\n+    __ cc20_qr_add4(aSet, bSet);                    \/\/ a += b\n+    __ cc20_qr_xor4(dSet, aSet, dSet);              \/\/ d ^= a\n+    __ cc20_qr_lrot4(dSet, dSet, 8, lrot8Tbl);      \/\/ d <<<= 8\n+\n+    __ cc20_qr_add4(cSet, dSet);                    \/\/ c += d\n+    __ cc20_qr_xor4(bSet, cSet, scratch);           \/\/ b ^= c (scratch)\n+    __ cc20_qr_lrot4(scratch, bSet, 7, lrot8Tbl);   \/\/ b <<<= 12\n@@ -4626,34 +4584,29 @@\n-    __ cbnz(loopCtr, L_Q_twoRounds);\n-\n-    \/\/ Once the counter reaches zero, we fall out of the loop\n-    \/\/ and need to add the initial state back into the working state\n-    \/\/ represented by the a\/b\/c\/d1Vec registers.  This is destructive\n-    \/\/ on the dState register but we no longer will need it.\n-    __ addv(a1Vec, __ T4S, a1Vec, aState);\n-    __ addv(b1Vec, __ T4S, b1Vec, bState);\n-    __ addv(c1Vec, __ T4S, c1Vec, cState);\n-    __ addv(d1Vec, __ T4S, d1Vec, dState);\n-\n-    __ addv(a2Vec, __ T4S, a2Vec, aState);\n-    __ addv(b2Vec, __ T4S, b2Vec, bState);\n-    __ addv(c2Vec, __ T4S, c2Vec, cState);\n-    __ addv(dState, __ T4S, dState, addMask);\n-    __ addv(d2Vec, __ T4S, d2Vec, dState);\n-\n-    __ addv(a3Vec, __ T4S, a3Vec, aState);\n-    __ addv(b3Vec, __ T4S, b3Vec, bState);\n-    __ addv(c3Vec, __ T4S, c3Vec, cState);\n-    __ addv(dState, __ T4S, dState, addMask);\n-    __ addv(d3Vec, __ T4S, d3Vec, dState);\n-\n-    __ addv(a4Vec, __ T4S, a4Vec, aState);\n-    __ addv(b4Vec, __ T4S, b4Vec, bState);\n-    __ addv(c4Vec, __ T4S, c4Vec, cState);\n-    __ addv(dState, __ T4S, dState, addMask);\n-    __ addv(d4Vec, __ T4S, d4Vec, dState);\n-\n-    \/\/ Write the final state back to the result buffer\n-    __ st1(a1Vec, b1Vec, c1Vec, d1Vec, __ T16B, __ post(keystream, 64));\n-    __ st1(a2Vec, b2Vec, c2Vec, d2Vec, __ T16B, __ post(keystream, 64));\n-    __ st1(a3Vec, b3Vec, c3Vec, d3Vec, __ T16B, __ post(keystream, 64));\n-    __ st1(a4Vec, b4Vec, c4Vec, d4Vec, __ T16B, __ post(keystream, 64));\n+    __ cbnz(loopCtr, L_twoRounds);\n+\n+    __ mov(tmpAddr, state);\n+\n+    \/\/ Add the starting state back to the post-loop keystream\n+    \/\/ state.  We read\/interlace the state array from memory into\n+    \/\/ 4 registers similar to what we did in the beginning.  Then\n+    \/\/ add the counter overlay onto workSt[12] at the end.\n+    for (i = 0; i < 16; i += 4) {\n+      __ ld4r(v0, v1, v2, v3, __ T4S, __ post(tmpAddr, 16));\n+      __ addv(workSt[i], __ T4S, workSt[i], v0);\n+      __ addv(workSt[i + 1], __ T4S, workSt[i + 1], v1);\n+      __ addv(workSt[i + 2], __ T4S, workSt[i + 2], v2);\n+      __ addv(workSt[i + 3], __ T4S, workSt[i + 3], v3);\n+    }\n+    __ addv(workSt[12], __ T4S, workSt[12], ctrAddOverlay); \/\/ Add ctr overlay\n+\n+    \/\/ Write working state into the keystream buffer.  This is accomplished\n+    \/\/ by taking the lane \"i\" from each of the four vectors and writing\n+    \/\/ it to consecutive 4-byte offsets, then post-incrementing by 16 and\n+    \/\/ repeating with the next 4 vectors until all 16 vectors have been used.\n+    \/\/ Then move to the next lane and repeat the process until all lanes have\n+    \/\/ been written.\n+    for (i = 0; i < 4; i++) {\n+      for (j = 0; j < 16; j += 4) {\n+        __ st4(workSt[j], workSt[j + 1], workSt[j + 2], workSt[j + 3], __ S, i,\n+            __ post(keystream, 16));\n+      }\n+    }\n@@ -7033,0 +6986,41 @@\n+  \/**\n+   *  Arguments:\n+   *\n+   * Inputs:\n+   *   c_rarg0   - int crc\n+   *   c_rarg1   - byte* buf\n+   *   c_rarg2   - int length\n+   *\n+   * Output:\n+   *       rax   - int crc result\n+   *\/\n+  address generate_updateBytesCRC32() {\n+    assert(UseCRC32Intrinsics, \"what are we doing here?\");\n+\n+    __ align(CodeEntryAlignment);\n+    StubGenStubId stub_id = StubGenStubId::updateBytesCRC32_id;\n+    StubCodeMark mark(this, stub_id);\n+\n+    address start = __ pc();\n+\n+    const Register crc   = c_rarg0;  \/\/ crc\n+    const Register buf   = c_rarg1;  \/\/ source java byte array address\n+    const Register len   = c_rarg2;  \/\/ length\n+    const Register table0 = c_rarg3; \/\/ crc_table address\n+    const Register table1 = c_rarg4;\n+    const Register table2 = c_rarg5;\n+    const Register table3 = c_rarg6;\n+    const Register tmp3 = c_rarg7;\n+\n+    BLOCK_COMMENT(\"Entry:\");\n+    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+    __ kernel_crc32(crc, buf, len,\n+              table0, table1, table2, table3, rscratch1, rscratch2, tmp3);\n+\n+    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -11564,1 +11558,1 @@\n-      StubRoutines::_chacha20Block = generate_chacha20Block_qrpar();\n+      StubRoutines::_chacha20Block = generate_chacha20Block_blockpar();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":201,"deletions":207,"binary":false,"changes":408,"status":"modified"},{"patch":"@@ -1987,1 +1987,1 @@\n-  __ str(r0, Address(rthread, JavaThread::vm_result_offset()));\n+  __ str(r0, Address(rthread, JavaThread::vm_result_oop_offset()));\n@@ -1991,1 +1991,1 @@\n-  __ get_vm_result(r0, rthread);\n+  __ get_vm_result_oop(r0, rthread);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  __ get_vm_result_2(flags, rthread);\n+  __ get_vm_result_metadata(flags, rthread);\n@@ -3948,2 +3948,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(r0, rthread);\n+  __ get_vm_result_metadata(r0, rthread);\n@@ -4002,2 +4001,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(r0, rthread);\n+  __ get_vm_result_metadata(r0, rthread);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,0 +164,3 @@\n+    if (FLAG_IS_DEFAULT(AlwaysMergeDMB)) {\n+      FLAG_SET_DEFAULT(AlwaysMergeDMB, false);\n+    }\n@@ -717,1 +720,0 @@\n-  fprintf(stderr, \"_features_string = \\\"%s\\\"\", _features_string);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    get_vm_result(oop_result1, Rtemp);\n+    get_vm_result_oop(oop_result1, Rtemp);\n@@ -77,1 +77,1 @@\n-    get_vm_result_2(metadata_result, Rtemp);\n+    get_vm_result_metadata(metadata_result, Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1ThreadLocalData.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetNMethod_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-    get_vm_result(oop_result, tmp);\n+    get_vm_result_oop(oop_result, tmp);\n@@ -531,1 +531,1 @@\n-void MacroAssembler::get_vm_result(Register oop_result, Register tmp) {\n+void MacroAssembler::get_vm_result_oop(Register oop_result, Register tmp) {\n@@ -533,2 +533,2 @@\n-  ldr(oop_result, Address(Rthread, JavaThread::vm_result_offset()));\n-  str(zero_register(tmp), Address(Rthread, JavaThread::vm_result_offset()));\n+  ldr(oop_result, Address(Rthread, JavaThread::vm_result_oop_offset()));\n+  str(zero_register(tmp), Address(Rthread, JavaThread::vm_result_oop_offset()));\n@@ -538,1 +538,1 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result, Register tmp) {\n+void MacroAssembler::get_vm_result_metadata(Register metadata_result, Register tmp) {\n@@ -540,2 +540,2 @@\n-  ldr(metadata_result, Address(Rthread, JavaThread::vm_result_2_offset()));\n-  str(zero_register(tmp), Address(Rthread, JavaThread::vm_result_2_offset()));\n+  ldr(metadata_result, Address(Rthread, JavaThread::vm_result_metadata_offset()));\n+  str(zero_register(tmp), Address(Rthread, JavaThread::vm_result_metadata_offset()));\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -260,2 +260,2 @@\n-  void get_vm_result(Register oop_result, Register tmp);\n-  void get_vm_result_2(Register metadata_result, Register tmp);\n+  void get_vm_result_oop(Register oop_result, Register tmp);\n+  void get_vm_result_metadata(Register metadata_result, Register tmp);\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1720,1 +1720,1 @@\n-  __ get_vm_result_2(R1, Rtemp);\n+  __ get_vm_result_metadata(R1, Rtemp);\n@@ -1733,1 +1733,1 @@\n-  __ str(Rzero, Address(Rthread, JavaThread::vm_result_2_offset()));\n+  __ str(Rzero, Address(Rthread, JavaThread::vm_result_metadata_offset()));\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1470,1 +1470,1 @@\n-  __ str(R0_tos, Address(Rthread, JavaThread::vm_result_offset()));\n+  __ str(R0_tos, Address(Rthread, JavaThread::vm_result_oop_offset()));\n@@ -1474,1 +1474,1 @@\n-  __ get_vm_result(Rexception_obj, Rtemp);\n+  __ get_vm_result_oop(Rexception_obj, Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -541,1 +541,1 @@\n-  __ get_vm_result_2(flags, rtmp);\n+  __ get_vm_result_metadata(flags, rtmp);\n@@ -4146,2 +4146,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(Rsuper, Robj);\n+  __ get_vm_result_metadata(Rsuper, Robj);\n@@ -4217,2 +4216,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(Rsuper, Robj);\n+  __ get_vm_result_metadata(Rsuper, Robj);\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,7 +86,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(Rscratch, Roop);\n-    lbz(Rscratch, in_bytes(Klass::misc_flags_offset()), Rscratch);\n-    testbitdi(CR0, R0, Rscratch, exact_log2(KlassFlags::_misc_is_value_based_class));\n-    bne(CR0, slow_int);\n-  }\n-\n@@ -96,0 +89,8 @@\n+\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(Rscratch, Roop);\n+      lbz(Rscratch, in_bytes(Klass::misc_flags_offset()), Rscratch);\n+      testbitdi(CR0, R0, Rscratch, exact_log2(KlassFlags::_misc_is_value_based_class));\n+      bne(CR0, slow_int);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        std(R0, in_bytes(JavaThread::vm_result_offset()), R16_thread);\n+        std(R0, in_bytes(JavaThread::vm_result_oop_offset()), R16_thread);\n@@ -88,1 +88,1 @@\n-        std(R0, in_bytes(JavaThread::vm_result_2_offset()), R16_thread);\n+        std(R0, in_bytes(JavaThread::vm_result_metadata_offset()), R16_thread);\n@@ -115,1 +115,1 @@\n-    get_vm_result(oop_result1);\n+    get_vm_result_oop(oop_result1);\n@@ -118,1 +118,1 @@\n-    get_vm_result_2(metadata_result);\n+    get_vm_result_metadata(metadata_result);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"code\/nmethod.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"code\/nmethod.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/gcArguments.hpp\"\n@@ -29,0 +28,3 @@\n+#include \"gc\/shared\/gcArguments.hpp\"\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -37,2 +39,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -26,0 +25,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -961,7 +961,0 @@\n-    if (DiagnoseSyncOnValueBasedClasses != 0) {\n-      load_klass(tmp, object);\n-      lbz(tmp, in_bytes(Klass::misc_flags_offset()), tmp);\n-      testbitdi(CR0, R0, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n-      bne(CR0, slow_case);\n-    }\n-\n@@ -972,0 +965,8 @@\n+\n+      if (DiagnoseSyncOnValueBasedClasses != 0) {\n+        load_klass(tmp, object);\n+        lbz(tmp, in_bytes(Klass::misc_flags_offset()), tmp);\n+        testbitdi(CR0, R0, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n+        bne(CR0, slow_case);\n+      }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-    get_vm_result(oop_result);\n+    get_vm_result_oop(oop_result);\n@@ -3003,1 +3003,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -3428,1 +3428,1 @@\n-void MacroAssembler::get_vm_result(Register oop_result) {\n+void MacroAssembler::get_vm_result_oop(Register oop_result) {\n@@ -3431,1 +3431,1 @@\n-  \/\/   R16_thread->in_bytes(JavaThread::vm_result_offset())\n+  \/\/   R16_thread->in_bytes(JavaThread::vm_result_oop_offset())\n@@ -3435,1 +3435,1 @@\n-  \/\/   R16_thread->in_bytes(JavaThread::vm_result_offset())\n+  \/\/   R16_thread->in_bytes(JavaThread::vm_result_oop_offset())\n@@ -3437,1 +3437,1 @@\n-  ld(oop_result, in_bytes(JavaThread::vm_result_offset()), R16_thread);\n+  ld(oop_result, in_bytes(JavaThread::vm_result_oop_offset()), R16_thread);\n@@ -3439,1 +3439,1 @@\n-  std(R0, in_bytes(JavaThread::vm_result_offset()), R16_thread);\n+  std(R0, in_bytes(JavaThread::vm_result_oop_offset()), R16_thread);\n@@ -3444,1 +3444,1 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result) {\n+void MacroAssembler::get_vm_result_metadata(Register metadata_result) {\n@@ -3447,1 +3447,1 @@\n-  \/\/   R16_thread->in_bytes(JavaThread::vm_result_2_offset())\n+  \/\/   R16_thread->in_bytes(JavaThread::vm_result_metadata_offset())\n@@ -3451,1 +3451,1 @@\n-  \/\/   R16_thread->in_bytes(JavaThread::vm_result_2_offset())\n+  \/\/   R16_thread->in_bytes(JavaThread::vm_result_metadata_offset())\n@@ -3453,1 +3453,1 @@\n-  ld(metadata_result, in_bytes(JavaThread::vm_result_2_offset()), R16_thread);\n+  ld(metadata_result, in_bytes(JavaThread::vm_result_metadata_offset()), R16_thread);\n@@ -3455,1 +3455,1 @@\n-  std(R0, in_bytes(JavaThread::vm_result_2_offset()), R16_thread);\n+  std(R0, in_bytes(JavaThread::vm_result_metadata_offset()), R16_thread);\n@@ -5002,1 +5002,1 @@\n-  assert_different_registers(box, obj, t1, t2);\n+  assert_different_registers(box, obj, t1, t2, R0);\n@@ -5005,2 +5005,0 @@\n-  const Register top = t1;\n-  const Register mark = t2;\n@@ -5010,1 +5008,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -5015,0 +5013,10 @@\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n+    load_klass(t1, obj);\n+    lbz(t1, in_bytes(Klass::misc_flags_offset()), t1);\n+    testbitdi(CR0, R0, t1, exact_log2(KlassFlags::_misc_is_value_based_class));\n+    bne(CR0, slow);\n+  }\n+\n+  const Register top = t1;\n+  const Register mark = t2;\n+\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -748,2 +748,2 @@\n-  void get_vm_result  (Register oop_result);\n-  void get_vm_result_2(Register metadata_result);\n+  void get_vm_result_oop(Register oop_result);\n+  void get_vm_result_metadata(Register metadata_result);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3407,1 +3407,1 @@\n-  __ get_vm_result_2(R19_method);\n+  __ get_vm_result_metadata(R19_method);\n@@ -3421,1 +3421,1 @@\n-  __ std(R11_scratch1, in_bytes(JavaThread::vm_result_offset()), R16_thread);\n+  __ std(R11_scratch1, in_bytes(JavaThread::vm_result_oop_offset()), R16_thread);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2163,1 +2163,1 @@\n-    __ std(Rexception, in_bytes(JavaThread::vm_result_offset()), R16_thread);\n+    __ std(Rexception, in_bytes(JavaThread::vm_result_oop_offset()), R16_thread);\n@@ -2168,1 +2168,1 @@\n-    __ get_vm_result(Rexception);\n+    __ get_vm_result_oop(Rexception);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-  __ get_vm_result_2(flags);\n+  __ get_vm_result_metadata(flags);\n@@ -3967,1 +3967,1 @@\n-  __ get_vm_result_2(RspecifiedKlass);\n+  __ get_vm_result_metadata(RspecifiedKlass);\n@@ -4029,1 +4029,1 @@\n-  __ get_vm_result_2(RspecifiedKlass);\n+  __ get_vm_result_metadata(RspecifiedKlass);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,7 +64,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(hdr, obj);\n-    lbu(hdr, Address(hdr, Klass::misc_flags_offset()));\n-    test_bit(temp, hdr, exact_log2(KlassFlags::_misc_is_value_based_class));\n-    bnez(temp, slow_case, true \/* is_far *\/);\n-  }\n-\n@@ -74,0 +67,8 @@\n+\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(hdr, obj);\n+      lbu(hdr, Address(hdr, Klass::misc_flags_offset()));\n+      test_bit(temp, hdr, exact_log2(KlassFlags::_misc_is_value_based_class));\n+      bnez(temp, slow_case, \/* is_far *\/ true);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-      sd(zr, Address(xthread, JavaThread::vm_result_offset()));\n+      sd(zr, Address(xthread, JavaThread::vm_result_oop_offset()));\n@@ -95,1 +95,1 @@\n-      sd(zr, Address(xthread, JavaThread::vm_result_2_offset()));\n+      sd(zr, Address(xthread, JavaThread::vm_result_metadata_offset()));\n@@ -109,1 +109,1 @@\n-    get_vm_result(oop_result, xthread);\n+    get_vm_result_oop(oop_result, xthread);\n@@ -112,1 +112,1 @@\n-    get_vm_result_2(metadata_result, xthread);\n+    get_vm_result_metadata(metadata_result, xthread);\n@@ -430,2 +430,2 @@\n-      __ sd(zr, Address(xthread, JavaThread::vm_result_offset()));\n-      __ sd(zr, Address(xthread, JavaThread::vm_result_2_offset()));\n+      __ sd(zr, Address(xthread, JavaThread::vm_result_oop_offset()));\n+      __ sd(zr, Address(xthread, JavaThread::vm_result_metadata_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -2159,0 +2159,30 @@\n+void C2_MacroAssembler::enc_cmove_cmp_fp(int cmpFlag, FloatRegister op1, FloatRegister op2, Register dst, Register src, bool is_single) {\n+  int op_select = cmpFlag & (~unsigned_branch_mask);\n+\n+  switch (op_select) {\n+    case BoolTest::eq:\n+      cmov_cmp_fp_eq(op1, op2, dst, src, is_single);\n+      break;\n+    case BoolTest::ne:\n+      cmov_cmp_fp_ne(op1, op2, dst, src, is_single);\n+      break;\n+    case BoolTest::le:\n+      cmov_cmp_fp_le(op1, op2, dst, src, is_single);\n+      break;\n+    case BoolTest::ge:\n+      assert(false, \"Should go to BoolTest::le case\");\n+      ShouldNotReachHere();\n+      break;\n+    case BoolTest::lt:\n+      cmov_cmp_fp_lt(op1, op2, dst, src, is_single);\n+      break;\n+    case BoolTest::gt:\n+      assert(false, \"Should go to BoolTest::lt case\");\n+      ShouldNotReachHere();\n+      break;\n+    default:\n+      assert(false, \"unsupported compare condition\");\n+      ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -132,0 +132,4 @@\n+  void enc_cmove_cmp_fp(int cmpFlag,\n+                        FloatRegister op1, FloatRegister op2,\n+                        Register dst, Register src, bool is_single);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-define_pd_global(intx, ConditionalMoveLimit,         0);\n+define_pd_global(intx, ConditionalMoveLimit,         3);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_globals_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -33,3 +35,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n-#include \"interpreter\/interpreter.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"interpreter\/interpreter.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -739,7 +739,0 @@\n-    if (DiagnoseSyncOnValueBasedClasses != 0) {\n-      load_klass(tmp, obj_reg);\n-      lbu(tmp, Address(tmp, Klass::misc_flags_offset()));\n-      test_bit(tmp, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n-      bnez(tmp, slow_case);\n-    }\n-\n@@ -750,0 +743,8 @@\n+\n+      if (DiagnoseSyncOnValueBasedClasses != 0) {\n+        load_klass(tmp, obj_reg);\n+        lbu(tmp, Address(tmp, Klass::misc_flags_offset()));\n+        test_bit(tmp, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n+        bnez(tmp, slow_case);\n+      }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-    get_vm_result(oop_result, java_thread);\n+    get_vm_result_oop(oop_result, java_thread);\n@@ -505,3 +505,3 @@\n-void MacroAssembler::get_vm_result(Register oop_result, Register java_thread) {\n-  ld(oop_result, Address(java_thread, JavaThread::vm_result_offset()));\n-  sd(zr, Address(java_thread, JavaThread::vm_result_offset()));\n+void MacroAssembler::get_vm_result_oop(Register oop_result, Register java_thread) {\n+  ld(oop_result, Address(java_thread, JavaThread::vm_result_oop_offset()));\n+  sd(zr, Address(java_thread, JavaThread::vm_result_oop_offset()));\n@@ -511,3 +511,3 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result, Register java_thread) {\n-  ld(metadata_result, Address(java_thread, JavaThread::vm_result_2_offset()));\n-  sd(zr, Address(java_thread, JavaThread::vm_result_2_offset()));\n+void MacroAssembler::get_vm_result_metadata(Register metadata_result, Register java_thread) {\n+  ld(metadata_result, Address(java_thread, JavaThread::vm_result_metadata_offset()));\n+  sd(zr, Address(java_thread, JavaThread::vm_result_metadata_offset()));\n@@ -1270,0 +1270,124 @@\n+\/\/ ----------- cmove, compare float -----------\n+\n+\/\/ Move src to dst only if cmp1 == cmp2,\n+\/\/ otherwise leave dst unchanged, including the case where one of them is NaN.\n+\/\/ Clarification:\n+\/\/   java code      :  cmp1 != cmp2 ? dst : src\n+\/\/   transformed to :  CMove dst, (cmp1 eq cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_eq(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      feq_s(t0, cmp1, cmp2);\n+    } else {\n+      feq_d(t0, cmp1, cmp2);\n+    }\n+    czero_nez(dst, dst, t0);\n+    czero_eqz(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 != cmp2, including the case of NaN\n+    \/\/ not jump (i.e. move src to dst) if cmp1 == cmp2\n+    float_bne(cmp1, cmp2, no_set);\n+  } else {\n+    double_bne(cmp1, cmp2, no_set);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n+\/\/ Keep dst unchanged only if cmp1 == cmp2,\n+\/\/ otherwise move src to dst, including the case where one of them is NaN.\n+\/\/ Clarification:\n+\/\/   java code      :  cmp1 == cmp2 ? dst : src\n+\/\/   transformed to :  CMove dst, (cmp1 ne cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_ne(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      feq_s(t0, cmp1, cmp2);\n+    } else {\n+      feq_d(t0, cmp1, cmp2);\n+    }\n+    czero_eqz(dst, dst, t0);\n+    czero_nez(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 == cmp2\n+    \/\/ not jump (i.e. move src to dst) if cmp1 != cmp2, including the case of NaN\n+    float_beq(cmp1, cmp2, no_set);\n+  } else {\n+    double_beq(cmp1, cmp2, no_set);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n+\/\/ When cmp1 <= cmp2 or any of them is NaN then dst = src, otherwise, dst = dst\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  cmp2 < cmp1 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  cmp1 > cmp2 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 le cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_le(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      flt_s(t0, cmp2, cmp1);\n+    } else {\n+      flt_d(t0, cmp2, cmp1);\n+    }\n+    czero_eqz(dst, dst, t0);\n+    czero_nez(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 > cmp2\n+    \/\/ not jump (i.e. move src to dst) if cmp1 <= cmp2 or either is NaN\n+    float_bgt(cmp1, cmp2, no_set);\n+  } else {\n+    double_bgt(cmp1, cmp2, no_set);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n+\/\/ When cmp1 < cmp2 or any of them is NaN then dst = src, otherwise, dst = dst\n+\/\/ Clarification\n+\/\/   scenario 1:\n+\/\/     java code      :  cmp2 <= cmp1 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n+\/\/   scenario 2:\n+\/\/     java code      :  cmp1 >= cmp2 ? dst : src\n+\/\/     transformed to :  CMove dst, (cmp1 lt cmp2), dst, src\n+void MacroAssembler::cmov_cmp_fp_lt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single) {\n+  if (UseZicond) {\n+    if (is_single) {\n+      fle_s(t0, cmp2, cmp1);\n+    } else {\n+      fle_d(t0, cmp2, cmp1);\n+    }\n+    czero_eqz(dst, dst, t0);\n+    czero_nez(t0 , src, t0);\n+    orr(dst, dst, t0);\n+    return;\n+  }\n+  Label no_set;\n+  if (is_single) {\n+    \/\/ jump if cmp1 >= cmp2\n+    \/\/ not jump (i.e. move src to dst) if cmp1 < cmp2 or either is NaN\n+    float_bge(cmp1, cmp2, no_set);\n+  } else {\n+    double_bge(cmp1, cmp2, no_set);\n+  }\n+  mv(dst, src);\n+  bind(no_set);\n+}\n+\n@@ -6365,1 +6489,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -6369,0 +6493,7 @@\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n+    load_klass(tmp1, obj);\n+    lbu(tmp1, Address(tmp1, Klass::misc_flags_offset()));\n+    test_bit(tmp1, tmp1, exact_log2(KlassFlags::_misc_is_value_based_class));\n+    bnez(tmp1, slow, \/* is_far *\/ true);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":139,"deletions":8,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -125,2 +125,2 @@\n-  void get_vm_result(Register oop_result, Register java_thread);\n-  void get_vm_result_2(Register metadata_result, Register java_thread);\n+  void get_vm_result_oop(Register oop_result, Register java_thread);\n+  void get_vm_result_metadata(Register metadata_result, Register java_thread);\n@@ -660,0 +660,5 @@\n+  void cmov_cmp_fp_eq(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n+  void cmov_cmp_fp_ne(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n+  void cmov_cmp_fp_le(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n+  void cmov_cmp_fp_lt(FloatRegister cmp1, FloatRegister cmp2, Register dst, Register src, bool is_single);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1936,0 +1936,6 @@\n+\n+    case Op_CMoveF:\n+    case Op_CMoveD:\n+    case Op_CMoveP:\n+    case Op_CMoveN:\n+      return false;\n@@ -6448,1 +6454,0 @@\n-    int32_t con = (int32_t)$src2$$constant;\n@@ -6510,1 +6515,0 @@\n-    \/\/ src2 is imm, so actually call the addi\n@@ -6832,1 +6836,1 @@\n-\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n+\/\/ Only the low 5 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -6865,1 +6869,1 @@\n-\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n+\/\/ Only the low 5 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -6898,1 +6902,1 @@\n-\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n+\/\/ Only the low 5 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -6933,1 +6937,1 @@\n-\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n+\/\/ Only the low 6 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -6968,1 +6972,1 @@\n-\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n+\/\/ Only the low 6 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -7021,1 +7025,1 @@\n-\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n+\/\/ Only the low 6 bits of src2 are considered for the shift amount, all other bits are ignored.\n@@ -9943,0 +9947,3 @@\n+\n+\/\/ --------- CMoveI ---------\n+\n@@ -9948,1 +9955,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpI\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpI\\n\\t\"\n@@ -9965,1 +9972,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpU\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpU\\n\\t\"\n@@ -9982,1 +9989,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpL\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpL\\n\\t\"\n@@ -9999,1 +10006,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpUL\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpUL\\n\\t\"\n@@ -10011,0 +10018,34 @@\n+instruct cmovI_cmpF(iRegINoSp dst, iRegI src, fRegF op1, fRegF op2, cmpOp cop) %{\n+  match(Set dst (CMoveI (Binary cop (CmpF op1 op2)) (Binary dst src)));\n+  ins_cost(ALU_COST + BRANCH_COST);\n+\n+  format %{\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpF\\n\\t\"\n+  %}\n+\n+  ins_encode %{\n+    __ enc_cmove_cmp_fp($cop$$cmpcode,\n+                        as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg),\n+                        as_Register($dst$$reg), as_Register($src$$reg), true \/* is_single *\/);\n+  %}\n+\n+  ins_pipe(pipe_class_compare);\n+%}\n+\n+instruct cmovI_cmpD(iRegINoSp dst, iRegI src, fRegD op1, fRegD op2, cmpOp cop) %{\n+  match(Set dst (CMoveI (Binary cop (CmpD op1 op2)) (Binary dst src)));\n+  ins_cost(ALU_COST + BRANCH_COST);\n+\n+  format %{\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpD\\n\\t\"\n+  %}\n+\n+  ins_encode %{\n+    __ enc_cmove_cmp_fp($cop$$cmpcode | C2_MacroAssembler::double_branch_mask,\n+                        as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg),\n+                        as_Register($dst$$reg), as_Register($src$$reg), false \/* is_single *\/);\n+  %}\n+\n+  ins_pipe(pipe_class_compare);\n+%}\n+\n@@ -10016,1 +10057,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpN\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpN\\n\\t\"\n@@ -10033,1 +10074,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpP\\n\\t\"\n+    \"CMoveI $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovI_cmpP\\n\\t\"\n@@ -10045,0 +10086,2 @@\n+\/\/ --------- CMoveL ---------\n+\n@@ -10050,1 +10093,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpL\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpL\\n\\t\"\n@@ -10067,1 +10110,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpUL\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpUL\\n\\t\"\n@@ -10084,1 +10127,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpI\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpI\\n\\t\"\n@@ -10101,1 +10144,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpU\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpU\\n\\t\"\n@@ -10113,0 +10156,34 @@\n+instruct cmovL_cmpF(iRegLNoSp dst, iRegL src, fRegF op1, fRegF op2, cmpOp cop) %{\n+  match(Set dst (CMoveL (Binary cop (CmpF op1 op2)) (Binary dst src)));\n+  ins_cost(ALU_COST + BRANCH_COST);\n+\n+  format %{\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpF\\n\\t\"\n+  %}\n+\n+  ins_encode %{\n+    __ enc_cmove_cmp_fp($cop$$cmpcode,\n+                        as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg),\n+                        as_Register($dst$$reg), as_Register($src$$reg), true \/* is_single *\/);\n+  %}\n+\n+  ins_pipe(pipe_class_compare);\n+%}\n+\n+instruct cmovL_cmpD(iRegLNoSp dst, iRegL src, fRegD op1, fRegD op2, cmpOp cop) %{\n+  match(Set dst (CMoveL (Binary cop (CmpD op1 op2)) (Binary dst src)));\n+  ins_cost(ALU_COST + BRANCH_COST);\n+\n+  format %{\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpD\\n\\t\"\n+  %}\n+\n+  ins_encode %{\n+    __ enc_cmove_cmp_fp($cop$$cmpcode | C2_MacroAssembler::double_branch_mask,\n+                        as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg),\n+                        as_Register($dst$$reg), as_Register($src$$reg), false \/* is_single *\/);\n+  %}\n+\n+  ins_pipe(pipe_class_compare);\n+%}\n+\n@@ -10118,1 +10195,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpN\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpN\\n\\t\"\n@@ -10135,1 +10212,1 @@\n-    \"CMove $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpP\\n\\t\"\n+    \"CMoveL $dst, ($op1 $cop $op2), $dst, $src\\t#@cmovL_cmpP\\n\\t\"\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":97,"deletions":20,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-instruct rorI_imm_b(iRegINoSp dst, iRegI src, immI shift) %{\n+\/\/ Rotate Right Word Immediate\n+instruct rorI_imm_b(iRegINoSp dst, iRegIorL2I src, immI shift) %{\n@@ -42,0 +43,1 @@\n+\/\/ Rotate Right Immediate\n@@ -56,1 +58,3 @@\n-instruct rorI_reg_b(iRegINoSp dst, iRegI src, iRegI shift) %{\n+\/\/ Rotate Right Word Register\n+\/\/ Only the low 5 bits of shift value are used, all other bits are ignored.\n+instruct rorI_reg_b(iRegINoSp dst, iRegIorL2I src, iRegIorL2I shift) %{\n@@ -68,1 +72,3 @@\n-instruct rorL_reg_b(iRegLNoSp dst, iRegL src, iRegI shift) %{\n+\/\/ Rotate Right Register\n+\/\/ Only the low 6 bits of shift value are used, all other bits are ignored.\n+instruct rorL_reg_b(iRegLNoSp dst, iRegL src, iRegIorL2I shift) %{\n@@ -80,1 +86,3 @@\n-instruct rolI_reg_b(iRegINoSp dst, iRegI src, iRegI shift) %{\n+\/\/ Rotate Left Word Register\n+\/\/ Only the low 5 bits of shift value are used, all other bits are ignored.\n+instruct rolI_reg_b(iRegINoSp dst, iRegIorL2I src, iRegIorL2I shift) %{\n@@ -92,1 +100,3 @@\n-instruct rolL_reg_b(iRegLNoSp dst, iRegL src, iRegI shift) %{\n+\/\/ Rotate Left Register\n+\/\/ Only the low 6 bits of shift value are used, all other bits are ignored.\n+instruct rolL_reg_b(iRegLNoSp dst, iRegL src, iRegIorL2I shift) %{\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+      case Op_StoreVectorScatter:\n+      case Op_StoreVectorScatterMasked:\n@@ -3502,0 +3504,1 @@\n+\/\/ Only the low log2(SEW) bits of shift value are used, all other bits are ignored.\n@@ -3544,0 +3547,1 @@\n+\/\/ Only the low log2(SEW) bits of shift value are used, all other bits are ignored.\n@@ -3587,0 +3591,1 @@\n+\/\/ Only the low log2(SEW) bits of shift value are used, all other bits are ignored.\n@@ -3630,0 +3635,1 @@\n+\/\/ Only the low log2(SEW) bits of shift value are used, all other bits are ignored.\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2649,1 +2649,1 @@\n-  __ get_vm_result_2(xmethod, xthread);\n+  __ get_vm_result_metadata(xmethod, xthread);\n@@ -2667,1 +2667,1 @@\n-  __ sd(zr, Address(xthread, JavaThread::vm_result_offset()));\n+  __ sd(zr, Address(xthread, JavaThread::vm_result_oop_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1728,1 +1728,1 @@\n-  __ sd(x10, Address(xthread, JavaThread::vm_result_offset()));\n+  __ sd(x10, Address(xthread, JavaThread::vm_result_oop_offset()));\n@@ -1732,1 +1732,1 @@\n-  __ get_vm_result(x10, xthread);\n+  __ get_vm_result_oop(x10, xthread);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-  __ get_vm_result_2(flags, xthread);\n+  __ get_vm_result_metadata(flags, xthread);\n@@ -3660,2 +3660,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(x10, xthread);\n+  __ get_vm_result_metadata(x10, xthread);\n@@ -3715,2 +3714,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(x10, xthread);\n+  __ get_vm_result_metadata(x10, xthread);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -251,8 +251,0 @@\n-  if (UseCMoveUnconditionally) {\n-    FLAG_SET_DEFAULT(UseCMoveUnconditionally, false);\n-  }\n-\n-  if (ConditionalMoveLimit > 0) {\n-    FLAG_SET_DEFAULT(ConditionalMoveLimit, 0);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,6 +72,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(tmp, Roop);\n-    z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n-    branch_optimized(Assembler::bcondAllOne, slow_case);\n-  }\n-\n@@ -83,0 +77,7 @@\n+\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(tmp, Roop);\n+      z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+      branch_optimized(Assembler::bcondAllOne, slow_case);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-      clear_mem(Address(Z_thread, JavaThread::vm_result_offset()), sizeof(jlong));\n+      clear_mem(Address(Z_thread, JavaThread::vm_result_oop_offset()), sizeof(jlong));\n@@ -92,1 +92,1 @@\n-      clear_mem(Address(Z_thread, JavaThread::vm_result_2_offset()), sizeof(jlong));\n+      clear_mem(Address(Z_thread, JavaThread::vm_result_metadata_offset()), sizeof(jlong));\n@@ -112,1 +112,1 @@\n-    get_vm_result(oop_result1);\n+    get_vm_result_oop(oop_result1);\n@@ -115,1 +115,1 @@\n-    get_vm_result_2(metadata_result);\n+    get_vm_result_metadata(metadata_result);\n@@ -889,2 +889,2 @@\n-      __ clear_mem(Address(Z_thread, JavaThread::vm_result_offset()),   sizeof(oop));\n-      __ clear_mem(Address(Z_thread, JavaThread::vm_result_2_offset()), sizeof(Metadata*));\n+      __ clear_mem(Address(Z_thread, JavaThread::vm_result_oop_offset()),   sizeof(oop));\n+      __ clear_mem(Address(Z_thread, JavaThread::vm_result_metadata_offset()), sizeof(Metadata*));\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-#include \"registerSaver_s390.hpp\"\n-#include \"gc\/g1\/g1CardTable.hpp\"\n@@ -32,0 +30,1 @@\n+#include \"gc\/g1\/g1CardTable.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"registerSaver_s390.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1005,6 +1005,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(tmp, object);\n-    z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n-    z_btrue(slow_case);\n-  }\n-\n@@ -1015,0 +1009,6 @@\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(tmp, object);\n+      z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+      z_btrue(slow_case);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2307,1 +2307,1 @@\n-    get_vm_result(oop_result);\n+    get_vm_result_oop(oop_result);\n@@ -4070,3 +4070,3 @@\n-void MacroAssembler::get_vm_result(Register oop_result) {\n-  z_lg(oop_result, Address(Z_thread, JavaThread::vm_result_offset()));\n-  clear_mem(Address(Z_thread, JavaThread::vm_result_offset()), sizeof(void*));\n+void MacroAssembler::get_vm_result_oop(Register oop_result) {\n+  z_lg(oop_result, Address(Z_thread, JavaThread::vm_result_oop_offset()));\n+  clear_mem(Address(Z_thread, JavaThread::vm_result_oop_offset()), sizeof(void*));\n@@ -4077,3 +4077,3 @@\n-void MacroAssembler::get_vm_result_2(Register result) {\n-  z_lg(result, Address(Z_thread, JavaThread::vm_result_2_offset()));\n-  clear_mem(Address(Z_thread, JavaThread::vm_result_2_offset()), sizeof(void*));\n+void MacroAssembler::get_vm_result_metadata(Register result) {\n+  z_lg(result, Address(Z_thread, JavaThread::vm_result_metadata_offset()));\n+  clear_mem(Address(Z_thread, JavaThread::vm_result_metadata_offset()), sizeof(void*));\n@@ -4085,1 +4085,1 @@\n-  z_stg(oop_result, Address(Z_thread, JavaThread::vm_result_offset()));\n+  z_stg(oop_result, Address(Z_thread, JavaThread::vm_result_oop_offset()));\n@@ -6366,1 +6366,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -6371,0 +6371,6 @@\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n+    load_klass(temp1, obj);\n+    z_tm(Address(temp1, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+    z_brne(slow);\n+  }\n+\n@@ -6504,1 +6510,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -819,2 +819,2 @@\n-  void get_vm_result  (Register oop_result);\n-  void get_vm_result_2(Register result);\n+  void get_vm_result_oop  (Register oop_result);\n+  void get_vm_result_metadata(Register result);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-  __ get_vm_result_2(Z_method);\n+  __ get_vm_result_metadata(Z_method);\n@@ -3060,1 +3060,1 @@\n-  __ clear_mem(Address(Z_thread, JavaThread::vm_result_offset()), sizeof(jlong));\n+  __ clear_mem(Address(Z_thread, JavaThread::vm_result_oop_offset()), sizeof(jlong));\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2231,1 +2231,1 @@\n-  __ get_vm_result(Z_ARG1);     \/\/ Restore exception.\n+  __ get_vm_result_oop(Z_ARG1);     \/\/ Restore exception.\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-  __ get_vm_result_2(flags);\n+  __ get_vm_result_metadata(flags);\n@@ -4066,1 +4066,1 @@\n-  __ get_vm_result_2(Z_tos);\n+  __ get_vm_result_metadata(Z_tos);\n@@ -4138,1 +4138,1 @@\n-  __ get_vm_result_2(Z_tos);\n+  __ get_vm_result_metadata(Z_tos);\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2013,0 +2013,5 @@\n+void Assembler::serialize() {\n+  assert(VM_Version::supports_serialize(), \"\");\n+  emit_int24(0x0F, 0x01, 0xE8);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1235,0 +1235,3 @@\n+  \/\/ Serialize instruction stream\n+  void serialize();\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,6 +59,0 @@\n-  if (DiagnoseSyncOnValueBasedClasses != 0) {\n-    load_klass(hdr, obj, rscratch1);\n-    testb(Address(hdr, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n-    jcc(Assembler::notZero, slow_case);\n-  }\n-\n@@ -69,0 +63,7 @@\n+\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n+      load_klass(hdr, obj, rscratch1);\n+      testb(Address(hdr, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+      jcc(Assembler::notZero, slow_case);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-      movptr(Address(thread, JavaThread::vm_result_offset()), NULL_WORD);\n+      movptr(Address(thread, JavaThread::vm_result_oop_offset()), NULL_WORD);\n@@ -109,1 +109,1 @@\n-      movptr(Address(thread, JavaThread::vm_result_2_offset()), NULL_WORD);\n+      movptr(Address(thread, JavaThread::vm_result_metadata_offset()), NULL_WORD);\n@@ -123,1 +123,1 @@\n-    get_vm_result(oop_result1);\n+    get_vm_result_oop(oop_result1);\n@@ -126,1 +126,1 @@\n-    get_vm_result_2(metadata_result);\n+    get_vm_result_metadata(metadata_result);\n@@ -535,2 +535,2 @@\n-    __ movptr(Address(thread, JavaThread::vm_result_offset()),   NULL_WORD);\n-    __ movptr(Address(thread, JavaThread::vm_result_2_offset()), NULL_WORD);\n+    __ movptr(Address(thread, JavaThread::vm_result_oop_offset()),   NULL_WORD);\n+    __ movptr(Address(thread, JavaThread::vm_result_metadata_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -33,2 +35,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,0 +197,9 @@\n+                                                                            \\\n+  product(int, X86ICacheSync, -1, DIAGNOSTIC,                               \\\n+             \"Select the X86 ICache sync mechanism: -1 = auto-select; \"     \\\n+             \"0 = none (dangerous); 1 = CLFLUSH loop; 2 = CLFLUSHOPT loop; \"\\\n+             \"3 = CLWB loop; 4 = single CPUID; 5 = single SERIALIZE. \"      \\\n+             \"Explicitly selected mechanism will fail at startup if \"       \\\n+             \"hardware does not support it.\")                               \\\n+             range(-1, 5)                                                   \\\n+                                                                            \\\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"runtime\/flags\/flagSetting.hpp\"\n+#include \"runtime\/globals_extension.hpp\"\n@@ -30,0 +32,47 @@\n+void x86_generate_icache_fence(MacroAssembler* _masm) {\n+  switch (X86ICacheSync) {\n+    case 0:\n+      break;\n+    case 1:\n+      __ mfence();\n+      break;\n+    case 2:\n+    case 3:\n+      __ sfence();\n+      break;\n+    case 4:\n+      __ push(rax);\n+      __ push(rbx);\n+      __ push(rcx);\n+      __ push(rdx);\n+      __ xorptr(rax, rax);\n+      __ cpuid();\n+      __ pop(rdx);\n+      __ pop(rcx);\n+      __ pop(rbx);\n+      __ pop(rax);\n+      break;\n+    case 5:\n+      __ serialize();\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+}\n+\n+void x86_generate_icache_flush_insn(MacroAssembler* _masm, Register addr) {\n+  switch (X86ICacheSync) {\n+    case 1:\n+      __ clflush(Address(addr, 0));\n+      break;\n+    case 2:\n+      __ clflushopt(Address(addr, 0));\n+      break;\n+    case 3:\n+      __ clwb(Address(addr, 0));\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+}\n+\n@@ -31,1 +80,1 @@\n-  StubCodeMark mark(this, \"ICache\", \"flush_icache_stub\");\n+  StubCodeMark mark(this, \"ICache\", _stub_name);\n@@ -34,1 +83,0 @@\n-#ifdef AMD64\n@@ -43,1 +91,1 @@\n-  __ jcc(Assembler::zero, done);\n+  __ jccb(Assembler::zero, done);\n@@ -45,3 +93,1 @@\n-  \/\/ Force ordering wrt cflush.\n-  \/\/ Other fence and sync instructions won't do the job.\n-  __ mfence();\n+  x86_generate_icache_fence(_masm);\n@@ -49,5 +95,6 @@\n-  __ bind(flush_line);\n-  __ clflush(Address(addr, 0));\n-  __ addptr(addr, ICache::line_size);\n-  __ decrementl(lines);\n-  __ jcc(Assembler::notZero, flush_line);\n+  if (1 <= X86ICacheSync && X86ICacheSync <= 3) {\n+    __ bind(flush_line);\n+    x86_generate_icache_flush_insn(_masm, addr);\n+    __ addptr(addr, ICache::line_size);\n+    __ decrementl(lines);\n+    __ jccb(Assembler::notZero, flush_line);\n@@ -55,1 +102,2 @@\n-  __ mfence();\n+    x86_generate_icache_fence(_masm);\n+  }\n@@ -59,4 +107,0 @@\n-#else\n-  const Address magic(rsp, 3*wordSize);\n-  __ lock(); __ addl(Address(rsp, 0), 0);\n-#endif \/\/ AMD64\n@@ -70,0 +114,18 @@\n+void ICache::initialize(int phase) {\n+  switch (phase) {\n+    case 1: {\n+      \/\/ Initial phase, we assume only CLFLUSH is available.\n+      IntFlagSetting fs(X86ICacheSync, 1);\n+      AbstractICache::initialize(phase);\n+      break;\n+    }\n+    case 2: {\n+      \/\/ Final phase, generate the stub again.\n+      AbstractICache::initialize(phase);\n+      break;\n+    }\n+    default:\n+      ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/icache_x86.cpp","additions":78,"deletions":16,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#ifdef AMD64\n@@ -50,8 +49,1 @@\n-  \/\/ Use default implementation\n-#else\n-  enum {\n-    stub_size      = 16,                 \/\/ Size of the icache flush stub in bytes\n-    line_size      = BytesPerWord,      \/\/ conservative\n-    log2_line_size = LogBytesPerWord    \/\/ log2(line_size)\n-  };\n-#endif \/\/ AMD64\n+  static void initialize(int phase);\n","filename":"src\/hotspot\/cpu\/x86\/icache_x86.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1089,1 +1089,1 @@\n-  get_vm_result(obj);\n+  get_vm_result_oop(obj);\n@@ -1123,6 +1123,0 @@\n-    if (DiagnoseSyncOnValueBasedClasses != 0) {\n-      load_klass(tmp_reg, obj_reg, rklass_decode_tmp);\n-      testb(Address(tmp_reg, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n-      jcc(Assembler::notZero, slow_case);\n-    }\n-\n@@ -1132,0 +1126,6 @@\n+      if (DiagnoseSyncOnValueBasedClasses != 0) {\n+        load_klass(tmp_reg, obj_reg, rklass_decode_tmp);\n+        testb(Address(tmp_reg, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+        jcc(Assembler::notZero, slow_case);\n+      }\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1236,1 +1236,1 @@\n-    get_vm_result(oop_result);\n+    get_vm_result_oop(oop_result);\n@@ -1330,3 +1330,3 @@\n-void MacroAssembler::get_vm_result(Register oop_result) {\n-  movptr(oop_result, Address(r15_thread, JavaThread::vm_result_offset()));\n-  movptr(Address(r15_thread, JavaThread::vm_result_offset()), NULL_WORD);\n+void MacroAssembler::get_vm_result_oop(Register oop_result) {\n+  movptr(oop_result, Address(r15_thread, JavaThread::vm_result_oop_offset()));\n+  movptr(Address(r15_thread, JavaThread::vm_result_oop_offset()), NULL_WORD);\n@@ -1336,3 +1336,3 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result) {\n-  movptr(metadata_result, Address(r15_thread, JavaThread::vm_result_2_offset()));\n-  movptr(Address(r15_thread, JavaThread::vm_result_2_offset()), NULL_WORD);\n+void MacroAssembler::get_vm_result_metadata(Register metadata_result) {\n+  movptr(metadata_result, Address(r15_thread, JavaThread::vm_result_metadata_offset()));\n+  movptr(Address(r15_thread, JavaThread::vm_result_metadata_offset()), NULL_WORD);\n@@ -10323,1 +10323,1 @@\n-    \/\/ Clear cache in case fast locking succeeds.\n+    \/\/ Clear cache in case fast locking succeeds or we need to take the slow-path.\n@@ -10327,0 +10327,6 @@\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n+    load_klass(tmp, obj, rscratch1);\n+    testb(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n+    jcc(Assembler::notZero, slow);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -311,2 +311,2 @@\n-  void get_vm_result  (Register oop_result);\n-  void get_vm_result_2(Register metadata_result);\n+  void get_vm_result_oop(Register oop_result);\n+  void get_vm_result_metadata(Register metadata_result);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,48 @@\n-#endif \/\/ASSERT\n+void MethodHandles::verify_method(MacroAssembler* _masm, Register method, Register temp, vmIntrinsics::ID iid) {\n+  BLOCK_COMMENT(\"verify_method {\");\n+  __ verify_method_ptr(method);\n+  if (VerifyMethodHandles) {\n+    Label L_ok;\n+    assert_different_registers(method, temp);\n+\n+    const Register method_holder = temp;\n+    __ load_method_holder(method_holder, method);\n+    __ push(method_holder); \/\/ keep holder around for diagnostic purposes\n+\n+    switch (iid) {\n+      case vmIntrinsicID::_invokeBasic:\n+        \/\/ Require compiled LambdaForm class to be fully initialized.\n+        __ cmpb(Address(method_holder, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);\n+        __ jccb(Assembler::equal, L_ok);\n+        break;\n+\n+      case vmIntrinsicID::_linkToStatic:\n+        __ clinit_barrier(method_holder, &L_ok);\n+        break;\n+\n+      case vmIntrinsicID::_linkToVirtual:\n+      case vmIntrinsicID::_linkToSpecial:\n+      case vmIntrinsicID::_linkToInterface:\n+        \/\/ Class initialization check is too strong here. Just ensure that initialization has been initiated.\n+        __ cmpb(Address(method_holder, InstanceKlass::init_state_offset()), InstanceKlass::being_initialized);\n+        __ jcc(Assembler::greaterEqual, L_ok);\n+\n+        \/\/ init_state check failed, but it may be an abstract interface method\n+        __ load_unsigned_short(temp, Address(method, Method::access_flags_offset()));\n+        __ testl(temp, JVM_ACC_ABSTRACT);\n+        __ jccb(Assembler::notZero, L_ok);\n+        break;\n+\n+      default:\n+        fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n+    }\n+\n+    \/\/ clinit check failed for a concrete method\n+    __ STOP(\"Method holder klass is not initialized\");\n+\n+    __ BIND(L_ok);\n+    __ pop(method_holder); \/\/ restore stack layout\n+  }\n+  BLOCK_COMMENT(\"} verify_method\");\n+}\n+#endif \/\/ ASSERT\n@@ -128,1 +175,1 @@\n-                                            bool for_compiler_entry) {\n+                                            bool for_compiler_entry, vmIntrinsics::ID iid) {\n@@ -135,1 +182,1 @@\n-  __ verify_method_ptr(method);\n+  verify_method(_masm, method, temp, iid);\n@@ -200,1 +247,1 @@\n-  jump_from_method_handle(_masm, method_temp, temp2, for_compiler_entry);\n+  jump_from_method_handle(_masm, method_temp, temp2, for_compiler_entry, vmIntrinsics::_invokeBasic);\n@@ -492,2 +539,1 @@\n-    __ verify_method_ptr(rbx_method);\n-    jump_from_method_handle(_masm, rbx_method, temp1, for_compiler_entry);\n+    jump_from_method_handle(_masm, rbx_method, temp1, for_compiler_entry, iid);\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":52,"deletions":6,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+  static void verify_method(MacroAssembler* _masm, Register method, Register temp, vmIntrinsics::ID iid) NOT_DEBUG_RETURN;\n+\n@@ -51,1 +53,1 @@\n-                                      bool for_compiler_entry);\n+                                      bool for_compiler_entry, vmIntrinsics::ID iid);\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -940,1 +940,1 @@\n-      __ movptr(Address(r15_thread, JavaThread::vm_result_offset()), NULL_WORD);\n+      __ movptr(Address(r15_thread, JavaThread::vm_result_oop_offset()), NULL_WORD);\n@@ -947,2 +947,2 @@\n-      __ get_vm_result(rscratch2); \/\/ Use rscratch2 (r11) as temporary because rscratch1 (r10) is trashed by movptr()\n-      __ get_vm_result_2(rbx); \/\/ TODO: required to keep the callee Method live?\n+      __ get_vm_result_oop(rscratch2); \/\/ Use rscratch2 (r11) as temporary because rscratch1 (r10) is trashed by movptr()\n+      __ get_vm_result_metadata(rbx); \/\/ TODO: required to keep the callee Method live?\n@@ -3510,1 +3510,1 @@\n-  __ get_vm_result_2(rbx);\n+  __ get_vm_result_metadata(rbx);\n@@ -3529,1 +3529,1 @@\n-  __ movptr(Address(r15_thread, JavaThread::vm_result_offset()), NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::vm_result_oop_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4272,1 +4272,1 @@\n-    __ get_vm_result(rax);\n+    __ get_vm_result_oop(rax);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1551,1 +1551,1 @@\n-  __ movptr(Address(thread, JavaThread::vm_result_offset()), rax);\n+  __ movptr(Address(thread, JavaThread::vm_result_oop_offset()), rax);\n@@ -1555,1 +1555,1 @@\n-  __ get_vm_result(rax);\n+  __ get_vm_result_oop(rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-  __ get_vm_result_2(flags);\n+  __ get_vm_result_metadata(flags);\n@@ -2731,1 +2731,1 @@\n-        __ get_vm_result(rax);\n+        __ get_vm_result_oop(rax);\n@@ -3380,1 +3380,1 @@\n-        __ get_vm_result(rax);\n+        __ get_vm_result_oop(rax);\n@@ -3889,2 +3889,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(rax);\n+  __ get_vm_result_metadata(rax);\n@@ -3946,2 +3945,1 @@\n-  \/\/ vm_result_2 has metadata result\n-  __ get_vm_result_2(rax);\n+  __ get_vm_result_metadata(rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1092,0 +1092,24 @@\n+  assert(supports_cpuid(), \"Always present\");\n+  assert(supports_clflush(), \"Always present\");\n+  if (X86ICacheSync == -1) {\n+    \/\/ Auto-detect, choosing the best performant one that still flushes\n+    \/\/ the cache. We could switch to CPUID\/SERIALIZE (\"4\"\/\"5\") going forward.\n+    if (supports_clwb()) {\n+      FLAG_SET_ERGO(X86ICacheSync, 3);\n+    } else if (supports_clflushopt()) {\n+      FLAG_SET_ERGO(X86ICacheSync, 2);\n+    } else {\n+      FLAG_SET_ERGO(X86ICacheSync, 1);\n+    }\n+  } else {\n+    if ((X86ICacheSync == 2) && !supports_clflushopt()) {\n+      vm_exit_during_initialization(\"CPU does not support CLFLUSHOPT, unable to use X86ICacheSync=2\");\n+    }\n+    if ((X86ICacheSync == 3) && !supports_clwb()) {\n+      vm_exit_during_initialization(\"CPU does not support CLWB, unable to use X86ICacheSync=3\");\n+    }\n+    if ((X86ICacheSync == 5) && !supports_serialize()) {\n+      vm_exit_during_initialization(\"CPU does not support SERIALIZE, unable to use X86ICacheSync=5\");\n+    }\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  static void initialize() {}\n+  static void initialize(int phase) {}\n","filename":"src\/hotspot\/cpu\/zero\/icache_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+#ifndef MAP_FIXED_NOREPLACE\n+#define MAP_FIXED_NOREPLACE 0x100000\n+#endif\n+\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zSyscall_linux.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,2 +142,0 @@\n-#define MAX_SECS 100000000\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+#ifdef LINUX\n+#include \"gc\/z\/zSyscall_linux.hpp\"\n+#endif\n@@ -35,1 +38,3 @@\n-  void* const res = mmap((void*)untype(addr), size, PROT_NONE, MAP_ANONYMOUS|MAP_PRIVATE|MAP_NORESERVE, -1, 0);\n+  const int flags = MAP_ANONYMOUS|MAP_PRIVATE|MAP_NORESERVE LINUX_ONLY(|MAP_FIXED_NOREPLACE);\n+\n+  void* const res = mmap((void*)untype(addr), size, PROT_NONE, flags, -1, 0);\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zVirtualMemoryManager_posix.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include <Memoryapi.h>\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zSyscall_windows.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  static void initialize();\n+  static void initialize(int phase);\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/icache_bsd_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  static void initialize();\n+  static void initialize(int phase);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/icache_linux_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,3 @@\n-#endif\n+  \/\/ Currently tests shows that cmove using Zicond instructions will bring\n+  \/\/ performance regression, but to get a test coverage all the time, will\n+  \/\/ still prefer to enabling it in debug version.\n@@ -240,0 +242,1 @@\n+#endif\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  static void initialize();\n+  static void initialize(int phase);\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/icache_windows_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -873,1 +873,2 @@\n-  fprintf(fp_hpp, \"    _mask <<= cycles;\\n\");\n+  fprintf(fp_hpp, \"    uint max_shift = 8 * sizeof(_mask) - 1;\\n\");\n+  fprintf(fp_hpp, \"    _mask <<= (cycles < max_shift) ? cycles : max_shift;\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -401,1 +401,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -424,1 +424,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -453,1 +453,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -472,1 +472,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -520,1 +520,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -559,1 +559,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -782,1 +782,1 @@\n-  current->set_vm_result(exception());\n+  current->set_vm_result_oop(exception());\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -210,0 +210,5 @@\n+void AOTArtifactFinder::append_to_all_cached_classes(Klass* k) {\n+  precond(!SystemDictionaryShared::should_be_excluded(k));\n+  _all_cached_classes->append(k);\n+}\n+\n@@ -211,0 +216,6 @@\n+  if (CDSConfig::is_dumping_dynamic_archive() && ik->is_shared()) {\n+    \/\/ This class is already included in the base archive. No need to cache\n+    \/\/ it again in the dynamic archive.\n+    return;\n+  }\n+\n@@ -214,1 +225,15 @@\n-    _all_cached_classes->append(ik);\n+    append_to_all_cached_classes(ik);\n+\n+    \/\/ All super types must be added.\n+    InstanceKlass* s = ik->java_super();\n+    if (s != nullptr) {\n+      add_cached_instance_class(s);\n+    }\n+\n+    Array<InstanceKlass*>* interfaces = ik->local_interfaces();\n+    int len = interfaces->length();\n+    for (int i = 0; i < len; i++) {\n+      InstanceKlass* intf = interfaces->at(i);\n+      add_cached_instance_class(intf);\n+    }\n+\n@@ -232,1 +257,1 @@\n-    _all_cached_classes->append(tak);\n+    append_to_all_cached_classes(tak);\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+  static void append_to_all_cached_classes(Klass* k);\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1245,0 +1245,1 @@\n+    bool found_invalid = false;\n@@ -1268,4 +1269,9 @@\n-              \/\/ The class must be from boot loader append path which consists of\n-              \/\/ -Xbootclasspath\/a and jvmti appended entries.\n-              assert(loader == nullptr, \"sanity\");\n-              classpath_index = i;\n+              if (loader != nullptr) {\n+                \/\/ Probably loaded by jdk\/internal\/loader\/ClassLoaders$BootClassLoader. Don't archive\n+                \/\/ such classes.\n+                ik->set_shared_classpath_index(-1);\n+                ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n+                found_invalid = true;\n+              } else {\n+                classpath_index = i;\n+              }\n@@ -1282,1 +1288,1 @@\n-      if (classpath_index >= 0) {\n+      if (classpath_index >= 0 || found_invalid) {\n@@ -1289,0 +1295,4 @@\n+    if (found_invalid) {\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-  assert(static_cast<int>(result) == thing, \"failed: %d != %d\", static_cast<int>(result), thing);\n+  guarantee(static_cast<int>(result) == thing, \"failed: %d != %d\", static_cast<int>(result), thing);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/epsilon\/epsilonMonitoringSupport.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/epsilon\/epsilonMonitoringSupport.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"c1\/c1_LIRGenerator.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"c1\/c1_LIRGenerator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/g1\/g1ThreadLocalData.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"gc\/g1\/g1ThreadLocalData.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/g1\/g1EvacStats.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/g1\/g1EvacStats.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AnalyticsSequences.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/bufferNode.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shared\/bufferNode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -32,1 +33,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -34,0 +34,1 @@\n+#include \"runtime\/atomic.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"gc\/g1\/g1ConcurrentMarkThread.inline.hpp\"\n@@ -40,1 +41,0 @@\n-#include \"gc\/g1\/g1ConcurrentMarkThread.inline.hpp\"\n@@ -46,1 +46,0 @@\n-#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -48,0 +47,1 @@\n+#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -94,1 +94,0 @@\n-#include \"gc\/shared\/workerPolicy.hpp\"\n@@ -96,0 +95,1 @@\n+#include \"gc\/shared\/workerPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/g1\/g1CardTable.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/g1\/g1CardTable.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -57,0 +56,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"gc\/g1\/g1ConcurrentRebuildAndScrub.hpp\"\n-\n@@ -30,0 +28,1 @@\n+#include \"gc\/g1\/g1ConcurrentRebuildAndScrub.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1FreeIdSet.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/g1\/g1FreeIdSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1RegionsOnNodes.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/g1\/g1RegionsOnNodes.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EdenRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n@@ -30,0 +29,2 @@\n+\n+#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/gcId.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/gcId.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/plab.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shared\/plab.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacStats.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"gc\/shared\/classUnloadingContext.hpp\"\n@@ -40,1 +41,0 @@\n-#include \"gc\/shared\/classUnloadingContext.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"memory\/resourceArea.hpp\"\n@@ -37,1 +36,1 @@\n-#include \"runtime\/timer.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"runtime\/timer.hpp\"\n@@ -196,0 +196,1 @@\n+  _cur_prepare_concurrent_task_time_ms = 0.0;\n@@ -410,4 +411,1 @@\n-  const double pre_concurrent_start_ms = average_time_ms(ResetMarkingState) +\n-                                         average_time_ms(NoteStartOfMark);\n-\n-  const double sum_ms = pre_concurrent_start_ms +\n+  const double sum_ms = _cur_prepare_concurrent_task_time_ms +\n@@ -422,3 +420,6 @@\n-  if (pre_concurrent_start_ms > 0.0) {\n-    debug_phase(_gc_par_phases[ResetMarkingState]);\n-    debug_phase(_gc_par_phases[NoteStartOfMark]);\n+  \/\/ Concurrent tasks of ResetMarkingState and NoteStartOfMark are triggered during\n+  \/\/ young collection. However, their execution time are not included in _gc_pause_time_ms.\n+  if (_cur_prepare_concurrent_task_time_ms > 0.0) {\n+    debug_time(\"Prepare Concurrent Start\", _cur_prepare_concurrent_task_time_ms);\n+    debug_phase(_gc_par_phases[ResetMarkingState], 1);\n+    debug_phase(_gc_par_phases[NoteStartOfMark], 1);\n@@ -548,0 +549,5 @@\n+\/\/ Root-region-scan-wait, verify-before and verify-after are part of young GC,\n+\/\/ but these are not measured by G1Policy. i.e. these are not included in\n+\/\/ G1Policy::record_young_collection_start() and record_young_collection_end().\n+\/\/ In addition, these are not included in G1GCPhaseTimes::_gc_pause_time_ms.\n+\/\/ See G1YoungCollector::collect().\n@@ -562,3 +568,0 @@\n-  accounted_ms += _root_region_scan_wait_time_ms;\n-  accounted_ms += _cur_verify_before_time_ms;\n-\n@@ -570,1 +573,2 @@\n-  accounted_ms += _cur_verify_after_time_ms;\n+  assert(_gc_pause_time_ms >= accounted_ms, \"GC pause time(%.3lfms) cannot be \"\n+         \"smaller than the sum of each phase(%.3lfms).\", _gc_pause_time_ms, accounted_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,2 @@\n+  \/\/ Included in above merge and optional-merge time.\n+  double _cur_distribute_log_buffers_time_ms;\n@@ -184,2 +186,0 @@\n-  double _cur_distribute_log_buffers_time_ms;\n-\n@@ -195,0 +195,1 @@\n+  \/\/ Not included in _gc_pause_time_ms\n@@ -214,0 +215,1 @@\n+  \/\/ Not included in _gc_pause_time_ms\n@@ -217,0 +219,3 @@\n+  \/\/ Time spent to trigger concurrent tasks of ResetMarkingState and NoteStartOfMark.\n+  double _cur_prepare_concurrent_task_time_ms;\n+\n@@ -321,0 +326,4 @@\n+  void record_prepare_concurrent_task_time_ms(double ms) {\n+    _cur_prepare_concurrent_task_time_ms = ms;\n+  }\n+\n@@ -392,0 +401,1 @@\n+           _cur_prepare_merge_heap_roots_time_ms +\n@@ -393,1 +403,3 @@\n-           _cur_optional_merge_heap_roots_time_ms;\n+           _cur_optional_prepare_merge_heap_roots_time_ms +\n+           _cur_optional_merge_heap_roots_time_ms +\n+           _cur_collection_nmethod_list_cleanup_time_ms;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/g1\/g1ConcurrentRefine.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/g1\/g1ConcurrentRefine.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1InitLogger.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1MemoryPool.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/g1\/g1MemoryPool.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/mutex.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"runtime\/mutex.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreeMemoryTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/g1\/g1NMethodClosure.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/g1\/g1NMethodClosure.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"oops\/oopsHierarchy.hpp\"\n@@ -43,0 +42,1 @@\n+#include \"oops\/oopsHierarchy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1RedirtyCardsQueue.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/g1\/g1RedirtyCardsQueue.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/g1\/g1CollectionSetChooser.hpp\"\n@@ -35,1 +36,1 @@\n-#include \"gc\/g1\/g1CollectionSetChooser.hpp\"\n+#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -39,1 +40,0 @@\n-#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -45,0 +45,1 @@\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -52,2 +53,0 @@\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/g1\/g1RemSetTrackingPolicy.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/g1\/g1RemSetTrackingPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"gc\/g1\/g1RootClosures.hpp\"\n@@ -45,0 +44,1 @@\n+#include \"gc\/g1\/g1RootClosures.hpp\"\n@@ -47,1 +47,0 @@\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -49,0 +48,1 @@\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -1448,0 +1448,1 @@\n+  G1GCPhaseTimes* pt = g1h->phase_times();\n@@ -1456,1 +1457,1 @@\n-      g1h->phase_times()->record_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n+      pt->record_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n@@ -1458,1 +1459,1 @@\n-      g1h->phase_times()->record_or_add_optional_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n+      pt->record_or_add_optional_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n@@ -1468,0 +1469,2 @@\n+  Ticks start = Ticks::now();\n+\n@@ -1486,0 +1489,6 @@\n+\n+  if (initial_evacuation) {\n+    pt->record_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n+  } else {\n+    pt->record_or_add_optional_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/timer.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"runtime\/timer.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"utilities\/growableArray.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"utilities\/growableArray.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/g1\/g1GCPauseType.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1VMOperations.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/g1\/g1VMOperations.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -52,2 +52,0 @@\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n-#include \"gc\/shared\/gcTimer.hpp\"\n@@ -55,0 +53,2 @@\n+#include \"gc\/shared\/gcTimer.hpp\"\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -489,0 +489,1 @@\n+    Ticks start = Ticks::now();\n@@ -490,0 +491,1 @@\n+    phase_times()->record_prepare_concurrent_task_time_ms((Ticks::now() - start).seconds() * 1000.0);\n@@ -746,5 +748,1 @@\n-  {\n-    Ticks start = Ticks::now();\n-    rem_set()->merge_heap_roots(true \/* initial_evacuation *\/);\n-    p->record_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n-  }\n+  rem_set()->merge_heap_roots(true \/* initial_evacuation *\/);\n@@ -815,0 +813,1 @@\n+  p->record_or_add_optional_evac_time(task_time.seconds() * 1000.0);\n@@ -833,5 +832,1 @@\n-    {\n-      Ticks start = Ticks::now();\n-      rem_set()->merge_heap_roots(false \/* initial_evacuation *\/);\n-      phase_times()->record_or_add_optional_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n-    }\n+    rem_set()->merge_heap_roots(false \/* initial_evacuation *\/);\n@@ -839,5 +834,1 @@\n-    {\n-      Ticks start = Ticks::now();\n-      evacuate_next_optional_regions(per_thread_states);\n-      phase_times()->record_or_add_optional_evac_time((Ticks::now() - start).seconds() * 1000.0);\n-    }\n+    evacuate_next_optional_regions(per_thread_states);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1YoungGCPreEvacuateTasks.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/g1\/g1YoungGCPreEvacuateTasks.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,12 @@\n+  if (InitialSurvivorRatio < MinSurvivorRatio) {\n+    if (FLAG_IS_CMDLINE(InitialSurvivorRatio)) {\n+      if (FLAG_IS_CMDLINE(MinSurvivorRatio)) {\n+        jio_fprintf(defaultStream::error_stream(),\n+          \"Inconsistent MinSurvivorRatio vs InitialSurvivorRatio: %d vs %d\\n\", MinSurvivorRatio, InitialSurvivorRatio);\n+      }\n+      FLAG_SET_DEFAULT(MinSurvivorRatio, InitialSurvivorRatio);\n+    } else {\n+      FLAG_SET_DEFAULT(InitialSurvivorRatio, MinSurvivorRatio);\n+    }\n+  }\n+\n@@ -104,11 +116,0 @@\n-\n-  \/\/ The survivor ratio's are calculated \"raw\", unlike the\n-  \/\/ default gc, which adds 2 to the ratio value. We need to\n-  \/\/ make sure the values are valid before using them.\n-  if (MinSurvivorRatio < 3) {\n-    FLAG_SET_ERGO(MinSurvivorRatio, 3);\n-  }\n-\n-  if (InitialSurvivorRatio < 3) {\n-    FLAG_SET_ERGO(InitialSurvivorRatio, 3);\n-  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/genArguments.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/genArguments.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/gcUtil.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shared\/gcUtil.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"utilities\/spinYield.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"utilities\/spinYield.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/parallel\/parMarkBitMap.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/parallel\/parMarkBitMap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shared\/partialArrayTaskStats.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"gc\/shared\/partialArrayTaskStats.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-#include \"gc\/shared\/oopStorageSetParState.inline.hpp\"\n@@ -49,0 +48,1 @@\n+#include \"gc\/shared\/oopStorageSetParState.inline.hpp\"\n@@ -60,0 +60,1 @@\n+#include \"logging\/log.hpp\"\n@@ -63,1 +64,0 @@\n-#include \"logging\/log.hpp\"\n@@ -70,1 +70,0 @@\n-#include \"runtime\/vmThread.hpp\"\n@@ -72,0 +71,1 @@\n+#include \"runtime\/vmThread.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shared\/referenceProcessor.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"gc\/shared\/referenceProcessor.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/parallel\/psParallelCompact.inline.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/parallel\/psParallelCompact.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-#include \"gc\/shared\/fullGCForwarding.hpp\"\n-#include \"gc\/shared\/gcArguments.hpp\"\n@@ -29,0 +27,2 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n+#include \"gc\/shared\/gcArguments.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -46,0 +46,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -50,1 +51,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"logging\/logStream.hpp\"\n@@ -35,1 +36,0 @@\n-#include \"logging\/logStream.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/modRefBarrierSet.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shared\/modRefBarrierSet.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetConfig.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -40,0 +39,1 @@\n+#include \"runtime\/threadWXSetters.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"utilities\/debug.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"utilities\/debug.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/bufferNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"c1\/c1_LIRGenerator.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"c1\/c1_LIRGenerator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/tlab_globals.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shared\/tlab_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shared\/c2\/cardTableBarrierSetC2.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/shared\/c2\/cardTableBarrierSetC2.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/shared\/c2\/modRefBarrierSetC2.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"gc\/shared\/c2\/modRefBarrierSetC2.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/modRefBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/gcLocker.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -34,1 +34,1 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/shared\/gcLocker.hpp\"\n@@ -39,1 +39,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n@@ -41,0 +40,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/metaspaceStats.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"memory\/metaspaceStats.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcHeapSummary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -27,1 +28,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcInitLogger.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"logging\/log.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"logging\/log.hpp\"\n@@ -35,1 +35,0 @@\n-#include \"utilities\/spinYield.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"utilities\/spinYield.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n-#include \"gc\/shared\/gcCause.hpp\"\n@@ -32,0 +30,2 @@\n+#include \"gc\/shared\/gcCause.hpp\"\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcOverheadChecker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/gcPolicyCounters.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shared\/gcPolicyCounters.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcPolicyCounters.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/gcTimer.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shared\/gcTimer.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTimer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-          range(0, max_uintx)                                               \\\n+          range(3, max_uintx)                                               \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"runtime\/os.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/locationPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -40,0 +39,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"classfile\/symbolTable.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"classfile\/symbolTable.hpp\"\n@@ -31,1 +31,0 @@\n-#include \"logging\/log.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/parallelCleaning.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayState.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/partialArrayState.hpp\"\n@@ -30,0 +29,2 @@\n+\n+#include \"gc\/shared\/partialArrayState.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/referenceProcessorPhaseTimes.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/referenceProcessorPhaseTimes.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/satbMarkQueue.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shared\/satbMarkQueue.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-#include \"memory\/allocation.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n@@ -40,0 +38,2 @@\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/allStatic.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"memory\/allStatic.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"oops\/oop.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"oops\/oop.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/universe.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"memory\/universe.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/weakProcessor.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shared\/weakProcessor.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n@@ -36,1 +37,0 @@\n-#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+#include \"gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp\"\n+#include \"gc\/shenandoah\/c2\/shenandoahSupport.hpp\"\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -34,3 +37,0 @@\n-#include \"gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp\"\n-#include \"gc\/shenandoah\/c2\/shenandoahSupport.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -829,5 +829,0 @@\n-  } else if (mode == LoopOptsShenandoahPostExpand) {\n-    assert(UseShenandoahGC, \"only for shenandoah\");\n-    visited.clear();\n-    ShenandoahBarrierC2Support::optimize_after_expansion(visited, nstack, worklist, phase);\n-    return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -123,2 +123,2 @@\n-  virtual bool strip_mined_loops_expanded(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand || mode == LoopOptsShenandoahPostExpand; }\n-  virtual bool is_gc_specific_loop_opts_pass(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand || mode == LoopOptsShenandoahPostExpand; }\n+  virtual bool strip_mined_loops_expanded(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand; }\n+  virtual bool is_gc_specific_loop_opts_pass(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/c2\/shenandoahSupport.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shenandoah\/c2\/shenandoahSupport.hpp\"\n@@ -54,6 +54,0 @@\n-\n-    C->set_major_progress();\n-    if (!C->optimize_loops(igvn, LoopOptsShenandoahPostExpand)) {\n-      return false;\n-    }\n-    C->clear_major_progress();\n@@ -1505,230 +1499,0 @@\n-void ShenandoahBarrierC2Support::move_gc_state_test_out_of_loop(IfNode* iff, PhaseIdealLoop* phase) {\n-  IdealLoopTree *loop = phase->get_loop(iff);\n-  Node* loop_head = loop->_head;\n-  Node* entry_c = loop_head->in(LoopNode::EntryControl);\n-\n-  Node* bol = iff->in(1);\n-  Node* cmp = bol->in(1);\n-  Node* andi = cmp->in(1);\n-  Node* load = andi->in(1);\n-\n-  assert(is_gc_state_load(load), \"broken\");\n-  if (!phase->is_dominator(load->in(0), entry_c)) {\n-    Node* mem_ctrl = nullptr;\n-    Node* mem = dom_mem(load->in(MemNode::Memory), loop_head, Compile::AliasIdxRaw, mem_ctrl, phase);\n-    load = load->clone();\n-    load->set_req(MemNode::Memory, mem);\n-    load->set_req(0, entry_c);\n-    phase->register_new_node(load, entry_c);\n-    andi = andi->clone();\n-    andi->set_req(1, load);\n-    phase->register_new_node(andi, entry_c);\n-    cmp = cmp->clone();\n-    cmp->set_req(1, andi);\n-    phase->register_new_node(cmp, entry_c);\n-    bol = bol->clone();\n-    bol->set_req(1, cmp);\n-    phase->register_new_node(bol, entry_c);\n-\n-    phase->igvn().replace_input_of(iff, 1, bol);\n-  }\n-}\n-\n-bool ShenandoahBarrierC2Support::identical_backtoback_ifs(Node* n, PhaseIdealLoop* phase) {\n-  if (!n->is_If() || n->is_CountedLoopEnd()) {\n-    return false;\n-  }\n-  Node* region = n->in(0);\n-\n-  if (!region->is_Region()) {\n-    return false;\n-  }\n-  Node* dom = phase->idom(region);\n-  if (!dom->is_If()) {\n-    return false;\n-  }\n-\n-  if (!is_heap_stable_test(n) || !is_heap_stable_test(dom)) {\n-    return false;\n-  }\n-\n-  IfNode* dom_if = dom->as_If();\n-  Node* proj_true = dom_if->proj_out(1);\n-  Node* proj_false = dom_if->proj_out(0);\n-\n-  for (uint i = 1; i < region->req(); i++) {\n-    if (phase->is_dominator(proj_true, region->in(i))) {\n-      continue;\n-    }\n-    if (phase->is_dominator(proj_false, region->in(i))) {\n-      continue;\n-    }\n-    return false;\n-  }\n-\n-  return true;\n-}\n-\n-bool ShenandoahBarrierC2Support::merge_point_safe(Node* region) {\n-  for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n-    Node* n = region->fast_out(i);\n-    if (n->is_LoadStore()) {\n-      \/\/ Splitting a LoadStore node through phi, causes it to lose its SCMemProj: the split if code doesn't have support\n-      \/\/ for a LoadStore at the region the if is split through because that's not expected to happen (LoadStore nodes\n-      \/\/ should be between barrier nodes). It does however happen with Shenandoah though because barriers can get\n-      \/\/ expanded around a LoadStore node.\n-      return false;\n-    }\n-  }\n-  return true;\n-}\n-\n-\n-void ShenandoahBarrierC2Support::merge_back_to_back_tests(Node* n, PhaseIdealLoop* phase) {\n-  assert(is_heap_stable_test(n), \"no other tests\");\n-  if (identical_backtoback_ifs(n, phase)) {\n-    Node* n_ctrl = n->in(0);\n-    if (phase->can_split_if(n_ctrl) && merge_point_safe(n_ctrl)) {\n-      IfNode* dom_if = phase->idom(n_ctrl)->as_If();\n-      if (is_heap_stable_test(n)) {\n-        Node* gc_state_load = n->in(1)->in(1)->in(1)->in(1);\n-        assert(is_gc_state_load(gc_state_load), \"broken\");\n-        Node* dom_gc_state_load = dom_if->in(1)->in(1)->in(1)->in(1);\n-        assert(is_gc_state_load(dom_gc_state_load), \"broken\");\n-        if (gc_state_load != dom_gc_state_load) {\n-          phase->igvn().replace_node(gc_state_load, dom_gc_state_load);\n-        }\n-      }\n-      PhiNode* bolphi = PhiNode::make_blank(n_ctrl, n->in(1));\n-      Node* proj_true = dom_if->proj_out(1);\n-      Node* proj_false = dom_if->proj_out(0);\n-      Node* con_true = phase->igvn().makecon(TypeInt::ONE);\n-      Node* con_false = phase->igvn().makecon(TypeInt::ZERO);\n-\n-      for (uint i = 1; i < n_ctrl->req(); i++) {\n-        if (phase->is_dominator(proj_true, n_ctrl->in(i))) {\n-          bolphi->init_req(i, con_true);\n-        } else {\n-          assert(phase->is_dominator(proj_false, n_ctrl->in(i)), \"bad if\");\n-          bolphi->init_req(i, con_false);\n-        }\n-      }\n-      phase->register_new_node(bolphi, n_ctrl);\n-      phase->igvn().replace_input_of(n, 1, bolphi);\n-      phase->do_split_if(n);\n-    }\n-  }\n-}\n-\n-IfNode* ShenandoahBarrierC2Support::find_unswitching_candidate(const IdealLoopTree* loop, PhaseIdealLoop* phase) {\n-  \/\/ Find first invariant test that doesn't exit the loop\n-  LoopNode *head = loop->_head->as_Loop();\n-  IfNode* unswitch_iff = nullptr;\n-  Node* n = head->in(LoopNode::LoopBackControl);\n-  int loop_has_sfpts = -1;\n-  while (n != head) {\n-    Node* n_dom = phase->idom(n);\n-    if (n->is_Region()) {\n-      if (n_dom->is_If()) {\n-        IfNode* iff = n_dom->as_If();\n-        if (iff->in(1)->is_Bool()) {\n-          BoolNode* bol = iff->in(1)->as_Bool();\n-          if (bol->in(1)->is_Cmp()) {\n-            \/\/ If condition is invariant and not a loop exit,\n-            \/\/ then found reason to unswitch.\n-            if (is_heap_stable_test(iff) &&\n-                (loop_has_sfpts == -1 || loop_has_sfpts == 0)) {\n-              assert(!loop->is_loop_exit(iff), \"both branches should be in the loop\");\n-              if (loop_has_sfpts == -1) {\n-                for(uint i = 0; i < loop->_body.size(); i++) {\n-                  Node *m = loop->_body[i];\n-                  if (m->is_SafePoint() && !m->is_CallLeaf()) {\n-                    loop_has_sfpts = 1;\n-                    break;\n-                  }\n-                }\n-                if (loop_has_sfpts == -1) {\n-                  loop_has_sfpts = 0;\n-                }\n-              }\n-              if (!loop_has_sfpts) {\n-                unswitch_iff = iff;\n-              }\n-            }\n-          }\n-        }\n-      }\n-    }\n-    n = n_dom;\n-  }\n-  return unswitch_iff;\n-}\n-\n-\n-void ShenandoahBarrierC2Support::optimize_after_expansion(VectorSet &visited, Node_Stack &stack, Node_List &old_new, PhaseIdealLoop* phase) {\n-  Node_List heap_stable_tests;\n-  stack.push(phase->C->start(), 0);\n-  do {\n-    Node* n = stack.node();\n-    uint i = stack.index();\n-\n-    if (i < n->outcnt()) {\n-      Node* u = n->raw_out(i);\n-      stack.set_index(i+1);\n-      if (!visited.test_set(u->_idx)) {\n-        stack.push(u, 0);\n-      }\n-    } else {\n-      stack.pop();\n-      if (n->is_If() && is_heap_stable_test(n)) {\n-        heap_stable_tests.push(n);\n-      }\n-    }\n-  } while (stack.size() > 0);\n-\n-  for (uint i = 0; i < heap_stable_tests.size(); i++) {\n-    Node* n = heap_stable_tests.at(i);\n-    assert(is_heap_stable_test(n), \"only evacuation test\");\n-    merge_back_to_back_tests(n, phase);\n-  }\n-\n-  if (!phase->C->major_progress()) {\n-    VectorSet seen;\n-    for (uint i = 0; i < heap_stable_tests.size(); i++) {\n-      Node* n = heap_stable_tests.at(i);\n-      IdealLoopTree* loop = phase->get_loop(n);\n-      if (loop != phase->ltree_root() &&\n-          loop->_child == nullptr &&\n-          !loop->_irreducible) {\n-        Node* head = loop->_head;\n-        if (head->is_Loop() &&\n-            (!head->is_CountedLoop() || head->as_CountedLoop()->is_main_loop() || head->as_CountedLoop()->is_normal_loop()) &&\n-            !seen.test_set(head->_idx)) {\n-          IfNode* iff = find_unswitching_candidate(loop, phase);\n-          if (iff != nullptr) {\n-            Node* bol = iff->in(1);\n-            if (head->as_Loop()->is_strip_mined()) {\n-              head->as_Loop()->verify_strip_mined(0);\n-            }\n-            move_gc_state_test_out_of_loop(iff, phase);\n-\n-            AutoNodeBudget node_budget(phase);\n-\n-            if (loop->policy_unswitching(phase)) {\n-              if (head->as_Loop()->is_strip_mined()) {\n-                OuterStripMinedLoopNode* outer = head->as_CountedLoop()->outer_loop();\n-                hide_strip_mined_loop(outer, head->as_CountedLoop(), phase);\n-              }\n-              phase->do_unswitching(loop, old_new);\n-            } else {\n-              \/\/ Not proceeding with unswitching. Move load back in\n-              \/\/ the loop.\n-              phase->igvn().replace_input_of(iff, 1, bol);\n-            }\n-          }\n-        }\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":237,"binary":false,"changes":238,"status":"modified"},{"patch":"@@ -66,4 +66,0 @@\n-  static void move_gc_state_test_out_of_loop(IfNode* iff, PhaseIdealLoop* phase);\n-  static void merge_back_to_back_tests(Node* n, PhaseIdealLoop* phase);\n-  static bool merge_point_safe(Node* region);\n-  static bool identical_backtoback_ifs(Node *n, PhaseIdealLoop* phase);\n@@ -71,1 +67,0 @@\n-  static IfNode* find_unswitching_candidate(const IdealLoopTree *loop, PhaseIdealLoop* phase);\n@@ -83,1 +78,0 @@\n-  static void optimize_after_expansion(VectorSet& visited, Node_Stack& nstack, Node_List& old_new, PhaseIdealLoop* phase);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahCollectionSet.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectionSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahEvacInfo.hpp\"\n@@ -33,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahEvacInfo.hpp\"\n@@ -35,1 +35,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahGlobalGeneration.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahGlobalGeneration.hpp\"\n@@ -31,1 +31,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahSpaceInfo.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahSpaceInfo.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahBarrierSetClone.inline.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahBarrierSetClone.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -43,1 +44,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahMarkingContext.inline.hpp\"\n@@ -36,1 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahNMethod.inline.hpp\"\n@@ -38,0 +36,2 @@\n+#include \"gc\/shenandoah\/shenandoahMarkingContext.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahNMethod.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -43,0 +41,1 @@\n+#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n@@ -50,1 +49,0 @@\n-#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n@@ -52,0 +50,2 @@\n+#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -38,1 +39,1 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -42,1 +43,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -37,2 +39,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -40,1 +40,0 @@\n-#include \"memory\/metaspaceUtils.hpp\"\n@@ -42,0 +41,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/gcCause.hpp\"\n@@ -30,1 +29,1 @@\n-#include \"gc\/shenandoah\/shenandoahGC.hpp\"\n+#include \"gc\/shared\/gcCause.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahGC.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n@@ -28,2 +29,0 @@\n-\n-#include \"shenandoahCollectorPolicy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/gcCause.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shared\/gcCause.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n-#include \"gc\/shenandoah\/shenandoahWorkerPolicy.hpp\"\n@@ -45,0 +43,2 @@\n+#include \"gc\/shenandoah\/shenandoahWorkerPolicy.hpp\"\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -30,1 +30,0 @@\n-#include \"runtime\/threadSMR.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"runtime\/threadSMR.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n-#include \"gc\/shenandoah\/shenandoahConcurrentGC.hpp\"\n@@ -41,0 +39,1 @@\n+#include \"gc\/shenandoah\/shenandoahConcurrentGC.hpp\"\n@@ -45,5 +44,0 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n@@ -52,0 +46,3 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n+#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n@@ -54,0 +51,2 @@\n+#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n+#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n@@ -40,2 +41,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationSizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalControlThread.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalControlThread.hpp\"\n@@ -36,2 +36,0 @@\n-#include \"gc\/shenandoah\/shenandoahOldGC.hpp\"\n-#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n@@ -40,0 +38,2 @@\n+#include \"gc\/shenandoah\/shenandoahOldGC.hpp\"\n+#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n@@ -44,1 +44,0 @@\n-#include \"memory\/metaspaceUtils.hpp\"\n@@ -46,0 +45,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -276,6 +276,1 @@\n-  \/\/ If this was the requested GC cycle, notify waiters about it\n-  if (ShenandoahCollectorPolicy::is_explicit_gc(request.cause)) {\n-    notify_gc_waiters();\n-  }\n-\n-  \/\/ If this cycle completed successfully, notify threads waiting to retry allocation\n+  \/\/ If this cycle completed successfully, notify threads waiting for gc\n@@ -283,0 +278,1 @@\n+    notify_gc_waiters();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -33,1 +33,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"gc\/shenandoah\/shenandoahUtils.hpp\"\n@@ -45,1 +46,0 @@\n-#include \"gc\/shenandoah\/shenandoahUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -40,1 +39,0 @@\n-\n@@ -43,0 +41,3 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahPassiveMode.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahSATBMode.hpp\"\n@@ -45,0 +46,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -50,1 +52,0 @@\n-#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -56,1 +57,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n@@ -58,0 +58,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionClosures.hpp\"\n@@ -76,1 +77,0 @@\n-#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n@@ -78,0 +78,1 @@\n+#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n@@ -79,9 +80,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahPassiveMode.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahSATBMode.hpp\"\n-\n-#if INCLUDE_JFR\n-#include \"gc\/shenandoah\/shenandoahJfrSupport.hpp\"\n-#endif\n-\n-#include \"memory\/allocation.hpp\"\n@@ -106,1 +98,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -108,0 +99,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -109,0 +101,3 @@\n+#if INCLUDE_JFR\n+#include \"gc\/shenandoah\/shenandoahJfrSupport.hpp\"\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -32,1 +33,1 @@\n-#include \"gc\/shared\/collectedHeap.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -36,1 +37,0 @@\n-#include \"gc\/shenandoah\/shenandoahLock.hpp\"\n@@ -39,1 +39,0 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -41,0 +40,2 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n+#include \"gc\/shenandoah\/shenandoahLock.hpp\"\n@@ -42,1 +43,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"gc\/shared\/markBitMap.inline.hpp\"\n-#include \"gc\/shared\/threadLocalAllocBuffer.inline.hpp\"\n@@ -36,0 +34,1 @@\n+#include \"gc\/shared\/markBitMap.inline.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"gc\/shared\/threadLocalAllocBuffer.inline.hpp\"\n@@ -38,0 +38,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -42,3 +43,0 @@\n-#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeapRegion.inline.hpp\"\n@@ -46,0 +44,2 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegion.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n@@ -48,1 +48,1 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n+#include \"gc\/shenandoah\/shenandoahWorkGroup.hpp\"\n@@ -53,1 +53,0 @@\n-#include \"runtime\/prefetch.inline.hpp\"\n@@ -55,0 +54,1 @@\n+#include \"runtime\/prefetch.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -35,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n@@ -37,2 +38,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -40,0 +39,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -32,0 +31,2 @@\n+\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -30,2 +32,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"runtime\/os.hpp\"\n-\n@@ -32,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -34,1 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahMarkBitMap.inline.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahMarkBitMap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMemoryPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shenandoah\/shenandoahMetrics.hpp\"\n+#include \"gc\/shenandoah\/shenandoahFreeSet.hpp\"\n@@ -29,1 +29,1 @@\n-#include \"gc\/shenandoah\/shenandoahFreeSet.hpp\"\n+#include \"gc\/shenandoah\/shenandoahMetrics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahMmuTracker.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahMmuTracker.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahMonitoringSupport.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#include \"jfr\/jfrEvents.hpp\"\n-#include \"gc\/shenandoah\/shenandoahNumberSeq.hpp\"\n@@ -32,0 +30,2 @@\n+#include \"gc\/shenandoah\/shenandoahNumberSeq.hpp\"\n+#include \"jfr\/jfrEvents.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -35,1 +35,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"runtime\/atomic.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahRootProcessor.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahRootProcessor.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -36,1 +37,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include \"gc\/shared\/oopStorage.inline.hpp\"\n+#include \"gc\/shared\/oopStorageSet.hpp\"\n@@ -32,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -34,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -39,2 +41,0 @@\n-#include \"gc\/shared\/oopStorage.inline.hpp\"\n-#include \"gc\/shared\/oopStorageSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,2 @@\n-#include \"memory\/iterator.hpp\"\n-#include \"oops\/oop.hpp\"\n-#include \"oops\/objArrayOop.hpp\"\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.hpp\"\n+\n@@ -33,0 +32,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -38,2 +38,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -41,0 +39,3 @@\n+#include \"memory\/iterator.hpp\"\n+#include \"oops\/objArrayOop.hpp\"\n+#include \"oops\/oop.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include <cstddef>\n-\n@@ -32,0 +30,2 @@\n+#include <cstddef>\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"gc\/shenandoah\/shenandoahStringDedup.hpp\"\n+\n@@ -30,1 +32,0 @@\n-#include \"gc\/shenandoah\/shenandoahStringDedup.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStringDedup.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#include \"gc\/shared\/plab.hpp\"\n-#include \"gc\/shared\/gcThreadLocalData.hpp\"\n@@ -32,0 +30,3 @@\n+#include \"gc\/shared\/gcThreadLocalData.hpp\"\n+#include \"gc\/shared\/plab.hpp\"\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -35,1 +36,0 @@\n-#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/gcBehaviours.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"gc\/shared\/gcBehaviours.hpp\"\n@@ -35,1 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahNMethod.inline.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahNMethod.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"jfr\/jfrEvents.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"runtime\/vmThread.hpp\"\n@@ -42,0 +41,1 @@\n+#include \"runtime\/vmThread.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahTaskqueue.hpp\"\n@@ -30,2 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahTaskqueue.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkGroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/vmStructs_shenandoah.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"c1\/c1_CodeStubs.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"c1\/c1_CodeStubs.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,3 +124,13 @@\n-  \/\/ Enable NUMA by default\n-  if (FLAG_IS_DEFAULT(UseNUMA) && FLAG_IS_DEFAULT(ZFakeNUMA)) {\n-    FLAG_SET_DEFAULT(UseNUMA, true);\n+  \/\/ NUMA settings\n+  if (FLAG_IS_DEFAULT(ZFakeNUMA)) {\n+    \/\/ Enable NUMA by default\n+    if (FLAG_IS_DEFAULT(UseNUMA)) {\n+      FLAG_SET_DEFAULT(UseNUMA, true);\n+    }\n+  } else {\n+    if (UseNUMA) {\n+      if (!FLAG_IS_DEFAULT(UseNUMA)) {\n+        warning(\"ZFakeNUMA is enabled; turning off UseNUMA\");\n+      }\n+      FLAG_SET_ERGO(UseNUMA, false);\n+    }\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-  ZPageAge               _from_age;\n-  ZPageAge               _to_age;\n+  const ZPageAge         _from_age;\n+  const ZPageAge         _to_age;\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -282,1 +282,0 @@\n-  _page_allocator->reset_statistics(_id);\n@@ -863,1 +862,1 @@\n-  stat_heap()->at_mark_start(_page_allocator->stats(this));\n+  stat_heap()->at_mark_start(_page_allocator->update_and_stats(this));\n@@ -1212,1 +1211,1 @@\n-  stat_heap()->at_mark_start(_page_allocator->stats(this));\n+  stat_heap()->at_mark_start(_page_allocator->update_and_stats(this));\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/taskTerminator.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"gc\/shared\/taskTerminator.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -392,19 +391,0 @@\n-static void try_deduplicate(ZMarkContext* context, oop obj) {\n-  if (!StringDedup::is_enabled()) {\n-    \/\/ Not enabled\n-    return;\n-  }\n-\n-  if (!java_lang_String::is_instance(obj)) {\n-    \/\/ Not a String object\n-    return;\n-  }\n-\n-  if (java_lang_String::test_and_set_deduplication_requested(obj)) {\n-    \/\/ Already requested deduplication\n-    return;\n-  }\n-\n-  \/\/ Request deduplication\n-  context->string_dedup_requests()->add(obj);\n-}\n@@ -452,7 +432,1 @@\n-      const oop obj = to_oop(addr);\n-      follow_object(obj, finalizable);\n-\n-      if (!finalizable) {\n-        \/\/ Try deduplicate\n-        try_deduplicate(context, obj);\n-      }\n+      follow_object(to_oop(addr), finalizable);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -40,1 +39,0 @@\n-  StringDedup::Requests         _string_dedup_requests;\n@@ -51,1 +49,0 @@\n-  StringDedup::Requests* string_dedup_requests();\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-    _nstripes(nstripes),\n-    _string_dedup_requests() {}\n+    _nstripes(nstripes) {}\n@@ -54,4 +53,0 @@\n-inline StringDedup::Requests* ZMarkContext::string_dedup_requests() {\n-  return &_string_dedup_requests;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkingSMR.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"nmt\/memoryFileTracker.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"nmt\/memoryFileTracker.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"nmt\/memTracker.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"nmt\/memTracker.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"code\/relocInfo.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"code\/relocInfo.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"code\/relocInfo.hpp\"\n@@ -26,0 +25,1 @@\n+#include \"code\/relocInfo.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"gc\/z\/zThreadLocalData.hpp\"\n@@ -26,0 +25,1 @@\n+#include \"gc\/z\/zThreadLocalData.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1376,2 +1376,17 @@\n-ZPageAllocatorStats ZPageAllocator::stats(ZGeneration* generation) const {\n-  ZLocker<ZLock> locker(&_lock);\n+void ZPageAllocator::update_collection_stats(ZGenerationId id) {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"Should be at safepoint\");\n+\n+#ifdef ASSERT\n+  size_t total_used = 0;\n+\n+  ZPartitionIterator iter(&_partitions);\n+  for (ZPartition* partition; iter.next(&partition);) {\n+    total_used += partition->_used;\n+  }\n+\n+  assert(total_used == _used, \"Must be consistent %zu == %zu\", total_used, _used);\n+#endif\n+\n+  _collection_stats[(int)id]._used_high = _used;\n+  _collection_stats[(int)id]._used_low = _used;\n+}\n@@ -1379,0 +1394,1 @@\n+ZPageAllocatorStats ZPageAllocator::stats_inner(ZGeneration* generation) const {\n@@ -1393,17 +1409,4 @@\n-void ZPageAllocator::reset_statistics(ZGenerationId id) {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"Should be at safepoint\");\n-#ifdef ASSERT\n-  {\n-    \/\/ We may free without safepoint synchronization, take the lock to get\n-    \/\/ consistent values.\n-    ZLocker<ZLock> locker(&_lock);\n-    size_t total_used = 0;\n-\n-    ZPartitionIterator iter(&_partitions);\n-    for (ZPartition* partition; iter.next(&partition);) {\n-      total_used += partition->_used;\n-    }\n-\n-    assert(total_used == _used, \"Must be consistent at safepoint %zu == %zu\", total_used, _used);\n-  }\n-#endif\n+ZPageAllocatorStats ZPageAllocator::stats(ZGeneration* generation) const {\n+  ZLocker<ZLock> locker(&_lock);\n+  return stats_inner(generation);\n+}\n@@ -1411,2 +1414,2 @@\n-  \/\/ Read once, we may have concurrent writers.\n-  const size_t used = Atomic::load(&_used);\n+ZPageAllocatorStats ZPageAllocator::update_and_stats(ZGeneration* generation) {\n+  ZLocker<ZLock> locker(&_lock);\n@@ -1414,2 +1417,2 @@\n-  _collection_stats[(int)id]._used_high = used;\n-  _collection_stats[(int)id]._used_low = used;\n+  update_collection_stats(generation->id());\n+  return stats_inner(generation);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -238,0 +238,3 @@\n+  void update_collection_stats(ZGenerationId id);\n+  ZPageAllocatorStats stats_inner(ZGeneration* generation) const;\n+\n@@ -265,2 +268,1 @@\n-\n-  void reset_statistics(ZGenerationId id);\n+  ZPageAllocatorStats update_and_stats(ZGeneration* generation);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"gc\/z\/zStringDedup.inline.hpp\"\n@@ -562,6 +563,8 @@\n-  Allocator* const   _allocator;\n-  ZForwarding*       _forwarding;\n-  ZPage*             _target[ZAllocator::_relocation_allocators];\n-  ZGeneration* const _generation;\n-  size_t             _other_promoted;\n-  size_t             _other_compacted;\n+  Allocator* const    _allocator;\n+  ZForwarding*        _forwarding;\n+  ZPage*              _target[ZAllocator::_relocation_allocators];\n+  ZGeneration* const  _generation;\n+  size_t              _other_promoted;\n+  size_t              _other_compacted;\n+  ZStringDedupContext _string_dedup_context;\n+\n@@ -798,0 +801,7 @@\n+  void maybe_string_dedup(zaddress to_addr) {\n+    if (_forwarding->is_promotion()) {\n+      \/\/ Only deduplicate promoted objects, and let short-lived strings simply die instead.\n+      _string_dedup_context.request(to_oop(to_addr));\n+    }\n+  }\n+\n@@ -807,0 +817,2 @@\n+    maybe_string_dedup(to_addr);\n+\n@@ -1179,0 +1191,1 @@\n+    ZStringDedupContext        string_dedup_context;\n@@ -1182,0 +1195,1 @@\n+        \/\/ Remap oops and add remset if needed\n@@ -1183,0 +1197,3 @@\n+\n+        \/\/ String dedup\n+        string_dedup_context.request(obj);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -26,0 +25,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRuntimeWorkers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zCPU.inline.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"gc\/z\/zCPU.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZSTRINGDEDUP_HPP\n+#define SHARE_GC_Z_ZSTRINGDEDUP_HPP\n+\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/z\/zAddress.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+class ZStringDedupContext {\n+private:\n+  StringDedup::Requests _requests;\n+\n+public:\n+  void request(oop obj);\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZSTRINGDEDUP_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zStringDedup.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n+#define SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n+\n+#include \"gc\/z\/zStringDedup.hpp\"\n+\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n+\n+inline void ZStringDedupContext::request(oop obj) {\n+  if (!StringDedup::is_enabled()) {\n+    \/\/ Not enabled\n+    return;\n+  }\n+\n+  if (!java_lang_String::is_instance(obj)) {\n+    \/\/ Not a String object\n+    return;\n+  }\n+\n+  if (java_lang_String::test_and_set_deduplication_requested(obj)) {\n+    \/\/ Already requested deduplication\n+    return;\n+  }\n+\n+  \/\/ Request deduplication\n+  _requests.add(obj);\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZSTRINGDEDUP_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zStringDedup.inline.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/z\/zBarrier.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/z\/zBarrier.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUncoloredRoot.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-  static constexpr bool IsComparatorCompatible = std::is_assignable<ComparatorType*&, Comparator>::value;\n-  static_assert(IsComparatorCompatible, \"Incompatible Comparator, must decay to plain function pointer\");\n+  ComparatorType* const comparator_fn_ptr = comparator;\n@@ -93,1 +92,1 @@\n-  qsort(array, count, sizeof(T), reinterpret_cast<SortType*>(static_cast<ComparatorType*>(comparator)));\n+  qsort(array, count, sizeof(T), reinterpret_cast<SortType*>(comparator_fn_ptr));\n","filename":"src\/hotspot\/share\/gc\/z\/zUtils.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/z\/zStoreBarrierBuffer.inline.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"gc\/z\/zStoreBarrierBuffer.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemoryManager.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  current->set_vm_result(java_class);\n+  current->set_vm_result_oop(java_class);\n@@ -201,1 +201,1 @@\n-  current->set_vm_result(result);\n+  current->set_vm_result_oop(result);\n@@ -208,1 +208,1 @@\n-    current->set_vm_result_2((Metadata*)flags);\n+    current->set_vm_result_metadata((Metadata*)flags);\n@@ -228,1 +228,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -249,1 +249,1 @@\n-  current->set_vm_result(res);\n+  current->set_vm_result_oop(res);\n@@ -270,1 +270,1 @@\n-  current->set_vm_result(res);\n+  current->set_vm_result_oop(res);\n@@ -288,1 +288,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -295,1 +295,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -302,1 +302,1 @@\n-  current->set_vm_result(res);\n+  current->set_vm_result_oop(res);\n@@ -335,1 +335,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -381,1 +381,1 @@\n-  current->set_vm_result_2(klass);\n+  current->set_vm_result_metadata(klass);\n@@ -481,1 +481,1 @@\n-  current->set_vm_result(exception());\n+  current->set_vm_result_oop(exception());\n@@ -500,1 +500,1 @@\n-  current->set_vm_result(exception());\n+  current->set_vm_result_oop(exception());\n@@ -559,1 +559,1 @@\n-    current->set_vm_result(h_exception());\n+    current->set_vm_result_oop(h_exception());\n@@ -574,1 +574,1 @@\n-    current->set_vm_result(exception);\n+    current->set_vm_result_oop(exception);\n@@ -675,1 +675,1 @@\n-  current->set_vm_result(h_exception());\n+  current->set_vm_result_oop(h_exception());\n@@ -872,1 +872,1 @@\n-  Handle exception(current, current->vm_result());\n+  Handle exception(current, current->vm_result_oop());\n@@ -874,1 +874,1 @@\n-  current->set_vm_result(nullptr); \/\/ clear vm result before continuing (may cause memory leaks and assert failures)\n+  current->set_vm_result_oop(nullptr); \/\/ clear vm result before continuing (may cause memory leaks and assert failures)\n@@ -876,1 +876,1 @@\n-  current->set_vm_result(exception());\n+  current->set_vm_result_oop(exception());\n@@ -1601,1 +1601,1 @@\n-\/\/ and return it as a vm_result so that it can be reloaded in the list of invokestatic parameters.\n+\/\/ and return it as a vm_result_oop so that it can be reloaded in the list of invokestatic parameters.\n@@ -1622,1 +1622,1 @@\n-    current->set_vm_result(member_name_oop);\n+    current->set_vm_result_oop(member_name_oop);\n@@ -1624,1 +1624,1 @@\n-    current->set_vm_result(nullptr);\n+    current->set_vm_result_oop(nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2036,2 +2036,2 @@\n-        SET_STACK_OBJECT(THREAD->vm_result(), 0);\n-        THREAD->set_vm_result(nullptr);\n+        SET_STACK_OBJECT(THREAD->vm_result_oop(), 0);\n+        THREAD->set_vm_result_oop(nullptr);\n@@ -2048,2 +2048,2 @@\n-        SET_STACK_OBJECT(THREAD->vm_result(), -1);\n-        THREAD->set_vm_result(nullptr);\n+        SET_STACK_OBJECT(THREAD->vm_result_oop(), -1);\n+        THREAD->set_vm_result_oop(nullptr);\n@@ -2065,2 +2065,2 @@\n-        SET_STACK_OBJECT(THREAD->vm_result(), -dims);\n-        THREAD->set_vm_result(nullptr);\n+        SET_STACK_OBJECT(THREAD->vm_result_oop(), -dims);\n+        THREAD->set_vm_result_oop(nullptr);\n@@ -2147,2 +2147,2 @@\n-                SET_STACK_OBJECT(THREAD->vm_result(), 0);\n-                THREAD->set_vm_result(nullptr);\n+                SET_STACK_OBJECT(THREAD->vm_result_oop(), 0);\n+                THREAD->set_vm_result_oop(nullptr);\n@@ -2164,2 +2164,2 @@\n-            SET_STACK_OBJECT(THREAD->vm_result(), 0);\n-            THREAD->set_vm_result(nullptr);\n+            SET_STACK_OBJECT(THREAD->vm_result_oop(), 0);\n+            THREAD->set_vm_result_oop(nullptr);\n@@ -2172,1 +2172,1 @@\n-              oop result = THREAD->vm_result();\n+              oop result = THREAD->vm_result_oop();\n@@ -2214,1 +2214,1 @@\n-              oop result = THREAD->vm_result();\n+              oop result = THREAD->vm_result_oop();\n@@ -2253,1 +2253,1 @@\n-          result = THREAD->vm_result();\n+          result = THREAD->vm_result_oop();\n@@ -2521,2 +2521,2 @@\n-        SET_STACK_OBJECT(THREAD->vm_result(), -1);\n-        THREAD->set_vm_result(nullptr);\n+        SET_STACK_OBJECT(THREAD->vm_result_oop(), -1);\n+        THREAD->set_vm_result_oop(nullptr);\n@@ -2962,2 +2962,2 @@\n-    except_oop = Handle(THREAD, THREAD->vm_result());\n-    THREAD->set_vm_result(nullptr);\n+    except_oop = Handle(THREAD, THREAD->vm_result_oop());\n+    THREAD->set_vm_result_oop(nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  f->do_oop((oop*) &_vm_result);\n+  f->do_oop((oop*) &_vm_result_oop);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -828,1 +828,7 @@\n-          CompileTask::print(tty, nm, \"(hosted JVMCI compilation)\");\n+          if (name != nullptr) {\n+            stringStream st;\n+            st.print_cr(\"(hosted JVMCI compilation: %s)\", name);\n+            CompileTask::print(tty, nm, st.as_string());\n+          } else {\n+            CompileTask::print(tty, nm, \"(hosted JVMCI compilation)\");\n+          }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-\/\/   2. null is written to JavaThread::_vm_result\n+\/\/   2. null is written to JavaThread::_vm_result_oop\n@@ -110,1 +110,1 @@\n-        THREAD->set_vm_result(nullptr);\n+        THREAD->set_vm_result_oop(nullptr);\n@@ -130,1 +130,1 @@\n-      current->set_vm_result(nullptr);\n+      current->set_vm_result_oop(nullptr);\n@@ -135,1 +135,1 @@\n-    current->set_vm_result(obj);\n+    current->set_vm_result_oop(obj);\n@@ -169,1 +169,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -180,1 +180,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -186,1 +186,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -204,1 +204,1 @@\n-    current->set_vm_result(nullptr);\n+    current->set_vm_result_oop(nullptr);\n@@ -209,1 +209,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -536,1 +536,1 @@\n-    current->set_vm_result(result.get_oop());\n+    current->set_vm_result_oop(result.get_oop());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  nonstatic_field(JavaThread,                  _vm_result,                                    oop)                                   \\\n+  nonstatic_field(JavaThread,                  _vm_result_oop,                                oop)                                   \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -593,1 +593,1 @@\n-    resolved_klasses()->at_put(resolved_klass_index, nullptr);\n+    \/\/ This might be at a safepoint but do this in the right order.\n@@ -595,0 +595,1 @@\n+    resolved_klasses()->at_put(resolved_klass_index, nullptr);\n@@ -679,3 +680,2 @@\n-    if (klass != nullptr) {\n-      return klass;\n-    }\n+    assert(klass != nullptr, \"must be resolved\");\n+    return klass;\n@@ -754,2 +754,0 @@\n-  Klass** adr = this_cp->resolved_klasses()->adr_at(resolved_klass_index);\n-  Atomic::release_store(adr, k);\n@@ -760,0 +758,2 @@\n+  Klass** adr = this_cp->resolved_klasses()->adr_at(resolved_klass_index);\n+  Atomic::release_store(adr, k);\n@@ -768,1 +768,1 @@\n-    this_cp->resolved_klasses()->at_put(resolved_klass_index, nullptr);\n+    Atomic::store(adr, (Klass*)nullptr);\n@@ -788,1 +788,1 @@\n-    assert(k != nullptr, \"should be resolved\");\n+    assert(k != nullptr, \"must be resolved\");\n@@ -1177,8 +1177,1 @@\n-    {\n-      CPKlassSlot kslot = this_cp->klass_slot_at(cp_index);\n-      int resolved_klass_index = kslot.resolved_klass_index();\n-      if (this_cp->resolved_klasses()->at(resolved_klass_index) == nullptr) {\n-        (*status_return) = false;\n-        return nullptr;\n-      }\n-      \/\/ the klass is waiting in the CP; go get it\n+      assert(this_cp->resolved_klass_at(cp_index) != nullptr, \"must be resolved\");\n@@ -1186,1 +1179,0 @@\n-    }\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -816,2 +816,8 @@\n-      assert(is_instance_klass(), \"sanity\");\n-      assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+      if (is_instance_klass()) {\n+        assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+      } else {\n+        precond(is_objArray_klass());\n+        Klass *k = ObjArrayKlass::cast(this)->bottom_klass();\n+        precond(k->is_instance_klass());\n+        assert(InstanceKlass::cast(k)->is_shared_unregistered_class(), \"sanity\");\n+      }\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3285,0 +3285,4 @@\n+Node* BlackholeNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return remove_dead_region(phase, can_reshape) ? this : nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -751,0 +751,1 @@\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5811,1 +5811,1 @@\n-  igv_print_graph_to_network(phase_name, (Node*) C->root(), empty_list);\n+  igv_print_graph_to_network(phase_name, empty_list);\n@@ -5814,1 +5814,1 @@\n-void Compile::igv_print_graph_to_network(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes) {\n+void Compile::igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-  LoopOptsShenandoahPostExpand,\n@@ -702,1 +701,1 @@\n-  void igv_print_graph_to_network(const char* name, Node* node, GrowableArray<const Node*>& visible_nodes);\n+  void igv_print_graph_to_network(const char* name, GrowableArray<const Node*>& visible_nodes);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-    Node* adr = basic_plus_adr(top(), thread, in_bytes(JavaThread::vm_result_offset()));\n+    Node* adr = basic_plus_adr(top(), thread, in_bytes(JavaThread::vm_result_oop_offset()));\n","filename":"src\/hotspot\/share\/opto\/generateOptoStub.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2067,1 +2067,1 @@\n-      C->igv_print_graph_to_network(\"PrintBFS\", (Node*) C->root(), _print_list);\n+      C->igv_print_graph_to_network(\"PrintBFS\", _print_list);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-    current->set_vm_result(result);\n+    current->set_vm_result_oop(result);\n@@ -418,1 +418,1 @@\n-  current->set_vm_result(result);\n+  current->set_vm_result_oop(result);\n@@ -446,1 +446,1 @@\n-  current->set_vm_result(result);\n+  current->set_vm_result_oop(result);\n@@ -453,1 +453,1 @@\n-  oop result = current->vm_result();\n+  oop result = current->vm_result_oop();\n@@ -490,1 +490,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -507,1 +507,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -525,1 +525,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -544,1 +544,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -562,1 +562,1 @@\n-  current->set_vm_result(obj);\n+  current->set_vm_result_oop(obj);\n@@ -2055,1 +2055,1 @@\n-  thread->set_vm_result(exception);\n+  thread->set_vm_result_oop(exception);\n@@ -2423,1 +2423,1 @@\n-  current->set_vm_result(buffer);\n+  current->set_vm_result_oop(buffer);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-  VectorSet vtn_dependencies; \/\/ Shared, but cleared for every vtnode.\n-  build_inputs_for_vector_vtnodes(vtn_dependencies);\n-  build_inputs_for_scalar_vtnodes(vtn_dependencies);\n+  VectorSet vtn_memory_dependencies; \/\/ Shared, but cleared for every vtnode.\n+  build_inputs_for_vector_vtnodes(vtn_memory_dependencies);\n+  build_inputs_for_scalar_vtnodes(vtn_memory_dependencies);\n@@ -61,1 +61,1 @@\n-void SuperWordVTransformBuilder::build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_vector_vtnodes(VectorSet& vtn_memory_dependencies) {\n@@ -68,1 +68,1 @@\n-    vtn_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n+    vtn_memory_dependencies.clear(); \/\/ Add every memory dependency only once per vtn.\n@@ -71,1 +71,4 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, MemNode::Address);\n+      set_req_with_scalar(p0,   vtn, MemNode::Address);\n+      for (uint k = 0; k < pack->size(); k++) {\n+        add_memory_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_memory_dependencies);\n+      }\n@@ -73,2 +76,5 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, MemNode::Address);\n-      set_req_with_vector(pack, vtn, vtn_dependencies, MemNode::ValueIn);\n+      set_req_with_scalar(p0,   vtn, MemNode::Address);\n+      set_req_with_vector(pack, vtn, MemNode::ValueIn);\n+      for (uint k = 0; k < pack->size(); k++) {\n+        add_memory_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_memory_dependencies);\n+      }\n@@ -76,2 +82,2 @@\n-      set_req_with_scalar(p0,   vtn, vtn_dependencies, 1); \/\/ scalar init\n-      set_req_with_vector(pack, vtn, vtn_dependencies, 2); \/\/ vector\n+      set_req_with_scalar(p0,   vtn, 1); \/\/ scalar init\n+      set_req_with_vector(pack, vtn, 2); \/\/ vector\n@@ -83,2 +89,2 @@\n-        set_req_with_vector(pack, vtn, vtn_dependencies, 1);\n-        set_req_with_scalar(p0,   vtn, vtn_dependencies, 2); \/\/ constant rotation\n+        set_req_with_vector(pack, vtn, 1);\n+        set_req_with_scalar(p0,   vtn, 2); \/\/ constant rotation\n@@ -86,2 +92,2 @@\n-        set_req_with_vector(pack, vtn, vtn_dependencies, 1);\n-        set_req_with_scalar(p0,   vtn, vtn_dependencies, 2); \/\/ constant rounding mode\n+        set_req_with_vector(pack, vtn, 1);\n+        set_req_with_scalar(p0,   vtn, 2); \/\/ constant rounding mode\n@@ -90,1 +96,1 @@\n-        set_all_req_with_vectors(pack, vtn, vtn_dependencies);\n+        set_all_req_with_vectors(pack, vtn);\n@@ -96,1 +102,1 @@\n-        set_all_req_with_vectors(pack, vtn, vtn_dependencies);\n+        set_all_req_with_vectors(pack, vtn);\n@@ -99,4 +105,0 @@\n-\n-    for (uint k = 0; k < pack->size(); k++) {\n-      add_dependencies_of_node_to_vtnode(pack->at(k), vtn, vtn_dependencies);\n-    }\n@@ -106,1 +108,1 @@\n-void SuperWordVTransformBuilder::build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::build_inputs_for_scalar_vtnodes(VectorSet& vtn_memory_dependencies) {\n@@ -111,1 +113,1 @@\n-    vtn_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n+    vtn_memory_dependencies.clear(); \/\/ Add every dependency only once per vtn.\n@@ -114,1 +116,2 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::Address);\n+      set_req_with_scalar(n, vtn, MemNode::Address);\n+      add_memory_dependencies_of_node_to_vtnode(n, vtn, vtn_memory_dependencies);\n@@ -116,2 +119,3 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::Address);\n-      set_req_with_scalar(n, vtn, vtn_dependencies, MemNode::ValueIn);\n+      set_req_with_scalar(n, vtn, MemNode::Address);\n+      set_req_with_scalar(n, vtn, MemNode::ValueIn);\n+      add_memory_dependencies_of_node_to_vtnode(n, vtn, vtn_memory_dependencies);\n@@ -123,1 +127,1 @@\n-      set_req_with_scalar(n, vtn, vtn_dependencies, 0);\n+      set_req_with_scalar(n, vtn, 0);\n@@ -126,1 +130,1 @@\n-      set_all_req_with_scalars(n, vtn, vtn_dependencies);\n+      set_all_req_with_scalars(n, vtn);\n@@ -128,2 +132,0 @@\n-\n-    add_dependencies_of_node_to_vtnode(n, vtn, vtn_dependencies);\n@@ -178,1 +180,1 @@\n-void SuperWordVTransformBuilder::set_req_with_scalar(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index) {\n+void SuperWordVTransformBuilder::set_req_with_scalar(Node* n, VTransformNode* vtn, const int index) {\n@@ -181,1 +183,0 @@\n-  vtn_dependencies.set(req->_idx);\n@@ -276,1 +277,1 @@\n-void SuperWordVTransformBuilder::set_req_with_vector(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies, int j) {\n+void SuperWordVTransformBuilder::set_req_with_vector(const Node_List* pack, VTransformNode* vtn, int j) {\n@@ -279,1 +280,0 @@\n-  vtn_dependencies.set(req->_idx);\n@@ -282,1 +282,1 @@\n-void SuperWordVTransformBuilder::set_all_req_with_scalars(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::set_all_req_with_scalars(Node* n, VTransformNode* vtn) {\n@@ -287,1 +287,1 @@\n-    set_req_with_scalar(n, vtn, vtn_dependencies, j);\n+    set_req_with_scalar(n, vtn, j);\n@@ -291,1 +291,1 @@\n-void SuperWordVTransformBuilder::set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn) {\n@@ -298,1 +298,1 @@\n-    set_req_with_vector(pack, vtn, vtn_dependencies, j);\n+    set_req_with_vector(pack, vtn, j);\n@@ -302,1 +302,1 @@\n-void SuperWordVTransformBuilder::add_dependencies_of_node_to_vtnode(Node*n, VTransformNode* vtn, VectorSet& vtn_dependencies) {\n+void SuperWordVTransformBuilder::add_memory_dependencies_of_node_to_vtnode(Node*n, VTransformNode* vtn, VectorSet& vtn_memory_dependencies) {\n@@ -306,0 +306,1 @@\n+    if (!preds.is_current_memory_edge()) { continue; }\n@@ -307,3 +308,1 @@\n-    \/\/ Only add memory dependencies to memory nodes. All others are taken care of with the req.\n-    if (n->is_Mem() && !pred->is_Mem()) { continue; }\n-\n+    \/\/ Only track every memory edge once.\n@@ -311,0 +310,1 @@\n+    if (vtn_memory_dependencies.test_set(dependency->_idx)) { continue; }\n@@ -312,5 +312,2 @@\n-    \/\/ Reduction self-cycle?\n-    if (vtn == dependency && _vloop_analyzer.reductions().is_marked_reduction(n)) { continue; }\n-\n-    if (vtn_dependencies.test_set(dependency->_idx)) { continue; }\n-    vtn->add_dependency(dependency); \/\/ Add every dependency only once per vtn.\n+    assert(n->is_Mem() && pred->is_Mem(), \"only memory edges\");\n+    vtn->add_memory_dependency(dependency); \/\/ Add every dependency only once per vtn.\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":43,"deletions":46,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  void build_inputs_for_vector_vtnodes(VectorSet& vtn_dependencies);\n-  void build_inputs_for_scalar_vtnodes(VectorSet& vtn_dependencies);\n+  void build_inputs_for_vector_vtnodes(VectorSet& vtn_memory_dependencies);\n+  void build_inputs_for_scalar_vtnodes(VectorSet& vtn_memory_dependencies);\n@@ -80,5 +80,5 @@\n-  void set_req_with_scalar(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index);\n-  void set_req_with_vector(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies, const int index);\n-  void set_all_req_with_scalars(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n-  void set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn, VectorSet& vtn_dependencies);\n-  void add_dependencies_of_node_to_vtnode(Node* n, VTransformNode* vtn, VectorSet& vtn_dependencies);\n+  void set_req_with_scalar(Node* n, VTransformNode* vtn, const int index);\n+  void set_req_with_vector(const Node_List* pack, VTransformNode* vtn, const int index);\n+  void set_all_req_with_scalars(Node* n, VTransformNode* vtn);\n+  void set_all_req_with_vectors(const Node_List* pack, VTransformNode* vtn);\n+  void add_memory_dependencies_of_node_to_vtnode(Node* n, VTransformNode* vtn, VectorSet& vtn_memory_dependencies);\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -402,0 +402,1 @@\n+    _is_current_memory_edge(false),\n@@ -421,0 +422,1 @@\n+    _is_current_memory_edge = false;\n@@ -424,0 +426,1 @@\n+    _is_current_memory_edge = true;\n@@ -426,0 +429,1 @@\n+    _is_current_memory_edge = false;\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -651,0 +651,1 @@\n+    bool _is_current_memory_edge;\n@@ -668,0 +669,4 @@\n+    bool is_current_memory_edge() const {\n+      assert(!done(), \"not done yet\");\n+      return _is_current_memory_edge;\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,1 +267,2 @@\n-  \/\/ _in is split into required inputs (_req), and additional dependencies.\n+  \/\/ _in is split into required inputs (_req, i.e. all data dependencies),\n+  \/\/ and memory dependencies.\n@@ -297,1 +298,1 @@\n-  void add_dependency(VTransformNode* n) {\n+  void add_memory_dependency(VTransformNode* n) {\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -568,0 +568,38 @@\n+static void assert_frames_in_continuation_are_safe(JavaThread* thread) {\n+#ifdef ASSERT\n+  StackWatermark* watermark = StackWatermarkSet::get(thread, StackWatermarkKind::gc);\n+  if (watermark == nullptr) {\n+    return;\n+  }\n+  ContinuationEntry* ce = thread->last_continuation();\n+  RegisterMap map(thread,\n+                  RegisterMap::UpdateMap::include,\n+                  RegisterMap::ProcessFrames::skip,\n+                  RegisterMap::WalkContinuation::skip);\n+  map.set_include_argument_oops(false);\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+    watermark->assert_is_frame_safe(f);\n+  }\n+#endif \/\/ ASSERT\n+}\n+\n+#ifdef ASSERT\n+static bool monitors_on_stack(JavaThread* thread) {\n+  assert_frames_in_continuation_are_safe(thread);\n+  ContinuationEntry* ce = thread->last_continuation();\n+  RegisterMap map(thread,\n+                  RegisterMap::UpdateMap::include,\n+                  RegisterMap::ProcessFrames::skip,\n+                  RegisterMap::WalkContinuation::skip);\n+  map.set_include_argument_oops(false);\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n+        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f)) ||\n+        (f.is_native_frame() && ContinuationHelper::NativeFrame::is_owning_locks(map.thread(), f))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+#endif \/\/ ASSERT\n+\n@@ -572,0 +610,2 @@\n+  assert_frames_in_continuation_are_safe(_thread);\n+  assert(LockingMode != LM_LEGACY || !monitors_on_stack(_thread), \"unexpected monitors on stack\");\n@@ -1624,17 +1664,0 @@\n-static bool monitors_on_stack(JavaThread* thread) {\n-  ContinuationEntry* ce = thread->last_continuation();\n-  RegisterMap map(thread,\n-                  RegisterMap::UpdateMap::include,\n-                  RegisterMap::ProcessFrames::include,\n-                  RegisterMap::WalkContinuation::skip);\n-  map.set_include_argument_oops(false);\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n-    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n-        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f)) ||\n-        (f.is_native_frame() && ContinuationHelper::NativeFrame::is_owning_locks(map.thread(), f))) {\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-\n@@ -1717,2 +1740,0 @@\n-  assert(LockingMode != LM_LEGACY || (monitors_on_stack(current) == ((current->held_monitor_count() - current->jni_monitor_count()) > 0)),\n-         \"Held monitor count and locks on stack invariant: \" INT64_FORMAT \" JNI: \" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":40,"deletions":19,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+typedef AutoModifyRestore<int>  IntFlagSetting;\n","filename":"src\/hotspot\/share\/runtime\/flags\/flagSetting.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -33,1 +34,1 @@\n-void AbstractICache::initialize() {\n+void AbstractICache::initialize(int phase) {\n@@ -37,1 +38,13 @@\n-  BufferBlob* b = BufferBlob::create(\"flush_icache_stub\", ICache::stub_size);\n+  const char* stub_name = nullptr;\n+  switch (phase) {\n+    case 1:\n+      stub_name = \"flush_icache_initial_stub\";\n+      break;\n+    case 2:\n+      stub_name = \"flush_icache_final_stub\";\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+\n+  BufferBlob* b = BufferBlob::create(stub_name, ICache::stub_size);\n@@ -39,1 +52,1 @@\n-    vm_exit_out_of_memory(ICache::stub_size, OOM_MALLOC_ERROR, \"CodeCache: no space for flush_icache_stub\");\n+    vm_exit_out_of_memory(ICache::stub_size, OOM_MALLOC_ERROR, \"CodeCache: no space for %s\", stub_name);\n@@ -43,1 +56,1 @@\n-  ICacheStubGenerator g(&c);\n+  ICacheStubGenerator g(stub_name, &c);\n@@ -109,1 +122,5 @@\n-  ICache::initialize();\n+  ICache::initialize(1);\n+}\n+\n+void icache_init2() {\n+  ICache::initialize(2);\n","filename":"src\/hotspot\/share\/runtime\/icache.cpp","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -63,1 +63,7 @@\n-  static void initialize();\n+  \/\/ Initialization phases:\n+  \/\/  1 = Initial phase, nothing is known about the machine features.\n+  \/\/      The stub generated at this phase must use the most basic mechanism,\n+  \/\/      until optimized final stub is generated.\n+  \/\/  2 = Final stub that uses the optimized flush mechanism. Happens after\n+  \/\/      CPU feature detection determines which mechanism is usable.\n+  static void initialize(int phase);\n@@ -75,0 +81,3 @@\n+ private:\n+   const char* _stub_name;\n+\n@@ -76,1 +85,1 @@\n-  ICacheStubGenerator(CodeBuffer *c) : StubCodeGenerator(c) {}\n+  ICacheStubGenerator(const char* stub_name, CodeBuffer *c) : StubCodeGenerator(c), _stub_name(stub_name) {}\n","filename":"src\/hotspot\/share\/runtime\/icache.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+void icache_init2();\n@@ -129,0 +130,1 @@\n+  icache_init2();                 \/\/ depends on VM_Version for choosing the mechanism\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-        thread->set_vm_result(result->get_oop());\n+        thread->set_vm_result_oop(result->get_oop());\n@@ -455,2 +455,2 @@\n-    result->set_oop(thread->vm_result());\n-    thread->set_vm_result(nullptr);\n+    result->set_oop(thread->vm_result_oop());\n+    thread->set_vm_result_oop(nullptr);\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -427,2 +427,2 @@\n-  _vm_result(nullptr),\n-  _vm_result_2(nullptr),\n+  _vm_result_oop(nullptr),\n+  _vm_result_metadata(nullptr),\n@@ -1416,1 +1416,1 @@\n-  f->do_oop((oop*) &_vm_result);\n+  f->do_oop((oop*) &_vm_result_oop);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,2 +148,2 @@\n-  oop           _vm_result;    \/\/ oop result is GC-preserved\n-  Metadata*     _vm_result_2;  \/\/ non-oop result\n+  oop           _vm_result_oop;       \/\/ oop result is GC-preserved\n+  Metadata*     _vm_result_metadata;  \/\/ non-oop result\n@@ -788,2 +788,2 @@\n-  oop  vm_result() const                         { return _vm_result; }\n-  void set_vm_result  (oop x)                    { _vm_result   = x; }\n+  oop  vm_result_oop() const                     { return _vm_result_oop; }\n+  void set_vm_result_oop(oop x)                  { _vm_result_oop   = x; }\n@@ -791,1 +791,1 @@\n-  void set_vm_result_2  (Metadata* x)            { _vm_result_2   = x; }\n+  void set_vm_result_metadata(Metadata* x)       { _vm_result_metadata = x; }\n@@ -860,2 +860,2 @@\n-  static ByteSize vm_result_offset()             { return byte_offset_of(JavaThread, _vm_result); }\n-  static ByteSize vm_result_2_offset()           { return byte_offset_of(JavaThread, _vm_result_2); }\n+  static ByteSize vm_result_oop_offset()         { return byte_offset_of(JavaThread, _vm_result_oop); }\n+  static ByteSize vm_result_metadata_offset()    { return byte_offset_of(JavaThread, _vm_result_metadata); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2254,0 +2254,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_uncommit_memory and record_virtual_memory_uncommit because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_commit_memory and record_virtual_memory_commit.\n+\/\/ We assume that there is some external synchronization that prevents a region from being uncommitted\n+\/\/ before it is finished being committed.\n@@ -2276,0 +2281,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_release_memory and record_virtual_memory_release because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_reserve_memory and record_virtual_memory_reserve.\n+\/\/ We assume that there is some external synchronization that prevents a region from being released\n+\/\/ before it is finished being reserved.\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1490,1 +1490,1 @@\n-    current->set_vm_result_2(callee_method());\n+    current->set_vm_result_metadata(callee_method());\n@@ -1521,1 +1521,1 @@\n-    current->set_vm_result_2(callee);\n+    current->set_vm_result_metadata(callee);\n@@ -1550,1 +1550,1 @@\n-    current->set_vm_result_2(callee_method());\n+    current->set_vm_result_metadata(callee_method());\n@@ -1619,1 +1619,1 @@\n-    current->set_vm_result_2(callee_method());\n+    current->set_vm_result_metadata(callee_method());\n@@ -1631,1 +1631,1 @@\n-    current->set_vm_result_2(callee_method());\n+    current->set_vm_result_metadata(callee_method());\n@@ -1645,1 +1645,1 @@\n-    current->set_vm_result_2(callee_method());\n+    current->set_vm_result_metadata(callee_method());\n@@ -3566,1 +3566,1 @@\n-  oop new_obj = current->vm_result();\n+  oop new_obj = current->vm_result_oop();\n@@ -3624,2 +3624,2 @@\n-  current->set_vm_result(array);\n-  current->set_vm_result_2(callee()); \/\/ TODO: required to keep callee live?\n+  current->set_vm_result_oop(array);\n+  current->set_vm_result_metadata(callee()); \/\/ TODO: required to keep callee live?\n@@ -3717,1 +3717,1 @@\n-  current->set_vm_result(res);\n+  current->set_vm_result_oop(res);\n@@ -3742,1 +3742,1 @@\n-    current->set_vm_result((oopDesc*)res);\n+    current->set_vm_result_oop((oopDesc*)res);\n@@ -3762,1 +3762,1 @@\n-    current->set_vm_result(vt);\n+    current->set_vm_result_oop(vt);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  void assert_is_frame_safe(const frame& f) NOT_DEBUG_RETURN;\n@@ -154,0 +153,2 @@\n+\n+  void assert_is_frame_safe(const frame& f) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-  nonstatic_field(JavaThread,                  _scopedValueCache,                              OopHandle)                             \\\n+  nonstatic_field(JavaThread,                  _scopedValueCache,                              OopHandle)                            \\\n@@ -611,2 +611,0 @@\n-  nonstatic_field(JavaThread,                  _vm_result,                                    oop)                                   \\\n-  nonstatic_field(JavaThread,                  _vm_result_2,                                  Metadata*)                             \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -310,1 +310,0 @@\n-const size_t HWperKB            = K \/ sizeof(HeapWord);\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -11102,0 +11102,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n@@ -11120,0 +11121,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n@@ -11138,0 +11140,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n@@ -11156,0 +11159,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n@@ -11174,0 +11178,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n@@ -11192,0 +11197,1 @@\n+     * @spec https:\/\/unicode.org\/reports\/tr51\/ Unicode Emoji\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,0 +176,1 @@\n+    @Stable\n@@ -180,1 +181,3 @@\n-     * us to avoid recalculating this.\n+     * us to avoid recalculating this. This field is _not_ annotated @Stable as\n+     * the `hashCode()` method reads the field `hash` first anyhow and if `hash`\n+     * is the default zero value, is not trusted.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import static java.lang.String.LATIN1;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -51,0 +53,1 @@\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n@@ -106,0 +109,7 @@\n+    private static final List<StackMapFrameInfo.VerificationTypeInfo> TYPE_SWITCH_LOCALS = List.of(\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_Object), StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER\n+    );\n+    private static final List<StackMapFrameInfo.VerificationTypeInfo> TYPE_SWITCH_EXTRA_LOCALS = List.of(\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_Object), StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER,\n+            StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_BiPredicate), StackMapFrameInfo.ObjectVerificationTypeInfo.of(CD_List)\n+    );\n@@ -485,0 +495,2 @@\n+        var locals = enumDescs == null && extraClassLabels == null ? TYPE_SWITCH_LOCALS : TYPE_SWITCH_EXTRA_LOCALS;\n+\n@@ -487,0 +499,1 @@\n+            var stackMapFrames = new ArrayList<StackMapFrameInfo>(labelConstants.length * 2);\n@@ -497,0 +510,1 @@\n+            stackMapFrames.add(StackMapFrameInfo.of(nonNullLabel, locals, List.of()));\n@@ -499,1 +513,3 @@\n-                  .ireturn();\n+                  .ireturn()\n+                  .with(StackMapTableAttribute.of(stackMapFrames));\n+                DirectCodeBuilder.withMaxs(cb, 2, locals.size()); \/\/ checkIndex uses 2\n@@ -512,0 +528,1 @@\n+                stackMapFrames.add(StackMapFrameInfo.of(target, locals, List.of()));\n@@ -544,1 +561,1 @@\n-                            Label notNumber = cb.newLabel();\n+                            Label notNumber = cb.newLabel(); \/\/ this label may end up unbound\n@@ -573,2 +590,3 @@\n-                                  .labelBinding(notNumber)\n-                                  .aload(SELECTOR_OBJ)\n+                                  .labelBinding(notNumber);\n+                                stackMapFrames.add(StackMapFrameInfo.of(notNumber, locals, List.of()));\n+                                cb.aload(SELECTOR_OBJ)\n@@ -583,0 +601,1 @@\n+                                stackMapFrames.add(StackMapFrameInfo.of(compare, locals, List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER)));\n@@ -651,2 +670,3 @@\n-                      .labelBinding(notNumber)\n-                      .aload(SELECTOR_OBJ)\n+                      .labelBinding(notNumber);\n+                    stackMapFrames.add(StackMapFrameInfo.of(notNumber, locals, List.of()));\n+                    cb.aload(SELECTOR_OBJ)\n@@ -660,3 +680,3 @@\n-                      .labelBinding(compare)\n-\n-                      .loadConstant(integerLabel)\n+                      .labelBinding(compare);\n+                    stackMapFrames.add(StackMapFrameInfo.of(compare, locals, List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.INTEGER)));\n+                    cb.loadConstant(integerLabel)\n@@ -691,0 +711,1 @@\n+            stackMapFrames.add(StackMapFrameInfo.of(dflt, locals, List.of()));\n@@ -693,1 +714,3 @@\n-              .ireturn();\n+              .ireturn()\n+              .with(StackMapTableAttribute.of(stackMapFrames));\n+            DirectCodeBuilder.withMaxs(cb, 3, locals.size()); \/\/ enum labels use 3 stack, others use 2\n@@ -705,1 +728,1 @@\n-        byte[] classBytes = ClassFile.of().build(ConstantUtils.binaryNameToDesc(typeSwitchClassName(caller.lookupClass())),\n+        byte[] classBytes = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).build(ConstantUtils.binaryNameToDesc(typeSwitchClassName(caller.lookupClass())),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-class BitSieve {\n+final class BitSieve {\n@@ -51,1 +51,1 @@\n-    private long bits[];\n+    private final long[] bits;\n@@ -56,1 +56,1 @@\n-    private int length;\n+    private final int length;\n@@ -62,1 +62,1 @@\n-    private static BitSieve smallSieve = new BitSieve();\n+    private static final BitSieve smallSieve = new BitSieve();\n","filename":"src\/java.base\/share\/classes\/java\/math\/BitSieve.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,0 +728,5 @@\n+\n+            \/\/ data and tempBuilder do not need to be copied because they do\n+            \/\/ not carry significant information. They will be recreated on demand.\n+            \/\/ Setting them to null is needed to avoid sharing across clones.\n+            other.data = null;\n@@ -729,0 +734,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,5 +75,4 @@\n-        return switch (parent) {\n-            case BlockCodeBuilderImpl b -> b.topLocal;\n-            case ChainedCodeBuilder b -> b.terminal.curTopLocal();\n-            case TerminalCodeBuilder b -> b.curTopLocal();\n-        };\n+        if (parent instanceof BlockCodeBuilderImpl bcb) {\n+            return bcb.topLocal;\n+        }\n+        return findTerminal(parent).curTopLocal();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BlockCodeBuilderImpl.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,4 +42,2 @@\n-        this.terminal = switch (downstream) {\n-            case ChainedClassBuilder cb -> cb.terminal;\n-            case DirectClassBuilder db -> db;\n-        };\n+        this.terminal = downstream instanceof ChainedClassBuilder ccb ?\n+                ccb.terminal : (DirectClassBuilder) downstream;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,2 @@\n-        this.terminal = switch (downstream) {\n-            case ChainedFieldBuilder cb -> cb.terminal;\n-            case TerminalFieldBuilder tb -> tb;\n-        };\n+        this.terminal = downstream instanceof ChainedFieldBuilder cfb ?\n+                cfb.terminal : (TerminalFieldBuilder) downstream;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,4 +44,2 @@\n-        this.terminal = switch (downstream) {\n-            case ChainedMethodBuilder cb -> cb.terminal;\n-            case TerminalMethodBuilder tb -> tb;\n-        };\n+        this.terminal = downstream instanceof ChainedMethodBuilder cmb ?\n+                cmb.terminal : (TerminalMethodBuilder) downstream;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -268,4 +268,5 @@\n-                    switch (i) {\n-                        case BranchInstruction br -> br.target();\n-                        case DiscontinuedInstruction.JsrInstruction jsr -> jsr.target();\n-                        case LookupSwitchInstruction ls -> {\n+                    switch (i.opcode().kind()) {\n+                        case BRANCH -> ((BranchInstruction) i).target();\n+                        case DISCONTINUED_JSR -> ((DiscontinuedInstruction.JsrInstruction) i).target();\n+                        case LOOKUP_SWITCH -> {\n+                            var ls = (LookupSwitchInstruction) i;\n@@ -275,1 +276,2 @@\n-                        case TableSwitchInstruction ts -> {\n+                        case TABLE_SWITCH -> {\n+                            var ts = (TableSwitchInstruction) i;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-    private static final DeferredLabel[] EMPTY_LABEL_ARRAY = {};\n@@ -55,1 +54,0 @@\n-    private static final AbstractPseudoInstruction.ExceptionCatchImpl[] EMPTY_HANDLER_ARRAY = {};\n@@ -78,0 +76,3 @@\n+    private int maxStackHint = -1;\n+    private int maxLocalsHint = -1;\n+\n@@ -177,0 +178,6 @@\n+    public static void withMaxs(CodeBuilder cob, int stacks, int locals) {\n+        var dcb = (DirectCodeBuilder) cob;\n+        dcb.maxStackHint = stacks;\n+        dcb.maxLocalsHint = locals;\n+    }\n+\n@@ -323,0 +330,2 @@\n+                } else if (maxLocalsHint >= 0 && maxStackHint >= 0) {\n+                    buf.writeU2U2(maxStackHint, maxLocalsHint);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,6 @@\n-        this.terminal = switch (parent) {\n-            case NonterminalCodeBuilder cb -> cb.terminal;\n-            case TerminalCodeBuilder cb -> cb;\n-        };\n+        this.terminal = findTerminal(parent);\n+    }\n+\n+    static TerminalCodeBuilder findTerminal(CodeBuilder cob) {\n+        return cob instanceof NonterminalCodeBuilder ncb ?\n+                ncb.terminal : (TerminalCodeBuilder) cob;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/NonterminalCodeBuilder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -102,7 +102,1 @@\n-            if (chc.localSupportedCertSignAlgs == null) {\n-                chc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                chc.sslConfig,\n-                                chc.algorithmConstraints, chc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n@@ -248,9 +242,2 @@\n-            if (shc.localSupportedCertSignAlgs == null) {\n-                shc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints,\n-                                List.of(shc.negotiatedProtocol),\n-                                CERTIFICATE_SCOPE);\n-            }\n-\n+            \/\/ localSupportedCertSignAlgs has been already updated when we set\n+            \/\/ the negotiated protocol.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertSignAlgsExtension.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -700,40 +700,0 @@\n-        \/**\n-         * When a failure happens during certificate checking from an\n-         * {@link X509TrustManager}, determine what TLS alert description\n-         * to use.\n-         *\n-         * @param cexc The exception thrown by the {@link X509TrustManager}\n-         *\n-         * @return A byte value corresponding to a TLS alert description number.\n-         *\/\n-        private static Alert getCertificateAlert(\n-                ClientHandshakeContext chc, CertificateException cexc) {\n-            \/\/ The specific reason for the failure will determine how to\n-            \/\/ set the alert description value\n-            Alert alert = Alert.CERTIFICATE_UNKNOWN;\n-\n-            Throwable baseCause = cexc.getCause();\n-            if (baseCause instanceof CertPathValidatorException cpve) {\n-                Reason reason = cpve.getReason();\n-                if (reason == BasicReason.REVOKED) {\n-                    alert = chc.staplingActive ?\n-                            Alert.BAD_CERT_STATUS_RESPONSE :\n-                            Alert.CERTIFICATE_REVOKED;\n-                } else if (\n-                        reason == BasicReason.UNDETERMINED_REVOCATION_STATUS) {\n-                    alert = chc.staplingActive ?\n-                            Alert.BAD_CERT_STATUS_RESPONSE :\n-                            Alert.CERTIFICATE_UNKNOWN;\n-                } else if (reason == BasicReason.ALGORITHM_CONSTRAINED) {\n-                    alert = Alert.UNSUPPORTED_CERTIFICATE;\n-                } else if (reason == BasicReason.EXPIRED) {\n-                    alert = Alert.CERTIFICATE_EXPIRED;\n-                } else if (reason == BasicReason.INVALID_SIGNATURE ||\n-                        reason == BasicReason.NOT_YET_VALID) {\n-                    alert = Alert.BAD_CERTIFICATE;\n-                }\n-            }\n-\n-            return alert;\n-        }\n-\n@@ -1332,27 +1292,46 @@\n-        \/**\n-         * When a failure happens during certificate checking from an\n-         * {@link X509TrustManager}, determine what TLS alert description\n-         * to use.\n-         *\n-         * @param cexc The exception thrown by the {@link X509TrustManager}\n-         *\n-         * @return A byte value corresponding to a TLS alert description number.\n-         *\/\n-        private static Alert getCertificateAlert(\n-                ClientHandshakeContext chc, CertificateException cexc) {\n-            \/\/ The specific reason for the failure will determine how to\n-            \/\/ set the alert description value\n-            Alert alert = Alert.CERTIFICATE_UNKNOWN;\n-\n-            Throwable baseCause = cexc.getCause();\n-            if (baseCause instanceof CertPathValidatorException cpve) {\n-                Reason reason = cpve.getReason();\n-                if (reason == BasicReason.REVOKED) {\n-                    alert = chc.staplingActive ?\n-                            Alert.BAD_CERT_STATUS_RESPONSE :\n-                            Alert.CERTIFICATE_REVOKED;\n-                } else if (\n-                        reason == BasicReason.UNDETERMINED_REVOCATION_STATUS) {\n-                    alert = chc.staplingActive ?\n-                            Alert.BAD_CERT_STATUS_RESPONSE :\n-                            Alert.CERTIFICATE_UNKNOWN;\n+    }\n+\n+    \/**\n+     * When a failure happens during certificate checking from an\n+     * {@link X509TrustManager}, determine what TLS alert description\n+     * to use.\n+     *\n+     * @param cexc The exception thrown by the {@link X509TrustManager}\n+     * @return A byte value corresponding to a TLS alert description number.\n+     *\/\n+    private static Alert getCertificateAlert(\n+            ClientHandshakeContext chc, CertificateException cexc) {\n+        \/\/ The specific reason for the failure will determine how to\n+        \/\/ set the alert description value\n+        Alert alert = Alert.CERTIFICATE_UNKNOWN;\n+\n+        Throwable baseCause = cexc.getCause();\n+        if (baseCause instanceof CertPathValidatorException cpve) {\n+            Reason reason = cpve.getReason();\n+            if (reason == BasicReason.REVOKED) {\n+                alert = chc.staplingActive ?\n+                        Alert.BAD_CERT_STATUS_RESPONSE :\n+                        Alert.CERTIFICATE_REVOKED;\n+            } else if (reason == BasicReason.UNDETERMINED_REVOCATION_STATUS) {\n+                alert = chc.staplingActive ?\n+                        Alert.BAD_CERT_STATUS_RESPONSE :\n+                        Alert.CERTIFICATE_UNKNOWN;\n+            } else if (reason == BasicReason.EXPIRED) {\n+                alert = Alert.CERTIFICATE_EXPIRED;\n+            } else if (reason == BasicReason.INVALID_SIGNATURE\n+                    || reason == BasicReason.NOT_YET_VALID) {\n+                alert = Alert.BAD_CERTIFICATE;\n+            } else if (reason == BasicReason.ALGORITHM_CONSTRAINED) {\n+                alert = Alert.UNSUPPORTED_CERTIFICATE;\n+\n+                \/\/ Per TLSv1.3 RFC we MUST abort the handshake with a\n+                \/\/ \"bad_certificate\" alert if we reject certificate\n+                \/\/ because of the signature using MD5 or SHA1 algorithm.\n+                if (chc.negotiatedProtocol != null\n+                        && chc.negotiatedProtocol.useTLS13PlusSpec()) {\n+                    final String exMsg = cexc.getMessage().toUpperCase();\n+\n+                    if (exMsg.contains(\"MD5WITH\")\n+                            || exMsg.contains(\"SHA1WITH\")) {\n+                        alert = Alert.BAD_CERTIFICATE;\n+                    }\n@@ -1361,2 +1340,0 @@\n-\n-            return alert;\n@@ -1364,0 +1341,2 @@\n+\n+        return alert;\n@@ -1365,0 +1344,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":50,"deletions":70,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -639,16 +639,0 @@\n-            if (shc.localSupportedSignAlgs == null) {\n-                shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-            }\n-\n-            if (shc.localSupportedCertSignAlgs == null) {\n-                shc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n-\n@@ -658,0 +642,2 @@\n+            \/\/ localSupportedSignAlgs and localSupportedCertSignAlgs have been\n+            \/\/ already updated when we set the negotiated protocol.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -828,0 +828,4 @@\n+            \/\/ Protocol version is negotiated, update locally supported\n+            \/\/ signature schemes according to the protocol being used.\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(context);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ClientHello.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -448,7 +447,1 @@\n-        if (shc.localSupportedCertSignAlgs == null) {\n-            shc.localSupportedCertSignAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints, shc.activeProtocols,\n-                            CERTIFICATE_SCOPE);\n-        }\n+        SignatureScheme.updateHandshakeLocalSupportedAlgs(shc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n-import static sun.security.ssl.SignatureScheme.HANDSHAKE_SCOPE;\n-\n@@ -275,16 +272,0 @@\n-                if (shc.localSupportedSignAlgs == null) {\n-                    shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-                }\n-\n-                if (shc.localSupportedCertSignAlgs == null) {\n-                    shc.localSupportedCertSignAlgs =\n-                            SignatureScheme.getSupportedAlgorithms(\n-                                    shc.sslConfig,\n-                                    shc.algorithmConstraints, shc.activeProtocols,\n-                                    CERTIFICATE_SCOPE);\n-                }\n-\n@@ -525,16 +506,0 @@\n-                if (shc.localSupportedSignAlgs == null) {\n-                    shc.localSupportedSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                shc.sslConfig,\n-                                shc.algorithmConstraints, shc.activeProtocols,\n-                                HANDSHAKE_SCOPE);\n-                }\n-\n-                if (shc.localSupportedCertSignAlgs == null) {\n-                    shc.localSupportedCertSignAlgs =\n-                            SignatureScheme.getSupportedAlgorithms(\n-                                    shc.sslConfig,\n-                                    shc.algorithmConstraints, shc.activeProtocols,\n-                                    CERTIFICATE_SCOPE);\n-                }\n-\n@@ -962,0 +927,4 @@\n+            \/\/ Protocol version is negotiated, update locally supported\n+            \/\/ signature schemes according to the protocol being used.\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n+\n@@ -1013,0 +982,4 @@\n+            \/\/ Protocol version is negotiated, update locally supported\n+            \/\/ signature schemes according to the protocol being used.\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":8,"deletions":35,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -356,7 +355,1 @@\n-            if (chc.localSupportedCertSignAlgs == null) {\n-                chc.localSupportedCertSignAlgs =\n-                        SignatureScheme.getSupportedAlgorithms(\n-                                chc.sslConfig,\n-                                chc.algorithmConstraints, chc.activeProtocols,\n-                                CERTIFICATE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -190,7 +190,1 @@\n-            if (chc.localSupportedSignAlgs == null) {\n-                chc.localSupportedSignAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            chc.sslConfig,\n-                            chc.algorithmConstraints, chc.activeProtocols,\n-                            HANDSHAKE_SCOPE);\n-            }\n+            SignatureScheme.updateHandshakeLocalSupportedAlgs(chc);\n@@ -420,8 +414,4 @@\n-            List<SignatureScheme> sigAlgs =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints,\n-                            List.of(shc.negotiatedProtocol),\n-                            HANDSHAKE_SCOPE);\n-\n-            int vectorLen = SignatureScheme.sizeInRecord() * sigAlgs.size();\n+            \/\/ localSupportedSignAlgs has been already updated when we\n+            \/\/ set the negotiated protocol.\n+            int vectorLen = SignatureScheme.sizeInRecord()\n+                    * shc.localSupportedSignAlgs.size();\n@@ -431,1 +421,1 @@\n-            for (SignatureScheme ss : sigAlgs) {\n+            for (SignatureScheme ss : shc.localSupportedSignAlgs) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -377,0 +377,31 @@\n+    \/\/ Helper method to update all locally supported signature schemes for\n+    \/\/ a given HandshakeContext.\n+    static void updateHandshakeLocalSupportedAlgs(HandshakeContext hc) {\n+        \/\/ To improve performance we only update when necessary.\n+        \/\/ No need to do anything if we already computed the local supported\n+        \/\/ algorithms and either there is no negotiated protocol yet or the\n+        \/\/ only active protocol ends up to be the negotiated protocol.\n+        if (hc.localSupportedSignAlgs != null\n+                && hc.localSupportedCertSignAlgs != null\n+                && (hc.negotiatedProtocol == null\n+                || hc.activeProtocols.size() == 1)) {\n+            return;\n+        }\n+\n+        List<ProtocolVersion> protocols = hc.negotiatedProtocol != null ?\n+                List.of(hc.negotiatedProtocol) :\n+                hc.activeProtocols;\n+\n+        hc.localSupportedSignAlgs = getSupportedAlgorithms(\n+                hc.sslConfig,\n+                hc.algorithmConstraints,\n+                protocols,\n+                HANDSHAKE_SCOPE);\n+\n+        hc.localSupportedCertSignAlgs = getSupportedAlgorithms(\n+                hc.sslConfig,\n+                hc.algorithmConstraints,\n+                protocols,\n+                CERTIFICATE_SCOPE);\n+    }\n+\n@@ -379,1 +410,1 @@\n-    static List<SignatureScheme> getSupportedAlgorithms(\n+    private static List<SignatureScheme> getSupportedAlgorithms(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <assert.h>\n@@ -150,5 +151,2 @@\n-#ifdef MACOSX\n-    \/*\n-     * Since sun_jnu_encoding is now hard-coded to UTF-8 on Mac, we don't\n-     * want to use it to overwrite native.encoding\n-     *\/\n+    assert(sprops->encoding != NULL);\n+    assert(sprops->sun_jnu_encoding != NULL);\n@@ -156,3 +154,0 @@\n-#else\n-    PUTPROP(propArray, _native_encoding_NDX, sprops->sun_jnu_encoding);\n-#endif\n","filename":"src\/java.base\/share\/native\/libjava\/System.c","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private static Object lock = new Object();\n+    private static final Object lock = new Object();\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/dns\/ResolverConfigurationImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include <assert.h>\n@@ -468,3 +467,0 @@\n-    assert(sprops.encoding != NULL);\n-    assert(sprops.sun_jnu_encoding != NULL);\n-\n","filename":"src\/java.base\/unix\/native\/libjava\/java_props_md.c","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include <assert.h>\n@@ -50,1 +49,1 @@\n-               char** variant, char** encoding);\n+               char** variant);\n@@ -170,1 +169,1 @@\n-    char * elems[5]; \/\/ lang, script, ctry, variant, encoding\n+    char * elems[4]; \/\/ lang, script, ctry, variant\n@@ -179,1 +178,1 @@\n-    for (index = 0; index < 5; index++) {\n+    for (index = 0; index < 4; index++) {\n@@ -184,1 +183,1 @@\n-                   &(elems[0]), &(elems[1]), &(elems[2]), &(elems[3]), &(elems[4]))) {\n+                   &(elems[0]), &(elems[1]), &(elems[2]), &(elems[3]))) {\n@@ -201,1 +200,1 @@\n-    for (index = 0; index < 5; index++) {\n+    for (index = 0; index < 4; index++) {\n@@ -266,1 +265,1 @@\n-               char** variant, char** encoding) {\n+               char** variant) {\n@@ -323,5 +322,0 @@\n-    \/* encoding *\/\n-    *encoding = getEncodingInternal(lcid);\n-    if (*encoding == NULL) {\n-        return FALSE;\n-    }\n@@ -643,1 +637,0 @@\n-            char * display_encoding;\n@@ -662,2 +655,1 @@\n-                           &sprops.format_variant,\n-                           &sprops.encoding);\n+                           &sprops.format_variant);\n@@ -668,6 +660,1 @@\n-                           &sprops.display_variant,\n-                           &display_encoding);\n-\n-            if (sprops.encoding == NULL) {\n-                sprops.encoding = \"UTF-8\";\n-            }\n+                           &sprops.display_variant);\n@@ -679,0 +666,1 @@\n+            sprops.encoding = sprops.sun_jnu_encoding;\n@@ -692,3 +680,0 @@\n-            assert(sprops.encoding != NULL);\n-            assert(sprops.sun_jnu_encoding != NULL);\n-\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":9,"deletions":24,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -535,8 +535,1 @@\n-    private static final ColorModel[] COLOR_MODELS = {\n-        \/\/ Transparency.OPAQUE\n-        new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000),\n-        \/\/ Transparency.BITMASK\n-        new DirectColorModel(25, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x01000000),\n-        \/\/ Transparency.TRANSLUCENT\n-        ColorModel.getRGBdefault(),\n-    };\n+    private static final ColorModel[] COLOR_MODELS = new ColorModel[3];\n@@ -612,2 +605,2 @@\n-        ColorModel cm = COLOR_MODELS[transparency - 1];\n-        BufferedImage img = new BufferedImage(cm, raster, false, null);\n+        ColorModel cm = colorModelFor(transparency);\n+        BufferedImage img = new BufferedImage(cm, raster, true, null);\n@@ -621,0 +614,12 @@\n+    private ColorModel colorModelFor(int transparency) {\n+        synchronized (COLOR_MODELS) {\n+            int index = transparency - 1;\n+            if (COLOR_MODELS[index] == null) {\n+                COLOR_MODELS[index] = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                        .getDefaultScreenDevice().getDefaultConfiguration()\n+                        .getColorModel(transparency);\n+            }\n+            return COLOR_MODELS[index];\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKEngine.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-class AnimationController implements ActionListener, PropertyChangeListener {\n+final class AnimationController implements ActionListener, PropertyChangeListener {\n@@ -256,0 +256,1 @@\n+    @Override\n@@ -263,0 +264,1 @@\n+    @Override\n@@ -322,1 +324,1 @@\n-    private static class AnimationState {\n+    private static final class AnimationState {\n@@ -410,1 +412,1 @@\n-    private static class PartUIClientPropertyKey\n+    private static final class PartUIClientPropertyKey\n@@ -429,0 +431,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/AnimationController.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -224,0 +224,1 @@\n+        @Override\n@@ -534,0 +535,1 @@\n+        @Override\n@@ -562,0 +564,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/TMSchema.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public class WindowsBorders {\n+public final class WindowsBorders {\n@@ -118,1 +118,1 @@\n-    public static class ProgressBarBorder extends AbstractBorder implements UIResource {\n+    public static final class ProgressBarBorder extends AbstractBorder implements UIResource {\n@@ -127,0 +127,1 @@\n+        @Override\n@@ -137,0 +138,1 @@\n+        @Override\n@@ -149,1 +151,1 @@\n-    public static class ToolBarBorder extends AbstractBorder implements UIResource, SwingConstants {\n+    public static final class ToolBarBorder extends AbstractBorder implements UIResource, SwingConstants {\n@@ -158,0 +160,1 @@\n+        @Override\n@@ -227,0 +230,1 @@\n+        @Override\n@@ -262,0 +266,1 @@\n+        @Override\n@@ -279,1 +284,1 @@\n-    static class ComplementDashedBorder extends LineBorder implements UIResource {\n+    static final class ComplementDashedBorder extends LineBorder implements UIResource {\n@@ -287,0 +292,1 @@\n+        @Override\n@@ -305,1 +311,1 @@\n-    public static class InternalFrameLineBorder extends LineBorder implements\n+    public static final class InternalFrameLineBorder extends LineBorder implements\n@@ -318,0 +324,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsBorders.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-public class WindowsButtonUI extends BasicButtonUI\n+public final class WindowsButtonUI extends BasicButtonUI\n@@ -92,0 +92,1 @@\n+    @Override\n@@ -111,0 +112,1 @@\n+    @Override\n@@ -127,0 +129,1 @@\n+    @Override\n@@ -131,0 +134,1 @@\n+    @Override\n@@ -141,0 +145,1 @@\n+    @Override\n@@ -148,0 +153,1 @@\n+    @Override\n@@ -170,0 +176,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsButtonUI.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-public class WindowsCheckBoxMenuItemUI extends BasicCheckBoxMenuItemUI {\n+public final class WindowsCheckBoxMenuItemUI extends BasicCheckBoxMenuItemUI {\n@@ -49,0 +49,1 @@\n+            @Override\n@@ -57,0 +58,1 @@\n+            @Override\n@@ -83,0 +85,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsCheckBoxMenuItemUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class WindowsCheckBoxUI extends WindowsRadioButtonUI\n+public final class WindowsCheckBoxUI extends WindowsRadioButtonUI\n@@ -67,0 +67,1 @@\n+    @Override\n@@ -74,0 +75,1 @@\n+    @Override\n@@ -82,0 +84,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsCheckBoxUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-public class WindowsClassicLookAndFeel extends WindowsLookAndFeel {\n+public final class WindowsClassicLookAndFeel extends WindowsLookAndFeel {\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsClassicLookAndFeel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-public class WindowsComboBoxUI extends BasicComboBoxUI {\n+public final class WindowsComboBoxUI extends BasicComboBoxUI {\n@@ -165,0 +165,1 @@\n+    @Override\n@@ -179,0 +180,1 @@\n+    @Override\n@@ -218,0 +220,1 @@\n+    @Override\n@@ -229,0 +232,1 @@\n+    @Override\n@@ -238,0 +242,1 @@\n+    @Override\n@@ -286,0 +291,1 @@\n+    @Override\n@@ -350,0 +356,1 @@\n+    @Override\n@@ -357,0 +364,1 @@\n+    @Override\n@@ -383,0 +391,1 @@\n+    @Override\n@@ -410,0 +419,1 @@\n+    @Override\n@@ -414,0 +424,1 @@\n+    @Override\n@@ -426,0 +437,1 @@\n+    @Override\n@@ -450,0 +462,1 @@\n+    @Override\n@@ -460,1 +473,1 @@\n-    private class XPComboBoxButton extends XPStyle.GlyphButton {\n+    private final class XPComboBoxButton extends XPStyle.GlyphButton {\n@@ -507,0 +520,1 @@\n+        @Override\n@@ -521,1 +535,1 @@\n-    protected class WinComboPopUp extends BasicComboPopup {\n+    protected final class WinComboPopUp extends BasicComboPopup {\n@@ -534,0 +548,1 @@\n+        @Override\n@@ -538,1 +553,1 @@\n-        protected class InvocationKeyHandler extends BasicComboPopup.InvocationKeyHandler {\n+        protected final class InvocationKeyHandler extends BasicComboPopup.InvocationKeyHandler {\n@@ -544,0 +559,1 @@\n+        @Override\n@@ -557,1 +573,1 @@\n-    public static class WindowsComboBoxEditor\n+    public static final class WindowsComboBoxEditor\n@@ -564,0 +580,1 @@\n+        @Override\n@@ -575,0 +592,1 @@\n+        @Override\n@@ -589,1 +607,1 @@\n-    private static class WindowsComboBoxRenderer\n+    private static final class WindowsComboBoxRenderer\n@@ -596,1 +614,1 @@\n-        private static class WindowsComboBoxDashedBorder extends DashedBorder {\n+        private static final class WindowsComboBoxDashedBorder extends DashedBorder {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsComboBoxUI.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class WindowsDesktopIconUI extends BasicDesktopIconUI {\n+public final class WindowsDesktopIconUI extends BasicDesktopIconUI {\n@@ -46,0 +46,1 @@\n+    @Override\n@@ -51,0 +52,1 @@\n+    @Override\n@@ -58,0 +60,1 @@\n+    @Override\n@@ -65,0 +68,1 @@\n+    @Override\n@@ -75,0 +79,1 @@\n+    @Override\n@@ -86,0 +91,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopIconUI.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-public class WindowsDesktopManager extends DefaultDesktopManager\n+public final class WindowsDesktopManager extends DefaultDesktopManager\n@@ -63,0 +63,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopManager.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public class WindowsDesktopPaneUI extends BasicDesktopPaneUI\n+public final class WindowsDesktopPaneUI extends BasicDesktopPaneUI\n@@ -43,0 +43,1 @@\n+    @Override\n@@ -51,0 +52,1 @@\n+    @Override\n@@ -55,0 +57,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopPaneUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class WindowsEditorPaneUI extends BasicEditorPaneUI\n+public final class WindowsEditorPaneUI extends BasicEditorPaneUI\n@@ -57,0 +57,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsEditorPaneUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-public class WindowsFileChooserUI extends BasicFileChooserUI {\n+public final class WindowsFileChooserUI extends BasicFileChooserUI {\n@@ -197,0 +197,1 @@\n+    @Override\n@@ -201,0 +202,1 @@\n+    @Override\n@@ -205,1 +207,2 @@\n-    private class WindowsFileChooserUIAccessor implements FilePane.FileChooserUIAccessor {\n+    private final class WindowsFileChooserUIAccessor implements FilePane.FileChooserUIAccessor {\n+        @Override\n@@ -210,0 +213,1 @@\n+        @Override\n@@ -214,0 +218,1 @@\n+        @Override\n@@ -218,0 +223,1 @@\n+        @Override\n@@ -222,0 +228,1 @@\n+        @Override\n@@ -226,0 +233,1 @@\n+        @Override\n@@ -230,0 +238,1 @@\n+        @Override\n@@ -234,0 +243,1 @@\n+        @Override\n@@ -238,0 +248,1 @@\n+        @Override\n@@ -242,0 +253,1 @@\n+        @Override\n@@ -247,0 +259,1 @@\n+        @Override\n@@ -252,0 +265,1 @@\n+    @Override\n@@ -587,0 +601,1 @@\n+    @Override\n@@ -618,0 +633,1 @@\n+    @Override\n@@ -648,0 +664,1 @@\n+    @Override\n@@ -652,0 +669,1 @@\n+    @Override\n@@ -862,0 +880,1 @@\n+    @Override\n@@ -916,0 +935,1 @@\n+    @Override\n@@ -920,0 +940,1 @@\n+    @Override\n@@ -924,0 +945,1 @@\n+    @Override\n@@ -932,0 +954,1 @@\n+    @Override\n@@ -945,0 +968,1 @@\n+    @Override\n@@ -959,0 +983,1 @@\n+    @Override\n@@ -964,0 +989,1 @@\n+    @Override\n@@ -1035,1 +1061,1 @@\n-    class DirectoryComboBoxRenderer extends DefaultListCellRenderer  {\n+    final class DirectoryComboBoxRenderer extends DefaultListCellRenderer  {\n@@ -1037,0 +1063,1 @@\n+        @Override\n@@ -1059,1 +1086,1 @@\n-    static class IndentIcon implements Icon {\n+    static final class IndentIcon implements Icon {\n@@ -1064,0 +1091,1 @@\n+        @Override\n@@ -1072,0 +1100,1 @@\n+        @Override\n@@ -1076,0 +1105,1 @@\n+        @Override\n@@ -1093,1 +1123,1 @@\n-    protected class DirectoryComboBoxModel extends AbstractListModel<File> implements ComboBoxModel<File> {\n+    protected final class DirectoryComboBoxModel extends AbstractListModel<File> implements ComboBoxModel<File> {\n@@ -1190,0 +1220,1 @@\n+        @Override\n@@ -1195,0 +1226,1 @@\n+        @Override\n@@ -1199,0 +1231,1 @@\n+        @Override\n@@ -1203,0 +1236,1 @@\n+        @Override\n@@ -1219,1 +1253,2 @@\n-    public class FilterComboBoxRenderer extends DefaultListCellRenderer {\n+    public final class FilterComboBoxRenderer extends DefaultListCellRenderer {\n+        @Override\n@@ -1245,1 +1280,1 @@\n-    protected class FilterComboBoxModel extends AbstractListModel<FileFilter> implements ComboBoxModel<FileFilter>,\n+    protected final class FilterComboBoxModel extends AbstractListModel<FileFilter> implements ComboBoxModel<FileFilter>,\n@@ -1253,0 +1288,1 @@\n+        @Override\n@@ -1263,0 +1299,1 @@\n+        @Override\n@@ -1270,0 +1307,1 @@\n+        @Override\n@@ -1291,0 +1329,1 @@\n+        @Override\n@@ -1299,0 +1338,1 @@\n+        @Override\n@@ -1323,1 +1363,1 @@\n-    protected class DirectoryComboBoxAction implements ActionListener {\n+    protected final class DirectoryComboBoxAction implements ActionListener {\n@@ -1328,0 +1368,1 @@\n+        @Override\n@@ -1334,0 +1375,1 @@\n+    @Override\n@@ -1338,0 +1380,1 @@\n+    @Override\n@@ -1345,1 +1388,1 @@\n-    protected class WindowsFileView extends BasicFileView {\n+    protected final class WindowsFileView extends BasicFileView {\n@@ -1348,0 +1391,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsFileChooserUI.java","additions":53,"deletions":9,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-public class WindowsGraphicsUtils {\n+public final class WindowsGraphicsUtils {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsGraphicsUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-public class WindowsIconFactory implements Serializable\n+public final class WindowsIconFactory implements Serializable\n@@ -176,1 +176,1 @@\n-    private static class FrameButtonIcon implements Icon, Serializable {\n+    private static final class FrameButtonIcon implements Icon, Serializable {\n@@ -183,0 +183,1 @@\n+        @Override\n@@ -284,0 +285,1 @@\n+        @Override\n@@ -296,0 +298,1 @@\n+        @Override\n@@ -305,1 +308,2 @@\n-        private static class ResizeIcon implements Icon, Serializable {\n+        private static final class ResizeIcon implements Icon, Serializable {\n+            @Override\n@@ -320,0 +324,1 @@\n+            @Override\n@@ -321,0 +326,1 @@\n+            @Override\n@@ -325,1 +331,1 @@\n-    private static class CheckBoxIcon implements Icon, Serializable\n+    private static final class CheckBoxIcon implements Icon, Serializable\n@@ -328,0 +334,1 @@\n+        @Override\n@@ -428,0 +435,1 @@\n+        @Override\n@@ -437,0 +445,1 @@\n+        @Override\n@@ -448,1 +457,1 @@\n-    private static class RadioButtonIcon implements Icon, UIResource, Serializable\n+    private static final class RadioButtonIcon implements Icon, UIResource, Serializable\n@@ -450,0 +459,1 @@\n+        @Override\n@@ -582,0 +592,1 @@\n+        @Override\n@@ -591,0 +602,1 @@\n+        @Override\n@@ -603,1 +615,1 @@\n-    private static class CheckBoxMenuItemIcon implements Icon, UIResource, Serializable\n+    private static final class CheckBoxMenuItemIcon implements Icon, UIResource, Serializable\n@@ -605,0 +617,1 @@\n+        @Override\n@@ -622,0 +635,1 @@\n+        @Override\n@@ -623,0 +637,1 @@\n+        @Override\n@@ -629,1 +644,1 @@\n-    private static class RadioButtonMenuItemIcon implements Icon, UIResource, Serializable\n+    private static final class RadioButtonMenuItemIcon implements Icon, UIResource, Serializable\n@@ -631,0 +646,1 @@\n+        @Override\n@@ -639,0 +655,1 @@\n+        @Override\n@@ -640,0 +657,1 @@\n+        @Override\n@@ -646,1 +664,2 @@\n-    private static class MenuItemCheckIcon implements Icon, UIResource, Serializable{\n+    private static final class MenuItemCheckIcon implements Icon, UIResource, Serializable{\n+        @Override\n@@ -655,0 +674,1 @@\n+        @Override\n@@ -656,0 +676,1 @@\n+        @Override\n@@ -661,1 +682,2 @@\n-    private static class MenuItemArrowIcon implements Icon, UIResource, Serializable {\n+    private static final class MenuItemArrowIcon implements Icon, UIResource, Serializable {\n+        @Override\n@@ -670,0 +692,1 @@\n+        @Override\n@@ -671,0 +694,1 @@\n+        @Override\n@@ -676,1 +700,2 @@\n-    private static class MenuArrowIcon implements Icon, UIResource, Serializable {\n+    private static final class MenuArrowIcon implements Icon, UIResource, Serializable {\n+        @Override\n@@ -711,0 +736,1 @@\n+        @Override\n@@ -720,0 +746,1 @@\n+        @Override\n@@ -731,1 +758,1 @@\n-    static class VistaMenuItemCheckIconFactory\n+    static final class VistaMenuItemCheckIconFactory\n@@ -735,0 +762,1 @@\n+        @Override\n@@ -739,0 +767,1 @@\n+        @Override\n@@ -791,1 +820,1 @@\n-        private static class VistaMenuItemCheckIcon\n+        private static final class VistaMenuItemCheckIcon\n@@ -806,0 +835,1 @@\n+            @Override\n@@ -828,0 +858,1 @@\n+            @Override\n@@ -843,0 +874,1 @@\n+            @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsIconFactory.java","additions":44,"deletions":12,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+    @Override\n@@ -93,0 +94,1 @@\n+    @Override\n@@ -120,0 +122,1 @@\n+    @Override\n@@ -125,0 +128,1 @@\n+    @Override\n@@ -134,0 +138,1 @@\n+    @Override\n@@ -145,0 +150,1 @@\n+    @Override\n@@ -227,0 +233,1 @@\n+    @Override\n@@ -231,0 +238,1 @@\n+    @Override\n@@ -248,0 +256,1 @@\n+    @Override\n@@ -288,0 +297,1 @@\n+    @Override\n@@ -375,0 +385,1 @@\n+    @Override\n@@ -400,0 +411,1 @@\n+    @Override\n@@ -404,0 +416,1 @@\n+    @Override\n@@ -408,1 +421,1 @@\n-    public class WindowsTitlePaneLayout extends BasicInternalFrameTitlePane.TitlePaneLayout {\n+    public final class WindowsTitlePaneLayout extends BasicInternalFrameTitlePane.TitlePaneLayout {\n@@ -442,0 +455,1 @@\n+        @Override\n@@ -495,1 +509,2 @@\n-    public class WindowsPropertyChangeHandler extends PropertyChangeHandler {\n+    public final class WindowsPropertyChangeHandler extends PropertyChangeHandler {\n+        @Override\n@@ -518,1 +533,1 @@\n-    public static class ScalableIconUIResource implements Icon, UIResource {\n+    public static final class ScalableIconUIResource implements Icon, UIResource {\n@@ -565,0 +580,1 @@\n+        @Override\n@@ -583,0 +599,1 @@\n+        @Override\n@@ -587,0 +604,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsInternalFrameTitlePane.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public class WindowsInternalFrameUI extends BasicInternalFrameUI\n+public final class WindowsInternalFrameUI extends BasicInternalFrameUI\n@@ -52,0 +52,1 @@\n+    @Override\n@@ -62,0 +63,1 @@\n+    @Override\n@@ -69,0 +71,1 @@\n+    @Override\n@@ -82,0 +85,1 @@\n+    @Override\n@@ -86,0 +90,1 @@\n+    @Override\n@@ -92,1 +97,1 @@\n-    private class XPBorder extends AbstractBorder {\n+    private final class XPBorder extends AbstractBorder {\n@@ -103,0 +108,1 @@\n+        @Override\n@@ -121,0 +127,1 @@\n+        @Override\n@@ -130,0 +137,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsInternalFrameUI.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-public class WindowsLabelUI extends BasicLabelUI {\n+public final class WindowsLabelUI extends BasicLabelUI {\n@@ -62,0 +62,1 @@\n+    @Override\n@@ -75,0 +76,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLabelUI.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+    @Override\n@@ -152,0 +153,1 @@\n+    @Override\n@@ -156,0 +158,1 @@\n+    @Override\n@@ -160,0 +163,1 @@\n+    @Override\n@@ -164,0 +168,1 @@\n+    @Override\n@@ -168,0 +173,1 @@\n+    @Override\n@@ -209,0 +215,1 @@\n+    @Override\n@@ -263,0 +270,1 @@\n+    @Override\n@@ -313,0 +321,1 @@\n+    @Override\n@@ -1896,0 +1905,1 @@\n+    @Override\n@@ -1947,0 +1957,1 @@\n+     @Override\n@@ -1954,0 +1965,1 @@\n+    @Override\n@@ -1984,0 +1996,1 @@\n+    @Override\n@@ -2021,1 +2034,1 @@\n-    private static class AudioAction extends AbstractAction {\n+    private static final class AudioAction extends AbstractAction {\n@@ -2032,0 +2045,1 @@\n+        @Override\n@@ -2048,1 +2062,1 @@\n-    private static class LazyWindowsIcon implements UIDefaults.LazyValue {\n+    private static final class LazyWindowsIcon implements UIDefaults.LazyValue {\n@@ -2057,0 +2071,1 @@\n+        @Override\n@@ -2075,1 +2090,1 @@\n-    private static class ActiveWindowsIcon implements UIDefaults.ActiveValue {\n+    private static final class ActiveWindowsIcon implements UIDefaults.ActiveValue {\n@@ -2120,1 +2135,1 @@\n-    private static class SkinIcon implements Icon, UIResource {\n+    private static final class SkinIcon implements Icon, UIResource {\n@@ -2133,0 +2148,1 @@\n+        @Override\n@@ -2147,0 +2163,1 @@\n+        @Override\n@@ -2163,0 +2180,1 @@\n+        @Override\n@@ -2179,1 +2197,1 @@\n-    private static class WindowsFontProperty extends WindowsDesktopProperty {\n+    private static final class WindowsFontProperty extends WindowsDesktopProperty {\n@@ -2184,0 +2202,1 @@\n+        @Override\n@@ -2191,0 +2210,1 @@\n+        @Override\n@@ -2239,1 +2259,1 @@\n-    private static class WindowsFontSizeProperty extends\n+    private static final class WindowsFontSizeProperty extends\n@@ -2253,0 +2273,1 @@\n+        @Override\n@@ -2281,0 +2302,1 @@\n+        @Override\n@@ -2316,1 +2338,1 @@\n-    private static class XPBorderValue extends XPValue {\n+    private static final class XPBorderValue extends XPValue {\n@@ -2328,0 +2350,1 @@\n+        @Override\n@@ -2340,1 +2363,1 @@\n-    private static class XPColorValue extends XPValue {\n+    private static final class XPColorValue extends XPValue {\n@@ -2345,0 +2368,1 @@\n+        @Override\n@@ -2351,1 +2375,1 @@\n-        private static class XPColorValueKey {\n+        private static final class XPColorValueKey {\n@@ -2362,1 +2386,1 @@\n-    private class XPDLUValue extends XPValue {\n+    private final class XPDLUValue extends XPValue {\n@@ -2370,0 +2394,1 @@\n+        @Override\n@@ -2375,0 +2400,1 @@\n+        @Override\n@@ -2390,0 +2416,1 @@\n+        @Override\n@@ -2398,1 +2425,1 @@\n-    private static class FontDesktopProperty extends TriggerDesktopProperty {\n+    private static final class FontDesktopProperty extends TriggerDesktopProperty {\n@@ -2403,0 +2430,1 @@\n+        @Override\n@@ -2413,1 +2441,1 @@\n-    private class WindowsLayoutStyle extends DefaultLayoutStyle {\n+    private final class WindowsLayoutStyle extends DefaultLayoutStyle {\n@@ -2507,0 +2535,1 @@\n+    @Override\n@@ -2528,1 +2557,1 @@\n-    private static class RGBGrayFilter extends RGBImageFilter {\n+    private static final class RGBGrayFilter extends RGBImageFilter {\n@@ -2532,0 +2561,1 @@\n+        @Override\n@@ -2550,1 +2580,1 @@\n-    private static class FocusColorProperty extends WindowsDesktopProperty {\n+    private static final class FocusColorProperty extends WindowsDesktopProperty {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":44,"deletions":14,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-public class WindowsMenuBarUI extends BasicMenuBarUI\n+public final class WindowsMenuBarUI extends BasicMenuBarUI\n@@ -128,0 +128,1 @@\n+    @Override\n@@ -143,1 +144,1 @@\n-    private static class TakeFocus extends AbstractAction {\n+    private static final class TakeFocus extends AbstractAction {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuBarUI.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-public class WindowsMenuItemUI extends BasicMenuItemUI {\n+public final class WindowsMenuItemUI extends BasicMenuItemUI {\n@@ -66,0 +66,1 @@\n+            @Override\n@@ -74,0 +75,1 @@\n+            @Override\n@@ -144,0 +146,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-public class WindowsMenuUI extends BasicMenuUI {\n+public final class WindowsMenuUI extends BasicMenuUI {\n@@ -60,0 +60,1 @@\n+            @Override\n@@ -109,0 +110,1 @@\n+            @Override\n@@ -118,0 +120,1 @@\n+    @Override\n@@ -134,0 +137,1 @@\n+    @Override\n@@ -213,0 +217,1 @@\n+    @Override\n@@ -248,0 +253,1 @@\n+    @Override\n@@ -257,1 +263,2 @@\n-    protected class WindowsMouseInputHandler extends BasicMenuUI.MouseInputHandler {\n+    protected final class WindowsMouseInputHandler extends BasicMenuUI.MouseInputHandler {\n+        @Override\n@@ -268,0 +275,1 @@\n+        @Override\n@@ -280,0 +288,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuUI.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class WindowsOptionPaneUI extends BasicOptionPaneUI {\n+public final class WindowsOptionPaneUI extends BasicOptionPaneUI {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsOptionPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class WindowsPasswordFieldUI extends BasicPasswordFieldUI {\n+public final class WindowsPasswordFieldUI extends BasicPasswordFieldUI {\n@@ -57,0 +57,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPasswordFieldUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public class WindowsPopupMenuSeparatorUI extends BasicPopupMenuSeparatorUI {\n+public final class WindowsPopupMenuSeparatorUI extends BasicPopupMenuSeparatorUI {\n@@ -51,0 +51,1 @@\n+    @Override\n@@ -85,0 +86,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuSeparatorUI.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-public class WindowsPopupMenuUI extends BasicPopupMenuUI {\n+public final class WindowsPopupMenuUI extends BasicPopupMenuUI {\n@@ -70,0 +70,1 @@\n+    @Override\n@@ -91,0 +92,1 @@\n+    @Override\n@@ -96,1 +98,1 @@\n-    static class MnemonicListener implements ChangeListener {\n+    static final class MnemonicListener implements ChangeListener {\n@@ -99,0 +101,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuUI.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-class WindowsPopupWindow extends JWindow {\n+final class WindowsPopupWindow extends JWindow {\n@@ -72,0 +72,1 @@\n+    @Override\n@@ -76,0 +77,1 @@\n+    @Override\n@@ -88,0 +90,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupWindow.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public class WindowsProgressBarUI extends BasicProgressBarUI\n+public final class WindowsProgressBarUI extends BasicProgressBarUI\n@@ -65,0 +65,1 @@\n+    @Override\n@@ -83,0 +84,1 @@\n+    @Override\n@@ -105,0 +107,1 @@\n+    @Override\n@@ -116,0 +119,1 @@\n+    @Override\n@@ -127,0 +131,1 @@\n+    @Override\n@@ -221,0 +226,1 @@\n+    @Override\n@@ -244,0 +250,1 @@\n+    @Override\n@@ -256,0 +263,1 @@\n+    @Override\n@@ -301,0 +309,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsProgressBarUI.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-public class WindowsRadioButtonMenuItemUI extends BasicRadioButtonMenuItemUI {\n+public final class WindowsRadioButtonMenuItemUI extends BasicRadioButtonMenuItemUI {\n@@ -49,0 +49,1 @@\n+           @Override\n@@ -57,0 +58,1 @@\n+           @Override\n@@ -84,0 +86,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRadioButtonMenuItemUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    @Override\n@@ -91,0 +92,1 @@\n+    @Override\n@@ -107,0 +109,1 @@\n+    @Override\n@@ -112,0 +115,1 @@\n+    @Override\n@@ -120,0 +124,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRadioButtonUI.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-public class WindowsRootPaneUI extends BasicRootPaneUI {\n+public final class WindowsRootPaneUI extends BasicRootPaneUI {\n@@ -82,1 +82,1 @@\n-    static class AltProcessor implements KeyEventPostProcessor {\n+    static final class AltProcessor implements KeyEventPostProcessor {\n@@ -169,0 +169,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRootPaneUI.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-public class WindowsScrollBarUI extends BasicScrollBarUI {\n+public final class WindowsScrollBarUI extends BasicScrollBarUI {\n@@ -74,0 +74,1 @@\n+    @Override\n@@ -103,0 +104,1 @@\n+    @Override\n@@ -108,0 +110,1 @@\n+    @Override\n@@ -121,0 +124,1 @@\n+    @Override\n@@ -129,0 +133,1 @@\n+    @Override\n@@ -164,0 +169,1 @@\n+    @Override\n@@ -192,0 +198,1 @@\n+    @Override\n@@ -234,0 +241,1 @@\n+    @Override\n@@ -260,0 +268,1 @@\n+    @Override\n@@ -307,1 +316,1 @@\n-    private class WindowsArrowButton extends BasicArrowButton {\n+    private final class WindowsArrowButton extends BasicArrowButton {\n@@ -318,0 +327,1 @@\n+        @Override\n@@ -373,0 +383,1 @@\n+        @Override\n@@ -401,1 +412,1 @@\n-    private static class Grid {\n+    private static final class Grid {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsScrollBarUI.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class WindowsScrollPaneUI extends BasicScrollPaneUI\n+public final class WindowsScrollPaneUI extends BasicScrollPaneUI\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsScrollPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class WindowsSeparatorUI extends BasicSeparatorUI { }\n+public final class WindowsSeparatorUI extends BasicSeparatorUI { }\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsSeparatorUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-public class WindowsSliderUI extends BasicSliderUI\n+public final class WindowsSliderUI extends BasicSliderUI\n@@ -66,0 +66,1 @@\n+    @Override\n@@ -70,1 +71,1 @@\n-    private class WindowsTrackListener extends TrackListener {\n+    private final class WindowsTrackListener extends TrackListener {\n@@ -72,0 +73,1 @@\n+        @Override\n@@ -77,0 +79,1 @@\n+        @Override\n@@ -82,0 +85,1 @@\n+        @Override\n@@ -87,0 +91,1 @@\n+        @Override\n@@ -92,0 +97,1 @@\n+        @Override\n@@ -122,0 +128,1 @@\n+    @Override\n@@ -144,0 +151,1 @@\n+    @Override\n@@ -152,0 +160,1 @@\n+    @Override\n@@ -160,0 +169,1 @@\n+    @Override\n@@ -168,0 +178,1 @@\n+    @Override\n@@ -177,0 +188,1 @@\n+    @Override\n@@ -202,0 +214,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsSliderUI.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class WindowsSpinnerUI extends BasicSpinnerUI {\n+public final class WindowsSpinnerUI extends BasicSpinnerUI {\n@@ -49,0 +49,1 @@\n+    @Override\n@@ -74,0 +75,1 @@\n+    @Override\n@@ -86,0 +88,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsSpinnerUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-public class WindowsSplitPaneDivider extends BasicSplitPaneDivider\n+public final class WindowsSplitPaneDivider extends BasicSplitPaneDivider\n@@ -55,0 +55,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsSplitPaneDivider.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class WindowsSplitPaneUI extends BasicSplitPaneUI\n+public final class WindowsSplitPaneUI extends BasicSplitPaneUI\n@@ -53,0 +53,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsSplitPaneUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-public class WindowsTabbedPaneUI extends BasicTabbedPaneUI {\n+public final class WindowsTabbedPaneUI extends BasicTabbedPaneUI {\n@@ -66,0 +66,1 @@\n+    @Override\n@@ -85,0 +86,1 @@\n+    @Override\n@@ -97,0 +99,1 @@\n+    @Override\n@@ -122,0 +125,1 @@\n+    @Override\n@@ -158,0 +162,1 @@\n+    @Override\n@@ -165,0 +170,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTabbedPaneUI.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-public class WindowsTableHeaderUI extends BasicTableHeaderUI {\n+public final class WindowsTableHeaderUI extends BasicTableHeaderUI {\n@@ -60,0 +60,1 @@\n+    @Override\n@@ -71,0 +72,1 @@\n+    @Override\n@@ -87,1 +89,1 @@\n-    private class XPDefaultRenderer extends DefaultTableCellHeaderRenderer {\n+    private final class XPDefaultRenderer extends DefaultTableCellHeaderRenderer {\n@@ -96,0 +98,1 @@\n+        @Override\n@@ -184,0 +187,1 @@\n+        @Override\n@@ -230,1 +234,1 @@\n-    private static class IconBorder implements Border, UIResource{\n+    private static final class IconBorder implements Border, UIResource{\n@@ -249,0 +253,1 @@\n+        @Override\n@@ -252,0 +257,1 @@\n+        @Override\n@@ -255,0 +261,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTableHeaderUI.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class WindowsTextAreaUI extends BasicTextAreaUI {\n+public final class WindowsTextAreaUI extends BasicTextAreaUI {\n@@ -45,0 +45,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTextAreaUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-public class WindowsTextFieldUI extends BasicTextFieldUI\n+public final class WindowsTextFieldUI extends BasicTextFieldUI\n@@ -85,0 +85,1 @@\n+    @Override\n@@ -94,0 +95,1 @@\n+    @Override\n@@ -103,1 +105,1 @@\n-    static class WindowsFieldCaret extends DefaultCaret implements UIResource {\n+    static final class WindowsFieldCaret extends DefaultCaret implements UIResource {\n@@ -115,0 +117,1 @@\n+        @Override\n@@ -124,0 +127,1 @@\n+        @Override\n@@ -129,1 +133,1 @@\n-        private class SafeScroller implements Runnable {\n+        private final class SafeScroller implements Runnable {\n@@ -134,0 +138,1 @@\n+            @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTextFieldUI.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class WindowsTextPaneUI extends BasicTextPaneUI\n+public final class WindowsTextPaneUI extends BasicTextPaneUI\n@@ -56,0 +56,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTextPaneUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    @Override\n@@ -67,1 +68,1 @@\n-    static class WindowsCaret extends DefaultCaret\n+    static final class WindowsCaret extends DefaultCaret\n@@ -74,0 +75,1 @@\n+        @Override\n@@ -80,1 +82,1 @@\n-    static class WindowsHighlightPainter extends\n+    static final class WindowsHighlightPainter extends\n@@ -97,0 +99,1 @@\n+        @Override\n@@ -170,0 +173,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTextUI.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public class WindowsToggleButtonUI extends BasicToggleButtonUI\n+public final class WindowsToggleButtonUI extends BasicToggleButtonUI\n@@ -76,0 +76,1 @@\n+    @Override\n@@ -96,0 +97,1 @@\n+    @Override\n@@ -115,0 +117,1 @@\n+    @Override\n@@ -138,0 +141,1 @@\n+    @Override\n@@ -149,0 +153,1 @@\n+    @Override\n@@ -153,0 +158,1 @@\n+    @Override\n@@ -164,0 +170,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsToggleButtonUI.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class WindowsToolBarSeparatorUI extends BasicToolBarSeparatorUI {\n+public final class WindowsToolBarSeparatorUI extends BasicToolBarSeparatorUI {\n@@ -49,0 +49,1 @@\n+    @Override\n@@ -74,0 +75,1 @@\n+    @Override\n@@ -83,0 +85,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsToolBarSeparatorUI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public class WindowsToolBarUI extends BasicToolBarUI {\n+public final class WindowsToolBarUI extends BasicToolBarUI {\n@@ -54,0 +54,1 @@\n+    @Override\n@@ -61,0 +62,1 @@\n+    @Override\n@@ -69,0 +71,1 @@\n+    @Override\n@@ -77,0 +80,1 @@\n+    @Override\n@@ -91,0 +95,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsToolBarUI.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    @Override\n@@ -111,0 +112,1 @@\n+    @Override\n@@ -130,0 +132,1 @@\n+        @Override\n@@ -150,0 +153,1 @@\n+        @Override\n@@ -155,0 +159,1 @@\n+        @Override\n@@ -165,1 +170,1 @@\n-    public static class CollapsedIcon extends ExpandedIcon {\n+    public static final class CollapsedIcon extends ExpandedIcon {\n@@ -170,0 +175,1 @@\n+        @Override\n@@ -182,1 +188,1 @@\n-    public class WindowsTreeCellRenderer extends DefaultTreeCellRenderer {\n+    public final class WindowsTreeCellRenderer extends DefaultTreeCellRenderer {\n@@ -192,0 +198,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsTreeUI.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-class XPStyle {\n+final class XPStyle {\n@@ -334,0 +334,1 @@\n+        @Override\n@@ -358,1 +359,1 @@\n-    private class XPStatefulFillBorder extends XPFillBorder {\n+    private final class XPStatefulFillBorder extends XPFillBorder {\n@@ -367,0 +368,1 @@\n+        @Override\n@@ -386,1 +388,1 @@\n-    private class XPImageBorder extends AbstractBorder implements UIResource {\n+    private final class XPImageBorder extends AbstractBorder implements UIResource {\n@@ -393,0 +395,1 @@\n+        @Override\n@@ -398,0 +401,1 @@\n+        @Override\n@@ -426,1 +430,1 @@\n-    private static class XPEmptyBorder extends EmptyBorder implements UIResource {\n+    private static final class XPEmptyBorder extends EmptyBorder implements UIResource {\n@@ -431,0 +435,1 @@\n+        @Override\n@@ -497,1 +502,1 @@\n-    static class Skin {\n+    static final class Skin {\n@@ -569,0 +574,1 @@\n+        @Override\n@@ -573,0 +579,1 @@\n+        @Override\n@@ -577,0 +584,1 @@\n+        @Override\n@@ -678,1 +686,1 @@\n-    private static class SkinPainter extends CachedPainter {\n+    private static final class SkinPainter extends CachedPainter {\n@@ -684,0 +692,1 @@\n+        @Override\n@@ -688,0 +697,1 @@\n+        @Override\n@@ -720,0 +730,1 @@\n+        @Override\n@@ -740,0 +751,1 @@\n+        @Override\n@@ -757,0 +769,1 @@\n+        @Override\n@@ -772,0 +785,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/XPStyle.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class PlatformGraphicsInfo {\n+public final class PlatformGraphicsInfo {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class Win32ColorModel24 extends ComponentColorModel {\n+public final class Win32ColorModel24 extends ComponentColorModel {\n@@ -56,0 +56,1 @@\n+    @Override\n@@ -68,0 +69,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32ColorModel24.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    @Override\n@@ -91,0 +92,1 @@\n+    @Override\n@@ -101,0 +103,1 @@\n+    @Override\n@@ -178,0 +181,1 @@\n+    @Override\n@@ -197,0 +201,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32FontManager.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -593,1 +593,1 @@\n-    private static class Win32FSWindowAdapter extends WindowAdapter {\n+    private static final class Win32FSWindowAdapter extends WindowAdapter {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+    @Override\n@@ -98,0 +99,1 @@\n+    @Override\n@@ -210,0 +212,1 @@\n+    @Override\n@@ -221,0 +224,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsEnvironment.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-    static class FolderDisposer implements sun.java2d.DisposerRecord {\n+    static final class FolderDisposer implements sun.java2d.DisposerRecord {\n@@ -229,0 +229,1 @@\n+        @Override\n@@ -390,0 +391,1 @@\n+    @Override\n@@ -544,0 +546,1 @@\n+    @Override\n@@ -591,0 +594,1 @@\n+    @Override\n@@ -685,0 +689,1 @@\n+    @Override\n@@ -689,0 +694,1 @@\n+    @Override\n@@ -745,0 +751,1 @@\n+    @Override\n@@ -854,0 +861,1 @@\n+    @Override\n@@ -867,0 +875,1 @@\n+    @Override\n@@ -881,0 +890,1 @@\n+    @Override\n@@ -936,0 +946,1 @@\n+    @Override\n@@ -956,0 +967,1 @@\n+    @Override\n@@ -975,0 +987,1 @@\n+    @Override\n@@ -1050,0 +1063,1 @@\n+    @Override\n@@ -1143,0 +1157,1 @@\n+    @Override\n@@ -1239,0 +1254,1 @@\n+    @Override\n@@ -1255,0 +1271,1 @@\n+    @Override\n@@ -1271,0 +1288,1 @@\n+    @Override\n@@ -1303,0 +1321,1 @@\n+    @Override\n@@ -1345,0 +1364,1 @@\n+    @Override\n@@ -1357,1 +1377,1 @@\n-    private static class ColumnComparator implements Comparator<File> {\n+    private static final class ColumnComparator implements Comparator<File> {\n@@ -1368,0 +1388,1 @@\n+        @Override\n@@ -1408,1 +1429,1 @@\n-    static class MultiResolutionIconImage extends AbstractMultiResolutionImage {\n+    static final class MultiResolutionIconImage extends AbstractMultiResolutionImage {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolder2.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    @Override\n@@ -267,0 +268,1 @@\n+    @Override\n@@ -411,0 +413,1 @@\n+    @Override\n@@ -421,0 +424,1 @@\n+    @Override\n@@ -501,1 +505,1 @@\n-    private static class ComInvoker extends ThreadPoolExecutor implements ThreadFactory, ShellFolder.Invoker {\n+    private static final class ComInvoker extends ThreadPoolExecutor implements ThreadFactory, ShellFolder.Invoker {\n@@ -515,0 +519,1 @@\n+        @Override\n@@ -542,0 +547,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolderManager2.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-    private static class VIOptD3DWindowPainter extends VIOptWindowPainter {\n+    private static final class VIOptD3DWindowPainter extends VIOptWindowPainter {\n@@ -373,1 +373,1 @@\n-    private static class VIOptWGLWindowPainter extends VIOptWindowPainter {\n+    private static final class VIOptWGLWindowPainter extends VIOptWindowPainter {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/TranslucentWindowPainter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -792,0 +792,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WComponentPeer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -544,1 +544,1 @@\n-class HTMLCodec extends InputStream {\n+final class HTMLCodec extends InputStream {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDataTransferer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private class Encoder extends AWTCharset.Encoder {\n+    private final class Encoder extends AWTCharset.Encoder {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDefaultFontCharset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-    class WinPlaySound implements Runnable {\n+    final class WinPlaySound implements Runnable {\n@@ -213,0 +213,1 @@\n+        @Override\n@@ -217,0 +218,1 @@\n+        @Override\n@@ -228,0 +230,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDesktopProperties.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    @Override\n@@ -60,0 +61,1 @@\n+    @Override\n@@ -171,0 +173,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDragSourceContextPeer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class WEmbeddedFrame extends EmbeddedFrame {\n+public final class WEmbeddedFrame extends EmbeddedFrame {\n@@ -82,0 +82,1 @@\n+    @Override\n@@ -227,0 +228,1 @@\n+    @Override\n@@ -244,0 +246,1 @@\n+    @Override\n@@ -245,0 +248,1 @@\n+    @Override\n@@ -259,0 +263,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WEmbeddedFrame.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public class WEmbeddedFramePeer extends WFramePeer {\n+public final class WEmbeddedFramePeer extends WFramePeer {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WEmbeddedFramePeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+    @Override\n@@ -43,0 +44,1 @@\n+    @Override\n@@ -50,0 +52,1 @@\n+    @Override\n@@ -54,0 +57,1 @@\n+    @Override\n@@ -55,0 +59,1 @@\n+    @Override\n@@ -63,0 +68,1 @@\n+    @Override\n@@ -65,0 +71,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WLabelPeer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class WLightweightFramePeer extends WFramePeer implements OverrideNativeWindowHandle {\n+public final class WLightweightFramePeer extends WFramePeer implements OverrideNativeWindowHandle {\n@@ -103,0 +103,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WLightweightFramePeer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    @Override\n@@ -54,0 +55,1 @@\n+    @Override\n@@ -72,0 +74,1 @@\n+    @Override\n@@ -168,0 +171,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WMenuItemPeer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    @Override\n@@ -48,0 +49,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WMouseInfoPeer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPopupMenuPeer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-    static class HandleRecord implements DisposerRecord {\n+    static final class HandleRecord implements DisposerRecord {\n@@ -2272,1 +2272,1 @@\n-static class PrintToFileErrorDialog extends Dialog implements ActionListener {\n+static final class PrintToFileErrorDialog extends Dialog implements ActionListener {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPrinterJob.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-    static class ScrollEvent extends PeerEvent {\n+    static final class ScrollEvent extends PeerEvent {\n@@ -190,1 +190,1 @@\n-    class Adjustor implements Runnable {\n+    final class Adjustor implements Runnable {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WScrollPanePeer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+    @Override\n@@ -49,0 +50,1 @@\n+    @Override\n@@ -51,0 +53,1 @@\n+    @Override\n@@ -52,0 +55,1 @@\n+    @Override\n@@ -61,0 +65,1 @@\n+    @Override\n@@ -63,0 +68,1 @@\n+    @Override\n@@ -139,0 +145,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WScrollbarPeer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,1 +189,1 @@\n-    static class ToolkitDisposer implements sun.java2d.DisposerRecord {\n+    static final class ToolkitDisposer implements sun.java2d.DisposerRecord {\n@@ -596,1 +596,0 @@\n-        FontPeer retval = null;\n@@ -599,3 +598,3 @@\n-            retval = cacheFontPeer.get(lcName + style);\n-            if (null != retval) {\n-                return retval;\n+            FontPeer cachedVal = cacheFontPeer.get(lcName + style);\n+            if (null != cachedVal) {\n+                return cachedVal;\n@@ -604,8 +603,7 @@\n-        retval = new WFontPeer(name, style);\n-        if (retval != null) {\n-            if (null == cacheFontPeer) {\n-                cacheFontPeer = new Hashtable<>(5, 0.9f);\n-            }\n-            if (null != cacheFontPeer) {\n-                cacheFontPeer.put(lcName + style, retval);\n-            }\n+\n+        FontPeer retval = new WFontPeer(name, style);\n+        if (null == cacheFontPeer) {\n+            cacheFontPeer = new Hashtable<>(5, 0.9f);\n+        }\n+        if (null != cacheFontPeer) {\n+            cacheFontPeer.put(lcName + style, retval);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    class IconObserver implements ImageObserver {\n+    final class IconObserver implements ImageObserver {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WTrayIconPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -852,1 +852,1 @@\n-    private static class GuiDisposedListener implements PropertyChangeListener {\n+    private static final class GuiDisposedListener implements PropertyChangeListener {\n@@ -878,1 +878,1 @@\n-    private static class ActiveWindowListener implements PropertyChangeListener {\n+    private static final class ActiveWindowListener implements PropertyChangeListener {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static class Encoder extends CharsetEncoder {\n+    private static final class Encoder extends CharsetEncoder {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WingDings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class NativeFont extends PhysicalFont {\n+public final class NativeFont extends PhysicalFont {\n@@ -56,0 +56,1 @@\n+    @Override\n@@ -64,0 +65,1 @@\n+    @Override\n@@ -72,0 +74,1 @@\n+    @Override\n@@ -76,0 +79,1 @@\n+    @Override\n@@ -82,0 +86,1 @@\n+    @Override\n@@ -89,0 +94,1 @@\n+    @Override\n@@ -94,0 +100,1 @@\n+    @Override\n@@ -99,0 +106,1 @@\n+    @Override\n@@ -103,0 +111,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/font\/NativeFont.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    @Override\n@@ -54,0 +55,1 @@\n+    @Override\n@@ -62,0 +64,1 @@\n+    @Override\n@@ -67,0 +70,1 @@\n+    @Override\n@@ -71,0 +75,1 @@\n+    @Override\n@@ -75,0 +80,1 @@\n+    @Override\n@@ -78,0 +84,1 @@\n+    @Override\n@@ -82,0 +89,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/font\/NativeStrike.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class WindowsSurfaceManagerFactory extends SurfaceManagerFactory {\n+public final class WindowsSurfaceManagerFactory extends SurfaceManagerFactory {\n@@ -52,0 +52,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/WindowsSurfaceManagerFactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -361,1 +361,1 @@\n-class D3DSurfaceToSurfaceBlit extends Blit {\n+final class D3DSurfaceToSurfaceBlit extends Blit {\n@@ -369,0 +369,1 @@\n+    @Override\n@@ -383,1 +384,1 @@\n-class D3DSurfaceToSurfaceScale extends ScaledBlit {\n+final class D3DSurfaceToSurfaceScale extends ScaledBlit {\n@@ -391,0 +392,1 @@\n+    @Override\n@@ -408,1 +410,1 @@\n-class D3DSurfaceToSurfaceTransform extends TransformBlit {\n+final class D3DSurfaceToSurfaceTransform extends TransformBlit {\n@@ -416,0 +418,1 @@\n+    @Override\n@@ -431,1 +434,1 @@\n-class D3DRTTSurfaceToSurfaceBlit extends Blit {\n+final class D3DRTTSurfaceToSurfaceBlit extends Blit {\n@@ -439,0 +442,1 @@\n+    @Override\n@@ -453,1 +457,1 @@\n-class D3DRTTSurfaceToSurfaceScale extends ScaledBlit {\n+final class D3DRTTSurfaceToSurfaceScale extends ScaledBlit {\n@@ -461,0 +465,1 @@\n+    @Override\n@@ -478,1 +483,1 @@\n-class D3DRTTSurfaceToSurfaceTransform extends TransformBlit {\n+final class D3DRTTSurfaceToSurfaceTransform extends TransformBlit {\n@@ -486,0 +491,1 @@\n+    @Override\n@@ -500,1 +506,1 @@\n-class D3DSurfaceToSwBlit extends Blit {\n+final class D3DSurfaceToSwBlit extends Blit {\n@@ -570,0 +576,1 @@\n+    @Override\n@@ -632,1 +639,1 @@\n-class D3DSwToSurfaceBlit extends Blit {\n+final class D3DSwToSurfaceBlit extends Blit {\n@@ -643,0 +650,1 @@\n+    @Override\n@@ -656,1 +664,1 @@\n-class D3DSwToSurfaceScale extends ScaledBlit {\n+final class D3DSwToSurfaceScale extends ScaledBlit {\n@@ -667,0 +675,1 @@\n+    @Override\n@@ -683,1 +692,1 @@\n-class D3DSwToSurfaceTransform extends TransformBlit {\n+final class D3DSwToSurfaceTransform extends TransformBlit {\n@@ -694,0 +703,1 @@\n+    @Override\n@@ -707,1 +717,1 @@\n-class D3DSwToTextureBlit extends Blit {\n+final class D3DSwToTextureBlit extends Blit {\n@@ -718,0 +728,1 @@\n+    @Override\n@@ -731,1 +742,1 @@\n-class D3DTextureToSurfaceBlit extends Blit {\n+final class D3DTextureToSurfaceBlit extends Blit {\n@@ -739,0 +750,1 @@\n+    @Override\n@@ -753,1 +765,1 @@\n-class D3DTextureToSurfaceScale extends ScaledBlit {\n+final class D3DTextureToSurfaceScale extends ScaledBlit {\n@@ -761,0 +773,1 @@\n+    @Override\n@@ -778,1 +791,1 @@\n-class D3DTextureToSurfaceTransform extends TransformBlit {\n+final class D3DTextureToSurfaceTransform extends TransformBlit {\n@@ -786,0 +799,1 @@\n+    @Override\n@@ -807,1 +821,1 @@\n-class D3DGeneralBlit extends Blit {\n+final class D3DGeneralBlit extends Blit {\n@@ -820,0 +834,1 @@\n+    @Override\n@@ -920,1 +935,1 @@\n-class D3DSurfaceToGDIWindowSurfaceBlit extends Blit {\n+final class D3DSurfaceToGDIWindowSurfaceBlit extends Blit {\n@@ -938,1 +953,1 @@\n-class D3DSurfaceToGDIWindowSurfaceScale extends ScaledBlit {\n+final class D3DSurfaceToGDIWindowSurfaceScale extends ScaledBlit {\n@@ -958,1 +973,1 @@\n-class D3DSurfaceToGDIWindowSurfaceTransform extends TransformBlit {\n+final class D3DSurfaceToGDIWindowSurfaceTransform extends TransformBlit {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DBlitLoops.java","additions":33,"deletions":18,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-class D3DBufImgOps extends BufferedBufImgOps {\n+final class D3DBufImgOps extends BufferedBufImgOps {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DBufImgOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-    static class D3DContextCaps extends ContextCapabilities {\n+    static final class D3DContextCaps extends ContextCapabilities {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class D3DDrawImage extends DrawImage {\n+public final class D3DDrawImage extends DrawImage {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DDrawImage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-    private static class D3DBufferCaps extends BufferCapabilities {\n+    private static final class D3DBufferCaps extends BufferCapabilities {\n@@ -247,1 +247,1 @@\n-    private static class D3DImageCaps extends ImageCapabilities {\n+    private static final class D3DImageCaps extends ImageCapabilities {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DGraphicsConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-    public final boolean isCapPresent(int cap) {\n+    public boolean isCapPresent(int cap) {\n@@ -237,1 +237,1 @@\n-    private static class D3DFSWindowAdapter extends WindowAdapter {\n+    private static final class D3DFSWindowAdapter extends WindowAdapter {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DGraphicsDevice.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class D3DMaskBlit extends BufferedMaskBlit {\n+final class D3DMaskBlit extends BufferedMaskBlit {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DMaskBlit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class D3DMaskFill extends BufferedMaskFill {\n+final class D3DMaskFill extends BufferedMaskFill {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DMaskFill.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    private static class Gradient extends D3DPaints {\n+    private static final class Gradient extends D3DPaints {\n@@ -99,1 +99,1 @@\n-    private static class Texture extends D3DPaints {\n+    private static final class Texture extends D3DPaints {\n@@ -204,1 +204,1 @@\n-    private static class LinearGradient extends MultiGradient {\n+    private static final class LinearGradient extends MultiGradient {\n@@ -231,1 +231,1 @@\n-    private static class RadialGradient extends MultiGradient {\n+    private static final class RadialGradient extends MultiGradient {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DPaints.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class D3DRenderQueue extends RenderQueue {\n+public final class D3DRenderQueue extends RenderQueue {\n@@ -135,0 +135,1 @@\n+    @Override\n@@ -140,0 +141,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DRenderQueue.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+    @Override\n@@ -98,1 +99,1 @@\n-    private static class Tracer extends D3DRenderer {\n+    private static final class Tracer extends D3DRenderer {\n@@ -104,0 +105,1 @@\n+        @Override\n@@ -136,0 +138,1 @@\n+        @Override\n@@ -139,0 +142,1 @@\n+        @Override\n@@ -145,0 +149,1 @@\n+        @Override\n@@ -149,0 +154,1 @@\n+        @Override\n@@ -156,0 +162,1 @@\n+        @Override\n@@ -160,0 +167,1 @@\n+        @Override\n@@ -166,0 +174,1 @@\n+        @Override\n@@ -172,0 +181,1 @@\n+        @Override\n@@ -178,0 +188,1 @@\n+        @Override\n@@ -190,0 +201,1 @@\n+        @Override\n@@ -203,0 +215,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DRenderer.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-public class D3DScreenUpdateManager extends ScreenUpdateManager\n+public final class D3DScreenUpdateManager extends ScreenUpdateManager\n@@ -404,0 +404,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DScreenUpdateManager.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -444,0 +444,1 @@\n+    @Override\n@@ -451,0 +452,1 @@\n+    @Override\n@@ -458,1 +460,1 @@\n-    static class D3DDataBufferNative extends DataBufferNative {\n+    static final class D3DDataBufferNative extends DataBufferNative {\n@@ -466,0 +468,1 @@\n+        @Override\n@@ -489,0 +492,1 @@\n+        @Override\n@@ -511,0 +515,1 @@\n+    @Override\n@@ -544,0 +549,1 @@\n+    @Override\n@@ -567,0 +573,1 @@\n+    @Override\n@@ -806,0 +813,1 @@\n+    @Override\n@@ -810,0 +818,1 @@\n+    @Override\n@@ -824,0 +833,1 @@\n+    @Override\n@@ -839,0 +849,1 @@\n+    @Override\n@@ -843,0 +854,1 @@\n+    @Override\n@@ -912,0 +924,1 @@\n+    @Override\n@@ -923,1 +936,1 @@\n-    public static class D3DWindowSurfaceData extends D3DSurfaceData {\n+    public static final class D3DWindowSurfaceData extends D3DSurfaceData {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DSurfaceData.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public class D3DSurfaceDataProxy extends SurfaceDataProxy {\n+public final class D3DSurfaceDataProxy extends SurfaceDataProxy {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DSurfaceDataProxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    private static class Tracer extends D3DTextRenderer {\n+    private static final class Tracer extends D3DTextRenderer {\n@@ -66,0 +66,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DTextRenderer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-public class D3DVolatileSurfaceManager\n+public final class D3DVolatileSurfaceManager\n@@ -78,0 +78,1 @@\n+    @Override\n@@ -89,0 +90,1 @@\n+    @Override\n@@ -127,0 +129,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DVolatileSurfaceManager.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-    private static class WGLGetConfigInfo implements Runnable {\n+    private static final class WGLGetConfigInfo implements Runnable {\n@@ -187,1 +187,1 @@\n-    public final boolean isCapPresent(int cap) {\n+    public boolean isCapPresent(int cap) {\n@@ -192,1 +192,1 @@\n-    public final long getNativeConfigInfo() {\n+    public long getNativeConfigInfo() {\n@@ -197,1 +197,1 @@\n-    public final OGLContext getContext() {\n+    public OGLContext getContext() {\n@@ -201,1 +201,1 @@\n-    private static class WGLGCDisposerRecord implements DisposerRecord {\n+    private static final class WGLGCDisposerRecord implements DisposerRecord {\n@@ -377,1 +377,1 @@\n-    private static class WGLBufferCaps extends BufferCapabilities {\n+    private static final class WGLBufferCaps extends BufferCapabilities {\n@@ -393,1 +393,1 @@\n-    private static class WGLImageCaps extends ImageCapabilities {\n+    private static final class WGLImageCaps extends ImageCapabilities {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/opengl\/WGLGraphicsConfig.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    @Override\n@@ -154,1 +155,1 @@\n-    public static class WGLWindowSurfaceData extends WGLSurfaceData {\n+    public static final class WGLWindowSurfaceData extends WGLSurfaceData {\n@@ -162,0 +163,1 @@\n+        @Override\n@@ -166,0 +168,1 @@\n+        @Override\n@@ -177,0 +180,1 @@\n+        @Override\n@@ -191,1 +195,1 @@\n-    public static class WGLVSyncOffScreenSurfaceData extends\n+    public static final class WGLVSyncOffScreenSurfaceData extends\n@@ -238,0 +242,1 @@\n+        @Override\n@@ -242,0 +247,1 @@\n+        @Override\n@@ -257,0 +263,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/opengl\/WGLSurfaceData.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public class WGLVolatileSurfaceManager extends VolatileSurfaceManager {\n+public final class WGLVolatileSurfaceManager extends VolatileSurfaceManager {\n@@ -65,0 +65,1 @@\n+    @Override\n@@ -73,0 +74,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/opengl\/WGLVolatileSurfaceManager.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public class GDIBlitLoops extends Blit {\n+public final class GDIBlitLoops extends Blit {\n@@ -137,0 +137,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/GDIBlitLoops.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    @Override\n@@ -71,0 +72,1 @@\n+    @Override\n@@ -88,0 +90,1 @@\n+    @Override\n@@ -106,0 +109,1 @@\n+    @Override\n@@ -123,0 +127,1 @@\n+    @Override\n@@ -143,0 +148,1 @@\n+    @Override\n@@ -156,0 +162,1 @@\n+    @Override\n@@ -173,0 +180,1 @@\n+    @Override\n@@ -190,0 +198,1 @@\n+    @Override\n@@ -208,0 +217,1 @@\n+    @Override\n@@ -225,0 +235,1 @@\n+    @Override\n@@ -245,0 +256,1 @@\n+    @Override\n@@ -306,0 +318,1 @@\n+    @Override\n@@ -321,0 +334,1 @@\n+    @Override\n@@ -334,1 +348,2 @@\n-    public static class Tracer extends GDIRenderer {\n+    public static final class Tracer extends GDIRenderer {\n+        @Override\n@@ -342,0 +357,1 @@\n+        @Override\n@@ -349,0 +365,1 @@\n+        @Override\n@@ -358,0 +375,1 @@\n+        @Override\n@@ -365,0 +383,1 @@\n+        @Override\n@@ -374,0 +393,1 @@\n+        @Override\n@@ -384,0 +404,1 @@\n+        @Override\n@@ -391,0 +412,1 @@\n+        @Override\n@@ -400,0 +422,1 @@\n+        @Override\n@@ -407,0 +430,1 @@\n+        @Override\n@@ -416,0 +440,1 @@\n+        @Override\n@@ -426,0 +451,1 @@\n+        @Override\n@@ -437,0 +463,1 @@\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/GDIRenderer.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public class GDIWindowSurfaceData extends SurfaceData {\n+public final class GDIWindowSurfaceData extends SurfaceData {\n@@ -142,0 +142,1 @@\n+    @Override\n@@ -158,0 +159,1 @@\n+    @Override\n@@ -226,0 +228,1 @@\n+    @Override\n@@ -235,0 +238,1 @@\n+    @Override\n@@ -302,0 +306,1 @@\n+    @Override\n@@ -310,0 +315,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/GDIWindowSurfaceData.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-public class WindowsFlags {\n+public final class WindowsFlags {\n@@ -58,10 +58,0 @@\n-     *      offscreenSharingEnabled: usage: \"-Dsun.java2d.offscreenSharing=true\"\n-     *               Turns on the ability to share a hardware-accelerated\n-     *               offscreen surface through the JAWT interface.  See\n-     *               src\/windows\/native\/sun\/windows\/awt_DrawingSurface.* for\n-     *               more information.  This capability is disabled by default\n-     *               pending more testing and time to work out the right\n-     *               solution; we do not want to expose more public JAWT api\n-     *               without being very sure that we will be willing to support\n-     *               that API in the future regardless of other native\n-     *               rendering pipeline changes.\n@@ -104,1 +94,0 @@\n-    private static boolean offscreenSharingEnabled;\n@@ -209,2 +198,0 @@\n-        offscreenSharingEnabled =\n-            getBooleanProp(\"sun.java2d.offscreenSharing\", false);\n@@ -220,10 +207,0 @@\n-        \/*\n-            \/\/ Output info based on some non-default flags:\n-            if (offscreenSharingEnabled) {\n-                System.out.println(\n-                    \"Warning: offscreenSharing has been enabled. \" +\n-                    \"The use of this capability will change in future \" +\n-                    \"releases and applications that depend on it \" +\n-                    \"may not work correctly\");\n-            }\n-        *\/\n@@ -238,2 +215,1 @@\n-                           \"  gdiBlitEnabled: \" + gdiBlitEnabled + \"\\n\" +\n-                           \"  offscreenSharingEnabled: \" + offscreenSharingEnabled);\n+                           \"  gdiBlitEnabled: \" + gdiBlitEnabled);\n@@ -263,4 +239,0 @@\n-    public static boolean isOffscreenSharingEnabled() {\n-        return offscreenSharingEnabled;\n-    }\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/WindowsFlags.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-public class PlatformPrinterJobProxy {\n+public final class PlatformPrinterJobProxy {\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PlatformPrinterJobProxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public class PrintServiceLookupProvider extends PrintServiceLookup {\n+public final class PrintServiceLookupProvider extends PrintServiceLookup {\n@@ -108,0 +108,1 @@\n+    @Override\n@@ -202,0 +203,1 @@\n+    @Override\n@@ -263,0 +265,1 @@\n+    @Override\n@@ -270,0 +273,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public class Win32MediaTray extends MediaTray {\n+public final class Win32MediaTray extends MediaTray {\n@@ -99,0 +99,1 @@\n+    @Override\n@@ -109,0 +110,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32MediaTray.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-public class Win32PrintJob implements CancelablePrintJob {\n+public final class Win32PrintJob implements CancelablePrintJob {\n@@ -116,0 +116,1 @@\n+    @Override\n@@ -120,0 +121,1 @@\n+    @Override\n@@ -132,0 +134,1 @@\n+    @Override\n@@ -144,0 +147,1 @@\n+    @Override\n@@ -257,0 +261,1 @@\n+    @Override\n@@ -276,0 +281,1 @@\n+    @Override\n@@ -296,0 +302,1 @@\n+    @Override\n@@ -700,0 +707,1 @@\n+   @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintJob.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-public class Win32PrintService implements PrintService, AttributeUpdater,\n+public final class Win32PrintService implements PrintService, AttributeUpdater,\n@@ -245,0 +245,1 @@\n+    @Override\n@@ -860,0 +861,1 @@\n+    @Override\n@@ -871,0 +873,1 @@\n+    @Override\n@@ -899,0 +902,1 @@\n+    @Override\n@@ -912,0 +916,1 @@\n+    @Override\n@@ -926,0 +931,1 @@\n+    @Override\n@@ -958,0 +964,1 @@\n+    @Override\n@@ -982,0 +989,1 @@\n+    @Override\n@@ -1001,0 +1009,1 @@\n+    @Override\n@@ -1020,0 +1029,1 @@\n+    @Override\n@@ -1052,0 +1062,1 @@\n+    @Override\n@@ -1075,0 +1086,1 @@\n+    @Override\n@@ -1258,0 +1270,1 @@\n+    @Override\n@@ -1460,0 +1473,1 @@\n+    @Override\n@@ -1589,0 +1603,1 @@\n+    @Override\n@@ -1625,1 +1640,1 @@\n-    private static class Win32DocumentPropertiesUI\n+    private static final class Win32DocumentPropertiesUI\n@@ -1634,0 +1649,1 @@\n+        @Override\n@@ -1652,1 +1668,1 @@\n-    private static class Win32ServiceUIFactory extends ServiceUIFactory {\n+    private static final class Win32ServiceUIFactory extends ServiceUIFactory {\n@@ -1660,0 +1676,1 @@\n+        @Override\n@@ -1672,0 +1689,1 @@\n+        @Override\n@@ -1688,0 +1706,1 @@\n+    @Override\n@@ -1695,0 +1714,1 @@\n+    @Override\n@@ -1699,0 +1719,1 @@\n+    @Override\n@@ -1705,0 +1726,1 @@\n+   @Override\n@@ -1709,0 +1731,1 @@\n+    @Override\n@@ -1730,1 +1753,1 @@\n-class Win32MediaSize extends MediaSizeName {\n+final class Win32MediaSize extends MediaSizeName {\n@@ -1790,0 +1813,1 @@\n+    @Override\n@@ -1795,0 +1819,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintService.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class ClassicSortArrowIcon implements Icon, UIResource, Serializable{\n+public final class ClassicSortArrowIcon implements Icon, UIResource, Serializable{\n@@ -48,0 +48,1 @@\n+    @Override\n@@ -92,0 +93,1 @@\n+    @Override\n@@ -95,0 +97,1 @@\n+    @Override\n","filename":"src\/java.desktop\/windows\/classes\/sun\/swing\/plaf\/windows\/ClassicSortArrowIcon.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-jboolean  g_offscreenSharing; \/\/ JAWT accelerated surface sharing\n@@ -92,4 +91,0 @@\n-    g_offscreenSharing = GetStaticBoolean(env, wFlagsClass,\n-                                          \"offscreenSharingEnabled\");\n-    JNU_CHECK_EXCEPTION(env);\n-\n@@ -105,2 +100,0 @@\n-    J2dTraceLn1(J2D_TRACE_INFO, \"  offscreenSharing = %s\",\n-                (g_offscreenSharing ? \"true\" : \"false\"));\n","filename":"src\/java.desktop\/windows\/native\/libawt\/java2d\/windows\/WindowsFlags.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -3,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +31,0 @@\n-extern jboolean  g_offscreenSharing; \/\/ JAWT accelerated surface sharing\n","filename":"src\/java.desktop\/windows\/native\/libawt\/java2d\/windows\/WindowsFlags.h","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -374,11 +374,4 @@\n-        \/** Check to see if the property is managed by the security manager **\/\n-        String propertyValue = (_xmlSecurityManager != null) ?\n-                _xmlSecurityManager.getLimitAsString(name) : null;\n-        if (propertyValue != null) {\n-            return propertyValue;\n-        } else {\n-            propertyValue = (_xmlSecurityPropertyMgr != null) ?\n-                _xmlSecurityPropertyMgr.getValue(name) : null;\n-            if (propertyValue != null) {\n-                return propertyValue;\n-            }\n+        \/\/check if the property is managed by security manager\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(_xmlSecurityManager, _xmlSecurityPropertyMgr, name)) != null) {\n+            return value;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javax.xml.catalog.CatalogFeatures;\n@@ -34,1 +33,0 @@\n-import jdk.xml.internal.FeaturePropertyBase;\n@@ -36,1 +34,0 @@\n-import jdk.xml.internal.JdkProperty;\n@@ -191,12 +188,5 @@\n-        \/**\n-         * Check to see if the property is managed by the security manager *\n-         *\/\n-        String propertyValue = (fSecurityManager != null)\n-                ? fSecurityManager.getLimitAsString(property) : null;\n-        \/**\n-         * Check to see if the property is managed by the security property\n-         * manager\n-         *\/\n-        if (propertyValue == null) {\n-            propertyValue = (fSecurityPropertyMgr != null)\n-                    ? fSecurityPropertyMgr.getValue(property) : null;\n+\n+        \/\/check if the property is managed by security manager\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, property)) != null) {\n+            return value;\n@@ -204,1 +194,1 @@\n-        return propertyValue != null ? propertyValue : supportedProps.get(property);\n+        return supportedProps.get(property);\n@@ -253,9 +243,3 @@\n-        \/\/check if the property is managed by security manager\n-        if (fSecurityManager == null\n-                || !fSecurityManager.setLimit(property, JdkProperty.State.APIPROPERTY, value)) {\n-            \/\/check if the property is managed by security property manager\n-            if (fSecurityPropertyMgr == null\n-                    || !fSecurityPropertyMgr.setValue(property, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                \/\/fall back to the existing property manager\n-                supportedProps.put(property, value);\n-            }\n+        if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, property, value)) {\n+            \/\/fall back to the existing property manager\n+            supportedProps.put(property, value);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+        cvc-complex-type.2.4.d.1 = cvc-complex-type.2.4.d: Invalid content was found starting with element ''{0}''. No child element ''{1}'' is expected at this point.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -117,7 +117,4 @@\n-        \/\/check if the property is managed by security manager\n-        String pName;\n-        if ((pName = fSecurityManager.find(name)) != null) {\n-            \/\/ as the qName is deprecated, let the manager decide whether the\n-            \/\/ value shall be changed\n-            fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value);\n-            attributes.put(pName, fSecurityManager.getLimitAsString(pName));\n+        if (JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, value)) {\n+            \/\/ necessary as DocumentBuilder recreate property manager\n+            \/\/ remove this line once that's changed\n+            attributes.put(name, value);\n@@ -126,3 +123,0 @@\n-        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n-            attributes.put(pName, value);\n-            return;\n@@ -130,1 +124,0 @@\n-\n@@ -149,1 +142,0 @@\n-\n@@ -151,5 +143,3 @@\n-        String pName;\n-        if ((pName = fSecurityManager.find(name)) != null) {\n-            return fSecurityManager.getLimitAsString(pName);\n-        } else if ((pName = fSecurityPropertyMgr.find(name)) != null) {\n-            return attributes.get(pName);\n+        String value;\n+        if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+            return value;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -300,9 +300,3 @@\n-                     \/\/check if the property is managed by security manager\n-                     if (fSecurityManager == null ||\n-                             !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, val)) {\n-                         \/\/check if the property is managed by security property manager\n-                         if (fSecurityPropertyMgr == null ||\n-                                 !fSecurityPropertyMgr.setValue(name, State.APIPROPERTY, val)) {\n-                             \/\/fall back to the existing property manager\n-                             domParser.setProperty(name, val);\n-                         }\n+                     if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, val)) {\n+                         \/\/fall back to the existing property manager\n+                         domParser.setProperty(name, val);\n@@ -310,1 +304,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderImpl.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -572,11 +572,4 @@\n-            \/\/check if the property is managed by security manager\n-            if (fSecurityManager == null ||\n-                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, value)) {\n-                \/\/check if the property is managed by security property manager\n-                if (fSecurityPropertyMgr == null ||\n-                        !fSecurityPropertyMgr.setValue(name, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                    \/\/fall back to the existing property manager\n-                    if (!fInitProperties.containsKey(name)) {\n-                        fInitProperties.put(name, super.getProperty(name));\n-                    }\n-                    super.setProperty(name, value);\n+            if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, value)) {\n+                \/\/fall back to the existing property manager\n+                if (!fInitProperties.containsKey(name)) {\n+                    fInitProperties.put(name, super.getProperty(name));\n@@ -584,0 +577,1 @@\n+                super.setProperty(name, value);\n@@ -585,1 +579,0 @@\n-\n@@ -599,11 +592,3 @@\n-            \/** Check to see if the property is managed by the security manager **\/\n-            String propertyValue = (fSecurityManager != null) ?\n-                    fSecurityManager.getLimitAsString(name) : null;\n-            if (propertyValue != null) {\n-                return propertyValue;\n-            } else {\n-                propertyValue = (fSecurityPropertyMgr != null) ?\n-                    fSecurityPropertyMgr.getValue(name) : null;\n-                if (propertyValue != null) {\n-                    return propertyValue;\n-                }\n+            String value;\n+            if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+                return value;\n@@ -611,1 +596,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import javax.xml.catalog.CatalogFeatures.Feature;\n@@ -407,4 +406,5 @@\n-            String propertyValue = (fSecurityManager != null) ?\n-                    fSecurityManager.getLimitAsString(name) : null;\n-            return propertyValue != null ? propertyValue :\n-                    fXMLSchemaLoader.getProperty(name);\n+            String value;\n+            if ((value = JdkXmlUtils.getProperty(fSecurityManager, fSecurityPropertyMgr, name)) != null) {\n+                return value;\n+            }\n+            return fXMLSchemaLoader.getProperty(name);\n@@ -516,9 +516,3 @@\n-            \/\/check if the property is managed by security manager\n-            if (fSecurityManager == null ||\n-                    !fSecurityManager.setLimit(name, JdkProperty.State.APIPROPERTY, object)) {\n-                \/\/check if the property is managed by security property manager\n-                if (fSecurityPropertyMgr == null ||\n-                        !fSecurityPropertyMgr.setValue(name, FeaturePropertyBase.State.APIPROPERTY, object)) {\n-                    \/\/fall back to the existing property manager\n-                    fXMLSchemaLoader.setProperty(name, object);\n-                }\n+            if (!JdkXmlUtils.setProperty(fSecurityManager, fSecurityPropertyMgr, name, object)) {\n+                \/\/fall back to the existing property manager\n+                fXMLSchemaLoader.setProperty(name, object);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.JdkXmlUtils;\n@@ -356,1 +356,1 @@\n-     * @param state The requested state of the feature (true or false).\n+     * @param value The value of the feature (true or false).\n@@ -364,1 +364,1 @@\n-        else if (value == false && (VALIDATION.equals(featureId) || SCHEMA_VALIDATION.equals(featureId))) {\n+        else if (!value && (VALIDATION.equals(featureId) || SCHEMA_VALIDATION.equals(featureId))) {\n@@ -455,11 +455,4 @@\n-        \/\/check if the property is managed by security manager\n-        if (fInitSecurityManager == null ||\n-                !fInitSecurityManager.setLimit(propertyId, JdkProperty.State.APIPROPERTY, value)) {\n-            \/\/check if the property is managed by security property manager\n-            if (fSecurityPropertyMgr == null ||\n-                    !fSecurityPropertyMgr.setValue(propertyId, FeaturePropertyBase.State.APIPROPERTY, value)) {\n-                \/\/fall back to the existing property manager\n-                if (!fInitProperties.containsKey(propertyId)) {\n-                    fInitProperties.put(propertyId, super.getProperty(propertyId));\n-                }\n-                super.setProperty(propertyId, value);\n+        if (!JdkXmlUtils.setProperty(fInitSecurityManager, fSecurityPropertyMgr, propertyId, value)) {\n+            \/\/fall back to the existing property manager\n+            if (!fInitProperties.containsKey(propertyId)) {\n+                fInitProperties.put(propertyId, super.getProperty(propertyId));\n@@ -467,0 +460,1 @@\n+            super.setProperty(propertyId, value);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaValidatorComponentManager.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,41 @@\n+    \/**\n+     * Sets the property if it's managed by either XMLSecurityManager or XMLSecurityPropertyManager.\n+     * @param xsm the XMLSecurityManager\n+     * @param xspm the XMLSecurityPropertyManager\n+     * @param property the property\n+     * @param value the value\n+     * @return true if the property is managed by either XMLSecurityManager or\n+     * XMLSecurityPropertyManager, false otherwise\n+     *\/\n+    public static boolean setProperty(XMLSecurityManager xsm, XMLSecurityPropertyManager xspm,\n+            String property, Object value) {\n+        if (xsm != null && xsm.find(property) != null) {\n+            return xsm.setLimit(property, JdkProperty.State.APIPROPERTY, value);\n+\n+        } else if (xspm != null && xspm.find(property) != null) {\n+            return xspm.setValue(property, FeaturePropertyBase.State.APIPROPERTY, value);\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns the value of the property if it's managed by either XMLSecurityManager\n+     * or XMLSecurityPropertyManager.\n+     * @param xsm the XMLSecurityManager\n+     * @param xspm the XMLSecurityPropertyManager\n+     * @param property the property\n+     * @return the value of the property if it's managed by either XMLSecurityManager\n+     * or XMLSecurityPropertyManager, null otherwise\n+     *\/\n+    public static String getProperty(XMLSecurityManager xsm, XMLSecurityPropertyManager xspm,\n+            String property) {\n+        String value = null;\n+        if (xsm != null && (value = xsm.getLimitAsString(property)) != null) {\n+            return value;\n+        }\n+        if (xspm != null) {\n+            value = xspm.getValue(property);\n+        }\n+        return value;\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlUtils.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-                return limit.systemProperty();\n+                return (limit.systemProperty != null) ? limit.systemProperty : limit.apiProperty;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4881,1 +4881,1 @@\n-                bindings[0] = !tree.var.sym.isUnnamedVariable();\n+                bindings[0] |= !tree.var.sym.isUnnamedVariable();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.CKR_KEY_SIZE_RANGE;\n@@ -160,0 +161,9 @@\n+        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n+        if (ki == null) {\n+            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n+                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n+                    alg + \"'.\");\n+        }\n+        checkDerivedKeyType(ki, alg);\n+        P11KeyGenerator.checkKeySize(ki.keyGenMech, outLen * 8, token);\n+\n@@ -177,7 +187,0 @@\n-        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n-        if (ki == null) {\n-            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n-                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n-                    alg + \"'.\");\n-        }\n-        long derivedKeyType = ki.keyType;\n@@ -187,1 +190,1 @@\n-                new CK_ATTRIBUTE(CKA_KEY_TYPE, derivedKeyType),\n+                new CK_ATTRIBUTE(CKA_KEY_TYPE, ki.keyType),\n@@ -198,1 +201,1 @@\n-                    derivedKeyType, attrs);\n+                    ki.keyType, attrs);\n@@ -219,0 +222,5 @@\n+            if (e.match(CKR_KEY_SIZE_RANGE)) {\n+                throw new InvalidAlgorithmParameterException(\"Invalid key \" +\n+                        \"size (\" + outLen + \" bytes) for algorithm '\" + alg +\n+                        \"'.\", e);\n+            }\n@@ -230,0 +238,17 @@\n+    private static boolean canDeriveKeyInfoType(long t) {\n+        return (t == CKK_DES || t == CKK_DES3 || t == CKK_AES ||\n+                t == CKK_RC4 || t == CKK_BLOWFISH || t == CKK_CHACHA20 ||\n+                t == CKK_GENERIC_SECRET);\n+    }\n+\n+    private void checkDerivedKeyType(P11SecretKeyFactory.KeyInfo ki, String alg)\n+            throws InvalidAlgorithmParameterException {\n+        Class<?> kiClass = ki.getClass();\n+        if (!kiClass.equals(P11SecretKeyFactory.TLSKeyInfo.class) &&\n+                !(kiClass.equals(P11SecretKeyFactory.KeyInfo.class) &&\n+                        canDeriveKeyInfoType(ki.keyType))) {\n+            throw new InvalidAlgorithmParameterException(\"A key of algorithm \" +\n+                    \"'\" + alg + \"' is not valid for derivation.\");\n+        }\n+    }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":34,"deletions":9,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,3 +78,4 @@\n-        \/\/ No need to query for fix-length algorithms\n-        if (mech == CKM_DES_KEY_GEN || mech == CKM_DES2_KEY_GEN ||\n-            mech == CKM_DES3_KEY_GEN) {\n+        \/\/ No need to query if the mechanism is not available or for\n+        \/\/ fix-length algorithms\n+        if (mech == CK_UNAVAILABLE_INFORMATION || mech == CKM_DES_KEY_GEN ||\n+                mech == CKM_DES2_KEY_GEN || mech == CKM_DES3_KEY_GEN) {\n@@ -118,1 +119,1 @@\n-     * @param keySize the to-be-checked key size for this mechanism.\n+     * @param keySize the to-be-checked key size (in bits) for this mechanism.\n@@ -126,1 +127,1 @@\n-    \/\/ called by P11SecretKeyFactory to check key size\n+    \/\/ called by P11SecretKeyFactory and P11HKDF to check key size\n@@ -139,2 +140,2 @@\n-                    throw new InvalidAlgorithmParameterException\n-                            (\"DES key length must be 56 bits\");\n+                    throw new InvalidAlgorithmParameterException(\"DES key \" +\n+                            \"length was \" + keySize + \" but must be 56 bits\");\n@@ -151,2 +152,3 @@\n-                    throw new InvalidAlgorithmParameterException\n-                            (\"DESede key length must be 112, or 168 bits\");\n+                    throw new InvalidAlgorithmParameterException(\"DESede key \" +\n+                            \"length was \" + keySize + \" but must be 112, or \" +\n+                            \"168 bits\");\n@@ -157,5 +159,6 @@\n-                if (range != null && keySize < range.iMinKeySize\n-                    || keySize > range.iMaxKeySize) {\n-                    throw new InvalidAlgorithmParameterException\n-                        (\"Key length must be between \" + range.iMinKeySize +\n-                        \" and \" + range.iMaxKeySize + \" bits\");\n+                if (range != null && (keySize < range.iMinKeySize\n+                    || keySize > range.iMaxKeySize)) {\n+                    throw new InvalidAlgorithmParameterException(\"Key length \" +\n+                            \"was \" + keySize + \" but must be between \" +\n+                            range.iMinKeySize + \" and \" + range.iMaxKeySize +\n+                            \" bits\");\n@@ -166,2 +169,3 @@\n-                        throw new InvalidAlgorithmParameterException\n-                            (\"AES key length must be 128, 192, or 256 bits\");\n+                        throw new InvalidAlgorithmParameterException(\"AES key\" +\n+                                \" length was \" + keySize + \" but must be 128,\" +\n+                                \" 192, or 256 bits\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -106,1 +106,10 @@\n-    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo {\n+    \/*\n+     * The KeyInfo class represents information about a symmetric PKCS #11 key\n+     * type or about the output of a key-based computation (e.g. HMAC). A\n+     * KeyInfo instance may describe the key\/output itself, or the type of\n+     * key\/output that a service accepts\/produces. Used by P11SecretKeyFactory,\n+     * P11PBECipher, P11Mac, and P11HKDF.\n+     *\/\n+    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo,\n+            TLSKeyInfo {\n+        \/\/ Java Standard Algorithm Name.\n@@ -108,0 +117,2 @@\n+\n+        \/\/ Key type (CKK_*).\n@@ -110,0 +121,8 @@\n+        \/\/ Mechanism for C_GenerateKey to generate a key of this type (CKM_*).\n+        \/\/ While keys may be generated with other APIs and mechanisms (e.g. AES\n+        \/\/ key generated with C_DeriveKey and CKM_HKDF_DERIVE instead of\n+        \/\/ C_GenerateKey and CKM_AES_KEY_GEN), this information is used by\n+        \/\/ P11KeyGenerator::checkKeySize in a best-effort attempt to validate\n+        \/\/ that the key size is within a valid range (see CK_MECHANISM_INFO).\n+        public final long keyGenMech;\n+\n@@ -111,0 +130,4 @@\n+            this(algo, keyType, CK_UNAVAILABLE_INFORMATION);\n+        }\n+\n+        KeyInfo(String algo, long keyType, long keyGenMech) {\n@@ -113,0 +136,1 @@\n+            this.keyGenMech = keyGenMech;\n@@ -137,0 +161,15 @@\n+    \/*\n+     * KeyInfo specialization for keys that are either input or result of a TLS\n+     * key derivation. Keys of this type are typically handled by JSSE and their\n+     * algorithm name start with \"Tls\". Used by P11HKDF.\n+     *\/\n+    static final class TLSKeyInfo extends KeyInfo {\n+        TLSKeyInfo(String algo) {\n+            super(algo, CKK_GENERIC_SECRET);\n+        }\n+    }\n+\n+    \/*\n+     * KeyInfo specialization for outputs of a HMAC computation. Used by\n+     * P11SecretKeyFactory and P11Mac.\n+     *\/\n@@ -138,0 +177,1 @@\n+        \/\/ HMAC mechanism (CKM_*) to generate the output.\n@@ -139,0 +179,2 @@\n+\n+        \/\/ HMAC output length (in bits).\n@@ -148,0 +190,4 @@\n+    \/*\n+     * KeyInfo specialization for HKDF key derivation. Used by\n+     * P11SecretKeyFactory and P11HKDF.\n+     *\/\n@@ -160,0 +206,4 @@\n+    \/*\n+     * KeyInfo specialization for PBE key derivation. Used by\n+     * P11SecretKeyFactory, P11PBECipher and P11Mac.\n+     *\/\n@@ -207,8 +257,9 @@\n-        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"DES\", CKK_DES));\n-        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3));\n-        putKeyInfo(new KeyInfo(\"AES\", CKK_AES));\n-        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH));\n-        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20));\n-        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20));\n+        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DES\", CKK_DES, CKM_DES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3, CKM_DES3_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"AES\", CKK_AES, CKM_AES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH, CKM_BLOWFISH_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20, CKM_CHACHA20_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20,\n+                CKM_CHACHA20_KEY_GEN));\n@@ -218,7 +269,21 @@\n-        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2));\n-        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA));\n-\n-        putKeyInfo(new KeyInfo(\"TlsPremasterSecret\", PCKK_TLSPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsRsaPremasterSecret\", PCKK_TLSRSAPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsMasterSecret\", PCKK_TLSMASTER));\n-        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET));\n+        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2, CKM_RC2_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA, CKM_IDEA_KEY_GEN));\n+\n+        putKeyInfo(new TLSKeyInfo(\"TlsPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsRsaPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsBinderKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsEarlySecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsFinishedSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsHandshakeSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsResumptionMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsSaltSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsUpdateNplus1\"));\n+\n+        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET,\n+                CKM_GENERIC_SECRET_KEY_GEN));\n@@ -552,15 +617,14 @@\n-                case (int) CKK_DES -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                }\n-                case (int) CKK_DES3 -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES3_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                    fixDESParity(encoded, 8);\n-                    if (keyLength == 112) {\n-                        keyType = CKK_DES2;\n-                    } else {\n-                        keyType = CKK_DES3;\n-                        fixDESParity(encoded, 16);\n+                case (int) CKK_DES, (int) CKK_DES3, (int) CKK_AES, (int) CKK_RC4,\n+                        (int) CKK_BLOWFISH, (int) CKK_CHACHA20 -> {\n+                    keyLength = P11KeyGenerator.checkKeySize(ki.keyGenMech, n,\n+                            token);\n+                    if (keyType == CKK_DES || keyType == CKK_DES3) {\n+                        fixDESParity(encoded, 0);\n+                        if (keyType == CKK_DES3) {\n+                            fixDESParity(encoded, 8);\n+                            if (keyLength == 112) {\n+                                keyType = CKK_DES2;\n+                            } else {\n+                                fixDESParity(encoded, 16);\n+                            }\n+                        }\n@@ -569,11 +633,1 @@\n-                case (int) CKK_AES -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_AES_KEY_GEN, n, token);\n-                case (int) CKK_RC4 -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_RC4_KEY_GEN, n, token);\n-                case (int) CKK_BLOWFISH -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_BLOWFISH_KEY_GEN, n,\n-                                token);\n-                case (int) CKK_CHACHA20 -> keyLength = P11KeyGenerator.checkKeySize(\n-                        CKM_CHACHA20_KEY_GEN, n, token);\n-                case (int) CKK_GENERIC_SECRET, (int) PCKK_TLSPREMASTER, (int) PCKK_TLSRSAPREMASTER, (int) PCKK_TLSMASTER ->\n-                        keyType = CKK_GENERIC_SECRET;\n+                case (int) CKK_GENERIC_SECRET -> {}\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":96,"deletions":42,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -314,4 +314,0 @@\n-    public static final long  PCKK_TLSPREMASTER        = 0x7FFFFF25L;\n-    public static final long  PCKK_TLSRSAPREMASTER     = 0x7FFFFF26L;\n-    public static final long  PCKK_TLSMASTER           = 0x7FFFFF27L;\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11Constants.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -352,1 +352,1 @@\n-      print_debug(\"can't allocate memory for thread_info\\n\");\n+      print_error(\"can't allocate memory for thread_info\\n\");\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/libproc_impl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include <errno.h>\n@@ -70,1 +71,1 @@\n-    print_debug(\"can't allocate memory for map array\\n\");\n+    print_error(\"can't allocate memory for map array\\n\");\n@@ -192,1 +193,2 @@\n-   if((newthr = add_thread_info(ph, prstat->pr_pid)) == NULL)\n+   if((newthr = add_thread_info(ph, prstat->pr_pid)) == NULL) {\n+      print_error(\"failed to add thread info\\n\");\n@@ -194,0 +196,1 @@\n+   }\n@@ -259,1 +262,1 @@\n-      print_debug(\"failed to lseek to PT_NOTE data\\n\");\n+      print_error(\"failed to lseek to PT_NOTE data\\n\");\n@@ -266,1 +269,1 @@\n-      print_debug(\"can't allocate memory for reading core notes\\n\");\n+      print_error(\"can't allocate memory for reading core notes\\n\");\n@@ -272,1 +275,1 @@\n-      print_debug(\"failed to read notes, core file must have been truncated\\n\");\n+      print_error(\"failed to read notes, core file must have been truncated\\n\");\n@@ -285,0 +288,1 @@\n+          print_error(\"failed to handle NT_PRSTATUS note\\n\");\n@@ -317,1 +321,2 @@\n-   if ((phbuf =  read_program_header_table(ph->core->core_fd, core_ehdr)) == NULL)\n+   if ((phbuf = read_program_header_table(ph->core->core_fd, core_ehdr)) == NULL) {\n+      print_error(\"failed to read program header table\\n\");\n@@ -319,0 +324,1 @@\n+   }\n@@ -347,0 +353,1 @@\n+              print_error(\"failed to read note segment\\n\");\n@@ -354,1 +361,4 @@\n-                  core_php->p_vaddr, core_php->p_filesz, core_php->p_flags) == NULL) goto err;\n+                     core_php->p_vaddr, core_php->p_filesz, core_php->p_flags) == NULL) {\n+                  print_error(\"failed to add map info\\n\");\n+                  goto err;\n+               }\n@@ -379,0 +389,1 @@\n+    print_error(\"failed to read program header table\\n\");\n@@ -394,0 +405,1 @@\n+          print_error(\"failed to add map info\\n\");\n@@ -415,1 +427,1 @@\n-          print_debug(\"address conflict @ 0x%lx (existing map size = %ld, size = %ld, flags = %d)\\n\",\n+          print_error(\"address conflict @ 0x%lx (existing map size = %ld, size = %ld, flags = %d)\\n\",\n@@ -445,1 +457,1 @@\n-    print_debug(\"interpreter is not a valid ELF file\\n\");\n+    print_error(\"interpreter is not a valid ELF file\\n\");\n@@ -450,1 +462,1 @@\n-    print_debug(\"can't read segments of interpreter\\n\");\n+    print_error(\"can't read segments of interpreter\\n\");\n@@ -466,0 +478,1 @@\n+    print_error(\"failed to read program header table\\n\");\n@@ -476,1 +489,4 @@\n-        if (add_map_info(ph, ph->core->exec_fd, exec_php->p_offset, exec_php->p_vaddr, exec_php->p_filesz, exec_php->p_flags) == NULL) goto err;\n+        if (add_map_info(ph, ph->core->exec_fd, exec_php->p_offset, exec_php->p_vaddr, exec_php->p_filesz, exec_php->p_flags) == NULL) {\n+          print_error(\"failed to add map info\\n\");\n+          goto err;\n+        }\n@@ -487,0 +503,1 @@\n+        print_error(\"Invalid ELF interpreter info\\n\");\n@@ -491,1 +508,1 @@\n-        print_debug(\"Unable to read in the ELF interpreter\\n\");\n+        print_error(\"Unable to read in the ELF interpreter\\n\");\n@@ -498,1 +515,1 @@\n-        print_debug(\"can't open runtime loader\\n\");\n+        print_error(\"can't open runtime loader\\n\");\n@@ -558,1 +575,1 @@\n-    print_debug(\"can't read program header of shared object\\n\");\n+    print_error(\"can't read program header of shared object\\n\");\n@@ -574,1 +591,1 @@\n-    print_debug(\"can't read address of dynamic section in shared object\\n\");\n+    print_error(\"can't read address of dynamic section in shared object\\n\");\n@@ -610,1 +627,1 @@\n-      print_debug(\"can't read debug info from _DYNAMIC\\n\");\n+      print_error(\"can't read debug info from _DYNAMIC\\n\");\n@@ -621,1 +638,1 @@\n-    print_debug(\"can't read first link map address\\n\");\n+    print_error(\"can't read first link map address\\n\");\n@@ -628,1 +645,1 @@\n-    print_debug(\"can't read ld base address\\n\");\n+    print_error(\"can't read ld base address\\n\");\n@@ -637,0 +654,1 @@\n+      print_error(\"failed to read interp segments\\n\");\n@@ -642,0 +660,1 @@\n+    print_error(\"failed to sort segment map array\\n\");\n@@ -657,1 +676,1 @@\n-         print_debug(\"can't read shared object base address diff\\n\");\n+         print_error(\"can't read shared object base address diff\\n\");\n@@ -664,1 +683,1 @@\n-         print_debug(\"can't read address of shared object name\\n\");\n+         print_error(\"can't read address of shared object name\\n\");\n@@ -690,0 +709,1 @@\n+                   print_error(\"failed to calculate load address\\n\");\n@@ -699,1 +719,1 @@\n-                  print_debug(\"can't read shared object's segments\\n\");\n+                  print_error(\"can't read shared object's segments\\n\");\n@@ -706,1 +726,2 @@\n-               if (sort_map_array(ph) != true)\n+               if (sort_map_array(ph) != true) {\n+                  print_error(\"failed to sort segment map array\\n\");\n@@ -708,0 +729,1 @@\n+               }\n@@ -719,1 +741,1 @@\n-      print_debug(\"can't read next link in link_map\\n\");\n+      print_error(\"can't read next link in link_map\\n\");\n@@ -735,1 +757,1 @@\n-    print_debug(\"can't allocate ps_prochandle\\n\");\n+    print_error(\"can't allocate ps_prochandle\\n\");\n@@ -741,1 +763,1 @@\n-    print_debug(\"can't allocate ps_prochandle\\n\");\n+    print_error(\"can't allocate ps_prochandle\\n\");\n@@ -753,1 +775,1 @@\n-    print_debug(\"can't open core file\\n\");\n+    print_error(\"can't open core file: %s\\n\", strerror(errno));\n@@ -759,1 +781,1 @@\n-    print_debug(\"core file is not a valid ELF ET_CORE file\\n\");\n+    print_error(\"core file is not a valid ELF ET_CORE file\\n\");\n@@ -764,1 +786,1 @@\n-    print_debug(\"can't open executable file\\n\");\n+    print_error(\"can't open executable file: %s\\n\", strerror(errno));\n@@ -770,1 +792,1 @@\n-    print_debug(\"executable file is not a valid ELF file\\n\");\n+    print_error(\"executable file is not a valid ELF file\\n\");\n@@ -776,0 +798,1 @@\n+    print_error(\"failed to read core segments\\n\");\n@@ -782,0 +805,1 @@\n+    print_error(\"failed to read exec segments\\n\");\n@@ -786,0 +810,1 @@\n+    print_error(\"failed to add lib info\\n\");\n@@ -793,0 +818,1 @@\n+    print_error(\"failed to sort segment map array\\n\");\n@@ -797,0 +823,1 @@\n+    print_error(\"failed to read libraries\\n\");\n@@ -802,0 +829,1 @@\n+    print_error(\"failed to sort segment map array\\n\");\n@@ -806,0 +834,1 @@\n+    print_error(\"failed to workaround class sharing\\n\");\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_core.c","additions":59,"deletions":30,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -352,1 +352,1 @@\n-    print_debug(\"can't open \/proc\/%d\/maps file\\n\", ph->pid);\n+    print_error(\"can't open \/proc\/%d\/maps file\\n\", ph->pid);\n@@ -450,1 +450,1 @@\n-    print_debug(\"%s\\n\", err_buf);\n+    print_error(\"%s\\n\", err_buf);\n@@ -456,1 +456,2 @@\n-       print_error(\"The process with pid %d does not exist.\\n\", pid);\n+       snprintf(err_buf, err_buf_len, \"The process with pid %d does not exist.\", pid);\n+       print_error(\"%s\\n\", err_buf);\n@@ -464,1 +465,6 @@\n-  add_thread_info(ph, ph->pid);\n+  if (add_thread_info(ph, ph->pid) == NULL) {\n+    snprintf(err_buf, err_buf_len, \"failed to add thread info\");\n+    print_error(\"%s\\n\", err_buf);\n+    free(ph);\n+    return NULL;\n+  }\n@@ -472,1 +478,4 @@\n-  read_lib_info(ph);\n+  if (read_lib_info(ph) == false) {\n+    snprintf(err_buf, err_buf_len, \"failed to read lib info\");\n+    goto err;\n+  }\n@@ -494,1 +503,4 @@\n-      add_thread_info(ph, lwp_id);\n+      if (add_thread_info(ph, lwp_id) == NULL) {\n+        snprintf(err_buf, err_buf_len, \"failed to add thread info\");\n+        goto err;\n+      }\n@@ -513,2 +525,2 @@\n-          Prelease(ph);\n-          return NULL;\n+          snprintf(err_buf, err_buf_len, \"Failed to attach to the thread with lwp_id %d.\", current_thr->lwp_id);\n+          goto err;\n@@ -520,0 +532,4 @@\n+err:\n+  print_error(\"%s\\n\", err_buf);\n+  Prelease(ph);\n+  return NULL;\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_proc.c","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -326,1 +326,1 @@\n-    print_debug(\"can't allocate memory for thread_info\\n\");\n+    print_error(\"can't allocate memory for thread_info\\n\");\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/libproc_impl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    print_debug(\"can't allocate memory for map array\\n\");\n+    print_error(\"can't allocate memory for map array\\n\");\n@@ -283,0 +283,1 @@\n+     print_error(\"Failed to read program header table\\n\");\n@@ -290,0 +291,1 @@\n+      print_error(\"Failed to read command\\n\");\n@@ -297,1 +299,1 @@\n-        print_debug(\"failed to read LC_SEGMENT_64 i = %d!\\n\", i);\n+        print_error(\"failed to read LC_SEGMENT_64 i = %d!\\n\", i);\n@@ -304,1 +306,1 @@\n-          print_debug(\"Failed to add map_info at i = %d\\n\", i);\n+          print_error(\"Failed to add map_info at i = %d\\n\", i);\n@@ -321,1 +323,1 @@\n-          printf(\"Reading flavor, count failed.\\n\");\n+          print_error(\"Reading flavor, count failed.\\n\");\n@@ -329,1 +331,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -336,1 +338,1 @@\n-            printf(\"create thread_info failed\\n\");\n+            print_error(\"create thread_info failed\\n\");\n@@ -373,1 +375,1 @@\n-            print_debug(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -380,1 +382,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -390,1 +392,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -397,1 +399,1 @@\n-            printf(\"create thread_info failed\\n\");\n+            print_error(\"create thread_info failed\\n\");\n@@ -446,1 +448,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -453,1 +455,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -460,1 +462,1 @@\n-            printf(\"Reading flavor, count failed.\\n\");\n+            print_error(\"Reading flavor, count failed.\\n\");\n@@ -634,0 +636,1 @@\n+        print_error(\"Failed to file header\\n\");\n@@ -644,0 +647,1 @@\n+          print_error(\"Failed to read command\\n\");\n@@ -655,0 +659,1 @@\n+            print_error(\"Failed to read command\\n\");\n@@ -713,1 +718,1 @@\n-    print_debug(\"can't allocate ps_prochandle\\n\");\n+    print_error(\"can't allocate ps_prochandle\\n\");\n@@ -719,1 +724,1 @@\n-    print_debug(\"can't allocate ps_prochandle\\n\");\n+    print_error(\"can't allocate ps_prochandle\\n\");\n@@ -741,1 +746,1 @@\n-    print_debug(\"core file is not a valid Mach-O file\\n\");\n+    print_error(\"core file is not a valid Mach-O file\\n\");\n@@ -746,1 +751,1 @@\n-    print_error(\"can't open executable file\\n\");\n+    print_error(\"can't open executable file: %s\\n\", strerror(errno));\n@@ -782,1 +787,1 @@\n-    print_error(\"failed to workaround classshareing\\n\");\n+    print_error(\"failed to workaround class sharing\\n\");\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/ps_core.c","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    print_error(\"failed to allocate map\\n\");\n@@ -161,0 +162,1 @@\n+    print_debug(\"failed to allocate class share map\\n\");\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,12 @@\n+    \/**\n+     * The maximum length of an InstalledCode name. This name is typically installed into\n+     * the code cache so it should have a reasonable limit.\n+     *\/\n+    public static final int MAX_NAME_LENGTH = 2048;\n+\n+    \/**\n+     * @param name the name to be associated with the installed code. Can be null and\n+     *        must be no longer than {@link #MAX_NAME_LENGTH}.\n+     *\n+     * @throws IllegalArgumentException if {@code name.length >} {@link #MAX_NAME_LENGTH}\n+     *\/\n@@ -50,0 +62,5 @@\n+        if (name != null && name.length() > MAX_NAME_LENGTH) {\n+            String msg = String.format(\"name length (%d) is greater than %d (name[0:%s] = %s)\",\n+                                        name.length(), MAX_NAME_LENGTH, MAX_NAME_LENGTH, name.substring(0, MAX_NAME_LENGTH));\n+            throw new IllegalArgumentException(msg);\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/InstalledCode.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import java.util.Iterator;\n@@ -46,1 +45,0 @@\n-import java.util.NoSuchElementException;\n@@ -48,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -105,0 +104,4 @@\n+    protected void skipEntry(Throwable ex, String entryPath) {\n+        skippedEntries.add(String.format(\"%s: %s\", ex.toString(), entryPath));\n+    }\n+\n@@ -138,2 +141,9 @@\n-    public Iterable<ClassModel> getClassFiles() throws IOException {\n-        return FileIterator::new;\n+    public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+        if (baseFileName.endsWith(\".class\")) {\n+            \/\/ propagate ClassFileError for single file\n+            try {\n+                handler.accept(readClassFile(path));\n+            } catch (ClassFileError ex) {\n+                skipEntry(ex, path.toString());\n+            }\n+        }\n@@ -170,27 +180,0 @@\n-    class FileIterator implements Iterator<ClassModel> {\n-        int count;\n-        FileIterator() {\n-            this.count = 0;\n-        }\n-        public boolean hasNext() {\n-            return count == 0 && baseFileName.endsWith(\".class\");\n-        }\n-\n-        public ClassModel next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException();\n-            }\n-            try {\n-                ClassModel cf = readClassFile(path);\n-                count++;\n-                return cf;\n-            } catch (IOException e) {\n-                throw new ClassFileError(e);\n-            }\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n-        }\n-    }\n-\n@@ -244,36 +227,11 @@\n-        public Iterable<ClassModel> getClassFiles() throws IOException {\n-            final Iterator<ClassModel> iter = new DirectoryIterator();\n-            return () -> iter;\n-        }\n-\n-        class DirectoryIterator implements Iterator<ClassModel> {\n-            private final List<Path> entries;\n-            private int index = 0;\n-            DirectoryIterator() throws IOException {\n-                List<Path> paths = null;\n-                try (Stream<Path> stream = Files.walk(path, Integer.MAX_VALUE)) {\n-                    paths = stream.filter(ClassFileReader::isClass).toList();\n-\n-                }\n-                this.entries = paths;\n-                this.index = 0;\n-            }\n-\n-            public boolean hasNext() {\n-                return index != entries.size();\n-            }\n-\n-            public ClassModel next() {\n-                if (!hasNext()) {\n-                    throw new NoSuchElementException();\n-                }\n-                Path path = entries.get(index++);\n-                try {\n-                    return readClassFile(path);\n-                } catch (IOException e) {\n-                    throw new ClassFileError(e);\n-                }\n-            }\n-\n-            public void remove() {\n-                throw new UnsupportedOperationException(\"Not supported yet.\");\n+        @Override\n+        public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+            try (Stream<Path> stream = Files.walk(path, Integer.MAX_VALUE)) {\n+                stream.filter(ClassFileReader::isClass)\n+                      .forEach(e -> {\n+                          try {\n+                              handler.accept(readClassFile(e));\n+                          } catch (ClassFileError | IOException ex) {\n+                              skipEntry(ex, e.toString());\n+                          }\n+                      });\n@@ -317,0 +275,4 @@\n+        private static boolean isJarEntryClass(JarEntry e) {\n+            return e.getName().endsWith(\".class\");\n+        }\n+\n@@ -318,7 +280,4 @@\n-            try (JarFile jf = openJarFile(path.toFile(), version)) {\n-                return jf.versionedStream().map(JarEntry::getName)\n-                         .filter(n -> n.endsWith(\".class\"))\n-                         .collect(Collectors.toSet());\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+            return jarfile.versionedStream()\n+                          .filter(JarFileReader::isJarEntryClass)\n+                          .map(JarEntry::getName)\n+                          .collect(Collectors.toSet());\n@@ -361,70 +320,11 @@\n-        public Iterable<ClassModel> getClassFiles() throws IOException {\n-            final Iterator<ClassModel> iter = new JarFileIterator(this, jarfile);\n-            return () -> iter;\n-        }\n-    }\n-\n-    class JarFileIterator implements Iterator<ClassModel> {\n-        protected final JarFileReader reader;\n-        protected Iterator<JarEntry> entries;\n-        protected JarFile jf;\n-        protected JarEntry nextEntry;\n-        protected ClassModel cf;\n-        JarFileIterator(JarFileReader reader) {\n-            this(reader, null);\n-        }\n-        JarFileIterator(JarFileReader reader, JarFile jarfile) {\n-            this.reader = reader;\n-            setJarFile(jarfile);\n-        }\n-\n-        void setJarFile(JarFile jarfile) {\n-            if (jarfile == null) return;\n-\n-            this.jf = jarfile;\n-            this.entries = jarfile.versionedStream().iterator();\n-            this.nextEntry = nextEntry();\n-        }\n-\n-        public boolean hasNext() {\n-            if (nextEntry != null && cf != null) {\n-                return true;\n-            }\n-            while (nextEntry != null) {\n-                try {\n-                    cf = reader.readClassFile(jf, nextEntry);\n-                    return true;\n-                } catch (ClassFileError | IOException ex) {\n-                    skippedEntries.add(String.format(\"%s: %s (%s)\",\n-                                                     ex.getMessage(),\n-                                                     nextEntry.getName(),\n-                                                     jf.getName()));\n-                }\n-                nextEntry = nextEntry();\n-            }\n-            return false;\n-        }\n-\n-        public ClassModel next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException();\n-            }\n-            ClassModel classFile = cf;\n-            cf = null;\n-            nextEntry = nextEntry();\n-            return classFile;\n-        }\n-\n-        protected JarEntry nextEntry() {\n-            while (entries.hasNext()) {\n-                JarEntry e = entries.next();\n-                String name = e.getName();\n-                if (name.endsWith(\".class\")) {\n-                    return e;\n-                }\n-            }\n-            return null;\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n+        @Override\n+        public void forEachClassFile(Consumer<ClassModel> handler) throws IOException {\n+            jarfile.versionedStream()\n+                   .filter(JarFileReader::isJarEntryClass)\n+                   .forEach(e -> {\n+                       try {\n+                           handler.accept(readClassFile(jarfile, e));\n+                       } catch (ClassFileError | IOException ex) {\n+                           skipEntry(ex, e.getName() + \" (\" + jarfile.getName() + \")\");\n+                       }\n+                   });\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/ClassFileReader.java","additions":45,"deletions":145,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-            initCause(cause);\n+            super(cause.getMessage(), cause);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/Dependencies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,1 +176,1 @@\n-            for (var cf : archive.reader().getClassFiles()) {\n+            archive.reader().forEachClassFile(cf -> {\n@@ -178,1 +178,1 @@\n-                    continue;\n+                    return;\n@@ -190,1 +190,1 @@\n-                    continue;\n+                    return;\n@@ -194,1 +194,1 @@\n-                    continue;\n+                    return;\n@@ -206,1 +206,1 @@\n-            }\n+            });\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/DependencyFinder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal;\n+\n+import static jdk.jfr.internal.util.Bytecode.classDesc;\n+\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.lang.constant.ConstantDescs;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import jdk.jfr.Enabled;\n+import jdk.jfr.Name;\n+import jdk.jfr.Registered;\n+import jdk.jfr.SettingControl;\n+import jdk.jfr.SettingDefinition;\n+import jdk.jfr.internal.util.Bytecode;\n+import jdk.jfr.internal.util.ImplicitFields;\n+import jdk.jfr.internal.util.Bytecode.FieldDesc;\n+import jdk.jfr.internal.util.Bytecode.MethodDesc;\n+import jdk.jfr.internal.util.Bytecode.SettingDesc;\n+import jdk.jfr.internal.util.Utils;\n+\n+final class ClassInspector {\n+    private static final ClassDesc TYPE_SETTING_DEFINITION = Bytecode.classDesc(SettingDefinition.class);\n+    private static final ClassDesc ANNOTATION_REGISTERED = classDesc(Registered.class);\n+    private static final ClassDesc ANNOTATION_NAME = classDesc(Name.class);\n+    private static final ClassDesc ANNOTATION_ENABLED = classDesc(Enabled.class);\n+    private static final ClassDesc ANNOTATION_REMOVE_FIELDS = classDesc(RemoveFields.class);\n+\n+    private final ClassModel classModel;\n+    private final Class<?> superClass;\n+    private final boolean isJDK;\n+    private final ImplicitFields implicitFields;\n+    private final List<SettingDesc> settingsDescs = new ArrayList<>();\n+    private final List<FieldDesc> fieldDescs = new ArrayList<>();\n+    private final String className;\n+\n+    ClassInspector(Class<?> superClass, byte[] bytes, boolean isJDK) {\n+        this.superClass = superClass;\n+        this.classModel = ClassFile.of().parse(bytes);\n+        this.isJDK = isJDK;\n+        this.className = classModel.thisClass().asInternalName().replace(\"\/\", \".\");\n+        this.implicitFields = determineImplicitFields();\n+    }\n+\n+    String getClassName() {\n+        return className;\n+    }\n+\n+    MethodDesc findStaticCommitMethod() {\n+        if (!isJDK) {\n+            return null;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(\");\n+        for (FieldDesc field : fieldDescs) {\n+            sb.append(field.type().descriptorString());\n+        }\n+        sb.append(\")V\");\n+        MethodDesc m = MethodDesc.of(\"commit\", sb.toString());\n+        for (MethodModel method : classModel.methods()) {\n+            if (m.matches(method)) {\n+                return m;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    String getEventName() {\n+        String name = annotationValue(ANNOTATION_NAME, String.class);\n+        return name == null ? getClassName() : name;\n+    }\n+\n+    boolean isRegistered() {\n+        Boolean result = annotationValue(ANNOTATION_REGISTERED, Boolean.class);\n+        if (result != null) {\n+            return result.booleanValue();\n+        }\n+        if (superClass != null) {\n+            Registered r = superClass.getAnnotation(Registered.class);\n+            if (r != null) {\n+                return r.value();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    boolean isEnabled() {\n+        Boolean result = annotationValue(ANNOTATION_ENABLED, Boolean.class);\n+        if (result != null) {\n+            return result.booleanValue();\n+        }\n+        if (superClass != null) {\n+            Enabled e = superClass.getAnnotation(Enabled.class);\n+            if (e != null) {\n+                return e.value();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    boolean hasStaticMethod(MethodDesc method) {\n+        for (MethodModel m : classModel.methods()) {\n+            if (Modifier.isStatic(m.flags().flagsMask())) {\n+                return method.matches(m);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static boolean isValidField(int access, ClassDesc classDesc) {\n+        String className = classDesc.packageName();\n+        if (!className.isEmpty()) {\n+            className = className + \".\";\n+        }\n+        className += classDesc.displayName();\n+        return isValidField(access, className);\n+    }\n+\n+    static boolean isValidField(int access, String className) {\n+        if (Modifier.isTransient(access) || Modifier.isStatic(access)) {\n+            return false;\n+        }\n+        return Type.isValidJavaFieldType(className);\n+    }\n+\n+    List<SettingDesc> getSettings() {\n+        return settingsDescs;\n+    }\n+\n+    List<FieldDesc> getFields() {\n+        return fieldDescs;\n+    }\n+\n+    boolean hasDuration() {\n+        return implicitFields.hasDuration();\n+    }\n+\n+    boolean hasStackTrace() {\n+        return implicitFields.hasStackTrace();\n+    }\n+\n+    boolean hasEventThread() {\n+        return implicitFields.hasEventThread();\n+    }\n+\n+    ClassDesc getClassDesc() {\n+        return classModel.thisClass().asSymbol();\n+    }\n+\n+    ClassModel getClassModel() {\n+        return classModel;\n+    }\n+\n+    boolean isJDK() {\n+        return isJDK;\n+    }\n+\n+    private ImplicitFields determineImplicitFields() {\n+        if (isJDK) {\n+            Class<?> eventClass = MirrorEvents.find(isJDK, getClassName());\n+            if (eventClass != null) {\n+                return new ImplicitFields(eventClass);\n+            }\n+        }\n+        ImplicitFields ifs = new ImplicitFields(superClass);\n+        String[] value = annotationValue(ANNOTATION_REMOVE_FIELDS, String[].class);\n+        if (value != null) {\n+            ifs.removeFields(value);\n+        }\n+        return ifs;\n+    }\n+\n+    private List<AnnotationValue> getAnnotationValues(ClassDesc classDesc) {\n+        List<AnnotationValue> list = new ArrayList<>();\n+        for (Attribute<?> attribute: classModel.attributes()) {\n+            if (attribute instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n+                for (Annotation a : rvaa.annotations()) {\n+                    if (a.classSymbol().equals(classDesc) && a.elements().size() == 1) {\n+                        AnnotationElement ae = a.elements().getFirst();\n+                        if (ae.name().equalsString(\"value\")) {\n+                            list.add(ae.value());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return list;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    \/\/ Only supports String, String[] and Boolean values\n+    private <T> T annotationValue(ClassDesc classDesc, Class<T> type) {\n+        for (AnnotationValue a : getAnnotationValues(classDesc)) {\n+            if (a instanceof AnnotationValue.OfBoolean ofb && type.equals(Boolean.class)) {\n+                Boolean b = ofb.booleanValue();\n+                return (T) b;\n+            }\n+            if (a instanceof AnnotationValue.OfString ofs && type.equals(String.class)) {\n+                String s = ofs.stringValue();\n+                return (T) s;\n+            }\n+            if (a instanceof AnnotationValue.OfArray ofa && type.equals(String[].class)) {\n+                List<AnnotationValue> list = ofa.values();\n+                String[] array = new String[list.size()];\n+                int index = 0;\n+                for (AnnotationValue av : list) {\n+                    var avs = (AnnotationValue.OfString) av;\n+                    array[index++] = avs.stringValue();\n+                }\n+                return (T) array;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    void buildSettings() {\n+        Set<String> foundMethods = new HashSet<>();\n+        buildClassSettings(foundMethods);\n+        buildSuperClassSettings(foundMethods);\n+    }\n+\n+    private void buildClassSettings(Set<String> foundMethods) {\n+        for (MethodModel m : classModel.methods()) {\n+            for (Attribute<?> attribute : m.attributes()) {\n+                if (attribute instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n+                    for (Annotation a : rvaa.annotations()) {\n+                        \/\/ We can't really validate the method at this\n+                        \/\/ stage. We would need to check that the parameter\n+                        \/\/ is an instance of SettingControl.\n+                        if (a.classSymbol().equals(TYPE_SETTING_DEFINITION)) {\n+                            String name = m.methodName().stringValue();\n+                            \/\/ Use @Name if it exists\n+                            for (Annotation nameCandidate : rvaa.annotations()) {\n+                                if (nameCandidate.className().equalsString(ANNOTATION_NAME.descriptorString())) {\n+                                    if (nameCandidate.elements().size() == 1) {\n+                                        AnnotationElement ae = nameCandidate.elements().getFirst();\n+                                        if (ae.name().equalsString(\"value\")) {\n+                                            if (ae.value() instanceof AnnotationValue.OfString s) {\n+                                                name = Utils.validJavaIdentifier(s.stringValue(), name);\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            \/\/ Add setting if method returns boolean and has one parameter\n+                            MethodTypeDesc mtd = m.methodTypeSymbol();\n+                            if (ConstantDescs.CD_boolean.equals(mtd.returnType())) {\n+                                if (mtd.parameterList().size() == 1) {\n+                                    ClassDesc type = mtd.parameterList().getFirst();\n+                                    if (type.isClassOrInterface()) {\n+                                        String methodName = m.methodName().stringValue();\n+                                        foundMethods.add(methodName);\n+                                        settingsDescs.add(new SettingDesc(type, methodName));\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void buildSuperClassSettings(Set<String> foundMethods) {\n+        for (Class<?> c = superClass; jdk.internal.event.Event.class != c; c = c.getSuperclass()) {\n+            for (java.lang.reflect.Method method : c.getDeclaredMethods()) {\n+                if (!foundMethods.contains(method.getName())) {\n+                    buildSettingsMethod(foundMethods, method);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void buildSettingsMethod(Set<String> foundMethods, java.lang.reflect.Method method) {\n+        \/\/ Skip private methods in base classes\n+        if (!Modifier.isPrivate(method.getModifiers())) {\n+            if (method.getReturnType().equals(Boolean.TYPE)) {\n+                if (method.getParameterCount() == 1) {\n+                    Class<?> type = method.getParameters()[0].getType();\n+                    if (SettingControl.class.isAssignableFrom(type)) {\n+                        ClassDesc paramType = Bytecode.classDesc(type);\n+                        foundMethods.add(method.getName());\n+                        settingsDescs.add(new SettingDesc(paramType, method.getName()));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    void buildFields() {\n+        Set<String> foundFields = new HashSet<>();\n+        \/\/ These two fields are added by native as 'transient' so they will be\n+        \/\/ ignored by the loop below.\n+        \/\/ The benefit of adding them manually is that we can\n+        \/\/ control in which order they occur and we can add @Name, @Description\n+        \/\/ in Java, instead of in native. It also means code for adding implicit\n+        \/\/ fields for native can be reused by Java.\n+        fieldDescs.add(ImplicitFields.FIELD_START_TIME);\n+        if (implicitFields.hasDuration()) {\n+            fieldDescs.add(ImplicitFields.FIELD_DURATION);\n+        }\n+        for (FieldModel field : classModel.fields()) {\n+            if (!foundFields.contains(field.fieldName().stringValue()) && isValidField(field.flags().flagsMask(), field.fieldTypeSymbol())) {\n+                fieldDescs.add(FieldDesc.of(field.fieldTypeSymbol(), field.fieldName().stringValue()));\n+                foundFields.add(field.fieldName().stringValue());\n+            }\n+        }\n+        for (Class<?> c = superClass; jdk.internal.event.Event.class != c; c = c.getSuperclass()) {\n+            for (Field field : c.getDeclaredFields()) {\n+                \/\/ Skip private fields in base classes\n+                if (!Modifier.isPrivate(field.getModifiers())) {\n+                    if (isValidField(field.getModifiers(), field.getType().getName())) {\n+                        String fieldName = field.getName();\n+                        if (!foundFields.contains(fieldName)) {\n+                            fieldDescs.add(FieldDesc.of(field.getType(), fieldName));\n+                            foundFields.add(fieldName);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ClassInspector.java","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"},{"patch":"@@ -28,11 +28,5 @@\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import static jdk.jfr.internal.util.Bytecode.classDesc;\n+import static jdk.jfr.internal.util.Bytecode.getfield;\n+import static jdk.jfr.internal.util.Bytecode.invokestatic;\n+import static jdk.jfr.internal.util.Bytecode.invokevirtual;\n+import static jdk.jfr.internal.util.Bytecode.putfield;\n@@ -40,3 +34,1 @@\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.AnnotationElement;\n-import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.ClassBuilder;\n@@ -44,1 +36,0 @@\n-import java.lang.classfile.ClassModel;\n@@ -51,0 +42,1 @@\n+import java.lang.classfile.MethodTransform;\n@@ -52,4 +44,5 @@\n-import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.jfr.internal.event.EventConfiguration;\n-import jdk.jfr.internal.event.EventWriter;\n-import jdk.jfr.Enabled;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n@@ -57,2 +50,0 @@\n-import jdk.jfr.Name;\n-import jdk.jfr.Registered;\n@@ -60,2 +51,2 @@\n-import jdk.jfr.SettingDefinition;\n-import jdk.jfr.internal.util.Utils;\n+import jdk.jfr.internal.event.EventConfiguration;\n+import jdk.jfr.internal.event.EventWriter;\n@@ -63,1 +54,0 @@\n-import jdk.jfr.internal.util.ImplicitFields;\n@@ -66,5 +56,2 @@\n-import static jdk.jfr.internal.util.Bytecode.invokevirtual;\n-import static jdk.jfr.internal.util.Bytecode.invokestatic;\n-import static jdk.jfr.internal.util.Bytecode.getfield;\n-import static jdk.jfr.internal.util.Bytecode.putfield;\n-import static jdk.jfr.internal.util.Bytecode.classDesc;\n+import jdk.jfr.internal.util.Bytecode.SettingDesc;\n+import jdk.jfr.internal.util.ImplicitFields;\n@@ -77,0 +64,1 @@\n+    private static final FieldDesc FIELD_EVENT_CONFIGURATION = FieldDesc.of(Object.class, \"eventConfiguration\");\n@@ -78,10 +66,0 @@\n-    private record SettingDesc(ClassDesc paramType, String methodName) {\n-    }\n-\n-    private static final FieldDesc FIELD_DURATION = FieldDesc.of(long.class, ImplicitFields.DURATION);\n-    private static final FieldDesc FIELD_EVENT_CONFIGURATION = FieldDesc.of(Object.class, \"eventConfiguration\");;\n-    private static final FieldDesc FIELD_START_TIME = FieldDesc.of(long.class, ImplicitFields.START_TIME);\n-    private static final ClassDesc ANNOTATION_ENABLED = classDesc(Enabled.class);\n-    private static final ClassDesc ANNOTATION_NAME = classDesc(Name.class);\n-    private static final ClassDesc ANNOTATION_REGISTERED = classDesc(Registered.class);\n-    private static final ClassDesc ANNOTATION_REMOVE_FIELDS = classDesc(RemoveFields.class);\n@@ -89,1 +67,1 @@\n-    private static final ClassDesc TYPE_ISE = Bytecode.classDesc(IllegalStateException.class);\n+    private static final ClassDesc TYPE_ISE = classDesc(IllegalStateException.class);\n@@ -91,2 +69,2 @@\n-    private static final ClassDesc TYPE_OBJECT = Bytecode.classDesc(Object.class);\n-    private static final ClassDesc TYPE_SETTING_DEFINITION = Bytecode.classDesc(SettingDefinition.class);\n+    private static final ClassDesc TYPE_OBJECT = classDesc(Object.class);\n+\n@@ -107,8 +85,1 @@\n-    private final ClassModel classModel;\n-    private final List<SettingDesc> settingDescs;\n-    private final List<FieldDesc> fieldDescs;;\n-    private final String eventName;\n-    private final String className;\n-    private final Class<?> superClass;\n-    private final boolean untypedEventConfiguration;\n-    private final MethodDesc staticCommitMethod;\n+    private final ClassInspector inspector;\n@@ -116,0 +87,3 @@\n+    private final ClassDesc eventClassDesc;\n+    private final MethodDesc staticCommitMethod;\n+    private final boolean untypedEventConfiguration;\n@@ -117,3 +91,0 @@\n-    private final boolean isJDK;\n-    private final Map<MethodDesc, Consumer<CodeBuilder>> methodUpdates = new LinkedHashMap<>();\n-    private final ImplicitFields implicitFields;\n@@ -121,1 +92,16 @@\n-    EventInstrumentation(Class<?> superClass, byte[] bytes, long id, boolean isJDK, boolean guardEventConfiguration) {\n+    \/**\n+     * Creates an EventInstrumentation object.\n+     *\n+     * @param inspector               class inspector\n+     * @param id                      the event type ID to use\n+     * @param guardEventConfiguration guard against event configuration being null.\n+     *                                Needed when instrumentation is added before\n+     *                                registration (bytesForEagerInstrumentation)\n+     *\/\n+    EventInstrumentation(ClassInspector inspector, long id, boolean guardEventConfiguration) {\n+        inspector.buildFields();\n+        if (!inspector.isJDK()) {\n+            \/\/ Only user-defined events have custom settings.\n+            inspector.buildSettings();\n+        }\n+        this.inspector = inspector;\n@@ -123,16 +109,0 @@\n-        this.superClass = superClass;\n-        this.isJDK = isJDK;\n-        this.classModel = createClassModel(bytes);\n-        this.className = classModel.thisClass().asInternalName().replace(\"\/\", \".\");\n-        String name = annotationValue(classModel, ANNOTATION_NAME, String.class);\n-        this.eventName = name == null ? className : name;\n-        this.implicitFields = determineImplicitFields();\n-        this.settingDescs = buildSettingDescs(superClass, classModel);\n-        this.fieldDescs = buildFieldDescs(superClass, classModel);\n-        this.staticCommitMethod = isJDK ? findStaticCommitMethod(classModel, fieldDescs) : null;\n-        this.untypedEventConfiguration = hasUntypedConfiguration();\n-        \/\/ Corner case when we are forced to generate bytecode\n-        \/\/ (bytesForEagerInstrumentation)\n-        \/\/ We can't reference EventConfiguration::isEnabled() before event class has\n-        \/\/ been registered,\n-        \/\/ so we add a guard against a null reference.\n@@ -140,0 +110,3 @@\n+        this.eventClassDesc = inspector.getClassDesc();\n+        this.staticCommitMethod = inspector.findStaticCommitMethod();\n+        this.untypedEventConfiguration = hasUntypedConfiguration();\n@@ -142,13 +115,2 @@\n-    private ImplicitFields determineImplicitFields() {\n-        if (isJDK) {\n-            Class<?> eventClass = MirrorEvents.find(isJDK, className);\n-            if (eventClass != null) {\n-                return new ImplicitFields(eventClass);\n-            }\n-        }\n-        ImplicitFields ifs = new ImplicitFields(superClass);\n-        String[] value = annotationValue(classModel, ANNOTATION_REMOVE_FIELDS, String[].class);\n-        if (value != null) {\n-            ifs.removeFields(value);\n-        }\n-        return ifs;\n+    byte[] buildInstrumented() {\n+        return ClassFile.of().transformClass(inspector.getClassModel(), this::transform);\n@@ -157,13 +119,5 @@\n-    static MethodDesc findStaticCommitMethod(ClassModel classModel, List<FieldDesc> fields) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"(\");\n-        for (FieldDesc field : fields) {\n-            sb.append(field.type().descriptorString());\n-        }\n-        sb.append(\")V\");\n-        MethodDesc m = MethodDesc.of(\"commit\", sb.toString());\n-        for (MethodModel method : classModel.methods()) {\n-            String d = method.methodTypeSymbol().descriptorString();\n-            if (method.methodName().equalsString(\"commit\") && m.descriptor().descriptorString().equals(d)) {\n-                return m;\n-            }\n+    private void transform(ClassBuilder clb, ClassElement cle) {\n+        if (cle instanceof MethodModel method && instrumentable(method) instanceof Consumer<CodeBuilder> modification) {\n+            clb.transformMethod(method, MethodTransform.transformingCode((codeBuilder, _) -> modification.accept(codeBuilder)));\n+        } else {\n+            clb.with(cle);\n@@ -171,1 +125,0 @@\n-        return null;\n@@ -174,5 +127,3 @@\n-    private boolean hasUntypedConfiguration() {\n-        for (FieldModel f : classModel.fields()) {\n-            if (f.fieldName().equalsString(FIELD_EVENT_CONFIGURATION.name())) {\n-                return f.fieldType().equalsString(TYPE_OBJECT.descriptorString());\n-            }\n+    private Consumer<CodeBuilder> instrumentable(MethodModel method) {\n+        if (isMethod(method, METHOD_IS_ENABLED)) {\n+            return this::methodIsEnabled;\n@@ -180,15 +131,2 @@\n-        throw new InternalError(\"Class missing configuration field\");\n-    }\n-\n-    public String getClassName() {\n-        return classModel.thisClass().asInternalName().replace(\"\/\", \".\");\n-    }\n-\n-    private ClassModel createClassModel(byte[] bytes) {\n-        return ClassFile.of().parse(bytes);\n-    }\n-\n-    boolean isRegistered() {\n-        Boolean result = annotationValue(classModel, ANNOTATION_REGISTERED, Boolean.class);\n-        if (result != null) {\n-            return result.booleanValue();\n+        if (isMethod(method, METHOD_BEGIN)) {\n+            return this::methodBegin;\n@@ -196,5 +134,2 @@\n-        if (superClass != null) {\n-            Registered r = superClass.getAnnotation(Registered.class);\n-            if (r != null) {\n-                return r.value();\n-            }\n+        if (isMethod(method, METHOD_END)) {\n+            return this::methodEnd;\n@@ -202,7 +137,2 @@\n-        return true;\n-    }\n-\n-    boolean isEnabled() {\n-        Boolean result = annotationValue(classModel, ANNOTATION_ENABLED, Boolean.class);\n-        if (result != null) {\n-            return result.booleanValue();\n+        if (isMethod(method, METHOD_EVENT_SHOULD_COMMIT)) {\n+            return this::methodShouldCommit;\n@@ -210,5 +140,2 @@\n-        if (superClass != null) {\n-            Enabled e = superClass.getAnnotation(Enabled.class);\n-            if (e != null) {\n-                return e.value();\n-            }\n+        if (staticCommitMethod == null && isMethod(method, METHOD_COMMIT)) {\n+            return this::methodCommit;\n@@ -216,36 +143,3 @@\n-        return true;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    \/\/ Only supports String, String[] and Boolean values\n-    private static <T> T annotationValue(ClassModel classModel, ClassDesc classDesc, Class<T> type) {\n-        String typeDescriptor = classDesc.descriptorString();\n-        for (ClassElement ce : classModel) {\n-            if (ce instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n-                for (Annotation a : rvaa.annotations()) {\n-                    if (a.className().equalsString(typeDescriptor)) {\n-                        if (a.elements().size() == 1) {\n-                            AnnotationElement ae = a.elements().getFirst();\n-                            if (ae.name().equalsString(\"value\")) {\n-                                if (ae.value() instanceof AnnotationValue.OfBoolean ofb && type.equals(Boolean.class)) {\n-                                    Boolean b = ofb.booleanValue();\n-                                    return (T)b;\n-                                }\n-                                if (ae.value() instanceof AnnotationValue.OfString ofs && type.equals(String.class)) {\n-                                    String s = ofs.stringValue();\n-                                    return (T)s;\n-                                }\n-                                if (ae.value() instanceof AnnotationValue.OfArray ofa && type.equals(String[].class)) {\n-                                    List<AnnotationValue> list = ofa.values();\n-                                    String[] array = new String[list.size()];\n-                                    int index = 0;\n-                                    for (AnnotationValue av : list) {\n-                                        var avs = (AnnotationValue.OfString)av;\n-                                        array[index++] = avs.stringValue();\n-                                    }\n-                                    return (T)array;\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n+        if (inspector.isJDK() && isStatic(method)) {\n+            if (isMethod(method, METHOD_ENABLED)) {\n+                return this::methodEnabledStatic;\n@@ -253,44 +147,2 @@\n-        }\n-        return null;\n-    }\n-\n-    private static List<SettingDesc> buildSettingDescs(Class<?> superClass, ClassModel classModel) {\n-        Set<String> methodSet = new HashSet<>();\n-        List<SettingDesc> settingDescs = new ArrayList<>();\n-        for (MethodModel m : classModel.methods()) {\n-            for (var me : m) {\n-                if (me instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n-                    for (Annotation a : rvaa.annotations()) {\n-                        \/\/ We can't really validate the method at this\n-                        \/\/ stage. We would need to check that the parameter\n-                        \/\/ is an instance of SettingControl.\n-                        if (a.className().equalsString(TYPE_SETTING_DEFINITION.descriptorString())) {\n-                            String name = m.methodName().stringValue();\n-                            \/\/ Use @Name if it exists\n-                            for (Annotation nameCandidate : rvaa.annotations()) {\n-                                if (nameCandidate.className().equalsString(ANNOTATION_NAME.descriptorString())) {\n-                                    if (nameCandidate.elements().size() == 1) {\n-                                        AnnotationElement ae = nameCandidate.elements().getFirst();\n-                                        if (ae.name().equalsString(\"value\")) {\n-                                            if (ae.value() instanceof AnnotationValue.OfString s) {\n-                                                name = Utils.validJavaIdentifier(s.stringValue(), name);\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            \/\/ Add setting if method returns boolean and has one parameter\n-                            MethodTypeDesc mtd = m.methodTypeSymbol();\n-                            if (\"Z\".equals(mtd.returnType().descriptorString())) {\n-                                if (mtd.parameterList().size() == 1) {\n-                                    ClassDesc type = mtd.parameterList().getFirst();\n-                                    if (type.isClassOrInterface()) {\n-                                        String methodName = m.methodName().stringValue();\n-                                        methodSet.add(methodName);\n-                                        settingDescs.add(new SettingDesc(type, methodName));\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n+            if (isMethod(method, METHOD_SHOULD_COMMIT_LONG)) {\n+                return this::methodShouldCommitStatic;\n@@ -298,18 +150,5 @@\n-        }\n-        for (Class<?> c = superClass; jdk.internal.event.Event.class != c; c = c.getSuperclass()) {\n-            for (java.lang.reflect.Method method : c.getDeclaredMethods()) {\n-                if (!methodSet.contains(method.getName())) {\n-                    \/\/ skip private method in base classes\n-                    if (!Modifier.isPrivate(method.getModifiers())) {\n-                        if (method.getReturnType().equals(Boolean.TYPE)) {\n-                            if (method.getParameterCount() == 1) {\n-                                Class<?> type = method.getParameters()[0].getType();\n-                                if (SettingControl.class.isAssignableFrom(type)) {\n-                                    ClassDesc paramType = Bytecode.classDesc(type);\n-                                    methodSet.add(method.getName());\n-                                    settingDescs.add(new SettingDesc(paramType, method.getName()));\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n+            if (isMethod(method, METHOD_TIME_STAMP)) {\n+                return this::methodTimestamp;\n+            }\n+            if (staticCommitMethod != null && isMethod(method, staticCommitMethod)) {\n+                return this::methodCommit;\n@@ -318,1 +157,1 @@\n-        return settingDescs;\n+        return null;\n@@ -321,19 +160,5 @@\n-    private List<FieldDesc> buildFieldDescs(Class<?> superClass, ClassModel classModel) {\n-        Set<String> fieldSet = new HashSet<>();\n-        List<FieldDesc> fieldDescs = new ArrayList<>(classModel.fields().size());\n-        \/\/ These two fields are added by native as 'transient' so they will be\n-        \/\/ ignored by the loop below.\n-        \/\/ The benefit of adding them manually is that we can\n-        \/\/ control in which order they occur and we can add @Name, @Description\n-        \/\/ in Java, instead of in native. It also means code for adding implicit\n-        \/\/ fields for native can be reused by Java.\n-        fieldDescs.add(FIELD_START_TIME);\n-        if (implicitFields.hasDuration()) {\n-            fieldDescs.add(FIELD_DURATION);\n-        }\n-        for (FieldModel field : classModel.fields()) {\n-            if (!fieldSet.contains(field.fieldName().stringValue()) && isValidField(field.flags().flagsMask(), field.fieldTypeSymbol())) {\n-                FieldDesc fi = FieldDesc.of(field.fieldTypeSymbol(), field.fieldName().stringValue());\n-                fieldDescs.add(fi);\n-                fieldSet.add(field.fieldName().stringValue());\n-            }\n+    private void methodIsEnabled(CodeBuilder codeBuilder) {\n+        Label nullLabel = codeBuilder.newLabel();\n+        if (guardEventConfiguration) {\n+            getEventConfiguration(codeBuilder);\n+            codeBuilder.ifnull(nullLabel);\n@@ -341,13 +166,7 @@\n-        for (Class<?> c = superClass; jdk.internal.event.Event.class != c; c = c.getSuperclass()) {\n-            for (Field field : c.getDeclaredFields()) {\n-                \/\/ skip private field in base classes\n-                if (!Modifier.isPrivate(field.getModifiers())) {\n-                    if (isValidField(field.getModifiers(), field.getType().getName())) {\n-                        String fieldName = field.getName();\n-                        if (!fieldSet.contains(fieldName)) {\n-                            fieldDescs.add(FieldDesc.of(field.getType(), fieldName));\n-                            fieldSet.add(fieldName);\n-                        }\n-                    }\n-                }\n-            }\n+        getEventConfiguration(codeBuilder);\n+        invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_IS_ENABLED);\n+        codeBuilder.ireturn();\n+        if (guardEventConfiguration) {\n+            codeBuilder.labelBinding(nullLabel);\n+            codeBuilder.iconst_0();\n+            codeBuilder.ireturn();\n@@ -355,1 +174,0 @@\n-        return fieldDescs;\n@@ -358,4 +176,8 @@\n-    public static boolean isValidField(int access, ClassDesc classDesc) {\n-        String className = classDesc.packageName();\n-        if (!className.isEmpty()) {\n-            className = className + \".\";\n+    private void methodBegin(CodeBuilder codeBuilder) {\n+        if (!inspector.hasDuration()) {\n+            throwMissingDuration(codeBuilder, \"begin\");\n+        } else {\n+            codeBuilder.aload(0);\n+            invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n+            putfield(codeBuilder, eventClassDesc, ImplicitFields.FIELD_START_TIME);\n+            codeBuilder.return_();\n@@ -363,2 +185,0 @@\n-        className += classDesc.displayName();\n-        return isValidField(access, className);\n@@ -367,3 +187,10 @@\n-    public static boolean isValidField(int access, String className) {\n-        if (Modifier.isTransient(access) || Modifier.isStatic(access)) {\n-            return false;\n+    private void methodEnd(CodeBuilder codeBuilder) {\n+        if (!inspector.hasDuration()) {\n+            throwMissingDuration(codeBuilder, \"end\");\n+        } else {\n+            codeBuilder.aload(0);\n+            codeBuilder.aload(0);\n+            getfield(codeBuilder, eventClassDesc, ImplicitFields.FIELD_START_TIME);\n+            invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_DURATION);\n+            putfield(codeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n+            codeBuilder.return_();\n@@ -371,6 +198,0 @@\n-        return Type.isValidJavaFieldType(className);\n-    }\n-\n-    public byte[] buildInstrumented() {\n-        makeInstrumented();\n-        return toByteArray();\n@@ -379,50 +200,40 @@\n-    byte[] toByteArray() {\n-        return ClassFile.of().build(classModel.thisClass().asSymbol(), classBuilder -> {\n-            for (ClassElement ce : classModel) {\n-                boolean updated = false;\n-                if (ce instanceof MethodModel method) {\n-                    Consumer<CodeBuilder> methodUpdate = findMethodUpdate(method);\n-                    if (methodUpdate != null) {\n-                        classBuilder.withMethod(method.methodName().stringValue(), method.methodTypeSymbol(), method.flags().flagsMask(), methodBuilder -> {\n-                            methodBuilder.withCode(methodUpdate);\n-                        });\n-                        updated = true;\n-                    }\n-                }\n-                if (!updated) {\n-                    classBuilder.with(ce);\n-                }\n-            }\n-        });\n-    }\n-\n-    public byte[] buildUninstrumented() {\n-        makeUninstrumented();\n-        return toByteArray();\n-    }\n-\n-    private void throwMissingDuration(CodeBuilder codeBuilder, String method) {\n-        String message = \"Cannot use method \" + method + \" when event lacks duration field\";\n-        Bytecode.throwException(codeBuilder, TYPE_ISE, message);\n-    }\n-\n-    private void makeInstrumented() {\n-        \/\/ MyEvent#isEnabled()\n-        updateEnabledMethod(METHOD_IS_ENABLED);\n-\n-        \/\/ MyEvent#begin()\n-        updateMethod(METHOD_BEGIN, codeBuilder -> {\n-            if (!implicitFields.hasDuration()) {\n-                throwMissingDuration(codeBuilder, \"begin\");\n-            } else {\n-                codeBuilder.aload(0);\n-                invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n-                putfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n-                codeBuilder.return_();\n-            }\n-        });\n-\n-        \/\/ MyEvent#end()\n-        updateMethod(METHOD_END, codeBuilder -> {\n-            if (!implicitFields.hasDuration()) {\n-                throwMissingDuration(codeBuilder, \"end\");\n+    private void methodShouldCommit(CodeBuilder codeBuilder) {\n+        Label fail = codeBuilder.newLabel();\n+        if (guardEventConfiguration) {\n+            getEventConfiguration(codeBuilder);\n+            codeBuilder.ifnull(fail);\n+        }\n+        \/\/ if (!eventConfiguration.shouldCommit(duration) goto fail;\n+        getEventConfiguration(codeBuilder);\n+        codeBuilder.aload(0);\n+        getfield(codeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n+        invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT);\n+        codeBuilder.ifeq(fail);\n+        List<SettingDesc> settingDescs = inspector.getSettings();\n+        for (int index = 0; index < settingDescs.size(); index++) {\n+            SettingDesc sd = settingDescs.get(index);\n+            \/\/ if (!settingsMethod(eventConfiguration.settingX)) goto fail;\n+            codeBuilder.aload(0);\n+            getEventConfiguration(codeBuilder);\n+            codeBuilder.loadConstant(index);\n+            invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_GET_SETTING);\n+            MethodTypeDesc mdesc = MethodTypeDesc.ofDescriptor(\"(\" + sd.paramType().descriptorString() + \")Z\");\n+            codeBuilder.checkcast(sd.paramType());\n+            codeBuilder.invokevirtual(eventClassDesc, sd.methodName(), mdesc);\n+            codeBuilder.ifeq(fail);\n+        }\n+        \/\/ return true\n+        codeBuilder.iconst_1();\n+        codeBuilder.ireturn();\n+        \/\/ return false\n+        codeBuilder.labelBinding(fail);\n+        codeBuilder.iconst_0();\n+        codeBuilder.ireturn();\n+    }\n+\n+    private void methodCommit(CodeBuilder codeBuilder) {\n+        Label excluded = codeBuilder.newLabel();\n+        Label end = codeBuilder.newLabel();\n+        codeBuilder.trying(blockCodeBuilder -> {\n+            if (staticCommitMethod != null) {\n+                updateStaticCommit(blockCodeBuilder, excluded);\n@@ -430,6 +241,1 @@\n-                codeBuilder.aload(0);\n-                codeBuilder.aload(0);\n-                getfield(codeBuilder, getEventClassDesc(), FIELD_START_TIME);\n-                invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_DURATION);\n-                putfield(codeBuilder, getEventClassDesc(), FIELD_DURATION);\n-                codeBuilder.return_();\n+                updateInstanceCommit(blockCodeBuilder, end, excluded);\n@@ -437,41 +243,3 @@\n-        });\n-\n-        \/\/ MyEvent#commit() or static MyEvent#commit(...)\n-        MethodDesc m = staticCommitMethod == null ? METHOD_COMMIT : staticCommitMethod;\n-        updateMethod(m, codeBuilder -> {\n-            Label excluded = codeBuilder.newLabel();\n-            Label end = codeBuilder.newLabel();\n-            codeBuilder.trying(blockCodeBuilder -> {\n-                if (staticCommitMethod != null) {\n-                    updateStaticCommit(blockCodeBuilder, excluded);\n-                } else {\n-                    updateInstanceCommit(blockCodeBuilder, end, excluded);\n-                }\n-                \/\/ stack: [integer]\n-                \/\/ notified -> restart event write attempt\n-                blockCodeBuilder.ifeq(blockCodeBuilder.startLabel());\n-                \/\/ stack: []\n-                blockCodeBuilder.goto_(end);\n-            }, catchBuilder -> {\n-                catchBuilder.catchingAll(catchAllHandler -> {\n-                    getEventWriter(catchAllHandler);\n-                    \/\/ stack: [ex] [EW]\n-                    catchAllHandler.dup();\n-                    \/\/ stack: [ex] [EW] [EW]\n-                    Label rethrow = catchAllHandler.newLabel();\n-                    catchAllHandler.ifnull(rethrow);\n-                    \/\/ stack: [ex] [EW]\n-                    catchAllHandler.dup();\n-                    \/\/ stack: [ex] [EW] [EW]\n-                    invokevirtual(catchAllHandler, TYPE_EVENT_WRITER, METHOD_RESET);\n-                    catchAllHandler.labelBinding(rethrow);\n-                    \/\/ stack:[ex] [EW]\n-                    catchAllHandler.pop();\n-                    \/\/ stack:[ex]\n-                    catchAllHandler.athrow();\n-                });\n-            });\n-            codeBuilder.labelBinding(excluded);\n-            \/\/ stack: [EW]\n-            codeBuilder.pop();\n-            codeBuilder.labelBinding(end);\n+            \/\/ stack: [integer]\n+            \/\/ notified -> restart event write attempt\n+            blockCodeBuilder.ifeq(blockCodeBuilder.startLabel());\n@@ -479,1 +247,19 @@\n-            codeBuilder.return_();\n+            blockCodeBuilder.goto_(end);\n+        }, catchBuilder -> {\n+            catchBuilder.catchingAll(catchAllHandler -> {\n+                getEventWriter(catchAllHandler);\n+                \/\/ stack: [ex] [EW]\n+                catchAllHandler.dup();\n+                \/\/ stack: [ex] [EW] [EW]\n+                Label rethrow = catchAllHandler.newLabel();\n+                catchAllHandler.ifnull(rethrow);\n+                \/\/ stack: [ex] [EW]\n+                catchAllHandler.dup();\n+                \/\/ stack: [ex] [EW] [EW]\n+                invokevirtual(catchAllHandler, TYPE_EVENT_WRITER, METHOD_RESET);\n+                catchAllHandler.labelBinding(rethrow);\n+                \/\/ stack:[ex] [EW]\n+                catchAllHandler.pop();\n+                \/\/ stack:[ex]\n+                catchAllHandler.athrow();\n+            });\n@@ -481,0 +267,7 @@\n+        codeBuilder.labelBinding(excluded);\n+        \/\/ stack: [EW]\n+        codeBuilder.pop();\n+        codeBuilder.labelBinding(end);\n+        \/\/ stack: []\n+        codeBuilder.return_();\n+    }\n@@ -482,8 +275,3 @@\n-        \/\/ MyEvent#shouldCommit()\n-        updateMethod(METHOD_EVENT_SHOULD_COMMIT, codeBuilder -> {\n-            Label fail = codeBuilder.newLabel();\n-            if (guardEventConfiguration) {\n-                getEventConfiguration(codeBuilder);\n-                codeBuilder.ifnull(fail);\n-            }\n-            \/\/ if (!eventConfiguration.shouldCommit(duration) goto fail;\n+    private void methodEnabledStatic(CodeBuilder codeBuilder) {\n+        Label nullLabel = codeBuilder.newLabel();\n+        if (guardEventConfiguration) {\n@@ -491,21 +279,7 @@\n-            codeBuilder.aload(0);\n-            getfield(codeBuilder, getEventClassDesc(), FIELD_DURATION);\n-            invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT);\n-            codeBuilder.ifeq(fail);\n-            for (int index = 0; index < settingDescs.size(); index++) {\n-                SettingDesc sd = settingDescs.get(index);\n-                \/\/ if (!settingsMethod(eventConfiguration.settingX)) goto fail;\n-                codeBuilder.aload(0);\n-                getEventConfiguration(codeBuilder);\n-                codeBuilder.loadConstant(index);\n-                invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_GET_SETTING);\n-                MethodTypeDesc mdesc = MethodTypeDesc.ofDescriptor(\"(\" + sd.paramType().descriptorString() + \")Z\");\n-                codeBuilder.checkcast(sd.paramType());\n-                codeBuilder.invokevirtual(getEventClassDesc(), sd.methodName(), mdesc);\n-                codeBuilder.ifeq(fail);\n-            }\n-            \/\/ return true\n-            codeBuilder.iconst_1();\n-            codeBuilder.ireturn();\n-            \/\/ return false\n-            codeBuilder.labelBinding(fail);\n+            codeBuilder.ifnull(nullLabel);\n+        }\n+        getEventConfiguration(codeBuilder);\n+        invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_IS_ENABLED);\n+        codeBuilder.ireturn();\n+        if (guardEventConfiguration) {\n+            codeBuilder.labelBinding(nullLabel);\n@@ -514,1 +288,2 @@\n-        });\n+        }\n+    }\n@@ -516,4 +291,4 @@\n-        if (isJDK) {\n-            if (hasStaticMethod(METHOD_ENABLED)) {\n-                updateEnabledMethod(METHOD_ENABLED);\n-            }\n+    private void methodTimestamp(CodeBuilder codeBuilder) {\n+        invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n+        codeBuilder.lreturn();\n+    }\n@@ -521,22 +296,6 @@\n-            updateIfStaticMethodExists(METHOD_SHOULD_COMMIT_LONG, codeBuilder -> {\n-                Label fail = codeBuilder.newLabel();\n-                if (guardEventConfiguration) {\n-                    \/\/ if (eventConfiguration == null) goto fail;\n-                    getEventConfiguration(codeBuilder);\n-                    codeBuilder.ifnull(fail);\n-                }\n-                \/\/ return eventConfiguration.shouldCommit(duration);\n-                getEventConfiguration(codeBuilder);\n-                codeBuilder.lload(0);\n-                codeBuilder.invokevirtual(TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT.name(), METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT.descriptor());\n-                codeBuilder.ireturn();\n-                \/\/ fail:\n-                codeBuilder.labelBinding(fail);\n-                \/\/ return false\n-                codeBuilder.iconst_0();\n-                codeBuilder.ireturn();\n-            });\n-            updateIfStaticMethodExists(METHOD_TIME_STAMP, codeBuilder -> {\n-                invokestatic(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_TIME_STAMP);\n-                codeBuilder.lreturn();\n-            });\n+    private void methodShouldCommitStatic(CodeBuilder codeBuilder) {\n+        Label fail = codeBuilder.newLabel();\n+        if (guardEventConfiguration) {\n+            \/\/ if (eventConfiguration == null) goto fail;\n+            getEventConfiguration(codeBuilder);\n+            codeBuilder.ifnull(fail);\n@@ -544,0 +303,15 @@\n+        \/\/ return eventConfiguration.shouldCommit(duration);\n+        getEventConfiguration(codeBuilder);\n+        codeBuilder.lload(0);\n+        codeBuilder.invokevirtual(TYPE_EVENT_CONFIGURATION, METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT.name(), METHOD_EVENT_CONFIGURATION_SHOULD_COMMIT.descriptor());\n+        codeBuilder.ireturn();\n+        \/\/ fail:\n+        codeBuilder.labelBinding(fail);\n+        \/\/ return false\n+        codeBuilder.iconst_0();\n+        codeBuilder.ireturn();\n+    }\n+\n+    private void throwMissingDuration(CodeBuilder codeBuilder, String method) {\n+        String message = \"Cannot use method \" + method + \" when event lacks duration field\";\n+        Bytecode.throwException(codeBuilder, TYPE_ISE, message);\n@@ -546,1 +320,1 @@\n-    void updateStaticCommit(BlockCodeBuilder blockCodeBuilder, Label excluded) {\n+    private void updateStaticCommit(BlockCodeBuilder blockCodeBuilder, Label excluded) {\n@@ -579,1 +353,1 @@\n-        if (implicitFields.hasDuration()) {\n+        if (inspector.hasDuration()) {\n@@ -591,1 +365,1 @@\n-        if (implicitFields.hasEventThread()) {\n+        if (inspector.hasEventThread()) {\n@@ -598,1 +372,1 @@\n-        if (implicitFields.hasStackTrace()) {\n+        if (inspector.hasStackTrace()) {\n@@ -606,0 +380,1 @@\n+        List<FieldDesc> fieldDescs = inspector.getFields();\n@@ -625,1 +400,1 @@\n-    void updateInstanceCommit(BlockCodeBuilder blockCodeBuilder, Label end, Label excluded) {\n+    private void updateInstanceCommit(BlockCodeBuilder blockCodeBuilder, Label end, Label excluded) {\n@@ -630,1 +405,1 @@\n-        invokevirtual(blockCodeBuilder, getEventClassDesc(), METHOD_IS_ENABLED);\n+        invokevirtual(blockCodeBuilder, eventClassDesc, METHOD_IS_ENABLED);\n@@ -637,1 +412,1 @@\n-        getfield(blockCodeBuilder, getEventClassDesc(), FIELD_START_TIME);\n+        getfield(blockCodeBuilder, eventClassDesc, ImplicitFields.FIELD_START_TIME);\n@@ -657,1 +432,1 @@\n-        getfield(blockCodeBuilder, getEventClassDesc(), FIELD_DURATION);\n+        getfield(blockCodeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n@@ -665,1 +440,1 @@\n-        putfield(blockCodeBuilder, getEventClassDesc(), FIELD_DURATION);\n+        putfield(blockCodeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n@@ -669,1 +444,1 @@\n-        invokevirtual(blockCodeBuilder, getEventClassDesc(), METHOD_EVENT_SHOULD_COMMIT);\n+        invokevirtual(blockCodeBuilder, eventClassDesc, METHOD_EVENT_SHOULD_COMMIT);\n@@ -690,1 +465,1 @@\n-        if (implicitFields.hasDuration()) {\n+        if (inspector.hasDuration()) {\n@@ -696,1 +471,1 @@\n-            getfield(blockCodeBuilder, getEventClassDesc(), FIELD_DURATION);\n+            getfield(blockCodeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n@@ -702,1 +477,1 @@\n-        if (implicitFields.hasEventThread()) {\n+        if (inspector.hasEventThread()) {\n@@ -709,1 +484,1 @@\n-        if (implicitFields.hasStackTrace()) {\n+        if (inspector.hasStackTrace()) {\n@@ -716,0 +491,1 @@\n+        List<FieldDesc> fieldDescs = inspector.getFields();\n@@ -722,1 +498,1 @@\n-            getfield(blockCodeBuilder, getEventClassDesc(), field);\n+            getfield(blockCodeBuilder, eventClassDesc, field);\n@@ -734,22 +510,2 @@\n-    private void updateEnabledMethod(MethodDesc method) {\n-        updateMethod(method, codeBuilder -> {\n-            Label nullLabel = codeBuilder.newLabel();\n-            if (guardEventConfiguration) {\n-                getEventConfiguration(codeBuilder);\n-                codeBuilder.ifnull(nullLabel);\n-            }\n-            getEventConfiguration(codeBuilder);\n-            invokevirtual(codeBuilder, TYPE_EVENT_CONFIGURATION, METHOD_IS_ENABLED);\n-            codeBuilder.ireturn();\n-            if (guardEventConfiguration) {\n-                codeBuilder.labelBinding(nullLabel);\n-                codeBuilder.iconst_0();\n-                codeBuilder.ireturn();\n-            }\n-        });\n-    }\n-\n-    private void updateIfStaticMethodExists(MethodDesc method, Consumer<CodeBuilder> code) {\n-        if (hasStaticMethod(method)) {\n-            updateMethod(method, code);\n-        }\n+    private static boolean isStatic(MethodModel method) {\n+        return (method.flags().flagsMask() & ClassFile.ACC_STATIC) != 0;\n@@ -758,7 +514,2 @@\n-    private boolean hasStaticMethod(MethodDesc method) {\n-        for (MethodModel m : classModel.methods()) {\n-            if (m.methodName().equalsString(method.name()) && m.methodTypeSymbol().equals(method.descriptor())) {\n-                return Modifier.isStatic(m.flags().flagsMask());\n-            }\n-        }\n-        return false;\n+    private static boolean isMethod(MethodModel m, MethodDesc desc) {\n+        return desc.matches(m);\n@@ -767,1 +518,1 @@\n-    private void getEventWriter(CodeBuilder codeBuilder) {\n+    private static void getEventWriter(CodeBuilder codeBuilder) {\n@@ -773,1 +524,1 @@\n-            codeBuilder.getstatic(getEventClassDesc(), FIELD_EVENT_CONFIGURATION.name(), TYPE_OBJECT);\n+            codeBuilder.getstatic(eventClassDesc, FIELD_EVENT_CONFIGURATION.name(), TYPE_OBJECT);\n@@ -776,1 +527,1 @@\n-            codeBuilder.getstatic(getEventClassDesc(), FIELD_EVENT_CONFIGURATION.name(), TYPE_EVENT_CONFIGURATION);\n+            codeBuilder.getstatic(eventClassDesc, FIELD_EVENT_CONFIGURATION.name(), TYPE_EVENT_CONFIGURATION);\n@@ -780,6 +531,5 @@\n-    private void makeUninstrumented() {\n-        updateExistingWithReturnFalse(METHOD_EVENT_SHOULD_COMMIT);\n-        updateExistingWithReturnFalse(METHOD_IS_ENABLED);\n-        updateExistingWithEmptyVoidMethod(METHOD_COMMIT);\n-        if (staticCommitMethod != null) {\n-            updateExistingWithEmptyVoidMethod(staticCommitMethod);\n+    private boolean hasUntypedConfiguration() {\n+        for (FieldModel f : inspector.getClassModel().fields()) {\n+            if (f.fieldName().equalsString(FIELD_EVENT_CONFIGURATION.name())) {\n+                return f.fieldType().equalsString(TYPE_OBJECT.descriptorString());\n+            }\n@@ -787,32 +537,1 @@\n-        updateExistingWithEmptyVoidMethod(METHOD_BEGIN);\n-        updateExistingWithEmptyVoidMethod(METHOD_END);\n-    }\n-\n-    private final void updateExistingWithEmptyVoidMethod(MethodDesc voidMethod) {\n-        updateMethod(voidMethod, codeBuilder -> {\n-            codeBuilder.return_();\n-        });\n-    }\n-\n-    private final void updateExistingWithReturnFalse(MethodDesc voidMethod) {\n-        updateMethod(voidMethod, codeBuilder -> {\n-            codeBuilder.iconst_0();\n-            codeBuilder.ireturn();\n-        });\n-    }\n-\n-    private Consumer<CodeBuilder> findMethodUpdate(MethodModel mm) {\n-        MethodDesc m = MethodDesc.of(mm.methodName().stringValue(), mm.methodType().stringValue());\n-        return methodUpdates.get(m);\n-    }\n-\n-    private void updateMethod(MethodDesc method, Consumer<CodeBuilder> codeBuilder) {\n-        methodUpdates.put(method, codeBuilder);\n-    }\n-\n-    private ClassDesc getEventClassDesc() {\n-        return classModel.thisClass().asSymbol();\n-    }\n-\n-    public String getEventName() {\n-        return eventName;\n+        throw new InternalError(\"Class missing configuration field\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":239,"deletions":520,"binary":false,"changes":759,"status":"modified"},{"patch":"@@ -75,1 +75,2 @@\n-                EventInstrumentation ei = new EventInstrumentation(clazz.getSuperclass(), oldBytes, traceId, jdkClass, false);\n+                ClassInspector c = new ClassInspector(clazz.getSuperclass(), oldBytes, jdkClass);\n+                EventInstrumentation ei = new EventInstrumentation(c, traceId, false);\n@@ -108,3 +109,3 @@\n-            EventInstrumentation ei = new EventInstrumentation(superClass, oldBytes, traceId, bootClassLoader, true);\n-            eventName = ei.getEventName();\n-            if (!JVMSupport.shouldInstrument(bootClassLoader,  ei.getEventName())) {\n+            ClassInspector c = new ClassInspector(superClass, oldBytes, bootClassLoader);\n+            eventName = c.getEventName();\n+            if (!JVMSupport.shouldInstrument(bootClassLoader,  c.getEventName())) {\n@@ -121,1 +122,1 @@\n-                if (!mr.isEnabled(ei.getEventName()) && !ei.isEnabled() || !ei.isRegistered()) {\n+                if (!mr.isEnabled(c.getEventName()) && !c.isEnabled() || !c.isRegistered()) {\n@@ -126,1 +127,1 @@\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.INFO, \"Adding \" + (forceInstrumentation ? \"forced \" : \"\") + \"instrumentation for event type \" + eventName + \" during initial class load\");\n+            EventInstrumentation ei = new EventInstrumentation(c, traceId, true);\n@@ -128,1 +129,2 @@\n-            Bytecode.log(ei.getClassName() + \"(\" + traceId + \")\", bytes);\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.INFO, \"Adding \" + (forceInstrumentation ? \"forced \" : \"\") + \"instrumentation for event type \" + eventName + \" during initial class load\");\n+            Bytecode.log(c.getClassName() + \"(\" + traceId + \")\", bytes);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.lang.classfile.MethodModel;\n@@ -77,0 +78,6 @@\n+\n+        public boolean matches(MethodModel m) {\n+            return this.descriptor().equals(m.methodTypeSymbol()) && m.methodName().equalsString(this.name());\n+        }\n+    }\n+    public record SettingDesc(ClassDesc paramType, String methodName) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Bytecode.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.jfr.internal.util.Bytecode.FieldDesc;\n@@ -40,0 +41,2 @@\n+    public static final FieldDesc FIELD_DURATION = FieldDesc.of(long.class, DURATION);\n+    public static final FieldDesc FIELD_START_TIME = FieldDesc.of(long.class, START_TIME);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/ImplicitFields.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                        MacCertificate certificate = new MacCertificate(result);\n+                        MacCertificate certificate = new MacCertificate(result, keychain);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.util.HexFormat;\n@@ -44,1 +45,2 @@\n-import java.util.HexFormat;\n+import java.util.Objects;\n+import java.util.Optional;\n@@ -50,0 +52,1 @@\n+    private final Optional<String> keychainName;\n@@ -51,2 +54,3 @@\n-    public MacCertificate(String certificate) {\n-        this.certificate = certificate;\n+    public MacCertificate(String certificate, String keychainName) {\n+        this.certificate = Objects.requireNonNull(certificate);\n+        this.keychainName = Optional.ofNullable(keychainName);\n@@ -56,1 +60,1 @@\n-        return verifyCertificate(this.certificate);\n+        return verifyCertificate();\n@@ -298,1 +302,1 @@\n-    private boolean verifyCertificate(String certificate) {\n+    private boolean verifyCertificate() {\n@@ -306,1 +310,1 @@\n-                file = getFindCertificateOutputPEM(certificate, null);\n+                file = getFindCertificateOutputPEM(certificate, keychainName.orElse(null));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacCertificate.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                        MacCertificate certificate = new MacCertificate(result);\n+                        MacCertificate certificate = new MacCertificate(result, keychain);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1315,0 +1315,3 @@\n+                if (!src.isEmpty()) {\n+                    errormsg(\"jshell.err.incomplete.input\", src);\n+                }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+jshell.err.incomplete.input = Incomplete input: {0}\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -36,0 +38,2 @@\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.Label;\n@@ -37,0 +41,1 @@\n+import java.lang.classfile.instruction.LabelTarget;\n@@ -93,5 +98,13 @@\n-                        ClassTransform.transformingMethodBodies((cob, coe) -> {\n-                            if (coe instanceof BranchInstruction)\n-                                cob.invokestatic(CD_Cancel, \"stopCheck\", ConstantDescs.MTD_void);\n-                            cob.with(coe);\n-                        }));\n+                        ClassTransform.transformingMethodBodies(\n+                            CodeTransform.ofStateful(() -> {\n+                                Set<Label> priorLabels = new HashSet<>();\n+                                return (builder, element) -> {\n+                                    switch (element) {\n+                                        case LabelTarget target -> priorLabels.add(target.label());\n+                                        case BranchInstruction branch when priorLabels.contains(branch.target())\n+                                            -> builder.invokestatic(CD_Cancel, \"stopCheck\", ConstantDescs.MTD_void);\n+                                        default -> { }\n+                                    }\n+                                    builder.with(element);\n+                                };\n+                            })));\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"runtime\/icache.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"testutils.hpp\"\n+#include \"unittest.hpp\"\n+\n+TEST_VM(ICacheTest, flush_perf) {\n+  \/\/ Warmup infra a little.\n+  {\n+    address p = (address)os::malloc(1024, mtTest);\n+    ICache::invalidate_range(p, 1024);\n+    os::free(p);\n+  }\n+\n+  const int ITERS = 1000;\n+\n+  for (int size = 256; size <= 256*1024; size *= 2) {\n+    address p = (address)os::malloc(size, mtTest);\n+    EXPECT_NOT_NULL(p);\n+\n+    jlong total_flush = 0;\n+    jlong total_readback = 0;\n+    for (int t = 0; t < ITERS; t++) {\n+      \/\/ Force writes to mark cache lines modified.\n+      memset(p, 1, size);\n+\n+      jlong time1 = os::javaTimeNanos();\n+\n+      \/\/ Flush the cache under the memory.\n+      ICache::invalidate_range(p, size);\n+\n+      jlong time2 = os::javaTimeNanos();\n+\n+      \/\/ Read memory back.\n+      EXPECT_NULL(memchr(p, 0, size));\n+\n+      jlong time3 = os::javaTimeNanos();\n+\n+      total_flush += time2 - time1;\n+      total_readback += time3 - time2;\n+    }\n+\n+    tty->print_cr(\"%10d bytes flushed in \" JLONG_FORMAT_W(10) \" ns, read back in \" JLONG_FORMAT_W(10) \" ns\",\n+                  size, total_flush \/ ITERS, total_readback \/ ITERS);\n+\n+    os::free(p);\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_icache.cpp","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"testutils.hpp\"\n@@ -1116,0 +1117,67 @@\n+\n+TEST_VM(os, commit_memory_or_exit) {\n+  const size_t page_sz = os::vm_page_size();\n+  const size_t size = 16 * page_sz;\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+\n+  char* base = os::reserve_memory(size, false, mtTest);\n+  ASSERT_NOT_NULL(base);\n+  os::commit_memory_or_exit(base, size, false, \"Commit failed.\");\n+  strcpy(base, letters);\n+  ASSERT_TRUE(os::uncommit_memory(base, size, false));\n+  os::commit_memory_or_exit(base, size, page_sz, false, \"Commit with alignment hint failed.\");\n+  strcpy(base, letters);\n+  ASSERT_TRUE(os::uncommit_memory(base, size, false));\n+  EXPECT_TRUE(os::release_memory(base, size));\n+}\n+\n+#if !defined(_AIX)\n+\n+TEST_VM(os, map_memory_to_file) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const size_t size = strlen(letters) +1;\n+\n+  int fd = os::open(\"map_memory_to_file.txt\", O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+\n+  char* result = os::map_memory_to_file(size, fd, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, size));\n+  ::close(fd);\n+}\n+\n+TEST_VM(os, map_unmap_memory) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const char* path = \"map_unmap_memory.txt\";\n+  const size_t size = strlen(letters) + 1;\n+  int fd = os::open(path, O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+  ::close(fd);\n+\n+  fd = os::open(path, O_RDONLY, 0666);\n+  char* result = os::map_memory(fd, path, 0, nullptr, size, true, false, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, size));\n+  ::close(fd);\n+}\n+\n+TEST_VM(os, map_memory_to_file_aligned) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const size_t size = strlen(letters) + 1;\n+\n+  int fd = os::open(\"map_memory_to_file.txt\", O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+\n+  char* result = os::map_memory_to_file_aligned(os::vm_allocation_granularity(), os::vm_allocation_granularity(), fd, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, os::vm_allocation_granularity()));\n+  ::close(fd);\n+}\n+\n+#endif \/\/ !defined(_AIX)\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#############################################################################\n+#\n+# List of quarantined tests for testing with --enable-preview\n+#\n+#############################################################################\n+\n+vmTestbase\/nsk\/jdi\/ClassType\/invokeMethod\/invokemethod009\/TestDescription.java  8351188 generic-all\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList-enable-preview.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -431,0 +431,1 @@\n+ -runtime\/cds\/appcds\/aotCache \\\n@@ -530,0 +531,1 @@\n+ -runtime\/cds\/appcds\/aotCache \\\n@@ -608,3 +610,2 @@\n-  runtime\/cds\/appcds\/HelloTest.java \\\n-  runtime\/cds\/appcds\/sharedStrings\/SharedStringsBasic.java \\\n-  runtime\/cds\/appcds\/ClassLoaderTest.java\n+  runtime\/cds\/appcds\/aotCache\/HelloAOTCache.java \\\n+  runtime\/cds\/appcds\/HelloTest.java\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8344251\n+ * @summary Test that blackhole without control input are removed\n+ * @library \/test\/lib \/\n+ * @run driver compiler.blackhole.DeadBhElimination\n+ *\/\n+\n+package compiler.blackhole;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class DeadBhElimination {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\n+                \"-XX:-TieredCompilation\",\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \/\/ Prevent the dead branches to be compiled into an uncommon trap\n+                \/\/ instead of generating a BlackholeNode.\n+                \"-XX:PerMethodTrapLimit=0\",\n+                \"-XX:PerMethodSpecTrapLimit=0\",\n+                \"-XX:CompileCommand=blackhole,compiler.blackhole.DeadBhElimination::iAmABlackhole\"\n+        );\n+    }\n+\n+    static public void iAmABlackhole(int x) {}\n+\n+    @Test\n+    @IR(counts = {IRNode.BLACKHOLE, \"1\"}, phase = CompilePhase.AFTER_PARSING)\n+    @IR(failOn = {IRNode.BLACKHOLE}, phase = CompilePhase.FINAL_CODE)\n+    static void removalAfterLoopOpt() {\n+        int a = 77;\n+        int b = 0;\n+        do {\n+            a--;\n+            b++;\n+        } while (a > 0);\n+        \/\/ b == 77, known after first loop opts round\n+        \/\/ loop is detected as empty loop\n+\n+        if (b == 78) { \/\/ dead\n+            iAmABlackhole(a);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/DeadBhElimination.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -124,4 +124,2 @@\n-    @IR(applyIfPlatform = {\"riscv64\", \"false\"},\n-        failOn = {IRNode.MOD_I})\n-    @IR(applyIfPlatform = {\"riscv64\", \"false\"},\n-        counts = {IRNode.AND_I, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_I, \"2\"})\n+    @IR(failOn = {IRNode.MOD_I})\n+    @IR(counts = {IRNode.AND_I, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_I, \"2\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModINodeIdealizationTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,4 +108,2 @@\n-    @IR(applyIfPlatform = {\"riscv64\", \"false\"},\n-        failOn = {IRNode.MOD_L})\n-    @IR(applyIfPlatform = {\"riscv64\", \"false\"},\n-        counts = {IRNode.AND_L, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_L, \"2\"})\n+    @IR(failOn = {IRNode.MOD_L})\n+    @IR(counts = {IRNode.AND_L, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_L, \"2\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModLNodeIdealizationTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,8 @@\n+    \/\/ These IR checks do not apply on riscv64, as riscv64 supports Conv2B, e.g. for `return x == 0`,\n+    \/\/ the graph looks like:\n+    \/\/      Return (XorI (Conv2B ConI(#int: 1)))\n+    \/\/ On other platforms, e.g. x86_64 which does not supports Conv2B, the graph looks like:\n+    \/\/      Return (CMoveI (Bool (CompI (Param1 ConI(#int: 0))) ConI(#int: 1) ConI(#int: 0)))\n+    \/\/ On riscv64, current graph is more efficient than `CMoveI`, as it\n+    \/\/      1. generates less code\n+    \/\/      2. even when zicond is not supported, it does not introduce branches.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestConv2BExpansion.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @requires os.arch != \"riscv64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPComparison.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @requires os.arch != \"riscv64\"\n@@ -231,1 +230,1 @@\n-        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n@@ -265,1 +264,1 @@\n-        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+        applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n@@ -300,1 +299,1 @@\n-        applyIfCPUFeatureOr = { \"avx512\", \"true\" },\n+        applyIfCPUFeatureOr = { \"avx512\", \"true\", \"rvv\", \"true\" },\n@@ -335,1 +334,1 @@\n-        applyIfCPUFeatureOr = { \"avx512\", \"true\" },\n+        applyIfCPUFeatureOr = { \"avx512\", \"true\", \"rvv\", \"true\" },\n@@ -369,1 +368,1 @@\n-    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n@@ -404,1 +403,1 @@\n-    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n@@ -439,1 +438,1 @@\n-    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n@@ -474,1 +473,1 @@\n-    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\"},\n+    @IR(applyIfCPUFeatureOr = { \"sse4.1\", \"true\" , \"asimd\" , \"true\", \"rvv\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIfMinMax.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    @IR(counts = { IRNode.IF, \"3\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    @IR(counts = { IRNode.IF, \"4\" }, phase = CompilePhase.BARRIER_EXPANSION)\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestShenandoahBarrierExpansion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test 8355034\n+ * @requires vm.jvmci\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.code\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI jdk.vm.ci.code.test.InstalledCodeTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import jdk.vm.ci.code.InstalledCode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class InstalledCodeTest {\n+\n+    @Test\n+    public void testNullName() {\n+        new InstalledCode(null);\n+    }\n+\n+    @Test\n+    public void testTooLongName() {\n+        String longName = new String(new char[InstalledCode.MAX_NAME_LENGTH]).replace('\\0', 'A');\n+        new InstalledCode(longName);\n+        try {\n+            String tooLongName = longName + \"X\";\n+            new InstalledCode(tooLongName);\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ Threw IllegalArgumentException as expected.\n+            return;\n+        }\n+        Assert.fail(\"expected IllegalArgumentException\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/InstalledCodeTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -2733,0 +2733,5 @@\n+    public static final String BLACKHOLE = PREFIX + \"BLACKHOLE\" + POSTFIX;\n+    static {\n+        fromBeforeRemoveUselessToFinalCode(BLACKHOLE, \"Blackhole\");\n+    }\n+\n@@ -2859,0 +2864,7 @@\n+    private static void fromBeforeRemoveUselessToFinalCode(String irNodePlaceholder, String irNodeRegex) {\n+        String regex = START + irNodeRegex + MID + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n+                CompilePhase.BEFORE_REMOVEUSELESS,\n+                CompilePhase.FINAL_CODE));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+                    \"UseZicond\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+ *           | (os.arch == \"riscv64\" & vm.cpu.features ~= \".*rvv.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,2 +68,0 @@\n-        testSurvivorRatio(-1, 3, 15, options, true);\n-        testSurvivorRatio(-1, 3, 15, options, false);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,1 @@\n+                \"-XX:+UnlockExperimentalVMOptions\",\n@@ -78,0 +79,1 @@\n+                \"-XX:-UseCompactObjectHeaders\",\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointersEncodingScheme.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test AOT cache support for array classes in custom class loaders.\n+ * @bug 8353298\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build AOTCacheSupportForCustomLoaders\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar AppWithCustomLoaders AppWithCustomLoaders$MyLoader\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar AppWithCustomLoaders$MyLoadeeA AppWithCustomLoaders$MyLoadeeB\n+ * @run driver AOTCacheSupportForCustomLoaders AOT\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.io.File;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTCacheSupportForCustomLoaders {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"AOTCacheSupportForCustomLoaders\")\n+            .classpath(\"app.jar\")\n+            .addVmArgs(\"-Xlog:cds+class=debug\", \"-Xlog:cds\")\n+            .appCommandLine(\"AppWithCustomLoaders\")\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    out.shouldMatch(\"cds,class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n+                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\");\n+                })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Using AOT-linked classes: true\");\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class AppWithCustomLoaders {\n+    public static void main(String args[]) throws Exception {\n+        File custJar = new File(\"cust.jar\");\n+        URL[] urls = new URL[] {custJar.toURI().toURL()};\n+        MyLoader loader = new MyLoader(urls, AppWithCustomLoaders.class.getClassLoader());\n+\n+        \/\/ Test 1: array class of MyLoadeeA (JDK-8353298)\n+        Class klass = loader.loadClass(\"AppWithCustomLoaders$MyLoadeeA\");\n+        klass.newInstance();\n+\n+        \/\/ TODO: more test cases JDK-8354557\n+    }\n+\n+    public static class MyLoader extends URLClassLoader {\n+        public MyLoader(URL[] urls, ClassLoader parent) {\n+            super(urls, parent);\n+        }\n+    }\n+\n+    public static class MyLoadeeA {\n+        static Object[] array1;\n+\n+        public MyLoadeeA() {\n+            if (array1 == null) {\n+                test();\n+                Object o = array1[0];\n+                System.out.println(\"array1[0] is of class: \" + o.getClass());\n+                if (!(o instanceof MyLoadeeA)) {\n+                    throw new RuntimeException(\"array1[0] should be an instanceof MyLoadeeA\");\n+                }\n+            }\n+        }\n+\n+        static void test() {\n+            array1 = new MyLoadeeA[10];\n+            for (int i = 0; i < 10; i++) {\n+                if ((i % 2) == 0) {\n+                    array1[i] = new MyLoadeeB();\n+                } else {\n+                    array1[i] = new MyLoadeeA();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class MyLoadeeB extends MyLoadeeA {}\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Sanity test for AOTCache\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build HelloAOTCache\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar HelloAOTCacheApp\n+ * @run driver HelloAOTCache\n+ *\/\n+\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class HelloAOTCache {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"HelloAOTCache\")\n+            .addVmArgs(\"-Xlog:class+load\")\n+            .classpath(\"app.jar\")\n+            .appCommandLine(\"HelloAOTCacheApp\")\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldMatch(\"class,load.*HelloAOTCacheApp.*shared objects\");\n+                    out.shouldContain(\"HelloWorld\");\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class HelloAOTCacheApp {\n+    public static void main(String[] args) {\n+        System.out.println(\"HelloWorld\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/HelloAOTCache.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary AOT cache handling for package-info class loaded by jdk\/internal\/loader\/ClassLoaders$BootClassLoader\n+ * @bug 8354558\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/Package\/bootclasspath\/boot\n+ * @build PackageInfoClass foo.Foo foo.MyAnnotation foo.package-info\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar boot.jar foo.Foo foo.package-info foo.MyAnnotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar PackageInfoClassApp\n+ * @run driver PackageInfoClass AOT\n+ *\/\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import jdk.test.lib.cds.CDSAppTester.RunMode;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class PackageInfoClass {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"PackageInfoClass\")\n+            .classpath(\"app.jar\")\n+            .addVmArgs(\"-Xbootclasspath\/a:boot.jar\")\n+            .appCommandLine(\"PackageInfoClassApp\")\n+            .setAssemblyChecker((OutputAnalyzer out, RunMode runMode) -> {\n+                    if (runMode == RunMode.TRAINING) {\n+                        out.shouldContain(\"Skipping foo\/package-info: Unsupported location\");\n+                    }\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class PackageInfoClassApp {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ This code is taken from test\/jdk\/java\/lang\/Package\/bootclasspath\/GetPackageFromBootClassPath.java\n+        Class<?> c = Class.forName(\"foo.Foo\", false, null);\n+        Package p = c.getPackage();\n+        Annotation[] annotations = p.getAnnotations();\n+        Class<?> annType = Class.forName(\"foo.MyAnnotation\", false, null);\n+        if (annotations.length != 1 ||\n+            annotations[0].annotationType() != annType) {\n+            throw new RuntimeException(\"Expected foo.MyAnnotation but got \" +\n+                Arrays.toString(annotations));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/PackageInfoClass.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,3161 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=static\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/lib\n+ * @build StringConcatStress\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar StringConcatStressApp\n+ * @run driver StringConcatStress STATIC\n+ *\/\n+\n+\/*\n+ * @test id=aot\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build StringConcatStress\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar StringConcatStressApp\n+ * @run driver StringConcatStress AOT\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class StringConcatStress {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"StringConcatStressApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester t = new Tester();\n+        t.run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"-XX:+AOTClassLinking\", \/\/ by default enables AOTInvokeDynamicLinking\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (runMode.isApplicationExecuted()) {\n+                out.shouldContain(\"Result = 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1END\");\n+            }\n+        }\n+    }\n+}\n+\n+class StringConcatStressApp {\n+    public static void main(String args[]) {\n+        System.out.println(\"Result = \" + concat23String() + \"END\");\n+        lotsOfConcats();\n+    }\n+\n+    \/\/ Test the handling of java.lang.invoke.StringConcat.highArityThreshold (default value is 20)\n+    \/\/ in java.lang.invoke.StringConcatFactory. If we have more than this number of concats, a\n+    \/\/ different form of CallSite is generated by StringConcatFactory that will uses\n+    \/\/ different kinds of hidden classes than usual.\n+    static String concat23String() {\n+        return f0 + \",\"+ f1 + \",\"+ f2 + \",\"+ f3 + \",\"+ f4 + \",\"+ f5 + \",\"+ f6 + \",\"+ f7 + \",\"+ f8 + \",\"+ f9 + \",\"\n+                + f10 + \",\"+ f11 + \",\"+ f12 + \",\"+ f13 + \",\"+ f14 + \",\"+ f15 + \",\"+ f16 + \",\"+ f17 + \",\"+ f18 + \",\"+ f19 + \",\"\n+                + f20 + \",\"+ f21 + \",\"+ f22;\n+    }\n+\n+    private static String\n+            f0=\"1\", f1=\"1\", f2=\"1\", f3=\"1\", f4=\"1\", f5=\"1\", f6=\"1\", f7=\"1\", f8=\"1\", f9=\"1\",\n+            f10=\"1\", f11=\"1\", f12=\"1\", f13=\"1\", f14=\"1\", f15=\"1\", f16=\"1\", f17=\"1\", f18=\"1\", f19=\"1\",\n+            f20=\"1\", f21=\"1\", f22=\"1\", f23=\"1\", f24=\"1\", f25=\"1\", f26=\"1\", f27=\"1\", f28=\"1\", f29=\"1\",\n+            f30=\"1\", f31=\"1\", f32=\"1\", f33=\"1\", f34=\"1\", f35=\"1\", f36=\"1\", f37=\"1\", f38=\"1\", f39=\"1\",\n+            f40=\"1\", f41=\"1\", f42=\"1\", f43=\"1\", f44=\"1\", f45=\"1\", f46=\"1\", f47=\"1\", f48=\"1\", f49=\"1\",\n+            f50=\"1\", f51=\"1\", f52=\"1\", f53=\"1\", f54=\"1\", f55=\"1\", f56=\"1\", f57=\"1\", f58=\"1\", f59=\"1\",\n+            f60=\"1\", f61=\"1\", f62=\"1\", f63=\"1\", f64=\"1\", f65=\"1\", f66=\"1\", f67=\"1\", f68=\"1\", f69=\"1\",\n+            f70=\"1\", f71=\"1\", f72=\"1\", f73=\"1\", f74=\"1\", f75=\"1\", f76=\"1\", f77=\"1\", f78=\"1\", f79=\"1\",\n+            f80=\"1\", f81=\"1\", f82=\"1\", f83=\"1\", f84=\"1\", f85=\"1\", f86=\"1\", f87=\"1\", f88=\"1\", f89=\"1\",\n+            f90=\"1\", f91=\"1\", f92=\"1\", f93=\"1\", f94=\"1\", f95=\"1\", f96=\"1\", f97=\"1\", f98=\"1\", f99=\"1\",\n+            f100=\"1\",f101=\"1\",f102=\"1\",f103=\"1\",f104=\"1\",f105=\"1\",f106=\"1\",f107=\"1\",f108=\"1\",f109=\"1\",\n+            f110=\"1\",f111=\"1\",f112=\"1\",f113=\"1\",f114=\"1\",f115=\"1\",f116=\"1\",f117=\"1\",f118=\"1\",f119=\"1\",\n+            f120=\"1\",f121=\"1\",f122=\"1\";\n+\n+\n+    static String result;\n+    static void lotsOfConcats() {\n+        long maxElapseMs = 2000;\n+        \/\/ Run this test case for no more than maxElapseMs milliseconds\n+        String s = System.getProperty(\"StringConcatStress.max.ms\");\n+        if (s != null) {\n+            maxElapseMs = Long.parseLong(s);\n+        }\n+\n+        long start = System.currentTimeMillis();\n+        int count = 0;\n+        long end;\n+\n+        do {\n+            count ++;\n+            lotsOfConcatsInner();\n+            end = System.currentTimeMillis();;\n+        } while ((end - start) < maxElapseMs);\n+\n+        System.out.println(\"Result  = \" + result);\n+        System.out.println(\"Elapsed = \" + (end - start) + \" ms\");\n+        System.out.println(\"Count   = \" + count);\n+    }\n+\n+    static void lotsOfConcatsInner() {\n+        int i = 17;\n+        byte b = (byte)127;\n+        char c = 'c';\n+        long l = 4711;\n+        boolean z = true;\n+        short s = 5;\n+        float f = 1.0f;\n+        double d = 2.5;\n+        String S = \"S\";\n+        String concat;\n+        concat = \"\" + i + l + i + b + d + d + d + b;\n+        concat = \"\" + S + S + f + f + S + l + \"S\" + f;\n+        concat = \"\" + c + f + s + s + \"S\" + d + s + b;\n+        concat = \"\" + f + z + z + s + l + d + c + S;\n+        concat = \"\" + f + \"S\" + c + b + f + c + \"S\" + s;\n+        concat = \"\" + \"S\" + d + l + s + s + z + i + b;\n+        concat = \"\" + S + b + \"S\" + s + S + l + d + s;\n+        concat = \"\" + d + b + s + z + i + l + z + S;\n+        concat = \"\" + z + z + d + i + c + c + d + \"S\";\n+        concat = \"\" + l + \"S\" + z + l + z + z + \"S\" + b;\n+        concat = \"\" + f + d + b + S + \"S\" + \"S\" + l + l;\n+        concat = \"\" + f + b + l + c + f + f + s + S;\n+        concat = \"\" + \"S\" + z + i + d + i + b + l + \"S\";\n+        concat = \"\" + \"S\" + S + S + z + i + S + z + c;\n+        concat = \"\" + f + i + i + b + z + c + i + S;\n+        concat = \"\" + d + f + d + f + s + i + d + \"S\";\n+        concat = \"\" + s + i + b + z + s + b + \"S\" + f;\n+        concat = \"\" + z + z + i + \"S\" + d + \"S\" + \"S\" + l;\n+        concat = \"\" + i + c + d + i + s + \"S\" + \"S\" + d;\n+        concat = \"\" + z + i + z + z + S + d + b + f;\n+        concat = \"\" + b + S + b + s + z + z + S + f;\n+        concat = \"\" + S + b + i + l + S + d + s + S;\n+        concat = \"\" + c + S + c + f + l + \"S\" + S + \"S\";\n+        concat = \"\" + b + l + b + b + s + l + l + z;\n+        concat = \"\" + \"S\" + b + c + d + f + l + l + b;\n+        concat = \"\" + c + S + S + i + c + z + d + z;\n+        concat = \"\" + z + d + b + S + \"S\" + i + l + b;\n+        concat = \"\" + z + l + S + f + b + d + l + i;\n+        concat = \"\" + i + b + l + b + l + \"S\" + d + d;\n+        concat = \"\" + c + s + c + z + i + i + c + c;\n+        concat = \"\" + l + i + z + \"S\" + d + \"S\" + \"S\" + l;\n+        concat = \"\" + \"S\" + \"S\" + b + c + i + S + z + f;\n+        concat = \"\" + d + l + d + i + d + c + z + f;\n+        concat = \"\" + b + \"S\" + c + c + f + z + b + f;\n+        concat = \"\" + s + c + d + c + \"S\" + b + \"S\" + b;\n+        concat = \"\" + i + i + S + i + s + d + f + d;\n+        concat = \"\" + S + c + s + i + \"S\" + c + s + b;\n+        concat = \"\" + b + s + l + S + S + s + c + i;\n+        concat = \"\" + s + S + d + f + S + S + s + z;\n+        concat = \"\" + S + S + c + \"S\" + z + f + l + s;\n+        concat = \"\" + c + d + z + f + s + f + c + S;\n+        concat = \"\" + z + b + c + c + S + c + z + l;\n+        concat = \"\" + l + \"S\" + \"S\" + c + i + S + c + l;\n+        concat = \"\" + d + d + i + z + \"S\" + z + i + d;\n+        concat = \"\" + d + d + f + i + \"S\" + b + d + b;\n+        concat = \"\" + c + l + f + d + d + b + d + c;\n+        concat = \"\" + \"S\" + \"S\" + i + i + f + c + f + S;\n+        concat = \"\" + l + z + S + b + d + f + d + b;\n+        concat = \"\" + l + S + z + f + \"S\" + l + f + \"S\";\n+        concat = \"\" + c + b + i + S + s + f + d + b;\n+        concat = \"\" + s + l + S + b + i + l + z + f;\n+        concat = \"\" + c + b + c + c + c + c + b + \"S\";\n+        concat = \"\" + s + s + l + S + \"S\" + z + l + f;\n+        concat = \"\" + i + d + d + z + z + b + b + s;\n+        concat = \"\" + \"S\" + \"S\" + b + d + z + f + s + s;\n+        concat = \"\" + b + \"S\" + c + b + z + d + \"S\" + l;\n+        concat = \"\" + c + f + S + s + z + s + S + i;\n+        concat = \"\" + d + b + i + i + z + S + c + z;\n+        concat = \"\" + s + l + l + f + \"S\" + f + s + S;\n+        concat = \"\" + i + c + l + \"S\" + S + s + f + f;\n+        concat = \"\" + d + d + s + \"S\" + l + z + f + b;\n+        concat = \"\" + f + l + c + \"S\" + f + f + \"S\" + S;\n+        concat = \"\" + f + l + d + S + c + i + f + c;\n+        concat = \"\" + c + \"S\" + z + z + i + s + i + S;\n+        concat = \"\" + f + \"S\" + l + d + c + s + s + b;\n+        concat = \"\" + i + i + \"S\" + l + c + S + d + b;\n+        concat = \"\" + \"S\" + z + s + f + \"S\" + d + z + z;\n+        concat = \"\" + \"S\" + S + l + \"S\" + l + \"S\" + d + f;\n+        concat = \"\" + l + f + S + f + \"S\" + f + i + b;\n+        concat = \"\" + l + c + b + f + s + S + d + c;\n+        concat = \"\" + s + c + l + \"S\" + l + b + l + S;\n+        concat = \"\" + z + \"S\" + s + \"S\" + z + s + i + c;\n+        concat = \"\" + i + z + \"S\" + z + f + i + S + S;\n+        concat = \"\" + S + b + f + \"S\" + f + i + b + S;\n+        concat = \"\" + s + S + b + S + c + c + f + b;\n+        concat = \"\" + \"S\" + d + b + d + i + c + S + c;\n+        concat = \"\" + b + \"S\" + f + c + s + b + z + \"S\";\n+        concat = \"\" + b + z + l + l + s + l + l + S;\n+        concat = \"\" + \"S\" + \"S\" + S + S + \"S\" + c + i + S;\n+        concat = \"\" + l + S + s + f + l + s + s + \"S\";\n+        concat = \"\" + z + d + S + z + b + l + l + b;\n+        concat = \"\" + S + f + b + \"S\" + c + d + f + d;\n+        concat = \"\" + i + l + S + c + S + d + \"S\" + c;\n+        concat = \"\" + c + b + \"S\" + s + s + i + z + \"S\";\n+        concat = \"\" + f + S + c + i + i + l + z + d;\n+        concat = \"\" + z + z + z + l + f + S + f + b;\n+        concat = \"\" + i + f + z + l + s + S + b + l;\n+        concat = \"\" + z + c + b + S + l + S + s + s;\n+        concat = \"\" + \"S\" + b + i + l + b + f + c + l;\n+        concat = \"\" + b + c + s + S + f + l + S + i;\n+        concat = \"\" + d + c + l + i + b + \"S\" + f + f;\n+        concat = \"\" + c + c + \"S\" + c + s + S + i + c;\n+        concat = \"\" + l + \"S\" + d + b + c + s + b + d;\n+        concat = \"\" + f + z + f + l + \"S\" + f + l + f;\n+        concat = \"\" + z + l + \"S\" + b + f + c + z + b;\n+        concat = \"\" + z + \"S\" + c + i + b + b + \"S\" + S;\n+        concat = \"\" + f + \"S\" + f + s + \"S\" + f + b + \"S\";\n+        concat = \"\" + f + i + c + S + b + \"S\" + d + d;\n+        concat = \"\" + f + f + d + i + f + d + d + i;\n+        concat = \"\" + f + d + f + z + f + c + s + b;\n+        concat = \"\" + f + b + f + s + f + f + c + S;\n+        concat = \"\" + i + S + l + c + s + d + d + f;\n+        concat = \"\" + S + b + c + d + c + s + b + z;\n+        concat = \"\" + f + b + \"S\" + z + l + f + s + b;\n+        concat = \"\" + d + S + f + \"S\" + f + s + f + c;\n+        concat = \"\" + c + d + \"S\" + i + d + z + i + c;\n+        concat = \"\" + S + \"S\" + c + S + c + l + c + i;\n+        concat = \"\" + d + c + f + \"S\" + b + S + s + d;\n+        concat = \"\" + i + S + z + i + z + l + i + c;\n+        concat = \"\" + S + f + s + f + z + i + \"S\" + f;\n+        concat = \"\" + b + d + s + d + d + i + S + z;\n+        concat = \"\" + z + z + b + i + d + z + s + c;\n+        concat = \"\" + c + i + b + z + s + c + l + c;\n+        concat = \"\" + S + f + s + c + s + z + i + \"S\";\n+        concat = \"\" + z + \"S\" + l + c + b + S + S + S;\n+        concat = \"\" + f + S + b + l + c + s + c + i;\n+        concat = \"\" + d + s + S + \"S\" + \"S\" + z + b + c;\n+        concat = \"\" + d + c + l + i + d + \"S\" + z + l;\n+        concat = \"\" + \"S\" + S + z + s + d + i + z + \"S\";\n+        concat = \"\" + c + z + f + \"S\" + l + i + c + i;\n+        concat = \"\" + c + i + c + S + s + s + S + z;\n+        concat = \"\" + c + f + f + l + l + i + z + d;\n+        concat = \"\" + s + S + \"S\" + z + l + \"S\" + S + c;\n+        concat = \"\" + f + l + z + f + c + i + c + z;\n+        concat = \"\" + z + s + f + l + i + i + \"S\" + i;\n+        concat = \"\" + S + i + i + b + S + s + z + z;\n+        concat = \"\" + z + \"S\" + \"S\" + z + f + \"S\" + i + f;\n+        concat = \"\" + f + \"S\" + c + c + i + z + l + f;\n+        concat = \"\" + b + f + f + S + f + z + S + s;\n+        concat = \"\" + i + d + f + z + d + i + i + f;\n+        concat = \"\" + b + d + d + l + \"S\" + d + b + i;\n+        concat = \"\" + i + \"S\" + b + i + S + l + z + f;\n+        concat = \"\" + z + f + s + s + \"S\" + s + l + \"S\";\n+        concat = \"\" + l + c + s + z + s + b + c + s;\n+        concat = \"\" + s + f + s + b + z + \"S\" + z + f;\n+        concat = \"\" + b + i + z + i + l + \"S\" + i + S;\n+        concat = \"\" + z + f + S + d + d + b + f + i;\n+        concat = \"\" + l + i + S + i + z + s + i + S;\n+        concat = \"\" + c + f + f + c + S + \"S\" + d + c;\n+        concat = \"\" + c + f + d + \"S\" + l + c + c + s;\n+        concat = \"\" + s + c + c + f + b + f + i + \"S\";\n+        concat = \"\" + i + \"S\" + S + l + i + \"S\" + i + l;\n+        concat = \"\" + b + l + z + \"S\" + s + c + z + i;\n+        concat = \"\" + d + \"S\" + \"S\" + \"S\" + b + S + c + l;\n+        concat = \"\" + l + l + z + \"S\" + z + d + S + b;\n+        concat = \"\" + S + b + s + b + b + i + d + s;\n+        concat = \"\" + \"S\" + c + S + z + s + i + z + b;\n+        concat = \"\" + f + \"S\" + c + \"S\" + s + l + c + b;\n+        concat = \"\" + l + s + c + S + z + z + d + s;\n+        concat = \"\" + z + b + s + s + l + d + f + i;\n+        concat = \"\" + c + c + i + c + b + c + S + s;\n+        concat = \"\" + z + f + s + i + c + f + b + i;\n+        concat = \"\" + \"S\" + f + f + f + z + l + l + l;\n+        concat = \"\" + c + i + z + S + d + l + S + z;\n+        concat = \"\" + c + d + \"S\" + l + f + c + l + \"S\";\n+        concat = \"\" + \"S\" + c + b + z + c + c + c + \"S\";\n+        concat = \"\" + z + d + S + d + l + d + c + z;\n+        concat = \"\" + c + d + l + s + z + s + b + f;\n+        concat = \"\" + l + s + d + z + l + b + i + i;\n+        concat = \"\" + f + l + b + i + l + b + z + \"S\";\n+        concat = \"\" + c + b + c + l + S + i + d + c;\n+        concat = \"\" + d + s + s + b + b + s + s + i;\n+        concat = \"\" + d + i + S + z + l + b + b + d;\n+        concat = \"\" + \"S\" + \"S\" + c + \"S\" + f + b + z + f;\n+        concat = \"\" + z + d + \"S\" + z + \"S\" + S + d + b;\n+        concat = \"\" + b + i + z + b + S + s + c + l;\n+        concat = \"\" + S + z + c + z + b + d + s + i;\n+        concat = \"\" + S + \"S\" + z + s + l + z + s + s;\n+        concat = \"\" + f + l + f + f + b + f + z + d;\n+        concat = \"\" + z + z + z + f + i + l + f + b;\n+        concat = \"\" + i + l + z + i + s + d + f + l;\n+        concat = \"\" + \"S\" + \"S\" + f + l + \"S\" + i + \"S\" + l;\n+        concat = \"\" + S + b + z + f + \"S\" + l + i + i;\n+        concat = \"\" + z + c + d + z + l + d + z + z;\n+        concat = \"\" + l + z + d + S + l + f + S + d;\n+        concat = \"\" + S + i + d + b + \"S\" + f + z + z;\n+        concat = \"\" + f + d + \"S\" + b + l + f + b + b;\n+        concat = \"\" + b + S + \"S\" + d + \"S\" + s + s + f;\n+        concat = \"\" + z + c + b + b + z + S + s + b;\n+        concat = \"\" + l + f + S + S + c + f + c + z;\n+        concat = \"\" + i + S + l + d + f + \"S\" + S + s;\n+        concat = \"\" + i + c + d + z + i + c + d + l;\n+        concat = \"\" + l + d + d + S + l + b + S + i;\n+        concat = \"\" + c + \"S\" + b + z + l + i + z + S;\n+        concat = \"\" + z + i + z + s + d + S + i + S;\n+        concat = \"\" + z + f + l + \"S\" + s + b + z + i;\n+        concat = \"\" + z + l + z + f + b + c + d + \"S\";\n+        concat = \"\" + l + s + i + \"S\" + S + c + f + i;\n+        concat = \"\" + S + s + b + f + f + \"S\" + s + i;\n+        concat = \"\" + i + s + c + \"S\" + z + f + \"S\" + d;\n+        concat = \"\" + f + s + c + f + d + s + b + c;\n+        concat = \"\" + c + s + d + d + \"S\" + s + f + \"S\";\n+        concat = \"\" + \"S\" + c + z + c + s + s + S + S;\n+        concat = \"\" + S + S + d + s + d + l + s + b;\n+        concat = \"\" + i + s + b + S + S + b + l + i;\n+        concat = \"\" + c + b + b + b + f + s + f + z;\n+        concat = \"\" + z + \"S\" + s + d + f + i + i + z;\n+        concat = \"\" + S + S + c + i + z + f + i + s;\n+        concat = \"\" + \"S\" + \"S\" + S + z + z + \"S\" + s + f;\n+        concat = \"\" + b + \"S\" + S + l + i + d + S + z;\n+        concat = \"\" + s + c + \"S\" + S + b + i + i + i;\n+        concat = \"\" + s + z + i + c + s + l + S + f;\n+        concat = \"\" + d + f + S + S + b + z + c + \"S\";\n+        concat = \"\" + z + \"S\" + c + \"S\" + b + s + f + \"S\";\n+        concat = \"\" + S + z + s + \"S\" + b + f + d + S;\n+        concat = \"\" + l + i + b + b + \"S\" + \"S\" + l + z;\n+        concat = \"\" + S + l + f + i + i + f + z + f;\n+        concat = \"\" + S + \"S\" + s + l + b + d + d + s;\n+        concat = \"\" + d + \"S\" + s + z + c + \"S\" + i + l;\n+        concat = \"\" + b + s + f + f + z + \"S\" + d + d;\n+        concat = \"\" + z + f + c + b + f + c + \"S\" + \"S\";\n+        concat = \"\" + S + S + z + b + s + f + l + i;\n+        concat = \"\" + l + i + c + z + b + b + S + b;\n+        concat = \"\" + z + c + i + \"S\" + s + s + \"S\" + S;\n+        concat = \"\" + S + d + c + z + b + s + i + i;\n+        concat = \"\" + s + z + d + s + i + d + d + S;\n+        concat = \"\" + s + z + s + l + s + l + s + z;\n+        concat = \"\" + f + d + c + f + l + f + i + z;\n+        concat = \"\" + l + d + d + z + d + \"S\" + z + z;\n+        concat = \"\" + \"S\" + d + c + \"S\" + l + s + \"S\" + c;\n+        concat = \"\" + c + S + z + i + \"S\" + i + i + z;\n+        concat = \"\" + d + \"S\" + S + d + z + \"S\" + f + c;\n+        concat = \"\" + z + d + S + l + i + z + i + l;\n+        concat = \"\" + d + l + c + d + f + s + f + \"S\";\n+        concat = \"\" + f + c + d + d + l + l + f + d;\n+        concat = \"\" + \"S\" + z + f + b + d + c + \"S\" + s;\n+        concat = \"\" + l + S + \"S\" + d + S + i + l + z;\n+        concat = \"\" + i + S + l + i + l + z + d + f;\n+        concat = \"\" + d + i + s + S + l + d + S + S;\n+        concat = \"\" + l + d + l + b + b + i + z + S;\n+        concat = \"\" + f + s + z + f + i + l + d + b;\n+        concat = \"\" + s + d + l + z + b + b + c + i;\n+        concat = \"\" + f + z + s + d + f + f + d + f;\n+        concat = \"\" + d + z + d + f + \"S\" + \"S\" + s + z;\n+        concat = \"\" + c + f + \"S\" + \"S\" + b + s + s + i;\n+        concat = \"\" + \"S\" + \"S\" + d + b + d + \"S\" + i + b;\n+        concat = \"\" + d + S + l + f + d + d + b + b;\n+        concat = \"\" + d + l + d + S + b + \"S\" + f + d;\n+        concat = \"\" + l + c + s + l + \"S\" + l + S + f;\n+        concat = \"\" + i + b + i + d + s + s + f + c;\n+        concat = \"\" + i + z + z + S + d + z + c + l;\n+        concat = \"\" + S + i + l + \"S\" + f + f + c + b;\n+        concat = \"\" + \"S\" + S + d + b + d + f + z + d;\n+        concat = \"\" + d + d + \"S\" + d + c + S + \"S\" + b;\n+        concat = \"\" + l + i + c + f + S + s + z + z;\n+        concat = \"\" + c + l + S + i + S + s + z + i;\n+        concat = \"\" + i + \"S\" + i + \"S\" + \"S\" + \"S\" + b + c;\n+        concat = \"\" + f + z + S + f + c + l + b + i;\n+        concat = \"\" + d + l + b + z + d + s + s + S;\n+        concat = \"\" + s + S + d + s + z + l + S + z;\n+        concat = \"\" + i + s + z + b + l + l + b + d;\n+        concat = \"\" + i + z + b + z + d + S + f + l;\n+        concat = \"\" + S + z + l + b + i + f + l + i;\n+        concat = \"\" + s + s + b + c + s + f + c + f;\n+        concat = \"\" + f + i + s + f + c + S + c + s;\n+        concat = \"\" + s + \"S\" + z + d + f + S + b + S;\n+        concat = \"\" + i + z + S + d + l + b + i + z;\n+        concat = \"\" + i + c + i + b + i + l + d + f;\n+        concat = \"\" + S + b + s + s + s + c + S + l;\n+        concat = \"\" + S + f + s + \"S\" + l + l + s + c;\n+        concat = \"\" + z + l + S + S + s + d + S + f;\n+        concat = \"\" + z + f + S + i + d + d + S + b;\n+        concat = \"\" + S + d + \"S\" + l + l + i + l + i;\n+        concat = \"\" + b + b + i + i + d + i + \"S\" + s;\n+        concat = \"\" + l + c + \"S\" + l + s + b + l + l;\n+        concat = \"\" + \"S\" + s + l + c + b + c + s + S;\n+        concat = \"\" + z + S + b + d + l + d + i + b;\n+        concat = \"\" + b + i + S + i + l + i + f + b;\n+        concat = \"\" + d + S + s + S + \"S\" + b + c + l;\n+        concat = \"\" + b + c + c + f + S + b + c + d;\n+        concat = \"\" + i + i + b + S + f + f + b + c;\n+        concat = \"\" + i + S + l + \"S\" + f + f + S + f;\n+        concat = \"\" + f + l + f + c + \"S\" + c + b + \"S\";\n+        concat = \"\" + S + S + z + z + \"S\" + d + s + \"S\";\n+        concat = \"\" + b + z + i + i + f + c + s + l;\n+        concat = \"\" + i + d + S + b + l + \"S\" + l + f;\n+        concat = \"\" + b + c + s + s + z + f + z + l;\n+        concat = \"\" + f + f + S + s + z + d + f + s;\n+        concat = \"\" + S + \"S\" + d + f + c + S + z + i;\n+        concat = \"\" + s + \"S\" + S + d + s + i + i + \"S\";\n+        concat = \"\" + l + z + f + d + z + l + c + i;\n+        concat = \"\" + f + i + S + S + c + i + i + d;\n+        concat = \"\" + f + d + z + \"S\" + s + s + z + l;\n+        concat = \"\" + c + s + s + S + z + z + b + d;\n+        concat = \"\" + f + b + d + S + c + f + l + d;\n+        concat = \"\" + \"S\" + d + s + f + \"S\" + s + c + b;\n+        concat = \"\" + S + d + b + d + z + d + z + b;\n+        concat = \"\" + s + l + c + z + s + c + c + \"S\";\n+        concat = \"\" + z + b + s + f + b + i + l + S;\n+        concat = \"\" + s + b + \"S\" + S + b + d + d + i;\n+        concat = \"\" + \"S\" + c + i + z + f + l + s + f;\n+        concat = \"\" + c + z + S + i + \"S\" + z + b + s;\n+        concat = \"\" + l + i + z + z + z + s + b + d;\n+        concat = \"\" + S + c + d + d + z + s + l + c;\n+        concat = \"\" + l + f + i + f + S + \"S\" + \"S\" + f;\n+        concat = \"\" + f + S + s + S + c + i + i + s;\n+        concat = \"\" + f + l + l + z + f + s + \"S\" + s;\n+        concat = \"\" + f + l + S + S + c + i + l + i;\n+        concat = \"\" + c + s + S + c + f + c + i + i;\n+        concat = \"\" + c + b + c + i + s + d + S + d;\n+        concat = \"\" + z + c + b + s + \"S\" + z + z + c;\n+        concat = \"\" + f + d + c + \"S\" + s + \"S\" + c + \"S\";\n+        concat = \"\" + d + s + i + i + z + l + l + c;\n+        concat = \"\" + l + z + c + c + b + z + i + d;\n+        concat = \"\" + b + f + f + d + b + \"S\" + c + f;\n+        concat = \"\" + \"S\" + \"S\" + i + z + i + z + b + l;\n+        concat = \"\" + c + z + S + c + b + S + i + i;\n+        concat = \"\" + z + z + z + s + i + s + S + s;\n+        concat = \"\" + l + b + c + d + l + i + c + l;\n+        concat = \"\" + l + l + z + d + \"S\" + z + b + b;\n+        concat = \"\" + d + f + c + z + b + z + l + z;\n+        concat = \"\" + f + S + s + d + z + S + i + s;\n+        concat = \"\" + d + d + b + i + s + l + \"S\" + i;\n+        concat = \"\" + f + \"S\" + b + c + \"S\" + s + S + d;\n+        concat = \"\" + z + s + \"S\" + l + c + c + b + z;\n+        concat = \"\" + z + b + s + i + f + d + b + i;\n+        concat = \"\" + i + S + z + c + s + i + z + i;\n+        concat = \"\" + c + b + c + i + i + s + f + z;\n+        concat = \"\" + b + d + c + d + S + c + b + s;\n+        concat = \"\" + c + S + b + z + b + i + \"S\" + l;\n+\/*\n+        concat = \"\" + z + \"S\" + c + l + z + \"S\" + z + b;\n+        concat = \"\" + \"S\" + \"S\" + f + c + c + b + d + c;\n+        concat = \"\" + b + s + f + f + S + \"S\" + d + s;\n+        concat = \"\" + z + \"S\" + b + s + l + S + s + f;\n+        concat = \"\" + s + i + i + i + b + l + f + c;\n+        concat = \"\" + z + s + z + z + d + S + S + c;\n+        concat = \"\" + c + l + S + \"S\" + l + s + b + i;\n+        concat = \"\" + c + s + S + f + S + b + f + s;\n+        concat = \"\" + s + S + c + s + b + b + f + z;\n+        concat = \"\" + c + f + f + b + z + z + b + s;\n+        concat = \"\" + f + s + z + f + b + l + f + f;\n+        concat = \"\" + S + d + f + c + c + s + z + S;\n+        concat = \"\" + c + b + z + f + b + d + b + S;\n+        concat = \"\" + b + \"S\" + d + b + c + d + S + f;\n+        concat = \"\" + \"S\" + d + S + \"S\" + S + S + S + i;\n+        concat = \"\" + f + l + l + \"S\" + \"S\" + i + c + \"S\";\n+        concat = \"\" + b + i + z + \"S\" + l + l + d + s;\n+        concat = \"\" + c + c + z + z + l + d + \"S\" + b;\n+        concat = \"\" + S + l + s + d + s + c + d + l;\n+        concat = \"\" + c + b + \"S\" + s + \"S\" + s + S + l;\n+        concat = \"\" + c + c + \"S\" + s + z + \"S\" + S + c;\n+        concat = \"\" + s + S + z + i + i + l + S + f;\n+        concat = \"\" + s + i + i + f + f + z + \"S\" + c;\n+        concat = \"\" + S + d + d + S + S + c + d + b;\n+        concat = \"\" + b + S + S + d + c + l + \"S\" + \"S\";\n+        concat = \"\" + S + l + i + i + b + c + f + c;\n+        concat = \"\" + s + c + S + d + i + c + s + z;\n+        concat = \"\" + i + f + s + b + S + z + f + \"S\";\n+        concat = \"\" + \"S\" + s + \"S\" + f + \"S\" + \"S\" + l + d;\n+        concat = \"\" + b + l + S + z + c + S + S + S;\n+        concat = \"\" + i + d + s + i + s + S + i + f;\n+        concat = \"\" + c + \"S\" + i + c + c + b + c + \"S\";\n+        concat = \"\" + \"S\" + S + c + f + z + f + l + l;\n+        concat = \"\" + i + S + d + d + \"S\" + s + i + \"S\";\n+        concat = \"\" + i + l + d + d + S + l + z + S;\n+        concat = \"\" + s + b + z + l + l + i + s + z;\n+        concat = \"\" + f + f + i + d + d + S + \"S\" + s;\n+        concat = \"\" + l + z + S + b + b + b + s + b;\n+        concat = \"\" + d + c + c + s + \"S\" + i + z + \"S\";\n+        concat = \"\" + \"S\" + b + c + b + s + f + d + i;\n+        concat = \"\" + s + \"S\" + z + d + d + l + b + c;\n+        concat = \"\" + S + S + d + i + S + z + z + c;\n+        concat = \"\" + l + \"S\" + i + s + z + s + i + s;\n+        concat = \"\" + c + z + c + z + l + d + S + l;\n+        concat = \"\" + f + f + f + s + \"S\" + i + d + d;\n+        concat = \"\" + d + f + b + i + f + f + s + f;\n+        concat = \"\" + f + f + s + b + i + c + z + \"S\";\n+        concat = \"\" + d + c + d + i + i + S + d + S;\n+        concat = \"\" + \"S\" + f + f + d + c + c + f + d;\n+        concat = \"\" + z + l + b + f + i + d + \"S\" + d;\n+        concat = \"\" + b + s + f + z + c + i + l + d;\n+        concat = \"\" + l + l + l + \"S\" + i + l + s + l;\n+        concat = \"\" + \"S\" + z + b + S + l + z + \"S\" + c;\n+        concat = \"\" + S + S + b + \"S\" + f + \"S\" + c + z;\n+        concat = \"\" + d + c + c + d + d + f + c + b;\n+        concat = \"\" + S + c + b + f + l + s + b + c;\n+        concat = \"\" + s + b + l + z + i + f + b + c;\n+        concat = \"\" + S + c + \"S\" + d + d + f + b + z;\n+        concat = \"\" + l + \"S\" + l + z + \"S\" + s + S + s;\n+        concat = \"\" + f + l + S + s + f + S + l + c;\n+        concat = \"\" + l + d + z + z + \"S\" + z + i + b;\n+        concat = \"\" + b + s + c + \"S\" + z + \"S\" + c + z;\n+        concat = \"\" + s + l + \"S\" + b + s + d + b + i;\n+        concat = \"\" + S + \"S\" + z + z + z + s + i + l;\n+        concat = \"\" + \"S\" + \"S\" + z + d + c + z + c + S;\n+        concat = \"\" + c + S + f + \"S\" + l + z + s + \"S\";\n+        concat = \"\" + d + z + z + s + s + l + i + f;\n+        concat = \"\" + b + b + z + b + S + l + i + S;\n+        concat = \"\" + \"S\" + z + i + l + c + \"S\" + z + S;\n+        concat = \"\" + c + l + d + i + d + l + S + i;\n+        concat = \"\" + i + f + \"S\" + d + s + S + l + c;\n+        concat = \"\" + c + i + d + i + l + \"S\" + l + d;\n+        concat = \"\" + l + c + b + d + c + b + b + c;\n+        concat = \"\" + i + \"S\" + b + s + f + d + c + l;\n+        concat = \"\" + \"S\" + l + l + z + S + d + s + \"S\";\n+        concat = \"\" + f + f + f + s + S + c + S + l;\n+        concat = \"\" + \"S\" + f + s + S + \"S\" + S + \"S\" + s;\n+        concat = \"\" + f + z + c + s + f + c + i + d;\n+        concat = \"\" + c + z + d + d + c + i + l + l;\n+        concat = \"\" + c + \"S\" + S + S + c + b + l + z;\n+        concat = \"\" + f + z + S + i + S + b + l + c;\n+        concat = \"\" + i + s + c + S + f + l + z + f;\n+        concat = \"\" + i + S + \"S\" + c + z + s + i + \"S\";\n+        concat = \"\" + S + \"S\" + d + l + \"S\" + l + i + \"S\";\n+        concat = \"\" + l + d + f + c + S + i + b + s;\n+        concat = \"\" + l + l + l + z + d + s + l + z;\n+        concat = \"\" + \"S\" + i + d + l + f + S + c + z;\n+        concat = \"\" + l + S + \"S\" + d + d + l + z + s;\n+        concat = \"\" + c + i + b + d + \"S\" + \"S\" + s + f;\n+        concat = \"\" + \"S\" + f + d + c + l + S + s + i;\n+        concat = \"\" + d + d + f + f + l + l + f + b;\n+        concat = \"\" + s + c + f + d + b + s + l + b;\n+        concat = \"\" + b + f + d + s + c + z + \"S\" + z;\n+        concat = \"\" + l + S + s + \"S\" + S + S + c + i;\n+        concat = \"\" + f + s + i + f + b + S + i + z;\n+        concat = \"\" + S + f + d + z + z + s + f + s;\n+        concat = \"\" + d + \"S\" + s + i + b + d + c + i;\n+        concat = \"\" + l + z + d + d + f + d + s + i;\n+        concat = \"\" + f + s + S + i + \"S\" + \"S\" + S + S;\n+        concat = \"\" + l + \"S\" + z + f + s + l + S + z;\n+        concat = \"\" + s + \"S\" + b + \"S\" + d + z + i + d;\n+        concat = \"\" + s + c + d + f + \"S\" + s + l + f;\n+        concat = \"\" + i + s + i + i + b + l + S + f;\n+        concat = \"\" + S + \"S\" + S + l + s + l + c + \"S\";\n+        concat = \"\" + f + c + i + s + d + f + c + z;\n+        concat = \"\" + f + l + c + b + z + \"S\" + z + z;\n+        concat = \"\" + S + l + b + b + \"S\" + f + f + d;\n+        concat = \"\" + l + S + \"S\" + f + b + l + z + z;\n+        concat = \"\" + \"S\" + s + S + f + z + f + S + z;\n+        concat = \"\" + S + l + z + s + d + l + z + z;\n+        concat = \"\" + d + z + d + f + \"S\" + c + d + f;\n+        concat = \"\" + S + z + d + z + f + i + \"S\" + l;\n+        concat = \"\" + z + f + i + \"S\" + l + f + S + c;\n+        concat = \"\" + S + d + \"S\" + f + b + l + s + l;\n+        concat = \"\" + s + d + d + z + f + z + i + S;\n+        concat = \"\" + \"S\" + s + f + z + b + l + z + f;\n+        concat = \"\" + i + d + d + b + d + l + z + f;\n+        concat = \"\" + s + S + \"S\" + l + S + d + c + s;\n+        concat = \"\" + i + c + c + S + z + l + s + f;\n+        concat = \"\" + \"S\" + f + \"S\" + z + \"S\" + d + l + s;\n+        concat = \"\" + f + s + f + s + d + S + s + l;\n+        concat = \"\" + \"S\" + c + b + z + d + z + z + b;\n+        concat = \"\" + l + S + z + s + z + l + f + b;\n+        concat = \"\" + l + S + s + s + c + z + z + S;\n+        concat = \"\" + S + l + S + b + c + s + b + d;\n+        concat = \"\" + l + z + b + z + \"S\" + l + f + S;\n+        concat = \"\" + b + f + i + \"S\" + i + z + z + s;\n+        concat = \"\" + b + S + f + c + S + S + l + f;\n+        concat = \"\" + d + \"S\" + f + i + c + i + l + \"S\";\n+        concat = \"\" + z + i + S + z + S + \"S\" + s + l;\n+        concat = \"\" + \"S\" + S + b + l + \"S\" + \"S\" + s + \"S\";\n+        concat = \"\" + l + d + \"S\" + f + s + z + b + f;\n+        concat = \"\" + d + i + c + b + i + i + f + c;\n+        concat = \"\" + f + i + s + \"S\" + l + b + \"S\" + S;\n+        concat = \"\" + z + c + \"S\" + z + b + i + i + b;\n+        concat = \"\" + z + S + f + S + b + s + S + S;\n+        concat = \"\" + \"S\" + d + i + i + S + d + S + s;\n+        concat = \"\" + b + S + f + S + i + s + S + f;\n+        concat = \"\" + s + \"S\" + s + s + S + \"S\" + c + c;\n+        concat = \"\" + c + f + c + l + i + s + l + i;\n+        concat = \"\" + z + b + d + \"S\" + z + l + f + S;\n+        concat = \"\" + b + \"S\" + z + s + f + c + l + c;\n+        concat = \"\" + c + S + \"S\" + b + z + d + S + d;\n+        concat = \"\" + s + l + l + f + b + s + z + d;\n+        concat = \"\" + z + l + b + d + i + i + l + b;\n+        concat = \"\" + f + i + s + z + \"S\" + l + s + f;\n+        concat = \"\" + i + d + i + d + d + l + f + i;\n+        concat = \"\" + S + s + s + i + d + S + z + i;\n+        concat = \"\" + \"S\" + b + s + f + S + z + l + z;\n+        concat = \"\" + l + s + b + b + \"S\" + c + S + i;\n+        concat = \"\" + s + s + i + i + z + b + f + s;\n+        concat = \"\" + S + d + i + S + s + s + l + i;\n+        concat = \"\" + z + c + b + l + c + f + z + z;\n+        concat = \"\" + l + s + l + c + z + s + S + z;\n+        concat = \"\" + z + i + c + b + f + c + c + s;\n+        concat = \"\" + S + i + c + b + S + d + c + c;\n+        concat = \"\" + \"S\" + c + l + S + S + d + s + b;\n+        concat = \"\" + \"S\" + b + s + f + f + \"S\" + S + z;\n+        concat = \"\" + s + S + f + s + z + s + d + i;\n+        concat = \"\" + d + s + l + c + S + z + d + z;\n+        concat = \"\" + f + \"S\" + f + l + l + s + z + c;\n+        concat = \"\" + b + i + f + s + S + c + s + s;\n+        concat = \"\" + l + b + S + c + s + f + S + d;\n+        concat = \"\" + d + S + s + z + \"S\" + \"S\" + \"S\" + z;\n+        concat = \"\" + b + S + b + c + c + i + c + s;\n+        concat = \"\" + b + S + S + \"S\" + s + c + f + f;\n+        concat = \"\" + z + s + d + z + i + s + z + S;\n+        concat = \"\" + f + d + c + z + d + S + d + z;\n+        concat = \"\" + l + f + z + s + f + f + s + s;\n+        concat = \"\" + \"S\" + l + S + d + b + s + s + c;\n+        concat = \"\" + S + S + S + z + i + i + f + l;\n+        concat = \"\" + S + s + S + \"S\" + \"S\" + b + l + c;\n+        concat = \"\" + z + c + z + f + l + f + S + d;\n+        concat = \"\" + s + b + c + z + S + S + s + \"S\";\n+        concat = \"\" + f + z + S + d + z + i + b + z;\n+        concat = \"\" + z + b + z + d + f + d + c + S;\n+        concat = \"\" + S + i + \"S\" + i + l + c + \"S\" + \"S\";\n+        concat = \"\" + i + s + f + c + c + z + c + c;\n+        concat = \"\" + d + l + c + i + l + z + d + s;\n+        concat = \"\" + b + z + b + b + \"S\" + z + i + z;\n+        concat = \"\" + d + c + \"S\" + c + i + b + S + b;\n+        concat = \"\" + z + i + b + \"S\" + i + \"S\" + i + \"S\";\n+        concat = \"\" + d + S + i + \"S\" + S + d + c + f;\n+        concat = \"\" + f + i + d + l + c + i + \"S\" + d;\n+        concat = \"\" + \"S\" + d + S + \"S\" + \"S\" + \"S\" + S + S;\n+        concat = \"\" + c + d + b + s + l + i + l + l;\n+        concat = \"\" + s + d + b + b + f + i + z + z;\n+        concat = \"\" + z + b + z + c + f + f + b + d;\n+        concat = \"\" + c + b + i + z + S + l + d + d;\n+        concat = \"\" + z + \"S\" + z + S + i + l + z + b;\n+        concat = \"\" + S + \"S\" + \"S\" + b + s + i + d + c;\n+        concat = \"\" + l + f + \"S\" + z + S + c + S + c;\n+        concat = \"\" + s + d + i + s + l + \"S\" + l + i;\n+        concat = \"\" + S + S + c + i + \"S\" + f + z + d;\n+        concat = \"\" + c + i + S + \"S\" + l + l + s + c;\n+        concat = \"\" + l + f + \"S\" + S + S + i + i + d;\n+        concat = \"\" + d + b + i + b + c + z + c + f;\n+        concat = \"\" + l + d + z + l + l + l + f + \"S\";\n+        concat = \"\" + c + b + s + d + b + l + l + l;\n+        concat = \"\" + i + z + b + d + z + S + c + i;\n+        concat = \"\" + s + \"S\" + i + d + S + b + \"S\" + f;\n+        concat = \"\" + z + c + \"S\" + S + f + f + s + f;\n+        concat = \"\" + d + l + c + c + d + i + b + S;\n+        concat = \"\" + b + z + b + i + l + S + c + \"S\";\n+        concat = \"\" + d + f + b + d + f + c + l + l;\n+        concat = \"\" + \"S\" + \"S\" + b + i + z + z + i + f;\n+        concat = \"\" + l + f + b + s + f + d + l + S;\n+        concat = \"\" + d + l + f + S + b + c + b + i;\n+        concat = \"\" + S + l + c + s + i + \"S\" + l + s;\n+        concat = \"\" + c + c + l + z + l + i + S + z;\n+        concat = \"\" + \"S\" + \"S\" + i + d + z + l + f + b;\n+        concat = \"\" + i + c + s + i + i + z + i + b;\n+        concat = \"\" + f + c + b + d + \"S\" + f + \"S\" + s;\n+        concat = \"\" + i + c + S + d + \"S\" + \"S\" + S + c;\n+        concat = \"\" + l + s + i + c + z + b + i + l;\n+        concat = \"\" + s + l + i + b + f + \"S\" + l + \"S\";\n+        concat = \"\" + d + l + b + l + c + f + f + i;\n+        concat = \"\" + d + s + d + f + f + i + i + f;\n+        concat = \"\" + i + S + b + d + z + \"S\" + b + d;\n+        concat = \"\" + z + \"S\" + b + l + c + S + S + \"S\";\n+        concat = \"\" + s + \"S\" + \"S\" + f + d + b + l + d;\n+        concat = \"\" + b + \"S\" + \"S\" + d + d + l + d + \"S\";\n+        concat = \"\" + c + z + i + d + \"S\" + d + c + S;\n+        concat = \"\" + s + l + s + d + f + b + l + c;\n+        concat = \"\" + c + i + z + l + f + c + i + f;\n+        concat = \"\" + b + \"S\" + s + c + l + s + d + c;\n+        concat = \"\" + i + s + d + d + \"S\" + f + d + z;\n+        concat = \"\" + d + z + d + c + f + l + s + S;\n+        concat = \"\" + b + l + f + s + d + \"S\" + s + i;\n+        concat = \"\" + d + \"S\" + c + \"S\" + f + l + \"S\" + \"S\";\n+        concat = \"\" + c + c + c + \"S\" + d + d + \"S\" + z;\n+        concat = \"\" + \"S\" + S + l + \"S\" + c + z + s + c;\n+        concat = \"\" + \"S\" + s + \"S\" + \"S\" + d + s + i + \"S\";\n+        concat = \"\" + s + i + S + c + l + \"S\" + s + c;\n+        concat = \"\" + z + S + f + l + \"S\" + f + S + s;\n+        concat = \"\" + i + c + S + z + b + \"S\" + d + s;\n+        concat = \"\" + c + S + S + i + i + i + s + c;\n+        concat = \"\" + z + s + b + f + l + \"S\" + b + S;\n+        concat = \"\" + d + d + c + i + z + i + b + S;\n+        concat = \"\" + s + i + d + z + d + l + l + S;\n+        concat = \"\" + z + z + b + z + S + S + f + \"S\";\n+        concat = \"\" + c + z + l + S + b + c + c + \"S\";\n+        concat = \"\" + b + i + S + b + s + i + f + S;\n+        concat = \"\" + z + z + \"S\" + s + l + i + d + c;\n+        concat = \"\" + s + b + s + s + b + c + b + s;\n+        concat = \"\" + b + b + f + l + d + b + c + i;\n+        concat = \"\" + d + z + z + c + S + f + s + l;\n+        concat = \"\" + l + f + s + c + c + i + s + b;\n+        concat = \"\" + l + i + l + S + i + f + b + c;\n+        concat = \"\" + b + S + \"S\" + s + b + S + l + S;\n+        concat = \"\" + d + d + l + S + c + l + c + \"S\";\n+        concat = \"\" + b + i + i + d + z + f + l + b;\n+        concat = \"\" + z + f + \"S\" + z + b + z + z + b;\n+        concat = \"\" + d + \"S\" + f + z + b + S + l + i;\n+        concat = \"\" + b + c + d + c + l + l + d + b;\n+        concat = \"\" + b + l + S + b + b + s + b + b;\n+        concat = \"\" + c + c + \"S\" + i + S + b + f + c;\n+        concat = \"\" + c + b + c + f + l + i + d + f;\n+        concat = \"\" + b + l + f + S + z + l + d + z;\n+        concat = \"\" + z + s + i + i + \"S\" + b + s + b;\n+        concat = \"\" + c + i + s + S + c + \"S\" + s + c;\n+        concat = \"\" + \"S\" + z + f + l + s + c + \"S\" + S;\n+        concat = \"\" + z + \"S\" + S + s + \"S\" + b + b + l;\n+        concat = \"\" + c + S + b + s + \"S\" + c + z + l;\n+        concat = \"\" + f + c + s + l + b + c + b + i;\n+        concat = \"\" + s + i + i + c + s + z + f + s;\n+        concat = \"\" + d + f + i + s + s + c + s + b;\n+        concat = \"\" + \"S\" + i + f + b + d + b + S + s;\n+        concat = \"\" + l + z + \"S\" + c + f + d + f + l;\n+        concat = \"\" + s + c + z + \"S\" + l + c + d + c;\n+        concat = \"\" + z + d + S + s + c + \"S\" + s + \"S\";\n+        concat = \"\" + f + s + c + s + s + c + f + c;\n+        concat = \"\" + z + S + s + i + d + c + z + s;\n+        concat = \"\" + l + f + l + S + z + c + c + l;\n+        concat = \"\" + b + d + s + b + z + \"S\" + i + i;\n+        concat = \"\" + s + s + i + l + d + c + c + d;\n+        concat = \"\" + b + c + d + f + l + l + z + c;\n+        concat = \"\" + i + i + d + z + f + c + S + l;\n+        concat = \"\" + s + d + i + S + z + f + s + s;\n+        concat = \"\" + f + c + \"S\" + \"S\" + z + d + \"S\" + z;\n+        concat = \"\" + z + f + b + s + \"S\" + s + d + l;\n+        concat = \"\" + d + i + d + l + f + i + b + S;\n+        concat = \"\" + f + l + l + S + l + \"S\" + z + \"S\";\n+        concat = \"\" + z + s + b + \"S\" + l + b + S + z;\n+        concat = \"\" + z + z + c + d + b + l + f + b;\n+        concat = \"\" + S + d + b + S + s + S + i + l;\n+        concat = \"\" + f + c + f + z + f + c + d + c;\n+        concat = \"\" + b + s + f + z + i + s + d + z;\n+        concat = \"\" + f + z + \"S\" + i + \"S\" + l + b + \"S\";\n+        concat = \"\" + \"S\" + i + f + d + l + f + s + f;\n+        concat = \"\" + S + c + d + i + d + c + c + b;\n+        concat = \"\" + l + z + c + l + f + \"S\" + z + s;\n+        concat = \"\" + l + s + s + d + d + l + b + S;\n+        concat = \"\" + b + l + c + S + s + b + l + i;\n+        concat = \"\" + z + z + c + S + f + f + i + d;\n+        concat = \"\" + l + i + z + c + \"S\" + b + f + s;\n+        concat = \"\" + \"S\" + d + f + z + b + s + i + i;\n+        concat = \"\" + b + i + d + f + b + d + c + c;\n+        concat = \"\" + z + S + d + z + d + i + d + b;\n+        concat = \"\" + i + b + c + z + l + c + c + f;\n+        concat = \"\" + \"S\" + b + d + d + S + z + f + b;\n+        concat = \"\" + \"S\" + i + d + s + c + \"S\" + l + b;\n+        concat = \"\" + f + l + s + f + l + s + d + z;\n+        concat = \"\" + z + i + f + i + d + i + z + l;\n+        concat = \"\" + \"S\" + c + z + S + c + c + d + d;\n+        concat = \"\" + l + c + i + f + \"S\" + f + l + c;\n+        concat = \"\" + l + \"S\" + S + d + S + b + \"S\" + \"S\";\n+        concat = \"\" + s + f + \"S\" + s + S + i + \"S\" + f;\n+        concat = \"\" + \"S\" + d + \"S\" + b + b + S + s + b;\n+        concat = \"\" + i + i + b + f + z + f + i + d;\n+        concat = \"\" + S + d + c + d + d + \"S\" + d + S;\n+        concat = \"\" + f + i + d + S + f + s + s + s;\n+        concat = \"\" + l + f + i + i + i + s + \"S\" + z;\n+        concat = \"\" + d + f + l + l + \"S\" + f + c + S;\n+        concat = \"\" + z + i + S + i + l + z + f + i;\n+        concat = \"\" + b + f + \"S\" + S + S + d + z + S;\n+        concat = \"\" + S + l + \"S\" + l + f + b + f + i;\n+        concat = \"\" + S + z + f + b + \"S\" + \"S\" + i + l;\n+        concat = \"\" + s + d + l + S + i + s + b + l;\n+        concat = \"\" + \"S\" + f + f + c + b + s + l + b;\n+        concat = \"\" + s + i + \"S\" + z + S + \"S\" + z + f;\n+        concat = \"\" + l + d + S + c + z + S + S + b;\n+        concat = \"\" + f + z + d + \"S\" + z + z + l + c;\n+        concat = \"\" + c + b + s + c + S + b + s + d;\n+        concat = \"\" + l + b + S + d + c + c + d + f;\n+        concat = \"\" + s + b + z + f + b + \"S\" + s + c;\n+        concat = \"\" + c + d + s + S + l + i + \"S\" + S;\n+        concat = \"\" + z + d + f + \"S\" + l + d + i + i;\n+        concat = \"\" + S + b + f + \"S\" + s + b + \"S\" + c;\n+        concat = \"\" + f + c + i + z + c + i + d + z;\n+        concat = \"\" + b + d + f + i + z + \"S\" + s + b;\n+        concat = \"\" + f + b + s + c + S + s + i + d;\n+        concat = \"\" + s + i + d + c + z + z + f + S;\n+        concat = \"\" + z + f + b + z + i + b + S + i;\n+        concat = \"\" + S + c + z + z + z + S + \"S\" + z;\n+        concat = \"\" + i + l + c + \"S\" + S + \"S\" + d + c;\n+        concat = \"\" + b + z + c + z + f + s + c + b;\n+        concat = \"\" + b + i + z + c + c + l + d + z;\n+        concat = \"\" + d + l + S + i + i + l + d + b;\n+        concat = \"\" + \"S\" + f + \"S\" + d + i + b + l + S;\n+        concat = \"\" + z + s + d + s + s + z + S + f;\n+        concat = \"\" + i + b + z + s + S + l + \"S\" + l;\n+        concat = \"\" + c + l + i + f + l + b + z + s;\n+        concat = \"\" + f + s + c + \"S\" + i + b + f + \"S\";\n+        concat = \"\" + z + i + S + b + c + l + i + \"S\";\n+        concat = \"\" + z + z + f + \"S\" + d + b + f + \"S\";\n+        concat = \"\" + f + \"S\" + l + z + z + d + S + s;\n+        concat = \"\" + \"S\" + b + l + d + i + l + i + b;\n+        concat = \"\" + z + f + f + z + f + l + b + c;\n+        concat = \"\" + d + z + z + c + \"S\" + \"S\" + S + z;\n+        concat = \"\" + z + d + i + S + d + i + d + \"S\";\n+        concat = \"\" + f + s + l + z + b + b + b + z;\n+        concat = \"\" + S + d + d + s + d + d + l + b;\n+        concat = \"\" + z + s + d + S + d + c + \"S\" + d;\n+        concat = \"\" + s + \"S\" + l + f + c + i + l + z;\n+        concat = \"\" + \"S\" + \"S\" + s + l + \"S\" + S + c + c;\n+        concat = \"\" + S + S + l + b + z + b + f + z;\n+        concat = \"\" + S + f + s + S + d + l + l + d;\n+        concat = \"\" + d + f + i + i + l + z + \"S\" + d;\n+        concat = \"\" + l + f + \"S\" + l + b + z + f + c;\n+        concat = \"\" + s + S + \"S\" + b + \"S\" + \"S\" + l + c;\n+        concat = \"\" + d + z + s + f + S + c + z + f;\n+        concat = \"\" + c + z + c + s + l + S + i + l;\n+        concat = \"\" + \"S\" + S + z + l + c + f + S + b;\n+        concat = \"\" + d + S + c + b + z + f + f + c;\n+        concat = \"\" + l + z + c + z + \"S\" + f + b + c;\n+        concat = \"\" + l + S + c + l + s + \"S\" + i + S;\n+        concat = \"\" + \"S\" + d + l + z + S + b + b + f;\n+        concat = \"\" + c + l + f + b + z + S + d + b;\n+        concat = \"\" + z + \"S\" + i + d + f + l + b + f;\n+        concat = \"\" + d + \"S\" + z + z + \"S\" + S + z + c;\n+        concat = \"\" + \"S\" + S + d + c + \"S\" + i + S + S;\n+        concat = \"\" + \"S\" + \"S\" + s + f + d + s + S + f;\n+        concat = \"\" + z + i + l + i + \"S\" + c + z + b;\n+        concat = \"\" + S + S + z + z + i + b + \"S\" + l;\n+        concat = \"\" + l + \"S\" + l + i + s + s + s + d;\n+        concat = \"\" + l + \"S\" + z + b + l + f + c + f;\n+        concat = \"\" + b + S + z + l + i + i + z + s;\n+        concat = \"\" + z + b + d + S + i + \"S\" + f + l;\n+        concat = \"\" + l + f + l + f + d + S + d + i;\n+        concat = \"\" + b + c + b + f + z + s + S + d;\n+        concat = \"\" + z + S + s + f + d + l + \"S\" + s;\n+        concat = \"\" + s + f + c + l + z + S + i + c;\n+        concat = \"\" + d + \"S\" + s + c + i + d + d + d;\n+        concat = \"\" + z + l + d + s + i + b + c + l;\n+        concat = \"\" + f + f + S + z + b + l + \"S\" + l;\n+        concat = \"\" + z + b + b + d + b + c + f + z;\n+        concat = \"\" + l + c + l + f + S + b + f + \"S\";\n+        concat = \"\" + f + c + f + \"S\" + f + c + d + i;\n+        concat = \"\" + d + S + l + s + b + d + S + z;\n+        concat = \"\" + z + i + \"S\" + c + s + l + d + s;\n+        concat = \"\" + d + \"S\" + i + d + i + b + z + s;\n+        concat = \"\" + \"S\" + f + f + f + S + S + f + s;\n+        concat = \"\" + \"S\" + c + \"S\" + b + S + z + i + z;\n+        concat = \"\" + \"S\" + c + s + l + S + b + S + s;\n+        concat = \"\" + i + f + S + s + z + c + i + b;\n+        concat = \"\" + b + f + \"S\" + c + S + \"S\" + f + f;\n+        concat = \"\" + S + z + s + f + c + d + c + S;\n+        concat = \"\" + i + z + S + \"S\" + l + s + l + l;\n+        concat = \"\" + l + l + c + f + i + b + l + c;\n+        concat = \"\" + s + b + l + f + s + b + b + i;\n+        concat = \"\" + c + c + z + b + i + b + f + l;\n+        concat = \"\" + S + c + c + b + d + c + l + S;\n+        concat = \"\" + d + z + \"S\" + z + i + d + S + l;\n+        concat = \"\" + \"S\" + s + z + d + s + d + b + d;\n+        concat = \"\" + S + c + \"S\" + s + b + d + s + c;\n+        concat = \"\" + c + \"S\" + i + b + l + c + S + d;\n+        concat = \"\" + l + z + s + b + l + b + f + b;\n+        concat = \"\" + z + S + s + i + b + S + s + z;\n+        concat = \"\" + z + d + f + c + S + f + f + f;\n+        concat = \"\" + c + s + c + l + \"S\" + S + s + i;\n+        concat = \"\" + s + d + S + d + \"S\" + l + s + f;\n+        concat = \"\" + \"S\" + i + i + d + b + b + b + b;\n+        concat = \"\" + c + l + i + \"S\" + c + s + c + f;\n+        concat = \"\" + \"S\" + \"S\" + \"S\" + i + l + c + d + s;\n+        concat = \"\" + d + \"S\" + l + s + f + z + \"S\" + c;\n+        concat = \"\" + d + f + z + s + b + l + f + z;\n+        concat = \"\" + l + l + c + i + i + d + z + z;\n+        concat = \"\" + z + z + s + s + b + c + f + S;\n+        concat = \"\" + b + \"S\" + i + z + \"S\" + \"S\" + b + d;\n+        concat = \"\" + S + \"S\" + s + S + S + i + b + S;\n+        concat = \"\" + l + d + z + d + c + c + \"S\" + c;\n+        concat = \"\" + l + c + d + b + b + d + d + b;\n+        concat = \"\" + s + z + c + i + c + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + s + s + \"S\" + b + z + c + d + S;\n+        concat = \"\" + c + S + f + f + S + l + f + \"S\";\n+        concat = \"\" + \"S\" + b + f + c + b + f + f + \"S\";\n+        concat = \"\" + s + S + d + \"S\" + S + l + b + f;\n+        concat = \"\" + b + c + l + b + f + l + b + z;\n+        concat = \"\" + i + s + s + S + c + l + l + S;\n+        concat = \"\" + i + b + f + z + z + S + z + l;\n+        concat = \"\" + c + d + f + d + S + \"S\" + l + s;\n+        concat = \"\" + s + S + b + c + z + z + i + s;\n+        concat = \"\" + S + z + d + S + s + c + b + s;\n+        concat = \"\" + b + d + c + z + l + S + z + b;\n+        concat = \"\" + b + i + f + i + \"S\" + b + s + f;\n+        concat = \"\" + b + S + z + c + z + z + b + z;\n+        concat = \"\" + l + d + d + c + \"S\" + \"S\" + c + f;\n+        concat = \"\" + l + s + c + l + f + f + \"S\" + i;\n+        concat = \"\" + S + z + z + S + c + S + f + S;\n+        concat = \"\" + S + c + c + b + c + S + z + f;\n+        concat = \"\" + d + s + s + i + z + c + d + s;\n+        concat = \"\" + s + c + b + z + f + S + z + S;\n+        concat = \"\" + S + z + l + i + s + c + s + z;\n+        concat = \"\" + i + l + \"S\" + s + b + f + l + z;\n+        concat = \"\" + f + i + l + c + l + l + i + z;\n+        concat = \"\" + b + \"S\" + l + d + l + i + c + S;\n+        concat = \"\" + s + S + S + f + s + S + l + d;\n+        concat = \"\" + l + l + f + d + c + s + d + c;\n+        concat = \"\" + b + d + S + l + z + c + i + z;\n+        concat = \"\" + z + f + \"S\" + z + d + z + z + f;\n+        concat = \"\" + s + s + d + l + S + z + d + \"S\";\n+        concat = \"\" + z + \"S\" + S + b + S + f + s + \"S\";\n+        concat = \"\" + c + \"S\" + c + z + b + l + l + f;\n+        concat = \"\" + S + S + S + d + i + z + s + d;\n+        concat = \"\" + c + c + l + f + c + f + i + f;\n+        concat = \"\" + l + c + f + i + b + f + i + f;\n+        concat = \"\" + l + s + b + \"S\" + z + f + f + z;\n+        concat = \"\" + s + z + z + i + d + s + b + z;\n+        concat = \"\" + c + \"S\" + i + \"S\" + \"S\" + f + S + l;\n+        concat = \"\" + s + c + s + d + c + S + i + s;\n+        concat = \"\" + z + S + f + f + s + z + s + s;\n+        concat = \"\" + \"S\" + S + d + l + \"S\" + f + s + z;\n+        concat = \"\" + i + l + b + l + d + i + i + b;\n+        concat = \"\" + z + d + S + c + f + S + \"S\" + S;\n+        concat = \"\" + S + l + f + l + d + i + \"S\" + z;\n+        concat = \"\" + d + \"S\" + z + z + b + z + i + l;\n+        concat = \"\" + z + c + d + s + c + b + \"S\" + S;\n+        concat = \"\" + f + S + l + f + b + f + \"S\" + S;\n+        concat = \"\" + s + S + c + l + d + S + l + z;\n+        concat = \"\" + d + i + i + i + b + l + d + d;\n+        concat = \"\" + l + S + b + s + l + s + d + d;\n+        concat = \"\" + b + S + l + z + f + S + c + i;\n+        concat = \"\" + f + \"S\" + z + d + z + s + d + f;\n+        concat = \"\" + b + s + d + c + c + d + z + \"S\";\n+        concat = \"\" + z + \"S\" + i + f + b + c + \"S\" + l;\n+        concat = \"\" + \"S\" + S + z + c + f + i + b + c;\n+        concat = \"\" + \"S\" + z + d + s + f + f + \"S\" + s;\n+        concat = \"\" + d + \"S\" + c + c + s + S + z + d;\n+        concat = \"\" + S + s + f + \"S\" + f + \"S\" + d + i;\n+        concat = \"\" + S + s + s + i + z + c + f + s;\n+        concat = \"\" + c + c + i + f + z + f + c + f;\n+        concat = \"\" + f + s + d + S + i + b + d + s;\n+        concat = \"\" + d + z + d + \"S\" + l + z + f + d;\n+        concat = \"\" + z + b + s + d + \"S\" + f + f + c;\n+        concat = \"\" + S + i + l + d + z + i + f + \"S\";\n+        concat = \"\" + \"S\" + c + i + d + z + S + i + S;\n+        concat = \"\" + S + \"S\" + b + \"S\" + s + S + f + d;\n+        concat = \"\" + S + z + b + \"S\" + i + c + i + \"S\";\n+        concat = \"\" + i + l + c + d + d + f + s + S;\n+        concat = \"\" + l + i + f + s + d + b + S + b;\n+        concat = \"\" + b + d + S + z + b + c + d + l;\n+        concat = \"\" + f + s + i + d + f + i + z + c;\n+        concat = \"\" + s + c + l + c + c + l + d + z;\n+        concat = \"\" + S + i + z + b + S + d + b + i;\n+        concat = \"\" + f + z + l + i + z + d + c + l;\n+        concat = \"\" + c + b + S + \"S\" + \"S\" + s + S + f;\n+        concat = \"\" + i + \"S\" + f + \"S\" + l + z + S + b;\n+        concat = \"\" + s + S + l + i + S + \"S\" + f + i;\n+        concat = \"\" + i + c + l + \"S\" + l + c + c + z;\n+        concat = \"\" + i + s + z + S + S + i + S + l;\n+        concat = \"\" + \"S\" + f + S + c + f + S + d + s;\n+        concat = \"\" + \"S\" + z + c + S + \"S\" + \"S\" + d + b;\n+        concat = \"\" + s + l + z + b + z + d + i + b;\n+        concat = \"\" + \"S\" + f + z + s + d + S + s + i;\n+        concat = \"\" + f + c + f + d + S + d + S + \"S\";\n+        concat = \"\" + l + z + S + \"S\" + S + i + z + c;\n+        concat = \"\" + i + z + z + i + i + f + d + \"S\";\n+        concat = \"\" + S + b + c + \"S\" + S + f + s + b;\n+        concat = \"\" + S + c + s + s + f + b + \"S\" + s;\n+        concat = \"\" + S + s + d + c + \"S\" + d + d + l;\n+        concat = \"\" + i + S + \"S\" + l + l + l + S + d;\n+        concat = \"\" + z + l + z + c + c + i + l + b;\n+        concat = \"\" + s + S + b + c + z + c + \"S\" + s;\n+        concat = \"\" + l + d + f + d + b + i + c + l;\n+        concat = \"\" + i + l + \"S\" + c + l + \"S\" + c + l;\n+        concat = \"\" + i + S + z + \"S\" + f + l + c + z;\n+        concat = \"\" + c + S + l + z + b + d + s + s;\n+        concat = \"\" + l + \"S\" + S + l + b + b + c + z;\n+        concat = \"\" + b + \"S\" + c + c + s + f + i + z;\n+        concat = \"\" + z + b + d + b + \"S\" + l + S + z;\n+        concat = \"\" + s + f + i + S + l + S + \"S\" + b;\n+        concat = \"\" + \"S\" + c + b + S + s + b + z + s;\n+        concat = \"\" + l + c + z + d + z + z + c + z;\n+        concat = \"\" + l + \"S\" + z + c + l + z + b + l;\n+        concat = \"\" + d + \"S\" + S + c + b + d + c + d;\n+        concat = \"\" + d + s + \"S\" + d + z + c + l + i;\n+        concat = \"\" + s + l + c + f + f + \"S\" + d + \"S\";\n+        concat = \"\" + f + s + d + z + z + d + \"S\" + s;\n+        concat = \"\" + z + d + s + i + d + s + d + s;\n+        concat = \"\" + c + z + f + i + i + i + d + f;\n+        concat = \"\" + l + l + i + S + d + c + z + z;\n+        concat = \"\" + \"S\" + l + l + b + z + z + S + c;\n+        concat = \"\" + l + S + l + S + b + c + S + b;\n+        concat = \"\" + b + b + b + c + b + c + f + c;\n+        concat = \"\" + l + d + \"S\" + b + d + \"S\" + b + S;\n+        concat = \"\" + b + c + f + S + z + l + i + \"S\";\n+        concat = \"\" + l + S + s + b + l + b + b + l;\n+        concat = \"\" + d + l + l + s + S + S + d + d;\n+        concat = \"\" + i + s + c + S + l + \"S\" + i + c;\n+        concat = \"\" + b + l + f + b + c + f + b + c;\n+        concat = \"\" + b + l + b + z + i + b + d + i;\n+        concat = \"\" + d + b + l + \"S\" + c + S + d + s;\n+        concat = \"\" + z + l + s + l + d + d + s + z;\n+        concat = \"\" + i + z + c + l + f + \"S\" + d + \"S\";\n+        concat = \"\" + c + s + f + s + z + b + S + z;\n+        concat = \"\" + \"S\" + d + c + l + d + z + S + f;\n+        concat = \"\" + \"S\" + i + S + s + s + z + f + l;\n+        concat = \"\" + z + d + z + S + S + l + S + f;\n+        concat = \"\" + S + b + b + d + l + l + S + S;\n+        concat = \"\" + S + s + z + \"S\" + c + i + S + s;\n+        concat = \"\" + l + d + S + c + \"S\" + l + c + f;\n+        concat = \"\" + c + d + c + s + f + c + l + i;\n+        concat = \"\" + \"S\" + \"S\" + f + d + l + l + S + S;\n+        concat = \"\" + z + b + z + z + \"S\" + l + i + s;\n+        concat = \"\" + z + z + \"S\" + z + f + \"S\" + s + b;\n+        concat = \"\" + s + l + f + s + b + b + c + d;\n+        concat = \"\" + z + \"S\" + f + S + s + s + S + b;\n+        concat = \"\" + z + i + l + S + s + b + b + \"S\";\n+        concat = \"\" + c + c + s + z + b + i + l + z;\n+        concat = \"\" + s + i + s + c + l + d + f + b;\n+        concat = \"\" + i + f + s + c + i + s + S + s;\n+        concat = \"\" + z + c + \"S\" + s + S + f + f + b;\n+        concat = \"\" + l + f + z + \"S\" + s + S + i + i;\n+        concat = \"\" + \"S\" + s + d + S + s + s + b + b;\n+        concat = \"\" + \"S\" + S + \"S\" + d + \"S\" + d + z + i;\n+        concat = \"\" + f + \"S\" + d + i + s + d + s + d;\n+        concat = \"\" + f + b + S + \"S\" + s + b + z + \"S\";\n+        concat = \"\" + S + s + S + \"S\" + \"S\" + S + d + i;\n+        concat = \"\" + \"S\" + i + i + b + d + l + S + S;\n+        concat = \"\" + S + d + f + b + d + S + b + s;\n+        concat = \"\" + b + s + c + z + \"S\" + d + i + f;\n+        concat = \"\" + S + f + z + \"S\" + c + d + \"S\" + b;\n+        concat = \"\" + z + l + s + z + d + i + c + S;\n+        concat = \"\" + d + z + S + \"S\" + b + d + z + z;\n+        concat = \"\" + l + \"S\" + f + \"S\" + d + c + z + b;\n+        concat = \"\" + l + b + z + f + S + s + s + \"S\";\n+        concat = \"\" + i + S + b + s + d + \"S\" + S + z;\n+        concat = \"\" + c + S + f + z + b + s + S + \"S\";\n+        concat = \"\" + i + z + \"S\" + d + s + \"S\" + z + i;\n+        concat = \"\" + z + s + d + s + S + z + s + \"S\";\n+        concat = \"\" + \"S\" + s + S + d + S + S + l + S;\n+        concat = \"\" + s + i + s + s + f + S + s + d;\n+        concat = \"\" + c + z + s + S + f + l + S + f;\n+        concat = \"\" + b + \"S\" + d + b + \"S\" + f + d + z;\n+        concat = \"\" + i + f + \"S\" + l + \"S\" + i + b + c;\n+        concat = \"\" + z + i + s + z + d + b + l + l;\n+        concat = \"\" + l + b + b + b + S + d + b + d;\n+        concat = \"\" + z + i + S + \"S\" + b + i + c + s;\n+        concat = \"\" + S + d + f + S + i + b + \"S\" + f;\n+        concat = \"\" + z + b + c + i + d + b + \"S\" + S;\n+        concat = \"\" + i + S + b + S + S + d + S + s;\n+        concat = \"\" + i + s + \"S\" + \"S\" + c + f + \"S\" + z;\n+        concat = \"\" + s + l + f + l + \"S\" + \"S\" + d + d;\n+        concat = \"\" + l + s + \"S\" + f + d + b + l + i;\n+        concat = \"\" + l + f + l + i + c + s + i + b;\n+        concat = \"\" + b + S + s + s + i + d + b + \"S\";\n+        concat = \"\" + S + s + b + l + \"S\" + l + s + l;\n+        concat = \"\" + b + f + b + l + \"S\" + l + c + b;\n+        concat = \"\" + l + l + z + S + z + S + c + b;\n+        concat = \"\" + z + f + c + f + b + s + S + \"S\";\n+        concat = \"\" + f + S + S + i + l + b + s + f;\n+        concat = \"\" + l + f + l + z + b + \"S\" + f + d;\n+        concat = \"\" + s + d + c + z + d + d + S + l;\n+        concat = \"\" + S + b + i + i + S + s + d + c;\n+        concat = \"\" + b + c + d + \"S\" + d + i + \"S\" + c;\n+        concat = \"\" + s + c + i + \"S\" + c + f + b + d;\n+        concat = \"\" + l + s + l + S + d + z + b + d;\n+        concat = \"\" + \"S\" + b + s + z + \"S\" + i + c + b;\n+        concat = \"\" + f + c + f + z + c + i + S + f;\n+        concat = \"\" + c + \"S\" + f + s + i + f + l + s;\n+        concat = \"\" + b + s + b + b + f + b + f + s;\n+        concat = \"\" + f + i + c + d + S + d + b + z;\n+        concat = \"\" + b + d + l + b + S + b + l + b;\n+        concat = \"\" + \"S\" + s + i + \"S\" + s + d + c + S;\n+        concat = \"\" + f + \"S\" + i + l + z + c + b + i;\n+        concat = \"\" + c + s + z + \"S\" + i + b + d + i;\n+        concat = \"\" + \"S\" + f + s + b + c + i + i + S;\n+        concat = \"\" + c + c + z + s + i + c + c + i;\n+        concat = \"\" + d + l + c + i + b + z + c + s;\n+        concat = \"\" + i + b + f + f + l + f + i + b;\n+        concat = \"\" + z + S + s + S + d + l + d + s;\n+        concat = \"\" + l + s + i + b + z + i + b + c;\n+        concat = \"\" + l + z + l + b + z + \"S\" + d + d;\n+        concat = \"\" + s + z + z + z + l + \"S\" + l + b;\n+        concat = \"\" + \"S\" + c + i + l + c + c + d + d;\n+        concat = \"\" + z + \"S\" + z + \"S\" + f + S + c + l;\n+        concat = \"\" + f + f + z + b + f + l + d + c;\n+        concat = \"\" + f + \"S\" + d + i + \"S\" + s + s + s;\n+        concat = \"\" + c + s + c + z + b + S + d + i;\n+        concat = \"\" + S + s + z + d + d + S + i + d;\n+        concat = \"\" + l + s + c + b + d + z + b + i;\n+        concat = \"\" + s + i + S + S + c + \"S\" + d + f;\n+        concat = \"\" + S + c + S + \"S\" + S + \"S\" + z + l;\n+        concat = \"\" + d + i + i + i + s + c + l + b;\n+        concat = \"\" + S + s + b + S + b + c + l + d;\n+        concat = \"\" + c + c + s + d + l + b + s + d;\n+        concat = \"\" + \"S\" + b + S + d + l + z + S + z;\n+        concat = \"\" + \"S\" + z + c + z + S + b + c + S;\n+        concat = \"\" + s + \"S\" + c + \"S\" + z + l + l + s;\n+        concat = \"\" + \"S\" + c + l + b + \"S\" + c + f + l;\n+        concat = \"\" + \"S\" + c + b + f + \"S\" + b + i + f;\n+        concat = \"\" + c + z + d + i + z + s + l + f;\n+        concat = \"\" + S + z + z + S + l + S + S + b;\n+        concat = \"\" + S + s + d + c + s + b + c + d;\n+        concat = \"\" + l + S + i + i + s + d + S + i;\n+        concat = \"\" + \"S\" + s + s + s + f + c + d + c;\n+        concat = \"\" + i + S + c + d + c + c + S + i;\n+        concat = \"\" + b + S + z + S + b + s + c + l;\n+        concat = \"\" + d + z + s + s + i + c + d + c;\n+        concat = \"\" + c + d + i + z + S + s + l + d;\n+        concat = \"\" + b + f + s + \"S\" + b + S + S + S;\n+        concat = \"\" + d + f + d + s + z + f + c + s;\n+        concat = \"\" + c + l + \"S\" + z + l + i + d + l;\n+        concat = \"\" + \"S\" + b + \"S\" + s + \"S\" + c + \"S\" + c;\n+        concat = \"\" + b + f + c + \"S\" + d + d + d + f;\n+        concat = \"\" + S + f + z + z + z + b + b + c;\n+        concat = \"\" + f + s + i + s + S + z + l + s;\n+        concat = \"\" + b + b + d + S + z + s + l + c;\n+        concat = \"\" + d + i + d + b + i + \"S\" + c + \"S\";\n+        concat = \"\" + c + s + \"S\" + i + z + s + S + i;\n+        concat = \"\" + b + f + f + b + S + c + f + s;\n+        concat = \"\" + b + c + i + l + S + S + l + f;\n+        concat = \"\" + f + c + f + c + \"S\" + b + i + l;\n+        concat = \"\" + f + l + i + l + l + l + i + d;\n+        concat = \"\" + \"S\" + s + i + s + i + b + f + f;\n+        concat = \"\" + f + \"S\" + z + \"S\" + \"S\" + c + s + s;\n+        concat = \"\" + f + i + l + b + \"S\" + S + s + s;\n+        concat = \"\" + s + f + f + f + l + c + S + b;\n+        concat = \"\" + S + d + i + i + \"S\" + z + d + f;\n+        concat = \"\" + z + c + S + c + S + c + i + z;\n+        concat = \"\" + d + S + i + s + f + \"S\" + l + s;\n+        concat = \"\" + c + b + f + z + s + l + z + c;\n+        concat = \"\" + b + c + c + \"S\" + S + S + d + b;\n+        concat = \"\" + s + f + \"S\" + \"S\" + z + l + d + d;\n+        concat = \"\" + z + i + i + z + s + c + c + f;\n+        concat = \"\" + s + d + d + \"S\" + \"S\" + f + f + \"S\";\n+        concat = \"\" + i + S + i + i + l + l + \"S\" + z;\n+        concat = \"\" + l + d + b + d + S + S + l + f;\n+        concat = \"\" + f + i + \"S\" + b + i + i + c + d;\n+        concat = \"\" + z + z + i + i + c + d + l + \"S\";\n+        concat = \"\" + s + d + b + l + f + d + z + f;\n+        concat = \"\" + d + c + \"S\" + d + \"S\" + l + d + i;\n+        concat = \"\" + l + s + c + \"S\" + l + l + i + f;\n+        concat = \"\" + s + s + i + \"S\" + i + s + b + i;\n+        concat = \"\" + \"S\" + c + s + d + i + s + S + d;\n+        concat = \"\" + b + l + S + b + b + i + d + b;\n+        concat = \"\" + c + b + S + b + \"S\" + b + b + c;\n+        concat = \"\" + d + \"S\" + S + s + c + i + z + \"S\";\n+        concat = \"\" + d + S + z + c + c + c + z + f;\n+        concat = \"\" + s + z + d + f + f + i + f + f;\n+        concat = \"\" + d + c + l + S + s + S + i + \"S\";\n+        concat = \"\" + S + f + s + s + l + b + s + z;\n+        concat = \"\" + c + l + f + S + i + b + i + i;\n+        concat = \"\" + l + b + b + s + c + z + f + f;\n+        concat = \"\" + f + c + s + S + z + \"S\" + d + b;\n+        concat = \"\" + i + S + l + s + z + s + s + l;\n+        concat = \"\" + S + z + f + s + c + b + c + s;\n+        concat = \"\" + c + b + z + s + c + l + s + i;\n+        concat = \"\" + f + l + s + s + S + s + i + S;\n+        concat = \"\" + s + s + b + i + d + l + d + b;\n+        concat = \"\" + S + \"S\" + s + s + s + d + d + b;\n+        concat = \"\" + b + \"S\" + \"S\" + b + S + \"S\" + c + b;\n+        concat = \"\" + d + S + c + f + \"S\" + \"S\" + z + s;\n+        concat = \"\" + i + d + i + l + c + l + d + S;\n+        concat = \"\" + l + \"S\" + S + d + S + b + c + f;\n+        concat = \"\" + l + f + c + d + d + s + d + c;\n+        concat = \"\" + l + l + z + l + f + l + \"S\" + S;\n+        concat = \"\" + s + \"S\" + d + f + s + l + c + f;\n+        concat = \"\" + \"S\" + d + s + i + s + \"S\" + s + c;\n+        concat = \"\" + \"S\" + S + \"S\" + z + d + f + S + d;\n+        concat = \"\" + d + \"S\" + i + f + z + c + l + \"S\";\n+        concat = \"\" + z + b + z + \"S\" + S + f + \"S\" + s;\n+        concat = \"\" + d + z + c + c + \"S\" + \"S\" + s + c;\n+        concat = \"\" + i + i + d + f + c + z + c + \"S\";\n+        concat = \"\" + b + S + S + f + s + b + d + b;\n+        concat = \"\" + f + i + d + \"S\" + l + s + c + f;\n+        concat = \"\" + i + c + f + s + z + S + f + z;\n+        concat = \"\" + z + b + c + S + b + \"S\" + s + s;\n+        concat = \"\" + \"S\" + s + d + i + i + \"S\" + S + l;\n+        concat = \"\" + b + b + b + c + \"S\" + S + i + f;\n+        concat = \"\" + b + b + b + d + S + z + z + f;\n+        concat = \"\" + c + z + d + s + z + l + b + b;\n+        concat = \"\" + b + d + z + s + b + l + l + s;\n+        concat = \"\" + \"S\" + s + z + b + z + S + b + s;\n+        concat = \"\" + z + l + d + d + f + f + s + z;\n+        concat = \"\" + f + b + b + z + s + i + z + l;\n+        concat = \"\" + f + i + \"S\" + l + S + d + c + i;\n+        concat = \"\" + \"S\" + i + b + c + d + S + b + \"S\";\n+        concat = \"\" + s + z + l + S + S + f + S + d;\n+        concat = \"\" + \"S\" + s + d + i + c + \"S\" + S + z;\n+        concat = \"\" + d + l + S + s + z + c + i + c;\n+        concat = \"\" + i + i + f + l + i + b + S + d;\n+        concat = \"\" + d + s + b + l + z + c + \"S\" + z;\n+        concat = \"\" + f + s + c + i + c + z + f + l;\n+        concat = \"\" + S + l + i + s + f + i + S + f;\n+        concat = \"\" + s + f + d + s + c + b + f + l;\n+        concat = \"\" + f + l + b + \"S\" + S + \"S\" + c + \"S\";\n+        concat = \"\" + l + i + d + l + z + \"S\" + b + b;\n+        concat = \"\" + \"S\" + i + s + s + s + b + z + c;\n+        concat = \"\" + l + i + b + s + l + \"S\" + c + c;\n+        concat = \"\" + d + s + f + \"S\" + f + i + S + b;\n+        concat = \"\" + S + \"S\" + d + b + b + d + z + z;\n+        concat = \"\" + f + s + i + l + f + d + b + s;\n+        concat = \"\" + c + b + s + z + \"S\" + i + s + f;\n+        concat = \"\" + f + i + z + S + s + S + s + l;\n+        concat = \"\" + l + z + \"S\" + l + c + l + l + \"S\";\n+        concat = \"\" + f + c + z + S + c + z + s + i;\n+        concat = \"\" + f + c + l + s + l + s + f + b;\n+        concat = \"\" + d + l + f + \"S\" + \"S\" + d + i + i;\n+        concat = \"\" + z + c + b + s + l + \"S\" + c + s;\n+        concat = \"\" + l + b + d + s + S + z + s + i;\n+        concat = \"\" + f + f + z + b + i + S + d + l;\n+        concat = \"\" + l + S + c + d + z + s + S + d;\n+        concat = \"\" + d + S + S + S + l + d + \"S\" + s;\n+        concat = \"\" + d + c + d + f + f + l + S + s;\n+        concat = \"\" + d + f + S + b + f + i + z + \"S\";\n+        concat = \"\" + i + c + z + S + z + s + f + s;\n+        concat = \"\" + d + l + c + \"S\" + \"S\" + c + b + \"S\";\n+        concat = \"\" + f + f + c + c + s + l + c + S;\n+        concat = \"\" + c + f + f + z + s + z + b + z;\n+        concat = \"\" + d + S + b + f + c + d + S + d;\n+        concat = \"\" + z + z + S + d + S + \"S\" + c + l;\n+        concat = \"\" + z + c + S + b + c + i + c + \"S\";\n+        concat = \"\" + l + s + s + z + f + f + d + c;\n+        concat = \"\" + c + \"S\" + S + b + b + i + l + f;\n+        concat = \"\" + b + \"S\" + c + s + b + \"S\" + l + s;\n+        concat = \"\" + f + l + c + f + l + z + \"S\" + S;\n+        concat = \"\" + S + S + l + s + z + b + c + i;\n+        concat = \"\" + d + l + f + f + S + \"S\" + S + d;\n+        concat = \"\" + l + c + S + i + b + s + f + c;\n+        concat = \"\" + d + f + f + b + f + s + f + S;\n+        concat = \"\" + d + l + l + b + d + f + \"S\" + d;\n+        concat = \"\" + f + c + b + s + z + i + l + l;\n+        concat = \"\" + \"S\" + z + l + c + z + f + i + \"S\";\n+        concat = \"\" + i + z + f + i + S + c + \"S\" + i;\n+        concat = \"\" + z + f + \"S\" + S + s + f + d + d;\n+        concat = \"\" + b + d + s + i + z + s + s + c;\n+        concat = \"\" + \"S\" + d + s + c + \"S\" + l + i + c;\n+        concat = \"\" + s + d + b + c + b + s + d + z;\n+        concat = \"\" + c + d + s + l + b + b + S + S;\n+        concat = \"\" + \"S\" + z + s + l + f + s + c + i;\n+        concat = \"\" + l + l + S + z + d + l + S + S;\n+        concat = \"\" + b + f + l + b + s + z + c + f;\n+        concat = \"\" + \"S\" + b + s + s + f + z + d + f;\n+        concat = \"\" + f + s + z + S + s + \"S\" + z + c;\n+        concat = \"\" + \"S\" + s + \"S\" + s + b + S + b + b;\n+        concat = \"\" + S + S + S + f + c + f + s + s;\n+        concat = \"\" + f + i + i + l + c + i + s + z;\n+        concat = \"\" + c + i + S + b + s + b + b + z;\n+        concat = \"\" + s + S + c + b + b + l + S + f;\n+        concat = \"\" + \"S\" + s + d + i + i + i + \"S\" + s;\n+        concat = \"\" + S + l + d + i + i + i + s + \"S\";\n+        concat = \"\" + b + z + S + \"S\" + i + l + c + i;\n+        concat = \"\" + c + z + S + f + f + c + z + z;\n+        concat = \"\" + i + \"S\" + S + \"S\" + l + b + \"S\" + l;\n+        concat = \"\" + i + s + z + l + \"S\" + S + \"S\" + z;\n+        concat = \"\" + l + d + s + l + z + c + c + c;\n+        concat = \"\" + c + l + l + \"S\" + b + c + l + b;\n+        concat = \"\" + i + f + b + l + s + z + i + \"S\";\n+        concat = \"\" + c + s + S + c + i + f + S + s;\n+        concat = \"\" + \"S\" + i + d + z + S + i + s + b;\n+        concat = \"\" + i + \"S\" + i + f + b + l + l + i;\n+        concat = \"\" + \"S\" + \"S\" + s + l + f + d + z + c;\n+        concat = \"\" + d + i + s + i + z + d + S + s;\n+        concat = \"\" + S + f + z + l + c + S + l + s;\n+        concat = \"\" + \"S\" + \"S\" + i + l + d + l + \"S\" + c;\n+        concat = \"\" + f + z + f + z + S + s + d + i;\n+        concat = \"\" + b + f + f + b + z + b + d + d;\n+        concat = \"\" + S + z + s + S + b + S + S + \"S\";\n+        concat = \"\" + S + d + i + i + s + i + l + b;\n+        concat = \"\" + c + d + \"S\" + d + S + b + d + l;\n+        concat = \"\" + b + f + d + l + i + d + l + z;\n+        concat = \"\" + l + c + l + b + c + z + c + l;\n+        concat = \"\" + s + z + S + S + b + S + c + b;\n+        concat = \"\" + c + c + d + f + d + \"S\" + d + i;\n+        concat = \"\" + z + s + d + i + b + z + d + d;\n+        concat = \"\" + \"S\" + i + \"S\" + f + d + S + \"S\" + f;\n+        concat = \"\" + i + z + s + S + c + d + d + f;\n+        concat = \"\" + l + s + c + b + s + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + i + d + f + l + s + S + f + b;\n+        concat = \"\" + i + d + \"S\" + f + s + d + s + f;\n+        concat = \"\" + z + f + i + \"S\" + l + S + \"S\" + f;\n+        concat = \"\" + l + d + S + s + s + s + s + d;\n+        concat = \"\" + z + b + b + i + i + c + z + z;\n+        concat = \"\" + c + l + c + i + S + c + s + c;\n+        concat = \"\" + S + \"S\" + s + s + c + b + d + i;\n+        concat = \"\" + i + b + d + z + l + s + l + i;\n+        concat = \"\" + i + b + b + b + i + b + b + d;\n+        concat = \"\" + f + i + d + l + l + b + s + z;\n+        concat = \"\" + S + f + S + \"S\" + c + s + f + \"S\";\n+        concat = \"\" + c + \"S\" + d + \"S\" + c + S + c + \"S\";\n+        concat = \"\" + z + \"S\" + f + b + i + l + c + i;\n+        concat = \"\" + l + c + b + l + f + s + S + l;\n+        concat = \"\" + c + S + S + d + z + S + \"S\" + z;\n+        concat = \"\" + d + i + d + \"S\" + \"S\" + s + s + S;\n+        concat = \"\" + z + s + S + f + d + z + b + l;\n+        concat = \"\" + d + z + l + \"S\" + d + i + s + s;\n+        concat = \"\" + i + s + l + l + z + c + S + S;\n+        concat = \"\" + i + S + c + S + d + S + l + s;\n+        concat = \"\" + i + s + f + f + z + s + c + z;\n+        concat = \"\" + f + z + S + i + s + f + \"S\" + b;\n+        concat = \"\" + S + d + f + s + S + i + z + i;\n+        concat = \"\" + f + i + d + b + s + d + \"S\" + l;\n+        concat = \"\" + b + s + c + S + S + d + \"S\" + \"S\";\n+        concat = \"\" + z + \"S\" + S + c + s + s + S + l;\n+        concat = \"\" + b + S + i + s + f + s + S + z;\n+        concat = \"\" + l + f + \"S\" + c + s + b + z + f;\n+        concat = \"\" + i + i + b + i + d + \"S\" + i + i;\n+        concat = \"\" + d + d + l + \"S\" + d + i + \"S\" + l;\n+        concat = \"\" + c + i + l + S + \"S\" + \"S\" + f + \"S\";\n+        concat = \"\" + s + \"S\" + c + i + b + S + S + b;\n+        concat = \"\" + l + d + d + z + c + z + b + s;\n+        concat = \"\" + d + i + S + c + d + i + c + c;\n+        concat = \"\" + s + S + i + \"S\" + b + S + c + \"S\";\n+        concat = \"\" + S + d + \"S\" + S + d + f + s + c;\n+        concat = \"\" + s + s + l + b + s + c + c + i;\n+        concat = \"\" + b + d + c + d + z + z + z + d;\n+        concat = \"\" + c + c + \"S\" + z + l + s + c + f;\n+        concat = \"\" + d + b + c + s + b + S + d + f;\n+        concat = \"\" + s + b + s + f + d + \"S\" + f + d;\n+        concat = \"\" + S + \"S\" + f + z + S + c + s + s;\n+        concat = \"\" + S + b + d + c + l + l + s + l;\n+        concat = \"\" + l + S + i + l + d + f + f + \"S\";\n+        concat = \"\" + s + s + c + i + i + l + f + z;\n+        concat = \"\" + i + l + \"S\" + s + S + s + i + S;\n+        concat = \"\" + i + d + s + \"S\" + b + f + \"S\" + c;\n+        concat = \"\" + c + \"S\" + z + b + l + s + S + i;\n+        concat = \"\" + i + z + \"S\" + s + b + c + s + i;\n+        concat = \"\" + l + f + b + f + i + d + \"S\" + l;\n+        concat = \"\" + c + c + b + s + \"S\" + S + d + d;\n+        concat = \"\" + S + \"S\" + i + f + d + s + l + S;\n+        concat = \"\" + b + d + \"S\" + S + c + b + \"S\" + z;\n+        concat = \"\" + c + d + i + S + f + b + b + i;\n+        concat = \"\" + f + i + i + l + z + \"S\" + z + f;\n+        concat = \"\" + z + f + \"S\" + c + z + l + c + f;\n+        concat = \"\" + c + c + d + s + d + b + l + d;\n+        concat = \"\" + \"S\" + s + l + l + \"S\" + d + l + l;\n+        concat = \"\" + b + i + c + c + b + S + d + S;\n+        concat = \"\" + f + d + i + s + c + b + l + b;\n+        concat = \"\" + s + b + S + f + S + b + l + i;\n+        concat = \"\" + z + \"S\" + s + i + S + i + b + c;\n+        concat = \"\" + s + S + d + S + z + b + b + d;\n+        concat = \"\" + i + s + \"S\" + z + s + S + \"S\" + z;\n+        concat = \"\" + l + z + S + S + b + z + d + \"S\";\n+        concat = \"\" + S + b + z + S + s + l + \"S\" + b;\n+        concat = \"\" + d + b + d + z + s + i + z + f;\n+        concat = \"\" + \"S\" + \"S\" + b + b + c + z + S + f;\n+        concat = \"\" + d + s + i + i + b + z + \"S\" + s;\n+        concat = \"\" + i + f + \"S\" + z + i + s + s + z;\n+        concat = \"\" + S + f + c + z + \"S\" + l + \"S\" + \"S\";\n+        concat = \"\" + \"S\" + f + z + S + c + d + c + s;\n+        concat = \"\" + d + l + c + c + b + z + d + d;\n+        concat = \"\" + b + s + d + d + b + d + b + d;\n+        concat = \"\" + b + b + d + i + \"S\" + d + \"S\" + d;\n+        concat = \"\" + s + c + d + \"S\" + z + f + z + s;\n+        concat = \"\" + l + \"S\" + c + s + s + i + b + \"S\";\n+        concat = \"\" + b + l + d + z + S + c + c + c;\n+        concat = \"\" + S + b + c + b + z + z + c + f;\n+        concat = \"\" + s + b + z + \"S\" + \"S\" + i + i + c;\n+        concat = \"\" + z + i + f + \"S\" + i + c + \"S\" + z;\n+        concat = \"\" + d + b + i + S + z + f + l + f;\n+        concat = \"\" + c + f + s + \"S\" + s + s + b + \"S\";\n+        concat = \"\" + i + c + S + d + i + \"S\" + d + S;\n+        concat = \"\" + d + b + s + z + S + S + \"S\" + \"S\";\n+        concat = \"\" + \"S\" + s + d + f + s + i + i + \"S\";\n+        concat = \"\" + f + z + c + z + b + b + s + \"S\";\n+        concat = \"\" + c + s + d + l + c + l + c + i;\n+        concat = \"\" + f + z + S + i + z + \"S\" + l + S;\n+        concat = \"\" + S + c + c + s + c + s + d + c;\n+        concat = \"\" + l + i + l + S + l + S + \"S\" + l;\n+        concat = \"\" + c + f + f + z + d + s + S + s;\n+        concat = \"\" + f + S + d + b + i + d + f + d;\n+        concat = \"\" + l + i + l + d + i + b + l + d;\n+        concat = \"\" + b + \"S\" + d + \"S\" + s + f + d + S;\n+        concat = \"\" + i + c + i + c + i + s + d + b;\n+        concat = \"\" + d + i + z + f + \"S\" + \"S\" + d + c;\n+        concat = \"\" + s + c + i + d + c + f + d + f;\n+        concat = \"\" + \"S\" + b + i + s + \"S\" + d + d + S;\n+        concat = \"\" + s + S + b + d + f + S + S + b;\n+        concat = \"\" + f + i + s + s + c + z + b + d;\n+        concat = \"\" + b + i + z + c + f + d + f + d;\n+        concat = \"\" + d + i + b + f + d + \"S\" + s + c;\n+        concat = \"\" + l + z + b + b + l + z + b + b;\n+        concat = \"\" + z + S + c + \"S\" + \"S\" + S + f + z;\n+        concat = \"\" + d + S + \"S\" + s + b + c + c + c;\n+        concat = \"\" + b + b + \"S\" + d + l + s + f + \"S\";\n+        concat = \"\" + b + d + c + \"S\" + b + i + c + l;\n+        concat = \"\" + i + b + z + S + s + i + b + z;\n+        concat = \"\" + l + s + f + f + z + l + c + b;\n+        concat = \"\" + s + S + l + f + i + c + i + s;\n+        concat = \"\" + d + i + S + b + s + S + S + \"S\";\n+        concat = \"\" + l + s + s + z + d + S + d + l;\n+        concat = \"\" + S + S + s + f + b + f + f + c;\n+        concat = \"\" + i + z + b + S + S + b + f + i;\n+        concat = \"\" + l + z + S + b + d + S + f + i;\n+        concat = \"\" + b + i + S + l + l + b + f + l;\n+        concat = \"\" + i + s + i + z + i + c + c + c;\n+        concat = \"\" + i + S + l + c + l + b + d + s;\n+        concat = \"\" + l + s + f + \"S\" + s + b + S + d;\n+        concat = \"\" + f + l + f + c + s + s + S + i;\n+        concat = \"\" + i + f + i + \"S\" + S + z + b + d;\n+        concat = \"\" + S + l + S + l + S + c + c + l;\n+        concat = \"\" + d + d + z + l + \"S\" + c + d + d;\n+        concat = \"\" + b + d + c + b + l + l + f + S;\n+        concat = \"\" + S + z + l + i + s + \"S\" + S + s;\n+        concat = \"\" + i + z + b + \"S\" + i + b + s + c;\n+        concat = \"\" + z + b + c + l + S + d + i + z;\n+        concat = \"\" + \"S\" + c + b + i + d + z + S + i;\n+        concat = \"\" + l + z + s + s + s + b + \"S\" + c;\n+        concat = \"\" + c + z + d + b + d + z + s + b;\n+        concat = \"\" + l + i + f + c + b + d + \"S\" + i;\n+        concat = \"\" + i + S + i + f + \"S\" + z + d + S;\n+        concat = \"\" + z + c + b + b + S + \"S\" + c + d;\n+        concat = \"\" + s + f + c + s + b + z + \"S\" + S;\n+        concat = \"\" + l + l + b + S + \"S\" + \"S\" + f + S;\n+        concat = \"\" + S + i + f + c + l + l + c + z;\n+        concat = \"\" + z + i + z + b + b + d + s + S;\n+        concat = \"\" + l + z + f + i + z + i + S + \"S\";\n+        concat = \"\" + i + z + i + s + \"S\" + c + S + l;\n+        concat = \"\" + i + z + S + l + S + s + \"S\" + f;\n+        concat = \"\" + b + d + d + l + i + z + i + l;\n+        concat = \"\" + S + f + c + b + c + i + d + l;\n+        concat = \"\" + f + f + S + i + l + b + b + d;\n+        concat = \"\" + \"S\" + i + \"S\" + c + z + f + c + \"S\";\n+        concat = \"\" + i + s + l + l + d + c + f + i;\n+        concat = \"\" + c + c + \"S\" + z + S + f + i + f;\n+        concat = \"\" + c + \"S\" + b + \"S\" + l + l + z + c;\n+        concat = \"\" + d + S + s + c + s + S + c + s;\n+        concat = \"\" + \"S\" + S + l + S + c + d + z + s;\n+        concat = \"\" + b + s + c + f + l + S + s + b;\n+        concat = \"\" + b + \"S\" + \"S\" + f + c + \"S\" + c + i;\n+        concat = \"\" + l + f + S + i + s + S + l + S;\n+        concat = \"\" + f + S + i + d + l + l + l + i;\n+        concat = \"\" + S + i + d + i + b + d + d + c;\n+        concat = \"\" + l + S + \"S\" + b + d + z + z + i;\n+        concat = \"\" + s + l + f + \"S\" + z + f + f + f;\n+        concat = \"\" + l + l + i + f + b + s + c + f;\n+        concat = \"\" + s + i + c + S + \"S\" + c + c + s;\n+        concat = \"\" + i + b + f + S + c + b + c + c;\n+        concat = \"\" + i + b + s + z + l + f + s + \"S\";\n+        concat = \"\" + S + c + f + l + c + c + i + S;\n+        concat = \"\" + S + s + z + f + l + s + f + d;\n+        concat = \"\" + S + z + S + S + f + S + s + S;\n+        concat = \"\" + l + s + s + s + i + i + \"S\" + l;\n+        concat = \"\" + i + f + s + c + c + f + S + d;\n+        concat = \"\" + S + d + d + d + S + c + S + s;\n+        concat = \"\" + S + f + z + i + S + l + S + s;\n+        concat = \"\" + b + S + d + S + i + b + s + z;\n+        concat = \"\" + f + d + \"S\" + c + \"S\" + c + S + b;\n+        concat = \"\" + c + i + z + f + d + f + \"S\" + c;\n+        concat = \"\" + s + c + c + S + s + z + l + s;\n+        concat = \"\" + i + d + f + z + S + s + d + s;\n+        concat = \"\" + z + b + s + d + d + i + f + i;\n+        concat = \"\" + c + i + b + l + S + d + f + f;\n+        concat = \"\" + f + d + S + l + \"S\" + f + s + l;\n+        concat = \"\" + s + l + l + s + z + s + \"S\" + z;\n+        concat = \"\" + S + z + d + l + l + i + s + b;\n+        concat = \"\" + z + \"S\" + z + i + S + \"S\" + b + S;\n+        concat = \"\" + f + S + s + z + \"S\" + b + \"S\" + S;\n+        concat = \"\" + i + s + b + l + b + i + d + l;\n+        concat = \"\" + i + \"S\" + s + b + l + i + f + d;\n+        concat = \"\" + c + f + S + S + z + s + \"S\" + c;\n+        concat = \"\" + s + c + z + l + z + S + c + z;\n+        concat = \"\" + d + \"S\" + i + b + d + S + f + c;\n+        concat = \"\" + s + z + d + c + c + c + l + S;\n+        concat = \"\" + z + S + z + s + l + d + l + b;\n+        concat = \"\" + S + b + i + s + \"S\" + l + i + \"S\";\n+        concat = \"\" + \"S\" + z + \"S\" + i + S + i + l + \"S\";\n+        concat = \"\" + z + c + d + l + s + l + l + s;\n+        concat = \"\" + b + i + s + S + z + l + f + d;\n+        concat = \"\" + s + d + d + f + l + i + i + S;\n+        concat = \"\" + \"S\" + i + d + l + b + S + d + \"S\";\n+        concat = \"\" + l + s + b + z + s + l + s + c;\n+        concat = \"\" + z + l + b + S + d + s + b + d;\n+        concat = \"\" + \"S\" + S + S + f + l + i + \"S\" + s;\n+        concat = \"\" + i + i + i + l + d + c + z + i;\n+        concat = \"\" + d + z + b + b + l + b + z + i;\n+        concat = \"\" + d + S + S + c + s + s + f + c;\n+        concat = \"\" + b + z + f + i + d + l + l + c;\n+        concat = \"\" + i + S + d + \"S\" + c + l + s + c;\n+        concat = \"\" + l + f + d + f + S + c + i + f;\n+        concat = \"\" + i + f + c + S + d + z + f + z;\n+        concat = \"\" + l + z + b + S + \"S\" + S + c + \"S\";\n+        concat = \"\" + S + z + d + c + f + z + l + b;\n+        concat = \"\" + l + b + f + f + c + f + S + z;\n+        concat = \"\" + z + \"S\" + s + d + s + z + \"S\" + f;\n+        concat = \"\" + d + \"S\" + c + z + S + d + i + c;\n+        concat = \"\" + \"S\" + z + c + S + b + f + s + i;\n+        concat = \"\" + z + \"S\" + d + s + f + f + d + d;\n+        concat = \"\" + b + d + s + i + d + d + \"S\" + z;\n+        concat = \"\" + c + z + l + c + l + d + z + s;\n+        concat = \"\" + i + f + b + b + c + l + c + c;\n+        concat = \"\" + S + s + s + l + l + \"S\" + \"S\" + f;\n+        concat = \"\" + d + f + f + d + b + b + d + b;\n+        concat = \"\" + S + c + \"S\" + S + s + d + s + s;\n+        concat = \"\" + z + b + b + b + l + c + l + S;\n+        concat = \"\" + z + l + z + f + S + s + d + S;\n+        concat = \"\" + z + i + s + d + l + z + c + S;\n+        concat = \"\" + d + f + \"S\" + z + b + i + S + c;\n+        concat = \"\" + c + c + i + d + f + d + f + f;\n+        concat = \"\" + b + d + d + S + z + f + i + b;\n+        concat = \"\" + b + s + l + s + s + c + l + l;\n+        concat = \"\" + S + S + S + i + b + c + b + S;\n+        concat = \"\" + s + i + l + S + f + z + b + b;\n+        concat = \"\" + s + f + i + l + l + s + c + S;\n+        concat = \"\" + s + \"S\" + b + z + s + S + i + i;\n+        concat = \"\" + l + s + d + d + b + i + s + c;\n+        concat = \"\" + S + s + f + \"S\" + f + c + d + l;\n+        concat = \"\" + S + S + z + f + S + s + i + b;\n+        concat = \"\" + s + d + l + z + c + S + d + f;\n+        concat = \"\" + i + f + S + f + d + z + b + \"S\";\n+        concat = \"\" + l + d + f + d + d + b + i + z;\n+        concat = \"\" + s + f + S + l + \"S\" + d + i + S;\n+        concat = \"\" + S + S + \"S\" + S + c + \"S\" + f + s;\n+        concat = \"\" + z + z + c + \"S\" + \"S\" + \"S\" + \"S\" + s;\n+        concat = \"\" + l + c + z + c + f + d + i + \"S\";\n+        concat = \"\" + \"S\" + l + z + \"S\" + c + c + s + S;\n+        concat = \"\" + d + s + d + s + l + b + S + s;\n+        concat = \"\" + l + \"S\" + c + f + \"S\" + f + d + z;\n+        concat = \"\" + \"S\" + S + c + z + d + d + b + l;\n+        concat = \"\" + d + c + s + i + \"S\" + S + i + d;\n+        concat = \"\" + d + b + b + b + z + l + s + s;\n+        concat = \"\" + f + d + b + s + l + b + S + d;\n+        concat = \"\" + d + c + d + z + c + i + l + b;\n+        concat = \"\" + z + S + d + b + S + f + S + c;\n+        concat = \"\" + z + S + c + s + S + \"S\" + s + \"S\";\n+        concat = \"\" + z + b + d + i + S + b + l + s;\n+        concat = \"\" + i + c + s + i + f + d + \"S\" + b;\n+        concat = \"\" + s + s + b + l + S + b + z + f;\n+        concat = \"\" + S + i + f + d + z + z + s + s;\n+        concat = \"\" + z + z + d + l + b + c + S + f;\n+        concat = \"\" + d + l + f + l + b + l + c + i;\n+        concat = \"\" + \"S\" + f + i + c + l + c + b + z;\n+        concat = \"\" + l + l + \"S\" + S + c + l + z + i;\n+        concat = \"\" + s + f + s + z + \"S\" + z + c + S;\n+        concat = \"\" + d + z + i + z + b + \"S\" + b + b;\n+        concat = \"\" + \"S\" + \"S\" + c + i + b + c + f + l;\n+        concat = \"\" + d + z + i + S + s + z + s + c;\n+        concat = \"\" + l + i + d + c + l + s + f + b;\n+        concat = \"\" + i + s + l + l + z + c + S + b;\n+        concat = \"\" + S + c + l + S + d + b + \"S\" + b;\n+        concat = \"\" + b + s + \"S\" + f + b + S + i + s;\n+        concat = \"\" + d + z + \"S\" + c + s + b + z + s;\n+        concat = \"\" + b + c + s + \"S\" + S + b + s + z;\n+        concat = \"\" + b + f + z + c + b + d + S + c;\n+        concat = \"\" + f + \"S\" + s + c + l + f + l + c;\n+        concat = \"\" + b + b + z + \"S\" + b + l + f + s;\n+        concat = \"\" + i + f + c + f + c + f + l + i;\n+        concat = \"\" + z + S + \"S\" + c + i + d + z + f;\n+        concat = \"\" + f + c + l + b + f + b + \"S\" + \"S\";\n+        concat = \"\" + f + i + c + S + \"S\" + b + f + f;\n+        concat = \"\" + b + z + d + z + c + c + \"S\" + s;\n+        concat = \"\" + s + S + b + d + f + d + c + f;\n+        concat = \"\" + z + f + s + i + d + f + b + z;\n+        concat = \"\" + b + f + z + l + d + c + d + z;\n+        concat = \"\" + i + i + b + s + f + s + S + i;\n+        concat = \"\" + s + f + c + d + z + l + l + S;\n+        concat = \"\" + i + \"S\" + S + s + l + f + z + f;\n+        concat = \"\" + \"S\" + i + l + d + i + S + b + l;\n+        concat = \"\" + S + l + f + d + z + i + b + S;\n+        concat = \"\" + f + i + c + S + d + f + \"S\" + b;\n+        concat = \"\" + s + l + z + f + s + c + d + l;\n+        concat = \"\" + f + S + s + i + f + s + b + d;\n+        concat = \"\" + f + c + s + i + l + f + d + d;\n+        concat = \"\" + l + l + c + c + b + d + \"S\" + l;\n+        concat = \"\" + c + i + f + f + s + i + \"S\" + i;\n+        concat = \"\" + l + s + c + d + d + b + d + f;\n+        concat = \"\" + \"S\" + i + f + s + f + c + \"S\" + \"S\";\n+        concat = \"\" + i + \"S\" + f + f + s + c + c + z;\n+        concat = \"\" + s + b + c + i + i + b + \"S\" + c;\n+        concat = \"\" + \"S\" + b + f + l + s + z + z + f;\n+        concat = \"\" + s + c + i + b + z + b + i + d;\n+        concat = \"\" + l + S + c + l + z + s + b + c;\n+        concat = \"\" + \"S\" + b + s + l + f + b + z + z;\n+        concat = \"\" + z + c + f + S + f + l + i + i;\n+        concat = \"\" + S + f + b + b + l + f + b + c;\n+        concat = \"\" + b + b + \"S\" + S + d + i + S + s;\n+        concat = \"\" + b + \"S\" + b + b + l + d + f + d;\n+        concat = \"\" + f + b + l + l + c + b + z + b;\n+        concat = \"\" + z + S + S + s + i + s + l + z;\n+        concat = \"\" + S + l + c + d + z + \"S\" + d + c;\n+        concat = \"\" + S + i + l + l + \"S\" + i + z + l;\n+        concat = \"\" + d + l + l + i + s + s + c + i;\n+        concat = \"\" + d + S + z + i + b + i + l + b;\n+        concat = \"\" + c + b + d + z + l + c + z + s;\n+        concat = \"\" + z + i + c + S + d + d + b + f;\n+        concat = \"\" + \"S\" + s + l + d + i + i + s + c;\n+        concat = \"\" + c + b + i + d + l + z + s + i;\n+        concat = \"\" + s + b + d + s + i + f + s + c;\n+        concat = \"\" + \"S\" + f + d + z + z + i + f + b;\n+        concat = \"\" + b + c + \"S\" + d + d + f + f + b;\n+        concat = \"\" + f + l + l + b + d + i + z + c;\n+        concat = \"\" + b + z + z + z + f + i + \"S\" + c;\n+        concat = \"\" + c + i + i + d + d + b + f + d;\n+        concat = \"\" + \"S\" + d + c + s + z + z + c + S;\n+        concat = \"\" + f + \"S\" + c + c + c + z + d + z;\n+        concat = \"\" + s + z + f + i + b + d + b + \"S\";\n+        concat = \"\" + l + i + d + \"S\" + z + l + s + \"S\";\n+        concat = \"\" + i + z + s + z + s + z + S + l;\n+        concat = \"\" + c + b + b + \"S\" + c + b + s + s;\n+        concat = \"\" + c + l + s + d + b + \"S\" + f + \"S\";\n+        concat = \"\" + S + c + c + d + l + \"S\" + b + z;\n+        concat = \"\" + S + S + s + f + d + s + b + z;\n+        concat = \"\" + z + \"S\" + l + c + \"S\" + c + b + l;\n+        concat = \"\" + l + b + b + s + S + S + S + z;\n+        concat = \"\" + b + s + d + i + l + z + c + b;\n+        concat = \"\" + f + s + \"S\" + d + d + s + \"S\" + f;\n+        concat = \"\" + f + f + \"S\" + s + z + d + l + z;\n+        concat = \"\" + \"S\" + z + b + f + d + d + d + S;\n+        concat = \"\" + i + l + z + d + f + s + s + \"S\";\n+        concat = \"\" + f + c + l + S + b + b + z + z;\n+        concat = \"\" + f + f + f + S + d + c + b + S;\n+        concat = \"\" + \"S\" + c + S + \"S\" + b + i + z + z;\n+        concat = \"\" + s + \"S\" + b + c + s + d + b + b;\n+        concat = \"\" + S + c + \"S\" + S + \"S\" + c + \"S\" + S;\n+        concat = \"\" + d + z + b + l + b + \"S\" + i + c;\n+        concat = \"\" + f + \"S\" + l + i + l + S + d + S;\n+        concat = \"\" + d + c + s + S + c + f + \"S\" + d;\n+        concat = \"\" + z + d + s + z + i + b + d + \"S\";\n+        concat = \"\" + \"S\" + f + c + \"S\" + f + s + c + \"S\";\n+        concat = \"\" + i + i + c + b + d + l + i + f;\n+        concat = \"\" + \"S\" + \"S\" + z + z + b + c + \"S\" + i;\n+        concat = \"\" + l + s + i + b + f + b + l + b;\n+        concat = \"\" + S + d + z + i + \"S\" + c + i + l;\n+        concat = \"\" + l + S + d + c + s + l + i + z;\n+        concat = \"\" + b + S + l + z + i + f + z + i;\n+        concat = \"\" + i + S + S + d + S + d + f + b;\n+        concat = \"\" + d + z + \"S\" + \"S\" + l + c + d + c;\n+        concat = \"\" + i + s + S + f + l + s + z + c;\n+        concat = \"\" + S + S + z + S + s + c + d + i;\n+        concat = \"\" + z + d + l + f + d + i + f + S;\n+        concat = \"\" + S + z + s + b + s + S + d + b;\n+        concat = \"\" + b + s + b + l + S + S + c + b;\n+        concat = \"\" + i + c + b + \"S\" + i + s + d + b;\n+        concat = \"\" + f + l + i + i + S + z + z + d;\n+        concat = \"\" + S + \"S\" + c + b + b + z + S + i;\n+        concat = \"\" + S + l + l + S + z + c + c + b;\n+        concat = \"\" + i + b + b + i + b + b + l + l;\n+        concat = \"\" + f + c + z + c + z + s + S + i;\n+        concat = \"\" + c + c + l + b + c + s + d + d;\n+        concat = \"\" + l + z + \"S\" + d + s + c + i + d;\n+        concat = \"\" + f + b + l + d + b + z + s + c;\n+        concat = \"\" + i + d + l + f + c + z + \"S\" + i;\n+        concat = \"\" + s + s + \"S\" + b + b + c + f + z;\n+        concat = \"\" + z + d + f + d + c + f + i + S;\n+        concat = \"\" + b + \"S\" + f + l + S + i + z + b;\n+        concat = \"\" + i + z + \"S\" + s + S + S + c + d;\n+        concat = \"\" + i + l + d + \"S\" + f + f + d + f;\n+        concat = \"\" + i + z + s + d + l + f + i + \"S\";\n+        concat = \"\" + z + S + z + s + l + S + f + \"S\";\n+        concat = \"\" + \"S\" + i + c + f + i + l + S + f;\n+        concat = \"\" + s + f + b + c + b + b + c + S;\n+        concat = \"\" + S + d + \"S\" + s + l + i + c + d;\n+        concat = \"\" + f + s + \"S\" + S + d + l + z + z;\n+        concat = \"\" + f + S + f + \"S\" + S + S + d + i;\n+        concat = \"\" + s + b + z + i + \"S\" + S + d + i;\n+        concat = \"\" + s + d + c + l + z + c + d + i;\n+        concat = \"\" + c + z + l + \"S\" + s + \"S\" + s + b;\n+        concat = \"\" + i + z + c + s + S + s + s + \"S\";\n+        concat = \"\" + c + S + S + \"S\" + d + f + d + f;\n+        concat = \"\" + d + s + l + f + d + s + \"S\" + c;\n+        concat = \"\" + z + f + d + \"S\" + c + f + \"S\" + S;\n+        concat = \"\" + c + z + i + l + l + z + S + z;\n+        concat = \"\" + \"S\" + s + S + d + d + z + b + d;\n+        concat = \"\" + i + \"S\" + i + c + d + z + s + \"S\";\n+        concat = \"\" + l + f + z + d + s + f + S + S;\n+        concat = \"\" + l + z + d + i + i + l + b + l;\n+        concat = \"\" + i + b + S + z + d + z + i + \"S\";\n+        concat = \"\" + S + S + b + \"S\" + b + S + i + i;\n+        concat = \"\" + l + \"S\" + c + s + l + S + S + b;\n+        concat = \"\" + s + l + c + f + \"S\" + b + S + b;\n+        concat = \"\" + s + f + b + S + s + \"S\" + \"S\" + d;\n+        concat = \"\" + s + s + c + c + l + d + \"S\" + f;\n+        concat = \"\" + b + b + \"S\" + S + z + s + \"S\" + i;\n+        concat = \"\" + b + d + \"S\" + f + f + l + c + i;\n+        concat = \"\" + i + \"S\" + z + d + b + S + i + f;\n+        concat = \"\" + d + l + z + c + S + \"S\" + S + S;\n+        concat = \"\" + d + c + d + S + \"S\" + f + f + b;\n+        concat = \"\" + i + f + s + b + s + z + s + f;\n+        concat = \"\" + \"S\" + d + c + b + S + f + S + S;\n+        concat = \"\" + S + z + i + b + i + c + z + S;\n+        concat = \"\" + z + i + \"S\" + S + S + i + z + i;\n+        concat = \"\" + i + f + \"S\" + \"S\" + s + \"S\" + \"S\" + b;\n+        concat = \"\" + \"S\" + S + c + S + i + f + b + \"S\";\n+        concat = \"\" + i + d + f + z + s + z + i + s;\n+        concat = \"\" + s + f + z + l + S + b + \"S\" + l;\n+        concat = \"\" + c + \"S\" + b + S + z + S + l + s;\n+        concat = \"\" + c + b + c + d + c + l + b + \"S\";\n+        concat = \"\" + i + i + b + \"S\" + d + s + S + S;\n+        concat = \"\" + l + b + c + c + b + f + z + s;\n+        concat = \"\" + \"S\" + S + s + z + z + i + l + c;\n+        concat = \"\" + S + f + c + i + b + \"S\" + b + s;\n+        concat = \"\" + c + b + \"S\" + f + s + s + z + l;\n+        concat = \"\" + l + z + c + \"S\" + l + c + c + c;\n+        concat = \"\" + c + z + s + s + c + z + s + b;\n+        concat = \"\" + i + \"S\" + d + s + f + c + b + s;\n+        concat = \"\" + d + l + \"S\" + f + l + d + d + \"S\";\n+        concat = \"\" + b + s + d + s + l + c + l + f;\n+        concat = \"\" + S + i + c + f + i + \"S\" + i + s;\n+        concat = \"\" + \"S\" + \"S\" + b + i + f + b + z + s;\n+        concat = \"\" + S + c + \"S\" + f + \"S\" + i + s + c;\n+        concat = \"\" + c + b + b + s + S + S + \"S\" + b;\n+        concat = \"\" + s + S + i + z + s + d + i + s;\n+        concat = \"\" + \"S\" + \"S\" + \"S\" + z + f + c + i + i;\n+        concat = \"\" + z + \"S\" + s + l + S + i + f + f;\n+        concat = \"\" + z + b + c + l + i + b + l + S;\n+        concat = \"\" + s + c + f + s + l + S + d + d;\n+        concat = \"\" + z + s + b + b + z + \"S\" + s + S;\n+        concat = \"\" + \"S\" + l + f + l + l + b + f + i;\n+        concat = \"\" + i + z + i + d + S + s + l + d;\n+        concat = \"\" + f + i + b + \"S\" + \"S\" + c + b + s;\n+        concat = \"\" + \"S\" + S + i + c + \"S\" + l + z + S;\n+        concat = \"\" + d + l + d + b + c + l + d + s;\n+        concat = \"\" + f + s + c + i + l + i + c + f;\n+        concat = \"\" + l + \"S\" + l + d + s + \"S\" + i + d;\n+        concat = \"\" + f + z + \"S\" + \"S\" + b + z + \"S\" + S;\n+        concat = \"\" + l + z + l + \"S\" + z + c + z + c;\n+        concat = \"\" + l + \"S\" + S + z + S + z + b + \"S\";\n+        concat = \"\" + s + s + f + s + i + c + l + l;\n+        concat = \"\" + b + l + S + z + l + l + c + i;\n+        concat = \"\" + d + S + b + S + \"S\" + z + \"S\" + f;\n+        concat = \"\" + s + S + z + s + c + S + l + s;\n+        concat = \"\" + \"S\" + d + S + l + f + b + z + \"S\";\n+        concat = \"\" + \"S\" + d + c + l + \"S\" + b + f + S;\n+        concat = \"\" + \"S\" + S + s + z + i + S + l + f;\n+        concat = \"\" + s + i + f + f + i + l + d + f;\n+        concat = \"\" + \"S\" + s + \"S\" + i + s + c + \"S\" + d;\n+        concat = \"\" + s + f + f + i + f + l + l + c;\n+        concat = \"\" + i + f + \"S\" + d + f + d + l + z;\n+        concat = \"\" + \"S\" + S + i + d + c + b + i + l;\n+        concat = \"\" + f + l + \"S\" + l + s + z + b + b;\n+        concat = \"\" + z + z + f + b + b + b + l + i;\n+        concat = \"\" + s + \"S\" + S + c + \"S\" + \"S\" + b + b;\n+        concat = \"\" + S + l + s + c + c + i + S + f;\n+        concat = \"\" + b + z + b + f + z + S + i + b;\n+        concat = \"\" + i + d + f + l + s + \"S\" + s + b;\n+        concat = \"\" + d + d + d + z + i + f + i + i;\n+        concat = \"\" + S + d + z + s + \"S\" + f + l + S;\n+        concat = \"\" + \"S\" + i + s + f + S + l + s + c;\n+        concat = \"\" + i + z + S + \"S\" + l + z + d + z;\n+        concat = \"\" + b + f + b + b + S + \"S\" + l + s;\n+        concat = \"\" + \"S\" + l + s + \"S\" + f + \"S\" + l + z;\n+        concat = \"\" + c + s + d + z + s + \"S\" + z + i;\n+        concat = \"\" + s + z + S + z + \"S\" + i + z + b;\n+        concat = \"\" + c + i + S + z + d + S + i + d;\n+        concat = \"\" + s + f + l + i + S + f + l + s;\n+        concat = \"\" + b + i + b + d + f + f + \"S\" + \"S\";\n+        concat = \"\" + \"S\" + d + l + i + s + S + l + c;\n+        concat = \"\" + i + i + b + i + z + c + l + S;\n+        concat = \"\" + z + S + s + d + b + s + z + s;\n+        concat = \"\" + b + c + S + \"S\" + \"S\" + b + i + l;\n+        concat = \"\" + z + l + \"S\" + l + l + f + c + s;\n+        concat = \"\" + s + \"S\" + b + i + b + s + z + f;\n+        concat = \"\" + i + b + S + s + f + \"S\" + c + c;\n+        concat = \"\" + z + \"S\" + c + c + d + \"S\" + z + d;\n+        concat = \"\" + b + s + s + S + b + i + s + s;\n+        concat = \"\" + s + \"S\" + c + b + S + c + s + S;\n+        concat = \"\" + i + d + l + s + f + \"S\" + S + i;\n+        concat = \"\" + S + f + b + i + z + c + f + b;\n+        concat = \"\" + i + S + d + d + c + b + \"S\" + c;\n+        concat = \"\" + d + z + i + z + c + s + d + s;\n+        concat = \"\" + b + z + c + i + f + i + c + \"S\";\n+        concat = \"\" + f + \"S\" + S + d + b + f + d + b;\n+        concat = \"\" + \"S\" + c + l + S + z + c + z + l;\n+        concat = \"\" + S + c + d + b + d + s + \"S\" + f;\n+        concat = \"\" + z + b + \"S\" + d + c + i + \"S\" + d;\n+        concat = \"\" + b + \"S\" + c + S + z + s + i + i;\n+        concat = \"\" + s + z + i + c + i + i + i + b;\n+        concat = \"\" + c + z + z + d + b + s + b + s;\n+        concat = \"\" + \"S\" + z + l + i + S + s + l + b;\n+        concat = \"\" + z + b + s + f + \"S\" + c + f + b;\n+        concat = \"\" + \"S\" + b + s + S + \"S\" + d + i + \"S\";\n+        concat = \"\" + c + c + s + b + S + l + i + f;\n+        concat = \"\" + \"S\" + i + d + d + l + \"S\" + \"S\" + b;\n+        concat = \"\" + S + l + b + c + S + c + S + S;\n+        concat = \"\" + l + b + \"S\" + l + l + z + s + i;\n+        concat = \"\" + \"S\" + s + f + b + b + d + b + i;\n+        concat = \"\" + S + b + b + b + l + c + l + b;\n+        concat = \"\" + l + c + z + s + c + s + b + s;\n+        concat = \"\" + l + c + S + s + \"S\" + b + f + d;\n+        concat = \"\" + s + d + d + i + b + i + \"S\" + b;\n+        concat = \"\" + d + l + z + l + d + l + l + b;\n+        concat = \"\" + c + i + c + \"S\" + f + \"S\" + \"S\" + b;\n+        concat = \"\" + \"S\" + d + z + S + z + d + i + b;\n+        concat = \"\" + c + z + b + c + d + c + c + z;\n+        concat = \"\" + b + s + S + d + z + f + l + z;\n+        concat = \"\" + d + z + f + \"S\" + z + d + f + f;\n+        concat = \"\" + s + z + d + c + s + s + \"S\" + i;\n+        concat = \"\" + i + c + z + S + b + b + z + z;\n+        concat = \"\" + l + \"S\" + f + s + z + i + d + b;\n+        concat = \"\" + s + S + l + c + S + f + z + i;\n+        concat = \"\" + f + l + s + \"S\" + l + s + d + S;\n+        concat = \"\" + l + c + b + f + f + s + S + c;\n+        concat = \"\" + s + i + i + S + c + s + s + s;\n+        concat = \"\" + f + c + b + c + \"S\" + c + i + s;\n+        concat = \"\" + S + S + d + f + \"S\" + i + i + c;\n+        concat = \"\" + d + f + s + z + S + b + s + s;\n+        concat = \"\" + z + f + f + l + l + i + z + z;\n+        concat = \"\" + i + c + f + b + f + d + \"S\" + s;\n+        concat = \"\" + \"S\" + f + z + S + z + f + l + c;\n+        concat = \"\" + S + b + s + \"S\" + \"S\" + l + l + f;\n+        concat = \"\" + i + l + S + c + l + c + \"S\" + s;\n+        concat = \"\" + c + z + S + f + l + d + c + b;\n+        concat = \"\" + l + b + s + s + l + S + f + d;\n+        concat = \"\" + f + c + s + \"S\" + \"S\" + d + b + b;\n+        concat = \"\" + \"S\" + c + \"S\" + S + f + \"S\" + z + b;\n+        concat = \"\" + l + i + l + \"S\" + s + f + i + c;\n+        concat = \"\" + f + s + \"S\" + S + f + d + l + s;\n+        concat = \"\" + i + c + b + i + b + i + i + b;\n+        concat = \"\" + s + s + S + d + z + d + d + l;\n+        concat = \"\" + z + s + S + s + c + \"S\" + f + i;\n+        concat = \"\" + S + l + \"S\" + i + f + f + d + b;\n+        concat = \"\" + d + c + d + f + f + f + S + \"S\";\n+        concat = \"\" + c + f + S + f + \"S\" + i + z + i;\n+        concat = \"\" + s + b + s + b + b + i + S + z;\n+        concat = \"\" + f + b + i + S + b + i + z + l;\n+        concat = \"\" + c + s + b + S + s + s + z + c;\n+        concat = \"\" + S + b + b + l + d + z + i + i;\n+        concat = \"\" + l + S + c + d + S + b + l + i;\n+        concat = \"\" + f + f + z + \"S\" + z + f + S + d;\n+        concat = \"\" + c + l + b + \"S\" + s + d + \"S\" + c;\n+        concat = \"\" + s + \"S\" + l + s + S + l + c + f;\n+        concat = \"\" + s + S + \"S\" + b + i + s + i + i;\n+        concat = \"\" + s + l + z + f + b + l + i + s;\n+        concat = \"\" + S + c + i + b + c + z + i + \"S\";\n+        concat = \"\" + z + z + d + i + l + s + \"S\" + S;\n+        concat = \"\" + f + d + i + \"S\" + \"S\" + l + d + z;\n+        concat = \"\" + c + z + s + \"S\" + b + c + l + c;\n+        concat = \"\" + b + d + f + b + \"S\" + s + d + \"S\";\n+        concat = \"\" + S + d + S + s + S + S + c + f;\n+        concat = \"\" + z + b + S + \"S\" + l + z + s + z;\n+        concat = \"\" + c + f + S + \"S\" + f + f + f + c;\n+        concat = \"\" + l + \"S\" + d + l + l + f + b + c;\n+        concat = \"\" + z + S + d + i + S + s + S + \"S\";\n+        concat = \"\" + S + d + s + f + z + z + l + d;\n+        concat = \"\" + z + c + c + z + s + s + z + i;\n+        concat = \"\" + c + c + i + b + l + \"S\" + i + d;\n+        concat = \"\" + i + l + \"S\" + b + \"S\" + l + z + b;\n+        concat = \"\" + c + f + \"S\" + c + f + d + S + \"S\";\n+        concat = \"\" + i + i + \"S\" + c + f + z + i + \"S\";\n+        concat = \"\" + f + \"S\" + l + f + c + s + b + i;\n+        concat = \"\" + f + \"S\" + d + b + c + \"S\" + i + b;\n+        concat = \"\" + S + l + l + i + b + b + z + b;\n+        concat = \"\" + f + \"S\" + l + S + c + z + c + f;\n+        concat = \"\" + l + S + l + b + \"S\" + s + f + d;\n+        concat = \"\" + c + S + z + c + s + s + s + f;\n+        concat = \"\" + d + b + d + b + c + c + d + i;\n+        concat = \"\" + \"S\" + \"S\" + b + f + f + c + i + b;\n+        concat = \"\" + S + S + c + s + i + z + f + b;\n+        concat = \"\" + l + c + c + S + \"S\" + b + l + \"S\";\n+        concat = \"\" + f + d + S + f + b + f + \"S\" + f;\n+        concat = \"\" + z + z + S + s + S + b + \"S\" + c;\n+        concat = \"\" + b + s + c + f + z + s + z + S;\n+        concat = \"\" + c + c + d + \"S\" + i + z + l + z;\n+        concat = \"\" + b + d + z + S + l + S + b + S;\n+        concat = \"\" + c + S + \"S\" + b + \"S\" + i + i + c;\n+        concat = \"\" + \"S\" + i + \"S\" + S + \"S\" + i + l + f;\n+        concat = \"\" + s + l + c + l + f + f + l + S;\n+        concat = \"\" + l + \"S\" + \"S\" + l + c + c + d + d;\n+        concat = \"\" + l + d + z + f + d + b + c + \"S\";\n+        concat = \"\" + z + S + z + b + z + z + S + f;\n+        concat = \"\" + d + z + c + b + i + f + z + d;\n+        concat = \"\" + d + f + l + c + d + c + S + z;\n+        concat = \"\" + \"S\" + b + d + c + l + d + d + b;\n+        concat = \"\" + \"S\" + S + f + d + s + S + c + f;\n+        concat = \"\" + f + S + b + z + i + i + s + i;\n+        concat = \"\" + f + d + \"S\" + l + b + f + \"S\" + i;\n+        concat = \"\" + i + i + i + b + l + d + s + f;\n+        concat = \"\" + b + l + f + z + l + b + b + l;\n+        concat = \"\" + i + l + c + S + S + f + b + f;\n+        concat = \"\" + l + b + f + c + f + s + z + f;\n+        concat = \"\" + d + S + f + i + \"S\" + f + f + z;\n+        concat = \"\" + d + i + \"S\" + S + b + \"S\" + c + z;\n+        concat = \"\" + \"S\" + c + \"S\" + l + d + b + f + s;\n+        concat = \"\" + c + z + z + d + z + b + \"S\" + z;\n+        concat = \"\" + s + s + S + z + d + f + c + f;\n+        concat = \"\" + S + S + s + l + c + \"S\" + f + S;\n+        concat = \"\" + d + l + z + d + d + l + i + f;\n+        concat = \"\" + S + s + \"S\" + z + S + l + f + f;\n+        concat = \"\" + b + s + l + \"S\" + \"S\" + c + i + f;\n+        concat = \"\" + i + b + i + \"S\" + z + \"S\" + l + \"S\";\n+        concat = \"\" + \"S\" + s + l + z + i + d + z + \"S\";\n+        concat = \"\" + z + s + z + b + \"S\" + i + c + d;\n+        concat = \"\" + b + i + i + d + S + d + l + b;\n+        concat = \"\" + S + z + d + i + \"S\" + s + d + f;\n+        concat = \"\" + l + d + z + z + S + f + c + s;\n+        concat = \"\" + z + d + f + s + d + f + i + s;\n+        concat = \"\" + s + \"S\" + c + c + z + S + \"S\" + i;\n+        concat = \"\" + \"S\" + i + f + i + b + \"S\" + d + z;\n+        concat = \"\" + i + s + d + i + d + d + b + f;\n+        concat = \"\" + s + \"S\" + \"S\" + b + l + d + c + \"S\";\n+        concat = \"\" + i + \"S\" + f + l + s + d + d + c;\n+        concat = \"\" + d + \"S\" + s + i + i + \"S\" + b + S;\n+        concat = \"\" + l + S + c + i + d + b + i + i;\n+        concat = \"\" + s + z + s + s + c + \"S\" + i + f;\n+        concat = \"\" + b + f + b + \"S\" + s + f + S + i;\n+        concat = \"\" + b + b + i + f + c + \"S\" + s + z;\n+        concat = \"\" + i + \"S\" + f + s + d + f + \"S\" + z;\n+        concat = \"\" + i + z + f + S + i + l + z + z;\n+        concat = \"\" + l + s + i + i + l + z + d + d;\n+        concat = \"\" + s + S + d + s + f + d + l + \"S\";\n+        concat = \"\" + i + z + \"S\" + b + \"S\" + S + \"S\" + S;\n+        concat = \"\" + i + i + d + s + l + b + f + b;\n+        concat = \"\" + c + b + f + i + s + \"S\" + l + d;\n+        concat = \"\" + f + \"S\" + b + s + \"S\" + z + c + l;\n+        concat = \"\" + S + f + c + f + c + b + b + z;\n+        concat = \"\" + s + d + i + S + f + b + z + f;\n+        concat = \"\" + \"S\" + b + l + d + i + b + \"S\" + f;\n+        concat = \"\" + c + f + l + d + c + S + i + s;\n+        concat = \"\" + z + s + s + \"S\" + i + i + c + S;\n+        concat = \"\" + l + l + z + c + \"S\" + s + S + f;\n+        concat = \"\" + c + l + l + S + z + b + f + d;\n+        concat = \"\" + b + \"S\" + l + z + S + i + i + s;\n+        concat = \"\" + d + b + l + s + S + b + S + S;\n+        concat = \"\" + z + b + l + \"S\" + \"S\" + z + d + c;\n+        concat = \"\" + l + S + d + \"S\" + c + S + l + b;\n+        concat = \"\" + S + b + i + d + s + s + f + z;\n+        concat = \"\" + l + \"S\" + b + c + z + b + \"S\" + d;\n+        concat = \"\" + i + d + \"S\" + S + S + l + z + S;\n+        concat = \"\" + b + S + l + \"S\" + S + z + S + S;\n+        concat = \"\" + \"S\" + c + i + l + s + l + S + s;\n+        concat = \"\" + s + f + c + c + S + i + z + b;\n+        concat = \"\" + S + i + f + c + d + f + l + \"S\";\n+        concat = \"\" + s + z + d + S + b + d + \"S\" + \"S\";\n+        concat = \"\" + b + c + \"S\" + s + l + l + l + s;\n+        concat = \"\" + b + c + d + i + S + b + b + S;\n+        concat = \"\" + S + S + l + \"S\" + f + l + z + d;\n+        concat = \"\" + z + S + s + b + z + d + d + c;\n+        concat = \"\" + i + i + s + f + d + S + \"S\" + z;\n+        concat = \"\" + c + s + f + s + z + i + l + \"S\";\n+        concat = \"\" + z + i + \"S\" + s + d + l + c + i;\n+        concat = \"\" + s + f + \"S\" + \"S\" + i + l + s + S;\n+        concat = \"\" + \"S\" + f + s + d + f + s + f + z;\n+        concat = \"\" + f + i + i + l + \"S\" + S + f + l;\n+        concat = \"\" + b + S + i + z + s + f + \"S\" + l;\n+        concat = \"\" + z + s + l + s + l + f + i + S;\n+        concat = \"\" + c + i + c + f + f + z + d + s;\n+        concat = \"\" + S + f + f + S + z + S + z + s;\n+        concat = \"\" + c + S + S + f + \"S\" + z + \"S\" + S;\n+        concat = \"\" + S + d + S + s + s + f + l + s;\n+        concat = \"\" + f + S + c + l + z + d + d + b;\n+        concat = \"\" + f + s + d + z + l + i + f + b;\n+        concat = \"\" + b + S + d + s + c + d + b + s;\n+        concat = \"\" + b + i + S + \"S\" + \"S\" + S + f + \"S\";\n+        concat = \"\" + S + f + s + d + z + c + b + S;\n+        concat = \"\" + b + S + d + b + S + b + c + i;\n+        concat = \"\" + f + \"S\" + d + b + z + S + s + l;\n+        concat = \"\" + s + z + s + S + S + f + b + l;\n+        concat = \"\" + b + S + l + d + d + S + z + i;\n+        concat = \"\" + b + s + z + i + S + s + S + \"S\";\n+        concat = \"\" + s + z + i + S + i + f + c + \"S\";\n+        concat = \"\" + \"S\" + S + f + b + c + i + c + \"S\";\n+        concat = \"\" + \"S\" + d + b + d + S + i + c + z;\n+        concat = \"\" + z + \"S\" + c + f + z + d + S + c;\n+        concat = \"\" + f + b + c + S + z + c + f + i;\n+        concat = \"\" + d + c + \"S\" + i + i + d + S + S;\n+        concat = \"\" + d + f + c + S + i + c + s + \"S\";\n+        concat = \"\" + S + f + z + f + \"S\" + d + f + l;\n+        concat = \"\" + s + c + f + z + \"S\" + b + i + d;\n+        concat = \"\" + \"S\" + d + b + S + c + b + S + z;\n+        concat = \"\" + l + c + i + d + c + s + d + s;\n+        concat = \"\" + s + z + i + S + s + l + s + c;\n+        concat = \"\" + S + z + S + s + s + z + S + b;\n+        concat = \"\" + d + \"S\" + s + S + z + \"S\" + i + s;\n+        concat = \"\" + i + d + S + b + \"S\" + z + l + d;\n+        concat = \"\" + s + \"S\" + z + d + \"S\" + c + f + s;\n+        concat = \"\" + S + z + b + f + d + c + c + z;\n+        concat = \"\" + d + z + S + \"S\" + f + d + i + \"S\";\n+        concat = \"\" + b + c + f + f + l + f + b + s;\n+        concat = \"\" + \"S\" + i + c + f + f + i + \"S\" + i;\n+        concat = \"\" + s + S + i + c + f + i + c + d;\n+        concat = \"\" + l + d + z + d + \"S\" + z + \"S\" + c;\n+        concat = \"\" + i + s + c + l + S + c + c + \"S\";\n+        concat = \"\" + \"S\" + f + S + c + \"S\" + s + c + c;\n+        concat = \"\" + \"S\" + \"S\" + \"S\" + \"S\" + b + z + l + z;\n+        concat = \"\" + z + c + d + S + S + f + f + i;\n+        concat = \"\" + i + i + S + s + b + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + l + b + d + b + d + i + \"S\" + c;\n+        concat = \"\" + s + z + S + s + f + z + f + c;\n+        concat = \"\" + b + f + \"S\" + b + c + b + d + \"S\";\n+        concat = \"\" + c + c + \"S\" + s + l + b + z + l;\n+        concat = \"\" + l + b + s + z + S + c + b + c;\n+        concat = \"\" + l + f + S + b + \"S\" + s + c + \"S\";\n+        concat = \"\" + \"S\" + \"S\" + c + c + l + S + z + d;\n+        concat = \"\" + s + z + S + f + i + c + l + s;\n+        concat = \"\" + l + c + d + z + S + S + l + b;\n+        concat = \"\" + s + f + d + S + s + f + l + b;\n+        concat = \"\" + s + f + c + i + f + c + d + z;\n+        concat = \"\" + d + z + s + l + d + \"S\" + i + S;\n+        concat = \"\" + s + i + l + s + d + l + s + c;\n+        concat = \"\" + l + b + z + s + d + c + S + \"S\";\n+        concat = \"\" + b + c + z + z + l + l + i + d;\n+        concat = \"\" + f + f + f + b + l + l + d + z;\n+        concat = \"\" + s + d + z + z + f + s + f + i;\n+        concat = \"\" + S + c + l + s + s + b + i + i;\n+        concat = \"\" + z + f + c + l + c + b + b + b;\n+        concat = \"\" + S + z + d + \"S\" + b + i + f + l;\n+        concat = \"\" + s + l + f + S + f + z + \"S\" + \"S\";\n+        concat = \"\" + b + c + s + S + i + s + l + f;\n+        concat = \"\" + S + \"S\" + d + b + f + z + s + d;\n+        concat = \"\" + \"S\" + l + f + \"S\" + l + f + b + S;\n+        concat = \"\" + l + l + S + s + s + z + S + b;\n+        concat = \"\" + c + i + d + z + l + c + c + b;\n+        concat = \"\" + l + b + b + s + s + S + z + b;\n+        concat = \"\" + f + l + d + i + s + c + i + z;\n+        concat = \"\" + \"S\" + d + \"S\" + S + f + i + S + z;\n+        concat = \"\" + b + b + c + s + f + f + f + d;\n+        concat = \"\" + f + \"S\" + d + f + z + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + z + c + \"S\" + S + f + b + l + d;\n+        concat = \"\" + \"S\" + d + l + S + l + d + i + l;\n+        concat = \"\" + i + \"S\" + d + i + c + i + S + f;\n+        concat = \"\" + c + c + b + S + \"S\" + d + c + f;\n+        concat = \"\" + c + d + f + l + c + c + s + f;\n+        concat = \"\" + S + i + \"S\" + i + c + S + S + \"S\";\n+        concat = \"\" + f + \"S\" + \"S\" + b + z + s + S + d;\n+        concat = \"\" + c + l + l + \"S\" + b + b + c + c;\n+        concat = \"\" + b + i + \"S\" + c + s + S + b + l;\n+        concat = \"\" + z + i + z + S + S + s + b + c;\n+        concat = \"\" + l + l + s + i + i + z + l + \"S\";\n+        concat = \"\" + d + b + z + b + b + c + s + l;\n+        concat = \"\" + z + S + s + f + s + d + S + \"S\";\n+        concat = \"\" + d + \"S\" + s + b + f + \"S\" + S + f;\n+        concat = \"\" + b + S + z + z + z + i + f + b;\n+        concat = \"\" + b + S + S + f + \"S\" + c + \"S\" + c;\n+        concat = \"\" + s + l + d + \"S\" + S + s + \"S\" + z;\n+        concat = \"\" + i + d + S + b + s + z + S + l;\n+        concat = \"\" + b + i + \"S\" + l + l + c + d + f;\n+        concat = \"\" + f + \"S\" + b + b + c + d + f + \"S\";\n+        concat = \"\" + f + f + l + d + z + f + b + z;\n+        concat = \"\" + b + d + b + b + s + z + z + s;\n+        concat = \"\" + \"S\" + \"S\" + S + i + z + i + b + b;\n+        concat = \"\" + s + c + c + d + i + z + i + b;\n+        concat = \"\" + i + i + d + S + l + b + z + \"S\";\n+        concat = \"\" + \"S\" + b + b + c + S + S + d + f;\n+        concat = \"\" + s + z + f + S + d + S + s + S;\n+        concat = \"\" + l + f + b + d + d + d + b + i;\n+        concat = \"\" + i + l + z + S + b + d + d + f;\n+        concat = \"\" + l + b + b + f + i + b + d + S;\n+        concat = \"\" + d + b + \"S\" + l + \"S\" + d + c + z;\n+        concat = \"\" + l + \"S\" + s + \"S\" + d + l + f + b;\n+        concat = \"\" + s + s + l + f + c + \"S\" + c + c;\n+        concat = \"\" + i + S + S + b + S + s + l + l;\n+        concat = \"\" + b + z + f + f + s + S + z + c;\n+        concat = \"\" + \"S\" + z + \"S\" + l + c + f + z + \"S\";\n+        concat = \"\" + \"S\" + S + f + l + l + z + d + S;\n+        concat = \"\" + d + i + s + b + l + f + \"S\" + S;\n+        concat = \"\" + l + \"S\" + c + c + l + \"S\" + S + z;\n+        concat = \"\" + s + f + i + S + l + s + S + S;\n+        concat = \"\" + d + \"S\" + b + l + d + \"S\" + S + d;\n+        concat = \"\" + i + i + c + c + d + S + d + c;\n+        concat = \"\" + s + b + l + i + c + l + s + c;\n+        concat = \"\" + l + i + f + d + z + b + f + c;\n+        concat = \"\" + d + d + c + S + S + c + z + l;\n+        concat = \"\" + l + d + s + d + \"S\" + i + \"S\" + s;\n+        concat = \"\" + i + d + d + i + S + f + \"S\" + i;\n+        concat = \"\" + S + f + f + b + d + s + c + c;\n+        concat = \"\" + d + \"S\" + S + d + \"S\" + s + \"S\" + s;\n+        concat = \"\" + l + z + l + d + S + S + f + c;\n+        concat = \"\" + c + i + l + f + l + f + S + f;\n+        concat = \"\" + l + S + z + d + z + z + i + c;\n+        concat = \"\" + c + \"S\" + c + c + i + z + b + i;\n+        concat = \"\" + i + \"S\" + l + \"S\" + l + z + b + s;\n+        concat = \"\" + f + d + f + s + d + s + \"S\" + i;\n+        concat = \"\" + s + s + i + f + i + i + i + S;\n+        concat = \"\" + l + S + \"S\" + f + S + z + c + b;\n+        concat = \"\" + s + z + f + z + \"S\" + i + i + i;\n+        concat = \"\" + b + s + S + c + i + s + i + l;\n+        concat = \"\" + l + \"S\" + z + \"S\" + c + f + i + b;\n+        concat = \"\" + f + c + l + d + d + b + f + b;\n+        concat = \"\" + s + i + f + c + d + s + b + l;\n+        concat = \"\" + \"S\" + d + c + f + b + b + S + f;\n+        concat = \"\" + l + i + S + \"S\" + s + c + f + s;\n+        concat = \"\" + l + b + f + b + d + b + z + c;\n+        concat = \"\" + c + i + i + z + i + S + i + \"S\";\n+        concat = \"\" + \"S\" + \"S\" + b + b + s + z + d + \"S\";\n+        concat = \"\" + i + s + s + b + i + c + d + c;\n+        concat = \"\" + l + d + l + i + d + \"S\" + S + i;\n+        concat = \"\" + l + s + f + z + i + z + c + d;\n+        concat = \"\" + c + s + S + s + d + l + l + c;\n+        concat = \"\" + c + \"S\" + s + b + i + s + s + S;\n+        concat = \"\" + b + s + i + f + \"S\" + \"S\" + d + \"S\";\n+        concat = \"\" + f + s + b + d + S + d + f + i;\n+        concat = \"\" + S + c + d + z + f + s + s + c;\n+        concat = \"\" + c + s + d + c + l + i + z + c;\n+        concat = \"\" + f + \"S\" + f + f + b + \"S\" + c + \"S\";\n+        concat = \"\" + z + \"S\" + s + f + i + c + c + d;\n+        concat = \"\" + d + f + c + \"S\" + l + f + b + S;\n+        concat = \"\" + z + z + d + \"S\" + i + c + S + b;\n+        concat = \"\" + b + d + d + z + b + S + z + b;\n+        concat = \"\" + S + d + d + i + i + c + f + b;\n+        concat = \"\" + l + i + d + \"S\" + c + S + \"S\" + S;\n+        concat = \"\" + s + z + l + b + z + s + s + i;\n+        concat = \"\" + z + s + S + f + z + b + d + s;\n+        concat = \"\" + z + s + S + d + S + z + i + d;\n+        concat = \"\" + c + f + i + i + z + l + b + \"S\";\n+        concat = \"\" + S + i + d + l + b + \"S\" + s + \"S\";\n+        concat = \"\" + b + i + l + f + S + \"S\" + d + c;\n+        concat = \"\" + s + l + i + d + f + b + f + S;\n+        concat = \"\" + b + S + c + i + z + s + s + S;\n+        concat = \"\" + s + l + c + S + d + d + s + s;\n+        concat = \"\" + d + d + S + s + d + l + f + S;\n+        concat = \"\" + S + c + b + i + f + b + S + c;\n+        concat = \"\" + c + z + b + z + c + l + \"S\" + l;\n+        concat = \"\" + d + d + l + b + i + b + S + c;\n+        concat = \"\" + d + i + s + d + f + \"S\" + l + S;\n+        concat = \"\" + z + l + b + s + S + s + s + d;\n+        concat = \"\" + f + c + \"S\" + \"S\" + d + z + f + b;\n+        concat = \"\" + b + d + i + f + s + i + b + b;\n+        concat = \"\" + d + c + c + i + \"S\" + s + S + c;\n+        concat = \"\" + f + s + z + z + s + \"S\" + s + \"S\";\n+        concat = \"\" + b + c + c + f + S + l + S + i;\n+        concat = \"\" + s + d + i + l + s + b + b + i;\n+        concat = \"\" + z + \"S\" + z + z + b + c + s + z;\n+        concat = \"\" + i + f + b + s + i + d + S + d;\n+        concat = \"\" + \"S\" + s + i + \"S\" + c + b + \"S\" + \"S\";\n+        concat = \"\" + f + b + S + c + i + b + S + f;\n+        concat = \"\" + \"S\" + S + l + s + l + d + \"S\" + s;\n+        concat = \"\" + f + b + i + \"S\" + i + z + c + \"S\";\n+        concat = \"\" + c + l + d + c + b + c + i + b;\n+        concat = \"\" + i + \"S\" + f + c + c + c + i + c;\n+        concat = \"\" + b + b + s + \"S\" + c + l + z + b;\n+        concat = \"\" + z + b + i + f + d + \"S\" + s + S;\n+        concat = \"\" + \"S\" + d + d + d + z + S + d + f;\n+        concat = \"\" + z + d + s + f + l + \"S\" + i + f;\n+        concat = \"\" + \"S\" + i + i + d + i + S + l + f;\n+        concat = \"\" + \"S\" + b + d + S + l + d + b + c;\n+        concat = \"\" + l + \"S\" + z + d + b + c + S + d;\n+        concat = \"\" + f + f + z + \"S\" + z + f + f + z;\n+        concat = \"\" + s + \"S\" + d + S + b + b + i + b;\n+        concat = \"\" + z + d + S + c + b + l + l + b;\n+        concat = \"\" + f + i + i + l + i + \"S\" + i + b;\n+        concat = \"\" + l + c + b + z + f + \"S\" + s + \"S\";\n+        concat = \"\" + s + z + \"S\" + d + f + f + \"S\" + d;\n+        concat = \"\" + c + i + z + l + S + d + i + d;\n+        concat = \"\" + f + l + \"S\" + z + \"S\" + \"S\" + i + \"S\";\n+        concat = \"\" + z + i + b + z + d + i + \"S\" + l;\n+        concat = \"\" + \"S\" + f + S + S + l + c + S + s;\n+        concat = \"\" + s + i + l + d + b + l + d + b;\n+        concat = \"\" + c + S + d + b + s + f + S + \"S\";\n+        concat = \"\" + \"S\" + s + S + l + b + s + f + c;\n+        concat = \"\" + c + S + z + b + z + l + c + s;\n+        concat = \"\" + c + z + c + b + d + b + c + z;\n+        concat = \"\" + c + b + z + S + d + S + \"S\" + c;\n+        concat = \"\" + s + d + f + \"S\" + S + \"S\" + i + d;\n+        concat = \"\" + c + l + \"S\" + f + \"S\" + b + b + \"S\";\n+        concat = \"\" + \"S\" + l + b + b + c + S + z + c;\n+        concat = \"\" + \"S\" + l + l + s + s + S + S + s;\n+        concat = \"\" + z + d + b + \"S\" + d + b + l + c;\n+        concat = \"\" + l + b + d + c + s + f + i + \"S\";\n+        concat = \"\" + d + s + i + i + l + s + d + s;\n+        concat = \"\" + \"S\" + b + \"S\" + s + d + i + S + b;\n+        concat = \"\" + \"S\" + s + S + \"S\" + f + S + \"S\" + d;\n+        concat = \"\" + \"S\" + f + b + l + d + f + S + l;\n+        concat = \"\" + z + S + l + l + b + c + z + \"S\";\n+        concat = \"\" + c + b + d + i + c + i + s + s;\n+        concat = \"\" + z + z + s + f + \"S\" + z + l + d;\n+        concat = \"\" + z + c + b + c + z + c + f + z;\n+        concat = \"\" + s + i + S + d + i + i + l + i;\n+        concat = \"\" + l + c + z + l + z + \"S\" + s + l;\n+        concat = \"\" + c + b + i + c + z + S + d + b;\n+        concat = \"\" + b + d + b + z + b + z + c + d;\n+        concat = \"\" + b + b + z + z + z + d + i + s;\n+        concat = \"\" + z + d + s + s + f + f + f + b;\n+        concat = \"\" + \"S\" + b + z + S + S + i + s + S;\n+        concat = \"\" + \"S\" + i + b + f + S + f + l + S;\n+        concat = \"\" + d + d + f + l + d + s + f + i;\n+        concat = \"\" + d + s + c + b + s + d + f + \"S\";\n+        concat = \"\" + d + \"S\" + z + z + s + c + \"S\" + i;\n+        concat = \"\" + s + \"S\" + f + \"S\" + z + s + b + f;\n+        concat = \"\" + s + i + l + \"S\" + z + l + S + l;\n+        concat = \"\" + i + f + S + s + c + c + f + c;\n+        concat = \"\" + l + b + \"S\" + i + S + l + l + i;\n+        concat = \"\" + z + i + d + s + \"S\" + z + \"S\" + \"S\";\n+        concat = \"\" + f + c + z + b + l + f + b + l;\n+        concat = \"\" + i + c + S + f + S + z + S + c;\n+        concat = \"\" + i + d + d + z + d + f + f + \"S\";\n+        concat = \"\" + c + s + l + c + s + \"S\" + f + l;\n+        concat = \"\" + c + i + z + f + \"S\" + s + d + b;\n+        concat = \"\" + S + i + S + z + S + z + f + d;\n+        concat = \"\" + l + \"S\" + s + l + \"S\" + b + b + s;\n+        concat = \"\" + f + f + f + z + i + b + \"S\" + \"S\";\n+        concat = \"\" + c + b + z + b + f + s + b + i;\n+        concat = \"\" + S + \"S\" + f + c + S + i + s + \"S\";\n+        concat = \"\" + z + z + z + b + l + i + l + z;\n+        concat = \"\" + f + f + \"S\" + c + l + f + f + b;\n+        concat = \"\" + \"S\" + \"S\" + S + l + S + \"S\" + z + i;\n+        concat = \"\" + b + c + z + i + d + b + S + l;\n+        concat = \"\" + l + z + i + s + s + c + \"S\" + l;\n+        concat = \"\" + i + b + \"S\" + s + c + l + s + z;\n+        concat = \"\" + s + s + i + S + b + z + f + c;\n+        concat = \"\" + b + \"S\" + \"S\" + i + d + i + b + b;\n+        concat = \"\" + i + f + d + z + d + \"S\" + S + l;\n+        concat = \"\" + c + \"S\" + l + d + c + s + d + i;\n+        concat = \"\" + i + \"S\" + s + S + z + d + d + b;\n+        concat = \"\" + l + S + b + z + s + \"S\" + i + s;\n+        concat = \"\" + l + c + b + d + s + s + z + f;\n+        concat = \"\" + d + c + i + \"S\" + c + l + i + d;\n+        concat = \"\" + b + i + i + z + b + l + s + \"S\";\n+        concat = \"\" + c + \"S\" + S + c + z + l + l + i;\n+        concat = \"\" + f + S + c + c + f + S + f + \"S\";\n+        concat = \"\" + i + z + f + f + l + i + b + d;\n+        concat = \"\" + z + f + z + \"S\" + s + S + d + l;\n+        concat = \"\" + s + d + s + z + i + c + z + f;\n+        concat = \"\" + d + l + z + f + b + z + f + \"S\";\n+        concat = \"\" + s + b + z + S + \"S\" + z + S + i;\n+        concat = \"\" + S + S + i + i + b + d + s + d;\n+        concat = \"\" + S + c + c + b + c + z + i + \"S\";\n+        concat = \"\" + f + i + c + c + s + c + s + l;\n+        concat = \"\" + d + s + d + l + d + s + d + b;\n+        concat = \"\" + f + z + c + s + b + l + \"S\" + l;\n+        concat = \"\" + l + d + f + b + d + S + \"S\" + c;\n+        concat = \"\" + i + i + b + f + c + c + s + \"S\";\n+        concat = \"\" + \"S\" + i + c + d + s + c + c + f;\n+        concat = \"\" + s + f + c + s + z + d + c + i;\n+        concat = \"\" + l + c + S + d + \"S\" + S + f + i;\n+        concat = \"\" + f + z + \"S\" + b + i + f + z + z;\n+        concat = \"\" + l + l + b + f + \"S\" + S + z + c;\n+        concat = \"\" + f + s + z + b + S + f + b + l;\n+        concat = \"\" + s + z + z + c + d + z + b + S;\n+        concat = \"\" + f + b + i + b + f + s + z + \"S\";\n+        concat = \"\" + S + \"S\" + i + \"S\" + c + s + \"S\" + S;\n+        concat = \"\" + b + \"S\" + d + c + i + b + \"S\" + c;\n+        concat = \"\" + s + i + f + b + i + S + s + c;\n+        concat = \"\" + z + S + z + l + b + d + l + \"S\";\n+        concat = \"\" + l + c + \"S\" + c + i + \"S\" + c + s;\n+        concat = \"\" + b + b + b + S + d + f + l + f;\n+        concat = \"\" + b + S + d + c + s + i + S + l;\n+        concat = \"\" + f + S + S + l + c + i + d + z;\n+        concat = \"\" + l + b + z + d + b + l + z + f;\n+        concat = \"\" + b + d + f + b + \"S\" + c + c + \"S\";\n+        concat = \"\" + l + s + z + \"S\" + z + \"S\" + z + d;\n+        concat = \"\" + l + b + S + z + b + l + s + z;\n+        concat = \"\" + S + l + S + b + \"S\" + s + \"S\" + c;\n+        concat = \"\" + c + i + z + z + b + f + s + \"S\";\n+        concat = \"\" + f + S + z + l + f + l + b + b;\n+        concat = \"\" + z + S + d + f + l + i + f + f;\n+        concat = \"\" + f + S + z + s + z + c + z + b;\n+        concat = \"\" + d + s + l + i + \"S\" + S + z + \"S\";\n+        concat = \"\" + S + f + d + z + l + b + c + f;\n+        concat = \"\" + d + c + \"S\" + l + d + s + S + c;\n+        concat = \"\" + z + l + b + c + \"S\" + i + S + \"S\";\n+        concat = \"\" + z + b + i + z + l + d + S + s;\n+        concat = \"\" + f + \"S\" + b + s + s + i + z + l;\n+        concat = \"\" + S + c + s + s + z + d + s + z;\n+        concat = \"\" + f + \"S\" + i + c + S + f + c + S;\n+        concat = \"\" + i + c + S + l + d + z + f + \"S\";\n+        concat = \"\" + s + d + \"S\" + \"S\" + d + f + d + z;\n+        concat = \"\" + \"S\" + l + S + \"S\" + c + s + s + d;\n+        concat = \"\" + b + z + s + S + d + f + b + l;\n+        concat = \"\" + c + \"S\" + z + d + l + i + b + f;\n+        concat = \"\" + s + d + z + z + \"S\" + l + i + \"S\";\n+        concat = \"\" + c + i + b + z + \"S\" + l + \"S\" + i;\n+        concat = \"\" + f + f + s + z + i + b + i + f;\n+        concat = \"\" + b + z + f + s + z + c + b + z;\n+        concat = \"\" + z + z + s + s + b + z + z + s;\n+        concat = \"\" + d + b + f + \"S\" + b + c + i + b;\n+        concat = \"\" + i + d + c + i + d + d + z + f;\n+        concat = \"\" + d + i + l + l + i + \"S\" + S + S;\n+        concat = \"\" + \"S\" + z + f + \"S\" + d + b + d + i;\n+        concat = \"\" + \"S\" + s + s + d + b + \"S\" + S + d;\n+        concat = \"\" + i + b + s + S + d + c + c + z;\n+        concat = \"\" + i + b + l + l + \"S\" + l + l + s;\n+        concat = \"\" + i + z + s + \"S\" + l + c + f + i;\n+        concat = \"\" + l + i + S + b + c + S + z + S;\n+        concat = \"\" + \"S\" + l + s + z + d + d + s + i;\n+        concat = \"\" + b + \"S\" + s + s + c + c + i + c;\n+        concat = \"\" + z + i + f + z + b + c + \"S\" + f;\n+        concat = \"\" + f + d + s + d + s + f + f + S;\n+        concat = \"\" + \"S\" + f + f + d + S + c + l + f;\n+        concat = \"\" + f + i + l + b + c + c + b + b;\n+        concat = \"\" + s + l + f + i + c + i + b + S;\n+        concat = \"\" + \"S\" + d + b + c + f + i + i + d;\n+        concat = \"\" + \"S\" + s + s + f + z + c + b + z;\n+        concat = \"\" + \"S\" + l + c + f + b + z + c + l;\n+        concat = \"\" + s + f + d + f + c + c + b + f;\n+        concat = \"\" + c + l + S + l + l + z + i + s;\n+        concat = \"\" + f + d + l + i + c + z + S + l;\n+        concat = \"\" + \"S\" + s + \"S\" + c + f + b + s + b;\n+        concat = \"\" + c + l + S + d + b + i + c + S;\n+        concat = \"\" + c + \"S\" + z + d + s + c + b + i;\n+        concat = \"\" + z + i + b + i + i + \"S\" + \"S\" + c;\n+        concat = \"\" + s + S + \"S\" + b + b + s + i + i;\n+        concat = \"\" + S + z + c + i + \"S\" + f + \"S\" + f;\n+        concat = \"\" + z + S + S + z + S + d + i + s;\n+        concat = \"\" + z + f + c + l + S + l + z + i;\n+        concat = \"\" + z + i + b + d + i + l + d + i;\n+        concat = \"\" + z + l + l + b + z + S + l + z;\n+        concat = \"\" + b + s + f + l + b + b + i + d;\n+        concat = \"\" + S + S + i + z + c + z + b + s;\n+        concat = \"\" + c + \"S\" + i + l + l + i + i + i;\n+        concat = \"\" + d + b + l + S + c + b + s + z;\n+        concat = \"\" + d + \"S\" + l + b + b + i + s + c;\n+        concat = \"\" + f + z + f + b + S + z + d + S;\n+        concat = \"\" + b + b + z + l + b + l + i + i;\n+        concat = \"\" + \"S\" + b + l + f + c + i + s + \"S\";\n+        concat = \"\" + s + l + d + c + l + f + d + d;\n+        concat = \"\" + c + z + f + \"S\" + \"S\" + l + c + \"S\";\n+        concat = \"\" + S + d + l + S + S + z + s + c;\n+        concat = \"\" + S + \"S\" + z + S + s + c + S + z;\n+        concat = \"\" + f + \"S\" + c + s + i + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + c + z + S + z + c + l + d + \"S\";\n+        concat = \"\" + f + z + f + b + l + \"S\" + s + i;\n+        concat = \"\" + l + l + i + c + f + b + z + \"S\";\n+        concat = \"\" + f + b + l + b + i + c + c + S;\n+        concat = \"\" + S + z + l + i + f + \"S\" + c + \"S\";\n+        concat = \"\" + d + f + c + i + i + c + z + s;\n+        concat = \"\" + S + d + s + z + z + f + b + b;\n+        concat = \"\" + l + i + d + l + c + c + l + z;\n+        concat = \"\" + s + l + c + b + c + \"S\" + z + l;\n+        concat = \"\" + z + z + S + b + s + s + \"S\" + z;\n+        concat = \"\" + c + c + f + l + i + b + b + c;\n+        concat = \"\" + \"S\" + i + z + S + f + s + l + b;\n+        concat = \"\" + s + l + b + i + c + S + S + s;\n+        concat = \"\" + s + b + \"S\" + b + c + b + b + l;\n+        concat = \"\" + c + z + z + d + \"S\" + \"S\" + d + \"S\";\n+        concat = \"\" + s + S + s + s + b + i + \"S\" + z;\n+        concat = \"\" + \"S\" + i + z + s + S + f + i + S;\n+        concat = \"\" + S + s + S + l + z + S + d + z;\n+        concat = \"\" + S + d + b + l + b + c + c + \"S\";\n+        concat = \"\" + S + z + f + d + c + f + \"S\" + S;\n+        concat = \"\" + c + c + S + i + i + s + b + S;\n+        concat = \"\" + c + b + \"S\" + z + S + s + b + f;\n+        concat = \"\" + f + \"S\" + d + d + c + b + f + c;\n+        concat = \"\" + b + d + f + \"S\" + s + z + f + i;\n+        concat = \"\" + b + S + \"S\" + S + f + z + d + z;\n+        concat = \"\" + f + i + S + c + i + d + f + d;\n+        concat = \"\" + l + i + z + S + z + l + z + \"S\";\n+        concat = \"\" + z + \"S\" + d + i + z + f + i + f;\n+        concat = \"\" + s + s + S + l + l + b + d + l;\n+        concat = \"\" + l + i + d + z + i + c + c + z;\n+        concat = \"\" + S + i + S + c + l + S + l + S;\n+        concat = \"\" + d + d + d + f + s + d + i + d;\n+        concat = \"\" + z + s + S + d + S + s + d + S;\n+        concat = \"\" + b + l + \"S\" + i + z + i + d + l;\n+        concat = \"\" + d + d + d + \"S\" + c + d + b + l;\n+        concat = \"\" + i + z + i + S + s + l + s + f;\n+        concat = \"\" + S + b + l + f + b + \"S\" + s + l;\n+        concat = \"\" + \"S\" + s + i + f + l + f + i + S;\n+        concat = \"\" + \"S\" + d + \"S\" + b + s + d + z + s;\n+        concat = \"\" + i + b + s + s + b + z + S + i;\n+        concat = \"\" + s + i + c + i + f + c + l + c;\n+        concat = \"\" + l + S + \"S\" + s + c + \"S\" + \"S\" + S;\n+        concat = \"\" + d + f + b + s + s + f + S + f;\n+        concat = \"\" + f + s + \"S\" + z + f + b + z + b;\n+        concat = \"\" + l + f + f + l + S + l + b + \"S\";\n+        concat = \"\" + i + d + z + s + b + S + c + S;\n+        concat = \"\" + c + b + d + c + \"S\" + i + b + l;\n+        concat = \"\" + S + \"S\" + c + f + z + \"S\" + b + b;\n+        concat = \"\" + S + b + S + i + \"S\" + b + l + S;\n+        concat = \"\" + S + b + s + b + d + f + i + \"S\";\n+        concat = \"\" + c + S + b + S + c + s + d + d;\n+        concat = \"\" + S + \"S\" + l + c + c + S + \"S\" + s;\n+        concat = \"\" + S + s + i + i + s + s + i + s;\n+        concat = \"\" + b + d + b + z + l + \"S\" + \"S\" + c;\n+        concat = \"\" + z + S + b + d + b + i + b + \"S\";\n+        concat = \"\" + b + b + f + b + l + f + c + f;\n+        concat = \"\" + l + \"S\" + b + i + c + b + f + l;\n+        concat = \"\" + \"S\" + z + b + \"S\" + f + c + l + b;\n+        concat = \"\" + c + c + S + S + \"S\" + f + d + l;\n+        concat = \"\" + z + f + d + z + z + i + i + i;\n+        concat = \"\" + s + \"S\" + l + l + d + S + c + f;\n+        concat = \"\" + b + s + i + l + c + c + S + S;\n+        concat = \"\" + b + s + i + \"S\" + b + b + b + d;\n+        concat = \"\" + z + \"S\" + S + z + i + z + d + d;\n+        concat = \"\" + s + S + f + \"S\" + b + S + \"S\" + z;\n+        concat = \"\" + f + S + d + c + S + d + l + c;\n+        concat = \"\" + i + z + f + S + \"S\" + b + d + c;\n+        concat = \"\" + f + c + l + \"S\" + i + i + f + d;\n+        concat = \"\" + s + i + i + i + S + i + c + d;\n+        concat = \"\" + d + l + d + l + i + s + S + f;\n+        concat = \"\" + f + s + c + S + b + \"S\" + d + f;\n+        concat = \"\" + s + l + c + b + s + b + b + s;\n+        concat = \"\" + b + c + l + f + i + c + s + z;\n+        concat = \"\" + \"S\" + i + i + \"S\" + l + d + c + i;\n+        concat = \"\" + b + l + b + i + S + f + s + l;\n+        concat = \"\" + c + s + b + s + d + c + l + i;\n+        concat = \"\" + f + \"S\" + i + c + \"S\" + f + s + b;\n+        concat = \"\" + z + d + c + f + c + c + d + b;\n+        concat = \"\" + l + b + z + z + c + c + f + S;\n+        concat = \"\" + z + S + d + l + d + \"S\" + b + l;\n+        concat = \"\" + b + \"S\" + b + S + l + \"S\" + f + z;\n+        concat = \"\" + S + z + i + l + d + l + l + l;\n+        concat = \"\" + f + l + d + z + b + i + \"S\" + \"S\";\n+        concat = \"\" + S + c + l + s + b + l + b + d;\n+        concat = \"\" + z + i + z + d + l + d + b + i;\n+        concat = \"\" + z + s + f + c + s + b + b + f;\n+        concat = \"\" + \"S\" + b + l + S + s + d + s + l;\n+        concat = \"\" + c + i + l + \"S\" + f + c + c + s;\n+        concat = \"\" + c + l + z + S + c + c + S + b;\n+        concat = \"\" + f + d + i + f + \"S\" + S + b + f;\n+        concat = \"\" + f + c + d + c + f + i + s + d;\n+        concat = \"\" + c + z + S + i + S + c + d + f;\n+        concat = \"\" + b + d + S + c + \"S\" + d + l + \"S\";\n+        concat = \"\" + z + c + l + b + s + z + f + f;\n+        concat = \"\" + b + b + s + d + l + b + z + b;\n+        concat = \"\" + l + f + c + f + S + s + b + c;\n+        concat = \"\" + f + c + s + f + \"S\" + b + c + c;\n+        concat = \"\" + \"S\" + \"S\" + b + d + d + \"S\" + s + l;\n+        concat = \"\" + c + i + d + s + b + i + s + c;\n+        concat = \"\" + c + c + z + z + l + s + S + i;\n+        concat = \"\" + s + b + d + z + l + b + \"S\" + f;\n+        concat = \"\" + f + c + c + c + s + s + s + S;\n+        concat = \"\" + \"S\" + \"S\" + c + S + b + b + b + i;\n+        concat = \"\" + d + i + \"S\" + b + d + c + f + z;\n+        concat = \"\" + b + S + z + s + d + S + z + z;\n+        concat = \"\" + i + l + i + s + s + b + i + z;\n+        concat = \"\" + s + d + c + l + b + f + S + z;\n+        concat = \"\" + f + c + z + b + b + f + b + c;\n+        concat = \"\" + b + d + s + b + s + s + l + \"S\";\n+        concat = \"\" + \"S\" + d + s + s + l + s + i + d;\n+        concat = \"\" + S + c + b + c + b + d + \"S\" + S;\n+        concat = \"\" + c + \"S\" + c + c + c + z + s + d;\n+        concat = \"\" + s + \"S\" + s + l + S + b + l + c;\n+        concat = \"\" + i + S + S + b + z + S + s + l;\n+        concat = \"\" + l + i + \"S\" + s + i + S + i + S;\n+        concat = \"\" + S + f + f + f + b + \"S\" + f + z;\n+        concat = \"\" + d + S + S + d + f + i + b + b;\n+        concat = \"\" + z + i + i + b + l + f + z + d;\n+        concat = \"\" + c + c + i + f + f + l + i + c;\n+        concat = \"\" + z + f + S + c + b + S + z + s;\n+        concat = \"\" + \"S\" + S + z + s + b + f + S + \"S\";\n+        concat = \"\" + l + z + S + z + \"S\" + b + S + \"S\";\n+        concat = \"\" + d + s + s + i + d + s + z + z;\n+        concat = \"\" + f + i + f + z + S + z + z + i;\n+        concat = \"\" + b + d + s + b + l + s + \"S\" + d;\n+        concat = \"\" + l + f + f + i + c + z + z + c;\n+        concat = \"\" + S + s + z + d + c + l + l + \"S\";\n+        concat = \"\" + z + d + c + f + i + \"S\" + d + c;\n+        concat = \"\" + S + \"S\" + z + d + c + b + l + \"S\";\n+        concat = \"\" + b + c + d + d + f + i + i + b;\n+        concat = \"\" + s + c + i + c + d + z + S + d;\n+        concat = \"\" + f + c + \"S\" + d + c + S + z + \"S\";\n+        concat = \"\" + \"S\" + b + l + \"S\" + i + l + b + d;\n+        concat = \"\" + c + d + c + \"S\" + c + d + b + l;\n+        concat = \"\" + l + c + b + z + s + S + d + d;\n+        concat = \"\" + d + d + c + c + d + b + s + l;\n+        concat = \"\" + d + c + c + S + \"S\" + c + s + b;\n+        concat = \"\" + s + i + i + i + d + z + c + f;\n+        concat = \"\" + s + S + z + d + d + c + d + f;\n+        concat = \"\" + l + b + f + s + f + c + f + b;\n+        concat = \"\" + d + b + z + S + b + s + d + l;\n+        concat = \"\" + s + z + f + b + S + s + z + \"S\";\n+        concat = \"\" + z + i + z + d + i + S + i + s;\n+        concat = \"\" + b + b + f + i + c + i + i + s;\n+        concat = \"\" + f + S + b + b + S + d + \"S\" + s;\n+        concat = \"\" + i + S + i + \"S\" + i + S + S + f;\n+        concat = \"\" + b + s + s + z + z + s + \"S\" + i;\n+        concat = \"\" + s + b + S + \"S\" + l + i + s + s;\n+        concat = \"\" + f + z + s + z + s + f + d + i;\n+        concat = \"\" + z + l + s + c + i + l + S + l;\n+        concat = \"\" + S + S + b + i + S + S + l + z;\n+        concat = \"\" + z + S + l + \"S\" + z + z + f + \"S\";\n+        concat = \"\" + l + S + f + c + f + f + s + S;\n+        concat = \"\" + S + i + d + i + z + b + i + b;\n+        concat = \"\" + c + l + f + d + i + f + b + d;\n+        concat = \"\" + S + s + c + d + d + c + i + \"S\";\n+        concat = \"\" + \"S\" + S + c + s + c + b + z + d;\n+        concat = \"\" + l + i + c + s + \"S\" + d + S + b;\n+        concat = \"\" + \"S\" + c + f + l + S + i + s + i;\n+        concat = \"\" + b + s + \"S\" + i + d + c + b + s;\n+        concat = \"\" + d + \"S\" + z + b + f + z + s + f;\n+        concat = \"\" + s + b + b + d + i + \"S\" + l + S;\n+        concat = \"\" + \"S\" + f + l + d + f + i + l + b;\n+        concat = \"\" + s + i + S + S + s + b + i + l;\n+        concat = \"\" + \"S\" + i + s + i + f + f + l + f;\n+        concat = \"\" + b + c + b + i + i + i + d + i;\n+        concat = \"\" + l + c + l + c + c + S + i + S;\n+        concat = \"\" + \"S\" + S + \"S\" + b + s + b + i + s;\n+        concat = \"\" + i + s + \"S\" + s + \"S\" + \"S\" + z + d;\n+        concat = \"\" + d + z + c + b + c + S + z + S;\n+        concat = \"\" + l + c + b + b + l + c + z + l;\n+        concat = \"\" + b + \"S\" + i + c + l + S + c + z;\n+        concat = \"\" + c + c + f + l + i + \"S\" + i + z;\n+        concat = \"\" + z + \"S\" + z + z + s + i + d + c;\n+        concat = \"\" + z + d + c + z + i + S + \"S\" + S;\n+        concat = \"\" + \"S\" + d + \"S\" + b + z + f + S + d;\n+        concat = \"\" + c + z + z + l + l + S + b + l;\n+        concat = \"\" + d + c + i + i + i + s + b + f;\n+        concat = \"\" + \"S\" + d + f + z + c + b + c + s;\n+        concat = \"\" + b + s + \"S\" + d + f + i + i + s;\n+        concat = \"\" + i + \"S\" + i + \"S\" + l + z + z + z;\n+        concat = \"\" + i + S + i + \"S\" + z + i + S + z;\n+        concat = \"\" + z + \"S\" + S + c + s + s + c + s;\n+        concat = \"\" + b + f + z + c + c + l + f + d;\n+        concat = \"\" + z + l + s + f + s + l + c + d;\n+        concat = \"\" + c + z + s + S + c + S + c + d;\n+        concat = \"\" + s + s + z + d + \"S\" + i + S + \"S\";\n+        concat = \"\" + \"S\" + f + d + \"S\" + d + f + c + b;\n+        concat = \"\" + b + z + b + s + S + \"S\" + b + b;\n+        concat = \"\" + l + d + d + d + l + \"S\" + i + d;\n+        concat = \"\" + d + \"S\" + d + b + s + c + S + f;\n+        concat = \"\" + f + d + l + S + s + i + b + S;\n+        concat = \"\" + z + c + b + b + f + b + i + z;\n+        concat = \"\" + s + f + l + c + l + z + d + z;\n+        concat = \"\" + l + S + i + d + z + z + s + d;\n+        concat = \"\" + i + c + i + d + z + S + \"S\" + i;\n+        concat = \"\" + d + c + z + \"S\" + z + l + z + z;\n+        concat = \"\" + s + s + d + S + s + c + f + z;\n+        concat = \"\" + l + \"S\" + l + l + \"S\" + z + z + S;\n+        concat = \"\" + b + b + d + z + i + b + s + d;\n+        concat = \"\" + d + d + d + S + i + c + \"S\" + z;\n+        concat = \"\" + l + \"S\" + l + S + f + \"S\" + b + c;\n+        concat = \"\" + s + z + \"S\" + S + f + S + d + b;\n+        concat = \"\" + l + s + d + \"S\" + f + b + s + b;\n+        concat = \"\" + f + S + i + z + z + l + l + f;\n+        concat = \"\" + \"S\" + S + b + b + i + f + d + b;\n+        concat = \"\" + s + b + i + c + S + S + l + d;\n+        concat = \"\" + l + z + \"S\" + f + \"S\" + \"S\" + b + z;\n+        concat = \"\" + b + z + f + S + s + d + d + c;\n+        concat = \"\" + f + d + l + S + b + l + c + S;\n+        concat = \"\" + c + z + b + s + z + s + S + b;\n+        concat = \"\" + i + i + b + b + S + z + b + i;\n+        concat = \"\" + f + s + i + s + l + d + i + z;\n+        concat = \"\" + z + c + S + s + b + f + b + l;\n+        concat = \"\" + s + c + \"S\" + \"S\" + b + \"S\" + S + f;\n+        concat = \"\" + b + b + i + z + l + z + \"S\" + i;\n+        concat = \"\" + f + s + s + z + f + f + d + \"S\";\n+        concat = \"\" + z + b + \"S\" + s + f + S + f + b;\n+        concat = \"\" + b + S + f + l + S + i + c + s;\n+        concat = \"\" + i + \"S\" + i + S + s + l + b + s;\n+        concat = \"\" + i + c + b + f + S + i + s + s;\n+        concat = \"\" + z + S + s + d + b + l + l + S;\n+        concat = \"\" + z + i + s + l + b + s + d + c;\n+        concat = \"\" + s + s + c + f + z + S + b + S;\n+        concat = \"\" + \"S\" + S + b + s + i + f + S + c;\n+        concat = \"\" + i + \"S\" + l + z + d + f + b + i;\n+        concat = \"\" + f + \"S\" + i + z + f + c + S + z;\n+        concat = \"\" + \"S\" + z + f + i + c + S + s + z;\n+        concat = \"\" + z + z + b + b + S + c + s + b;\n+        concat = \"\" + c + s + d + S + i + S + S + i;\n+        concat = \"\" + l + s + z + l + S + s + z + i;\n+        concat = \"\" + l + z + b + z + b + b + \"S\" + s;\n+        concat = \"\" + d + S + d + S + s + b + l + d;\n+        concat = \"\" + s + z + \"S\" + s + l + d + \"S\" + S;\n+        concat = \"\" + f + \"S\" + S + c + c + l + s + S;\n+        concat = \"\" + b + i + s + d + d + d + \"S\" + i;\n+        concat = \"\" + S + \"S\" + S + S + \"S\" + z + S + S;\n+        concat = \"\" + s + l + S + b + d + i + c + s;\n+        concat = \"\" + \"S\" + z + d + d + f + z + b + c;\n+        concat = \"\" + c + b + d + s + S + c + S + S;\n+        concat = \"\" + f + b + z + c + s + c + i + b;\n+        concat = \"\" + f + \"S\" + d + f + i + \"S\" + z + f;\n+        concat = \"\" + z + f + b + z + z + i + z + l;\n+        concat = \"\" + d + s + c + s + \"S\" + i + s + z;\n+        concat = \"\" + i + z + f + s + f + s + i + S;\n+        concat = \"\" + \"S\" + s + z + \"S\" + d + \"S\" + c + S;\n+        concat = \"\" + d + d + i + l + b + l + b + S;\n+        concat = \"\" + z + i + d + S + s + s + i + z;\n+        concat = \"\" + d + b + S + S + c + d + d + i;\n+        concat = \"\" + c + d + z + c + l + z + z + f;\n+        concat = \"\" + s + i + z + s + d + \"S\" + d + \"S\";\n+        concat = \"\" + d + i + S + l + z + l + i + d;\n+        concat = \"\" + s + l + i + i + z + S + f + f;\n+        concat = \"\" + c + c + l + S + l + S + i + l;\n+        concat = \"\" + \"S\" + f + c + c + s + b + d + l;\n+        concat = \"\" + c + c + S + c + s + f + f + S;\n+        concat = \"\" + s + l + i + s + f + S + s + f;\n+        concat = \"\" + f + c + f + i + S + i + s + s;\n+        concat = \"\" + c + f + S + f + c + \"S\" + S + f;\n+        concat = \"\" + i + f + z + \"S\" + \"S\" + z + f + s;\n+        concat = \"\" + z + d + \"S\" + l + i + d + z + f;\n+        concat = \"\" + S + S + d + c + s + \"S\" + c + c;\n+        concat = \"\" + l + z + d + d + b + z + c + S;\n+        concat = \"\" + d + l + \"S\" + l + S + d + c + l;\n+        concat = \"\" + b + z + S + d + f + \"S\" + i + c;\n+        concat = \"\" + z + \"S\" + S + d + d + c + \"S\" + \"S\";\n+        concat = \"\" + c + z + l + l + b + f + f + l;\n+        concat = \"\" + d + s + S + c + i + s + z + d;\n+        concat = \"\" + s + z + z + f + l + b + i + z;\n+        concat = \"\" + i + l + f + s + d + S + b + S;\n+        concat = \"\" + z + b + l + c + \"S\" + c + d + c;\n+        concat = \"\" + z + z + c + l + S + d + i + z;\n+        concat = \"\" + b + l + l + S + b + \"S\" + c + l;\n+        concat = \"\" + \"S\" + s + S + b + d + f + b + s;\n+        concat = \"\" + \"S\" + z + z + b + c + f + d + f;\n+        concat = \"\" + b + c + b + s + S + \"S\" + c + f;\n+        concat = \"\" + \"S\" + s + S + l + d + \"S\" + \"S\" + l;\n+        concat = \"\" + l + S + l + l + f + c + s + d;\n+        concat = \"\" + s + S + c + d + c + s + l + d;\n+        concat = \"\" + z + i + d + b + S + c + d + d;\n+        concat = \"\" + S + d + z + b + z + z + b + l;\n+        concat = \"\" + z + d + \"S\" + i + i + s + l + \"S\";\n+        concat = \"\" + S + b + S + l + d + i + l + i;\n+        concat = \"\" + d + z + \"S\" + l + b + \"S\" + i + f;\n+        concat = \"\" + d + s + b + d + i + b + z + l;\n+        concat = \"\" + l + s + i + i + f + f + \"S\" + f;\n+        concat = \"\" + s + i + \"S\" + \"S\" + c + i + f + b;\n+        concat = \"\" + i + b + l + S + i + c + s + c;\n+        concat = \"\" + s + c + i + \"S\" + i + f + c + S;\n+        concat = \"\" + \"S\" + c + l + b + i + f + c + b;\n+        concat = \"\" + z + c + i + \"S\" + l + S + S + S;\n+        concat = \"\" + S + \"S\" + s + s + i + f + z + S;\n+        concat = \"\" + c + S + S + c + f + l + f + d;\n+        concat = \"\" + c + i + i + l + d + f + d + i;\n+        concat = \"\" + f + d + f + z + f + \"S\" + \"S\" + f;\n+        concat = \"\" + S + z + z + s + z + i + \"S\" + b;\n+        concat = \"\" + z + c + i + i + d + z + l + i;\n+        concat = \"\" + f + b + s + z + i + i + \"S\" + d;\n+        concat = \"\" + d + s + l + z + S + c + S + i;\n+        concat = \"\" + s + f + b + S + s + c + f + z;\n+        concat = \"\" + z + b + f + d + \"S\" + z + b + s;\n+        concat = \"\" + b + l + z + S + S + z + i + b;\n+        concat = \"\" + i + d + f + c + \"S\" + b + s + d;\n+        concat = \"\" + l + d + f + c + f + l + z + f;\n+        concat = \"\" + i + l + c + l + c + i + S + z;\n+        concat = \"\" + d + i + l + f + z + b + l + c;\n+        concat = \"\" + d + \"S\" + S + f + c + c + f + i;\n+        concat = \"\" + b + \"S\" + d + z + l + f + c + f;\n+        concat = \"\" + d + c + i + \"S\" + z + b + l + \"S\";\n+        concat = \"\" + l + d + c + s + f + \"S\" + s + s;\n+        concat = \"\" + i + S + l + i + s + b + d + i;\n+        concat = \"\" + c + S + b + s + d + l + i + l;\n+        concat = \"\" + d + d + z + c + l + i + z + b;\n+        concat = \"\" + i + l + z + S + b + \"S\" + i + s;\n+        concat = \"\" + z + b + f + \"S\" + \"S\" + z + z + b;\n+        concat = \"\" + c + l + l + s + S + c + f + c;\n+        concat = \"\" + d + c + z + l + \"S\" + f + d + d;\n+        concat = \"\" + \"S\" + i + b + l + c + s + i + c;\n+        concat = \"\" + b + s + b + i + b + f + S + l;\n+        concat = \"\" + l + S + z + s + f + z + s + d;\n+        concat = \"\" + c + b + S + b + f + z + s + \"S\";\n+        concat = \"\" + i + s + d + z + \"S\" + b + z + l;\n+        concat = \"\" + c + d + i + f + i + l + d + f;\n+        concat = \"\" + \"S\" + \"S\" + z + z + f + d + d + c;\n+        concat = \"\" + z + s + S + f + S + S + i + \"S\";\n+        concat = \"\" + l + d + z + b + i + d + \"S\" + c;\n+        concat = \"\" + \"S\" + f + s + f + b + d + f + i;\n+        concat = \"\" + i + z + f + l + z + d + \"S\" + S;\n+        concat = \"\" + b + l + S + i + i + s + d + i;\n+        concat = \"\" + i + f + d + \"S\" + f + s + s + s;\n+        concat = \"\" + i + s + \"S\" + i + S + d + c + s;\n+        concat = \"\" + i + b + \"S\" + d + s + \"S\" + i + i;\n+        concat = \"\" + d + i + d + b + i + i + S + s;\n+        concat = \"\" + \"S\" + z + c + S + S + b + i + l;\n+        concat = \"\" + S + i + \"S\" + c + f + S + s + c;\n+        concat = \"\" + \"S\" + l + l + b + S + s + \"S\" + l;\n+        concat = \"\" + s + S + \"S\" + b + d + \"S\" + \"S\" + d;\n+        concat = \"\" + i + i + z + z + d + i + s + i;\n+        concat = \"\" + f + S + s + c + z + \"S\" + i + l;\n+        concat = \"\" + S + i + z + z + S + f + f + c;\n+        concat = \"\" + l + S + l + l + c + z + S + s;\n+        concat = \"\" + f + s + f + c + f + s + z + z;\n+        concat = \"\" + s + c + s + s + S + d + f + s;\n+        concat = \"\" + c + \"S\" + d + z + i + b + \"S\" + \"S\";\n+        concat = \"\" + S + b + i + f + l + d + s + s;\n+        concat = \"\" + c + S + b + f + s + d + i + i;\n+        concat = \"\" + l + d + i + f + s + s + b + d;\n+        concat = \"\" + f + \"S\" + i + S + f + c + \"S\" + s;\n+        concat = \"\" + s + \"S\" + i + f + z + i + l + c;\n+        concat = \"\" + b + i + s + \"S\" + l + l + \"S\" + b;\n+        concat = \"\" + b + d + S + \"S\" + S + b + s + c;\n+        concat = \"\" + \"S\" + d + s + b + s + f + S + c;\n+        concat = \"\" + i + l + S + i + d + d + d + b;\n+        concat = \"\" + S + f + c + b + b + f + s + b;\n+        concat = \"\" + d + i + S + z + f + l + z + s;\n+        concat = \"\" + z + S + \"S\" + f + b + c + s + d;\n+        concat = \"\" + c + f + b + z + b + c + \"S\" + d;\n+        concat = \"\" + i + d + z + i + \"S\" + b + S + c;\n+        concat = \"\" + s + l + s + S + c + b + l + z;\n+        concat = \"\" + f + l + z + l + \"S\" + b + b + i;\n+        concat = \"\" + s + d + \"S\" + i + S + b + z + c;\n+        concat = \"\" + \"S\" + d + b + l + l + s + S + l;\n+        concat = \"\" + b + z + c + s + c + l + i + l;\n+        concat = \"\" + z + d + s + S + c + f + S + c;\n+        concat = \"\" + z + s + f + S + b + b + s + b;\n+        concat = \"\" + S + d + l + b + \"S\" + \"S\" + c + S;\n+        concat = \"\" + S + z + s + z + d + \"S\" + i + z;\n+        concat = \"\" + c + l + f + c + f + b + d + b;\n+        concat = \"\" + f + c + s + l + i + l + s + S;\n+        concat = \"\" + b + S + \"S\" + f + i + c + \"S\" + c;\n+        concat = \"\" + s + c + l + f + z + b + f + z;\n+        concat = \"\" + s + z + b + c + l + d + l + b;\n+        concat = \"\" + s + d + f + l + i + s + S + S;\n+        concat = \"\" + l + \"S\" + d + z + \"S\" + i + c + l;\n+        concat = \"\" + i + c + z + d + s + b + S + s;\n+        concat = \"\" + z + l + b + S + b + s + l + f;\n+        concat = \"\" + i + z + f + d + f + b + s + z;\n+        concat = \"\" + f + s + S + i + S + i + S + z;\n+        concat = \"\" + d + s + l + i + c + \"S\" + \"S\" + f;\n+        concat = \"\" + f + d + z + s + d + c + s + d;\n+        concat = \"\" + b + S + b + l + c + \"S\" + l + b;\n+        concat = \"\" + b + \"S\" + s + d + b + S + c + S;\n+        concat = \"\" + l + l + i + b + d + z + z + l;\n+        concat = \"\" + z + \"S\" + l + S + c + l + l + c;\n+        concat = \"\" + S + z + \"S\" + z + S + c + c + b;\n+        concat = \"\" + f + l + c + d + d + s + d + S;\n+        concat = \"\" + f + z + z + d + z + l + d + S;\n+        concat = \"\" + s + l + c + l + S + f + S + l;\n+        concat = \"\" + c + f + d + l + \"S\" + b + b + b;\n+        concat = \"\" + S + b + i + S + i + s + z + c;\n+        concat = \"\" + z + c + z + S + s + f + f + f;\n+        concat = \"\" + d + d + f + l + z + \"S\" + \"S\" + i;\n+        concat = \"\" + f + f + b + c + b + c + f + z;\n+        concat = \"\" + z + f + z + d + i + b + i + b;\n+        concat = \"\" + S + \"S\" + i + c + b + s + i + z;\n+        concat = \"\" + f + \"S\" + c + c + b + z + i + i;\n+        concat = \"\" + \"S\" + \"S\" + d + i + \"S\" + d + i + \"S\";\n+        concat = \"\" + b + i + S + i + S + z + d + d;\n+        concat = \"\" + z + z + \"S\" + i + b + s + S + b;\n+        concat = \"\" + z + \"S\" + z + \"S\" + i + c + S + s;\n+        concat = \"\" + c + c + b + S + b + c + i + f;\n+        concat = \"\" + b + i + i + i + i + d + b + b;\n+        concat = \"\" + d + s + d + \"S\" + z + l + z + S;\n+        concat = \"\" + \"S\" + s + d + l + f + c + d + \"S\";\n+        concat = \"\" + i + S + b + s + d + l + l + \"S\";\n+        concat = \"\" + \"S\" + d + s + b + S + s + S + z;\n+        concat = \"\" + l + \"S\" + \"S\" + d + \"S\" + z + c + z;\n+        concat = \"\" + i + d + i + f + f + c + \"S\" + \"S\";\n+        concat = \"\" + l + d + l + \"S\" + c + l + S + \"S\";\n+        concat = \"\" + \"S\" + l + i + d + c + l + d + S;\n+        concat = \"\" + b + f + i + c + z + d + i + f;\n+        concat = \"\" + S + b + s + f + s + b + \"S\" + \"S\";\n+        concat = \"\" + z + d + b + z + l + s + z + S;\n+        concat = \"\" + b + c + z + \"S\" + d + d + l + l;\n+        concat = \"\" + \"S\" + i + i + \"S\" + f + s + c + c;\n+        concat = \"\" + s + i + i + s + S + z + \"S\" + l;\n+        concat = \"\" + s + i + f + s + z + c + l + f;\n+        concat = \"\" + i + z + z + d + s + z + f + b;\n+        concat = \"\" + \"S\" + l + s + d + f + \"S\" + i + c;\n+        concat = \"\" + i + \"S\" + z + z + z + b + f + l;\n+        concat = \"\" + l + S + S + \"S\" + c + l + f + \"S\";\n+        concat = \"\" + b + f + c + c + \"S\" + S + b + c;\n+        concat = \"\" + c + i + b + c + b + z + s + \"S\";\n+        concat = \"\" + f + S + d + f + i + S + S + S;\n+        concat = \"\" + f + d + S + c + b + s + i + b;\n+        concat = \"\" + b + c + z + i + f + d + d + s;\n+        concat = \"\" + \"S\" + c + z + l + \"S\" + i + s + l;\n+        concat = \"\" + c + f + \"S\" + s + c + \"S\" + \"S\" + d;\n+        concat = \"\" + f + c + \"S\" + d + f + i + z + i;\n+        concat = \"\" + l + c + z + b + d + l + i + s;\n+        concat = \"\" + c + d + l + d + i + b + S + b;\n+        concat = \"\" + d + S + z + l + c + l + b + z;\n+        concat = \"\" + \"S\" + l + f + i + c + S + i + c;\n+        concat = \"\" + f + c + i + \"S\" + z + c + c + z;\n+        concat = \"\" + \"S\" + S + i + i + d + b + \"S\" + z;\n+        concat = \"\" + l + c + c + S + l + c + s + S;\n+        concat = \"\" + s + z + z + s + d + z + S + i;\n+        concat = \"\" + l + S + d + c + i + f + \"S\" + \"S\";\n+        concat = \"\" + z + s + S + s + d + z + l + d;\n+        concat = \"\" + d + c + l + i + \"S\" + f + b + c;\n+        concat = \"\" + f + i + f + c + b + f + f + i;\n+        concat = \"\" + \"S\" + S + S + \"S\" + z + d + l + l;\n+        concat = \"\" + s + S + s + z + \"S\" + i + d + f;\n+        concat = \"\" + d + c + l + S + f + i + S + S;\n+        concat = \"\" + \"S\" + f + d + c + i + i + d + f;\n+        concat = \"\" + l + f + z + f + S + c + d + S;\n+        concat = \"\" + i + f + \"S\" + b + s + b + f + \"S\";\n+        concat = \"\" + l + \"S\" + z + i + b + c + b + l;\n+        concat = \"\" + l + S + s + \"S\" + f + f + z + l;\n+        concat = \"\" + \"S\" + c + \"S\" + f + i + s + \"S\" + f;\n+        concat = \"\" + f + s + s + i + b + S + d + b;\n+        concat = \"\" + s + f + \"S\" + b + f + f + i + z;\n+        concat = \"\" + s + s + S + b + \"S\" + s + z + z;\n+        concat = \"\" + S + f + b + l + z + s + f + S;\n+        concat = \"\" + c + s + s + c + S + s + f + c;\n+        concat = \"\" + i + f + l + d + \"S\" + f + i + d;\n+        concat = \"\" + l + \"S\" + S + c + f + b + l + d;\n+        concat = \"\" + S + s + S + S + f + c + d + S;\n+        concat = \"\" + s + l + c + l + S + c + \"S\" + S;\n+        concat = \"\" + i + i + l + z + \"S\" + i + b + b;\n+        concat = \"\" + c + i + c + S + \"S\" + i + s + b;\n+        concat = \"\" + l + i + c + i + z + c + d + f;\n+        concat = \"\" + f + z + S + i + i + z + z + d;\n+        concat = \"\" + l + f + z + f + c + S + l + c;\n+        concat = \"\" + \"S\" + s + d + l + c + s + z + d;\n+        concat = \"\" + S + s + s + z + c + b + z + i;\n+        concat = \"\" + f + b + z + f + z + \"S\" + s + z;\n+        concat = \"\" + \"S\" + S + i + d + f + d + f + d;\n+        concat = \"\" + i + l + s + l + b + z + f + i;\n+        concat = \"\" + f + z + l + f + z + z + b + d;\n+        concat = \"\" + S + i + z + l + b + i + z + d;\n+        concat = \"\" + i + i + f + f + l + d + b + b;\n+        concat = \"\" + d + S + i + f + S + S + c + l;\n+        concat = \"\" + \"S\" + l + \"S\" + S + i + b + z + l;\n+        concat = \"\" + d + l + c + b + s + \"S\" + s + b;\n+        concat = \"\" + c + s + l + f + c + l + \"S\" + b;\n+        concat = \"\" + i + \"S\" + z + l + z + s + s + \"S\";\n+        concat = \"\" + f + b + f + b + c + c + \"S\" + z;\n+        concat = \"\" + z + z + i + s + i + b + \"S\" + z;\n+        concat = \"\" + c + l + l + s + s + \"S\" + z + \"S\";\n+        concat = \"\" + i + i + d + s + z + l + b + c;\n+        concat = \"\" + f + l + l + S + \"S\" + i + z + \"S\";\n+        concat = \"\" + s + s + i + f + \"S\" + s + z + c;\n+        concat = \"\" + l + f + i + s + d + l + b + b;\n+        concat = \"\" + \"S\" + s + b + l + z + i + f + s;\n+        concat = \"\" + z + l + b + b + d + z + \"S\" + \"S\";\n+        concat = \"\" + d + s + s + l + f + z + \"S\" + s;\n+        concat = \"\" + l + i + \"S\" + z + d + f + \"S\" + s;\n+        concat = \"\" + f + d + i + \"S\" + s + S + i + i;\n+        concat = \"\" + i + b + s + S + i + s + i + i;\n+        concat = \"\" + S + \"S\" + d + b + z + i + S + c;\n+        concat = \"\" + f + S + i + s + s + z + f + c;\n+        concat = \"\" + c + z + l + S + d + b + f + \"S\";\n+        concat = \"\" + d + l + S + f + z + S + c + c;\n+        concat = \"\" + \"S\" + b + S + i + l + d + c + c;\n+        concat = \"\" + \"S\" + S + S + d + i + f + S + l;\n+        concat = \"\" + c + \"S\" + f + \"S\" + z + d + d + l;\n+        concat = \"\" + S + l + b + S + c + b + z + b;\n+        concat = \"\" + i + l + z + l + b + d + d + l;\n+        concat = \"\" + c + c + f + b + S + s + z + i;\n+        concat = \"\" + l + l + \"S\" + i + \"S\" + s + \"S\" + c;\n+        concat = \"\" + \"S\" + c + i + s + i + d + b + d;\n+        concat = \"\" + z + l + i + i + b + l + f + S;\n+        concat = \"\" + d + S + \"S\" + b + b + l + c + c;\n+        concat = \"\" + S + \"S\" + z + z + s + f + c + b;\n+        concat = \"\" + l + s + d + c + s + S + c + z;\n+        concat = \"\" + f + i + b + f + i + b + c + i;\n+        concat = \"\" + d + f + d + S + d + \"S\" + s + f;\n+        concat = \"\" + c + i + b + S + \"S\" + z + s + s;\n+        concat = \"\" + b + s + \"S\" + S + c + d + b + d;\n+        concat = \"\" + s + s + f + i + l + S + S + S;\n+        concat = \"\" + d + b + d + l + S + z + b + S;\n+        concat = \"\" + d + d + i + b + z + \"S\" + S + c;\n+        concat = \"\" + z + f + s + \"S\" + d + S + f + b;\n+        concat = \"\" + d + \"S\" + f + f + z + f + S + z;\n+        concat = \"\" + i + \"S\" + S + i + \"S\" + d + \"S\" + \"S\";\n+        concat = \"\" + \"S\" + S + c + z + l + c + z + d;\n+        concat = \"\" + l + z + c + i + s + i + l + S;\n+        concat = \"\" + b + s + z + \"S\" + b + l + s + l;\n+        concat = \"\" + d + f + i + b + c + f + s + f;\n+        concat = \"\" + S + f + l + s + d + S + i + c;\n+        concat = \"\" + \"S\" + s + \"S\" + S + z + \"S\" + f + d;\n+        concat = \"\" + c + z + i + S + c + \"S\" + d + l;\n+        concat = \"\" + c + \"S\" + c + c + c + \"S\" + i + b;\n+        concat = \"\" + c + l + f + d + d + c + i + i;\n+        concat = \"\" + i + S + s + S + f + c + d + b;\n+        concat = \"\" + i + i + S + b + l + l + \"S\" + c;\n+        concat = \"\" + d + z + \"S\" + d + i + c + b + b;\n+        concat = \"\" + c + b + S + b + b + \"S\" + \"S\" + S;\n+        concat = \"\" + c + i + l + i + d + z + \"S\" + l;\n+        concat = \"\" + S + d + \"S\" + d + b + d + s + i;\n+        concat = \"\" + z + f + S + c + c + \"S\" + d + \"S\";\n+        concat = \"\" + c + z + c + b + l + s + \"S\" + b;\n+        concat = \"\" + S + s + \"S\" + \"S\" + c + l + s + f;\n+        concat = \"\" + S + \"S\" + l + c + c + f + b + S;\n+        concat = \"\" + c + f + S + f + z + z + f + z;\n+        concat = \"\" + d + l + z + i + f + f + b + l;\n+        concat = \"\" + \"S\" + S + f + \"S\" + s + s + s + z;\n+        concat = \"\" + d + b + l + f + b + z + z + b;\n+        concat = \"\" + S + z + i + d + l + l + l + b;\n+        concat = \"\" + l + b + i + S + c + f + i + i;\n+        concat = \"\" + c + l + z + d + \"S\" + d + s + S;\n+        concat = \"\" + l + i + i + l + b + z + d + f;\n+        concat = \"\" + S + s + c + i + z + d + d + i;\n+        concat = \"\" + z + s + b + z + l + z + d + d;\n+        concat = \"\" + s + d + S + S + s + c + S + \"S\";\n+        concat = \"\" + b + b + s + s + S + l + f + z;\n+        concat = \"\" + l + \"S\" + i + c + i + s + \"S\" + \"S\";\n+        concat = \"\" + s + l + \"S\" + S + \"S\" + S + S + c;\n+        concat = \"\" + i + z + b + l + z + c + c + s;\n+        concat = \"\" + d + d + i + b + l + \"S\" + S + i;\n+        concat = \"\" + \"S\" + l + f + c + l + \"S\" + z + i;\n+        concat = \"\" + \"S\" + \"S\" + \"S\" + l + S + b + s + z;\n+        concat = \"\" + c + d + S + d + S + z + f + \"S\";\n+        concat = \"\" + c + s + S + b + s + S + c + l;\n+        concat = \"\" + \"S\" + b + S + S + d + c + f + b;\n+        concat = \"\" + f + l + c + S + z + b + i + c;\n+        concat = \"\" + \"S\" + f + i + l + S + d + i + f;\n+        concat = \"\" + d + z + s + d + S + s + z + c;\n+        concat = \"\" + b + b + z + z + S + d + S + S;\n+        concat = \"\" + s + d + b + c + z + s + f + c;\n+        concat = \"\" + c + z + S + l + \"S\" + z + l + S;\n+        concat = \"\" + c + i + \"S\" + \"S\" + z + s + i + \"S\";\n+        concat = \"\" + b + c + s + s + b + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + \"S\" + S + l + z + f + i + l + i;\n+        concat = \"\" + S + c + c + S + c + i + b + i;\n+        concat = \"\" + d + b + f + S + l + l + \"S\" + b;\n+        concat = \"\" + d + \"S\" + s + d + c + s + f + l;\n+        concat = \"\" + l + s + S + s + z + d + i + z;\n+        concat = \"\" + b + \"S\" + i + f + b + d + i + i;\n+        concat = \"\" + c + i + b + s + \"S\" + f + l + d;\n+        concat = \"\" + \"S\" + b + d + i + f + f + S + l;\n+        concat = \"\" + f + s + b + c + b + i + c + i;\n+        concat = \"\" + s + d + z + d + b + d + c + S;\n+        concat = \"\" + c + \"S\" + f + c + S + b + b + d;\n+        concat = \"\" + f + d + l + f + f + S + c + i;\n+        concat = \"\" + l + b + i + i + c + b + l + \"S\";\n+        concat = \"\" + f + d + b + \"S\" + c + s + z + c;\n+        concat = \"\" + i + b + d + s + c + f + s + c;\n+        concat = \"\" + d + f + S + \"S\" + S + s + d + i;\n+        concat = \"\" + s + b + l + z + i + s + i + l;\n+        concat = \"\" + b + b + z + c + l + f + z + f;\n+        concat = \"\" + i + d + \"S\" + z + \"S\" + i + s + i;\n+        concat = \"\" + i + b + c + d + c + \"S\" + s + l;\n+        concat = \"\" + f + c + d + f + f + f + z + l;\n+        concat = \"\" + f + s + b + z + l + c + s + c;\n+        concat = \"\" + b + i + \"S\" + \"S\" + \"S\" + c + d + d;\n+        concat = \"\" + s + i + z + z + s + S + S + c;\n+        concat = \"\" + f + S + f + S + S + z + \"S\" + f;\n+        concat = \"\" + i + \"S\" + d + i + S + f + z + d;\n+        concat = \"\" + f + c + s + d + S + f + b + b;\n+        concat = \"\" + s + d + b + s + s + S + b + f;\n+        concat = \"\" + c + d + s + \"S\" + f + i + l + \"S\";\n+        concat = \"\" + i + s + b + z + S + s + f + \"S\";\n+        concat = \"\" + i + S + \"S\" + i + b + z + S + b;\n+        concat = \"\" + c + S + s + s + z + S + z + i;\n+        concat = \"\" + s + d + S + c + \"S\" + f + S + \"S\";\n+        concat = \"\" + \"S\" + c + \"S\" + l + s + b + z + S;\n+        concat = \"\" + s + d + d + f + f + s + z + z;\n+        concat = \"\" + d + d + \"S\" + c + s + b + \"S\" + l;\n+        concat = \"\" + i + f + S + c + d + d + d + f;\n+        concat = \"\" + i + l + d + i + b + f + l + f;\n+        concat = \"\" + s + i + s + l + l + S + d + f;\n+        concat = \"\" + l + \"S\" + f + d + c + b + l + c;\n+        concat = \"\" + i + b + c + i + l + \"S\" + c + b;\n+        concat = \"\" + s + s + f + l + c + \"S\" + s + s;\n+        concat = \"\" + d + c + d + S + S + S + s + l;\n+        concat = \"\" + i + \"S\" + b + s + c + f + c + z;\n+        concat = \"\" + S + d + d + s + S + d + l + f;\n+        concat = \"\" + c + l + c + f + l + d + \"S\" + f;\n+        concat = \"\" + i + d + \"S\" + i + S + S + f + S;\n+        concat = \"\" + \"S\" + s + z + s + b + d + d + c;\n+        concat = \"\" + l + z + s + f + \"S\" + f + f + d;\n+        concat = \"\" + \"S\" + l + i + \"S\" + d + s + S + s;\n+        concat = \"\" + d + \"S\" + l + S + i + \"S\" + b + \"S\";\n+        concat = \"\" + S + S + l + d + z + s + S + b;\n+        concat = \"\" + s + s + f + s + i + b + s + l;\n+        concat = \"\" + \"S\" + b + i + \"S\" + z + z + S + b;\n+        concat = \"\" + i + c + l + s + b + d + s + S;\n+        concat = \"\" + d + l + b + z + f + d + c + i;\n+        concat = \"\" + s + b + i + i + s + b + z + c;\n+        concat = \"\" + i + \"S\" + s + c + l + i + c + d;\n+        concat = \"\" + f + c + \"S\" + b + d + i + l + b;\n+        concat = \"\" + \"S\" + z + d + s + f + s + s + d;\n+        concat = \"\" + i + l + z + d + S + \"S\" + d + f;\n+        concat = \"\" + s + f + \"S\" + l + s + f + b + \"S\";\n+        concat = \"\" + S + b + z + i + i + l + i + b;\n+        concat = \"\" + d + b + f + d + d + c + b + z;\n+        concat = \"\" + d + S + d + c + l + f + S + S;\n+        concat = \"\" + S + s + z + b + s + \"S\" + s + z;\n+        concat = \"\" + c + S + S + d + l + S + S + f;\n+        concat = \"\" + f + d + f + \"S\" + f + \"S\" + b + s;\n+        concat = \"\" + s + S + \"S\" + s + f + b + S + c;\n+        concat = \"\" + i + s + S + d + S + s + f + s;\n+        concat = \"\" + i + S + b + d + d + d + c + s;\n+        concat = \"\" + S + S + f + b + S + c + f + \"S\";\n+        concat = \"\" + l + b + z + f + i + c + l + f;\n+        concat = \"\" + \"S\" + c + S + c + l + f + z + z;\n+        concat = \"\" + S + \"S\" + l + i + b + z + l + z;\n+        concat = \"\" + z + \"S\" + i + c + f + z + \"S\" + z;\n+        concat = \"\" + c + f + f + l + i + i + i + d;\n+        concat = \"\" + S + s + d + \"S\" + i + l + b + c;\n+        concat = \"\" + l + d + s + c + c + d + f + S;\n+        concat = \"\" + f + \"S\" + S + c + c + l + z + S;\n+        concat = \"\" + z + d + c + c + i + c + d + \"S\";\n+        concat = \"\" + b + S + z + b + i + \"S\" + \"S\" + \"S\";\n+        concat = \"\" + d + f + \"S\" + l + s + z + d + S;\n+        concat = \"\" + d + S + b + f + s + l + i + i;\n+        concat = \"\" + b + z + S + l + i + l + S + S;\n+        concat = \"\" + i + l + d + s + z + l + s + \"S\";\n+        concat = \"\" + S + S + s + b + b + z + s + \"S\";\n+        concat = \"\" + \"S\" + S + S + l + l + z + \"S\" + i;\n+        concat = \"\" + d + b + l + b + l + d + c + z;\n+        concat = \"\" + \"S\" + i + s + d + c + S + c + s;\n+        concat = \"\" + z + c + S + d + c + c + l + i;\n+        concat = \"\" + d + d + l + f + S + z + d + \"S\";\n+        concat = \"\" + s + f + S + z + \"S\" + b + c + z;\n+        concat = \"\" + \"S\" + c + c + d + \"S\" + S + d + S;\n+        concat = \"\" + c + S + i + f + c + i + s + S;\n+        concat = \"\" + \"S\" + S + S + c + c + i + s + l;\n+        concat = \"\" + S + d + d + b + f + c + \"S\" + s;\n+        concat = \"\" + f + z + f + i + \"S\" + i + \"S\" + s;\n+        concat = \"\" + \"S\" + f + S + c + l + S + d + s;\n+        concat = \"\" + S + i + c + c + \"S\" + c + i + l;\n+        concat = \"\" + i + \"S\" + c + d + f + z + S + S;\n+        concat = \"\" + b + f + c + l + s + d + c + S;\n+        concat = \"\" + l + S + i + i + z + l + \"S\" + f;\n+        concat = \"\" + z + \"S\" + d + i + f + i + b + b;\n+        concat = \"\" + \"S\" + l + f + \"S\" + b + f + \"S\" + s;\n+        concat = \"\" + i + s + b + b + i + f + s + b;\n+        concat = \"\" + l + d + i + f + l + i + S + \"S\";\n+        concat = \"\" + f + b + S + S + c + b + s + l;\n+        concat = \"\" + i + s + f + S + s + S + s + b;\n+        concat = \"\" + f + \"S\" + z + \"S\" + s + f + c + s;\n+        concat = \"\" + \"S\" + S + b + z + f + i + s + s;\n+        concat = \"\" + b + s + l + z + \"S\" + i + s + S;\n+        concat = \"\" + i + c + z + s + S + d + l + z;\n+        concat = \"\" + s + \"S\" + b + c + \"S\" + c + d + l;\n+        concat = \"\" + c + b + b + i + c + S + b + z;\n+        concat = \"\" + S + c + \"S\" + S + z + s + \"S\" + s;\n+        concat = \"\" + b + f + d + \"S\" + s + S + d + S;\n+        concat = \"\" + f + d + b + i + S + f + d + d;\n+        concat = \"\" + s + c + \"S\" + s + s + l + s + z;\n+        concat = \"\" + f + d + z + c + i + s + z + d;\n+        concat = \"\" + i + s + c + f + b + z + S + f;\n+        concat = \"\" + S + d + z + i + i + b + i + z;\n+        concat = \"\" + d + b + S + d + d + i + b + s;\n+        concat = \"\" + d + \"S\" + f + c + l + c + c + d;\n+        concat = \"\" + z + z + S + S + f + d + i + c;\n+        concat = \"\" + \"S\" + l + z + f + \"S\" + l + d + l;\n+        concat = \"\" + f + l + d + b + b + \"S\" + l + i;\n+        concat = \"\" + s + i + S + b + c + z + l + l;\n+        concat = \"\" + z + f + S + i + l + z + l + S;\n+        concat = \"\" + d + z + b + z + s + b + z + z;\n+        concat = \"\" + d + b + d + f + d + i + d + s;\n+        concat = \"\" + S + d + d + \"S\" + i + \"S\" + c + d;\n+        concat = \"\" + f + f + c + l + f + d + s + d;\n+        concat = \"\" + b + S + f + l + c + c + s + d;\n+        concat = \"\" + S + s + s + d + f + \"S\" + i + i;\n+        concat = \"\" + i + z + i + d + b + d + c + l;\n+        concat = \"\" + i + S + f + S + f + d + d + \"S\";\n+        concat = \"\" + i + \"S\" + i + l + s + l + i + b;\n+        concat = \"\" + d + \"S\" + \"S\" + c + z + S + c + c;\n+        concat = \"\" + s + l + f + l + d + \"S\" + l + s;\n+        concat = \"\" + b + z + S + c + c + f + l + S;\n+        concat = \"\" + z + i + f + s + d + i + S + c;\n+        concat = \"\" + \"S\" + S + l + l + b + z + s + s;\n+        concat = \"\" + f + z + z + l + d + c + l + d;\n+        concat = \"\" + b + c + s + b + d + l + z + b;\n+        concat = \"\" + z + f + c + s + z + b + c + c;\n+        concat = \"\" + i + b + b + c + c + d + b + f;\n+        concat = \"\" + d + f + d + f + \"S\" + S + \"S\" + d;\n+        concat = \"\" + z + z + f + i + d + i + f + \"S\";\n+        concat = \"\" + i + s + \"S\" + d + l + d + z + b;\n+        concat = \"\" + \"S\" + \"S\" + c + i + S + f + b + S;\n+        concat = \"\" + z + s + b + S + c + c + s + b;\n+        concat = \"\" + z + \"S\" + f + c + c + i + f + z;\n+        concat = \"\" + b + d + d + f + i + s + i + d;\n+        concat = \"\" + f + i + s + c + z + s + \"S\" + f;\n+        concat = \"\" + S + s + l + b + s + \"S\" + \"S\" + b;\n+        concat = \"\" + c + b + b + i + \"S\" + S + b + S;\n+        concat = \"\" + d + s + S + i + f + f + c + S;\n+        concat = \"\" + f + z + \"S\" + f + c + b + d + S;\n+        concat = \"\" + l + \"S\" + l + s + c + s + c + i;\n+        concat = \"\" + S + b + S + c + c + l + l + S;\n+        concat = \"\" + i + \"S\" + l + b + f + s + i + s;\n+        concat = \"\" + S + z + b + S + c + c + l + c;\n+        concat = \"\" + S + s + i + b + z + d + l + c;\n+        concat = \"\" + f + c + i + i + z + f + S + b;\n+        concat = \"\" + z + l + \"S\" + z + i + \"S\" + i + b;\n+        concat = \"\" + i + S + z + b + l + i + i + d;\n+        concat = \"\" + d + z + d + b + b + c + d + z;\n+        concat = \"\" + l + i + \"S\" + i + \"S\" + l + b + i;\n+        concat = \"\" + f + c + l + z + S + f + s + \"S\";\n+        concat = \"\" + b + i + z + \"S\" + d + b + d + l;\n+        concat = \"\" + c + z + c + z + \"S\" + S + l + s;\n+        concat = \"\" + f + f + s + b + s + l + c + s;\n+        concat = \"\" + \"S\" + c + S + l + f + S + z + c;\n+        concat = \"\" + i + l + f + f + f + c + b + l;\n+        concat = \"\" + d + d + \"S\" + c + S + l + c + z;\n+        concat = \"\" + i + d + f + i + S + S + \"S\" + s;\n+        concat = \"\" + f + i + z + i + s + b + S + c;\n+        concat = \"\" + z + l + s + \"S\" + s + i + b + f;\n+        concat = \"\" + f + s + c + \"S\" + f + l + z + f;\n+        concat = \"\" + z + l + S + c + c + \"S\" + d + f;\n+        concat = \"\" + l + z + l + s + d + b + i + \"S\";\n+        concat = \"\" + l + f + d + z + z + b + b + d;\n+        concat = \"\" + l + S + f + z + f + l + c + z;\n+        concat = \"\" + s + \"S\" + z + b + z + c + b + z;\n+        concat = \"\" + d + c + S + s + l + i + b + s;\n+        concat = \"\" + \"S\" + b + s + z + f + S + l + \"S\";\n+        concat = \"\" + l + f + b + i + z + f + i + s;\n+        concat = \"\" + f + i + S + d + f + z + S + S;\n+        concat = \"\" + d + i + c + f + s + \"S\" + f + s;\n+        concat = \"\" + z + l + s + s + z + f + l + i;\n+        concat = \"\" + l + z + b + l + i + f + i + c;\n+        concat = \"\" + d + s + b + d + c + l + l + b;\n+        concat = \"\" + i + b + d + d + d + c + s + i;\n+        concat = \"\" + z + \"S\" + f + b + i + z + i + b;\n+        concat = \"\" + s + S + c + S + c + S + \"S\" + b;\n+        concat = \"\" + i + b + b + d + i + l + d + s;\n+        concat = \"\" + l + S + c + z + s + z + S + \"S\";\n+        concat = \"\" + S + c + l + b + b + d + f + b;\n+        concat = \"\" + \"S\" + s + l + z + l + f + z + s;\n+        concat = \"\" + S + s + s + z + d + d + S + d;\n+        concat = \"\" + f + \"S\" + l + s + i + s + b + S;\n+        concat = \"\" + f + f + \"S\" + i + l + c + f + c;\n+        concat = \"\" + s + \"S\" + \"S\" + \"S\" + z + b + f + f;\n+        concat = \"\" + f + s + l + f + b + c + s + i;\n+        concat = \"\" + i + f + S + \"S\" + z + z + i + s;\n+        concat = \"\" + d + \"S\" + c + \"S\" + z + z + c + z;\n+        concat = \"\" + d + b + d + b + d + c + z + l;\n+        concat = \"\" + b + z + z + S + S + b + b + i;\n+        concat = \"\" + b + c + d + s + b + f + S + c;\n+        concat = \"\" + i + S + l + f + c + \"S\" + c + z;\n+        concat = \"\" + d + z + f + S + i + S + l + s;\n+        concat = \"\" + z + l + i + z + l + i + l + f;\n+        concat = \"\" + b + d + s + \"S\" + f + c + d + s;\n+        concat = \"\" + \"S\" + b + c + l + d + b + S + c;\n+        concat = \"\" + S + d + \"S\" + \"S\" + f + S + f + b;\n+        concat = \"\" + f + z + s + f + \"S\" + c + d + S;\n+        concat = \"\" + S + d + S + S + S + i + i + f;\n+        concat = \"\" + b + i + c + z + s + l + d + S;\n+        concat = \"\" + \"S\" + s + z + \"S\" + i + i + S + z;\n+        concat = \"\" + \"S\" + l + z + f + \"S\" + d + S + i;\n+        concat = \"\" + b + i + f + z + \"S\" + s + \"S\" + z;\n+        concat = \"\" + f + i + f + i + b + c + d + \"S\";\n+        concat = \"\" + s + s + c + d + b + s + S + l;\n+        concat = \"\" + l + S + d + d + i + z + f + d;\n+        concat = \"\" + z + f + \"S\" + S + c + i + s + i;\n+        concat = \"\" + l + s + f + i + s + b + s + s;\n+        concat = \"\" + \"S\" + l + c + S + l + c + f + z;\n+        concat = \"\" + S + c + s + s + f + l + b + b;\n+        concat = \"\" + f + \"S\" + S + s + S + i + s + \"S\";\n+        concat = \"\" + d + d + z + f + i + s + b + f;\n+        concat = \"\" + \"S\" + l + f + z + i + s + b + d;\n+        concat = \"\" + z + \"S\" + s + f + l + \"S\" + \"S\" + b;\n+        concat = \"\" + S + z + z + s + f + \"S\" + l + b;\n+        concat = \"\" + \"S\" + z + i + s + d + f + f + l;\n+        concat = \"\" + S + c + s + s + S + d + s + i;\n+        concat = \"\" + d + b + \"S\" + s + c + z + c + b;\n+        concat = \"\" + z + l + f + S + \"S\" + \"S\" + l + b;\n+        concat = \"\" + d + d + f + \"S\" + \"S\" + b + c + i;\n+        concat = \"\" + f + d + s + S + \"S\" + l + i + l;\n+        concat = \"\" + b + c + b + b + b + c + s + \"S\";\n+        concat = \"\" + f + c + d + \"S\" + z + s + b + b;\n+        concat = \"\" + d + d + i + z + \"S\" + b + i + c;\n+        concat = \"\" + d + s + c + s + \"S\" + s + f + b;\n+        concat = \"\" + z + i + l + c + b + \"S\" + f + s;\n+        concat = \"\" + b + S + c + b + l + s + i + i;\n+        concat = \"\" + d + f + c + z + S + S + S + s;\n+        concat = \"\" + z + z + z + c + S + c + i + i;\n+        concat = \"\" + b + i + b + f + S + i + f + d;\n+        concat = \"\" + c + f + b + i + \"S\" + s + \"S\" + c;\n+        concat = \"\" + b + i + d + b + \"S\" + d + z + \"S\";\n+        concat = \"\" + z + s + s + \"S\" + b + d + z + \"S\";\n+        concat = \"\" + z + l + S + z + S + \"S\" + S + d;\n+        concat = \"\" + l + f + l + S + l + \"S\" + f + d;\n+        concat = \"\" + z + i + c + l + d + f + s + s;\n+        concat = \"\" + i + S + c + b + c + \"S\" + c + \"S\";\n+        concat = \"\" + \"S\" + b + s + l + d + z + \"S\" + d;\n+        concat = \"\" + i + l + i + S + d + \"S\" + c + f;\n+        concat = \"\" + b + b + b + \"S\" + s + d + b + s;\n+        concat = \"\" + \"S\" + b + d + i + S + \"S\" + c + S;\n+        concat = \"\" + z + z + \"S\" + i + l + S + b + S;\n+        concat = \"\" + \"S\" + s + c + f + f + s + d + s;\n+        concat = \"\" + i + i + f + \"S\" + s + f + c + f;\n+        concat = \"\" + l + c + s + i + d + \"S\" + z + l;\n+        concat = \"\" + f + d + l + l + \"S\" + i + i + f;\n+        concat = \"\" + z + l + d + c + f + i + z + i;\n+        concat = \"\" + i + s + l + b + f + d + b + d;\n+        concat = \"\" + z + b + d + z + b + S + l + i;\n+        concat = \"\" + b + f + d + \"S\" + \"S\" + c + d + i;\n+        concat = \"\" + s + c + \"S\" + \"S\" + b + d + d + S;\n+        concat = \"\" + d + b + s + b + c + d + z + z;\n+        concat = \"\" + b + c + z + S + d + S + S + i;\n+        concat = \"\" + d + c + z + f + l + l + d + c;\n+        concat = \"\" + i + l + b + b + l + S + b + b;\n+        concat = \"\" + i + b + i + b + S + \"S\" + z + \"S\";\n+        \/* Keep this comment here so you can add a \/* comment above to reduce the number of shapes in this file *\/\n+        result = concat;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/StringConcatStress.java","additions":3161,"deletions":0,"binary":false,"changes":3161,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,8 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BooleanType\/_itself_\/booleantype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,9 +260,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointRequest\/addInstanceFilter\/instancefilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,9 +248,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointRequest\/addThreadFilter\/threadfilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm = \"lineForComm\";\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                debuggeeClass,\n-                bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointRequest\/addThreadFilter\/threadfilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,10 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointRequest\/location\/location001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ByteType\/_itself_\/bytetype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/CharType\/_itself_\/chartype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,8 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassLoaderReference\/definedClasses\/definedclasses001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,8 +258,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassLoaderReference\/visibleClasses\/visibleclasses001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,2 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -250,9 +249,1 @@\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n-\n-    \/\/------------------------------------------------------  testing section\n+        \/\/------------------------------------------------------  testing section\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassExclusionFilter\/filter003.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassFilter_rt\/filter_rt002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,10 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassFilter_s\/filter_s002.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/DoubleType\/_itself_\/doubletype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -311,10 +311,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Event\/request\/request001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,10 +309,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventIterator\/nextEvent\/nextevent001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,12 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventQueue\/remove\/remove004.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,12 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventQueue\/remove_l\/remove_l004.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/addCountFilter\/addcountfilter001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/disable\/disable002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/enable\/enable001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/enable\/enable002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/getProperty\/getproperty001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,9 +248,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/isEnabled\/isenabled001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/putProperty\/putproperty001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,9 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/setEnabled\/setenabled001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,9 +250,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/setEnabled\/setenabled002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/setEnabled\/setenabled003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/setSuspendPolicy\/setsuspendpolicy001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequest\/suspendPolicy\/suspendpolicy001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,9 +248,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/accessWatchpointRequests\/accwtchpreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,9 +243,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/breakpointRequests\/breakpreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/classPrepareRequests\/clsprepreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/classUnloadRequests\/clsunlreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createAccessWatchpointRequest\/craccwtchpreq003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createBreakpointRequest\/crbreakpreq003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,9 +243,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createClassPrepareRequest\/cpreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,9 +242,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createClassUnloadRequest\/cureg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,9 +245,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createExceptionRequest\/crexreq009.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,9 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createExceptionRequest\/crexreq010.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,9 +242,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createMethodEntryRequest\/menreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,9 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createMethodExitRequest\/mexreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,9 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createModificationWatchpointRequest\/crmodwtchpreq003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,9 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createStepRequest\/crstepreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,8 +160,0 @@\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\/*\n-        BreakpointRequest bpRequest = setBreakpoint( mainThread,\n-                                                     debuggeeClass,\n-                                                     \"methodForCommunication\",\n-                                                     2,\n-                                                     \"breakpointForCommunication\");\n-*\/\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createStepRequest\/crstepreq003.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,3 +161,1 @@\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = setBreakpoint( mainThread,\n+        BreakpointRequest bpRequest = setBreakpoint( null,\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createStepRequest\/crstepreq004.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,9 +242,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createThreadDeathRequest\/tdreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,9 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createThreadStartRequest\/tsreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createVMDeathRequest\/vmdreg001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,9 +243,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/deleteAllBreakpoints\/delallbreakp002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/deleteEventRequest\/delevtreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/deleteEventRequests\/delevtreqs002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,9 +245,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/exceptionRequests\/excreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/methodEntryRequests\/methentreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,9 +243,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/methodExitRequests\/methexitreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,9 +250,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/modificationWatchpointRequests\/modwtchpreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/stepRequests\/stepreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/threadDeathRequests\/thrdeathreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/threadStartRequests\/thrstartreq002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,9 +244,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/vmDeathRequests\/vmdeathreq001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,10 +269,1 @@\n-\n-                String          bPointMethod = \"methodForCommunication\";\n-                String          lineForComm  = \"lineForComm\";\n-                ThreadReference mainThread   = debuggee.threadByNameOrThrow(\"main\");\n-\n-                BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                              debuggeeClass,\n-                                              bPointMethod, lineForComm, \"zero\");\n-                bpRequest.enable();\n-\n+                setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/eventIterator\/eventiterator001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,10 +258,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -289,0 +280,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/eventIterator\/eventiterator002.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,8 +254,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread, debuggeeClass, bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/eventIterator\/eventiterator003.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,10 +279,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/eventIterator\/eventiterator004.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,8 +263,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -290,1 +283,0 @@\n-\n@@ -294,0 +286,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume002.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,8 +263,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -294,0 +287,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume003.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -288,0 +281,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume004.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -288,0 +281,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume005.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -285,0 +278,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume006.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -285,0 +278,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume007.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -284,0 +277,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume010.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,8 +257,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -283,0 +276,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume011.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,8 +258,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -284,0 +277,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume012.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,8 +258,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -283,0 +276,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/resume\/resume013.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,8 +260,2 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy001.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,8 +261,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -303,0 +296,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy002.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,8 +268,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -311,0 +304,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy003.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,8 +262,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -306,0 +299,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy004.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,8 +262,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -306,0 +299,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy005.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,8 +261,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -304,0 +297,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy006.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,8 +261,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -303,0 +296,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy007.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,8 +261,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -298,0 +291,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy008.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,8 +261,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -298,0 +291,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy009.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,8 +260,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -297,0 +290,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy010.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,8 +269,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -303,0 +296,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy011.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,8 +268,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -302,0 +295,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy012.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,8 +269,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -303,0 +296,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy013.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,8 +270,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -304,0 +297,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy014.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,8 +270,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -304,0 +297,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy015.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,8 +268,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -302,0 +295,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy016.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,8 +270,1 @@\n-        String            bPointMethod = \"methodForCommunication\";\n-        String            lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -304,0 +297,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventSet\/suspendPolicy\/suspendpolicy017.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addClassExclusionFilter\/filter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addClassFilter_rt\/filter_rt002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addClassFilter_s\/filter_s002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,9 +260,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addInstanceFilter\/instancefilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,9 +248,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addThreadFilter\/threadfilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/addThreadFilter\/threadfilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,9 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/exception\/exception001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,9 +245,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/notifyCaught\/notifycaught001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,9 +245,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionRequest\/notifyUncaught\/notifyuncaught001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/FloatType\/_itself_\/floattype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/IntegerType\/_itself_\/integertype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,8 +256,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LocatableEvent\/thread\/thread001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LongType\/_itself_\/longtype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,10 +264,1 @@\n-\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference mainThread = debuggee.threadByName(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -291,0 +282,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n@@ -318,1 +310,2 @@\n-                  bpRequest = debuggee.makeBreakpoint(redefClass, methodName, brkpLineNumber);\n+                  BreakpointRequest bpRequest =\n+                      debuggee.makeBreakpoint(redefClass, methodName, brkpLineNumber);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Method\/isObsolete\/isobsolete001.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,10 +262,1 @@\n-\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-        ThreadReference mainThread = debuggee.threadByName(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -287,0 +278,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n@@ -318,1 +310,2 @@\n-                  bpRequest = debuggee.makeBreakpoint(redefClass, methodName, brkpLineNumber);\n+                  BreakpointRequest bpRequest =\n+                      debuggee.makeBreakpoint(redefClass, methodName, brkpLineNumber);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Method\/isObsolete\/isobsolete002.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addClassExclusionFilter\/filter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addClassFilter_rt\/filter_rt002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addClassFilter_s\/filter_s002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,9 +260,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addInstanceFilter\/instancefilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addThreadFilter\/threadfilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addThreadFilter\/threadfilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addClassExclusionFilter\/filter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addClassFilter_rt\/filter_rt002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addClassFilter_s\/filter_s002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,9 +260,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addInstanceFilter\/instancefilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,9 +254,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addThreadFilter\/threadfilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,9 +254,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addThreadFilter\/threadfilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,9 +255,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ModificationWatchpointEvent\/_itself_\/mwevent001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,8 +264,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/disableCollection\/disablecollection002.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,12 +247,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/PathSearchingVirtualMachine\/classPath\/classpath001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,8 +240,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/PrimitiveType\/_itself_\/primitivetype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,12 +233,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/classLoader\/classloader001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,12 +234,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/getValue\/getvalue001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,12 +233,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/getValue\/getvalue002.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,12 +233,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/getValue\/getvalue003.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,12 +237,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/getValues\/getvalues001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,12 +221,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/isFinal\/isfinal001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,8 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/isStatic\/isstatic001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,8 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/isStatic\/isstatic002.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,12 +227,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/nestedTypes\/nestedtypes001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                    debuggeeClass,\n-                    bPointMethod, lineForComm, \"zero\");\n-        } catch (Exception e) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ReferenceType\/nestedTypes\/nestedtypes002.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,8 +241,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ShortType\/_itself_\/shorttype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -274,0 +266,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n@@ -290,2 +283,1 @@\n-                     ThreadReference thread1 = debuggee.threadByNameOrThrow(\"main\");\n-                     eventRequest1 = setting23StepRequest(thread1, testedClassName1,\n+                     eventRequest1 = setting23StepRequest(mainThread, testedClassName1,\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/addClassExclusionFilter\/filter002.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/addClassFilter_rt\/filter_rt002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/addClassFilter_s\/filter_s002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,9 +260,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/addInstanceFilter\/instancefilter002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/depth\/depth001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/depth\/depth002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/depth\/depth003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/size\/size001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,9 +249,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/size\/size002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepRequest\/thread\/thread001.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,10 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadDeathRequest\/addThreadFilter\/addthreadfilter001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,10 +243,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -262,0 +253,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadDeathRequest\/addThreadFilter\/addthreadfilter002.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,8 +257,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadDeathRequest\/addThreadFilter\/addthreadfilter003.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,9 +257,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadDeathRequest\/addThreadFilter\/addthreadfilter005.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,12 +263,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,0 @@\n-    BreakpointRequest bpRequest;\n@@ -262,10 +261,1 @@\n-\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        log2(\"......setting BreakpointRequest (bpRequest) in main thread\");\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        log2(\"bpRequest.enable();\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes002.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,0 @@\n-    BreakpointRequest  bpRequest;\n@@ -263,12 +262,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference threadMainRef = debuggee.threadByNameOrThrow(\"main\");\n-        try {\n-            bpRequest = settingBreakpoint(threadMainRef,\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -287,0 +275,1 @@\n+        ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n@@ -289,1 +278,1 @@\n-        meRequest = settingMethodEntryRequest(threadMainRef,\n+        meRequest = settingMethodEntryRequest(mainThread,\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes003.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,9 +261,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        log2(\"......setting BreakpointRequest (bpRequest) in main thread\");\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        log2(\"bpRequest.enable();\");\n-        bpRequest.enable();\n+        bpRequest = setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,9 +265,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        log2(\"......setting BreakpointRequest (bpRequest) in main thread\");\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        log2(\"bpRequest.enable();\");\n-        bpRequest.enable();\n+        bpRequest = setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes005.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,10 +246,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        ThreadReference mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        bpRequest = settingBreakpoint(mainThread,\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadStartRequest\/addThreadFilter\/addthreadfilter001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,8 +257,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadStartRequest\/addThreadFilter\/addthreadfilter003.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,9 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadStartRequest\/addThreadFilter\/addthreadfilter005.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,8 +240,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VMDeathEvent\/_itself_\/vmdeath002.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,8 +245,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VMDeathEvent\/_itself_\/vmdeath003.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,12 +239,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/allClasses\/allclasses001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canAddMethod\/canaddmethod001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canPopFrames\/canpopframes001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canRedefineClasses\/canredefineclasses001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canRequestVMDeathEvent\/canreqvmdev001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canUnrestrictedlyRedefineClasses\/curc001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,12 +228,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canUseInstanceFilters\/canusefilters001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,12 +239,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canWatchFieldAccess\/canwatchaccess001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,12 +240,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        try {\n-            bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          debuggeeClass,\n-                                          bPointMethod, lineForComm, \"zero\");\n-        } catch ( Exception e ) {\n-            throw e;\n-        }\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/canWatchFieldModification\/canwatchmod001.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,9 +267,1 @@\n-\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n@@ -296,0 +288,1 @@\n+            ThreadReference mainThread = bpEvent.thread(); \/\/ bpEvent saved by breakpointForCommunication()\n@@ -313,3 +306,3 @@\n-                  bpRequest2 = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          bpClass,\n-                                          bpMethodName, bpLineName, \"one\");\n+                  bpRequest2 = settingBreakpoint(mainThread,\n+                                                 bpClass,\n+                                                 bpMethodName, bpLineName, \"one\");\n@@ -338,3 +331,3 @@\n-                  bpRequest3 = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                          bpClass,\n-                                          bpMethodName, bpLineName, \"one\");\n+                  bpRequest3 = settingBreakpoint(mainThread,\n+                                                 bpClass,\n+                                                 bpMethodName, bpLineName, \"one\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses001.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,8 +240,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-        BreakpointRequest bpRequest;\n-\n-        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow(\"main\"),\n-                                      debuggeeClass,\n-                                      bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidType\/_itself_\/voidtype001.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassExclusionFilter\/filter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassExclusionFilter\/filter004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassFilter_rt\/filter_rt003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassFilter_rt\/filter_rt004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassFilter_s\/filter_s003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,9 +253,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addClassFilter_s\/filter_s004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,9 +261,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addInstanceFilter\/instancefilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,9 +261,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addInstanceFilter\/instancefilter004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,9 +250,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addInstanceFilter\/instancefilter005.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,9 +250,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addInstanceFilter\/instancefilter006.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,9 +264,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addThreadFilter\/addthreadfilter003.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,9 +264,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addThreadFilter\/addthreadfilter004.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,9 +264,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addThreadFilter\/addthreadfilter005.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,9 +265,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/addThreadFilter\/addthreadfilter006.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,10 +251,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n-\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/field\/field001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,9 +252,1 @@\n-        String bPointMethod = \"methodForCommunication\";\n-        String lineForComm  = \"lineForComm\";\n-\n-        ThreadReference   mainThread = debuggee.threadByNameOrThrow(\"main\");\n-\n-        BreakpointRequest bpRequest = settingBreakpoint(mainThread,\n-                                             debuggeeClass,\n-                                            bPointMethod, lineForComm, \"zero\");\n-        bpRequest.enable();\n+        setupBreakpointForCommunication(debuggeeClass);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointRequest\/field\/field002.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,9 @@\n+    protected final BreakpointRequest settingBreakpoint(\n+                                                     ReferenceType testedClass,\n+                                                     String methodName,\n+                                                     String bpLine,\n+                                                     String property)\n+            throws JDITestRuntimeException {\n+        return settingBreakpoint_private(null, testedClass, methodName, bpLine, property);\n+    }\n+\n@@ -98,0 +107,12 @@\n+        if (thread == null) {\n+            log3(\"ERROR:  TEST_ERROR_IN_settingBreakpoint(): thread is null\");\n+        }\n+        return settingBreakpoint_private(thread, testedClass, methodName, bpLine, property);\n+    }\n+\n+    private final BreakpointRequest settingBreakpoint_private(ThreadReference thread,\n+                                                     ReferenceType testedClass,\n+                                                     String methodName,\n+                                                     String bpLine,\n+                                                     String property)\n+            throws JDITestRuntimeException {\n@@ -122,1 +143,3 @@\n-                    breakpRequest.addThreadFilter(thread);\n+                    if (thread != null) {\n+                        breakpRequest.addThreadFilter(thread);\n+                    }\n@@ -127,0 +150,1 @@\n+                    e1.printStackTrace(logHandler.getOutStream());\n@@ -191,0 +215,13 @@\n+    \/\/ Sets up the standard breakpoint for communication. The breakpoint is set on\n+    \/\/ methodForCommunication() using the line number stored in the \"lineForComm\"\n+    \/\/ local variable. The breakpoint is enabled.\n+    protected BreakpointRequest setupBreakpointForCommunication(ReferenceType debuggeeClass) {\n+        String bPointMethod = \"methodForCommunication\";\n+        String lineForComm  = \"lineForComm\";\n+\n+        BreakpointRequest bpRequest =\n+            settingBreakpoint(debuggeeClass, bPointMethod, lineForComm, \"zero\");\n+        bpRequest.enable();\n+        return bpRequest;\n+    }\n+\n@@ -222,0 +259,1 @@\n+                bpEvent = (BreakpointEvent) event;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/JDIBase.java","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -35,0 +35,13 @@\n+    \/\/ as in the Processors table in java.xml module summary\n+    public enum Processor {\n+        DOM,\n+        SAX,\n+        XMLREADER,\n+        StAX,\n+        VALIDATION,\n+        TRANSFORM,\n+        XSLTC,\n+        DOMLS,\n+        XPATH\n+    };\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JUnitTestUtil.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import jaxp.library.JUnitTestUtil.Processor;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.xml.sax.XMLReader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8354774\n+ * @summary Verifies JAXP API Properties as specified in the java.xml module.\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest \/test\/lib\n+ * @run junit\/othervm common.PropertiesTest\n+ *\/\n+public class PropertiesTest {\n+    private static final String ACCESS_EXTERNAL_DTD = XMLConstants.ACCESS_EXTERNAL_DTD;\n+    private static final String ACCESS_EXTERNAL_SCHEMA = XMLConstants.ACCESS_EXTERNAL_SCHEMA;\n+    private static final String ACCESS_EXTERNAL_STYLESHEET = XMLConstants.ACCESS_EXTERNAL_STYLESHEET;\n+    private static final String SP_ACCESS_EXTERNAL_DTD = \"javax.xml.accessExternalDTD\";\n+    private static final String SP_ACCESS_EXTERNAL_SCHEMA = \"javax.xml.accessExternalSchema\";\n+    private static final String SP_ACCESS_EXTERNAL_STYLESHEET = \"javax.xml.accessExternalStylesheet\";\n+    private static final String DEFAULT_VALUE = \"all\";\n+    \/**\n+     * Returns test data for testAccessExternalProperties\n+     * @return test data for testAccessExternalProperties\n+     *\/\n+    private static Stream<Arguments> testData() {\n+        \/\/ Supported processors for Access External Properties\n+        Set<Processor> supportedProcessors1 = EnumSet.of(Processor.DOM, Processor.SAX, Processor.XMLREADER,\n+                Processor.StAX, Processor.VALIDATION);\n+        Set<Processor> supportedProcessors2 = EnumSet.of(Processor.TRANSFORM);\n+\n+        return Stream.of(\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, null, SP_ACCESS_EXTERNAL_DTD, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, \"http\", SP_ACCESS_EXTERNAL_DTD, null, \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, null, SP_ACCESS_EXTERNAL_DTD, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_DTD, \"http\", SP_ACCESS_EXTERNAL_DTD, \"https\", \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, null, SP_ACCESS_EXTERNAL_SCHEMA, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, \"http\", SP_ACCESS_EXTERNAL_SCHEMA, null, \"http\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, null, SP_ACCESS_EXTERNAL_SCHEMA, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors1, ACCESS_EXTERNAL_SCHEMA, \"http\", SP_ACCESS_EXTERNAL_SCHEMA, \"https\", \"http\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, null, SP_ACCESS_EXTERNAL_STYLESHEET, null, DEFAULT_VALUE),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, \"http\", SP_ACCESS_EXTERNAL_STYLESHEET, null, \"http\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, null, SP_ACCESS_EXTERNAL_STYLESHEET, \"https\", \"https\"),\n+                Arguments.of(supportedProcessors2, ACCESS_EXTERNAL_STYLESHEET, \"http\", SP_ACCESS_EXTERNAL_STYLESHEET, \"https\", \"http\")\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that the Access External Properties are supported throughout the\n+     * JAXP APIs.\n+     * @param supportedProcessors the supported processors for the property\n+     * @param apiProperty the API property\n+     * @param apiValue the value of the API property\n+     * @param sysProperty the System property corresponding to the API property\n+     * @param sysValue the value of the System property\n+     * @param expected the expected result\n+     * @throws Exception if the test fails due to test configuration issues other\n+     * than the expected result\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void testAccessExternalProperties(Set<Processor> supportedProcessors,\n+           String apiProperty, String apiValue, String sysProperty, String sysValue,\n+           String expected) throws Exception {\n+        for (Processor p : supportedProcessors) {\n+            testProperties(p, apiProperty, apiValue, sysProperty, sysValue,\n+                    expected);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that properties can be set via the JAXP APIs and their corresponding\n+     * System Properties.\n+     * @param processor the processor type\n+     * @param apiProperty the API property\n+     * @param apiValue the value to be set via the API property\n+     * @param sysProperty the System Property\n+     * @param sysValue the value to be set via the System property\n+     * @param expected the expected result\n+     * @throws Exception if the test fails, which can only happen if the property\n+     * is set incorrectly.\n+     *\/\n+    void testProperties(Processor processor, String apiProperty, String apiValue,\n+            String sysProperty, String sysValue, String expected)\n+            throws Exception {\n+        Object ret1 = null;\n+        if (sysValue != null) {\n+            System.setProperty(sysProperty, sysValue);\n+        }\n+        switch (processor) {\n+            case DOM:\n+                DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+                if (apiValue != null) dbf.setAttribute(apiProperty, apiValue);\n+                ret1 = dbf.getAttribute(apiProperty);\n+                break;\n+            case SAX:\n+                SAXParser sp = SAXParserFactory.newDefaultInstance().newSAXParser();\n+                if (apiValue != null) sp.setProperty(apiProperty, apiValue);\n+                ret1 = sp.getProperty(apiProperty);\n+                break;\n+            case XMLREADER:\n+                XMLReader reader = SAXParserFactory.newDefaultInstance().newSAXParser().getXMLReader();\n+                if (apiValue != null) reader.setProperty(apiProperty, apiValue);\n+                ret1 = reader.getProperty(apiProperty);\n+                break;\n+            case StAX:\n+                XMLInputFactory xif = XMLInputFactory.newDefaultFactory();\n+                if (apiValue != null) xif.setProperty(apiProperty, apiValue);\n+                ret1 = xif.getProperty(apiProperty);\n+                break;\n+            case VALIDATION:\n+                SchemaFactory sf = SchemaFactory.newDefaultInstance();\n+                if (apiValue != null) sf.setProperty(apiProperty, apiValue);\n+                ret1 = sf.getProperty(apiProperty);\n+                break;\n+            case TRANSFORM:\n+                TransformerFactory tf = TransformerFactory.newDefaultInstance();\n+                if (apiValue != null) tf.setAttribute(apiProperty, apiValue);\n+                ret1 = tf.getAttribute(apiProperty);\n+                break;\n+        }\n+\n+        if (sysValue != null) System.clearProperty(sysProperty);\n+        \/\/ property value is as expected\n+        assertEquals(expected, ret1);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/PropertiesTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#############################################################################\n+#\n+# List of quarantined tests for testing with --enable-preview\n+#\n+#############################################################################\n+\n+java\/lang\/System\/SecurityManagerWarnings.java                                        8351188 generic-all\n+java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/SignedLoggerFinderTest.java     8351188 generic-all\n+\n","filename":"test\/jdk\/ProblemList-enable-preview.txt","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -146,0 +146,1 @@\n+java\/awt\/Graphics\/SmallPrimitives.java 8047070 macosx-all,linux-all\n@@ -259,0 +260,3 @@\n+java\/awt\/Clipboard\/PasteNullToTextComponentsTest.java 8234140 macosx-all,windows-all\n+java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java 8234140 macosx-all\n+java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java 8234140 macosx-all\n@@ -260,0 +264,4 @@\n+java\/awt\/Clipboard\/ClipboardSecurity.java 8054809 macosx-all\n+java\/awt\/Clipboard\/GetAltContentsTest\/SystemClipboardTest.java 8234140 macosx-all\n+java\/awt\/Clipboard\/ImageTransferTest.java 8030710 generic-all\n+java\/awt\/Clipboard\/NoDataConversionFailureTest.java 8234140 macosx-all\n@@ -444,0 +452,2 @@\n+java\/awt\/ScrollPane\/ScrollPositionTest.java 8040070 linux-all\n+java\/awt\/ScrollPane\/ScrollPaneEventType.java 8296516 macosx-all\n@@ -464,0 +474,1 @@\n+java\/awt\/GridBagLayout\/ComponentShortage.java 8355280 windows-all,linux-all\n@@ -474,0 +485,1 @@\n+java\/awt\/Graphics2D\/CopyAreaOOB.java 8343106 macosx-aarch64\n@@ -481,2 +493,0 @@\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java 8029249 macosx-all\n-java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java 8029249 macosx-all\n@@ -686,1 +696,1 @@\n-javax\/swing\/JFileChooser\/6798062\/bug6798062.java 8146446 windows-all\n+javax\/swing\/JFileChooser\/bug6798062.java 8146446 windows-all\n@@ -796,1 +806,1 @@\n-javax\/swing\/JTabbedPane\/4666224\/bug4666224.java 8144124  macosx-all\n+javax\/swing\/JTabbedPane\/bug4666224.java 8144124  macosx-all\n@@ -812,0 +822,1 @@\n+java\/awt\/font\/GlyphVector\/TestGlyphVectorLayout.java 8354987 generic-all\n@@ -817,0 +828,2 @@\n+java\/awt\/TextComponent\/CorrectTextComponentSelectionTest.java 8237220 macosx-all\n+java\/awt\/TextComponent\/SelectionAndCaretColor.java 7017622 linux-all\n@@ -826,0 +839,1 @@\n+java\/awt\/List\/ListScrollbarCursorTest.java 8066410 generic-all\n@@ -830,0 +844,2 @@\n+java\/awt\/Menu\/MenuVisibilityTest.java 8161110 macosx-all\n+java\/awt\/Modal\/NativeDialogToFrontBackTest.java 7188049 windows-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210461\n+ * @summary Tests that Motif Look & Feel's MenuItem Accelerator Delimiter is\n+ * shown properly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MotifLAFMenuAcceleratorDelimiter\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+public class MotifLAFMenuAcceleratorDelimiter {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\n+                \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"The Motif LAF failed to instantiate\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            The visual design specification for the Motif LAF asks for\n+            a \"+\" to delimit the other two entities in a menu item's\n+            accelerator.\n+\n+            As a point of reference, the visual design specifications for the\n+            L&Fs are as follows: JLF\/Metal = \"-\", Mac = \"-\", Motif = \"+\",\n+            Windows = \"+\".\n+\n+            Click on \"Menu\" of \"MotifLAFMenuAcceleratorDelimiter\" window,\n+            make sure it shows MenuItem with label \"Hi There! ^+H\" or\n+            \"Hi There! Ctrl+H\".\n+\n+            If it shows same label test passed otherwise failed.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(MotifLAFMenuAcceleratorDelimiter::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"MotifLAFMenuAcceleratorDelimiter\");\n+        JPanel menuPanel = new JPanel();\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.setOpaque(true);\n+        JMenu exampleMenu = new JMenu(\"Menu\");\n+        JMenuItem hiMenuItem = new JMenuItem(\"Hi There!\");\n+        hiMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,\n+            ActionEvent.CTRL_MASK));\n+        exampleMenu.add(hiMenuItem);\n+        menuBar.add(exampleMenu);\n+        menuPanel.add(menuBar);\n+\n+        fr.setLayout(new BorderLayout());\n+        fr.add(menuPanel, BorderLayout.CENTER);\n+        fr.setSize(250,100);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/motif\/MenuItem\/AcceleratorDelimiter\/MotifLAFMenuAcceleratorDelimiter.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4141400\n+ * @summary Tests that the divider of JSplitPane can be moved only by\n+ * dragging its thumb under Motif LAF\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4141400\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JSplitPane;\n+import javax.swing.UIManager;\n+\n+public class bug4141400 {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\n+                \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Motif LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            Place mouse cursor somewhere on the split pane divider, but outside\n+            its thumb. Then try to move the divider. It should not move. If it\n+            does not move, the test passes, otherwise it fails.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(70)\n+            .testUI(bug4141400::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"bug4141400\");\n+        JSplitPane pane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n+            true,\n+            new JButton(\"Button 1\"),\n+            new JButton(\"Button 2\"));\n+        fr.add(pane);\n+        fr.setSize(250, 300);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/motif\/SplitPane\/4141400\/bug4141400.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4685843\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that disabled JCheckBoxMenuItem's are drawn properly in\n+ * Windows LAF\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4685843\n+ *\/\n+\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.UIManager;\n+\n+public class bug4685843 {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel (\n+                \"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            In the window named \"bug4685843\" open File menu.\n+            If all three disabled items are drawn properly press \"Pass\".\n+            Otherwise press \"Fail\".\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(35)\n+            .testUI(bug4685843::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JMenuBar jMenuBar = new JMenuBar();\n+        JMenu jMenu = new JMenu(\"File\");\n+        JMenuItem jMenuItem = new JMenuItem(\"JMenuItem\");\n+        JCheckBoxMenuItem jCheckBoxMenuItem =\n+            new JCheckBoxMenuItem(\"JCheckBoxMenuItem\");\n+        JRadioButtonMenuItem jRadioButtonMenuItem =\n+            new JRadioButtonMenuItem(\"JRadioButtonMenuItem\");\n+\n+        jMenuItem.setEnabled(false);\n+        jMenu.add(jMenuItem);\n+        jCheckBoxMenuItem.setEnabled(false);\n+        jMenu.add(jCheckBoxMenuItem);\n+        jRadioButtonMenuItem.setEnabled(false);\n+        jMenu.add(jRadioButtonMenuItem);\n+        jMenuBar.add(jMenu);\n+\n+        JFrame mainFrame = new JFrame(\"bug4685843\");\n+        mainFrame.setJMenuBar(jMenuBar);\n+        mainFrame.setSize(200, 200);\n+        return mainFrame;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/MenuItem\/4685843\/bug4685843.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210461\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that Windows Look & Feel's MenuItem Accelerator Delimiter is\n+ * shown properly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WindowsLAFMenuAcceleratorDelimiter\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+public class WindowsLAFMenuAcceleratorDelimiter {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\n+                \"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"The Windows LAF failed to instantiate\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            The visual design specification for the Windows LAF asks for\n+            a \"+\" to delimit the other two entities in a menuitem's\n+            accelerator.\n+\n+            As a point of reference, the visual design specifications for the\n+            L&Fs are as follows: JLF\/Metal = \"-\", Mac = \"-\", Motif = \"+\",\n+            Windows = \"+\".\n+\n+            Click on \"Menu\" of \"WindowsLAFMenuAcceleratorDelimiter\" window,\n+            make sure it shows MenuItem with label \"Hi There! Ctrl+H\".\n+\n+            If it shows same label test passed otherwise failed.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(WindowsLAFMenuAcceleratorDelimiter::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"WindowsLAFMenuAcceleratorDelimiter\");\n+        JPanel menuPanel = new JPanel();\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.setOpaque(true);\n+        JMenu exampleMenu = new JMenu(\"Menu\");\n+        JMenuItem hiMenuItem = new JMenuItem(\"Hi There!\");\n+        hiMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,\n+            ActionEvent.CTRL_MASK));\n+        exampleMenu.add(hiMenuItem);\n+        menuBar.add(exampleMenu);\n+        menuPanel.add(menuBar);\n+\n+        fr.setLayout(new BorderLayout());\n+        fr.add(menuPanel, BorderLayout.CENTER);\n+        fr.setSize(250, 100);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/MenuItem\/AcceleratorDelimiter\/WindowsLAFMenuAcceleratorDelimiter.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4227768\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests Z-ordering of Windows Look-and-Feel JInternalFrames\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4227768\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Toolkit;\n+import java.beans.PropertyVetoException;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.UIManager;\n+\n+public class bug4227768 {\n+    private static JDesktopPane desktop ;\n+    private static JFrame frame;\n+    private static int openFrameCount = 0;\n+    private static final int xOffset = 30;\n+    private static final int yOffset = 30;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel\n+                (\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            Close the internal frame titled \"Document #4\". The internal frame\n+            titled \"Document #3\" should get active. Now close the internal\n+            frame titled \"Document #2\". The internal frame titled \"Document #3\"\n+            should remain active. If something is not like this, then test\n+            failed. Otherwise test succeeded.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4227768::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        frame = new JFrame(\"bug4227768\");\n+        frame.setSize(screenSize.width \/ 3, screenSize.height \/ 3);\n+        frame.add(desktop = new JDesktopPane());\n+        createFrame();\n+        createFrame();\n+        createFrame();\n+        createFrame();\n+        desktop.putClientProperty(\"JDesktopPane.dragMode\", \"outline\");\n+        return frame;\n+    }\n+\n+    protected static void createFrame() {\n+        JInternalFrame internalFrame = new JInternalFrame\n+            (\"Document #\" + (++openFrameCount), true, true, true, true);\n+        internalFrame.setSize(frame.getWidth() \/ 2, frame.getHeight() \/ 2);\n+        internalFrame.setLocation(xOffset * openFrameCount,\n+            yOffset * openFrameCount);\n+        desktop.add(internalFrame);\n+        internalFrame.setVisible(true);\n+        try {\n+            internalFrame.setSelected(true);\n+        } catch (PropertyVetoException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopManager\/4227768\/bug4227768.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4305725\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests if in Win LAF the JOptionPane.showInternalMessageDialog() is\n+ * not maximized to match background maximized internal frame.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4305725\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.UIManager;\n+\n+public class bug4305725 implements ActionListener {\n+    private static JDesktopPane desktop ;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel\n+                (\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            Maximize the internal frame, then call Exit from File menu.\n+            You will see a message box. If message box is also the size of\n+            internal frame, then test failed. If it is of usual size,\n+            then test is passed.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4305725::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame frame = new JFrame(\"bug4305725\");\n+        frame.add(desktop = new JDesktopPane());\n+        JMenuBar mb = new JMenuBar() ;\n+        JMenu menu = new JMenu(\"File\");\n+        mb.add(menu) ;\n+        JMenuItem menuItem = menu.add(new JMenuItem(\"Exit\"));\n+        menuItem.addActionListener(new bug4305725()) ;\n+        frame.setJMenuBar(mb) ;\n+        Dimension sDim = Toolkit.getDefaultToolkit().getScreenSize();\n+        frame.setSize(sDim.width \/ 2, sDim.height \/ 2) ;\n+        JInternalFrame internalFrame = new JInternalFrame\n+            (\"Internal\", true, true, true, true);\n+        internalFrame.setSize(frame.getWidth(), frame.getHeight() \/ 2);\n+        internalFrame.setVisible(true);\n+        desktop.add(internalFrame, JLayeredPane.FRAME_CONTENT_LAYER);\n+        return frame;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent aEvent) {\n+        JOptionPane.showInternalMessageDialog(desktop, \"Exiting test app\");\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopManager\/4305725\/bug4305725.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-                                       VirtualMachine.TRACE_NONE);\n+                                       VirtualMachine.TRACE_NONE, false);\n","filename":"test\/jdk\/com\/sun\/jdi\/EventQueueDisconnectTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -216,0 +216,1 @@\n+        enableIncludeVirtualthreads(); \/\/ need to run debug agent with includevirtualthreads=y\n","filename":"test\/jdk\/com\/sun\/jdi\/RedefineNestmateAttr\/TestNestmateAttr.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,3 @@\n+    \/\/ Set true by tests that need the debug agent to be run with includevirtualthreads=y.\n+    private boolean includeVThreads = false;\n+\n@@ -87,0 +90,4 @@\n+    void enableIncludeVirtualthreads() {\n+        includeVThreads = true;\n+    }\n+\n@@ -591,1 +598,2 @@\n-                                      argInfo.traceFlags);\n+                                      argInfo.traceFlags,\n+                                      includeVThreads);\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-    VMConnection(String connectSpec, int traceFlags) {\n+    VMConnection(String connectSpec, int traceFlags, boolean includeVThreads) {\n@@ -128,1 +128,1 @@\n-        String argString = \"includevirtualthreads=y\";\n+        String argString = \"includevirtualthreads=\" + (includeVThreads ? 'y' : 'n');\n","filename":"test\/jdk\/com\/sun\/jdi\/VMConnection.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.Assert;\n@@ -36,1 +35,0 @@\n-import java.io.IOException;\n@@ -47,2 +45,0 @@\n-import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.TimeUnit;\n@@ -51,3 +47,0 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.expectThrows;\n@@ -104,1 +97,1 @@\n-        for (var f : futures) {\n+        for (int i = 0; i < futures.size(); i++) {\n@@ -106,1 +99,1 @@\n-                f.get();\n+                futures.get(i).get();\n@@ -109,1 +102,2 @@\n-                e.getCause().printStackTrace(System.out);\n+                System.err.println(\"task \" + (i + 1) + \" failed:\");\n+                e.getCause().printStackTrace();\n@@ -122,2 +116,1 @@\n-            String msg = e.getCause() == null ? e.getMessage() : e.getCause().getMessage();\n-            System.err.println(\"MSG RTE: \" + msg);\n+            final String msg = e.getCause() == null ? e.getMessage() : e.getCause().getMessage();\n@@ -125,3 +118,10 @@\n-            assertNotNull(msg);\n-            assertTrue(msg.contains(\"Network is unreachable\")\n-                        || msg.contains(\"No route to host\") || msg.contains(\"Connection timed out\"));\n+            if (msg != null &&\n+                    (msg.contains(\"Network is unreachable\")\n+                            || msg.contains(\"No route to host\")\n+                            || msg.contains(\"Connection timed out\"))) {\n+                \/\/ got the expected exception\n+                System.out.println(\"Received expected RuntimeException message: \" + msg);\n+            } else {\n+                \/\/ propagate the unexpected exception\n+                throw e;\n+            }\n@@ -129,3 +129,2 @@\n-            String msg = ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage();\n-            System.err.println(\"MSG: \" + msg);\n-            assertTrue(msg != null &&\n+            final String msg = ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage();\n+            if (msg != null &&\n@@ -135,1 +134,7 @@\n-                        || msg.contains(\"Timeout exceeded while waiting for a connection\")));\n+                        || msg.contains(\"Timeout exceeded while waiting for a connection\"))) {\n+                \/\/ got the expected exception\n+                System.out.println(\"Received expected NamingException message: \" + msg);\n+            } else {\n+                \/\/ propagate the unexpected exception\n+                throw ex;\n+            }\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapPoolTimeoutTest.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary The choice positioned in the top of applet when clicking the choice.\n+ * @summary The choice positioned in the top of window when clicking the choice.\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceLocationTest\/ChoiceLocationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4177171 4180145 4180148\n+ * @summary Can't copy to clipboard\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ClipRWTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+\n+public class ClipRWTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Type some text in the text field and press Copy Text.\n+            2. Switch to a _native_ application (e.g. Notepad) and paste the text in\n+            3. Verify the text that is pasted matches what you typed in the Java window\n+            4. In the native app, type some new text and copy it\n+            5. Switch back to the test frame and press Paste Text\n+            6. Verify the text that is pasted matches what you typed in the native app\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ClipRWTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(ClipFrame::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class ClipFrame extends Frame {\n+        TextField   field =new TextField(50);\n+        Button      copyText = new Button(\"Copy Text\");\n+        Button      pasteText = new Button(\"Paste Text\");\n+        Clipboard   clipboard;\n+\n+        public ClipFrame() {\n+            super(\"ClipRWTest 4177171\");\n+            setLayout(new FlowLayout());\n+\n+            clipboard = getToolkit().getSystemClipboard();\n+\n+            add(field);\n+            add(copyText);\n+            add(pasteText);\n+\n+            copyText.addActionListener(\n+                    ev -> {\n+                        String text = field.getText();\n+                        try {\n+                            clipboard.setContents(new StringSelection(text), null);\n+                        } catch (Exception ex) {\n+                            ex.printStackTrace();\n+                        }\n+                    }\n+            );\n+\n+            pasteText.addActionListener(\n+                    ev -> {\n+                        String text = \"\";\n+                        try {\n+                            text = (String) clipboard.getContents(null)\n+                                    .getTransferData(DataFlavor.stringFlavor);\n+                        } catch (Exception ex) {\n+                            ex.printStackTrace();\n+                        }\n+                        field.setText(text);\n+                    }\n+            );\n+\n+            pack();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ClipRWTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4274061\n+ * @summary Tests that Transferable.getTransferData() and\n+ *          SelectionOwner.lostOwnership is not called on Toolkit thread.\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main ClipboardSecurity\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ClipboardSecurity {\n+    static Clipboard clip = null;\n+    public static final CountDownLatch latch = new CountDownLatch(1);\n+    public static volatile boolean hasError = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            ClipboardSecurity clipboardSecurity = new ClipboardSecurity();\n+            clipboardSecurity.start();\n+            return;\n+        }\n+\n+        try {\n+            clip = Toolkit.getDefaultToolkit().getSystemClipboard();\n+            if ( clip == null ) {\n+                throw (new RuntimeException(\"Clipboard is null\"));\n+            }\n+            Transferable data = clip.getContents(null);\n+            if ( data == null ) {\n+                throw (new RuntimeException(\"Data is null\"));\n+            }\n+            System.out.println(\"Clipboard contents: \" + data);\n+            \/\/ First check - getTransferData\n+            try {\n+                String contData =\n+                        (String) data.getTransferData(DataFlavor.stringFlavor);\n+            } catch (UnsupportedFlavorException | IOException exc) {\n+                throw(new RuntimeException(\"Couldn't get transfer data - \"\n+                        + exc.getMessage()));\n+            }\n+            \/\/ Second check - lostOwnership\n+            MyClass clipData = new MyClass(\"clipbard test data\");\n+            clip.setContents(clipData, clipData);\n+            System.out.println(\"exit 0\");\n+            System.exit(0);\n+        } catch (RuntimeException exc) {\n+            System.err.println(exc.getMessage());\n+            System.out.println(\"exit 2\");\n+            System.exit(2);\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        clip = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        if (clip == null) {\n+            throw (new RuntimeException(\"Clipboard is null\"));\n+        }\n+        MyClass clipData = new MyClass(\"clipboard test data\");\n+        clip.setContents(clipData, clipData);\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                ClipboardSecurity.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+        System.out.println(\"WAIT COMPLETE\");\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+\n+        if (!latch.await(10, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"timed out\");\n+        }\n+\n+        if (hasError) {\n+            throw new RuntimeException(\"Detected call on Toolkit thread\");\n+        }\n+\n+        System.out.println(\"Passed.\");\n+    }\n+}\n+\n+class MyClass extends StringSelection implements ClipboardOwner {\n+    MyClass(String title) {\n+        super(title);\n+    }\n+\n+    private void checkIsCorrectThread(String reason) {\n+        System.out.println(\"Checking \" + reason + \" for thread \"\n+                + Thread.currentThread().getName());\n+        String name = Thread.currentThread().getName();\n+        if (name.equals(\"AWT-Windows\") || name.equals(\"AWT-Motif\")) {\n+            ClipboardSecurity.hasError = true;\n+            System.err.println(reason + \" is called on Toolkit thread!\");\n+        }\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable cont) {\n+        checkIsCorrectThread(\"lostOwnership\");\n+        ClipboardSecurity.latch.countDown();\n+        System.out.println(\"lost ownership on \"\n+                + Thread.currentThread().getName() + \" thread\");\n+    }\n+\n+    public Object getTransferData(DataFlavor flav)\n+            throws UnsupportedFlavorException, IOException {\n+        System.out.println(\"getTransferData on \"\n+                + Thread.currentThread().getName() + \" thread\");\n+        checkIsCorrectThread(\"getTransferData\");\n+        return super.getTransferData(flav);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ClipboardSecurity.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4287795 4790833\n+ * @summary tests new Clipboard methods: getAvailableDataFlavors,\n+ *          isDataFlavorAvailable, getData\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main SystemClipboardTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\n+public class SystemClipboardTest {\n+\n+    private static final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private static final String contentsText = \"contents text\";\n+\n+    public void start() throws Exception {\n+        Util.setClipboardContents(clipboard, new StringSelection(contentsText), new ClipboardOwner() {\n+                public void lostOwnership(Clipboard clpbrd, Transferable cntnts) {\n+                    check(); \/\/ clipboard data retrieved from the system clipboard\n+                    Util.setClipboardContents(clipboard, new StringSelection(contentsText), null);\n+                }\n+            });\n+\n+        check(); \/\/ JVM-local clipboard data\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                SystemClipboardTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    private void check() {\n+        boolean failed = false;\n+\n+        Transferable contents = Util.getClipboardContents(clipboard, null);\n+        Set<DataFlavor> flavorsT = new HashSet<>(Arrays.asList(contents.getTransferDataFlavors()));\n+        Set<DataFlavor> flavorsA = new HashSet<>(Arrays.asList(Util.getClipboardAvailableDataFlavors(clipboard)));\n+        System.err.println(\"getAvailableDataFlavors(): \" + flavorsA);\n+        if (!flavorsA.equals(flavorsT)) {\n+            failed = true;\n+            System.err.println(\"FAILURE: getAvailableDataFlavors() returns incorrect \" +\n+                    \"DataFlavors: \" + flavorsA + \"\\nwhile getContents().\" +\n+                    \"getTransferDataFlavors() return: \" + flavorsT);\n+        }\n+\n+        if (!Util.isClipboardDataFlavorAvailable(clipboard, DataFlavor.stringFlavor)) {\n+            failed = true;\n+            System.err.println(\"FAILURE: isDataFlavorAvailable(DataFlavor.stringFlavor) \" +\n+                               \"returns false\");\n+        }\n+\n+        Object data = null;\n+        try {\n+            data = Util.getClipboardData(clipboard, DataFlavor.stringFlavor);\n+        } catch (UnsupportedFlavorException exc) {\n+            failed = true;\n+            exc.printStackTrace();\n+        } catch (IOException exc) {\n+            failed = true;\n+            exc.printStackTrace();\n+        }\n+        System.err.println(\"getData(): \" + data);\n+        if (!contentsText.equals(data)) {\n+            failed = true;\n+            System.err.println(\"FAILURE: getData() returns: \" + data +\n+                               \", that is not equal to: \\\"\" + contentsText + \"\\\"\");\n+\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"test failed, for details see output above\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            SystemClipboardTest systemClipboardTest = new SystemClipboardTest();\n+            systemClipboardTest.start();\n+            return;\n+        }\n+\n+        System.err.println(\"child VM: setting clipboard contents\");\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Util.setClipboardContents(clipboard, new StringSelection(contentsText),\n+                (clpbrd, cntnts) -> {\n+                    System.err.println(\"child VM: success\");\n+                    latch.countDown();\n+                });\n+\n+        if (!latch.await(15, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"child VM failed\");\n+        }\n+    }\n+}\n+\n+class Util {\n+    public static void setClipboardContents(Clipboard cb,\n+                                            Transferable contents,\n+                                            ClipboardOwner owner) {\n+        while (true) {\n+            try {\n+                cb.setContents(contents, owner);\n+                return;\n+            } catch (IllegalStateException ise) {\n+                ise.printStackTrace();\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static Transferable getClipboardContents(Clipboard cb,\n+                                                    Object requestor) {\n+        while (true) {\n+            try {\n+                return cb.getContents(requestor);\n+            } catch (IllegalStateException ise) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static Object getClipboardData(Clipboard cb, DataFlavor flavor)\n+            throws IOException, UnsupportedFlavorException {\n+        while (true) {\n+            try {\n+                return cb.getData(flavor);\n+            } catch (IllegalStateException ise) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static DataFlavor[] getClipboardAvailableDataFlavors(Clipboard cb) {\n+        while (true) {\n+            try {\n+                return cb.getAvailableDataFlavors();\n+            } catch (IllegalStateException ise) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isClipboardDataFlavorAvailable(Clipboard cb,\n+                                                         DataFlavor flavor) {\n+        while (true) {\n+            try {\n+                return cb.isDataFlavorAvailable(flavor);\n+            } catch (IllegalStateException ise) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/GetAltContentsTest\/SystemClipboardTest.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -0,0 +1,519 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4397404 4720930\n+ * @summary tests that images of all supported native image formats\n+ *          are transferred properly\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main ImageTransferTest\n+ *\/\n+\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.SystemFlavorMap;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.MemoryImageSource;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ImageTransferTest {\n+    public static final int CODE_NOT_RETURNED = 100;\n+    public static final int CODE_CONSUMER_TEST_FAILED = 101;\n+    public static final int CODE_FAILURE = 102;\n+\n+    private TImageProducer imPr;\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    public static void main(String[] args) throws Exception {\n+        ImageTransferTest imageTransferTest = new ImageTransferTest();\n+        imageTransferTest.init();\n+        imageTransferTest.start();\n+    }\n+\n+    public void init() {\n+        imPr = new TImageProducer();\n+        imPr.begin();\n+    }\n+\n+    public void start() throws Exception {\n+        String formats = \"\";\n+\n+        String iniMsg = \"Testing all native image formats from \\n\" +\n+            \"SystemFlavorMap.getNativesForFlavor(DataFlavor.imageFlavor) \\n\";\n+\n+        for (int i = 0; i < imPr.formats.length; i++) {\n+            formats += (imPr.formats[i] + \" \");\n+        }\n+        System.out.println(iniMsg + formats);\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                TImageConsumer.class.getName(), formats\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            returnCode = CODE_NOT_RETURNED;\n+        } else {\n+            returnCode = outputAnalyzer.getExitValue();\n+        }\n+\n+        switch (returnCode) {\n+            case CODE_NOT_RETURNED:\n+                throw new RuntimeException(\"Child VM: failed to start\");\n+            case CODE_FAILURE:\n+                throw new RuntimeException(\"Child VM: abnormal termination\");\n+            case CODE_CONSUMER_TEST_FAILED:\n+                throw new RuntimeException(\"test failed: images in some \" +\n+                    \"native formats are not transferred properly: \" +\n+                    \"see output of child VM\");\n+            default:\n+                boolean failed = false;\n+                String passedFormats = \"\";\n+                String failedFormats = \"\";\n+\n+                for (int i = 0; i < imPr.passedArray.length; i++) {\n+                   if (imPr.passedArray[i]) passedFormats += imPr.formats[i] + \" \";\n+                   else {\n+                       failed = true;\n+                       failedFormats += imPr.formats[i] + \" \";\n+                   }\n+                }\n+                if (failed) {\n+                    throw new RuntimeException(\"test failed: images in following \" +\n+                        \"native formats are not transferred properly: \" +\n+                        failedFormats);\n+                } else {\n+                    System.err.println(\"images in following native formats are \" +\n+                        \"transferred properly: \" + passedFormats);\n+                }\n+        }\n+    }\n+}\n+\n+abstract class ImageTransferer implements ClipboardOwner {\n+\n+    static final String S_PASSED = \"Y\";\n+    static final String S_FAILED = \"N\";\n+    static final String S_BEGIN = \"B\";\n+    static final String S_BEGIN_ANSWER = \"BA\";\n+    static final String S_END = \"E\";\n+\n+    Image image;\n+\n+    Clipboard clipboard;\n+\n+    String[] formats;\n+    int fi; \/\/ next format index\n+\n+\n+    ImageTransferer() {\n+        clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        image = createImage();\n+    }\n+\n+    abstract void notifyTransferSuccess(boolean status);\n+\n+    private static Image createImage() {\n+        int w = 100;\n+        int h = 100;\n+        int[] pix = new int[w * h];\n+\n+        int index = 0;\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                int red = 127;\n+                int green = 127;\n+                int blue = y > h \/ 2 ? 127 : 0;\n+                int alpha = 255;\n+                if (x < w \/ 4 && y < h \/ 4) {\n+                    alpha = 0;\n+                    red = 0;\n+                }\n+                pix[index++] = (alpha << 24) | (red << 16) | (green << 8) | blue;\n+            }\n+        }\n+\n+        return Toolkit.getDefaultToolkit().\n+                   createImage(new MemoryImageSource(w, h, pix, 0, w));\n+    }\n+\n+    static String[] retrieveFormatsToTest() {\n+        SystemFlavorMap sfm = (SystemFlavorMap)SystemFlavorMap.getDefaultFlavorMap();\n+        java.util.List ln = sfm.getNativesForFlavor(DataFlavor.imageFlavor);\n+\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        String sMETAFILEPICT = \"METAFILEPICT\";\n+        if (osName.indexOf(\"win\") >= 0 && !ln.contains(sMETAFILEPICT)) {\n+            \/\/ for test failing on JDK without this fix\n+            ln.add(sMETAFILEPICT);\n+        }\n+        return (String[])ln.toArray(new String[ln.size()]);\n+    }\n+\n+    static void leaveFormat(String format) {\n+        SystemFlavorMap sfm = (SystemFlavorMap)SystemFlavorMap.getDefaultFlavorMap();\n+        sfm.setFlavorsForNative(format,\n+                                new DataFlavor[] { DataFlavor.imageFlavor });\n+        sfm.setNativesForFlavor(DataFlavor.imageFlavor,\n+                                new String[] { format });\n+    }\n+\n+    boolean areImagesIdentical(Image im1, Image im2) {\n+        if (formats[fi].equals(\"JFIF\") || formats[fi].equals(\"image\/jpeg\") ||\n+                formats[fi].equals(\"GIF\") || formats[fi].equals(\"image\/gif\")) {\n+            \/\/ JFIF and GIF are lossy formats\n+            return true;\n+        }\n+        int[] ib1 = getImageData(im1);\n+        int[] ib2 = getImageData(im2);\n+\n+        if (ib1.length != ib2.length) {\n+            return false;\n+        }\n+\n+        if (formats[fi].equals(\"PNG\") ||\n+            formats[fi].equals(\"image\/png\") ||\n+            formats[fi].equals(\"image\/x-png\")) {\n+            \/\/ check alpha as well\n+            for (int i = 0; i < ib1.length; i++) {\n+               if (ib1[i] != ib2[i]) {\n+                   System.err.println(\"different pixels: \" +\n+                       Integer.toHexString(ib1[i]) + \" \" +\n+                       Integer.toHexString(ib2[i]));\n+                   return false;\n+               }\n+            }\n+        } else {\n+            for (int i = 0; i < ib1.length; i++) {\n+               if ((ib1[i] & 0x00FFFFFF) != (ib2[i] & 0x00FFFFFF)) {\n+                   System.err.println(\"different pixels: \" +\n+                       Integer.toHexString(ib1[i]) + \" \" +\n+                       Integer.toHexString(ib2[i]));\n+                   return false;\n+               }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static int[] getImageData(Image image) {\n+        int width = image.getWidth(null);\n+        int height = image.getHeight(null);\n+        BufferedImage bimage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g2d = bimage.createGraphics();\n+        try {\n+            g2d.drawImage(image, 0, 0, width, height, null);\n+        } finally {\n+            g2d.dispose();\n+        }\n+        return bimage.getRGB(0, 0, width, height, null, 0, width);\n+    }\n+\n+    static void setClipboardContents(Clipboard cb,\n+                                     Transferable contents,\n+                                     ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    static Transferable getClipboardContents(Clipboard cb,\n+                                             Object requestor) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    Transferable t = cb.getContents(requestor);\n+                    return t;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class TImageProducer extends ImageTransferer {\n+\n+    boolean[] passedArray;\n+\n+    private boolean isFirstCallOfLostOwnership = true;\n+\n+    TImageProducer() {\n+        formats = retrieveFormatsToTest();\n+        passedArray = new boolean[formats.length];\n+    }\n+\n+    void begin() {\n+        setClipboardContents(clipboard, new StringSelection(S_BEGIN), this);\n+    }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(\"PRODUCER: lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+\n+        if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n+            String msg = null;\n+            \/\/ for test going on if t.getTransferData() will throw an exception\n+            if (isFirstCallOfLostOwnership) {\n+                isFirstCallOfLostOwnership = false;\n+                msg = S_BEGIN_ANSWER;\n+            } else {\n+                msg = S_PASSED;\n+            }\n+\n+            try {\n+                msg = (String)t.getTransferData(DataFlavor.stringFlavor);\n+                System.err.println(\"received message: \" + msg);\n+            } catch (Exception e) {\n+                System.err.println(\"Can't getTransferData-message: \" + e);\n+            }\n+\n+            if (msg.equals(S_PASSED)) {\n+                notifyTransferSuccess(true);\n+            } else if (msg.equals(S_FAILED)) {\n+                notifyTransferSuccess(false);\n+            } else if (!msg.equals(S_BEGIN_ANSWER)) {\n+                throw new RuntimeException(\"wrong message in \" +\n+                    \"TImageProducer.lostOwnership(): \" + msg +\n+                    \"  (possibly due to bug 4683804)\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"DataFlavor.stringFlavor is not \" +\n+                \"supported by transferable in \" +\n+                \"TImageProducer.lostOwnership()\");\n+        }\n+\n+        if (fi < formats.length) {\n+            System.err.println(\"testing native image format \" + formats[fi] +\n+                               \"...\");\n+            leaveFormat(formats[fi]);\n+            setClipboardContents(cb, new ImageSelection(image), this);\n+        } else {\n+            setClipboardContents(cb, new StringSelection(S_END), null);\n+        }\n+    }\n+\n+    void notifyTransferSuccess(boolean status) {\n+        passedArray[fi] = status;\n+        fi++;\n+    }\n+}\n+\n+class TImageConsumer extends ImageTransferer {\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static boolean failed;\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(\"CONSUMER: lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+\n+        if (t.isDataFlavorSupported(DataFlavor.imageFlavor)) {\n+            Image im = null; \/\/? image;\n+            try {\n+                im = (Image) t.getTransferData(DataFlavor.imageFlavor);\n+            } catch (Exception e) {\n+                System.err.println(\"Can't getTransferData-image: \" + e);\n+                notifyTransferSuccess(false);\n+            }\n+\n+            if (im == null) {\n+                System.err.println(\"getTransferData returned null\");\n+                notifyTransferSuccess(false);\n+            } else if (areImagesIdentical(image, im)) {\n+                notifyTransferSuccess(true);\n+            } else {\n+                System.err.println(\"transferred image is different from \" +\n+                                   \"initial image\");\n+                notifyTransferSuccess(false);\n+            }\n+        } else if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n+            \/\/ all image formats have been processed\n+            try {\n+                String msg = (String) t.getTransferData(DataFlavor.stringFlavor);\n+                System.err.println(\"received message: \" + msg);\n+            } catch (Exception e) {\n+                System.err.println(\"Can't getTransferData-message: \" + e);\n+            }\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        } else {\n+            System.err.println(\"imageFlavor is not supported by transferable\");\n+            notifyTransferSuccess(false);\n+        }\n+    }\n+\n+    void notifyTransferSuccess(boolean status) {\n+        if (status) {\n+            System.err.println(\"format passed: \" + formats[fi]);\n+            setClipboardContents(clipboard, new StringSelection(S_PASSED), this);\n+        } else {\n+            failed = true;\n+            System.err.println(\"format failed: \" + formats[fi]);\n+            setClipboardContents(clipboard, new StringSelection(S_FAILED), this);\n+        }\n+\n+        if (fi < formats.length - 1) {\n+            leaveFormat(formats[++fi]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            TImageConsumer ic = new TImageConsumer();\n+\n+            ic.formats = args;\n+\n+            leaveFormat(ic.formats[0]);\n+            synchronized (LOCK) {\n+                ic.setClipboardContents(ic.clipboard,\n+                    new StringSelection(S_BEGIN_ANSWER), ic);\n+                LOCK.wait();\n+            }\n+            if (failed) System.exit(ImageTransferTest.CODE_CONSUMER_TEST_FAILED);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(ImageTransferTest.CODE_FAILURE);\n+        }\n+    }\n+}\n+\n+\/**\n+ * A <code>Transferable<\/code> which implements the capability required\n+ * to transfer an <code>Image<\/code>.\n+ *\n+ * This <code>Transferable<\/code> properly supports\n+ * <code>DataFlavor.imageFlavor<\/code>.\n+ * and all equivalent flavors.\n+ * No other <code>DataFlavor<\/code>s are supported.\n+ *\n+ * @see java.awt.datatransfer.DataFlavor.imageFlavor\n+ *\/\n+class ImageSelection implements Transferable {\n+\n+    private static final int IMAGE = 0;\n+\n+    private static final DataFlavor[] flavors = { DataFlavor.imageFlavor };\n+\n+    private Image data;\n+\n+    \/**\n+     * Creates a <code>Transferable<\/code> capable of transferring\n+     * the specified <code>String<\/code>.\n+     *\/\n+    public ImageSelection(Image data) {\n+        this.data = data;\n+    }\n+\n+    \/**\n+     * Returns an array of flavors in which this <code>Transferable<\/code>\n+     * can provide the data. <code>DataFlavor.stringFlavor<\/code>\n+     * is properly supported.\n+     * Support for <code>DataFlavor.plainTextFlavor<\/code> is\n+     * <b>deprecated<\/b>.\n+     *\n+     * @return an array of length one, whose element is <code>DataFlavor.\n+     *         imageFlavor<\/code>\n+     *\/\n+    public DataFlavor[] getTransferDataFlavors() {\n+        \/\/ returning flavors itself would allow client code to modify\n+        \/\/ our internal behavior\n+        return (DataFlavor[])flavors.clone();\n+    }\n+\n+    \/**\n+     * Returns whether the requested flavor is supported by this\n+     * <code>Transferable<\/code>.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @return true if <code>flavor<\/code> is equal to\n+     *   <code>DataFlavor.imageFlavor<\/code>;\n+     *   false if <code>flavor<\/code>\n+     *   is not one of the above flavors\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+        for (int i = 0; i < flavors.length; i++) {\n+            if (flavor.equals(flavors[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns the <code>Transferable<\/code>'s data in the requested\n+     * <code>DataFlavor<\/code> if possible. If the desired flavor is\n+     * <code>DataFlavor.imageFlavor<\/code>, or an equivalent flavor,\n+     * the <code>Image<\/code> representing the selection is\n+     * returned.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @return the data in the requested flavor, as outlined above\n+     * @throws UnsupportedFlavorException if the requested data flavor is\n+     *         not equivalent to <code>DataFlavor.imageFlavor<\/code>\n+     * @throws IOException if an IOException occurs while retrieving the data.\n+     *         By default, <code>ImageSelection<\/code> never throws\n+     *         this exception, but a subclass may.\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public Object getTransferData(DataFlavor flavor)\n+        throws UnsupportedFlavorException, java.io.IOException\n+    {\n+        if (flavor.equals(flavors[IMAGE])) {\n+            return (Object)data;\n+        } else {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ImageTransferTest.java","additions":519,"deletions":0,"binary":false,"changes":519,"status":"added"},{"patch":"@@ -0,0 +1,171 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4683804\n+ * @summary Tests that in ClipboardOwner.lostOwnership() Clipboard.getContents()\n+ *          returns actual contents of the clipboard and Clipboard.setContents()\n+ *          can set contents of the clipboard and its owner. The clipboard is\n+ *          the system clipboard and the owners of the clipboard are in\n+ *          2 different processes.\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main SystemClipboard2ProcTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SystemClipboard2ProcTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        SystemClipboardOwner.run();\n+\n+        if (SystemClipboardOwner.failed) {\n+            throw new RuntimeException(\"test failed: can not get actual \" +\n+                    \"contents of the clipboard or set owner of the clipboard\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+}\n+\n+class SystemClipboardOwner implements ClipboardOwner {\n+    static volatile boolean failed;\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static final int CHAIN_LENGTH = 5;\n+    private final static Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private int m, id;\n+\n+    public SystemClipboardOwner(int m) { this.m = m; id = m; }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(id + \" lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+        \/\/ for test passing if t.getTransferData() will throw an exception\n+        String msg = \"\" + (m + 1);\n+        try {\n+            msg = (String)t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (Exception e) {\n+            System.err.println(id + \" can't getTransferData: \" + e);\n+        }\n+        System.err.println(id + \" Clipboard.getContents(): \" + msg);\n+        if (!msg.equals(\"\" + (m + 1))) {\n+            failed = true;\n+            System.err.println(\"Clipboard.getContents() returned incorrect contents!\");\n+        }\n+\n+        m += 2;\n+        if (m <= CHAIN_LENGTH) {\n+            System.err.println(id + \" Clipboard.setContents(): \" + m);\n+            setClipboardContents(cb, new StringSelection(m + \"\"), this);\n+        }\n+        if (m >= CHAIN_LENGTH) {\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static void run() throws Exception {\n+        SystemClipboardOwner cbo1 = new SystemClipboardOwner(0);\n+        System.err.println(cbo1.m + \" Clipboard.setContents(): \" + cbo1.m);\n+        setClipboardContents(clipboard, new StringSelection(cbo1.m + \"\"),\n+                             cbo1);\n+\n+        ProcessBuilder pb = ProcessTools\n+                .createTestJavaProcessBuilder(SystemClipboardOwner.class.getName());\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+\n+        if (cbo1.m < CHAIN_LENGTH) {\n+            failed = true;\n+            System.err.println(\"chain of calls of lostOwnership() broken!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        SystemClipboardOwner cbo2 = new SystemClipboardOwner(1);\n+        System.err.println(cbo2.m + \" Clipboard.setContents(): \" + cbo2.m);\n+        synchronized (LOCK) {\n+            setClipboardContents(clipboard, new StringSelection(cbo2.m + \"\"),\n+                                 cbo2);\n+            LOCK.wait();\n+        }\n+    }\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Transferable getClipboardContents(Clipboard cb,\n+                                                     Object requestor) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    Transferable t = cb.getContents(requestor);\n+                    return t;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java","additions":171,"deletions":0,"binary":false,"changes":171,"status":"added"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4558797\n+ * @summary Tests that there is no data conversion failure when two applications\n+ *          exchange data via system clipboard\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main NoDataConversionFailureTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class NoDataConversionFailureTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        SystemClipboardOwner.run();\n+\n+        if (SystemClipboardOwner.failed) {\n+            throw new RuntimeException(\"test failed: can not get transfer data\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+}\n+\n+class SystemClipboardOwner implements ClipboardOwner {\n+    static volatile boolean failed;\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static final int CHAIN_LENGTH = 15;\n+    private final static Clipboard clipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private int m;\n+    private final int id;\n+\n+    public SystemClipboardOwner(int m) { this.m = m; id = m; }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(id + \" lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+        \/\/ for test passing if t.getTransferData() will throw an exception\n+        String msg = String.valueOf(m + 1);\n+        try {\n+            msg = (String) t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (IOException e) {\n+            failed = true;\n+            System.err.println(id + \" can't getTransferData: \" + e);\n+        } catch (Exception e) {\n+            System.err.println(id + \" can't getTransferData: \" + e);\n+        }\n+\n+        System.err.println(id + \" Clipboard.getContents(): \" + msg);\n+        if (!msg.equals(String.valueOf(m + 1))) {\n+            System.err.println(\"Clipboard.getContents() returned incorrect contents!\");\n+        }\n+\n+        m += 2;\n+        if (m <= CHAIN_LENGTH) {\n+            System.err.println(id + \" Clipboard.setContents(): \" + m);\n+            setClipboardContents(cb, new StringSelection(m + \"\"), this);\n+        }\n+        if (m >= CHAIN_LENGTH) {\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static void run() throws Exception {\n+        SystemClipboardOwner cbo1 = new SystemClipboardOwner(0);\n+        System.err.println(cbo1.m + \" Clipboard.setContents(): \" + cbo1.m);\n+        setClipboardContents(clipboard, new StringSelection(cbo1.m + \"\"),\n+                cbo1);\n+\n+        ProcessBuilder pb = ProcessTools\n+                .createTestJavaProcessBuilder(SystemClipboardOwner.class.getName());\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        if (cbo1.m < CHAIN_LENGTH) {\n+            System.err.println(\"chain of calls of lostOwnership() broken!\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        SystemClipboardOwner cbo2 = new SystemClipboardOwner(1);\n+        System.err.println(cbo2.m + \" Clipboard.setContents(): \" + cbo2.m);\n+\n+        synchronized (LOCK) {\n+            setClipboardContents(clipboard, new StringSelection(cbo2.m + \"\"),\n+                cbo2);\n+            LOCK.wait();\n+        }\n+    }\n+\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Transferable getClipboardContents(Clipboard cb,\n+                                                     Object requestor) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    Transferable t = cb.getContents(requestor);\n+                    return t;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/NoDataConversionFailureTest.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4655996\n+ * @summary tests that getting the system clipboard contents doesn't cause\n+ *          IOException if there is no clipboard owner or the owner doesn't\n+ *          export any target types\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main NoOwnerNoTargetsTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class NoOwnerNoTargetsTest implements ClipboardOwner {\n+\n+    final Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+    public static final int CLIPBOARD_DELAY = 1000;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            NoOwnerNoTargetsTest test = new NoOwnerNoTargetsTest();\n+            test.execute();\n+            return;\n+        }\n+\n+        new NoOwnerNoTargetsTest().start();\n+    }\n+\n+    public void execute() {\n+        final ClipboardOwner clipboardOwner = new ClipboardOwner() {\n+                public void lostOwnership(Clipboard clip,\n+                                          Transferable contents) {\n+                    System.exit(0);\n+                }\n+            };\n+        final Transferable emptyTransferable = new Transferable() {\n+                public DataFlavor[] getTransferDataFlavors() {\n+                    return new DataFlavor[0];\n+                }\n+                public boolean isDataFlavorSupported(DataFlavor df) {\n+                    return false;\n+                }\n+                public Object getTransferData(DataFlavor df)\n+                  throws UnsupportedFlavorException {\n+                    throw new UnsupportedFlavorException(df);\n+                }\n+            };\n+\n+        clipboard.setContents(emptyTransferable, clipboardOwner);\n+        final Object o = new Object();\n+        synchronized (o) {\n+            try {\n+                o.wait();\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        clipboard.getContents(null);\n+\n+        Transferable transferable = new StringSelection(\"TEXT\");\n+        clipboard.setContents(transferable, this);\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                NoOwnerNoTargetsTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable contents) {\n+        final Transferable transferable = new StringSelection(\"TEXT\");\n+        final Runnable r = () -> {\n+            try {\n+                Thread.sleep(CLIPBOARD_DELAY);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            clipboard.getContents(null);\n+            clipboard.setContents(transferable, null);\n+        };\n+        final Thread t = new Thread(r);\n+        t.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4401853\n+ * @summary Tests that pasting null to TextArea and TextField on Solaris\/Linux\n+ *          removes selected text; doing it on Windows to TextArea does nothing,\n+ *          to TextField removes selected text.\n+ * @key headful\n+ * @run main PasteNullToTextComponentsTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class PasteNullToTextComponentsTest {\n+\n+    private static final int NATIVE_EVENT_PROCESSING_TIMEOUT = 500;\n+    private static final int WAIT_TIMEOUT = 3000;\n+\n+    private boolean failed;\n+\n+    private static final boolean isOSWindows =\n+            System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n+    private final Object LOCK = new Object();\n+\n+    private Robot robot;\n+\n+    private Frame frame;\n+    private TextArea ta;\n+    private TextField tf;\n+    private Component initialFocusComp;\n+\n+    private final String beg = \"a\";\n+    private final String sel = \"b\";\n+    private final String end = \"c\";\n+    private final String text = beg + sel + end;\n+    private final String begEnd = beg + end;\n+\n+    private boolean initialFocusGained;\n+\n+    public void init() {\n+        ta = new TextArea(text, 3, text.length() + 3);\n+        tf = new TextField(text, text.length() + 3);\n+        initialFocusComp = new Button(\"Initially focused button\");\n+\n+        frame = new Frame();\n+        frame.add(initialFocusComp, BorderLayout.NORTH);\n+        frame.add(ta, BorderLayout.CENTER);\n+        frame.add(tf, BorderLayout.SOUTH);\n+        frame.setSize(200, 200);\n+\n+        FocusListener fl = new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.out.println(e + \"; source class=\" + e.getSource().getClass());\n+                synchronized (LOCK) {\n+                    TextComponent tc = (TextComponent) e.getComponent();\n+                    tc.select(1, 2);\n+                    robot.keyPress(KeyEvent.VK_CONTROL);\n+                    robot.keyPress(KeyEvent.VK_V);\n+                    robot.keyRelease(KeyEvent.VK_V);\n+                    robot.keyRelease(KeyEvent.VK_CONTROL);\n+                    tc.removeFocusListener(this);\n+                    LOCK.notifyAll();\n+                }\n+            }\n+        };\n+        ta.addFocusListener(fl);\n+        tf.addFocusListener(fl);\n+\n+        initialFocusComp.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.out.println(e + \"; source class=\" + e.getSource().getClass());\n+                synchronized (LOCK) {\n+                    initialFocusGained = true;\n+                    LOCK.notifyAll();\n+                }\n+            }\n+        });\n+\n+        setClipboardContents(Toolkit.getDefaultToolkit().getSystemClipboard(),\n+                new StringSelection(null), null);\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Point iniFocusPoint = initialFocusComp.getLocationOnScreen();\n+        synchronized (LOCK) {\n+            if (!initialFocusGained) {\n+                robot.mouseMove(iniFocusPoint.x + 3, iniFocusPoint.y + 3);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                LOCK.wait(WAIT_TIMEOUT);\n+            }\n+        }\n+\n+        initialFocusComp.requestFocusInWindow();\n+        robot.waitForIdle();\n+\n+        synchronized (LOCK) {\n+            ta.requestFocusInWindow();\n+            LOCK.wait(WAIT_TIMEOUT);\n+        }\n+\n+        \/\/ wait until native control process key event (C^V)\n+        robot.waitForIdle();\n+        robot.delay(NATIVE_EVENT_PROCESSING_TIMEOUT);\n+\n+        synchronized (LOCK) {\n+            tf.requestFocusInWindow();\n+            LOCK.wait(WAIT_TIMEOUT);\n+        }\n+\n+        \/\/ wait until native control process key event (C^V)\n+        robot.waitForIdle();\n+        robot.delay(NATIVE_EVENT_PROCESSING_TIMEOUT);\n+\n+        String taText = ta.getText();\n+        String tfText = tf.getText();\n+\n+        System.err.println(\"TextArea text=\" + taText +\n+                \" TextField text=\" + tfText);\n+\n+        boolean taSelDeleted = begEnd.equals(taText);\n+        boolean taSelRemained = text.equals(taText);\n+        boolean tfSelDeleted = begEnd.equals(tfText);\n+\n+        System.out.println(\"taSelDeleted = \" + taSelDeleted);\n+        System.out.println(\"taSelRemained = \" + taSelRemained);\n+        System.out.println(\"tfSelDeleted = \" + tfSelDeleted);\n+\n+        if (isOSWindows\n+                ? !(taSelRemained && tfSelDeleted)\n+                : !(taSelDeleted && tfSelDeleted)) {\n+            failed = true;\n+        }\n+\n+        if (!initialFocusGained) {\n+            System.err.println(\"Initial component did not gain focus\");\n+            failed = false;\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"test failed: wrong behavior of text \" +\n+                    \"component on pasting null\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PasteNullToTextComponentsTest app = new PasteNullToTextComponentsTest();\n+        try {\n+            EventQueue.invokeAndWait(app::init);\n+            app.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (app.frame != null) {\n+                    app.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/PasteNullToTextComponentsTest.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"},{"patch":"@@ -35,1 +35,1 @@\n- * @summary Can't exit color chooser dialog when running as an applet\n+ * @summary Can't exit color chooser dialog when running in non-default AppContext\n","filename":"test\/jdk\/java\/awt\/Dialog\/CloseDialog\/CloseDialogTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.applet.*;\n","filename":"test\/jdk\/java\/awt\/Focus\/ChoiceFocus\/ChoiceFocus.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GraphicsEnvironment;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 6225472 6682536\n+ * @requires (os.family != \"linux\")\n+ * @summary Tests that non-focusable Frame in full-screen mode overlaps the task bar.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NonfocusableFrameFullScreenTest\n+ *\/\n+\n+public class NonfocusableFrameFullScreenTest extends JPanel {\n+    boolean fullscreen = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                1. Press \"Show Frame\" button to show a Frame with two buttons.\n+\n+                2. Press the button \"To Full Screen\" to bring the frame to\n+                   full-screen mode:\n+\n+                        The frame should overlap the taskbar\n+\n+                3. Press \"To Windowed\" button:\n+                        The frame should return to its original size.\n+                        The frame shouldn't be alwaysOnTop.\n+\n+                4. Press \"Set Always On Top\" button and make sure the frame\n+                   is alwaysOnTop, then press \"To Full Screen\" button\n+                   and then \"To Windowed\" button:\n+\n+                        The frame should return to its original size keeping alwaysOnTop\n+                        state on.\n+\n+                Press Pass if everything is as expected.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(NonfocusableFrameFullScreenTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private NonfocusableFrameFullScreenTest() {\n+        Button b = new Button(\"Show Frame\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                showFrame();\n+            }\n+        });\n+        setLayout(new BorderLayout());\n+        add(b, BorderLayout.CENTER);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 100);\n+    }\n+\n+    public void showFrame() {\n+        Frame frame = new Frame(\"Test Frame\");\n+\n+        Button button = new Button(\"To Full Screen\");\n+        button.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (fullscreen) {\n+                    GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().\n+                            setFullScreenWindow(null);\n+                    button.setLabel(\"To Full Screen\");\n+                    fullscreen = false;\n+                } else {\n+                    GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().\n+                            setFullScreenWindow(frame);\n+                    button.setLabel(\"To Windowed\");\n+                    fullscreen = true;\n+                }\n+                frame.validate();\n+            }\n+        });\n+\n+        Button button2 = new Button(\"Set Always On Top\");\n+        button2.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (frame.isAlwaysOnTop()) {\n+                    button2.setLabel(\"Set Always On Top\");\n+                    frame.setAlwaysOnTop(false);\n+                } else {\n+                    button2.setLabel(\"Set Not Always On Top\");\n+                    frame.setAlwaysOnTop(true);\n+                }\n+                frame.validate();\n+            }\n+        });\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(button, BorderLayout.WEST);\n+        frame.add(button2, BorderLayout.EAST);\n+        frame.setBounds(400, 200, 350, 100);\n+        frame.setFocusableWindowState(false);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FullScreen\/NonfocusableFrameFullScreenTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4191297\n+ * @summary Tests that unreferenced GDI resources are correctly\n+ *          destroyed when no longer needed.\n+ * @key headful\n+ * @run main GDIResourceExhaustionTest\n+ *\/\n+\n+public class GDIResourceExhaustionTest extends Frame {\n+    public void initUI() {\n+        setSize(200, 200);\n+        setUndecorated(true);\n+        setLocationRelativeTo(null);\n+        Panel labelPanel = new Panel();\n+        Label label = new Label(\"Red label\");\n+        label.setBackground(Color.red);\n+        labelPanel.add(label);\n+        labelPanel.setLocation(20, 50);\n+        add(labelPanel);\n+        setVisible(true);\n+    }\n+\n+    public void paint(Graphics graphics) {\n+        super.paint(graphics);\n+        for (int rgb = 0; rgb <= 0xfff; rgb++) {\n+            graphics.setColor(new Color(rgb));\n+            graphics.fillRect(0, 0, 5, 5);\n+        }\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Insets insets = getInsets();\n+        Point location = getLocationOnScreen();\n+        Dimension size = getSize();\n+        r.x = location.x + insets.left;\n+        r.y = location.y + insets.top;\n+        r.width = size.width - (insets.left + insets.right);\n+        r.height = size.height - (insets.top + insets.bottom);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException, IOException {\n+        GDIResourceExhaustionTest test = new GDIResourceExhaustionTest();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.delay(2000);\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                test.requestCoordinates(coords);\n+            });\n+            robot.mouseMove(coords.x - 50, coords.y - 50);\n+            robot.waitForIdle();\n+            robot.delay(5000);\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(500);\n+            boolean redFound = false;\n+            int redRGB = Color.red.getRGB();\n+            for (int y = 0; y < capture.getHeight(); y++) {\n+                for (int x = 0; x < capture.getWidth(); x++) {\n+                    if (capture.getRGB(x, y) == redRGB) {\n+                        redFound = true;\n+                        break;\n+                    }\n+                    if (redFound) {\n+                        break;\n+                    }\n+                }\n+            }\n+            if (!redFound) {\n+                File errorImage = new File(\"screenshot.png\");\n+                ImageIO.write(capture, \"png\", errorImage);\n+                throw new RuntimeException(\"Red label is not detected, possibly GDI resources exhausted\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/GDIResourceExhaustionTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094059\n+ * @summary drawing to a subclass of canvas didn't draw to the correct location.\n+ * @key headful\n+ * @run main LineLocationTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class LineLocationTest extends Frame {\n+    private DrawScreen screen;\n+\n+    public void initialize() {\n+        setSize(400, 400);\n+        setLocationRelativeTo(null);\n+        setTitle(\"Line Location Test\");\n+        Panel p = new Panel();\n+        screen = new DrawScreen();\n+        p.add(screen);\n+        p.setLocation(50, 50);\n+        p.setSize(300, 300);\n+        add(p);\n+        setBackground(Color.white);\n+        setForeground(Color.blue);\n+        setVisible(true);\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Point location = screen.getLocationOnScreen();\n+        Dimension size = screen.getSize();\n+        r.setBounds(location.x, location.y, size.width, size.height);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        LineLocationTest me = new LineLocationTest();\n+        EventQueue.invokeAndWait(me::initialize);\n+        try {\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                me.requestCoordinates(coords);\n+            });\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(2000);\n+            for (int y = 0; y < capture.getHeight(); y++) {\n+                for (int x = 0; x < capture.getWidth(); x++) {\n+                    int blue = Color.blue.getRGB();\n+                    if (capture.getRGB(x, y) == blue) {\n+                        throw new RuntimeException(\"Blue detected at \" + x + \", \" + y);\n+                    }\n+                }\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(me::dispose);\n+        }\n+    }\n+}\n+\n+class DrawScreen extends Canvas {\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 300);\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(Color.blue);\n+        g.drawLine(5, -3145583, 50, -3145583);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/LineLocationTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4216180\n+ * @summary This test verifies that Graphics2D.setBackground and clearRect\n+ *   performs correctly regardless of antialiasing hint.\n+ * @key headful\n+ * @run main NativeWin32Clear\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NativeWin32Clear extends Frame {\n+\n+    public void initialize() {\n+        setLocationRelativeTo(null);\n+        setSize(300, 200);\n+        setBackground(Color.red);\n+        setVisible(true);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D) g;\n+        Dimension d = getSize();\n+        g2.setBackground(Color.green);\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                            RenderingHints.VALUE_ANTIALIAS_ON);\n+        g2.clearRect(0, 0, d.width \/ 2, d.height);\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                            RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2.clearRect(d.width \/ 2, 0, d.width \/ 2, d.height);\n+        g2.setColor(Color.black);\n+    }\n+\n+    public void cleanup() {\n+        setVisible(false);\n+        dispose();\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Insets insets = getInsets();\n+        Point location = getLocationOnScreen();\n+        Dimension size = getSize();\n+        r.x = location.x + insets.left + 5;\n+        r.y = location.y + insets.top + 5;\n+        r.width = size.width - (insets.left + insets.right + 10);\n+        r.height = size.height - (insets.top + insets.bottom + 10);\n+    }\n+\n+    \/*\n+     * Check color match within allowed deviation.\n+     * Prints first non-matching pixel coordinates and actual and expected values.\n+     * Returns true if image is filled with the provided color, false otherwise.\n+     *\/\n+    private boolean checkColor(BufferedImage img, Color c, int delta) {\n+        int cRed = c.getRed();\n+        int cGreen = c.getGreen();\n+        int cBlue = c.getBlue();\n+        for (int y = 0; y < img.getHeight(); y++) {\n+            for (int x = 0; x < img.getWidth(); x++) {\n+                int rgb = img.getRGB(x, y);\n+                int red = (rgb & 0x00ff0000) >> 16;\n+                int green = (rgb & 0x0000ff00) >> 8;\n+                int blue = rgb & 0x000000ff;\n+                if (cRed > (red + delta) || cRed < (red - delta)\n+                 || cGreen > (green + delta) || cGreen < (green - delta)\n+                 || cBlue > (blue + delta) || cBlue < (blue - delta)) {\n+                    System.err.println(\"Color at coordinates (\" + x + \", \" + y + \") does not match\");\n+                    System.err.println(\"Expected color: \" + c.getRGB());\n+                    System.err.println(\"Actual color: \" + rgb);\n+                    System.err.println(\"Allowed deviation: \" + delta);\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        NativeWin32Clear test = new NativeWin32Clear();\n+        try {\n+            EventQueue.invokeAndWait(test::initialize);\n+            Robot robot = new Robot();\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                test.requestCoordinates(coords);\n+            });\n+            robot.delay(2000);\n+            robot.mouseMove(coords.x - 50, coords.y - 50);\n+            robot.waitForIdle();\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(2000);\n+            if (!test.checkColor(capture, Color.green, 5)) {\n+                throw new RuntimeException(\"Incorrect color encountered, check error log for details\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::cleanup);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/NativeWin32Clear.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4465509 4453725 4489667\n+ * @summary verify that fillPolygon completely fills area defined by drawPolygon\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PolygonFillTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Polygon;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PolygonFillTest extends Frame {\n+    Polygon poly;\n+    static String INSTRUCTIONS = \"\"\"\n+                There should be two hourglass shapes drawn inside the window\n+                called \"Polygon Fill Test\". The outline should be blue\n+                and the interior should be green and there should be no gaps\n+                between the filled interior and the outline nor should the green\n+                filler spill outside the blue outline. You may need\n+                to use a screen magnifier to inspect the smaller shape\n+                on the left to verify that there are no gaps.\n+\n+                If both polygons painted correctly press \"Pass\" otherwise press \"Fail\".\n+                \"\"\";\n+\n+    public PolygonFillTest() {\n+        poly = new Polygon();\n+        poly.addPoint(0, 0);\n+        poly.addPoint(10, 10);\n+        poly.addPoint(0, 10);\n+        poly.addPoint(10, 0);\n+        setSize(300, 300);\n+        setTitle(\"Polygon Fill Test\");\n+    }\n+\n+    public void paint(Graphics g) {\n+        int w = getWidth();\n+        int h = getHeight();\n+        Image img = createImage(20, 20);\n+        Graphics g2 = img.getGraphics();\n+        drawPolys(g2, 20, 20, 5, 5);\n+        g2.dispose();\n+        drawPolys(g, w, h, (w \/ 4) - 5, (h \/ 2) - 5);\n+        g.drawImage(img, (3 * w \/ 4) - 40, (h \/ 2) - 40, 80, 80, null);\n+    }\n+\n+    public void drawPolys(Graphics g, int w, int h, int x, int y) {\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, w, h);\n+        g.translate(x, y);\n+        g.setColor(Color.green);\n+        g.fillPolygon(poly);\n+        g.setColor(Color.blue);\n+        g.drawPolygon(poly);\n+        g.translate(-x, -y);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Polygon Fill Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PolygonFillTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/PolygonFillTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4081126 4129709\n+ * @summary Test for proper repainting on multiprocessor systems.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RepeatedRepaintTest\n+ *\/\n+public class RepeatedRepaintTest extends Frame {\n+    private Font font = null;\n+    private Image background;\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            The frame next to this window called \"AWT Draw Test\" has\n+            some elements drawn on it. Move this window partially outside of the\n+            screen bounds and then drag it back. Repeat it couple of times.\n+            Drag the instructions window over the frame partially obscuring it.\n+            If after number of attempts the frame content stops repainting\n+            press \"Fail\", otherwise press \"Pass\".\n+            \"\"\";\n+\n+    public RepeatedRepaintTest() {\n+        setTitle(\"AWT Draw Test\");\n+        setSize(300, 300);\n+        background = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = background.getGraphics();\n+        g.setColor(Color.black);\n+        g.fillRect(0, 0, 300, 300);\n+        g.dispose();\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension dim = this.getSize();\n+        super.paint(g);\n+        g.drawImage(background, 0, 0, dim.width, dim.height, null);\n+        g.setColor(Color.white);\n+        if (font == null) {\n+            font = new Font(\"SansSerif\", Font.PLAIN, 24);\n+        }\n+        g.setFont(font);\n+        FontMetrics metrics = g.getFontMetrics();\n+        String message = \"Draw Test\";\n+        g.drawString(message, (dim.width \/ 2) - (metrics.stringWidth(message) \/ 2),\n+                (dim.height \/ 2) + (metrics.getHeight() \/ 2));\n+\n+        int counter = 50;\n+        for (int i = 0; i < 50; i++) {\n+            counter += 4;\n+            g.drawOval(counter, 50, i, i);\n+        }\n+\n+        counter = 20;\n+        for (int i = 0; i < 100; i++) {\n+            counter += 4;\n+            g.drawOval(counter, 150, i, i);\n+        }\n+        g.setColor(Color.black);\n+        g.drawLine(0, dim.height - 25, dim.width, dim.height - 25);\n+        g.setColor(Color.gray);\n+        g.drawLine(0, dim.height - 24, dim.width, dim.height - 24);\n+        g.setColor(Color.lightGray);\n+        g.drawLine(0, dim.height - 23, dim.width, dim.height - 23);\n+        g.fillRect(0, dim.height - 22, dim.width, dim.height);\n+\n+\n+        g.setXORMode(Color.blue);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setPaintMode();\n+\n+        Image img = createImage(50, 50);\n+        Graphics imgGraphics = img.getGraphics();\n+        imgGraphics.setColor(Color.magenta);\n+        imgGraphics.fillRect(0, 0, 50, 50);\n+        imgGraphics.setColor(Color.yellow);\n+        imgGraphics.drawString(\"offscreen\", 0, 20);\n+        imgGraphics.drawString(\"image\", 0, 30);\n+\n+        g.drawImage(img, dim.width - 100, dim.height - 100, Color.blue, null);\n+\n+        g.setXORMode(Color.white);\n+        drawAt(g, 100, 100, 50, 50);\n+        drawAt(g, 105, 105, 50, 50);\n+        drawAt(g, 110, 110, 50, 50);\n+    }\n+\n+    public void drawAt(Graphics g, int x, int y, int width, int height) {\n+        g.setColor(Color.magenta);\n+        g.fillRect(x, y, width, height);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Repeated Repaint Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(RepeatedRepaintTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/RepeatedRepaintTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Polygon;\n+import java.awt.geom.GeneralPath;\n+import java.awt.geom.Line2D;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4411814 4298688 4205762 4524760 4067534\n+ * @summary Check that Graphics rendering primitives function\n+ *          correctly when fed small and degenerate shapes\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SmallPrimitives\n+ *\/\n+\n+\n+public class SmallPrimitives extends Panel {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            In the borderless frame next to this window there should be a\n+            set of tiny narrow blue polygons painted next to the green rectangles.\n+            If rectangle is vertical the corresponding polygon is painted to the right of it,\n+            if rectangle is horizontal the polygon is painted below it.\n+            The length of the polygon should be roughly the same as the length of the\n+            green rectangle next to it. If size is significantly different or any of the\n+            polygons is not painted press \"Fail\" otherwise press \"Pass\".\n+            Note: one may consider using screen magnifier to compare sizes.\n+            \"\"\";\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        Polygon p;\n+        GeneralPath gp;\n+\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, d.width, d.height);\n+\n+        \/\/ Reposition for horizontal tests (below)\n+        g.translate(0, 20);\n+\n+        \/\/ Reference shapes\n+        g.setColor(Color.green);\n+        g.fillRect(10, 7, 11, 1);\n+        g.fillRect(10, 17, 11, 2);\n+        g.fillRect(10, 27, 11, 1);\n+        g.fillRect(10, 37, 11, 1);\n+        g.fillRect(10, 47, 11, 2);\n+        g.fillRect(10, 57, 11, 2);\n+        g.fillRect(10, 67, 11, 1);\n+        g.fillRect(10, 77, 11, 2);\n+        g.fillRect(10, 87, 11, 1);\n+        g.fillRect(10, 97, 11, 1);\n+        g.fillRect(10, 107, 11, 1);\n+        g.fillRect(10, 117, 6, 1); g.fillRect(20, 117, 6, 1);\n+\n+        \/\/ Potentially problematic test shapes\n+        g.setColor(Color.blue);\n+        g.drawRect(10, 10, 10, 0);\n+        g.drawRect(10, 20, 10, 1);\n+        g.drawRoundRect(10, 30, 10, 0, 0, 0);\n+        g.drawRoundRect(10, 40, 10, 0, 4, 4);\n+        g.drawRoundRect(10, 50, 10, 1, 0, 0);\n+        g.drawRoundRect(10, 60, 10, 1, 4, 4);\n+        g.drawOval(10, 70, 10, 0);\n+        g.drawOval(10, 80, 10, 1);\n+        p = new Polygon();\n+        p.addPoint(10, 90);\n+        p.addPoint(20, 90);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        p = new Polygon();\n+        p.addPoint(10, 100);\n+        p.addPoint(20, 100);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        ((Graphics2D) g).draw(new Line2D.Double(10, 110, 20, 110));\n+        gp = new GeneralPath();\n+        gp.moveTo(10, 120);\n+        gp.lineTo(15, 120);\n+        gp.moveTo(20, 120);\n+        gp.lineTo(25, 120);\n+        ((Graphics2D) g).draw(gp);\n+\n+        \/\/ Polygon limit tests\n+        p = new Polygon();\n+        trypoly(g, p);\n+        p.addPoint(10, 120);\n+        trypoly(g, p);\n+\n+        \/\/ Reposition for vertical tests (below)\n+        g.translate(20, -20);\n+\n+        \/\/ Reference shapes\n+        g.setColor(Color.green);\n+        g.fillRect(7, 10, 1, 11);\n+        g.fillRect(17, 10, 2, 11);\n+        g.fillRect(27, 10, 1, 11);\n+        g.fillRect(37, 10, 1, 11);\n+        g.fillRect(47, 10, 2, 11);\n+        g.fillRect(57, 10, 2, 11);\n+        g.fillRect(67, 10, 1, 11);\n+        g.fillRect(77, 10, 2, 11);\n+        g.fillRect(87, 10, 1, 11);\n+        g.fillRect(97, 10, 1, 11);\n+        g.fillRect(107, 10, 1, 11);\n+        g.fillRect(117, 10, 1, 6); g.fillRect(117, 20, 1, 6);\n+\n+        \/\/ Potentially problematic test shapes\n+        g.setColor(Color.blue);\n+        g.drawRect(10, 10, 0, 10);\n+        g.drawRect(20, 10, 1, 10);\n+        g.drawRoundRect(30, 10, 0, 10, 0, 0);\n+        g.drawRoundRect(40, 10, 0, 10, 4, 4);\n+        g.drawRoundRect(50, 10, 1, 10, 0, 0);\n+        g.drawRoundRect(60, 10, 1, 10, 4, 4);\n+        g.drawOval(70, 10, 0, 10);\n+        g.drawOval(80, 10, 1, 10);\n+        p = new Polygon();\n+        p.addPoint(90, 10);\n+        p.addPoint(90, 20);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        p = new Polygon();\n+        p.addPoint(100, 10);\n+        p.addPoint(100, 20);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        ((Graphics2D) g).draw(new Line2D.Double(110, 10, 110, 20));\n+        gp = new GeneralPath();\n+        gp.moveTo(120, 10);\n+        gp.lineTo(120, 15);\n+        gp.moveTo(120, 20);\n+        gp.lineTo(120, 25);\n+        ((Graphics2D) g).draw(gp);\n+\n+        \/\/ Polygon limit tests\n+        p = new Polygon();\n+        trypoly(g, p);\n+        p.addPoint(110, 10);\n+        trypoly(g, p);\n+\n+        \/\/ Reposition for oval tests\n+        g.translate(0, 20);\n+\n+        for (int i = 0, xy = 8; i < 11; i++) {\n+            g.setColor(Color.green);\n+            g.fillRect(xy, 5, i, 1);\n+            g.fillRect(5, xy, 1, i);\n+            g.setColor(Color.blue);\n+            g.fillOval(xy, 8, i, 1);\n+            g.fillOval(8, xy, 1, i);\n+            xy += i + 2;\n+        }\n+\n+        g.translate(10, 10);\n+        for (int i = 0, xy = 9; i < 6; i++) {\n+            g.setColor(Color.green);\n+            g.fillRect(xy, 5, i, 2);\n+            g.fillRect(5, xy, 2, i);\n+            g.setColor(Color.blue);\n+            g.fillOval(xy, 8, i, 2);\n+            g.fillOval(8, xy, 2, i);\n+            xy += i + 2;\n+        }\n+    }\n+\n+    public static void trypoly(Graphics g, Polygon p) {\n+        g.drawPolygon(p);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        g.fillPolygon(p);\n+        g.fillPolygon(p.xpoints, p.ypoints, p.npoints);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(150, 150);\n+    }\n+\n+    public static Frame createFrame() {\n+        Frame f = new Frame();\n+        SmallPrimitives sp = new SmallPrimitives();\n+        sp.setLocation(0, 0);\n+        f.add(sp);\n+        f.setUndecorated(true);\n+        f.pack();\n+        return f;\n+    }\n+\n+    public static void main(String argv[]) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Small Primitives Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(60)\n+                .testUI(SmallPrimitives::createFrame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/SmallPrimitives.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4844952\n+ * @summary test large text draws properly to the screen\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TallText\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class TallText extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            There should be a window called \"Tall Text Test\" that contains text \"ABCDEFGHIJ\".\n+            Test should be properly displayed: no missing letters\n+            and all letters fit within the frame without overlapping.\n+            If all letters are properly displayed press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public TallText() {\n+        setSize(800, 200);\n+        setTitle(\"Tall Text Test\");\n+    }\n+\n+    public void paint(Graphics g) {\n+        Font font = new Font(\"dialog\", Font.PLAIN, 99);\n+        g.setFont(font);\n+        g.setColor(Color.black);\n+        g.drawString(\"ABCDEFGHIJ\", 10, 150);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Tall Text Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(TallText::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/TallText.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.image.VolatileImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4505650\n+ * @summary Check that you can render solid text after doing XOR mode\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TextAfterXor\n+ *\/\n+\n+public class TextAfterXor extends Panel {\n+    public static final int TESTW = 300;\n+    public static final int TESTH = 100;\n+    static String INSTRUCTIONS = \"\"\"\n+            In the window called \"Text After XOR Test\" there should be two\n+            composite components, at the bottom of each component the green text\n+            \"Test passes if this is green!\" should be visible.\n+\n+            On the top component this text should be green on all platforms.\n+            On the bottom component it is possible that on non-Windows\n+            platforms text can be of other color or not visible at all.\n+            That does not constitute a problem.\n+\n+            So if platform is Windows and green text appears twice or on any\n+            other platform green text appears at least once press \"Pass\",\n+            otherwise press \"Fail\".\n+            \"\"\";\n+\n+    VolatileImage vimg;\n+\n+    public void paint(Graphics g) {\n+        render(g);\n+        g.drawString(\"(Drawing to screen)\", 10, 60);\n+        if (vimg == null) {\n+            vimg = createVolatileImage(TESTW, TESTH);\n+        }\n+        do {\n+            vimg.validate(null);\n+            Graphics g2 = vimg.getGraphics();\n+            render(g2);\n+            String not = vimg.getCapabilities().isAccelerated() ? \"\" : \"not \";\n+            g2.drawString(\"Image was \" + not + \"accelerated\", 10, 55);\n+            g2.drawString(\"(only matters on Windows)\", 10, 65);\n+            g2.dispose();\n+            g.drawImage(vimg, 0, TESTH, null);\n+        } while (vimg.contentsLost());\n+    }\n+\n+    public void render(Graphics g) {\n+        g.setColor(Color.black);\n+        g.fillRect(0, 0, TESTW, TESTH);\n+        g.setColor(Color.white);\n+        g.fillRect(5, 5, TESTW-10, TESTH-10);\n+\n+        g.setColor(Color.black);\n+        g.drawString(\"Test only passes if green string appears\", 10, 20);\n+\n+        g.setColor(Color.white);\n+        g.setXORMode(Color.blue);\n+        g.drawRect(30, 30, 10, 10);\n+        g.setPaintMode();\n+        g.setColor(Color.green);\n+\n+        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                                          RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.drawString(\"Test passes if this is green!\", 10, 80);\n+\n+        g.setColor(Color.black);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(TESTW, TESTH*2);\n+    }\n+\n+    public static Frame createFrame() {\n+        Frame f = new Frame(\"Text After XOR Test\");\n+        f.add(new TextAfterXor());\n+        f.pack();\n+        return f;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Text After XOR Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(TextAfterXor::createFrame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/TextAfterXor.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4238932\n+ * @summary JTextField in gridBagLayout does not properly set MinimumSize\n+ * @key headful\n+ * @run main ComponentShortage\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+\n+public class ComponentShortage {\n+    static final int WIDTH_REDUCTION = 50;\n+    static JFrame frame;\n+    static JTextField jtf;\n+    static volatile Dimension size;\n+    static volatile Dimension fSize;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                frame.setLayout(new GridBagLayout());\n+                GridBagConstraints gBC = new GridBagConstraints();\n+\n+                gBC.gridx = 1;\n+                gBC.gridy = 0;\n+                gBC.gridwidth = 1;\n+                gBC.gridheight = 1;\n+                gBC.weightx = 1.0;\n+                gBC.weighty = 0.0;\n+                gBC.fill = GridBagConstraints.NONE;\n+                gBC.anchor = GridBagConstraints.NORTHWEST;\n+                jtf = new JTextField(16);\n+                frame.add(jtf, gBC);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                size = jtf.getSize();\n+            });\n+            System.out.println(\"TextField size before Frame's width reduction : \" + size);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setSize(frame.getSize().width - WIDTH_REDUCTION, frame.getSize().height);\n+            });\n+            frame.repaint();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                size = jtf.getSize();\n+                fSize = frame.getSize();\n+            });\n+            System.out.println(\"TextField size after Frame's width reduction : \" + size);\n+\n+            if (size.width < fSize.width - WIDTH_REDUCTION) {\n+                throw new RuntimeException(\"Width of JTextField is too small to be visible.\");\n+            }\n+            System.out.println(\"Test passed.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/ComponentShortage.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -130,1 +130,1 @@\n-}\/\/ class AutomaticAppletTest\n+}\n","filename":"test\/jdk\/java\/awt\/List\/FirstItemRemoveTest\/FirstItemRemoveTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-}\/\/ class AutomaticAppletTest\n+}\n","filename":"test\/jdk\/java\/awt\/List\/FocusEmptyListTest\/FocusEmptyListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4290684\n+ * @summary Tests that cursor on the scrollbar of the list is set to default.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListScrollbarCursorTest\n+ *\/\n+\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Panel;\n+\n+public class ListScrollbarCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. You see the list in the middle of the panel.\n+                   This list has two scrollbars.\n+                2. The cursor should have a shape of hand over the main area\n+                   and a shape of arrow over scrollbars.\n+                3. Move the mouse cursor to either horizontal or vertical scrollbar.\n+                4. Press PASS if you see the default arrow cursor else press FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ListScrollbarCursorTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"List Scrollbar Cursor Test\");\n+        Panel panel = new Panel();\n+        List list = new List(3);\n+        list.add(\"List item with a very long name\" +\n+                \"(just to make the horizontal scrollbar visible)\");\n+        list.add(\"Item 2\");\n+        list.add(\"Item 3\");\n+        list.setCursor(new Cursor(Cursor.HAND_CURSOR));\n+        panel.add(list);\n+        frame.add(panel);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListScrollbarCursorTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4096445\n+ * @summary Test to verify List Scollbar appears\/disappears automatically\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListScrollbarTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Event;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.List;\n+\n+public class ListScrollbarTest extends Frame {\n+    static final int ITEMS = 10;\n+    List ltList;\n+    List rtList;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. There are two lists added to the Frame separated by\n+                   a column of buttons\n+                2. Double click on any item(s) on the left list, you would see\n+                   a '*' added at the end of the item\n+                3. Keep double clicking on the same item till the length of the\n+                   item exceeds the width of the list\n+                4. Now, if you don't get the horizontal scrollbar on\n+                   the left list click FAIL.\n+                5. If you get horizontal scrollbar, select the item\n+                   (that you double clicked) and press the '>' button\n+                   to move the item to the right list.\n+                6. If horizontal scroll bar appears on the right list\n+                   as well as disappears from the left list [only if both\n+                   happen] proceed with step 8 else click FAIL\n+                7. Now move the same item to the left list, by pressing\n+                     '<' button\n+                8. If the horizontal scrollbar appears on the left list\n+                   and disappears from the right list[only if both happen]\n+                   click PASS else click FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ListScrollbarTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public ListScrollbarTest() {\n+        super(\"List scroll bar test\");\n+        GridBagLayout gbl = new GridBagLayout();\n+        ltList = new List(ITEMS, true);\n+        rtList = new List(0, true);\n+        setLayout(gbl);\n+        add(ltList, 0, 0, 1, 5, 1.0, 1.0);\n+        add(rtList, 2, 0, 1, 5, 1.0, 1.0);\n+        add(new Button(\">\"), 1, 0, 1, 1, 0, 1.0);\n+        add(new Button(\">>\"), 1, 1, 1, 1, 0, 1.0);\n+        add(new Button(\"<\"), 1, 2, 1, 1, 0, 1.0);\n+        add(new Button(\"<<\"), 1, 3, 1, 1, 0, 1.0);\n+        add(new Button(\"!\"), 1, 4, 1, 1, 0, 1.0);\n+\n+        for (int i = 0; i < ITEMS; i++) {\n+            ltList.addItem(\"item \" + i);\n+        }\n+        setSize(220, 250);\n+    }\n+\n+    void add(Component comp, int x, int y, int w, int h, double weightx, double weighty) {\n+        GridBagLayout gbl = (GridBagLayout) getLayout();\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.fill = GridBagConstraints.BOTH;\n+        c.gridx = x;\n+        c.gridy = y;\n+        c.gridwidth = w;\n+        c.gridheight = h;\n+        c.weightx = weightx;\n+        c.weighty = weighty;\n+        add(comp);\n+        gbl.setConstraints(comp, c);\n+    }\n+\n+    void reverseSelections(List l) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            if (l.isSelected(i)) {\n+                l.deselect(i);\n+            } else {\n+                l.select(i);\n+            }\n+        }\n+    }\n+\n+    void deselectAll(List l) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            l.deselect(i);\n+        }\n+    }\n+\n+    void replaceItem(List l, String item) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            if (l.getItem(i).equals(item)) {\n+                l.replaceItem(item + \"*\", i);\n+            }\n+        }\n+    }\n+\n+    void move(List l1, List l2, boolean all) {\n+\n+        \/\/ if all the items are to be moved\n+        if (all) {\n+            for (int i = 0; i < l1.countItems(); i++) {\n+                l2.addItem(l1.getItem(i));\n+            }\n+            l1.delItems(0, l1.countItems() - 1);\n+        } else { \/\/ else move the selected items\n+            String[] items = l1.getSelectedItems();\n+            int[] itemIndexes = l1.getSelectedIndexes();\n+\n+            deselectAll(l2);\n+            for (int i = 0; i < items.length; i++) {\n+                l2.addItem(items[i]);\n+                l2.select(l2.countItems() - 1);\n+                if (i == 0) {\n+                    l2.makeVisible(l2.countItems() - 1);\n+                }\n+            }\n+            for (int i = itemIndexes.length - 1; i >= 0; i--) {\n+                l1.delItem(itemIndexes[i]);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean action(Event evt, Object arg) {\n+        if (\">\".equals(arg)) {\n+            move(ltList, rtList, false);\n+        } else if (\">>\".equals(arg)) {\n+            move(ltList, rtList, true);\n+        } else if (\"<\".equals(arg)) {\n+            move(rtList, ltList, false);\n+        } else if (\"<<\".equals(arg)) {\n+            move(rtList, ltList, true);\n+        } else if (\"!\".equals(arg)) {\n+            if (ltList.getSelectedItems().length > 0) {\n+                reverseSelections(ltList);\n+            } else if (rtList.getSelectedItems().length > 0) {\n+                reverseSelections(rtList);\n+            }\n+        } else if (evt.target == rtList || evt.target == ltList) {\n+            replaceItem((List) evt.target, (String) arg);\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean handleEvent(Event evt) {\n+        if (evt.id == Event.LIST_SELECT\n+                || evt.id == Event.LIST_DESELECT) {\n+            if (evt.target == ltList) {\n+                deselectAll(rtList);\n+            } else if (evt.target == rtList) {\n+                deselectAll(ltList);\n+            }\n+            return true;\n+        }\n+        return super.handleEvent(evt);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListScrollbarTest.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4209511\n+ * @summary Regression test DestroyMenuTest.java Failing\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DestroyMenuTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Scrollbar;\n+import java.awt.TextField;\n+\n+public class DestroyMenuTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Create many windows by randomly clicking 'Show Menu Test 1',\n+                  'Show Menu Test 2', 'Show Menu Test 3' buttons.\n+                2. Ignore the contents of the windows.\n+                   Go to the windows created and select menu items inside the menus.\n+                3. Close the windows by selecting menu item File--> Quit.\n+                4. Do the above menu item selections as quickly as possible.\n+                   If the program crashes when you select File--> Quit,\n+                   then the test FAILS. Otherwise the test is PASS.\n+                      \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(38)\n+                .testUI(DestroyMenuTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame f = new Frame(\"Destroy Menu Test\");\n+        Button launchButton = new Button(\"Show Menu Test 1...\");\n+        Button launchButton2 = new Button(\"Show Menu Test 2...\");\n+        Button launchButton3 = new Button(\"Show Menu Test 3...\");\n+        f.setLayout(new FlowLayout());\n+        f.add(launchButton);\n+        f.add(launchButton2);\n+        f.add(launchButton3);\n+\n+        launchButton.addActionListener(event -> {\n+            MenuTest frame = new MenuTest(\"Menu Test 1\");\n+            frame.setBounds(300, 300, 300, 300);\n+            frame.setVisible(true);\n+        });\n+\n+        launchButton2.addActionListener(event -> {\n+            MenuTest frame = new MenuTest(\"Menu Test 2\");\n+\n+            Button closeButton = new Button(\"Close\");\n+\n+            Panel X = new Panel();\n+            X.setLayout(new BorderLayout());\n+\n+            Panel topPanel = new Panel();\n+            Panel bottomPanel = new Panel();\n+\n+            bottomPanel.add(closeButton);\n+\n+            Scrollbar vScrollbar = new Scrollbar(Scrollbar.VERTICAL);\n+            Scrollbar hScrollbar = new Scrollbar(Scrollbar.HORIZONTAL);\n+            hScrollbar.setValues(hScrollbar.getValue(), 0, 0, 50);\n+            vScrollbar.setValues(vScrollbar.getValue(), 0, 0, 50);\n+            topPanel.setLayout(new BorderLayout());\n+            topPanel.add(vScrollbar, BorderLayout.EAST);\n+            topPanel.add(hScrollbar, BorderLayout.SOUTH);\n+\n+            X.add(topPanel, BorderLayout.NORTH);\n+            X.add(bottomPanel, BorderLayout.SOUTH);\n+            frame.add(X, BorderLayout.SOUTH);\n+            frame.setBounds(350, 350, 300, 250);\n+            frame.setVisible(true);\n+        });\n+\n+        launchButton3.addActionListener(event -> {\n+            MenuTest frame = new MenuTest(\"Menu Test 3\");\n+            frame.setBounds(400, 400, 300, 300);\n+\n+            mySimpleCanvas clock = new mySimpleCanvas();\n+            frame.add(clock, BorderLayout.CENTER);\n+\n+            Panel p = new Panel();\n+            Button closeButton = new Button(\"Close\");\n+            p.add(closeButton);\n+\n+            p.add(new Label(\"Label\"));\n+            TextField textField = new TextField(8);\n+            p.add(textField);\n+            f.add(p, BorderLayout.EAST);\n+\n+            frame.add(p, BorderLayout.SOUTH);\n+            frame.setVisible(true);\n+        });\n+        f.pack();\n+        return f;\n+    }\n+\n+    static class mySimpleCanvas extends Canvas {\n+        @Override\n+        public void paint(Graphics g) {\n+            g.drawOval(0, 0, 100, 100);\n+            g.drawOval(2, 2, 100, 100);\n+            g.drawOval(4, 4, 100, 100);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/DestroyMenuTest\/DestroyMenuTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Canvas;\n+import java.awt.CardLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+\n+public class MenuTest extends Frame {\n+    private MenuItem quitItem;\n+    private final Panel cards;\n+    private final CardLayout layout;\n+\n+    public MenuTest(String s) {\n+        super(s);\n+        MenuBar mbar = new MenuBar();\n+        createMenus(mbar);\n+        setMenuBar(mbar);\n+\n+        cards = new Panel();\n+        layout = new CardLayout();\n+        cards.setLayout(layout);\n+\n+        cards.add(new MyPanelOne(\"Options\"), \"Options\");\n+        cards.add(new MyRectCanvas(), \"MyRectCanvas\");\n+        cards.add(new MycircleCanvas(), \"MyCircleCanvas\");\n+\n+        add(cards, \"Center\");\n+    }\n+\n+    public void createMenus(MenuBar mbar) {\n+        mbar.add(createFileMenu());\n+        mbar.add(createEditMenu());\n+        mbar.add(createOptionMenu1());\n+        mbar.add(createOptionMenu2());\n+        mbar.add(createOptionMenu3());\n+        mbar.add(createOptionMenu4());\n+    }\n+\n+    private Menu createFileMenu() {\n+        Menu fileMenu = new Menu(\"File\");\n+        fileMenu.add(quitItem = new MenuItem(\"Quit\"));\n+\n+        quitItem.addActionListener(event -> {\n+            MenuItem item = (MenuItem) event.getSource();\n+            if (item == quitItem) {\n+                dispose();\n+            }\n+        });\n+        return fileMenu;\n+    }\n+\n+    private Menu createEditMenu() {\n+        Menu editMenu = new Menu(\"Edit\");\n+\n+        editMenu.add(\"Cut\");\n+        editMenu.add(\"Copy\");\n+        editMenu.add(\"Paste\");\n+        editMenu.addSeparator();\n+        editMenu.add(\"Select all\");\n+        editMenu.addSeparator();\n+        editMenu.add(\"Find\");\n+        editMenu.add(\"Find again\");\n+\n+        return editMenu;\n+    }\n+\n+    private Menu createOptionMenu1() {\n+        Menu optionMenu1 = new Menu(\"Option1\");\n+        MenuItem item1, item2, item3;\n+        optionMenu1.add(item1 = new MenuItem(\"Item1\"));\n+        optionMenu1.add(item2 = new MenuItem(\"Item2\"));\n+        optionMenu1.add(item3 = new MenuItem(\"Item3\"));\n+\n+        item1.addActionListener(event -> {\n+            MenuItem mItem = (MenuItem) event.getSource();\n+            if (mItem == item1) {\n+                layout.show(cards, \"Options\");\n+            }\n+        });\n+        item2.addActionListener(event -> {\n+            MenuItem mItem = (MenuItem) event.getSource();\n+            if (mItem == item2) {\n+                layout.show(cards, \"MyRectCanvas\");\n+            }\n+        });\n+        item3.addActionListener(event -> {\n+            MenuItem mItem = (MenuItem) event.getSource();\n+            if (mItem == item3) {\n+                layout.show(cards, \"MyCircleCanvas\");\n+            }\n+        });\n+        return optionMenu1;\n+    }\n+\n+    private Menu createOptionMenu2() {\n+        Menu optionMenu2 = new Menu(\"Option2\");\n+\n+        optionMenu2.add(\"Item1\");\n+        optionMenu2.add(\"Item2\");\n+\n+        return optionMenu2;\n+    }\n+\n+    private Menu createOptionMenu3() {\n+        Menu optionMenu3 = new Menu(\"Option3\");\n+\n+        optionMenu3.add(\"Item1\");\n+        optionMenu3.add(\"Item2\");\n+        optionMenu3.add(\"Item3\");\n+        optionMenu3.add(\"Item4\");\n+\n+        return optionMenu3;\n+    }\n+\n+    private Menu createOptionMenu4() {\n+        Menu optionMenu4 = new Menu(\"Option3\");\n+\n+        optionMenu4.add(\"Item1\");\n+        optionMenu4.add(\"Item2\");\n+        optionMenu4.add(\"Item3\");\n+\n+        return optionMenu4;\n+    }\n+}\n+\n+class MyRectCanvas extends Canvas {\n+    @Override\n+    public void paint(Graphics g) {\n+        g.drawRect(0, 0, 100, 100);\n+    }\n+}\n+\n+class MyPanelOne extends Panel {\n+    MyPanelOne(String name) {\n+        add(new Label(name + \" panel goes here\"));\n+    }\n+}\n+\n+class MycircleCanvas extends Canvas {\n+    @Override\n+    public void paint(Graphics g) {\n+        g.drawOval(0, 0, 100, 100);\n+        g.drawOval(2, 2, 100, 100);\n+        g.drawOval(4, 4, 100, 100);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/DestroyMenuTest\/MenuTest.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094620\n+ * @summary MenuItem.enableEvents does not work\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuActionEventTest\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.event.ActionEvent;\n+\n+public class MenuActionEventTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click on the Menu and then on Menuitem on the frame.\n+                2. If you find the following message being printed in\n+                   the test log area:,\n+                   _MenuItem: action event\",\n+                   click PASS, else click FAIL\"\n+                 \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(MenuActionEventTest::initialize)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame f = new Frame(\"Menu Action Event Test\");\n+        f.setLayout(new BorderLayout());\n+        f.setMenuBar(new MenuBar());\n+        Menu m = new _Menu(\"Menu\");\n+        MenuBar mb = f.getMenuBar();\n+        mb.add(m);\n+        MenuItem mi = new _MenuItem(\"Menuitem\");\n+        m.add(mi);\n+        f.setBounds(204, 152, 396, 300);\n+        return f;\n+    }\n+\n+    static class _Menu extends Menu {\n+        public _Menu(String text) {\n+            super(text);\n+            enableEvents(AWTEvent.ACTION_EVENT_MASK);\n+        }\n+\n+        @Override\n+        protected void processActionEvent(ActionEvent e) {\n+            PassFailJFrame.log(\"_Menu: action event\");\n+            super.processActionEvent(e);\n+        }\n+    }\n+\n+    static class _MenuItem extends MenuItem {\n+        public _MenuItem(String text) {\n+            super(text);\n+            enableEvents(AWTEvent.ACTION_EVENT_MASK);\n+        }\n+\n+        @Override\n+        protected void processActionEvent(ActionEvent e) {\n+            PassFailJFrame.log(\"_MenuItem: action event\");\n+            super.processActionEvent(e);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/MenuActionEventTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4410477\n+ * @summary Tests that menu does not crash during simultaneous drawing\n+ *          and removal of items.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuAddRemoveCrash\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+\n+public class MenuAddRemoveCrash {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Move and resize the frame.\n+                2. If the test crashes the test is FAILED.\n+                   Otherwise it is PASSED.\n+                    \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(MenuAddRemoveCrash::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        final TestGui myTestGui = new TestGui();\n+        Thread test = new Thread() {\n+            public void run() {\n+                while (!Thread.interrupted()) {\n+                    myTestGui.changeMenuItems();\n+                }\n+            }\n+        };\n+        test.setDaemon(true);\n+        test.start();\n+        return myTestGui;\n+    }\n+}\n+\n+class TestGui extends Frame {\n+    Menu myMenu1;\n+    Menu myMenu2;\n+\n+    public TestGui() {\n+        this.setTitle(\"Try to resize this frame!\");\n+\n+        this.setSize(300, 300);\n+        this.setVisible(true);\n+\n+        MenuBar myMenuBar = new MenuBar();\n+        myMenu1 = new Menu(\"DemoMenu1\");\n+        myMenu2 = new Menu(\"DemoMenu2\");\n+\n+        myMenuBar.add(myMenu1);\n+        myMenuBar.add(myMenu2);\n+\n+        this.setMenuBar(myMenuBar);\n+    }\n+\n+    public void changeMenuItems() {\n+        myMenu1.removeAll();\n+\n+        for (int i = 0; i < 10; i++) {\n+            MenuItem myMenuItem1 = new MenuItem(\"DemoMenuItem\" + i);\n+            myMenu1.add(myMenuItem1);\n+        }\n+        try {\n+            Thread.sleep(100);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed :\" + e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/MenuAddRemoveCrash.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5046491 6423258\n+ * @summary CheckboxMenuItem: menu text is missing from test frame\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuVisibilityTest\n+*\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+\n+public class MenuVisibilityTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Press on a MenuBar with a long name.\n+                2. Select \"First item\" in an opened menu.\n+                   If you see that \"First menu item was pressed\" in\n+                   the test log area, press PASS\n+                   Otherwise press FAIL\"\n+                 \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(MenuVisibilityTest::initialize)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Menu visibility test\");\n+        String menuTitle = \"I_have_never_seen_so_long_Menu_Title_\" +\n+                \"!_ehe-eha-ehu-ehi_ugu-gu!!!_;)_BANG_BANG...\";\n+        MenuBar menubar = new MenuBar();\n+        Menu menu = new Menu(menuTitle);\n+        MenuItem menuItem = new MenuItem(\"First item\");\n+        menuItem.addActionListener(e ->\n+                PassFailJFrame.log(\"First menu item was pressed.\"));\n+        menu.add(menuItem);\n+        menubar.add(menu);\n+        frame.setMenuBar(menubar);\n+        frame.setSize(100, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/MenuVisibilityTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6267182\n+ * @summary Menu is not visible after showing and disposing a file dialog.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuZOrderTest\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MenuZOrderTest {\n+    static class Listener implements ActionListener {\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            Frame f = new Frame(\"Menu Z order test frame\");\n+            f.setBounds(200, 200, 200, 200);\n+            f.setVisible(true);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Choose Menu 1 --> Menu Item 1 several times.\n+                2. If menu window is shown correctly and each click\n+                   creates new frame - press PASS.\n+                3. If menu window is obscured by frame - press FAIL.\n+                    \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(MenuZOrderTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame mf = new Frame(\"Menu Z order test\");\n+        Listener l = new Listener();\n+        MenuBar mb = new MenuBar();\n+        Menu m1 = new Menu(\"Menu 1\");\n+        MenuItem mi1 = new MenuItem(\"Menu Item 1\");\n+\n+        mf.setSize(200, 200);\n+        mi1.addActionListener(l);\n+        m1.add(mi1);\n+        mb.add(m1);\n+        mf.setMenuBar(mb);\n+        mf.setVisible(true);\n+        return mf;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/MenuZOrderTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5024051\n+ * @summary Tests if menu is repainted in enabling\/disabling it and\n+ *          changing its label while it is visible, either on MenuBar\n+ *          or in other Menu. Menu items are covered as well\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual OnFlyRepaintMenuTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+\n+public class OnFlyRepaintMenuTest {\n+    static boolean menuEnabled = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click the button 'Change state' and wait for 5 secs.\n+                2. If menu is repainted correctly after its setLabel()\n+                   and setEnabled() methods called test PASSED, else FAILED.\n+                   (During a 5 secs delay you may select the menu to see\n+                   the effect for menu items and submenu)\n+                         \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(OnFlyRepaintMenuTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame f = new Frame(\"OnFly Menu Repaint Test\");\n+\n+        f.setSize(200, 100);\n+\n+        MenuBar mb = new MenuBar();\n+        Menu menu = new Menu(\"Menu\");\n+        MenuItem menuItem = new MenuItem(\"MenuItem\");\n+        menu.add(menuItem);\n+        Menu submenu = new Menu(\"SubMenu\");\n+        MenuItem submenuItem = new MenuItem(\"SubmenuItem\");\n+        submenu.add(submenuItem);\n+        CheckboxMenuItem checkMenuItem = new CheckboxMenuItem(\"CheckboxmenuItem\");\n+        checkMenuItem.setState(true);\n+        menu.add(checkMenuItem);\n+        menu.add(submenu);\n+        mb.add(menu);\n+        f.setMenuBar(mb);\n+\n+        Button b = new Button(\"Change state\");\n+        b.addActionListener(ev -> new Thread(() -> {\n+            try {\n+                Thread.sleep(5000);\n+            } catch (Exception e) {\n+            }\n+            menuEnabled = !menuEnabled;\n+            String label = menuEnabled ? \"Enabled\" : \"Disabled\";\n+            menu.setLabel(label);\n+            menuItem.setLabel(label);\n+            submenu.setLabel(label);\n+            submenuItem.setLabel(label);\n+            checkMenuItem.setLabel(label);\n+            checkMenuItem.setEnabled(menuEnabled);\n+            checkMenuItem.setState(menuEnabled);\n+            submenuItem.setEnabled(menuEnabled);\n+            submenu.setEnabled(menuEnabled);\n+            menuItem.setEnabled(menuEnabled);\n+            menu.setEnabled(menuEnabled);\n+        }).start());\n+        f.add(b);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/OnFlyRepaintMenuTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4039387\n+ * @summary Checks that calling Frame.remove() within hide() doesn't\n+ *          cause SEGV\n+ * @key headful\n+ * @run main RmInHideTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseEvent;\n+\n+public class RmInHideTest {\n+    static volatile Point point;\n+    static RmInHideTestFrame frame;\n+    static volatile Dimension dimension;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new RmInHideTestFrame();\n+                frame.setSize(200, 200);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                point = frame.getButtonLocation();\n+                dimension = frame.getButtonDimension();\n+            });\n+            robot.mouseMove(point.x + dimension.width \/ 2, point.y + dimension.height \/ 2);\n+            robot.mousePress(MouseEvent.BUTTON2_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON2_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            System.out.println(\"Test pass\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class RmInHideTestFrame extends Frame implements ActionListener {\n+        MenuBar menubar = null;\n+        Button b;\n+\n+        public RmInHideTestFrame() {\n+            super(\"RmInHideTest\");\n+            b = new Button(\"Hide\");\n+            b.setActionCommand(\"hide\");\n+            b.addActionListener(this);\n+            add(\"Center\", b);\n+\n+            MenuBar bar = new MenuBar();\n+\n+            Menu menu = new Menu(\"Test1\", true);\n+            menu.add(new MenuItem(\"Test1A\"));\n+            menu.add(new MenuItem(\"Test1B\"));\n+            menu.add(new MenuItem(\"Test1C\"));\n+            bar.add(menu);\n+\n+            menu = new Menu(\"Test2\", true);\n+            menu.add(new MenuItem(\"Test2A\"));\n+            menu.add(new MenuItem(\"Test2B\"));\n+            menu.add(new MenuItem(\"Test2C\"));\n+            bar.add(menu);\n+            setMenuBar(bar);\n+        }\n+\n+        @Override\n+        public Dimension minimumSize() {\n+            return new Dimension(200, 200);\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            String cmd = e.getActionCommand();\n+            if (cmd.equals(\"hide\")) {\n+                hide();\n+                try {\n+                    Thread.currentThread().sleep(2000);\n+                } catch (InterruptedException ex) {\n+                    \/\/ do nothing\n+                }\n+                show();\n+            }\n+        }\n+\n+        @Override\n+        public void hide() {\n+            menubar = getMenuBar();\n+            if (menubar != null) {\n+                remove(menubar);\n+            }\n+            super.hide();\n+        }\n+\n+\n+        @Override\n+        public void show() {\n+            if (menubar != null) {\n+                setMenuBar(menubar);\n+            }\n+            super.show();\n+        }\n+\n+        public Point getButtonLocation() {\n+            return b.getLocationOnScreen();\n+        }\n+\n+        public Dimension getButtonDimension() {\n+            return b.getSize();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/RmInHideTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4203208\n+ * @summary setShortcut method does not display proper text on Menu component\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetShortCutTest\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+\n+import static java.awt.event.KeyEvent.VK_META;\n+import static java.awt.event.KeyEvent.VK_SHIFT;\n+\n+public class SetShortCutTest {\n+    public static void main(String[] args) throws Exception {\n+        boolean isMac = System.getProperty(\"os.name\").startsWith(\"Mac\");\n+        String shortcut = \"Ctrl+Shift+\";\n+        if (isMac) {\n+            shortcut = KeyEvent.getKeyText(VK_SHIFT) + \"+\" + KeyEvent.getKeyText(VK_META);\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                1. Select menuitem 'Stuff -> Second' once to remove 'File -> First'.\n+                2. Select menuitem 'Stuff -> Second' again to add 'File -> First'.\n+                3. If menuitem 'File -> First' reads First \"\"\" + shortcut + \"\"\"\n+                       'C', press PASS. Otherwise press FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(SetShortCutTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        return new TestMenuShortCut();\n+    }\n+\n+    static class TestMenuShortCut extends Frame implements ActionListener {\n+        Menu menu1;\n+        MenuItem item1;\n+        MenuItem item2;\n+        boolean beenHere;\n+\n+        public TestMenuShortCut() {\n+            setTitle(\"Set ShortCut test\");\n+            beenHere = false;\n+            MenuBar mTopMenu = buildMenu();\n+            setSize(300, 300);\n+            this.setMenuBar(mTopMenu);\n+        }\n+\n+        public MenuBar buildMenu() {\n+            MenuBar bar;\n+            bar = new MenuBar();\n+            menu1 = new Menu(\"File\");\n+            item1 = new MenuItem(\"First\");\n+            menu1.add(item1);\n+            item1.setShortcut(new MenuShortcut(KeyEvent.VK_C, true));\n+            bar.add(menu1);\n+\n+            \/\/ Stuff menu\n+            item2 = new MenuItem(\"Second\");\n+            Menu menu2 = new Menu(\"Stuff\");\n+            menu2.add(item2);\n+            item2.setShortcut(new MenuShortcut(KeyEvent.VK_C, false));\n+            bar.add(menu2);\n+\n+            item1.addActionListener(this);\n+            item2.addActionListener(this);\n+            return bar;\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent event) {\n+            if (event.getSource() == item1) {\n+                Frame temp = new Frame(\"Accelerator key is working for 'First'\");\n+                temp.setSize(300, 50);\n+                temp.setVisible(true);\n+            }\n+\n+            \/\/ Click on the \"Stuff\" menu to remove the \"first\" menu item\n+            else if (event.getSource() == item2) {\n+                \/\/ If the item has not been removed from the menu,\n+                \/\/ then remove \"First\" from the \"File\" menu\n+                if (beenHere == false) {\n+                    item1.removeActionListener(this);\n+                    menu1.remove(item1);\n+                    beenHere = true;\n+                } else {\n+                    item1 = new MenuItem(\"First\");\n+                    menu1.add(item1);\n+                    item1.addActionListener(this);\n+                    item1.setShortcut(new MenuShortcut(KeyEvent.VK_C, true));\n+                    beenHere = false;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Menu\/SetShortCutTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+\/*\n+ * @test\n+ * @bug 6271779\n+ * @summary This test shows and hides a modal dialog several times without destroying its\n+ *          peer. Without the fix this may lead to application (or even WM) hang.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveTransientForsTest\n+ *\/\n+\n+public class AddRemoveTransientForsTest {\n+\n+    private static Dialog d1;\n+    private static Dialog d2;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                When the test starts, a frame is shown with a button 'Show Dialog D1'.\n+\n+                1. Press the button 'Show Dialog D1' to show a modal dialog D1 with a button\n+                'Show dialog D2'.\n+\n+                2. Press the button 'Show dialog D2' to show another modal dialog D2 with a button\n+                'Close'.\n+\n+                3. Press the button 'Close' to close dialog D2.\n+\n+                4. Repeat steps 2 and 3 several times (at least 3-4 times).\n+\n+                If the application is not hung, press Pass.\n+\n+                NOTE: all the modal dialogs must be closed before pressing Pass button.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(AddRemoveTransientForsTest::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame init() {\n+        Frame f = new Frame(\"AddRemoveTransientForsTest Frame\");\n+        Button b = new Button(\"Show dialog D1\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d1.setVisible(true);\n+            }\n+        });\n+        f.add(b);\n+        f.setSize(200, 100);\n+\n+        WindowListener wl = new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e)\n+            {\n+                e.getWindow().dispose();\n+            }\n+        };\n+\n+        d1 = new Dialog(f, \"D1\", true);\n+        d1.setBounds(200, 200, 200, 100);\n+        d1.addWindowListener(wl);\n+        Button b1 = new Button(\"Show dialog D2\");\n+        b1.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d2.setVisible(true);\n+            }\n+        });\n+        d1.add(b1);\n+\n+        d2 = new Dialog(d1, \"D2\", true);\n+        d2.setBounds(300, 300, 200, 100);\n+        Button b2 = new Button(\"Close\");\n+        b2.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d2.setVisible(false);\n+            }\n+        });\n+        d2.add(b2);\n+\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/AddRemoveTransientForsTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+\/*\n+ * @test\n+ * @bug 6278150\n+ * @key headful\n+ * @summary Initially modal blocked window causes modal dialog to lose focus\n+ * @run main DialogLosesFocusTest\n+ *\/\n+\n+public class DialogLosesFocusTest {\n+    private static Frame parent;\n+    private static Dialog dialog;\n+    private static Frame blocked;\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createAndShowUI();\n+\n+            sleepForMsecs(10000);\n+\n+            if (failed) {\n+               throw new RuntimeException(\"Test Failed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (parent != null) {\n+                    parent.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+                if (blocked != null) {\n+                    blocked.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createAndShowUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            parent = new Frame(\"Parent frame\");\n+            parent.setBounds(0, 0, 300, 100);\n+            parent.setVisible(true);\n+        });\n+\n+        sleepForMsecs(1000);\n+\n+        EventQueue.invokeLater(() -> {\n+            dialog = new Dialog(parent, \"Modal dialog\", Dialog.ModalityType.APPLICATION_MODAL);\n+            dialog.setBounds(100, 120, 300, 100);\n+            dialog.setVisible(true);\n+        });\n+\n+        sleepForMsecs(1000);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            blocked = new Frame(\"Blocked frame\");\n+            blocked.setBounds(200, 240, 300, 100);\n+            blocked.addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowActivated(WindowEvent we) {\n+                    if (dialog.isVisible()) {\n+                        failed = true;\n+                    }\n+                }\n+            });\n+            blocked.setVisible(true);\n+        });\n+    }\n+\n+    private static void sleepForMsecs(int t) {\n+        try {\n+            Thread.sleep(t);\n+        } catch (Exception z) {}\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/DialogLosesFocusTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.util.List;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 6393608\n+ * @summary Tests that toBack\/toFront methods works correctly for native dialogs\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NativeDialogToFrontBackTest\n+ *\/\n+\n+public class NativeDialogToFrontBackTest {\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                When the test starts two frames appear: 'Control' and 'Blocked'\n+                    1. Click on the 'Show file dialog' button\n+                    2. Drag the file dialog so it partially overlaps the 'Blocked' frame\n+                    3. 'Blocked' frame must be below the file dialog, if not - press Fail\n+                    3. Click on the 'Blocked to front' button\n+                    4. 'Blocked' frame must still be below the file dialog, if not - press Fail\n+                    5. Close the file dialog\n+                    6. Repeat steps 2 to 4 with print and page dialogs using the corresponding button\n+                    7. If 'Blocked' frame is always below File\/Print\/Page dialog, press Pass\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(NativeDialogToFrontBackTest::init)\n+                .positionTestUI(WindowLayouts::rightOneColumn)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Frame> init() {\n+        Frame blocked = new Frame(\"Blocked\");\n+        blocked.setSize(200, 200);\n+\n+        Frame control = new Frame(\"Control\");\n+        control.setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);\n+        control.setLayout(new FlowLayout());\n+\n+        Button showFileDialog = new Button(\"Show file dialog\");\n+        showFileDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                new FileDialog(control, \"File dialog\").setVisible(true);\n+            }\n+        });\n+        control.add(showFileDialog);\n+\n+        Button showPrintDialog = new Button(\"Show print dialog\");\n+        showPrintDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                PrinterJob.getPrinterJob().printDialog();\n+            }\n+        });\n+        control.add(showPrintDialog);\n+\n+        Button showPageDialog = new Button(\"Show page dialog\");\n+        showPageDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                PrinterJob.getPrinterJob().pageDialog(new PageFormat());\n+            }\n+        });\n+        control.add(showPageDialog);\n+\n+        Button blockedToFront = new Button(\"Blocked to front\");\n+        blockedToFront.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                blocked.toFront();\n+            }\n+        });\n+        control.add(blockedToFront);\n+\n+        control.setSize(200, 200);\n+        return List.of(control, blocked);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/NativeDialogToFrontBackTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @summary Component.getMousePosition() does not work in an applet on MacOS\n+ * @summary Component.getMousePosition() does not work in some cases on MacOS\n","filename":"test\/jdk\/java\/awt\/Mouse\/GetMousePositionTest\/GetMousePositionWithOverlay.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @summary Component.getMousePosition() does not work in an applet on MacOS\n+ * @summary Component.getMousePosition() does not work in some cases on MacOS\n@@ -51,1 +51,1 @@\n- * @summary Component.getMousePosition() does not work in an applet on MacOS\n+ * @summary Component.getMousePosition() does not work in some cases on MacOS\n","filename":"test\/jdk\/java\/awt\/Mouse\/GetMousePositionTest\/GetMousePositionWithPopup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.WindowConstants;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4368500\n+ * @key multimon\n+ * @summary Dialog needs a constructor with GraphicsConfiguration\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogTest\n+ *\/\n+\n+public class DialogTest {\n+    static GraphicsDevice[] gds;\n+\n+    private static Frame f;\n+    private static Frame dummyFrame = new Frame();\n+    private static Dialog dummyDialog = new Dialog(dummyFrame);\n+\n+    public static void main(String[] args) throws Exception {\n+        gds = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+        if (gds.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                This test tests the multiscreen functionality of Dialogs and JDialogs.\n+                You should see the message \"X screens detected\", where X\n+                is the number of screens on your system. If X is incorrect, press Fail.\n+\n+                In the test window, there are a list of buttons representing each\n+                type of dialog for each screen.\n+                If there aren't buttons for every screen in your system, press Fail.\n+\n+                Press each button, and the indicated type of dialog should appear\n+                on the indicated screen.\n+                Modal dialogs should not allow to click on the Instructions or\n+                DialogTest windows.\n+\n+                The buttons turn yellow once they have been pressed, to keep track\n+                of test progress.\n+\n+                If all Dialogs appear correctly, press Pass.\n+                If Dialogs appear on the wrong screen or don't behave in\n+                proper modality, press Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea(5)\n+                .testUI(DialogTest::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame init() {\n+        PassFailJFrame.log(gds.length + \" screens detected.\");\n+        f = new Frame(\"DialogTest UI\");\n+        f.setSize(400, 400);\n+        MyScrollPane sp = new MyScrollPane();\n+\n+        Panel p = new Panel();\n+        p.setLayout(new GridLayout(0, 1));\n+\n+        for (int i = 0; i < gds.length; i++) {\n+            Button btn;\n+\n+            \/\/screen # , modal, frame-owned, swing\n+            btn = new MyButton(new DialogInfo(i, false, false, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, false, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, true, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, true, false));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, false, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, false, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, false, true, true));\n+            p.add(btn);\n+\n+            btn = new MyButton(new DialogInfo(i, true, true, true));\n+            p.add(btn);\n+\n+        }\n+        sp.add(p);\n+        f.add(sp);\n+        return f;\n+    }\n+\n+    static class MyScrollPane extends ScrollPane {\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return f.getSize();\n+        }\n+    }\n+\n+    static class MyButton extends Button {\n+        public MyButton(DialogInfo info) {\n+            setLabel(info.toString());\n+            addActionListener(new PutupDialog(info));\n+        }\n+    }\n+\n+    static class PutupDialog implements ActionListener {\n+        DialogInfo info;\n+\n+        public PutupDialog(DialogInfo info) {\n+            this.info = info;\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            ((Button) (e.getSource())).setBackground(Color.yellow);\n+            Dialog d = info.createDialog();\n+            d.show();\n+        }\n+    }\n+\n+    static class DialogInfo {\n+        int num;\n+        boolean modal;\n+        boolean frameOwned;\n+        boolean swing;\n+\n+        public DialogInfo(int num, boolean modal, boolean frameOwned, boolean swing) {\n+            this.num = num;\n+            this.modal = modal;\n+            this.frameOwned = frameOwned;\n+            this.swing = swing;\n+        }\n+\n+        public Dialog createDialog() {\n+            GraphicsConfiguration gc = gds[num].getDefaultConfiguration();\n+\n+            Dialog d;\n+\n+            if (swing) {\n+                if (frameOwned) {\n+                    d = new JDialog(dummyFrame, toString(), modal, gc);\n+                } else {\n+                    d = new JDialog(dummyDialog, toString(), modal, gc);\n+                }\n+\n+                ((JDialog) d).setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n+                if (modal) {\n+                    ((JDialog) d).getContentPane().add(new JLabel(\"Check that I am modal!\"));\n+                }\n+            } else {\n+                if (frameOwned) {\n+                    d = new Dialog(dummyFrame, toString(), modal, gc);\n+                } else {\n+                    d = new Dialog(dummyDialog, toString(), modal, gc);\n+                }\n+\n+                d.addWindowListener(new WindowAdapter() {\n+                    public void windowClosing(WindowEvent e) {\n+                        e.getComponent().hide();\n+                    }\n+                });\n+                if (modal) {\n+                    d.add(new Label(\"Check that I am modal!\"));\n+                }\n+            }\n+\n+            d.setLocation(new Point((int) (gc.getBounds().getX() + 20)\n+                          , (int) (gc.getBounds().getY() + 20)));\n+            d.setSize(300, 100);\n+\n+            return d;\n+        }\n+\n+        public String toString() {\n+            return \"Screen \" + num + (frameOwned ? \" Frame-owned\" : \" Dialog-owned\")\n+                    + (modal ? \" modal \" : \" non-modal \")\n+                    + (swing ? \"JDialog\" : \"Dialog\");\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/DialogTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.GridLayout;\n+import java.awt.Rectangle;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4356756\n+ * @key multimon\n+ * @summary Return all screen devices for physical and virtual display devices\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual FillThisScreen\n+ *\/\n+\n+public class FillThisScreen {\n+    private static Frame f;\n+    private static Button b;\n+    private static Rectangle oldSize;\n+    private static boolean fillmode = true;\n+    static GraphicsDevice[] gs;\n+\n+    public static void main(String[] args) throws Exception {\n+        gs = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+        if (gs.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                This test is for testing the bounds of a multimonitor system.\n+                You will see a Frame with several buttons: one marked 'Fill\n+                This Screen' and an additional button for each display on your system.\n+\n+                First, drag the Frame onto each display and click the\n+                'Fill This Screen' button.\n+\n+                The Frame should resize to take up the entire display area\n+                of the screen it is on, and the button text changes to say,\n+                'Get Smaller'.\n+\n+                Click the button again to restore the Frame.\n+\n+                Next, use the 'Move to screen' buttons to move the Frame to\n+                each display and again click the 'Fill This Screen' button.\n+\n+                If the number of 'Move to Screen' buttons is not equals to\n+                the number of screens on your system, the test fails.\n+\n+                If the Frame always correctly resizes to take up ONLY the\n+                entire screen it is on (and not a different screen, or all\n+                screens), the test passes else it fails.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(FillThisScreen::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame init() {\n+        Button tempBtn;\n+\n+        f = new Frame(\"Drag Me Around\");\n+        f.setLayout(new GridLayout(0, 1));\n+\n+        b = new Button(\"Fill This Screen\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (fillmode) {\n+                    oldSize = f.getBounds();\n+                    Rectangle r = f.getGraphicsConfiguration().getBounds();\n+                    f.setBounds(r);\n+                    b.setLabel(\"Get Smaller\");\n+                } else {\n+                    f.setBounds(oldSize);\n+                    b.setLabel(\"Fill This Screen\");\n+                }\n+                fillmode = !fillmode;\n+            }\n+        });\n+        f.add(b);\n+\n+        for (int i = 0; i < gs.length; i++) {\n+            tempBtn = new Button(\"Move to screen:\" + i);\n+            tempBtn.addActionListener(new WinMover(i));\n+            f.add(tempBtn);\n+        }\n+        f.setSize(300, 100);\n+        return f;\n+    }\n+\n+    private static class WinMover implements ActionListener {\n+        int scrNum;\n+\n+        public WinMover(int scrNum) {\n+            this.scrNum = scrNum;\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            Rectangle newBounds = gs[scrNum].getDefaultConfiguration().getBounds();\n+            f.setLocation(newBounds.x + newBounds.width \/ 2,\n+                    newBounds.y + newBounds.height \/ 2);\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/FillThisScreen.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4805862\n+ * @key multimon\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests IM candidate window is positioned correctly for the\n+ *          text components inside a window in multiscreen configurations, if\n+ *          this window has negative coordinates\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @run main\/manual IMCandidateWindowTest\n+ *\/\n+\n+public class IMCandidateWindowTest {\n+    static GraphicsConfiguration gc;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsDevice[] gds = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                               .getScreenDevices();\n+        if (gds.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system\" +\n+                                       \" - test skipped\");\n+        }\n+\n+        GraphicsDevice gd = null;\n+\n+        for (int i = 0; i < gds.length; i++) {\n+            gc = gds[i].getDefaultConfiguration();\n+            if ((gc.getBounds().x < 0) || (gc.getBounds().y < 0)) {\n+                gd = gds[i];\n+                break;\n+            }\n+        }\n+\n+        if (gd == null) {\n+            \/\/ no screens with negative coords\n+            throw new SkippedException(\"No screens with negative coords - test skipped\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                This test is for windows\n+                Test requirements: installed support for asian languages\n+                Chinese (PRC) w\/ Chinese QuanPing input method.\n+                Multiscreen environment where one of the monitors has negative coords\n+                Go to the text field in the opened Frame. Switch to Chinese language and\n+                start typing \"ka\".\n+                Note, that IM helper window is appeared.\n+                If this window is appeared near the text field, press PASS button.\n+                If this window is appeared at the edge of the screen or on another\n+                screen, press FAIL button\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(IMCandidateWindowTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createUI() {\n+        Rectangle b = gc.getBounds();\n+\n+        JFrame f = new JFrame(\"Frame\", gc);\n+        f.setBounds(b.x + b.width \/ 2 - 150, b.y + b.height \/ 2 - 100, 300, 200);\n+        f.getContentPane().setLayout(new FlowLayout());\n+        JTextField tf = new JTextField(10);\n+        f.getContentPane().add(tf);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/IMCandidateWindowTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -37,1 +37,0 @@\n-import java.applet.*;\n","filename":"test\/jdk\/java\/awt\/PrintJob\/PageSetupDlgBlockingTest\/PageSetupDlgBlockingTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4152524\n+ * @summary ScrollPane AS_NEEDED always places scrollbars first time component\n+ *          is laid out\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneAsNeededTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.ScrollPane;\n+\n+public class ScrollPaneAsNeededTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. You will see a frame titled 'ScrollPane as needed'\n+                   of minimum possible size in the middle of the screen.\n+                2. If for the first resize of frame(using mouse) to\n+                   a very big size(may be, to half the area of the screen)\n+                   the scrollbars(any - horizontal, vertical or both)\n+                   appear, click FAIL else, click PASS.\n+                                           \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneAsNeededTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame f = new Frame(\"ScrollPane as needed\");\n+        f.setLayout(new BorderLayout());\n+        ScrollPane sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+        sp.add(new Button(\"TEST\"));\n+        f.add(\"Center\", sp);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneAsNeededTest.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4100671\n+ * @summary removing and adding back ScrollPane component does not work\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneComponentTest\n+ *\/\n+\n+import java.awt.Adjustable;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ScrollPaneComponentTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Notice the scrollbars (horizontal and vertical)\n+                   in the Frame titled 'ScrollPane Component Test'\n+                2. Click the button labeled 'Remove and add back\n+                   ScrollPane Contents'\n+                3. If the Scrollbars (horizontal or vertical or both)\n+                   disappears in the Frame, then press FAIL, else press PASS.\n+                                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneComponentTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame fr = new Frame(\"ScrollPane Component Test\");\n+        fr.setLayout(new BorderLayout());\n+        ScrollTester test = new ScrollTester();\n+\n+        fr.add(test);\n+        fr.pack();\n+        fr.setSize(200, 200);\n+\n+        Adjustable vadj = test.pane.getVAdjustable();\n+        Adjustable hadj = test.pane.getHAdjustable();\n+        vadj.setUnitIncrement(5);\n+        hadj.setUnitIncrement(5);\n+        return fr;\n+    }\n+}\n+\n+class Box extends Component {\n+    public Dimension getPreferredSize() {\n+        System.out.println(\"asked for size\");\n+        return new Dimension(300, 300);\n+    }\n+\n+    public void paint(Graphics gr) {\n+        super.paint(gr);\n+        gr.setColor(Color.red);\n+        gr.drawLine(5, 5, 295, 5);\n+        gr.drawLine(295, 5, 295, 295);\n+        gr.drawLine(295, 295, 5, 295);\n+        gr.drawLine(5, 295, 5, 5);\n+        System.out.println(\"Painted!!\");\n+    }\n+}\n+\n+class ScrollTester extends Panel {\n+    public ScrollPane pane;\n+    private final Box child;\n+\n+    class Handler implements ActionListener {\n+        public void actionPerformed(ActionEvent e) {\n+            System.out.println(\"Removing scrollable component\");\n+            pane.remove(child);\n+            System.out.println(\"Adding back scrollable component\");\n+            pane.add(child);\n+            System.out.println(\"Done Adding back scrollable component\");\n+        }\n+    }\n+\n+    public ScrollTester() {\n+        pane = new ScrollPane();\n+        pane.setSize(200, 200);\n+        child = new Box();\n+        pane.add(child);\n+        setLayout(new BorderLayout());\n+        Button changeScrollContents = new Button(\"Remove and add back ScrollPane Contents\");\n+        changeScrollContents.setBackground(Color.red);\n+        changeScrollContents.addActionListener(new Handler());\n+        add(\"North\", changeScrollContents);\n+        add(\"Center\", pane);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneComponentTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4075484\n+ * @summary Tests that events of different types are generated for the\n+ *          corresponding scroll actions.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneEventType\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.ScrollPane;\n+import java.awt.event.AdjustmentListener;\n+\n+public class ScrollPaneEventType {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. This test verifies that when user performs some scrolling operation on\n+                   ScrollPane the correct AdjustmentEvent is being generated.\n+                2. To test this, press on:\n+                   - scrollbar's arrows and verify that UNIT event is generated,\n+                   - scrollbar's grey area(non-thumb) and verify that BLOCK event is\n+                    generated,\n+                   - drag scrollbar's thumb and verify that TRACK event is generated\n+                   If you see correct events for both scroll bars then test is PASSED.\n+                   Otherwise it is FAILED.\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneEventType::initialize)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"ScrollPane event type test\");\n+        frame.setLayout(new BorderLayout());\n+        ScrollPane pane = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+        pane.add(new Button(\"press\") {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(1000, 1000);\n+            }\n+        });\n+\n+        AdjustmentListener listener = e -> PassFailJFrame.log(e.toString());\n+        pane.getHAdjustable().addAdjustmentListener(listener);\n+        pane.getVAdjustable().addAdjustmentListener(listener);\n+        frame.add(pane);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneEventType.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,215 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4073822\n+ * @summary ScrollPane repaints entire window when scrolling fast\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneFlicker\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollBar;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+\n+public class ScrollPaneFlicker {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                When scrolling a ScrollPane fast(i.e. holding the down\/up arrow\n+                down for a while), the ScrollPane would inexplicably refresh\n+                the entire window.\n+\n+                1. Select a type of ScrollPane content from the content menu.\n+                2. Scroll the content using the up\/down\/left\/right arrows on\n+                   the scroll bar. Try scrolling the entire content area using\n+                   the scroll arrows-- from top to bottom and left to right.\n+                3. Verify that the entire pane does not refresh when scrolling\n+                   - only the newly exposed areas should be repainting.\n+                4. Repeat for all content types.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneFlicker::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        return new FlickerFrame();\n+    }\n+}\n+\n+class FlickerFrame extends Frame {\n+    ScrollPane pane;\n+\n+    public FlickerFrame() {\n+        super(\"ScrollPane Flicker Test\");\n+        TextPanel textPanel = new TextPanel();\n+        GradientPanel gradientPanel = new GradientPanel();\n+        ComponentPanel componentPanel = new ComponentPanel();\n+        SwingPanel swingPanel = new SwingPanel();\n+        MenuBar menubar = new MenuBar();\n+        Menu testMenu = new Menu(\"Test Options\");\n+\n+        pane = new ScrollPane();\n+        pane.getHAdjustable().setUnitIncrement(8);\n+        pane.getVAdjustable().setUnitIncrement(16);\n+        pane.add(textPanel);\n+        add(pane);\n+\n+        testMenu.add(makeContentItem(\"Text Lines\", textPanel));\n+        testMenu.add(makeContentItem(\"Gradient Fill\", gradientPanel));\n+        testMenu.add(makeContentItem(\"AWT Components\", componentPanel));\n+        testMenu.add(makeContentItem(\"Swing Components\", swingPanel));\n+        menubar.add(testMenu);\n+\n+        setMenuBar(menubar);\n+        setSize(400, 300);\n+    }\n+\n+    public MenuItem makeContentItem(String title, final Component content) {\n+        MenuItem menuItem = new MenuItem(title);\n+        menuItem.addActionListener(\n+                ev -> {\n+                    pane.add(content);\n+                    pane.validate();\n+                }\n+        );\n+        return menuItem;\n+    }\n+}\n+\n+class GradientPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int width = getSize().width;\n+        int height = getSize().height;\n+        int step = 8;\n+\n+        for (x = 0; x < width; x += step) {\n+            for (y = 0; y < height; y += step) {\n+                int red = (255 * y) \/ height;\n+                int green = (255 * x * y) \/ (width * height);\n+                int blue = (255 * x) \/ width;\n+                Rectangle bounds = g.getClipBounds();\n+                Rectangle fbounds = new Rectangle(x, y, x + step, y + step);\n+                if (bounds.intersects(fbounds)) {\n+                    Color color = new Color(red, green, blue);\n+                    g.setColor(color);\n+                    g.fillRect(x, y, x + step, y + step);\n+                }\n+            }\n+        }\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 1000);\n+    }\n+}\n+\n+class TextPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        Font font = new Font(\"SanSerif\", Font.ITALIC, 12);\n+\n+        g.setFont(font);\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int width = getWidth();\n+        int height = getHeight();\n+        int step = 16;\n+\n+        for (x = y = 0; y < height; y += step) {\n+            Rectangle bounds = g.getClipBounds();\n+            Rectangle tbounds = new Rectangle(x, y - 16, x + width, y);\n+            if (bounds.intersects(tbounds)) {\n+                g.drawString(y + \" : The quick brown fox jumps over the lazy dog. \" +\n+                        \"The rain in Spain falls mainly on the plain.\", x, y);\n+            }\n+        }\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(640, 1000);\n+    }\n+}\n+\n+class ComponentPanel extends Panel {\n+    ComponentPanel() {\n+        add(new Label(\"Label\"));\n+        add(new Button(\"Button\"));\n+        add(new Checkbox(\"Checkbox\"));\n+        Choice c = new Choice();\n+        c.add(\"choice\");\n+        java.awt.List l = new java.awt.List();\n+        l.add(\"list\");\n+        add(new Scrollbar());\n+        add(new TextField(\"TextField\"));\n+        add(new TextArea(\"TextArea\"));\n+        add(new Panel());\n+        add(new Canvas());\n+    }\n+}\n+\n+class SwingPanel extends JPanel {\n+    SwingPanel() {\n+        add(new JLabel(\"JLabel\"));\n+        add(new JButton(\"JButton\"));\n+        add(new JCheckBox(\"JCheckBox\"));\n+        JComboBox c = new JComboBox();\n+        JList l = new JList();\n+        add(new JScrollBar());\n+        add(new JTextField(\"This is a JTextField with some text in it to make it longer.\"));\n+        add(new JTextArea(\"This is a JTextArea with some text in it to make it longer.\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneFlicker.java","additions":215,"deletions":0,"binary":false,"changes":215,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Licensed Materials - Property of IBM\n+ *\n+ * (C) Copyright IBM Corporation 1998  All Rights Reserved.\n+ *\n+ * US Government Users Restricted Rights - Use, duplication or disclosure\n+ * restricted by GSA ADP Schedule Contract with IBM Corp.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4160721\n+ * @summary AWT ScrollPane painting problem\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPanePaint\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.List;\n+\n+public class ScrollPanePaint {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Press the button marked \"Toggle\" a few times.\n+                2. The contents of the frame should alternate between\n+                    a red panel and a scroll pane containing a green panel.\n+                    If this does not happen (specifically, if the scroll\n+                    pane does not consistently contain a green panel),\n+                    then the test has FAILED.\n+                \"\"\";\n+        ScrollPaintTest scrollPaintTest = new ScrollPaintTest();\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(scrollPaintTest::initialize)\n+                .positionTestUI(WindowLayouts::rightOneColumn)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class ScrollPaintTest implements ActionListener {\n+        static Frame f;\n+        static boolean showScroll;\n+\n+        public List<Frame> initialize() {\n+            Frame frame = new Frame(\"Scrollpane paint test\");\n+            frame.setLayout(new BorderLayout());\n+            f = new Frame(\"Scrollpane paint test\");\n+            f.setLayout(new GridLayout(0, 1));\n+\n+            Button b = new Button(\"Toggle\");\n+            b.addActionListener(this);\n+\n+            frame.add(b, BorderLayout.CENTER);\n+            frame.pack();\n+\n+            showScroll = false;\n+            actionPerformed(null);\n+            return List.of(frame, f);\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            Container c;\n+            if (!showScroll) {\n+                c = (Container) new TestPanel(new Dimension(100, 100));\n+                c.setBackground(Color.red);\n+            } else {\n+                c = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+                Panel p = new TestPanel(new Dimension(20, 20));\n+                p.setBackground(Color.green);\n+                c.add(p);\n+            }\n+\n+            f.removeAll();\n+            f.add(\"Center\", c);\n+            f.pack();\n+            showScroll = !showScroll;\n+        }\n+    }\n+\n+    private static class TestPanel extends Panel {\n+        Dimension dim;\n+\n+        TestPanel(Dimension d) {\n+            dim = d;\n+        }\n+\n+        public Dimension getMinimumSize() {\n+            return getPreferredSize();\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return dim;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPanePaint.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4117404\n+ * @summary Tests that child component is always at least large as scrollpane\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneSize\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Insets;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.util.List;\n+\n+public class ScrollPaneSize {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Three frames representing the three different ScrollPane scrollbar\n+                   policies will appear.\n+                2. Verify that when you resize the windows, the child component in the\n+                   scrollpane always expands to fill the scrollpane. The scrollpane\n+                   background is colored red to show any improper bleed through.\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(ScrollPaneSize::initialize)\n+                .positionTestUIRightColumn()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static List<Frame> initialize() {\n+        return List.of(new ScrollFrame(\"SCROLLBARS_AS_NEEDED\", ScrollPane.SCROLLBARS_AS_NEEDED),\n+                new ScrollFrame(\"SCROLLBARS_ALWAYS\", ScrollPane.SCROLLBARS_ALWAYS),\n+                new ScrollFrame(\"SCROLLBARS_NEVER\", ScrollPane.SCROLLBARS_NEVER));\n+    }\n+}\n+\n+class ScrollFrame extends Frame {\n+    ScrollFrame(String title, int policy) {\n+        super(title);\n+        setLayout(new GridLayout(1, 1));\n+        ScrollPane c = new ScrollPane(policy);\n+        c.setBackground(Color.red);\n+        Panel panel = new TestPanel();\n+        c.add(panel);\n+        add(c);\n+        pack();\n+        Dimension size = panel.getPreferredSize();\n+        Insets insets = getInsets();\n+        setSize(size.width + 45 + insets.right + insets.left,\n+                size.height + 20 + insets.top + insets.bottom);\n+    }\n+}\n+\n+class TestPanel extends Panel {\n+    TestPanel() {\n+        setLayout(new FlowLayout());\n+        setBackground(Color.white);\n+\n+        Button b1, b2, b3;\n+        add(b1 = new Button(\"Button1\"));\n+        add(b2 = new Button(\"Button2\"));\n+        add(b3 = new Button(\"Button3\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneSize.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094581\n+ * @summary ScrollPane does not refresh properly when child is just smaller than viewport\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPanechildViewportTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class ScrollPanechildViewportTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click \"Slightly Large\" and ensure scrollbars are VISIBLE\n+                2. Click \"Slightly Small\" and ensure there are NO scrollbars\n+                3. Click \"Smaller\" and ensure there are NO scrollbars\n+                4. If everything is ok, click PASS, else click FAIL.\n+                                          \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPanechildViewportTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        return new Test();\n+    }\n+}\n+\n+class Test extends Frame implements ActionListener {\n+    Button b1, b2, b3;\n+    MyPanel p;\n+    int state; \/\/ 0 = slightly large, 1 = slightly smaller, 2 = smaller\n+\n+    public Test() {\n+        ScrollPane sp = new ScrollPane();\n+        p = new MyPanel();\n+        p.setBackground(Color.yellow);\n+        state = 1;\n+        sp.add(p);\n+        add(sp, \"Center\");\n+\n+        Panel p1 = new Panel();\n+        b1 = new Button(\"Slightly Large\");\n+        b1.addActionListener(this);\n+        p1.add(b1);\n+        b2 = new Button(\"Slightly Small\");\n+        b2.addActionListener(this);\n+        p1.add(b2);\n+        b3 = new Button(\"Smaller\");\n+        b3.addActionListener(this);\n+        p1.add(b3);\n+\n+        add(p1, \"South\");\n+\n+        setSize(400, 200);\n+        \/\/added to test to move test frame away from instructions\n+        setLocation(0, 350);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        Object source = e.getSource();\n+\n+        \/\/ set size to small and re-validate the panel to get correct size of\n+        \/\/ scrollpane viewport without scrollbars\n+\n+        state = 2;\n+        p.invalidate();\n+        validate();\n+\n+        Dimension pd = ((ScrollPane) p.getParent()).getViewportSize();\n+\n+        if (source.equals(b1)) {\n+            p.setBackground(Color.green);\n+            state = 0;\n+        } else if (source.equals(b2)) {\n+            p.setBackground(Color.yellow);\n+            state = 1;\n+        } else if (source.equals(b3)) {\n+            p.setBackground(Color.red);\n+            state = 2;\n+        }\n+\n+        p.invalidate();\n+        validate();\n+        System.out.println(\"Panel Size = \" + p.getSize());\n+        System.out.println(\"ScrollPane Viewport Size = \" + pd);\n+        System.out.println(\" \");\n+    }\n+\n+    class MyPanel extends Panel {\n+        public Dimension getPreferredSize() {\n+            Dimension d = null;\n+            Dimension pd = ((ScrollPane) getParent()).getViewportSize();\n+            switch (state) {\n+                case 0 -> {\n+                    d = new Dimension(pd.width + 2, pd.height + 2);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+                case 1 -> {\n+                    d = new Dimension(pd.width - 2, pd.height - 2);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+                case 2 -> {\n+                    d = new Dimension(50, 50);\n+                    System.out.println(\"Preferred size: \" + d);\n+                }\n+            }\n+            return d;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPanechildViewportTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4008152\n+ * @summary ScrollPane position does not return correct values\n+ * @key headful\n+ * @run main ScrollPositionTest\n+ *\/\n+\n+import java.awt.Adjustable;\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.AdjustmentListener;\n+\n+public class ScrollPositionTest {\n+    static Frame frame;\n+    static int i = 0;\n+    static Point p;\n+    static ScrollPane sp;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Scroll Position Test\");\n+                frame.setLayout(new BorderLayout());\n+                frame.setSize(200, 200);\n+                sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+                Canvas canvas = new Canvas();\n+                canvas.setSize(300, 300);\n+                sp.add(canvas);\n+                frame.add(\"Center\", sp);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                Adjustable saH = sp.getHAdjustable();\n+                saH.addAdjustmentListener(new TestAdjustmentListener());\n+            });\n+            for (i = 0; i < 1000; i++) {\n+                EventQueue.invokeAndWait(() -> {\n+                    p = new Point(i % 100, i % 100);\n+                    sp.setScrollPosition(p);\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(10);\n+                EventQueue.invokeAndWait(() -> {\n+                    if (!sp.getScrollPosition().equals(p)) {\n+                        throw new RuntimeException(\"Test failed. \" + i + \" : \" +\n+                                \"Expected \" + p + \", but Returned: \" + sp.getScrollPosition());\n+                    }\n+                });\n+            }\n+            System.out.println(\"Test Passed.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static class TestAdjustmentListener implements AdjustmentListener {\n+        public void adjustmentValueChanged(AdjustmentEvent e) {\n+            System.out.println(\"AdjEvent caught:\" + e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094248\n+ * @summary Test initial appearance of SCROLLBARS_AS_NEEDED policy\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollbarsAsNeededTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.ScrollPane;\n+\n+public class ScrollbarsAsNeededTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. A Frame window with a ScrollPane that is\n+                   initially created with the SCROLLBARS_AS_NEEDED policy.\n+                2. If there are no scrollbars around the ScrollPane then\n+                    the test PASS. Otherwise the test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollbarsAsNeededTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"Scrollbar as needed test\");\n+        ScrollPane scrollPane = new ScrollPane() {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                g.drawString(\"ScrollPane\", 10, 50);\n+            }\n+        };\n+        scrollPane.setBackground(Color.WHITE);\n+        frame.setBackground(Color.GRAY);\n+        frame.setSize(200, 200);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(scrollPane);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollbarsAsNeededTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 6497109\n-  @summary Mouse cursor icons for TextArea should be correct in case of hovering or dragging mouse over different subcomponents.\n-  @author Konstantin Voloshin: area=awt.TextArea\n-  @run applet\/manual=yesno HoveringAndDraggingTest.html\n-  -->\n-<head>\n-<title> HoveringAndDraggingTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>HoveringAndDraggingTest<br>Bug ID: 6497109<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"HoveringAndDraggingTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCursorTest\/HoveringAndDraggingTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,15 +24,3 @@\n-\/*\n-  test\n-  @bug 6497109\n-  @summary Mouse cursor icons for TextArea should be correct in case of hovering or dragging mouse over different subcomponents.\n-  @author Konstantin Voloshin: area=awt.TextArea\n-  @run applet\/manual=yesno HoveringAndDraggingTest.html\n-*\/\n-\n-\/**\n- * HoveringAndDraggingTest.java\n- *\n- * summary: Mouse cursor icons for TextArea should be correct in case\n- *   of hovering or dragging mouse over different subcomponents.\n- *\/\n-\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n@@ -40,1 +28,1 @@\n-import java.awt.Panel;\n+import java.awt.GridBagLayout;\n@@ -42,0 +30,1 @@\n+import java.awt.Panel;\n@@ -43,1 +32,1 @@\n-import java.awt.Dialog;\n+import java.util.concurrent.CountDownLatch;\n@@ -45,17 +34,15 @@\n-public class HoveringAndDraggingTest extends java.applet.Applet {\n-    public void start() {\n-        String[] instructions = new String[] {\n-            \"1. Notice components in test window: main-panel, box-for-text,\"\n-                +\" 2 scroll-sliders, and 4 scroll-buttons.\",\n-            \"2. Hover mouse over box-for-text.\"\n-                +\" Make sure, that mouse cursor is TextCursor (a.k.a. \\\"beam\\\").\",\n-            \"3. Hover mouse over each of components (see item 1), except for box-for-text.\"\n-                +\" Make sure, that cursor is DefaultCursor (arrow).\",\n-            \"4. Drag mouse (using any mouse button) from box-for-text to every\"\n-                +\" component in item 1, and also outside application window.\"\n-                +\" Make sure, that cursor remains TextCursor while mouse button is pressed.\",\n-            \"5. Repeat item 4 for each other component in item 1, except for box-for-text,\"\n-                +\" _but_ now make sure that cursor is DefaultCursor.\",\n-            \"6. If cursor behaves as described in items 2-3-4-5, then test passed; otherwise it failed.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n+\/*\n+ * @test\n+ * @bug 6497109\n+ * @summary Mouse cursor icons for TextArea should be correct in case of\n+ *  hovering or dragging mouse over different subcomponents.\n+ * @run main\/manual HoveringAndDraggingTest\n+ *\/\n+\n+public class HoveringAndDraggingTest {\n+    static Frame frame;\n+    static Frame instructionsFrame;\n+    static CountDownLatch countDownLatch;\n+    public static CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n@@ -63,0 +50,11 @@\n+    public static void main(String[] args) throws Exception {\n+        countDownLatch = createCountDownLatch();\n+        EventQueue.invokeAndWait(() -> {\n+            initialize();\n+            showInstructionFrame();\n+        });\n+        countDownLatch.await();\n+        System.out.println(\"Test Pass\");\n+    }\n+\n+    public static void initialize() {\n@@ -64,1 +62,1 @@\n-        panel.setLayout( new GridLayout(3,3) );\n+        panel.setLayout(new GridLayout(3, 3));\n@@ -66,4 +64,4 @@\n-        for( int y=0; y<3; ++y ) {\n-            for( int x=0; x<3; ++x ) {\n-                if( x==1 && y==1 ) {\n-                    panel.add( new TextArea( bigString() ) );\n+        for (int y = 0; y < 3; ++y) {\n+            for (int x = 0; x < 3; ++x) {\n+                if (x == 1 && y == 1) {\n+                    panel.add(new TextArea(bigString()));\n@@ -71,1 +69,1 @@\n-                    panel.add( new Panel() );\n+                    panel.add(new Panel());\n@@ -76,4 +74,57 @@\n-        Frame frame = new Frame( \"TextArea cursor icon test\" );\n-        frame.setSize( 300, 300 );\n-        frame.add( panel );\n-        frame.setVisible( true );\n+        frame = new Frame(\"TextArea cursor icon test\");\n+        frame.setSize(300, 300);\n+        frame.setLocation(450, 400);\n+        frame.add(panel);\n+        frame.setVisible(true);\n+    }\n+\n+    static void showInstructionFrame() {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Notice components in test window: main-panel,box-for-text,\n+                   2 scroll-sliders, and 4 scroll-buttons.\n+                2. Hover mouse over box-for-text.\n+                   Make sure, that mouse cursor is TextCursor(a.k.a. \\\"beam\\\").\n+                3. Hover mouse over each of components (see item 1),\n+                   except for box-for-text.\n+                   Make sure, that cursor is DefaultCursor (arrow).\n+                4. Drag mouse (using any mouse button) from box-for-text to every\"\n+                   component in item 1, and also outside application window.\"\n+                   Make sure, that cursor remains TextCursor\n+                   while mouse button is pressed.\n+                5. Repeat item 4 for each other component in item 1,\n+                   except for box-for-text\n+                   _but_ now make sure that cursor is DefaultCursor.\n+                6. If cursor behaves as described in items 2-3-4-5,\n+                   then test is PASS otherwise it FAILED.\n+                 \"\"\";\n+        TextArea textArea = new TextArea(INSTRUCTIONS, 16, 65, TextArea.SCROLLBARS_NONE);\n+        Button passBtn = new Button(\"PASS\");\n+        Button failBtn = new Button(\"FAIL\");\n+        Panel btnPanel = new Panel(new GridBagLayout());\n+        Panel panel = new Panel(new GridBagLayout());\n+        instructionsFrame = new Frame(\"Test Instructions\");\n+        passBtn.setMaximumSize(new Dimension(100, 30));\n+        failBtn.setMaximumSize(new Dimension(100, 30));\n+        btnPanel.add(passBtn);\n+        btnPanel.add(failBtn);\n+        passBtn.addActionListener(e -> disposeFrames());\n+        failBtn.addActionListener(e -> {\n+            disposeFrames();\n+            throw new RuntimeException(\"Test Failed\");\n+        });\n+        panel.add(textArea);\n+        panel.add(btnPanel);\n+        instructionsFrame.add(panel);\n+        instructionsFrame.pack();\n+        instructionsFrame.setLocation(300, 100);\n+        instructionsFrame.setVisible(true);\n+    }\n+\n+    static void disposeFrames() {\n+        countDownLatch.countDown();\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+        if (instructionsFrame != null) {\n+            instructionsFrame.dispose();\n+        }\n@@ -84,2 +135,2 @@\n-        for( int lines=0; ; ++lines ) {\n-            for( int symbols=0; symbols<100; ++symbols ) {\n+        for (int lines = 0; ; ++lines) {\n+            for (int symbols = 0; symbols < 100; ++symbols) {\n@@ -88,1 +139,1 @@\n-            if( lines<50 ) {\n+            if (lines < 50) {\n@@ -97,138 +148,0 @@\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCursorTest\/HoveringAndDraggingTest.java","additions":99,"deletions":186,"binary":false,"changes":285,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-               'Scroll till the' will appear on the applet \",\n+               'Scroll till the' will appear on the window \",\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextScrollTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4737679 4623376 4501485 4740906 4708221\n+ * @requires (os.family == \"windows\")\n+ * @summary Alt+Left\/right\/up\/down generate characters in JTextArea\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltPlusNumberKeyCombinationsTest\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class AltPlusNumberKeyCombinationsTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                [WINDOWS PLATFORM ONLY]\n+                Please do the following steps for both TextField and TextArea:\n+                1. Hold down ALT and press a NON-NUMPAD right arrow, then release\n+                   ALT key. If any symbol is typed the test failed.\n+                2. Hold down ALT and press one after another the following\n+                   NUMPAD keys: 0, 1, 2, 8. Release ALT key. If the Euro symbol\n+                   is not typed the test failed\n+                3. Hold down ALT and press one after another the following\n+                   NUMPAD keys: 0, 2, 2, 7. Release ALT key. If nothing or\n+                   the blank symbol is typed the test failed\n+                 If all the steps are done successfully the test PASSed,\n+                 else test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame f = new Frame(\"key combination test\");\n+        f.setLayout(new FlowLayout());\n+        TextField tf = new TextField(\"TextField\");\n+        f.add(tf);\n+        TextArea ta = new TextArea(\"TextArea\");\n+        f.add(ta);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/AltPlusNumberKeyCombinationsTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4258667 4405602\n+ * @summary  Make sure TextComponents are grayed out when non-editable\n+ *           if the background color has not been set by client code.\n+ *           Make sure TextComponents are not grayed out when non-editable\n+ *           if the background color has been set by client code.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BackgroundTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class BackgroundTest {\n+    private static final String enableString = \"EnableText\";\n+    private static final String disableString = \"DisableText\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. When the frame appears, it should have a blue background.\n+                2. The first TextField and TextArea will be the default color.\n+                   The second TextField and TextArea will be green.\n+                3. Press the \"DisableText\" button.\n+                   The first TextField and TextArea should change colors to the\n+                   default disabled color.  On Windows, this is usually gray.\n+                   On linux and macos it will match the environment settings.\n+                   If the TextField or the TextArea do not change colors as described,\n+                   the test FAILS.\n+                4. The second TextField and TextArea should still be green.\n+                   If either of them are not green, the test FAILS.\n+                   Press the \"EnableText\" button (same button as before).\n+                   The first TextField and TextArea should return to their\n+                   original colors as described in the first paragraph. If they\n+                   do not, the test FAILS.\n+                5. The second TextField and TextArea should still be green.\n+                   If either of them are not green, the test FAILS.\n+                   Otherwise, the test PASSES.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(BackgroundTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Background Test\");\n+        frame.setLayout(new FlowLayout());\n+        TextField tf = new TextField(30);\n+        TextArea ta = new TextArea(4, 30);\n+        TextField setTf = new TextField(30);\n+        TextArea setTa = new TextArea(4, 30);\n+        Button enableButton = new Button(disableString);\n+\n+        enableButton.setBackground(Color.red);\n+        frame.setSize(500, 250);\n+\n+        frame.setBackground(Color.blue);\n+\n+        tf.setText(\"Background not set - should be default\");\n+        tf.setEditable(true);\n+        frame.add(tf);\n+        ta.setText(\"Background not set - should be default\");\n+        ta.setEditable(true);\n+        frame.add(ta);\n+\n+        setTf.setText(\"Background is set - should be Green\");\n+        setTf.setBackground(Color.green);\n+        setTf.setEditable(true);\n+        frame.add(setTf);\n+        setTa.setText(\"Background is set - should be Green\");\n+        setTa.setBackground(Color.green);\n+        setTa.setEditable(true);\n+        frame.add(setTa);\n+\n+        enableButton.addActionListener(e -> {\n+            boolean currentlyEditable = tf.isEditable();\n+\n+            if (currentlyEditable) {\n+                tf.setEditable(false);\n+                ta.setEditable(false);\n+                setTf.setEditable(false);\n+                setTa.setEditable(false);\n+                enableButton.setLabel(enableString);\n+            } else {\n+                tf.setEditable(true);\n+                ta.setEditable(true);\n+                setTf.setEditable(true);\n+                setTa.setEditable(true);\n+                enableButton.setLabel(disableString);\n+            }\n+        });\n+        frame.add(enableButton);\n+        return frame;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/TextComponent\/BackgroundTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5100806\n+ * @summary TextArea.select(0,0) does not de-select the selected text properly\n+ * @key headful\n+ * @run main CorrectTextComponentSelectionTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class CorrectTextComponentSelectionTest {\n+    static TextField tf = new TextField(\"TextField\");\n+    static TextArea ta = new TextArea(\"TextArea\");\n+    static Robot r;\n+    static Frame frame;\n+    static volatile Color color_center;\n+    static volatile Point loc;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                initialize();\n+            });\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            test(tf);\n+            test(ta);\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void initialize() {\n+        frame = new Frame(\"TextComponent Selection Test\");\n+        frame.setLayout(new BorderLayout());\n+\n+        \/\/ We should place to the text components the long strings in order to\n+        \/\/ cover the components by the selection completely\n+        String sf = \"\";\n+        for (int i = 0; i < 50; i++) {\n+            sf = sf + \" \";\n+        }\n+        tf.setText(sf);\n+        \/\/ We check the color of the text component in order to find out the\n+        \/\/ bug reproducible situation\n+        tf.setForeground(Color.WHITE);\n+        tf.setBackground(Color.WHITE);\n+\n+        String sa = \"\";\n+        for (int i = 0; i < 50; i++) {\n+            for (int j = 0; j < 50; j++) {\n+                sa = sa + \" \";\n+            }\n+            sa = sa + \"\\n\";\n+        }\n+        ta.setText(sa);\n+        ta.setForeground(Color.WHITE);\n+        ta.setBackground(Color.WHITE);\n+\n+        frame.add(tf, \"North\");\n+        frame.add(ta, \"South\");\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test(TextComponent tc) throws Exception {\n+        if (tc instanceof TextField) {\n+            System.out.println(\"TextField testing ...\");\n+        } else if (tc instanceof TextArea) {\n+            System.out.println(\"TextArea testing ...\");\n+        }\n+\n+        r.waitForIdle();\n+        r.delay(100);\n+        EventQueue.invokeAndWait(() -> {\n+            tc.requestFocus();\n+            tc.selectAll();\n+            tc.select(0, 0);\n+        });\n+\n+        r.waitForIdle();\n+        r.delay(100);\n+        EventQueue.invokeAndWait(() -> {\n+            loc = tc.getLocationOnScreen();\n+        });\n+        r.waitForIdle();\n+        r.delay(100);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            color_center = r.getPixelColor(loc.x + tc.getWidth() \/ 2, loc.y + tc.getHeight() \/ 2);\n+        });\n+\n+        System.out.println(\"Color of the text component (CENTER) =\" + color_center);\n+        System.out.println(\"White color=\" + Color.WHITE);\n+\n+        if (color_center.getRGB() != Color.WHITE.getRGB()) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/CorrectTextComponentSelectionTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5042122\n+ * @summary Verifies the TextComponent is grayed out when disabled\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DisableTest\n+ *\/\n+\n+import javax.swing.BoxLayout;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionListener;\n+import java.util.Vector;\n+import java.util.Iterator;\n+\n+public class DisableTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click \"Enable\" and \"Disable\" buttons and verify the text\n+                   components are disabled and enabled correctly.\n+                2. Verify that the disabled text components are grayed\n+                   out and are uneditable.\n+                3. Click PASS or FAIL accordingly.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(DisableTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"TextComponent Disabled test\");\n+        frame.setLayout(new BorderLayout());\n+        frame.setSize(200, 200);\n+        final Vector comps = new Vector();\n+        comps.add(new TextField(\"TextField\"));\n+        TextArea ta = new TextArea(\"TextArea\", 2, 100, TextArea.SCROLLBARS_NONE);\n+        comps.add(ta);\n+        Panel pc = new Panel();\n+        pc.setLayout(new BoxLayout(pc, BoxLayout.Y_AXIS));\n+        Iterator iter = comps.iterator();\n+        while (iter.hasNext()) {\n+            Component c = (Component) iter.next();\n+            c.setEnabled(false);\n+            pc.add(c);\n+        }\n+        frame.add(pc, BorderLayout.CENTER);\n+        Panel p = new Panel();\n+        final Button be = new Button(\"Enable\");\n+        final Button bd = new Button(\"Disable\");\n+        p.add(be);\n+        p.add(bd);\n+        ActionListener al = ev -> {\n+            boolean enable = (ev.getSource() == be);\n+            Iterator iterator = comps.iterator();\n+            while (iterator.hasNext()) {\n+                Component c = (Component) iterator.next();\n+                c.setEnabled(enable);\n+            }\n+        };\n+        be.addActionListener(al);\n+        bd.addActionListener(al);\n+        frame.add(p, BorderLayout.SOUTH);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/DisableTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4035364\n+ * @summary Checks that Caps Lock key works\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ModifiersTest\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.TextArea;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+\n+public class ModifiersTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Type some text in the TextArea in upper and lowercase,\n+                   using the Caps Lock ON\/OFF.\n+                2. If Caps Lock toggles correctly and you are able to type in\n+                     both cases, the test PASS. Else Test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ModifiersTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Modifiers Test\");\n+        frame.setLayout(new GridLayout(1, 1));\n+        frame.addKeyListener(new KeyChecker());\n+        frame.setLayout(new GridLayout(2, 1));\n+        Label label = new Label(\"See if you can type in upper and lowercase using Caps Lock:\");\n+        frame.add(label);\n+        TextArea ta = new TextArea();\n+        frame.add(ta);\n+        ta.addKeyListener(new KeyChecker());\n+        ta.requestFocus();\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+}\n+\n+\/\/ a KeyListener for debugging purposes\n+class KeyChecker extends KeyAdapter {\n+    public void keyPressed(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+\n+    public void keyReleased(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+\n+    public void keyTyped(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/ModifiersTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6287895\n+ * @requires (os.family == \"linux\")\n+ * @summary Test cursor and selected text incorrectly colored in TextField\n+ * @key headful\n+ * @run main SelectionAndCaretColor\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.awt.image.BufferedImage;\n+\n+public class SelectionAndCaretColor {\n+    static TextField tf = new TextField(20);\n+    static TextArea ta = new TextArea(\"\", 1, 20, TextArea.SCROLLBARS_NONE);\n+    static Robot r;\n+    static Frame frame;\n+    static volatile int flips;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            frame = new Frame(\"Selection and Caret color test\");\n+            r = new Robot();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setLayout(new BorderLayout());\n+                tf.setFont(new Font(\"Monospaced\", Font.PLAIN, 15));\n+                ta.setFont(new Font(\"Monospaced\", Font.PLAIN, 15));\n+\n+                frame.add(tf, BorderLayout.NORTH);\n+                frame.add(ta, BorderLayout.SOUTH);\n+                frame.setSize(200, 200);\n+                frame.setVisible(true);\n+            });\n+            r.waitForIdle();\n+            r.delay(1000);\n+            test(tf);\n+            test(ta);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static int countFlips(TextComponent tc) {\n+        int y = tc.getLocationOnScreen().y + tc.getHeight() \/ 2;\n+        int x1 = tc.getLocationOnScreen().x + 5;\n+        int x2 = tc.getLocationOnScreen().x + tc.getWidth() - 5;\n+\n+        int[] fb = {tc.getBackground().getRGB(), tc.getForeground().getRGB()};\n+        int i = 0;\n+        int flips = 0;\n+\n+        BufferedImage img = r.createScreenCapture(new Rectangle(x1, y, x2 - x1, 1));\n+        for (int x = 0; x < x2 - x1; x++) {\n+            int c = img.getRGB(x, 0);\n+            if (c == fb[i]) {\n+                ;\n+            } else if (c == fb[1 - i]) {\n+                flips++;\n+                i = 1 - i;\n+            } else {\n+                throw new RuntimeException(\"Invalid color detected: \" +\n+                        Integer.toString(c, 16) + \" instead of \" +\n+                        Integer.toString(fb[i], 16));\n+            }\n+        }\n+        return flips;\n+    }\n+\n+    private static void test(TextComponent tc) throws Exception {\n+        if (tc instanceof TextField) {\n+            System.out.println(\"TextField testing ...\");\n+        } else if (tc instanceof TextArea) {\n+            System.out.println(\"TextArea testing ...\");\n+        }\n+\n+        \/\/ now passing along the component's vertical center,\n+        \/\/ skipping 5px from both sides,\n+        \/\/ we should see bg - textcolor - bg - selcolor -\n+        \/\/ seltextcolor - selcolor - bg\n+        \/\/ that is bg-fg-bg-fg-bg-fg-bg, 6 flips\n+\n+        EventQueue.invokeAndWait(() -> {\n+            tc.setForeground(Color.green);\n+            tc.setBackground(Color.magenta);\n+\n+            tc.setText(\"  I    I    \");\n+            tc.select(5, 10);\n+            tc.requestFocus();\n+        });\n+        r.waitForIdle();\n+        r.delay(200);\n+        EventQueue.invokeAndWait(() -> {\n+            flips = countFlips(tc);\n+        });\n+        if (flips != 6) {\n+            throw new RuntimeException(\"Invalid number of flips: \"\n+                    + flips + \" instead of 6\");\n+        }\n+        EventQueue.invokeAndWait(() -> {\n+            \/\/ same for caret: spaces in the tc, caret in the middle\n+            \/\/ bg-fg-bg - 2 flips\n+\n+            tc.select(0, 0);\n+            tc.setText(\"            \");\n+            tc.setCaretPosition(5);\n+        });\n+        r.waitForIdle();\n+        r.delay(200);\n+\n+        for (int i = 0; i < 10; i++) {\n+            EventQueue.invokeAndWait(() -> {\n+                flips = countFlips(tc);\n+            });\n+\n+            if (flips == 2) {\n+                break;\n+            }\n+            if (flips == 0) {\n+                continue;\n+            }\n+            throw new RuntimeException(\"Invalid number of flips: \"\n+                    + flips + \" instead of 2\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/SelectionAndCaretColor.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4056231\n+ * @summary Checks that TextComponents don't grab the global CDE selection\n+ *  upon construction if their own selection is null.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SelectionTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class SelectionTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. \"Select some text in another window, then click the button.\",\n+                2. \"If the text in the other window is de-selected, the test FAILS.\",\n+                   \"If the text remains selected, the test PASSES.\"\n+                    \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Selection Test\");\n+        frame.setLayout(new BorderLayout());\n+        Button b = new Button(\"Select some text in another window, then\" +\n+                \" click me\");\n+        b.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                frame.add(new TextField(\"text field test\"));\n+                frame.add(new TextArea(\"text area test\"));\n+            }\n+        });\n+        frame.add(b);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/SelectionTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4129511\n+ * @summary Tests that TextField margins are not exceedingly wide\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TextFieldMargin\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class TextFieldMargin {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Examine the TextField, Label, and TextArea to see\n+                   that the text is vertically aligned along the left\n+                2. If all are aligned along the left, then test PASS,\n+                   else test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(TextFieldMargin::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Frame with a text field & a label\");\n+        frame.setLayout(new GridLayout(5, 1));\n+        TextField text_field = new TextField(\"Left Textfield\");\n+        frame.add(text_field);\n+        Label label = new Label(\"Left Label\");\n+        frame.add(label);\n+        TextArea text_area = new TextArea(\"Left Textfield\");\n+        frame.add(text_area);\n+        frame.setBounds(50, 50, 300, 300);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/TextFieldMargin.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -104,1 +104,0 @@\n-    \/\/We cannot make an instance of the applet without the default constructor\n","filename":"test\/jdk\/java\/awt\/datatransfer\/DragUnicodeBetweenJVMTest\/DragUnicodeBetweenJVMTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,1 +126,0 @@\n-    \/\/We cannot make an instance of the applet without the default constructor\n","filename":"test\/jdk\/java\/awt\/datatransfer\/MissedHtmlAndRtfBug\/MissedHtmlAndRtfBug.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            2. Select attachments from the mail and drag into a red field of applet.\n+            2. Select attachments from the mail and drag into a red field of the window.\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDFileGroupDescriptor\/DnDFileGroupDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-    \/\/We cannot make an instance of the applet without the default constructor\n","filename":"test\/jdk\/java\/awt\/dnd\/FileListBetweenJVMsTest\/FileListBetweenJVMsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-    \/\/We cannot make an instance of the applet without the default constructor\n","filename":"test\/jdk\/java\/awt\/dnd\/URIListBetweenJVMsTest\/URIListBetweenJVMsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-    \/\/We cannot make an instance of the applet without the default constructor\n","filename":"test\/jdk\/java\/awt\/dnd\/URIListToFileListBetweenJVMsTest\/URIListToFileListBetweenJVMsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4176525\n+ * @summary InputEvent.getWhen() returns the wrong event time.\n+ * @key headful\n+ * @run main InputEventTimeTest\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Date;\n+\n+public class InputEventTimeTest extends Frame {\n+    public void initUI() {\n+        setTitle(\"Input Event Time Test\");\n+        enableEvents(AWTEvent.MOUSE_EVENT_MASK);\n+        enableEvents(AWTEvent.KEY_EVENT_MASK);\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public void center(Point point) {\n+        Point loc = getLocationOnScreen();\n+        Dimension size = getSize();\n+        point.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    public void processEvent(AWTEvent e) {\n+        long currentTime;\n+        long eventTime;\n+        long difference;\n+\n+        if (!(e instanceof InputEvent)) {\n+            return;\n+        }\n+\n+        currentTime = (new Date()).getTime();\n+        eventTime = ((InputEvent) e).getWhen();\n+        difference = currentTime - eventTime;\n+\n+        if ((difference > 5000) || (difference < -5000)) {\n+            throw new RuntimeException(\"The difference between current time\" +\n+                    \" and event creation time is \" + difference + \"ms\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        InputEventTimeTest test = new InputEventTimeTest();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Point center = new Point();\n+            EventQueue.invokeAndWait(() -> test.center(center));\n+            robot.mouseMove(center.x, center.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON2_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            for (int i = 0; i < 6; i++) {\n+                robot.keyPress(KeyEvent.VK_A + i);\n+                robot.keyRelease(KeyEvent.VK_A + i);\n+                robot.waitForIdle();\n+            }\n+            for (int i = 0; i < 150; i += 5) {\n+                robot.mouseMove(center.x - i, center.y - i);\n+            }\n+            for (int i = 150; i > 0; i -= 5) {\n+                robot.mouseMove(center.x - i, center.y - i);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/InputEvent\/InputEventTimeTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4122687 4209844\n+ * @summary Characters typed with AltGr have Alt bit set on\n+ *                 KEY_TYPED events\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltGrTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class AltGrTest extends Frame implements KeyListener {\n+    static String INSTRUCTIONS = \"\"\"\n+            Switch to German (Germany) keyboard layout and type\n+            few characters using <AltGr> key.\n+            Note: on windows keyboards without an AltGr key,\n+            you should use Ctrl-Alt to synthesize AltGr.\n+            For example, on German keyboards, `@' is AltGr-Q\n+            `{' is AltGr-7 and '[' is AltGr-8\n+            If you see the corresponding symbols appear in the text field\n+            and there are no entries in log area starting with word \"FAIL:\"\n+            press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public AltGrTest() {\n+        setLayout(new BorderLayout());\n+        TextField entry = new TextField();\n+        entry.addKeyListener(this);\n+        add(entry, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        PassFailJFrame.log(\"----\");\n+        PassFailJFrame.log(\"Got \" + e);\n+\n+        if (e.isControlDown() || e.isAltDown()) {\n+            PassFailJFrame.log(\"FAIL: character typed has following modifiers bits set:\");\n+            PassFailJFrame.log((e.isControlDown() ? \" Control\" : \"\")\n+                             + (e.isAltDown() ? \" Alt\" : \"\"));\n+        }\n+\n+        if (!(e.isAltGraphDown())) {\n+            PassFailJFrame.log(\"FAIL: AltGraph modifier is missing\");\n+        }\n+    }\n+\n+    public void keyPressed(KeyEvent ignore)  {}\n+    public void keyReleased(KeyEvent ignore) {}\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(AltGrTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/AltGrTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4257434\n+ * @summary Ensures that the right results are produced by the\n+ *          carriage return keys.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CRTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class CRTest extends Frame implements KeyListener, ActionListener {\n+    StringBuilder error = new StringBuilder();\n+    AtomicBoolean actionCompleted = new AtomicBoolean(false);\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires keyboard with the numeric keypad (numpad).\n+            If your keyboard does not have numpad press \"Pass\" to skip testing.\n+            Click on the text field in window named \"Check KeyChar values\".\n+            Press Enter on keypad. Then press Return key on a standard keyboard.\n+            Then click on \"Done\" button. Test will pass or fail automatically.\n+            \"\"\";\n+\n+    public CRTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+\n+        tf.addKeyListener(this);\n+        tf.addActionListener(this);\n+\n+        add(tf, BorderLayout.CENTER);\n+\n+        Button done = new Button(\"Done\");\n+        done.addActionListener((event) -> {\n+            checkAndComplete();\n+        });\n+        add(done, BorderLayout.SOUTH);\n+        pack();\n+    }\n+\n+    public void checkAndComplete() {\n+        if (!actionCompleted.get()) {\n+            error.append(\"\\nNo action received!\");\n+        }\n+\n+        if (!error.isEmpty()) {\n+            PassFailJFrame.forceFail(error.toString());\n+        } else {\n+            PassFailJFrame.forcePass();\n+        }\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_ENTER)) {\n+            error.append(\"\\nKeyPressed: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyPressed Test PASSED\");\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_UNDEFINED)) {\n+            error.append(\"\\nKeyTyped: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyTyped Test PASSED\");\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_ENTER)) {\n+            error.append(\"\\nKeyReleased: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyReleased Test PASSED\");\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        PassFailJFrame.log(\"ActionPerformed Test PASSED\");\n+        actionCompleted.set(true);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(CRTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/CRTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4115484 4164672 4167893\n+ * @summary Ensures that KeyEvent has right keyChar for modifier and action keys.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CharUndefinedTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class CharUndefinedTest extends Frame implements KeyListener {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            Click on the text field inside the window named \"Check KeyChar values\".\n+            Of any of the keys mentioned in this list that exist on your keyboard\n+            press each of the listed keys once and also press them in two-key combinations such as\n+            Control-Shift or Alt-Control.\n+            The list of keys is: \"Control, Shift, Meta, Alt, Command, Option\".\n+            After that press all function keys from F1 to F12 once,\n+            Insert, Home, End, PageUp, PageDown and four arrow keys.\n+            Check the log area below. If there are no messages starting with word \"ERROR\"\n+            press \"Pass\" otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public CharUndefinedTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+        tf.requestFocus();\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyPressed: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyTyped: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent e) {\n+        if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {\n+            PassFailJFrame.log(\"ERROR: KeyReleased: keyChar = \" + e.getKeyChar() +\n+                    \" keyCode = \" + e.getKeyCode() + \" \" + e.getKeyText(e.getKeyCode()));\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(CharUndefinedTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/CharUndefinedTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4218892 4191924 4199284\n+ * @summary Unable to enter some chars via european keyboard layout(s)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ExtendedKeysTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ExtendedKeysTest extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires Swiss German input. If the Swiss German input\n+            can not be installed or configured press \"Pass\" to skip testing.\n+            Click on the text area inside the window named \"Check input\".\n+            Switch to Swiss German input and press key with \"\\\\\" on it\n+            (usually this key is above or to the left of the main \"Enter\" key).\n+            If you see a dollar sign press \"Pass\".\n+            If you see any other character or question mark press \"Fail\".\n+            \"\"\";\n+\n+    public ExtendedKeysTest() {\n+        super(\"Check input\");\n+        setLayout(new BorderLayout());\n+        add(new TextArea(20, 20), \"Center\");\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(ExtendedKeysTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/ExtendedKeysTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4308606\n+ * @summary Tests whether the keys on the numeric keyboard work\n+ *            correctly under French input locale.\n+ * @key i18n\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrenchKeyboard\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class FrenchKeyboard extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+           This test is intended for computers with French input method. If French\n+           input method can not be enabled or your keyboard does not have a numeric\n+           keypad press \"Pass\" to skip the test.\n+           Make sure that French input method is active and the NumLock is on.\n+           Click on the text field in the window called \"Check your keys\"\n+           and type once of each of the following keys on the numeric keypad:\n+           \/*-+1234567890\n+           If all the expected characters are displayed exactly once press \"Pass\".\n+           If any characters do not display or display multiple times press \"Fail\".\n+           \"\"\";\n+\n+    public FrenchKeyboard() {\n+        super(\"Check your keys\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"FrenchKeyboard Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(FrenchKeyboard::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/FrenchKeyboard.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * bug 4268912 4115514\n+ * summary Ensures that KeyEvent has right results for the following\n+ *          non-numpad keys: Home\/Eng\/PageUp\/PageDn\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HomeEndKeyTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class HomeEndKeyTest extends Frame implements KeyListener {\n+   static String INSTRUCTIONS = \"\"\"\n+           Before starting this test make sure that system shortcuts and\n+           keybindings for the keys in the list below are disabled.\n+           For example pressing \"Print Screen\" key should not launch\n+           screen capturing software.\n+           Click on the text field in the window named \"Check keyCode values\"\n+           and one by one start typing the keys in the list below.\n+           (If you do not have some of the keys on your keyboard skip it\n+           and move to the next line).\n+           After clicking each key look at the log area - the printed name\n+           and key code should correspond to the ones for the key you typed.\n+           Note that on some systems the graphical symbol for the key\n+           can be printed instead of the symbolic name.\n+           If you do not encounter unexpected key codes for the keys you typed,\n+           press \"Pass\". Otherwise press \"Fail\".\n+\n+                    Key     Keycode\n+                    -------------------------\n+                    PrintScreen  154\n+                    ScrollLock   145\n+                    Pause         19\n+\n+                    Insert       155\n+                    Del          127\n+                    Home          36\n+                    End           35\n+                    PageUp        33\n+                    PageDown      34\n+\n+                    Left Arrow    37\n+                    Up Arrow      38\n+                    Right Arrow   39\n+                    Down Arrow    40\n+           \"\"\";\n+\n+   public HomeEndKeyTest() {\n+       super(\"Check KeyCode values\");\n+       setLayout(new BorderLayout());\n+       TextField tf = new TextField(30);\n+       tf.addKeyListener(this);\n+       add(tf, BorderLayout.CENTER);\n+       pack();\n+   }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent ignore) {\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        String str;\n+        switch (evt.getID()) {\n+        case KeyEvent.KEY_PRESSED:\n+            str = \"KEY_PRESSED\";\n+            break;\n+        case KeyEvent.KEY_RELEASED:\n+            str = \"KEY_RELEASED\";\n+            break;\n+        default:\n+            str = \"unknown type\";\n+        }\n+\n+        str = str + \":name=\" + KeyEvent.getKeyText(evt.getKeyCode()) +\n+            \" keyCode=\" + evt.getKeyCode();\n+        PassFailJFrame.log(str);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"HomeEndKeyTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(20)\n+                .testUI(HomeEndKeyTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/HomeEndKeyTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4093998\n+ * @summary keyDown not called on subclasses of Component\n+ * @key headful\n+ * @run main KeyDownCaptureTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class KeyDownCaptureTest extends Frame implements KeyListener {\n+    static AtomicBoolean passed = new AtomicBoolean(false);\n+\n+    public KeyDownCaptureTest() {\n+        super(\"Key Down Capture Test\");\n+    }\n+\n+    public void initUI() {\n+        setLayout (new BorderLayout());\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        Canvas canvas = new Canvas();\n+        canvas.setBackground(Color.RED);\n+        canvas.addKeyListener(this);\n+        add(canvas, BorderLayout.CENTER);\n+        setVisible(true);\n+    }\n+\n+    public void middle(Point p) {\n+        Point loc = getLocationOnScreen();\n+        Dimension size = getSize();\n+        p.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    @Override\n+    public void keyTyped(KeyEvent ignore) {}\n+\n+    @Override\n+    public void keyPressed(KeyEvent e) {\n+        passed.set(true);\n+    }\n+\n+    @Override\n+    public void keyReleased(KeyEvent ignore) {}\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyDownCaptureTest test = new KeyDownCaptureTest();\n+        try {\n+            EventQueue.invokeAndWait((test::initUI));\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            Point target = new Point();\n+            EventQueue.invokeAndWait(() -> {\n+                test.middle(target);\n+            });\n+            robot.mouseMove(target.x, target.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            if (!passed.get()) {\n+                throw new RuntimeException(\"KeyPressed has not arrived to canvas\");\n+            }\n+        } finally {\n+            if (test != null) {\n+                EventQueue.invokeAndWait(test::dispose);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyDownCaptureTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4397557\n+ * @summary Check that focused lightweight component gets key events\n+ *          even if mouse is outside of it or on top of heavyweight component\n+ * @key headful\n+ * @run main KeyEventToLightweight\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JButton;\n+\n+public class KeyEventToLightweight extends Frame {\n+    JButton lwbutton = new JButton(\"Select Me\");\n+    Button hwbutton = new Button(\"Heavyweight\");\n+\n+    AtomicBoolean aTyped = new AtomicBoolean(false);\n+    AtomicBoolean bTyped = new AtomicBoolean(false);\n+    AtomicBoolean cTyped = new AtomicBoolean(false);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyEventToLightweight test = new KeyEventToLightweight();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            test.performTest();\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void initUI() {\n+        this.setLayout(new FlowLayout());\n+        add(lwbutton);\n+        add(hwbutton);\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        lwbutton.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_A) {\n+                    aTyped.set(true);\n+                } else if (e.getKeyCode() == KeyEvent.VK_B) {\n+                    bTyped.set(true);\n+                } else if (e.getKeyCode() == KeyEvent.VK_C) {\n+                    cTyped.set(true);\n+                }\n+            }\n+        });\n+        setVisible(true);\n+    }\n+\n+    public void middleOf(Component c, Point p) {\n+        Point loc = c.getLocationOnScreen();\n+        Dimension size = c.getSize();\n+        p.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    public void performTest() throws AWTException, InterruptedException,\n+            InvocationTargetException {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(500);\n+        robot.waitForIdle();\n+        Point target = new Point();\n+        EventQueue.invokeAndWait(() -> middleOf(lwbutton, target));\n+        robot.mouseMove(target.x, target.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        robot.mouseMove(target.x - 200, target.y);\n+        robot.keyPress(KeyEvent.VK_B);\n+        robot.keyRelease(KeyEvent.VK_B);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+        EventQueue.invokeAndWait(() -> middleOf(hwbutton, target));\n+        robot.mouseMove(target.x, target.y);\n+        robot.keyPress(KeyEvent.VK_C);\n+        robot.keyRelease(KeyEvent.VK_C);\n+        if (!aTyped.get() || !bTyped.get() || !cTyped.get()) {\n+            throw new RuntimeException(\"Key event was not delivered, case 1: \"\n+                    + aTyped.get() + \", case 2: \" + bTyped.get() + \", case 3: \"\n+                    + cTyped.get());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyEventToLightweight.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4193779 4174399\n+ * @summary Ensures that KeyEvents have the right modifiers set\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual KeyModifiers\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import jdk.test.lib.Platform;\n+\n+\n+public class KeyModifiers extends Frame implements KeyListener {\n+    public KeyModifiers() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+\n+        String keys;\n+        if (Platform.isWindows()) {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\"\\n\";\n+        } else if (Platform.isOSX()) {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\", \\\"Command-n\\\"\\n\";\n+        } else {\n+            keys = \"\\\"Shift-n\\\", \\\"Alt-n\\\", \\\"Meta-n\\\"\\n\";\n+        }\n+\n+        String INSTRUCTIONS1 = \"\"\"\n+                Click on the text field in the window named \"Check KeyChar values\"\n+                and type the following key combinations:\n+                \"\"\";\n+        String INSTRUCTIONS2 = \"\"\"\n+                After each combination check that the KeyPressed and KeyTyped modifiers\n+                are correctly displayed. If modifiers are correct press \"Pass\",\n+                otherwise press \"Fail\".\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"KeyModifiers Test Instructions\")\n+                .instructions(INSTRUCTIONS1 + keys + INSTRUCTIONS2)\n+                .columns(45)\n+                .logArea(10)\n+                .testUI(KeyModifiers::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL) {\n+            return;\n+        }\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key pressed= \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key pressed = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL) {\n+            return;\n+        }\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key typed = \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key typed = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        int kc = evt.getKeyCode();\n+\n+        if (kc == KeyEvent.VK_CONTROL)\n+            return;\n+\n+        if ((kc == KeyEvent.VK_SHIFT) || (kc == KeyEvent.VK_META) ||\n+                (kc == KeyEvent.VK_ALT) || (kc == KeyEvent.VK_ALT_GRAPH)) {\n+            PassFailJFrame.log(\"Key = released \" + KeyEvent.getKeyText(kc) +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        } else {\n+            PassFailJFrame.log(\"Key released = \" + evt.getKeyChar() +\n+                    \"   modifiers = \" + InputEvent.getModifiersExText(evt.getModifiersEx()));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyModifiers.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4174399\n+ * @summary Check that modifier values are set on a KeyPressed event\n+ *          when a modifier key is pressed.\n+ * @key headful\n+ * @run main KeyPressedModifiers\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class KeyPressedModifiers extends Frame implements KeyListener {\n+    static AtomicBoolean shiftDown = new AtomicBoolean(false);\n+    static AtomicBoolean controlDown = new AtomicBoolean(false);\n+    static AtomicBoolean altDown = new AtomicBoolean(false);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyPressedModifiers test = new KeyPressedModifiers();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            if (!shiftDown.get() || !controlDown.get() || !altDown.get()) {\n+                String error = \"Following key modifiers were not registered:\" +\n+                        (shiftDown.get() ? \"\" : \" SHIFT\") +\n+                        (controlDown.get() ? \"\" : \" CONTROL\") +\n+                        (altDown.get() ? \"\" : \" ALT\");\n+                throw new RuntimeException(error);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void initUI() {\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        setSize(350, 100);\n+        setVisible(true);\n+        tf.requestFocus();\n+    }\n+\n+    public void keyTyped(KeyEvent ignore) {\n+    }\n+\n+    public void keyReleased(KeyEvent ignore) {\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        System.out.println(e);\n+        switch (e.getKeyCode()) {\n+            case KeyEvent.VK_SHIFT:\n+                shiftDown.set(e.isShiftDown());\n+                break;\n+            case KeyEvent.VK_CONTROL:\n+                controlDown.set(e.isControlDown());\n+                break;\n+            case KeyEvent.VK_ALT:\n+                altDown.set(e.isAltDown());\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyPressedModifiers.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4151419 4090870 4169733\n+ * @summary Ensures that KeyEvent has right results for the following\n+ *          keys  -=\\[];,.\/\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual KeyTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class KeyTest extends Frame implements KeyListener {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+           Click on the text field in window named \"Check KeyChar values\"\n+           Type the following keys\/characters in the TextField:\n+           - = \\\\ [ ] ; , . \/\n+           Verify that the keyChar and keyCode is correct for each key pressed.\n+           Remember that the keyCode for the KEY_TYPED event should be zero.\n+           Also verify that the character you typed appears in the TextField.\n+\n+           Key    Name        keyChar    Keycode\n+           -------------------------------------\n+            -     Minus        -  45        45\n+            =     Equals       =  61        61\n+            \\\\    Slash        \\\\   92        92\n+            [     Left Brace   [  91        91\n+            ]     Right Brace  ]  93        93\n+            ;     Semicolon    ;  59        59\n+            ,     Comma        ,  44        44\n+            .     Period       .  46        46\n+            \/     Front Slash  \/  47        47\n+           \"\"\";\n+    public KeyTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        if (evt.isActionKey()) {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+                    (int) evt.getKeyChar() + \"   Action Key\");\n+        } else {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+                    (int) evt.getKeyChar());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"KeyTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(20)\n+                .testUI(KeyTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4083691\n+ * @summary Ensures that KeyEvent has right results for the following\n+ *         keys \\*-+\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NumpadTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class NumpadTest extends Frame implements KeyListener {\n+   static String INSTRUCTIONS = \"\"\"\n+           This test requires a keyboard with a numeric keypad (numpad).\n+           If your keyboard does not have a numpad press \"Pass\" to skip testing.\n+           Make sure NumLock is on.\n+           Click on the text field in the window named \"Check KeyChar values\".\n+           Then, type the following keys\/characters in the TextField.\n+           using the numpad keys:\n+           \/*-+\n+\n+           Verify that the keyChar and keyCode is correct for each key pressed.\n+           Remember that the keyCode for the KEY_TYPED event should be zero.\n+           Also verify that the character you typed appears in the TextField.\n+\n+           Key    Name        keyChar    Keycode\n+           -------------------------------------\n+            \/     Divide       \/  47        111\n+            *     Multiply     *  42        106\n+            -     Subtract     -  45        109\n+            +     Add          +  43        107\n+\n+           Now repeat with the NumLock off.\n+\n+           If all keycodes are valid and expected characters appear\n+           in the text field press \"Pass\". Otherwise press \"Fail\".\n+           \"\"\";\n+\n+   public NumpadTest() {\n+       super(\"Check KeyChar values\");\n+       setLayout(new BorderLayout());\n+       TextField tf = new TextField(30);\n+       tf.addKeyListener(this);\n+       add(tf, BorderLayout.CENTER);\n+       pack();\n+   }\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        switch (evt.getID()) {\n+          case KeyEvent.KEY_TYPED:\n+            break;\n+          case KeyEvent.KEY_PRESSED:\n+            break;\n+          case KeyEvent.KEY_RELEASED:\n+            break;\n+          default:\n+            return;\n+        }\n+\n+        if (evt.isActionKey()) {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+              (int) evt.getKeyChar() + \"   Action Key\");\n+        } else {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+              (int) evt.getKeyChar());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"NumpadTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(20)\n+                .testUI(NumpadTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/NumpadTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4279566\n+ * @summary Tests that numpad keys produce the correct key codes and\n+ *           key chars when both the NumLock and CapsLock are on.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NumpadTest2\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NumpadTest2 extends Frame implements KeyListener {\n+    static String INSTRUCTIONS = \"\"\"\n+           Make sure that the NumLock and CapsLock are both ON.\n+           Click on the text field inside the window named \"Check KeyChar values\"\n+           Then, type the NumPad 7 key (not the regular 7 key).\n+           Verify that the keyChar and keyCode is correct for each key pressed.\n+           Remember that the keyCode for the KEY_TYPED event should be zero.\n+           If 7 appears in the text field and the key code printed is correct\n+           press \"Pass\", otherwise press \"Fail\".\n+\n+           Key               Name             keyChar    Keycode\n+           -------------------------------------------------\n+           Numpad-7     Numpad-7      55         103\n+           \"\"\";\n+\n+    public NumpadTest2() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        switch (evt.getID()) {\n+            case KeyEvent.KEY_TYPED:\n+                break;\n+            case KeyEvent.KEY_PRESSED:\n+                break;\n+            case KeyEvent.KEY_RELEASED:\n+                break;\n+            default:\n+                System.out.println(\"Other Event \");\n+                return;\n+        }\n+\n+        if (evt.isActionKey()) {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar: \" +\n+                    (int) evt.getKeyChar() + \" Action Key\");\n+        } else {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar: \" +\n+                    (int) evt.getKeyChar());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(NumpadTest2::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/NumpadTest2.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4495473\n+ * @summary Tests that when you press key on canvas-type heavyweight only one key event arrives\n+ * @key headful\n+ * @run main TestDoubleKeyEvent\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JFrame;\n+import javax.swing.JWindow;\n+import javax.swing.JTextField;\n+\n+public class TestDoubleKeyEvent extends JFrame {\n+    JWindow w;\n+    JTextField tf;\n+\n+    public void initUI() {\n+        setLayout(new BorderLayout());\n+        setTitle(\"Double Key Event Test\");\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        w = new JWindow(this);\n+        w.setLayout(new FlowLayout());\n+        tf = new JTextField(20);\n+        w.add(tf);\n+        w.pack();\n+        w.setLocationRelativeTo(null);\n+        w.setVisible(true);\n+        tf.requestFocus();\n+    }\n+\n+    public void testAndClean() {\n+        String str = tf.getText();\n+        w.dispose();\n+        dispose();\n+        if (str.length() != str.chars().distinct().count()) {\n+            throw new RuntimeException(\"Duplicate characters found!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        TestDoubleKeyEvent test = new TestDoubleKeyEvent();\n+        EventQueue.invokeAndWait(test::initUI);\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        for (int i = 0; i < 15; i++) {\n+            robot.keyPress(KeyEvent.VK_A + i);\n+            robot.keyRelease(KeyEvent.VK_A + i);\n+            robot.waitForIdle();\n+        }\n+        robot.delay(1000);\n+        EventQueue.invokeAndWait(test::testAndClean);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/TestDoubleKeyEvent.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -153,1 +153,1 @@\n-}\/\/ class AutomaticAppletTest\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MenuDragMouseEventAbsoluteCoordsTest\/MenuDragMouseEventAbsoluteCoordsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4425654\n+ * @summary Test wheel scrolling of heavyweight components\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HWWheelScroll\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.TextArea;\n+import java.awt.Window;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+\n+public class HWWheelScroll {\n+    public static final int TEXT_TALL = 0;\n+    public static final int TEXT_WIDE = 1;\n+    public static final int TEXT_SMALL = 2;\n+    public static final int TEXT_BIG = 3;\n+    static String INSTRUCTIONS = \"\"\"\n+            Test for mouse wheel scrolling of heavyweight components with built-in\n+            scrollbars or similar functionality that is controlled by guestures\n+            such as Apple Magic Mouse or trackpad scrolling guesture.\n+            Several windows containing either a TextArea, List, Choice, or a\n+            FileDialog will appear. For each window, use the mouse wheel to\n+            scroll its content, and then minimize it or move away\n+            and continue with the next window.\n+            Do not close any of the opened windows except the FileDialog.\n+            For the FileDialog, first change to a directory with enough items that a\n+            scrollbar appears.\n+            Some of the other windows don't have enough text to warrant scrollbars,\n+            but should be tested anyway to make sure no crash or hang occurs.\n+            If all scrollbars scroll correctly, press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public static ArrayList<Window> initUI() {\n+        ArrayList<Window> retValue = new ArrayList<>();\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_BIG));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_TALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_WIDE));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_VERTICAL_ONLY, TEXT_TALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_VERTICAL_ONLY, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_HORIZONTAL_ONLY, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_HORIZONTAL_ONLY, TEXT_WIDE));\n+        retValue.add(makeListFrame(TEXT_TALL));\n+        retValue.add(makeListFrame(TEXT_WIDE));\n+        retValue.add(makeListFrame(TEXT_SMALL));\n+        Frame f = new Frame(\"File Dialog Owner\");\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        FileDialog fd = new FileDialog(f, \"FileDialog\");\n+        fd.setDirectory(\".\");\n+        retValue.add(fd);\n+        retValue.add(f);\n+        Frame choiceFrame = new Frame(\"Choice\");\n+        Choice c = new Choice();\n+        for (int i = 0; i < 50; i++) {\n+            c.add(i + \" choice item\");\n+        }\n+        choiceFrame.add(c);\n+        choiceFrame.setSize(150, 150);\n+        choiceFrame.setLocationRelativeTo(null);\n+        retValue.add(choiceFrame);\n+        return retValue;\n+    }\n+\n+    public static Frame makeTextFrame(int policy, int textShape) {\n+        Frame f = new Frame(\"TextArea\");\n+        f.add(makeTextArea(policy, textShape));\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        return f;\n+    }\n+\n+    public static Frame makeListFrame(int textShape) {\n+        Frame f = new Frame(\"List\");\n+        f.add(makeList(textShape));\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        return f;\n+    }\n+\n+    public static TextArea makeTextArea(int policy, int textShape) {\n+        TextArea ta = new TextArea(\"\", 0, 0, policy);\n+        if (textShape == TEXT_TALL) {\n+            for (int i = 0; i < 50 ; i++) {\n+                ta.append(i + \"\\n\");\n+            }\n+        } else if (textShape == TEXT_WIDE) {\n+            for (int i = 0; i < 2; i++) {\n+                ta.append(i + \"very, very, very, very, very, very, very, long line of text number\\n\");\n+            }\n+        } else if (textShape == TEXT_SMALL) {\n+            ta.append(\"text\");\n+        } else if (textShape == TEXT_BIG) {\n+            for (int i = 0; i < 50 ; i++) {\n+                ta.append(i + \"very, very, very, very, very, very, very, long line of text number\\n\");\n+            }\n+        }\n+        return ta;\n+    }\n+\n+    public static List makeList(int textShape) {\n+        java.awt.List l = new java.awt.List();\n+        if (textShape == TEXT_TALL) {\n+            for (int i = 0; i < 50 ; i++) {\n+                l.add(\" \" + i + \" \");\n+            }\n+        }  else if (textShape == TEXT_WIDE) {\n+            for (int i = 0; i < 2 ; i++) {\n+                l.add(i + \"very, very, very, very, very, very, very, long line of text number\");\n+            }\n+        }  else if (textShape == TEXT_SMALL) {\n+            l.add(\"text\");\n+        } else if (textShape == TEXT_BIG) {\n+            for (int i = 0; i < 50 ; i++) {\n+                l.add(i + \"very, very, very, very, very, very, very, long line of text number\");\n+            }\n+        }\n+        return l;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(HWWheelScroll::initUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/HWWheelScroll.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-  @summary stack overflow on mouse wheel rotation within JApplet\n+  @summary stack overflow on mouse wheel rotation within a Window\n@@ -37,2 +37,2 @@\n- * summary: put a JButton into JPanel and then put JPanel into Applet.\n- * Add MouseWheelListener to Applet.\n+ * summary: put a JButton into JPanel and then put JPanel into the Window.\n+ * Add MouseWheelListener to the Window\n@@ -41,4 +41,0 @@\n-\n- * summary: put a JButton into JApplet.\n- * Add MouseWheelListener to JApplet.\n- * Rotating a wheel over the JButton would result in stack overflow.\n@@ -82,1 +78,1 @@\n-                    System.out.println(\"Wheel moved on APPLET : \"+e);\n+                    System.out.println(\"Wheel moved on Window : \"+e);\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/InfiniteRecursion\/InfiniteRecursion_2.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-  @summary stack overflow on mouse wheel rotation within JApplet\n+  @summary stack overflow on mouse wheel rotation within a Window\n@@ -37,2 +37,2 @@\n- * summary: put a JButton into Applet.\n- * Add MouseWheelListener to Applet.\n+ * summary: put a JButton into the Window.\n+ * Add MouseWheelListener to the Window.\n@@ -75,1 +75,1 @@\n-                    System.out.println(\"Wheel moved on APPLET : \"+e);\n+                    System.out.println(\"Wheel moved on Window : \"+e);\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/InfiniteRecursion\/InfiniteRecursion_3.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4492456\n+ * @summary MouseWheelEvent coordinates are wrong\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WheelEventCoord\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class WheelEventCoord extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires mouse with scrolling wheel or device,\n+            that has capability to simulate scrolling wheel with gestures\n+            such as Apple mouse or a trackpad with gesture control.\n+            If you do not have such device press \"Pass\".\n+            Move mouse to the top of the button named \"Button 1\".\n+            While constantly turning mouse wheel up and down slowly move\n+            mouse cursor until it reaches bottom of the button named \"Button 3\".\n+            While doing so look at the log area.\n+            If despite the wheel direction y coordinate is steadily increases\n+            as you move the mouse down press \"Pass\".\n+            If y coordinate decreases when cursor is moving down or suddenly jumps\n+            by more than 50 points when crossing to another button press \"Fail\".\n+            \"\"\";\n+\n+    public WheelEventCoord() {\n+        super(\"Wheel Event Coordinates\");\n+        setLayout(new GridLayout(3, 1));\n+\n+        add(new BigButton(\"Button 1\"));\n+        add(new BigButton(\"Button 2\"));\n+        add(new BigButton(\"Button 3\"));\n+\n+        addMouseWheelListener(e -> PassFailJFrame.log(\"Mouse y coordinate = \" + e.getY()));\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Wheel Event Coordinates Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(WheelEventCoord::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class BigButton extends Button {\n+    public BigButton(String label) {\n+        super(label);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 100);\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        return getPreferredSize();\n+    }\n+\n+    public Dimension getMaximumSize() {\n+        return getPreferredSize();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/WheelEventCoord.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4372477\n+ * @summary Test disabling of wheel scrolling\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WheelScrollEnabled\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Checkbox;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class WheelScrollEnabled extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires mouse with a scrolling wheel or\n+            device that is able to simulate scrolling using gestures.\n+            If you do not have such device press \"Pass\" to skip testing.\n+            You should see a ScrollPane with some labels in it and two checkboxes.\n+            For each of the four combinations of the two checkboxes,\n+            move the cursor over the ScrollPane and rotate the mouse wheel.\n+            When (and ONLY when) the 'WheelListener added' checkbox is checked,\n+            scrolling the mouse wheel should produce a text message in the log area.\n+            When (and ONLY when) the 'Wheel scrolling enabled' checkbox is checked,\n+            the ScrollPane should scroll when mouse wheel is scrolled on top of it.\n+            If all four checkbox combinations work properly press \"Pass\",\n+            otherwise press \"Fail\".\n+            \"\"\";\n+    MouseWheelListener mwl;\n+    Checkbox cb;\n+    Checkbox cb2;\n+    ScrollPane sp;\n+\n+    public WheelScrollEnabled() {\n+        setLayout(new BorderLayout());\n+        Panel pnl = new Panel();\n+        pnl.setLayout(new GridLayout(10, 10));\n+        for (int i = 0; i < 100; i++) {\n+            pnl.add(new Label(\"Label \" + i));\n+        }\n+        sp = new ScrollPane();\n+        sp.add(pnl);\n+        sp.setWheelScrollingEnabled(false);\n+        mwl = new MouseWheelListener() {\n+            int i;\n+            @Override\n+            public void mouseWheelMoved(MouseWheelEvent e) {\n+                PassFailJFrame.log(\"mouseWheelMoved \" + i++);\n+            }\n+        };\n+        sp.addMouseWheelListener(mwl);\n+        add(sp, BorderLayout.CENTER);\n+\n+        Panel pl2 = new Panel();\n+        ItemListener il = new ControlListener();\n+\n+        cb = new Checkbox(\"WheelListener added\", true);\n+        cb.addItemListener(il);\n+        pl2.add(cb);\n+\n+        cb2 = new Checkbox(\"Wheel scrolling enabled\", false);\n+        cb2.addItemListener(il);\n+        pl2.add(cb2);\n+\n+        add(pl2, BorderLayout.SOUTH);\n+        setSize(400, 200);\n+    }\n+\n+    class ControlListener implements ItemListener {\n+        public void itemStateChanged(ItemEvent e) {\n+            if (e.getSource() == cb) {\n+                boolean state = cb.getState();\n+                if (state) {\n+                    sp.addMouseWheelListener(mwl);\n+                }\n+                else {\n+                    sp.removeMouseWheelListener(mwl);\n+                }\n+            }\n+            if (e.getSource() == cb2) {\n+                sp.setWheelScrollingEnabled(cb2.getState());\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Wheel Scroll Enabled Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(WheelScrollEnabled::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/WheelScrollEnabled.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -119,10 +119,2 @@\n-    try {\n-      unClicker uc = new unClicker();\n-      new Thread(uc).start();\n-    } catch (Exception e) {\n-      \/\/ In case we're in an applet and the security has not been\n-      \/\/ turned off (in which case we can't start a new thread)\n-      \/\/ we can catch that and set the flag back to how it should be.\n-      isInClick = false;\n-      repaint();\n-    }\n+    unClicker uc = new unClicker();\n+    new Thread(uc).start();\n","filename":"test\/jdk\/java\/awt\/event\/helpers\/lwcomponents\/LWButton.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+\n+\/*\n+ * @test\n+ * @bug 4935871\n+ * @summary Check that correct type faces are used regardless of bold\/italic styles\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual\/othervm -Duser.language=ja -Duser.country=JP BoldItalicFontTest\n+ *\/\n+\n+public class BoldItalicFontTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                This test is reproduced with a non-English user locale only.\n+                All the letters \"X\" in the first line should be in serif font.\n+                All the letters \"X\" in the second line should be in sans-serif font.\n+\n+                If so, press Pass, else press Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(BoldItalicFontTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        String[] faces = { Font.SERIF, Font.SANS_SERIF };\n+        int[] styles = { 0, Font.BOLD, Font.ITALIC, Font.BOLD | Font.ITALIC };\n+\n+        Frame f = new Frame(\"BoldItalicFontTest Test UI\");\n+        f.setLayout(new GridLayout(faces.length, styles.length));\n+        for (int fn = 0; fn < faces.length; fn++) {\n+            for (int sn = 0; sn < styles.length; sn++) {\n+                Label l = new Label(\"X\");\n+                Font f1 = new Font(faces[fn], styles[sn], 36);\n+                l.setFont(f1);\n+                f.add(l);\n+            }\n+        }\n+        f.setSize(300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/BoldItalicFontTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.FontRenderContext;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4615017\n+ * @summary Display two GlyphVectors, and ensure they are of the same length.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestGlyphVectorLayout\n+ *\/\n+\n+public class TestGlyphVectorLayout extends JPanel {\n+    private final Font font;\n+    private final FontRenderContext frc;\n+    private final String text;\n+\n+    private GlyphVector aftergv;\n+    private Rectangle pbounds;\n+    private Rectangle2D vbounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Two lines of text should appear, the top one with boxes\n+                (red and blue) around it.\n+                The two lines should be of the same length, and the boxes around the\n+                top line should 'fit' the text with no empty space between the end\n+                of the text and the box.\n+\n+                Pass the test if this is true.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestGlyphVectorLayout::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private TestGlyphVectorLayout() {\n+        setBackground(Color.WHITE);\n+        font = new Font(Font.DIALOG, Font.PLAIN, 24);\n+        frc = new FontRenderContext(null, false, false);\n+        text = \"this is a test of glyph vector\";\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(550, 150);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        float x = 50;\n+        float y = 50;\n+        AffineTransform oldtx = g2d.getTransform();\n+        g2d.translate(x, y);\n+        g2d.scale(1.5, 1.5);\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n+                             RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n+        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                             RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n+\n+        g2d.setColor(Color.BLACK);\n+\n+        GlyphVector gv = font.createGlyphVector(frc, text); \/\/ new each time\n+        g2d.drawGlyphVector(gv, 0, 0);\n+\n+        if (vbounds == null) {\n+            vbounds = gv.getVisualBounds();\n+            pbounds = gv.getPixelBounds(g2d.getFontRenderContext(), 0, 0);\n+            aftergv = gv;\n+        }\n+        g2d.drawGlyphVector(aftergv, 0, 30);\n+\n+        g2d.setColor(Color.BLUE);\n+        g2d.draw(vbounds);\n+\n+        g2d.setTransform(oldtx);\n+        g2d.setColor(Color.RED);\n+        g2d.draw(pbounds);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/TestGlyphVectorLayout.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.FontRenderContext;\n+import java.awt.geom.Point2D;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4180379\n+ * @summary set the positions of glyphs in the GlyphVector to other than\n+ *          their default x, y positions, and verify that the rendered glyphs are\n+ *          in the new positions, not the default positions.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestSetGlyphPositions\n+ *\/\n+\n+public class TestSetGlyphPositions extends JPanel {\n+    GlyphVector gv = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+            'TopLeft text and >' should appear towards the top left of the frame,\n+            and '< and BottomRight text' should appear towards the bottom right.\n+\n+            There should be some space between the '>' and '<' symbols, both vertically\n+            and horizontally.\n+\n+            Pass the test if this is true.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestSetGlyphPositions::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public TestSetGlyphPositions() {\n+        setBackground(Color.WHITE);\n+        setSize(550, 150);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(550, 150);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        if (gv == null) {\n+            Font font = new Font(Font.DIALOG, Font.PLAIN, 36);\n+            FontRenderContext frc = g2d.getFontRenderContext();\n+            String str = \"TopLeft><BottomRight\";\n+\n+            gv = font.createGlyphVector(frc, str);\n+            for (int i = str.indexOf(\"<\"); i < gv.getNumGlyphs(); ++i) {\n+                Point2D loc = gv.getGlyphPosition(i);\n+                loc.setLocation(loc.getX() + 50, loc.getY() + 50);\n+                gv.setGlyphPosition(i, loc);\n+            }\n+        }\n+        g2d.drawGlyphVector(gv, 50f, 50f);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/TestSetGlyphPositions.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.text.AttributedString;\n+import java.awt.font.TextAttribute;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4188328\n+ * @summary In this bug, a text string is displayed rotated. Without the\n+ *          fix, on Windows, the string was not displayed (boxes were\n+ *          displayed which denote an unprintable character). On Solaris\n+ *          2.5.1, the characters were displayed, but not rotated. Now\n+ *          on all platforms, the string is displayed correctly rotated.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RotateTest1\n+ *\/\n+\n+public class RotateTest1 extends JPanel {\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                In this test, a text string is displayed rotated.\n+\n+                Without the fix, on Windows, the string was not displayed\n+                (boxes were displayed which denote an unprintable character).\n+\n+                On Solaris 2.5.1, the characters were displayed, but not rotated.\n+\n+                Now on all platforms, the string is displayed rotated.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(RotateTest1::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public RotateTest1() {\n+        setBackground(Color.WHITE);\n+        setDoubleBuffered(true);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(400, 520);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2d = (Graphics2D) g;\n+        Dimension d = getSize();\n+\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, d.width, d.height);\n+\n+        \/\/ start java2d test code\n+        paintRotatedTextTest(g2d);\n+    }\n+\n+    private void paintRotatedTextTest(Graphics2D g2d) {\n+        AttributedString testString =\n+                new AttributedString(\"This is some text. Blablablabla\");\n+        testString.addAttribute(TextAttribute.SIZE, 32f);\n+\n+        g2d.setPaint(Color.BLACK);\n+        g2d.rotate(Math.PI \/ 3);\n+        g2d.drawString(testString.getIterator(), 100.0f, 10.0f);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/Rotate\/RotateTest1.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\n+ * Copyright 1999 IBM Corp.  All Rights Reserved.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Shape;\n+import java.text.AttributedString;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GraphicAttribute;\n+import java.awt.font.ImageGraphicAttribute;\n+import java.awt.font.ShapeGraphicAttribute;\n+import java.awt.font.TextLayout;\n+import java.awt.font.TextAttribute;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4202637\n+ * @summary This test ensures that graphics in a TextLayout are positioned correctly.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestGraphicPlacement\n+ *\/\n+\n+public class TestGraphicPlacement extends JPanel {\n+    private static final int GRAPHIC_COUNT = 5;\n+    private static final float BASE_SIZE = 5;\n+    private static final boolean SHAPE = false;\n+    private static final boolean IMAGE = true;\n+\n+    private final AttributedString[] strings;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                This test has text strings enclosed in boxes, in each box there is\n+                a sequence of square graphics to the right of the text string.\n+\n+                This test is concerned with the placement of these graphics relative\n+                to the text string.\n+\n+                Squares after 'TOP' should be placed in the top-right corner of the\n+                box with their tops aligned to the top of the box.\n+\n+                Graphics after 'BOTTOM' should be placed in the bottom-right corner of its\n+                box with their bottoms aligned to the bottom of the box.\n+\n+                Graphics after 'BASELINE' should have their tops (not bottoms) aligned to\n+                the baseline of the text.\n+\n+                If all these are true, pass the test.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestGraphicPlacement::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public TestGraphicPlacement() {\n+        setBackground(Color.WHITE);\n+\n+        strings = new AttributedString[]{\n+                makeString(GraphicAttribute.TOP_ALIGNMENT, SHAPE),\n+                makeString(GraphicAttribute.BOTTOM_ALIGNMENT, SHAPE),\n+                makeString(GraphicAttribute.ROMAN_BASELINE, SHAPE),\n+                makeString(GraphicAttribute.TOP_ALIGNMENT, IMAGE),\n+                makeString(GraphicAttribute.BOTTOM_ALIGNMENT, IMAGE),\n+                makeString(GraphicAttribute.ROMAN_BASELINE, IMAGE),\n+        };\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(350, 450);\n+    }\n+\n+    private Image makeImage(int size) {\n+        Image img = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = (Graphics2D) img.getGraphics();\n+        g2d.setColor(Color.BLUE);\n+        g2d.fillRect(0, 0, size, size);\n+        g2d.setColor(Color.RED);\n+        g2d.drawRect(0, 0, size - 1, size - 1);\n+        return img;\n+    }\n+\n+    \/**\n+     * Create an AttributedString with a descriptive word (TOP, BOTTOM,\n+     * or BASELINE) and several graphics of varying sizes following the\n+     * word.\n+     *\n+     * @param alignment the alignment of the graphics\n+     * @param image     whether to create Shape or Image graphics\n+     *\/\n+    private AttributedString makeString(int alignment, boolean image) {\n+        String name;\n+        if (alignment == GraphicAttribute.TOP_ALIGNMENT) {\n+            name = \"TOP\";\n+        } else if (alignment == GraphicAttribute.BOTTOM_ALIGNMENT) {\n+            name = \"BOTTOM\";\n+        } else {\n+            name = \"BASELINE\";\n+        }\n+\n+        \/\/ Append the Unicode graphic replacement character to the name.\n+        String nameWithUnicode = name.concat(\"\\uFFFC\".repeat(GRAPHIC_COUNT));\n+\n+        AttributedString as = new AttributedString(nameWithUnicode);\n+\n+        \/\/ Make the descriptive text large.\n+        as.addAttribute(TextAttribute.SIZE, 48f, 0, name.length());\n+\n+        \/\/ Add the graphic attributes to the end of the AttributedString.\n+        for (int i = 0; i < GRAPHIC_COUNT; i++) {\n+\n+            float size = (i + 1) * BASE_SIZE;\n+            GraphicAttribute attribute;\n+\n+            if (image == IMAGE) {\n+                Image img = makeImage((int) size);\n+                attribute = new ImageGraphicAttribute(img, alignment);\n+            } else {\n+                Shape shape = new Rectangle2D.Float(0, 0, size, size);\n+                attribute = new ShapeGraphicAttribute(shape,\n+                                                      alignment,\n+                                                      ShapeGraphicAttribute.STROKE);\n+            }\n+\n+            as.addAttribute(TextAttribute.CHAR_REPLACEMENT,\n+                    attribute,\n+                    i + name.length(),\n+                    i + name.length() + 1);\n+        }\n+\n+        return as;\n+    }\n+\n+    \/**\n+     * Draw each AttributedString, with a bounding box enclosing\n+     * the string.\n+     *\/\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+\n+        final float drawX = 20;\n+        float drawY = 20;\n+\n+        for (int i = 0; i < strings.length; i++) {\n+            TextLayout layout = new TextLayout(strings[i].getIterator(), frc);\n+            float ascent = layout.getAscent();\n+            drawY += ascent;\n+\n+            Rectangle2D boundsRect = new Rectangle2D.Float(drawX,\n+                    drawY - ascent,\n+                    layout.getAdvance(),\n+                    ascent + layout.getDescent());\n+            g2d.draw(boundsRect);\n+            layout.draw(g2d, drawX, drawY);\n+            drawY += layout.getDescent() + layout.getLeading();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TestGraphicPlacement.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.util.Arrays;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.Box;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+import static javax.swing.BorderFactory.createEmptyBorder;\n+\n+\/*\n+ * @test\n+ * @bug 4650997\n+ * @summary rotate a TextLayout and verify that the bounds are correct\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RotFontBoundsTest\n+ *\/\n+public final class RotFontBoundsTest {\n+    private static final String TEXT = \".This is a STRINg.\";\n+\n+    private static final String INSTRUCTIONS =\n+            \"A string \\u201C\" + TEXT + \"\\u201D is drawn at eight different \"\n+            + \"angles, and eight boxes that surround the bounds of the text \"\n+            + \"layouts (give or take a pixel) are drawn in red. The boxes \"\n+            + \"are always composed of horizontal and vertical lines \\u2014 \"\n+            + \"they are not rotated.\\n\"\n+            + \"\\n\"\n+            + \"By default, all the rotations are displayed. Select or clear \"\n+            + \"a check box with an angle to show or hide a particular \"\n+            + \"rotation. Click \\\"Select All\\\" or \\\"Clear All\\\" to show all \"\n+            + \"the rotations or to hide them.\\n\"\n+            + \"\\n\"\n+            + \"Click the Pass button if each box encloses its corresponding \"\n+            + \"text layout.\\n\"\n+            + \"Otherwise, click Screenshot to save a screenshot for failure \"\n+            + \"analysis and then click Fail.\";\n+\n+    private static boolean verbose;\n+\n+    public static void main(String[] args) throws Exception {\n+        verbose = (args.length > 0 && args[0].equalsIgnoreCase(\"verbose\"));\n+\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+        PassFailJFrame.builder()\n+                      .instructions(INSTRUCTIONS)\n+                      .rows(20)\n+                      .columns(50)\n+                      .testTimeOut(15)\n+                      .screenCapture()\n+                      .testUI(RotFontBoundsTest::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static final int ROTATIONS = 8;\n+\n+    private static JComponent createUI() {\n+        final RotatedTextBounds rotatedText = new RotatedTextBounds();\n+\n+        final JPanel checkBoxes = new JPanel(new FlowLayout(FlowLayout.CENTER,\n+                                                            4, 4));\n+        checkBoxes.setBorder(createEmptyBorder(0, 8, 8, 8));\n+        for (int i = 0; i < ROTATIONS; i++) {\n+            checkBoxes.add(new JCheckBox(new SelectRotationAction(i, rotatedText)));\n+        }\n+\n+        JButton selectAll = new JButton(\"Select All\");\n+        selectAll.addActionListener(\n+                e -> selectAllCheckBoxes(checkBoxes.getComponents(), true));\n+        selectAll.setMnemonic('S');\n+\n+        JButton clearAll = new JButton(\"Clear All\");\n+        clearAll.addActionListener(\n+                e -> selectAllCheckBoxes(checkBoxes.getComponents(), false));\n+        clearAll.setMnemonic('C');\n+\n+        Box controls = Box.createHorizontalBox();\n+        controls.add(new JLabel(\"Visible Rotations:\"));\n+        controls.add(Box.createHorizontalGlue());\n+        controls.add(selectAll);\n+        controls.add(Box.createHorizontalStrut(4));\n+        controls.add(clearAll);\n+        controls.setBorder(createEmptyBorder(8, 8, 0, 8));\n+\n+        Box controlPanel = Box.createVerticalBox();\n+        controlPanel.add(controls);\n+        controlPanel.add(checkBoxes);\n+\n+        Box javaVersion = Box.createHorizontalBox();\n+        javaVersion.setBorder(createEmptyBorder(8, 8, 8, 8));\n+        javaVersion.add(new JLabel(\"Java version: \"\n+                                        + System.getProperty(\"java.runtime.version\")));\n+        javaVersion.add(Box.createHorizontalGlue());\n+\n+        Box main = Box.createVerticalBox();\n+        main.setName(\"Rotated TextLayout Test\");\n+        main.add(controlPanel);\n+        main.add(rotatedText);\n+        main.add(javaVersion);\n+\n+        return main;\n+    }\n+\n+    private static final class RotatedTextBounds extends JComponent {\n+        private final Font font = new Font(Font.DIALOG, Font.PLAIN, 24);\n+\n+        private final boolean[] rotationVisible = new boolean[ROTATIONS];\n+\n+        private RotatedTextBounds() {\n+            setBackground(Color.WHITE);\n+            setPreferredSize(new Dimension(400, 400));\n+            Arrays.fill(rotationVisible, true);\n+        }\n+\n+        public void setRotationVisible(int rotation, boolean visible) {\n+            rotationVisible[rotation] = visible;\n+            repaint();\n+        }\n+\n+        \/\/ Counts the number of paints\n+        private int counter = 0;\n+\n+        @Override\n+        public void paintComponent(Graphics _g) {\n+            Graphics2D g = (Graphics2D) _g;\n+            Dimension d = getSize();\n+\n+            g.setColor(getBackground());\n+            g.fillRect(0, 0, d.width, d.height);\n+\n+            counter++;\n+            int x = d.width \/ 2;\n+            int y = d.height \/ 2;\n+            FontRenderContext frc = g.getFontRenderContext();\n+\n+            for (int i = 0; i < ROTATIONS; i++) {\n+                if (!rotationVisible[i]) {\n+                    continue;\n+                }\n+\n+                double angle = -Math.PI \/ 4.0 * i;\n+                AffineTransform flip = AffineTransform.getRotateInstance(angle);\n+                Font flippedFont = font.deriveFont(flip);\n+                TextLayout tl = new TextLayout(TEXT, flippedFont, frc);\n+                Rectangle2D bb = tl.getBounds();\n+                g.setPaint(Color.BLACK);\n+                tl.draw(g, x, y);\n+                g.setPaint(Color.RED);\n+                g.drawRect(x + (int) bb.getX(), y + (int) bb.getY(),\n+                           (int) bb.getWidth(), (int) bb.getHeight());\n+\n+                if (verbose) {\n+                    if (counter == 1) {\n+                        printDetails(angle, tl);\n+                    } else if (i == 0) {\n+                        System.out.println(\"Paint, counter=\" + counter);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static void printDetails(double angle, TextLayout tl) {\n+            System.out.println(\"Angle: \" + angle);\n+            System.out.println(\"getAscent: \" + tl.getAscent());\n+            System.out.println(\"getAdvance: \" + tl.getAdvance());\n+            System.out.println(\"getBaseline: \" + tl.getBaseline());\n+            System.out.println(\"getBounds: \" + tl.getBounds());\n+            System.out.println(\"getDescent: \" + tl.getDescent());\n+            System.out.println(\"getLeading: \" + tl.getLeading());\n+            System.out.println(\"getVisibleAdvance: \" + tl.getVisibleAdvance());\n+            System.out.println(\".\");\n+        }\n+    }\n+\n+    private static final class SelectRotationAction\n+            extends AbstractAction\n+            implements PropertyChangeListener {\n+        private final int rotation;\n+        private final RotatedTextBounds rotatedText;\n+\n+        private SelectRotationAction(int rotation,\n+                                     RotatedTextBounds rotatedText) {\n+            super(rotation * (360 \/ ROTATIONS) + \"\\u00B0\");\n+            this.rotation = rotation;\n+            this.rotatedText = rotatedText;\n+\n+            putValue(SELECTED_KEY, true);\n+\n+            addPropertyChangeListener(this);\n+        }\n+\n+        private void updateRotationVisible() {\n+            rotatedText.setRotationVisible(rotation,\n+                                           (Boolean) getValue(SELECTED_KEY));\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            updateRotationVisible();\n+        }\n+\n+        @Override\n+        public void propertyChange(PropertyChangeEvent evt) {\n+            if (evt.getPropertyName().equals(SELECTED_KEY)) {\n+                updateRotationVisible();\n+            }\n+        }\n+    }\n+\n+    private static void selectAllCheckBoxes(Component[] checkBoxes,\n+                                            boolean visible) {\n+        Arrays.stream(checkBoxes)\n+              .forEach(c -> ((JCheckBox) c).setSelected(visible));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/RotFontBoundsTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n-  @summary REGRESSION: Popup menus dont respond to selections when extend outside Applet\n+  @summary REGRESSION: Popup menus dont respond to selections when extend outside EmbeddedFrame\n@@ -41,1 +41,1 @@\n- * summary: REGRESSION: Popup menus dont respond to selections when extend outside Applet\n+ * summary: REGRESSION: Popup menus dont respond to selections when extend outside EmbeddedFrame\n","filename":"test\/jdk\/java\/awt\/grab\/EmbeddedFrameTest1\/EmbeddedFrameTest1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @summary Language specific keys does not work in applets when opened outside the browser\n+ * @summary Language specific keys does not work in non-default AppContexts of top-level windows\n","filename":"test\/jdk\/java\/awt\/im\/8041990\/bug8041990.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,3 +37,0 @@\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n","filename":"test\/jdk\/java\/awt\/print\/Dialog\/DialogOrient.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,3 +45,0 @@\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintDialog.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,3 +46,0 @@\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintDialogCancel.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,3 +45,0 @@\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ThinLines.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * Note that if you are about to create a test based on\n- * Applet-template, then put those lines into html-file, not in java-file.\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/AbstractTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n- * Note that if you are about to create a test based on\n- * Applet-template, then put those lines into html-file, not in java-file.\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/Util.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- *  1. Write an implementation for the parent JVM, using applet test.\n+ *  1. Write an implementation for the parent JVM\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/process\/ProcessCommunicator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-\/* @test\n+\/* @test id=default_architecture_test_case\n@@ -84,1 +84,1 @@\n- * @requires (os.arch == \"x86_64\")\n+ * @requires ((os.arch == \"x86_64\")|(os.arch == \"amd64\"))\n@@ -87,1 +87,1 @@\n-\/* @test\n+\/* @test id=other_architectures_test_case\n@@ -91,1 +91,1 @@\n- * @requires ((os.arch == \"amd64\")|(os.arch == \"aarch64\")|(os.arch == \"ppc64le\"))\n+ * @requires ((os.arch == \"aarch64\")|(os.arch == \"ppc64le\"))\n@@ -98,1 +98,0 @@\n-\n@@ -176,1 +175,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/nio\/MappedByteBuffer\/PmemTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354522\n+ * @summary Check for cloning interference\n+ * @library \/test\/lib\n+ * @run junit\/othervm --add-opens=java.base\/java.text=ALL-UNNAMED CloneTest\n+ *\/\n+\n+import jtreg.SkippedException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CloneTest {\n+\n+    \/\/ Note: this is a white-box test that may fail if the implementation is changed\n+    @Test\n+    public void testClone() {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        new CloneTester(df).testClone();\n+    }\n+\n+    \/\/ Note: this is a white-box test that may fail if the implementation is changed\n+    @Test\n+    public void testCloneAfterInit() {\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+\n+        \/\/ This initial use of the formatter initialises its internal state, which could\n+        \/\/ subsequently be shared across clones. This is key to reproducing this specific\n+        \/\/ issue.\n+        String _ = df.format(Math.PI);\n+        new CloneTester(df).testClone();\n+    }\n+\n+    private static class CloneTester {\n+        private final Field digitListField;\n+        private final Class<?> digitListClass;\n+        private final DecimalFormat original;\n+\n+        public CloneTester(DecimalFormat original) {\n+            this.original = original;\n+            try {\n+                digitListField = DecimalFormat.class.getDeclaredField(\"digitList\");\n+                digitListField.setAccessible(true);\n+\n+                DecimalFormat df = new DecimalFormat();\n+                Object digitList = digitListField.get(df);\n+\n+                digitListClass = digitList.getClass();\n+            } catch (ReflectiveOperationException e) {\n+                throw new SkippedException(\"reflective access in white-box test failed\", e);\n+            }\n+        }\n+\n+        public void testClone() {\n+            try {\n+                DecimalFormat dfClone = (DecimalFormat) original.clone();\n+\n+                Object digits = valFromDigitList(original, \"digits\");\n+                assertNotSame(digits, valFromDigitList(dfClone, \"digits\"));\n+\n+\n+                Object data = valFromDigitList(original, \"data\");\n+                if (data != null) {\n+                    assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+                }\n+\n+                Object tempBuilder = valFromDigitList(original, \"tempBuilder\");\n+                if (tempBuilder != null) {\n+                    assertNotSame(data, valFromDigitList(dfClone, \"data\"));\n+                }\n+\n+                assertEquals(digitListField.get(original), digitListField.get(dfClone));\n+            } catch (ReflectiveOperationException e) {\n+                throw new SkippedException(\"reflective access in white-box test failed\", e);\n+            }\n+        }\n+\n+        private Object valFromDigitList(DecimalFormat df, String fieldName) throws ReflectiveOperationException {\n+            Object digitList = digitListField.get(df);\n+            Field field = digitListClass.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+\n+            return field.get(digitList);\n+        }\n+    }\n+\n+    \/\/ Tests that when DecimalFormat is cloned after use with\n+    \/\/ a long double\/BigDecimal, clones will be independent. This is not an\n+    \/\/ exhaustive test. This tests for the issue of the same DigitList.data\n+    \/\/ array being reused across clones of DecimalFormat.\n+\n+    @Test\n+    public void testCloneIndependence() {\n+        AtomicInteger mismatchCount = new AtomicInteger(0);\n+        DecimalFormat df = new DecimalFormat(\"#\");\n+        CountDownLatch startSignal = new CountDownLatch(1);\n+\n+        \/\/ This initial use of the formatter initialises its internal state, which could\n+        \/\/ subsequently be shared across clones. This is key to reproducing this specific\n+        \/\/ issue.\n+        String _ = df.format(Math.PI);\n+\n+        try (var ex = Executors.newThreadPerTaskExecutor(Thread.ofPlatform().factory())) {\n+            for (int i = 0; i < 5; i++) {\n+                final int finalI = i;\n+                \/\/ Each thread gets its own clone of df\n+                DecimalFormat threadDf = (DecimalFormat) df.clone();\n+                Runnable task = () -> {\n+                    try {\n+                        startSignal.await();\n+                        for (int j = 0; j < 1_000; j++) {\n+                            if (mismatchCount.get() > 0) {\n+                                \/\/ Exit early if mismatch has already occurred\n+                                break;\n+                            }\n+\n+                            int value = finalI * j;\n+                            String dfString = threadDf.format(BigDecimal.valueOf(value));\n+                            String str = String.valueOf(value);\n+                            if (!str.equals(dfString)) {\n+                                mismatchCount.getAndIncrement();\n+                                System.err.println(\"mismatch: str = \" + str + \" dfString = \" + dfString);\n+                                break;\n+                            }\n+                        }\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                };\n+                ex.execute(task);\n+            }\n+            startSignal.countDown(); \/\/ let all tasks start working at the same time\n+        }\n+        assertEquals(0, mismatchCount.get());\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/CloneTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ *      8354343 8354344\n@@ -32,1 +33,15 @@\n- * @run junit ValidateISO4217\n+ * @library \/test\/lib\n+ * @run junit\/othervm -DMOCKED.TIME=setup ValidateISO4217\n+ * @run main\/othervm --patch-module java.base=${test.class.path}\n+ *      -DMOCKED.TIME=check -Djava.util.currency.data=${test.src}\/currency.properties ValidateISO4217\n+ * @run junit\/othervm --patch-module java.base=${test.class.path}\n+ *      -DMOCKED.TIME=true ValidateISO4217\n+ *\/\n+\n+\/* The run invocation order is important. The first invocation will generate\n+ * class files for Currency that mock System.currentTimeMillis() as Long.MAX_VALUE,\n+ * which is required by the subsequent invocations. The second invocation ensures that\n+ * the module patch and mocked time are functioning correctly; it does not run any tests.\n+ * The third invocation using the modded class files via a module patch allow us\n+ * to test any cut-over dates after the transition.\n+ * Valid MOCKED.TIME values are \"setup\", \"check\", and \"true\".\n@@ -37,0 +52,1 @@\n+import java.io.FileOutputStream;\n@@ -38,0 +54,9 @@\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n@@ -41,0 +66,1 @@\n+import java.util.Arrays;\n@@ -48,0 +74,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -87,0 +115,2 @@\n+    \/\/ Special case currencies that should only exist after the cut-over occurs\n+    private static final Set<String> currenciesNotYetDefined = new HashSet<>();\n@@ -116,0 +146,31 @@\n+    private static final String MODULE_PATCH_LOCATION =\n+            System.getProperty(\"test.classes\") + \"\/java\/util\/\";\n+    private static final String MOCKED_TIME = System.getProperty(\"MOCKED.TIME\");\n+\n+    \/\/ Classes that should mock System.currentTimeMillis()\n+    private static final String[] CLASSES =\n+            Stream.concat(\n+                Stream.of(\"Currency.class\"),\n+                Arrays.stream(Currency.class.getDeclaredClasses())\n+                        .map(c -> \"Currency$\" + c.getSimpleName() + \".class\")\n+            ).toArray(String[]::new);\n+\n+    \/\/ \"check\" invocation only runs the main method (and not any tests) to determine if the\n+    \/\/ future time checking is correct\n+    public static void main(String[] args) {\n+        if (MOCKED_TIME.equals(\"check\")) {\n+            \/\/ Check that the module patch class files exist\n+            checkModulePatchExists();\n+            \/\/ Check time is mocked\n+            \/\/ Override for PK=PKR in test\/currency.properties is PKZ - simple\n+            \/\/ Override for PW=USD in test\/currency.properties is MWP - special\n+            assertEquals(\"PKZ\", Currency.getInstance(Locale.of(\"\", \"PK\")).getCurrencyCode(),\n+                    \"Mocked time \/ module patch not working\");\n+            assertEquals(\"MWP\", Currency.getInstance(Locale.of(\"\", \"PW\")).getCurrencyCode(),\n+                    \"Mocked time \/ module patch not working\");\n+            \/\/ Properly working. Do nothing and move to third invocation\n+        } else {\n+            throw new RuntimeException(\n+                    \"Incorrect usage of ValidateISO4217. Main method invoked without proper system property value\");\n+        }\n+    }\n@@ -117,2 +178,0 @@\n-    \/\/ Sets up the following test data:\n-    \/\/ ISO4217Codes, additionalCodes, testCurrencies, codes\n@@ -120,0 +179,63 @@\n+    static void setUp() throws Exception {\n+        checkUsage();\n+        setUpPatchedClasses();\n+        setUpTestingData();\n+    }\n+\n+    \/\/ Enforce correct usage of ValidateISO4217\n+    static void checkUsage() {\n+        if (MOCKED_TIME == null\n+                || (!MOCKED_TIME.equals(\"setup\") && !MOCKED_TIME.equals(\"true\"))) {\n+            throw new RuntimeException(\n+                    \"Incorrect usage of ValidateISO4217. Missing \\\"MOCKED.TIME\\\" system property\");\n+        }\n+        if (MOCKED_TIME.equals(\"true\")) {\n+            checkModulePatchExists();\n+        }\n+    }\n+\n+    static void checkModulePatchExists() {\n+        \/\/ Check that the module patch class files exist\n+        for (String className : CLASSES) {\n+            var file = new File(MODULE_PATCH_LOCATION + className);\n+            assertTrue(file.isFile(), \"Module patch class files missing\");\n+        }\n+    }\n+\n+    \/\/ Patch the relevant classes required for module patch\n+    static void setUpPatchedClasses() throws IOException {\n+        if (MOCKED_TIME.equals(\"setup\")) {\n+            new File(MODULE_PATCH_LOCATION).mkdirs();\n+            for (String s : CLASSES) {\n+                patchClass(s);\n+            }\n+        }\n+    }\n+\n+    \/\/ Mock calls of System.currentTimeMillis() within Currency to Long.MAX_VALUE.\n+    \/\/ This effectively ensures that we are always past any cut-over dates.\n+    private static void patchClass(String name) throws IOException {\n+        CodeTransform codeTransform = (codeBuilder, e) -> {\n+            switch (e) {\n+                case InvokeInstruction i when\n+                        i.owner().asInternalName().equals(\"java\/lang\/System\")\n+                                && i.name().equalsString(\"currentTimeMillis\") ->\n+                    codeBuilder.loadConstant(Long.MAX_VALUE); \/\/ mock\n+                default -> codeBuilder.accept(e);\n+            }\n+        };\n+        MethodTransform methodTransform = MethodTransform.transformingCode(codeTransform);\n+        ClassTransform classTransform = ClassTransform.transformingMethods(methodTransform);\n+        ClassFile cf = ClassFile.of();\n+        byte[] newBytes = cf.transformClass(cf.parse(\n+                Files.readAllBytes(Paths.get(URI.create(\"jrt:\/java.base\/java\/util\/\" + name)))), classTransform);\n+\n+        String patchedClass = MODULE_PATCH_LOCATION + name;\n+        var file = new File(patchedClass);\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            fos.write(newBytes);\n+        }\n+    }\n+\n+    \/\/ Sets up the following test data:\n+    \/\/ ISO4217Codes, additionalCodes, testCurrencies, codes, currenciesNotYetDefined\n@@ -126,0 +248,1 @@\n+        setUpNotYetDefined();\n@@ -172,2 +295,2 @@\n-                \/\/ If the cut-over already passed, use the new curency for ISO4217Codes\n-                if (format.parse(tokens.nextToken()).getTime() < System.currentTimeMillis()) {\n+                \/\/ If the cut-over already passed, use the new currency for ISO4217Codes\n+                if (format.parse(tokens.nextToken()).getTime() < currentTimeMillis()) {\n@@ -178,0 +301,5 @@\n+                } else {\n+                    \/\/ Add all future currencies to the set.\n+                    \/\/ We process it later once 'testCurrencies' is complete\n+                    \/\/ to only include ones that should not be defined yet.\n+                    currenciesNotYetDefined.add(tokens.nextToken());\n@@ -223,0 +351,11 @@\n+    \/\/ Future currencies that are already defined as ISO 4217 codes should be\n+    \/\/ removed. For example, in CW=ANG;2025-04-01-04-00-00;EUR \"EUR\" would be\n+    \/\/ removed as it is an already valid ISO 4217 code\n+    private static void setUpNotYetDefined() {\n+        var allFutureCurrencies = testCurrencies\n+                .stream()\n+                .map(Currency::getCurrencyCode)\n+                .collect(Collectors.toSet());\n+        currenciesNotYetDefined.removeIf(allFutureCurrencies::contains);\n+    }\n+\n@@ -303,0 +442,12 @@\n+    \/\/ Any future currencies that do not already exist before the cut-over\n+    \/\/ should not be instantiable. This scenario is when a country transfers\n+    \/\/ to a new code, that is not already a valid ISO 4217 code. For example,\n+    \/\/ what occurred in the 176 update situation.\n+    @Test\n+    public void nonDefinedFutureCurrenciesTest() {\n+        for (String curr : currenciesNotYetDefined) {\n+            assertThrows(IllegalArgumentException.class, () -> Currency.getInstance(curr),\n+                    \"The future cut-over currency: %s should not exist\".formatted(curr));\n+        }\n+    }\n+\n@@ -311,0 +462,2 @@\n+        \/\/ Implicitly checks that jreCurrencies does not contain any currencies\n+        \/\/ defined in currenciesNotYetDefined\n@@ -323,0 +476,6 @@\n+\n+    \/\/ Either the current system time, or a mocked value equal to Long.MAX_VALUE\n+    static long currentTimeMillis() {\n+        var mocked = MOCKED_TIME.equals(\"true\");\n+        return mocked ? Long.MAX_VALUE : System.currentTimeMillis();\n+    }\n","filename":"test\/jdk\/java\/util\/Currency\/ValidateISO4217.java","additions":165,"deletions":6,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -16,0 +16,2 @@\n+PK=PKZ,999,0,3000-01-01T00:00:00\n+PW=MWP,999,0,5000-01-01T00:00:00\n","filename":"test\/jdk\/java\/util\/Currency\/currency.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,1 @@\n+        sslServerSocket.setEnabledProtocols(new String[]{\"TLSv1.2\"});\n","filename":"test\/jdk\/javax\/net\/ssl\/HttpsURLConnection\/CriticalSubjectAltName.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,1 +248,1 @@\n-        \/\/ the test case if the serer is not ready.\n+        \/\/ the test case if the server is not ready.\n@@ -381,1 +381,1 @@\n-            \/\/ If both failed, return the curthread's exception.\n+            \/\/ If both failed, return the current thread's exception.\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketTemplate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @summary Crash in javasound while running TicTacToe demo applet tiger b26\n+ * @summary Crash in javasound while running TicTacToe demo tiger b26\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/ClipFlushCrash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @summary Applet hang when you load it during sound card is in use\n+ * @summary App hang when you load it during sound card is in use\n","filename":"test\/jdk\/javax\/sound\/sampled\/LinuxBlock\/PlaySine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -38,1 +40,2 @@\n-import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -50,1 +53,2 @@\n-    private static Icon RED, GREEN;\n+    private static Icon RED;\n+    private static Icon GREEN;\n@@ -57,0 +61,3 @@\n+    private static int ROLLOVER_Y_OFFSET = 4;\n+    private static CountDownLatch frameGainedFocusLatch =\n+        new CountDownLatch(1);\n@@ -62,0 +69,5 @@\n+            f.requestFocus();\n+            if (!frameGainedFocusLatch.await(5, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Waited too long, but can't gain\" +\n+                    \" focus for frame\");\n+            }\n@@ -63,1 +75,0 @@\n-            robot.delay(1000);\n@@ -81,3 +92,3 @@\n-    private static void createTestImages() throws IOException {\n-        int imageWidth = 32;\n-        int imageHeight = 32;\n+    private static void createTestImages() {\n+        int imageWidth = 100;\n+        int imageHeight = 100;\n@@ -117,0 +128,6 @@\n+            f.addFocusListener(new FocusAdapter() {\n+                @Override\n+                public void focusGained(FocusEvent e) {\n+                    frameGainedFocusLatch.countDown();\n+                }\n+            });\n@@ -126,1 +143,2 @@\n-    private static void testEnabledButton(AbstractButton button) throws Exception {\n+    private static void testEnabledButton(AbstractButton button)\n+        throws Exception {\n@@ -134,1 +152,1 @@\n-            buttonLocation.y + buttonHeight \/ 2 );\n+            buttonLocation.y + ROLLOVER_Y_OFFSET);\n@@ -144,1 +162,2 @@\n-    private static void testDisabledButton(AbstractButton button) throws Exception {\n+    private static void testDisabledButton(AbstractButton button)\n+        throws Exception {\n@@ -151,3 +170,1 @@\n-        robot.mouseMove(buttonLocation.x + buttonWidth \/ 2,\n-            buttonLocation.y + buttonHeight \/ 2 );\n-        robot.delay(1000);\n+        robot.delay(200);\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4133768.java","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4514071\n+ * @summary Tests that JTable, JList and JTree provide drag-over feedback.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DragOverFeedbackTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.BorderFactory;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JTable;\n+import javax.swing.JTree;\n+import javax.swing.TransferHandler;\n+\n+public class DragOverFeedbackTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test is designed to make sure that JTable, JTree, and JList\n+        provide visual feedback when a DnD drag operation occurs over them.\n+\n+        Click on the label where it says \"DRAG FROM HERE\" and begin dragging.\n+        Drag over each of the three components (JTable, JTree, JList).\n+        While you're dragging over them, they should visually indicate the\n+        location where a drop would occur. This visual indication may use the\n+        selection but could be some other visual.\n+\n+        If above is true press PASS else press FAIL.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(DragOverFeedbackTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final TransferHandler handler = new TransferHandler() {\n+        public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n+            return true;\n+        }\n+    };\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"DragOverFeedbackTest\");\n+        final JLabel label = new JLabel(\"DRAG FROM HERE\");\n+        label.setPreferredSize(new Dimension(400, 25));\n+        label.setTransferHandler(new TransferHandler(\"text\"));\n+        label.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                label.getTransferHandler().exportAsDrag(label, me, TransferHandler.COPY);\n+            }\n+        });\n+        JTable table = new JTable(\n+                            new String[][] {{\"one\"}, {\"two\"}, {\"three\"}, {\"four\"}},\n+                            new String[] {\"1\"});\n+        table.setRowSelectionInterval(1, 1);\n+        table.setTransferHandler(handler);\n+\n+        JList list = new JList(new String[] {\"one\", \"two\", \"three\", \"four\"});\n+        list.setSelectedIndex(1);\n+        list.setTransferHandler(handler);\n+\n+        JTree tree = new JTree();\n+        tree.setSelectionRow(1);\n+        tree.setTransferHandler(handler);\n+\n+        frame.add(label, BorderLayout.NORTH);\n+\n+        JPanel wrapper = new JPanel();\n+        wrapper.setLayout(new GridLayout(3, 1));\n+        table.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(table);\n+        list.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(list);\n+        tree.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(tree);\n+        frame.add(wrapper);\n+        frame.setSize(500, 500);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/DragOverFeedbackTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4546134\n+ * @summary Tests that JList shows the right drop location when it has multiple columns.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListDragOverFeedbackTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.BorderFactory;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.TransferHandler;\n+\n+public class ListDragOverFeedbackTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        JList should provide visual feedback when a DnD drag operation is\n+        occurring over it. This test is to check that it provides the\n+        feedback about the drop location correctly.\n+\n+        Click on the label where it says \"DRAG FROM HERE\" and begin dragging.\n+        Drag over each column in each of the three JLists and make sure that\n+        the drop location indicated is appropriate for the mouse location. For\n+        instance, if the mouse is in the first column, the drop location should\n+        also be indicated in that first column.\n+\n+        If above is true press PASS else press FAIL.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(ListDragOverFeedbackTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final TransferHandler handler = new TransferHandler() {\n+        public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n+            return true;\n+        }\n+    };\n+\n+    private static JFrame createTestUI() {\n+        String[] vals = new String[] {\n+                \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+                \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"};\n+\n+        JFrame frame = new JFrame(\"ListDragOverFeedbackTest\");\n+        final JLabel label = new JLabel(\"DRAG FROM HERE\");\n+        label.setPreferredSize(new Dimension(400, 25));\n+        label.setTransferHandler(new TransferHandler(\"text\"));\n+        label.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                label.getTransferHandler().exportAsDrag(label, me,\n+                                              TransferHandler.COPY);\n+            }\n+        });\n+\n+        JList list1 = new JList(vals);\n+        list1.setTransferHandler(handler);\n+        list1.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JList list2 = new JList(vals);\n+        list2.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        list2.setTransferHandler(handler);\n+        list2.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JList list3 = new JList(vals);\n+        list3.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n+        list3.setTransferHandler(handler);\n+        list3.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JPanel wrapper = new JPanel();\n+        wrapper.setLayout(new GridLayout(3, 1));\n+        wrapper.add(list1);\n+        wrapper.add(list2);\n+        wrapper.add(list3);\n+\n+        frame.add(label, BorderLayout.NORTH);\n+        frame.add(wrapper);\n+        frame.setSize(400, 500);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/ListDragOverFeedbackTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4655513\n+ * @summary TransferHandler doesn't recognize ACTION_LINK\n+            as a valid drop action\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main bug4655513\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4655513 {\n+    private static final String LINK_URL = \"http:\/\/www.example.com\";\n+    private static volatile JEditorPane editor;\n+    private static volatile JLabel dragSource;\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(bug4655513::createAndShowGUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Point dragStartLoc = Util.getCenterPoint(dragSource);\n+            Point dragEndLoc = Util.getCenterPoint(editor);\n+            robot.mouseMove(dragStartLoc.x, dragStartLoc.y);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            for (int y = dragStartLoc.y; y < dragEndLoc.y; y += 3) {\n+                robot.mouseMove(dragStartLoc.x, y);\n+                robot.delay(50);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (!editor.getText().contains(LINK_URL)) {\n+                    throw new RuntimeException(\"Test Failed! Drag & Drop did not work.\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new JFrame(\"Bug4655513 - Data Transfer\");\n+        dragSource = new JLabel(\"To Test DnD, drag this label.\");\n+        dragSource.setForeground(Color.RED);\n+        dragSource.setPreferredSize(new Dimension(250, 50));\n+        frame.add(dragSource, BorderLayout.NORTH);\n+\n+        editor = new JEditorPane(\"text\/plain\", \"Drop here.\");\n+        editor.setPreferredSize(new Dimension(250, 50));\n+        frame.add(new JScrollPane(editor), BorderLayout.CENTER);\n+\n+        DragSource ds = new DragSource();\n+        DragGestureRecognizer rec =\n+            ds.createDefaultDragGestureRecognizer(dragSource,\n+                    DnDConstants.ACTION_LINK,\n+                    dge -> dge.startDrag(null, new StringSelection(LINK_URL)));\n+        frame.setSize(300, 150);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/bug4655513.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4151763\n+ * @summary Tests that button icon is not drawn upon button border\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @run main\/manual bug4151763\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.UIManager;\n+import javax.swing.border.CompoundBorder;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.border.LineBorder;\n+import jtreg.SkippedException;\n+\n+public class bug4151763 {\n+    private static final int IMAGE_SIZE = 150;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Verify that image icon is NOT painted outside\n+            the black rectangle.\n+\n+            If above is true press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4151763::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new SkippedException(\"Unsupported LaF\", e);\n+        }\n+\n+        JFrame frame = new JFrame(\"bug4151763\");\n+        final JButton b = new JButton(createImageIcon());\n+        b.setBorder(new CompoundBorder(\n+                           new EmptyBorder(20, 20, 20, 20),\n+                           new LineBorder(Color.BLACK)));\n+        b.setPreferredSize(new Dimension(100, 100));\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(b);\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+\n+    private static ImageIcon createImageIcon() {\n+        BufferedImage redImg = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE,\n+                                                 BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = redImg.createGraphics();\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, IMAGE_SIZE, IMAGE_SIZE);\n+        g.dispose();\n+        return new ImageIcon(redImg);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/bug4151763.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4415505\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests JButton appearance under Windows LAF\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4415505\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JToggleButton;\n+import javax.swing.UIManager;\n+\n+public class bug4415505 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            <html>\n+            <p>This test is for Windows LaF.\n+            Press the button named \"Button\" using mouse and check that it has\n+            \"pressed\" look. It should look like the selected toggle button\n+            near it.<\/p>\n+\n+            <p>If above is true press PASS else FAIL.<\/p>\n+            <html>\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows(5)\n+                .columns(40)\n+                .testUI(bug4415505::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JButton button = new JButton(\"Button\");\n+        button.setFocusPainted(false);\n+        JToggleButton tbutton = new JToggleButton(\"ToggleButton\");\n+        tbutton.setSelected(true);\n+\n+        JFrame jFrame = new JFrame(\"bug4415505\");\n+        jFrame.setLayout(new FlowLayout(FlowLayout.CENTER));\n+        jFrame.add(button);\n+        jFrame.add(tbutton);\n+        jFrame.setSize(300, 100);\n+        return jFrame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/bug4415505.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4978274\n+ * @summary Tests that JButton is painted with same visible height\n+ *          as toggle buttons\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4978274\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JToggleButton;\n+import javax.swing.UIManager;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import javax.swing.plaf.metal.OceanTheme;\n+\n+public class bug4978274 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The toggle buttons must be painted to the same visible\n+            height as button. In addition to that verify the following:\n+\n+            a) All three buttons - \"Button\", \"Toggle Btn\" and\n+               \"Selected Toggle Btn\" have the same border.\n+\n+            b) Verify that when \"Button\" is pressed and moused over\n+               it has the EXACT same border as \"Toggle Btn\" and\n+               \"Selected Toggle Btn\" on press & mouse over.\n+\n+            c) Click to the test window (panel) to disable\/enable all\n+               three buttons. In disabled state verify that all three\n+               buttons have the exact same border.\n+\n+            If all of the above conditions are true press PASS, else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        MetalLookAndFeel.setCurrentTheme(new OceanTheme());\n+        UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(createAndShowUI())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JFrame frame = new JFrame(\"bug4978274\");\n+        frame.setLayout(new BorderLayout());\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.setBorder(new EmptyBorder(12, 12, 12, 12));\n+        JButton jButton = new JButton(\"Button\");\n+        JToggleButton jToggleButton = new JToggleButton(\"Selected Toggle Btn\");\n+        jToggleButton.setSelected(true);\n+\n+        panel.add(jButton);\n+        panel.add(new JToggleButton(\"Toggle Btn\"));\n+        panel.add(jToggleButton);\n+\n+        panel.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent event) {\n+              jButton.setEnabled(!jButton.isEnabled());\n+              jToggleButton.setEnabled(jButton.isEnabled());\n+                for(int i = 0; i < panel.getComponentCount(); i++) {\n+                    panel.getComponent(i).setEnabled(jButton.isEnabled());\n+                }\n+            }\n+        });\n+\n+        frame.add(panel);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/bug4978274.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4135833\n+ * @summary Tests that JComboBox draws correctly if the first item in list is an empty string\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4135833\n+ *\/\n+\n+public class bug4135833 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Press the combo box. If the popup is readable and appears to be sized properly,\n+            then it passes. The First item is blank intentionally.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4135833::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4135833\");\n+        JPanel panel = new JPanel();\n+        JComboBox comboBox = new JComboBox(new Object[]{\"\", \"Bob\", \"Hank\", \"Joe\", \"Fred\"});\n+        panel.add(comboBox);\n+        frame.add(panel);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4135833.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4139900\n+ * @summary height of combobox may differ\n+ * @key headful\n+ * @run main bug4139900\n+*\/\n+\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import javax.swing.DefaultComboBoxModel;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4139900 {\n+    static JButton button;\n+    static JFrame frame;\n+    static JComboBox<String> comboBox;\n+    static int initialHeight;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(bug4139900::init);\n+            test();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        SwingUtilities.invokeAndWait(() -> initialHeight = comboBox.getHeight());\n+\n+        for (int i = 0; i < 10; i++) {\n+            SwingUtilities.invokeAndWait(() -> button.doClick());\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (comboBox.getHeight() != initialHeight) {\n+                    throw new RuntimeException(\n+                            \"Test failed: height differs from initial %d != %d\"\n+                                    .formatted(comboBox.getHeight(), initialHeight)\n+                    );\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void init() {\n+        frame = new JFrame(\"bug4139900\");\n+\n+        DefaultComboBoxModel<String> model =\n+                new DefaultComboBoxModel<>(new String[]{\n+                        \"Coma Berenices\",\n+                        \"Triangulum\",\n+                        \"Camelopardis\",\n+                        \"Cassiopea\"\n+                });\n+\n+        comboBox = new JComboBox<>();\n+        comboBox.setEditable(true);\n+\n+        button = new JButton(\"Add\/Remove Items\");\n+\n+        ActionListener actionListener = e -> {\n+            if (comboBox.getModel() == model) {\n+                comboBox.setModel(new DefaultComboBoxModel<>());\n+            } else {\n+                comboBox.setModel(model);\n+            }\n+        };\n+\n+        button.addActionListener(actionListener);\n+\n+        JPanel panel = new JPanel();\n+        panel.setPreferredSize(new Dimension(300, 100));\n+        panel.add(comboBox);\n+        panel.add(button);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4139900.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4166593\n+ * @summary Tests that JComboBox fires action events every time the user does an action\n+ * @key headful\n+ * @run main bug4166593\n+ *\/\n+\n+public class bug4166593 {\n+    static JFrame frame;\n+    static JComboBox comboBox;\n+    static volatile int numberOfActionEvents = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ change selected index 3 times\n+            SwingUtilities.invokeAndWait(() -> {\n+                comboBox.setSelectedIndex(1);\n+                comboBox.setSelectedIndex(3);\n+                comboBox.setSelectedIndex(2);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            if (numberOfActionEvents != 3) {\n+                throw new RuntimeException(\"Unexpected number of Action Events!\\n\" +\n+                        \"Expected: 3\\nActual: \" + numberOfActionEvents);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        comboBox = new JComboBox(new Object[]{\n+                \"Bob\", \"Fred\", \"Hank\", \"Joe\", \"Mildred\", \"Agatha\", \"Buffy\"\n+        });\n+        JPanel panel = new JPanel();\n+        JLabel label = new JLabel(\"0\");\n+        frame = new JFrame(\"bug4166593\");\n+        comboBox.setEditable(true);\n+\n+        ActionListener actionCounter = e -> {\n+            ++numberOfActionEvents;\n+            label.setText(Integer.toString(numberOfActionEvents));\n+        };\n+\n+        comboBox.addActionListener(actionCounter);\n+\n+        panel.add(comboBox);\n+        panel.add(label);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4166593.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4171819\n+ * @summary Tests that JComboBox uses a lower bevel border in windows\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4171819\n+ *\/\n+\n+public class bug4171819 {\n+    static boolean lafOk = true;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test is for Windows L&F only. If you see\n+            \"No Windows L&F installed\" label just press \"Pass\".\n+\n+            Look at the combo box.  If the border around it looks like it's\n+            lowered rather than raised, it passes the test.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4171819::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+            System.out.println(\"succeeded\");\n+        } catch (Exception e) {\n+            System.err.println(\"Couldn't load the Windows Look and Feel\");\n+            lafOk = false;\n+        }\n+\n+        JFrame frame = new JFrame(\"bug4171819\");\n+        JPanel panel = new JPanel();\n+        JComboBox comboBox;\n+\n+        if (lafOk) {\n+            comboBox = new JComboBox(new Object[]{\n+                    \"Coma Berenices\",\n+                    \"Triangulum\",\n+                    \"Camelopardis\",\n+                    \"Cassiopea\"});\n+            panel.add(comboBox);\n+        } else {\n+            JLabel label = new JLabel(\"No Windows L&F installed\");\n+            panel.add(label);\n+        }\n+        frame.add(panel);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4171819.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4174876\n+ * @summary JComboBox tooltips do not work properly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4174876\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JPanel;\n+\n+public class bug4174876 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Hold the mouse over both combo boxes.\n+            A tool tip should appear over every area of both of them.\n+            Notably, if you hold the mouse over the button on the right one,\n+            a tool tip should appear.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"TransparentTitleTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .splitUIBottom(bug4174876::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JComponent createTestUI() {\n+        JComboBox<String> comboBox1 = new JComboBox<>(new String[]{\n+                \"Coma Berenices\",\n+                \"Triangulum\",\n+                \"Camelopardis\",\n+                \"Cassiopea\"\n+        });\n+        JComboBox<String> comboBox2 = new JComboBox<>(new String[]{\n+                \"Coma Berenices\",\n+                \"Triangulum\",\n+                \"Camelopardis\",\n+                \"Cassiopea\"\n+        });\n+\n+        comboBox1.setToolTipText(\"Combo Box #1\");\n+        comboBox2.setToolTipText(\"Combo Box #2\");\n+        comboBox2.setEditable(true);\n+\n+        JPanel panel = new JPanel();\n+        panel.add(comboBox1);\n+        panel.add(comboBox2);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4174876.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import javax.swing.DefaultComboBoxModel;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.ListDataEvent;\n+import javax.swing.event.ListDataListener;\n+\n+\/*\n+ * @test\n+ * @bug 4180054\n+ * @summary Tests that DefaultComboBoxModel doesn't fire a \"contents changed\" unnecessarily\n+ * @key headful\n+ * @run main bug4180054\n+ *\/\n+\n+public class bug4180054 {\n+    static JFrame frame;\n+    static JComboBox comboBox;\n+    static volatile int numberOfContentsChangedEvents = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ change selected index 3 times\n+            SwingUtilities.invokeAndWait(() -> {\n+                comboBox.setSelectedIndex(1);\n+                comboBox.setSelectedIndex(3);\n+                comboBox.setSelectedIndex(2);\n+                comboBox.setSelectedIndex(2);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            if (numberOfContentsChangedEvents != 3) {\n+                throw new RuntimeException(\"Unexpected number of Contents Changed Events!\\n\" +\n+                        \"Expected: 3\\nActual: \" + numberOfContentsChangedEvents);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4180054\");\n+        JPanel panel = new JPanel();\n+        JLabel label = new JLabel(\"0\");\n+\n+        DefaultComboBoxModel model = new DefaultComboBoxModel();\n+        for (int i = 0; i < 100; ++i) {\n+            model.addElement(Integer.toString(i));\n+        }\n+        comboBox = new JComboBox(model);\n+        comboBox.setEditable(true);\n+\n+        ListDataListener contentsCounter = new ListDataListener() {\n+            public void contentsChanged(ListDataEvent e) {\n+                ++numberOfContentsChangedEvents;\n+                label.setText(Integer.toString(numberOfContentsChangedEvents));\n+            }\n+\n+            public void intervalAdded(ListDataEvent e) {\n+            }\n+\n+            public void intervalRemoved(ListDataEvent e) {\n+            }\n+        };\n+\n+        comboBox.getModel().addListDataListener(contentsCounter);\n+\n+        panel.add(comboBox);\n+        panel.add(label);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4180054.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4185024\n+ * @summary Tests that Heavyweight combo boxes on JDesktop work correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4185024\n+ *\/\n+\n+public class bug4185024 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on the JComboBox button inside the JInternalFrame to bring up the menu.\n+            Select one of the menu items and verify that the choice is highlighted correctly.\n+            Click and drag the menu's scroll bar down and verify that it causes the menu to scroll down.\n+\n+            Inside JInternalFrame:\n+            This test is for the JComboBox in the JInternalFrame.\n+            To test, please click on the combobox and check the following:\n+            Does the selection in the popup list follow the mouse?\n+            Does the popup list respond to clicking and dragging the scroll bar?\n+            If so, press PASS, otherwise, press FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4185024::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4185024\");\n+        JPanel p = new JPanel();\n+        p.setLayout(new BorderLayout());\n+        JDesktopPane desktop = new JDesktopPane();\n+        p.add(desktop);\n+        frame.add(p);\n+\n+        JComboBox months = new JComboBox();\n+        months.addItem(\"January\");\n+        months.addItem(\"February\");\n+        months.addItem(\"March\");\n+        months.addItem(\"April\");\n+        months.addItem(\"May\");\n+        months.addItem(\"June\");\n+        months.addItem(\"July\");\n+        months.addItem(\"August\");\n+        months.addItem(\"September\");\n+        months.addItem(\"October\");\n+        months.addItem(\"November\");\n+        months.addItem(\"December\");\n+        months.getAccessibleContext().setAccessibleName(\"Months\");\n+        months.getAccessibleContext().setAccessibleDescription(\"Choose a month of the year\");\n+\n+        \/\/ Set this to true and the popup works correctly...\n+        months.setLightWeightPopupEnabled(false);\n+\n+        addFrame(\"Months\", desktop, months);\n+\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+\n+    private static void addFrame(String title, JDesktopPane desktop, JComponent component) {\n+        JInternalFrame jf = new JInternalFrame(title);\n+        Point newPos = new Point(20, 20);\n+        jf.setResizable(true);\n+        jf.add(component);\n+        jf.setLocation(newPos);\n+        desktop.add(jf);\n+\n+        jf.pack();\n+        jf.show();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4185024.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4201964\n+ * @summary Tests that JComboBox's arrow button isn't drawn too wide in Windows Look&Feel\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4201964\n+ *\/\n+\n+public class bug4201964 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Does the arrow look too large?  If not, it passes.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            PassFailJFrame.forceFail(\"Couldn't load the Windows look and feel.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows(8)\n+                .columns(30)\n+                .testUI(bug4201964::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4201964\");\n+        JPanel panel = new JPanel();\n+        JComboBox comboBox;\n+\n+        comboBox = new JComboBox(new Object[]{\n+                \"Coma Berenices\",\n+                \"Triangulum\",\n+                \"Camelopardis\",\n+                \"Cassiopea\"});\n+\n+        panel.add(comboBox);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4201964.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4212498\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4212498\n+ *\/\n+\n+public class bug4212498 {\n+    static JPanel panel = new JPanel();\n+    static JComboBox comboBox = new JComboBox(new Object[]{\n+            \"Coma Berenices\",\n+            \"Triangulum\",\n+            \"Camelopardis\",\n+            \"Cassiopea\"});\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Edit the value in the text field (without using the popup)\n+            and then press the tab key. If the number doesn't increase,\n+            then test fails.\n+\n+            Also, try tabbing out without making a change. The number\n+            should NOT increase unless the user changes something.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4212498::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4212498\");\n+        comboBox.setEditable(true);\n+\n+        final JLabel label = new JLabel(\"0\");\n+\n+        ActionListener actionListener =\n+                e -> label.setText(\"\" + (Integer.parseInt(label.getText()) + 1));\n+\n+        comboBox.addActionListener(actionListener);\n+\n+        panel.add(comboBox);\n+        panel.add(label);\n+        panel.add(new JButton(\"B\"));\n+\n+        frame.getContentPane().add(panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4212498.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.BoxLayout;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4248128 7148092\n+ * @summary Tests that alt+down arrow pulls down JComboBox popup\n+ * @key headful\n+ * @run main bug4248128\n+ *\/\n+\n+public class bug4248128 {\n+    static JFrame frame;\n+    static volatile JComboBox combo;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (!combo.isPopupVisible()) {\n+                    throw new RuntimeException(\"Popup did not appear.\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"4248128 Test\");\n+        Object[] fruits = {\"Banana\", \"Pear\", \"Apple\"};\n+        combo = new JComboBox(fruits);\n+        frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.X_AXIS));\n+        frame.add(combo);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4248128.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4249732\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that Windows editable combo box selects text picked from its list\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4249732\n+ *\/\n+\n+public class bug4249732 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on combo box arrow button to open its dropdown list, and\n+            select an item from there. The text in the combo box editor should\n+            be selected, otherwise test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            PassFailJFrame.forceFail(\"Couldn't load the Windows look and feel.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows(8)\n+                .columns(40)\n+                .testUI(bug4249732::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4249732\");\n+\n+        JComboBox cb = new JComboBox(new Object[]{\"foo\", \"bar\", \"baz\"});\n+        cb.setEditable(true);\n+\n+        frame.add(cb, BorderLayout.NORTH);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4249732.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4368848\n+ * @summary Tests that mouse wheel events cancel popups\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4368848\n+ *\/\n+\n+public class bug4368848 {\n+    static final String[] names = {\"First Name\", \"Last Name\", \"Veggy\"};\n+    static Object[][] data = {\n+            {\"Mark\", \"Andrews\", false},\n+            {\"Tom\", \"Ball\", false},\n+            {\"Alan\", \"Chung\", false},\n+            {\"Jeff\", \"Dinkins\", false},\n+            {\"Amy\", \"Fowler\", false},\n+            {\"Brian\", \"Gerhold\", false},\n+            {\"James\", \"Gosling\", false},\n+            {\"David\", \"Karlton\", false},\n+            {\"Dave\", \"Kloba\", false},\n+            {\"Peter\", \"Korn\", false},\n+            {\"Phil\", \"Milne\", false},\n+            {\"Dave\", \"Moore\", false},\n+            {\"Hans\", \"Muller\", false},\n+            {\"Rick\", \"Levenson\", false},\n+            {\"Tim\", \"Prinzing\", false},\n+            {\"Chester\", \"Rose\", false},\n+            {\"Ray\", \"Ryan\", false},\n+            {\"Georges\", \"Saab\", false},\n+            {\"Willie\", \"Walker\", false},\n+            {\"Kathy\", \"Walrath\", false},\n+            {\"Arnaud\", \"Weber\", false}\n+    };\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click any cell in the 'Veggy' column, so that combo box appears.\n+            Make sure mouse pointer is over the table, but _not_ over the combo\n+            box. Try scrolling the table using the mouse wheel. The combo popup\n+            should disappear. If it stays visible, test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4368848::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4368848\");\n+        ExampleTableModel dataModel = new ExampleTableModel();\n+\n+        JComboBox _editor = new JComboBox();\n+        _editor.addItem(false);\n+        _editor.addItem(true);\n+\n+        JTable tableView = new JTable(dataModel);\n+        tableView.setDefaultEditor(Boolean.class, new DefaultCellEditor(_editor));\n+\n+        frame.add(new JScrollPane(tableView));\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+\n+    static class ExampleTableModel extends AbstractTableModel {\n+        \/\/ These methods always need to be implemented.\n+        @Override\n+        public int getColumnCount() {\n+            return names.length;\n+        }\n+\n+        @Override\n+        public int getRowCount() {\n+            return data.length;\n+        }\n+\n+        public Object getValueAt(int row, int col) {\n+            return data[row][col];\n+        }\n+\n+        @Override\n+        public boolean isCellEditable(int row, int col) {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getColumnName(int column) {\n+            return names[column];\n+        }\n+\n+        @Override\n+        public Class getColumnClass(int col) {\n+            return getValueAt(0, col).getClass();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4368848.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.InputEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4436376\n+ * @key headful\n+ * @summary Tests that ComboBox items can't be deselected with Ctrl+click\n+ * @run main bug4436376\n+ *\/\n+\n+public class bug4436376 {\n+    static JFrame frame;\n+    static volatile Point p;\n+    static volatile JComboBox combo;\n+\n+    final static int SELECTED_INDEX = 2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> p = combo.getLocationOnScreen());\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(p.x + 10, p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (combo.getSelectedIndex() != SELECTED_INDEX) {\n+                    throw new RuntimeException(\"Failed: selected index has been changed\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4436376\");\n+        String[] items = new String[]{\"One\", \"Two\", \"Three\", \"Four\"};\n+        combo = new JComboBox(items);\n+        combo.setSelectedIndex(SELECTED_INDEX);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(combo);\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4436376.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4459267\n+ * @summary Tests that pressing PageUp in combo popup list doesn't cause\n+ *          stack overflow\n+ * @key headful\n+ * @run main bug4459267\n+ *\/\n+\n+public class bug4459267 {\n+    static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            robot.keyPress(KeyEvent.VK_PAGE_UP);\n+            robot.keyRelease(KeyEvent.VK_PAGE_UP);\n+            robot.waitForIdle();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4459267\");\n+        JComboBox jcmb = new JComboBox();\n+        jcmb.addItem(\"JComobo1\");\n+        jcmb.addItem(\"Item2\");\n+        jcmb.addItem(\"Item3\");\n+        frame.getContentPane().add(jcmb, BorderLayout.NORTH);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4459267.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4474400\n+ * @summary Tests JTextArea wrapping with font change\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4474400\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+\n+public class bug4474400 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Press the \"Change Font\" button. The two lines of text should be\n+            properly drawn using the larger font, there should be empty line\n+            between them. If display is garbled, test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4474400 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .splitUIRight(bug4474400::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JComponent createTestUI() {\n+        Font smallFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n+        Font largeFont = new Font(\"SansSerif\", Font.PLAIN, 36);\n+\n+        JTextArea textArea = new JTextArea(\"This is the first line\\n\\nThis is the third line\");\n+        textArea.setFont(smallFont);\n+        textArea.setEditable(false);\n+        textArea.setLineWrap(true);\n+        textArea.setWrapStyleWord(true);\n+\n+        JButton b = new JButton(\"Change Font\");\n+        b.addActionListener((e) -> textArea.setFont(largeFont));\n+\n+        JPanel panel = new JPanel(new BorderLayout());\n+        panel.setPreferredSize(new Dimension(200, 300));\n+        panel.add(textArea, BorderLayout.CENTER);\n+        panel.add(b, BorderLayout.SOUTH);\n+\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4474400.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4519269\n+ * @summary Tests that DefaultKeySelectionManager doesn't throw NPE\n+ * @key headful\n+ * @run main bug4519269\n+ *\/\n+\n+public class bug4519269 {\n+    static JFrame frame;\n+    static JComboBox combo;\n+    static Point p;\n+    static Object[] data = {new CustomString(\"Item 1\"), new CustomString(\"Item 2\"),\n+            new CustomString(\"Item 3\"), new CustomString(\"Item 4\")};\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> p = combo.getLocationOnScreen());\n+            robot.mouseMove(p.x + 5, p.y + 5);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.waitForIdle();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4519269\");\n+        combo = new JComboBox(data);\n+        frame.getContentPane().add(combo);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static class CustomString {\n+        String string;\n+\n+        public CustomString(String s) {\n+            string = s;\n+        }\n+\n+        public String toString() {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4519269.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+\n+\/*\n+ * @test\n+ * @bug 4530952\n+ * @summary Tests that double mouse clicks invoke Event\n+ * @key headful\n+ * @run main bug4530952\n+ *\/\n+\n+public class bug4530952 {\n+    static JFrame frame;\n+    static JButton btnAction;\n+    static JComboBox cmbAction;\n+    static volatile Point loc;\n+    static volatile Dimension btnSize;\n+\n+    private static volatile boolean flag;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ enter some text in combo box\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ find and click action button\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = btnAction.getLocationOnScreen();\n+                btnSize = btnAction.getSize();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            robot.mouseMove(loc.x + btnSize.width \/ 2,\n+                    loc.y + btnSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!flag) {\n+                throw new RuntimeException(\"Failed: button action was not fired\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4530952\");\n+        frame.setLayout(new FlowLayout());\n+\n+        btnAction = new JButton(\"Action\");\n+        cmbAction = new JComboBox();\n+\n+        flag = false;\n+\n+        ActionListener al = e -> flag = true;\n+        DocumentListener dl = new DocumentListener() {\n+            @Override\n+            public void changedUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+\n+            @Override\n+            public void insertUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+\n+            @Override\n+            public void removeUpdate(DocumentEvent evt) {\n+                resetButtons();\n+            }\n+        };\n+\n+        \/\/ Add an editable combo box\n+        cmbAction.setEditable(true);\n+        frame.add(cmbAction);\n+\n+        btnAction.setEnabled(false);\n+        frame.add(btnAction);\n+\n+        btnAction.addActionListener(al);\n+        ((JTextField) cmbAction.getEditor().getEditorComponent()).\n+                getDocument().addDocumentListener(dl);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void resetButtons() {\n+        int length = ((JTextField) cmbAction.getEditor().getEditorComponent()).\n+                getDocument().getLength();\n+        btnAction.setEnabled(length > 0);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4530952.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4530953\n+ * @summary Tests that highlighted Item appears after automatically scrolling to the item\n+ * @key headful\n+ * @run main bug4530953\n+ *\/\n+\n+public class bug4530953 {\n+    static JFrame frame;\n+    static JComboBox combo;\n+    static String[] data = {\"Apple\", \"Orange\", \"Cherry\"};\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ enter some text in combo box editor\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            \/\/ select orange in combo box\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            String currSelection = (String) combo.getEditor().getItem();\n+            if (!currSelection.equals(\"Orange\")) {\n+                throw new RuntimeException(\"Unexpected Selection.\\n\" +\n+                        \"Expected: Orange\\nActual: \" + currSelection);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4530953\");\n+        combo = new JComboBox(data);\n+        combo.setEditable(true);\n+        combo.setSelectedIndex(1);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(combo);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/bug4530953.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4194428\n+ * @summary Checks that scrolling an href to visible scrolls it to the top of the page.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollToReferenceTest\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.io.IOException;\n+import java.net.URL;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.event.HyperlinkEvent;\n+import javax.swing.event.HyperlinkListener;\n+\n+public class ScrollToReferenceTest {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        Wait for the html document to finish loading, click on the anchor\n+        with text 'CLICK ME'. If 'should be at top of editor pane' is\n+        scrolled to the top of the visible region of the text, click PASS,\n+        otherwise click FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(ScrollToReferenceTest::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"ScrollToReferenceTest\");\n+        JEditorPane pane = new JEditorPane();\n+\n+        try {\n+            pane.setPage(ScrollToReferenceTest.class.getResource(\"test.html\"));\n+        } catch (IOException ioe) {\n+            PassFailJFrame.forceFail(\"Couldn't find html file\");\n+        }\n+\n+\n+        pane.addHyperlinkListener(new HyperlinkListener() {\n+            public void hyperlinkUpdate(HyperlinkEvent e) {\n+                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED &&\n+                    e.getURL() != null) {\n+                    try {\n+                        pane.setPage(e.getURL());\n+                    } catch (IOException ioe) {\n+                        pane.setText(\"error finding url, click fail!\");\n+                    }\n+                }\n+            }\n+        });\n+        pane.setEditable(false);\n+        JScrollPane sp = new JScrollPane(pane);\n+        sp.setPreferredSize(new Dimension(400, 400));\n+        frame.add(sp);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/ScrollToReferenceTest\/ScrollToReferenceTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+<html>\n+<body>\n+<p><a href=\"#middle\">Click ME!<\/a>\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p><a name=\"middle\">should be at top of editor pane<\/a>\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p>a\n+<p><a name=\"test\">TEST<\/a>!\n+<p>a\n+<\/body>\n+<\/html>\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/ScrollToReferenceTest\/test.html","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4357012\n+ * @requires (os.family == \"windows\")\n+ * @summary JFileChooser.showSaveDialog inconsistent with Windows Save Dialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4357012\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javax.swing.JComponent;\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+\n+public class bug4357012 {\n+    private static File workDir = null;\n+    private static File dir = null;\n+    private static File file = null;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            <html>\n+            Test is for Windows LAF only\n+            <p>In JFileChooser's files list :\n+            <ol>\n+            <li>Select directory. Verify that the directory name doesn't\n+            appear in \"file name\" field.<\/li>\n+            <li>Select file. Verify that the file name appears in\n+            \"file name\" field.<\/li>\n+            <li>Select directory again. Verify that the previous file name\n+            remains in file name field.<\/li>\n+            <\/ol>\n+            <\/p>\n+            <\/html>\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+            createTestDir();\n+            PassFailJFrame.builder()\n+                    .instructions(INSTRUCTIONS)\n+                    .rows(10)\n+                    .columns(40)\n+                    .testUI(bug4357012::createTestUI)\n+                    .build()\n+                    .awaitAndCheck();\n+        } finally {\n+            if (workDir != null) {\n+                System.out.println(\"Deleting '\" + file + \"': \" + file.delete());\n+                System.out.println(\"Deleting '\" + dir + \"': \" + dir.delete());\n+                System.out.println(\"Deleting '\" + workDir + \"': \" + workDir.delete());\n+            }\n+        }\n+    }\n+\n+    private static void createTestDir() throws IOException {\n+        String tempDir = \".\";\n+        String fs = System.getProperty(\"file.separator\");\n+\n+        workDir = new File(tempDir + fs + \"bug4357012\");\n+        System.out.println(\"Creating '\" + workDir + \"': \" + workDir.mkdir());\n+\n+        dir = new File(workDir + fs + \"Directory\");\n+        System.out.println(\"Creating '\" + dir + \"': \" + dir.mkdir());\n+\n+        file = new File(workDir + fs + \"File.txt\");\n+        System.out.println(\"Creating '\" + file + \"': \" + file.createNewFile());\n+    }\n+\n+    private static JComponent createTestUI() {\n+        JFileChooser fc = new JFileChooser(workDir);\n+        fc.setDialogType(JFileChooser.SAVE_DIALOG);\n+        return fc;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4357012.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4464774\n+ * @requires (os.family == \"windows\")\n+ * @summary JFileChooser: selection of left-side folder buttons shown incorrectly\n+            in Windows L&F\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4464774\n+ *\/\n+\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+\n+public class bug4464774 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click any button from the buttons to the left\n+            (\"Documents\", \"Desktop\", \"My Computer\" etc.) in FileChooser dialog.\n+            When the button is toggled, it should be lowered and\n+            should NOT have focus painted inside it (black dotted frame).\n+\n+            If the above is true, press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(65)\n+                .rows(10)\n+                .testUI(() -> {\n+                    JFileChooser jfc = new JFileChooser();\n+                    jfc.setControlButtonsAreShown(false);\n+                    return jfc;\n+                })\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4464774.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4522756\n+ * @requires (os.family == \"windows\")\n+ * @summary Verifies that the Desktop icon is not missing when\n+            JFileChooser is opened for the first time.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4522756\n+ *\/\n+\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+\n+public class bug4522756 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Verify the following:\n+\n+            1. If Desktop icon image is present on the Desktop button\n+               on the left panel of JFileChooser.\n+            2. Press Desktop button. Check that you actually\n+               go up to the desktop.\n+\n+            If the above is true, press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .rows(12)\n+                .testUI(() -> {\n+                    JFileChooser jfc = new JFileChooser();\n+                    jfc.setControlButtonsAreShown(false);\n+                    return jfc;\n+                })\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4522756.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4759934\n+ * @summary windows activation problem\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main bug4759934\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4759934 {\n+    private static JFrame fr;\n+    private static Dialog dlg;\n+    private static JFileChooser jfc;\n+\n+    private static JButton frameBtn;\n+    private static JButton dialogBtn;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            SwingUtilities.invokeAndWait(bug4759934::createTestUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Point frameBtnLoc = Util.getCenterPoint(frameBtn);\n+            robot.mouseMove(frameBtnLoc.x, frameBtnLoc.y);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+\n+            Point dlgBtnLoc = Util.getCenterPoint(dialogBtn);\n+            robot.mouseMove(dlgBtnLoc.x , dlgBtnLoc.y);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frameBtn.hasFocus() && !dialogBtn.hasFocus()) {\n+                    throw new RuntimeException(\"Test failed! Focus was passed back\" +\n+                            \" to Frame instead of Dialog\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (dlg != null) {\n+                    dlg.dispose();\n+                }\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        fr = new JFrame(\"bug4759934 - JFrame\");\n+\n+        frameBtn = new JButton(\"Show Dialog\");\n+        frameBtn.addActionListener(e -> createDialog());\n+        fr.add(frameBtn);\n+\n+        fr.setSize(300, 200);\n+        fr.setLocationRelativeTo(null);\n+        fr.setVisible(true);\n+    }\n+\n+    private static void createDialog() {\n+        dlg = new JDialog(fr, \"bug4759934 - JDialog\");\n+\n+        dialogBtn = new JButton(\"Show FileChooser\");\n+        dlg.add(dialogBtn);\n+\n+        dialogBtn.addActionListener(e -> {\n+            jfc = new JFileChooser();\n+            jfc.showOpenDialog(dlg);\n+        });\n+\n+        dlg.setSize(300, 200);\n+        dlg.setLocation(fr.getX() + fr.getWidth() + 10, fr.getY());\n+        dlg.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4759934.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4926884\n+ * @requires (os.family == \"windows\")\n+ * @summary Win L&F: JFileChooser problems with \"My Documents\" folder\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4926884\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+\n+public class bug4926884 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Validate next statements step by step:\n+\n+            1. In the file list there are several dirs and files (like \"ski\",\n+               \"Snowboard\" etc.)\n+            2. Select \"Details\" view mode.\n+            3. Make file list in focus (e.g. by pressing mouse button)\n+            4. Press key \"w\" several times with delay LESS than 1 second.\n+              Selection should be changed across files started with letter \"w\"\n+              (without case sensitive).\n+            5. Press key \"w\" several times with delay MORE than 1 second.\n+              Selection should be changed across files started with letter \"w\"\n+              (without case sensitive).\n+            6. Type \"winnt\" (with delay less than 1 second between letters) -\n+               directory \"winnt\" should be selected.\n+            7. Change conditions:\n+              - Move column \"Name\" to the second position\n+              - Change sort mode by clicking column \"Size\"\n+            8. Repeat items 4-6\n+\n+            If above is true press PASS else FAIL\n+            \"\"\";\n+\n+    private static final String[] DIRS = {\"www\", \"winnt\", \"ski\"};\n+    private static final String[] FILES = {\"Window\", \"weel\", \"mice\",\n+                                           \"Wall\", \"Snowboard\", \"wood\"};\n+    private static final File testDir = new File(\".\");\n+\n+    public static void main(String[] argv) throws Exception {\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+        try {\n+            createTestDir();\n+            PassFailJFrame.builder()\n+                    .instructions(INSTRUCTIONS)\n+                    .columns(40)\n+                    .testUI(() -> new JFileChooser(testDir))\n+                    .build()\n+                    .awaitAndCheck();\n+        } finally {\n+            deleteTempDir();\n+        }\n+    }\n+\n+    private static void createTestDir() throws IOException {\n+        testDir.mkdir();\n+\n+        for (String dir : DIRS) {\n+            new File(testDir, dir).mkdir();\n+        }\n+\n+        for (int i = 0; i < FILES.length; i++) {\n+\n+            try (OutputStream outputStream = new FileOutputStream(\n+                    new File(testDir, FILES[i]))) {\n+                for (int j = 0; j < i * 1024; j++) {\n+                    outputStream.write('#');\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void deleteTempDir() {\n+        File[] files = testDir.listFiles();\n+\n+        for (File file : files) {\n+            if (file != null) {\n+                file.delete();\n+            }\n+        }\n+\n+        testDir.delete();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4926884.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4943900\n+ * @summary Tests that FileFilter combo box is shown in FileChooser\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4943900\n+ *\/\n+\n+import java.io.File;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.UIManager;\n+import javax.swing.filechooser.FileFilter;\n+\n+public class bug4943900 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        <html>\n+        <ol>\n+        <li>When the test runs, a <code>JFileChooser<\/code> will be displayed.\n+        <li>Ensure that there is a filter combo box with these two items:\n+          <ul>\n+          <li><b>Text Files (*.txt)<\/b>\n+              &mdash; <em>[must be selected when the dialog opens]<\/em>\n+          <li><b>All Files<\/b>\n+          <\/ul>\n+        <li>Leave the <b>Text files<\/b> item selected and check that the\n+        filter works: only <code>*.txt<\/code> files can appear in the file list.\n+        You can navigate directories in the file chooser and find one\n+        that contains some <code>*.txt<\/code> files to ensure they are shown in\n+        the file list. On macOS when the text filter is applied verify\n+        that the non-text files are greyed out.\n+        <li>Try switching the filters and ensure that the file list\n+        is updated properly.\n+        <li>If the <code>FileFilter<\/code> works correctly,\n+            press <b>Pass<\/b> else press <b>Fail<\/b>.\n+        <\/ol>\n+        <\/html>\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+        PassFailJFrame.builder()\n+                .title(\"bug4943900 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(14)\n+                .columns(50)\n+                .testUI(bug4943900::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createAndShowUI() {\n+        JFileChooser fc = new JFileChooser();\n+        fc.setControlButtonsAreShown(false);\n+        TextFileFilter filter = new TextFileFilter();\n+        fc.setFileFilter(filter);\n+\n+        JFrame frame = new JFrame(\"bug4943900 - JFileChooser\");\n+        frame.add(fc);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static final class TextFileFilter extends FileFilter {\n+        @Override\n+        public boolean accept(File f) {\n+            if (f != null) {\n+                if (f.isDirectory()) {\n+                    return true;\n+                }\n+                String extension = getExtension(f);\n+                return extension != null && extension.equals(\"txt\");\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public String getDescription() {\n+            return \"Text Files (*.txt)\";\n+        }\n+\n+        private static String getExtension(File f) {\n+            if (f != null) {\n+                String filename = f.getName();\n+                int i = filename.lastIndexOf('.');\n+                if (i > 0 && i < filename.length() - 1) {\n+                    return filename.substring(i + 1).toLowerCase();\n+                }\n+            }\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4943900.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5045464\n+ * @requires (os.family == \"linux\")\n+ * @summary Regression: GTK L&F, JFileChooser shows \"null\/\" in folder list\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug5045464\n+ *\/\n+\n+import javax.swing.JComponent;\n+import javax.swing.JFileChooser;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug5045464 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the filechooser appears check the directory list (the left list).\n+            If it starts with two items: \".\/\" (current directory)\n+            and \"..\/\" (parent directory) press PASS.\n+            If something else is here (e.g. \"null\/\" instead of \".\/\")\n+            press FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug5045464::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JComponent createTestUI() {\n+        JFileChooser fc = new JFileChooser();\n+        fc.setControlButtonsAreShown(false);\n+        try {\n+         UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        } catch (Exception ex) {\n+        throw new RuntimeException(\"Test Failed!\", ex);\n+        }\n+        SwingUtilities.updateComponentTreeUI(fc);\n+        return fc;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug5045464.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6515169\n+ * @requires (os.family == \"windows\")\n+ * @summary wrong grid header in JFileChooser\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug6515169\n+ *\/\n+\n+import javax.swing.ButtonGroup;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug6515169 {\n+    private static JFrame frame;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test is to verify JFileChooser on Windows and Metal LAF.\n+            Use the \"Change LaF\" menu to switch between the 2 LaF\n+            and verify the following.\n+\n+            a. Change view mode to \"Details\"\n+            b. Check that 4 columns appear: Name, Size, Type and Date Modified\n+            c. Change current directory by pressing any available subdirectory\n+               or by pressing button \"Up One Level\".\n+            d. Check that still four columns exist.\n+\n+            Change LaF and repeat the steps a-d.\n+            If all conditions are true press PASS, else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug6515169::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        frame = new JFrame(\"bug6515169\");\n+        JMenuBar bar = new JMenuBar();\n+        JMenu lafMenu = new JMenu(\"Change LaF\");\n+        ButtonGroup lafGroup = new ButtonGroup();\n+        JCheckBoxMenuItem lafItem1 = new JCheckBoxMenuItem(\"Window LaF\");\n+        lafItem1.addActionListener(e ->\n+                setLaF(UIManager.getSystemLookAndFeelClassName()));\n+        lafGroup.add(lafItem1);\n+        lafMenu.add(lafItem1);\n+\n+        JCheckBoxMenuItem lafItem2 = new JCheckBoxMenuItem(\"Metal LaF\");\n+        lafItem2.addActionListener(e ->\n+                setLaF(UIManager.getCrossPlatformLookAndFeelClassName()));\n+        lafGroup.add(lafItem2);\n+        lafMenu.add(lafItem2);\n+\n+        bar.add(lafMenu);\n+        frame.setJMenuBar(bar);\n+\n+        String dir = \".\";\n+        JFileChooser fc = new JFileChooser(dir);\n+        fc.setControlButtonsAreShown(false);\n+        frame.add(fc);\n+        frame.pack();\n+\n+        return frame;\n+    }\n+\n+    private static void setLaF(String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+            SwingUtilities.updateComponentTreeUI(frame);\n+        } catch (Exception e) {\n+           throw new RuntimeException(\"Test Failed!\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug6515169.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-*\/\n+ *\/\n@@ -35,0 +35,4 @@\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.util.List;\n+import java.util.Locale;\n@@ -36,0 +40,1 @@\n+import javax.swing.JDialog;\n@@ -37,1 +42,2 @@\n-import java.util.Locale;\n+import javax.swing.JLabel;\n+import javax.swing.JWindow;\n@@ -40,0 +46,1 @@\n+    private static JFrame frame;\n@@ -41,8 +48,29 @@\n-        1. You will see a frame with five buttons.\n-        2. Confirm that each button is placed as follows:\n-             NORTH\n-        END  CENTER  START\n-             SOUTH\n-        3. Press the \"NORTH\" button and confirm the button is focused.\n-        4. Press TAB repeatedly and confirm that the TAB focus moves from right to left.\n-             (NORTH - START - CENTER - END - SOUTH - NORTH - START - CENTER - ...)\n+        This test verifies tab movement on RTL component orientation\n+        in JWindow, JFrame and JDialog.\n+\n+        When test starts 3 test windows are displayed - JFrame, JWindow and JDialog.\n+        Follow the instructions below and if any condition does not hold\n+        press FAIL.\n+\n+        1. Confirm that each button in the child window is placed as follows:\n+\n+            For JFrame:\n+                 NORTH\n+            END  CENTER  START\n+                 SOUTH\n+\n+            For JWindow:\n+            END  CENTER  START\n+                  QUIT\n+\n+            For JDialog:\n+            END  CENTER  START\n+\n+        3. Press on the \"START\" button in case of JWindow & JDialog and \"NORTH\"\n+           in case of JFrame, confirm that the respective button is focused.\n+\n+        4. Press TAB repeatedly and confirm that the TAB focus moves\n+           from right to left.\n+\n+            For JFrame:\n+            (NORTH - START - CENTER - END - SOUTH - NORTH - START - CENTER - ...)\n@@ -50,1 +78,8 @@\n-            If there's anything different from the above items, click Fail else click Pass.\"\"\";\n+            For JWindow:\n+            (START - CENTER - END - QUIT - START - CENTER - END - QUIT - ...)\n+\n+            For JDialog:\n+            (START - CENTER - END - START - CENTER - END - ...)\n+\n+        If all of the above conditions are true press PASS else FAIL.\n+        \"\"\";\n@@ -54,1 +89,0 @@\n-                .title(\"Tab movement Instructions\")\n@@ -56,3 +90,4 @@\n-                .rows((int) INSTRUCTIONS.lines().count() + 2)\n-                .columns(48)\n-                .testUI(bug4419914::createTestUI)\n+                .columns(45)\n+                .testTimeOut(10)\n+                .testUI(bug4419914::createAndShowUI)\n+                .positionTestUI(WindowLayouts::rightOneColumn)\n@@ -63,2 +98,6 @@\n-    private static JFrame createTestUI() {\n-        JFrame frame = new JFrame(\"bug4419914\");\n+    private static List<Window> createAndShowUI() {\n+        return List.of(createJFrame(), createJWindow(), createJDialog());\n+    }\n+\n+    private static JFrame createJFrame() {\n+        frame = new JFrame(\"bug4419914 JFrame\");\n@@ -66,0 +105,1 @@\n+        \/\/ Tab movement set to RTL\n@@ -70,0 +110,1 @@\n+        \/\/ Component placement within content pane set to RTL\n@@ -71,1 +112,1 @@\n-                               ComponentOrientation.RIGHT_TO_LEFT);\n+                ComponentOrientation.RIGHT_TO_LEFT);\n@@ -73,1 +114,1 @@\n-        frame.getContentPane().setLayout(new BorderLayout());\n+        frame.setLayout(new BorderLayout());\n@@ -79,1 +120,1 @@\n-        frame.setSize(300, 150);\n+        frame.setSize(300, 160);\n@@ -82,0 +123,45 @@\n+\n+    private static JWindow createJWindow() {\n+        JWindow window = new JWindow(frame);\n+        window.setFocusableWindowState(true);\n+        \/\/ Tab movement set to RTL\n+        window.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        window.setLocale(new Locale(\"en\"));\n+        window.enableInputMethods(false);\n+\n+        \/\/ Component placement within content pane set to RTL\n+        window.getContentPane().setComponentOrientation(\n+                ComponentOrientation.RIGHT_TO_LEFT);\n+        window.getContentPane().setLocale(new Locale(\"en\"));\n+        window.setLayout(new BorderLayout());\n+        window.add(new JLabel(\"bug4419914 JWindow\"), BorderLayout.NORTH);\n+        window.add(new JButton(\"START\"), BorderLayout.LINE_START);\n+        window.add(new JButton(\"CENTER\"), BorderLayout.CENTER);\n+        window.add(new JButton(\"END\"), BorderLayout.LINE_END);\n+\n+        JButton quitButton = new JButton(\"QUIT\");\n+        quitButton.addActionListener(e1 -> window.dispose());\n+        window.add(quitButton, BorderLayout.SOUTH);\n+        window.setSize(300, 153);\n+        window.requestFocus();\n+        return window;\n+    }\n+\n+    private static JDialog createJDialog() {\n+        JDialog dialog = new JDialog((Frame) null, \"bug4419914 JDialog\");\n+        \/\/ Tab movement set to RTL\n+        dialog.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        dialog.setLocale(new Locale(\"en\"));\n+        dialog.enableInputMethods(false);\n+\n+        \/\/ Component placement within content pane set to RTL\n+        dialog.getContentPane().setComponentOrientation(\n+                ComponentOrientation.RIGHT_TO_LEFT);\n+        dialog.getContentPane().setLocale(new Locale(\"en\"));\n+        dialog.setLayout(new BorderLayout());\n+        dialog.add(new JButton(\"CENTER\"), BorderLayout.CENTER);\n+        dialog.add(new JButton(\"END\"), BorderLayout.LINE_END);\n+        dialog.add(new JButton(\"START\"), BorderLayout.LINE_START);\n+        dialog.setSize(300, 160);\n+        return dialog;\n+    }\n","filename":"test\/jdk\/javax\/swing\/JFrame\/bug4419914.java","additions":107,"deletions":21,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4106007\n+ * @summary Multi-line JLabel is now supported for HTML labels.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4106007\n+ * *\/\n+\n+import java.awt.BorderLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+\n+public class bug4106007 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        The test window should have a label spanning multiple lines.\n+        If it is press PASS, else press FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(bug4106007::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Bug4106007\");\n+        frame.setLayout(new BorderLayout());\n+        String str = \"<HTML><BODY>\";\n+        String longLine =\n+            \"I hope multi-line JLabel is now supported and you can see several lines instead of one long line. \";\n+        str += longLine;\n+        str += longLine;\n+        str += \"<\/BODY><\/HTML>\";\n+        JLabel lab = new JLabel(str);\n+        frame.add(lab, BorderLayout.NORTH);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/bug4106007.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4945795\n+ * @summary With mnemonic hiding turned on, Java does not display all mnemonics with ALT key\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4945795\n+ * *\/\n+\n+import java.awt.BorderLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.UIManager;\n+\n+public class bug4945795 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This test is for the Swing Windows Look And Feel.\n+        A test window will be displayed with the label 'Mnemonic Test'\n+        Click the mouse in the test window to make sure it has keyboard focus.\n+        Now press and hold the 'Alt' key.\n+        An underline should be displayed below the initial 'M' character.\n+        If it is press PASS, else press FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(bug4945795::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame mainFrame = new JFrame(\"Bug4945795\");\n+        try {\n+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Can not set system look and feel\");\n+        }\n+        mainFrame.setLayout(new BorderLayout());\n+        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        JLabel label = new JLabel(\"Mnemonic test\");\n+        label.setDisplayedMnemonic('M');\n+        mainFrame.add(label, BorderLayout.NORTH);\n+        mainFrame.setSize(400, 300);\n+        return mainFrame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/bug4945795.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4194862\n+ * @summary Tests that internal frame-based dialogs are centered relative\n+            to their parents\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4194862\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JOptionPane;\n+\n+public class bug4194862 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            In the internal frame titled \"Main\",\n+            click the \"Show JOptionPane Dialog\" button.\n+            A dialog will appear. It should be centered with\n+            respect to the JInternalFrame - \"Main\".\n+\n+            If the above is true then click on JOptionPane's \"YES\" button\n+            to PASS else click JOptionPane's \"NO\" button to FAIL the test.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception{\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4194862::createAndShowUI)\n+                .screenCapture()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JFrame frame = new JFrame(\"bug4194862 - JInternalFrame JOptionPane\");\n+        JDesktopPane desktop = new JDesktopPane();\n+        frame.add(desktop);\n+        JInternalFrame jInternalFrame = new JInternalFrame(\"Main\", true);\n+        desktop.add(jInternalFrame);\n+        jInternalFrame.setBounds(5, 30, 390, 240);\n+        jInternalFrame.setVisible(true);\n+\n+        JButton b = new JButton(\"Show JOptionPane Dialog\");\n+        b.addActionListener(e -> {\n+            int retVal = JOptionPane.showInternalConfirmDialog(\n+                                      jInternalFrame, \"Am I centered?\",\n+                                      \"bug4194862 JOptionPane\", JOptionPane.YES_NO_OPTION);\n+            switch (retVal) {\n+                case JOptionPane.YES_OPTION -> PassFailJFrame.forcePass();\n+                case JOptionPane.NO_OPTION ->\n+                        PassFailJFrame.forceFail(\"JOptionPane isn't centered\"\n+                                + \" within JInternalFrame \\\"Main\\\"\");\n+            }\n+        });\n+        jInternalFrame.add(b);\n+\n+        for (int i = 0; i < 4; i++) {\n+            JInternalFrame f = new JInternalFrame(\"JIF: \"+ i);\n+            f.setBounds(i * 50, i * 33, 120, 120);\n+            f.setVisible(true);\n+            desktop.add(f);\n+        }\n+        frame.setSize(450, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/bug4194862.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.event.ItemListener;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPasswordField;\n+\n+\/*\n+ * @test\n+ * @bug 4382819\n+ * @summary Tests the correctness of color used for the disabled passwordField.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4382819\n+ *\/\n+\n+public class bug4382819 {\n+    static JCheckBox enabledCheckBox;\n+    static JPasswordField passwordField;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Clear the \"enabled\" checkbox.\n+            If the JPasswordField's foreground color changes to\n+            light gray press Pass. If it stays black press Fail.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4382819::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame mainFrame = new JFrame(\"bug4382819\");\n+        enabledCheckBox = new javax.swing.JCheckBox();\n+        enabledCheckBox.setSelected(true);\n+        enabledCheckBox.setText(\"enabled\");\n+        enabledCheckBox.setActionCommand(\"enabled\");\n+        mainFrame.add(enabledCheckBox);\n+\n+        passwordField = new javax.swing.JPasswordField();\n+        passwordField.setText(\"blahblahblah\");\n+        mainFrame.add(passwordField);\n+        SymItem lSymItem = new SymItem();\n+        enabledCheckBox.addItemListener(lSymItem);\n+\n+        mainFrame.setSize(300, 100);\n+        mainFrame.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\n+        return mainFrame;\n+    }\n+\n+    static class SymItem implements ItemListener {\n+        public void itemStateChanged(java.awt.event.ItemEvent event) {\n+            Object object = event.getSource();\n+            if (object == enabledCheckBox) {\n+                passwordField.setEnabled(enabledCheckBox.isSelected());\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JPasswordField\/bug4382819.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Test that medium weight submenus are not hidden by a heavyweight canvas.\n+ * @bug 4188832\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4188832\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Panel;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+\n+public class bug4188832 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        Select the File menu, then select the \"Save As...\" submenu.\n+        If you can see the submenu items displayed, press PASS, else press FAIL\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(bug4188832::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        \/\/ for Medium Weight menus\n+        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n+        JFrame frame = new JFrame(\"bug4188832\");\n+\n+        \/\/ Create the menus\n+        JMenuBar menuBar = new JMenuBar();\n+        JMenu fileMenu = new JMenu(\"File\");\n+        menuBar.add(fileMenu);\n+        fileMenu.add(new JMenuItem(\"New\"));\n+        fileMenu.add(new JMenuItem(\"Open\"));\n+        fileMenu.add(new JMenuItem(\"Save\"));\n+        JMenu sm = new JMenu(\"Save As...\");\n+        \/\/ these guys don't show up\n+        sm.add(new JMenuItem(\"This\"));\n+        sm.add(new JMenuItem(\"That\"));\n+        fileMenu.add(sm);\n+        fileMenu.add(new JMenuItem(\"Exit\"));\n+        frame.setJMenuBar(menuBar);\n+\n+        Panel field = new Panel(); \/\/ a heavyweight container\n+        field.setBackground(Color.blue);\n+        frame.add(field);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4188832.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4212464\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Verify popup menu borders are drawn correctly when switching L&Fs\n+ * @run main\/manual bug4212464\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug4212464 extends JFrame implements ActionListener {\n+\n+    static String strMotif = \"Motif\";\n+    static String motifClassName = \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\";\n+\n+    static String strMetal = \"Metal\";\n+    static String metalClassName = \"javax.swing.plaf.metal.MetalLookAndFeel\";\n+\n+    static bug4212464 frame;\n+    static JPopupMenu popup;\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This test is to see whether popup menu borders behave properly when switching\n+        back and forth between Motif and Metal L&F.  The initial L&F is Metal.\n+\n+        Pressing the mouse button on the label in the center of the test window brings\n+        up a popup menu.\n+\n+        In order to test, use the labeled buttons to switch the look and feel.\n+        Clicking a button will cause the menu to be hidden. This is OK. Just click the label again.\n+        Switch back and forth and verify that the popup menu border changes consistently\n+        and there is a title for the menu when using Motif L&F (Metal won't have a title).\n+\n+        Make sure you switch back and forth several times.\n+        If the change is consistent, press PASS otherwise press FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4212464::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        try {\n+            UIManager.setLookAndFeel(metalClassName); \/\/ initialize to Metal.\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        frame = new bug4212464(\"bug4212464\");\n+        popup = new JPopupMenu(\"Test\");\n+        popup.add(\"Item 1\");\n+        popup.add(\"Item 2\");\n+        popup.add(\"Item 3\");\n+        popup.add(\"Item 4\");\n+\n+        JPanel p = new JPanel();\n+        p.setLayout(new FlowLayout());\n+        JButton motif = (JButton)p.add(new JButton(strMotif));\n+        JButton metal = (JButton)p.add(new JButton(strMetal));\n+        motif.setActionCommand(motifClassName);\n+        metal.setActionCommand(metalClassName);\n+        motif.addActionListener(frame);\n+        metal.addActionListener(frame);\n+        frame.add(BorderLayout.NORTH, p);\n+\n+        JLabel l = new JLabel(\"Click any mouse button on this big label\");\n+        l.setFont(new Font(Font.DIALOG, Font.PLAIN, 20));\n+        l.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                popup.show(e.getComponent(), e.getX(), e.getY());\n+            }\n+        });\n+        frame.add(BorderLayout.CENTER, l);\n+        frame.setSize(500, 400);\n+        return frame;\n+    }\n+\n+     public bug4212464(String title) {\n+         super(title);\n+     }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String str = e.getActionCommand();\n+        if (str.equals(metalClassName) || str.equals(motifClassName)) {\n+            changeLNF(str);\n+        } else {\n+            System.out.println(\"ActionEvent: \" + str);\n+        }\n+    }\n+\n+    public void changeLNF(String str) {\n+        System.out.println(\"Changing LNF to \" + str);\n+        try {\n+            UIManager.setLookAndFeel(str);\n+            SwingUtilities.updateComponentTreeUI(frame);\n+            SwingUtilities.updateComponentTreeUI(popup);\n+        } catch (Exception e) {\n+           throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4212464.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4234793\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary PopupMenuListener popupMenuCanceled is never called\n+ * @run main\/manual bug4234793\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JSeparator;\n+import javax.swing.KeyStroke;\n+import javax.swing.event.PopupMenuEvent;\n+import javax.swing.event.PopupMenuListener;\n+\n+\/**\n+ * For all 3 components (JPopupMenu, JComboBox, JPopup) when the popup is visible,\n+ * the popupMenuCanceled should be invoked in these two circumstances:\n+ *\n+ * 1. The ESCAPE key is pressed while the popup is open.\n+ *\n+ * 2. The mouse is clicked on another component.\n+ *\n+ *\/\n+\n+public class bug4234793 extends JFrame implements PopupMenuListener {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        The test window will contain several kinds of menus.\n+\n+        * A menu bar with two menus labeled \"1 - First Menu\" and \"2 - Second Menu\"\n+        * A drop down combo box - ie a button which pops up a menu when clicked\n+        * Clicking any where on the background of the window will display a popup menu\n+\n+        That is 4 menus in total.\n+\n+        For each case, verify that the menu can be cancelled (hidden) in two ways\n+        1) Click to display the menu, then to hide it, press the ESCAPE key.\n+        2) Click to display the menu, then to hide it, LEFT click on the window background.\n+        Note : the popup menu must be displayed using RIGHT click, the others use LEFT click.\n+\n+        Notice each time you perform a hide\/cancel action an appropriate message should\n+        appear in the log area\n+        If this is true for all 8 combinations of menus + hide actions the test PASSES\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(bug4234793::createUI)\n+            .logArea()\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static String[] numData = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\n+    };\n+\n+    private static String[] dayData = {\n+        \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\n+    };\n+\n+    private static char[] mnDayData = {\n+        'M', 'T', 'W', 'R', 'F', 'S', 'U'\n+    };\n+\n+    bug4234793(String title) {\n+        super(title);\n+    }\n+\n+    static volatile JPopupMenu popupMenu;\n+    static volatile bug4234793 frame;\n+\n+    static JFrame createUI() {\n+        frame = new bug4234793(\"bug4234793\");\n+        frame.setJMenuBar(createMenuBar());\n+        JPanel panel = createContentPane();\n+        frame.add(panel);\n+\n+        \/\/ CTRL-down will show the popup.\n+        panel.getInputMap().put(KeyStroke.getKeyStroke(\n+                   KeyEvent.VK_DOWN, InputEvent.CTRL_MASK), \"OPEN_POPUP\");\n+        panel.getActionMap().put(\"OPEN_POPUP\", new PopupHandler());\n+        panel.addMouseListener(new PopupListener(popupMenu));\n+        panel.setPreferredSize(new Dimension(400, 300));\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+\n+    static class PopupListener extends MouseAdapter {\n+        private JPopupMenu popup;\n+\n+        public PopupListener(JPopupMenu popup) {\n+            this.popup = popup;\n+        }\n+\n+        public void mousePressed(MouseEvent e) {\n+            maybeShowPopup(e);\n+        }\n+\n+        public void mouseReleased(MouseEvent e) {\n+            maybeShowPopup(e);\n+        }\n+\n+        public void mouseClicked(MouseEvent ex) {\n+        }\n+\n+        private void maybeShowPopup(MouseEvent e) {\n+            if (e.isPopupTrigger()) {\n+                popup.show(e.getComponent(), e.getX(), e.getY());\n+            }\n+        }\n+    }\n+\n+    static class PopupHandler extends AbstractAction {\n+        public void actionPerformed(ActionEvent e) {\n+            if (!popupMenu.isVisible())\n+                popupMenu.show((Component)e.getSource(), 40, 40);\n+        }\n+    }\n+\n+    static JPanel createContentPane() {\n+        popupMenu = new JPopupMenu();\n+        JMenuItem item;\n+        for (int i = 0; i < dayData.length; i++) {\n+            item = popupMenu.add(new JMenuItem(dayData[i], mnDayData[i]));\n+        }\n+        popupMenu.addPopupMenuListener(frame);\n+\n+        JComboBox combo = new JComboBox(numData);\n+        combo.addPopupMenuListener(frame);\n+        JPanel comboPanel = new JPanel();\n+        comboPanel.add(combo);\n+\n+        JPanel panel = new JPanel(new BorderLayout());\n+\n+        panel.add(new JLabel(\"Right click on the panel to show the PopupMenu\"), BorderLayout.NORTH);\n+        panel.add(comboPanel, BorderLayout.CENTER);\n+\n+        return panel;\n+    }\n+\n+    static JMenuBar createMenuBar() {\n+        JMenuBar menubar = new JMenuBar();\n+        JMenuItem menuitem;\n+\n+        JMenu menu = new JMenu(\"1 - First Menu\");\n+        menu.setMnemonic('1');\n+        menu.getPopupMenu().addPopupMenuListener(frame);\n+\n+        menubar.add(menu);\n+        for (int i = 0; i < 10; i ++) {\n+            menuitem = new JMenuItem(\"1 JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            menu.add(menuitem);\n+        }\n+\n+        \/\/ second menu\n+        menu = new JMenu(\"2 - Second Menu\");\n+        menu.getPopupMenu().addPopupMenuListener(frame);\n+        menu.setMnemonic('2');\n+\n+        menubar.add(menu);\n+        for (int i = 0; i < 5; i++) {\n+            menuitem = new JMenuItem(\"2 JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            menu.add(menuitem);\n+        }\n+\n+        JMenu submenu = new JMenu(\"Sub Menu\");\n+        submenu.setMnemonic('S');\n+        submenu.getPopupMenu().addPopupMenuListener(frame);\n+        for (int i = 0; i < 5; i++) {\n+            menuitem = new JMenuItem(\"S JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            submenu.add(menuitem);\n+        }\n+        menu.add(new JSeparator());\n+        menu.add(submenu);\n+\n+        return menubar;\n+    }\n+\n+    \/\/ PopupMenuListener methods.\n+\n+    public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"popupmenu visible: \" + source.getClass().getName());\n+    }\n+\n+    public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"popupMenuWillBecomeInvisible: \" + source.getClass().getName());\n+    }\n+\n+    public void popupMenuCanceled(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"POPUPMENU CANCELED: \" + source.getClass().getName());\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4234793.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4673850\n+ * @summary Tests that JRadioButton and JCheckBox checkmarks are painted entirely\n+ *          inside circular\/rectangle checkboxes for Motif LaF.\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @run main\/manual bug4673850\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingConstants;\n+import javax.swing.UIManager;\n+import jtreg.SkippedException;\n+\n+public class bug4673850 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            <html>\n+            <head>\n+            <style>\n+            p {\n+              font: sans-serif;\n+            }\n+            <\/style>\n+            <\/head>\n+            <body>\n+            <p><b>This test is for Motif LaF.<\/b><\/p>\n+\n+            <p><b>\n+            When the test starts, you'll see 2 radio buttons and 2 check boxes\n+            with the checkmarks painted.<\/b><\/p>\n+\n+            <p><b>\n+            Ensure that all the button's checkmarks are painted entirely\n+            within the circular\/rectangle checkbox, NOT over them or outside them.\n+            <\/b><\/p>\n+            <\/body>\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new SkippedException(\"Unsupported LaF\", e);\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows(10)\n+                .columns(45)\n+                .testUI(createAndShowUI())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JFrame frame = new JFrame(\"bug4673850\");\n+        frame.setLayout(new FlowLayout());\n+\n+        JRadioButton rb = new JRadioButton(\"RadioButt\");\n+        rb.setSelected(true);\n+        frame.add(rb);\n+        JRadioButton rb2 = new JRadioButton(\"RadioButt\");\n+        rb2.setHorizontalTextPosition(SwingConstants.LEFT);\n+        rb2.setSelected(true);\n+        frame.add(rb2);\n+\n+        JCheckBox cb = new JCheckBox(\"CheckBox\");\n+        cb.setSelected(true);\n+        frame.add(cb);\n+        JCheckBox cb2 = new JCheckBox(\"CheckBox\");\n+        cb2.setHorizontalTextPosition(SwingConstants.LEFT);\n+        cb2.setSelected(true);\n+        frame.add(cb2);\n+        frame.setSize(200, 150);\n+        return frame;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/bug4673850.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4403624\n+ * @summary Tests JRootPane layout with invisible menubar\n+ * @key headful\n+ * @run main bug4403624\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4403624 {\n+    private static JFrame f;\n+    private static Container c;\n+    private static JButton b;\n+    private static volatile Point p;\n+    private static volatile int bWidth;\n+    private static volatile int bHeight;\n+    private static final int OFFSET = 2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4403624 Test\");\n+                JMenuBar mbar;\n+                mbar = new JMenuBar();\n+                mbar.add(new JMenu(\"Menu\"));\n+                f.setJMenuBar(mbar);\n+                b = new JButton(\"Hide Menu\");\n+                b.addActionListener(e -> mbar.setVisible(false));\n+                c = f.getContentPane();\n+                c.setLayout(new FlowLayout());\n+                c.setBackground(Color.GREEN);\n+                c.add(b);\n+                f.pack();\n+                f.setLocationRelativeTo(null);\n+                f.setAlwaysOnTop(true);\n+                f.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.setAutoDelay(200);\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = b.getLocationOnScreen();\n+                bWidth = b.getWidth();\n+                bHeight = b.getHeight();\n+            });\n+\n+            r.mouseMove(p.x + (bWidth \/ 2), p.y + (bHeight \/ 2));\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            SwingUtilities.invokeAndWait(() -> p = c.getLocationOnScreen());\n+\n+            Color c = r.getPixelColor(p.x + OFFSET, p.y + OFFSET);\n+\n+            if (c.getGreen() < 240 && c.getBlue() > 10 && c.getRed() > 10) {\n+                System.out.println(\"EXPECTED: \" + Color.GREEN);\n+                System.out.println(\"ACTUAL: \" + c);\n+                throw new RuntimeException(\"Failure to hide menu bar.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JRootPane\/bug4403624.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4614623\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that w2k mnemonic underlining works when there's no\n+            focus owner\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4614623\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.UIManager;\n+\n+public class bug4614623 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test verifies if the short-cut character\n+            (menu mnemonic) is underlined when the ALT key is held down.\n+\n+            Check if the following is true.\n+            1) Press Alt key. The letter 'F' (menu mnemonic) of\n+            the \"File\" menu should now be underlined.\n+            2) Release the Alt key, the selection background (light grey)\n+            should appear around the \"File\" menu. Compare \"About\" menu\n+            with \"File\" menu to see the light grey selection background.\n+\n+            If the above is true, press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(62)\n+                .rows(12)\n+                .testUI(bug4614623::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createAndShowUI() {\n+        JFrame frame = new JFrame(\"bug4614623 - File menu test\");\n+        JMenuBar menuBar = new JMenuBar();\n+\n+        JMenu fileMenu = new JMenu(\"File\");\n+        fileMenu.setMnemonic('F');\n+        menuBar.add(fileMenu);\n+\n+        JMenu about = new JMenu(\"About\");\n+        menuBar.add(about);\n+        menuBar.setSize(300, 100);\n+\n+        frame.setJMenuBar(menuBar);\n+        menuBar.requestFocus();\n+        frame.setSize(300, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JRootPane\/bug4614623.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires (os.family != \"mac\")\n+ * @key headful\n@@ -33,0 +33,1 @@\n+import java.awt.Robot;\n@@ -35,0 +36,1 @@\n+import javax.swing.JFrame;\n@@ -44,0 +46,1 @@\n+    private static JFrame frame;\n@@ -48,6 +51,3 @@\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.toLowerCase().contains(\"os x\")) {\n-            System.out.println(\"This test is not for MacOS, considered passed.\");\n-            return;\n-        }\n-        SwingUtilities.invokeAndWait(() -> setupTest());\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> createAndShowGUI());\n@@ -55,4 +55,7 @@\n-        SwingUtilities.invokeAndWait(() -> sbar.pressMouse());\n-        if (!mousePressLatch.await(2, TimeUnit.SECONDS)) {\n-            throw new RuntimeException(\"Timed out waiting for mouse press\");\n-        }\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> sbar.pressMouse());\n+            if (!mousePressLatch.await(2, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Timed out waiting for mouse press\");\n+            }\n@@ -60,2 +63,10 @@\n-        if (getValue() != 9) {\n-            throw new RuntimeException(\"The scrollbar block increment is incorrect\");\n+            if (getValue() != 9) {\n+                throw new RuntimeException(\"The scrollbar block increment \" +\n+                                            getValue() + \" is incorrect\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n@@ -76,2 +87,2 @@\n-    private static void setupTest() {\n-\n+    private static void createAndShowGUI() {\n+        frame = new JFrame(\"bug4865918\");\n@@ -86,1 +97,5 @@\n-\n+        frame.getContentPane().add(sbar);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.toFront();\n","filename":"test\/jdk\/javax\/swing\/JScrollBar\/4865918\/bug4865918.java","additions":31,"deletions":16,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,235 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5078454\n+ * @summary Test horizontal wheel scroll behavior of (including RTL)\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HorizScrollers\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Insets;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+\n+public class HorizScrollers {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This is a semi-automatic test with three phases.\n+            For each phase, you will need to change the mouse setting, as\n+            directed by a dialog. Once the correct setting is confirmed,\n+            the next test phase will run automatically.\n+            DO NOT TOUCH ANYTHING DURING TESTING!\n+\n+            The test will automatically FAIL during testing if something\n+            fails. Otherwise, the test will automatically PASS after the\n+            third testing phase.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"HorizScrollers Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testTimeOut(10)\n+                .splitUIRight(ConfigPanel::new)\n+                .logArea(6)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final int[] SCROLLAMTS = {1, 30, 3};\n+    private static final String[] CONFIG_MSGS = {\n+            \"Set the scrolling speed to the slowest value (1 line).\",\n+            \"Set the scrolling speed to the fastest value (30 lines).\",\n+            \"Set the scrolling speed to two ticks above the slowest value (3 lines).\"\n+    };\n+\n+    private static int current = 0;\n+    private static final String MW_TEXT = \"Rotate the mouse wheel here\";\n+    private static final String CONFIG_INSTRUCTION_TEMPLATE = \"\"\"\n+            Configure Mouse Wheel for Phase %d\n+\n+            Open the Mouse Control Panel and go to the 'Wheel' tab.\n+            If 'Wheel' tab is not available just press Pass.\n+\n+            %s\n+\n+            Test the setting on the area below.\n+            Once the mouse is setup correctly, the area will turn green.\n+            When you're ready for the next part of the test to run, press GO!\n+    \"\"\";\n+\n+    static class ConfigPanel extends JPanel\n+            implements ActionListener, MouseWheelListener {\n+        JTextArea msg;\n+        JButton goBtn;\n+        JLabel mwArea;\n+        int scrollAmount;\n+\n+        private final Color defaultBg;\n+\n+        ConfigPanel() {\n+            this.scrollAmount = SCROLLAMTS[current];\n+            Container content = this;\n+            content.setLayout(new BorderLayout());\n+            msg = new JTextArea();\n+            msg.setMargin(new Insets(5, 5, 5, 5));\n+            msg.setEditable(false);\n+            msg.setLineWrap(true);\n+            msg.setWrapStyleWord(true);\n+            content.add(msg, BorderLayout.NORTH);\n+\n+            mwArea = new JLabel(MW_TEXT, SwingConstants.CENTER);\n+            mwArea.setPreferredSize(new Dimension(200, 250));\n+            mwArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+            mwArea.setOpaque(true);\n+            mwArea.addMouseWheelListener(this);\n+            content.add(mwArea, BorderLayout.CENTER);\n+\n+            defaultBg = mwArea.getBackground();\n+            setPhase(current);\n+\n+            goBtn = new JButton(\"GO!\");\n+            goBtn.setEnabled(false);\n+            goBtn.addActionListener(this);\n+            JPanel flowPanel = new JPanel();\n+            flowPanel.setLayout(new FlowLayout());\n+            flowPanel.add(goBtn);\n+            content.add(flowPanel, BorderLayout.SOUTH);\n+\n+            setPreferredSize(new Dimension(600, 400));\n+        }\n+\n+        public void setPhase(int phase) {\n+            if (phase < 3) {\n+                setVisible(true);\n+                PassFailJFrame.log(\"Phase %d scroll speed %d\"\n+                        .formatted(phase + 1, SCROLLAMTS[phase]));\n+                PassFailJFrame.log(CONFIG_MSGS[phase]);\n+\n+                scrollAmount = SCROLLAMTS[phase];\n+                msg.setText(CONFIG_INSTRUCTION_TEMPLATE\n+                        .formatted(phase + 1, CONFIG_MSGS[phase]));\n+                mwArea.setBackground(defaultBg);\n+                mwArea.setText(MW_TEXT);\n+            } else {\n+                \/\/ all cases passed\n+                showFinalReminderIfNeeded(false);\n+            }\n+        }\n+\n+        private void showFinalReminderIfNeeded(boolean isFailure) {\n+            if (scrollAmount != 3) {\n+                JOptionPane.showMessageDialog(\n+                        ConfigPanel.this.getTopLevelAncestor(),\n+                        (\"Test %s. Please make sure you have restored \" +\n+                                \"the original scrolling speed in the \" +\n+                                \"Mouse settings.\")\n+                                .formatted(isFailure\n+                                        ? \"failed\"\n+                                        : \"passed\"),\n+                        isFailure\n+                                ? \"Failure\"\n+                                : \"Success\",\n+                        isFailure\n+                                ? JOptionPane.WARNING_MESSAGE\n+                                : JOptionPane.INFORMATION_MESSAGE\n+                );\n+            }\n+\n+            if (isFailure) {\n+                PassFailJFrame.forceFail();\n+            } else {\n+                PassFailJFrame.forcePass();\n+            }\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == goBtn) {\n+                goBtn.setEnabled(false);\n+\n+                new Thread(() -> { \/\/ new thread to avoid running robot on EDT\n+                    boolean passed;\n+                    try {\n+                        passed = RTLScrollers.runTest(SCROLLAMTS[current]);\n+                    } catch (Exception ex) {\n+                        PassFailJFrame.log(\"Failure: \" + ex);\n+                        SwingUtilities.invokeLater(() ->\n+                                showFinalReminderIfNeeded(true));\n+                        return;\n+                    }\n+\n+                    PassFailJFrame.log(\"Phase %d passed: %b\\n\"\n+                            .formatted(current + 1, passed));\n+                    if (passed) {\n+                        SwingUtilities.invokeLater(() -> {\n+                            goBtn.setEnabled(true);\n+                            setPhase(++current);\n+                        });\n+                    } else {\n+                        SwingUtilities.invokeLater(() ->\n+                                showFinalReminderIfNeeded(true));\n+                    }\n+                }).start();\n+            }\n+        }\n+\n+        public void mouseWheelMoved(MouseWheelEvent e) {\n+            int eventScrollAmt = e.getScrollAmount();\n+            if (eventScrollAmt == scrollAmount) {\n+                mwArea.setBackground(Color.GREEN);\n+                mwArea.setText(\"Mouse wheel configured - press Go\");\n+                goBtn.setEnabled(true);\n+                goBtn.requestFocusInWindow();\n+                PassFailJFrame.log(\"Proceed to the test with go button\");\n+                return;\n+            }\n+            if (eventScrollAmt < scrollAmount) {\n+                mwArea.setText(\"Increase the scroll speed. (Want:\"\n+                        + scrollAmount + \" Got:\" + eventScrollAmt + \")\");\n+            } else {\n+                mwArea.setText(\"Decrease the scroll speed. (Want:\"\n+                        + scrollAmount + \" Got:\" + eventScrollAmt + \")\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/AcceleratedWheelScrolling\/HorizScrollers.java","additions":235,"deletions":0,"binary":false,"changes":235,"status":"added"},{"patch":"@@ -0,0 +1,680 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ A few Swing components which use the mouse wheel to scroll\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.DefaultListModel;\n+import javax.swing.ImageIcon;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.JTextArea;\n+import javax.swing.ListModel;\n+import javax.swing.ScrollPaneConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+public class RTLScrollers extends JDialog\n+        implements MouseWheelListener, ActionListener {\n+    private static final int ROWS = 5;\n+    private static final int COLUMNS = 150;\n+    private static final int WINWIDTH = 1000;\n+\n+    static RTLScrollers rtl;\n+    static volatile RTLScrollers f;\n+    static volatile boolean retVal;\n+    static volatile JScrollPane jsp;\n+    static volatile JScrollBar hsb;\n+    static volatile JScrollBar sb;\n+    static volatile Point loc;\n+    static volatile Dimension size;\n+    TestList list;\n+    JScrollPane listScroller;\n+    JTextArea text;\n+    JScrollPane textScroller;\n+    TestTable table;\n+    JScrollPane tableScroller;\n+    JCheckBoxMenuItem rightToLeft;\n+    ImageIcon photoIcon;\n+    int scrollAmount;\n+\n+    private static Robot robot;\n+    private static BufferedImage logo = genIcon(166, 39, Color.PINK);\n+    private static BufferedImage photo = genIcon(59, 80, Color.MAGENTA);\n+    private static BufferedImage photo2 = genIcon(80, 53, Color.ORANGE);\n+\n+    private static BufferedImage genIcon(int width, int height, Color color) {\n+        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = image.getGraphics();\n+        g.setColor(color);\n+        g.fillRect(0, 0, width, height);\n+\n+        return image;\n+    }\n+\n+    public RTLScrollers() {\n+        this(0);\n+    }\n+\n+    public RTLScrollers(int scrollAmount) {\n+        super(new JFrame(), \"RTLScrollers\", false);\n+\n+        this.scrollAmount = scrollAmount;\n+        Container content = getContentPane();\n+        content.setLayout(new GridBagLayout());\n+\n+        DefaultListModel<Object> listModel = new DefaultListModel<>();\n+\n+        photoIcon = new ImageIcon(photo);\n+        for (int i = 0; i < COLUMNS \/ 4 ; i++) {\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(new ImageIcon(logo));\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(photoIcon);\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(new ImageIcon(photo2));\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(\"Text Item \" + ((1 + i) * 3));\n+            }\n+        }\n+\n+        list = new TestList(listModel);\n+        list.setVisibleRowCount(ROWS);\n+        list.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        listScroller = new JScrollPane(list);\n+        listScroller.addMouseWheelListener(this);\n+\n+        text = new JTextArea();\n+        for (int j = 0; j < ROWS ; j++) {\n+            for (int i = 0; i < COLUMNS ; i++) {\n+                text.append(i + \" some text, some more text, a really long line of text \");\n+            }\n+            text.append(\"\\n\");\n+        }\n+\n+        textScroller = new JScrollPane(text);\n+        textScroller.addMouseWheelListener(this);\n+\n+        DefaultTableModel model = new DefaultTableModel(ROWS, COLUMNS);\n+        table = new TestTable(model);\n+        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        for (int i = 0; i < COLUMNS; i++) {\n+            for (int j = 0; j < ROWS; j++) {\n+                table.setValueAt(j + \", \" + i, j, i);\n+            }\n+\n+            TableColumn column = table.getColumnModel().getColumn(i);\n+\n+            if (i % 4 == 0) {\n+                column.setMinWidth(0);\n+                column.setPreferredWidth(0);\n+                column.setMaxWidth(0);\n+            }\n+            else if ((i + 1) % 4 == 0) {\n+                column.setMinWidth(95);\n+                column.setPreferredWidth(95);\n+                column.setMaxWidth(95);\n+            }\n+            else if ((i + 2) % 4 == 0) {\n+                column.setMinWidth(26);\n+                column.setPreferredWidth(26);\n+                column.setMaxWidth(26);\n+            }\n+            else {\n+                column.setMinWidth(50);\n+                column.setPreferredWidth(50);\n+                column.setMaxWidth(50);\n+            }\n+        }\n+        tableScroller = new JScrollPane(table);\n+        tableScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        tableScroller.addMouseWheelListener(this);\n+\n+        GridBagConstraints tableGBC = new GridBagConstraints(0,\n+                0,\n+                1,\n+                1,\n+                1.0,\n+                0.3,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+        content.add(tableScroller, tableGBC);\n+        GridBagConstraints textGBC = new GridBagConstraints(0,\n+                1,\n+                1,\n+                1,\n+                1.0,\n+                0.3,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+        content.add(textScroller, textGBC);\n+\n+        GridBagConstraints listGBC = new GridBagConstraints(0,\n+                2,\n+                1,\n+                5,\n+                1.0,\n+                1.2,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+\n+        content.add(listScroller, listGBC);\n+\n+        rightToLeft = new JCheckBoxMenuItem(\"Right-To-Left\", false);\n+        rightToLeft.addActionListener(this);\n+        JMenu menu = new JMenu(\"Component Orientation\");\n+        menu.add(rightToLeft);\n+\n+        JMenuItem close = new JMenuItem(\"Close\");\n+        close.addActionListener(e -> RTLScrollers.this.setVisible(false));\n+        menu.add(close);\n+\n+        JMenuBar mb = new JMenuBar();\n+        mb.add(menu);\n+        setJMenuBar(mb);\n+        setBounds(0, 0, WINWIDTH, 760);\n+        setLocationRelativeTo(null);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (rightToLeft.getState()) {\n+            applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        }\n+        else {\n+            applyComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+        }\n+    }\n+    public void mouseWheelMoved(MouseWheelEvent e) {\n+        System.out.println(\"Rotation: \" + e.getWheelRotation());\n+    }\n+\n+    public static boolean runTest(int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        System.out.println(\"RTLS.runTest()\");\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+                robot.setAutoDelay(150);\n+                robot.setAutoWaitForIdle(true);\n+            }\n+            catch (AWTException e) {\n+                e.printStackTrace();\n+                return false;\n+            }\n+        }\n+\n+        robot.delay(1000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            rtl = new RTLScrollers(scrollAmount);\n+            rtl.setVisible(true);\n+        });\n+        robot.delay(100);\n+\n+        try {\n+            retVal = rtl.runTests(scrollAmount);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                rtl.setVisible(false);\n+                rtl.dispose();\n+            });\n+        }\n+\n+        robot.delay(100);\n+        System.out.println(\"RTLS.runTest(): \" + retVal);\n+        return retVal;\n+    }\n+\n+    private boolean runTests(int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+                robot.setAutoDelay(150);\n+                robot.setAutoWaitForIdle(true);\n+            }\n+            catch (AWTException e) {\n+                e.printStackTrace();\n+                return false;\n+            }\n+        }\n+\n+        \/\/\n+        \/\/ run robot tests\n+        \/\/\n+        robot.delay(500);\n+\n+        System.out.println(\"Testing Table\");\n+        testComp(table, scrollAmount);\n+\n+        System.out.println(\"Testing List\");\n+        testComp(list, scrollAmount);\n+\n+        SwingUtilities.invokeAndWait(() ->\n+                applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT));\n+        robot.delay(100);\n+\n+        System.out.println(\"Testing RTL Table\");\n+        testComp(table, scrollAmount);\n+\n+        System.out.println(\"Testing RTL List\");\n+        testComp(list, scrollAmount);\n+\n+        return true;\n+    }\n+\n+    public boolean testComp(TestTools comp, int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        \/\/ Make sure we start from the beginning\n+        SwingUtilities.invokeAndWait(() -> {\n+            jsp = (JScrollPane)((JComponent)comp).getParent().getParent();\n+            hsb = jsp.getHorizontalScrollBar();\n+            hsb.setValue(hsb.getMinimum());\n+\n+            loc = jsp.getLocationOnScreen();\n+            size = jsp.getSize();\n+        });\n+        int midx = loc.x + size.width \/ 2;\n+        int midy = loc.y + size.height \/ 2;\n+        int maxIdx = 0;\n+        robot.mouseMove(midx, midy);\n+\n+        \/\/ Don't bother for max scroll w\/ RTL JList, because the block increment is broken\n+        if (scrollAmount != 30 || !(comp instanceof TestList)\n+                || getComponentOrientation().isLeftToRight()) {\n+            scrollToMiddle(jsp, robot);\n+\n+            \/\/ check that we're lined up\n+            comp.checkTopCellIsLinedUp();\n+\n+            int startVal = hsb.getValue();\n+            int leadingCell = comp.getLeadingCell().y;\n+            System.out.println(\"leadingCell is \" + leadingCell);\n+\n+            \/\/ become unaligned\n+            int width = comp.getLeadingCellWidth();\n+            int midVal = startVal + width \/ 2;\n+            System.out.println(\"becoming unaligned: startVal is \"\n+                    + startVal + \", midVal is \" + midVal);\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(midVal));\n+\n+            \/\/\n+            \/\/ Check partial inc up\n+            \/\/\n+            robot.mouseWheel(-1);\n+\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -scrollAmount + 1);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check partial inc down\n+            \/\/\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(midVal));\n+            robot.delay(100);\n+            robot.mouseWheel(1);\n+\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check full inc down (3 times)\n+            \/\/\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(startVal));\n+            leadingCell = comp.getLeadingCell().y;\n+\n+            \/\/ Once...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Twice...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, (2 * scrollAmount));\n+            }\n+\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Thrice...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, (3 * scrollAmount));\n+\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check full inc up (3 times)\n+            \/\/\n+            leadingCell = comp.getLeadingCell().y;\n+\n+            \/\/ Once...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Twice...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -(2 * scrollAmount));\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Thrice...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -(3 * scrollAmount));\n+            }\n+            comp.checkTopCellIsLinedUp();\n+        }\n+\n+        \/\/\n+        \/\/ Test acceleration for max scrolling\n+        \/\/ (this part should still work for RTL JList)\n+        if (scrollAmount == 30) {\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(hsb.getMinimum()));\n+            robot.delay(100);\n+            robot.mouseWheel(2);\n+            robot.mouseWheel(2);\n+            robot.mouseWheel(2);\n+            if (hsb.getValue() < hsb.getMaximum() - hsb.getVisibleAmount()) {\n+                throw new RuntimeException(\"Wheel acceleration for max \" +\n+                        \"scrolling doesn't work: hsb value (\" + hsb.getValue() +\n+                        \" < hsb max (\" + hsb.getMaximum() +\n+                        \") - hsb vis (\" + hsb.getVisibleAmount() + \")\");\n+            }\n+            robot.delay(100);\n+            robot.mouseWheel(-2);\n+            robot.mouseWheel(-2);\n+            robot.mouseWheel(-2);\n+            if (hsb.getValue() > hsb.getMinimum()) {\n+                throw new RuntimeException(\"Wheel acceleration for max \" +\n+                        \"scrolling doesn't work: hsb value (\" +\n+                        hsb.getValue() + \" > hsb min (\" + hsb.getMinimum() + \")\");\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    class TestTable extends JTable implements TestTools {\n+        final int[] MAXVALS = {23, 67, 67, 89, 111, 89, 66, 45};  \/\/Lookup table\n+        public TestTable(TableModel model) {\n+            super(model);\n+        }\n+\n+        public void checkTopCellIsLinedUp() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            Point leading = getLeadingCell();\n+            Rectangle visRect = getVisibleRect();\n+            Rectangle cellRect = getCellRect(leading.x, leading.y, true);\n+\n+            if (isLeftToRight) {\n+                if (cellRect.x != visRect.x) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+            else {\n+                if (cellRect.x + cellRect.width != visRect.x + visRect.width) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+        }\n+\n+        public void checkTopCellIs(int col) {\n+            Point cell = getLeadingCell();\n+            if (cell.y != col) {\n+                throw new RuntimeException(\"leading cell (\" + cell.y\n+                        + \") is not \" + col);\n+            }\n+        }\n+\n+        \/*\n+         * Account for 0-width cells\n+         *\n+         * shift is a non-0 number of visible cells to shift.  The shift is\n+         * augmented for zero-width cells, and the new sum is passed into\n+         * checkTopCellIs().\n+         *\/\n+        public void checkTopCellIs(int col, int shift) {\n+            if (shift == 0) {\n+                checkTopCellIs(col);\n+                return;\n+            }\n+\n+            int row = getLeadingCell().x;\n+            int newShift = 0;\n+            int foundCells = 0;\n+            int direction = shift > 0 ? 1 : -1;\n+            int index = col;\n+            Rectangle cellRect;\n+\n+            while (foundCells < Math.abs(shift)) {\n+                index += direction;\n+                cellRect = getCellRect(row, index, true);\n+                if (cellRect.width > 0) {\n+                    foundCells++;\n+                }\n+                newShift++;\n+            }\n+\n+            checkTopCellIs(col + (direction*newShift));\n+        }\n+\n+        public void checkTopCellIsMax(int idx) {\n+            checkTopCellIs(MAXVALS[idx]);\n+        }\n+\n+        public int getLeadingCellWidth() {\n+            Point leading = getLeadingCell();\n+            Rectangle cellRect = getCellRect(leading.x, leading.y, true);\n+            return cellRect.width;\n+        }\n+\n+        public Point getLeadingCell() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            Rectangle visRect = getVisibleRect();\n+            int row = rowAtPoint(visRect.getLocation());\n+            int column;\n+            if (isLeftToRight) {\n+                column = columnAtPoint(visRect.getLocation());\n+            }\n+            else {\n+                column = columnAtPoint(new Point(visRect.x + visRect.width - 1, visRect.y));\n+            }\n+            return new Point(row, column);\n+        }\n+    }\n+\n+    class TestList extends JList implements TestTools {\n+        final int[] MAXVALS = {5, 16, 15, 20, 25, 20, 15, 10 };\n+        public TestList(ListModel model) {\n+            super(model);\n+        }\n+\n+        \/\/ Note - implemented in terms of columns\n+        public Point getLeadingCell() {\n+            System.out.println(\"TL.gLC(): first vis index is \"\n+                    + getFirstVisibleIndex());\n+            return new Point(getFirstVisibleIndex() \/ ROWS,\n+                    getFirstVisibleIndex() \/ ROWS);\n+        }\n+        public void checkTopCellIsLinedUp() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            int visIdx = getFirstVisibleIndex();\n+            Rectangle cellRect = getCellBounds(visIdx, visIdx);\n+            Rectangle visRect = getVisibleRect();\n+            if (isLeftToRight) {\n+                if (cellRect.x != visRect.x) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+            else {\n+                if (cellRect.x + cellRect.width != visRect.x + visRect.width) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+        }\n+        public void checkTopCellIs(int col) {\n+            int firstVis = getLeadingCell().y;\n+            if (firstVis != col) {\n+                throw new RuntimeException(\"leading cell (\"\n+                        + firstVis + \") is not \" + col);\n+            }\n+        }\n+        public void checkTopCellIs(int idx, int shift) {\n+            checkTopCellIs(idx + shift);\n+\n+        }\n+        public void checkTopCellIsMax(int idx) {\n+            checkTopCellIs(MAXVALS[idx]);\n+        }\n+        public int getLeadingCellWidth() {\n+            int visIdx = getFirstVisibleIndex();\n+            Rectangle cellRect = getCellBounds(visIdx, visIdx);\n+            System.out.println(\"TL.gLCW(): leading cell width is \" + cellRect.width);\n+            return cellRect.width;\n+        }\n+    }\n+\n+    private interface TestTools {\n+        \/**\n+         * Throws a runtime exception if the top cell isn't lined up\n+         *\/\n+        void checkTopCellIsLinedUp();\n+        void checkTopCellIs(int col);\n+        void checkTopCellIs(int col, int shift);\n+        int getLeadingCellWidth();\n+        Point getLeadingCell();\n+\n+        void checkTopCellIsMax(int idx);\n+    }\n+\n+    public void scrollToMiddle(JScrollPane jsp, Robot robot)\n+            throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            sb = jsp.getHorizontalScrollBar();\n+            loc = sb.getLocationOnScreen();\n+            size = sb.getSize();\n+        });\n+        robot.setAutoDelay(250);\n+\n+        robot.mouseMove(loc.x + size.width \/ 2,\n+                loc.y + size.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (jsp == listScroller) {\n+                int idx = list.getFirstVisibleIndex();\n+                list.ensureIndexIsVisible(idx);\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> f = new RTLScrollers());\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f.setVisible(true);\n+                f.dispose();\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/AcceleratedWheelScrolling\/RTLScrollers.java","additions":680,"deletions":0,"binary":false,"changes":680,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4166037\n+ * @summary Tests if changes to JScrollPane propagate to ScrollPaneLayout\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4166037\n+ *\/\n+\n+import java.awt.Color;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.ScrollPaneLayout;\n+\n+public class bug4166037 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Press button \"Never\". Scroll bars should disappear.\n+        Press button \"Always\". Scroll bars should appear.\n+        Press button \"Colhead\". Label ColumnHeader should\n+        get replaced with yellow rectangles.\n+        Press button \"Corner\". You should see 4 green\n+        rectangles in the corners of the scroll pane.\n+        Press button \"Rowhead\". Label RowHeader should get\n+        replaced with yellow rectangles.\n+        Press button \"Viewport\". Viewport (the rest of the\n+        area except scrollbars) should get replaced with yellow\n+        rectangles.\n+        If the behavior is as described, the test PASSES.\n+        Otherwise, this test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4166037 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4166037::createUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"JScrollPane in JScrollLayout Test\");\n+        JScrollPane scroll = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        JPanel p = new JPanel();\n+        scroll.setSize(200, 200);\n+        f.add(scroll);\n+        f.setLayout(new BoxLayout(f.getContentPane(), BoxLayout.Y_AXIS));\n+        JButton bn = new JButton(\"Never\");\n+        bn.addActionListener(e -> {\n+            PassFailJFrame.log(\"pane before: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout before: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\n+            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n+            PassFailJFrame.log(\"pane after: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout after: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+        });\n+        JButton ba = new JButton(\"Always\");\n+        ba.addActionListener(e -> {\n+            PassFailJFrame.log(\"pane before: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout before: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n+            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+            PassFailJFrame.log(\"pane after: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout after: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+        });\n+        JLabel ch = new JLabel(\"ColumnHeader\");\n+        scroll.setColumnHeaderView(ch);\n+        JButton b1 = new JButton(\"Colhead\");\n+        b1.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getColumnHeader().add(filler);\n+        });\n+        JButton b2 = new JButton(\"Corners\");\n+        b2.addActionListener(e -> {\n+            JPanel filler1 = new JPanel();\n+            filler1.setSize(150, 150);\n+            filler1.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.LOWER_RIGHT_CORNER, filler1);\n+            JPanel filler2 = new JPanel();\n+            filler2.setSize(150, 150);\n+            filler2.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.LOWER_LEFT_CORNER, filler2);\n+            JPanel filler3 = new JPanel();\n+            filler3.setSize(150, 150);\n+            filler3.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.UPPER_RIGHT_CORNER, filler3);\n+            JPanel filler4 = new JPanel();\n+            filler4.setSize(150, 150);\n+            filler4.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.UPPER_LEFT_CORNER, filler4);\n+        });\n+        JLabel rh = new JLabel(\"RowHeader\");\n+        scroll.setRowHeaderView(rh);\n+        JButton b3 = new JButton(\"Rowhead\");\n+        b3.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getRowHeader().add(filler);\n+        });\n+        JButton b4 = new JButton(\"Viewport\");\n+        b4.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getViewport().add(filler);\n+        });\n+\n+        p.add(bn);\n+        p.add(ba);\n+        p.add(b1);\n+        p.add(b2);\n+        p.add(b3);\n+        p.add(b4);\n+        f.add(p);\n+        f.setSize(300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4166037.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4237517\n+ * @summary Tests that scrolling with blit draws the right thing\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4237517\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+\n+public class bug4237517 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Select the first item in the list and hit PageDown\n+        key two times. If the list is redrawn correctly,\n+        i.e. if the digits go in order, then the test PASSES.\n+        Otherwise, the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4237517 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4237517::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Scrolling Window Blit Test\");\n+        String[] data = new String[100];\n+\n+        for (int counter = 0; counter < data.length; counter++) {\n+            data[counter] = Integer.toString(counter);\n+        }\n+        JList list = new JList(data);\n+        JScrollPane sp = new JScrollPane(list);\n+        sp.getViewport().putClientProperty(\"EnableWindowBlit\", Boolean.TRUE);\n+        f.add(sp);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4237517.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4237560\n+ * @summary Tests that JScrollPane do not distort TAB order in an HTML page\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4237560\n+ *\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+\n+public class bug4237560 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        A JEditorPane contains 10 input fields and is inserted into\n+        JScrollPane. Click text field #8 so that it is selected. Press\n+        TAB three times (even if text field #9 and #10 are not visible in\n+        the ScrollPane). If this gives focus to the first text field (#1)\n+        the test PASSES, else it FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4237560 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4237560::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final String TEXT = \"<html><body><form method=\\\"POST\\\"><table>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"1\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"2\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"3\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"4\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"5\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"6\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"7\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"8\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"9\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"10\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<\/table><\/form><\/body><\/html>\";\n+\n+    private static JFrame createUI() {\n+        JFrame frame = new JFrame(\"JScrollPane HTML TAB Test\");\n+        JEditorPane viewer = new JEditorPane(\"text\/html\", TEXT);\n+        viewer.setEditable(false);\n+        frame.add(new JScrollPane(viewer));\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4237560.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4244899\n+ * @summary Tests whether scrolling with blit has artifacts\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4244899\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+public class bug4244899 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Widen the first column of the table, so that\n+        you get a horizontal scrollbar. Click in the\n+        scrollbar (not on the thumb, but in the track).\n+        If you notice some artifacts\/flashing at\n+        the bottom of the frame, the test FAILS.\n+        Otherwise, the test PASSES.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4244899 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4244899::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static class TestModel extends AbstractTableModel {\n+        private final int rows = 20;\n+        private final int cols = 5;\n+\n+        private Integer[][] data;\n+\n+        public TestModel() {\n+            data = new Integer[rows][];\n+            int realCount = 0;\n+            for (int counter = 0; counter < rows; counter++) {\n+                data[counter] = new Integer[cols];\n+                for (int y = 0; y < cols; y++) {\n+                    data[counter][y] = Integer.valueOf(realCount);\n+                    realCount = (realCount + 1) % 23;\n+                }\n+            }\n+        }\n+\n+        public int getRowCount() {\n+            return data.length;\n+        }\n+\n+        public int getColumnCount() {\n+            return data[0].length;\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            return data[row][column];\n+        }\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Scrolling Blit Artifact Test\");\n+        JTable table = new JTable(new TestModel());\n+        JScrollPane sp = new JScrollPane(table);\n+        sp.getViewport().putClientProperty(\"EnableWindowBlit\", Boolean.TRUE);\n+        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        f.add(sp);\n+        f.setSize(400, 400);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4244899.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4382876\n+ * @summary Tests if JSlider fires ChangeEvents when thumb is clicked and not moved\n+ * @key headful\n+ * @run main bug4186062\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JSlider;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.ChangeListener;\n+\n+public class bug4186062 {\n+    private static JFrame f;\n+    private static JSlider slider;\n+    private static volatile Point loc;\n+    private static volatile int labelNum;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"JSlider Click Value Test\");\n+                f.setSize(400, 200);\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+                JPanel panel = new JPanel();\n+                slider = new JSlider();\n+                final JLabel label = new JLabel(\"0\");\n+                labelNum = 0;\n+\n+                ChangeListener listener = e -> {\n+                    labelNum++;\n+                    label.setText(\"\" + labelNum);\n+                };\n+                slider.addChangeListener(listener);\n+\n+                panel.add(slider);\n+                panel.add(label);\n+                f.add(panel);\n+            });\n+\n+            Robot r = new Robot();\n+            r.setAutoDelay(100);\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = slider.getLocationOnScreen();\n+                loc.setLocation(loc.x + (slider.getWidth() \/ 2),\n+                        loc.y + (slider.getHeight() \/ 2));\n+            });\n+\n+            r.mouseMove(loc.x, loc.y);\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (labelNum > 0) {\n+                throw new RuntimeException(labelNum + \" ChangeEvents fired. \" +\n+                        \"Test failed\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSlider\/bug4186062.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4275631\n+ * @summary Tests if vertical JSlider is properly aligned in large container\n+ * @key headful\n+ * @run main bug4275631\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSlider;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4275631 {\n+    private static final int OFFSET = 1;\n+    private static JFrame f;\n+    private static JSlider slider1;\n+    private static JSlider slider2;\n+    private static volatile Point loc1;\n+    private static volatile Point loc2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"JSlider Alignment Test\");\n+                f.setSize(400, 200);\n+                f.setLocationRelativeTo(null);\n+\n+                \/\/ Create two sliders, verify the alignment on the slider to be\n+                \/\/ used in the border layout\n+                slider1 = new JSlider(JSlider.VERTICAL, 0, 99, 50);\n+                slider1.setInverted(true);\n+                slider1.setMajorTickSpacing(10);\n+                slider1.setMinorTickSpacing(1);\n+                slider1.setPaintTicks(true);\n+                slider1.setPaintLabels(true);\n+                slider2 = new JSlider(JSlider.VERTICAL, 0, 99, 50);\n+                slider2.setInverted(true);\n+                slider2.setMajorTickSpacing(10);\n+                slider2.setMinorTickSpacing(1);\n+                slider2.setPaintTicks(true);\n+                slider2.setPaintLabels(true);\n+\n+                \/\/ Try to center the natural way, using a border layout in the \"Center\"\n+                JPanel borderPanel = new JPanel();\n+                borderPanel.setLayout(new BorderLayout());\n+                borderPanel.setBorder(BorderFactory.createTitledBorder(\"BorderLayout\"));\n+                borderPanel.add(slider1, BorderLayout.CENTER);\n+                borderPanel.setPreferredSize(new Dimension(200, 200));\n+\n+                \/\/ Try to center using GridBagLayout, with glue on left\n+                \/\/ and right to squeeze slider into place\n+                JPanel gridBagPanel = new JPanel(new GridBagLayout());\n+                gridBagPanel.setBorder(BorderFactory.createTitledBorder(\"GridBagLayout\"));\n+                GridBagConstraints c = new GridBagConstraints();\n+                c.gridx = 1;\n+                c.fill = GridBagConstraints.VERTICAL;\n+                c.weighty = 1.0;\n+                gridBagPanel.add(slider2, c);\n+                c.gridx = 0;\n+                c.fill = GridBagConstraints.BOTH;\n+                c.weighty = 0.0;\n+                gridBagPanel.add(Box.createHorizontalGlue(), c);\n+                c.gridx = 2;\n+                c.fill = GridBagConstraints.BOTH;\n+                gridBagPanel.add(Box.createHorizontalGlue(), c);\n+                gridBagPanel.setPreferredSize(new Dimension(200, 200));\n+\n+                f.add(borderPanel, BorderLayout.WEST);\n+                f.add(gridBagPanel, BorderLayout.EAST);\n+                f.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.setAutoDelay(100);\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc1 = slider1.getLocationOnScreen();\n+                loc1.setLocation(loc1.x + (slider1.getWidth() \/ 2),\n+                        loc1.y + (slider1.getHeight() \/ 2));\n+\n+                loc2 = slider2.getLocationOnScreen();\n+                loc2.setLocation(loc2.x + (slider2.getWidth() \/ 2),\n+                        loc2.y + (slider2.getHeight() \/ 2));\n+            });\n+\n+           if (loc1.y > loc2.y + OFFSET || loc1.y < loc2.y - OFFSET) {\n+               throw new RuntimeException(\"JSlider position is not aligned!\");\n+           }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSlider\/bug4275631.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4382876\n+ * @summary Tests how PgUp and PgDn keys work with JSlider\n+ * @key headful\n+ * @run main bug4382876\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.ComponentOrientation;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JSlider;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4382876 {\n+    private static Robot r;\n+    private static JFrame f;\n+    private static JSlider slider;\n+    private static boolean upFail;\n+    private static boolean downFail;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"JSlider PageUp\/Down Test\");\n+                f.setSize(300, 200);\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+                slider = new JSlider(-1000, -900, -1000);\n+                slider.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+                slider.putClientProperty(\"JSlider.isFilled\", Boolean.TRUE);\n+                f.add(slider, BorderLayout.CENTER);\n+            });\n+\n+            r = new Robot();\n+            r.setAutoDelay(100);\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            r.keyPress(KeyEvent.VK_PAGE_UP);\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (slider.getValue() < -1000) {\n+                    System.out.println(\"PAGE_UP VAL: \" + slider.getValue());\n+                    upFail = true;\n+                }\n+            });\n+            if (upFail) {\n+                writeFailImage();\n+                throw new RuntimeException(\"Slider value did NOT change with PAGE_UP\");\n+            }\n+            r.keyPress(KeyEvent.VK_PAGE_DOWN);\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (slider.getValue() > -1000) {\n+                    System.out.println(\"PAGE_DOWN VAL: \" + slider.getValue());\n+                    downFail = true;\n+                }\n+            });\n+            if (downFail) {\n+                writeFailImage();\n+                throw new RuntimeException(\"Slider value did NOT change with PAGE_DOWN\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void writeFailImage() throws IOException {\n+        GraphicsConfiguration ge = GraphicsEnvironment\n+                .getLocalGraphicsEnvironment().getDefaultScreenDevice()\n+                .getDefaultConfiguration();\n+        BufferedImage failImage = r.createScreenCapture(ge.getBounds());\n+        ImageIO.write(failImage, \"png\", new File(\"failImage.png\"));\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSlider\/bug4382876.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Panel;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.JSplitPane;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4820080 7175397\n+ * @summary RFE: Cannot Change the JSplitPane Divider Color while dragging\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4820080\n+ *\/\n+\n+public class bug4820080 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Drag the dividers of the splitpanes (both top and bottom). If the divider\n+            color is green while dragging then test passes, otherwise test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4820080::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4820080\");\n+        UIManager.put(\"SplitPaneDivider.draggingColor\", Color.GREEN);\n+\n+        Box box = new Box(BoxLayout.Y_AXIS);\n+        frame.add(box);\n+\n+        JPanel jleft = new JPanel();\n+        jleft.setBackground(Color.DARK_GRAY);\n+        jleft.setPreferredSize(new Dimension(100, 100));\n+        JPanel jright = new JPanel();\n+        jright.setBackground(Color.DARK_GRAY);\n+        jright.setPreferredSize(new Dimension(100, 100));\n+\n+        JSplitPane jsp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, jleft, jright);\n+        jsp.setContinuousLayout(false);\n+        box.add(jsp);\n+\n+        box.add(Box.createVerticalStrut(5));\n+        box.add(new JSeparator());\n+        box.add(Box.createVerticalStrut(5));\n+\n+        Panel left = new Panel();\n+        left.setBackground(Color.DARK_GRAY);\n+        left.setPreferredSize(new Dimension(100, 100));\n+        Panel right = new Panel();\n+        right.setBackground(Color.DARK_GRAY);\n+        right.setPreferredSize(new Dimension(100, 100));\n+\n+        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, left, right);\n+        sp.setContinuousLayout(false);\n+        box.add(sp);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/bug4820080.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4613811\n+ * @summary Scrollable Buttons of JTabbedPane don't\n+ *          get enabled or disabled on selecting tab\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4613811\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTabbedPane;\n+\n+public class bug4613811 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Select different tabs and check that the scrollable\n+            buttons are correctly enabled and disabled.\n+\n+            When the very first tab (Tab 1) is fully visible\n+            On macOS:\n+            the left arrow button should NOT be visible.\n+\n+            On other platforms:\n+            the left arrow button should be disabled.\n+\n+            If the last tab (Tab 5) is fully visible\n+            On macOS:\n+            the right arrow button should NOT be visible.\n+\n+            On other platforms:\n+            the right arrow button should be disabled.\n+\n+            If the above is true press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(30)\n+                .testUI(bug4613811::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JFrame frame = new JFrame(\"bug4613811 - JTabbedPane Test\");\n+        final JTabbedPane tabPane = new JTabbedPane(JTabbedPane.TOP,\n+                                                    JTabbedPane.SCROLL_TAB_LAYOUT);\n+        for (int i = 1; i <= 5; i++) {\n+            tabPane.addTab(\"TabbedPane: Tab \" + i, null, new JLabel(\"Tab \" + i));\n+        }\n+        frame.add(tabPane, BorderLayout.CENTER);\n+        frame.setResizable(false);\n+        frame.setSize(400, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/bug4613811.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4115930\n+ * @summary Verify checkboxes in the table respond to first click.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CheckBoxFirstClick\n+ *\/\n+\n+public class CheckBoxFirstClick {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click over the checkbox in the table. It should change state\n+            on the first click. If not - press 'fail'.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(CheckBoxFirstClick::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"ListSizeBug\");\n+\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+                {\"Alan\", \"Chung\", \"Green\", 838, false},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+                {\"James\", \"Gosling\", \"Pink\", 21, false},\n+                {\"David\", \"Karlton\", \"Red\", 1, false},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+                {\"Dave\", \"Moore\", \"Green\", 88, false},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+                {\"Chester\", \"Rose\", \"Black\", 0, false},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+                {\"Georges\", \"Saab\", \"Red\", 4, false},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/CheckBoxFirstClick.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4133143\n+ * @summary Illegal State exception in ComboBox editor in table\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual IllegalStateException\n+ *\/\n+\n+public class IllegalStateException {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Click on a cell in the first column, delete the contents but leave the editor with focus.\n+            Click on the third column popping up a combo box.\n+            Verify that the text editor loses focus.\n+            If it does, press \"pass\", otherwise press \"fail\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(IllegalStateException::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"IllegalStateException\");\n+\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+                {\"Alan\", \"Chung\", \"Green\", 838, false},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+                {\"James\", \"Gosling\", \"Pink\", 21, false},\n+                {\"David\", \"Karlton\", \"Red\", 1, false},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+                {\"Dave\", \"Moore\", \"Green\", 88, false},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+                {\"Chester\", \"Rose\", \"Black\", 0, false},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+                {\"Georges\", \"Saab\", \"Red\", 4, false},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/IllegalStateException.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4179066\n+ * @summary Tests that JTable prints AltGr characters (~\\@|{}[]²µ³)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual InternationalCharacters\n+ *\/\n+\n+public class InternationalCharacters {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Double-click an entry in the JTable.\n+            Press Alt-Gr or Option with any key to type an international character.\n+            Verify that the international character appears in the table.\n+            If it does, press \"pass\", otherwise press \"fail\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(InternationalCharacters::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"InternationalCharacters test\");\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+            {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+            {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+            {\"Alan\", \"Chung\", \"Green\", 838, false},\n+            {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+            {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+            {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+            {\"James\", \"Gosling\", \"Pink\", 21, false},\n+            {\"David\", \"Karlton\", \"Red\", 1, false},\n+            {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+            {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+            {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+            {\"Dave\", \"Moore\", \"Green\", 88, false},\n+            {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+            {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+            {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+            {\"Chester\", \"Rose\", \"Black\", 0, false},\n+            {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+            {\"Georges\", \"Saab\", \"Red\", 4, false},\n+            {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+            {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+            {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() { return names.length; }\n+            public int getRowCount() { return data.length;}\n+            public Object getValueAt(int row, int col) {return data[row][col];}\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {return names[column];}\n+            public Class getColumnClass(int c) {return getValueAt(0, c).getClass();}\n+            public boolean isCellEditable(int row, int col) {return true;}\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+         };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer)headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number)value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/InternationalCharacters.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4129409\n+ * @summary Tests that JTable.setTableHeader(null) doesn't break AutoResize\n+ * @key headful\n+ * @run main NullTableHeader\n+ *\/\n+\n+public class NullTableHeader {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JTable tableView = new JTable();\n+            tableView.setTableHeader(null);\n+            tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/NullTableHeader.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.DefaultTableCellRenderer;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4201917\n+ * @summary Shift Click in table before making selection\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ShiftClick\n+ *\/\n+\n+public class ShiftClick {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Shift click in the table. Check that all cells\n+            from the first through where you clicked are selected.\n+            If the cells are selected, press pass, otherwise fail.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(ShiftClick::createTestUI)\n+                .logArea(6)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"ShiftClick\");\n+\n+        \/\/ Take the dummy data from SwingSet.\n+        final String[] names = {\"First Name\", \"Last Name\", \"Favorite Color\",\n+                \"Favorite Number\", \"Vegetarian\"};\n+        final Object[][] data = {\n+                {\"Mark\", \"Andrews\", \"Red\", 2, true},\n+                {\"Tom\", \"Ball\", \"Blue\", 99, false},\n+                {\"Alan\", \"Chung\", \"Green\", 838, false},\n+                {\"Jeff\", \"Dinkins\", \"Turquois\", 8, true},\n+                {\"Amy\", \"Fowler\", \"Yellow\", 3, false},\n+                {\"Brian\", \"Gerhold\", \"Green\", 0, false},\n+                {\"James\", \"Gosling\", \"Pink\", 21, false},\n+                {\"David\", \"Karlton\", \"Red\", 1, false},\n+                {\"Dave\", \"Kloba\", \"Yellow\", 14, false},\n+                {\"Peter\", \"Korn\", \"Purple\", 12, false},\n+                {\"Phil\", \"Milne\", \"Purple\", 3, false},\n+                {\"Dave\", \"Moore\", \"Green\", 88, false},\n+                {\"Hans\", \"Muller\", \"Maroon\", 5, false},\n+                {\"Rick\", \"Levenson\", \"Blue\", 2, false},\n+                {\"Tim\", \"Prinzing\", \"Blue\", 22, false},\n+                {\"Chester\", \"Rose\", \"Black\", 0, false},\n+                {\"Ray\", \"Ryan\", \"Gray\", 77, false},\n+                {\"Georges\", \"Saab\", \"Red\", 4, false},\n+                {\"Willie\", \"Walker\", \"Phthalo Blue\", 4, false},\n+                {\"Kathy\", \"Walrath\", \"Blue\", 8, false},\n+                {\"Arnaud\", \"Weber\", \"Green\", 44, false}\n+        };\n+\n+        \/\/ Create a model of the data.\n+        TableModel dataModel = new AbstractTableModel() {\n+            \/\/ These methods always need to be implemented.\n+            public int getColumnCount() {\n+                return names.length;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+\n+            \/\/ The default implementations of these methods in\n+            \/\/ AbstractTableModel would work, but we can refine them.\n+            public String getColumnName(int column) {\n+                return names[column];\n+            }\n+\n+            public Class getColumnClass(int c) {\n+                return getValueAt(0, c).getClass();\n+            }\n+\n+            public boolean isCellEditable(int row, int col) {\n+                return true;\n+            }\n+\n+            public void setValueAt(Object aValue, int row, int column) {\n+                System.out.println(\"Setting value to: \" + aValue);\n+                data[row][column] = aValue;\n+            }\n+        };\n+\n+        \/\/ Create the table\n+        JTable tableView = new JTable(dataModel);\n+        \/\/ Turn off auto-resizing so that we can set column sizes programmatically.\n+        \/\/ In this mode, all columns will get their preferred widths, as set blow.\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+\n+        \/\/ Create a combo box to show that you can use one in a table.\n+        JComboBox comboBox = new JComboBox();\n+        comboBox.addItem(\"Red\");\n+        comboBox.addItem(\"Orange\");\n+        comboBox.addItem(\"Yellow\");\n+        comboBox.addItem(\"Green\");\n+        comboBox.addItem(\"Blue\");\n+        comboBox.addItem(\"Indigo\");\n+        comboBox.addItem(\"Violet\");\n+\n+        TableColumn colorColumn = tableView.getColumn(\"Favorite Color\");\n+        \/\/ Use the combo box as the editor in the \"Favorite Color\" column.\n+        colorColumn.setCellEditor(new DefaultCellEditor(comboBox));\n+\n+        \/\/ Set a pink background and tooltip for the Color column renderer.\n+        DefaultTableCellRenderer colorColumnRenderer = new DefaultTableCellRenderer();\n+        colorColumnRenderer.setBackground(Color.pink);\n+        colorColumnRenderer.setToolTipText(\"Click for combo box\");\n+        colorColumn.setCellRenderer(colorColumnRenderer);\n+\n+        \/\/ Set a tooltip for the header of the colors column.\n+        TableCellRenderer headerRenderer = colorColumn.getHeaderRenderer();\n+        if (headerRenderer instanceof DefaultTableCellRenderer)\n+            ((DefaultTableCellRenderer) headerRenderer).setToolTipText(\"Hi Mom!\");\n+\n+        \/\/ Set the width of the \"Vegetarian\" column.\n+        TableColumn vegetarianColumn = tableView.getColumn(\"Vegetarian\");\n+        vegetarianColumn.setPreferredWidth(100);\n+\n+        \/\/ Show the values in the \"Favorite Number\" column in different colors.\n+        TableColumn numbersColumn = tableView.getColumn(\"Favorite Number\");\n+        DefaultTableCellRenderer numberColumnRenderer = new DefaultTableCellRenderer() {\n+            public void setValue(Object value) {\n+                int cellValue = (value instanceof Number) ? ((Number) value).intValue() : 0;\n+                setForeground((cellValue > 30) ? Color.black : Color.red);\n+                setText((value == null) ? \"\" : value.toString());\n+            }\n+        };\n+        numberColumnRenderer.setHorizontalAlignment(JLabel.RIGHT);\n+        numbersColumn.setCellRenderer(numberColumnRenderer);\n+        numbersColumn.setPreferredWidth(110);\n+\n+        \/\/ Finish setting up the table.\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        scrollpane.setBorder(new BevelBorder(BevelBorder.LOWERED));\n+        scrollpane.setPreferredSize(new Dimension(430, 200));\n+\n+        frame.add(scrollpane);\n+        frame.setSize(500, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/ShiftClick.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4118307\n+ * @summary Tests that JTable's cell editor for Number and Date work correctly\n+ * @key headful\n+ * @run main bug4118307\n+ *\/\n+\n+public class bug4118307 {\n+    static JFrame frame;\n+    static MyTable tbl;\n+    static Point tableLoc;\n+    static Point p;\n+    private static volatile boolean flag;\n+    static final String[] columnNames = {\"Integer\", \"Double\"};\n+    static final Object[][] data = {\n+            {5, 3.14},\n+            {10, 2.71},\n+            {70, 3.14},\n+            {200, 2.71},\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                tableLoc = tbl.getLocationOnScreen();\n+                p = tbl.getCellRect(0, 0, true).getLocation();\n+            });\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    p = tbl.getCellRect(1, 1, true).getLocation());\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    p = tbl.getCellRect(1, 0, true).getLocation());\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(5000);\n+\n+            if (!flag) {\n+                throw new RuntimeException(\"Test Failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4118307\");\n+        MyTableModel myModel = new MyTableModel();\n+        tbl = new MyTable(myModel);\n+        JScrollPane sp = new JScrollPane(tbl);\n+        flag = true;\n+\n+        frame.add(sp, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static class MyTable extends JTable {\n+        public MyTable(TableModel tm) {\n+            super(tm);\n+        }\n+\n+        public Component prepareRenderer(TableCellRenderer rend, int row, int col) {\n+            try {\n+                return super.prepareRenderer(rend, row, col);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                flag = false;\n+                return null;\n+            }\n+        }\n+    }\n+\n+    static class MyTableModel extends AbstractTableModel {\n+        public int getColumnCount() {\n+            return columnNames.length;\n+        }\n+\n+        public int getRowCount() {\n+            return data.length;\n+        }\n+\n+        @Override\n+        public String getColumnName(int col) {\n+            return columnNames[col];\n+        }\n+\n+        public Object getValueAt(int row, int col) {\n+            return data[row][col];\n+        }\n+\n+        public Class getColumnClass(int c) {\n+            return getValueAt(0, c).getClass();\n+        }\n+\n+        @Override\n+        public boolean isCellEditable(int row, int col) {\n+            return true;\n+        }\n+\n+        @Override\n+        public void setValueAt(Object value, int row, int col) {\n+            data[row][col] = value;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4118307.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4128506\n+ * @summary Tests that JTable with AUTO_RESIZE_ALL_COLUMNS correctly compute width of columns\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4128506\n+ *\/\n+\n+public class bug4128506 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            If the columns of JTable have the same width the test passes, else test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4128506::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        final Object[][] data = {\n+                {\"cell_1_1\", \"cell_1_2\", \"cell_1_3\"},\n+                {\"cell_2_1\", \"cell_2_2\", \"cell_2_3\"},\n+                {\"cell_3_1\", \"cell_3_2\", \"cell_3_3\"},\n+                {\"cell_4_1\", \"cell_4_2\", \"cell_4_3\"},\n+        };\n+\n+        TableModel dataModel = new AbstractTableModel() {\n+            public int getColumnCount() {\n+                return 3;\n+            }\n+\n+            public int getRowCount() {\n+                return data.length;\n+            }\n+\n+            public Object getValueAt(int row, int col) {\n+                return data[row][col];\n+            }\n+        };\n+\n+        JFrame frame = new JFrame(\"bug4128506\");\n+        JTable tableView = new JTable(dataModel);\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);\n+        tableView.getColumnModel().getColumn(1).setMinWidth(5);\n+        JScrollPane scrollpane = new JScrollPane(tableView);\n+        frame.add(scrollpane);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4128506.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4129401\n+ * @summary Tests that keystroking for combobox cell editor in JTable works\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4129401\n+ *\/\n+\n+public class bug4129401 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Move the mouse cursor to the cell \"CELL 2 1\",\n+               which contains JComboBox and click left mouse button\n+               to drop down combobox list.\n+            2. Change selected item in the combobox list\n+               using up and down arrows.\n+            3. Press Esc. JComboBox drop down list should hide.\n+            If all was successful then test passes, else test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4129401::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        Object data[][] = new Object[4][2];\n+        JComboBox cb = new JComboBox();\n+        cb.addItem(\"Item1\");\n+        cb.addItem(\"Item2\");\n+        cb.addItem(\"Item3\");\n+        cb.addItem(\"Item4\");\n+        data[0][0] = \"CELL 0 0\";\n+        data[0][1] = \"CELL 0 1\";\n+        data[1][0] = \"CELL 1 0\";\n+        data[1][1] = \"CELL 1 1\";\n+        data[2][0] = \"CELL 2 0\";\n+        data[2][1] = \"CELL 2 1\";\n+        data[3][0] = \"CELL 3 0\";\n+        data[3][1] = \"CELL 3 1\";\n+        String[] str = {\"Column 0\", \"Column 1\"};\n+        JTable tbl = new JTable(data, str);\n+        JScrollPane sp = new JScrollPane(tbl);\n+\n+        TableColumn col = tbl.getColumn(\"Column 1\");\n+        col.setCellEditor(new DefaultCellEditor(cb));\n+\n+        JFrame f = new JFrame(\"4129401 test\");\n+        f.getContentPane().add(sp);\n+        f.setBounds(100, 100, 300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4129401.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+\n+\/*\n+ * @test\n+ * @bug 4138158\n+ * @summary Tests that setAutoscrolls(false) locks autoscroll\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4138158\n+ *\/\n+\n+public class bug4138158 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Move mouse to beginning of table, press left mouse button and drag mouse down\n+            below the frame. If the table isn't scrolled down then test passes.\n+            If the table is scrolled then test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4138158::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4138158\");\n+        JTable table = new JTable(20, 3);\n+        table.setAutoscrolls(false);\n+        JScrollPane sp = new JScrollPane(table);\n+        frame.add(sp);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4138158.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.DefaultTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4139910\n+ * @summary Column resize mouse pointer doesn't display in non-resizable JTable.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4139910\n+ *\/\n+\n+public class bug4139910 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Move mouse pointer to the position between \"A\" and \"B\" headers.\n+            If mouse pointer does not change its shape then test passes. If\n+            it does then test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4139910::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4139910\");\n+\n+        String[] colName = {\"A\", \"B\"};\n+        JTable tbl = new JTable(new DefaultTableModel(colName, 6));\n+        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        tbl.getTableHeader().setReorderingAllowed(false);\n+        tbl.getTableHeader().setResizingAllowed(false);\n+        JScrollPane sp = new JScrollPane(tbl);\n+        frame.add(sp);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4139910.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4188504\n+ * @summary setResizable for specified column.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4188504\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+\n+public class bug4188504 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. A table is displayed with 3 columns - A, B, C.\n+\n+            2. Try to resize second column of table (Move mouse to the position\n+            between \"B\" and \"C\" headers, press left mouse button and move to\n+            right\/left).\n+            PLEASE NOTE: You may be able to swap the columns but make sure the\n+            width of column B stays the same.\n+\n+            3. If the second column does not change its width then press PASS\n+            otherwise press FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(createAndShowUI())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowUI() {\n+        JFrame jFrame = new JFrame(\"bug4188504\");\n+        JTable tableView = new JTable(4, 3);\n+        tableView.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        tableView.getColumnModel().getColumn(1).setResizable(false);\n+\n+        jFrame.add(new JScrollPane(tableView));\n+        jFrame.setSize(300, 150);\n+        return jFrame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4188504.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.util.Vector;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4190222\n+ * @summary Setting data vector on the model correctly repaint table\n+ * @key headful\n+ * @run main bug4190222\n+ *\/\n+\n+public class bug4190222 {\n+    static JFrame frame;\n+    static DefaultTableModel dtm;\n+    static JTable tbl;\n+\n+    static Vector data;\n+    static Vector colNames;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                Dimension preResize = tbl.getSize();\n+                dtm.setDataVector(data, colNames);\n+\n+                if (!preResize.equals(tbl.getSize())) {\n+                    throw new RuntimeException(\"Size of table changed after resizing.\");\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4190222\");\n+\n+        data = new Vector(1, 1);\n+        colNames = new Vector(3);\n+        for (int i = 1; i < 4; i++) {\n+            Vector row = new Vector(1, 1);\n+            row.addElement(\"Row \" + i + \", Col 1\");\n+            row.addElement(\"Row \" + i + \", Col 2\");\n+            row.addElement(\"Row \" + i + \", Col 3\");\n+            data.addElement(row);\n+        }\n+        colNames.addElement(\"Col 1\");\n+        colNames.addElement(\"Col 2\");\n+        colNames.addElement(\"Col 3\");\n+\n+        dtm = new DefaultTableModel(data, colNames);\n+        tbl = new JTable(dtm);\n+        JScrollPane scrollPane = new JScrollPane(tbl);\n+        frame.add(\"Center\", scrollPane);\n+        JPanel panel = new JPanel();\n+        frame.add(\"South\", panel);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4190222.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.FontMetrics;\n+import java.util.Vector;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4193727\n+ * @summary Tests that resizing JTable via TableColumn's\n+ *          setWidth(int) repaints correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4193727\n+ *\/\n+\n+public class bug4193727 {\n+    static EnhancedJTable tblResults;\n+    static JButton bTest = new JButton(\"Resize\");\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Push button \"Resize\".\n+            If either of the following happen, test fails:\n+            1) The size of the columns change\n+            2) The JTable is not repainted correctly\n+\n+            Otherwise test passes.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4193727::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4193727\");\n+        Vector v = new Vector();\n+        Vector data = new Vector();\n+        Vector cols = new Vector();\n+\n+        cols.add(\"Name\");\n+        cols.add(\"Address\");\n+        data.add(\"Steve\");\n+        data.add(\"100 East Main Street\");\n+        v.add(data);\n+\n+        data.add(\"Richard\");\n+        data.add(\"99 Main Road\");\n+        v.add(data);\n+\n+        frame.setLayout(new BorderLayout());\n+        tblResults = new EnhancedJTable(v, cols);\n+        MyTableHeader mth = new MyTableHeader();\n+        for (int i = 0; i < tblResults.getColumnCount(); i++)\n+            tblResults.getColumnModel().getColumn(i).setHeaderRenderer(mth.getTHR());\n+        tblResults.setAutoResizeMode(EnhancedJTable.AUTO_RESIZE_OFF);\n+\n+        JScrollPane pane = new JScrollPane(tblResults);\n+        frame.add(pane, BorderLayout.CENTER);\n+        JPanel panel = new JPanel();\n+        panel.add(bTest);\n+        frame.add(panel, BorderLayout.EAST);\n+        bTest.addActionListener(e -> tblResults.autoSizeColumns());\n+        frame.setSize(300, 200);\n+        return frame;\n+    }\n+}\n+\n+class MyTableHeader extends TableColumn {\n+    public TableCellRenderer getTHR() {\n+        return createDefaultHeaderRenderer();\n+    }\n+}\n+\n+class EnhancedJTable extends JTable {\n+    public EnhancedJTable(Vector data, Vector colNames) {\n+        super(data, colNames);\n+    }\n+\n+    public synchronized void autoSizeColumns() {\n+        setAutoResizeMode(AUTO_RESIZE_OFF);\n+        int colcnt = getColumnCount();\n+        int rowcnt = getRowCount();\n+\n+        for (int i = 0; i < colcnt; i++) {\n+            \/\/ get the max column width needed\n+            Component cell = getColumnModel().getColumn(i).getHeaderRenderer()\n+                    .getTableCellRendererComponent(this, null, false, false, -1, i);\n+            FontMetrics fm = cell.getFontMetrics(cell.getFont());\n+            int max = SwingUtilities.computeStringWidth(fm, getColumnModel().getColumn(i).getHeaderValue()\n+                    .toString() + \"  \");\n+            for (int j = 0; j < rowcnt; j++) {\n+                \/\/ add 2 spaces to account for gutter\n+                int width = SwingUtilities.computeStringWidth(fm, getValueAt(j, i).toString() + \"  \");\n+                if (max < width) max = width;\n+            }\n+            \/\/ set the new column width\n+            getColumnModel().getColumn(i).setWidth(max);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4193727.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+\n+\/*\n+ * @test\n+ * @bug 4224179\n+ * @summary Tests if Table default cell editor doesn't handle % (percent) character correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4224179\n+ *\/\n+\n+public class bug4224179 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Click ONCE on the center cell (\"Huml\")\n+            2. Type the following symbols one after another: a%b\n+\n+            If the center cell doesn't read \"Humla%b\" the test fails.\n+\n+            3. After the above, press the ESCAPE key and note that the cell\n+               reverts back to \"Huml\"\n+            4. Do the stuff in part 1 again\n+            5. Press the ESCAPE key\n+\n+            If the center cell now reads \"Huml\" as it initially was,\n+            the test passed and fails otherwise.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4224179::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4224179\");\n+        JTable table = new JTable(3, 3);\n+        table.setValueAt(\"Huml\", 1, 1);\n+        table.setPreferredScrollableViewportSize(new Dimension(500, 70));\n+        JScrollPane scrollPane = new JScrollPane(table);\n+        frame.add(scrollPane, BorderLayout.CENTER);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4224179.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4226181\n+ * @summary Tests that JTable setModel() correctly re-sizes and counts columns\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4226181\n+ *\/\n+\n+public class bug4226181 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Take a look at the table and remember the number of columns you see.\n+            Now press the \"setModel\" button. If the number of columns has changed,\n+            then test fails, otherwise it passes.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4226181::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static class TestModel extends AbstractTableModel {\n+        public int getRowCount() {\n+            return 5;\n+        }\n+\n+        public int getColumnCount() {\n+            return 7;\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            return row + \":\" + column;\n+        }\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4226181\");\n+        TestModel testModel = new TestModel();\n+        final JTable t = new JTable(testModel);\n+        JButton b = new JButton(\"setModel\");\n+        b.addActionListener(ae -> t.setModel(new TestModel()));\n+        t.setCellSelectionEnabled(true);\n+        JPanel p1 = new JPanel(new GridLayout(1, 2));\n+        p1.add(new JLabel(\"dummy\"));\n+        p1.add(t);\n+        frame.add(p1);\n+        frame.add(b, BorderLayout.SOUTH);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4226181.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.JTextField;\n+import javax.swing.table.TableCellEditor;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4239157\n+ * @summary Tests that JTable performs cell validation properly\n+ *          (i.e. does not accept entries for which stopCellEditing()\n+ *           returns false)\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4239157\n+ *\/\n+\n+public class bug4239157 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            You see a JTable having one row and two columns.\n+            Click in the very first cell (where \"click here\" is displayed).\n+            Edit its content (e.g. type some letters) and press right arrow key.\n+            The edited cell should stay active, its content shouldn't change.\n+            The right cell (that with text \"inactive forever\") shouldn't become active.\n+            The same should be true when you press Tab key.\n+            If it is so, test passes, otherwise it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4239157::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4239157\");\n+        JTable table = new JTable(new Object[][]{{\"click here\",\n+                \"inactive forever\"}},\n+                new Object[]{\"1\", \"2\"});\n+        frame.add(\"Center\", table);\n+        TableColumn column = table.getColumn(\"1\");\n+        TableCellEditor editor = new TestEditor(new JTextField());\n+        column.setCellEditor(editor);\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class TestEditor extends DefaultCellEditor {\n+        public TestEditor(JTextField tf) {\n+            super(tf);\n+        }\n+\n+        public boolean stopCellEditing() {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4239157.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.util.ArrayList;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4242631\n+ * @summary Tests that JTable repaints itself correctly after a record\n+ *          has been removed and added to the table model.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4242631\n+ *\/\n+\n+public class bug4242631 {\n+    private static JButton addButton;\n+    private static JButton removeButton;\n+    private static JButton bothButton;\n+    private static SimpleTableModel tableModel;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Press Add button to add a record to the table. The record added should\n+            have number 0. Then press Remove\/Add button some times. The record number\n+            should increase as you press. If it does not, test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4242631::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4242631\");\n+        GridBagLayout grid = new GridBagLayout();\n+\n+        frame.setLayout(grid);\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.insets = new Insets(2, 2, 2, 2);\n+\n+        \/\/ Add button.\n+        c.gridx = 0;\n+        c.gridy = 0;\n+        grid.setConstraints(addButton = new JButton(\"Add\"), c);\n+        frame.add(addButton);\n+\n+        \/\/ Edit button.\n+        c.gridx = 1;\n+        c.gridy = 0;\n+        grid.setConstraints(removeButton = new JButton(\"Remove\"), c);\n+        frame.add(removeButton);\n+\n+        \/\/ Remove button.\n+        c.gridx = 2;\n+        c.gridy = 0;\n+        grid.setConstraints(bothButton = new JButton(\"Remove\/Add\"), c);\n+        frame.add(bothButton);\n+\n+        \/\/ Table.\n+        c.gridx = 0;\n+        c.gridy = 1;\n+        c.gridwidth = 6;\n+        c.gridheight = 0;\n+        c.anchor = GridBagConstraints.CENTER;\n+        c.fill = GridBagConstraints.BOTH;\n+        c.weightx = 1.0;\n+        c.weighty = 1.0;\n+        JScrollPane scroll = null;\n+        tableModel = new SimpleTableModel();\n+        grid.setConstraints(scroll = new JScrollPane(new JTable(tableModel)), c);\n+        frame.add(scroll);\n+\n+        \/\/ Create some action listeners.\n+        addButton.addActionListener(event -> tableModel.addRow());\n+        removeButton.addActionListener(event -> tableModel.removeRow());\n+        bothButton.addActionListener(event -> tableModel.removeThenAddRow());\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class SimpleTableModel extends AbstractTableModel {\n+        int counter = 0;\n+        ArrayList list = new ArrayList();\n+\n+        public SimpleTableModel() {}\n+        public int getColumnCount() { return 1; }\n+        public int getRowCount() { return list.size(); }\n+\n+        public Object getValueAt(int row, int col) {\n+            String str = (String) list.get(row);\n+            return str;\/\/ + \".\" + col;\n+        }\n+\n+        public void addRow() {\n+            list.add(\"\" + counter++);\n+            fireTableRowsInserted(list.size() - 1, list.size() - 1);\n+        }\n+\n+        public void removeRow() {\n+            if (list.size() == 0) return;\n+            list.remove(list.size() - 1);\n+            fireTableRowsDeleted(list.size(), list.size());\n+        }\n+\n+        public void removeThenAddRow() {\n+            if (list.size() == 0) return;\n+            removeRow();\n+            addRow();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4242631.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -227,1 +227,1 @@\n-                    bug4697612.class.getResourceAsStream(\"bug4697612.txt\");\n+                    bug4697612.class.getResourceAsStream(\"bug4697612.java\");\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/4697612\/bug4697612.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,221 +0,0 @@\n-                                   README\n-\n-                      Java(TM) 2 SDK, Standard Edition\n-                             Version 1.4.2 Beta\n-\n-     For a more extensive HTML version of this file, see README.html.\n-\n-Contents\n-\n-   * Introduction\n-   * Release Notes\n-   * Bug Reports and Feedback\n-   * Java 2 SDK Documentation\n-   * Redistribution\n-   * Web Pages\n-\n-\n-Introduction\n-\n-     Thank you for downloading this release of the Java(TM) 2 SDK,\n-     Standard Edition. The Java 2 SDK is a development environment for\n-     building applications, applets, and components that can be\n-     deployed on the Java platform.\n-\n-     The Java 2 SDK software includes tools useful for developing and\n-     testing programs written in the Java programming language and\n-     running on the Java platform. These tools are designed to be used\n-     from the command line. Except for appletviewer, these tools do not\n-     provide a graphical user interface.\n-\n-\n-Release Notes\n-\n-      See the Release Notes on the Java Software web site for additional \n-      information pertaining to this release. \n- \n-      http:\/\/java.sun.com\/j2se\/1.4.2\/relnotes.html\n-\n-      The on-line release notes will be updated as needed, so you should \n-      check it occasionally for the latest information. \n-\n-\n-Bug Reports and Feedback\n-\n-      The Bug Parade Web Page on the Java Developer Connection(SM) web \n-      site lets you search for and examine existing bug reports, submit \n-      your own bug reports, and tell us which bug fixes matter most to you. \n-\n-      http:\/\/java.sun.com\/jdc\/bugParade\/\n-\n-      To directly submit a bug or request a feature, fill out this form: \n-\n-      http:\/\/java.sun.com\/cgi-bin\/bugreport.cgi \n-\n-      You can also send comments directly to Java Software engineering \n-      team email addresses. \n-\n-      http:\/\/java.sun.com\/mail\/\n-\n-\n-Java 2 SDK Documentation\n-\n-     The on-line Java 2 SDK Documentation contains API specifications,\n-     feature descriptions, developer guides, tool reference pages, demos, \n-     and links to related information. It is located at\n-\n-     http:\/\/java.sun.com\/j2se\/1.4.2\/docs\/\n-\n-     The Java 2 SDK documentation is also available in a download bundle \n-     which you can install locally on your machine. See the \n-     Java 2 SDK download page: \n-     \n-     http:\/\/java.sun.com\/j2se\/1.4.2\/download.html\n-\n-\n-Redistribution\n-\n-      The term \"vendors\" used here refers to licensees, developers, \n-      and independent software vendors (ISVs) who license and \n-      distribute the Java 2 Runtime Environment with their programs. \n-      Vendors must follow the terms of the Java 2 SDK, Standard \n-      Edition, Binary Code License agreement. \n-      Required vs. Optional Files\n-\n-      The files that make up the Java 2 SDK, Standard Edition, are\n-      divided into two categories: required and optional. Optional \n-      files may be excluded from redistributions of the Java 2 SDK \n-      at the vendor's discretion. The following section contains a \n-      list of the files and directories that may optionally be \n-      omitted from redistributions of the Java 2 SDK. All files not \n-      in these lists of optional files must be included in \n-      redistributions of the Java 2 SDK. \n-\n-      Optional Files and Directories\n-\n-      The following files may be optionally excluded from \n-      redistributions:\n-\n-      jre\/lib\/charsets.jar \n-            Character conversion classes \n-      jre\/lib\/ext\/ \n-            sunjce_provider.jar - the SunJCE provider for Java \n-              Cryptography APIs\n-            localedata.jar - contains many of the resources \n-              needed for non US English locales\n-            ldapsec.jar - contains security features supported \n-              by the LDAP service provider\n-            dnsns.jar - for the InetAddress wrapper of JNDI DNS \n-              provider\n-      bin\/rmid and jre\/bin\/rmid \n-            Java RMI Activation System Daemon \n-      bin\/rmiregistry and jre\/bin\/rmiregistry \n-            Java Remote Object Registry \n-      bin\/tnameserv and jre\/bin\/tnameserv \n-            Java IDL Name Server \n-      bin\/keytool and jre\/bin\/keytool \n-            Key and Certificate Management Tool \n-      bin\/kinit and jre\/bin\/kinit\n-            Used to obtain and cache Kerberos ticket-granting tickets\n-      bin\/klist and jre\/bin\/klist\n-            Kerberos display entries in credentials cache and keytab\n-      bin\/ktab and jre\/bin\/ktab\n-            Kerberos key table manager\n-      bin\/policytool and jre\/bin\/policytool \n-            Policy File Creation and Management Tool \n-      bin\/orbd and jre\/bin\/orbd \n-            Object Request Broker Daemon \n-      bin\/servertool and jre\/bin\/servertool \n-            Java IDL Server Tool \n-      src.zip \n-            Archive of source files \n-\n-      In addition, the Java Web Start product may be excluded from\n-      redistributions. The Java Web Start product is contained in a \n-      file named javaws-1_2-solaris-sparc-i.zip,\n-      javaws-1_2-solaris-i586-i.zip,\n-      javaws-1_2-linux-i586-i.zip, or\n-      javaws-1_2-windows-i586-i.exe, depending on the platform. \n-\n-\n-      Unlimited Strength Java Cryptography Extension\n-\n-      Due to import control restrictions for some countries, the \n-      Java Cryptography Extension (JCE) policy files shipped with \n-      the Java 2 SDK, Standard Edition and the Java 2 Runtime \n-      Environment allow strong but limited cryptography to be \n-      used.  These files are located at\n-\n-      <java-home>\/lib\/security\/local_policy.jar\n-      <java-home>\/lib\/security\/US_export_policy.jar\n-\n-      where <java-home> is the jre directory of the Java 2 \n-      SDK or the top-level directory of the Java 2 Runtime \n-      Environment.\n-\n-      An unlimited strength version of these files indicating \n-      no restrictions on cryptographic strengths is available \n-      on the Java 2 SDK web site for those living in eligible \n-      countries.  Those living in eligible countries may download \n-      the unlimited strength version and replace the strong \n-      cryptography jar files with the unlimited strength files.\n-\n-\n-      Endorsed Standards Override Mechanism\n-\n-      An endorsed standard is a Java API defined through a standards\n-      process other than the Java Community Process(SM) (JCP(SM)).\n-      Because endorsed standards are defined outside the JCP, it is\n-      anticipated that such standards will be revised between \n-      releases of the Java 2 Platform. In order to take advantage of \n-      new revisions to endorsed standards, developers and software\n-      vendors may use the Endorsed Standards Override Mechanism to\n-      provide newer versions of an endorsed standard than those\n-      included in the Java 2 Platform as released by Sun Microsystems.\n-\n-      For more information on the Endorsed Standards Override\n-      Mechanism, including the list of platform packages that it may \n-      be used to override, see \n-\n-            http:\/\/java.sun.com\/j2se\/1.4.2\/docs\/guide\/standards\/ \n-\n-      Classes in the packages listed on that web page may be replaced\n-      only by classes implementing a more recent version of the API \n-      as defined by the appropriate standards body. \n-\n-      In addition to the packages listed in the document at the above \n-      URL, which are part of the Java 2 Platform, Standard Edition \n-      (J2SE(TM)) specification, redistributors of Sun's J2SE \n-      Reference Implementation are allowed to override classes whose \n-      sole purpose is to implement the functionality provided by \n-      public APIs defined in these Endorsed Standards packages.  \n-      Redistributors may also override classes in the org.w3c.dom.* \n-      packages, or other classes whose sole purpose is to implement \n-      these APIs. \n-\n-\n-Sun Java Web Pages\n-\n-     For additional information, refer to these Sun Microsystems pages\n-     on the World Wide Web:\n-\n-     http:\/\/java.sun.com\/\n-          The Java Software web site, with the latest information on\n-          Java technology, product information, news, and features.\n-     http:\/\/java.sun.com\/docs\n-          Java Platform Documentation provides access to white papers,\n-          the Java Tutorial and other documents.\n-     http:\/\/java.sun.com\/jdc\n-          The Java Developer Connection(SM) web site. (Free registration\n-          required.) Additional technical information, news, and\n-          features; user forums; support information, and much more.\n-     http:\/\/java.sun.com\/products\/\n-          Java Technology Products & API\n-\n-\n-------------------------------------------------------------------------\n-The Java 2 SDK, Standard Edition, is a product of Sun Microsystems(TM), \n-Inc.  This product includes code licensed from RSA Security.\n-\n-Copyright 2003 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, \n-California 95054, U.S.A.  All rights reserved.\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/4697612\/bug4697612.txt","additions":0,"deletions":221,"binary":false,"changes":221,"status":"deleted"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4207474 4218495 4375928\n+ * @summary Tests various tooltip issues: HTML tooltips, long tooltip text\n+ *          and mnemonic keys displayed in tooltips\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TooltipTest\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+public class TooltipTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        1.  Move the mouse over the button labeled \"Red tip\" and let it stay\n+            still in order to test HTML in JToolTip. If the tooltip has some\n+            text which is red then test passes, otherwise it fails (bug 4207474).\n+\n+        2.  Move the mouse over the button labeled \"Long tip\".\n+            If the last letter of the tooltip appears clipped,\n+            then the test fails. If you can see the entire last character,\n+            then the test passes (bug 4218495).\n+\n+        3.  Verify that \"M\" is underlined on the button labeled \"Mnemonic\"\n+            Move the mouse pointer over the button labeled \"Mnemonic\" and look\n+            at tooltip when it appears. It should read \"hint\".\n+            If the above is true test passes else test fails (bug 4375928).\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+\n+        PassFailJFrame.builder()\n+                .title(\"TooltipTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(TooltipTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JComponent createTestUI() {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+\n+        JButton b = new JButton(\"Red tip\");\n+        b.setToolTipText(\"<html><center>Here is some <font color=red>\" +\n+                \"red<\/font> text.<\/center><\/html>\");\n+        panel.add(b);\n+\n+        b = new JButton(\"Long tip\");\n+        b.setToolTipText(\"Is the last letter clipped?\");\n+        panel.add(b);\n+\n+        b = new JButton(\"Mnemonic\");\n+        b.setMnemonic(KeyEvent.VK_M);\n+        b.setToolTipText(\"hint\");\n+        panel.add(b);\n+\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/TooltipTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4225314\n+ * @summary Tests that tooltip is painted properly when it has thick border\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4225314\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import javax.swing.JComponent;\n+import javax.swing.JPanel;\n+import javax.swing.JToolTip;\n+import javax.swing.border.LineBorder;\n+\n+public class bug4225314 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The word \"Tooltip\" in both tooltips should not be clipped by the\n+            black border and be fully visible for this test to pass.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4225314 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4225314::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JComponent createTestUI() {\n+        JToolTip tt1 = new JToolTip();\n+        tt1.setTipText(\"Tooltip\");\n+        tt1.setBorder(new LineBorder(Color.BLACK, 10));\n+\n+        JToolTip tt2 = new JToolTip();\n+        tt2.setTipText(\"<html><b><i>Tooltip<\/i><\/b><\/html>\");\n+        tt2.setBorder(new LineBorder(Color.BLACK, 10));\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(tt1);\n+        panel.add(tt2);\n+\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/bug4225314.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4255441\n+ * @summary Tests that tooltip appears inside AWT Frame\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4255441\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import javax.swing.JButton;\n+\n+public class bug4255441 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Move mouse pointer inside the button.\n+            If a tooltip with \"Tooltip text\" appears, the test passes.\n+            \"\"\";\n+\n+    private static Frame createTestUI() {\n+        Frame fr = new Frame(\"bug4255441\");\n+        fr.setLayout(new FlowLayout());\n+\n+        JButton bt = new JButton(\"Button\");\n+        bt.setToolTipText(\"Tooltip text\");\n+        fr.add(bt);\n+\n+        fr.setSize(200, 200);\n+        return fr;\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4255441 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4255441::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/bug4255441.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4199472\n+ * @summary Tests that node changed for the root of the tree update the\n+ *          structure.\n+ * @run main NodeChangedTest\n+ *\/\n+\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+\n+public class NodeChangedTest {\n+    public static void main(String[] args) {\n+        \/\/ Create 3 nodes\n+        final DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"root\",\n+                true);\n+        final DefaultMutableTreeNode child = new DefaultMutableTreeNode(\"child\",\n+                true);\n+        final DefaultMutableTreeNode leaf = new DefaultMutableTreeNode(\"leaf\",\n+                false);\n+        root.add(child);\n+        child.add(leaf);\n+\n+        final JTree tree = new JTree(root);\n+\n+        \/\/ Change the root node\n+        root.setUserObject(\"New root\");\n+        ((DefaultTreeModel) tree.getModel()).nodeChanged(root);\n+\n+        \/\/ Check\n+        if (!root.getUserObject().toString().equals(\"New root\")) {\n+            throw new RuntimeException(\"Failed changing root node for default model.\");\n+        }\n+\n+        \/\/ Change to large model\n+        tree.setLargeModel(true);\n+        tree.setRowHeight(20);\n+        root.setUserObject(\"root\");\n+        tree.setModel(new DefaultTreeModel(root));\n+        root.setUserObject(\"New root\");\n+        ((DefaultTreeModel) tree.getModel()).nodeChanged(root);\n+\n+        \/\/ Check again\n+        if (!root.getUserObject().toString().equals(\"New root\")) {\n+            throw new RuntimeException(\"Failed changing root node for large model.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/NodeChangedTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4118860\n+ * @summary setToggleClickCount\/getToggleClickCount have been added.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4118860\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.GridLayout;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTree;\n+\n+public class bug4118860 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Push the \"Single Click\" button and try expanding\/contracting\n+        branch nodes of the tree with one left mouse button click\n+        on the label part of the node (not the icon or handles).\n+\n+        Then push the \"Double Click\" button and try doing the same using\n+        left mouse button double click. Single click shouldn't cause\n+        expanding\/contracting. A double click should now be required\n+        to expand\/contract nodes.\n+\n+        If it works then the test PASSES, else the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4118860 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4118860::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"ToggleClickCount Test\");\n+        JTree tr = new JTree();\n+        JPanel p = new JPanel();\n+        p.setBackground(Color.red);\n+        p.setLayout(new GridLayout(1, 1));\n+        tr.setOpaque(false);\n+        p.add(tr);\n+        f.add(p, BorderLayout.CENTER);\n+        JPanel bp = new JPanel();\n+        JButton bt1 = new JButton(\"Single Click\");\n+        bt1.addActionListener(e -> {\n+            tr.setToggleClickCount(1);\n+            if (tr.getToggleClickCount() != 1) {\n+                throw new RuntimeException(\"ToggleClickCount doesn't set...\");\n+            }\n+        });\n+        JButton bt2 = new JButton(\"Double Click\");\n+        bt2.addActionListener(e -> {\n+            tr.setToggleClickCount(2);\n+            if (tr.getToggleClickCount() != 2) {\n+                throw new RuntimeException(\"ToggleClickCount doesn't set...\");\n+            }\n+        });\n+        bp.setLayout(new GridLayout(1, 2));\n+        bp.add(bt1);\n+        bp.add(bt2);\n+        f.add(bp, BorderLayout.SOUTH);\n+        f.setSize(300, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4118860.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4169215\n+ * @summary Accessibility hierarchy JTree node test.\n+ * @run main bug4169215\n+ *\/\n+\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+\n+public class bug4169215 {\n+    public static void main(String[] args) {\n+        \/\/ create the tree\n+        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"top\");\n+        DefaultMutableTreeNode nodeA = new DefaultMutableTreeNode(\"A\");\n+        DefaultMutableTreeNode nodeB = new DefaultMutableTreeNode(\"B\");\n+        root.add(nodeA);\n+        root.add(nodeB);\n+        JTree tree = new JTree(root);\n+\n+        \/\/ find the AccessibleContext of the tree\n+        AccessibleContext actree = tree.getAccessibleContext();\n+\n+        \/\/ find the AccessibleContext of top node of the tree\n+        AccessibleContext act = actree.getAccessibleChild(0).getAccessibleContext();\n+\n+        \/\/ find the AccessibleContext of the first child of the table ->\n+        \/\/ the AccessibleContext of nodeA\n+        AccessibleContext accA = act.getAccessibleChild(0).getAccessibleContext();\n+\n+        \/\/ find the AccessibleContext of the next sibling of nodeA, by getting\n+        \/\/ child+1 of the parent (the table)\n+        AccessibleContext accB = act.getAccessibleChild(\n+                accA.getAccessibleIndexInParent()+1).getAccessibleContext();\n+\n+        \/\/ look to see who the sibling is.\n+        if (accB.getAccessibleName().compareTo(\"B\") != 0) {\n+            throw new RuntimeException(\"Parent node is a sibling instead!\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4169215.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4196987\n+ * @summary Test Metal L&F JTree expander icons transparency.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4196987\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.GridLayout;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTree;\n+import javax.swing.UIManager;\n+\n+public class bug4196987 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        If the background of tree icons are red, the test PASSES.\n+        Otherwise the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4196987 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4196987::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"JTree Icon Transparency Test\");\n+        JPanel p = new JPanel();\n+        p.setBackground(Color.red);\n+        p.setLayout(new GridLayout(1, 1));\n+        JTree t = new JTree();\n+        t.setOpaque(false);\n+        p.add(t);\n+        f.add(p);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4196987.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4270654\n+ * @summary Tests that selection change in JTree does not cause unnecessary\n+            scrolling.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4270654\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+\n+public class bug4270654 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Select the \"dan\" node and scroll to the right a little using the\n+        scrollbar. Then press down arrow key. If the tree unscrolls back\n+        to the left, the test FAILS. Otherwise, the test PASSES.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4270654 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4270654::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"JTree Scroll Back Test\");\n+        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"root\");\n+        String[] lev1 = {\"foo\", \"bar\", \"dan\"};\n+        String[][] lev2 = {\n+                {},\n+                {\"small\", \"a nice big node for testing\"},\n+                {\"xyz\", \"pqd\", \"a really really big node for testing\"}};\n+        for (int i = 0; i < lev1.length; i++) {\n+            DefaultMutableTreeNode child = new DefaultMutableTreeNode(lev1[i]);\n+            root.add(child);\n+            for (int j = 0; j < lev2[i].length; j++)\n+                child.add(new DefaultMutableTreeNode(lev2[i][j]));\n+        }\n+        final JTree tree = new JTree(root);\n+        tree.expandRow(3);\n+        f.add(new JScrollPane(tree));\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4270654.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4618767\n+ * @summary First letter navigation in JTree interferes with mnemonics\n+ * @key headful\n+ * @run main bug4618767\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTree;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+\n+public class bug4618767 {\n+    private static JFrame f;\n+    private static final JTree tree = new\n+            JTree(new String[] {\"one\", \"two\", \"three\", \"four\"});\n+    private static boolean menuSelected;\n+    private static CountDownLatch listGainedFocusLatch = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4618767 Test\");\n+                JMenu menu = new JMenu(\"File\");\n+                menu.setMnemonic('F');\n+                JMenuItem menuItem = new JMenuItem(\"item\");\n+                menu.add(menuItem);\n+                JMenuBar menuBar = new JMenuBar();\n+                menuBar.add(menu);\n+                f.setJMenuBar(menuBar);\n+\n+                menu.addMenuListener(new MenuListener() {\n+                    public void menuCanceled(MenuEvent e) {}\n+                    public void menuDeselected(MenuEvent e) {}\n+                    public void menuSelected(MenuEvent e) {\n+                        menuSelected = true;\n+                    }\n+                });\n+\n+                tree.addFocusListener(new FocusAdapter() {\n+                    @Override\n+                    public void focusGained(FocusEvent e) {\n+                        listGainedFocusLatch.countDown();\n+                    }\n+                });\n+                f.add(tree);\n+                f.pack();\n+                f.setLocationRelativeTo(null);\n+                f.setAlwaysOnTop(true);\n+                f.setVisible(true);\n+            });\n+            runTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void runTest() throws Exception {\n+        if (!listGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Waited too long, but can't gain\" +\n+                    \" focus for list\");\n+        }\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_O);\n+        robot.keyRelease(KeyEvent.VK_O);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_ALT);\n+        robot.keyPress(KeyEvent.VK_F);\n+        robot.keyRelease(KeyEvent.VK_F);\n+        robot.keyRelease(KeyEvent.VK_ALT);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (menuSelected && !tree.getSelectionPath()\n+                    .getLastPathComponent().toString().equals(\"one\")) {\n+                throw new RuntimeException(\"Mnemonics interferes with JTree\" +\n+                        \" item selection using KeyEvent\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4618767.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4217252\n+ * @summary Verify that scrolling beyond the visible region and scrolling\n+ *          a component smaller than the viewport is not allowed.\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 ScrollRectToVisibleTest3\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+\n+public class ScrollRectToVisibleTest3 {\n+    private static JFrame frame;\n+    private static JTable table;\n+    private static JButton scrollButton;\n+    private static volatile int clickCount = 0;\n+    private static final String[] EXPECTED_TEXT = {\"99 x 0\", \"98 x 0\",\n+                                                   \"97 x 0\", \"96 x 0\"};\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+\n+        SwingUtilities.invokeAndWait(ScrollRectToVisibleTest3::createTestUI);\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        Rectangle frameBounds = Util.invokeOnEDT(() -> getComponentBounds(frame));\n+        robot.delay(100);\n+        Point scrollBtnLoc = Util.getCenterPoint(scrollButton);\n+\n+        robot.mouseMove(scrollBtnLoc.x, scrollBtnLoc.y);\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(50);\n+\n+        int rowHeight = Util.invokeOnEDT(() -> table.getRowHeight());\n+        for (int i = 1; i <= 4; i++) {\n+            robot.mouseMove(frameBounds.x + 50,\n+                            frameBounds.y + frameBounds.height - (rowHeight * i + 2));\n+            robot.delay(300);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            \/\/ 500 ms delay added so that current mouseClicked event\n+            \/\/ is processed successfully before proceeding to the next\n+            robot.delay(500);\n+        }\n+        if (clickCount != 4) {\n+            throw new RuntimeException(\"Test Failed! Expected 4 mouse clicks\"\n+                                       + \" but got \" + clickCount);\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new JFrame(\"ScrollRectToVisibleTest3\");\n+        table = new JTable(new TestModel());\n+        table.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                JTable testTable = (JTable) e.getComponent();\n+                int row = testTable.getSelectedRow();\n+                int column = testTable.getSelectedColumn();\n+                String cellContent = testTable.getValueAt(row, column).toString();\n+                if (!EXPECTED_TEXT[clickCount].equals(cellContent)) {\n+                    throw new RuntimeException((\"Test failed! Table Cell Content\"\n+                                + \" at (row %d , col %d)\\n Expected: %s vs Actual: %s\")\n+                                    .formatted(row, column,\n+                                            EXPECTED_TEXT[clickCount], cellContent));\n+                }\n+                clickCount++;\n+            }\n+        });\n+\n+        scrollButton = new JButton(\"Scroll\");\n+        scrollButton.addActionListener(ae -> {\n+            Rectangle bounds = table.getBounds();\n+            bounds.y = bounds.height + table.getRowHeight();\n+            bounds.height = table.getRowHeight();\n+            System.out.println(\"scrolling: \" + bounds);\n+            table.scrollRectToVisible(bounds);\n+            System.out.println(\"bounds: \" + table.getVisibleRect());\n+        });\n+\n+        frame.add(scrollButton, BorderLayout.NORTH);\n+        frame.add(new JScrollPane(table), BorderLayout.CENTER);\n+        frame.setSize(400, 300);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+\n+    private static class TestModel extends AbstractTableModel {\n+        @Override\n+        public String getColumnName(int column) {\n+            return Integer.toString(column);\n+        }\n+\n+        @Override\n+        public int getRowCount() {\n+            return 100;\n+        }\n+\n+        @Override\n+        public int getColumnCount() {\n+            return 5;\n+        }\n+\n+        @Override\n+        public Object getValueAt(int row, int col) {\n+            return row + \" x \" + col;\n+        }\n+\n+        @Override\n+        public boolean isCellEditable(int row, int column) { return false; }\n+\n+        @Override\n+        public void setValueAt(Object value, int row, int col) {\n+        }\n+    }\n+\n+    private static Rectangle getComponentBounds(Component c) {\n+        Point locationOnScreen = c.getLocationOnScreen();\n+        Dimension size = c.getSize();\n+        return new Rectangle(locationOnScreen, size);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JViewport\/ScrollRectToVisibleTest3.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4128110\n+ * @summary Verify that JViewport.setViewportView() and JScrollPane.setViewport()\n+ *          force a re-layout and a repaint.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetViewRepaint\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.GridLayout;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JViewport;\n+\n+public class SetViewRepaint {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Verify the following two cases:\n+\n+            1) Press \"JViewport.setViewportView()\" button and verify that\n+               the blue label is replaced by a scrolling list.\n+\n+            2) Press \"JScrollPane.setViewport()\" button and verify that\n+               the red label is replaced by a scrolling list as well.\n+\n+            In either case the display should update automatically after\n+            pressing the button.\n+\n+            If the above is true, press PASS else press FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(30)\n+                .testUI(SetViewRepaint::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"SetViewRepaint\");\n+        JPanel p1 = new JPanel(new BorderLayout());\n+        JPanel p2 = new JPanel(new BorderLayout());\n+\n+        JLabel label1 = new ColorLabel(Color.BLUE, \"Blue Label\");\n+        final JList list1 = new JList(new String[]{\"one\", \"two\", \"three\", \"four\"});\n+        final JScrollPane sp1 = new JScrollPane(label1);\n+        ActionListener doSetViewportView = e -> sp1.setViewportView(list1);\n+        JButton b1 = new JButton(\"JViewport.setViewportView()\");\n+        b1.addActionListener(doSetViewportView);\n+        p1.add(sp1, BorderLayout.CENTER);\n+        p1.add(b1, BorderLayout.SOUTH);\n+\n+        JLabel label2 = new ColorLabel(Color.RED, \"Red Label\");\n+        final JList list2 = new JList(new String[]{\"five\", \"six\", \"seven\", \"eight\"});\n+        final JScrollPane sp2 = new JScrollPane(label2);\n+        ActionListener doSetViewport = e -> {\n+            JViewport vp = new JViewport();\n+            vp.setView(list2);\n+            sp2.setViewport(vp);\n+        };\n+        JButton b2 = new JButton(\"JScrollPane.setViewport()\");\n+        b2.addActionListener(doSetViewport);\n+        p2.add(sp2, BorderLayout.CENTER);\n+        p2.add(b2, BorderLayout.SOUTH);\n+        frame.setLayout(new GridLayout(1, 2));\n+        frame.add(p1);\n+        frame.add(p2);\n+        frame.setResizable(false);\n+        frame.setSize(500, 120);\n+        return frame;\n+    }\n+\n+    private static class ColorLabel extends JLabel {\n+        ColorLabel(Color color, String text) {\n+            super(text);\n+            setForeground(Color.WHITE);\n+            setBackground(color);\n+            setOpaque(true);\n+            setHorizontalAlignment(CENTER);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JViewport\/SetViewRepaint.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4251781\n+ * @summary Tests that JWindow repaint is optimized (background is not\n+            cleared).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4251781\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import javax.swing.JButton;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JWindow;\n+\n+public class bug4251781 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Press the button at the bottom-right corner of the gray\n+            window with the mouse.\n+            If the window DOES NOT flicker when you press and\/or release\n+            the mouse button press PASS else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4251781::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JWindow createAndShowUI() {\n+        JWindow w = new JWindow();\n+        final Container pane = w.getContentPane();\n+        pane.setLayout(null);\n+        pane.setBackground(Color.GRAY.darker());\n+\n+        final JPopupMenu popup = new JPopupMenu();\n+        popup.add(new JMenuItem(\"item 1\"));\n+        popup.add(new JMenuItem(\"exit\"));\n+\n+        JButton b = new JButton(\"menu\");\n+        b.setBounds(350, 250, 50, 50);\n+        b.addActionListener(ev -> popup.show(pane, 0, 0));\n+        pane.add(b);\n+\n+        w.setSize(400, 300);\n+        return w;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JWindow\/bug4251781.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4401480\n+ * @summary Tests that closing ProgressMonitor dialog cancels it\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4401480\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+import javax.swing.ProgressMonitor;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4401480 {\n+    private static ProgressMonitor monitor;\n+    private static volatile boolean cancelled = false;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This is a semi-automated test which automatically\n+            passes if closing the JProgressBar dialog cancels it.\n+            Read the following test instructions and when ready\n+            click on the Start button below.\n+\n+            After clicking on Start button wait for few seconds for\n+            progress monitor (a dialog with progress bar) to appear.\n+            Close it by clicking on the window close button.\n+            DO NOT click on Cancel button.\n+\n+            NOTE:\n+            Ensure to click on the window close button before\n+            progress bar reaches its max limit.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JProgress Monitor Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .splitUIBottom(bug4401480::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JPanel createTestUI() {\n+        JPanel panel = new JPanel();\n+        JButton startButton = new JButton(\"Start\");\n+        startButton.addActionListener(e -> {\n+            monitor = new ProgressMonitor(null, \"Progress\", \"Running ...\", 0, 10);\n+            monitor.setProgress(0);\n+\n+            new Thread(() -> {\n+                for (int i = 0; i < 10; i++) {\n+                    int count = i;\n+                    try {\n+                        SwingUtilities.invokeAndWait(() ->\n+                                        monitor.setProgress(count));\n+                        Thread.sleep(2000);\n+                        SwingUtilities.invokeAndWait(() ->\n+                                        cancelled = monitor.isCanceled());\n+                    } catch (InterruptedException\n+                             | InvocationTargetException ex) {\n+                        throw new RuntimeException(ex);\n+                    }\n+                    if (cancelled) {\n+                        break;\n+                    }\n+                }\n+\n+                if (cancelled) {\n+                    PassFailJFrame.forcePass();\n+                } else {\n+                    PassFailJFrame.forceFail(\"Test Failed! JProgress Monitor\"\n+                                             + \" was not cancelled\");\n+                }\n+            }).start();\n+        });\n+        panel.add(startButton);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ProgressMonitor\/bug4401480.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4369355\n+ * @summary To verify if SwingUtilities.convertPointToScreen() (for invisible frame)\n+ *          and SwingUtilities.convertPointFromScreen() return correct values\n+ * @run main bug4369355\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4369355 {\n+    private static JFrame frame;\n+\n+    private static volatile Point frameToScreenLoc;\n+    private static volatile Point frameFromScreenLoc;\n+\n+    private static final Point EXPECTED_FROM_SCREEN_LOC = new Point(0, 0);\n+    private static final Point EXPECTED_TO_SCREEN_LOC = new Point(100, 100);\n+\n+    public static void main (String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4369355\");\n+                frame.setBounds(100, 100, 100, 100);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameToScreenLoc = new Point(0, 0);\n+                SwingUtilities.convertPointToScreen(frameToScreenLoc, frame);\n+            });\n+            robot.delay(100);\n+\n+            if (!frameToScreenLoc.equals(EXPECTED_TO_SCREEN_LOC)) {\n+                throw new RuntimeException(\"SwingUtilities.convertPointToScreen()\"\n+                        + \" returns incorrect point \" + frameToScreenLoc + \"\\n\"\n+                        + \"Should be \" + EXPECTED_TO_SCREEN_LOC);\n+            }\n+\n+            SwingUtilities.invokeAndWait(() -> frame.setVisible(true));\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameFromScreenLoc = frame.getLocationOnScreen();\n+                SwingUtilities.convertPointFromScreen(frameFromScreenLoc, frame);\n+            });\n+            robot.delay(100);\n+\n+            if (!frameFromScreenLoc.equals(EXPECTED_FROM_SCREEN_LOC)) {\n+                throw new RuntimeException(\"SwingUtilities.convertPointFromScreen()\"\n+                        + \" returns incorrect point \" + frameFromScreenLoc + \"\\n\"\n+                        + \"Should be \" + EXPECTED_FROM_SCREEN_LOC);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingUtilities\/bug4369355.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4967768\n+ * @requires (os.family != \"mac\")\n+ * @summary Tests that underline is painted correctly in mnemonics\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4967768\n+ *\/\n+\n+import java.awt.Font;\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+\n+public class bug4967768 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the test starts you'll see a button \"Oops\"\n+            with the \"p\" letter underlined at the bottom\n+            of the instruction frame.\n+\n+            Ensure the underline cuts through the descender\n+            of letter \"p\", i.e. the underline is painted\n+            not below the letter but below the baseline.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .splitUIBottom(bug4967768::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JPanel createTestUI() {\n+        JPanel panel = new JPanel();\n+        JButton but = new JButton(\"Oops\");\n+        but.setFont(new Font(\"Dialog\", Font.BOLD, 24));\n+        but.setMnemonic('p');\n+        panel.add(but);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingUtilities\/bug4967768.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4154572\n+ * @summary Tests that the area behind a TitledBorder's title string is transparent,\n+ * allowing the component's background to show through\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TransparentTitleTest\n+ *\/\n+\n+import java.awt.GridLayout;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import javax.swing.ImageIcon;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.border.TitledBorder;\n+import javax.swing.border.LineBorder;\n+\n+public class TransparentTitleTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            If all panels are correctly painted such that the title of the\n+            border allows the underlying panel image (green rectangle)\n+            to show through the background of the text,\n+            then this test passes; else it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"TransparentTitleTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(TransparentTitleTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"TransparentTitleTest\");\n+\n+        frame.setLayout(new GridLayout(3, 6, 5, 5));\n+\n+        frame.add(new ImagePanel(TitledBorder.TOP, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.TOP, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.TOP, TitledBorder.RIGHT));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_TOP, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_TOP, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_TOP, TitledBorder.RIGHT));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_TOP, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_TOP, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_TOP, TitledBorder.RIGHT));\n+        frame.add(new ImagePanel(TitledBorder.BOTTOM, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.BOTTOM, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.BOTTOM, TitledBorder.RIGHT));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_BOTTOM, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_BOTTOM, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.ABOVE_BOTTOM, TitledBorder.RIGHT));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_BOTTOM, TitledBorder.LEFT));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_BOTTOM, TitledBorder.CENTER));\n+        frame.add(new ImagePanel(TitledBorder.BELOW_BOTTOM, TitledBorder.RIGHT));\n+\n+        frame.pack();\n+        return frame;\n+    }\n+}\n+\n+class ImagePanel extends JPanel {\n+\n+    private final ImageIcon imageIcon;\n+\n+    private static final BufferedImage bufferedImage =\n+            new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n+\n+    static {\n+        Graphics g = bufferedImage.getGraphics();\n+        g.setColor(Color.GREEN);\n+        g.fillRect(0, 0, 128, 128);\n+    }\n+\n+    public ImagePanel(int titlePos, int titleJust) {\n+        imageIcon = new ImageIcon(bufferedImage);\n+\n+        TitledBorder b = new TitledBorder(new LineBorder(Color.black,3), \"title text\");\n+        b.setTitlePosition(titlePos);\n+        b.setTitleJustification(titleJust);\n+        b.setTitleColor(Color.black);\n+        setBorder(b);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(imageIcon.getIconWidth(), imageIcon.getIconHeight());\n+    }\n+\n+    public void paintComponent(Graphics g) {\n+        imageIcon.paintIcon(this, g, 0, 0);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/border\/TransparentTitleTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4198822\n+ * @summary Tests that the bottom line drawn by\n+ *          BasicGraphicsUtils.drawEtchedRect extends to the end.\n+ * @run main DrawEtchedRectTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.plaf.basic.BasicGraphicsUtils;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class DrawEtchedRectTest {\n+    private static final int WIDTH = 200;\n+    private static final int HEIGHT = 200;\n+    private static final int RANGE = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Draw etched rectangle to a BufferedImage\n+        BufferedImage image = new BufferedImage(WIDTH, HEIGHT, TYPE_INT_ARGB);\n+        Graphics2D g2d = image.createGraphics();\n+        Component sq = new Component() {\n+            public void paint(Graphics g) {\n+                g.setColor(Color.WHITE);\n+                g.fillRect(0, 0, WIDTH, HEIGHT);\n+                BasicGraphicsUtils.drawEtchedRect(g, 0, 0, WIDTH, HEIGHT,\n+                        Color.black, Color.black,\n+                        Color.black, Color.black);\n+            }\n+        };\n+        sq.paint(g2d);\n+        g2d.dispose();\n+\n+        \/\/ Check if connected at bottom-right corner\n+        int c1;\n+        int c2;\n+        for (int i = 1; i < RANGE; i++) {\n+            c1 = image.getRGB(WIDTH - i, HEIGHT - 1);\n+            c2 = image.getRGB(WIDTH - 1, HEIGHT - i);\n+            if (c1 == Color.WHITE.getRGB() || c2 == Color.WHITE.getRGB()) {\n+                ImageIO.write(image, \"png\", new File(\"failImage.png\"));\n+                throw new RuntimeException(\"Bottom line is not connected!\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicGraphicsUtils\/DrawEtchedRectTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4228104\n+ * @summary Tests work of BODY BACKGROUND tag in HTML renderer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4228104\n+ *\/\n+\n+import java.awt.BorderLayout;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+\n+public class bug4228104 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        There should be an image displaying dukes under the rows of digits.\n+        If you can see it, the test PASSES. Otherwise, the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4228104 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4228104::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Background HTML Text Test\");\n+        String dir = System.getProperty(\"test.src\",\n+                System.getProperty(\"user.dir\"));\n+        String htmlText1 =\n+                \"<html><BODY BACKGROUND=\\\"file:\" + dir\n+                        + \"\/duke.gif\\\">\\n\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\" +\n+                        \"<br>111111111111111111\";\n+        JLabel button1 = new JLabel(htmlText1);\n+        f.add(button1, BorderLayout.NORTH);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicHTML\/4228104\/bug4228104.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicHTML\/4228104\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawImageIAETest\/duke.gif","status":"copied"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4331515\n+ * @requires (os.family == \"windows\")\n+ * @summary System menu of an internal frame shouldn't have duplicated items in Win L&F\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4331515\n+ *\/\n+\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.UIManager;\n+\n+public class bug4331515 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Open the system menu of internal frame \"JIF\" placed in the frame \"Test\".\n+        If this menu contains duplicates of some items then test FAILS, else\n+        test PASSES.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4331515 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4331515::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame fr = new JFrame(\"System Menu in JIF Test\");\n+        JDesktopPane dp = new JDesktopPane();\n+        fr.setContentPane(dp);\n+        JInternalFrame jif = new JInternalFrame(\"JIF\", true, true, true, true);\n+        dp.add(jif);\n+        jif.setBounds(20, 20, 120, 100);\n+        jif.setVisible(true);\n+        fr.setSize(200, 200);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicInternalFrameTitlePane\/bug4331515.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4220108\n+ * @summary JSlider in JInternalFrame should be painted correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4220108\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JSlider;\n+\n+public class bug4220108 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        If you see a slider in the internal frame, then the test PASSES.\n+        Otherwise the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4220108 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4220108::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Internal Frame Slider Test\");\n+        f.setLayout(new FlowLayout());\n+        JDesktopPane desktop = new JDesktopPane();\n+        f.setContentPane(desktop);\n+\n+        JInternalFrame iFrame =\n+                new JInternalFrame(\"Slider Frame\", true, true, true, true);\n+        JSlider sl = new JSlider();\n+        iFrame.add(sl);\n+        iFrame.add(new JLabel(\"Label\"), BorderLayout.SOUTH);\n+        desktop.add(iFrame);\n+        iFrame.pack();\n+        iFrame.setVisible(true);\n+        f.setSize(300, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicSliderUI\/bug4220108.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4165874\n+ * @summary Adds a MouseListener to the splitpane divider.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddMouseListenerTest\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.event.MouseAdapter;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JSplitPane;\n+\n+public class AddMouseListenerTest {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Try dragging the split pane divider, if you can, click PASS,\n+        else click FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"AddMouseListenerTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(AddMouseListenerTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"JSplitPane With ActionListener Test\");\n+        JSplitPane sp = new JSplitPane();\n+\n+        sp.setContinuousLayout(true);\n+        Component[] children = sp.getComponents();\n+        for (int counter = children.length - 1; counter >= 0; counter--) {\n+            children[counter].addMouseListener(new MouseAdapter() {});\n+        }\n+        f.getContentPane().add(sp);\n+        f.setSize(400, 400);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicSplitPaneDivider\/AddMouseListenerTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4199666\n+ * @summary Makes sure initial negative size of a component does not confuse\n+ *          JSplitPane.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NegativeSizeTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.CardLayout;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+\n+public class NegativeSizeTest {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Click on the 'Show JSplitPane' button. If two buttons appear,\n+        click PASS, otherwise click FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"NegativeSizeTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(NegativeSizeTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Negative Size Test\");\n+        CardLayout cardLayout = new CardLayout();\n+        JPanel mainPanel = new JPanel(cardLayout);\n+\n+        JSplitPane splitPane = new JSplitPane();\n+        splitPane.setContinuousLayout(true);\n+        JPanel splitContainer = new JPanel(new BorderLayout());\n+        splitContainer.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n+        splitContainer.add(splitPane, BorderLayout.CENTER);\n+\n+        if (false) {\n+            mainPanel.add(splitContainer, \"split\");\n+            mainPanel.add(new JPanel(), \"blank\");\n+        }\n+        else {\n+            mainPanel.add(new JPanel(), \"blank\");\n+            mainPanel.add(splitContainer, \"split\");\n+        }\n+\n+        f.add(mainPanel, BorderLayout.CENTER);\n+\n+        JButton button = new JButton(\"Show JSplitPane\");\n+        button.addActionListener(e -> cardLayout.show(mainPanel, \"split\"));\n+        f.add(button, BorderLayout.SOUTH);\n+        f.setSize(400, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicSplitPaneUI\/NegativeSizeTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4208549\n+ * @summary Makes sure preferred size returned by layout managers used by\n+ *          JSplitPane is correct.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PreferredSizeLayoutTest\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JSplitPane;\n+\n+public class PreferredSizeLayoutTest {\n+    static final String INSTRUCTIONS = \"\"\"\n+        If the buttons in the JSplitpanes do not have '...' in them,\n+        click PASS, otherwise click FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"PreferredSizeLayoutTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(PreferredSizeLayoutTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Preferred Size Layout Test\");\n+        Container parent = f.getContentPane();\n+        JSplitPane sp = new JSplitPane();\n+\n+        parent.setLayout(new FlowLayout());\n+\n+        sp.setOrientation(JSplitPane.HORIZONTAL_SPLIT);\n+        parent.add(sp);\n+        sp = new JSplitPane();\n+        sp.setOrientation(JSplitPane.VERTICAL_SPLIT);\n+        parent.add(sp);\n+        f.setSize(400, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicSplitPaneUI\/PreferredSizeLayoutTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4305622\n+ * @summary MetalToolBarUI.installUI invokeLater causes flickering\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4305622\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JToolBar;\n+import javax.swing.UIManager;\n+import javax.swing.border.LineBorder;\n+\n+\n+public class bug4305622 {\n+    private static JFrame fr;\n+    static final String INSTRUCTIONS = \"\"\"\n+        Press button \"Create ToolBar\" at frame \"Create ToolBar Test\".\n+        If you see any flickering during creating of toolbar\n+        then the test FAILS, otherwise the test PASSES.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4305622 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4305622::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        fr = new JFrame(\"Create ToolBar Test\");\n+        JButton button = new JButton(\"Create ToolBar\");\n+        button.addActionListener(ae -> addToolBar());\n+        fr.add(button, BorderLayout.SOUTH);\n+        fr.setSize(400, 400);\n+        return fr;\n+    }\n+\n+    static void addToolBar() {\n+        fr.repaint();\n+        fr.revalidate();\n+        JToolBar toolbar = new JToolBar();\n+\n+        JButton btn = new JButton(\"Button 1\");\n+        btn.setBorder(new LineBorder(Color.red, 30));\n+        toolbar.add(btn);\n+\n+        btn = new JButton(\"Button 2\");\n+        btn.setBorder(new LineBorder(Color.red, 30));\n+        toolbar.add(btn);\n+\n+        toolbar.updateUI();\n+        fr.add(toolbar, BorderLayout.NORTH);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicToolBarUI\/bug4305622.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4331392\n+ * @summary Tests if BasicToolBarUI has bogus logic that prevents vertical\n+ *          toolbars from docking\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4331392\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JToolBar;\n+\n+public class bug4331392 {\n+   static final String INSTRUCTIONS = \"\"\"\n+        Try to dock the toolbar across all the edges of frame. If you succeed,\n+        then the test PASSES. Otherwise, it FAILS.\n+    \"\"\";\n+\n+   public static void main(String[] args) throws Exception {\n+      PassFailJFrame.builder()\n+              .title(\"bug4331392 Test Instructions\")\n+              .instructions(INSTRUCTIONS)\n+              .columns(40)\n+              .testUI(bug4331392::createUI)\n+              .build()\n+              .awaitAndCheck();\n+   }\n+\n+   static JFrame createUI() {\n+      JFrame frame = new JFrame(\"JToolBar Docking Test\");\n+      Container c = frame.getContentPane();\n+\n+      JToolBar tbar = new JToolBar(JToolBar.VERTICAL);\n+\n+      tbar.add(new JButton(\"A\"));\n+      tbar.add(new JButton(\"B\"));\n+      tbar.add(new JButton(\"C\"));\n+\n+      JButton b = new JButton(\"Hello\");\n+      c.add(b, BorderLayout.CENTER);\n+      c.add(tbar, BorderLayout.EAST);\n+      frame.setSize(300, 300);\n+      return frame;\n+   }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicToolBarUI\/bug4331392.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4991587\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that disabled JButton text is positioned properly in Windows L&F\n+ * @modules java.desktop\/com.sun.java.swing.plaf.windows\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4991587\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.UIManager;\n+\n+import com.sun.java.swing.plaf.windows.WindowsButtonUI;\n+\n+public class bug4991587 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        There are two buttons: enabled (left) and disabled (right).\n+        Ensure that the disabled button text is painted entirely\n+        inside the blue bounding rectangle, just like the enabled\n+        button (use it as an example of how this should look like).\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4991587 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4991587::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Disabled JButton Text Test\");\n+        f.setLayout(new FlowLayout());\n+        f.setSize(400, 100);\n+\n+        JButton button1 = new JButton(\"\\u0114 Enabled JButton\");\n+        button1.setUI(new MyButtonUI());\n+        f.add(button1);\n+\n+        JButton button2 = new JButton(\"\\u0114 Disabled JButton\");\n+        button2.setEnabled(false);\n+        button2.setUI(new MyButtonUI());\n+        f.add(button2);\n+\n+        return f;\n+    }\n+\n+    static class MyButtonUI extends WindowsButtonUI {\n+        protected void paintText(Graphics g, AbstractButton b,\n+                                 Rectangle textRect, String text) {\n+            g.setColor(Color.blue);\n+            g.drawRect(textRect.x,\n+                    textRect.y,\n+                    textRect.width + 1, \/\/ add 1 for the shadow, otherwise it\n+                                        \/\/ will be painted over the textRect\n+                    textRect.height);\n+            super.paintText(g, b, textRect, text);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/windows\/bug4991587.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-   @summary Regression: NPE when refreshing applet since 6u22-b01\n+   @summary Regression: NPE when refreshing embedded window since 6u22-b01\n","filename":"test\/jdk\/javax\/swing\/text\/html\/parser\/Parser\/6990651\/bug6990651.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.Platform;\n@@ -58,1 +60,3 @@\n-        test.load(System.mapLibraryName(\"zip\"), true \/* succeed *\/);\n+        if (!Platform.isStatic()) {\n+            test.load(System.mapLibraryName(\"zip\"), true \/* succeed *\/);\n+        }\n","filename":"test\/jdk\/jdk\/internal\/loader\/NativeLibraries\/Main.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires !java.enablePreview\n","filename":"test\/jdk\/jdk\/modules\/etc\/DefaultModules.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,9 +89,0 @@\n-        \/**\n-          * This method is used to determine if a test can be run from within\n-          * an applet.  If your test will cause security exceptions when run as\n-          * an applet then you should return false from this method.\n-          *\/\n-        public boolean canRunInApplet() {\n-                return true;\n-        }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/AbstractSwingTest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -69,8 +69,0 @@\n-    \/**\n-    * This test cannot run as an applet because it\n-    * posts events to the event queue\n-    *\/\n-    public boolean canRunInApplet() {\n-            return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/JMTest_01.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,8 +70,0 @@\n-    \/**\n-      * This test cannot run as an applet because it\n-      * posts events to the event queue\n-      *\/\n-    public boolean canRunInApplet() {\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/JMTest_02.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,8 +68,0 @@\n-    \/**\n-     * This test cannot run as an applet because it\n-     * posts events to the event queue\n-     *\/\n-    public boolean canRunInApplet() {\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/JMTest_03.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,8 +73,0 @@\n-    \/**\n-     * This test cannot run as an applet because it\n-     * posts events to the event queue\n-     *\/\n-    public boolean canRunInApplet() {\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/JMTest_04.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,8 +68,0 @@\n-    \/**\n-     * This test cannot run as an applet because it\n-     * posts events to the event queue\n-     *\/\n-    public boolean canRunInApplet() {\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/JMTest_05.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,8 +72,0 @@\n-   \/**\n-     * This test cannot run as an applet because it\n-     * posts events to the event queue\n-     *\/\n-   public boolean canRunInApplet() {\n-      return false;\n-   }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/MenuTest.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,4 +55,0 @@\n-    public boolean canRunInApplet() {\n-        return false;\n-    }\n-\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/TypingTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -896,1 +896,1 @@\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/DNSIdentities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -904,1 +904,1 @@\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPAddressIPIdentities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -903,1 +903,1 @@\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/IPIdentities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -896,1 +896,1 @@\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/Identities.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/nio\/cs\/Test6392804.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/nio\/cs\/TestUTF_32.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,0 +305,17 @@\n+    private static void executeInvalidKeyDerivationTest(String testHeader,\n+            String keyAlg, int keySize, String errorMsg) {\n+        printTestHeader(testHeader);\n+        try {\n+            KDF k = KDF.getInstance(\"HKDF-SHA256\", p11Provider);\n+            k.deriveKey(keyAlg, HKDFParameterSpec.ofExtract()\n+                    .thenExpand(null, keySize));\n+            throw new Exception(\"No exception thrown.\");\n+        } catch (InvalidAlgorithmParameterException iape) {\n+            \/\/ Expected.\n+        } catch (Exception e) {\n+            reportTestFailure(new Exception(errorMsg + \" expected to throw \" +\n+                    \"InvalidAlgorithmParameterException for key algorithm '\" +\n+                    keyAlg + \"'.\", e));\n+        }\n+    }\n+\n@@ -613,0 +630,32 @@\n+    private static void test_unknown_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an unknown key algorithm\",\n+                \"UnknownAlgorithm\",\n+                32,\n+                \"Derivation of an unknown key algorithm\");\n+    }\n+\n+    private static void test_invalid_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid key algorithm\",\n+                \"PBKDF2WithHmacSHA1\",\n+                32,\n+                \"Derivation of an invalid key algorithm\");\n+    }\n+\n+    private static void test_invalid_aes_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key\",\n+                \"PBEWithHmacSHA224AndAES_256\",\n+                32,\n+                \"Derivation of an invalid AES key\");\n+    }\n+\n+    private static void test_invalid_AES_key_size() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key size\",\n+                \"AES\",\n+                31,\n+                \"Derivation of an AES key of invalid size (31 bytes)\");\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350807\n+ * @summary Certificates using MD5 algorithm that are disabled by default are\n+ *          incorrectly allowed in TLSv1.3 when re-enabled.\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\n+ * @run main\/othervm MD5NotAllowedInTLS13CertificateSignature\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Date;\n+import java.util.List;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import jdk.test.lib.security.CertificateBuilder;\n+import jdk.test.lib.security.SecurityUtils;\n+import sun.security.x509.AuthorityKeyIdentifierExtension;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.KeyIdentifier;\n+import sun.security.x509.SerialNumber;\n+import sun.security.x509.X500Name;\n+\n+public class MD5NotAllowedInTLS13CertificateSignature extends\n+        SSLSocketTemplate {\n+\n+    private final String protocol;\n+    private X509Certificate trustedCert;\n+    private X509Certificate serverCert;\n+    private X509Certificate clientCert;\n+    private KeyPair serverKeys;\n+    private KeyPair clientKeys;\n+\n+    protected MD5NotAllowedInTLS13CertificateSignature(String protocol)\n+            throws Exception {\n+        super();\n+        this.protocol = protocol;\n+        setupCertificates();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ MD5 is disabled by default in java.security config file,\n+        \/\/ re-enable it for our test.\n+        SecurityUtils.removeFromDisabledAlgs(\n+                \"jdk.certpath.disabledAlgorithms\", List.of(\"MD5\"));\n+        SecurityUtils.removeFromDisabledAlgs(\n+                \"jdk.tls.disabledAlgorithms\", List.of(\"MD5withRSA\"));\n+\n+        \/\/ Should fail on TLSv1.3 and up.\n+        runAndCheckException(\n+                \/\/ The conditions to reproduce the bug being fixed only met when\n+                \/\/ 'TLS' is specified, i.e. when older versions of protocol are\n+                \/\/ supported besides TLSv1.3.\n+                () -> new MD5NotAllowedInTLS13CertificateSignature(\"TLS\").run(),\n+                serverEx -> {\n+                    Throwable clientEx = serverEx.getSuppressed()[0];\n+                    assertTrue(clientEx instanceof SSLHandshakeException);\n+                    assertEquals(clientEx.getMessage(), \"(bad_certificate) \"\n+                            + \"PKIX path validation failed: \"\n+                            + \"java.security.cert.CertPathValidatorException: \"\n+                            + \"Algorithm constraints check failed on signature\"\n+                            + \" algorithm: MD5withRSA\");\n+                });\n+\n+        \/\/ Should run fine on TLSv1.2.\n+        new MD5NotAllowedInTLS13CertificateSignature(\"TLSv1.2\").run();\n+    }\n+\n+    @Override\n+    public SSLContext createServerSSLContext() throws Exception {\n+        return getSSLContext(\n+                trustedCert, serverCert, serverKeys.getPrivate(), protocol);\n+    }\n+\n+    @Override\n+    public SSLContext createClientSSLContext() throws Exception {\n+        return getSSLContext(\n+                trustedCert, clientCert, clientKeys.getPrivate(), protocol);\n+    }\n+\n+    private static SSLContext getSSLContext(\n+            X509Certificate trustedCertificate, X509Certificate keyCertificate,\n+            PrivateKey privateKey, String protocol)\n+            throws Exception {\n+\n+        \/\/ create a key store\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ks.load(null, null);\n+\n+        \/\/ import the trusted cert\n+        ks.setCertificateEntry(\"TLS Signer\", trustedCertificate);\n+\n+        \/\/ generate certificate chain\n+        Certificate[] chain = new Certificate[2];\n+        chain[0] = keyCertificate;\n+        chain[1] = trustedCertificate;\n+\n+        \/\/ import the key entry.\n+        final char[] passphrase = \"passphrase\".toCharArray();\n+        ks.setKeyEntry(\"Whatever\", privateKey, passphrase, chain);\n+\n+        \/\/ Using PKIX TrustManager - this is where MD5 signature check is done.\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ks);\n+\n+        \/\/ create SSL context\n+        SSLContext ctx = SSLContext.getInstance(protocol);\n+\n+        \/\/ Using \"SunX509\" which doesn't check peer supported signature\n+        \/\/ algorithms, so we check against local supported signature\n+        \/\/ algorithms which constitutes the fix being tested.\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        return ctx;\n+    }\n+\n+    \/\/ Certificate-building helper methods.\n+    \/\/ Certificates are signed with signature using MD5WithRSA algorithm.\n+\n+    private void setupCertificates() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(1024);\n+        KeyPair caKeys = kpg.generateKeyPair();\n+        this.serverKeys = kpg.generateKeyPair();\n+        this.clientKeys = kpg.generateKeyPair();\n+\n+        this.trustedCert = createTrustedCert(caKeys);\n+\n+        this.serverCert = customCertificateBuilder(\n+                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                serverKeys.getPublic(), caKeys.getPublic())\n+                .addBasicConstraintsExt(false, false, -1)\n+                .build(trustedCert, caKeys.getPrivate(), \"MD5WithRSA\");\n+\n+        this.clientCert = customCertificateBuilder(\n+                \"CN=localhost, OU=SSL-Client, O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                clientKeys.getPublic(), caKeys.getPublic())\n+                .addBasicConstraintsExt(false, false, -1)\n+                .build(trustedCert, caKeys.getPrivate(), \"MD5WithRSA\");\n+    }\n+\n+    private static X509Certificate createTrustedCert(KeyPair caKeys)\n+            throws Exception {\n+        SecureRandom random = new SecureRandom();\n+\n+        KeyIdentifier kid = new KeyIdentifier(caKeys.getPublic());\n+        GeneralNames gns = new GeneralNames();\n+        GeneralName name = new GeneralName(new X500Name(\n+                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\"));\n+        gns.add(name);\n+        BigInteger serialNumber = BigInteger.valueOf(\n+                random.nextLong(1000000) + 1);\n+        return customCertificateBuilder(\n+                \"O=Some-Org, L=Some-City, ST=Some-State, C=US\",\n+                caKeys.getPublic(), caKeys.getPublic())\n+                .setSerialNumber(serialNumber)\n+                .addExtension(new AuthorityKeyIdentifierExtension(kid, gns,\n+                        new SerialNumber(serialNumber)))\n+                .addBasicConstraintsExt(true, true, -1)\n+                .build(null, caKeys.getPrivate(), \"MD5WithRSA\");\n+    }\n+\n+    private static CertificateBuilder customCertificateBuilder(\n+            String subjectName, PublicKey publicKey, PublicKey caKey)\n+            throws CertificateException, IOException {\n+        SecureRandom random = new SecureRandom();\n+\n+        CertificateBuilder builder = new CertificateBuilder()\n+                .setSubjectName(subjectName)\n+                .setPublicKey(publicKey)\n+                .setNotAfter(\n+                        Date.from(Instant.now().minus(1, ChronoUnit.HOURS)))\n+                .setNotAfter(Date.from(Instant.now().plus(1, ChronoUnit.HOURS)))\n+                .setSerialNumber(\n+                        BigInteger.valueOf(random.nextLong(1000000) + 1))\n+                .addSubjectKeyIdExt(publicKey)\n+                .addAuthorityKeyIdExt(caKey);\n+        builder.addKeyUsageExt(\n+                new boolean[]{true, true, true, true, true, true});\n+\n+        return builder;\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/MD5NotAllowedInTLS13CertificateSignature.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -0,0 +1,395 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toSet;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class ExecutorTest extends JUnitAdapter {\n+\n+    private record Command(List<String> stdout, List<String> stderr) {\n+        Command {\n+            stdout.forEach(Objects::requireNonNull);\n+            stderr.forEach(Objects::requireNonNull);\n+        }\n+\n+        List<String> asExecutable() {\n+            final List<String> commandline = new ArrayList<>();\n+            if (TKit.isWindows()) {\n+                commandline.addAll(List.of(\"cmd\", \"\/C\"));\n+            } else {\n+                commandline.addAll(List.of(\"sh\", \"-c\"));\n+            }\n+            commandline.add(Stream.concat(createEchoCommands(stdout),\n+                    createEchoCommands(stderr).map(v -> v + \">&2\")).collect(joining(\" && \")));\n+            return commandline;\n+        }\n+\n+        private static Stream<String> createEchoCommands(List<String> lines) {\n+            return lines.stream().map(line -> {\n+                if (TKit.isWindows()) {\n+                    return \"(echo \" + line + \")\";\n+                } else {\n+                    return \"echo \" + line;\n+                }\n+            });\n+        }\n+\n+        ToolProvider asToolProvider() {\n+            return new ToolProvider() {\n+\n+                @Override\n+                public int run(PrintWriter out, PrintWriter err, String... args) {\n+                    stdout.forEach(out::println);\n+                    stderr.forEach(err::println);\n+                    return 0;\n+                }\n+\n+                @Override\n+                public String name() {\n+                    return \"test\";\n+                }\n+            };\n+        }\n+    }\n+\n+    private enum OutputData {\n+        EMPTY(List.of()),\n+        ONE_LINE(List.of(\"Jupiter\")),\n+        MANY(List.of(\"Uranus\", \"Saturn\", \"Earth\"));\n+\n+        OutputData(List<String> data) {\n+            data.forEach(Objects::requireNonNull);\n+            this.data = data;\n+        }\n+\n+        final List<String> data;\n+    }\n+\n+    private record CommandSpec(OutputData stdout, OutputData stderr) {\n+        CommandSpec {\n+            Objects.requireNonNull(stdout);\n+            Objects.requireNonNull(stderr);\n+        }\n+\n+        Command command() {\n+            return new Command(stdout.data.stream().map(line -> {\n+                return \"stdout.\" + line;\n+            }).toList(), stderr.data.stream().map(line -> {\n+                return \"stderr.\" + line;\n+            }).toList());\n+        }\n+    }\n+\n+    public enum OutputControl {\n+        DUMP(Executor::dumpOutput),\n+        SAVE_ALL(Executor::saveOutput),\n+        SAVE_FIRST_LINE(Executor::saveFirstLineOfOutput),\n+        DISCARD_STDOUT(Executor::discardStdout),\n+        DISCARD_STDERR(Executor::discardStderr),\n+        ;\n+\n+        OutputControl(Consumer<Executor> configureExector) {\n+            this.configureExector = Objects.requireNonNull(configureExector);\n+        }\n+\n+        Executor applyTo(Executor exec) {\n+            configureExector.accept(exec);\n+            return exec;\n+        }\n+\n+        static List<Set<OutputControl>> variants() {\n+            final List<Set<OutputControl>> variants = new ArrayList<>();\n+            for (final var withDump : BOOLEAN_VALUES) {\n+                variants.addAll(Stream.of(\n+                        Set.<OutputControl>of(),\n+                        Set.of(SAVE_ALL),\n+                        Set.of(SAVE_FIRST_LINE),\n+                        Set.of(DISCARD_STDOUT),\n+                        Set.of(DISCARD_STDERR),\n+                        Set.of(SAVE_ALL, DISCARD_STDOUT),\n+                        Set.of(SAVE_FIRST_LINE, DISCARD_STDOUT),\n+                        Set.of(SAVE_ALL, DISCARD_STDERR),\n+                        Set.of(SAVE_FIRST_LINE, DISCARD_STDERR),\n+                        Set.of(SAVE_ALL, DISCARD_STDOUT, DISCARD_STDERR),\n+                        Set.of(SAVE_FIRST_LINE, DISCARD_STDOUT, DISCARD_STDERR)\n+                ).map(v -> {\n+                    if (withDump) {\n+                        return Stream.concat(Stream.of(DUMP), v.stream()).collect(toSet());\n+                    } else {\n+                        return v;\n+                    }\n+                }).toList());\n+            }\n+            return variants.stream().map(options -> {\n+                return options.stream().filter(o -> {\n+                    return o.configureExector != NOP;\n+                }).collect(toSet());\n+            }).distinct().toList();\n+        }\n+\n+        private final Consumer<Executor> configureExector;\n+\n+        static final Set<OutputControl> SAVE = Set.of(SAVE_ALL, SAVE_FIRST_LINE);\n+    }\n+\n+    public record OutputTestSpec(boolean toolProvider, Set<OutputControl> outputControl, CommandSpec commandSpec) {\n+        public OutputTestSpec {\n+            outputControl.forEach(Objects::requireNonNull);\n+            if (outputControl.containsAll(OutputControl.SAVE)) {\n+                throw new IllegalArgumentException();\n+            }\n+            Objects.requireNonNull(commandSpec);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            final List<String> tokens = new ArrayList<>();\n+\n+            if (toolProvider) {\n+                tokens.add(\"tool-provider\");\n+            }\n+\n+            tokens.add(\"output=\" + format(outputControl));\n+            tokens.add(\"command=\" + commandSpec);\n+\n+            return String.join(\",\", tokens.toArray(String[]::new));\n+        }\n+\n+        void test() {\n+            final var command = commandSpec.command();\n+            final var commandWithDiscardedStreams = discardStreams(command);\n+\n+            final Executor.Result[] result = new Executor.Result[1];\n+            final var outputCapture = OutputCapture.captureOutput(() -> {\n+                result[0] = createExecutor(command).executeWithoutExitCodeCheck();\n+            });\n+\n+            assertEquals(0, result[0].getExitCode());\n+\n+            assertEquals(expectedCapturedSystemOut(commandWithDiscardedStreams), outputCapture.outLines());\n+            assertEquals(expectedCapturedSystemErr(commandWithDiscardedStreams), outputCapture.errLines());\n+\n+            assertEquals(expectedResultStdout(commandWithDiscardedStreams), result[0].stdout().getOutput());\n+            assertEquals(expectedResultStderr(commandWithDiscardedStreams), result[0].stderr().getOutput());\n+\n+            if (!saveOutput()) {\n+                assertNull(result[0].getOutput());\n+            } else {\n+                assertNotNull(result[0].getOutput());\n+                final var allExpectedOutput = expectedCommandOutput(command);\n+                assertEquals(allExpectedOutput.isEmpty(), result[0].getOutput().isEmpty());\n+                if (!allExpectedOutput.isEmpty()) {\n+                    if (outputControl.contains(OutputControl.SAVE_ALL)) {\n+                        assertEquals(allExpectedOutput, result[0].getOutput());\n+                    } else if (outputControl.contains(OutputControl.SAVE_FIRST_LINE)) {\n+                        assertEquals(1, result[0].getOutput().size());\n+                        assertEquals(allExpectedOutput.getFirst(), result[0].getFirstLineOfOutput());\n+                    } else {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                }\n+            }\n+        }\n+\n+        private boolean dumpOutput() {\n+            return outputControl.contains(OutputControl.DUMP);\n+        }\n+\n+        private boolean saveOutput() {\n+            return !Collections.disjoint(outputControl, OutputControl.SAVE);\n+        }\n+\n+        private boolean discardStdout() {\n+            return outputControl.contains(OutputControl.DISCARD_STDOUT);\n+        }\n+\n+        private boolean discardStderr() {\n+            return outputControl.contains(OutputControl.DISCARD_STDERR);\n+        }\n+\n+        private static String format(Set<OutputControl> outputControl) {\n+            return outputControl.stream().map(OutputControl::name).sorted().collect(joining(\"+\"));\n+        }\n+\n+        private List<String> expectedCapturedSystemOut(Command command) {\n+            if (!dumpOutput() || (!toolProvider && !saveOutput())) {\n+                return List.of();\n+            } else if(saveOutput()) {\n+                return Stream.concat(command.stdout().stream(), command.stderr().stream()).toList();\n+            } else {\n+                return command.stdout();\n+            }\n+        }\n+\n+        private List<String> expectedCapturedSystemErr(Command command) {\n+            if (!dumpOutput() || (!toolProvider && !saveOutput())) {\n+                return List.of();\n+            } else if(saveOutput()) {\n+                return List.of();\n+            } else {\n+                return command.stderr();\n+            }\n+        }\n+\n+        private List<String> expectedResultStdout(Command command) {\n+            return expectedResultStream(command.stdout());\n+        }\n+\n+        private List<String> expectedResultStderr(Command command) {\n+            if (outputControl.contains(OutputControl.SAVE_FIRST_LINE) && !command.stdout().isEmpty()) {\n+                return List.of();\n+            }\n+            return expectedResultStream(command.stderr());\n+        }\n+\n+        private List<String> expectedResultStream(List<String> commandOutput) {\n+            Objects.requireNonNull(commandOutput);\n+            if (outputControl.contains(OutputControl.SAVE_ALL)) {\n+                return commandOutput;\n+            } else if (outputControl.contains(OutputControl.SAVE_FIRST_LINE)) {\n+                return commandOutput.stream().findFirst().map(List::of).orElseGet(List::of);\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        private Command discardStreams(Command command) {\n+            return new Command(discardStdout() ? List.of() : command.stdout(), discardStderr() ? List.of() : command.stderr());\n+        }\n+\n+        private record OutputCapture(byte[] out, byte[] err, Charset outCharset, Charset errCharset) {\n+            OutputCapture {\n+                Objects.requireNonNull(out);\n+                Objects.requireNonNull(err);\n+                Objects.requireNonNull(outCharset);\n+                Objects.requireNonNull(errCharset);\n+            }\n+\n+            List<String> outLines() {\n+                return toLines(out, outCharset);\n+            }\n+\n+            List<String> errLines() {\n+                return toLines(err, errCharset);\n+            }\n+\n+            private static List<String> toLines(byte[] buf, Charset charset) {\n+                try (var reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(buf), charset))) {\n+                    return reader.lines().filter(line -> {\n+                        return !line.contains(\"TRACE\");\n+                    }).toList();\n+                } catch (IOException ex) {\n+                    throw new UncheckedIOException(ex);\n+                }\n+            }\n+\n+            static OutputCapture captureOutput(Runnable runnable) {\n+                final var captureOut = new ByteArrayOutputStream();\n+                final var captureErr = new ByteArrayOutputStream();\n+\n+                final var out = System.out;\n+                final var err = System.err;\n+                try {\n+                    final var outCharset = System.out.charset();\n+                    final var errCharset = System.err.charset();\n+                    System.setOut(new PrintStream(captureOut, true, outCharset));\n+                    System.setErr(new PrintStream(captureErr, true, errCharset));\n+                    runnable.run();\n+                    return new OutputCapture(captureOut.toByteArray(), captureErr.toByteArray(), outCharset, errCharset);\n+                } finally {\n+                    try {\n+                        System.setOut(out);\n+                    } finally {\n+                        System.setErr(err);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private List<String> expectedCommandOutput(Command command) {\n+            command = discardStreams(command);\n+            return Stream.of(command.stdout(), command.stderr()).flatMap(List::stream).toList();\n+        }\n+\n+        private Executor createExecutor(Command command) {\n+            final Executor exec;\n+            if (toolProvider) {\n+                exec = Executor.of(command.asToolProvider());\n+            } else {\n+                exec = Executor.of(command.asExecutable());\n+            }\n+\n+            outputControl.forEach(control -> control.applyTo(exec));\n+\n+            return exec;\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testSavedOutput(OutputTestSpec spec) {\n+        spec.test();\n+    }\n+\n+    public static List<OutputTestSpec> testSavedOutput() {\n+        List<OutputTestSpec> testCases = new ArrayList<>();\n+        for (final var toolProvider : BOOLEAN_VALUES) {\n+            for (final var outputControl : OutputControl.variants()) {\n+                for (final var stdoutContent : List.of(OutputData.values())) {\n+                    for (final var stderrContent : List.of(OutputData.values())) {\n+                        final var commandSpec = new CommandSpec(stdoutContent, stderrContent);\n+                        testCases.add(new OutputTestSpec(toolProvider, outputControl, commandSpec));\n+                    }\n+                }\n+            }\n+        }\n+        return testCases;\n+    }\n+\n+    private static final List<Boolean> BOOLEAN_VALUES = List.of(Boolean.TRUE, Boolean.FALSE);\n+    private static final Consumer<Executor> NOP = exec -> {};\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/ExecutorTest.java","additions":395,"deletions":0,"binary":false,"changes":395,"status":"added"},{"patch":"@@ -373,1 +373,1 @@\n-                        return new Executor.Result(actualJPackageExitCode, null,\n+                        return new Executor.Result(actualJPackageExitCode,\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/PackageTestTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-                        .apply(Files.readAllLines(desktopFile).stream());\n+                        .apply(Files.readAllLines(desktopFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import static java.util.stream.Collectors.joining;\n+\n@@ -28,0 +30,1 @@\n+import java.io.InputStream;\n@@ -32,0 +35,1 @@\n+import java.io.Writer;\n@@ -34,2 +38,0 @@\n-import java.util.Arrays;\n-import java.util.Collections;\n@@ -53,2 +55,10 @@\n-        return new Executor().setExecutable(cmdline[0]).addArguments(\n-                Arrays.copyOfRange(cmdline, 1, cmdline.length));\n+        return of(List.of(cmdline));\n+    }\n+\n+    public static Executor of(List<String> cmdline) {\n+        cmdline.forEach(Objects::requireNonNull);\n+        return new Executor().setExecutable(cmdline.getFirst()).addArguments(cmdline.subList(1, cmdline.size()));\n+    }\n+\n+    public static Executor of(ToolProvider toolProvider, String... args) {\n+        return new Executor().setToolProvider(toolProvider).addArguments(List.of(args));\n@@ -58,1 +68,1 @@\n-        saveOutputType = new HashSet<>(Set.of(SaveOutputType.NONE));\n+        outputStreamsControl = new OutputStreamsControl();\n@@ -126,3 +136,4 @@\n-     * Configures this instance to save full output that command will produce.\n-     * This function is mutual exclusive with\n-     * saveFirstLineOfOutput() function.\n+     * Configures this instance to save all stdout and stderr streams from the to be\n+     * executed command.\n+     * <p>\n+     * This function is mutually exclusive with {@link #saveFirstLineOfOutput()}.\n@@ -133,3 +144,1 @@\n-        saveOutputType.remove(SaveOutputType.FIRST_LINE);\n-        saveOutputType.add(SaveOutputType.FULL);\n-        return this;\n+        return saveOutput(true);\n@@ -139,4 +148,8 @@\n-     * Configures how to save output that command will produce. If\n-     * <code>v<\/code> is <code>true<\/code>, the function call is equivalent to\n-     * <code>saveOutput()<\/code> call. If <code>v<\/code> is <code>false<\/code>,\n-     * the function will result in not preserving command output.\n+     * Configures if all stdout and stderr streams from the to be executed command\n+     * should be saved.\n+     * <p>\n+     * If <code>v<\/code> is <code>true<\/code>, the function call is equivalent to\n+     * {@link #saveOutput()} call. If <code>v<\/code> is <code>false<\/code>, command\n+     * output will not be saved.\n+     *\n+     * @parameter v if both stdout and stderr streams should be saved\n@@ -147,7 +160,1 @@\n-        if (v) {\n-            saveOutput();\n-        } else {\n-            saveOutputType.remove(SaveOutputType.FIRST_LINE);\n-            saveOutputType.remove(SaveOutputType.FULL);\n-        }\n-        return this;\n+        return setOutputControl(v, OutputControlOption.SAVE_ALL);\n@@ -157,3 +164,4 @@\n-     * Configures this instance to save only the first line out output that\n-     * command will produce. This function is mutual exclusive with\n-     * saveOutput() function.\n+     * Configures this instance to save the first line of a stream merged from\n+     * stdout and stderr streams from the to be executed command.\n+     * <p>\n+     * This function is mutually exclusive with {@link #saveOutput()}.\n@@ -164,3 +172,1 @@\n-        saveOutputType.add(SaveOutputType.FIRST_LINE);\n-        saveOutputType.remove(SaveOutputType.FULL);\n-        return this;\n+        return setOutputControl(true, OutputControlOption.SAVE_FIRST_LINE);\n@@ -170,4 +176,2 @@\n-     * Configures this instance to dump all output that command will produce to\n-     * System.out and System.err. Can be used together with saveOutput() and\n-     * saveFirstLineOfOutput() to save command output and also copy it in the\n-     * default output streams.\n+     * Configures this instance to dump both stdout and stderr streams from the to\n+     * be executed command into {@link System.out}.\n@@ -182,5 +186,5 @@\n-        if (v) {\n-            saveOutputType.add(SaveOutputType.DUMP);\n-        } else {\n-            saveOutputType.remove(SaveOutputType.DUMP);\n-        }\n+        return setOutputControl(v, OutputControlOption.DUMP);\n+    }\n+\n+    public Executor discardStdout(boolean v) {\n+        outputStreamsControl.stdout().discard(v);\n@@ -190,1 +194,19 @@\n-    public record Result(int exitCode, List<String> output, Supplier<String> cmdline) {\n+    public Executor discardStdout() {\n+        return discardStdout(true);\n+    }\n+\n+    public Executor discardStderr(boolean v) {\n+        outputStreamsControl.stderr().discard(v);\n+        return this;\n+    }\n+\n+    public Executor discardStderr() {\n+        return discardStderr(true);\n+    }\n+\n+    public interface Output {\n+        public List<String> getOutput();\n+\n+        public default String getFirstLineOfOutput() {\n+            return findFirstLineOfOutput().orElseThrow();\n+        }\n@@ -192,0 +214,6 @@\n+        public default Optional<String> findFirstLineOfOutput() {\n+            return getOutput().stream().findFirst();\n+        }\n+    }\n+\n+    public record Result(int exitCode, CommandOutput output, Supplier<String> cmdline) implements Output {\n@@ -193,0 +221,1 @@\n+            Objects.requireNonNull(output);\n@@ -196,2 +225,2 @@\n-        public String getFirstLineOfOutput() {\n-            return output.get(0);\n+        public Result(int exitCode, Supplier<String> cmdline) {\n+            this(exitCode, CommandOutput.EMPTY, cmdline);\n@@ -200,0 +229,1 @@\n+        @Override\n@@ -201,1 +231,9 @@\n-            return output;\n+            return output.lines().orElse(null);\n+        }\n+\n+        public Output stdout() {\n+            return createView(output.stdoutLines());\n+        }\n+\n+        public Output stderr() {\n+            return createView(output.stderrLines());\n@@ -218,0 +256,9 @@\n+\n+        private static Output createView(Optional<List<String>> lines) {\n+            return new Output() {\n+                @Override\n+                public List<String> getOutput() {\n+                    return lines.orElse(null);\n+                }\n+            };\n+        }\n@@ -273,3 +320,9 @@\n-    \/*\n-     * Repeates command \"max\" times and waits for \"wait\" seconds between each\n-     * execution until command returns expected error code.\n+    \/**\n+     * Executes the configured command {@code max} at most times and waits for\n+     * {@code wait} seconds between each execution until the command exits with\n+     * {@code expectedCode} exit code.\n+     *\n+     * @param expectedExitCode the expected exit code of the command\n+     * @param max              the maximum times to execute the command\n+     * @param wait             number of seconds to wait between executions of the\n+     *                         command\n@@ -277,1 +330,1 @@\n-    public Result executeAndRepeatUntilExitCode(int expectedCode, int max, int wait) {\n+    public Result executeAndRepeatUntilExitCode(int expectedExitCode, int max, int wait) {\n@@ -281,1 +334,1 @@\n-                if (result.getExitCode() != expectedCode) {\n+                if (result.getExitCode() != expectedExitCode) {\n@@ -285,1 +338,1 @@\n-            }, max, wait).assertExitCodeIs(expectedCode);\n+            }, max, wait).assertExitCodeIs(expectedExitCode);\n@@ -287,1 +340,1 @@\n-            return ex.getValue().assertExitCodeIs(expectedCode);\n+            return ex.getValue().assertExitCodeIs(expectedExitCode);\n@@ -291,3 +344,12 @@\n-    \/*\n-     * Repeates a \"task\" \"max\" times and waits for \"wait\" seconds between each\n-     * execution until the \"task\" returns without throwing an exception.\n+    \/**\n+     * Calls {@code task.get()} at most {@code max} times and waits for {@code wait}\n+     * seconds between each call until {@code task.get()} invocation returns without\n+     * throwing {@link RuntimeException} exception.\n+     * <p>\n+     * Returns the object returned by the first {@code task.get()} invocation that\n+     * didn't throw an exception or rethrows the last exception if all of\n+     * {@code max} attempts ended in exception being thrown.\n+     *\n+     * @param task the object of which to call {@link Supplier#get()} function\n+     * @param max  the maximum times to execute the command\n+     * @param wait number of seconds to wait between executions of the\n@@ -329,3 +391,4 @@\n-    private boolean withSavedOutput() {\n-        return saveOutputType.contains(SaveOutputType.FULL) || saveOutputType.contains(\n-                SaveOutputType.FIRST_LINE);\n+    private Executor setOutputControl(boolean set, OutputControlOption v) {\n+        outputStreamsControl.stdout().set(set, v);\n+        outputStreamsControl.stderr().set(set, v);\n+        return this;\n@@ -344,2 +407,2 @@\n-        \/\/ changing the directory. So to stay of safe side, use absolute path\n-        \/\/ to executable.\n+        \/\/ changing the directory. Use absolute path to executable to play\n+        \/\/ it safely on all platforms.\n@@ -366,0 +429,3 @@\n+\n+        outputStreamsControl.applyTo(builder);\n+\n@@ -367,11 +433,4 @@\n-        if (withSavedOutput()) {\n-            builder.redirectErrorStream(true);\n-            sb.append(\"; save output\");\n-        } else if (saveOutputType.contains(SaveOutputType.DUMP)) {\n-            builder.inheritIO();\n-            sb.append(\"; inherit I\/O\");\n-        } else {\n-            builder.redirectError(ProcessBuilder.Redirect.DISCARD);\n-            builder.redirectOutput(ProcessBuilder.Redirect.DISCARD);\n-            sb.append(\"; discard I\/O\");\n-        }\n+        outputStreamsControl.describe().ifPresent(desc -> {\n+            sb.append(\"; \").append(desc);\n+        });\n+\n@@ -409,24 +468,3 @@\n-        List<String> outputLines = null;\n-        if (withSavedOutput()) {\n-            try (BufferedReader outReader = new BufferedReader(\n-                    new InputStreamReader(process.getInputStream()))) {\n-                if (saveOutputType.contains(SaveOutputType.DUMP)\n-                        || saveOutputType.contains(SaveOutputType.FULL)) {\n-                    outputLines = outReader.lines().collect(Collectors.toList());\n-                } else {\n-                    outputLines = Arrays.asList(\n-                            outReader.lines().findFirst().orElse(null));\n-                }\n-            } finally {\n-                if (saveOutputType.contains(SaveOutputType.DUMP) && outputLines != null) {\n-                    outputLines.stream().forEach(System.out::println);\n-                    if (saveOutputType.contains(SaveOutputType.FIRST_LINE)) {\n-                        \/\/ Pick the first line of saved output if there is one\n-                        for (String line: outputLines) {\n-                            outputLines = List.of(line);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+        final var output = combine(\n+                processProcessStream(outputStreamsControl.stdout(), process.getInputStream()),\n+                processProcessStream(outputStreamsControl.stderr(), process.getErrorStream()));\n@@ -437,6 +475,0 @@\n-        final List<String> output;\n-        if (outputLines != null) {\n-            output = Collections.unmodifiableList(outputLines);\n-        } else {\n-            output = null;\n-        }\n@@ -447,1 +479,5 @@\n-        trace(\"Execute \" + getPrintableCommandLine() + \"...\");\n+        final var sb = new StringBuilder(getPrintableCommandLine());\n+        outputStreamsControl.describe().ifPresent(desc -> {\n+            sb.append(\"; \").append(desc);\n+        });\n+        trace(\"Execute \" + sb + \"...\");\n@@ -454,2 +490,9 @@\n-    private Result createResult(int exitCode, List<String> output) {\n-        return new Result(exitCode, output, this::getPrintableCommandLine);\n+    private Result runToolProvider() throws IOException {\n+        final var toolProviderStreamConfig = ToolProviderStreamConfig.create(outputStreamsControl);\n+\n+        final var exitCode = runToolProvider(toolProviderStreamConfig);\n+\n+        final var output = combine(\n+                read(outputStreamsControl.stdout(), toolProviderStreamConfig.out()),\n+                read(outputStreamsControl.stderr(), toolProviderStreamConfig.err()));\n+        return createResult(exitCode, output);\n@@ -458,5 +501,8 @@\n-    private Result runToolProvider() throws IOException {\n-        if (!withSavedOutput()) {\n-            if (saveOutputType.contains(SaveOutputType.DUMP)) {\n-                return createResult(runToolProvider(System.out, System.err), null);\n-            }\n+    private int runToolProvider(ToolProviderStreamConfig cfg) throws IOException {\n+        try {\n+            return runToolProvider(cfg.out().ps(), cfg.err().ps());\n+        } finally {\n+            cfg.out().ps().flush();\n+            cfg.err().ps().flush();\n+        }\n+    }\n@@ -464,27 +510,18 @@\n-            PrintStream nullPrintStream = new PrintStream(new OutputStream() {\n-                @Override\n-                public void write(int b) {\n-                    \/\/ Nop\n-                }\n-            });\n-            return createResult(runToolProvider(nullPrintStream, nullPrintStream), null);\n-        }\n-\n-        try (ByteArrayOutputStream buf = new ByteArrayOutputStream();\n-                PrintStream ps = new PrintStream(buf)) {\n-            final var exitCode = runToolProvider(ps, ps);\n-            ps.flush();\n-            final List<String> output;\n-            try (BufferedReader bufReader = new BufferedReader(new StringReader(\n-                    buf.toString()))) {\n-                if (saveOutputType.contains(SaveOutputType.FIRST_LINE)) {\n-                    String firstLine = bufReader.lines().findFirst().orElse(null);\n-                    if (firstLine != null) {\n-                        output = List.of(firstLine);\n-                    } else {\n-                        output = null;\n-                    }\n-                } else if (saveOutputType.contains(SaveOutputType.FULL)) {\n-                    output = bufReader.lines().collect(Collectors.toUnmodifiableList());\n-                } else {\n-                    output = null;\n+    private static Optional<List<String>> processProcessStream(OutputControl outputControl, InputStream in) throws IOException {\n+        List<String> outputLines = null;\n+        try (final var bufReader = new BufferedReader(new InputStreamReader(in))) {\n+            if (outputControl.dump() || outputControl.saveAll()) {\n+                outputLines = bufReader.lines().toList();\n+            } else if (outputControl.saveFirstLine()) {\n+                outputLines = Optional.ofNullable(bufReader.readLine()).map(List::of).orElseGet(List::of);\n+                \/\/ Read all input, or the started process may exit with an error (cmd.exe does so).\n+                bufReader.transferTo(Writer.nullWriter());\n+            } else {\n+                \/\/ This should be empty input stream, fetch it anyway.\n+                bufReader.transferTo(Writer.nullWriter());\n+            }\n+        } finally {\n+            if (outputControl.dump() && outputLines != null) {\n+                outputLines.forEach(System.out::println);\n+                if (outputControl.saveFirstLine()) {\n+                    outputLines = outputLines.stream().findFirst().map(List::of).orElseGet(List::of);\n@@ -492,0 +529,22 @@\n+            }\n+            if (!outputControl.save()) {\n+                outputLines = null;\n+            }\n+        }\n+        return Optional.ofNullable(outputLines);\n+    }\n+\n+    private static Optional<List<String>> read(OutputControl outputControl, CachingPrintStream cps) throws IOException {\n+        final var bufferAsString = cps.bufferContents();\n+        try (final var bufReader = new BufferedReader(new StringReader(bufferAsString.orElse(\"\")))) {\n+            if (outputControl.saveFirstLine()) {\n+                return Optional.of(bufReader.lines().findFirst().map(List::of).orElseGet(List::of));\n+            } else if (outputControl.saveAll()) {\n+                return Optional.of(bufReader.lines().toList());\n+            } else if (bufferAsString.isPresent()) {\n+                return Optional.of(List.of());\n+            } else {\n+                return Optional.empty();\n+            }\n+        }\n+    }\n@@ -493,9 +552,14 @@\n-                if (saveOutputType.contains(SaveOutputType.DUMP)) {\n-                    Stream<String> lines;\n-                    if (saveOutputType.contains(SaveOutputType.FULL)) {\n-                        lines = output.stream();\n-                    } else {\n-                        lines = bufReader.lines();\n-                    }\n-                    lines.forEach(System.out::println);\n-                }\n+    private CommandOutput combine(Optional<List<String>> out, Optional<List<String>> err) {\n+        if (out.isEmpty() && err.isEmpty()) {\n+            return new CommandOutput();\n+        } else if (out.isEmpty()) {\n+            return new CommandOutput(err, -1);\n+        } else if (err.isEmpty()) {\n+            return new CommandOutput(out, Integer.MAX_VALUE);\n+        } else {\n+            final var combined = Stream.of(out, err).map(Optional::orElseThrow).flatMap(List::stream);\n+            if (outputStreamsControl.stdout().saveFirstLine() && outputStreamsControl.stderr().saveFirstLine()) {\n+                return new CommandOutput(Optional.of(combined.findFirst().map(List::of).orElseGet(List::of)),\n+                        Integer.min(1, out.orElseThrow().size()));\n+            } else {\n+                return new CommandOutput(Optional.of(combined.toList()), out.orElseThrow().size());\n@@ -503,1 +567,0 @@\n-            return createResult(exitCode, output);\n@@ -507,0 +570,4 @@\n+    private Result createResult(int exitCode, CommandOutput output) {\n+        return new Result(exitCode, output, this::getPrintableCommandLine);\n+    }\n+\n@@ -538,0 +605,327 @@\n+    private static PrintStream nullPrintStream() {\n+        return new PrintStream(OutputStream.nullOutputStream());\n+    }\n+\n+    private record OutputStreamsControl(OutputControl stdout, OutputControl stderr) {\n+        OutputStreamsControl {\n+            Objects.requireNonNull(stdout);\n+            Objects.requireNonNull(stderr);\n+        }\n+\n+        OutputStreamsControl() {\n+            this(new OutputControl(), new OutputControl());\n+        }\n+\n+        void applyTo(ProcessBuilder pb) {\n+            pb.redirectOutput(stdout.asProcessBuilderRedirect());\n+            pb.redirectError(stderr.asProcessBuilderRedirect());\n+        }\n+\n+        Optional<String> describe() {\n+            final List<String> tokens = new ArrayList<>();\n+            if (stdout.save() || stderr.save()) {\n+                streamsLabel(\"save \", true).ifPresent(tokens::add);\n+            }\n+            if (stdout.dump() || stderr.dump()) {\n+                streamsLabel(\"inherit \", true).ifPresent(tokens::add);\n+            }\n+            streamsLabel(\"discard \", false).ifPresent(tokens::add);\n+            if (tokens.isEmpty()) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(String.join(\"; \", tokens));\n+            }\n+        }\n+\n+        Optional<String> streamsLabel(String prefix, boolean negate) {\n+            Objects.requireNonNull(prefix);\n+            final var str = Stream.of(stdoutLabel(negate), stderrLabel(negate))\n+                    .filter(Optional::isPresent)\n+                    .map(Optional::orElseThrow)\n+                    .collect(joining(\"+\"));\n+            if (str.isEmpty()) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(prefix + str);\n+            }\n+        }\n+\n+        private Optional<String> stdoutLabel(boolean negate) {\n+            if ((stdout.discard() && !negate) || (!stdout.discard() && negate)) {\n+                return Optional.of(\"out\");\n+            } else {\n+                return Optional.empty();\n+            }\n+        }\n+\n+        private Optional<String> stderrLabel(boolean negate) {\n+            if ((stderr.discard() && !negate) || (!stderr.discard() && negate)) {\n+                return Optional.of(\"err\");\n+            } else {\n+                return Optional.empty();\n+            }\n+        }\n+    }\n+\n+    private record CachingPrintStream(PrintStream ps, Optional<ByteArrayOutputStream> buf) {\n+        CachingPrintStream {\n+            Objects.requireNonNull(ps);\n+            Objects.requireNonNull(buf);\n+        }\n+\n+        Optional<String> bufferContents() {\n+            return buf.map(ByteArrayOutputStream::toString);\n+        }\n+\n+        static Builder build() {\n+            return new Builder();\n+        }\n+\n+        static final class Builder {\n+\n+            Builder save(boolean v) {\n+                save = v;\n+                return this;\n+            }\n+\n+            Builder discard(boolean v) {\n+                discard = v;\n+                return this;\n+            }\n+\n+            Builder dumpStream(PrintStream v) {\n+                dumpStream = v;\n+                return this;\n+            }\n+\n+            CachingPrintStream create() {\n+                final Optional<ByteArrayOutputStream> buf;\n+                if (save && !discard) {\n+                    buf = Optional.of(new ByteArrayOutputStream());\n+                } else {\n+                    buf = Optional.empty();\n+                }\n+\n+                final PrintStream ps;\n+                if (buf.isPresent() && dumpStream != null) {\n+                    ps = new PrintStream(new TeeOutputStream(List.of(buf.orElseThrow(), dumpStream)), true, dumpStream.charset());\n+                } else if (!discard) {\n+                    ps = buf.map(PrintStream::new).or(() -> Optional.ofNullable(dumpStream)).orElseGet(Executor::nullPrintStream);\n+                } else {\n+                    ps = nullPrintStream();\n+                }\n+\n+                return new CachingPrintStream(ps, buf);\n+            }\n+\n+            private boolean save;\n+            private boolean discard;\n+            private PrintStream dumpStream;\n+        }\n+    }\n+\n+    private record ToolProviderStreamConfig(CachingPrintStream out, CachingPrintStream err) {\n+        ToolProviderStreamConfig {\n+            Objects.requireNonNull(out);\n+            Objects.requireNonNull(err);\n+        }\n+\n+        static ToolProviderStreamConfig create(OutputStreamsControl cfg) {\n+            final var errCfgBuilder = cfg.stderr().buildCachingPrintStream(System.err);\n+            if (cfg.stderr().dump() && cfg.stderr().save()) {\n+                errCfgBuilder.dumpStream(System.out);\n+            }\n+            return new ToolProviderStreamConfig(\n+                    cfg.stdout().buildCachingPrintStream(System.out).create(), errCfgBuilder.create());\n+        }\n+    }\n+\n+    private static final class OutputControl {\n+\n+        boolean save() {\n+            return save.isPresent();\n+        }\n+\n+        boolean saveAll() {\n+            return save.orElse(null) == OutputControlOption.SAVE_ALL;\n+        }\n+\n+        boolean saveFirstLine() {\n+            return save.orElse(null) == OutputControlOption.SAVE_FIRST_LINE;\n+        }\n+\n+        boolean discard() {\n+            return discard || (!dump && save.isEmpty());\n+        }\n+\n+        boolean dump() {\n+            return !discard && dump;\n+        }\n+\n+        OutputControl dump(boolean v) {\n+            this.dump = v;\n+            return this;\n+        }\n+\n+        OutputControl discard(boolean v) {\n+            this.discard = v;\n+            return this;\n+        }\n+\n+        OutputControl saveAll(boolean v) {\n+            if (v) {\n+                save = Optional.of(OutputControlOption.SAVE_ALL);\n+            } else {\n+                save = Optional.empty();\n+            }\n+            return this;\n+        }\n+\n+        OutputControl saveFirstLine(boolean v) {\n+            if (v) {\n+                save = Optional.of(OutputControlOption.SAVE_FIRST_LINE);\n+            } else {\n+                save = Optional.empty();\n+            }\n+            return this;\n+        }\n+\n+        OutputControl set(boolean set, OutputControlOption v) {\n+            switch (v) {\n+            case DUMP -> dump(set);\n+            case SAVE_ALL -> saveAll(set);\n+            case SAVE_FIRST_LINE -> saveFirstLine(set);\n+            }\n+            return this;\n+        }\n+\n+        ProcessBuilder.Redirect asProcessBuilderRedirect() {\n+            if (discard()) {\n+                return ProcessBuilder.Redirect.DISCARD;\n+            } else if (dump && !save()) {\n+                return ProcessBuilder.Redirect.INHERIT;\n+            } else {\n+                return ProcessBuilder.Redirect.PIPE;\n+            }\n+        }\n+\n+        CachingPrintStream.Builder buildCachingPrintStream(PrintStream dumpStream) {\n+            Objects.requireNonNull(dumpStream);\n+            final var builder = CachingPrintStream.build().save(save()).discard(discard());\n+            if (dump()) {\n+                builder.dumpStream(dumpStream);\n+            }\n+            return builder;\n+        }\n+\n+        private boolean dump;\n+        private boolean discard;\n+        private Optional<OutputControlOption> save = Optional.empty();\n+    }\n+\n+    private static final class TeeOutputStream extends OutputStream {\n+\n+        public TeeOutputStream(Iterable<OutputStream> streams) {\n+            streams.forEach(Objects::requireNonNull);\n+            this.streams = streams;\n+        }\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            for (final var out : streams) {\n+                out.write(b);\n+            }\n+        }\n+\n+        @Override\n+        public void write(byte[] b) throws IOException {\n+            for (final var out : streams) {\n+                out.write(b);\n+            }\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            for (final var out : streams) {\n+                out.write(b, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+            forEach(OutputStream::flush);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            forEach(OutputStream::close);\n+        }\n+\n+        private void forEach(OutputStreamConsumer c) throws IOException {\n+            IOException firstEx = null;\n+            for (final var out : streams) {\n+                try {\n+                    c.accept(out);\n+                } catch (IOException e) {\n+                    if (firstEx == null) {\n+                        firstEx = e;\n+                    }\n+                }\n+            }\n+            if (firstEx != null) {\n+                throw firstEx;\n+            }\n+        }\n+\n+        @FunctionalInterface\n+        private static interface OutputStreamConsumer {\n+            void accept(OutputStream out) throws IOException;\n+        }\n+\n+        private final Iterable<OutputStream> streams;\n+    }\n+\n+    private static final class CommandOutput {\n+        CommandOutput(Optional<List<String>> lines, int stdoutLineCount) {\n+            this.lines = Objects.requireNonNull(lines);\n+            this.stdoutLineCount = stdoutLineCount;\n+        }\n+\n+        CommandOutput() {\n+            this(Optional.empty(), 0);\n+        }\n+\n+        Optional<List<String>> lines() {\n+            return lines;\n+        }\n+\n+        Optional<List<String>> stdoutLines() {\n+            if (lines.isEmpty() || stdoutLineCount < 0) {\n+                return Optional.empty();\n+            }\n+\n+            final var theLines = lines.orElseThrow();\n+            if (stdoutLineCount == theLines.size()) {\n+                return lines;\n+            } else {\n+                return Optional.of(theLines.subList(0, Integer.min(stdoutLineCount, theLines.size())));\n+            }\n+        }\n+\n+        Optional<List<String>> stderrLines() {\n+            if (lines.isEmpty() || stdoutLineCount > lines.orElseThrow().size()) {\n+                return Optional.empty();\n+            } else if (stdoutLineCount == 0) {\n+                return lines;\n+            } else {\n+                final var theLines = lines.orElseThrow();\n+                return Optional.of(theLines.subList(stdoutLineCount, theLines.size()));\n+            }\n+        }\n+\n+        private final Optional<List<String>> lines;\n+        private final int stdoutLineCount;\n+\n+        static final CommandOutput EMPTY = new CommandOutput();\n+    }\n+\n@@ -540,1 +934,1 @@\n-    private Set<SaveOutputType> saveOutputType;\n+    private OutputStreamsControl outputStreamsControl;\n@@ -547,3 +941,3 @@\n-    private static enum SaveOutputType {\n-        NONE, FULL, FIRST_LINE, DUMP\n-    };\n+    private static enum OutputControlOption {\n+        SAVE_ALL, SAVE_FIRST_LINE, DUMP\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java","additions":540,"deletions":146,"binary":false,"changes":686,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Iterator;\n@@ -70,0 +71,2 @@\n+        discardStdout = cmd.discardStdout;\n+        discardStderr = cmd.discardStderr;\n@@ -682,0 +685,12 @@\n+    public JPackageCommand discardStdout(boolean v) {\n+        verifyMutable();\n+        discardStdout = v;\n+        return this;\n+    }\n+\n+    public JPackageCommand discardStderr(boolean v) {\n+        verifyMutable();\n+        discardStderr = v;\n+        return this;\n+    }\n+\n@@ -709,1 +724,1 @@\n-    public JPackageCommand validateOutput(Consumer<Stream<String>> validator) {\n+    public JPackageCommand validateOutput(Consumer<Iterator<String>> validator) {\n@@ -751,1 +766,3 @@\n-                .reduce(TKit.TextStreamVerifier::andThen).ifPresent(this::validateOutput);\n+                .reduce(TKit.TextStreamVerifier.group(),\n+                        TKit.TextStreamVerifier.Group::add,\n+                        TKit.TextStreamVerifier.Group::add).tryCreate().ifPresent(this::validateOutput);\n@@ -773,0 +790,1 @@\n+                .discardStdout(discardStdout).discardStderr(discardStderr)\n@@ -834,1 +852,1 @@\n-            outputValidator.accept(result.getOutput().stream());\n+            outputValidator.accept(result.getOutput().iterator());\n@@ -1275,0 +1293,2 @@\n+    private boolean discardStdout;\n+    private boolean discardStderr;\n@@ -1285,1 +1305,1 @@\n-    private List<Consumer<Stream<String>>> outputValidators = new ArrayList<>();\n+    private List<Consumer<Iterator<String>>> outputValidators = new ArrayList<>();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-                .apply(Files.readAllLines(serviceUnitFile).stream());\n+                .apply(Files.readAllLines(serviceUnitFile));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-        .peek(str -> TKit.assertTextStream(\"=\").predicate(String::contains).apply(Stream.of(str)))\n+        .peek(str -> TKit.assertTextStream(\"=\").predicate(String::contains).apply(List.of(str)))\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n@@ -35,0 +34,1 @@\n+import java.io.BufferedInputStream;\n@@ -45,0 +45,1 @@\n+import java.security.cert.CertificateExpiredException;\n@@ -46,0 +47,1 @@\n+import java.security.cert.CertificateNotYetValidException;\n@@ -66,0 +68,1 @@\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n@@ -396,3 +399,17 @@\n-            final var in = new ByteArrayInputStream(\n-                    security(\"find-certificate\", \"-ap\", name).saveOutput().execute().getOutput().stream().collect(joining(\"\\n\")).getBytes(StandardCharsets.UTF_8));\n-            return toFunction(CERT_FACTORY::generateCertificates).apply(in).stream().map(X509Certificate.class::cast).toList();\n+            final List<X509Certificate> certs = new ArrayList<>();\n+            try (final var in = new BufferedInputStream(new ByteArrayInputStream(\n+                    security(\"find-certificate\", \"-ap\", name).executeAndGetOutput().stream().collect(joining(\"\\n\")).getBytes(StandardCharsets.UTF_8)))) {\n+                while (in.available() > 0) {\n+                    final X509Certificate cert;\n+                    try {\n+                        cert = (X509Certificate) CERT_FACTORY.generateCertificate(in);\n+                    } catch (Exception ex) {\n+                        TKit.trace(\"Failed to parse certificate data: \" + ex);\n+                        continue;\n+                    }\n+                    certs.add(cert);\n+                }\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+            return certs;\n@@ -403,2 +420,25 @@\n-            .addArguments(keychains.stream().map(Keychain::name).toList())\n-            .execute();\n+                    .addArguments(keychains.stream().map(Keychain::name).toList())\n+                    .execute();\n+        }\n+\n+        public static void withAddedKeychains(Collection<Keychain> keychains, Runnable runnable) {\n+            final var curKeychains = activeKeychainFiles();\n+            addToSearchList(keychains);\n+            try {\n+                runnable.run();\n+            } finally {\n+                security(\"list-keychains\", \"-d\", \"user\", \"-s\")\n+                        .addArguments(curKeychains.stream().map(Path::toString).toList())\n+                        .execute();\n+            }\n+        }\n+\n+        private static List<Path> activeKeychainFiles() {\n+            \/\/ $ security list-keychains\n+            \/\/     \"\/Users\/alexeysemenyuk\/Library\/Keychains\/login.keychain-db\"\n+            \/\/     \"\/Library\/Keychains\/System.keychain\"\n+            return security(\"list-keychains\", \"-d\", \"user\").executeAndGetOutput().stream().map(line -> {\n+                return line.stripLeading();\n+            }).filter(line -> {\n+                return line.charAt(0) == '\"' && line.charAt(line.length() - 1) == '\"';\n+            }).map(line -> line.substring(1, line.length() - 1)).map(Path::of).toList();\n@@ -412,1 +452,10 @@\n-    record ResolvedCertificateRequest(CertificateRequest request, X509Certificate cert, VerifyStatus verifyStatus) {\n+    private enum VerifyStatus {\n+        VERIFY_OK,\n+        VERIFY_EXPIRED,\n+        VERIFY_ERROR,\n+        VERIFY_UNTRUSTED,\n+        VERIFY_EXPIRED_UNTRUSTED,\n+        UNVERIFIED\n+    }\n+\n+    private record ResolvedCertificateRequest(InstalledCertificate installed, X509Certificate cert, VerifyStatus verifyStatus) {\n@@ -414,1 +463,1 @@\n-            Objects.requireNonNull(request);\n+            Objects.requireNonNull(installed);\n@@ -419,4 +468,6 @@\n-        enum VerifyStatus {\n-            VERIFY_OK,\n-            VERIFY_ERROR,\n-            UNVERIFIED\n+        CertificateRequest request() {\n+            if (!verified()) {\n+                throw new IllegalStateException();\n+            }\n+            return new CertificateRequest(installed.name(), installed.type(), installed.days(), installed.expired(),\n+                    Set.of(VerifyStatus.VERIFY_OK, VerifyStatus.VERIFY_EXPIRED).contains(verifyStatus));\n@@ -426,1 +477,1 @@\n-            this(new CertificateRequest(cert), cert, VerifyStatus.UNVERIFIED);\n+            this(new InstalledCertificate(cert), cert, VerifyStatus.UNVERIFIED);\n@@ -429,3 +480,9 @@\n-        ResolvedCertificateRequest copyVerified(boolean verifySuccess) {\n-            return new ResolvedCertificateRequest(request, cert,\n-                    verifySuccess ? VerifyStatus.VERIFY_OK : VerifyStatus.VERIFY_ERROR);\n+        ResolvedCertificateRequest copyVerified(VerifyStatus verifyStatus) {\n+            if (verifyStatus == VerifyStatus.UNVERIFIED) {\n+                throw new IllegalArgumentException();\n+            }\n+            return new ResolvedCertificateRequest(installed, cert, verifyStatus);\n+        }\n+\n+        private boolean verified() {\n+            return verifyStatus != VerifyStatus.UNVERIFIED;\n@@ -435,2 +492,2 @@\n-    record CertificateStats(List<ResolvedCertificateRequest> allResolvedCertificateRequests,\n-            List<X509Certificate> allCertificates, List<CertificateRequest> knownCertificateRequests,\n+    private record CertificateStats(List<ResolvedCertificateRequest> allResolvedCertificateRequests,\n+            List<CertificateRequest> knownCertificateRequests,\n@@ -439,1 +496,1 @@\n-        private static CertificateStats get(KeychainWithCertsSpec spec) {\n+        static CertificateStats get(KeychainWithCertsSpec spec) {\n@@ -445,1 +502,1 @@\n-                return allResolvedCertificateRequests.stream().filter(v -> {\n+                return allVerifiedResolvedCertificateRequest().filter(v -> {\n@@ -453,2 +510,2 @@\n-                return allResolvedCertificateRequests.stream().anyMatch(v -> {\n-                    return v.request().equals(certificateRequest) && v.verifyStatus() == ResolvedCertificateRequest.VerifyStatus.VERIFY_ERROR;\n+                return allVerifiedResolvedCertificateRequest().anyMatch(v -> {\n+                    return v.request().equals(certificateRequest) && v.verifyStatus() != certificateRequest.expectedVerifyStatus();\n@@ -461,1 +518,5 @@\n-                    allResolvedCertificateRequests.stream().map(ResolvedCertificateRequest::request).collect(toSet())).unique1();\n+                    allVerifiedResolvedCertificateRequest().map(ResolvedCertificateRequest::request).collect(toSet())).unique1();\n+        }\n+\n+        private Stream<ResolvedCertificateRequest> allVerifiedResolvedCertificateRequest() {\n+            return allResolvedCertificateRequests.stream().filter(ResolvedCertificateRequest::verified);\n@@ -485,1 +546,1 @@\n-                    if (spec.certificateRequests().contains(resolvedCertificateRequest.request)) {\n+                    if (spec.certificateRequests().stream().anyMatch(resolvedCertificateRequest.installed()::match)) {\n@@ -487,2 +548,2 @@\n-                        final var verifySuccess = verifyCertificate(resolvedCertificateRequest, spec.keychain(), certFile);\n-                        resolvedCertificateRequest = resolvedCertificateRequest.copyVerified(verifySuccess);\n+                        final var verifyStatus = verifyCertificate(resolvedCertificateRequest, spec.keychain(), certFile);\n+                        resolvedCertificateRequest = resolvedCertificateRequest.copyVerified(verifyStatus);\n@@ -495,1 +556,1 @@\n-            return new CertificateStats(allResolvedCertificateRequests, List.copyOf(allCertificates),\n+            return new CertificateStats(allResolvedCertificateRequests,\n@@ -502,1 +563,1 @@\n-    record PemData(String label, byte[] data) {\n+    private record PemData(String label, byte[] data) {\n@@ -535,1 +596,1 @@\n-        private final static Base64.Encoder ENCODER = Base64.getMimeEncoder(64, \"\\n\".getBytes());\n+        private static final Base64.Encoder ENCODER = Base64.getMimeEncoder(64, \"\\n\".getBytes());\n@@ -538,1 +599,14 @@\n-    public record CertificateHash(byte[] value) {\n+    public enum DigestAlgorithm {\n+        SHA1(20, () -> MessageDigest.getInstance(\"SHA-1\")),\n+        SHA256(32, () -> MessageDigest.getInstance(\"SHA-256\"));\n+\n+        DigestAlgorithm(int hashLength, ThrowingSupplier<MessageDigest> createDigest) {\n+            this.hashLength = hashLength;\n+            this.createDigest = createDigest;\n+        }\n+\n+        final int hashLength;\n+        final ThrowingSupplier<MessageDigest> createDigest;\n+    }\n+\n+    public record CertificateHash(byte[] value, DigestAlgorithm alg) {\n@@ -541,2 +615,3 @@\n-            if (value.length != 20) {\n-                throw new IllegalArgumentException(\"Invalid SHA-1 hash\");\n+            Objects.requireNonNull(alg);\n+            if (value.length != alg.hashLength) {\n+                throw new IllegalArgumentException(String.format(\"Invalid %s hash\", alg));\n@@ -547,0 +622,4 @@\n+            return of(cert, DigestAlgorithm.SHA1);\n+        }\n+\n+        public static CertificateHash of(X509Certificate cert, DigestAlgorithm alg) {\n@@ -548,1 +627,1 @@\n-                final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n+                final MessageDigest md = alg.createDigest.get();\n@@ -551,1 +630,1 @@\n-            }).get());\n+            }).get(), alg);\n@@ -604,1 +683,25 @@\n-    public record CertificateRequest(String name, CertificateType type, int days) implements Comparable<CertificateRequest>{\n+    public enum StandardCertificateNamePrefix {\n+        CODE_SIGND(\"Developer ID Application: \"),\n+        INSTALLER(\"Developer ID Installer: \");\n+\n+        StandardCertificateNamePrefix(String value) {\n+            this.value = Objects.requireNonNull(value);\n+        }\n+\n+        public String value() {\n+            return value;\n+        }\n+\n+        private final String value;\n+    }\n+\n+    public record NameWithPrefix(String prefix, String name) {\n+        public NameWithPrefix {\n+            Objects.requireNonNull(prefix);\n+            Objects.requireNonNull(name);\n+        }\n+    }\n+\n+    public record CertificateRequest(String name, CertificateType type, int days, boolean expired, boolean trusted)\n+            implements Comparable<CertificateRequest> {\n+\n@@ -608,0 +711,3 @@\n+            if (days <= 0) {\n+                throw new IllegalArgumentException();\n+            }\n@@ -610,2 +716,22 @@\n-        CertificateRequest(X509Certificate cert) {\n-            this(getSubjectCN(cert), getType(cert), getDurationInDays(cert));\n+        public String shortName() {\n+            return nameWithPrefix().map(NameWithPrefix::name).orElseThrow();\n+        }\n+\n+        public Optional<NameWithPrefix> nameWithPrefix() {\n+            return Stream.of(StandardCertificateNamePrefix.values()).map(StandardCertificateNamePrefix::value).filter(prefix -> {\n+                return name.startsWith(prefix);\n+            }).map(prefix -> {\n+                return new NameWithPrefix(prefix, name.substring(prefix.length()));\n+            }).findAny();\n+        }\n+\n+        VerifyStatus expectedVerifyStatus() {\n+            if (expired && !trusted) {\n+                return VerifyStatus.VERIFY_EXPIRED_UNTRUSTED;\n+            } else if (!trusted) {\n+                return VerifyStatus.VERIFY_UNTRUSTED;\n+            } else if (expired) {\n+                return VerifyStatus.VERIFY_EXPIRED;\n+            } else {\n+                return VerifyStatus.VERIFY_OK;\n+            }\n@@ -626,2 +752,2 @@\n-            public Builder commonName(String v) {\n-                commonName = v;\n+            public Builder subjectCommonName(String v) {\n+                subjectCommonName = v;\n@@ -641,0 +767,18 @@\n+            public Builder expired(boolean v) {\n+                expired = v;\n+                return this;\n+            }\n+\n+            public Builder expired() {\n+                return expired(true);\n+            }\n+\n+            public Builder trusted(boolean v) {\n+                trusted = v;\n+                return this;\n+            }\n+\n+            public Builder untrusted() {\n+                return trusted(false);\n+            }\n+\n@@ -642,1 +786,1 @@\n-                return new CertificateRequest(validatedCN(), type, days);\n+                return new CertificateRequest(validatedCN(), type, days, expired, trusted);\n@@ -650,1 +794,1 @@\n-                return Optional.ofNullable(commonName).orElseGet(() -> {\n+                return Optional.ofNullable(subjectCommonName).orElseGet(() -> {\n@@ -653,1 +797,1 @@\n-                            return \"Developer ID Application: \" + validatedUserName();\n+                            return StandardCertificateNamePrefix.CODE_SIGND.value() + validatedUserName();\n@@ -656,1 +800,1 @@\n-                            return \"Developer ID Installer: \" + validatedUserName();\n+                            return StandardCertificateNamePrefix.INSTALLER.value() + validatedUserName();\n@@ -666,1 +810,1 @@\n-            private String commonName; \/\/ CN\n+            private String subjectCommonName; \/\/ CN\n@@ -669,0 +813,32 @@\n+            private boolean expired;\n+            private boolean trusted = true;\n+        }\n+\n+        private static final Comparator<CertificateRequest> COMPARATOR =\n+                Comparator.comparing(CertificateRequest::name)\n+                .thenComparing(Comparator.comparing(CertificateRequest::type))\n+                .thenComparing(Comparator.comparingInt(CertificateRequest::days))\n+                .thenComparing(Comparator.comparing(CertificateRequest::expired, Boolean::compare))\n+                .thenComparing(Comparator.comparing(CertificateRequest::trusted, Boolean::compare));\n+    }\n+\n+    private record InstalledCertificate(String name, CertificateType type, int days, boolean expired) implements Comparable<InstalledCertificate> {\n+        InstalledCertificate {\n+            Objects.requireNonNull(name);\n+            Objects.requireNonNull(type);\n+            if (days <= 0) {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        InstalledCertificate(X509Certificate cert) {\n+            this(getSubjectCN(cert), getType(cert), getDurationInDays(cert), getExpired(cert));\n+        }\n+\n+        boolean match(CertificateRequest request) {\n+            return name.equals(request.name()) && type.equals(request.type()) && days == request.days() && expired == request.expired();\n+        }\n+\n+        @Override\n+        public int compareTo(InstalledCertificate o) {\n+            return COMPARATOR.compare(this, o);\n@@ -700,1 +876,1 @@\n-            return (int)TimeUnit.DAYS.convert(notAfter.getTime() - notBefore.getTime(), TimeUnit.MILLISECONDS);\n+            return (int) TimeUnit.DAYS.convert(notAfter.getTime() - notBefore.getTime(), TimeUnit.MILLISECONDS);\n@@ -703,4 +879,14 @@\n-        private static final Comparator<CertificateRequest> COMPARATOR =\n-                Comparator.comparing(CertificateRequest::name)\n-                .thenComparing(Comparator.comparing(CertificateRequest::type))\n-                .thenComparing(Comparator.comparingInt(CertificateRequest::days));\n+        private static boolean getExpired(X509Certificate cert) {\n+            try {\n+                cert.checkValidity();\n+                return false;\n+            } catch (CertificateExpiredException | CertificateNotYetValidException ex) {\n+                return true;\n+            }\n+        }\n+\n+        private static final Comparator<InstalledCertificate> COMPARATOR =\n+                Comparator.comparing(InstalledCertificate::name)\n+                .thenComparing(Comparator.comparing(InstalledCertificate::type))\n+                .thenComparing(Comparator.comparingInt(InstalledCertificate::days))\n+                .thenComparing(Comparator.comparing(InstalledCertificate::expired, Boolean::compare));\n@@ -718,2 +904,4 @@\n-     * The user will be prompted to enter the user login password as\n-     * many times as the number of unique certificates this function will create.\n+     * The user will be prompted to enter the user login password as many times as\n+     * the number of unique certificates this function will create.\n+     * <p>\n+     * Created keychains will NOT be added to the keychain search list.\n@@ -770,1 +958,3 @@\n-                trustConfig.put(certPemFile.getValue(), keychains.getFirst());\n+                if (certPemFile.getKey().trusted()) {\n+                    trustConfig.put(certPemFile.getValue(), keychains.getFirst());\n+                }\n@@ -776,2 +966,0 @@\n-\n-        Keychain.addToSearchList(specs.stream().map(KeychainWithCertsSpec::keychain).toList());\n@@ -823,1 +1011,1 @@\n-                    .sorted(Comparator.comparing(ResolvedCertificateRequest::request)).toList();\n+                    .sorted(Comparator.comparing(ResolvedCertificateRequest::installed)).toList();\n@@ -827,1 +1015,1 @@\n-                        resolvedCertificateRequest.request(),\n+                        resolvedCertificateRequest.installed(),\n@@ -852,1 +1040,25 @@\n-    public static Map<CertificateRequest, X509Certificate> mapCertificateRequests(KeychainWithCertsSpec spec) {\n+    public final static class ResolvedKeychain {\n+        public ResolvedKeychain(KeychainWithCertsSpec spec) {\n+            this.spec = Objects.requireNonNull(spec);\n+        }\n+\n+        public KeychainWithCertsSpec spec() {\n+            return spec;\n+        }\n+\n+        public Map<CertificateRequest, X509Certificate> mapCertificateRequests() {\n+            if (certMap == null) {\n+                synchronized (this) {\n+                    if (certMap == null) {\n+                        certMap = MacSign.mapCertificateRequests(spec);\n+                    }\n+                }\n+            }\n+            return certMap;\n+        }\n+\n+        private final KeychainWithCertsSpec spec;\n+        private volatile Map<CertificateRequest, X509Certificate> certMap;\n+    }\n+\n+    private static Map<CertificateRequest, X509Certificate> mapCertificateRequests(KeychainWithCertsSpec spec) {\n@@ -879,1 +1091,1 @@\n-    private static boolean verifyCertificate(ResolvedCertificateRequest resolvedCertificateRequest, Keychain keychain, Path certFile) {\n+    private static VerifyStatus verifyCertificate(ResolvedCertificateRequest resolvedCertificateRequest, Keychain keychain, Path certFile) {\n@@ -881,2 +1093,4 @@\n-        for (final var mode : List.of(\"-q\", \"-v\")) {\n-            final var ok = security(\"verify-cert\", \"-L\", \"-n\", mode,\n+        Executor.Result result = null;\n+        for (final var quite : List.of(true, false)) {\n+            result = security(\"verify-cert\", \"-L\", \"-n\",\n+                    quite ? \"-q\" : \"-v\",\n@@ -885,3 +1099,3 @@\n-                    \"-p\", resolvedCertificateRequest.request().type().verifyPolicy()).executeWithoutExitCodeCheck().getExitCode() == 0;\n-            if (ok) {\n-                return true;\n+                    \"-p\", resolvedCertificateRequest.installed().type().verifyPolicy()).saveOutput(!quite).executeWithoutExitCodeCheck();\n+            if (result.exitCode() == 0) {\n+                return VerifyStatus.VERIFY_OK;\n@@ -890,1 +1104,20 @@\n-        return false;\n+\n+        final var expired = result.getOutput().stream().anyMatch(line -> {\n+            \/\/ Look up for \"Certificate has expired, or is not yet valid (check date) [TemporalValidity]\" string\n+            return line.contains(\"    Certificate has expired, or is not yet valid (check date) [TemporalValidity]\");\n+        });\n+\n+        final var untrusted = result.getOutput().stream().anyMatch(line -> {\n+            \/\/ Look up for \"The root of the certificate chain is not trusted [AnchorTrusted]\" string\n+            return line.contains(\"    The root of the certificate chain is not trusted [AnchorTrusted]\");\n+        });\n+\n+        if (expired && untrusted) {\n+            return VerifyStatus.VERIFY_EXPIRED_UNTRUSTED;\n+        } else if (untrusted) {\n+            return VerifyStatus.VERIFY_UNTRUSTED;\n+        } else if (expired) {\n+            return VerifyStatus.VERIFY_EXPIRED;\n+        } else {\n+            return VerifyStatus.VERIFY_ERROR;\n+        }\n@@ -971,1 +1204,9 @@\n-                        final var openssl = Executor.of(OPENSSL.toString(), \"req\",\n+                        final Executor openssl;\n+                        if (certificateRequest.expired()) {\n+                            final var format = String.format(\"-%dd\", certificateRequest.days + 1);\n+                            openssl = Executor.of(FAKETIME.toString(), \"-f\", format, OPENSSL.toString());\n+                        } else {\n+                            openssl = Executor.of(OPENSSL.toString());\n+                        }\n+\n+                        openssl.addArguments(\"req\",\n@@ -1043,0 +1284,4 @@\n+\n+    \/\/ faketime is not a standard macOS command.\n+    \/\/ One way to get it is with Homebrew.\n+    private static final Path FAKETIME = Path.of(Optional.ofNullable(TKit.getConfigProperty(\"faketime\")).orElse(\"faketime\"));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSign.java","additions":310,"deletions":65,"binary":false,"changes":375,"status":"modified"},{"patch":"@@ -0,0 +1,229 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+import static jdk.jpackage.test.MacSign.DigestAlgorithm.SHA256;\n+\n+import java.nio.file.Path;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.HexFormat;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import jdk.jpackage.internal.util.PListReader;\n+import jdk.jpackage.test.MacSign.CertificateHash;\n+import jdk.jpackage.test.MacSign.CertificateRequest;\n+\n+\/**\n+ * Utilities to verify sign signatures.\n+ *\/\n+public final class MacSignVerify {\n+\n+    public static void assertSigned(Path path, CertificateRequest certRequest) {\n+        assertSigned(path);\n+        TKit.assertEquals(certRequest.name(), findCodesignSignOrigin(path).orElse(null),\n+                String.format(\"Check [%s] signed with certificate\", path));\n+    }\n+\n+    public static void assertAdhocSigned(Path path) {\n+        assertSigned(path);\n+        TKit.assertEquals(ADHOC_SIGN_ORIGIN, findCodesignSignOrigin(path).orElse(null),\n+                String.format(\"Check [%s] signed with adhoc signature\", path));\n+    }\n+\n+    public static void assertUnsigned(Path path) {\n+        TKit.assertTrue(findSpctlSignOrigin(SpctlType.EXEC, path).isEmpty(),\n+                String.format(\"Check [%s] unsigned\", path));\n+    }\n+\n+    public static void assertPkgSigned(Path path, CertificateRequest certRequest, X509Certificate cert) {\n+        final var expectedCertChain = List.of(new SignIdentity(certRequest.name(), CertificateHash.of(cert, SHA256)));\n+        final var actualCertChain = getPkgCertificateChain(path);\n+        TKit.assertStringListEquals(\n+                expectedCertChain.stream().map(SignIdentity::toString).toList(),\n+                actualCertChain.stream().map(SignIdentity::toString).toList(),\n+                String.format(\"Check certificate chain of [%s] is as expected\", path));\n+        TKit.assertEquals(certRequest.name(), findSpctlSignOrigin(SpctlType.INSTALL, path).orElse(null),\n+                String.format(\"Check [%s] signed for installation\", path));\n+    }\n+\n+    public enum SpctlType {\n+        EXEC(\"exec\"), INSTALL(\"install\");\n+\n+        SpctlType(String value) {\n+            this.value = Objects.requireNonNull(value);\n+        }\n+\n+        public String value() {\n+            return value;\n+        }\n+\n+        final private String value;\n+    }\n+\n+    public static final String ADHOC_SIGN_ORIGIN = \"-\";\n+\n+    public static Optional<String> findSpctlSignOrigin(SpctlType type, Path path) {\n+        final var exec = Executor.of(\"\/usr\/sbin\/spctl\", \"-vv\", \"--raw\", \"--assess\", \"--type\", type.value(), path.toString()).saveOutput().discardStderr();\n+        final var result = exec.executeWithoutExitCodeCheck();\n+        TKit.assertTrue(Set.of(0, 3).contains(result.exitCode()),\n+                String.format(\"Check exit code of command %s is either 0 or 3\", exec.getPrintableCommandLine()));\n+        return toSupplier(() -> {\n+            try {\n+                return Optional.of(new PListReader(String.join(\"\", result.getOutput()).getBytes()).queryValue(\"assessment:originator\"));\n+            } catch (NoSuchElementException ex) {\n+                return Optional.<String>empty();\n+            }\n+        }).get();\n+    }\n+\n+    public static Optional<String> findCodesignSignOrigin(Path path) {\n+        final var exec = Executor.of(\"\/usr\/bin\/codesign\", \"--display\", \"--verbose=4\", path.toString()).saveOutput();\n+        final var result = exec.executeWithoutExitCodeCheck();\n+        if (result.getExitCode() == 0) {\n+            return Optional.of(result.getOutput().stream().map(line -> {\n+                if (line.equals(\"Signature=adhoc\")) {\n+                    return ADHOC_SIGN_ORIGIN;\n+                } else if (line.startsWith(\"Authority=\")) {\n+                    return line.substring(\"Authority=\".length());\n+                } else {\n+                    return null;\n+                }\n+            }).filter(Objects::nonNull).reduce((x, y) -> {\n+                throw new UnsupportedOperationException(String.format(\n+                        \"Both adhoc [%s] and certificate [%s] signatures found in codesign output\", x, y));\n+            }).orElseThrow(() -> {\n+                final var msg = \"Neither adhoc nor certificate signatures found in codesign output\";\n+                TKit.trace(msg + \":\");\n+                result.getOutput().forEach(TKit::trace);\n+                TKit.trace(\"Done\");\n+                return new UnsupportedOperationException(msg);\n+            }));\n+        } else if (result.getExitCode() == 1 && result.getFirstLineOfOutput().endsWith(\"code object is not signed at all\")) {\n+            return Optional.empty();\n+        } else {\n+            reportUnexpectedCommandOutcome(exec.getPrintableCommandLine(), result);\n+            return null; \/\/ Unreachable\n+        }\n+    }\n+\n+    public static void assertSigned(Path path) {\n+        final var verifier = TKit.TextStreamVerifier.group()\n+                .add(TKit.assertTextStream(\": valid on disk\").predicate(String::endsWith))\n+                .add(TKit.assertTextStream(\": satisfies its Designated Requirement\").predicate(String::endsWith))\n+                .create();\n+        verifier.accept(Executor.of(\"\/usr\/bin\/codesign\", \"--verify\", \"--deep\",\n+                \"--strict\", \"--verbose=2\", path.toString()).executeAndGetOutput().iterator());\n+    }\n+\n+    public static List<SignIdentity> getPkgCertificateChain(Path path) {\n+        \/\/\n+        \/\/ Typical output of `\/usr\/sbin\/pkgutil --check-signature`:\n+        \/\/ Package \"foo.pkg\":\n+        \/\/    Status: signed by a developer certificate issued by Apple for distribution\n+        \/\/    Notarization: trusted by the Apple notary service\n+        \/\/    Signed with a trusted timestamp on: 2022-05-10 19:54:56 +0000\n+        \/\/    Certificate Chain:\n+        \/\/      1. Developer ID Installer: Foo\n+        \/\/         SHA256 Fingerprint:\n+        \/\/             4A A9 4A 85 20 2A DE 02 B2 9B 36 DA 45 00 B4 40 CF 31 43 4E 96 02\n+        \/\/             60 6A 6D BC 02 F4 5D 3A 86 4A\n+        \/\/         ------------------------------------------------------------------------\n+        \/\/      2. Developer ID Certification Authority\n+        \/\/         Expires: 2027-02-01 22:12:15 +0000\n+        \/\/         SHA256 Fingerprint:\n+        \/\/             7A FC 9D 01 A6 2F 03 A2 DE 96 37 93 6D 4A FE 68 09 0D 2D E1 8D 03\n+        \/\/             F2 9C 88 CF B0 B1 BA 63 58 7F\n+        \/\/         ------------------------------------------------------------------------\n+        \/\/      3. Apple Root CA\n+        \/\/         Expires: 2035-02-09 21:40:36 +0000\n+        \/\/         SHA256 Fingerprint:\n+        \/\/             B0 B1 73 0E CB C7 FF 45 05 14 2C 49 F1 29 5E 6E DA 6B CA ED 7E 2C\n+        \/\/             68 C5 BE 91 B5 A1 10 01 F0 24\n+        final var exec = Executor.of(\"\/usr\/sbin\/pkgutil\", \"--check-signature\", path.toString()).saveOutput();\n+        final var result = exec.executeWithoutExitCodeCheck();\n+        if (result.getExitCode() == 0) {\n+            try {\n+                final List<SignIdentity> signIdentities = new ArrayList<>();\n+                final var lineIt = result.getOutput().iterator();\n+                while (!lineIt.next().endsWith(\"Certificate Chain:\")) {\n+\n+                }\n+                do {\n+                    final var m = SIGN_IDENTITY_NAME_REGEXP.matcher(lineIt.next());\n+                    m.find();\n+                    final var name = m.group(1);\n+                    while (!lineIt.next().endsWith(\"SHA256 Fingerprint:\")) {\n+\n+                    }\n+                    final var digest = new StringBuilder();\n+                    do {\n+                        final var line = lineIt.next().strip();\n+                        if (line.endsWith(\"----\") || line.isEmpty()) {\n+                            break;\n+                        }\n+                        digest.append(\" \" + line.strip());\n+                    } while (lineIt.hasNext());\n+                    final var fingerprint = new CertificateHash(\n+                            FINGERPRINT_FORMAT.parseHex(digest.substring(1)), SHA256);\n+                    signIdentities.add(new SignIdentity(name, fingerprint));\n+                } while (lineIt.hasNext());\n+                return signIdentities;\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+                reportUnexpectedCommandOutcome(exec.getPrintableCommandLine(), result);\n+                return null; \/\/ Unreachable\n+            }\n+        } else if (result.getExitCode() == 1 && result.getOutput().getLast().endsWith(\"Status: no signature\")) {\n+            return List.of();\n+        } else {\n+            reportUnexpectedCommandOutcome(exec.getPrintableCommandLine(), result);\n+            return null; \/\/ Unreachable\n+        }\n+    }\n+\n+    public record SignIdentity(String name, CertificateHash fingerprint) {\n+        public SignIdentity {\n+            Objects.requireNonNull(name);\n+            Objects.requireNonNull(fingerprint);\n+        }\n+    }\n+\n+    private static void reportUnexpectedCommandOutcome(String printableCommandLine, Executor.Result result) {\n+        Objects.requireNonNull(printableCommandLine);\n+        Objects.requireNonNull(result);\n+        TKit.trace(String.format(\"Command %s exited with exit code %d and the following output:\",\n+                printableCommandLine, result.getExitCode()));\n+        result.getOutput().forEach(TKit::trace);\n+        TKit.trace(\"Done\");\n+        TKit.assertUnexpected(String.format(\"Outcome of command %s\", printableCommandLine));\n+    }\n+\n+    private static final Pattern SIGN_IDENTITY_NAME_REGEXP = Pattern.compile(\"^\\\\s+\\\\d+\\\\.\\\\s+(.*)$\");\n+    private static final HexFormat FINGERPRINT_FORMAT = HexFormat.ofDelimiter(\" \").withUpperCase();\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSignVerify.java","additions":229,"deletions":0,"binary":false,"changes":229,"status":"added"},{"patch":"@@ -972,1 +972,1 @@\n-            this.value = value;\n+            this.value = Objects.requireNonNull(value);\n@@ -976,0 +976,9 @@\n+        TextStreamVerifier(TextStreamVerifier other) {\n+            predicate = other.predicate;\n+            label = other.label;\n+            negate = other.negate;\n+            createException = other.createException;\n+            anotherVerifier = other.anotherVerifier;\n+            value = other.value;\n+        }\n+\n@@ -982,1 +991,1 @@\n-            predicate = v;\n+            predicate = Objects.requireNonNull(v);\n@@ -991,10 +1000,0 @@\n-        public TextStreamVerifier andThen(Consumer<? super Stream<String>> anotherVerifier) {\n-            this.anotherVerifier = anotherVerifier;\n-            return this;\n-        }\n-\n-        public TextStreamVerifier andThen(TextStreamVerifier anotherVerifier) {\n-            this.anotherVerifier = anotherVerifier::apply;\n-            return this;\n-        }\n-\n@@ -1002,0 +1001,1 @@\n+            Objects.requireNonNull(v);\n@@ -1010,12 +1010,5 @@\n-        public void apply(Stream<String> lines) {\n-            final String matchedStr;\n-\n-            lines = lines.dropWhile(line -> !predicate.test(line, value));\n-            if (anotherVerifier == null) {\n-                matchedStr = lines.findFirst().orElse(null);\n-            } else {\n-                var tail = lines.toList();\n-                if (tail.isEmpty()) {\n-                    matchedStr = null;\n-                } else {\n-                    matchedStr = tail.get(0);\n+        private String findMatch(Iterator<String> lineIt) {\n+            while (lineIt.hasNext()) {\n+                final var line = lineIt.next();\n+                if (predicate.test(line, value)) {\n+                    return line;\n@@ -1023,1 +1016,0 @@\n-                lines = tail.stream().skip(1);\n@@ -1025,0 +1017,6 @@\n+            return null;\n+        }\n+\n+        public void apply(List<String> lines) {\n+            apply(lines.iterator());\n+        }\n@@ -1026,0 +1024,2 @@\n+        public void apply(Iterator<String> lineIt) {\n+            final String matchedStr = findMatch(lineIt);\n@@ -1052,1 +1052,32 @@\n-                anotherVerifier.accept(lines);\n+                anotherVerifier.accept(lineIt);\n+            }\n+        }\n+\n+        public static TextStreamVerifier.Group group() {\n+            return new TextStreamVerifier.Group();\n+        }\n+\n+        public static final class Group {\n+            public Group add(TextStreamVerifier verifier) {\n+                if (verifier.anotherVerifier != null) {\n+                    throw new IllegalArgumentException();\n+                }\n+                verifiers.add(verifier);\n+                return this;\n+            }\n+\n+            public Group add(Group other) {\n+                verifiers.addAll(other.verifiers);\n+                return this;\n+            }\n+\n+            public boolean isEmpty() {\n+                return verifiers.isEmpty();\n+            }\n+\n+            public Optional<Consumer<Iterator<String>>> tryCreate() {\n+                if (isEmpty()) {\n+                    return Optional.empty();\n+                } else {\n+                    return Optional.of(create());\n+                }\n@@ -1054,0 +1085,21 @@\n+\n+            public Consumer<Iterator<String>> create() {\n+                if (verifiers.isEmpty()) {\n+                    throw new IllegalStateException();\n+                }\n+\n+                if (verifiers.size() == 1) {\n+                    return verifiers.getFirst()::apply;\n+                }\n+\n+                final var head = new TextStreamVerifier(verifiers.getFirst());\n+                var prev = head;\n+                for (var verifier : verifiers.subList(1, verifiers.size())) {\n+                    verifier = new TextStreamVerifier(verifier);\n+                    prev.anotherVerifier = verifier::apply;\n+                    prev = verifier;\n+                }\n+                return head::apply;\n+            }\n+\n+            private final List<TextStreamVerifier> verifiers = new ArrayList<>();\n@@ -1060,1 +1112,1 @@\n-        private Consumer<? super Stream<String>> anotherVerifier;\n+        private Consumer<? super Iterator<String>> anotherVerifier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":79,"deletions":27,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-        List<String> output = Executor.of(\"wmic\", \"process\", \"where\", \"(name\",\n+        final var result = Executor.of(\"wmic\", \"process\", \"where\", \"(name\",\n@@ -330,2 +330,2 @@\n-                setWinRunWithEnglishOutput(true).executeAndGetOutput();\n-        if (\"No Instance(s) Available.\".equals(output.getFirst().trim())) {\n+                setWinRunWithEnglishOutput(true).execute();\n+        if (\"No Instance(s) Available.\".equals(result.stderr().findFirstLineOfOutput().map(String::trim).orElse(\"\"))) {\n@@ -335,1 +335,2 @@\n-        String[] headers = Stream.of(output.getFirst().split(\"\\\\s+\", 2)).map(\n+        final var stdout = result.stdout();\n+        String[] headers = Stream.of(stdout.getFirstLineOfOutput().split(\"\\\\s+\", 2)).map(\n@@ -337,1 +338,1 @@\n-        Pattern pattern;\n+        final Pattern pattern;\n@@ -349,1 +350,1 @@\n-        List<long[]> processes = output.stream().skip(1).map(line -> {\n+        List<long[]> processes = stdout.getOutput().stream().skip(1).map(line -> {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-                    .apply(Files.readAllLines(desktopFile).stream());\n+                    .apply(Files.readAllLines(desktopFile));\n","filename":"test\/jdk\/tools\/jpackage\/linux\/ShortcutHintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Collection;\n@@ -28,0 +29,6 @@\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -33,0 +40,4 @@\n+import jdk.jpackage.test.MacSign;\n+import jdk.jpackage.test.MacSign.CertificateRequest;\n+import jdk.jpackage.test.MacSignVerify;\n+import jdk.jpackage.test.PackageType;\n@@ -67,15 +78,162 @@\n-        \/\/ --app-content and --type app-image\n-        \/\/ Expect `message.codesign.failed.reason.app.content` message in the log.\n-        \/\/ This is not a fatal error, just a warning.\n-        \/\/ To make jpackage fail, specify bad additional content.\n-        final var cmd = JPackageCommand.helloAppImage()\n-                .ignoreDefaultVerbose(true)\n-                .validateOutput(expectedStrings.toArray(CannedFormattedString[]::new))\n-                .addArguments(\"--app-content\", appContent)\n-                .addArguments(\"--mac-sign\")\n-                .addArguments(\"--mac-signing-keychain\", SigningBase.StandardKeychain.MAIN.spec().keychain().name())\n-                .addArguments(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.APP_IMAGE.spec().name());\n-\n-        if (MacHelper.isXcodeDevToolsInstalled()) {\n-            \/\/ Check there is no warning about missing xcode command line developer tools.\n-            cmd.validateOutput(TKit.assertTextStream(xcodeWarning.getValue()).negate());\n+        final var keychain = SigningBase.StandardKeychain.EXPIRED.spec().keychain();\n+\n+        MacSign.Keychain.withAddedKeychains(List.of(keychain), () -> {\n+            \/\/ --app-content and --type app-image\n+            \/\/ Expect `message.codesign.failed.reason.app.content` message in the log.\n+            \/\/ This is not a fatal error, just a warning.\n+            \/\/ To make jpackage fail, specify bad additional content.\n+            final var cmd = JPackageCommand.helloAppImage()\n+                    .ignoreDefaultVerbose(true)\n+                    .validateOutput(expectedStrings.toArray(CannedFormattedString[]::new))\n+                    .addArguments(\"--app-content\", appContent)\n+                    .addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-keychain\", keychain.name())\n+                    .addArguments(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.CODESIGN.spec().name());\n+\n+            if (MacHelper.isXcodeDevToolsInstalled()) {\n+                \/\/ Check there is no warning about missing xcode command line developer tools.\n+                cmd.validateOutput(TKit.assertTextStream(xcodeWarning.getValue()).negate());\n+            }\n+\n+            cmd.execute(1);\n+        });\n+    }\n+\n+    @Test\n+    @Parameter({\"IMAGE\", \"EXPIRED_SIGNING_KEY_USER_NAME\"})\n+    @Parameter({\"MAC_DMG\", \"EXPIRED_SIGNING_KEY_USER_NAME\"})\n+    @Parameter({\"MAC_PKG\", \"EXPIRED_SIGNING_KEY_USER_NAME\", \"EXPIRED_SIGNING_KEY_USER_NAME_PKG\"})\n+\n+    @Parameter({\"IMAGE\", \"EXPIRED_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_DMG\", \"EXPIRED_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_PKG\", \"EXPIRED_SIGN_IDENTITY\"})\n+\n+    @Parameter({\"IMAGE\", \"EXPIRED_CODESIGN_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_DMG\", \"EXPIRED_CODESIGN_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_PKG\", \"EXPIRED_CODESIGN_SIGN_IDENTITY\"})\n+\n+    @Parameter({\"MAC_PKG\", \"GOOD_CODESIGN_SIGN_IDENTITY\", \"EXPIRED_PKG_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_PKG\", \"EXPIRED_CODESIGN_SIGN_IDENTITY\", \"GOOD_PKG_SIGN_IDENTITY\"})\n+    public static void testExpiredCertificate(PackageType type, SignOption... options) {\n+\n+        final var keychain = SigningBase.StandardKeychain.EXPIRED.spec().keychain();\n+\n+        MacSign.Keychain.withAddedKeychains(List.of(keychain), () -> {\n+            final var cmd = JPackageCommand.helloAppImage()\n+                    .ignoreDefaultVerbose(true)\n+                    .addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-keychain\", keychain.name())\n+                    .addArguments(Stream.of(options).map(SignOption::args).flatMap(List::stream).toList())\n+                    .setPackageType(type);\n+\n+            SignOption.configureOutputValidation(cmd, Stream.of(options).filter(SignOption::expired).toList(), opt -> {\n+                return JPackageStringBundle.MAIN.cannedFormattedString(\"error.certificate.expired\", opt.identityName());\n+            }).execute(1);\n+        });\n+    }\n+\n+    @Test\n+    @Parameter({\"IMAGE\", \"GOOD_SIGNING_KEY_USER_NAME\"})\n+    @Parameter({\"MAC_DMG\", \"GOOD_SIGNING_KEY_USER_NAME\"})\n+    @Parameter({\"MAC_PKG\", \"GOOD_SIGNING_KEY_USER_NAME_PKG\", \"GOOD_SIGNING_KEY_USER_NAME\"})\n+\n+    @Parameter({\"IMAGE\", \"GOOD_CODESIGN_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_PKG\", \"GOOD_CODESIGN_SIGN_IDENTITY\", \"GOOD_PKG_SIGN_IDENTITY\"})\n+    @Parameter({\"MAC_PKG\", \"GOOD_PKG_SIGN_IDENTITY\"})\n+    public static void testMultipleCertificates(PackageType type, SignOption... options) {\n+\n+        final var keychain = SigningBase.StandardKeychain.DUPLICATE.spec().keychain();\n+\n+        MacSign.Keychain.withAddedKeychains(List.of(keychain), () -> {\n+            final var cmd = JPackageCommand.helloAppImage()\n+                    .ignoreDefaultVerbose(true)\n+                    .addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-keychain\", keychain.name())\n+                    .addArguments(Stream.of(options).map(SignOption::args).flatMap(List::stream).toList())\n+                    .setPackageType(type);\n+\n+            SignOption.configureOutputValidation(cmd, List.of(options), opt -> {\n+                return JPackageStringBundle.MAIN.cannedFormattedString(\"error.multiple.certs.found\", opt.identityName(), keychain.name());\n+            }).execute(1);\n+        });\n+    }\n+\n+    @Test\n+    @ParameterSupplier\n+    public static void testSelectSigningIdentity(String signingKeyUserName, CertificateRequest certRequest) {\n+\n+        final var keychain = SigningBase.StandardKeychain.MAIN.spec().keychain();\n+\n+        MacSign.Keychain.withAddedKeychains(List.of(keychain), () -> {\n+            final var cmd = JPackageCommand.helloAppImage()\n+                    .setFakeRuntime()\n+                    .addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-keychain\", keychain.name())\n+                    .addArguments(\"--mac-signing-key-user-name\", signingKeyUserName);\n+\n+            cmd.executeAndAssertHelloAppImageCreated();\n+\n+            MacSignVerify.assertSigned(cmd.outputBundle(), certRequest);\n+        });\n+    }\n+\n+    public static Collection<Object[]> testSelectSigningIdentity() {\n+        return Stream.of(\n+                SigningBase.StandardCertificateRequest.CODESIGN,\n+                SigningBase.StandardCertificateRequest.CODESIGN_UNICODE\n+        ).map(SigningBase.StandardCertificateRequest::spec).<Object[]>mapMulti((certRequest, acc) -> {\n+            acc.accept(new Object[] {certRequest.shortName(), certRequest});\n+            acc.accept(new Object[] {certRequest.name(), certRequest});\n+        }).toList();\n+    }\n+\n+    enum SignOption {\n+        EXPIRED_SIGNING_KEY_USER_NAME(\"--mac-signing-key-user-name\", SigningBase.StandardCertificateRequest.CODESIGN_EXPIRED.spec(), true, false),\n+        EXPIRED_SIGNING_KEY_USER_NAME_PKG(\"--mac-signing-key-user-name\", SigningBase.StandardCertificateRequest.PKG_EXPIRED.spec(), true, false),\n+        EXPIRED_SIGN_IDENTITY(\"--mac-signing-key-user-name\", SigningBase.StandardCertificateRequest.CODESIGN_EXPIRED.spec(), false, false),\n+        EXPIRED_CODESIGN_SIGN_IDENTITY(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.CODESIGN_EXPIRED.spec(), false, true),\n+        EXPIRED_PKG_SIGN_IDENTITY(\"--mac-installer-sign-identity\", SigningBase.StandardCertificateRequest.PKG_EXPIRED.spec(), false, true),\n+        GOOD_SIGNING_KEY_USER_NAME(\"--mac-signing-key-user-name\", SigningBase.StandardCertificateRequest.CODESIGN.spec(), true, false),\n+        GOOD_SIGNING_KEY_USER_NAME_PKG(\"--mac-signing-key-user-name\", SigningBase.StandardCertificateRequest.PKG.spec(), true, false),\n+        GOOD_CODESIGN_SIGN_IDENTITY(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.CODESIGN.spec(), false, true),\n+        GOOD_PKG_SIGN_IDENTITY(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.PKG.spec(), false, true);\n+\n+        SignOption(String option, MacSign.CertificateRequest cert, boolean shortName, boolean passThrough) {\n+            this.option = Objects.requireNonNull(option);\n+            this.cert = Objects.requireNonNull(cert);\n+            this.shortName = shortName;\n+            this.passThrough = passThrough;\n+        }\n+\n+        boolean passThrough() {\n+            return passThrough;\n+        }\n+\n+        boolean expired() {\n+            return cert.expired();\n+        }\n+\n+        String identityName() {\n+            return cert.name();\n+        }\n+\n+        List<String> args() {\n+            return List.of(option, shortName ? cert.shortName() : cert.name());\n+        }\n+\n+        static JPackageCommand configureOutputValidation(JPackageCommand cmd, List<SignOption> options,\n+                Function<SignOption, CannedFormattedString> conv) {\n+            options.stream().filter(SignOption::passThrough)\n+                    .map(conv)\n+                    .map(CannedFormattedString::getValue)\n+                    .map(TKit::assertTextStream)\n+                    .map(TKit.TextStreamVerifier::negate)\n+                    .forEach(cmd::validateOutput);\n+\n+            options.stream().filter(Predicate.not(SignOption::passThrough))\n+                    .map(conv)\n+                    .map(CannedFormattedString::getValue)\n+                    .map(TKit::assertTextStream)\n+                    .forEach(cmd::validateOutput);\n+\n+            return cmd;\n@@ -84,1 +242,4 @@\n-        cmd.execute(1);\n+        private final String option;\n+        private final MacSign.CertificateRequest cert;\n+        private final boolean shortName;\n+        private final boolean passThrough;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacSignTest.java","additions":177,"deletions":16,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.security.cert.X509Certificate;\n@@ -27,0 +28,1 @@\n+import java.util.Objects;\n@@ -28,2 +30,0 @@\n-import jdk.jpackage.test.Executor;\n-import jdk.jpackage.test.Executor.Result;\n@@ -32,1 +32,0 @@\n-import jdk.jpackage.test.MacSign.CertificateType;\n@@ -34,0 +33,1 @@\n+import jdk.jpackage.test.MacSign.CertificateType;\n@@ -35,0 +35,2 @@\n+import jdk.jpackage.test.MacSign.ResolvedKeychain;\n+import jdk.jpackage.test.MacSignVerify;\n@@ -67,4 +69,8 @@\n-        APP_IMAGE(cert().userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n-        INSTALLER(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n-        APP_IMAGE_UNICODE(cert().userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()])),\n-        INSTALLER_UNICODE(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()]));\n+        CODESIGN(cert().userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        CODESIGN_COPY(cert().days(100).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        PKG(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        PKG_COPY(cert().type(CertificateType.INSTALLER).days(100).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        CODESIGN_UNICODE(cert().userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()])),\n+        PKG_UNICODE(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()])),\n+        CODESIGN_EXPIRED(cert().expired().userName(\"expired jpackage test\")),\n+        PKG_EXPIRED(cert().expired().type(CertificateType.INSTALLER).userName(\"expired jpackage test\"));\n@@ -88,1 +94,15 @@\n-        MAIN(DEFAULT_KEYCHAIN, StandardCertificateRequest.values());\n+        MAIN(DEFAULT_KEYCHAIN,\n+                StandardCertificateRequest.CODESIGN,\n+                StandardCertificateRequest.PKG,\n+                StandardCertificateRequest.CODESIGN_UNICODE,\n+                StandardCertificateRequest.PKG_UNICODE),\n+        EXPIRED(\"jpackagerTest-expired.keychain\",\n+                StandardCertificateRequest.CODESIGN,\n+                StandardCertificateRequest.PKG,\n+                StandardCertificateRequest.CODESIGN_EXPIRED,\n+                StandardCertificateRequest.PKG_EXPIRED),\n+        DUPLICATE(\"jpackagerTest-duplicate.keychain\",\n+                StandardCertificateRequest.CODESIGN,\n+                StandardCertificateRequest.PKG,\n+                StandardCertificateRequest.CODESIGN_COPY,\n+                StandardCertificateRequest.PKG_COPY);\n@@ -97,1 +117,1 @@\n-            this.spec = builder.create();\n+            this.spec = new ResolvedKeychain(builder.create());\n@@ -101,1 +121,5 @@\n-            return spec;\n+            return spec.spec();\n+        }\n+\n+        public X509Certificate mapCertificateRequest(CertificateRequest certRequest) {\n+            return Objects.requireNonNull(spec.mapCertificateRequests().get(certRequest));\n@@ -116,1 +140,1 @@\n-        private final KeychainWithCertsSpec spec;\n+        private final ResolvedKeychain spec;\n@@ -134,1 +158,1 @@\n-        private final static boolean SIGN_ENV_READY = MacSign.isDeployed(StandardKeychain.signingEnv());\n+        private static final boolean SIGN_ENV_READY = MacSign.isDeployed(StandardKeychain.signingEnv());\n@@ -202,117 +226,1 @@\n-    \/\/ Note: It is not clear if we can combine \"--verify\" and \"--display\", so\n-    \/\/ we testing them separately. Since JDK-8298488 unsigned app images are\n-    \/\/ actually signed with adhoc signature and it will pass \"--verify\", so in\n-    \/\/ addition we will check certificate name which was used to sign.\n-    private static enum CodesignCheckType {\n-        VERIFY, \/\/ Runs codesign with \"--verify\" to check signature and 0 exit code\n-        VERIFY_UNSIGNED, \/\/ Runs codesign with \"--verify\" to check signature and 1 exit code\n-        DISPLAY \/\/ Runs codesign with \"--display --verbose=4\" to get info about signature\n-    };\n-\n-    private static void checkString(List<String> result, String lookupString) {\n-        TKit.assertTextStream(lookupString).predicate(\n-                (line, what) -> line.trim().contains(what)).apply(result.stream());\n-    }\n-\n-    @SuppressWarnings(\"fallthrough\")\n-    private static List<String> codesignResult(Path target, CodesignCheckType type) {\n-        int exitCode = 0;\n-        Executor executor = new Executor().setExecutable(\"\/usr\/bin\/codesign\");\n-        switch (type) {\n-            case VERIFY_UNSIGNED:\n-                exitCode = 1;\n-            case VERIFY:\n-                executor.addArguments(\"--verify\", \"--deep\", \"--strict\",\n-                                      \"--verbose=2\", target.toString());\n-                break;\n-            case DISPLAY:\n-                executor.addArguments(\"--display\", \"--verbose=4\", target.toString());\n-                break;\n-            default:\n-                TKit.error(\"Unknown CodesignCheckType: \" + type);\n-                break;\n-        }\n-        return executor.saveOutput().execute(exitCode).getOutput();\n-    }\n-\n-    private static void verifyCodesignResult(List<String> result, Path target,\n-            boolean signed, CodesignCheckType type, int certIndex) {\n-        result.stream().forEachOrdered(TKit::trace);\n-        String lookupString;\n-        switch (type) {\n-            case VERIFY:\n-                lookupString = target.toString() + \": valid on disk\";\n-                checkString(result, lookupString);\n-                lookupString = target.toString() + \": satisfies its Designated Requirement\";\n-                checkString(result, lookupString);\n-                break;\n-            case VERIFY_UNSIGNED:\n-                lookupString = target.toString() + \": code object is not signed at all\";\n-                checkString(result, lookupString);\n-                break;\n-            case DISPLAY:\n-                if (signed) {\n-                    lookupString = \"Authority=\" + getAppCert(certIndex);\n-                } else {\n-                    lookupString = \"Signature=adhoc\";\n-                }\n-                checkString(result, lookupString);\n-                break;\n-            default:\n-                TKit.error(\"Unknown CodesignCheckType: \" + type);\n-                break;\n-        }\n-    }\n-\n-    private static Result spctlResult(Path target, String type) {\n-        Result result = new Executor()\n-                .setExecutable(\"\/usr\/sbin\/spctl\")\n-                .addArguments(\"-vvv\", \"--assess\", \"--type\", type,\n-                        target.toString())\n-                .saveOutput()\n-                .executeWithoutExitCodeCheck();\n-\n-        \/\/ allow exit code 3 for not being notarized\n-        if (result.getExitCode() != 3) {\n-            result.assertExitCodeIsZero();\n-        }\n-        return result;\n-    }\n-\n-    private static void verifySpctlResult(List<String> output, Path target,\n-            String type, int exitCode, int certIndex) {\n-        output.stream().forEachOrdered(TKit::trace);\n-        String lookupString;\n-\n-        if (exitCode == 0) {\n-            lookupString = target.toString() + \": accepted\";\n-            checkString(output, lookupString);\n-        } else if (exitCode == 3) {\n-            \/\/ allow failure purely for not being notarized\n-            lookupString = target.toString() + \": rejected\";\n-            checkString(output, lookupString);\n-        }\n-\n-        if (type.equals(\"install\")) {\n-            lookupString = \"origin=\" + getInstallerCert(certIndex);\n-        } else {\n-            lookupString = \"origin=\" + getAppCert(certIndex);\n-        }\n-        checkString(output, lookupString);\n-    }\n-\n-    private static List<String> pkgutilResult(Path target, boolean signed) {\n-        List<String> result = new Executor()\n-                .setExecutable(\"\/usr\/sbin\/pkgutil\")\n-                .addArguments(\"--check-signature\",\n-                        target.toString())\n-                .saveOutput()\n-                .execute(signed ? 0 : 1)\n-                .getOutput();\n-\n-        return result;\n-    }\n-\n-    private static void verifyPkgutilResult(List<String> result, boolean signed,\n-                                            int certIndex) {\n-        result.stream().forEachOrdered(TKit::trace);\n+    public static void verifyCodesign(Path target, boolean signed, int certIndex) {\n@@ -320,4 +228,2 @@\n-            String lookupString = \"Status: signed by\";\n-            checkString(result, lookupString);\n-            lookupString = \"1. \" + getInstallerCert(certIndex);\n-            checkString(result, lookupString);\n+            final var certRequest = getCertRequest(certIndex);\n+            MacSignVerify.assertSigned(target, certRequest);\n@@ -325,2 +231,1 @@\n-            String lookupString = \"Status: no signature\";\n-            checkString(result, lookupString);\n+            MacSignVerify.assertAdhocSigned(target);\n@@ -330,8 +235,0 @@\n-    public static void verifyCodesign(Path target, boolean signed, int certIndex) {\n-        List<String> result = codesignResult(target, CodesignCheckType.VERIFY);\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.VERIFY, certIndex);\n-\n-        result = codesignResult(target, CodesignCheckType.DISPLAY);\n-        verifyCodesignResult(result, target, signed, CodesignCheckType.DISPLAY, certIndex);\n-    }\n-\n@@ -344,1 +241,1 @@\n-            TKit.error(\"Unexpected target: \" + target);\n+            throw new IllegalArgumentException(\"Unexpected target: \" + target);\n@@ -347,2 +244,1 @@\n-        List<String> result = codesignResult(target, CodesignCheckType.VERIFY_UNSIGNED);\n-        verifyCodesignResult(result, target, false, CodesignCheckType.VERIFY_UNSIGNED, -1);\n+        MacSignVerify.assertUnsigned(target);\n@@ -352,2 +248,20 @@\n-        Result result = spctlResult(target, type);\n-        List<String> output = result.getOutput();\n+        final var standardCertIndex = Stream.of(CertIndex.values()).filter(v -> {\n+            return v.value() == certIndex;\n+        }).findFirst().orElseThrow();\n+\n+        final var standardType = Stream.of(MacSignVerify.SpctlType.values()).filter(v -> {\n+            return v.value().equals(type);\n+        }).findFirst().orElseThrow();\n+\n+        final String expectedSignOrigin;\n+        if (standardCertIndex == CertIndex.INVALID_INDEX) {\n+            expectedSignOrigin = null;\n+        } else if (standardType == MacSignVerify.SpctlType.EXEC) {\n+            expectedSignOrigin = getCertRequest(certIndex).name();\n+        } else if (standardType == MacSignVerify.SpctlType.INSTALL) {\n+            expectedSignOrigin = getPkgCertRequest(certIndex).name();\n+        } else {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        final var signOrigin = MacSignVerify.findSpctlSignOrigin(standardType, target).orElse(null);\n@@ -355,1 +269,2 @@\n-        verifySpctlResult(output, target, type, result.getExitCode(), certIndex);\n+        TKit.assertEquals(signOrigin, expectedSignOrigin,\n+                String.format(\"Check [%s] has sign origin as expected\", target));\n@@ -359,2 +274,6 @@\n-        List<String> result = pkgutilResult(target, signed);\n-        verifyPkgutilResult(result, signed, certIndex);\n+        if (signed) {\n+            final var certRequest = getPkgCertRequest(certIndex);\n+            MacSignVerify.assertPkgSigned(target, certRequest, StandardKeychain.MAIN.mapCertificateRequest(certRequest));\n+        } else {\n+            MacSignVerify.assertUnsigned(target);\n+        }\n@@ -381,0 +300,27 @@\n+    private static CertificateRequest getCertRequest(int certIndex) {\n+        switch (CertIndex.values()[certIndex]) {\n+            case ASCII_INDEX -> {\n+                return StandardCertificateRequest.CODESIGN.spec();\n+            }\n+            case UNICODE_INDEX -> {\n+                return StandardCertificateRequest.CODESIGN_UNICODE.spec();\n+            }\n+            default -> {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+    }\n+\n+    private static CertificateRequest getPkgCertRequest(int certIndex) {\n+        switch (CertIndex.values()[certIndex]) {\n+            case ASCII_INDEX -> {\n+                return StandardCertificateRequest.PKG.spec();\n+            }\n+            case UNICODE_INDEX -> {\n+                return StandardCertificateRequest.PKG_UNICODE.spec();\n+            }\n+            default -> {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":97,"deletions":151,"binary":false,"changes":248,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-            .apply(Stream.of(actualEnvVarValue));\n+            .apply(List.of(actualEnvVarValue));\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppLauncherEnvTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-        TKit.assertTextStream(\"jpackage.app-version=\" + appVersion).apply(output.stream());\n-        TKit.assertTextStream(\"jpackage.app-path=\").apply(output.stream());\n+        TKit.assertTextStream(\"jpackage.app-version=\" + appVersion).apply(output);\n+        TKit.assertTextStream(\"jpackage.app-path=\").apply(output);\n@@ -224,1 +224,1 @@\n-                    .apply(nonVerboseOutput.stream());\n+                    .apply(nonVerboseOutput);\n@@ -229,1 +229,1 @@\n-                    .apply(verboseOutput[0].stream());\n+                    .apply(verboseOutput[0]);\n@@ -240,0 +240,1 @@\n+                .discardStdout(true)\n@@ -246,1 +247,1 @@\n-        final var textVerifier = Stream.of(\n+        cmd.validateOutput(Stream.of(\n@@ -251,1 +252,1 @@\n-        }).map(CannedFormattedString::getValue).map(TKit::assertTextStream).reduce(TKit.TextStreamVerifier::andThen).orElseThrow();\n+        }).toArray(CannedFormattedString[]::new));\n@@ -253,1 +254,1 @@\n-        textVerifier.apply(cmd.saveConsoleOutput(true).execute(1).getOutput().stream().filter(Predicate.not(JPackageCommand::withTimestamp)));\n+        cmd.execute(1);\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -647,0 +648,38 @@\n+    @Test(ifOS = MACOS)\n+    @Parameter({\"MAC_PKG\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"MAC_DMG\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"IMAGE\", \"--mac-signing-key-user-name\", \"false\"})\n+    @Parameter({\"MAC_PKG\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"MAC_DMG\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"IMAGE\", \"--mac-app-image-sign-identity\", \"true\"})\n+    @Parameter({\"MAC_PKG\", \"--mac-installer-sign-identity\", \"true\"})\n+    public static void testMacSigningIdentityValidation(PackageType type, String option, boolean passThroughOption) {\n+\n+        final var signingId = \"foo\";\n+\n+        final List<CannedFormattedString> errorMessages = new ArrayList<>();\n+        errorMessages.add(JPackageStringBundle.MAIN.cannedFormattedString(\n+                \"error.cert.not.found\", \"Developer ID Application: \" + signingId, \"\"));\n+        errorMessages.addAll(Stream.of(\n+                \"error.explicit-sign-no-cert\",\n+                \"error.explicit-sign-no-cert.advice\"\n+        ).map(JPackageStringBundle.MAIN::cannedFormattedString).toList());\n+\n+        final var cmd = JPackageCommand.helloAppImage()\n+                .ignoreDefaultVerbose(true)\n+                .addArguments(\"--mac-sign\")\n+                .addArguments(option, signingId)\n+                .setPackageType(type);\n+\n+        if (passThroughOption) {\n+            errorMessages.stream()\n+                    .map(CannedFormattedString::getValue)\n+                    .map(TKit::assertTextStream)\n+                    .map(TKit.TextStreamVerifier::negate).forEach(cmd::validateOutput);\n+        } else {\n+            cmd.validateOutput(errorMessages.toArray(CannedFormattedString[]::new));\n+        }\n+\n+        cmd.execute(1);\n+    }\n+\n@@ -735,1 +774,1 @@\n-        \/\/ Ignore external runtime as it will interfer\n+        \/\/ Ignore external runtime as it will interfere\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-                verifier.apply(result.getOutput().stream());\n+                verifier.apply(result.getOutput());\n@@ -202,1 +202,1 @@\n-                    verifier.apply(result.getOutput().stream());\n+                    verifier.apply(result.getOutput());\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-                TKit.assertTextStream(s).label(\"mods\").apply(mods.stream());\n+                TKit.assertTextStream(s).label(\"mods\").apply(mods);\n@@ -137,1 +137,1 @@\n-                TKit.assertTextStream(s).label(\"mods\").negate().apply(mods.stream());\n+                TKit.assertTextStream(s).label(\"mods\").negate().apply(mods);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-        TKit.assertTextStream(WARNING1).apply(output.stream());\n-        TKit.assertTextStream(WARNING2).apply(output.stream());\n+        TKit.assertTextStream(WARNING1).apply(output);\n+        TKit.assertTextStream(WARNING2).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsEqualsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            TKit.assertTextStream(expect).apply(output.stream());\n+            TKit.assertTextStream(expect).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                        nonExistingMainClass)).apply(output.stream());\n+                        nonExistingMainClass)).apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-import java.io.IOException;\n+import static jdk.jpackage.test.WindowsHelper.killAppLauncherProcess;\n+\n@@ -26,3 +27,0 @@\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import jdk.jpackage.test.JPackageCommand;\n@@ -31,1 +29,1 @@\n-import static jdk.jpackage.test.WindowsHelper.killAppLauncherProcess;\n+import jdk.jpackage.test.JPackageCommand;\n@@ -51,1 +49,1 @@\n-    public void test() throws IOException, InterruptedException {\n+    public void test() throws InterruptedException {\n@@ -59,5 +57,4 @@\n-        try ( \/\/ Launch the app in a separate thread\n-                ExecutorService exec = Executors.newSingleThreadExecutor()) {\n-            exec.execute(() -> {\n-                HelloApp.executeLauncher(cmd);\n-            });\n+        \/\/ Launch the app in a separate thread\n+        new Thread(() -> {\n+            HelloApp.executeLauncher(cmd);\n+        }).start();\n@@ -65,2 +62,2 @@\n-            \/\/ Wait a bit to let the app start\n-            Thread.sleep(Duration.ofSeconds(10));\n+        \/\/ Wait a bit to let the app start\n+        Thread.sleep(Duration.ofSeconds(10));\n@@ -68,2 +65,2 @@\n-            \/\/ Find the main app launcher process and kill it\n-            killAppLauncherProcess(cmd, null, 2);\n+        \/\/ Find the main app launcher process and kill it\n+        killAppLauncherProcess(cmd, null, 2);\n@@ -71,2 +68,2 @@\n-            \/\/ Wait a bit and check if child app launcher process is still running (it must NOT)\n-            Thread.sleep(Duration.ofSeconds(5));\n+        \/\/ Wait a bit and check if child app launcher process is still running (it must NOT)\n+        Thread.sleep(Duration.ofSeconds(5));\n@@ -74,2 +71,1 @@\n-            killAppLauncherProcess(cmd, null, 0);\n-        }\n+        killAppLauncherProcess(cmd, null, 0);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8301247Test.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    private final static Predicate<String> createToolCommandLinePredicate(String wixToolName) {\n+    private static final Predicate<String> createToolCommandLinePredicate(String wixToolName) {\n@@ -201,1 +201,1 @@\n-                TKit.assertTextStream(expected).apply(wixCmdline.stream());\n+                TKit.assertTextStream(expected).apply(wixCmdline);\n@@ -206,1 +206,1 @@\n-                        .apply(result.getOutput().stream());\n+                        .apply(result.getOutput());\n@@ -216,1 +216,1 @@\n-                            v.createCmdOutputVerifier(wixSrcDir).apply(wixCmdline.stream());\n+                            v.createCmdOutputVerifier(wixSrcDir).apply(wixCmdline);\n@@ -221,1 +221,1 @@\n-                        v.apply(wixCmdline.stream());\n+                        v.apply(wixCmdline);\n@@ -227,1 +227,1 @@\n-                                    wixSrcDir).apply(result.getOutput().stream()));\n+                                    wixSrcDir).apply(result.getOutput()));\n@@ -254,6 +254,6 @@\n-    final private WixFileInitializer[] wxlFileInitializers;\n-    final private String[] expectedCultures;\n-    final private String expectedErrorMessage;\n-    final private String userLanguage;\n-    final private String userCountry;\n-    final private boolean enableWixUIExtension;\n+    private final WixFileInitializer[] wxlFileInitializers;\n+    private final String[] expectedCultures;\n+    private final String expectedErrorMessage;\n+    private final String userLanguage;\n+    private final String userCountry;\n+    private final boolean enableWixUIExtension;\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinL10nTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -68,2 +68,4 @@\n-                TKit.assertTextStream(\"Doing action: LaunchConditions\").predicate(String::endsWith)\n-                    .andThen(TKit.assertTextStream(\"Not supported on this version of Windows\").predicate(String::endsWith)).apply(lines);\n+                TKit.TextStreamVerifier.group()\n+                        .add(TKit.assertTextStream(\"Doing action: LaunchConditions\").predicate(String::endsWith))\n+                        .add(TKit.assertTextStream(\"Not supported on this version of Windows\").predicate(String::endsWith))\n+                        .create().accept(lines.iterator());\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinOSConditionTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                            result.getOutput().stream()));\n+                            result.getOutput().stream()).iterator());\n@@ -100,1 +100,1 @@\n-                    .apply(result.getOutput().stream());\n+                    .apply(result.getOutput());\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinResourceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n@@ -135,1 +135,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n@@ -142,1 +142,1 @@\n-                    .apply(output.stream());\n+                    .apply(output);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinScriptTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUnexported\/TestUnexported.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631\n+ * @test 8151754 8080883 8160089 8170162 8166581 8172102 8171343 8178023 8186708 8179856 8185840 8190383 8341631 8341833\n@@ -31,0 +31,1 @@\n+ *          jdk.jshell\/jdk.internal.jshell.tool.resources:+open\n@@ -41,0 +42,1 @@\n+import java.text.MessageFormat;\n@@ -43,0 +45,1 @@\n+import java.util.ResourceBundle;\n@@ -48,0 +51,1 @@\n+import jdk.jshell.JShell;\n@@ -152,0 +156,8 @@\n+    protected void startCheckError(Consumer<String> checkError,\n+            String... args) {\n+        runShell(args);\n+        check(cmderr, checkError, \"userout\");\n+        check(userout, null, \"userout\");\n+        check(usererr, null, \"usererr\");\n+    }\n+\n@@ -430,0 +442,19 @@\n+    public void testErroneousFile() {\n+        String code = \"\"\"\n+                      var v = (\n+                      System.console().readLine(\"prompt: \");\n+                      \/exit\n+                      \"\"\";\n+        String readLinePrompt = writeToFile(code);\n+        String expectedErrorFormat =\n+                ResourceBundle.getBundle(\"jdk.internal.jshell.tool.resources.l10n\",\n+                                         Locale.getDefault(),\n+                                         JShell.class.getModule())\n+                              .getString(\"jshell.err.incomplete.input\");\n+        String expectedError =\n+                new MessageFormat(expectedErrorFormat).format(new Object[] {code});\n+        startCheckError(s -> assertEquals(s, expectedError),\n+                        readLinePrompt);\n+    }\n+\n+\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ *          jdk.jshell\/jdk.internal.jshell.tool.resources:+open\n","filename":"test\/langtools\/jdk\/jshell\/ToolProviderTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8262891 8269146 8269113\n+ * @bug 8262891 8269146 8269113 8348928\n@@ -310,0 +310,18 @@\n+\n+    void testPatternWithoutBindingCantOverridePatternWithBinding8348928a(Object o) {\n+        record R(int i, String s) {}\n+        switch (o) {\n+            case Integer _, R(int x, String _) -> {}\n+            default -> {}\n+        }\n+    }\n+\n+    void testPatternWithoutBindingCantOverridePatternWithBinding8348928b(Object o) {\n+        record R(int i, String s) {}\n+        switch (o) {\n+            case Integer _:\n+            case R(int x, String _):\n+                break;\n+            default:\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+SwitchErrors.java:314:29: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:323:18: compiler.err.flows.through.to.pattern\n@@ -72,1 +74,1 @@\n-71 errors\n+73 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341608\n+ * @summary Tests for jdeps tool with jar files with malformed classes\n+ * @library lib \/test\/lib\n+ * @build jdk.jdeps\/com.sun.tools.jdeps.*\n+ * @run junit MalformedClassesTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import com.sun.tools.jdeps.JdepsAccess;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.util.JarUtils;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MalformedClassesTest {\n+\n+    static Stream<Arguments> invalidArchives() throws Exception {\n+        var jarPath = Path.of(\"malformed-signature.jar\");\n+        var compiledClasses = InMemoryJavaCompiler.compile(Map.ofEntries(\n+                Map.entry(\"one.One\", \"\"\"\n+                          package one;\n+\n+                          import java.util.Optional;\n+\n+                          class One {\n+                              Optional<String> st = Optional.empty();\n+                          }\n+                          \"\"\"),\n+                Map.entry(\"two.Two\", \"\"\"\n+                          package two;\n+\n+                          import java.lang.invoke.*;\n+\n+                          class Two {\n+                              int i;\n+                              static final VarHandle I;\n+\n+                              static {\n+                                  try {\n+                                      I = MethodHandles.lookup().findVarHandle(Two.class, \"i\", int.class);\n+                                  } catch (ReflectiveOperationException ex) {\n+                                      throw new ExceptionInInitializerError(ex);\n+                                  }\n+                              }\n+                          }\n+                          \"\"\")\n+        ));\n+        var updated = ClassFile.of().transformClass(ClassFile.of().parse(compiledClasses.get(\"one.One\")),\n+                ClassTransform.transformingFields((fb, fe) -> {\n+                    if (fe instanceof SignatureAttribute) {\n+                        fb.with(SignatureAttribute.of(fb.constantPool().utf8Entry(\"Invalid string\")));\n+                    } else {\n+                        fb.with(fe);\n+                    }\n+                }));\n+        var classes = new HashMap<>(compiledClasses);\n+        classes.put(\"one.One\", updated);\n+        JarUtils.createJarFromClasses(jarPath, classes);\n+\n+        Path flatDir = Path.of(\"flatDir\");\n+        Files.createDirectories(flatDir);\n+        for (var entry : classes.entrySet()) {\n+            ClassFileInstaller.writeClassToDisk(entry.getKey(), entry.getValue(), flatDir.toString());\n+        }\n+\n+        return Stream.of(\n+                Arguments.of(\"directory\", flatDir, \"One.class\"),\n+                Arguments.of(\"jar\", jarPath, \"one\/One.class (malformed-signature.jar)\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"invalidArchives\")\n+    public void testMalformedSignature(String kind, Path path, String entryName) throws IOException {\n+        try (var jdeps = JdepsUtil.newCommand(\"jdeps\")) {\n+            jdeps.addRoot(path);\n+            var analyzer = jdeps.getDepsAnalyzer();\n+            analyzer.run();\n+            var archives = JdepsAccess.depsAnalyzerArchives(analyzer);\n+            assertEquals(1, archives.size(), archives::toString);\n+            var archive = archives.iterator().next();\n+            var skippedEntries = archive.reader().skippedEntries();\n+            assertEquals(1, skippedEntries.size(), skippedEntries::toString);\n+            var message = skippedEntries.getFirst();\n+            assertTrue(message.contains(\"ClassFileError\"), message);\n+            assertTrue(message.contains(\"Invalid string\"), message);\n+            assertTrue(message.contains(entryName), \"\\\"\" + message + \"\\\" does not contain \\\"\" + entryName + \"\\\"\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/jdeps\/MalformedClassesTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+modules = \\\n+    jdk.jdeps\/com.sun.tools.jdeps\n","filename":"test\/langtools\/tools\/jdeps\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.jdeps;\n+\n+import java.util.Set;\n+\n+public final class JdepsAccess {\n+    public static Set<Archive> depsAnalyzerArchives(DepsAnalyzer analyzer) {\n+        return analyzer.archives;\n+    }\n+\n+    private JdepsAccess() {}\n+}\n","filename":"test\/langtools\/tools\/jdeps\/jdk.jdeps\/com\/sun\/tools\/jdeps\/JdepsAccess.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -89,1 +89,1 @@\n-        TRAINING,       \/\/ -XX:DumpLoadedClassList OR {-XX:AOTMode=create -XX:AOTConfiguration}\n+        TRAINING,       \/\/ -XX:DumpLoadedClassList OR {-XX:AOTMode=record -XX:AOTConfiguration}\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import jdk.test.lib.cds.CDSAppTester.RunMode;\n@@ -30,2 +34,0 @@\n-import java.util.function.Consumer;\n-\n@@ -52,2 +54,2 @@\n-    private Consumer<OutputAnalyzer> assemblyChecker;\n-    private Consumer<OutputAnalyzer> productionChecker;\n+    private BiConsumer<OutputAnalyzer, RunMode> assemblyChecker;\n+    private BiConsumer<OutputAnalyzer, RunMode> productionChecker;\n@@ -101,1 +103,1 @@\n-    public SimpleCDSAppTester setAssemblyChecker(Consumer<OutputAnalyzer> checker) {\n+    public SimpleCDSAppTester setAssemblyChecker(BiConsumer<OutputAnalyzer, RunMode> checker) {\n@@ -106,1 +108,1 @@\n-    public SimpleCDSAppTester setProductionChecker(Consumer<OutputAnalyzer> checker) {\n+    public SimpleCDSAppTester setProductionChecker(BiConsumer<OutputAnalyzer, RunMode> checker) {\n@@ -111,0 +113,15 @@\n+\n+    public SimpleCDSAppTester setAssemblyChecker(Consumer<OutputAnalyzer> checker) {\n+        this.assemblyChecker = (OutputAnalyzer out, RunMode runMode) -> {\n+            checker.accept(out);\n+        };\n+        return this;\n+    }\n+\n+    public SimpleCDSAppTester setProductionChecker(Consumer<OutputAnalyzer> checker) {\n+        this.productionChecker = (OutputAnalyzer out, RunMode runMode) -> {\n+            checker.accept(out);\n+        };\n+        return this;\n+    }\n+\n@@ -140,1 +157,1 @@\n-                    assemblyChecker.accept(out);\n+                    assemblyChecker.accept(out, runMode);\n@@ -144,1 +161,1 @@\n-                    productionChecker.accept(out);\n+                    productionChecker.accept(out, runMode);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/SimpleCDSAppTester.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,2 +211,4 @@\n-     * Compiles the list of classes with the given map of name and source code.\n-     * This overloaded version of compile is useful for batch compile use cases.\n+     * Compiles the list of classes with the given map of binary name and source code.\n+     * This overloaded version of compile is useful for batch compile use cases, or\n+     * if a compilation unit produces multiple class files. Returns a map from\n+     * class binary names to class file content.\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,18 @@\n+\n+    \/**\n+     * Creates a JAR file from a map of class binary name to class bytes.\n+     *\n+     * @see jdk.test.lib.compiler.InMemoryJavaCompiler#compile(Map)\n+     *\/\n+    public static void createJarFromClasses(Path jarfile, Map<String, byte[]> classes) throws IOException {\n+        try (OutputStream out = Files.newOutputStream(jarfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            for (var entry : classes.entrySet()) {\n+                String name = entry.getKey().replace('.', '\/') + \".class\";\n+                jos.putNextEntry(new JarEntry(name));\n+                jos.write(entry.getValue());\n+                jos.closeEntry();\n+            }\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarUtils.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class ClassComparison {\n+    static final int INVOCATIONS = 1024;\n+\n+    Class[] c1;\n+    Class[] c2;\n+    int[] res;\n+    long[] resLong;\n+    Object[] resObject;\n+    Object ro1;\n+    Object ro2;\n+    Object[] resClass;\n+    Class rc1;\n+    Class rc2;\n+\n+    @Setup\n+    public void setup() {\n+        var random = RandomGenerator.getDefault();\n+        c1 = new Class[INVOCATIONS];\n+        c2 = new Class[INVOCATIONS];\n+        res = new int[INVOCATIONS];\n+        resLong = new long[INVOCATIONS];\n+        resObject = new Object[INVOCATIONS];\n+        ro1 = new Object();\n+        ro2 = new Object();\n+        resClass = new Class[INVOCATIONS];\n+        rc1 = Float.class;\n+        rc2 = Double.class;\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            c1[i] = random.nextBoolean() ? Float.class : Double.class;\n+        }\n+        List<Class> list = Arrays.asList(c1);\n+        Collections.shuffle(list);\n+        list.toArray(c2);\n+    }\n+\n+    @Benchmark\n+    public void equalClass() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (c1[i] == c2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualClass() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (c1[i] != c2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    public void equalClassResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (c1[i] == c2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualClassResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (c1[i] != c2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ClassComparison.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -44,0 +45,7 @@\n+    long[] resLong;\n+    Object[] resObject;\n+    Object ro1;\n+    Object ro2;\n+    Class[] resClass;\n+    Class rc1;\n+    Class rc2;\n@@ -53,0 +61,7 @@\n+        resLong = new long[INVOCATIONS];\n+        resObject = new Object[INVOCATIONS];\n+        ro1 = new Object();\n+        ro2 = new Object();\n+        resClass = new Class[INVOCATIONS];\n+        rc1 = Float.class;\n+        rc2 = Double.class;\n@@ -82,1 +97,1 @@\n-            res[i] = Float.isNaN(f1[i]) ? 1 : 0;\n+            res[i] = Float.isNaN(f1[i]) ? 1 : 2;\n@@ -89,1 +104,1 @@\n-            res[i] = Double.isNaN(d1[i]) ? 1 : 0;\n+            res[i] = Double.isNaN(d1[i]) ? 1 : 2;\n@@ -96,1 +111,1 @@\n-            res[i] = Float.isInfinite(f1[i]) ? 1 : 0;\n+            res[i] = Float.isInfinite(f1[i]) ? 1 : 2;\n@@ -103,1 +118,1 @@\n-            res[i] = Double.isInfinite(d1[i]) ? 1 : 0;\n+            res[i] = Double.isInfinite(d1[i]) ? 1 : 2;\n@@ -110,1 +125,1 @@\n-            res[i] = Float.isFinite(f1[i]) ? 1 : 0;\n+            res[i] = Float.isFinite(f1[i]) ? 1 : 2;\n@@ -117,1 +132,1 @@\n-            res[i] = Double.isFinite(d1[i]) ? 1 : 0;\n+            res[i] = Double.isFinite(d1[i]) ? 1 : 2;\n@@ -124,1 +139,1 @@\n-            res[i] = (f1[i] == f2[i]) ? 1 : 0;\n+            res[i] = (f1[i] == f2[i]) ? 1 : 2;\n@@ -131,1 +146,129 @@\n-            res[i] = (d1[i] == d2[i]) ? 1 : 0;\n+            res[i] = (d1[i] == d2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessFloat() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (f1[i] < f2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessDouble() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (d1[i] < d2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualFloat() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (f1[i] <= f2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualDouble() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (d1[i] <= d2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterFloat() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (f1[i] > f2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterDouble() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (d1[i] > d2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualFloat() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (f1[i] >= f2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualDouble() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (d1[i] >= d2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    \/\/ --------- result: long ---------\n+\n+    @Benchmark\n+    public void equalFloatResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (f1[i] == f2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void equalDoubleResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (d1[i] == d2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessFloatResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (f1[i] < f2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessDoubleResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (d1[i] < d2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualFloatResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (f1[i] <= f2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualDoubleResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (d1[i] <= d2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterFloatResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (f1[i] > f2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterDoubleResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (d1[i] > d2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualFloatResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (f1[i] >= f2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualDoubleResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (d1[i] >= d2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/FPComparison.java","additions":151,"deletions":8,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class IntegerComparison {\n+    static final int INVOCATIONS = 1024;\n+\n+    int[] i1;\n+    int[] i2;\n+    int[] res;\n+    long[] resLong;\n+    Object[] resObject;\n+    Object ro1;\n+    Object ro2;\n+    Object[] resClass;\n+    Class rc1;\n+    Class rc2;\n+\n+    @Setup\n+    public void setup() {\n+        var random = RandomGenerator.getDefault();\n+        i1 = new int[INVOCATIONS];\n+        i2 = new int[INVOCATIONS];\n+        res = new int[INVOCATIONS];\n+        resLong = new long[INVOCATIONS];\n+        resObject = new Object[INVOCATIONS];\n+        ro1 = new Object();\n+        ro2 = new Object();\n+        resClass = new Class[INVOCATIONS];\n+        rc1 = Float.class;\n+        rc2 = Double.class;\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            i1[i] = random.nextInt(INVOCATIONS);\n+            i2[i] = random.nextInt(INVOCATIONS);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void equalInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] == i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] != i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] < i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] <= i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] > i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualInteger() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (i1[i] >= i2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    \/\/ --------- result: long ---------\n+\n+    public void equalIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] == i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] != i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    public void lessIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] < i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] <= i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    public void greaterIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] > i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualIntegerResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (i1[i] >= i2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/IntegerComparison.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class LongComparison {\n+    static final int INVOCATIONS = 1024;\n+\n+    long[] l1;\n+    long[] l2;\n+    int[] res;\n+    long[] resLong;\n+    Object[] resObject;\n+    Object ro1;\n+    Object ro2;\n+    Object[] resClass;\n+    Class rc1;\n+    Class rc2;\n+\n+    @Setup\n+    public void setup() {\n+        var random = RandomGenerator.getDefault();\n+        l1 = new long[INVOCATIONS];\n+        l2 = new long[INVOCATIONS];\n+        res = new int[INVOCATIONS];\n+        resLong = new long[INVOCATIONS];\n+        resObject = new Object[INVOCATIONS];\n+        ro1 = new Object();\n+        ro2 = new Object();\n+        resClass = new Class[INVOCATIONS];\n+        rc1 = Float.class;\n+        rc2 = Double.class;\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            l1[i] = random.nextLong(INVOCATIONS);\n+            l2[i] = random.nextLong(INVOCATIONS);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void equalLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] == l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] != l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] < l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] <= l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] > l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (l1[i] >= l2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    \/\/ --------- result: long ---------\n+\n+    public void equalLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] == l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] != l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    public void lessLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] < l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void lessEqualLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] <= l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    public void greaterLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] > l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void greaterEqualLongResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (l1[i] >= l2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/LongComparison.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class PointerComparison {\n+    static final int INVOCATIONS = 1024;\n+\n+    Object[] o1;\n+    Object[] o2;\n+    int[] res;\n+    long[] resLong;\n+    Object[] resObject;\n+    Object ro1;\n+    Object ro2;\n+    Object[] resClass;\n+    Class rc1;\n+    Class rc2;\n+\n+    @Setup\n+    public void setup() {\n+        var random = RandomGenerator.getDefault();\n+        o1 = new Object[INVOCATIONS];\n+        o2 = new Object[INVOCATIONS];\n+        res = new int[INVOCATIONS];\n+        resLong = new long[INVOCATIONS];\n+        resObject = new Object[INVOCATIONS];\n+        ro1 = new Object();\n+        ro2 = new Object();\n+        resClass = new Class[INVOCATIONS];\n+        rc1 = Float.class;\n+        rc2 = Double.class;\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            o1[i] = new Object();\n+        }\n+        List<Object> list = Arrays.asList(o1);\n+        Collections.shuffle(list);\n+        list.toArray(o2);\n+    }\n+\n+    @Benchmark\n+    public void equalObject() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (o1[i] == o2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualObject() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            res[i] = (o1[i] != o2[i]) ? 1 : 2;\n+        }\n+    }\n+\n+    public void equalObjectResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (o1[i] == o2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void notEqualObjectResLong() {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            resLong[i] = (o1[i] != o2[i]) ? Long.MAX_VALUE : Long.MIN_VALUE;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/PointerComparison.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Performance test of String.hashCode() function with constant folding.\n+ * The tests are using a Map that holds a MethodHandle to better expose\n+ * any potential lack of constant folding.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class StringHashCodeStatic {\n+\n+    private static final String HASHCODE = \"abcdefghijkl\";\n+    private static final String HASHCODE_0 = new String(new char[]{72, 90, 100, 89, 105, 2, 72, 90, 100, 89, 105, 2});\n+    private static final String EMPTY = new String();\n+\n+    private static final Map<String, MethodHandle> MAP = Map.of(\n+            HASHCODE, mh(HASHCODE.hashCode()),\n+            HASHCODE_0, mh(HASHCODE_0.hashCode()),\n+            EMPTY, mh(EMPTY.hashCode()));\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with a regular 12 char string with\n+     * the result possibly cached in String\n+     *\/\n+    @Benchmark\n+    public int nonZero() throws Throwable {\n+        return (int)MAP.get(HASHCODE).invokeExact();\n+    }\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with a 12 char string with the\n+     * hashcode = 0.\n+     *\/\n+    @Benchmark\n+    public int zero() throws Throwable {\n+        return (int)MAP.get(HASHCODE_0).invokeExact();\n+    }\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with the empty string. an\n+     * empty String has hashCode = 0.\n+     *\/\n+    @Benchmark\n+    public int empty() throws Throwable {\n+        return (int)MAP.get(EMPTY).invokeExact();\n+    }\n+\n+    static MethodHandle mh(int value) {\n+        return MethodHandles.constant(int.class, value);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCodeStatic.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -1,830 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.security;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.InterruptedException;\n-import java.security.DigestException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.KeyPair;\n-import java.util.Arrays;\n-import java.util.HexFormat;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(value = 3, jvmArgs = {\"--add-opens\", \"java.base\/sun.security.provider=ALL-UNNAMED\"})\n-\n-public class MLDSA {\n-        @Param({\"ML-DSA-44\", \"ML-DSA-65\", \"ML-DSA-87\"} )\n-        private static String algorithm;\n-\n-    @State(Scope.Thread)\n-    public static class MyState {\n-\n-        Object mldsa44;\n-        Object mldsa65;\n-        Object mldsa87;\n-\n-        MethodHandle keygen, siggen, sigver;\n-\n-        @Setup(Level.Trial)\n-        public void setup() throws Throwable, Exception {\n-\n-            MethodHandles.Lookup lookup = MethodHandles.lookup();\n-            Class<?> kClazz = Class.forName(\"sun.security.provider.ML_DSA\");\n-            Constructor<?> constructor = kClazz.getDeclaredConstructor(\n-                    int.class);\n-            constructor.setAccessible(true);\n-\n-            Method m = kClazz.getDeclaredMethod(\"generateKeyPairInternal\",\n-                    byte[].class);\n-            m.setAccessible(true);\n-            keygen = lookup.unreflect(m);\n-\n-            m = kClazz.getDeclaredMethod(\"signInternal\",\n-                    byte[].class, byte[].class, byte[].class);\n-            m.setAccessible(true);\n-            siggen = lookup.unreflect(m);\n-\n-            m = kClazz.getDeclaredMethod(\"verifyInternal\",\n-                    byte[].class, byte[].class, byte[].class);\n-            m.setAccessible(true);\n-            sigver = lookup.unreflect(m);\n-\n-            mldsa44 = constructor.newInstance(2);\n-            mldsa65 = constructor.newInstance(3);\n-            mldsa87 = constructor.newInstance(5);\n-        }\n-    }\n-\n-    @Benchmark\n-    public void keygen(MyState myState) throws Throwable {\n-        switch (algorithm) {\n-        case \"ML-DSA-44\":\n-            for (KeyGenTestCase testCase : KeyGenTestCases44) {\n-                myState.keygen.invoke(myState.mldsa44, testCase.seed);\n-            }\n-            break;\n-        case \"ML-DSA-65\":\n-            for (KeyGenTestCase testCase : KeyGenTestCases65) {\n-                myState.keygen.invoke(myState.mldsa65, testCase.seed);\n-            }\n-            break;\n-        case \"ML-DSA-87\":\n-            for (KeyGenTestCase testCase : KeyGenTestCases87) {\n-                myState.keygen.invoke(myState.mldsa87, testCase.seed);\n-            }\n-            break;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void siggen(MyState myState) throws Throwable {\n-        byte[] rnd = new byte[32];\n-        switch (algorithm) {\n-        case \"ML-DSA-44\":\n-            for (SigGenTestCase testCase : SigGenTestCases44) {\n-                myState.siggen.invoke(myState.mldsa44, testCase.msg,\n-                        rnd, testCase.sk);\n-            }\n-            break;\n-        case \"ML-DSA-65\":\n-            for (SigGenTestCase testCase : SigGenTestCases65) {\n-                myState.siggen.invoke(myState.mldsa65, testCase.msg,\n-                        rnd, testCase.sk);\n-            }\n-            break;\n-        case \"ML-DSA-87\":\n-            for (SigGenTestCase testCase : SigGenTestCases87) {\n-                myState.siggen.invoke(myState.mldsa87, testCase.msg,\n-                        rnd, testCase.sk);\n-            }\n-        }\n-    }\n-\n-    @Benchmark\n-    public void sigver(MyState myState) throws Throwable {\n-        switch (algorithm) {\n-        case \"ML-DSA-44\":\n-            for (SigVerTestCase testCase : SigVerTestCases44) {\n-                myState.sigver.invoke(myState.mldsa44, testCase.pk,\n-                        testCase.msg, testCase.sig);\n-            }\n-            break;\n-        case \"ML-DSA-65\":\n-            for (SigVerTestCase testCase : SigVerTestCases65) {\n-                myState.sigver.invoke(myState.mldsa65, testCase.pk,\n-                        testCase.msg, testCase.sig);\n-            }\n-            break;\n-        case \"ML-DSA-87\":\n-            for (SigVerTestCase testCase : SigVerTestCases87) {\n-                myState.sigver.invoke(myState.mldsa87, testCase.pk,\n-                        testCase.msg, testCase.sig);\n-            }\n-        }\n-    }\n-\n-    static class TestUtils {\n-        static void printHex(String s, byte[] h) {\n-            System.out.println(HexFormat.of().formatHex(h));\n-        }\n-        static byte[] hexDecode(String s) {\n-            return HexFormat.of().parseHex(s);\n-        }\n-    }\n-\n-    record KeyGenTestCase(\n-            byte[] seed) {\n-    }\n-    record SigGenTestCase(\n-            byte[] sk,\n-            byte[] msg,\n-            byte[] sig) {\n-    }\n-    record SigVerTestCase(\n-            byte[] pk,\n-            byte[] msg,\n-            byte[] sig) {\n-    }\n-\n-    static KeyGenTestCase[] KeyGenTestCases44 = new KeyGenTestCase[] {\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"\"\")\n-            )\n-    };\n-\n-    static SigGenTestCase[] SigGenTestCases44 = new SigGenTestCase[] {\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8109bb66b04ddeddb48e77501a8b1e2431fefb69da28a572fc535be604e351cd9301291a5725ca7d7f76270174b0db0688bcb93ecfcf0910b31afe84d7f16ab5782238b7afe42480fd01964142f634d8d50924dee8016f381b69cf0e6f9606e3c2d68b0929c489a45eaecc40008d64ea69676d454115d8d2f1413962db5eb800db36210a246581384eca982121076083a609c4828089424511996c5c164c183669841624e016259334021b123003840920b6854c984921b760021666943849813442c8c84dc8820124829064460c5a4430828089da381253b665898290e0086cda86802428721a244c9ca41108c550dc868120b93121052210134a93a4284ca485914826d3480a59124e63944464223161362e52b824e1346ddc34511c084523823192c29084b89100c92819139294186ac326494224214a0821c0382c9842504a8884cac2882102865c366420080614b330e4380604a820c390450ca48d63062561946c42947014972198c2094b422dca06015b000cda468edb00659a18712448840ab1814300900bc84523010802b240d08865a31262213091598024d908081c89051a1502db3850033666030521c1b489800070e3048061a25058c6091c318244244dc444300b130cc8c401d2320a51a26c88226a01b4810015711a2840631629624866804202a3440d0a160ec3204d0212481b406ccc4611418200030781049588243822621200e2c24c1a19682224008ca46844c608dc288cd034411c03520c0050501082d44885d2b66d50088103160c22c964db2484c84290dcc801a3227254322e14030e189808c4385122a69111266402182a210172649240d844248420210ac9414b80448ac669e1c664c3808598020948982d01450660446424264c09122ad2b04c9c4691211832238841c0a66d41422a49a20022204ca0360120968c18a088dc142a9042082122640c2649d014048c90280300700c40822420229bb285e18651c0a86c94b0218822805306250800111212008440224028728aa60ce2867114354264a409c2228604385282428e103422e0c0480a968954966c20c87181382894463003104cc4462d22068dcc180ec400911291644a926c9ba26908b9411ab08082966d03026d9a16422244419bb49112a06108c71112b625010202c90862201646212731db144113152521c22199322c10832522495010250ec3844d4cc6658a24129b24001b020c91c4105b88710c44851b227012278d138871d31ee0376e3631e0a724ad187fe258ba1af825ab5c3a8bb76a3ae308d11580696408ca1d21d4591311c3d6fbc0744aae0431c7c70d40c7447f5b9f6530c21f965022b9919db9f553dd1cb74faef7163c83b219533d3c2fd3a8204b55cee8792de783358f944c2674fb79230fa808353907f1e56aec8c39e9e6e64f83b4552d76723f41d44ce494483113c6f63e3fa0a8868fced1433adb004b8cb502a9998671fe73a914adc2c42c64cf9eb2e77ae709229bdff22046d5018a5193c6de49fd45f15d151e1c0dc4473a9948bb5bbcf29489a072ad81200c16182b034e29654f9da3d35d7b1f3cb9bbc4e6acbd97836ec4787a8b918509aeb811bfeb242be7fabebe5bdef46aa405dfdf36811e1cf980acb00eb323493b260a542dd2b0b46a3d571901216369e58e855c18a6276db360b0eab396672ad9635bba154b1b4fe0490818b17039da441f055a87c65d902bfbc2a39e94729522b69d4e47c4122b5b19b87e6fb85a1bd682edabb0772e74ad9eeea2e0758e2f8d3e4dcec752e88e936bcdced768911cf6c33819a5a86eb6fcdc4efc375c3e0a21e49cd4ab4827442c96bc176de8b294daa0f41b8ca536e6e12b915750304a71a1b3983b6330289f646e98b3c7fc38af5ff63a988564d85f0608ae9937d2c425464a59150e83daa2d049c1c80205acdc18f65187ead4bc78fbf1416c00fe0960355649786d83520cc7e3f4779b212abd329c4d4093d07c9e0082267a0abfcd6a391645eff624e47137765df08c924abc1a52ba8f4067c3073e7b2d48eee5b366db9e960a6e55aa0e4b48e4695b880dceb98912a18f671d262703541c8e5e4bc16b9362bed20f58d5f5a1818800308b1922cca258e8429490ee4fa79ac5f654b67993933e983c5874d696a8aa46ea0c27113229387fc6679cbda800c4a934625ef3102032db2674b7123cb748521b0a67e83aa906bc52ebe7f222b118661a3980102711ff679e4b6242b9010e8a894ba5c93188d03ad8da548a9e59e0d9f1e08c27abb8027708eaa8899495bb4b289ab03f562e821a7b97118cee1389ca5257efd73cc53a5c5ea9d2588a3e835acb268159434c09923ca92f34aaa22a7f8cce15c800fa385f49a7d15772f81277a8ac2238fd34c0eedf75ed2bb6a983f45d27d9b972f4796923274c588f9d1e6366c805623255528cba1500c88870395207f19d39c5eaa80ee5bd9e776fe73017ca32ba0b0055da4452bd1f96a162ee32edc587553ea47fc3bcc10e27f9a29ef9deba54150032a2608cbe2ae2b8f597fff99fea769b76d090f5922207f17aac49355c756ae802a50f7f5f6990cdcb0b31d8fd6a9b4915d91f0fba752f8424c4aa257c78f2c378364fa6b6892efe4744e2d77d0c5f02c2cf7ac28ba757d96c2c26dcaab0e9f2371ce6e1e7111cc5209a0e053924bd5202eece6d4135ea05c76040ee5f2c195fd76b4dabc10eb03a9b4b36c8e0b723110b1a5ff8cb4bd3f0f49f7dd866f8803c84c083171b1a3ccfbf1bbf90b524dd69acdb9ee7d0928cf484f90d442b815bc91c6b98368bdfefe0e63b5e9039959e7c369b38cfc78a49f596581282f820609ea8e76b2a15d78fd3cfe70cc933af7e8b5d1b28aa0ca8f14479c6bad013d93df59e237ebd3c4f96be20893577b8e98b875e40fb96da3fd0b69b2c4a9803f92d7443db64b61c5bb8f3493b7d3d7115e97c83448a17170364d7342b19f7f1eb8a28907ae0dfc62ea5b17154d4ca3a91a3b61db1bed25dd2b9436925d4de903e559441a7cb80b464ad873227230295676f2ae7822ea85f30c88596fa988e05a60b8d53beda03e203432428bf799561186b1fc1d2c499daef45cb555556ed52fd8ced0864814bb27616171e95239d1dcb3bbbfd91e5e1f0d876cc6ceebeb8be145ee063ce49faffd41145db908b13dee8df37f8b01d1a800f10bcadedb5e8f663a4af4c37a0b09f9e0b2e42dcd4aaa901b6781f5ed8591ede5613241d67c71a077da204ce912a4db8d5d083e405abc3e6ec6d5781a9499eb8e2427e7a928fbc0feb403b797f1dce6c7a83dfba45ba76af2a3231d751bbc9e1f7d0750a998b3b39df2cd0fa485523b359b93ca56de28087830cf984559a899b0d55a9ef696cc60b0fb2217da1f7e57fca279b7a4d5e948d1cdb7fac235445950b0fa7dd9b1284fb09ae113ab9fb4b03f130114f1091a471f185384a0913da65c9153a239cf69e5977a387ea9a3f1c665acb9130e7256d40f8a8e029554c047ad63eb9bca4198b45f7b03e8cd22d1ab05fe4f30de749d97fcea394482cd4c2116870b009d1c890ac6f5099d45d0c37909d9ae58b0823fed17137eb7ef016466c1cd06a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-d3bed8aae32df74803b6961baa9a2266122e26fd3cfdf1568b460abf5ebd475e1764c7814c6a48cfd6d4df272ea9790c8ebf12fcf5836b0926d593e90828bd49ebdb997e79b79ea68e66f48dad497fbd3a6c3e317162a3f46a4dcc45616be6cefa68210b11fcfc9a906945d30297d1714ad28b1fc7b4c6cec5ece1f5d20729918070cbfb25f285a6fba5e195d2dd75a8c62f581be2d75607b5a8740dd2339682f31230354ea03d0e7cf945f167937592a2d2dcaecc5cb0d36217453809886151073e5d15e6bf7763cce81da19738be3a3bfe96788a56c47d2d166efd18250ad525b4e9e5566c19287ffc277d26a888d0b1073242da5e92b23556552b841ec3355e14173090649a14cfc0134b7714dcbe52095d759d0eaecc7d26f3f12494e4247435d5a6eaa9957aa503f710f8e2844905664905de2f30285e774b46270c58f45d267e850e1a6f711b00e5153040ce090660c97b14432c27d0dd50c0585a8f4c4e1e15d2888a90c184508cb400af2f5d3dc0af3eda99a5e97d0836d079eed38aa6e3e4f724cc63adab509ea5f28bacf3181cb7617a3884407a274824742623eb441ffe1ef15bf6509e7b2305b5341c7a3d73e5dece5b9ead5b99f7e65169ed1673bdb925b52a6b8d524ee37e8538e6917327a8237bfc3ed3f729cef6840e75ef1cef707fa10009e4d5c72561eed18c06e3be94c579f6629373af6a55019c3faeed00abc22deabc59dcd87ecd40e9dc0a5f4b7fe1d711990fc8c03ae9fce980450739c0a441e3512ab7602038dbd1352fe0da554176a58c47c29111eda3d2b9560b3fdcda292c31621e22bce8695748fcde6c81a1270a1944790c174de8a18a505543b459932c6f4228a00984166ddf33e981c2d3ad2e3cd9ce87aadc57e1e437029223e729a99667ad87ca718db5b133a930e73dcfa2d37ad7580373da272e54f62f3d13db9a4bdafb1922145a1624fa96921c0b6bb1b3d7a115ee58dbb2872db79f4d38255c11f160397052aae3ec34921bdad97da72714f37eed4765769e996e45974961e7439352445147dec09b1bd02a776c2c22be612a723b8711f8391e4918a95605fdc866ed64cff6cde9baec4eb42bd880dd0265befe1a33f4d2c0900627f0c7727228aad47d0922caf2a7c86d70960ac2634cea63dbf5d33af04cb149eb618f9ee97adeeb0df8bf599358a82ceeeca582551298a63cbac754b6975cebf7d6e78b6d5ee24dd6c78b51b022f857e230fab176446cc2cbf6986caf8e76734f5280f463641bbda5137fab4800c58f0e1c4dfd45d5813df3f917666bbadb3547c7381eb33b00fd569d58dacdc95a25962024786770aed94d97d4682f9e94d34ecf09e9269993f547901d0120e5e969e3f12a5ac219158750ed0f381dd72a91ffce01f2b612decbef0fa5441925195b813e1273dcd9988457214c9cc503206eb4756e46f900cf2011963e761e12a3774381b877d93aa1c7892f512fc0eeeb225ace5dd7816b919d1717b6e4a34dbd30171a1d036d9ef9d37ab821bc03d881ced0f2aa94eec2fe0b1ca72b7049f749c9e86ba4ff44afdc90931029fa59538014c519f76264a2a45bdab759da02761303ece94fdc2654cc9c818f4af979dad60a9506dd381d150a66e5b0fbdb6e734404f4cc71e6b4e7f5690556d28158cf049f8ce6e4043a82d1ca3c15e480ebeb7e211b2fb00b4bde2733f03f9cc705038050769f9aebb5a1ffc1c9e3d05132ec1ac7b55b6b3b127ffec67cd6e3a1649fc9313e3625c01ebb600c30f622f8bccea15d6f0388439fae057fb1ca54c7aaecff7b1316e74273a2c66037926b246626ea2321c311aac3b5b907e551d7b03f069ae354ddca45d1e5ed3023c576fdfd1c1bce9d8edad78acfde17c9e4d83ba9087d889dee4bfbcd8908a41ebcb4738861abb6b6d8e65251dc4b7c26de398c687b30efd895069410e58d7bc2a105640866321a83dec80ba7b47cd64b002300a9fdb7e7648c2d0f9784ba55f837904df1fd1db46ea82802d4c3e925d4c3e3cde9b9b6063d303d410f3e917f10aa0a18fde5849d14d0a79d71a983f9b09a41e9a3f80dd36e46bdabe65a1d40d7e53b94aa9677561a549aefd98826cc32f6dc5961714d9cfbe913dd3bc68b8891017915066792cded38946c0316fb0eb6d89c10b84df01e0f910a9ce8fa1cbde71edb210918562910cb540d3eab21c8c8e43151a333c516239370ea3dd42294712d6cb920b1f5469e74fa82d4bd7892cec246db13f3f37ef0e980e095faf06e5aa417f5e16de83c8c1ee5ba8340d10785e1b10aa7573dd6f77fd87eab89a014449210e285fb17d0ff7cc3a2c61e6485c2f2e81fec821abf0c694b77f71a91790037d0f141cfb4a74caa4125dfd7236251526a44d4ffaba4589d5237fe647a4082ccd708e27e82bd28597081fecc184a5ecb2d19d115acb18d9d463e3f642e2e606d3f6d496fbbf19149ccac758dcfe8eb53378b65608940925c23754e0f1a390d520f26c4cc088c091e55b3cc475565c0d166265a0396c50d9983e3433bc5527e9fce7fca2bb408b39dbf96bc183c3659f6e8fee0f23e4230c0eef54ae9581b3a38436810accd7c37e83326e3fe7ed1821393a11127027821bef0b96f58a66968271915c1cbcdbcbcd8c62a54bee08b3cf143e859564b798892fbb9c430a6645bb4c8a2be76c37afaa67b7b5a621f987034e88b1608de8a0a09384d85b0c2c872cc2a9f8ac348c5f864d28558f6c6e4523f408586490a78ef95ecffe5b8fdbbc264944869aeaa3ef428d5cc5fcd363d1003239a6651532a442935e674e3cf1aec6f8b32e32db762bf2512efe763c88b9bf4413ea3344835b96fdcdf71c83afd75ae5925c3e76b9afb9fdc72b17f41ec516ab23529e73b9639f5ca42457c5afcc0f2add498456e1db6b3e775ce48753a9a70840c45dfe7cf396b627fad775acd051829f409bd37046bc4cbb57938cb490891c3aa6a04f60769e04685ac1167c9de32fb20cf43f730d8d09b0d74e7f80aeac659509d7941460018c38eda19de38967fee38f7e9526babd21ca1be031dff0591d765ae30361fd8c2a33bc1dded2c43e0e43533a55e72bf1015f5167c8d6bd5e6a19cd4e2ff19f1d47cf42fc361649a669e4524c731bfe7bd11c2e4ff599724de173dd6990f30db8d3b2084d2d3aaa0c0d8b648667b951d510480a28d40c938b71974d749e62d88cbc686eaa31e7f89cb86dda1e778a167610e7bb3cc97cb27f37ef9121ac1baec0a10b40211cc314b02b5df4274acfcd13de277e470b63c0f0fa387dced40050607517a979ccadff817383b404b4d627d8e92b8c1d8e9ecedfc2d344c4e85878b91a4a5aeb2bbc9e3f5010611121a23333a42546d6e8e909aa3b6c4cbe6ec000000000000000000000000000000000a1b2b40\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f7dca662f79909c3ddab57a31bf75b9d925ee06460453ccc8687ed15f17d9b3de688567d9057463268b74002ea5a1ebc35df84945f296a52665eb737350da32513ec98468356bd8519b3518b104422594072d906b1e37392310e089acd08eadba8e647a2bccaa8ab65335bba2d87e7ac2f1ac90996724fed92021ff93acf1797dba20442942de3a04824454521350e08858124186e04334562082a82b451598451c2020842341218878510c540193060ccc071011492218320c0a21022182ee3a28021880024a7050a9631dc2832118471242430121866d0800940c865cc006911086a23c72dd8c068103028d9040e144029131989a4468e139268091492828630c0200648142061286d00a61013492d5c302a6044681892880ca589a0088691486410463210314044868dd4c228539489422432c49650992831dc3626e0b8311c816d0bb404233291a29491a342711b838122a268cc8845d0008adb4872d99229c12804a40200993401200571e0987014c34cc0026148166824451190104c8980858c366894486422b6700b2324e04626241192a1900541146ec906520835828b366481462cc9106218098e04b951a4309284b628a1122a0c43050b28850b210c5c30501900811c096e83964581c28459b80414858d530031209130180664400802243904e3284554280452325219312a133364c9a8251aa2680a28229480600cb5054ab88109a52912360c200261031142d89251db062119126212a320d9b24d0b391164a20820374c6498908b362ce082290c174063246e811828e388455b20261c264508162288b0890113008cc69164146c13c7855c40852225294b969123a0886184110205888ba41144182259a271cac00d491081d8b229cbc02480a04c4300424a86419116100a976401850d24117009216400924048440ce18248031406c9004a110886421465cc9090d1424c124370c342452180281a150222426590248a613810c28050e2b4259b204e413281a1829193184d981244180684d8a26592a269d4100e90a2241c0541604409cc102d99287121a1210ac2610399500c156d0bc72919320e1a86699a4249c948064b2668492840c4222100400a03c67164b091c0286901470dd0221011a12d91448488886c084464ca0662cc384a63460004396c23c1650a090cdc06325396800242614b3249cb282d44385004889121a48100a78410476de40232c9282519077183a0691b23224116091c088080240147916415573a7a76b6e004d7d3fe8a894ad12949d2c0aa943f5a7210f31077de2af8e27d10ca043ddb29e828db0c39953bd50fddbbbf839d5e242f2623aee99abcec0edaa8893b5c79f1a68387d232995823eb46a1968173ee79bda6e849e254b0e5c63499b9c8e07edf0bca6f0436a4fce62b7d57bd80f49fbf2b7d4ab1bbf1ed004950616ab009ef6e935d4447e287d834106cf017746340e79c317547d051a8026a31c8868bdfdb6ee50c1645ec8e0aa9f716f42502d9eead700f29a60058821504dc6b0bbc9512e1af92ec73b7582676d2ac13f2c9cdfea411fca42f2fa5d286bda79ba0739b0522e18b22d831fc29ea101e835932861b705803a2abb60fad2185c076a8dd469dc8f80522fc546ff0226f8916bade8e2763f3182e431482bec626b2f18d1c046e19a11d79eae753640ffcde6345531dd557c7bbbaf8b727aaa3591abbedbd5f9afb8cf7ad0f645db4de84d91be8b52cb7a407624a0b13a2976f42aa40a1a28a1559be8c539df3d8124c5c111880a8aac2367c312a8914fbce07838804dc956763147fec591eef9961a9c71f11c71512355234c29b65d8a5b232116dbdcaf72d00c78bee6f8c5508b83b4981cbef5b21430ac2bfbb892817254e20c5c3d7611dbcc101b4fbaccc4856b37bf06fbfb231c587ef281cd7bb99f5bb2ac8681d05631c61c3e31f506976e90a130aee0416fad01b68c760d54b5f63231f3d118f18b4d04f44c255d95e1f8bdd7cae7ab36b68c62a353a8f85d70b6f78a9dd7429feaf4626204cfab0e267bfc9717eccc4b2a2849ec803975b1237d01c1acafaf02bac8e6cb84408c327de940107c067c69e481822581056162531b120cdaa067a7d65a3a47a7ae35f507a9c519f7be179be822b1dcbb8cb7561b9d7822e936e5913dff73c3c02f74e419f8185661e60ce39c411295c346d692def165c38ea53b1d61b08f9d6830fc3c13f0b8edd1dd56b1cca3c18248cfb43313c7f91a5a7f0bbf24e0c0b26093eea6779d93fe128cb19266968bba07f75eeff77ef02b509045d08098cb00af145d1ab06a4e8065b9ae3c208a1556237bc2a269c030238d4fc2e0661c6b1cd2c1dceaea81b837cb4c7b032921d8e77a2304b70d1e9b1140a0866284c50389f581c5c733afd3d18651d84c0717943b86c3c8438defa777f0215e270c94074e1458cba5e0e51d3fef04fa3c51b150068f8daa4ccf533ecb075782104436a1333b2d9e71add8a1684b8a98d5050b62a56df930515cb50567d678cc782c3f72599a8e348c753fb3eb1e01c36a74d3e8ef8c82d92cbdd9f759fee568525f5d1b509907737b595aa2f77333b499896a877ed157d230c765da0e0597388d98eaa4c6a49d2147c5fe963abab12ed3e00fbf0e09982e7c15651ff87b3b11596a95c320e495277963dcb1e621bcc4f6dc81bcdec747a879569c1a99f23f2613e781abb0b3b330d5271f25e780560fd5cbc06f859de47531b1b8ca0c6b60b6c668b59decd66a395e6f6d7b170bbda9ad458b8832ed1e232de0e8f973af0f0e2c5e902c7253f22310740cbebf1830b428d5eea36734db9a83fdf8ec49e91c01f0edeffef4327195516e2dd062caf366209f99802efd1fa460b6122ae840d2ae809cfdd27eb403f4b6e26473936cb11fe381caa01ad7565d682ffc2df5617d16e36cb1debcd2a6c42a2d8588a5186ce7bbfac7ccda8b00b32af6e265f7b9dfad36d0f98fd5a70042f40c2e4649eadc95f147122b437bd91b3a0749a02bec4b0f31f2a256a3f59344d192934a4c41bc4f02208a967a096bf198e9021de7aa8bf646186c1c8e42917c1b6ba03920ebe1c6eff205d027f7ef7e4f8a17e87ad83a7bf706d16115aa66deb41bc486d932bfc14b4478b37e104467004ea19e5d91a0c8128a0c0df11f7e76f7febae4368dedec4ec34eb1c46a45d671850b95340e6fdcc1f69fa63858f5c9e94935431f0681d2a81230e44675db413a8b475a29bd1102febb27ce0a60f265b767a91f67a8c7ce172694f933c856b3f0c4f4a5362222c0fbeb16ddfab6bdb62293ace0224baadd06248173cb6a3c3b31f0dfe2969d42b28cabf0600f220fdfdfb126b459f8f9b1ea285bb7b2899b3352a452bd1ca3b807ae648d2fefe4595537f4f8f285a37270b96ee31f8381b96a54ee36df081bfab2b518d6cbb0e3848bdb8ad4b9bc74544de21b5d4f04a847cc88076ad7124aed1ee2014ee352b69373f2a300acdcccd58c622d55dcc95672d62bfbdba992d1c8db3b686856742de083d664880d9804b7e71002e1b76963d3d5e32737db07698dd8d67e1b1c0d89f37d62be3dcb27df8aa39a12060060645486252ed\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-8F69A33C4CB9627BF27401D4A1BC131D28AD0E2E5A317CE983BA2CC7465861A414FB72745E4DA31C0E04576DFE0D0EE834A1EE323D5A0901DD0189EFD6718049E2FFE1AFA548BE16E04B8963325AEB0CA90238C7A243A3F6AA17BC1D63836898688AC8E919B8EB6D689075E050B4189A1FEC723E0AE8D4AAE9FB6790B527A7552CDA174BF40BF91C4142B076ED8CF112A871450AD994737FD5BCF513D42DB01906636D42C6C10B64F74BD37D68A966DE0F3BBE6541AEB9991DDD0C0070F16715C01820546A014E66D786B8922E905DE2BC65053C42703227B7D8431427E3EBB0DD010DC58C2343147700D673D5707160F234E35BA24516CEDEAC77AE15C667AEFA8E029FF14F169FC0A781593E11D42E8659DA8E91E53EE0A1FF15A3C203BBF9591584A99FF8BACDC37541E126B8CDF3503AB2D1BFC0C37F38A298AB1DDA150288A8110C052469382A9A4F5565778339AB327DD80644A26B218ACE0830E56813CAA658A9F17826CD12B815612BE40906ABC89185EDDFA8E05102842CF27BF040FC7B396E7E2E023CB86AB7AE25F36DA6B6C0842126658E0315D6D8F4B5DF38CA663B55998ABFC72FE9B7EB7CE3BEB72AF73A0B2A45577C5215C42E465EECF4A4E69B6DDC1E65E0C1EBCA\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-f0fddedba6482c562d0ea6791254b7aa34da8b70ca4f0a7cbdfb0e4fa31f902aa37484c4167f74093f5ebd508e4b89966aba03065194cfe3376066b848da8faf1768c397a0e3797bf09e1dd02be5f1e77703ddac9063901b52c9b4be73daa5d44da1a59510b25a974d9c54f8f7889587c6f69a17989ea8b69f4dabced9e23442f337d015ebcf84cf8c5776f4863275532c4bad840d314797e07de00a9c7fdbb60f83392efc382220ecf3f9d60b5594da6fcf00580df29a378a9cc3156bac8ec8bcaa7de1d8d48d2a1f33ea8a8f4956e3c46f386628ca96e009852405b6333710287e376aee2ee7c6f67b1adf07f76fec3688201bd3b152e202c192db41d9bbc0d8411ca019f9a1bf1268b34ce82a7c037fc63d9c63a561003d8247c645173e01c8ef63853e4451185d45cc2d5d2da4261eede504c6da88a55d7cc7bb8df33eca74e9f4b9f9139b9f98964aecc5278448ff9f2a032226e908b32d741037ae689c204bc1f3bc07850debc3fbc839580e6ae1fcfdbd62257ad64c2d6f6945a6757242d1473e64f089c46fe050d79a082e43cfe656f09d01ea219eeb7684188fe80ad59c4bdb57905cba37fe0fdc1b205f1a5a899ab55a37c7d3e003f1051bd3b322b37289df3d350053d6ec8ec1c9cafb49fe147c01f092dcdbd9ffd2b7900205334a077b2ad5c57a53410bc5b9f32930fc6f6a270d84d4436d8c716344df877f5e523ec9e1ecdd43ac21e2c4cb8706415be0ea1060c7127d6a327eca92956771af363c03ec4a0ccdf958bee76803208191946dea6e51a85dd071f3711555cba324e5a7d7459a7662fa6cce043b34845fe77cc651883c478d0d4b2c09e76bf401f0c12721d21357546dc78d2f054b409b6a702328d720023096e911144b7bb724f1d799b0b446954a305bf46944f122867cea17b9798636498a8393bc2dd328b0b3ae78b44ae35cbabe62e0f0d3ea4cd6db0bfce87c6e9fb3364c2ee27b5edbfce17c8df592882dd057dda81855abe0d0898961ace81b0ff22b4471bf96ce814a45f7c6b3e07ef1f18c9eb238b44dc6a50d7489a1af58d2dd1ea2ab2b1a0b4b661e55bbe6dbe9314e76207ec0a02edb2fe7e8fad8141401d1f1a80237cf5a10604ebd26ca46c0ed5d8bfe96c3a1d6ff5b7d2de69402d348e5db561e531deafe29b0767620d7613b817d4d3a6568911c291c3436b40043cdef83a8b7f527aa8e9ca89dc923c2bee6e41312af6ca1530ec7c6aae798e25a6a31ecd29f4ddd56d663e430e5c1ead28a23d424148b1a8aebe9ad7faafa4e295215962d294edb7b1f994ccf43238038ff1af9597d24ecfb68aad4e4d2be280c6fda0cb88b4a1b0deacf678857d83c955115c094980ef8fddfa5045a3e38e733bafa243a91e89a5676312db195f1fe7c0f7b0262628a68c6619db1fd85d84a02b9e7da8234304192aa3db15a294dc4e9e7cb32f8662ff0a49fc4309700e0dea871edeef3df09ec78c3791fa604ad69bbd8c211f136dbbfd49009fb5e4fcbb2c995bbe361c580a3aeb1c88dbb2f148cd05fa9ced0d826e24c268b741953c8ec804add66a9b8dbda05a9296201d0f447b45a4bb7271fbd3359a29815bedd33ae87b52bb270cec2369dbac94528eb48a1a66c129793a4365212f1cbe7e24c87a805ec0f41cc2f36bb2f2423ce6904406b1362c46d51d6d5685dcc06915636e20ea3649d6d1da39c6177630d1d48f393d7093fc12415e5789b15e1ffd07e1f810057ab6545b22b24a93f9af3ae254407f9920af8a48ec40412998dca523ee1e122a5e1107a1121cad25652c1e00f6fa115c58b4a7a60cb4e3b219d9828f2c8efb04a443717e73146a89fe1a4f887b564010eeba3695164704c517d3597ddf34dc51dc460773394d8cb4d562498cd127020973bcb2315c25ad136dafcfc0d674341045ab1de0e4230ec91d579ef1a42ad69892f17dd271e9eab28097f8f9c5e78c50c36c8a02f1625ec41132ff1731e3c59ba20cafacc9ea890db35b8c9606bbd5457262d0c44c4659f933adb64fc74a884e152627cafdb20cc64ca10ed9ee16d814b506415cd0141406b0286124e37f777dc810d70d4125a72bd98a2b73bb26173494568bec76350b2b3b399fde1e3c115f1fbc99929a58a8ccc2b9cc1efcdffd210d88ad48c54a48e837cf841c9f1a350531b695c6fa08ce3148682fceb9fd17f121fc1e3275f65b5a8cd93a25d42318bd21e94ea8873744f2ab530c58dd3bc1109a5c872e61887bddc455b1bcdddb91c0ef4437a49a9f6c73fd371bc6c6d2fa594f78224646f2b8cfee3563c57149aa3a6995dbcf0e6782c53694b39b8812dd069c0cbe713fe44446e44beb4ffe38072deebf3ccb20134168702fc023c4ddf9aedd387a8bd6fcb075850cf1f29f2bc283f5731b75b68169dda2289ac221217bee3e2ed479fc5ea8244a99cb27a015d7a3ebbd1f7acef07b63f17011c5e39ccd0c025d0bce5aed7c482685c39f1fd82a9b08c197f9cc18da457ad0ad55250ea935bee50df659b2c7a501a348b8759643881a9c5555015799adafe10130d6107e0b964b48d23c909e55843b62b9dcd1dd3b235c487968c2c3d87fe29b2fe3ec7a8fc1c1666fc8d2b6adddea39ad704cf5eb6c22f0a5aeb80e2bb04f6c2c6bb9ceadcdf7945140ba942581213dba8428a8c06155f200082f7faf357ffaa653245e2752787fc1598e000eb567cedd49b98d5e4fcbcfd5c4ee10793c16a4767445fcd16ce4201cdd005e95cf5a714a9e0f648673269b5fcd8ca0cc254b6cd2fb428075a12b7ab2bb07a5ddd82e58c04676563b11dfede4daf13e1362a5171364a2f556c36130c1eadb59dd966622f8b86502f379e0dddf69a1f73f58ca6867b4612f28e67c7dfc49dcb56dcb17a79aa0e56a08c14e1e909fd21d05003ea921ab717bae0ce1f15a74a71c4d7e6936d20c7e661806d5f8a5f4cd93ab6720775057d4c0450a6c9e2211af47c57a7127f59983d824d35f48848043aaf3e76209a6cb6f34b15e5099b2c3801bcdca3a5c626bec9b6e92a67189dbcdad0d59d2b30a1f9cf9de45084ed6d35e32722b6642ab870247b42eb8f5fe39e97709141e36b5888fbf496199675274d840f15f5ffe40d74be3bba8b4dc51425f839ef7d041a4232ccb93b754c524ba141c75ba94209f9e76a0d7c8f2aa3e126e6eae35f19de3fbe38f17143d1a83830a2b9b4c8a8b0bbac29363ea9ed0fb1001f67e1501b6f4d6406e2335a61f3386c9e6a2447e3249d3db8390158af9b7e57d81fcc00a4210194ef6f872821a8cc475187780d658903040b0c0e172030576772769facc1d3d6dcec001c30335b5d5f62656b8f96aab7c4d9dceef3f5051b2240435b75797d90a2c9d20b1b1c585d89919ce1e5e6ebf500000000000000000000000000000013273441\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8a37e080550701795416f5587b977446898ac8147890840db53ae4c7a65508bbecd64901b484b1e1ca4764c26360fef4654b49d61b9b180ba16c6d346251b630e2b21822a4c2d9409a025868c3dea90b7eea36f9dfd34822ce07865fb847d73e1c6e9755cc9cd520d6120fc21ece975c4f2cbd0cdf71c565f3511cfddc2e711210192dd40664c21805c93229cac8219bc609d9388c20498e839821d390881bb58081400c000345200485e3400e489851d34468400025113051c1c821a0c08499988ce3400e1386690a022da2a051d8a2605b9611a4a8092293308bc4450b276ac91269dba648c33484d2243163246d0804660b234d4428021b004110a0641a0870c39811c4100164240019a46dc88811c306656342048c0040119289d3a8700037400cc96423896804119203196c5b120a1b02461c1428db464c62080ccb006de4286ac80621a3388da0406124123019c449e030521280642306888384281cb40c412692d3b80124117191c60d201110049060da949004974409332ac11472584069db1431d1322a243289542628809431e30891c8a84d131960082171c1326800225119002c51006658442d40b02581268c429088cc102d8ac68153442058a689d980485082281ca86c44264a5ca2686130641a310209b38048360e4a9285a2a88c02c6250889214b30094a101104382962b60dc830614a2205a0420d8a880511b09022356884062982026550446ad9424e10418408b5710093491cb6844342854b02321937410931502296655044618b08869b006a09262ed800412190711800091c33660b1785c1c04012990454b01081440819204e5c3466daa484cc3491d8143218174092342288281048a8700b190c91a0850ba771214022910241889808c9188ad4a64892b48ddb062500310643328964a20d82288c21304112394619218818156d51928562984c40a024633281e0022884b24d51948124295010934c18295281a22d60a620a2324a0a13059910880a083101990c1c102d8110054220868ca6080039115b2822d8c03004076623084898346289b24d483890db848d5100811c228c00b8240cb8209a344d4c4420c1988194b8694ca86512318d60167152820c0a012189142ca32231491824a106281a2904988450241160e2124c8b02812214221c316cc8442a12010c8c325121290222b14048a60508b201a1c2811045050336619b32220b8089203352a29049cc12900c124019a47083b66c63a8057a10b245a52f0ad7febf3d3801447b8222ba342649dae8395ca98831880c859419bf766393ec97f18e26b6e6e29718332b2fd9486ef5c149fc4f49ad1d2a2f7ff7397b44771f3e9d90c38232a6f30a2278527df3ab103a952fa94621628537a3cd9dc1a1b770e6ee8a62e0f72d187e9ba284ea8e264f5aca8d6ee3b566113310c813929129a04354a7ae12a1e0ff6a9282f776fe56b6cdc159da1f5dffd17631c84cd5fba7040450b924b93000317fe80bfc062e1f4cf7d991f5aafba5db5928850684d3d5c719355854f0ff74e42d9fbe4264e29f5cc74e717d5b8f592cb9e070b252f1514e3a17b3035f10168f86d688956a0461e0369aa2f7d3fd7840895b56f2c8b9bfe0347efc370d6bbcfe1c885c5c906934c1b188d3183443133273780dd187a066df1d1589457fe2f619265381f50bde9758cfac5fede514a2ce0861d297f1f47d512ca1fb15cea7d3a4582a4492f8a5c6dbaefe67c314fee1ffdfc251270f69b2cc654b2a77ec0219e85b5814c082dc618391d8a0e5b860ed1391a2bc99493ade19152c069cff589440481aebe4cfa286b9e15977405cfcf944c115a8866f88733d9fce246357652e7861bb3c9024e49e3b9efd99316a4eee4156422ede4fae9221334e2b4763bbe7fd7f88ef7f196685e00f4fb99d38570914e257c0f6b5da76c84c9590c418518f0825aacd131ccb8667abe7cfb428b27e4732290edbcd6f207609a71162e7eb4f9c370bab3de6dc0e531fa41dd63ce11c42bdeb4cd1a6b34ccefd8a9e78bf0fc924070e0281dcb67cef5ea3f4da04b9bfe85c622919e7de5fdc1cef8969a7484ee87bcfdae4d329d4627cda2a05a4334a1b0a326e1ea8cef839bd5317b7a2d84ba7737f4274e9258cbad6d07cd611a4276377f74b1f238b5fc2fef9bfa18c8196e303388fccd2a582b431b50de50a403b7560f31eb3b22252fc4558faa9a3a46e62469f0536848516e820c9c233ebfe1ace57b42937ae2ab801c5e9ab16b2dc06edfade1e86b5385e8b11a782ab21765279a5584122fbc8e85eb9d08106f8702a31d434e44dc780a05d2f47ea8ba5e999096bcfe20dcefbdaea955b08506fc3c7e4a912686d4d0ddd96e3db254f0585405ef8472336129d348a7c98be6ae4fe6e15068e76926018837e3d330bcea69233a6b07eaa5e0e773b0090c5068c79ba2457d23f7ac0f70a4ceef3323b5d4bc10b840b2b7a58444d00212f9fe767a00ccb3b740fd4f7502f12ff86c22aec43f1571c907b6e317ca9fd25a4f10bf5d1e839809742b0f116625735343f6337a77c1a9b63cbad92877a910830e0336010b8794f28f7073f5f7193aaa68f5923cb3700cd3283e912633a8e406067397e84788f067065d7f21a265c8ed878df6e0373c32a2aaeecf51d97418dc8cd77999191043263ea1caad2f23997e6cb400aa1fd54a968fce4d69d44b37632220e25df409fa2628bf17d39c4a2fa90ce1d39027177aa445a352344be19cc25ca0cab87a456ceb256d0928890f638d3f8fa046ccdad16b49ae0e71c9b9b947a5866671a029c8feb90a23e8273f351eb407ddd7dda03d30ddbe9750a05a6158ae14b84330ffb20666d17d73255c5bafa6a02d9bef615b9925aa716d20368eab7550328dd2d251d5a127070b1317ed7ade82e4d49ff9c7069dabbad20b2dbd9fab0978e1114f50f9ff10474906c3be4118103b8d4a2a576d5291685c37627a55fcf9187e9385a76429726646edb07ace3e02843212ef78f91dbcd9c54bbf5b6ad234834ff8647905a87afd41666fe007c96a2315c3595ee2196091c0ef5e0d1a3749d7957c864642caa2b52bca30fb62e455ad102b830800d1e01ef05acfd5677bbf4030a8800ed9afd9fed444dae96e85ceb9bede5b34230ba8030e887b27a907ce533ad40294cff8baa73483f0a6a346372172b095f435eb9acbcc2f6568d9f2e9f64decc6f0c584a71fa128de4a1f5d7ae55f7243fd83ba7449d4f5d1812dbfb7d1e49a5d027c240fa71e5d5636b07a4c0e65a168a0cb17a9fe088c86ad0913de787d2cead5930b4dcc2d097f8ffe8a04a078bd83ba6a6282663e0d821e432e3574861191aa82b1322441402120fe80fc5f60f05f4bcd242693b9fb89f0856af628d69a21d5a046395092c20c5860941dc4d129b7a2ec51fa56149112f0af7c3afc121ffe7caeb41370642ee8b4c3ad7f0a1970fdd0b37d13377a52fb4db0fffc71a1726e63dc9b914bace81506d320a26c8fc946cc68caabc990bf611e2cee065e55ff11c44d95d819c56826e61c088e24b2e01a697be804a8cb82be56b097039c57a854497015eddfc1ccdabe6cb7ac7b3989bc1a51ba9\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-0692e4fa67413edeabd602bff25ccbfad2e3402aa7399d8a9f7d0d6d389532019b7d3e63229d12ade7d487f1cade7f9533fbe2eb22a810c94b814a923ea83d7bccbd975af424bf5535f235117afa08156650728d96283a92d6276e34f864c37f8c11674307d653060d8310c0c7bba86515e051c3b1193087df6b22648ee59d6bc7a8c1b509b71620e3f7b5a0aa445f628e15e0725fb49e757cfbfd3dc5fe92a627bee707e33537fced3489e58fa73b49cffb2df08cd45aabaaaa491e77cf205d5be4f86f5a8d4272a5513ccdedfcc210fba346322ffeef9e11dfece2cfb7b854eba1ab581cc533cc6335b2195a20dadb86fae9efea0ab0c7d17710f8b0d8a157272509803c3b49fde1063e9297920bf245fe6502d8bf0a9a1f064d5a58b30b5a14dda6698ae37127f8d867f9aea40e93da3f4af04b91caacd66031d03c0c7e229ebeec8b818f4c970acd5c4dc8e17a3ce618ca96f4ca29f46f5e4059becc5f16ee43df8ba2ee1706c41621da8530689b42136b8a62dab7c691e566b9d48a28b45af799af56bcba07bc6044b64253e9a80e9b5ee01e8af0ca627a84d1a2a7ca9b0659dd1a60b788e5f6538a8223973476e9466459fc4f20cf2d1dab3ab137c5cfab433c436e7f3a6a681f675358b6721dc2850ec7b43aafbda90d13254e4ace6016175bafc1bc28dbf29541639527f246f6c007f41ed1fe6c0329260ce2ecc19395489b5c39d66543c0609120449037f321db95a85be51f1d01a485939390c47b53d82741edd3a5febac17ae6a8a4ca45df32fa6875b4e907d544e529ad26f29b6f923e21acd7964fe739fc1864d72eabe0859ad5e98142ead24c91167fc072a2c2673c7c5bf6da83fc7d662283347388891ca575f275907d06bab987ee5081c2ec808c81c563c902203f8d525243e20b5963967bbbdfa2e8ca9ec8ed703d8dd66c29c8a550c4676044703bc93f969e35f77194412bfb20441bc5e89b5e3238b766940779217af090e0da162e0f95761f63e05a378d0424af4c899a0a68060d9d0e5a035f6ecadbd550961850ee9345111491140810e2eaeff08d8a817700ab4c148c95086ee0663c4261b3cd53f8ab5b5841ba8cb9be8c5ad146d8549f21750be69951fffcca492624e136ed58a5e81cfb01a2147cfc5ca07a0721a38adcd25fed771411c75a5f7ff37457cab19d866b2da0fc45bc77e122143800546bc49f44909042d96bfdc63ac60f09bf4a75e171ece95bfffdfa73b4e509750ec6579996d0c83d59afc88ce9af26715be98cc8e6d05a14188a0fac6af1e96fdebe8f10b994d50ae6e84be257e6392e78d70441bdc5de30a1a4a5cfc7d5637810651fd471e162df2a76571c6d3df3b227e89cebcfec352d0f1af41a29e993af22514960c64dffc72a9819a6092150bd440487108024f0243db54ea68881d1c99b529ab529ebca98ea690046b1e37f6f1110686f6d9a7a725aa115c5e9be4189eba063d28801ef85973d0e9eb15179cb64378b6a5304cce09c82864bfed361ffe1702a9ff8e51a214b584247b967e5bb7f64b955acf25bd1073179776d9c03790d46f828342b90ffa2a45081184c3be0caf7aaf6c354b698e9256421ea3688c6fc18132d4e8d956baf9b821e64a579b1462ed4e990259867899ebddb19a861b24c20c2b0a6c274a064e1d1db366a293673153752847a2a5acc23b573ce0975655b79fe1a1ccb347773e3b1c5bb3028a1508687d17f9bf86ebbecb3086db5ef2559be02a68f1cabb47eec1671e6d3d35b65371fd5487b413fee14691745d0eb260c9008f07b5ce629c6d748c452c3131225f8c7586d99b2122202860f6e73c7def4401919e02e18471d1fd874b7c728296648b5ab571c517dea55be9f9ba65ff2cb349576a76030789dec17102a375ef8d779f2f2ed17be8fc41b84b1ef69ed18cefe28122127f211ee1abaf2a4044a3b1ee653395141da50db99dd3f73f85b5c0158a74f6f9707c7f62beffd70c068db1d6ef686cad7bb859c98049935e73aa4ea76c3225d4f19b333a4290ed0d723c6192034618fe3214306536741e20b066a6b9190972f4c4722534bf760a07e8d3a45dfbc67dbb8a5874332a4fc0e0a0640ca3999b93d34e4d8731957465e213577bade1f9b371540dbba188674ea205db7b244c77b6a772caf69f8b46b7b05439a852232348ef6d437bf7c6c79a4c0520a8ead1f3c00de2a063eb5a1e162f4db1ee94f1fb94f56f62d951da29f6b3018485c4a5c2c5f8573691aa096d8cd2922b66c8b7fc828d49e92a3d648cfa8ef524199b4bf5a8f15693960c5f59862825ccdda554b17e9c35f7e6a24365508f5a23c6ae211e3db71740fa444f92159c8df59c4b073f362cdb658842466efde20e9ba0472e2f682ecb655961ba8ad7575e8b02320ab6fce9188321816968a15789977084409d89b487253c778ef1ea1a1f47c750e37138735bcd58f6956ab7c8dd1c8a7ad35067c0ba0940b3b091c362d3165007df94167f33e0c660cf02ee5d6ed90c8ab4655ed47655d810751dfb2f1e65c890ed24c976bba0b8a998102d660a05325261b38fdfc82ba300683df5d561f73a11fe6f06425d11ef4c6f32e6de2ee6081a9b772e07614866f54e63ccbf7b1d9a1c3701ccbd1d9087241d8e2987203dc798d9431b8ab1fde5ad788db13c2e996a1d21b1559cffe3f7132e1aa83acf6c517d8e8d719076a36c08b2c6afbe5d23dfb9c5272ffb2af2b8febd51946199b90f98e7d49358057fb881f4e8641e0524c3471c0f6bb4cf59bccc7dcf09ab2c2d8a783710c982a35e4512c30e1c19bbfeffd992884ade3dd2a90039ebef2c23ab98fdfaaf6ebf34ae7fcb7fe742798c50a49d740244e65c49b22144c05047061e592b32ab61733a73b55ae04c9f36273dcb2eeb4872e7b7d009d4a54b867613ca0f69c4e7756a48ba7f9539048d495a578b8a76cac198d77aeb6c3a7dd474390f91faea384c94cfd73486ec226319946fd829c3ced266ab11db84176c7f67502b6d50ddf46994d6bf748f118045457e3ad7192f0b03c2bcb2455d018bd0ab1306b473f3761fee60d941637c562cdcda0dd5d5e86af9e95bc22570c07c25d5bbc6f1ce04be9e7bce5f7f095afec8b7c4cd930f9bc106e85eb8620668b52c9d09897460b1c8d74febabd73ff9b730c291c28f1410b442d91c533383ac3f2f41f0bcfebc9121b00015d8c506b2183b7d183751636da9226b795eacb2a1223004ea8a18a805b272384ea239ab86b41c556591fbabb783a6f909d5a181f3563ff1f9abe58cc921c751f3340497d94b1b2c6ced1e3e4345e73879296bfd9dade021b25436d73a3caced5e2ea070824262b5d6877aabfc0e8ecf6fe0000000000000000000000000000000000000000000000000000000000000d172332\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a15c38cf5d89e1912b7ecbd269ebc6ac156697942a3b2557f5cb631782ee2ebfc52465310ec4700da139935b04ecf37bdb69f0db1edb595256837cacbbfa9188a2a46e985e6b1f7342a1f663244570c6d67dcbcbbf4ea86cfbf98cfccb03d10c2848232ba97093e393ee4db23cdf7791f1adc46d9de05a91791d4702f9ac41bc5002645124910bc6404a1451e130285a025160a629084850d2c205d324401a963003452194488848b61101436ad2940911a36d04a90c1b05708986881a97051249291c22325a948dd1462c19b36d03c74148c08822377263082c6038450c28889bb60da240285130248002685186601ba46942266ec2b484d30206db041203301193183261c42519c2290b0152e4c08dcb2011d1889119a7450b2548cb222e49882c4aa664a13848099851e2026d54b2219c800959381122010924349053224220060859406009274ce1164dcc360cd1b810d94032c24662dca84d43122a11424c180122838811e014060349814830320b132e2285699244895a36504b241102954de2a0109ca6495ac00dd4264a511222049440d3460cca2229e3321108054581902d6036900c826cc8880843000c64384262326d1b408821842dcc264c1399089b48690b3970c1481282142613206252226208389112278c4ab02dd8c2604a240c53a20508c5241cb48514c869d2324a19318a59022459106c02c929e1264ec380009802125b16529844010919410c221098c69012108d20002cc0346e031091222131908020d9c22400278421a98820938804a4894446859c322d82287262940503094aa0c22c20820c22b5855aa42914850c20c680c09661db126221324a19a2694c12025a1291911629122171c0406a49340adaa6091929714bb405e1108e1a448524c420d1244164302c00432acb3024a18225cc0869520024d2186614846dd2b66811c311e22866093225e1b24902c14c131165420070a032715b848cc032281a2068da226a519641e32464882631124952e382910ca06411456c84b24498384923a66488b208e198088a364408288cd01401e41400d282318b00469bb24410432541c668cb4426212910a002260aa8450b262893b6444ab0005a4801e4444e81c830cb8490183931841820813285023951c01824914289c40406c1304054a831d4b61018998d1a368911b765e24465cc1650a41251dc0812e1c00c00b5650b1229c4284104c84588a271e3188cc48608001349d8368280406514b045ae75b458c51bf83c97926488b9319add26f6fdc0a6e6b427d7dba22425aea8bdae2838ce001237c886d3ff6d54cd7c7e3e6af667c824a63e53772c5ec84d83519391755e37b16b80fad2ed94725bdddc3486bafb38e521839fd4ded253cdaad925e61e613f1aab1a448212259009260fb80e0a7d0ffd726c7a40d462a1a3fe2f3e4717429bc8dfb40f332bd927d064ea025e002aa2210eed1a457ab68bc0248b68325537c328af312744d16cbe8ac0b1c9ac1a3a79afb3109aa934f2a21f45b0c5d6171ee1cf71db9940d186be0df7c9d8149aacf1f01d46ae77e41635d2f73202393f73e7b2d14ebd62662c94d65f1320f8802d9486388ecf6b6a93732646c8c043d39dc1b5efa33a72c1fe0bb345598724325d3f921694d0ffe115aca5347f73754d5fa7f601efbc5217827abcbb2ff39bf453398e896218f821cf5a0eaa60048e1329f0ba4db933a2d6aad7e1de6d011db3305a8d6a1893a55de3073a5e4cc381f74805d163f238e81b55cfcd3362b774a3ab1f99823abc8d9801c90d8597a8feb3be962b9552145401b81a4febf84a269bec2fc81e1e77aca7db60f18fe3e42eac782247cb617578863120284bd8874f798fc1c427cd2138a8b5b6fdee8a3b271ce23e45dcb71ab8e63040274338179f60729650a245fe491b25efad8b000b91cf551afeb7cd7ce185de74a2e79a57fbc10f9afa86a869a5261e555a39e814b72bb251277ad9fb91d8d1565b3b0929f043cc4ff692ff0b1dd92530904521a56d6d2916f1516b09d35cb7b03e5b40a1ce80a9077ca6c2159c8eb5b259d5edb6d800463fedf135748de6d2adf32eb6be0637d567ea71acf992512ba6493ce3f318bf7089cbb195526c4b01b43752de84247c38a7a26acc2de492fe300fd19759c47e87b4587e4a6f6c92c3cb78cdd20650ef3d2bbd33388129cc01ea69dcabfcad0bbcab9757cffab601b6058e0424036815cbbd337a7fdf4b5f10f345ef80b3f357dbccdad0c6661adedb7cdb49a796379face0861a1c3ded98b63042bcd670eb19484de9f7bb5219e48eb89011ef3ae9973de2c95c84f6cc92c09b84d32da39ea91b9990f1e5f39a9e0380769d5c0b6434d1a687d6eaa0c199ec2f297f47f160370e22bc8dbcb127ef9e40316fc5d6fe7ae17e0b4a5a606b3b717d2ed49cea5fb905615380ab861e051aa98b6cdba93b5687755ea3c94dca0dd3cf0a23a88b2e13126931afe60949c3fa2ee88b6f33ebdbb1dfe2c4a7b09d154d01edf95f93fa4adb187f8bcbfd736e02357f5bfff2c393ee27fbee56402ffb58aa8fd9cf0d51d6dadbea4ab97057ed0c7308eb93c7734cdd5c1bbdeb97e57ccdeba01a8c808403a4091f92c6f296cab71e159e71b7b7b0b38ace2c4129f8d2851a8ed353cb2eba0853e2d3b80f39646a6566ab1294eda5f39c211a130d6fd5fa66372c96cad36c4664fd5b6c43ace7913c4babfc343dc99b87d67e1d4644524e5f62573b44cfe62fb9718be0ebbfe9c2924c0dff234898c5378565bee676ec0cbe2b50abf191ed15f3125987af4e0d78a19e5208f1cbc8c73d8be34be57c373aade97ec18dbf4dbbfc06b976261cf9b1e0395997eb8773a15dab297f71afe40d8baec46a96143d8104b7385669f23d1497f99a525f72a278ae4ef39add1ac5ae5c92c1fad9473229779cfb9440a2412ff4ca5ed6c2abfbedd16bc9585c0900861464c8e489089102abb0e585352fff291fd6a52aaa187f4d977b6fe3d3429c9d46d79e21508e400732d318cfccebfa1f6f5fb0f2063179cf1df2bb59323efa12766e81a572ab221a06e5a043808d43a2275d9d51013f91a2825e084bf9dd5e1e3c2ddd5c149c0fb66f80b2c90dc09d132bf834156e605f33f0091983d600fea8cb5710414f60536a3f9efba209b3eb06b597a5eb6af3f80f92b12c9ad310dfd1d7a3e3cc23444542d351a3d4b6d08be61ff43756bcdadef51bd4aa335a174073ddc551b661ee1c211866a52bd0ca197c72078803325956d78dd38a9247676890f46a1a38630048d266e059df2b9051b17f8c453c532a818429296bd71c91c446142313e399d08447610e941a9bc7d225770a075a955d8ae027ae0bf880862ad81b3d2b6cdd9839a7bc9da8ecfd6c6d56140f0cdbc8fff13d8fdfbd8ba47d93fdd75df792e8428460523fdcfae6e4419f38e797bb06ddfa896576a4693bb8046bb27042f3899cb36da3f8650828b99b6945ffd6c7e31595ef679a1277be4e627abe37216515afa2b4599b7cff8d493601abf2bf09ae9df92a04d34881ed1efb5bfcd7a7e1afcc1e40b5716b3cd36d98c91730b795df899c5c8c26a7d74cfa8b1aa90c1648\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-22AA98C685E1552B525B4302C943037F668279C224B6270DCAF2B06C4F4AB1254C48DE253829FE6DFFA9CB6BB294F054711BAE3FBACFB900CFD1F0844E55D51EC6F697B998759B14C13392DDB6F7DEBA77FFC22468781CE402\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5129dae7c620ef4c5d6b0e0f7b43acd806adc035cfb3901e162be14f2371bba72674649e2004b4d055ab533316dc520afa8c80e5285f40f7ea4ef876e68b0aa4a559ec2363032efe5fd5a1d5050be8221c24b23c403ccf71bde5410b7e5ded038255dfca9439992fddc4fddf96654c78098c84e0182d954e204510bc7e5635ac29cfef21042bd52dde771a500099c75311c8657c5fc5bf303b7769ce8c2de7548b388224e727505c42e6bb69d48d845d9a43e845e7305a098657385307ab23c6bdc70de07868ecc1470b98e2da98fde4636af76fddbde6af2b60b4f27e38d4a86bed60e6f995533261cf91a618c07df0f659561f61bbbd70dd2b020cb04ac1fb6ee1a31ee4f4ae5d0bc2af22d60701700a44f2e8d11b72f4d03b3a96e2fa491e6e61f8dfd3ca678e4eedaac1e6bf418cc4a34b24bddfce3975d84740f7fb92ac2dd7aea450f91bd6ced924f7204754026f649868ccb103100b79d3ab2fdd2f916a76a6212bc583f1f5e541dfbbfb10234681c42ad56a95331c90f5e8b3be82a5b82ed4292094d9d60569fa760628e082740bb2da0a14b2516dda632c007ae3089a2068d2ef48b3f713999a699ab180ca99d7c49c4a0f40b908dc51d9a17db286721f8541839d6acb5eaefcaba5b1ba21e5ace4be0924eb0246e4d195a6eea6e962bb07bef9001a23dc0be7497a1ac79da047ed45b4c38196100b7ce06f466df295655076d14308d94d55103d36799a0683573768bb6baac4a10bd3120e9d47d7798121ab46521d7de8d1c3cd9618347d8947c47676c547231e5be77153f02a3eccaa99a75230e45fd4c1e6a6f951d1a5e6c3be098caf4a16ea3ee88473b1a8d91c0886685409ba9a099bbc0438fedd280f459de3c9c57c92609a865add4cfe76eae9af088680f92a68ab78765f7ad0b95aadfc0a91e175f07ab1f0887b1f448530866f002fc089a63a2e2d33ba63ca1985737ab0b9a73d23af11420d62a8b619dfec0830cf62757ae7f0402a4c0f209d03ed8f1731db5079dc5671c19c5bef712d34479b7f879dbe694e1bfbabc9c05109c615be763dd9ff5ffba888f88b62128b09475527d12203ae67f1ee8da83678b8a4b7b16f7700f919874eaaca48c10cef50a0f447baa17dd19eda59a1f71ad1cdc88e91fd91424e8c668fc93690b9b5914db40ba677a3c71a6d2cd05f42321463c12d55de1a717f69c132dc35e3bddfc23064ee2183e175e1ead1d075c7c1115c8cab91677ad6b483d7151010a7314ad558eafc3128c2dd590aa4e32e8c86cf769ff58ca5f37ee3a4ca0c9f9b2c4a9cdf2a8ae52d1d09110245a8884ac52c597e97b0b0304ee706795abed33f2f1885973253da8728742b54d4e908536c93ee11c1cc36da21d8ed4956255c0a28262baf50ff4a8df767e71a2d920f53b25084ed2cd8069fd13c0d1ef81f6989c0e93609038e9c6174d2a9333b3676ba24886917f32b7316d45dc6e99497f813b599d0bacc432ede0584c654551d3217c63911654b21e0631a5f7abf66d48b2cebff62cbf41ded241a59816fa9ba99cb29a9d000873fff81c689ee95bb9fd31a31863e1bf08fae8b27169c7705344b7085c917bc4434c9bcbaa27423f634233f75b82ebc7adb307f6cc3310ba95478572820973732f4cd3d1f749b728605ffdf23472810d01f6f9580b3852a5c2c7be4f93615960541eb2dc4d5557dffa8646d916370f89e09947e4e14092073357283fff846bd6b83d81092639de3b6ee260770b21275491a6300c12d5ad261f19d8081c9a659bb3f45cff2dc6c04313c7f3fb1b2d4ca96a603259310628356cab1431bee201ef7181f0f9d35e13b6f89a3698a56c3fe08a76418b6ea10b70bb2c0649f7b506f4b15a2578902d6df4065d4c3e79ed26a0d965e97b5ccb47110cf3317b7d90abcc9c7567ad4f2c11c5ca6617e643ee55096894c793d18adcce74c19620b112ab80152984de200d4e4a6ee29ce266b47d662accbb42fc74e7e088138faeb06f32e469d019979cf0b55aec3f420f97029852379417498605cd513fae94c5a5bdf3eec29c54634b94c6a96b0087ef2c8b2e32ad49144a70d27026a5900f9bde658645190ad83583ce8d4a174bf3956f3a581d7e4ee013a4263172d09b3e888299a06a0dd4cdd7e2a118fd753791afd91e0acc9eb1e4d3322feb169e47ac2e9e3e47908f293cb7988387c956806bc4e5bb9f65a84cdf2df9376c2eaf3ebae6a9a710da2083af685a8de79e9e27143c6894a847aa9134cb184b7dc7028b664246dda558891bdbcff3af3a5e0ca8ed06c1402d31cb5afca6260f4cae55fb6a6781768e6a1fbeedaaaee620ec0b7b964a38bf46651de29e4ad7247359df1cf4e50e71f691b73092a2f75f4669a145ffc5a51d51187f42dba767d28a39800789c88752be0c0e0b5aa2aeb3737f1028db4fba59dfba974f9ed8734a57f1f2db29d14f708cb83fbea9e4889f6bfd6f09d714ffe825056215be601bb8b6168d787a6d17335b87986913ff6aee38ad38f571435195b439cd82930a3386ba6e304b72fb5cf04b1ad8d64d8334f5ce0d14718232c613cc12ac1341706f829fa50a5c3010f8d5daf04c3bfde5ba88fc873a2e018d274bcbe85a9559eb224f6c23df124263772aa1262d9932ab813f50317bd7d4a6b0cfc207d8dad53d193d7330c9330d9bf866047237df5baedc69ff546308d2547b5c7f9e0909ff97da474bd3075413b94cf97fe331201f2cb565438182f13acb95529fa6cbd18ef92dab1bd8522f332ab5f375fcfbe01a83e38eef6381a032f9adb60b59e5eb54786f5dff4f5e003b79c7e119663c38e7e9baa0199d3ba32235166936a850c57227b1a16561ee407f7bf09cf6671ce0d0ed0f9d7f916a0ff7f41d8adff8c42b8f4640f1488841cd3cc1e38918dcadd752318080b4f15e58dc7f79aedf3805e1cffc25bb01591f15f54155c59a798a8bb9d5247eeb5d9bbb3abfd65f0bb65f119dc05cc0105475fed4f006e61a1864a29b53770e5b3cae2fa13b5a0d1b05ab9db868a7b1349c9b31d1a1abc19250be50627e8f7283af7d12c57a1c110cbf4acaf5990621d5c04729d475a97cf21c5fb252f5f1514b8d3090cf6e4e22a0146fce697d88d0637b3a60e77b9cbf527c4269adebd5eaddf12633c53f1ff09d869a846d3121371aca8252a5ca1f4fb1b7afbbb3256e53a9f25a3dfbb3a95e9beb67711d27689a28aac998b3129861d9acc72122d43c300bd58d934bd9aaff2ebb55268b94fe7013aa8670a89b19e1cc5d201ce2e73f6bcd8649a18f8caf1af021d374570728690a6cff0f3fb04050a0e17344e7483879798adbfd2ec112325282a3b5d6d72868c95999da4a7c7cacf141a1e2c5e657d7f939ca1a4f3000000000000000000000000000000000000000d1d303d\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-85c8fae58f6c8a7690e2098cdcb1e487e83a1ff669b31724113a0d9f796a68c860945d21c640c54b863814c3ef5a180dca61d3cd000d610ac6b0e25ca8b73b33df1d991902efee947777975b942d55d9af67fa96b7e45dab6fd52248361f3197b26baf40426b4e05c81d1138e78a7c907e39f7c05d0f3870b4a0cc9ab408d0052298105b8040e3c028142926488888a2a4101b2081d14266a1404c11032e5c1864a10030dc144c012509588604c9200403152284204e99a4119392111ca66cdac0100a086a0c086ce326261398489418889ca8715b262d4090881b2944e238065a9891c1300944262643a888a04826da3070ca40464a8851481866da28468a346d1bc48599a4700c305110b60088266560465120180e59927091a685c346528996309430320a38118a94714b340454108904326a09944ca2c640942492509270c0926090366a403832098648c032801908646394291416685c822da2366d0428841cb2501c99218114041b0981c2104a9c02040ba05122236e1410045a304419460a10184ecaa470e2180d81022a04186122a241891828ccc82c04212d110186d3186880b8651c335211c34499a66903a50c840062d3a23043440602c56108357110234121c561502828e4480221281084c84d93948002a32521254c22b730e19048914065c4440408118e0290892407211820119b828ce3205299b00524c78821a61150c20d80a650110012cc262aa4244642126543000d8242288c38016124601b072d0143088c2450a018241b212ddb4032cc94412416504b14404306061ac54544b600e1404218b141220405432844d8c641930652018881c2a81124b405d39821211450db065211c26cd41621631884c0b06c9c366da1240913134558a00818409241222452280120838d0b22449344210910904392715bb02922252a04c38c8a10904c047264484e01952122994c0a2166d8326a211522019540611866a4a80022b70dcab00d64208a1c28841420891c18124934320a330a0420804332921b476c61800da2a80d14c8711c4844c3966512900c08093243a08910318062144c8b948d931648439684c206288ab810da202d1b384e4b364e4b2461da886d6424691c348e8b98115218859b2669d04800a2449089240e9302121b4765a3c8841432040c8808649020023428a2c2049b461294166113106559422258144d500408221401e11822d4b210dc482c1a064ecc900400210ce40632113530040620d8d109619eb9c8ab718f85d404caf02e2be1703a4b04070f4d1261a153069f796c9295b1f6c405c47034bfa4fdbf2840a939322858cee0056ea8d7ccbe8c58dfce601cbd113bf5e8213fa32a73f07430012ac8ceff89c87907f6101e21c8dd4617a83509cbec27c7be57f9394e067489755087407fa69791c3c2aebeebebbbf43e8345b772b451d213135a0572316f52008fe4ef5812bc0c1d78e7660986b337eb896324598b19de9d6d3f7a2d670223fdd4ad7f41e46ccae6955132bd34723dc8fcc37ca79b9b8111f1461731214a158ac65a2a2ea9cd5a856b6713a1e07107f6b11d38320d4e51c1144e91cfbc89dbf4fc56023da26530e7614ab1c7c9eb5e2491c1f2a0abcff2e4d4fd3c1e39b061d390a60b6adb103d1ff198e70f945018cce7af3c25e58935b340a94423171cf610c57ffa775172c0fd3d4fe30c33c894e8b634f435d47300751def4d8f20aba4b2ecf649e52ca40562cb7807e5f43718567fdf09e92d444d0bef10961e4141faba4ae1359c49c0426c6f05b89c93270b1cd8dfe77fa865940d5f2e33ff2aaea1da3165e3cc38ab8c3149079ff747edad263a45f5a0dd55de409b611c2da6fe5b0ce3740064e5c9dc65ed9facb892e970af44646287812611539813aac695a1e0466a12c6c0912c492270e9f19728c9d8b68dca842d462ad41d914f8acb729e37e43693c39db2057c457b12ea78e6c4cabfd0cf14089523a60a5a223b228f8c64163b003e6af0026a7cc947856bbbf38ba43226e4857bab84d143477a40bbe194ac92ab0bf2282fdee0798a5827e2d82662e5744333ae9fd9063310a1c5f77438789e7cfc96c3ae961cda792d572d07adfa814ea068df14782f5dcaf3173a5246250d0ee9b4fcf3b145f2eb3e3a4371228af90f7737053496307704db71ee0eed602ca596a994a7de34ccaaf15d987afad5318476b826051c482965ced549f49ff07fad9001ff081fd49d903e18cffc6c824d60613bc4e8433f3eefb0ec666ce7d8a0f8decc80139c77b18e60c2d8bcbcb4060cad940665f9cebb9537ef55c18fdd474da07b3333e0cc6144f9069fe6496da1f9c60eda3ae7ffaa851d518634f8e80fe1fed6ab797289ef2d36910a17e3e825f7fd91629c411b7747d4e64b751540321c1b83e5146da1cb94bed6c063e26522695bd167d0fa5c455c1d3b7544b1b3ae6b5a080bd140c2709caf4394207ff5a08ea14739af0199328f5ce29fe31314eb169c6569d0197570ba2cc9eb6519d70d451efd270ea6caec116f43c5295d6504422b0efc8e16740626239fd20b815af715ebfc8e552737f17fade233f9674ab47d35615518b17d2b5f8677245295d6d79520ca1bb2a4ef675fae5cf719c99e86af39879c576dd3092f6a13471b248b10e3d19ca8257a4f2b73ae373f37fbd7eb79b97e41820dd8d048bf77d6487576aa0984c399b8eb247a0a416a50f615ad80fab612b532a2126d47043abd20198c49894b9a265e87ec93b519793fc363f2a1028123bd72a25953e2402b7bb6912945cf8b540821e173c2a606c448707f3b7a6a2ed692cf87588e26e08a6667cf281638a1d6e3858d96563b29058988ee461cf1f1895cca095f116b7cb35cc1b49ea3f94189efb5ed82e1d52574d269b4370cc235a3edfd4ce0d4e945b3cc5f316740954be77796d54a12b1be196706639de8851fe42643a22ed1b8c640dfe5fbcc15b402c7ce42d4038be2a0f8fe5a340a5492cd65ee3af3a03ed1e25452663d195ac43d696eddd08d47a64c63fb8572edce217f894917f30035c5c8c1065a2ca39a73f7c3172e7c0b4387cbae9123437b0c55ce5401b4a965362ddc86b4ff3e3b433ab15cb2edabe5aedfb8b9bff2e4658c875755fdd0d0a615499ff59adae936f0f04e086f9adc29e47b7e4fa8b94828df077a73d8a3651a23efd8def526e1a8e0a8a8c1ea4abc5983ec20ee7c530269fb1f23554d79092c24c4bfbaa7bd60e271b4fff69f48d3ddd4ddf94ce3808135034cbc78a2cd31488a4a5e25a81bd41edc5999dc1fc4767c9f82144934eb0233044407becd09e0aa0e0d5b531c1c010ca35b97da6cb9709b78cc0d96499cf229862840bb1d03f561addbb3f8f0f1e6d5c8de369dff715e57d21cd095a316a640b6b077c4aa6149167f11412a42cac3da1a25464752e24e0d1047c361b2ee9b6e6ccc58a683cb681eb116df43c9133f4ad39d4377b38b89b2a1abd6505044860e8ddea6332e79db6436fbbcd7f94ea293dec7f46e6c8096a127db1bc7f65ef2ceeb372fc66c7d8ccdc777d3d88cd1d65d5110a9b197d17ff1f2bc8515206346825795cc3386c9723be137b2d2a9479d\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-d90e5ad6ce804eb56c37cc30b96369f19a67ee324697634f7a40b3d150ba7891f9d8e5a7499781b5ef8f462ce1626eba1213bdf47ea40203aa7b9f6632a02c172826d96683de98ef1fbd163f817d6b4c71ed7fc9ec3a2db3d0bc692f94812d69ddfa81c15292b507d7aa3642b100472acdd9db20f19b60d98e10f1f47fd8f1498cc618a00b8c23ddf109957b78ebb9f5a7d6167fa907f52e312fb333b224c2e1b9b45ffe6027a90efea98d854ab6c6de67a5f24ee28d917caf0014774770989a4816f39fef30dc70b7e068bb306ab404611620b9dcfd40e1cc72400e398cfa342a616fbd5eb075d340d9f1d095b54d01d190b055f21d4de73ccebaec652f982535919e8ec7df3ce42f6e0807252f88d4fae025c68e5dfcd9ac0af5af610608011c630beab1b1bc760c550e79696333b34eab93fa7afc68e900686d1828bfe2bdb57332a9dcb84c66f12638a1ca4ab413efb847078b79610c51ae1cd81fac71319f8e43d356baba173c9775f9dd2569c3699a2cd2e9accc5ff725bc951b6c007e7d7b16b5f3efbde405d7d945dd1fb38724c52958427cc14d7a1f913c2c911fbc50e61a1aea400383561c78d32a38677ee62b201067c6744500f27135fd789e6adbafcd841a2796bedebe47059a8917f5eddc09eedf7aa6187f7f9e91e3893a3870b307a47da4366f767045390e1df69909d50e57ce6b2656a9f9eea5222cb8a05142c09ce230dc49edd7c4107241a4f317577c135a656071335408b809a18588f7dba155bff5acab476e99e62b0249e362d75ac201772552865f91eda373f722d19eb4e4f66c94627667af033c4d4f8e6eacdbb2a6abf47c931527c66da42f8ac3bc1a9c38e88a9d862beb1785ef9e1edcc3aac6477fcb78bea88b5a7796bc6e3e33ff1e0ca1fa73e66307e409365ccc8cf5a0cdba2bc96a7150d030b1349b15469ba21c7d53c641402776d61fca08d0a6268b43c063f51f110b8708251030cf393eed4898e2fc4f9654c05e700ca3e9d9b68274556f88c61c35860579ccbbfbf3dc367a88b076a4618772cac1c225069ed77168bc9e50737d2502d6b102a8904cb3118489e39c31507203175b35a295980cce3f9653330307583e3cbe2ec1d6e5578db4e5fed4bceb20922036891dd58b00e0e98a408f2212c5cebc7faaee235162bcfe6e482d4d1ca012078aa78bc9001a021c14e2ce86e484ad41ddae6c256f05cbbd64d99d20ca4fd0fa65d3565bd749689ded6c835d1370b047dbf1da76cb99f43ce660654725a40f7e8dc99716bd12bc3b3cc140eac2d230ee9177c8766e3cdd8d83948c98ac97b28826918a8835b5b563e887fa2ae18fd47d2c56e7a213d92533f05bb608baa68518ffcbb15e6847a776029809450ff9c0d4fa422fee078fefb04e860f5edc713412436e836f873bca3515842f70841f400db22e21c7a9c1ae25727a39e7e00e29abf256cfd8817115303a40c61577ce6e914b8c6e9481165f554be7a58c22c6a66266222ec80f1af4c6455301cbd80f5cb42d69f524d9a121699eca6d78bfc4db7bebdd8d03f83a638882aba3967f377be4f54295205b8f284a341796b4a00ce517e41ad2ac1d1dec2189a702b957a4d5d67fa1625341266585a220f0c276e339c29f58b13227021b6631cc37701899f0d7a761e13220ac0c39b5f98c688571915c38f8d0a23811d11cea0ff0e319e2bb06ff31990e00aa254e671f350bb9be4a5c78a992ea5de9276b0c542e2544d6a9a2e0339805ab40a9066352e2cf864a102406c4a11268b0ea22d029bdf694cd2ae75d9184920a9a707ab649a8f422ce4a85fd30aadcc07d3dde5b3b753668a303267aa1e43c81617b6aff5c7cdfcdb66eae646146903cf84a014c696473d0c52e19fc5da06bafc475ebbc367cd775676175b4268b42132f2959349a39e73ed553fbb50c8b213e4ae9d8682b837a3d8d938d4a4cfa72b564a39f5137afaaa442b562ff09bbb5c2faa2197f227979a9cf580dcbf01a07da6239f709fa91185e1a0d0847d77a50a4825fc0c2a6dc7140de2d4789b1fb4587c2e9b24f33d11728071548ea967622a1b97af44b51b2300c2c87d1f05b8d0e710a2ea5e123e479717cda447c0d4cc2ccfe753e6da45c38f568a8c2a82418420fa5de3fe08e196f2e2c6691b7774f4d4351c37e974721d4c505a6ba037969034627d05014a543e96956cc991e583abc9125aac8324f46e71345811f7ed8553bab0d166cd8bfe2fc21aa96c1ac168b40c61aaa7ff5461cd2c1339e8ac3c54cb1a8abf0ca4e7edd9e9842a01a91eeb6f3702be5e81936d53f11ae7d191cc6b8afbbf1f78dec898a0c30df889f43a8cfa8ce1d2a324c15b501a0ace8076b26334fcf03bb3db377d285a812f3ad76c0ecd7aa3b76f9072e40b272d514fad2d661d168b00c2b27ed394d4cffbbe38ffd1e7b84bfac69b4fca99b8f316471fd37678e4501f16ae1b2acb472c065aad5b482cc893fba258f29a90e1faa8f4c5235f136b25d1e451f20784e6b761dbe4fa68a41285baa9634f7d87807c407a9e7be6e483f3f224367caeba42f0df19b5dce47630396ec6ac6ff1b5c23e02f599cad3ef117ff74d7331facf763c39ea70c2071087774ef8a2ff268f27d06b96e50bd52eb5ab55a9f5530339abe6f07d5a27f64aa8015b5d2a768452f8ca82484113420464d06d7c61ec25c89a422b788f3bae8e79c0020fc93122f53356a9e678087f80b1938e42fbee9efab604f959b7f4d8c52d900d71b24c39a1cac0831c22907ab3348ad20bd6818023a72266983678edad084a13ee07196fddeb52c79bfb925e3ef4bae2ac564b04956c0097800546e965687584c2738a2009b0caa15183ba1b6966488fdcca6937bffdd9cd6f51424a83cb6324d2c845dbcc9237bde7126516ea59d36cf2b63ce239db57c01bce472886eff29ca612510ca318398aae4618b8d6fd9f6c6e8cceb4b3dbe5d059038b9a6b81e07f3599cb1febf3b0dae4eb9d5e3b6a3e11b24aef1377cd941f94a56f7c7f1fd85807d9d97ea0aace9d94516dd7ee271880f4a7bd18b4266c510e16f95aead24a9d3202ef331028b0f4233023aef2d18aefcb5dc66eea08013463c008b86faf617fcb6929a2bb78ee0459788792c9e3b5d3cf92371f4555c0955bc746264cf6f56edcd8bc8d044c170610fe76edf0e875f9d6d12eceeafd955e0130805963455a348ce41788cea9e2601decc02006907f5e092fa70d2f0f21945a5f24edc734da33efef7efeb22c8b142d86a47d9d5c13f93258eaa396e3ce55b8f6ce736a5010a347b7f9298babcc6d7e4fb03192d4e57daeaf7fd03041d262d47676d8b8c93b0b6b7bfe4e9f9fc0a161e3368a1c7cce7f200000000000000000000000000000000000000000000000000000000000d162933\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c298f170b4286195747d986e0de1fbb602feb53b5f242a12bfa2b7602b22358a8a23b61c155fe3630218b5ef74b2273071172cee1ff382fb09b779728674dba788475bd8daffacda50631973d3a038d986fa56e33293538d828f48d4292fae5487dff146e3e3ff99d2ceefe847f17e0274f2e9edc0c3b7a6b184d2c7d771510259180c02294d08c021e1128c01b9004906315b180d1929411895259b3285082964e310414c920c4b9611c380101aa86d1cb12c611286a498699a385019018de13882d0b8401c340a824689a21640612886022028d3166d1c328a18b06de0383164b46588487243069202900858226e181428da4640e2c4694118859a044e0301041bb4411235011195415a962499380e04c72110458523824101a929519029082064932669a2102160360e0c860112312c44a28c0b2272e3280ac3962cd1844514482a4cc26d04a1110c834c8a026d43b83113890113c60d49461014408a129725d8369020b325138728a4a44904814d1a324edab810248590c8406423c22849c265d1068de3865104a2805198298a126964084604b07043346519c1916204080a27608a144e1b2270120731c4a808a0968ce3884d2210682231481ac49180a80c582031c2120adbb4441b82641a94080aa5659b46711b15445bb81113a360203660443608a02432d922318c22054138605312220aa700ca441290946d5c405223264588b80864c4251144240b051244200a09c4101b938993261118c08d9008241b364660022c18060e5018864b40051888418c806800152610c30c91162dd1360e0b491014c18da44212a4844d22193164a04503b70c212690032661922862201106434471da324890389258b260d32028d096240c074610a36413c24494888c0b328a4b320a9ca691dc284240220d23b671e3121200a16004938c5c3288c1469121870511912d8a285114354012b86c4200460a350489a49164048d001405cc266143a82d2048061a184d0c056ac2a06d9914710c26251b33218b144ec932685a9221134541042770c2227213b909db0001010485008000c33640d2882924355122982da1322e1a280021246cd8a451903464d8144263260d9a080ad220111031258914890a1951cc043209028d11392151b428dc3628a406119ba6009194110c912913206e5030850b10121428419a04450b1871082581c22601183090dcc661d04089e2400a23044190a64401116093166090360e14859108368403414d7fe04cc3486ee59a1d7e5ceeac111381d6bf881ab59d8eba528410c1f10133a1aac55b4e0c69407bca0aa1efa29ed38ae018ac2f892be5d6f4d6099421cbe1328b07913fb0eff2be86b6785500416f14777de98d5129d4bbdc1e7d0c2dd161c3b53568ec0710fb80ff1407927b82261dbc6a301a5ab780b88d080d7e8a75e5253fa666e6499718ed9135d2658235755a107f617dbadd6ebeb40906bf2c29dfedf24ca3667029f642770fe012ace1dd503c33e0e033fb90e0e8598870a92cf3b467d667f6747570da2c86a328b1b4c769f4bd99a90a46000018a6a8126b61b51f9b77d66d91704c5431a2c5e4a7b680f053e7e1f5505d74af6a79ec08e7de4d45fed1888c790e2473e716c7b1cbd1fe9944fb56fa502b5685e75bf23ae5ffcc4d5a525b91575fe8baa856a445d7005a2cc81d0442e4edc3fc19e4f5bebabe21a6c1f2520c38d1827874261b5e802514b5df1816510f894eb6d5c493c82ee8f3d2e7b159da2022586525548037e078ee6a1ab31803b0595f0ebf07870051aeb5582702d9755b98cd30ad128e455c15a05f48ef20448f395af79a5127c4a9c4b04c29764ebaa3116b9fd10bb6138750eaf6a300d7f3294522fc92e2e95644d2fc35222a08a51e49a53ca180cdfceeebd5f6cf0625862770b338246533d35d31c78395206145f88cf17e80c13ae5b9f3aacac15d526e9561e5608dedf8d2163b9b283bad1a58d08b14a201bb0fd91fb659296bf847ab47a85cc58f5a8e9c9a5c132cabe71fe3bfbd899a60fb98b84d962607689c1295470c23df93f60ba2162dee0893230ca5bcb4dfb2ee08ababf98992e27ff92d5569cdbd77dbaa44dd2fd21e8b398525a5ea3f2632a581e7d94675a2b51148afc18413c9e39b489a6155f089cd1ea205e9b650be0f1d3befd1d8189fe94793965cbc0b118913a1b5e4de66d969317c2fe4f4c289070c663db3684b54d8b5c29d84cf1ca9b77794ed6171c945e42e808ec0709d2d284e5e022495c7bb67f215c023f97a0f248ddb6061c7f68cb0c6f688f785cfd352021ad700d410968f389a17261bd1cedf8be5b623fab823d5a27e67e68894d533742375ecd6d41f124a39fe2e3e548f3c041b61179ae7961c248a05e7ae1b3023890203c95b73e70c65413a8f2d97272dddee2445220cb6f1f69e5d47f9f8e6f2feb116d688f7ffb9afae3a6a7b7335fdcdf6c1b2f28ce98e1ee76ed2b0303f242cdbca4091abaa25275e98faca3b16d3293f165d5e653faf20d6afa94ca6f899008e31aeac9ded97911c1fbbc3de8ac9e16b20bc91a13706b427aab96699f46e5815add64be24cb3484e20fcc9b113c8da4be3b0f39dd183a483f8f6f233a3b7d41008ea66c1b0fdd111847e0abdb4dc1a73c22500b39035d78048b2a7b1b537f4009656cf7a2744737bc7066f99d7b23d0d109a2e9e679742edd3d89ef423c5c57bd2947fef985898dc986cbe3ce2e9d57dca7d4fd7d5095728822d687f22a3d7d291856451a5aaff706b4a7f68f36a753da02562133be2e3a30e0f5ea8fe18b2602ce263c6065aaf15719d8d45166216d37bbb46915da50aab9a0f7900784e7547a0c90658d5af3d8f4c88e5790eabfe578976c8157fa0fb6db133394c7f16e79b6854900fdd9b6ad0b35a877e336abb0c484c8c258d165c83fb72595978f7b2c01b05a34826202cb73d88f5e8cc879e9994be5b3eb47b336287d7c3c036e5666afa557c834ef222a0e8768827c6d56d315a61630106a4ffa250e3bfe1de6a6cfc311d3f3e48165d8fea2afcb14247c2da102e88d726f4865bd848d87c01dd6fed84e0623d564bfbe8bb90963d6bdacf36df337f00afa83b1eeb5309cd6335e4156d307a28ae3dc791210b482e9a0504895dcede6dc951c3c7ec8098de79a51741eadef5fc2800ee410bcdc2999ef9e38e33dc3bf0107af5d32236f26c31d1ddf62b6ab6628a5bc4136d9bcf62ab95ddacabd6dbd3afddf7556e83931035a6e737915f1f8dcc217e247402745af979538c28f91de1375056f0e369c648482877518ccc1c976e21abb3c8ff30853d5967655a0f7d4ab3fa1de5736d80024b34f940aa744bb427a2350e72e2abad49cb6a91a066efabd87d286da00d9c731d8348d4b094e089da1938c74185df1390646ce73c0687e63a417c0681cc4438ea446fe36496fdf5a808a8354237f4838b51182dd9f062ab6143985524f01ed273db2dfde919865c1a5d82c67c1feee76609fa9634e0056b7803dad0015a27445028e5e87e439f820042888b489b0de499cc3ba6d5aba0260a0cf24f718b013b72918909283fdd28025c011d0abe811e6f484d58b27dccf5b5fe\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-c2112c791ee26987cafdde1bc02fbb99d5b97ad71d4c75cc36cda559ba853a351b3088a5727856774fb3a100640034901b886b9aad882c879f7f7a50090b1b4372ef71a124563aaa22ed2b227f76c4c5ad691499766556691ac72d3ed717eb83c06951bc8ba4c8829b225aca7eddd999e9e6e9cfca939ba21d2f7f79c750f43719c520b344252a283cc677fcf1dc27a4dfb396541c97d7e948ab873640d1a1a0d941d2677878360eb2b703f727a00cff03547f5516d5e18b07d904e3d978a905c83b45a2a58f407a5778d6e6da955705f0e55931fb31a1b1be5196b6e80574b8e37022d4e7778bce58a817aeee7ce13c07196dfd6c00a6604e40f3d12a46c11bc6295788be5bcb2a39db2bd64780b966530496a23f9e60ab9c7a4a48a5cfc3b1f657e00aeb99eaf8ae38e723cd14191f927ebd7944da428584b23da5ada543d3c071cfe95910aecd65f7be88aa6c7bfb6e52ec3c925fcb0fa4b09d7612a8b19a4156f44d07c77eb229edc08d78b52ddb7bb3e42e95faa1b013d4861ce5166fbd0d0822baef9bb5d1f41956be5cd1efef4bd3f92beb656957c0ba51dfd4d186e4804b71e91bca6f3341ca585f0c48c3cd496a1f1736f513650fcae2379bd1d127641f1a92c0c394d2c02301d29116b3245ccfcb6ae3b55b29503a49fe6357d3f027a20c30528abe22623c53c73970090b12d994f1a69d5a9877ef15f3475cd1b9d58cc38a0289e12a09ff756c7e93bd675b2354d78ec79492051751db9b3f35a58eac539d4c6efb259de9383d5eea913c98a6daa6173b113f8d7bac440e1bc4652d1645b96c4e3ae6697c9e6e7a1332d27f28704b850cccf469f829a6aee604e0906d1b84fe104303cb9e187a19b9ef212dd334f134cdf6256dcdd39e91283e6d7f3f808fa5cebe6263fba31f766bd86fb271a524042d3b42b9d1e7729c00c6e4104eea77934fb44fbf7b22ad80eba63fcf1ac416429df3c012afd4f42984b8006e5ab52b94fca1f54fe91ddd2ba4f8366cf74597dc4c2fb1554c20ca28ca4262888d70f342b55916f6eb5a2e6df5a9d0299f2c15ca37f5cd688792a5c255e2f684035770cf4a8894b750f1f97f9c226f9c451ce0b5701a4486b9feabdd379ad31f1164706a137aa487a25c088882c282b5f67599f8f9488b3c1b0540cdd48ad57754d760880478b686914cc7cbb3f478baf3742382749edb287e867d5863fc40a5f57805d1a7006a2b45046698ce63bf85fde10d9171a618a10da3b20d97052fa9416e56ebbfc9b1cbacaafdbfdfecf18d23df346f6838d90d2f0a45aa650d08be2360ad8b3259541f86946fa047ba2cf05e9542e67307dff451a0bea83f3acd2a328f0e9a7c870dcb1b3ef6a387c208f5128951b4115aa4f58193844d54113a5d13cc6e58cc210cc4865613db00c6c515720de072a9fbc60dfb50f48fc9ee71072e14a2380b62d644dd49c7c8f5b30233434f56ebb4c00bc1106f2f7b89d6f4076480fd24857efaecb3a3921a3f9d9bb84353792bbc017ec91775660c21cc6b7c2c5b629258fe1655afda4bde38fb66d9f5b90e0f70419d06b38de8bf050e7278cc02b9b7d762dcd32245c9776da3fe15af5bde873bbfd1d84e8083a06ae1d030a7d32e9a50be599ed816e47b54ec7b686f5e8c55c8edb7d7f34302f343ae7027234205c8d3943244f91ea9c2e6f2f33fb56af3a0ccc1c101608275ffd7a18201a0cf3291320e8c1e397684c604dcb23953aac9cbd65fb8fa615dfe77dd2b7033195030b57e005e28f14b316e63c6a62d81fee131d3ae71734e90e3ca43c6516996fe169bc279e3b398e8ef8929760da3389b29c0e7139a2d889403b823b3361c310ab668167eed34f3ff6e32542619d7d5298bdf4c9e7b4849f0310f386faee38f5e94f5455ebbfce87a34fa93b808d5eac6a62b1fdc84d3895d8c78e211a7074c78262c24c5153234882a4bc043703d997a1b8ea707712ed46f6fb654758634d1591ee3d79804c8417ace22343bce4d0754f4e72e2f518bdcdff3bad1313b974f7f2b7100e6fdbf2fcc34f5eccddf570905659ace5cecd78ceb88f7fffa03bcdb71a77f975f3d13146422c765a228063cd9cc92f0031b8ba6796025ecd4caa8bab5c48b0e6f164739150ac00bbfba4ce69cd212debadd620242fd5610f3fab75e7a0eb587e4ccdd010fac040d8c0b71673f6a6165b188fb59293138048805ffaa283b9539b947efc6382c929295769bf9d5e434b9eac6d1b9ff9ac26c0a1d1f0efa3108401e4f522579e1bd504a64d1359e44fa59f4f33ac4cf3e7508aab3388cd5be219937185ef7459b9c565034c8d4920d5fc62080db0f0930630d14c285ca11e360705f8ca5786e394842230636241a461966252d634cba8f68e0fc398b4298f4ecc907f5a1fd9795e427e6de785d7bc87130d986b286afcc646723010b329e8cadbafe1a9ee23f8010fa6ae67d1bf950c5f0e6fd53d31ad52ca81dfc5225f61de691d868130bf71d6428474215c9d5236a796c29f983064a2c9f40e69efd090ba55c47313f13b52b5d9edb7206ceb0eaf57198f32a722f9a60400bf550d5ecbdb0e460c791c44e56a1301f6f6bf0d9c1ff04ef6d238c060bc10e75114f7d055b5c3c0ac2961ff42c1145a8505e5d6c53389f04b20d2cbdc56759b861c803897be3eebf932a4877b1c4a0b63c96ef9369445e48f4b0ac34bf1799075db6dbb7d18d28f15f58152b0e2e618fb4551a85f5d1613a0a908a2edbc40e4d7e9683ebf5f9f8879e415e070a8eb52c71ee5451f95f0d351c3013e160d55c1207883c8e6fc20a4aef495c4194a7bfc8afee6af3b82bbd0a32aeab5023169d0361a4449af7a19318d063e4f2ed690b28f5d0786bd6ce5f72b9a6e411d878abe616767fdae52cdac529eb07074ec518723f8f870666211bd427b5253a67e40a318563a8b2d8916a746fc47e3ce26103c437e07db67ef057bae6a953614ee7acd16532d0485ad02b4bec1b84302e1e28c41e508eac18f33f76c150c3142e1c383c28ed902dc79922749842efc4c91c75754ea5e0678a117612dfc7ea07025cfe2e4213780734c4f18e191cbd815619b41b0f2e9965499ae19666c4ea34dc1af69dd60dbbe78c6f462a20699b58f50682e9602e7f16580149797067d0ed1b0b36099a0c5732d64d1efc1f370d4c71a6e77c5d319571c3d9274444db155b11286edbb625b77d1294d6dce64ad7fe58a7808b7c9edf7699bbc0e0342dc74158ae419c01b64c07bafb6452f131bd0f889cc40419d3dfd9c7c4418a37763218498c29f19a0b0d2b3e404b525d707c8cb9ecedfd22303a597091a3c3cfd1f8fd1d252641799a9bb3c4c5c9cedee10e172b2c33393c5054777f9eb5d9e0efff000000000000000000000000000000000000000000000f1b293a\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-53a902d7abe3103058efce7d2beeea878d48063b6dc8aad68420073c43fa51732003aed7006824b025934e1c8fc76d0afe681d830c45802205474b5de6388748ac11a6112123d1cc78db7b24bc040fdd3d546fe3bab7663bd5ef49eeef652e200b8f9745383522cf74a481e2b63b4f55fd245f2e9648a24eb158069b1a0a29759b0686e184310130408ca61062344a01b04954b068932848c834408c804912a5200bc9298b00509a120ecbc86808a62d10254a5208450c842924336510a069043809c04444a0902d98102e22a95120332a24000cd9166ea3c86924401203380ae4426d82146a98a88550185201b6485b068ed9a889002391d94292dc900c19222048968421b50cd88411c2966022274813928918c8480846505b1651a4b26ca08804013960d18870491251c0080a8b086422024ec2a865d3b24c1b492204190290044a21b92882a800c000860822058a32258c00661202601b4200044104d1344683c00023382800218d24858d8090400a057052946c242200e2a628123904da362adb106961481144468e833049d8a45021a46d5884092023860ca849d002001bb22118146a49240921398c0129240c42848bb064120632c3322a2386254a02520304299b305183108c14267062460ae39409a11411a00002c3b6099c0845032509084932038200e12200c43492232621918685d224245b003123b04d0c218622c04d0b2665db309108a708dbc07108358d08b4848aa069a0282519318221332a1a284603a40091340a91022842126410466004922819b47058b89101b340092000a39465241392e10229d3a0219a364d14880d132762c9446aa1842183a40111284a21200890b82093300d082562031001e2b44c4226005994000cc14c01302142b64d19c26490a08d1b328e91302e93308243104844c05059084d01488cd2b20108978d9a1209123751d0b6809890810ac104e100400b02261011492132249c4832d426904816648b488c93944c42982d10c14c02a64cda1248ca26602004861228301bb269c3b4694130229344105b442042304021293149268c44060402992c20a780d3488a0927218c068dcc202084362823916958a08ca1b60960b660c84884a33221c80408ca960954b811949209842208c9c670a4c42093222e20a849a308609130605812919c884590006d821001d0b431a344501ab48501024911476050022e63266241362ed4362611b360d002461130451141701341681296092d2abc12b905d68c3f7eb17d160fa397ade12d639bf6fed96b90ff181d3b3cab8c3014eaf7e666aca774de4a4756fe41f540a66a61d7c48de0e5efb6b64dc7495416c50c7d9ceebbfa166e65aa83dee366a6f946173e87c14d85056fe473eafe0ea81226f568e81c6b2fb2406e2c7a7dac0dd4e79efb77adf9721a4803b56d5363e263da9f7915921778fdc9d7b441ca49f0f196db87362a7243ad8b2a2b292e1fcc34d91bb8b985b6d9a3c324cde93ff97b2515ddc90b1e089af7431d8756414ad15ef8a383aa4ccae41c56ff103ea19f4461ae307c511854db39ffd0b97ffdd773b6dc6ef6bcfc62cc46eca01364a7b10c1189e98e34a360aa1e28d4a0fbb329fcf318d382699e990d88304a96a1b520acabf3acafd5c2a8dd28d22a956486a1df040e35d9d1b6b66d261f4813b9785561d1e32f7b62b703d066c151a6795744ae6fe287d75defb3cf9622a6a98753bdd47854b12c3d919d603f2bdf846dc2200500c13caf8357ccc9b2a194d55777ffc9ae29395d9cce2ba921eb07ba57fcad946459d3131cf270e7eb9f2bc13769d7534f3b5fee9abf73b4923d635b1d40b4a953b9f8847574bfef1adc4c79d12b21316ded675e4c02b043c2a4c6c7ed17e0dd68b0be4d60dd4431e96f290477b3a058ff1dc4d3d0fb547dd2510a442b72dae5b3fd6a20fc10f31c60414c7187e6ee85e3c1c0349d15d161a339a91271823f3870188b75b5fd628a2b89da504bc6ef6bd9e15bafd49726722c90a50505fd44ec7704e9c6dd0c1ee6fed3802086d724f23bc11d0f1bb0604add497d4cbc2671c9a9c941a19eb3345a90f611a45f7faaefc88c5e9dd65c736285f4429d8c57048d59d88b395b39c517db477486b7b5f32cd9b3286d59a70762ff2bce191355ddfc1846698bded592107d99825bb6e74fe914eeaf61632d68cfe952adc627054ba70606086ee16e9d07de9645183a853a71656ae4143e2b52e1b72161150ebbd2a80c071b8f68ff67ac7b78b8df1792298ea58e6e6a538d0f73b58edeea526ab1be7d51d3b77919697dabf7de38165b016f5baed1c6379aeb31ad94e20c70b38fb04b15ee8d3f53d6a75e65072fb160177b8abc26024e74e6f620b62b321105cc65ae44d4d309137da386c493428556ccf43a53c1878621d2f4e77fe84eedba5f26f4b9eeaa151dc292f9ee1000612c64d71756523627dae08762c121feab8b81576bde8fe3a3ed682741cb5ada7b7d9037abc35552024e074957df2e48e361ae2a8e707a5f16072d9144ca4339f2f211ef6ae0a81fd4e261e61bac97a47e52ee08a8883947c3be9bf942f4fd625ab2765f0a6f9f50734bdf1f8f185d73d62902ea45ffed411540e745c9f61adbe829f7b46a453473746de0440b29ad93e17c967d767a486eface4ffaece84f9697674ab4b4b136702c93c5da872a8d4a5aa2bbb095e0734d3a7fabc5c800fa77ec325d6ef7875a57617300e938b13d7aa4e9bd41f253560a3a46f479dcc0a72c0923d25551e90f80c34a89fb9a0fa0c2947f50ba0526c61dd4795f72080881ae7a9fbbc0543c895e12bb1d6ba8a486f53d12fc694c5ed63fdf7c32a5cf8f096a96b5a0f679f1fd12367600db4b9ae01d2b3cf4e54240a85cd4f36367967646e4c0edcd6c6f81d674a571fa135221bd48d26744a02c9d1e0368dc772d8f391b985f76a91e657cc970a2acf2671c5df8b9f226b49df5db806b2123fa1e4ea83c5bdcfc2d1eaa64814ec5872b339cdbf4db240148982ca77e3b411bb02f798a22e08d7fd49a1bfdad6839d511c9a8bf2f28c6b32b32f13370f2e7270ac2c84919f0a7522f0aa53c3cdf3059e7beefa7c98bd446e79213520f2ccf91948607365d020a25b27b01b2e8304dea9a42bb111ac822d33e3bbc3c106f21a5ed8cd0c39856dca0649f458ec122a00bce59b1be66281ffeb07080e5e746c3c2ba813307207b5066dae808b944c30b4b8a039ee85a54a32c11ebb0c06f148983ea8d684d434e6200a3f713eb713804780ef113823f759c72227f85e474fa90091a9804241a647cb32778d0bd71bef5f59d55dfe18efa62ad701312b023a920eb53e92b486af3d14471b1f0bc706841328d34883c1717f94244002317dc6e60bdecc68396c016fe647c0f9bd146472660a67fd251171ff4a5e4b4a5a76b2ef0ec2d107449200e5a4bd600946213cbf10f1e8ee23cd3c34857acae9d592cdbcd1fe17f2c61e8e3dd60086bd3c79aad928e34d13c263f49b099d0ab3afd734821399207902b2bab437ca6aa478151473147ca0605a34bf9be2b5284d4484a842386dc7bdf0c15aaba8a043fc571839d78b09be8f37ef34cb980\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-214BC54C508E63F77B261DC59588A87CF95C233C22A339E7158C47931C1EFEF775EB3C91A32C56E888214F9F68D7CD2525B23F695871CF5EDC6979A677EC19CBC5859C63ADCE2E38C67CAEF20116508F33BE8035E9C47D124EEA5FD1651D64371451B6B96601E4A6E8292ED6841E483C3ADFC3DB242D1D7B3F036492741661F45232104A528B6FF79AA4630740BD16B37CD3E7C711B76A259C0845D6F87E4A4B306E939AD1C41022A7D5938E52B98485D95D11BE629263E6CDE20F63AE16CC2E32B6C1C442EF108D92495A759D3707AB6CF3ECC5AD7C02F133D689E252A26C014A31C65A65F079C622BE3B648496BC57C462051B17175FF81126B5BBB5324CCEAEDE0B5A8ECC0D710F04DC0C751318E8913F149E701AE0568B5426736288CAFECAB1779C7F4E96D9007635F76DEB4D379918447F30167F257B8BA825A50EE845FC4AF7C34AB200D5BF45B5F0405BE2347ACC814BCDC648C274C24F8024561FB66676534F1FC8041B63114679D9F4E8CB0BCD7BC4C54FBB4F9A178B4FCE64E705BF8FE42826EE01F691479A8815E2DA00111DE40B5CDE464A9F7A3D21BE9562FD9A5C5CB3F4F9E8F0D8D8A20B9A5AC9D7394AE4316181621B43D8220FDEDACE345234E3DFBA134BF54E458DBEF98923C1891CFB8DC9B5317E3B16C740EF373666969C95BD1C53F435D7ADE792FF9E310A191246154064D0E8F20032AF4823A335D88D5C2A943CD4CF313CF2999E237F6EC50F63936D0FF3F2C729FAF0232671C94785B67E0CF71A7CA5B32434579711EDF155D5BAEDEBBB8F0C6922AEB9798356714931AF1070C49BCA507E289F005BE9D8B46AA67CE2137935C7EFD192E4CC24DBC434B381E9A15CFC529D0064F057FC3AB592869E5F1AA5FCB299B2CCC0ED6750E318F6FC969E6A3A08059788102CCE79BC92804B1D08F3BA30492054DB6401EA251191BED1B8CD35DEA3A653D5D546D2EE8D31C2D88D6275D6C7B463D449DDAF586D5E57FFBC07ED5558D87F7DCA82E4ADF49EB9135A578468907BD8A6228EB723241D58BAF3C78C46451D2F11CA0552A05A85620001D376C6194AC6494E337388EA49821C233F32579FBAE6D11E9DB257C426D99516A16DA63A7BFA261F2B012CEE4EAF7C5C16C6331B79A26E79B1421371E574505F61D699C6DF33EA734ED14129608260B1233C387638F7ED3A34866D656D74F06C2B8D70AE60A0994F3D6C1267DCA2001EA781E5D6E17BECD284F967788227E060381ECC60A10832091319F225C972349BFEF08D4DD5298BF7EE11B693AAAC682F91DCDA113EFE0F35CFBAFF6C73DAE43B8C1124EB57713C122F0A5FB03D02C4128565FFAEADC0AC23DBE5BF123CBA024DC2F3956EBEEE95918B87D2EB22EB1A8ECC3B267528A62F2280E3DAEC02C89A01F5829B5891914DAC\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-8ec19a12690fcc4af18b44a46b33caf661ff986315472e2fb9cbf0db6b11f596b5d540572ff4b722d39e5685205ae44f62645ecb6a4f319b1dff9c685f6bc65a311cdd61204bc23da3dbb96f71ecb3922ac19580212e57c121abe10baca724b0acec03dbb6de182f1bf5090131eb5ced5b8cede5444055d33838272afbf8a9d9752c0536f5b544dfd0f20d4994638157e64ff51ea35539244dfad50261f282ee2fbd5fe3b90607a4b2590cc24e67911927ada6cf9b03fd482df572e6cc7441b6129677f3d3d0c0f5e7212bbc652bf53140630bb0e3236d09943796ef92e7916a2c4fcde8c9af522d9661feb6dacacce83e14a6384afaface04e3c8c0febc6306445b84df88cd91f34235c7351048c0d75b6039a102bb0ef30f6e5fae78718be6412db19dbf7536e42b0e5efd950e764c6a80f70839d356f55d607ef58eb366a840706be8f79e8e2ba251063336c819ea3fc60ad76665cd7fc8ad9e404847e0a8ccd5aadf3fc36dd091972959e3de4a5c49bf799c97fe4ac5e993fccd03994e6afd1562a564b111c52860f564e1b335664d57de6fffe5cc93885bc34ac7d278dd28efb850f3e67e810285f47e170243454ac65a18807dca131c99be1f85e34c1c6c3bd3c1f2a13c0341ca961d871e92a2353d813c06396dd29b835971551cdd4d7fffce4d32facc1026b05ce3ac795d54db67983c5bf4aa269cce8470e535bb2555096769215d3df109e2e21b6ffeb6b7461481b80d4894300400851118abb4253b9b86c774522d544dc6c6c2a3c75ce8fb5c3ff2564b9a696ad05b228b8effdf6f54506e2afd2c284d3a988857e4aa22d9d90feef71eceb135f7d6e9462c7302acde68bbc9a813521293d515e8f36aa5ea94a7727837aca76c6fcab11013eb18921091002701166c586abac8f20770e6df05bc682a19c65dcbecc86bca8c85c9175d5f0fba67b33a383987e7483366793ba7b35942b3627a33c23a9172807b578b536fd0faa8c3d9f3d90b6bad5d2b582634b44f9ea81f3cde12ebcf48999d1da8651cbc89e87e0cc049c4d1efbe3eb625ef4e09c2f879ac1eb7e20ef58544332a50953643b02a73308cd481d0582b4edec16c4f31f8ad1ee6d3575ed3e318a8df9a0bf81eaf7bfc720268c1955033bd16fc652cf68ac5289488532665c4b584fcff68aa04b1d4ee55556973eff4d8713b2c3bb6dfe6614b9e6138ce9799ad65d824159e1cfc1519a741cce18ad822de048f19e01d40287494822393bd6d321b8ec3cfe0f402aabdf03743ed8343d442871a6a56821596144f9005f72f5bb36841975970caf6df22724959ff6c8b57049c88176f61bb1b08543d03a7c872b87ff2fb7a66ac64954feec8343f99dc5a84ef8c207033bb837bdeb64c5d4674014ec3ee792303ce5690f2d47d176037ba7ad21b8d4fa2b83d6bafce3cff48e12e12066be8ec16bb2127a26516afba6a87a1f7951ad2ba40b76a800e2c27aad75f883343ca988862a6dc4e481faea5a6dccc8fefcc79f4970bb831fc514cb993624cb7eab874af102ce5e06dbaf57d37cad159541791afb1a47f9c838db9168b27290633e0cef4446d8765ab5e70c7995d437d1128c0a3b0d5c6da7bb7b3e450574018687549eabb5122a89ebda3de0763497658f160fdf054042465eb25174609f26f4755a50d2df918dfec074aedfdf151645b73461d3eab7234aabe1d19ae9896029b57b44b90654666a2e8847d1aaab3b3525952eeb5f0f8cdbc8e3e54ebbf6be367d689e7140596ba674ba940baa5b9637c685f1a1228acd893478365ce039a0a67155eabc02ccfe8f7731d8ccf754cbfa512e604682bb1be083feb424114da3d7243498be28857f19468e5667f59625902b9cd228c366b684154a47acc23b03ff98dfe0c2d02502f6c5e7a5dd212722f5c06793b86d43494003e88818db45102e790ed30f20eac90be73df9b92f5064827fd43c9be4423f61c23dd661a6fd9856f41a2f65127d555e509919b17b0be2e27bb45b07e39482877651ab5e4222875a988a9f97a6dbf9cdccad27576426927153dc4310583c9bd8cf6fb5d50a2d2956986c7bfac0f552693355d8ce9c4dbf4dc5fd6523cf4d32ff62b4e8d9e281eca16ac706b3b737c0d2c977ce4cd4bb41e5e1e2cc16e63ee0c408713ce2831e68e271b52a86c2b8bd7a9d0fba9706a55a5b62ef3eb8a29c793f7a66e182ba4ea249a90ca8988c00396c2d858e3ad362076a97ebfe8d9870a339c0a12bf997b66ff5367b4591c8b0deff659c133e4f97740802a73fb1cc6bdb46b3f9cb31086efe81f62bc087786d1e984773aa976ac597537ff1b1e84991be89df4c1ec1e29a2d72c2dbc5449af5bb95090d1159d6b80e2c5936db148aecac22d39803cead75e78a05731f382b09b51b9a9b79ca9d5bb51b78e591bde312625e52b4ab6eaca92e95edde3baa07b8d12588c7bcd8c2ca4a7e6e5a776eca1168694da493e96fccfa6f68e25cd4d441a111d8de31a0914e19900b218ae50f21ae0659f8f8dbd7f301a061b80add0697f6201ffb0d8c6d42e3926dfd98897d967e928802c9ea3cc2d3c3b9e36b1a29e95fed603f46d990db7034d53159e5a5cd7a72f08e451b5d7dcbe0437a2f20ba5cb69046e218cd3a7b491d1eb47fbb22e2a3b103396bc7273c218bd0eac9f272e6d01a7ded0595b02694981cba45020c10aad67735d5772078099136786401282c850448fbf27e71c1233e5a992a47cda05c1946c6f3cc6cec3899dbd435a1d016b3c771153f44e46bf55fa7fb3c39d8fd1bc14244fb70d4a5b8823b39e449e4d5237e0d99e49e88a85813efd60296b8bdd24d27725f993850b2f66825b9c469f212d6ea131ad96a089350cb76f434e1d2054fc083571f857a36a93f0e6f5fb80ab74f9bef3c5bb7df3f47885f3d136acea283085b4080dbaa5b555faeee52948e6a5e0b0d7c202fd036108998704022d7361ec72a89ca5008f48d11814e8420b453ec202cd6ddbbdbfeaa03ebfbba50c508c5c1a81f6f4367a9f817c39613713c6ce439cca013e1b645854e10256f48ed38c50a7e4a76d01102782d433e612ece1aecc1f48ce45b1da41962c89e811e26895a4a953c38efb620d2285c05a99c27d8e02ff419924c99daad70827ba815c68b0165fd7c4b6ca77d3db1a61f8f95d2c5e93ed860f90abc418791dcd1f95f29f4a45a8bb637889c16c7bbea2ed4a87eb11d4c2d8a7ddc6a68d1f83b82f0d206ddaf76f796c21e0ba9dc3179e85dae4d7b3fa40da3c65c0d499b38362e179e8306b1361f3212b0df9001f325a747b808991969ea2a9b5c5d5def00b0f3139587d8890989ba5bfcbdde2e3e4e7eaf8fb162326354a53f0f2fb080c1c25474f5355627b868a9fa3babfca00000000000000000000000000000012273041\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8786af4f2617911e937b31037e66d478136009c090bf4a971bc2f286aa31c252c1374f612e7f68634201e3eb5857631d0bdb0c10237831abfde8ec3a0707d79a6823ed6d5b5dd176c813b4473c92173db04935e42a920636592188cd4cbd733894485d415a6b7c095e7edb84998ed6f8ac81b9d8d7d3463d3d5c9934c1fa9484e2428a5902529bc47011258853205284080ae14412ccb60c49068c5142424a366e49305182b08c63362e0bc505e31841cc188d63b26d4a484e10306c8aa62d08256ad82030c916299b006d914052c0b66044b88493407112294042488da2048eda08841a098600265204092004c89024902c09a4284000801c173284942823362a20104690c62811c9640b064601304e21122d4906894c926822036cdb8880884282891689e0c248e4b431c02650daa0040c9211d1008020c86453160618024c10a92103466de2a448d8486a8ab66c09c584dc44224848011b07315046081800205832212082288b1092d246499208491c184aa03889a3b204120845429228011641d8b0011ba5515482614a22312126691c39004a86280ba62c40027221308484284ac818241bc41103836403086d99266210254644b669d0827108c15114952c23868824a30c233900d8442de0086482280dd1b68141b888c842641b896521988924b43010b16963209020114118828dc18670c42811e31442c0146ce340424a2670ca00456424615492250200251097001a3084121912800206521650ca180903c9250a454090160c13350200056424891152362220012d1ac110d4388ac39420232329203710d3428ec9864900078c88206118240201a1510433491c9751c42232d894281a3851534292cb2691d9325008226e6482601139069b3651c010010188804882600c089048360e198830d8008890401020c72c59c85108942d18b20ccca66d09b125d89820a136888c96098c308adb466923202d94a68c8b8061e3b6110c225101a025c116889cb865423030c0026212b0241cc68c102609e4306221a45122371060b63003156982b200e402085102329b081113346edc366811104d4b9041d900915aa42594920cc21246c8322104433160822dd1106642200644024edbb6605ca66cc220208b182a0202069b804460a0008c282dc446012046088248804b201151966059304801956461a80949a26023b52413976421468c033431e21009c024680bb34514a8090b048a93006e5a8471528004c0228499828470c8d8a0fcee58e3fef7ec257174ae39ec4d8e78a56f35e87a388ecd2a2e145f77b6a83b61d87437335cc858b8d74ba922ddefe22c434bc8c82ae545a194a19d67c7e3b857b2f2d42a70ddd90ca9503eb7da05bfea7e9dcc9f02158982bec07ca961fd8e288e07683c9ae97a5cc8ddc6e8356ab44827626a4930c683df67aa55162947ae38c88681231901927e8dc6a6f5c318fb8dafde698796c11e799cdd13e24cb6eab09209c71108f0920e5c9282f7b5d5585cf1cd70feabff9a98786ab90daeac9040bc2243737993dcb7a1338fa8baefc0bb6f9aed2511275dc008b8de75bfba4747999f032d4fb676a5b8344eb4d6ca29aab4d36fd99def5baee9a6920129e1d15d2a227352940b7d4129401c22578c2126078e85ab4ec15874047fb3ad53c9a7e9e92e30fc059d92316cc1c992bfc3171455639d6262cef30745958c3ea541df6ab9414b326b7edbabc29e0ceb6e4435c49eb07564a08cb611d30ca9603de65327ecccd20a8207fbf4c89d2914233180dcd25cd5b6325e23d591af9618ae1ec1f33908983e686456de3c6d030991ff03e1e3fd43402e723ae17c9793fd8203e041dc8ced303127161e296b73213242958552eed804e0c74b8c2d1f72043dbe02e0bb984a533647bd7b8625ee85119ad3ceec74444c87ccecf99a11ce5a382cb7b20b4c1610e9f12fc6ba5887bacb9c6e46d4fe49c86c61337c18a93da4d33a7cbdb0a609935643ec3b561a7d797261f61d085abba60874eed0f97fed77609f13d56a60edb328a8b7f3c93f270ee0e96f752713549a0dd055f07e36c1fbea98fa85be51e9cfaca9531cce28c563b67dee766383fef8c3b1fb56592f936f164fbeb09ffe4ba44da30af06a2995803f64cd90ec912507446624e13377b83046da93f373373b5f8b62249f477206f0ded335be688d9494503bada0e7bbd80cc14def6934a159030e50ca9a2d08cd6b529669a5ea6e92884dfd515f58d3e2e2969c6732a8d28a30951929c9afe0db0c41a13dd7d817514f3aaf2e8bed5b6b5d7c5cdb8587a51dd78204669979c845ba412072b925cc78c8041b7c35b9b9c2784e70329103dd53bb4b42d97fa5e4ad73363aba999152b37079f64cbfa9d4fcc48280e355b4c12df212cf806ee7e4c060c5eabbc2ea493ebaef3f3363539f2a19413b19c6c64a8fba77047b4c43531cb0510abe7c9f476c35fc8cb5a5cc1b883847f9938e8a48a913fff14ce6f4d04e1314b39acc919602a2d013a8c59fcbec8955b1ccc236eb4b03e304cc0440eb5444d91eff5f9f2fc8c08984eef85fd550b76948f2a48368a6cc84bbda74510f9132539f75abc6992a0423645cba1ccdae50d78e10a2291144c814bc056963f8cfeca4cc81adf3f2629b0b687adc55dc86ec6af5e390307b89821b6999cc62067ea0aea384cfc8be76e55d1c893e306b2f2812c6793bfe8945b7d121e3e760f4dc7fac172f5b398d066bda33ca46a35e0a24562e7516e645ac2e00be09dcfd531c39955be696ff7eaaf7192c50f3d1601dc2fe47f9ce3ef9084edbda8ea81a4fedb37eb2aa3869cd78aa1b1a3293317f748f8406fd83f26c581d5f139b9145e1538fa71bc30b8f9e3116592cff2b1ffb8288d87ae9af70330e57929dcc8982c7320cc7f48041fad10522d96851112d6bc80e71133000d125aec57bccf6bf96bcf0d08b557c67fc33a8fb627f4fdf768c83692aa8b5b6baae585b404f3863e3cbd13c1ec105c699124fc569edc3c68da55146e52ff0c0fa831003a13c50509597a361613fb6eb30d881eaa4c7371eb6ee2dac3527577b8dd404ac55ecd3c11ed984c2c62cff35b1c5833eed91c4fce2684e694ac53e7a669d560b631a898c38d40d99f112c58c3ead838ae8461d5c1cc6e3103890b3650563eeaaa1bcd0c4808809fc9814fd8364e4b81152ef67a90a2bb6932c59a2833e89f2749959e49ead34556b430855913928fa26bd6a3fe74571519a2c2352e27023ba2ce62da49dd02441218c2f7f492dd465fb496bca836af0fe47e96ab5cd04f6e3d27d61b2c3a1ca3b7a45681456c427a1f752c7b8dd540ecadf8621f125bd910fc755d349a00e64a20063ccb3d2c27d2808c86ca8d80d6edee233ea88f6a4cb1484670fa62e7fca366ec6c1bbb227f2db5a2ab9f68f541353eaadfdce5fab49dcace06203cd43db0617530c109a3c9b8885a972c7db25d489cd816e98da33f2b742333fe88a839de2e364346fb47af793b639997a0e2c6b5293c14c97964faa65656e6f624b36a7dd00afc5cecc8b9bb5a1c79525f0fbdd568c4acd72678ed26013d3d6aed9696e4272dc1293d224b83893a83184966c25a3\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-a99a8d52ee69a69d91581ac798a7b34cc594801ad2f15e8769de6761048ad79b7dfebfc6f97cb7694d14fc315c879de9029b2b5331f64ae72e36833d3e5bf3c4ab64b8ad225d7b17a146f4d15f05ff72a7ce975e6558d11e3dd0e24c5b8d81ecbf96c732ddc2af021f62ff48719eb70ecef5e65a3acd389afe3ebf1fd6bc218dacffe07c78ed1ea343b603e61d5af9f6399153572549b29f88139d08ac0899ef084a847ec0fa58d0ee3856dff6262fb2355873cfa1426eb3f80ab52d3f6cfac2bae2a1abb12a68e6476f7593f5e5694d541d7d09b02a39832450c80eb785fd1cc13b441a96f22910a886aaf3ff61df7ff9f079cebeeeee218495f5307da9ce916bd86698560f758896675af604a3bfc2721e8e3dd4bd6664950d7e8575a09d439ff54086efa2405dd362f03c6df688120573884b46e45970e65934b5baa1255d6344fb115ffb51aa25b1bcdee1020e754bcce521ef28bf26d7bdfa498a5a182ec8d202d7dd0c0926b71c12eb74ab4b541c822f399bb4f4a50411ff28784930e8c9a6e77afa420a958528d4848f6255067d19496a23b39b21b572158178fe1e4749b3292133ecedc0db2038fe2eac7ad1fe02f426af8391988e46bdc8b621e2c17704360decaf8d6ed08ca825b1b3b8ff95024f174949c7a6f9d8a4a079f2fab1fa0132c01f09b7f7abe7d6aadf9c53d58a97d270a1f9065b295b5c524f3bfa0de09ae02ea5b98ce4403418af601e5cc876b4f0c95ecb7c1b8bb2f72448f721d81c13cefb99106251d4f37e47dc57d9449b405a132d25a2f08ddd8dc77f0eb905d6f6eb0d0cce96b95068d669286c02f1cefdade77b3dbadfa7cb912c62279d0a4530cc5c52941b19de495e2a2a3713537b584b2f7b76e3952ead9ca20b7bc9bf26bd36176521f4347cc8b3c2553d37ee02066258dadf33306a2743917287c09ab07cef7bc4435d582e3cc2fe79c272d719f133e6e5ff1341cfc139257d5a7eb146327c03e897b9668567b6cd9fcb74711e73df074ee139a57229879b903e55a04c5c9fe9b6cf669998444b93963f85ac7176a3f021d7c9409d7ee827de8a11cdc431521c96ed22fa6f13759eb03687d997a25a9bd60800f3f534b3e9c9dba97206b7c2f326b34a087be1798866d1914e59c8eb2c77414be030f8dc270c6ab76a6e1515fc70ce50c497364fc55f0ee4f49d3d22a08c6b9348042d904ec2f8862ccf5ee0b3d22d2f1a99579d35a916748ef608406883c53f18ef4caeddcd780e4a44c872bf2dca063aa11cc715e23cd996e4e3874463a1b4711bbcdc2418e4df10667930cbc7af5ed9b629ed452c240e02b58ef61ee4f1429a6d9aa57471781887f2e1890e70f7589f8d8b4e5ad223ba9d0f73d3ec74d8249b82596c8ec733881fdd0c96d2455ff5e340298a5a6fc91cbbc1ea5a8a3908f6da6ccbec88756874de1518602557d2df30505dbdd6d59469a6f2bfd240aeab1099c350d6730892585c577936181bc9f7fa6ef3dbb0c1d39a082b1a35a86899cf26261927d52b373120225752792f02cd2f196b5540121c3f9c0fab27b44b9462f6396195e21f2e1f736095554de7221f3c9ba23b72b480852c86b179c0e4778441c3c5242d4feb9851165dad83804c7ce5d534dcf918d27ab36ea1faa48149307b95cc3bf51a6bca256f115e3c618b9787a21941b58ce52abe359eb1a5a19aaf67dd56950a6d0179637ed0ea5421b899325ba05a26771b9449ba0de0b3e674d62398e30363d1d885f424dbbc200af85c87d28ae8a3054d82d4be0196188089d180acc7197f07033cca984e20732e9029e832268ea405cadb00dd002e3506e621d3fa7b023454329abe1a48f7dc35730f5f352c25694eb2a0650f9505866d9013e8b88b19b0c5dc12ce799ce8de35caa4b6552f399f8a7b06bf1e5bea54092b504d9ce81fc3fa2a40dd9ba5a2b8711d02dc46ecc222b14655b151499f4b537260b6595a89703ff56ff4c976a4592dd53d12b6fa9a4a775acba17a1b3dcc5ec0a4e03db9c9402ef6380e62d7f76aacd613a482d31cc17a7ae99311a01916a3abffc336959a491995183f531ca9ed0af40131a28da068038649639155bd12b9d3a06238cd3c4b754905b56dcd52cd213a2ea369623f32ac7877e6150d0f5ee25de926829beda4ef67cd3c4323042aaf3deecaa4d404426f234fca778826dd3f29b007d369ff1a0af66ccbbcf20d9f33565b7ed745c160cbc5242c683588a67223d81409d77611cdce68a0478bc50422da24632852862319f20b446917557588d19d8add012137959e6791aa7ae19597a8a2f875bb8b78b17d6f5d5b10c1996414ffa08e698c7789343487a62a98474a39cac820ecb1a855dc825d1d7bb9c302f9945b4ef5ecf2e85d22fdb7f440018181ce3c71fd8a6493c7e0ac2d38ae115a018a3583eb45abb5542e66cf77587ae2e1da41ef8b98b2c2616f6b62d3e2c7e467955b0ab3431d1f5ab617adf90334d87b2c01e450c5750347c1c98fd4fd4109f13482e11e2a6ebc4a362d26c6ac9e4d112d18c1e90726a2042ea3d5543c33d32ac108dcc34999db8488895315f18fc0d359714eb6c10b0dd405f6baf03c0c7a3b89d6ec2593c317e359488ab2a1e85a722b2ccfeafcdca2e22718a17363634036af5aadae7bbe6f48ea36ae216b827aee084696c7094dfb6e4fa563b51cb1fe41f8e72db7cd527c363bb00bf8d22896f438ba637bb7fe64054d69b628254a4cdce5ad92f753cee7889c460af2fc4cb10ff6458bca2547193ee76e816a39880f48fd2e246b66efb3056cffc0d233a86307e13e7fe87e4b4c8408cf7bdcea51d189dda4c4cb4fa44b222e4d0ed51a18abf77b49fa0280dea06852e864431c1b4473e876e2fe4f00d423aaffac81b95f186467e409583252662a0761a63ac3511058b4b0028d0ad1b760994c98fd7ae64bbbcf8e615e416bf0c1a594c0fdc46f760d5dc394497cecbdbf06d7db93d2a711756a3534f7550dafa01954f291bbbb511b652b032eb00b804d654698127e2ef480c53f47efb10c949f50168b1d888c62c9bbc422dcd07ea4005d751dc31d374357c10af8991adba9e139e75e3367bd18c7e1ac9753b2241960999e6a0ab795c475f5a330baba955dd34fdeadc193d9a6ea7015b44a04d0d5fea544c140c2a419c86f89ea54e4cc2ed8830938b171514a189e5517949c94ab77a5e9521a38560f3bc4e389c7fcb0b49da3f037ad53f75a85c0fff2c43945bb3d3ad65a197c6db5fa9fe3c78293a2a499ab553af3756ddcca3892133c1ee40a7b73bd19262b33364c575e7492a5b0bcbfcacdcfe4e9ec0e264b4d52576c727d9a9da3a7d0d4e3fbff2137789499a3a5b6bac5d4d7dee0fe0317192e4144484d60626f767a7d8c99aab4bee60000000000000014263549\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-194345a0607b1df8fd01f58d30010604261e15d712806f9fb99d3dd6afc994a9dbdb0934a7bee40434598e9fad7e0c7914ed8f127b35ffc7d25d5431d9b6f7d85c5015968ebf6bd70ee835d8da55ad1b9a9147db756e7ac35cc3fefbb3a83586e27cd96dc334a6ddad65f8e4c907bf243d46949290f68bd7ca9a3979131629b66028008c9850a33229e3b841a03244c8a20d4b183251a8209084115c1608cc9611d916095cc6040aa76c14b54822054113a2510c178492b82cdb12408a082d141481114300089090c482418a322258104d4036260c0446c9488c40903199488989286e59c48c1c464608b7010b234d99286c9246010c2765d48860e2a091dbb01002067108348e03466803c52904c84101224553089118022ec90665e2006111021108258d63102482c009920652d324820b361198b40418b7851b184ac2083192426c24448819926821286c59b22c03033184b00091b6059102086000060c3491d1324e18c4094c923009456261b07061102818328200a92de08869cb12848b944c04190840048cd1087054306019197108810848c6841aa94952c0010c442151a0602009516088312243059c0486431629d2064e494420d4484523b64823288d9a367214a39088b04101a4095bc46413276ed8c465103450448010db908d5912480ba54824a18cc0366dc48690d3c48cccc82c1ac62c09c684c80489621451e1044e022704e2124514916c893288e0c480899249e2204408966c4c402da1884dd1145040140409b25024a805043752202369e02225c1464000178da2b291a41646201832d2066a21942484006a43c00420c349d48011132168a2380d4a4848e2c889d1a065c40849083909802480d0a269a39625092204c13805803844090471c0920c24300ad8126623a5310008501b814819446c13b61110a80cc0b871123885819671089669cba46c0c8525489211e096090a2640481644240322d0c851d81452c3128a9aa0611a414d11334a9424520c062e81141263984810417298460d0ba64c98b81024a76d5040320b427083b8044c88050349116382214ca2014a2445e3922020c76d22238a59b849cb0250100946a2484e624490c920228134018c088224b78c03a20524862404178a1101464046880b460e8b8640a3b6514b240d24443104082d22a265da98645240059c824ca21640ca266843006d41c6519046449b82405b226020155048044c59a41163888944826c5bb40124914c23366cf182345ebc795b4629109448f210245d70b278c08f9ba6a8fe4367262321945042fd365c70fd042e81b3c244cd92fee3289626e175cd20642852cfdc1e72a16d4537f85c1dbc25d69bb8dad510dc259e5d7ba1575ac940431a237806900b8fbedf88594c69ea597d4b3dec2328796b644604e63855770dec3d439ede08c27e01950b3bdead4a0b546bd0e6bd2b6b62f10335f9356dfed825fad33fe0a81c0dffef21effa8960cf65c22282ab77d66a351e4e1c56a4318abdfc6e20229b14a0d3e8de682c50e9f26c9bab44ec000a8d78dbf63d5bbada80089e6c3a300eca7949f554511f647060e23bbdbe9cf77d68ed3cdac0ea0b491768eafd65ba35cc29194a1e0349fa2ab09c920c2cb87199cce638a15010f3b235e7f46357b5ca7372b6e1cc172ff2df92179062b47f78a977040418fb79a4dd9a48dfd7024727376e254a64822002e7060d297a9d081ca39f148e1c472cec5c34c39e84526dfe3ef6153d21720266de887bab12a0f37fd0a79f8402e1fe9f2c149789b25057cad2d4073bb54d56982ec23c541cd3e6f7727ecac5d075344402ec3400401be314b4b4428f0d7d619bb2b8c3d0b35ee824ff079a3431acbb8b644dd841c92cfa8610aa302da74f2f8c91ec5b91a3b19c10a5d3bbd92b5dd1112630cbc606e0ba22db2b71f6b3f24aa171ab2efa4de7151e1fc879fbcb5828f232083d055507930e7bfd54f34aecaadf28a4d0a3220abd4a7c03b32e635223f963337ff7f048d7465116fd149bb0d1ecd112f32f38de619b50544593e1b23f661a56f6abec97211194f03c03697c4b5a8ca1ae309629a6737347f23307aee2886ee24b46f8ed8d0f44680a0e9d2af553cd154a2c2812a8132da51773d20c7128057c5db127b271a2453d7e5bb72ed1012dc88f37687da5e721b6848cecda1984df797100dc57a7ddb8d751b9e16c3755f85ad8adada51b3f13a08c93701214cc26b33b5e763f9bf8c3e793cf224f03df1aaa58e95333015904f2da7526482856560022bbea43626953a375dbf8d0fd6aecd506d6e9e6fed3ea6cd2313f57be0c0939a82b95e9151f9453029bd4223dfc55f8f609ed52d78d114373d6a0ae370f5a28e0ed6d29dce7f2b7f00a02eeb31b76ab98c432873705a43ed9194f5ed014874b019116b63c9408673cc4812594b682098c42c69b70e2e7b29c2ce0fde2a19190bc5a36de97c3d6ffa1bca253f2344ac9c0373f0604b0d08377469f38e7ffe86bdc130838452a1f790efde6f8aff903c837b0416507dc69c61d39c2009f4913c0750f4b3c16efdadbf755401c455d9e4d3169323414251e6c80257d75870e4e274a2e7b042ff8b6b80270b27d999669002e811308211cd7c74f566080f3cf591656810fe1ce9ca2af33825c9526531c34ea29f13327990e42b45595153ecff4489c1c25b6b5a565432ccdb880534189485903b4b3c05504e8b8ae71eacd12c57cedd28d0116254c725d79529d17451ec12e05d1e468effe2641f5d7268c9ab0db2663505d65ec2c02959937c95d3a531a2fa91f99bbf527c4effb4607f140fe0a0b33cad4fedd87e5702eef7933eb05bbd42c853f022144ed5886ff31ff633f8a5f8f88ab32c925deeb8d12e72de7e92c5db2c4a7b32fde5a7a5a381a631ac547aa3287183371f6d81ebf5432cfb0d93ea3e8fa981bdeba4f5e81d60ac6ece3d26ab9a12b311b21685bbb9917acef5d43c9e4dee2e98811d6866f008b159ca3e43e849d9097d8c74d1ee28b8c6700fe5c2175cdd004f9a4e6b7f25fcb61f562f38b0b3a82693052f023ddaf9c88950a379a0651b23791722f4600d6bafe33b364a0c66495d9f360cc66b80df56eff38261835ebaaf3ec8ef799b54030c9abbc0ad6ba83a366533683a9db29170e074eee296efaa38fe782064a0aec2bef0be52c780c16981bc8c6bcf748c109349e7e659ad14e6c8ce6d35ac6f1cbaa938b39e869444aa08643134e5871d2676d11d205441406e378c26dd1afbb2fea274c5b718d4ac16c077d6e15bc0dad0b3d9dc81e2a1c9089130eaf417bc50fe35e8724bc420ffa1f761f6cd83bdb0bfaa6d0f399026c6146ae4d5d580f4cf490a464461a430d8f40c60f4aab01fab0e35ce12b0337253c54ff1db1f11165b315565be66ce094fc289e6d4b72189d4551df40c6c86878185db87cefdedaf24be22922046674805df74111c3cfb89351e92c01d207253841afced4c5daff0df1864d8e22bcf81c17565f2226d3ae2cd929c234f376205a6962e024ff08a3f00bc71a3d39d67fb67cb94e9f3d7ef78a5d8a7b86585eb8999af3b054d5523b9e4a4d944c7d195d41c286eb95197808\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-551742a530ae4d15d68f1e222c8865e6fa59541a5e4b6e137197b52a5cb84548c099c3328b28865c34e90095e8959c65f68d8e4ef9e9cab97590736dac647c93cdec474c3e6d1c934e2eea593479349b6e56b95dc356cab1e2a2a7a94dd6490d9a186879ab75f16e0bb792863a7a8a19ed88d74d22f7c17f3b55b4d6440fffd4c24d814d3c09cd80b3d3d137882439f628337061253522775d68c1072b8df9403ff65679d24b06f1a2779ed76ca3ce153c264a06cf04948eece4f06243f22898bc815a90344479a8edbee87d0c5473474b1b588006f6dce5be82c7bcc2db7b50fab4c2cf06eefed93110aa634f6691e9b757aa8a01ca52912040a3ca6cd6f9c596eedc0a9d49f1bbee32eceb2374336f07e74b425d6a894f8c3e49a255068d08ddff453dff688f9c74a2be872e2a205018fb3e0149113ce438a7b83e60f536ac616d748fb2c590f3ec7e4c81629a4fbd993ced51995432cb8b3778f7d4e375fa54c9511e8e97323ac021b7cb2184bcce98f87a2712740ea1bf33670c4a718b475b31249ddc1a9c2b216efa7b5bc01f792cdcbd07f3e7719f71b81c3a31d8cfb7dc07efa06e0740743c9bc515c0983c845b1c7b2cfe7745c8d0e6967156cd36e88c8e3eaeb3c96ede6f94a53eb05abbd3ce8abb9f4d2c350969a8d5fdd673188cf5f8da51704b7390d8de842a18f5d900da6f0de22b9b4836947acd4d49de53e6bf96295c3f89a01070fa3742ca5070b56afd534fd4bcc280bfa5233ba58e3bcc46cdcefb5a07904ead0092cc088e8ef1de2ae418a8f977dbba6b23a634b93abf5135504ec8adae1647042210be6e6e0c9b333c3f1d0dc906ea63eca4697823fa06cbaf999ffa6894353d0b886bc89b6d8b80d88a80b570aabd37e8bfebb692a61ef6e344b4bc5d10a4d4d7aa2b2c47935ce37c1f2143be5df3d55f9a947c1d7244d80a74e92822a7e178229d703ed770a3a2e8e07cd465d6b4fda758867bf09dcbf050203796ca9a6926196f13d8a5d034f566522954999ab327307189e0791866385a3eede8b8485d6c673ca69452d0a7ed6a32142b74115cd39c797e48f38111b309a3b5a122fff1c8afbfa7eac2dcac8cf225c971b88a49e845447ccfc634341e2eeb214ab57de15ec8de38300871207d8bf98a4b9a44642679a67fc1792a46bc051cbdceb15b4355f56233ea87dd6613afa535b333104292e946ac29b73d04be3b83a0a6afd275fc02d99fa0a0b1796275b45aee6fbf801f5394fd5bb2670d18bba553e533d39d0e66ff194a7555bd23ce14ecc97ebd99facaaeb8a0d0e088d2b9bebbc48b4fe32da39a310e28150936dc5e86bab264baed9721beec5a6ab21db810f1bf539d4e6283b7a382984595eabb42b21aef0a1186d66c988132b0fcd17ebf0bf9347d64e334e165d1e8107f6b49403d77516f55e973469ec6d3ca2ecfa2df3c7a82d08ce5875e4a0997ab9c4189e1b4c37b5567fa7731d6981d96e9fdc35abe9ae1a4ab30c5b329cc617a2f92cb91109738a7a41da00c48eeefd6e003d3e25de538bf85d83a4610c0f86e7af160703666e6fb525122ecbacd13242679cb02298777001fa2ae853ec73eb581229400c93408644bd64cac57854113aff1fff6855e2632e1e47bd145865a142c9ca2000b2595fd4edc7a4b4cced9dd87a596a9e245c25fc87a91d676fa0b02a237f895df9dbf2eb099a60fadc4b8829bbf7aaf94d1fdd10dc560244f0d6f5394318497eeac7cceef0bfd8316914f766396d9a5a7cf907866f85ac6e188133614490e1031dbb8abb003b2fe2995a28fac84d07dde5987a981101087606d6b4d4fc1bf7b3cf56f667ffdfc28adfefe6dfce01579859b662a189306cb048bb4b8d66fa9861e83fb28c325b89abd6838e71e5ebeead3e014f40b48a36f1d468a4a24954f571f4972afdce0d6f9dfea1cb500b6212bbac96e7a3193691eb0823a48e6f49b63eb4b571dc1b60654b6a882d84ec4a10b5faff8c0e71bf1548578a8bb4b772a9dbd1a76792e4186ccaf692a5cfeed5414be448da61b1abed7d58acf60c60022d6f87f25b291c226bd22c9445d15e2dabcdebc6fc91d780493865f4dfe420932d9a106e81f254d97b91d00efba45517edea7c8dbf369a32c9d04a5d141d3427c68b19f189af86b3e2fa8ff622a14947d4a5c4dcd12d3e12c714b32075dd9a9c35e8edd715901559efabebda589fd123d0a7ad33bb67f353bd01c4ef51b26a187986edf0ad892b4c71b2ceace37f103dfa8e933bc422a2799dce9b7ff3de92b578e065b79a8e7d4c028002f5b667886bb783bef181f4040c5b03050f9ce2b9cda0787ce21675222dfe20c40640a37058910069a0cc037ce13a2bada74027901a186b5f194792105708877eecf678aba0436c2dc304e8fc040996e488f764f3d0f52056edc69b5a6e901bb0dcc75acb8acc9f22249961cc5df3d10992a32d724699120a264cddf1450504feb09d82b0181e0148f7ea9ba61e99bcaadef0912e1c545ba9b97a93c9cf5a8c29d3ef2a2608a32684b30ee7d43e6006e81c37b636616e736a019e26079d3025b1c5a3997fd9021634627964a01786891218711daf4812cda28892fd4803dc5ab334f18355cae65eb68924ea9fae67b74ade42b96ebd43010dbd0536f7224fff388433de015721b73c60d4dfbe1101100efe6e69965fcbc8eb442a233654b94f79ac0dd967612fafff60141e1fb714a3e88147072c2b44ac434421eb5295a9ea7752abfd6dfe4e10760f0f1e6e486172d8d4b092e043d085c800a58f5c6882e37099f21565a04ff5c12ad4d716b30164d8951f6cfa56c93388fad772ac2fcbb80276a235fb4369f01c77266f2286b61510eebeccf4a610f995c850b2ca952c27875801b692f8c1ebb61758c44f97ca4628837ab1f6807b57ba56c1b2e39e1a002dc724f06a3fb1510f18b37b0b48dfc21d453ec3a576fcd3302ce89f313ff2aa895f0103e11b3c01291c112a4d9b5f67b48767dbbceb8e1a0393dc8fa7b0b7304a02e30612cee891cad631778726124860518fae5a1b162aac95a6a3aca66e1dfaded70547e4d934bb01034038a23f63e2695f554cda78d42808c750ea5dd3c7c34e74fefaa93a91ca66a472f2c1f8a1de3c6e876fb7721105685639cf82ee003704637125e9177cfd964acec7bc1474ecbb0283e317a03696bcff64e4bf6e58e3893c7fe4d41886690b29c2d6f32ce57ca25559c3739e14af58af1d96f581e469f146d727ed4ff89425f4be0f5384ccfd5941f6c859d6d532126dcf4529564be166d880b4d5b5c617173778197afc8d3dddfec020c17373d494a5461676c7b8c99a3eef2f3f52c2d304160696c7a7e8384919a9da1a7a9ddff071016172229405d707cadbedbdfec000000000000000000000010233645\"\"\")\n-            ),\n-\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-d7910e2ff97acc1d1ab59e023ffe199ab92906dfd6ab2e463731ae484d0393ed5e0870cc0eddc5d81acbe1f76adac417fbc11eb77d0c7e4921068792f54c5aa194aa933197110060309ab597bd1c5ce33101ab6e50fe871d4ec627437694d6df728d21ccfda87d828ac5950e846a311e48103071ae5b66f3155d87e68c0a77d70c964008122590b029e1346d60820c40480c0c428421424a1c364d90a06dc1004c4016895b940c94108d5bb820ca420ca44208e32248024722e2202dd4c444da18814a806c54167208126591a2500a012a082284d442284ca86814098c5808281a830188b88c0a076683344662268c21122890b04891204059422dca96650ac44c1a426e02a38d021944d826208b107111024103a44823906c64021049844803c9499c326d82c04da100651897214a3685e3844cd4464e8148651c430d1bb1901b067121434e0a864453c46cc4466d10a2848ca46d0a022d19c76113c311d4188011879124086e422221c1904850369022a40411396043b08001c904134146013188d1248e91408401110e903682e2a2459810661b858902a50cc044650920494820318c388dc488001c08611c07225136068c466994360e0c200622096599346a5c8824d4180c63961024c79153c428c204815b948913212049922ce2822518c12d12994558a881990871e33432da442dd2342518274d622630981248a2805064a491d8a0480a25511a03458a30865b848d9b8850a1b69008112a1226441b9324a2146124107023a20c08233004b16403490a9ab86519a105199464943249482441d2b025d008891aa629d0a48491940989284044266041182858124ce440828348251113694b908552366663342e1119281bb2010b327209364e020142e32066232661a3248a20910820989144b6311a30020b994810836809290a0431300c954c50808091306501c325c83241a014044b444ac80852c22649c2128a18054c14097213092edba60de4220d0b2751109760dc1466a2c45189b26994384982200e84466dc4848dcc206908130ad2a44152b0092380210c121209820ca282314a282c21c7850827248a062c2195648326668c2031522020e42250c3324153180613836400c121d912808a94414ab065e4a809232190c2060013362e59128d238930081968c0040281048ae1206a0a290400466c0b3885e2486d48380e0a412e1b932422234993a8655a3824d4800c2042512199090c302aa2a8211b471111c38414b90dd546a07aa699e317ddc7e720d95e02563ac6dfed69d7b6f0091060c20f3dd65d9ae0463516f8ddac070d5c8f9cfc446f7a279b2b6b10329e69194903eb9ce9aea7b23784d6a267b62edc162970ef7b885ecd1babfe34b1eef17cece401a53b3c0a48c906a35020632709159c48bad06c7c1845ac966e4bb4c549ea4ded612acd9369a8c8852688718548f41f7c36a22325ec219b94e3ae3186b97508fb004848f1eab5f4510322b634d92bb5ca846ce8b691b2b0e242a522a745089f29253a5b3f812a054e2a4403ea7da12597bc66261bb6e2ad226e91d543fb40dba3f1dc7abe57858ad77c083c1c775108b1f2779147808d9cfc0eb56b76e129525cbc143124e7ab4fe9dc1ec8f9ef61e37de3d7fd0ae9a1980360ad141453b8be2e1b845b9f6ba64533f532420ea769fbfbaa4036b7956e971a9f71d32c0854aeb911069f2486ec8a52e575d53fa0f4bd6b87c3d6bf364f1531a3531b04db09f0b2344640cb3123a05eb8edc7c23474114c3663897e3022d3c1c49e44ee6aa0da201b6d7480b0a4fe496eb3d1abb932e7b246ca9fcee9ca2de6daf873f24a6928d3e1e42ce415d205fa4d0e7c44d29e728b845dc0d6b3719c171b5aed9d539f94328a23ff125fd5a4c048d6b70084ff3a96d5433807cd011ea4886669c2875184d644d88e9224cd2c78c3a6c5450082aba8d25c86d3a183bbca15394a965fed396568c0a11557c87b8bf7f797be047a844593267ea7b81fea58cc0ef9241a8ceda3fb2c93a28616c8aacd5c22e652c58720a2ee810ac91090ca53a10d47c055f5753373e983c457b914eea12a78a55d7f9a37bec0a609337ef580aa434e41f9030a3e9e69c8bc0eaebd1a987946a6ffec018eba885994fd64965b9be87b59b13083ce43a5d86bc5b2366c90254f0a598fb5b78044f67703bbe49657bd8da1f1e853381c05fc43bde6a0d6a952d281f3efcf9db89f8ef00d21b9630e604d27ae41d09d3e4c02953329c31829cfbcb3bec32935f68b9d466320d7af551ef29632f38d2c80360657572bd76bf26ea1515b4f31494a89c06b487ed546aefafe5620785a2654bbc15da74487898819ddfa07f648d4925626582e244538a0c3932d5e04d839c008e5e3538dc66a9ba917df7f4ade6d0e13cb267f15bc6b2dec78666a49137d13464f8707f08d525e5a70e3eed15aef54e9ad1d96bdfeee080d7eb022d79d54f9c194d41f626755a36048edfe6dc9aec7adcfc099adf527cd46eaa3e3371d7c17e4f34c6f6e0cc4e63814b148a4e8d9a60e76648111a8056405ea4060d0f6e042c3280d0480aaa3e92bab91085bfab153a1cb9a5639ed18baeeeacdce1ba2677f4eb60933111d28f8d09a558add70c6a62cf9b665227f6de4c19fa1b5d7f8bcc3a48458e67432ecb12bc6785e87f6b4838c2b1dd87aa56716dffd7857ee6155ebf64cf721b40ec05d2829a79d4d3f07a818c3e615369e46c6f475748d254ffcbd8f971523211a86bfb96f51bc6d7443f2cb2fe1ad567f8e41dc1a3a27455197dc3d8f66592497826c63b7d12f489c167c400a38d45a9ece1b579462850a3a04087b974cf0f6aa4f2e86fc17132ffec7ae947a4b0274bd54cea6a12a1225676d21aa7c72492a510947198f5c9f5ac22f75b368c74bb68736fcf4c688a41e09bf3bb06a721b71eb1edae90c93434fedbead5b1d76e0790d0f99140d328a338f99fd788c719ebdeeeb4a6fd793f7c255ad076b5bd2bc59fed6699b39e0e5f8a03bd1ad76dfecd16bd10324f1b0fcedb3030d09184899ccb6aec4ce031cf0b10541c114d56b760dd6fc630d7a77dc98095239e2292416fafd9a2cdb7c2fb6eed1d971c39cb7efd7ab31f353255ad342e9129534f769640f6808a11b173231679d244880a8541c299cd0caae9bb61b90ffe01f93395fab1fd65a0930d285d1ecb510e8de8ff93b2b63614b0389d7332f6f20b61737c29769d0a05e472759dbe68ab17cc9586f07d4c2beb47e609dfe2a00a27dff3db68a65784b1d9b4ddb1b454bd49b0adcf63155c5c7979762c2248a0dffa7d31c8486e1ed4bdd01155ddd4a5830edabc74c509bb79ae6ae3c94d34e4fd1e6944d41b8ef5de8cd11774878bede8aee51b87303a502abb5394c8dbad7636f0c71aaf4230772441f0066094421550d4010cc2f71bf055b263a0b53bcdeee45b7517eaa4e3b4801b09bdfca83b45c68c52d8f0dc7f8aff1aaac45e1e86be07e61a6fb65c65f1ce21e508ec0ba3477c0bab7ee1c211e071b4449f3ae379e5c46fc4ed23c99de77e5675a026c71a90696528dc29998285f6d9a411cd1bbbf3fcd522713e0941f92468646dcafe9db8a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-e870f21e348b630a1326a0334c872302d0a6da460dc9a0bedb6daebc027b22b9b332c967a2f5991252bccc646e484b83d4fbbaf2887629032de5b3e1b86002cb089bbc58e35737f8c07a694b5cfd38ee3976fd25244e6acb2ccaed20d926af4c9c7526475cb89a72a26ee9b2a25c29128d53446f797344d3eff20d91eba8ba9d02f939d38a775911604124896569964fe5f835df7cbf044f2565a32e017caa93a8848f7c4fff257b885374a6af0df150b79488551200332d176955f304d86340a6df8f98cf93dc12909e1693ce62de02192e63b8af668a0fbb2c345bcfb9b5151131b7b4c7d7eeea48666a8219d5f8b0cc430443ea3d531dbaa6360e51a842fbe1e40ec5fc9ecf9bf172570bf8b31399ba8f12f3b83c40205953414caf7324182657e0fbcc2fffff801c52259294f0b23eeb5ef14c34d955b92ae782739a9f9dae5eb03af4bf4e911c7e758cba1a0f1d0ac1c7256e5d5fae242312f18f6747c5b56d907a49151080485999605246550a6ce8e6341bbd1ec122b179b3102a2673c163ed7174089c10b29cf33b9b5fd1ba22dc73a164404804faed60958c6faa6a09b03dd2eed0fa8782212f1da486543ffc688e37bd43621ab857aba0b13c1e0969a482ce92e00d62ebec1870188734135b0419cb3b9f3a9fcdd68b5b4a53169ae0bc4959462b8eed39264c0b0b34e0595c7a719672abedad01638f3ebfe9e4a460cec890339595a9699db82819723ba08c7bc82080f8989d3d8709386ed1c9fc791ae0cf954e3a897a93d8e235eeb69ae131a912736fecdbe1ba34eb03206110fdb1f81e71dceea673fbb98886ee0d94cb4d76e1e94278b8f2501fea2718466802d3d4a068a2ec53029018df3eb088246b767043f843f79b5ae5537924a9b5e5bd46b19bd7dcf7f14d4c9f4dd05b2c941377434cb37d80a899ee97a5d68345cdec8a43cfef1f286c0102c2d8c9b0d07adef966992dc7ce8b9606917e238625707393552ba9c01c4e72f6e3b533a734c0d60e3a2aba08a823a12a45263b61402d8e62da3e5f5a5c12e0cdee0d255551b8af7d500b547699f72b31a91519891850e4109f4ef380757013fd57a0fa0ec0721dbe825d4cce624cdd8b7f7cf64fb31332f374f6c470b9b8a5171f25d005da4e184665430e7ae553caf2ef9eba994f34b04ed6886c1b768f03868522959fdb164e8ee825f08c4a4dce01de6686695b5dfe6102c7463ab54b084c7fb1366a0b292898c0d7499a3a6ae1995bd2139f7d7c84a0f96b497bb2306028389b983f2e02a2fcfd3c5f8a0b4d2e334d4f3a460829efca41806ba82f2e5ef585531a3f1ff67617ec112f613acafb8420a1cf6230468601cd8b0807d975065fd36aefe77111a5a72ee622da403a51194f8467a122e408a0c3998a3a7f18c2f7774915289a1522f5670527e63e6bde7ee0a84750099d949ff87c6dde67de9cb220518ccda5135d3bf58a42b7d96d14dba0ab87e79547888f6e87b4bb9ed754133d16444eca15045ba54026767e93114e8a3a75a1ff65d0f03c667a8222248119fc8994a84fdf73817bc2d61d6b764d86c69d68b7ca3ae85031181204c39085af1c7efd687fb91d00255dcc934d47228c714cbdc66d4b418112ff0ddc030dab0f4edbcb0309419120ac944e15ddedea5cd3a1d62abdfd8729edcf40d43231e378b2c69670c59c30b4218e7b7f2dcc0ded133b585ad673bed77194b98965fd4a04d93db53ce26128e481de6053a14f40b34f60a169e26e99b4b29979c03e4880fe84474f11627620d196369592c0cdd88c3639c1346d3ee265e550d470b8440c5676387769382ad4b57fac799926cba49f042833301834033d668a4f0e95e2bfdbf295ee9732e30a75b1a76d7a4f0c12029514252d98bcc4330fc2a3172bfe72c8f8202a308de53c4587a17c5e149c92ffb88b79d8b07962cdf91f0310d457c7eff09485a01481313b2aebd081c49b47558c252202b4639dce456a4e786db6a91a24a032d47d1cf9d37969d07e2acfce0067a20994310948821510051ea1ff97f0a5e88f0d36825f7a9b71d5c64d42dead04fed5f6b63dd80bc0325bef6d413644c1b5ac212bf9da2edafef2e6b6d99354470e25c5050703e524dfe08af14dd431e609be5809012ff5d0d4dc260f10fff302168b9d73c86ebc71c21d76ed34f08b12a6dc7ea174ba1c2790ad34a7b5d2e55607ab26eea6289fef0886187f43d5b98b7687b227b58692d61e6a8b9bd04a9c3a5df88e03b20c66d618a6d5a979cc0e33ca400f55918a0d2669c19817e9bc0126a406fe4816a24d06e072717435576868303e961abdef730d973768373b4f413b006c137d63fd1a7937c0ddce317078b610a5fcc1a49d83778260c088cff2cd6e35f58263d43edcb81692121d737960b77b17275765218d0b686907ddbcf0f681bd2662451dfe012db5598c061fc03920011a245c3d8fd3a8b0ee6291959a01e811957dfca6351df838ad3cffc5f28926042c1919a446cdd525d0a1b56591ee9574c16f88557d54b97cd4e077289ee304537176c4cf21e63e33203c076b00642665431183c8b6ea4c58b2d11011d1a1fcb3325a1f7cb148e0a0c70484ebfc6a460de38392761da4f101a2274b21dfd8a5b6870cefe3f1ac9fab09c49acd26de288d43326cfa68248fde5a5d0c2adf5ee4f7a87a570374aa40c904bd3052836b275feca785d29a5cf3af7df0ea226d5fa5aa33df234354a84ecfbc2e2a3d2b3cd2630b765dc0d6a7ea00884d7e805cd5b4d7219b7f5452e27b761d2734bc68d6da9b45de8b69007e6a961a73aa42eeeea30700474cbcbafb4304fac39b6dbbdd2f2a9eb5b959ef1a6efd9a41661265c70db1828f66147fdd9a7865dc9f0a605081ef41202c731184d754e499c95c19af4aaa7a018c8f1bcb1bb3ec4357bb7ccdd227f37179eadd63b10c2c10fff271a3765e9470e06fbfd3e5195ef39a52b20041507f3cc360c37608e976bc29797183feb75e61d4653e90c4a82c744b952efa874c92a675191ba7cac12479bbbe83b5a4b2e919b8e318869a9da789be9a8ae806081bee3c6376f54e5f687a2900a9e610094b6d21e4037066f9c85d65fbcfefaea7f2936aa95adf632bb83b1d5630ae48a2b8c3ffa79e44296a60125d14a5ad30e70f97e072da5b00e115313c0f3e572da51faa8741e98bc2741c8c44ab6d4d60fe0a145eec8bb91c742a0a8eb133a688d322a836a2cc4663ebf2eecfb80fdf1f95e83115d10364baa9357e1e133338b01d6ac2fc08910f7ca44ef8cfce5f5d675346417a40010b2c384a58626378819293aeb6c8cdd0141c3c404a738badafb8bec8d5e3f026405b5e6b7e99acd1d5d8e7e9fc01092d3031536062646a6d747879829295a7b8c0dce2eef5fb00000000000000000011202e47\"\"\")\n-            )\n-    };\n-\n-    static SigVerTestCase[] SigVerTestCases44 = new SigVerTestCase[] {\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8109bb66b04ddeddb48e77501a8b1e2431fefb69da28a572fc535be604e351cd18beb9691c57c1187703ca63921cf5df53c1a1d8472c844298cc59b0906ebf085a85a174ec9cb709aa81328db8a3b3d95ae191e334b021c966398fe2d975db14dade081aa77ad15d4aca49e87a2c376a64258219c1d72c50ca2354d78c5444ba570125773e9088d0275de193b402909c9f1e9754adade9e8103bf8d41bd81d2eb5587e4039b64bbd41525a2c2312eb17e0c47071af5bb3eab2627e92ea39cf6babf0a5f4d55208649742c847cac30a2af906c688ee987d2b9f103fafc9e86f59584e616b15ab231b64402c2c98f3fcc95cddc447741f2dc3ab4302b863f32b4b5071158bd66258343f1d045f1ff297cb287e3164593462d56df6b0705ab71e0c75ed1722611ba541254fc381f064f6226178d1354cdaa9b47c13b1bfd54a41d9bab19929e25aca0ea68d8ec2f42e816a9784293919fbb01bbefb93f77e3dcc89cbad5bad43b5358207d36d98a74626c33d84524d0263a188c3da78c9242fe1d7819bae24012800d11fc5068e351272f12ca8b57f4a6365268e1df64e4d5dcd2cb7a04e66de16cbd8092be8af5dc85c9300979525b507600d8590ff68a61290d1f4d29cb3c39a462c16f4fc3365835d2b172d1976ca92b6bf7d28a803151c47fa8ff00243864b60d80872cba15e20b1a0bee3b7ab1fc2aceb4c87c2e69616d1fc8e1bdf5daa83e9b297b3b744d1a1528c9caf12c459f78c0a4d6e62da5cb8c06a504d0d68a05288822874891e1b8bcde599eff5dc2b8e7a5d3d5e8ef1c28ce2e2a8c56f2a3911a82dfb2178172808fb81f4c171f73b10e29d3c8923d2377b64ad9c56d0cac35ffa23fe98120f1760afebd25b26bb4fc977306a829cd7dbc90c7f05a76948bac0428f93463e0c04e8d00326e57608e66fcdfbf91d4dfd9caa1452a2d91cff100538f6935e054d679390b21e8e45260cabf1acc2fbdfa27142b25c4c2e3bdc6df8bc30f26f2558caa5b68c34c87f2054cec383088bb5147791652192b936e1aa27ea851336b2e80b1ad9cd8d6412910b1750fe471f9e7aaef8cd21e1e53fa1283f0a32b3d2d17635ab1f965b8a4c052cb0e90d624b832eb2e18b5fb19c504d4b999850b03a4828913878dc519644d570a7957bd571021ddb29aae7043e18c8acd95e5a0c3ba4da989ae53422abf52e386d476d444ad15204110fa28bf28c6ea2e896b3ff5a2d58ecc0ca5801ec916fb59e135ab3e8e05b83fcb2bfa6af62c0d05719781bbc7305005b2b9a790ef912c0fbcdd9df52806173ac6d5d63aee49e10fd03191e722e68450247a7696ee3b3de8c325762795239084622abb2ac462dd4e57532335a51756d5e8e56095d21925ff3ff0f6ebd1a9bd1ab13a23607de3ceb409422a6bffde90b5d3eb5ed2b06f5d29fe146c7a3401e1741730dc5ae0ded6a98f227ca625e741a1b2e5b0d7c92bd9af5e12e09f792c5a3e45c24dee0dc489d2ff1e1960aab472c820194e3aca1d34fad159e5a021353b29be8624c6ce946687255bde401f4ce8161ae901ece6da3b9c69bf3742b31afc4258c79c8492bf6155439c787e63713b3b277e093a95776004399a075dda189b84b3a3e219f0df2a1218ef6778294920e74f1c59ec86fe1d4129c84d6dc428783364788418a83c098ffd774b13b830b3e9e5882a73e05915692134624d2a79df7b6a88f301aa200ecdbbafca0a9be8d981ca4340fa808b7d8bf862e9243cb94dc2659262cdb5b0a7aeb497d0ca6a2d1977bd375c9d9f977068d0115d4a552ae364f46a558ad29a0eea0f10ebf629e12deaaa40b916a435b3571663d570f9605129bfe9c\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-d3bed8aae32df74803b6961baa9a2266122e26fd3cfdf1568b460abf5ebd475e1764c7814c6a48cfd6d4df272ea9790c8ebf12fcf5836b0926d593e90828bd49ebdb997e79b79ea68e66f48dad497fbd3a6c3e317162a3f46a4dcc45616be6cefa68210b11fcfc9a906945d30297d1714ad28b1fc7b4c6cec5ece1f5d20729918070cbfb25f285a6fba5e195d2dd75a8c62f581be2d75607b5a8740dd2339682f31230354ea03d0e7cf945f167937592a2d2dcaecc5cb0d36217453809886151073e5d15e6bf7763cce81da19738be3a3bfe96788a56c47d2d166efd18250ad525b4e9e5566c19287ffc277d26a888d0b1073242da5e92b23556552b841ec3355e14173090649a14cfc0134b7714dcbe52095d759d0eaecc7d26f3f12494e4247435d5a6eaa9957aa503f710f8e2844905664905de2f30285e774b46270c58f45d267e850e1a6f711b00e5153040ce090660c97b14432c27d0dd50c0585a8f4c4e1e15d2888a90c184508cb400af2f5d3dc0af3eda99a5e97d0836d079eed38aa6e3e4f724cc63adab509ea5f28bacf3181cb7617a3884407a274824742623eb441ffe1ef15bf6509e7b2305b5341c7a3d73e5dece5b9ead5b99f7e65169ed1673bdb925b52a6b8d524ee37e8538e6917327a8237bfc3ed3f729cef6840e75ef1cef707fa10009e4d5c72561eed18c06e3be94c579f6629373af6a55019c3faeed00abc22deabc59dcd87ecd40e9dc0a5f4b7fe1d711990fc8c03ae9fce980450739c0a441e3512ab7602038dbd1352fe0da554176a58c47c29111eda3d2b9560b3fdcda292c31621e22bce8695748fcde6c81a1270a1944790c174de8a18a505543b459932c6f4228a00984166ddf33e981c2d3ad2e3cd9ce87aadc57e1e437029223e729a99667ad87ca718db5b133a930e73dcfa2d37ad7580373da272e54f62f3d13db9a4bdafb1922145a1624fa96921c0b6bb1b3d7a115ee58dbb2872db79f4d38255c11f160397052aae3ec34921bdad97da72714f37eed4765769e996e45974961e7439352445147dec09b1bd02a776c2c22be612a723b8711f8391e4918a95605fdc866ed64cff6cde9baec4eb42bd880dd0265befe1a33f4d2c0900627f0c7727228aad47d0922caf2a7c86d70960ac2634cea63dbf5d33af04cb149eb618f9ee97adeeb0df8bf599358a82ceeeca582551298a63cbac754b6975cebf7d6e78b6d5ee24dd6c78b51b022f857e230fab176446cc2cbf6986caf8e76734f5280f463641bbda5137fab4800c58f0e1c4dfd45d5813df3f917666bbadb3547c7381eb33b00fd569d58dacdc95a25962024786770aed94d97d4682f9e94d34ecf09e9269993f547901d0120e5e969e3f12a5ac219158750ed0f381dd72a91ffce01f2b612decbef0fa5441925195b813e1273dcd9988457214c9cc503206eb4756e46f900cf2011963e761e12a3774381b877d93aa1c7892f512fc0eeeb225ace5dd7816b919d1717b6e4a34dbd30171a1d036d9ef9d37ab821bc03d881ced0f2aa94eec2fe0b1ca72b7049f749c9e86ba4ff44afdc90931029fa59538014c519f76264a2a45bdab759da02761303ece94fdc2654cc9c818f4af979dad60a9506dd381d150a66e5b0fbdb6e734404f4cc71e6b4e7f5690556d28158cf049f8ce6e4043a82d1ca3c15e480ebeb7e211b2fb00b4bde2733f03f9cc705038050769f9aebb5a1ffc1c9e3d05132ec1ac7b55b6b3b127ffec67cd6e3a1649fc9313e3625c01ebb600c30f622f8bccea15d6f0388439fae057fb1ca54c7aaecff7b1316e74273a2c66037926b246626ea2321c311aac3b5b907e551d7b03f069ae354ddca45d1e5ed3023c576fdfd1c1bce9d8edad78acfde17c9e4d83ba9087d889dee4bfbcd8908a41ebcb4738861abb6b6d8e65251dc4b7c26de398c687b30efd895069410e58d7bc2a105640866321a83dec80ba7b47cd64b002300a9fdb7e7648c2d0f9784ba55f837904df1fd1db46ea82802d4c3e925d4c3e3cde9b9b6063d303d410f3e917f10aa0a18fde5849d14d0a79d71a983f9b09a41e9a3f80dd36e46bdabe65a1d40d7e53b94aa9677561a549aefd98826cc32f6dc5961714d9cfbe913dd3bc68b8891017915066792cded38946c0316fb0eb6d89c10b84df01e0f910a9ce8fa1cbde71edb210918562910cb540d3eab21c8c8e43151a333c516239370ea3dd42294712d6cb920b1f5469e74fa82d4bd7892cec246db13f3f37ef0e980e095faf06e5aa417f5e16de83c8c1ee5ba8340d10785e1b10aa7573dd6f77fd87eab89a014449210e285fb17d0ff7cc3a2c61e6485c2f2e81fec821abf0c694b77f71a91790037d0f141cfb4a74caa4125dfd7236251526a44d4ffaba4589d5237fe647a4082ccd708e27e82bd28597081fecc184a5ecb2d19d115acb18d9d463e3f642e2e606d3f6d496fbbf19149ccac758dcfe8eb53378b65608940925c23754e0f1a390d520f26c4cc088c091e55b3cc475565c0d166265a0396c50d9983e3433bc5527e9fce7fca2bb408b39dbf96bc183c3659f6e8fee0f23e4230c0eef54ae9581b3a38436810accd7c37e83326e3fe7ed1821393a11127027821bef0b96f58a66968271915c1cbcdbcbcd8c62a54bee08b3cf143e859564b798892fbb9c430a6645bb4c8a2be76c37afaa67b7b5a621f987034e88b1608de8a0a09384d85b0c2c872cc2a9f8ac348c5f864d28558f6c6e4523f408586490a78ef95ecffe5b8fdbbc264944869aeaa3ef428d5cc5fcd363d1003239a6651532a442935e674e3cf1aec6f8b32e32db762bf2512efe763c88b9bf4413ea3344835b96fdcdf71c83afd75ae5925c3e76b9afb9fdc72b17f41ec516ab23529e73b9639f5ca42457c5afcc0f2add498456e1db6b3e775ce48753a9a70840c45dfe7cf396b627fad775acd051829f409bd37046bc4cbb57938cb490891c3aa6a04f60769e04685ac1167c9de32fb20cf43f730d8d09b0d74e7f80aeac659509d7941460018c38eda19de38967fee38f7e9526babd21ca1be031dff0591d765ae30361fd8c2a33bc1dded2c43e0e43533a55e72bf1015f5167c8d6bd5e6a19cd4e2ff19f1d47cf42fc361649a669e4524c731bfe7bd11c2e4ff599724de173dd6990f30db8d3b2084d2d3aaa0c0d8b648667b951d510480a28d40c938b71974d749e62d88cbc686eaa31e7f89cb86dda1e778a167610e7bb3cc97cb27f37ef9121ac1baec0a10b40211cc314b02b5df4274acfcd13de277e470b63c0f0fa387dced40050607517a979ccadff817383b404b4d627d8e92b8c1d8e9ecedfc2d344c4e85878b91a4a5aeb2bbc9e3f5010611121a23333a42546d6e8e909aa3b6c4cbe6ec000000000000000000000000000000000a1b2b40\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f7dca662f79909c3ddab57a31bf75b9d925ee06460453ccc8687ed15f17d9b3d5fc251767fd178116899bcb8d29b81a71bf5fcd021349f4d8b9f99edd4c737300e23b29f425671f66fbf2d51e1a668961ef145edbedfc6d1749a5cff043c58a433d4469a3e1f956bffe2142fc6ba5e86c8e326d65ad16ab4a8d0af6644dd046a6176b92f147a04ff674b572b319b9fff5a9fbcd7ffc68eae3197d9b3799e94e18a7ffa1452f1b41c7fb7b98ac7d30f6f371233d4170fd10e95cba9905eece5e06dc153340436c1dd34ceb8334369e9ba4b3c14e9ec3fd29a701fa8baed707a7d51dec96e43de8f4b3b30fa1de919da643d138e911d5bd800e336402bc74fdb6522125a8cd1b252bfa663cc1fc4462a017ca356a0f96bdcb3d54462ec5994fb32c2648361f6230159c74b4869d98c048562eb5837d711ea29abad6d99f8e95613e0069770ba7fd265c555b010dad0619199a44db46e9b362998bd758b882ef26d90fe04b8b18a8887945362c025edfda0db7a750670397a5c9fa8801399fff8f67f071a8a2d8abcbf548f0393f93c89a28dccfcadbc204d108a05c3ab07249d5d4e7afead91645fa7396368622bd2ad3bf3ecfef493dc235365af7f42abae241b7e0f9f52a66acfea9bfee57631f1a921ab1798834d30af1d58bfba62d4818ee30826e0b8b620b885f55dc08b346e7f868e113fe9bdd60b974812d5991b3b9beefb4802a4c1f759e38736b2f4761cd608128887e88637fb5f4d5bc548e9cc121e3fce98a415c64a28b901d26e4a406979511fbfb0d8c1bc02e0533c2ec33e17fc2cb5f430a029d69950a980bb7ef7c1911e28b355478e348dcf4be4d3b30b1279f0e3f0238277fa32c2ae9fe12f1ac3ce5d94a8c1d641ff55458a1fb9b450b0475476dfc41177bf65ab97b85b1064a6b40005ebe1d537515ab664f3c42c61986a11bd93a806f7336b338e9dd8cf5717157aed7ea3747517fc91e75ee9fde429988df68362b4bc31c7a464b07f7a0dc8e91f8fb34679a3d38224c4ef7b7726ad7a17fa68b9d417be3d66ec95720b288f3578ab366ab1e569f66117db15aa5f4b0019cdf305b3fd2297acaf1404e944f9763179b613b896c5be2ceb56c854cddcb3c8fd71d2a62526c1a1d2170c9303ac4e74ce34bd04a28fb5e53461e5ea9aef756b189aa0b5f311cee714ac8e7aeb65693b8c77cbea41bcc9f3bd3387feae9f000abbe7c3f6966c07b5ef0c926e53206cbb2118b3817df8a4b254d03ad98b6c0d86320a9fb8af7d6f6a1dc827e78ac28fec3408e142fb114929fefd1f5a613413462b5a9dd244d820165c87f0c5ea2dd13a5aeb3bbd19c9563ba2937701647edefb1b518fd4b2f7f31055933715d17263a798de2025225212d41e3788d3f4b7b6653071018e35366d2cd39ce7442c70105cbbbb261dfc73308a443f613afa4aab199474ad2f2647f9d94acdb8c11bcdc2c4f8e93dc16bcf9b40f3fbf0130b2776175a3a0370f6dd7c1c84a55057e95848fd3d040a820db1d32229f38fcb790585bf6d896798eda3d27c1229293c0751d689f67dc6bc4e2f973fb6b62355538947fab1b1f6399b8e13faef7a2ff8a20e03faede7d95416854e5e6f1b5ff4a77b24c74fdac038bc1a12e6890f9c5a34f3ee6ece510f1a536ec613ce47173f09d4863d86158b7042bb0df99322bf55c6d5dc14f7f766b43901e77fe6281d5e5e6d722ea65460444172d91f0f99b3140f4a75585c1fe21ae8edfe3862539bd6ceb398450caca1cbe6ceaf6ae59e961cb0b106541bd7eca3ceb2e367921eb4566dc3d0444b766b0cf2a951171dd73b02f668ca8a4221d933791ac84cc6c73235ec468b\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-8F69A33C4CB9627BF27401D4A1BC131D28AD0E2E5A317CE983BA2CC7465861A414FB72745E4DA31C0E04576DFE0D0EE834A1EE323D5A0901DD0189EFD6718049E2FFE1AFA548BE16E04B8963325AEB0CA90238C7A243A3F6AA17BC1D63836898688AC8E919B8EB6D689075E050B4189A1FEC723E0AE8D4AAE9FB6790B527A7552CDA174BF40BF91C4142B076ED8CF112A871450AD994737FD5BCF513D42DB01906636D42C6C10B64F74BD37D68A966DE0F3BBE6541AEB9991DDD0C0070F16715C01820546A014E66D786B8922E905DE2BC65053C42703227B7D8431427E3EBB0DD010DC58C2343147700D673D5707160F234E35BA24516CEDEAC77AE15C667AEFA8E029FF14F169FC0A781593E11D42E8659DA8E91E53EE0A1FF15A3C203BBF9591584A99FF8BACDC37541E126B8CDF3503AB2D1BFC0C37F38A298AB1DDA150288A8110C052469382A9A4F5565778339AB327DD80644A26B218ACE0830E56813CAA658A9F17826CD12B815612BE40906ABC89185EDDFA8E05102842CF27BF040FC7B396E7E2E023CB86AB7AE25F36DA6B6C0842126658E0315D6D8F4B5DF38CA663B55998ABFC72FE9B7EB7CE3BEB72AF73A0B2A45577C5215C42E465EECF4A4E69B6DDC1E65E0C1EBCA\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-f0fddedba6482c562d0ea6791254b7aa34da8b70ca4f0a7cbdfb0e4fa31f902aa37484c4167f74093f5ebd508e4b89966aba03065194cfe3376066b848da8faf1768c397a0e3797bf09e1dd02be5f1e77703ddac9063901b52c9b4be73daa5d44da1a59510b25a974d9c54f8f7889587c6f69a17989ea8b69f4dabced9e23442f337d015ebcf84cf8c5776f4863275532c4bad840d314797e07de00a9c7fdbb60f83392efc382220ecf3f9d60b5594da6fcf00580df29a378a9cc3156bac8ec8bcaa7de1d8d48d2a1f33ea8a8f4956e3c46f386628ca96e009852405b6333710287e376aee2ee7c6f67b1adf07f76fec3688201bd3b152e202c192db41d9bbc0d8411ca019f9a1bf1268b34ce82a7c037fc63d9c63a561003d8247c645173e01c8ef63853e4451185d45cc2d5d2da4261eede504c6da88a55d7cc7bb8df33eca74e9f4b9f9139b9f98964aecc5278448ff9f2a032226e908b32d741037ae689c204bc1f3bc07850debc3fbc839580e6ae1fcfdbd62257ad64c2d6f6945a6757242d1473e64f089c46fe050d79a082e43cfe656f09d01ea219eeb7684188fe80ad59c4bdb57905cba37fe0fdc1b205f1a5a899ab55a37c7d3e003f1051bd3b322b37289df3d350053d6ec8ec1c9cafb49fe147c01f092dcdbd9ffd2b7900205334a077b2ad5c57a53410bc5b9f32930fc6f6a270d84d4436d8c716344df877f5e523ec9e1ecdd43ac21e2c4cb8706415be0ea1060c7127d6a327eca92956771af363c03ec4a0ccdf958bee76803208191946dea6e51a85dd071f3711555cba324e5a7d7459a7662fa6cce043b34845fe77cc651883c478d0d4b2c09e76bf401f0c12721d21357546dc78d2f054b409b6a702328d720023096e911144b7bb724f1d799b0b446954a305bf46944f122867cea17b9798636498a8393bc2dd328b0b3ae78b44ae35cbabe62e0f0d3ea4cd6db0bfce87c6e9fb3364c2ee27b5edbfce17c8df592882dd057dda81855abe0d0898961ace81b0ff22b4471bf96ce814a45f7c6b3e07ef1f18c9eb238b44dc6a50d7489a1af58d2dd1ea2ab2b1a0b4b661e55bbe6dbe9314e76207ec0a02edb2fe7e8fad8141401d1f1a80237cf5a10604ebd26ca46c0ed5d8bfe96c3a1d6ff5b7d2de69402d348e5db561e531deafe29b0767620d7613b817d4d3a6568911c291c3436b40043cdef83a8b7f527aa8e9ca89dc923c2bee6e41312af6ca1530ec7c6aae798e25a6a31ecd29f4ddd56d663e430e5c1ead28a23d424148b1a8aebe9ad7faafa4e295215962d294edb7b1f994ccf43238038ff1af9597d24ecfb68aad4e4d2be280c6fda0cb88b4a1b0deacf678857d83c955115c094980ef8fddfa5045a3e38e733bafa243a91e89a5676312db195f1fe7c0f7b0262628a68c6619db1fd85d84a02b9e7da8234304192aa3db15a294dc4e9e7cb32f8662ff0a49fc4309700e0dea871edeef3df09ec78c3791fa604ad69bbd8c211f136dbbfd49009fb5e4fcbb2c995bbe361c580a3aeb1c88dbb2f148cd05fa9ced0d826e24c268b741953c8ec804add66a9b8dbda05a9296201d0f447b45a4bb7271fbd3359a29815bedd33ae87b52bb270cec2369dbac94528eb48a1a66c129793a4365212f1cbe7e24c87a805ec0f41cc2f36bb2f2423ce6904406b1362c46d51d6d5685dcc06915636e20ea3649d6d1da39c6177630d1d48f393d7093fc12415e5789b15e1ffd07e1f810057ab6545b22b24a93f9af3ae254407f9920af8a48ec40412998dca523ee1e122a5e1107a1121cad25652c1e00f6fa115c58b4a7a60cb4e3b219d9828f2c8efb04a443717e73146a89fe1a4f887b564010eeba3695164704c517d3597ddf34dc51dc460773394d8cb4d562498cd127020973bcb2315c25ad136dafcfc0d674341045ab1de0e4230ec91d579ef1a42ad69892f17dd271e9eab28097f8f9c5e78c50c36c8a02f1625ec41132ff1731e3c59ba20cafacc9ea890db35b8c9606bbd5457262d0c44c4659f933adb64fc74a884e152627cafdb20cc64ca10ed9ee16d814b506415cd0141406b0286124e37f777dc810d70d4125a72bd98a2b73bb26173494568bec76350b2b3b399fde1e3c115f1fbc99929a58a8ccc2b9cc1efcdffd210d88ad48c54a48e837cf841c9f1a350531b695c6fa08ce3148682fceb9fd17f121fc1e3275f65b5a8cd93a25d42318bd21e94ea8873744f2ab530c58dd3bc1109a5c872e61887bddc455b1bcdddb91c0ef4437a49a9f6c73fd371bc6c6d2fa594f78224646f2b8cfee3563c57149aa3a6995dbcf0e6782c53694b39b8812dd069c0cbe713fe44446e44beb4ffe38072deebf3ccb20134168702fc023c4ddf9aedd387a8bd6fcb075850cf1f29f2bc283f5731b75b68169dda2289ac221217bee3e2ed479fc5ea8244a99cb27a015d7a3ebbd1f7acef07b63f17011c5e39ccd0c025d0bce5aed7c482685c39f1fd82a9b08c197f9cc18da457ad0ad55250ea935bee50df659b2c7a501a348b8759643881a9c5555015799adafe10130d6107e0b964b48d23c909e55843b62b9dcd1dd3b235c487968c2c3d87fe29b2fe3ec7a8fc1c1666fc8d2b6adddea39ad704cf5eb6c22f0a5aeb80e2bb04f6c2c6bb9ceadcdf7945140ba942581213dba8428a8c06155f200082f7faf357ffaa653245e2752787fc1598e000eb567cedd49b98d5e4fcbcfd5c4ee10793c16a4767445fcd16ce4201cdd005e95cf5a714a9e0f648673269b5fcd8ca0cc254b6cd2fb428075a12b7ab2bb07a5ddd82e58c04676563b11dfede4daf13e1362a5171364a2f556c36130c1eadb59dd966622f8b86502f379e0dddf69a1f73f58ca6867b4612f28e67c7dfc49dcb56dcb17a79aa0e56a08c14e1e909fd21d05003ea921ab717bae0ce1f15a74a71c4d7e6936d20c7e661806d5f8a5f4cd93ab6720775057d4c0450a6c9e2211af47c57a7127f59983d824d35f48848043aaf3e76209a6cb6f34b15e5099b2c3801bcdca3a5c626bec9b6e92a67189dbcdad0d59d2b30a1f9cf9de45084ed6d35e32722b6642ab870247b42eb8f5fe39e97709141e36b5888fbf496199675274d840f15f5ffe40d74be3bba8b4dc51425f839ef7d041a4232ccb93b754c524ba141c75ba94209f9e76a0d7c8f2aa3e126e6eae35f19de3fbe38f17143d1a83830a2b9b4c8a8b0bbac29363ea9ed0fb1001f67e1501b6f4d6406e2335a61f3386c9e6a2447e3249d3db8390158af9b7e57d81fcc00a4210194ef6f872821a8cc475187780d658903040b0c0e172030576772769facc1d3d6dcec001c30335b5d5f62656b8f96aab7c4d9dceef3f5051b2240435b75797d90a2c9d20b1b1c585d89919ce1e5e6ebf500000000000000000000000000000013273441\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8a37e080550701795416f5587b977446898ac8147890840db53ae4c7a65508bbab7a2ae6095c3238547f76228d5527b3cf1a6f773c1df211fbc5c754b69e27dee951eeadc89246b2a5fc047cb04416c905d36b9aa8f449c2198aeaf57a7aee84b4cdee17f94e1099fbac56e943298ffb574dae6d616ad7e13788d56b841acd970b4c14d9842452175539e3721ed4b00fcd9585b05915580593421fbb449ab9be941f0d91cff4c6756dab0cc6ea5266d8dd8e79e86a4401a85112d3c871de6e96c86472022c9809b8e1e648adea7e2c3166a7c1529c2ccbef40397051e17e53d0000c6dda30386bcc82254e6126247cbfc19e3c4f2f94db3a05a8fcf608feac3f3eed55fb53724e97ff20e31ba8ed2befd52259e3a3eeb8e7bd80fe56f9e9806e26bca49f0e28be54ce1cd53e75c2c9346cf4d585afe8f9c260ce6eae3649d1ae093becd4220083927ece4f17557a5af9bbb6477d3b0da0dd23f0896a663227700df6df2ce10a0b268d5762696fd9a9ca3ff22eb28b8f999e9f91818e29459c46c3c6a5b6c5eda8b880da621d9fc1792539cfacd58a1b7eb3a54bdaecf96b37d16752659ca51525e6e9dcb06fe54242ae65b9ac8ac5c749c09c12c310371915ecb7ea3cf46d2bd13c66ddfa2b6690e885c469ee34351fe07b749480be85515deb9b70caf055ff56ab85e33a029edf98394d94dea7bb8bf3373de77813233fdcab6377ad20a5dbd3144f2a6243d4f73710c97f9e113d70aa9771b52f19adbd074a790af5d3ce83c74855334161be8d572ce59f1ffb5877f4c56eee62336c7e690295fe8e0e1c964d1938cfaa6ca8f93896716605858ebd9a3c6ee3dcc8a803017f8270df26f7aea45df98f4f3a88f6943e3cad22a79b057d7b3d13554c2dcecb040172eca89ac6d55add4da96165ddb336d439370e71f56dd67612427be4fffaaed5b9f6a4a30884499dac7b82d536833db4480e050089c766120635d9811e0873863d0b1d355592aad472a3f18a1cd217b3d2c203f24e795df30db4350647c1821ca7995883d6db4aad4c141e49af64989e85cdb398968de223f80ebab4b3deeb771aa7270022983ee63ced61fbc4daaf578ae25bcdac546f4e2335f4910f1f5f58562e7ae7b4cfe50ef5e30de69d637da2e50fce483adbaf75a5a7ec6d796432e5ae95461c45ac74c024d4a515b81d18d702b49514e16db48944da5a7b86319c432a84bbd3898007d515620665ba4a5fc83cbe7e060bc9203d1cd971fa73b538d949810e7cde88d082eef96c72c2c0cc6aaa883ba6e4bb92f90f72388a7814cf03c86fd6c60bb92b36a072cd81ecc3bc8952f313e71f981ac53e9a9afd2d996e88fa7d0ddfc9eed0ae45c3665c60ad92e509a183a95aaf2989e9eeb92f09f5b9a462a9a3d5acef6af41ba5c6396d61008d0edc1ebd3e998849fad4026fcd4901448ae94d66950f7939103d2392ec78c7b9ad4fcecd43be503eeaa5763b0d03a55e052051c79f8ad82ec98d24f293b1e339e5093845f37b76d33c74f37f17093124dd18ec1282d0b42a10155da458ed0ec68bc4ad35884abdbbe9592e5e82c78a19f413d6cb41fb1c896246ed4e043d08da02f1f3706427e2d963c6c6f9181f4057a21e2d69597a84b54b197f42caa629b99e20e28a9d2d1905309245dd7e0cd5b5fdac815acdfb64b6128b3ba8d10c83e61618a7e8558715ce1f5430db60fe6e6f0e01791dc734dfaf19d48e813fc1d5fe1f353f4dcaf70b7fac6a170e97c6c541374476c4db1220a4712b1e285d2f91a5fcc4057e6767f1fddf4fcb83e16258b93419d7d25ddb3e36eb7837629253adb7c79aa1fefbe81b2dc59cb93f5390fe\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-0692e4fa67413edeabd602bff25ccbfad2e3402aa7399d8a9f7d0d6d389532019b7d3e63229d12ade7d487f1cade7f9533fbe2eb22a810c94b814a923ea83d7bccbd975af424bf5535f235117afa08156650728d96283a92d6276e34f864c37f8c11674307d653060d8310c0c7bba86515e051c3b1193087df6b22648ee59d6bc7a8c1b509b71620e3f7b5a0aa445f628e15e0725fb49e757cfbfd3dc5fe92a627bee707e33537fced3489e58fa73b49cffb2df08cd45aabaaaa491e77cf205d5be4f86f5a8d4272a5513ccdedfcc210fba346322ffeef9e11dfece2cfb7b854eba1ab581cc533cc6335b2195a20dadb86fae9efea0ab0c7d17710f8b0d8a157272509803c3b49fde1063e9297920bf245fe6502d8bf0a9a1f064d5a58b30b5a14dda6698ae37127f8d867f9aea40e93da3f4af04b91caacd66031d03c0c7e229ebeec8b818f4c970acd5c4dc8e17a3ce618ca96f4ca29f46f5e4059becc5f16ee43df8ba2ee1706c41621da8530689b42136b8a62dab7c691e566b9d48a28b45af799af56bcba07bc6044b64253e9a80e9b5ee01e8af0ca627a84d1a2a7ca9b0659dd1a60b788e5f6538a8223973476e9466459fc4f20cf2d1dab3ab137c5cfab433c436e7f3a6a681f675358b6721dc2850ec7b43aafbda90d13254e4ace6016175bafc1bc28dbf29541639527f246f6c007f41ed1fe6c0329260ce2ecc19395489b5c39d66543c0609120449037f321db95a85be51f1d01a485939390c47b53d82741edd3a5febac17ae6a8a4ca45df32fa6875b4e907d544e529ad26f29b6f923e21acd7964fe739fc1864d72eabe0859ad5e98142ead24c91167fc072a2c2673c7c5bf6da83fc7d662283347388891ca575f275907d06bab987ee5081c2ec808c81c563c902203f8d525243e20b5963967bbbdfa2e8ca9ec8ed703d8dd66c29c8a550c4676044703bc93f969e35f77194412bfb20441bc5e89b5e3238b766940779217af090e0da162e0f95761f63e05a378d0424af4c899a0a68060d9d0e5a035f6ecadbd550961850ee9345111491140810e2eaeff08d8a817700ab4c148c95086ee0663c4261b3cd53f8ab5b5841ba8cb9be8c5ad146d8549f21750be69951fffcca492624e136ed58a5e81cfb01a2147cfc5ca07a0721a38adcd25fed771411c75a5f7ff37457cab19d866b2da0fc45bc77e122143800546bc49f44909042d96bfdc63ac60f09bf4a75e171ece95bfffdfa73b4e509750ec6579996d0c83d59afc88ce9af26715be98cc8e6d05a14188a0fac6af1e96fdebe8f10b994d50ae6e84be257e6392e78d70441bdc5de30a1a4a5cfc7d5637810651fd471e162df2a76571c6d3df3b227e89cebcfec352d0f1af41a29e993af22514960c64dffc72a9819a6092150bd440487108024f0243db54ea68881d1c99b529ab529ebca98ea690046b1e37f6f1110686f6d9a7a725aa115c5e9be4189eba063d28801ef85973d0e9eb15179cb64378b6a5304cce09c82864bfed361ffe1702a9ff8e51a214b584247b967e5bb7f64b955acf25bd1073179776d9c03790d46f828342b90ffa2a45081184c3be0caf7aaf6c354b698e9256421ea3688c6fc18132d4e8d956baf9b821e64a579b1462ed4e990259867899ebddb19a861b24c20c2b0a6c274a064e1d1db366a293673153752847a2a5acc23b573ce0975655b79fe1a1ccb347773e3b1c5bb3028a1508687d17f9bf86ebbecb3086db5ef2559be02a68f1cabb47eec1671e6d3d35b65371fd5487b413fee14691745d0eb260c9008f07b5ce629c6d748c452c3131225f8c7586d99b2122202860f6e73c7def4401919e02e18471d1fd874b7c728296648b5ab571c517dea55be9f9ba65ff2cb349576a76030789dec17102a375ef8d779f2f2ed17be8fc41b84b1ef69ed18cefe28122127f211ee1abaf2a4044a3b1ee653395141da50db99dd3f73f85b5c0158a74f6f9707c7f62beffd70c068db1d6ef686cad7bb859c98049935e73aa4ea76c3225d4f19b333a4290ed0d723c6192034618fe3214306536741e20b066a6b9190972f4c4722534bf760a07e8d3a45dfbc67dbb8a5874332a4fc0e0a0640ca3999b93d34e4d8731957465e213577bade1f9b371540dbba188674ea205db7b244c77b6a772caf69f8b46b7b05439a852232348ef6d437bf7c6c79a4c0520a8ead1f3c00de2a063eb5a1e162f4db1ee94f1fb94f56f62d951da29f6b3018485c4a5c2c5f8573691aa096d8cd2922b66c8b7fc828d49e92a3d648cfa8ef524199b4bf5a8f15693960c5f59862825ccdda554b17e9c35f7e6a24365508f5a23c6ae211e3db71740fa444f92159c8df59c4b073f362cdb658842466efde20e9ba0472e2f682ecb655961ba8ad7575e8b02320ab6fce9188321816968a15789977084409d89b487253c778ef1ea1a1f47c750e37138735bcd58f6956ab7c8dd1c8a7ad35067c0ba0940b3b091c362d3165007df94167f33e0c660cf02ee5d6ed90c8ab4655ed47655d810751dfb2f1e65c890ed24c976bba0b8a998102d660a05325261b38fdfc82ba300683df5d561f73a11fe6f06425d11ef4c6f32e6de2ee6081a9b772e07614866f54e63ccbf7b1d9a1c3701ccbd1d9087241d8e2987203dc798d9431b8ab1fde5ad788db13c2e996a1d21b1559cffe3f7132e1aa83acf6c517d8e8d719076a36c08b2c6afbe5d23dfb9c5272ffb2af2b8febd51946199b90f98e7d49358057fb881f4e8641e0524c3471c0f6bb4cf59bccc7dcf09ab2c2d8a783710c982a35e4512c30e1c19bbfeffd992884ade3dd2a90039ebef2c23ab98fdfaaf6ebf34ae7fcb7fe742798c50a49d740244e65c49b22144c05047061e592b32ab61733a73b55ae04c9f36273dcb2eeb4872e7b7d009d4a54b867613ca0f69c4e7756a48ba7f9539048d495a578b8a76cac198d77aeb6c3a7dd474390f91faea384c94cfd73486ec226319946fd829c3ced266ab11db84176c7f67502b6d50ddf46994d6bf748f118045457e3ad7192f0b03c2bcb2455d018bd0ab1306b473f3761fee60d941637c562cdcda0dd5d5e86af9e95bc22570c07c25d5bbc6f1ce04be9e7bce5f7f095afec8b7c4cd930f9bc106e85eb8620668b52c9d09897460b1c8d74febabd73ff9b730c291c28f1410b442d91c533383ac3f2f41f0bcfebc9121b00015d8c506b2183b7d183751636da9226b795eacb2a1223004ea8a18a805b272384ea239ab86b41c556591fbabb783a6f909d5a181f3563ff1f9abe58cc921c751f3340497d94b1b2c6ced1e3e4345e73879296bfd9dade021b25436d73a3caced5e2ea070824262b5d6877aabfc0e8ecf6fe0000000000000000000000000000000000000000000000000000000000000d172332\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a15c38cf5d89e1912b7ecbd269ebc6ac156697942a3b2557f5cb631782ee2ebf3158452ea076bbbf6eafbea078f2da4b969380c279ee4c5133ba8b1e9e3243c30e9085c353bc1210717f47b099d405b0878e0dbc24cd59c6a5181cf07355c10891059c18fd085f9b2aec6df7e6a21ab24094d8357d1b86aa6bd15ae92e9b0929d7bace3d73160d312dd7bb5af9fcdb0cdfd91dda2688d8e507ae12063c22128c69514c8d61a3912397d031549003dc5e2974f6db4238a8c5f1e5ab7d53751e5165f7c3d443a3fab54af972f7f6cb2b154a215ff6b410f45ae17d654fdfb58d0cd19fe75b61aa0f10ee1448d850fc7582b16a4ee6876ef6cc3663921607ce6da3709bcaaa92f15dad54eb8db0ae01f6e093663e0748c33f1ce041bc4566545c0b78dd606991d43fc76a9a1e1fac2c1765bbfd70eef0ef941763f0e32e83258bf2950dbfe8a391aeb927959447a7930dd5a006bc449091ffad53a3c725d5e3b01870cd5bcf9bbcd0bd33de9cad5407ec36b69a7bbb9cb0eadd182b9efa59c1423271217ccc268690ecb7c82c5f8df1df4726bb67ad80b04d3658a6dd1e98201d7c0062bd2bfeab30dcdbaad3b0bad393f1baf3924814ccf5bf6f4c8fdf5976f7b7dfd6242890a7306922c347547d051665c6288444a2bdd918f7346fc7cc8959ee3f8b936011e7e96b2a255af38158cea9df1faf6217d1bb989b09a8de3741d95ee834fdd2ab3962372a2879cfe93b1db989f9503da17e4c4294a6ecaf99a48ce2c79e2ee84c093cfae7bbf2dbbb9373ed2ab1c4e99da39d2b2a25633364c3e08a89b18b82aceed6a77fd805ec3b924f7dc96db19aa0737bf3d5606ba6e95808844a9395995f3a1341f3178159ae83b06b816b73e6e403ce72a93bd60ed2cd3c82863410f1d8e43d9f4c85573085ac80721344bedcafeb14171359a4df9486c844d17e38a4e0006e8c7196198ea8466007ba4e98d6119af88eea0925cebb1f998f988b42961c44f74e337cc693223bfc34142268d33f30e8bdf8480b44bfad1e3f8266d35dc1b5bd6758d0a8d66c7c5a1b93e49f6e0134d49f437257850fd8a6af26fb31b9f7384a7275bdcd69aac0474dae9778f054673bbde6e9dbf441368cef3f8829c45bbfeffbf8d07d7611abe67a5d55c8f2edee611fffacd9b8e1139d39c152a461232c972a8259a8bc7131d1d8b04709dd16e9a2771c95a7e57f7159c723bbf154771d34c7eb85230c57ba06e031da4be80202d7d12ccc74ec2ffcaea3dcda60259b6cf894b9af179f9f627846ceefd4088977911993b49b225fd886185a2739c44b11915896b442ba1ae53777ba23f21cba23f78aaef5a881f92d87827e27990db4de004d17891aeeaf1f91b86dd3f7e1a956f960131b78b3d7eb9789e7a914c4a635ca5181e1396f25b4fd71a7c3da7c1406337390163cff9cd04d74ac34d4debdaa4b4cc212fd5aab3031ba539816be8ea7391ecaaa467041590f36d2a68905e3cf2f5c33ecfd2fcc982d536ee9517069a05f4d6c7fec442dd12fdffb0b6ff021d2f981b44c22d9ea74d2f49f34a43fe96713878f9f0ed43b7864d2b8155dc48a377f93f07a0432c2594ef63c0ec8d26276962c91898643674cb1b11420991deb3fb49650d5c009586519e166fdd0e178078db1554b9484be3313629a835548baca23beafc403e15b89be58810f1eb7aeb302b94d7ef6ecdaff0866c28a98a3d3d283946bed126396f3f3f3f8738e7b69ca9c7c5e856b8f91f325c342dac913098e775af449f0655b6dff597a74ed92187a0bbada59fdb2e23c1c76ddeb19eb017f9c0b0302052db7c6edd11ae1de302f97a4f0f0d95dcc3c2c3e58\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-22AA98C685E1552B525B4302C943037F668279C224B6270DCAF2B06C4F4AB1254C48DE253829FE6DFFA9CB6BB294F054711BAE3FBACFB900CFD1F0844E55D51EC6F697B998759B14C13392DDB6F7DEBA77FFC22468781CE402\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5129dae7c620ef4c5d6b0e0f7b43acd806adc035cfb3901e162be14f2371bba72674649e2004b4d055ab533316dc520afa8c80e5285f40f7ea4ef876e68b0aa4a559ec2363032efe5fd5a1d5050be8221c24b23c403ccf71bde5410b7e5ded038255dfca9439992fddc4fddf96654c78098c84e0182d954e204510bc7e5635ac29cfef21042bd52dde771a500099c75311c8657c5fc5bf303b7769ce8c2de7548b388224e727505c42e6bb69d48d845d9a43e845e7305a098657385307ab23c6bdc70de07868ecc1470b98e2da98fde4636af76fddbde6af2b60b4f27e38d4a86bed60e6f995533261cf91a618c07df0f659561f61bbbd70dd2b020cb04ac1fb6ee1a31ee4f4ae5d0bc2af22d60701700a44f2e8d11b72f4d03b3a96e2fa491e6e61f8dfd3ca678e4eedaac1e6bf418cc4a34b24bddfce3975d84740f7fb92ac2dd7aea450f91bd6ced924f7204754026f649868ccb103100b79d3ab2fdd2f916a76a6212bc583f1f5e541dfbbfb10234681c42ad56a95331c90f5e8b3be82a5b82ed4292094d9d60569fa760628e082740bb2da0a14b2516dda632c007ae3089a2068d2ef48b3f713999a699ab180ca99d7c49c4a0f40b908dc51d9a17db286721f8541839d6acb5eaefcaba5b1ba21e5ace4be0924eb0246e4d195a6eea6e962bb07bef9001a23dc0be7497a1ac79da047ed45b4c38196100b7ce06f466df295655076d14308d94d55103d36799a0683573768bb6baac4a10bd3120e9d47d7798121ab46521d7de8d1c3cd9618347d8947c47676c547231e5be77153f02a3eccaa99a75230e45fd4c1e6a6f951d1a5e6c3be098caf4a16ea3ee88473b1a8d91c0886685409ba9a099bbc0438fedd280f459de3c9c57c92609a865add4cfe76eae9af088680f92a68ab78765f7ad0b95aadfc0a91e175f07ab1f0887b1f448530866f002fc089a63a2e2d33ba63ca1985737ab0b9a73d23af11420d62a8b619dfec0830cf62757ae7f0402a4c0f209d03ed8f1731db5079dc5671c19c5bef712d34479b7f879dbe694e1bfbabc9c05109c615be763dd9ff5ffba888f88b62128b09475527d12203ae67f1ee8da83678b8a4b7b16f7700f919874eaaca48c10cef50a0f447baa17dd19eda59a1f71ad1cdc88e91fd91424e8c668fc93690b9b5914db40ba677a3c71a6d2cd05f42321463c12d55de1a717f69c132dc35e3bddfc23064ee2183e175e1ead1d075c7c1115c8cab91677ad6b483d7151010a7314ad558eafc3128c2dd590aa4e32e8c86cf769ff58ca5f37ee3a4ca0c9f9b2c4a9cdf2a8ae52d1d09110245a8884ac52c597e97b0b0304ee706795abed33f2f1885973253da8728742b54d4e908536c93ee11c1cc36da21d8ed4956255c0a28262baf50ff4a8df767e71a2d920f53b25084ed2cd8069fd13c0d1ef81f6989c0e93609038e9c6174d2a9333b3676ba24886917f32b7316d45dc6e99497f813b599d0bacc432ede0584c654551d3217c63911654b21e0631a5f7abf66d48b2cebff62cbf41ded241a59816fa9ba99cb29a9d000873fff81c689ee95bb9fd31a31863e1bf08fae8b27169c7705344b7085c917bc4434c9bcbaa27423f634233f75b82ebc7adb307f6cc3310ba95478572820973732f4cd3d1f749b728605ffdf23472810d01f6f9580b3852a5c2c7be4f93615960541eb2dc4d5557dffa8646d916370f89e09947e4e14092073357283fff846bd6b83d81092639de3b6ee260770b21275491a6300c12d5ad261f19d8081c9a659bb3f45cff2dc6c04313c7f3fb1b2d4ca96a603259310628356cab1431bee201ef7181f0f9d35e13b6f89a3698a56c3fe08a76418b6ea10b70bb2c0649f7b506f4b15a2578902d6df4065d4c3e79ed26a0d965e97b5ccb47110cf3317b7d90abcc9c7567ad4f2c11c5ca6617e643ee55096894c793d18adcce74c19620b112ab80152984de200d4e4a6ee29ce266b47d662accbb42fc74e7e088138faeb06f32e469d019979cf0b55aec3f420f97029852379417498605cd513fae94c5a5bdf3eec29c54634b94c6a96b0087ef2c8b2e32ad49144a70d27026a5900f9bde658645190ad83583ce8d4a174bf3956f3a581d7e4ee013a4263172d09b3e888299a06a0dd4cdd7e2a118fd753791afd91e0acc9eb1e4d3322feb169e47ac2e9e3e47908f293cb7988387c956806bc4e5bb9f65a84cdf2df9376c2eaf3ebae6a9a710da2083af685a8de79e9e27143c6894a847aa9134cb184b7dc7028b664246dda558891bdbcff3af3a5e0ca8ed06c1402d31cb5afca6260f4cae55fb6a6781768e6a1fbeedaaaee620ec0b7b964a38bf46651de29e4ad7247359df1cf4e50e71f691b73092a2f75f4669a145ffc5a51d51187f42dba767d28a39800789c88752be0c0e0b5aa2aeb3737f1028db4fba59dfba974f9ed8734a57f1f2db29d14f708cb83fbea9e4889f6bfd6f09d714ffe825056215be601bb8b6168d787a6d17335b87986913ff6aee38ad38f571435195b439cd82930a3386ba6e304b72fb5cf04b1ad8d64d8334f5ce0d14718232c613cc12ac1341706f829fa50a5c3010f8d5daf04c3bfde5ba88fc873a2e018d274bcbe85a9559eb224f6c23df124263772aa1262d9932ab813f50317bd7d4a6b0cfc207d8dad53d193d7330c9330d9bf866047237df5baedc69ff546308d2547b5c7f9e0909ff97da474bd3075413b94cf97fe331201f2cb565438182f13acb95529fa6cbd18ef92dab1bd8522f332ab5f375fcfbe01a83e38eef6381a032f9adb60b59e5eb54786f5dff4f5e003b79c7e119663c38e7e9baa0199d3ba32235166936a850c57227b1a16561ee407f7bf09cf6671ce0d0ed0f9d7f916a0ff7f41d8adff8c42b8f4640f1488841cd3cc1e38918dcadd752318080b4f15e58dc7f79aedf3805e1cffc25bb01591f15f54155c59a798a8bb9d5247eeb5d9bbb3abfd65f0bb65f119dc05cc0105475fed4f006e61a1864a29b53770e5b3cae2fa13b5a0d1b05ab9db868a7b1349c9b31d1a1abc19250be50627e8f7283af7d12c57a1c110cbf4acaf5990621d5c04729d475a97cf21c5fb252f5f1514b8d3090cf6e4e22a0146fce697d88d0637b3a60e77b9cbf527c4269adebd5eaddf12633c53f1ff09d869a846d3121371aca8252a5ca1f4fb1b7afbbb3256e53a9f25a3dfbb3a95e9beb67711d27689a28aac998b3129861d9acc72122d43c300bd58d934bd9aaff2ebb55268b94fe7013aa8670a89b19e1cc5d201ce2e73f6bcd8649a18f8caf1af021d374570728690a6cff0f3fb04050a0e17344e7483879798adbfd2ec112325282a3b5d6d72868c95999da4a7c7cacf141a1e2c5e657d7f939ca1a4f3000000000000000000000000000000000000000d1d303d\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-85c8fae58f6c8a7690e2098cdcb1e487e83a1ff669b31724113a0d9f796a68c81164211555e9d9dfec48b46c5eec597bac9fc1fd484cefa07338594b3634b8b58639a8d50a12f76aa7db8ae4c68e733d0903eb94ca3c69012c0b674f198c4f8cd1ed5c345efe6e94d42cdcfeea184fc0bd8986611968503a96f0f2dc5dfd56b6880f211f64d23d4c4e0451381d0a5b917ee0d31a6f782de660381b0f791b371a71506a12b8ed520b9843a34c29abb0795fd661daa226bad6e21345f93ac59aabcef6b7404ecdd11c52fd7c76b5d7e588562489b2a27d039214f41be58f9dc89a6e1daf1d47d6324d96f9dd35e15d83fe686af8f3a65f99a45f918e43d404b481130a1039df8f453e53f7df54ab4fc70006dcc578bb2b2ee96c4816856142de04e43215c0b1f33cb3381ae07062a2698967e965539d435f9b010a38336c303ce8a41591e9cfb9b5cb491faf8b60890a313dde19616a200d844fbe125a25f61495a48af66ae3a490c415fabe05794c841e5e8b27c39e3c05fdd2bc44baca13cbcae569998c172e5325b3f89464d8240273e7a0da097ff7b4116ef1adab1b436d80150bed523682c9ceb8e308b50761ea061b6aa23a0c9e22ab02502f8482183e13cd90a0826698ea63da26d60dd3f7b6d514efba52f351822bb7b2373c2a33318a20f4d74b5bdd17b68e7aec62d80b09278a051c7c769db9a3f416cbc9ba411af50d9ffeb6665cb5b40e0cff170460a6a26e37725f49d1170953a4be705d4fb88086decc49303e761b7bfbea9f289f49378a793bd58be0a34ebd819fd40ae07edb975414dc4e61ef23e5cd503dadd7250e50ab8c6236c3f1b0d836129d735122b6c7a30080347a8140185da8a899fcebf6d8d76387feed318be512d00e9ead0c2d5f8d14fd212019bd68d5084fc4781089d867678fea30c26788f1e724f1a989d542dd96f4d8c30d30dc819eaac63278334a44b4d7b8b91cfe9e3b3999ad77d72605ac293c135061613991403c2fb84367ad98efcc1e793dd717e2ae9e24b8f7ef98f1739f46cc46b7d4226ce5c1dc03b5aa14ddb72725970df13bbf9c7dc607361661d311fec0a6e44f36e115c18b78b9d1949ce5eb36dcefd33c23c53c05b2d17289453fa359d2bb1f1ec04c604b6b356cb86870215c3e474cfc893b1141868958e3707e3d64adf77d4a3c637be8bd7909f0260d91a48f5bed9bf42bd00fb9262d9fc1d40af8566ae13b4043d274ab0a87e9897ec1ea945b88d9eec3beba831999a4acb35e42a3639cf0e8d506b61dce0f0df241326f9892cb93eb1e0dc9fb57ceaa04004ae2a1274aef2596f3daee8ffc4c07df06b476efbedef82325e8adc14279dffdc43592fc8e20ac1f307383defea6e97ae06d96272f4ff56fcd97b15f7fc48b499ab625dde351ace7b3aa8dd6786bb3f376407aa7b1d11aab9a587386ba98fc3a255ba62f00191b464b28cffe3806a0541ddb97308d1172b62353c8e724aa2358226b11480e3d93644bcb552820b86cb46f4379b1f51ef09049c43ff0b97ae65f44ff03380933d80e733f11eedb8001f6ef3bbfc4365f7e1e242f88047f7089cef1385bdc0aa723b1a7acec932884b9df3637bd9218697b91370462ebe8de16163d2aed8a32c9af887f7b282e13fb88c0b062fe2c819217495fc63e81c7b26cfee142ca9568bac3dba7edaa0697976cceed5963697248475aa311a17cea8a24819b8245fb1073de9f13b24804caefd25502940d24f40b5993b135decebe4ac0abfc611185bdc4749646d72f47326b2318c5ce173499a189fad25a2d2e830a381730d5e8c43d3bc3862c6324f8765413468a39abc37631e98bb79059ed\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-d90e5ad6ce804eb56c37cc30b96369f19a67ee324697634f7a40b3d150ba7891f9d8e5a7499781b5ef8f462ce1626eba1213bdf47ea40203aa7b9f6632a02c172826d96683de98ef1fbd163f817d6b4c71ed7fc9ec3a2db3d0bc692f94812d69ddfa81c15292b507d7aa3642b100472acdd9db20f19b60d98e10f1f47fd8f1498cc618a00b8c23ddf109957b78ebb9f5a7d6167fa907f52e312fb333b224c2e1b9b45ffe6027a90efea98d854ab6c6de67a5f24ee28d917caf0014774770989a4816f39fef30dc70b7e068bb306ab404611620b9dcfd40e1cc72400e398cfa342a616fbd5eb075d340d9f1d095b54d01d190b055f21d4de73ccebaec652f982535919e8ec7df3ce42f6e0807252f88d4fae025c68e5dfcd9ac0af5af610608011c630beab1b1bc760c550e79696333b34eab93fa7afc68e900686d1828bfe2bdb57332a9dcb84c66f12638a1ca4ab413efb847078b79610c51ae1cd81fac71319f8e43d356baba173c9775f9dd2569c3699a2cd2e9accc5ff725bc951b6c007e7d7b16b5f3efbde405d7d945dd1fb38724c52958427cc14d7a1f913c2c911fbc50e61a1aea400383561c78d32a38677ee62b201067c6744500f27135fd789e6adbafcd841a2796bedebe47059a8917f5eddc09eedf7aa6187f7f9e91e3893a3870b307a47da4366f767045390e1df69909d50e57ce6b2656a9f9eea5222cb8a05142c09ce230dc49edd7c4107241a4f317577c135a656071335408b809a18588f7dba155bff5acab476e99e62b0249e362d75ac201772552865f91eda373f722d19eb4e4f66c94627667af033c4d4f8e6eacdbb2a6abf47c931527c66da42f8ac3bc1a9c38e88a9d862beb1785ef9e1edcc3aac6477fcb78bea88b5a7796bc6e3e33ff1e0ca1fa73e66307e409365ccc8cf5a0cdba2bc96a7150d030b1349b15469ba21c7d53c641402776d61fca08d0a6268b43c063f51f110b8708251030cf393eed4898e2fc4f9654c05e700ca3e9d9b68274556f88c61c35860579ccbbfbf3dc367a88b076a4618772cac1c225069ed77168bc9e50737d2502d6b102a8904cb3118489e39c31507203175b35a295980cce3f9653330307583e3cbe2ec1d6e5578db4e5fed4bceb20922036891dd58b00e0e98a408f2212c5cebc7faaee235162bcfe6e482d4d1ca012078aa78bc9001a021c14e2ce86e484ad41ddae6c256f05cbbd64d99d20ca4fd0fa65d3565bd749689ded6c835d1370b047dbf1da76cb99f43ce660654725a40f7e8dc99716bd12bc3b3cc140eac2d230ee9177c8766e3cdd8d83948c98ac97b28826918a8835b5b563e887fa2ae18fd47d2c56e7a213d92533f05bb608baa68518ffcbb15e6847a776029809450ff9c0d4fa422fee078fefb04e860f5edc713412436e836f873bca3515842f70841f400db22e21c7a9c1ae25727a39e7e00e29abf256cfd8817115303a40c61577ce6e914b8c6e9481165f554be7a58c22c6a66266222ec80f1af4c6455301cbd80f5cb42d69f524d9a121699eca6d78bfc4db7bebdd8d03f83a638882aba3967f377be4f54295205b8f284a341796b4a00ce517e41ad2ac1d1dec2189a702b957a4d5d67fa1625341266585a220f0c276e339c29f58b13227021b6631cc37701899f0d7a761e13220ac0c39b5f98c688571915c38f8d0a23811d11cea0ff0e319e2bb06ff31990e00aa254e671f350bb9be4a5c78a992ea5de9276b0c542e2544d6a9a2e0339805ab40a9066352e2cf864a102406c4a11268b0ea22d029bdf694cd2ae75d9184920a9a707ab649a8f422ce4a85fd30aadcc07d3dde5b3b753668a303267aa1e43c81617b6aff5c7cdfcdb66eae646146903cf84a014c696473d0c52e19fc5da06bafc475ebbc367cd775676175b4268b42132f2959349a39e73ed553fbb50c8b213e4ae9d8682b837a3d8d938d4a4cfa72b564a39f5137afaaa442b562ff09bbb5c2faa2197f227979a9cf580dcbf01a07da6239f709fa91185e1a0d0847d77a50a4825fc0c2a6dc7140de2d4789b1fb4587c2e9b24f33d11728071548ea967622a1b97af44b51b2300c2c87d1f05b8d0e710a2ea5e123e479717cda447c0d4cc2ccfe753e6da45c38f568a8c2a82418420fa5de3fe08e196f2e2c6691b7774f4d4351c37e974721d4c505a6ba037969034627d05014a543e96956cc991e583abc9125aac8324f46e71345811f7ed8553bab0d166cd8bfe2fc21aa96c1ac168b40c61aaa7ff5461cd2c1339e8ac3c54cb1a8abf0ca4e7edd9e9842a01a91eeb6f3702be5e81936d53f11ae7d191cc6b8afbbf1f78dec898a0c30df889f43a8cfa8ce1d2a324c15b501a0ace8076b26334fcf03bb3db377d285a812f3ad76c0ecd7aa3b76f9072e40b272d514fad2d661d168b00c2b27ed394d4cffbbe38ffd1e7b84bfac69b4fca99b8f316471fd37678e4501f16ae1b2acb472c065aad5b482cc893fba258f29a90e1faa8f4c5235f136b25d1e451f20784e6b761dbe4fa68a41285baa9634f7d87807c407a9e7be6e483f3f224367caeba42f0df19b5dce47630396ec6ac6ff1b5c23e02f599cad3ef117ff74d7331facf763c39ea70c2071087774ef8a2ff268f27d06b96e50bd52eb5ab55a9f5530339abe6f07d5a27f64aa8015b5d2a768452f8ca82484113420464d06d7c61ec25c89a422b788f3bae8e79c0020fc93122f53356a9e678087f80b1938e42fbee9efab604f959b7f4d8c52d900d71b24c39a1cac0831c22907ab3348ad20bd6818023a72266983678edad084a13ee07196fddeb52c79bfb925e3ef4bae2ac564b04956c0097800546e965687584c2738a2009b0caa15183ba1b6966488fdcca6937bffdd9cd6f51424a83cb6324d2c845dbcc9237bde7126516ea59d36cf2b63ce239db57c01bce472886eff29ca612510ca318398aae4618b8d6fd9f6c6e8cceb4b3dbe5d059038b9a6b81e07f3599cb1febf3b0dae4eb9d5e3b6a3e11b24aef1377cd941f94a56f7c7f1fd85807d9d97ea0aace9d94516dd7ee271880f4a7bd18b4266c510e16f95aead24a9d3202ef331028b0f4233023aef2d18aefcb5dc66eea08013463c008b86faf617fcb6929a2bb78ee0459788792c9e3b5d3cf92371f4555c0955bc746264cf6f56edcd8bc8d044c170610fe76edf0e875f9d6d12eceeafd955e0130805963455a348ce41788cea9e2601decc02006907f5e092fa70d2f0f21945a5f24edc734da33efef7efeb22c8b142d86a47d9d5c13f93258eaa396e3ce55b8f6ce736a5010a347b7f9298babcc6d7e4fb03192d4e57daeaf7fd03041d262d47676d8b8c93b0b6b7bfe4e9f9fc0a161e3368a1c7cce7f200000000000000000000000000000000000000000000000000000000000d162933\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c298f170b4286195747d986e0de1fbb602feb53b5f242a12bfa2b7602b22358a3334e7bc913d08f6457753c611730936fabf6e8c5863a0ad142f8b4fa0f1e68ca0e588749fdc255de072dec16e7d62e2b4fc1a20cedc7879c6fad196e4f6de33df29dfd6df65470515f6be6c9f9273473a6a6daf1d58c279e81b578cf5192b839cea97b8fc3d54048772ce1c009aee0381e37f39f82585dae69d8e03ac9d0b2d9a772b0e4a8ac46456c2f98820d1111a4db13eb26a33cef728017a0d9793d880b9d06a57b8dbb41270cc203a0f4367e52abb424533a426034e6e746a077963aba533cc54004e7a4d17a0ca93904bf1dd4da52908cec4df9abe86ea50290d3c792bbd1d629610669975ec9682a4afa4a06a37b8c90a4bfc407161f1ef6539d104c39b14ccb6d7f36ccc0a573d79c70f5b1d1f049893a31a228e32f20ea84503a1b7f2115a74089e61ad991022b11757f5c361b8bda665bc96d6fc2b999e546e48e431457016de365a50163a53ccceb193fd80e4bcfd658aa2b916bac07052d9c17c6d0c8c94017fbaa1a1f4638cc7351dfcd4b5beeee945f5ccd602fea693a105c0834ac9d730fd0bfb83c4ea5d137bbf3cc7a6ed840d5f6a22f4891d29e8d0ef2146f2785acc3404117f606b20a13bd0912e46bb3e7b707f1cb348055ab50da962fdea841bba33d43fcc2a3dc4359b0f7648f648c2600e3c84a0c9cd58b7e05cd041aea383eb7f0b6e078bc425bbedd4a29d09e095e0e44d4778d6f5733581c29231833871ee121aa2c09e44bbd3c3b8411643b67b86494859623d9d135aad0153949af237eab32f50e9cae3a6c30b2c873a5416e2c9d3cf00cc03f29cacf723f9340810c632db0801a8d8de3b7ac08f6313800f7fe501a5ec92b28bd06731fa1b95023fb635c02aa6822d88a28d595068603def2116fc0405e6d936e327364f78329f194e1d9651d7bb607908089eb25d9dec4e56991f4850a32843f10a245d2c71b58e5b5954e75a00e276b03237b23e9ec3ff258c501710e1f7bc4a03b88754ea03d84adf76b0f5e20f3fe76b5fce6eb355941a2875e2ed797069dc9f4ea3659b55fa3eeba496a153befa37fcf3004a6502717f61754854855f7b3e6b7782099603754f201bd1f49355974bb4276c70a59593e44733cb1b5c99964d4ff89611a55a1d82a91b8ae03ca4a3362cadd29ce9207c9c836f989c09b590f5f070becff4c35b318a974a923216385b6b57808ab3fea3bdf6f17ac0e4e1bc0f18473bc97a89ce5358a8c4fa04859a915f15f9a06725c77517ea112ebad0a4913af1080700b8f700af9fee59c3067ba30fbeb995b0b88eb59dbd45a1971240f15fb40e0a1084c482a01bc773559b6b8e83bdb4ffb70df25cc30212e8f22c09abb514f8152bd1affa3c7856c90bdf8b4024a1a8af3d70c3de23999f36834659eeca8bf225e16f0185409609ae8ea5d861794481cfa5b75a275d9294543c4a257f3dfdfce9c91e46468b2235bb161850bcaf76fa405dccf9918a0e2903ffa5433412ff09ba73d3c3c342525c9f653feec2d5b1596d2b8e79612d913e2c371384d1376f56a2cc9268d9c82e80567f1f27434aef775163a8b162801bef77f299c58a3363df141c63e86c717a8091d7a079afdab2835b11be5f216116018d70b0512747a066abdeea688f82d859a79a5cd2a839a907caf5469d2758d5120d4f9d7f4445f0107645e63f6af7b9078842d034ec39337f17f01fbcc31ecc4feeba4588f567a6a467f8a7870c655683c46eb776853c0f1ec4c890cf408d2e3f808673eb455bb9f333a982e7f9f393a65dad51974b1a35fad8e8077a8ef3971bb823d6f9ab494868\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-c2112c791ee26987cafdde1bc02fbb99d5b97ad71d4c75cc36cda559ba853a351b3088a5727856774fb3a100640034901b886b9aad882c879f7f7a50090b1b4372ef71a124563aaa22ed2b227f76c4c5ad691499766556691ac72d3ed717eb83c06951bc8ba4c8829b225aca7eddd999e9e6e9cfca939ba21d2f7f79c750f43719c520b344252a283cc677fcf1dc27a4dfb396541c97d7e948ab873640d1a1a0d941d2677878360eb2b703f727a00cff03547f5516d5e18b07d904e3d978a905c83b45a2a58f407a5778d6e6da955705f0e55931fb31a1b1be5196b6e80574b8e37022d4e7778bce58a817aeee7ce13c07196dfd6c00a6604e40f3d12a46c11bc6295788be5bcb2a39db2bd64780b966530496a23f9e60ab9c7a4a48a5cfc3b1f657e00aeb99eaf8ae38e723cd14191f927ebd7944da428584b23da5ada543d3c071cfe95910aecd65f7be88aa6c7bfb6e52ec3c925fcb0fa4b09d7612a8b19a4156f44d07c77eb229edc08d78b52ddb7bb3e42e95faa1b013d4861ce5166fbd0d0822baef9bb5d1f41956be5cd1efef4bd3f92beb656957c0ba51dfd4d186e4804b71e91bca6f3341ca585f0c48c3cd496a1f1736f513650fcae2379bd1d127641f1a92c0c394d2c02301d29116b3245ccfcb6ae3b55b29503a49fe6357d3f027a20c30528abe22623c53c73970090b12d994f1a69d5a9877ef15f3475cd1b9d58cc38a0289e12a09ff756c7e93bd675b2354d78ec79492051751db9b3f35a58eac539d4c6efb259de9383d5eea913c98a6daa6173b113f8d7bac440e1bc4652d1645b96c4e3ae6697c9e6e7a1332d27f28704b850cccf469f829a6aee604e0906d1b84fe104303cb9e187a19b9ef212dd334f134cdf6256dcdd39e91283e6d7f3f808fa5cebe6263fba31f766bd86fb271a524042d3b42b9d1e7729c00c6e4104eea77934fb44fbf7b22ad80eba63fcf1ac416429df3c012afd4f42984b8006e5ab52b94fca1f54fe91ddd2ba4f8366cf74597dc4c2fb1554c20ca28ca4262888d70f342b55916f6eb5a2e6df5a9d0299f2c15ca37f5cd688792a5c255e2f684035770cf4a8894b750f1f97f9c226f9c451ce0b5701a4486b9feabdd379ad31f1164706a137aa487a25c088882c282b5f67599f8f9488b3c1b0540cdd48ad57754d760880478b686914cc7cbb3f478baf3742382749edb287e867d5863fc40a5f57805d1a7006a2b45046698ce63bf85fde10d9171a618a10da3b20d97052fa9416e56ebbfc9b1cbacaafdbfdfecf18d23df346f6838d90d2f0a45aa650d08be2360ad8b3259541f86946fa047ba2cf05e9542e67307dff451a0bea83f3acd2a328f0e9a7c870dcb1b3ef6a387c208f5128951b4115aa4f58193844d54113a5d13cc6e58cc210cc4865613db00c6c515720de072a9fbc60dfb50f48fc9ee71072e14a2380b62d644dd49c7c8f5b30233434f56ebb4c00bc1106f2f7b89d6f4076480fd24857efaecb3a3921a3f9d9bb84353792bbc017ec91775660c21cc6b7c2c5b629258fe1655afda4bde38fb66d9f5b90e0f70419d06b38de8bf050e7278cc02b9b7d762dcd32245c9776da3fe15af5bde873bbfd1d84e8083a06ae1d030a7d32e9a50be599ed816e47b54ec7b686f5e8c55c8edb7d7f34302f343ae7027234205c8d3943244f91ea9c2e6f2f33fb56af3a0ccc1c101608275ffd7a18201a0cf3291320e8c1e397684c604dcb23953aac9cbd65fb8fa615dfe77dd2b7033195030b57e005e28f14b316e63c6a62d81fee131d3ae71734e90e3ca43c6516996fe169bc279e3b398e8ef8929760da3389b29c0e7139a2d889403b823b3361c310ab668167eed34f3ff6e32542619d7d5298bdf4c9e7b4849f0310f386faee38f5e94f5455ebbfce87a34fa93b808d5eac6a62b1fdc84d3895d8c78e211a7074c78262c24c5153234882a4bc043703d997a1b8ea707712ed46f6fb654758634d1591ee3d79804c8417ace22343bce4d0754f4e72e2f518bdcdff3bad1313b974f7f2b7100e6fdbf2fcc34f5eccddf570905659ace5cecd78ceb88f7fffa03bcdb71a77f975f3d13146422c765a228063cd9cc92f0031b8ba6796025ecd4caa8bab5c48b0e6f164739150ac00bbfba4ce69cd212debadd620242fd5610f3fab75e7a0eb587e4ccdd010fac040d8c0b71673f6a6165b188fb59293138048805ffaa283b9539b947efc6382c929295769bf9d5e434b9eac6d1b9ff9ac26c0a1d1f0efa3108401e4f522579e1bd504a64d1359e44fa59f4f33ac4cf3e7508aab3388cd5be219937185ef7459b9c565034c8d4920d5fc62080db0f0930630d14c285ca11e360705f8ca5786e394842230636241a461966252d634cba8f68e0fc398b4298f4ecc907f5a1fd9795e427e6de785d7bc87130d986b286afcc646723010b329e8cadbafe1a9ee23f8010fa6ae67d1bf950c5f0e6fd53d31ad52ca81dfc5225f61de691d868130bf71d6428474215c9d5236a796c29f983064a2c9f40e69efd090ba55c47313f13b52b5d9edb7206ceb0eaf57198f32a722f9a60400bf550d5ecbdb0e460c791c44e56a1301f6f6bf0d9c1ff04ef6d238c060bc10e75114f7d055b5c3c0ac2961ff42c1145a8505e5d6c53389f04b20d2cbdc56759b861c803897be3eebf932a4877b1c4a0b63c96ef9369445e48f4b0ac34bf1799075db6dbb7d18d28f15f58152b0e2e618fb4551a85f5d1613a0a908a2edbc40e4d7e9683ebf5f9f8879e415e070a8eb52c71ee5451f95f0d351c3013e160d55c1207883c8e6fc20a4aef495c4194a7bfc8afee6af3b82bbd0a32aeab5023169d0361a4449af7a19318d063e4f2ed690b28f5d0786bd6ce5f72b9a6e411d878abe616767fdae52cdac529eb07074ec518723f8f870666211bd427b5253a67e40a318563a8b2d8916a746fc47e3ce26103c437e07db67ef057bae6a953614ee7acd16532d0485ad02b4bec1b84302e1e28c41e508eac18f33f76c150c3142e1c383c28ed902dc79922749842efc4c91c75754ea5e0678a117612dfc7ea07025cfe2e4213780734c4f18e191cbd815619b41b0f2e9965499ae19666c4ea34dc1af69dd60dbbe78c6f462a20699b58f50682e9602e7f16580149797067d0ed1b0b36099a0c5732d64d1efc1f370d4c71a6e77c5d319571c3d9274444db155b11286edbb625b77d1294d6dce64ad7fe58a7808b7c9edf7699bbc0e0342dc74158ae419c01b64c07bafb6452f131bd0f889cc40419d3dfd9c7c4418a37763218498c29f19a0b0d2b3e404b525d707c8cb9ecedfd22303a597091a3c3cfd1f8fd1d252641799a9bb3c4c5c9cedee10e172b2c33393c5054777f9eb5d9e0efff000000000000000000000000000000000000000000000f1b293a\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-53a902d7abe3103058efce7d2beeea878d48063b6dc8aad68420073c43fa5173338893b842805ab8c6b94060698d44b066b008a8209d8ddb3c4c6c0b69ac78166bc97b52b4302e8fcb4a30d102f863b67cc332a2fd4d3f1858613b126a6416e528f2e7a0e12eb547acd956914391edfb42fba61dd2418ead4d0297336b75ce069e3621f5e729d2974afaf595291030a557f5256f63d08c0b475fd47a05299e29f4dd0aba10ecb6a473af5223445faf46c2d06c326d3e407061c4799f8eda4ee8a1958a16ca8a0b8f3cb8658c77429a459a67210cc325ef0b361a8e226ead6a8675f9f97be9556ff40817d169a95cf026b38afe7e28836fb14ebc9aff7c02254ab5256183312e450646885f6177110daa1675d2b2bbc722391b7e55e6d6e0dedaa772715dea46ad23e03d6b11000a187cf51f8ce5154883f80dcf200197b9b9bbd5fa870327e2d173f2ce1a43d89d7b75db2aed4d790e6e452584dd8f525a7d2e8375dc70d4a85520981d36e5378a429ebbbe858f8ce43d6a24623d7b145d29e9660b36b3ab1729b53806ba0fac817109448422f5a7bf366ce1f424ff8fa8be40855af63753ff59dd1063d39314a95f171c72c42a6a9870d09111f2ed626ede30e58074cfd938fe3eb334cc90d7ff7dfa03d6463597b2a882340ff39d018a698a16126e796e93eef162e215daa91c08106526dbfe79a7837743ca396777300f56c3e969757300f2627ecb95a0bbb553578a679652d0a2ad07efc2a55eb6f5baa7e992e6d9c2650970c6e93ca06293b7482416605b176571b1f516e0c9a2dad7fa54c0256f469e98cb1e82ece83bb4b70ee8750aab2927cba821d53f3425677ac92871d0926a2f1ecbc1dd194eb61b408acb43c712f825e153e1a996a833b199a9436384a2007678dfbc76083d51af71e032c42d4d8998a5c0ebcfc43b1a69f8b1c78c98fe57cf0d56a051fada6148d5ae7284a882ca1e912673b6b5df84fc9e6d8a76a7f57f6aef0ddc005e56bb35cd88597a15499cd55cae68ff75c43e4651d965037e4eba881adfafcabf85efb416d3df34f16372a30c83bcc56663a8439459883c6ea4776de4ae02c1f8e038525ee9a862aabd0b4465ab3c0e352ab5094ba58719c2373b3d34f11d1eb25ac268893fd511a49ca86fe7442cac88af7f2571c512817c3f324fe5a4cfda13a02659abe2c35c750abf9d39cde64b81987a177d9ba5c0759d264a1fa080b4681987bb5e5e04a3460a7c8bf230cb26fe9ddd6a97f633259affd1aafa54ccffb39e5da6241ed98a9e95d3388456e7342cfbc095dd2502456ea067dc640eb421b636fc6da7110ab35409ab52a8597f3bae8d34fcdce772c78293c2aa62c940d806dac0e67737e7480fcdd0c7a9ed9e98a7b1bb70c60df6546b5508c5dde0f75a744802ec5bf19fed717b2a878a80ae472e1895333532d7ed13810fa158cb66d93443a6baf8765db2a18e5fa35cf21001215e4ad365f10c38ee777e9cb38efc319ebe4eb106accfcd8182d9673233403f2b55cff98617a1b8be9cd65ab4c79704f082b7ca9f208177fe25a5d79cda75b4b5381b5ec55ddea73c5e837081e34aa68ac01a1412ac438ccd96f763845d58ea897ca67ced998934e310281c3a60c82140413fa130356a7d7974860ff08948bd955ff8b954a03a3d072fdbd1bc772e5a93ee4c9ff1ba44bf47a5e15de0c9746577a21e7e1c16e41c07780969d442ba5d95ceb93b05b9b5fd6993b090ecfd4b75f18d03fdd5589c830069cb32093aaa556f5a8bc49f1c0eab930899e60401ff4503d6aa56a09abdd37ad7b9536de631b0bd0b2d6eed874cd5774394560d0bdb1f5237b7d332bd\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-8ec19a12690fcc4af18b44a46b33caf661ff986315472e2fb9cbf0db6b11f596b5d540572ff4b722d39e5685205ae44f62645ecb6a4f319b1dff9c685f6bc65a311cdd61204bc23da3dbb96f71ecb3922ac19580212e57c121abe10baca724b0acec03dbb6de182f1bf5090131eb5ced5b8cede5444055d33838272afbf8a9d9752c0536f5b544dfd0f20d4994638157e64ff51ea35539244dfad50261f282ee2fbd5fe3b90607a4b2590cc24e67911927ada6cf9b03fd482df572e6cc7441b6129677f3d3d0c0f5e7212bbc652bf53140630bb0e3236d09943796ef92e7916a2c4fcde8c9af522d9661feb6dacacce83e14a6384afaface04e3c8c0febc6306445b84df88cd91f34235c7351048c0d75b6039a102bb0ef30f6e5fae78718be6412db19dbf7536e42b0e5efd950e764c6a80f70839d356f55d607ef58eb366a840706be8f79e8e2ba251063336c819ea3fc60ad76665cd7fc8ad9e404847e0a8ccd5aadf3fc36dd091972959e3de4a5c49bf799c97fe4ac5e993fccd03994e6afd1562a564b111c52860f564e1b335664d57de6fffe5cc93885bc34ac7d278dd28efb850f3e67e810285f47e170243454ac65a18807dca131c99be1f85e34c1c6c3bd3c1f2a13c0341ca961d871e92a2353d813c06396dd29b835971551cdd4d7fffce4d32facc1026b05ce3ac795d54db67983c5bf4aa269cce8470e535bb2555096769215d3df109e2e21b6ffeb6b7461481b80d4894300400851118abb4253b9b86c774522d544dc6c6c2a3c75ce8fb5c3ff2564b9a696ad05b228b8effdf6f54506e2afd2c284d3a988857e4aa22d9d90feef71eceb135f7d6e9462c7302acde68bbc9a813521293d515e8f36aa5ea94a7727837aca76c6fcab11013eb18921091002701166c586abac8f20770e6df05bc682a19c65dcbecc86bca8c85c9175d5f0fba67b33a383987e7483366793ba7b35942b3627a33c23a9172807b578b536fd0faa8c3d9f3d90b6bad5d2b582634b44f9ea81f3cde12ebcf48999d1da8651cbc89e87e0cc049c4d1efbe3eb625ef4e09c2f879ac1eb7e20ef58544332a50953643b02a73308cd481d0582b4edec16c4f31f8ad1ee6d3575ed3e318a8df9a0bf81eaf7bfc720268c1955033bd16fc652cf68ac5289488532665c4b584fcff68aa04b1d4ee55556973eff4d8713b2c3bb6dfe6614b9e6138ce9799ad65d824159e1cfc1519a741cce18ad822de048f19e01d40287494822393bd6d321b8ec3cfe0f402aabdf03743ed8343d442871a6a56821596144f9005f72f5bb36841975970caf6df22724959ff6c8b57049c88176f61bb1b08543d03a7c872b87ff2fb7a66ac64954feec8343f99dc5a84ef8c207033bb837bdeb64c5d4674014ec3ee792303ce5690f2d47d176037ba7ad21b8d4fa2b83d6bafce3cff48e12e12066be8ec16bb2127a26516afba6a87a1f7951ad2ba40b76a800e2c27aad75f883343ca988862a6dc4e481faea5a6dccc8fefcc79f4970bb831fc514cb993624cb7eab874af102ce5e06dbaf57d37cad159541791afb1a47f9c838db9168b27290633e0cef4446d8765ab5e70c7995d437d1128c0a3b0d5c6da7bb7b3e450574018687549eabb5122a89ebda3de0763497658f160fdf054042465eb25174609f26f4755a50d2df918dfec074aedfdf151645b73461d3eab7234aabe1d19ae9896029b57b44b90654666a2e8847d1aaab3b3525952eeb5f0f8cdbc8e3e54ebbf6be367d689e7140596ba674ba940baa5b9637c685f1a1228acd893478365ce039a0a67155eabc02ccfe8f7731d8ccf754cbfa512e604682bb1be083feb424114da3d7243498be28857f19468e5667f59625902b9cd228c366b684154a47acc23b03ff98dfe0c2d02502f6c5e7a5dd212722f5c06793b86d43494003e88818db45102e790ed30f20eac90be73df9b92f5064827fd43c9be4423f61c23dd661a6fd9856f41a2f65127d555e509919b17b0be2e27bb45b07e39482877651ab5e4222875a988a9f97a6dbf9cdccad27576426927153dc4310583c9bd8cf6fb5d50a2d2956986c7bfac0f552693355d8ce9c4dbf4dc5fd6523cf4d32ff62b4e8d9e281eca16ac706b3b737c0d2c977ce4cd4bb41e5e1e2cc16e63ee0c408713ce2831e68e271b52a86c2b8bd7a9d0fba9706a55a5b62ef3eb8a29c793f7a66e182ba4ea249a90ca8988c00396c2d858e3ad362076a97ebfe8d9870a339c0a12bf997b66ff5367b4591c8b0deff659c133e4f97740802a73fb1cc6bdb46b3f9cb31086efe81f62bc087786d1e984773aa976ac597537ff1b1e84991be89df4c1ec1e29a2d72c2dbc5449af5bb95090d1159d6b80e2c5936db148aecac22d39803cead75e78a05731f382b09b51b9a9b79ca9d5bb51b78e591bde312625e52b4ab6eaca92e95edde3baa07b8d12588c7bcd8c2ca4a7e6e5a776eca1168694da493e96fccfa6f68e25cd4d441a111d8de31a0914e19900b218ae50f21ae0659f8f8dbd7f301a061b80add0697f6201ffb0d8c6d42e3926dfd98897d967e928802c9ea3cc2d3c3b9e36b1a29e95fed603f46d990db7034d53159e5a5cd7a72f08e451b5d7dcbe0437a2f20ba5cb69046e218cd3a7b491d1eb47fbb22e2a3b103396bc7273c218bd0eac9f272e6d01a7ded0595b02694981cba45020c10aad67735d5772078099136786401282c850448fbf27e71c1233e5a992a47cda05c1946c6f3cc6cec3899dbd435a1d016b3c771153f44e46bf55fa7fb3c39d8fd1bc14244fb70d4a5b8823b39e449e4d5237e0d99e49e88a85813efd60296b8bdd24d27725f993850b2f66825b9c469f212d6ea131ad96a089350cb76f434e1d2054fc083571f857a36a93f0e6f5fb80ab74f9bef3c5bb7df3f47885f3d136acea283085b4080dbaa5b555faeee52948e6a5e0b0d7c202fd036108998704022d7361ec72a89ca5008f48d11814e8420b453ec202cd6ddbbdbfeaa03ebfbba50c508c5c1a81f6f4367a9f817c39613713c6ce439cca013e1b645854e10256f48ed38c50a7e4a76d01102782d433e612ece1aecc1f48ce45b1da41962c89e811e26895a4a953c38efb620d2285c05a99c27d8e02ff419924c99daad70827ba815c68b0165fd7c4b6ca77d3db1a61f8f95d2c5e93ed860f90abc418791dcd1f95f29f4a45a8bb637889c16c7bbea2ed4a87eb11d4c2d8a7ddc6a68d1f83b82f0d206ddaf76f796c21e0ba9dc3179e85dae4d7b3fa40da3c65c0d499b38362e179e8306b1361f3212b0df9001f325a747b808991969ea2a9b5c5d5def00b0f3139587d8890989ba5bfcbdde2e3e4e7eaf8fb162326354a53f0f2fb080c1c25474f5355627b868a9fa3babfca00000000000000000000000000000012273041\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8786af4f2617911e937b31037e66d478136009c090bf4a971bc2f286aa31c2525c8f9b56e09a9fcf16fea34672f563b3155acf083bd828ebecf0efd3e39064b9711f3211e1f39634a3725df3096e7569d1ddcc691b199ca2c20e578ad772eff6cd0d68c97043e2530efc0b1905e48a3edfdb51afdf8a6b2742b63784aaf511e29bef9c39d5fc9b33aa61e95acf13a7109e8a92825f7fde5171ca31b0b22652f90325f96817697a661ffc0b42180be669d2065a0196a2a857bb7a3c79fda83533392b10b9aac11b0ea53aff7c323a7291fea59cd8df052f2d3b22fb268b8cce4e081bd2ff05c57f7434b09d26d222c012bfa3329da7d6fc00f69fb1c162ceb12e4b6af61ab58b0f8ecc0ac3aa1d87c84ed60afd0711c550a29fb13f4e9388dab0cc11eb0e2bec3da4a7e80aafd7f94443ace3ff4aff51c12b79dab5f05f736bcbe3dcc4675a5f339844671d623bc4964d6d771e1696ed85c5749f3b2c4face72cbe8b93d500dc6a056fedd1798f8b01798c317b5a977a4b9e79f8ade91aee8b73c0af3c06e9347b18d797c642303572e168848d60a84d3343fff120edc804fe79bb34065000e316bcbd0c925fa2487e8f10ec89cfb986206f1c6b2d6aaec470b2354df70dd5ecfc396f108b78e0475f2617ee65fab93080dc0eb31a0e12df889aeef18b97417ab5deea3215b238b2413f8d53b22a61388a5364c898eebcceeaacdeec1af995be8f32942797a9863a5ca675864f563616fe52b4c349360f4a9b823d0eeb22d3ae744306f84442e75586b6b1c1f9c205e805805f2055d4d7e836a957de5dce2677256a51b7ab6a30aaf660344c7c2927f180d231120dd9540c968da520105a524a2b141ffc96eb9039bee53da2cacaf5b9b5a750a95fe2b32aab89236a4eba885042c97c61cebbe18cbe34ce20792674be6e32e605b4b2e7461e1e7a95c67c59a7da8e8b0561164f4b8490bb7255ad58951bab2ea936e6446d115de213893d27ed1282304794fe889a6b7a523a051af7e577271ffd0a532e056f7c22b0899f8802868a2932f3d4b3697e769a406e0568fd3f3f371833a7c89cfd035536b766abb9351c2d3a09ab9abb6138f0cea3defb6001aef54314bcb1567cda06cb68565967765474ad31631d001312cbaa60ee16794e26e1c27bbbbf2bf6f2d08e48c0a910f3d79870d6de87feef4915e52f65ed6893d82e03a3c3c9f4d22deba3d9dd8cce4685f16e675d95e2e4254e46bb8d72c553f114ff041a1534b34ce7eb9bdeafbc3e1d3271ef774a8154ca31b068e89bcc41344be537226b57ffb5a7a4e3b905b377ecbe87be3aa51ea17e3eab7561e1b71f40709f9590e8b3fbfb8a89622b495a6356ac1a7d002bcf63ab4774db1ac1e257af66a6ac4175894d3b637d23aec12f57d1004b7a7a8df5766bc78a5ebbe1eb1ee9f84d496f83d6de920503d03e7310f401e6862e63f2b39dc2c899ac5e014a90e574f96c7abfe7a08475d34c4bd8053883a379f362a34cb062eef2a1b2207e50facfb47d97fc111dc887b23df7022186113aaa39caba060f58bed427107de9b05afaaac1fd09c5e86a799d975e3eea727082106b14516a06fc8fd4563c7f7255be155785d3f3ee486b15fcbe0d7feb27a0ef0468ccfc447fbe04e7d4cdc2a28ea98dd279689c1d5192c95db184c8bcd657c436387e816170d8f1b8d0fd970f3761539e29f2a41d73316c6a6ad5b6e1f59804237821a16800072f7bf113c7f874761874223412e533cd5f0d601e18792c17599e535a9accf340de625feee6680ad14b84f33efaa35ef3e57eb11b4fdaa855b91314ec966380e76ea352b4967f4c222dad5a9dbc456a9c\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-a99a8d52ee69a69d91581ac798a7b34cc594801ad2f15e8769de6761048ad79b7dfebfc6f97cb7694d14fc315c879de9029b2b5331f64ae72e36833d3e5bf3c4ab64b8ad225d7b17a146f4d15f05ff72a7ce975e6558d11e3dd0e24c5b8d81ecbf96c732ddc2af021f62ff48719eb70ecef5e65a3acd389afe3ebf1fd6bc218dacffe07c78ed1ea343b603e61d5af9f6399153572549b29f88139d08ac0899ef084a847ec0fa58d0ee3856dff6262fb2355873cfa1426eb3f80ab52d3f6cfac2bae2a1abb12a68e6476f7593f5e5694d541d7d09b02a39832450c80eb785fd1cc13b441a96f22910a886aaf3ff61df7ff9f079cebeeeee218495f5307da9ce916bd86698560f758896675af604a3bfc2721e8e3dd4bd6664950d7e8575a09d439ff54086efa2405dd362f03c6df688120573884b46e45970e65934b5baa1255d6344fb115ffb51aa25b1bcdee1020e754bcce521ef28bf26d7bdfa498a5a182ec8d202d7dd0c0926b71c12eb74ab4b541c822f399bb4f4a50411ff28784930e8c9a6e77afa420a958528d4848f6255067d19496a23b39b21b572158178fe1e4749b3292133ecedc0db2038fe2eac7ad1fe02f426af8391988e46bdc8b621e2c17704360decaf8d6ed08ca825b1b3b8ff95024f174949c7a6f9d8a4a079f2fab1fa0132c01f09b7f7abe7d6aadf9c53d58a97d270a1f9065b295b5c524f3bfa0de09ae02ea5b98ce4403418af601e5cc876b4f0c95ecb7c1b8bb2f72448f721d81c13cefb99106251d4f37e47dc57d9449b405a132d25a2f08ddd8dc77f0eb905d6f6eb0d0cce96b95068d669286c02f1cefdade77b3dbadfa7cb912c62279d0a4530cc5c52941b19de495e2a2a3713537b584b2f7b76e3952ead9ca20b7bc9bf26bd36176521f4347cc8b3c2553d37ee02066258dadf33306a2743917287c09ab07cef7bc4435d582e3cc2fe79c272d719f133e6e5ff1341cfc139257d5a7eb146327c03e897b9668567b6cd9fcb74711e73df074ee139a57229879b903e55a04c5c9fe9b6cf669998444b93963f85ac7176a3f021d7c9409d7ee827de8a11cdc431521c96ed22fa6f13759eb03687d997a25a9bd60800f3f534b3e9c9dba97206b7c2f326b34a087be1798866d1914e59c8eb2c77414be030f8dc270c6ab76a6e1515fc70ce50c497364fc55f0ee4f49d3d22a08c6b9348042d904ec2f8862ccf5ee0b3d22d2f1a99579d35a916748ef608406883c53f18ef4caeddcd780e4a44c872bf2dca063aa11cc715e23cd996e4e3874463a1b4711bbcdc2418e4df10667930cbc7af5ed9b629ed452c240e02b58ef61ee4f1429a6d9aa57471781887f2e1890e70f7589f8d8b4e5ad223ba9d0f73d3ec74d8249b82596c8ec733881fdd0c96d2455ff5e340298a5a6fc91cbbc1ea5a8a3908f6da6ccbec88756874de1518602557d2df30505dbdd6d59469a6f2bfd240aeab1099c350d6730892585c577936181bc9f7fa6ef3dbb0c1d39a082b1a35a86899cf26261927d52b373120225752792f02cd2f196b5540121c3f9c0fab27b44b9462f6396195e21f2e1f736095554de7221f3c9ba23b72b480852c86b179c0e4778441c3c5242d4feb9851165dad83804c7ce5d534dcf918d27ab36ea1faa48149307b95cc3bf51a6bca256f115e3c618b9787a21941b58ce52abe359eb1a5a19aaf67dd56950a6d0179637ed0ea5421b899325ba05a26771b9449ba0de0b3e674d62398e30363d1d885f424dbbc200af85c87d28ae8a3054d82d4be0196188089d180acc7197f07033cca984e20732e9029e832268ea405cadb00dd002e3506e621d3fa7b023454329abe1a48f7dc35730f5f352c25694eb2a0650f9505866d9013e8b88b19b0c5dc12ce799ce8de35caa4b6552f399f8a7b06bf1e5bea54092b504d9ce81fc3fa2a40dd9ba5a2b8711d02dc46ecc222b14655b151499f4b537260b6595a89703ff56ff4c976a4592dd53d12b6fa9a4a775acba17a1b3dcc5ec0a4e03db9c9402ef6380e62d7f76aacd613a482d31cc17a7ae99311a01916a3abffc336959a491995183f531ca9ed0af40131a28da068038649639155bd12b9d3a06238cd3c4b754905b56dcd52cd213a2ea369623f32ac7877e6150d0f5ee25de926829beda4ef67cd3c4323042aaf3deecaa4d404426f234fca778826dd3f29b007d369ff1a0af66ccbbcf20d9f33565b7ed745c160cbc5242c683588a67223d81409d77611cdce68a0478bc50422da24632852862319f20b446917557588d19d8add012137959e6791aa7ae19597a8a2f875bb8b78b17d6f5d5b10c1996414ffa08e698c7789343487a62a98474a39cac820ecb1a855dc825d1d7bb9c302f9945b4ef5ecf2e85d22fdb7f440018181ce3c71fd8a6493c7e0ac2d38ae115a018a3583eb45abb5542e66cf77587ae2e1da41ef8b98b2c2616f6b62d3e2c7e467955b0ab3431d1f5ab617adf90334d87b2c01e450c5750347c1c98fd4fd4109f13482e11e2a6ebc4a362d26c6ac9e4d112d18c1e90726a2042ea3d5543c33d32ac108dcc34999db8488895315f18fc0d359714eb6c10b0dd405f6baf03c0c7a3b89d6ec2593c317e359488ab2a1e85a722b2ccfeafcdca2e22718a17363634036af5aadae7bbe6f48ea36ae216b827aee084696c7094dfb6e4fa563b51cb1fe41f8e72db7cd527c363bb00bf8d22896f438ba637bb7fe64054d69b628254a4cdce5ad92f753cee7889c460af2fc4cb10ff6458bca2547193ee76e816a39880f48fd2e246b66efb3056cffc0d233a86307e13e7fe87e4b4c8408cf7bdcea51d189dda4c4cb4fa44b222e4d0ed51a18abf77b49fa0280dea06852e864431c1b4473e876e2fe4f00d423aaffac81b95f186467e409583252662a0761a63ac3511058b4b0028d0ad1b760994c98fd7ae64bbbcf8e615e416bf0c1a594c0fdc46f760d5dc394497cecbdbf06d7db93d2a711756a3534f7550dafa01954f291bbbb511b652b032eb00b804d654698127e2ef480c53f47efb10c949f50168b1d888c62c9bbc422dcd07ea4005d751dc31d374357c10af8991adba9e139e75e3367bd18c7e1ac9753b2241960999e6a0ab795c475f5a330baba955dd34fdeadc193d9a6ea7015b44a04d0d5fea544c140c2a419c86f89ea54e4cc2ed8830938b171514a189e5517949c94ab77a5e9521a38560f3bc4e389c7fcb0b49da3f037ad53f75a85c0fff2c43945bb3d3ad65a197c6db5fa9fe3c78293a2a499ab553af3756ddcca3892133c1ee40a7b73bd19262b33364c575e7492a5b0bcbfcacdcfe4e9ec0e264b4d52576c727d9a9da3a7d0d4e3fbff2137789499a3a5b6bac5d4d7dee0fe0317192e4144484d60626f767a7d8c99aab4bee60000000000000014263549\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-194345a0607b1df8fd01f58d30010604261e15d712806f9fb99d3dd6afc994a917dda45b8e4e58058632273a75c00a98e026389b18ba7bfb412cfb510a335d5f7bcf8c192d6e4e643404f1fba8094a76c16682fc7aa910a572be4500a034440dd666e6c1a4f0ec33c699720a44ea8ba52eaf34dab236ebdeff18516606215c8e8071d7f40443253752f9e7593c754ac2891a640633d6d0b1178ef8e52a40f840d78c972b3040eabe17b5d24f99c75b7b949ce2b4d00802b1b0c14c786483310ec86a6fa24d47283c8f3ac2033ba4745830b26751897e121a0b190befe243f034a40f43817308f9f4d37264e99f43c9a6e5ea7c5d03787a0f1e288dc24d93cd0354b32004c9891a11845d07dbabe68ed9505beeda51ce431b38a8fe8f1499b54116956dc11532c6598e0c87e7dd57422c0490f74cfa1d084d9893838b115b4241cd55ad6eb382b0c287d2135d8df9b5d026fdbb4bbba19fcaadb38e26c3d14f844e22f870026f7bea480eaff61bef74ca4d304a5b49974de22951f069744df5cfcb0b8d13d2a8e2682184d79bff6e492ddd04b51014b205a4814e2953f8c94b080b071209187678d9460dc1ae115c83e6e597035dc3578137d781d4ed549f8d66c855022069a86cc91f0ae27974cff924ea9c5e8032c4190a384f9e1eaecb7821497cb44c4bb411e107e6c507d23c877e6417fc313695c99bb71e7ff5c3f8a6093d08228b8342ae11fcb09fdaf38698b98895f519f5c87e754a4dfbbc70867661c5a6a8e6034f1b3153e779406eab5681f7697cb3b2e95f0473405b0126068963b74a08c5810310dd41058fb7180119b5138e44ef42a3debca1260b60c65daaa004616ca73d59bfcc24b18a96d72eea6dcfd018d3234278b56e398cc24367ad598cb1defadcc6e1949cb7894e7dde1e4012f432cd3d3d86e7a8ba4c96dc49002012655a11ddd17d4eab510d4dbceabc40c8bf2879e7e1fd5ae4d6d3d16840b026803e1e06116bbd74c3e3a864a2c72f4b758392377038fcf436fb83aae85c0e56676ed444248f0004d88cca4ecfb96fe1e4ad34e723a5d4a33ddd433c848cef1a65cc0bf8b16cea1bba4660af54555b48c4b1eb89d189419c2bc65b6681c1673d5998c2e51436080d3173229c84ad475b1552cbe0f937e60c4fadf3734683347216908e93cf2d41594a41b703fe7005c6bd7b1762d2ab3f0fe7e69dc5ec4f53e6460f7e924950584ee44fb3354edcf1f971f4c05c8a7be858f601d70435603f7487c9d7f51e4644aaef76e9748d8f2ed2ff6d03b4df231d63e563726eba99e549b5dd3cdc811093d255ce0b59b60e68d89c38bccbf5d37df816a286eeeea5eef12ed8e04f2222d71ae0fef9d901042b22131d7f788ab9d53a6f82f3c0fa46c9ee90d2b5d7187885fdbed61247cd44b80065a543f9806657f0e61d8e27050f817121270e7871c038377b97d3dbb26b6f935a0eb001eca6800cf4bddd0758373583e78e7cbb26db88ac874e4e183e7a0d7e4664bc573728744faa48d83c7f8fb56c06b91adb52c419f7d73446b9ac7c7c607bebb424b7a86a3a8ccc2aad419dbf7999163162facd2036ad2267e34293b710da6e6fa31b904fda337847b83f179a5936cfeecc03fe121964642d6245e63a4a5d264631d7b82278a4a689642fbcb9cfac6af2e9d81363fa46e1b71725779abd771eacfbf0d6d92e59d52b485203d568b2a6b55819a73bd129e939b1095770861a43d0f6cc44b53f50949c755c6b274612b611d5418bdb7753c337c48ef6ec49045644d875960beab7707ae7610c1382bffabefd20eef4c68eecd2c17f1bce375048b236ab98f1fe1db575475db6e1bb\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-551742a530ae4d15d68f1e222c8865e6fa59541a5e4b6e137197b52a5cb84548c099c3328b28865c34e90095e8959c65f68d8e4ef9e9cab97590736dac647c93cdec474c3e6d1c934e2eea593479349b6e56b95dc356cab1e2a2a7a94dd6490d9a186879ab75f16e0bb792863a7a8a19ed88d74d22f7c17f3b55b4d6440fffd4c24d814d3c09cd80b3d3d137882439f628337061253522775d68c1072b8df9403ff65679d24b06f1a2779ed76ca3ce153c264a06cf04948eece4f06243f22898bc815a90344479a8edbee87d0c5473474b1b588006f6dce5be82c7bcc2db7b50fab4c2cf06eefed93110aa634f6691e9b757aa8a01ca52912040a3ca6cd6f9c596eedc0a9d49f1bbee32eceb2374336f07e74b425d6a894f8c3e49a255068d08ddff453dff688f9c74a2be872e2a205018fb3e0149113ce438a7b83e60f536ac616d748fb2c590f3ec7e4c81629a4fbd993ced51995432cb8b3778f7d4e375fa54c9511e8e97323ac021b7cb2184bcce98f87a2712740ea1bf33670c4a718b475b31249ddc1a9c2b216efa7b5bc01f792cdcbd07f3e7719f71b81c3a31d8cfb7dc07efa06e0740743c9bc515c0983c845b1c7b2cfe7745c8d0e6967156cd36e88c8e3eaeb3c96ede6f94a53eb05abbd3ce8abb9f4d2c350969a8d5fdd673188cf5f8da51704b7390d8de842a18f5d900da6f0de22b9b4836947acd4d49de53e6bf96295c3f89a01070fa3742ca5070b56afd534fd4bcc280bfa5233ba58e3bcc46cdcefb5a07904ead0092cc088e8ef1de2ae418a8f977dbba6b23a634b93abf5135504ec8adae1647042210be6e6e0c9b333c3f1d0dc906ea63eca4697823fa06cbaf999ffa6894353d0b886bc89b6d8b80d88a80b570aabd37e8bfebb692a61ef6e344b4bc5d10a4d4d7aa2b2c47935ce37c1f2143be5df3d55f9a947c1d7244d80a74e92822a7e178229d703ed770a3a2e8e07cd465d6b4fda758867bf09dcbf050203796ca9a6926196f13d8a5d034f566522954999ab327307189e0791866385a3eede8b8485d6c673ca69452d0a7ed6a32142b74115cd39c797e48f38111b309a3b5a122fff1c8afbfa7eac2dcac8cf225c971b88a49e845447ccfc634341e2eeb214ab57de15ec8de38300871207d8bf98a4b9a44642679a67fc1792a46bc051cbdceb15b4355f56233ea87dd6613afa535b333104292e946ac29b73d04be3b83a0a6afd275fc02d99fa0a0b1796275b45aee6fbf801f5394fd5bb2670d18bba553e533d39d0e66ff194a7555bd23ce14ecc97ebd99facaaeb8a0d0e088d2b9bebbc48b4fe32da39a310e28150936dc5e86bab264baed9721beec5a6ab21db810f1bf539d4e6283b7a382984595eabb42b21aef0a1186d66c988132b0fcd17ebf0bf9347d64e334e165d1e8107f6b49403d77516f55e973469ec6d3ca2ecfa2df3c7a82d08ce5875e4a0997ab9c4189e1b4c37b5567fa7731d6981d96e9fdc35abe9ae1a4ab30c5b329cc617a2f92cb91109738a7a41da00c48eeefd6e003d3e25de538bf85d83a4610c0f86e7af160703666e6fb525122ecbacd13242679cb02298777001fa2ae853ec73eb581229400c93408644bd64cac57854113aff1fff6855e2632e1e47bd145865a142c9ca2000b2595fd4edc7a4b4cced9dd87a596a9e245c25fc87a91d676fa0b02a237f895df9dbf2eb099a60fadc4b8829bbf7aaf94d1fdd10dc560244f0d6f5394318497eeac7cceef0bfd8316914f766396d9a5a7cf907866f85ac6e188133614490e1031dbb8abb003b2fe2995a28fac84d07dde5987a981101087606d6b4d4fc1bf7b3cf56f667ffdfc28adfefe6dfce01579859b662a189306cb048bb4b8d66fa9861e83fb28c325b89abd6838e71e5ebeead3e014f40b48a36f1d468a4a24954f571f4972afdce0d6f9dfea1cb500b6212bbac96e7a3193691eb0823a48e6f49b63eb4b571dc1b60654b6a882d84ec4a10b5faff8c0e71bf1548578a8bb4b772a9dbd1a76792e4186ccaf692a5cfeed5414be448da61b1abed7d58acf60c60022d6f87f25b291c226bd22c9445d15e2dabcdebc6fc91d780493865f4dfe420932d9a106e81f254d97b91d00efba45517edea7c8dbf369a32c9d04a5d141d3427c68b19f189af86b3e2fa8ff622a14947d4a5c4dcd12d3e12c714b32075dd9a9c35e8edd715901559efabebda589fd123d0a7ad33bb67f353bd01c4ef51b26a187986edf0ad892b4c71b2ceace37f103dfa8e933bc422a2799dce9b7ff3de92b578e065b79a8e7d4c028002f5b667886bb783bef181f4040c5b03050f9ce2b9cda0787ce21675222dfe20c40640a37058910069a0cc037ce13a2bada74027901a186b5f194792105708877eecf678aba0436c2dc304e8fc040996e488f764f3d0f52056edc69b5a6e901bb0dcc75acb8acc9f22249961cc5df3d10992a32d724699120a264cddf1450504feb09d82b0181e0148f7ea9ba61e99bcaadef0912e1c545ba9b97a93c9cf5a8c29d3ef2a2608a32684b30ee7d43e6006e81c37b636616e736a019e26079d3025b1c5a3997fd9021634627964a01786891218711daf4812cda28892fd4803dc5ab334f18355cae65eb68924ea9fae67b74ade42b96ebd43010dbd0536f7224fff388433de015721b73c60d4dfbe1101100efe6e69965fcbc8eb442a233654b94f79ac0dd967612fafff60141e1fb714a3e88147072c2b44ac434421eb5295a9ea7752abfd6dfe4e10760f0f1e6e486172d8d4b092e043d085c800a58f5c6882e37099f21565a04ff5c12ad4d716b30164d8951f6cfa56c93388fad772ac2fcbb80276a235fb4369f01c77266f2286b61510eebeccf4a610f995c850b2ca952c27875801b692f8c1ebb61758c44f97ca4628837ab1f6807b57ba56c1b2e39e1a002dc724f06a3fb1510f18b37b0b48dfc21d453ec3a576fcd3302ce89f313ff2aa895f0103e11b3c01291c112a4d9b5f67b48767dbbceb8e1a0393dc8fa7b0b7304a02e30612cee891cad631778726124860518fae5a1b162aac95a6a3aca66e1dfaded70547e4d934bb01034038a23f63e2695f554cda78d42808c750ea5dd3c7c34e74fefaa93a91ca66a472f2c1f8a1de3c6e876fb7721105685639cf82ee003704637125e9177cfd964acec7bc1474ecbb0283e317a03696bcff64e4bf6e58e3893c7fe4d41886690b29c2d6f32ce57ca25559c3739e14af58af1d96f581e469f146d727ed4ff89425f4be0f5384ccfd5941f6c859d6d532126dcf4529564be166d880b4d5b5c617173778197afc8d3dddfec020c17373d494a5461676c7b8c99a3eef2f3f52c2d304160696c7a7e8384919a9da1a7a9ddff071016172229405d707cadbedbdfec000000000000000000000010233645\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-d7910e2ff97acc1d1ab59e023ffe199ab92906dfd6ab2e463731ae484d0393edabdcd6ede796a718c4421fb97c22ed9634ee00dd4b97beb6045c3239c48027aa536f568fe384526ca7595031d0a9f254a7059f5f9654d6bb94535445cac6b0d0a55e26160f6d8dd8bef00d1bfed6c333946e5a23ca8ffdabde68ffa4ae1792cd8debce255f99a305d4cb77145f929d4fda712b0f595486ab1b2efc45818923fb11c1d96faff901f631dfa41a112e042b57f5ee2df7a8924888a22de6000d749babc1662c29901acf7289c893694bc3b09d4148438f8bb532faac79f335287c54413924682b3ab01c01082187530562ead6ac24b7a2a1e91f1f3ebcdfcfb233b22a2f250d3aa97240ca78e21be8e8709807b2c7ff115e4e1f5cd5a899f3466dbad9bd1ed59d305f5cd4d84e4904cc9f28d9930e799d745c3e6089804182e0c18d6a3db171812f8ab1ccb08db164f43893477f6c3b056dbb043b9b3e4e6164688436d6a9384d6aa09ec8005db3e5e490c2b8a8445d8b85b9afa01cf9985c17316341b8f37d2a35aa5239a4fb41a4b1564f7b0ab44f01915e1db94ae448f20f295fc3c3aa5fec745f434d1b9990701fa54f2a18395b15602952b18a10a1aba1e02c53dd9ec4e736e9c3289452f0c179c15ab49ad63c87bc1d74a1ac5405bfa70e21bca11904991bb37cc3e5d4c6efa43f6e697cb761a85e3c0ee987d39e2250a5c09428ee71957575a468dff29301ce72c06c5893eeed5d3128e8dad4f880fb0ec59ff3df2b0a8321b8a3015cb55b52c38ce16a8f49353ef4731c38ed0e747ddd63348e89763b91bc6b4e37616978777a5f57f021868e0c2a75dbefa8eafcffb53fb9732d3439c2234a913cd54ca5d973ac9f07086b45c62ab7ca99133932f638226e31e6aa59f458a45ea8f240e95546b069329c2095d9c9b182094adfc99a1f800cf3894c9a1e034bd00a635c5847d633b6e4d99b7ebeef00b18ea44a90809676feede9dd62ad8585cdf4f8ca5e9c5c236d88c9d19a9c5bef612bb815b4c10b782b40cfc59768138b3336ca4e5a9de60d20280212e17f674d524a51a5018dbc2991599b6547661314c1f38b86b6eef5f1de03a86d95bc919e6becfe9d2c0d646eaaaf173938b7698f4cffc9cf33c189f6174feb11073b4314ed0cf5154c5813c353c06f4f18fb36173f7fb543510168bdc96a47f0c088b9de3d43e63f13e4be4d8e351bb3e27da62c37df0c5d461da8d30b1350d7615f591205d3a0308427498da258658364408e1e59849058a1708f7683a07b8f6daec05142ed4c5ed5b9f59cf6fdd74138702a8d799ce3331b996770873afcc15de2a546bac34f866483b418207ba6e5f1ccf126cbc0456def3c1cbd2b5ebbeecb61d37c8ab2cd413fe3e42cebf8b0bd903426a682977a7d81f117cfbe82a75381af76a58253dadb8e1f2d3e2fc20f6b2b3bd106950ef08f8cfb140900cc29d00265797ac8dd7727e354c8caedbd2f305139127b3d27694c53243a25ddcd67c2ca83f9753acb061c1a0ac52295c28732dd1c4437b6b4fe3480b6b8e3b15e2bca16a7a51492105256f1504718a1954492f6e340177a71989bf5b77f24e608674b550287aa8200a96469a8fae17147d802e6efccaeae8195d2cb5b88ed045359df4820326e5238e376d42f69600b9a7ab03fa9da7f8e32eac544c51aabf8524a108900b8ed928d36742c3ea7824bc2f8f25ed52da46852b728d36c017462b337f4a21ee33d7ba0e43fdef3aed3bd07ccc81f36c62dc3495c22134eabdcd3ffc75ad8ebd59746497eb32ebbb964f50112ee4cf76dca1f467585d372dcb37132770291dfece7be819cb092ea229e\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-e870f21e348b630a1326a0334c872302d0a6da460dc9a0bedb6daebc027b22b9b332c967a2f5991252bccc646e484b83d4fbbaf2887629032de5b3e1b86002cb089bbc58e35737f8c07a694b5cfd38ee3976fd25244e6acb2ccaed20d926af4c9c7526475cb89a72a26ee9b2a25c29128d53446f797344d3eff20d91eba8ba9d02f939d38a775911604124896569964fe5f835df7cbf044f2565a32e017caa93a8848f7c4fff257b885374a6af0df150b79488551200332d176955f304d86340a6df8f98cf93dc12909e1693ce62de02192e63b8af668a0fbb2c345bcfb9b5151131b7b4c7d7eeea48666a8219d5f8b0cc430443ea3d531dbaa6360e51a842fbe1e40ec5fc9ecf9bf172570bf8b31399ba8f12f3b83c40205953414caf7324182657e0fbcc2fffff801c52259294f0b23eeb5ef14c34d955b92ae782739a9f9dae5eb03af4bf4e911c7e758cba1a0f1d0ac1c7256e5d5fae242312f18f6747c5b56d907a49151080485999605246550a6ce8e6341bbd1ec122b179b3102a2673c163ed7174089c10b29cf33b9b5fd1ba22dc73a164404804faed60958c6faa6a09b03dd2eed0fa8782212f1da486543ffc688e37bd43621ab857aba0b13c1e0969a482ce92e00d62ebec1870188734135b0419cb3b9f3a9fcdd68b5b4a53169ae0bc4959462b8eed39264c0b0b34e0595c7a719672abedad01638f3ebfe9e4a460cec890339595a9699db82819723ba08c7bc82080f8989d3d8709386ed1c9fc791ae0cf954e3a897a93d8e235eeb69ae131a912736fecdbe1ba34eb03206110fdb1f81e71dceea673fbb98886ee0d94cb4d76e1e94278b8f2501fea2718466802d3d4a068a2ec53029018df3eb088246b767043f843f79b5ae5537924a9b5e5bd46b19bd7dcf7f14d4c9f4dd05b2c941377434cb37d80a899ee97a5d68345cdec8a43cfef1f286c0102c2d8c9b0d07adef966992dc7ce8b9606917e238625707393552ba9c01c4e72f6e3b533a734c0d60e3a2aba08a823a12a45263b61402d8e62da3e5f5a5c12e0cdee0d255551b8af7d500b547699f72b31a91519891850e4109f4ef380757013fd57a0fa0ec0721dbe825d4cce624cdd8b7f7cf64fb31332f374f6c470b9b8a5171f25d005da4e184665430e7ae553caf2ef9eba994f34b04ed6886c1b768f03868522959fdb164e8ee825f08c4a4dce01de6686695b5dfe6102c7463ab54b084c7fb1366a0b292898c0d7499a3a6ae1995bd2139f7d7c84a0f96b497bb2306028389b983f2e02a2fcfd3c5f8a0b4d2e334d4f3a460829efca41806ba82f2e5ef585531a3f1ff67617ec112f613acafb8420a1cf6230468601cd8b0807d975065fd36aefe77111a5a72ee622da403a51194f8467a122e408a0c3998a3a7f18c2f7774915289a1522f5670527e63e6bde7ee0a84750099d949ff87c6dde67de9cb220518ccda5135d3bf58a42b7d96d14dba0ab87e79547888f6e87b4bb9ed754133d16444eca15045ba54026767e93114e8a3a75a1ff65d0f03c667a8222248119fc8994a84fdf73817bc2d61d6b764d86c69d68b7ca3ae85031181204c39085af1c7efd687fb91d00255dcc934d47228c714cbdc66d4b418112ff0ddc030dab0f4edbcb0309419120ac944e15ddedea5cd3a1d62abdfd8729edcf40d43231e378b2c69670c59c30b4218e7b7f2dcc0ded133b585ad673bed77194b98965fd4a04d93db53ce26128e481de6053a14f40b34f60a169e26e99b4b29979c03e4880fe84474f11627620d196369592c0cdd88c3639c1346d3ee265e550d470b8440c5676387769382ad4b57fac799926cba49f042833301834033d668a4f0e95e2bfdbf295ee9732e30a75b1a76d7a4f0c12029514252d98bcc4330fc2a3172bfe72c8f8202a308de53c4587a17c5e149c92ffb88b79d8b07962cdf91f0310d457c7eff09485a01481313b2aebd081c49b47558c252202b4639dce456a4e786db6a91a24a032d47d1cf9d37969d07e2acfce0067a20994310948821510051ea1ff97f0a5e88f0d36825f7a9b71d5c64d42dead04fed5f6b63dd80bc0325bef6d413644c1b5ac212bf9da2edafef2e6b6d99354470e25c5050703e524dfe08af14dd431e609be5809012ff5d0d4dc260f10fff302168b9d73c86ebc71c21d76ed34f08b12a6dc7ea174ba1c2790ad34a7b5d2e55607ab26eea6289fef0886187f43d5b98b7687b227b58692d61e6a8b9bd04a9c3a5df88e03b20c66d618a6d5a979cc0e33ca400f55918a0d2669c19817e9bc0126a406fe4816a24d06e072717435576868303e961abdef730d973768373b4f413b006c137d63fd1a7937c0ddce317078b610a5fcc1a49d83778260c088cff2cd6e35f58263d43edcb81692121d737960b77b17275765218d0b686907ddbcf0f681bd2662451dfe012db5598c061fc03920011a245c3d8fd3a8b0ee6291959a01e811957dfca6351df838ad3cffc5f28926042c1919a446cdd525d0a1b56591ee9574c16f88557d54b97cd4e077289ee304537176c4cf21e63e33203c076b00642665431183c8b6ea4c58b2d11011d1a1fcb3325a1f7cb148e0a0c70484ebfc6a460de38392761da4f101a2274b21dfd8a5b6870cefe3f1ac9fab09c49acd26de288d43326cfa68248fde5a5d0c2adf5ee4f7a87a570374aa40c904bd3052836b275feca785d29a5cf3af7df0ea226d5fa5aa33df234354a84ecfbc2e2a3d2b3cd2630b765dc0d6a7ea00884d7e805cd5b4d7219b7f5452e27b761d2734bc68d6da9b45de8b69007e6a961a73aa42eeeea30700474cbcbafb4304fac39b6dbbdd2f2a9eb5b959ef1a6efd9a41661265c70db1828f66147fdd9a7865dc9f0a605081ef41202c731184d754e499c95c19af4aaa7a018c8f1bcb1bb3ec4357bb7ccdd227f37179eadd63b10c2c10fff271a3765e9470e06fbfd3e5195ef39a52b20041507f3cc360c37608e976bc29797183feb75e61d4653e90c4a82c744b952efa874c92a675191ba7cac12479bbbe83b5a4b2e919b8e318869a9da789be9a8ae806081bee3c6376f54e5f687a2900a9e610094b6d21e4037066f9c85d65fbcfefaea7f2936aa95adf632bb83b1d5630ae48a2b8c3ffa79e44296a60125d14a5ad30e70f97e072da5b00e115313c0f3e572da51faa8741e98bc2741c8c44ab6d4d60fe0a145eec8bb91c742a0a8eb133a688d322a836a2cc4663ebf2eecfb80fdf1f95e83115d10364baa9357e1e133338b01d6ac2fc08910f7ca44ef8cfce5f5d675346417a40010b2c384a58626378819293aeb6c8cdd0141c3c404a738badafb8bec8d5e3f026405b5e6b7e99acd1d5d8e7e9fc01092d3031536062646a6d747879829295a7b8c0dce2eef5fb00000000000000000011202e47\"\"\")\n-            )\n-    };\n-\n-    static KeyGenTestCase[] KeyGenTestCases65 = new KeyGenTestCase[] {\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"\"\")\n-            )\n-    };\n-\n-    static SigGenTestCase[] SigGenTestCases65 = new SigGenTestCase[] {\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-36fa0dd4a24ec6fcb09f2302dadf25bb8118be5ada70e1eb7f57b93fa96b1b84a7e94374f9fdb9452e2748558e6f5a787b2dde0cd9d68747ac506baaa454bfb065f1e500ebc68dadb6def405dad689f5d7fa5772765e8576d5edc6babeb42a69374bbc305ba09b1ab4f9820ce3a63bfa30f237af73c551924bea0f171231a1c7138517400832116516721081381534111864540573008215505304258180167218805633031837711834125446757374064802656602288551324300464424570070430775604467700373727218654382113085402384714385137710073132881352767634653213083382164661807507572063084014331381071513408847516228741575401075645618078474251072366778856403233687514470818323256487352405414024741457321505602326684655106051751226763771126438165164374510847344324473582005510013087276273103305247274346862062415125625613058163863147647838223024704832800525016847583411847321486547525343755162746617268246640865568078283725452875420148460064305561603552781415016532336383827535812536128531582855048732745734304562153661720882314551774378733337650373165711441772228701657277386017735824150430521336520550036374316583310125155614734342460731628214452004760130486772345084803242082312015236540131133778828125485315367333404602814074230332231645775734006082655405074336518265056780405423405171643707672231357803711010227186374560188573728767460207070474058460834711808584073145111570274757730536084417433361080031773164730537111576081735558366046746463012324065660876052137008052508762676453141806072122540753112240128218525337055738681721237286528627580731113241785778878812404656335421440725752111111156405682027841442788638820213821775468455868881572107124844588501722102737751182078020774402721847287133760733436178462865784183457884478713270388562378112101074746047443670038258180805476134351522560745400142355780715532180431550238645138105666571424718347700224316576316240153341251132303832382487412204627864764456730060500534645228115033152663747635135007237347168666208148716707533808368153357853523066243657213114358240560560762242824400720503468848503214451133047326042414766776505632362566828364757557628727414157415555332465830353045707545360708480663616301475251681455722668010152887031873716282756337882326408515168141310476348177234206113218677788287661680051776170836537302227562814480456821237427740234145435547342505460352122655426431817848535455552351110307364674577347661170167232588300102408838001733245265836505674067103567726335661342615280304861068871308556030576265263455076841315203671823018446077528186184441157454628072317228030475837445608207541643840387761867421333788142240721568555218641850673185763821882055574358025326482476866447683505537318274722216107033672426311407351407766566165264047443754760608262846715247610402653383732324630537084112247353840248444247113603737643465255683685837537448132411273502758336260275317671716402152714475531868478637736432604357116462758307044401162120081820772432707307585501206687567887071026881271434401570353027344416280106317363532310068331157303265448711314613062006813077352761435726341110116125784437040253348451460505741467381411200515685843585007382002820405613751758033727624146204482040301733053d1bf1b1a1af54c10411e25eb7b0de530b1e7173975fc197ef3a8a750143bb963c1e63e8442eed45f9d9d52c1cad3b07f6ef7b0b63c9ae6bfac1b846a6cd055a7fad31424db4074dfd83659df20fc75650d6300abbf78efcf70e634d1a172707520b52dab4cb90361801bb2eeb5d29c0d9f3c7679c2319fb7cb91213061bd97f48c649ea13ce226fcb0673be270f7169583ace40af1f03a14f4d16f64ddbcc68f6301ee523477248625f3293f5422241eb08ee7718bcc25a12b923b9825779f1f4f240789fd47a484e319d18008d465f5fc08cc504af12f4ce024030e148423e46e3aa78ec7ee132724d003304848675b7251d500380a613c31945cb3355761902b15d5c8a0ff5503af2587c2938f793ce14521347a2cc4be9bc8d723e3878f0e5df30801fb98bd95724eefa5c16ae55fae1d93b1a14d14d2fa3ebfd811078bed68b485f30f05b66507b20fab2b00dbc9d776bae1b3edce5d99057898491629d6d5b5229f76cdd1b3fc466d322743e43ca3b002a3d4542648155a71e274b42ccc9ea50a1199d3e72020c86c8a57d8a1e3798fd27bb505bb23818c9289d847097ba3c83c54874f2abfe416b14942623de55d874317dec351d88d97e163d729a08e7edc1be5c66ab0f4505dd3496b34271da51a8f8595591adc55cc13bbbfa9683948e511f4db8bd3a458150aae844c72bce87dffb11dd52279598f9750091a3af472666648f69348d457e60cd4d46d900a75bbe9bca3417a8eea32eb8fe46d92b6181b093ccfbc7598289641df2bc0bac8064bddfc801bd1cfdcc8e2b37edb726e1724a2c98e3a4c71ba8e389e30e68a92b50ffe7119c8c6948864f24b3a64669bbcf515aedbb4b1702147aa0e9302de84e0a9536d9528b74dee3693c21f3744c56936bdbf7cd8ef7541dc3afbf58cc3c7638762a09cd88a3a8684bd3af99640db653fef63994e6636cbe2eca91ae3943aba282b24c070b55f8a7326db2161ae3c9fc784be0ea8db00aef4eec5a468e700de2db247e98566a690e56cc8607c29df308ac4830dfa98eee2918e387df0e57a62043bbd35517f4b4c3d7fd5890b8c0a013f533c53774949c7003549211e34df5c1a97f393321b8fa8d5689c3a973c01ce454ef59a6a65b4a04a2212044c69aab73d0ecd69d81a0a275f8fa07cd50f53944e416654b47061100e89542bf9bae7224e098f934d90790296432d53e59cf766839ebf6607e712c8d4fb07a620072d4974e398194f099ea90d1a8cb78286bc6b3e9cd996f03be3ce22c3fdc96a0e01004f5df6343c84a910d5b11bd8ac6778f8747c85b59ab5db48d31cf256f316f0c9d851816e2d55661926beea6c7b5547153829a1d2c1b5e8b94d824114f7beb05780b68ef086218f3ffba3f7a471e6dd89ad3b78bc57e9d43b467c7a82fb5402013e8d99ab99fe7a63fca0e4304059d2c7906d72a546adf05294ad33d1ffefb733bf10c5bd5728ee38a645f433a7e8993c6d56f168117e428318fbb591c07cc0d1eafb990dc9a004428f4cda912bb1892ba329bd00bf7db39f2e3deb80d0cf4d3a875f0852e50dd1f6d06e440e69aabb4b0857f1b4496a5361b721b28195dc3b5db38339d7fa2c2b702269f87cf95f65194aa4de80241eca399fe71afe2e92dd57ce509f3a152036b42d058a5f1815d5764054155ff2ea857dfe894b987d9b38e59ea112a35f9618b43a7244d6006527c740563733203b6cf80c3b8aa13ef9863bf88469c1432bdf582ee1934e31d9b88aa8a195b0e491115a30b2d87df76c4c0357d37f2164db21ef1f7e4a70275499d215d2a8e345cfab9bddb5b66dc2ca37f0b5e2ea828a140ca7a4a31f5ff145d6a5be068ef2163bd93913cf837a6729f1b3009bfb3ab1fd45212ad12e2564042d9a7c27b7be2f2607b84acbb98619c5142c6f4aebf56274c1c6991a773f9170704ab0a0e1e214c94fac9fee3f2b4afd09dfbe57bece690b7849b8f7e6ed6c8dc9c031c97deae660382656d5d9fc03549039e02247cd237954380cd6b958b1e4e4f4f2fd06092810835e10ba9f1cf0f9f036445491191fe580c307f17bb9a3c9e50b8aec761a13ce38aa0271d7338a699bf5b85caba825a45e37b405e247c7cf6f0db6ed834d0514272ae00d25c70aa18d26e70e3ef19b1b9cfe002563149b4239732b9a1d3cac31183f7d588aec578b9b816e698de982da0bcfef2c2998ab639938186339119f2fe89f39327f7a77989d7bdc93a12e26e9548bc2fa14cb455baae40d96baf3749c387e1b7c297dd4c179298c5eaf0c5dd02f6febf37fd0ea45a505d9df9d32d21fe34d8bf119cd77fd469ef396180947168daa54a317bafe46e57399ea395fe8ec12a636d7700d882306a2cced9ace3db9ff5a0ce8d422cde201441f7045637b9854b83094a9b61b92202cec7cbf0aed007330e59bea1d641de6b8a0b72e175d11c32333e85ea0534d6b7316a8726b37ca55d0b66456e926d43e9396861f5ac04a6d235537d940cd765b67abce6d600b58b542664ffaf1afba5750182ddf1e965a70298fc01f2ef1b6d80132650762fcc2da1502a97784e84e9cc0096c86de42c51a07d8a20eb1e92a3e545ffca4500e1a23c2bfc220c7e02592d6cabef6652870de97c7e5dae28712ebf9361a74063320c8d90afc4b9d65ae6498010364c561816b249267f829e8eea99223f2a91ee9f30260e11cba163142f736526b97c70d7317ac2241a82befd6823351efe822cd632d1bf26cae52794489bf681420415cc70b201645bc8e4b04bec1f8420a7f13e838c50ea122fcd2f0b39aedb50a42ac99121f99db7ae23a43f00d91545c7badcc8e23e8acd366f71d6a22def8b4d031b6aca1cf59cbc8101650950a3acccecc2dd308479d7303b814ccda9b72c885b9b1f8d41bc381a3f4150f59802d24bf58b2fb6d176f4a6b74b35e4fdccb7e3e4d04430896f0c9170e422c4fa2d5ed57e83489e777ab1083f4835af038271bbc8943ba53a5247083519f21a5781b64f9d29ff49324f302dd71d28d2c02e0be75671082a31a9649512998b8d5ab1f9db850c664c878ba4dc67ea99d715e4b1d5e451d186fb51e1e57b9dade68e92e61782761ba17fcb69e522e9febe22363c617298e76d7b6e575d177e1ed0ae4391b9d5dfa4fe86c3ccf6994cd51473185cbe666919d27aeaa39453018008a5b10bf32ef08993e1ad3e27bdb643dcb9f9021567868c90749d31bfc229531779c90b695b97151011e0340a165295df9a339321ee4bc1e14c459c45435c2cbf0605b975299c6a29974cf6f6236eb5ff6c39b1d497cb030987207e3ad3e681edd3b16a91c9061cd8068436da3b157ddbc1888a6580fdc1d856a2b78f73565e7fe68b2f2e083a93966151149619cd43947c4e849e2ad613e222c394dd7b789b86370a040bd039fc95e246ebf175d45d8c0e07bf895562cfeb44a33c2744b8d52424dd0377aaa1777d0437ad04ba425552ecdb294b610ce744faab39c4e20fdd8b53ffbd66a8af0eaf265d23f9f8a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-7dfa6f43cf7e66cb9e8830871ea48edb07de9845daf9433d74ba10cded10ae8fb4955732aa5f11581322d945bd5b0c05ca195e5373453435602784c9e386ad0766d81c9c954614533a0ab7407d4eead99582655ed634e9a7db1458e3f91bf0c4ff63adb0b62c4e813c396d8a640d0464aff2abc80dac7a5d0329e31eb34d00c2d90142f47e1dcaa203f730de8723ff5f6e9db3dc53923c1dc413ce54f5049496cb69e1280ba7ecc7cb540a62e441c97743e196a0144db65e3c0022c9a6ec621eb1ef79c93b4b224c4a1df88afe1c4513988a9aa4d6aa2a440a9d2b3946dceb5954b0f5634af19cb9de528dfd8bfe857375a8c903b124fe6b9584fa68f56dde10114aa62aafde3159db334294c06b2774fd660a13e997403f04f5027bda9745e16684edbbdcde4155adfe34e0febff14bb05057ee9188c2f7ec829389e7fb24c24d3ceec6f37e53b592b40fbfde40cec330639e585017f79fc86c68de2d24e49b33b5368fd1c7d027503f12b339aac9a4dfbe711918e9eda6bba049154d4f3aa0519078e9ae18f5a94f31adbcc199a72a7b09de94c7a9ca94a04d016fe4051e5b778d5de31f3fb76fa68a71574fdeafcea5e72b563e99982ffcef751e8422d2750809786b57850b832c34a1ea88176861a4176a6623159d63535b5897ef1621564c1882e2ab954455cfd5eb080f9e979a580fd8ed7b02bd504c6ce24c55c1e582e524b6aaa8ef66c666807aaa994d22df7bd5c1a01b128a408b9dc762f2a5fae6a61da1ff4a2feb7e4389bf3fa4357c61acefdbe386b6e55eb3220eecc005cc0047b45bff02e87f1f55177c78c16f142c27e6e9c3ef81a5c5cc77e70695a7ca57e93da2b5c0b32a8df6a77dccb47f3c9406ac58bcac1ba5aa511e417648c4160979d7cd710d35f4b405e7b3d09d229d011013e7c84ca8d0693696b4028eaec2993755bddee22be25b4ab0c5541d6379a067b9fe755955cf11f7f83399bcf28c331c69e2f9a80431da37b14c7e854232037284e91978ef928fe68021138649d3cbc669126910cd648e39cd91efae120eb275b114d33629bf451416ca9affe96d67ddbdfea590b7babfbb49a8e6fada738b0f2bb907e34a856a835e09a8c9076ee222bbffaa25a30aaa21309449c4cd0a7fcb6110a1c82fa8d4a737bab8d92e4bdde60827442e9f74d135f3834073da3867b5094f4653d88607e8551f0c2951595fde2880f0407b60146b5f83ce3e589ef16368b7e058db6b3e8b98d6d459428635f1fe23fbbae5e96d5afbbded8dc22010c58d11e84edaf7ffb8c6598d15e8d3800cdde92ba519f3773ae13219b7e2b967f360162431f50b0de5c634dce2a361760bf2c656e47f8d10336c0c8a0694c148d43dcadb3f84ba52a2f8a167732f106df835e50af089652c7c806b1f51ed4dcdec2cb5d97b5c06f6c64c2be83ec4c1b228fe5615b7531921a5ab4e2357deff9d75e04586f0d325e0bc6306cc22f59e26dec56a2b0ac627f95be580a8efc9d7c27104a852df113d443664a9fb27c0a7e9181372eab430394ef71bb5327e2ed828b60a7b93a42b054cace4b029a8f4fa8fdbabd0b728971ba99c641ce864b627f9fa17c33a6f50d3df9c97d066546a37ecc518b6eec761351240ed4ac606e498daffcc4cb2ccb061619377d33d791938a32cc3640f45549f625e8c2c284a7fea4fe1a864417183177f9c914348d7a693e2d53a95dff9fbe6b26604ae005bb1244176ddb2eefc07942edc0b0fd336f267006979bd82c4499460185d7ad41301fbf5b17e78491a02b8df328aa35eca2346c1f37ca775d11facf01e26d7473956f28551bae4afa6039faf145ade0da17470beb6857ff7435b7ecfcfe51417282095d7a83316d16bfd0a209bddb52461fbd14a74bfe06183c01c40cd6086c6594921073e6a49580aab6b28c71b960ad575471fc6276b4df624870ed01346e3a6252b8e9ad82b40cc88f5627ea5d8073efa300eec86ea921cde8cec9e172314081eee5f6cc665f2b0f6e5a0e56a9d55d8fd1079ce1b5ee10fd69b1a1e8fce047cf7264edb9c44e51443387f9d2fc54b3ef09055f819fbb065d6f0f09e53b3d5536f1c5a98c1778a5a45755894290e45d27f93fdd72e948fb5a1e4b2b97798eb030933180e8aa5bef5d89770c546320c9e2080eb7a1ee3c03a424891517c3281a0f2a7865a138e7cdb1b417809c3c3f62b12baf9b02f9156ab6c774c03d698a9b52380124d863008bf3875dcb7a8a80191c288fcd856e138783a0fb301e395ade94de2193b7f316c63fafeb388a52bb934409064aa9822f5582f632324e11b6e4bd668c0c3d57267d64311556bf855524191565c02da543f1cbacf62a1d5d9839990ce77590f138e7db0641e51ad911c3c116addea6fad97243e9ee4efa3619e8809d67e8907aa0d63f4d9ed863999212e5edfc8e7c761795792e7d9c1d05af67f10645f76ef119c6ce384e92f1f91003761c9203f2e2e6afb3ed4daa3c24d74b9cec3526159f7f88b6df5354db2e7eb0dc1240cddcdf076b8b8f4567eefb4b27e07aa3a6dd9e17695f58a647002283b2f853e9c5abf16b5c4c1f4cf6dc67e14e2ffac3ea0e98830d8613fa7a149109d054ad4858fca3ee6bcef6bed0ed48a877ee4d0c758cae7394d1fa4d65e6fead01c555ed81e9757641d48ddf8ca28e3a6448e67eb0daf3dfdcbe10a376db16063c1a3c48abf242a5ce4e65ab7d3e535339e5689017337b6051820045bee408764b4578c6d0d7e1e17b9bf537912925cad18cda39c8402e3897ed04ca387dad9cc68d049350c2b9d8440f4195144c5704251e5164cb969f08a4ab01d230dcff7c769a026ae57fdd36abf805d114716a8bae45c099994eef19abaf515a0963633763fd2c42f4fce201ec61da3b5dd9d2d89c62b9dc8dfe0ae91fd52b67822cddc9e4604da09865e3a5f9db7e19f1c13420b07afbd84725095ffaa7f3f301937842ea821ddba3e138a0e2ff251d03830a885b5efa7f38492e376f610d89af18c7878e0e179c587d33c2e17241a570496e9ff8e0e980d8d7eafdea8f6cdb92ce8479f21d0a45855a41f5f20103389d3edcae037113c6777bea02de2fe919c021476b8ba937d1272dbdf038cf74e5bc7c94f25e85a8314ab2c1ebcb0db37daea22c2411c77489425be5a37509fb21dd995badd07c3c0cb55400f3df5253d856068a0c643ab1599a30844664e0c1234663f447a1d6eed317b362ca8574e724c263c29221231e41f980c8a773736572f282b5818220e34ee47ea2266f9291cc5ed376aba26385a5252e44d05a49755b1f7b0856f855070ab9ecb1a9de29a5b3920b3ceda55c0aaaac031f935e563c50c840f9002b49dd06fec768a9a258eec5b6aebb997a9e2fade8a95fb824c9fe7332528e62b23d82f99cb9e13e9a339f1f086a7a60aace5f34d2502a715df1d1ad9ce421ed1802f6acfcc96836e481a9f3963b0f28f5ac8381f83a7447e2cfe35f3f95276d54a8143b458bd195cfd4a2b474923791e8edd3ce383e80c9a87a258734656d7e82cc26aa4f038bff3d13512ca976408466f32fe5202dfef7a8bb8aa0b24d798191d8086b5a3ba1742f2c105439c58ce3288d19aaa535818ebcabf73678f27856da1507aea1df0202b01965042602c582bc9a3642ce2b04d4b0bb4fdf3d82fd3c4f4c99ac960530b04bf5fc3b885b0a5fc6fea3103ec3649f40ee24da9d140ca64f28cf0fe98d57f72fdedd468b27601cb5e34d34beee6151ed6e3c452925fdf6b9601d69ae3c36e9fff6d6a1b6af87b9a09c3f65e121e21d6b5d02e068098dd1394894e472ded09f085396a4a71cac238a878c215e7a955cda7f3742fdd1e2dc4348f9abfc46df4650e82373f08e08dac0a59ca8ffd419ca2886c891e88e41ceb85e10c57a915f14c79f5820ed8dac9a6bde0ad419198efaa1ce3dd2f30bfc82fb37103e7091d75c23ccd5b7d7fdf1ea49aade37b3e7fdfd9892597be68b47c912470b518667c28e7c8ed0fe339114bdacfc4b61ad2268929c0e3d49e77ea2a3a4469b79977e928b4deef31617f8d97d879293318ceb5c16ed2df4f1c0a7259786270836ed39ab184a0390e0d0d084c5313f9cdcfab7490c0f8df7f9fb8d2ba658aaee470524d96d90fb51f509ca6db5b0193f817707b6afe3faf49779c95976d57eb710498d9e7d4e1dbc7026a19d079bd8175ce4f98d07462f1ed85fd34101b213cba0cd73eeaca9133dc380031f6ebdac8f05eb29a4f22ba34e1a6fc29e5aad9fed9a74ad8ebb6463858bd894e390499d715c5140b5cb342effdc7184c53c33624fed2f9aa05e085cb7d68e7e3d425e6a08f91dca36e18c8061453bd980f41d85df2924f3903b1ca62841d4545f8ad8a4949166990499814a3db50a62730c88ab592be1209aeb8d2d5bcb3597d5160ebcc24e8601900010fddaf5842745be0b72359e5b90e6c11bcf5cad521bb23fcf452dadc00d83a9cec6f24184e90a3e35eeb3ec473cb0a9ece0ddb5418734231a399728a09387d82acd1690a66acd28ccde630704ca4e7d232ca5d37eec3925a3874581d181b7391af5d0adaeea556515a2a8e3b164a7b85adbf667992b6bff10356b3c3e085fd3d676d90bcd741577f000000000000000000000000000000000000000000000000000000060c1113191c\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f91692cbc904c6920af9eff6f57b6134b45bda6ebe9ae873a39c1e0f4330b9bf72955189bbc843cd72a944b95833371e4c06bf3eb2a665b4da4df5b987edcdbd5ab0e7c5823abf0bb6bff471837b8a002bd65bf7fcd76328e6fe6f15e57a8ec933a72cc3ed112ee597fdfac91601e2e58582dc4b609080ba634851b25358d0cc96a6419af7dd18e6a547708560dea1bb476c511c946ef5f593f69649f9ab3123a5ff302107bb4367f068e2f66ef0cc9a16a69a10c91e003811c76aec82791918fb00f736573bda22f517252c72da1f973386e41509e46131701e690a9717053661d4c1ce3dfac2d14427f63bf6f9c53cc3d946a83ca34e09242abe5fffb63781bd21ab2ce57dd687f3f77e1edfacab5014be6c6d742e7e91792b489e8cdd932ce6777cd412729be11248dbc8c31a6f13e430ad1faf5f0d99c19e5e5bd26827f2d4bbf4b7a5ca2fd4026507b81828d84a56ec69485d011bce465b461262ae6aada92a67745b696371145acb33cac858c4b48039d6fb1ced29e3bf963b4530737eadfc1e7d9ece7d24f442f6e0f2e47576def5008cd01e85128e211fc27aa80c558a0bddae7cdfa6f14a9de7c68ee5d611d9527ef9e3feafac55f11e748e125d2fbcad6373338a579ecb332b99095bbab9b2efb3b4da9fad20b48ddbcae17cc05e530c5f8910cca285a23eab49db9b9a052af08307a634b3b8e38144800b32260e0f33ab2fb0ace0f4325b9f091cf99c80de5cf88d62249b68596c5cee719e34cac3bcb25f3f1872d8c358c2f93639c5bbaab0d41f75ed11cf1b98d373c855cbd254c2b3487dd779ba6f28f8977fe1d470531d5efb392bf3ccaefb1c33f5ca462465d79b32aa2ffd9c98bb455b3b306ca41054435b727fda48fce34b31f81fcae6c07296ef8a4a5acf37ccc14384f0d31d21d31d7131827cd0a16e112c7572e291c67bf1900c647b3c1b5872110b9c411b15f7acea2a7aecb97a671e4308cb77227c92333d2d24a0db6945bbbd13c86cbedf46906cf41878f0c3d1e1b304aa9a3cb36549d6fb1c7559704d76bcab57b2b06d4a52e92e1c3cdfd200423d33722671279f9698f23dc56139258c02cf9f44d5c7d9ffa67b0060911084a464485280428481ce1ce470d96fb8d336b9a4d548140607c37f2d1bd3f4645a96519e50be01d3912471254034be81b9b627a3c8f60c70edd394776a7b9506f7886a1f76472674c5c93221babdb60100a379db220963338221c6f811e47229d1116c1ca211131500ba2dc0973c16153e28180f03721f46e2a58bcd521bff6967612bbd5b70f6039e5849534a3789fb5d80d498f91a7db68ceefb7ec802be752c3c4519968024eaea470e33723376dcd7d1cf0cdf67363b805c65f366d5b1d8e967f86347c16bc3fc70b7222de5b5593f65f9b99d8ad8ac8f5a25630d4202c59a8029f240747d2ab784d3a8d20182e0063b8b8ec64217a05abe4960b265c72a75052dbe5e4bf24dbb5db6e7a0ba448b3c8da5797f15fec696dd82f0a2a9eb867d1a65d95f3220a64226ab0148cd67fd6ffc95063cdf7207e015487dcce5dbbb841de6f2d3cbe3da332ad75d8a7b6982e5cfd28aa7cc64947050dc40ddcde3f77f304a7d5342cc332724e19ebf36d083da2289d4536b47bcdaa31dda127dbd90c41868cc81ac638f116f9cbf5fbfc787a1c1f7835d7efd5933ca85965f419c16f3f4d5a618c6af610055667224119f9f869aa618ab5e2fa10e92cacb53c9b4abdd62dc1bd82e8854fa7469b7f4621245ca3c7f97067d40ace3f7e48a3bd6f1006d89047f3e4ca07848b72ff50d3b1de761e8381274f25af3ac755c3d29c1bccdf810933ea9fac28c596928014f07d654c786e61bddeb97bd654a36cc757700f988d3a27b023c889489bbd1c70ad863aa7a8cdc7adf720940d57f24c52c6c83821bb84589a7fc30b52f954da9d69d9e41b046dd3e8b37b4b6e2376aa0e7f715212dad754bbeb64a0a2a0160584f18646ab4c2b19bf1d3c3c383d7b6efaca49e5101ccaa64667e1bc29af611fc94aff9da7334984431e0e4397a355d1c8f9fe76635492aa891b90531b7ee9f5ebf87cddcda8b060d09cf85eb4e7859b93c7c56af470b908a3b31462ca08bdf66ad9e28a7b3e438d967df3c7c844a6da2d57a61fe85adf971acef4bb824ac9a4a9bbb8206e5ead3d96f539325647114585aefe1752e405805b987650ef7fd2ec8aa0069f5dd64e9a3541d43dfe09c96a83bab1c9ca6799cd4789d082d620b4898212288a7a92792803d204c6b77042634f2daec62bfc7b282cfbc80494fa2bce24493f0795d0ca8bb21d79fd5d1e4a53fd695fb8def7786aab4d8a6e6b5a1c48ba6461134ce550f1ffb0e0fe236284789dd3c10e63a748b6b9966518f641c5ad3346c1a6be1437dd06232111fa2045ba2a7521c6662b9aed1397509e7dd10e3343d9d439843af2f40fd3a9b6ffc8dcbbe2f89e3e718e83043fe84e0847dd9276bb20800ac07a6a0ce94e9c2735cdaa5dfc5e626f25b902ade09a1bab18509d1b0e075286272fd99e469a525523f1ef103b71b9870380324c64f4ecd0e1b40f6c2142c49cac8629941cf68318440ccc15933954ce61e48006b9aaa466b3c69a8cfe8519a21aad7a9c04e6e3571878ac468b72f09ba30446d95cc7ada23d7413061224ce2ed10b9a626e3014710444e13101cb5b2eb3e208ca67a755b7f0bc166b53bfdb7b08476c42e8f8123d295cc07d5a7b74df3fcdc1447ec23a5f1d7ab98a965caa69e466e80826696c1f46e7be9cef62f7d82d448bc5a5fdc6f0b3e355db9230b17ef9950356af47ff1f24813f8fc9b667d375b7897d2a7dc0d84c6c7ebb82e3655f1e84ca5f5472d230ed0e2d1ba71bb99af8092fa7c6d4ea037913cc4b265d29bf9d2a2cf9593ebb6448f6c43501da30dcb7cde661a59c9e45bd694f30d3549814f52f3e01733102f48bbaf0f48a3684b37293126abba486d0dfdf8c075262bfa6d9f095dea8ee9328a5bdc0db76498d6ca91d6314f1e3c9ca11018c551785edd5d90bb6e9659f117f62854fc62a0c707c25a42f5be89aff9daa67f0fa026df50548e8c2086d919da914b21f1f907d146e72a286863cae693f1d2022344e67acd3d70357957dfb3e90af2f829427043b41a3b52b1fc34e0d80ce1a47dd5b12877326437f9628eb25386c51c59d0bde81862035b185dbaf7c574ad4abc0d50e86ec3e23c6f51f9c871f2f55db0c4a6fb9a0756b61f86bc3b2f0c9604bbe4a495abc83bb1a07ce7e9d9d60546b53523328104b66fab69db63cd6ef2f44e405276b45dec335e1762aca37f3e348a4c4a348442453cde7ef103bba64269e0152f6e292fc54bd7a84d015e809def97deefd6f24042d5be6bd1ef4b105abbf567ca98ebc8a2a93d0e1fdb5c1027f639fefdbb34a062d83f6b9155171f0ee7133782b6f742071cd2b727563b7d6114360f9c1d5f208b34ccea4a9b4762192010f698c2f160828ce9fff3aced38db4bb47985cdffd3f089128a789696386f07336728380133767e1955595375caefdb9d3c6f13d427f2a61b6a0ad529791f095f22c77c1937cee13b419ce545a82dd1d7f5a79370a2bff47ad9cf0b8da35586da8333ef7658ae73f284e147f78f98eb0f67fab6f588b446c43204edbb0d01344c50bd496c5223318c7dbad4e24ed7dc51e559488e8df5b071fec03b\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-DBB70175E063054DDA24BCFCAF671F820D674F1D09CA173D4A1440AAF50F1FC8FADC1810F390286AC101D60507DD285275C6F97C0D2B2CF3C7F50609CEC64EB029C3DAD8B9954807E35D4836BEDF32501D0E7143BF488CD5B4D1A53C980BC70A3794E4392E4560E609B9C49900E1C56D319E1495D085440DFD081D1A7C52C0A8F64917834C64EF32A441C9045689DDD2EC218F58B3BD534F18309E1D780528D3BD1B23DDB3B18FC1F7C85324D45C3E9B25961FA5257EC31927CA35DB25E6FAF7669D60952502680BC7B5D777D77B194D0CC40372FC8F711EB048E01BBD5676CE3F2A9FEEAA4B5F29081C34969C746208E6F2329CB53A22058C0AE0852B7127FC4C74EB3A8300403F60B8AD1F95FD2991CE0C8CE452C2432B6422EFEA8AC0E1B53BC994C606301473D7855EF86687287BF56B450D2762C5E03AF26A987317C4BFB013A6BD791EFD141AB34718A37D1DCFBB63014F7F92C9E2870DE503452E271E9D02768357E3DEF6BAC5A0F0444DEE1FF5AFC79B3562C12696FEA15815B7D9BAA38C66919D137F82FE36B140B960E02966FABA1EE9CBAA04941396D665DD2C6B0559502577541AB0CEB066E066553A2DD407354123DF14F4B1DDE6B8C34E3264161796F48DB5319B3CDDFDFDBF5CE17BCB5924984143839B4EDDDAA8F0568ECCAD253C48D00687F9A07785A67B62D28B86D70E511AE08A525F66FB15AFD112C184785F91E76852DAAA3E78CB96E20249F38979031712440DB723B022E1323818431B897DACC51400DB25635EEE41761089DC47E8EA56DD0DF60B56FC682D000E9D660D0CF38C263B716359F41F3B190D201950E140D67F50287C09D2008664341A829A074F9629DABD88BE69A6058900DE5782CC621A91376E5CA31C66E3C430CD00FAA83BF765A2E6B2FCD20EEEACCB996FB5C4B63235142BD5FFB4390F8CB95BCD5853D0226F931C38FE972FBD0D6E10DC2CF29D1FFD2653CACBAB8B81DBE44A2B8F1C5DBDA7C56252E4B35888DFF7808B3514F4D7E5EAE9B51078E8D2E600EC57200FB48EF946F021CA8209E7DC6443B37D7281C73C6A3B43AA570398E62CD5ED9A34ED23AAFEFDB7DB3141202D940C1411CEFFBCED878C0D325E8CF7FDCC520CA3377BE97855827D2E6F4EC8786EA1374E006539387924161D65782C7B2C262AF9BA8FCFCB5B1477083836129DA973AB8B082324F74BC6320646448DCC8AB56582EC72EB192D3F72255D85FFAC2B5C62F245B73191A9176BA5A9FC0ACD3AD48D37E23EFA0C65F0423AB5CD0EB76BDC035112C7A118ED47C0E67E510A6F7A28F26C3D6A882EAE74BAE6CF1FD969FEEAF6B36C85F62D40CAA26B6CA98120D612598F360CA2628F6FD608F4E1E290B32C90FF71E181D4B72978DFCD189D857DAFC7B2AF8C958EEA6894ED59AD56B9AA6F83092EFECF9EC4091BCC9B8CCA245C30B54B9B8DFF3636BEFD417F46DDD2F6136B983CFAB532FB623FAFC3CC4CE8A91434377F4DCD1607BF04E431\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5c796ec117395c38a9d7fa1a02d81e3b51522aebf68f3fff55cbf7d584ec75e547d413562c4c87f28f57433cdbe7c96644619b9f03d119c7f87f0a970a46075cb8c29c506f67007470bb4843af6d3dd1c91bb3c2c62443eb18a69e675e3711a08dabee5cc1a03d35a1399755566dd2f07084a9039c7710ab57b380712b39cd6f3cd2098225785665bbb94f3761d5a8d431cebcb533cbee5afeba6cc877fbb168009b3f05f9829606055e71638b50f4c6a41b0b226134391ae0efae4cb1d2e31c782b55035cd9e2d0bb53fd72749de022537ad8f8ec49a297f9bc81d1ee0f5e6b96470d30d6b78f48266eea5d3d4805028f90abbe90232fea807b50323e722a42fb455f02cd2c6f5d932b9bc606f9509fe2b1c133eb12de12db0206d78b49154c34adfe204fbf5469a0a50301be999015c5798c567729b60b2690ed93db0eac4021d38665a3a7db7b5ad55d94b8cdc9171a00ffa3ddbea750e83e495f7db132fc253c82b6b901bcd00fe68f0277988a1b0b2cd1d051d10ee189cf971f79ab6d1bb641b1f3b160b4a4d095144d1f9ce0dbadbdf6955622a8b300c69ae67dec7f1b777f0266e71413d57b454cea0dcd8cf3c32b9bbccc36e1eaeb17c87734afde3feec5432a18ab9a7c6a1fb30e2e84af2c367b4f47529bf4e0782a26d41520df8ac3cad44d4e792af7f427c75221e4a5230e282bf938a6072574e23f4cd35aa49758829d521360db34cadf94f9ba90d5139179f877723150d4d6f53a5300ea3e26392399adb258bc8075cd19517cb70ed48ba9c61e5e5f3d245d45f44f5e6e033334dee3a95bff8dbad0a1f8ecedb431cd52530d7c2d06ebc8f1b80e5e30e746f9b3b3fc192e359119170e2216081dd908d0a5b03670cef41420585653521ffbdfa58957d06d7a0ed23088a5835690df344473f44b6213fa10832539197afbb410556b8046e06d814c2702ce1c50fd5677de3015575e42b78aea720270aa303e3a6539bf343c52ff933aa238770e7fda2d0d0702c1c7a829e798b0677c1044a7e4af1df817c4167909c158074a9933f364a1800e76234751e7463c78255c3d5189c2a3cce7c2e55dc55fe97131cd4255d92b3f9f5c888029d4b92ff3a544e25b80ac12e73c9a65fcf0b755ffd0a497c6113897ee8bfcff0dc8c9bd583af6fdb71523be596bf0753b25b47766d5be895dcfb63d7c7d9f6143efc509629d310dfff428a1d5328b5307edb41822695f56a09ff2202567ae1b80318f827e0bc29c5df5e4cb075f1d7c1cf2df62dc258544e3dea90239a1d997e52e568632e259def0bcdcfc6f9306c76558dbb30a880d41fcb4f99988e6a9186296e7a5a31c7b910fb2624a0400bbdc6fe0657865a6537131f0b0dd2f56e2d6e2201a843bef51916226577e6bb0e891247f93b5bc36c49fb37e458d363762c12b4b95ba75ac1b38f177fca6515c240c40007eeecea8dbef687a77d3c09f9b5bc5450231ee83294e5a8d0fa79430fc2e701ab39d3bd891e73a695ac6559d8a8b4dc4a6ceb7472ad032036e4aeaff3154099a6f2e8297c6e4bf121631b545b472ab316aa0a3e1192874793597e0fa0cf173a78507ea55b2ed0c13fb045a96acd9d9bf8cd5197f968efdd359bc4449458ac42e2efa187190790de076f56445f92a79be0469efa11c98992ec82e3a2ca311d76e282e91665f5659be663a33139e80952b444914fab59910ac08daacb6cfcda1dc75c00077391e2b38ca54c1e056968c4c41fe7201a3c637b37f48be5672828d5f20c06bbc818332f48e0a4c0cda579d4c114d0446896b60392bfb66ec8e4eb5c3e8932259c423025da0611e06b34209f35413be186d98f8494d18eb0b2d56aa47c6d72c5b57e2f68da8ec1039dc565dcd5c5937ce1d358d6c83ded381060647ddb52badec80e92a98dcd4be27a5990c85192e2989dc2553e3606f6e6ef8353202671a1f2dab2d3130946254a686121a26a29ac8553ef5a58d31f9607bf3912fd4340562ff48b38a12b7f4d8ef2e058c9c721467e0787aa0eb2ff53ffab5c2b3c40f52524d8ff1cd0df1edba1dcafcf983a9e8e9840ef269f9648d3ed8e7778e086bcb887c54e49c8848d21002ed58f163a6888b171a945a9269f410b3d541b07f7c83c0e6b80dde9bff6c3f6da1f780f52ce0da11c196c0493b6765bf01aaff22e44f2b538672b4db58a616e2d2a36b1a20a618acb6e7523546e61c8ec4b593407d0ccaa0ca85d2db46a6cf188939ed9583f591499fa436443287fda7e49602dd8677f171b487e4fd6229de805f4693fbc8f27b52f283fb0384a2994755c5a6c0ea99a8be6f6f743d05b75405f9e70d68d4904b258d0f5f3ad0b23d62767d54ec493f15bda17b34c31eb50210788d38ccd4490e0b65ed46e50875da092c35b0100aae8bc387ad595be005bb52ad0f3281ac662305e0a62ec6254c4e091b1fb0552398b9cdcf2c12069b90b6ca5d67ebeb22b6aba91a7ddd85ba31addb18ea61d98429e633e5296eda442264dfd6bafdd3f26c9d6cfa7d8c89f273c4058c7b88ddcf79d7cf5c8bedc4ccd69c4b545a0069906c12c0b5dd5514cc1d45a50173c4f51e0cb89e2e56025539394be823889e0b7cd3b2563f756bb6d95336a22a1f84215915507708fa18e425a6de61a7ac74689bd85bef8aee1a48226a96ac318bb3d8fe95be46eebfda3662e04741f93995e5c30b1b3864feae3b476f341c473d449f3d675c3335617a201e992e9e96d35640d0152587c7edf50ee5542164e12d268c0bdd808ebe067e4891172a4d765650decb3e9baedae4c39834b5b6df1c8252a9b588c30b25167c543f389f4d4db14fd1319161453311572c85bdb5fba5886325b5118b6bdf774c76fce3de923761e22054867a19a06e2f84463a737ee6b4f42cf97e062db911ef8dd2a6cfa15a4698ab96c9e70c7823956665386aab0ae235b485391542ff57967b67274a4a308818ffad47b82051e674ae13ff73a111c5da089500f14c7d05af77d777c612628b157f3a921bf8b0cac0fb426866833ee35a2176653dace88dbd03cbad446bece7c6177373db768d561aba1d86ef2a5680f5d71e2c4e35832e8ca69de760893f3e6dca2e9b39dfbfa2bd4e1f3c2f5ac06e7b07c9c3c85de16244a273385f9014263614cecc9ba3bc1679d8b2721211b7fe7fc96612abc39312d8d05dd530e9e6f00977bdb27b0632eff254f54213213f608177334ef02f79cbcd5062c9b50f9c3ab14a8fb019d0c2b11ed1a5f93d769d3fa14eb3a7e2a96c738d1a3d62dd49a5dcb34ddf6944c066ed1d4c662752fbc961eedf9606c40922c43c543f6c79cc4e91432d652c6ee492679f84ddf1e1e6fb885af725a63168a6c6eac8cb180fc2b71f8d83112b81b168e96e42d3f069b69995c351c6b2bf1344f98c5fdb2f3fc503dd6ccf5cbc9a1bbe111ba2380bcc2392cd3726bba4afe7dc66a103a2defa50516d7d0d5bd058c7361bc6a81379a6c48fe76e81cccab97af3cc2a96d4abd8d5399c8ebbec651320d66019aeee16dd9e126a4f6b16ddea40a36f2ddc9e5d91bf8d5a39cf7069ee917c23770c18c54a5d2ca8f23ca2c9d21f9003b7381c077b7607dd3e3b0c34cb12c77ef08547501085370c6225e45c40069c87161bfb45498397c5d714c86442cb1489accfb34531a14199cf29e0e611f4047f22d40db532956a20c8f5561d9c6120a80507c525dd8584d60f41e999686096454475a2c92bef5880e554a09cda2238323fad2827d9ba6cac319b01d2f89d708a593d660f9c19499328167c5843ff20a17bf0ba26c8418fef3ad764a865f471099708048a624c39bc7ac317badb19226d8c0943e0fb8aeee9789c0ab6e43f932621e89c424da8a6eda10b936218264161433976904836c0c913b5a0f2fcd701ae18ff8309f583f75946a02b930c897aa85ccd239ce2edfc7dac8689b8e678b620cc853e5dc57fea9221f3c5ece3a1484022934d9457b6d3a34b801baf8afa4adf307a8c7b6092168dc5fc35393f772b576345b2f6e1fdd9ccf27452174b8ef6bde9cfb37dfedc43755be905373f54e13a1a40c3757a15bc36aa21657ae4a64a16bbd4463fbaaf69cf4778306876b62abd4305d753da808f0728c3f51f838b640be0c093b732595b153e2615da3c0d5ce5801322689ce85f91767bcaeb81cabc3baeb76deb7154b79528766282bbea6d026687d2f823fc25b97ae523e1eecdcbebf460b447b1a2e677c0215fbae2da1dcd182bcfdc912b94c732b793588ffb0d1e118d02b093a3cffa510d159ccc74ceea63ed881ca79957dda6db1329c22c10a082baf48fd6a2b635b3f1b896e77087734528d0943da51d31b1619e549ee1366e9df05d0a356aae84cf8f3d0c8fd5ab534a3524be784eb0208501f17e3b8f70a52de886bc691db2bcdeb63f7bd739fa3dca52e4d44a7b6b57564f17076104da5169b46d47bfd01d2610a9fe55129e6249956233a911eef491d9c5877e55585f62f1d17a84bebd25738d11d830c2bbc5b55d7fc60894f4db0bfcc6639277d290ebffd8a02e4d0593f65223168240e528822a90d4fa94febfd55e5562fec1f279af1bf7333d5b8b8eabaec3ea262a40586d8ea1e12b3b417789ed00010f333a787d86ced10a233e7385c3d4de1c3450557ea5000000000000000009111721292f\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-775194fa9e30c689e7302d8c2fc00a7f00841fcdae64e399a53e0be6954663065429981a74f61454a21dc8dcdddf4c4066ddce8e5468b7bd5b26dbd4283fa7a877923797381790c1713da02709968ff0832d6c4d89d20eb3145a7c15ac09eacb033a7da76730e09b3d046aa5af01efe52e3a0f027fba5011fa546fb5fc0cfabe3ab52ad317a7288f7ef740ffd3fbe62f1a96ddcb6d8bd300d46f4f2cc1cad162d5f0bc4a1c0d46f8c0f567ff3a962f5037da119a596bebad2129918de11be09cffa73a7026b1c4a94ab98184f7f6b214e37b06843bc197f6e54084cd03f427691ebba03207bfc412133b8f73dfee78df80421a3c30b30962b6d06cf8e41520e8c9a7975a48e45b9d6371e3029f63b7972072cf5c30ecaadb3d763f2acbce180c172836e2f866a894cfb2193268616d8bc36157f48d7846b317c6adffad1f4197d5151b1f60f65762de9ab5244a5a7ad8d6feb6cfde27e5adc7e48bbf7f37e7db6d8b42324c070be778426a242e805dc353b88916bf2c32158512be8d0a62215a4e9ee2535a1a123661cba33ad1fe6f8e61c62b34dfc7edb12e9aaadc76d6633315fe128cd6df60830057d5769008029be02154b385bf1daa32633a8b73d39549f2ef157b00cc8e347257c9c409113dcb0008d0d9f9a68ba9c0e2cdb1c5585c76498365e81717906f6e2e6fe9153813500d447c101ad6ba8c0ce13803396cb44e6ee31cad12e9e934b101b9c4a4e18f9a795e270ed2305552e43c74c6f9673cc78e8d88eb2f30674367415944ec31fc5976a09fa62750125d609f5af9f06e4480922100d8031aba6ef774bcba84a1b3b1805787efe2af85a7e592eedc320bab69cf52a9467b45d9132e45e54db62c53154fe963293c252b4e4e29e832016414f4dae7f2e9d0f87d050abd1a72ca7348bd4ef25f9efeb7b4f25795f8f15ffb8b5947f7f99eedbe22f238cebd8d747f50547ec451854a363c726796c9adffee62ddf079b8b39d4d2b9c77ce9a629c1fade8f4a9940aade74d3f6194f72c3af20deb8c5e4588cbd9db261704df134b3b147b526a50dac889551c7c866147e1cef784eaa27f940327f713e4f0e1c2f77a09160ca8cb6acca67778c6f9f5cf50723ad9edd8ee2eb93bf784a4e6ba07c2bfbc581bb80cc4525594e98baacda06999dbfbb49609481c9eeb1082a7f05cfdc95a43a0d309e6d3315ea1a98e658f394f239162c8b417635c5a100687984a3a458e276f6cf964a87c72c275e35771ccfd9293a13aed45526352421447064ad00a5457f04ce2066c92cbc2c287056036cd8726fcfc5e9dfbeedf73493c95be8f260db775d5d733577893d871a0281cba27f93fba8e5520361c5e9108299666179e3f40313e0c6ce6012abe07f2dfe2171f4da5358733188bba4b1059e516b0a2a00493e9e7386b9f00bc402f6986775bd2f1d5ab7455aa574a0576117dbed54e8bd7173a9afe2b5428f1576ba498bfbecb42e6f86164dd5d69b744dfdef0ecdae1ce1c9a03da3e02d707f405ce5cebf694671b41f034bb8757ff3f403d4153573fe46cdf0a91b5e0f34676f1ccdd8b37e12a737e0735cafeb5ba7a086639a7298712e67c56c71c3c81fcf2667187b7c5487a0fd292e1a836dd576d177e01a24949ca3c7251e9c522782dda331ab2008a77c55616cbb163233a45b7ff45af92434c00a590aeb1f4df607077dd9e8e1eeec4efa64fc1b51c15759ac1c3e7c6389614e657d314066ba3d84a5020ab46006424914177b19dbf6ee27a3ecacab4e2779ce9be2651dd4128f1a3c5acd58c3106695eb403d5fc7a8dfdf625b4929dd6903c7f4a27436d3ab1ef51f74845a7ab5498a9e5b10e57714864383bbe2d6584e7da26ea0ca3059ac96fd8020fe4d67d8442d91f3fdfc26cdcc9ef55877a460944251115db42e7470f80784aa8b7e4fd21642d9d91282e52221d6fcd04a9b7acdd23f124149e6823c250281eb1b0ebc31bfa8ba142ae0bfdf6097b14408a9e61b9c2b0f0e10efd2cf3cc1079119e7c23948941de9f927ac5b2d718c19ae41c14802f0675f3b75f084f622daea75d65b05c0e17098b402f05923b9011cc96e86a103fbad491faa1b8be68f8f5738b199e14086da38ce13196e3b2f4b9c038b93bbde1fcc3f277be2d37b4bba08fa8e8504760f63cb954e511b89d8dfef063682502417759885b1a48d93100d6eabf14cbeeecf2ce6c17903ce588036e4e499c22cff789f0d311fee8e4127819679730893009d46abbf837881e26e490c437489437408b64d12114b7201abd6b4591afc083402e959bc9c510930abac67563759b95415251db053b68a5278adfcf26cdcd18463226338b46b07900ae532488a1a4fd172163e36e3f7c219b86292c92d68d6d0123314ca3a75487e920f2b1b12c0d605f153f65eedf3d98a587bf6eff36dd53ef6686a88a3f0265248c5ff91a4a1b755aa1597d1c2cf37174dcf082c3f89148ed8d4852ab2120a53697e9538d4cf661968d6d8d71861b32efbabd9778bfb75607432c765dd3aa2f026f38a477e65958b9e3c2d1d8eb0533b1f9f939279d687e4398d2ba454c29c420be58c3054b3cc2054a4c064f3702a409bc47abbcb70c59a1d6af84719e067805599502608645563c4bae11644415f1b82542feef87605e389d8c9afcc191472fba3987e4a0135f78f97b34cb10889e11bb9ef1149b57735ad77f841650448775dbac5d82ab0294b35dab15eccb5cf979021f59e0cf02bdac2b3533d2cb56543d9b1896ce9e774dac74f647674dfbb9ebf78b9aa02eb756182977a8e5eee876d2fcd9a943fb38850c1de8e8a831249d2c3ab9e3ee4a25c4e37bec0d71bc2a5a06b04706ff801b5f0d0ae9220f667f18480db1df8fbf38be4c3d5bddb133e102c4ce030713609819632c472e85a01262c1e2286897208c3f9871f8640a171bd4e41db5852525ce5a8da599e845169cf140f33f105219e7d03cf4a1aeb90341902a2010a172955983a252c32f0a5e120b099541145b8cf23a3f5a3839d5fa649eedd624a19a2530f570c7ca1941b112749ffdf96717c73506639eb3a96677fb97c66a613aa21bd77a5302be163d726ee5741c15bfb187bec0c0c1052a1715a2cb4573d4c3f9c3618d2c433f38145ff88c8b0287650f6a50d2ee661e699ca59b6385f10e250dc70dad3a5e12c5e002cecaaec22ac8b57f5ac5ebed502a8e1e6f2ff2936d8eb7294aa89778361cf9b325ec79197ca4e67b5836d3d025e5cda054186c214f9b920bf2132d403cd8dbb24573055b775aeb18151b1bfe53cf1b71f58a9a33a62d5431e3e0513cb0b0790f7d4b167b91ddf78e00f988ae84cb81b724f1981cca7f78e5553fdcd93059664fc84ead17b59f5832f67966d93e3dee2e57c25174d217f4c054206e53bbeb341ed71f6fdca79c55bbe8ab26ee08007ceaccb99884400e1a4cefbac6858012419903397f64bcc9949fe070f02f227e62c563887b68c0b1b3c2c2854c4d4e828736faf01c5354fdb9c8a7806ce33047d591d80d3af33cb455818b228627f57b1973fc396f3c3711603b286c4379830044e3982c93ea0e8a9cb1b8a16595f442bcb11b9a51fcab5b37047bc114daddc06d03ff76af94ced219201585039f0ba8a95bfd17e5a8d24cd7c34a99284db28bc54bd2d5c4540451e1858805f188dd41a70be6cfde8ba28d4ee999d3fdf8\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-02dede66fc74f94ce000d6c4898fcf4464b834b848d2bb2d98d3a5862ec632dc9636201321c793ab26e4a42ae4f13debf105d087b112849946c76b54b801382b9727d65bc732a5620e8f4f158f0c1737b0e4ab8e7404383f76c848b36f58f5f9d70ba14a8ebf622bc848a9bc3e116fd7b2627c41ccaea47d493ebc6d3dd167f79fc6ededc36c809ac87e77ee1b006e96ccccafb88d965bc1cc15388e6410c68a74d72b6632487c284fbfc10135da29f29264cbb9ef620c2668066a2fa80fcf2132e93a29383e56c8bd89b3aaf8a905d4e60c6f8002132d38abc3d3c3b6fdc6cf508c8f6a7cfe9f78be8445f00a13414e41c27ba31efc46d0e028b778ca57b2326d624e3af6be0d4cb2a80e44b3f1b83bf572e8b7516b8e4715376e5da06bdb7d487d6a2d268afdf5654023ef4a13aaee221fdf7b9a668b2f4e1858da3c1ae3a7a7279163ca9c1407e8c0fb69f0ddf75cca64f4b0f277acf9c469dcce264b8f37f9918626dcb4252391526ccb4f068879809a2b115ca1d75d7a1ddbe5c8261531a98494ff634dff81515fe3ea4e289d75631ded8b8ada415f6438ada0738bdf9f89e986dee9c80d82ec13aabf10849dad939e81441fb063aa627c4e316461fff15e61c85821bdd55b2cd1545f810c1f280e7852604be73963b75e33eda2e2300196590b9b77cac44d059016c0b08a2f18f18ededd8dcb1474b3e088a6e84c12eb0470cef4b409214eb47de0e277de2665c661ae7766de5d05bc357a2db50ce51d9087a66b1d3715f5be97a9ac56ef866fc3bd3025738d4310e4761b57b3f901c5165df95385cf70f064a760b37341fe2c8466aca8258fe821308d8be08f4d569e27365dc4be8a2ee4e5e13f9d467d8b6ea272e407386e9f448c1758858d038c18f49dd7f60874cd4059b5950b8e969df6a2400a628759d6d7839488674bc128e947594521a998a7e9aac9d61ced0aa7629035bdcdde11a82ebdee6145af1f9c31ab104219beeb4f222e0f0e155e6b67160f09f6ab6943a589bc4ea4a1eb3231bea73f16da8998af58b8f71d3aab3e2fa736f3307180e6d777bc5ad02be4d7c718855177d7c1826bdf9f3848c1b9b65c6a25a93af48c728b6485ab765d36ebe3fc82104d043238867683169cf120dcdd016156283a7e6171167ed19996ac57e4691ca3f49b43b03aeba25fcb3d5d89cfde475eac580b58291084d8f7d554b463b3620a63bad5c1fdbbf98a5d8200f0e0ff1aefab7754e70e4d666e0b31ba193fbc70d4dfc601464a7642c56385abe64df8f377e2e7b7c451e903a13df6020d3cc7bd73fac7f95dccc9be71af4facc9edd60e9e5cc5c99bdee1339fdde03b3342a4c0635c71106dbcc4ca3ccaa8ae7e0b9ce740fd9a6fce8cd805937b3daf103c246d3bf61a10eea6af21bc42867e471991459ea895bd74d6899da56c22ba33294cce17b88b39691c493d7ca312776dffb953720f02fd814e6b9c96e4e4a9aa6e2d255735ada1d02ebdefdfcb74573c77b4b19f751f55e20a5229a22e326ac75858d7eb4c7fe9a4ed48dd49be353269223d3021365569da4c2cbc3dc6ac620056c5aa7382a363f93b894c0a4fb1af983d90d8127115837531e9ec7ade4a419051d503c1501afdab4d9b9b9a741810693e256e3f03415901ca0eb9eb74083d88d7a1db546c4436e3b19f3be3da87a6e4a7033d0cde55ebc2f7123b750475886244bb6444ea293fe498fb1e98d9ef7b31a86cf05cc660841f0b21a3ced89cffba8cc08112fb9c20a8abaf1e9eeb7fc7c678377ff2edd2e4c4d3140bfa4106f46a8b137c4d68985dbe4b8d67342f409f75a3027dc6a71acfdec2b723a4e1b96a12e42e49eeef5ca77a8961c77c39d5542d5be19511d6bd5364ae79cb254da944281ded04e1e06b7d4de33e40b1086de49543e56e5d7d4ad2e224f31337351707819f96d36db4d3a29018403556995a098cde94138f71cefad7d8dace8a6e08008b22aa5d257508cc4f6a9811f036e7715c67ac369b6d80c425c79a8ee97c094c93dc18771394a56dd527a676d660472b9fcac4fe783500676a9aa6b0322752a73ab982fb28e5eb4ae639033340b9ccc8ba036ef1164d293627c41e094bba0bd851480d2f91ed8ec8a1d4a229f4d08dc25b5b7dadbcdf22b2269cea9c7c6b886ba74bc156590e440a9a0e128a35ec8aec4eac360fd9bb61e9804dedfdbed1e17454394ddaf851c73327022da9456ba7c4edbfe7a0031458088f026830c3695c5d89a60810c2cb6543880b892d8d5c93214ef78d8e7538028419592df1f630144856ea1ef215ef6658c350a50e018cf0dba35fda2694e1efa93cca66931d9560d90bb434501f5f420b8bfa02a566126dc2bbc9f4e0fb929e2c42637de5e2e77e07659ee590fd3b8facbe7847b9400df4bcd858925c15cbf1a385fd395d50b9590c154928cd95798b735faa3acdb4a8874672041d585e45318ee942b3e36711dcc706bda76966cc0100f14014f9ea47ed9c924035e2138107f52dd26bc5d0312879505d7ddb3b468765086169e24a6e1919de2eb169acb18267fd0ab0c468da0ac6436acd2c4e08fb85f134e648a992a69cb871173675e87906f30e7cedca148c00ddae418e07e1aabb8f82f53127635e09cd898b348d4bc5c575cb6656d4bf33af7414bd26a84b5184b9be5e15c384902b1c66a6bf08b16172ed8084de06331119df75913d29ddf181de3bfb9de1242183ee797309ca14ebfd5f8ac368aa72ed7403fbddcac4077d669930d742240dbffc1a2b4a83b043d904285ebc0937c087c9025c0472a2b6e546b6629cddad4b9e60d64c01e0ed4d4bf8e580013e2b215d24893b3dd7629e71cd6c9f906205ac2a1572fece8a7d95adf21ae18f530a6bc18291f22e1b05349abf287d50f1f6724f01d0cb3fb7e0a576997c3cd9c013ddcae7071a7edf496605715568407f86ea78b20e66404676f2b34618060e180e4f9dbfd9a70a1f96acad53deca1db22d87342ad2eead7289c7e481d2068a74e62f9c9b90eb02aed47b57352b23009adc93787eaa74c7b8981525eb077fd502e6c476f6fade93b53c29cea27cb4a7594b55e4ca11b66f94ecd43187fc23d27bc72d0f48a23987fe95b06940a360e9026a022d2ee3a11eb72c8573eea76accc0fc2acfc61fd9e1655c77bd652a5dc40de7dd0182ff371d5a8d3047bd82a69a4b75452dd2f4409c5176b02488b9ce6e8b5c0173d96e1a83e5889ae16b4a07b09afd8f11b9b80f812c9ce794da70ce46cc3e31e24325f5358cc0c64deb9305941c0511ebbdc302c2e362123dc4bb4c9579c6ae2f692949e92a76f9aad182ab69549702421d94c5625904af24a42620f331b8ca6f8d6ce59306517ad93fd6d1fffbfbdd16f4f120540753a630c0f56b178b1672504d1cc0a20bef9d93c8777c036d881a42a72dfaeb14a1a0b60990a8c27f978c95ce44edd72e677d3be62dbd26b3c9bb1ccf1128f79aeb2a41f6ba6d021300f0ccc1ad36169bf63e36b6da9b3a9a6e54815d3445125a2d5078ec0eebd58df4487919fadd4977129aa61ac337f347b3adda82072d758925f4ce6a5125b9e4f87dfdc5cc4b3af5f9589a9cc4969afe7c6b99edd05462d1da3c40d785b8067c4c866a8579fbe4d94786e0fb0b717c6fb96e2e3ebd72b6901acf96c0fb174c272f3559898019a3d87ebd6d9ece260ec913300392b541a1efc0811c10af0671206345b46a588abc932f58be6149ae6591250a8740dde925cb9fa12150c9f8d191163ecb613418058769c54f883e9c0b533f6d8f568c6a907c227d16054af09c6c73676f5b9859beeb5a762ea323eb76853f4a3ecb113ebc42f9c99d89e5869777448a26c40407362a45730621c700e3710a65ef8a49d9c19a2692bbb37c1fb4573498126522468f738da44bbd4a719383582244a284645b318bf7de280d1b9b9829af334d24c49c50fad08a3c1c630a8e682ed700682998fe7b121bce47bbde010fbc9ab70494d5d0b300b846e8987efee9ce09cc1bfcd828f18ea2bc4f40440f89ed48cfb103a80e77e26967b7ec56740d18ee40bfc9fbc6ae8a0d7f46f3bc09b7dfcc590b55e3d8fec26e7f4dbd7806f550519ba3ad64c15b657fc726001b0644054aa24f9b1dad492dadbea8082b176c5fd819a8e73665751578e74ef32779127616a28ebca4be7270c195ac077fd71627faf95fd02f3b6dc45a9f47d3f666c318d752ae08c17d2385e810408d90fe0aaffea328466c5fa82958e840ea6b7ec4f2bc6980db0f3a86461f51cb55dc262ebad5f326533b6bbe0d9c4b283f564949f9cb05291ddd5371af7713a088fb9033bce4436d93190fa742dda242d725bb1fc261925efed8df4b6e3040b7e4989384a464752833f83a087ab09eb0d2be8320ffe552741a5a6b90ac91150fe3df65323ddbfee23f6237c623eb57a44f7dd67be498c97bce8a03dc2f695d0a41e270663a06c67819f4ba401a45886d78853efce02a00335cffa3b47c29b5341f43756fc5c180edb367aa43f104be106d233224623da7738147527e42a904f5a1fcf1d35261139752f9bc38dc992095ac84d03f889024bc8dc211a1b41979ddfe455f696b8199a2e5ecf61625293a6e8f9e36718e9097badaf37098ace700000000000000000000000000000000000000030711182024\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-02b250a84d15d015d65daf64921d441de7eaced5dae8d5ed5aaae0780710cc6f297bde76b46a47751c9af90b775ee5fb60558c3223e3eb5732b02721aaf4b2c571e7ef940126874e4da1e3caf1cc2ad7e27ce78891f1291341fdee7cb3956ab7ea4619840bd86c7f9dfea16dfe4183317150514ae0802275ffa49f6024b73fec75788bc566b064f5526de67e27b5f64a800d39cb62e3aff6ffe4617aaf109673efda26bbf69d235d5ce4a5b9d07c36b392cb04a53fa09456c88242b54e4e96f3b72447d6216178506c1f380b2dc277ff6d09613d7ee8aba57fd05a35a69b850ee29a90c857e06b63e904e73bcdf2908c8940598f4bd78b1b642879c8f635c908f7653df743c94d8482f2f727f9fe18bc78a590bd0985fdd040f7b879e2fe8858bfb442890e584c3fd5234529e2852ef752edd0e24dccffd1ecd9f78e3fe754339e1fea97d49652dceb41d3b7209558c860d82f25df260d8a482b3061dc1161ac6b181a4c2bc1a5b54616d0b65744966636ae1ec8bd61c7d7432cf5c41ddefa21b2d84b3b65208d13095cda462cbb08a9d4cf071fee7b6dffde22532405dad2e96e6b5066af20abb7a6a58c5d656774354dd504cc795552f8c2677730e31ee16f39f9a19351be7fb01716b121298da000653be35f50ddb3e7babee81b455eb30e7cbdd4319ea1af95c5ca3980dad25fa11fd69561ac94729e63d2878209ec3fad599a52f742b1ad9fd58dda60ea1ad7b4df59629a6559cf2999b7138510e14a55ac0bd242e92d12f989254d5135736653be42f86c004ad17025a0a234ba21c0e9d9721b46396d5e9a9b95d3007e59a5673d28d3935bad4d58fed72920f160af1853c624181ae74349a914cbfdc01a50e6ec008263f70fbefe9a939e1ac02f370545237a31abf3edfcd0bf395066a1349a99ea2c1cee48d46ede993a300253634820e60cb6340aa1da98a83178696d21c1e701f92133ea8c1ecbd7dd199cdd7e6809197978f40da4c8d22d1f459a8fd7baa08ccc7c5e16951bd523c84181e3d7fee55c8b1544068af3d3cfa6bf545cff8b7207bc288fc6ce3e6db3404a2e5c85005a515881f4103084128e29858c3fe94fa2f01cceff445d7b57f0d8cd12a983ebfa0b5c857c9fc1e37220f82a2df00043867c6fcaf3cd16cb549f4239fc42da69fc35ff58affeb5d4013ef14531e7a6fa437b910989e7f5a75009023702c1380467854974acf722090a7a8b7721941501a34365fb1baeb02ebf3b9c27c04615c2cbe5ac506c69d0c581681d2bd3f8b8f8af00e34ab4e64f21b75bb443c41edb3909c0f5b899df77ea4d4e0d9f3bf12cdc91c010e94d74e1636b0e90c47f1adb2e6f31dbaea300bc9e3604e81044dc4c00a0ed3883682415099f8297a0499fae7d26a0c7017e3abbb8211b5b5dfb24bebb37b1e1dfb9c3de36eb45bf2e0e9fc6faba5db70adceb53ed5ddac5e5f097e6b97a8a1f328e08e0f242316053b163bc950a065b2ea29996e1978dafe0d35263ed72d3d2748f0e289c41d0245a92acc3f06fe4704fd5df117d02350f01cebf300fd19be1c710b85b956c75707840c24183e28a4b455a3bc804b1cf4e71209086efd7f4ee877f341df27ea2842be106bdc8c57b86e127a359b3a26fc148f754e8ca99823d9055b45572f51417b0e89ef34c1e36d4c6d9fd2fdbda0c2d084760583b8afd08e5f25944fd3133fe0fc6a446b2bcf51e7d3473f498ddd4d50c4929c164ada3149236e0d9ad31bd14bc0ffea2ca972c3e7cd2339eb727fdd73b00a958729b9ee58da1a0057483268d5c0992bd0c49a5272695fbdabea68860b4ee535ba1c94fcaae8d74df85fff8e8e5f8146147fb7d0cf1c267981019661db028779578d772c5d2bde7574db97569b9cadcf0eeff8d4226f687f5d1e65b209e5a9ac2941ce6c26c2c0dde60a8dd76dcf124fe32f7665af15d86ce0db8aa4e0e662c6d1f6d319869f1dc7e51a4cca6f3af028e11a837fc4aea7b00f2cfc52e71cb126944f1a7599f3945348a828c6106fffb5d88ce5a234cb6e83f0a2bd3b63a7680f69ab58970a32275a2aff8dcfc9ecb1e1dae60c3d57dab0f9d5ce5420d5af282e025ce51e7130b86a88a209ceaf9a351ec039c9f1948521450ade546aa06a2a7f77c59dabd381b688980731d4fc7754bb9ef99ab175674ac3de181d5c5b21a22a1d2a54ef81566f2c2d157e68b0cd76a1c67896a12a933c0839c7b1ab3dfbc042e426be112b988752cee46cb78c746f0f2f7c5b77a229441b9f338fd34c7e882eccf38c9b0107b9409bce97194ac94c5e26f5c3b09a9ebd0d6ba206ba8a06291b4e4dffc1511c7a8b8e15afaeb5f3c96c0473d23d693b07435d6d2668d67ac57957def609df4ec6e40edc6fdf2251af26a0b023e7236e4c9b1b5b8340c19d791301dc06611c988e8f1d30dc62232c7ffade76b31efd49c978c2ec271f1a2500e5d48b056c3dcf367fb3ef7d4574154c9e51001fc0428ebe89180a68885e0e3ffc47e273bd802874d876c9b8bb1da540e3779b1a1069880fc2b5db177cac551d70a780c4c24fe90b9f252734d0df53559ea363f88101d584dab86977bd9e643dec35a6b98127aabddbfb60f42dbd5fc83e0ea6fe8dd3974f140fd5aebe7f96afaab7f16c49518aed0711e8dbe67b222029c3ba237a9058d09cd740c91e11ae8fb0a343b85d3330ad680080e52f9c7a67cb27c3d6f9f2a8b69c0a65b27870d23987414c968652475896d420f13ce0f511d394774b92a09dab3c89770d0e30fd56055dcc88b6b25b6f42a30f72e37fe2990c4b2faea18bd9f77d0bb712ccd2635ad98d5051ee593f82b2942c520b64997c2271621c335df8a36b4564ca3f80b02b3b6aa0f5317f7d4062b8c890ffe003be32db5607333fef37fd415a37fc7e987ffbb305d96a6bd856d09eaf7978b9f8343c340c477927d82727e91110efdf462132ae09b40101a3c26e9657b777e74ecec165986fd1f392e5c5ef1500d5e98cbb3440075734d0fd38d05ced139589b1a42a1d32de2014cfcfe5b32ac85473d7a877978edf5535c93a2e447f76972ca0d9fa1011d6eb55953ad22e67623cf59ddb2e1acee6c0cd762b565d03e547fe26eef6eba891de2599c1b0825fe70f2b0806959947ee2e956537b7840d982492aa295cfbcd3668203a3d02de4ef54f44e82baadfc4efc50ef42dc005b3dd186851ff44003b74bc48ae4b8c8a431d03af1cd23198e4a8e2da45d0b134133dbd124dccd3a269d64439e79753c4b1074b27a6b99b0339f5630158641c07001493864268ab8409ca6a986f8e7353f0e1cab155ffc60f6f8a70db47ab74d16e271c0e669c2c8c4630470d1397aa40c3040f93fad09033413d96ccc2b1f8b933c7c4d215000e5c4e7c6dcfcb4519e59122a80506b96a4a00dbfc7c02fc29a3360feb00e1f5cbb999f773c1de0f6da976c62b5ef787a3c08f07db51ffceac046ea9dd8f5cdd22eaf7c2ca3be7d410dd87a477df1a8838eab8ef72ea38e5d99c594b57c2f79a831db704c393c29c9659db0dd1082c8df0130b8b0760aee0685a289d8dcdf526f3bac8509cacdb96625af6339664dde755e74fc8acba8b6dcb57d79beba260446e6cc33ab2c27263232db07ead25fae4b2548f652cc193f8a0e93ef835e15aeb18e401e3875ba4b82fac32cab00b3b4abe14a8bdd235971fcfaa8b5852152f0b\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-c344d3409be7db98ef0a349092d4bfa68e022cdf72abd10851fb824519086e7cb35ae13a93132867d90ce67d9c99315a3c548f7bed393d9eb71231bd9cfd951c53cf8a7555c2e8899d7914549a5565d8531685c7a02b82f3b95f38fcfe9c24118358f4dc4b0bad89c5e169e8f71e97e5f874bc8dea40c70e9fb2322131eced692b164c011d04844f0cf95a663a90e0409f2b36d8d936613343f6078751a082056d1c077fff3c3e0bbf5a9edac10d8ee0be319df29a998e5a52f06dfd12c47eaf72a457b18c73bce7931b74f28e2b3ca2037f0711b8a4755a860fd79bff06218b965a1e1368128e3db4401bf37185421d4b080e20a017f9695feb484b7a4ec6623cf5f82d99d1e0a3873d380cc5ba715021cc8b24f0839d10eb2b1679098330d772a081bcb20ba8613bad19841b411cb84e4f9bce9449b5d1b79922733e0acaaaf3c518d316c63a51ec49f4a5f30671df7b36e3996201fc625c91ec7cb621b54f98bce47381bc062be82eebbbd2196fc8fb1f26405a80a1cba591820c6b90f9374406c97020e0d8bbc4cf71d5379d54e3412f69d19b59237669e1751355c1721d097f07a218214428348ccbc0c954ea7029dc6aeb605ed6fa8334206e230c39ed5a836664a6c0b848de5c6a219a63ff24264ee44ee5d9f068a41cfe62cfbf885a2bb4c71f17863f5172b9b4203e9e9f21e0e744807277cabd3094d2727d78f930ba8779af85026e45b809b8b3ff259dd8511981e7955924bc29d448a5175c7742b7a1bd7db170c55a9831631267789adf7952fcba1391fc4eaacb7c3429f43a2b634553d8fe47ad9f39f81e54b0461061f6f67ab6b72a25e99801616737e8687c738b45a8ff6f05f6b5a30c8d87f6bb4e2d4aa82ecf9f7ff4d1a6d6b5ba61661e8a75d4dec3daa6ac96c0abf7ac09da08efe3eb73ec0de8ff231078bac1cf98ee9ac6aff210ce15f8cdabb143ec77860bb090463c0e6b63c0b12249633510404cbedad4eb85641630cd131a7897b46443008e79edbcfe471d37159a27a9622bdd6e34c1943e0b5ccf35d8885a9d584f6a54cfe7b1b45162360b573fc19055f6ac05df20662026072faa0f0fbdcf4f9b7d89d77fa0a3ca7ea0d857d0d9b94e95a406bc039799ed56e076114dd9f7c8c028c97e2bb813d8862da972b069d7c1e251487472c291baa0c0a9c9f349f29091d8a4332a56084e11296d1c72b7014045ee584056e9822b113136ca9fc27b1487f64e4fae57b31df3e6e2728fdeddb4437a8257af982cd08fff4c4e6e9aa82067182290da938b3b969e5ef0d15717f0c34130cc2d9bd29d9a4ea6707c9a45830c66a2598d8678581d9a389bfad0e34c3cf45c3596aa986380458c5cffc1dc06c5e143952a211288ef0d67c7375f0d9f59ef10a55623af7b6d2faae4802882d09cafc9da95e7e0254b147fdadd9b8b28498d625e9b0603c9e7e0a710d34134e6b4d2e31003ba30acb30df03a913851d5191adde83fb0278aec64262de99b7ccb1c6ad5358651f336083f59089beb924db5af90be237520b5354ba63393c2514f2f5c815b694258cbd56cb7caa5de34986f214c566305163782b9a67db2f1e51c0172f757e3c8d9804cefb63df98d4297555aa95781e8c1114d5c53b06491b2c4463790030d2d28d159c071c081286071d95cf5fc624b69eda6b2cee5d84ba30ee0b4357eaf5429c26fbcc455357de8730f0b50aca059334ac5af33c7169208be3b060abad80a41d5a720e262075442b1f514958120dfd51927363fb0b43767f3bf4ba7bd2669f79d9ae38c8b244c9a1334f802e7295c1a5b2d236edb5ef8eab028dd2bd8fec9f0ded1dced5a352f55f4b502f5aa12a3131bccbc88a2dfe990cf2cef02ae787db30e8bfe26079bed383e363576ee704e2b2b3b6dc0254ed4039bd0155fafa471919703f632bd8623350cefdcdad074337d5ea637a95f995141b21fef74b93be8fa18ada82dca3bb6ebbca0544d790ca07c42086bc4908a4dfded5d0c09e8c8d4382dd30fd6c586d5c379fdfb11f69faef1dbf46b0b03432c0b9967e6c7417b2488aa22682c5ee0fe6a08e90d6740af02f131c5acb53fed64329f8f108f53d762736519923ab734654f968783dfe8d13d715e9db219ab7441fcb739fc75913b20334155dafe6b85f28512d71a02e463e8f58162a2075d301d4215c61164b5143f096decc998b006051752431e1d1d7d109f92c986c40d2a8f17ce6fe1c32c33631974e47c73b5512697f5e3fcafcab2a4f8b462685fcd5c19decaea96d45a7c3d35eb6b81d52d3d300f4f94f2f831e3412b12429b71b46253c83d849250072c035003b8f4c0c7376e502183848ab14ed9f8b6ed1c87d554223fba1bc99d1d065cbb945de8968fe41c161c301b3cfb9c181ef3bbc120cbef645da02c295d6ed66925802868bc8ac6b437550637e5a16d429dfa4b124c1f1045174507f706d3c01f9343ec58bf79e5611109530e2543ddfaa2fc0641c69ec8f3947b4350bef318a55998fbc25686a5e115c35db12a12e77c8dd43863c2c024745410a0fcf1560f1a902bacc961d931f793238684944140150a99f2894748d03a83e030ca52fd83fe43bb9b7fe43a9451f3850f92df5e242a1e75c3a101efa727667ac45164c35fe7143b4ca2119d76980506e8981c4990c8f391a0c9416647554db2c46256f3e56963bd4f7ef309914dedbd893fc6855caccaee377d70cdd54c64ccc3e3d1c0e197684fc692e9d64be1b07af246bf6d2e4f38d2e8844e01efdac0b24dfbaf32f08492a99b38486a8db4661dac565fd847d83993cefa810c42cabd357b3b1d5669afb73274be28d637d8c2de41305c33ea3569f865834effe4ba3cced51fa00ea3dd7f442894bb2ef9a92378ea447fa6af9ab8b3fc01ac45c7221981471aa121d59e77a1d472906c437004ebbb168cca7f518145494516b1d3a1aaec164e5f73a96c244afe367943eca32c4e61bb5766122f1f19e9768c4eec5d76f3b10376191c5d42005a99eef0fe332cf5cfd4ba59f725bd50916348b5704943cd5d14bfa826630a9529744148d9ebac15a84cbf6490be826ea51fd42e505fe9e74a13ec9a1ad546c8c22e8d498ee7a0dd75387240c3d166fcce4d957fdaa53d0573ed995a229e2744bd8493d44d774910625310b4edb8e46ae665c40599c7b48058f104199ea6ce1070a37fcb383ce4e2af436185c4a3f20e186a25b8dbf4dfbad8304125e186eb76b6f6ceb7fdc51ed324272945e44b0bf11ce27b5b6b683fb4efb7e168ff13e46f1f0f4a136827d8d56cc6fed0a9fc8a2abc8f5c06d1dc0de33042c5b840c6d66a8f27331645a87fa6710f9f057685fe00247cb7f12b229a43f539f9c4a6727a8897c69d8ade9c2af6538c594699a9f428a998bc1e8d11adacba134649315ad51f73c1bdc11d8e5eaca86a138ad934b30b376d754bafb3fca13963eb800818592eca6807867d9bd23ec931a343776da195c8d43830028cf4328701faf124a19beaa44293e797c2bb89b2c9db45c7d3785a0cf5c9fc783d727da3a3f20f5366d9f39bf49bd1ef9811dcd74804716f82c0afe9a73c88138bb23babcf5b7acc87f5dbdc0ce1e39540a5e5979ced0aacc221362e2a18a4af86f34f9b2c03a21dd21f70ffd443be4bab058acac295aebc452b4fd32ea5750f4a2fe6260c30eea5bff0fa17f25c3dabe3b58fa72f75cbfc18a84e2ea3d568cf6e66e401ec82753652f44e9410bbc435721a10da1eec613e71f04023f3121df6b45316795f110c81ec9124b9a5568c08041eef364ee59b4eed261f3edd834741845ece57fc5ad1f50d183d03c0aadd61eddb2f13c46093082182b21d4bc5832081fee8c81c1d9a77f132e8e5e9f5a94650222dbe47f5d7f846b1e91d52f62609cf0420446b55ae4a96c2bafdab6a8793beedf7a7ee9f678a099996b6d6f8221427fc86e1a260d7426ebbfd7b9f3e0b9029907b00cf77409b24f73b7f21fd2030cdd4e36fc09322ff6176f49b6f3492076eb9de2d79f41316a202994871bf7ff96ab0cf94ea11ab959ebb4fbdef3813698b1c78e13f2422efa15198dba6af17ca9b2ad199f133076f9ffbe8496fd28e003575579d6f62c69a237c588ea8bbac99b32c43393b20112779db5f9989c04e9530af29a7cd959fa4eb1276c69d46a67ebe363d635aebe19452416e01db478ab32a32c6e95d43ed4693d51f4ded754c62f53524d4179dd05a102acb6e7057c63aba9c8664d9140f866a359f755ca2bb4b0e66b3794206bfb311535810a24a6256a8c0c79c4a87a8fd40bcb9bc23321fed6cef599deffa6994cad1bdb655eaf85d082cc1c626727918e63eb27521b6de4ef5857a2ea372f64409d4c6885d7eedc15c95aea623bf081991890b8d5673cc9ca26483d6b7bb88fa61b31a13f114923e7332eb2a52b9c42b7b341ac6495d1c4fe01f627350089daa8de8cb8b4c660ec9bb065ce689d965e14488e67976502337f1de27d825cb3e6f563312f1a3467e1d2b2628b5a3ebe401b6533f549263babe79b0ec66132bbde277a1b4b8d913b1c378e864d3c56820b6de08e3462882e72573e8ae08c64861669ab8e92b575c6e7fd5db3a698895d8dfef064b5fbfdef1f411373a788082a2bd0000000000000000000000000000000000000000060d141b1d23\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-2bd5cb469bc4c91a3b3064b58eac4e6e03a617650702c0d2d7a74874743bd42ccadfd0a0426a18eb3bd2cfd8725609ec1dd664876ea3166bdfa5661bf98aa6bd4dc43c4310e2e2aba9342cc140161769ae9a63b145fb51948db18bdb445b795e36e0b1dafbcea3f1511748327d816eaac6223285317767e6662cfdbe74165a1fe31fdc3c1b5655d9e975489b7d89e8323046b49a6cf03abfbe1536a5ded60ff7c2f6a4623e6d40fcc62dd75bcc3ff33da3dbf4f21aa7cf1fb38ed42e330891963d504b03020f68a30bba4e6bc2a91d0be9a1a48553ba44d362ddc405f46c426c7342dd4f72694f49bf36fb98eea3ba0cfd5429733aed165610815437adab5aea371c1c82e9231023d2770da62d93941374d5e130e5cf7f57df615313fbd2fd93399b62f09d97e9b055b8cd8c179836416d27e6425c888b64d5d4343c6a5837740cab52c9271c928c3647af1a120e567f3b1c312eeba09002f3ae4e90e96f1fe80c005113d9bc1a1b7e755936a9fc22e670bd36a9077b263a7e286e8b0c57ef594927ab23d88441ce3b2a62ba3e95ca800bd30ea65d0c8a443bd060be70b49d2a1596f29ba16df338701ab6da24c06da858d8be565606e6b579ec8c1ff30a4819b04c83ce8b84018b26695e3e5715f11f9fe2427d0974ceb701b9695fad3cde0aed6d68c8649387cb9eb6ed4b7814e4ac262e44dbae89845e28b58c2b6372f74e8dedb43c4e68717a3d3007fe0e678e1627b3e3ff2a5e1cd2a1f6dfe2a43c736effb67060c08b2b000dc995cff9d47a8463861d088cfe609d21baf712adabce3a30c5c4eda380e61eff53a5341aef7fb5be2fef6c9ff5a03bbfd314eb43df88f20d40c8bf8ec86f4d268846e34585c2c7e7983d28a6136d1ef222ec3754a1ef0d2a155463275ab103bdb2d1a1087646ac0437b15b838c883f2b870fb1e324d20bcade9a80c08f306c2e7fda542f34a3fb242649203df14083cc9cd801e4a9576c60df4e601a477dbf9c1417deef0d0e8564980ccea153af41baf6c68ebb772a8377b222851a015351a748f5ad260fcec7bd9e3bd4651d08ab9475173c98f5846702bb68514d4a5e486e65b09f163b11d29b2293b127fad2703bc3e95925186b6c439c35e979a0163608900df4dc83f28d15582f20a7dd8b4a9c3fdf6cda6cc3c6b98b9c09b9823fe9be87ecff183701781933fcb4e1b877d2e722a2647b8e55e6adf0a498ccc382a27b0fbddb6bce5242ce1f1b0e47ae3f0a1c2a4c49898c56a3e9c49f4d53d3825e0948369f36b4c6b81be9b1c5bede763653f7a3967c9466a9b4dd0cc826d1ff276181bb770b9ce59871e906b5e3102ca3f6e567c6c275958442d66407b5f3a899814d07a0356d168596824db9c84850291cfc7cf119424949a778275deab8a5cba7926d07b82b6c6b296cb433bba7fb45b679c15a6f177562158f8c1a9e54df79cafcaa7bb6e002952250fe2d533bc27a9479bc03db36919d90ae4f074bf88da84e651cfeec8715c918ff605bd60c4bf3843816c7b30e11bab3537f14253f100646c7d0072998761d1122485f80b28bbd24fa0d53aff658202c42efe00385c778c611351d152b353e3265baf90808737271337310c0e8893fa16e9725386737b64ef5e41fb080b65102ec6197910700d309ca7f7643885163be8d9bde7580e591480f0de498c00b22b810f76e11b4b656df3611183c36d17c204e34c18f1d2e2946816506b68647b5cb4222b27499c4a66d3fbab7700a7e1f1419921a19f39a24dd5a905921e7d895f1289a0f07338cc2a72a50c95b2f8bdb3912929354d4945d4c327e6ce0779dd8b126ec891170f073fcfa03daef28f0e3a214224e683141199b25c31b0f47ad1c58e1b47994f2801829842b84dc5d583efecbc528181a39857dd19be0d3cfa07f3e63b358eac6c2786a1aea7ff5ead542985f42149a98a1ddb89ced1279dfbe56363946e27e8ce0046ac2244658c4ed3b97a18bea6c4e1caf48eaa7536c65b936af37fb3ae8f78adadd1588cfb42cbf14b9e30e0a9761fd8701953b3842da1d567b249a1eef29fd29f2d73e15b34eb4d1f11e0db7286303ae426ac2f84dbedf6ce07c1919f0205ff59f369132e27875a2657e6d560e74f8c8f3e5af044585f0272c1eaec7972aac43baaf68e884dd3f88d4ab66a471e4fccfdda4658068611e5f5c33756ddd38ee0023ad2faff603cb0f86659560d10e7845d5175a88c1eed5fc9f7beb33315d2eaf0273829b26ff6f3b99e31adc4752dc5cb651e8de0974ae5d07e38f08d7dea694b56a83c47731b0e14269b4f68cdfb66a5cd33b53fa01bb3f15660b7f21ac6bf82b69d8eefb52b75242e7a2879802bdbcfc3ef969ea12ea287a7a3cc17149b2271012b58d760e00e7b36269560a29cec00cef0d979366fac58fe69bd30e80c051d65268c7e8e50caf51edc9ba36825d7b3f9edaa2b2314bb62d0c244d78a52c4d5e2f3114fd1291bb25355a8cbc250931aacfc716617c884f74c2360fb383a04d5172ac24c7bb01ffe26801c7e20e4c35711dc0d4e9a22de14e047a45aee60d5cb4589aa53979b51a73f720966dd1c1d714af9e5179cae4e760b7a4598d8d46988777dbcc759effacda8075393de7403ef5c1d405572f8b49641799b26db4efd1f2c821b453c0704134a1215cffc835b5a63104cd0110d455902361ba484127cc84ea642405e73904b857e4c94467fe322108f5159eae46449c125ab62bf864c0daca0cb5ff09067b520c69c81ca2fcf59d2bb924ebb443296126198a0615867ceab2636b98f87495cb6f732868d29f27b6e1f4859aba4a83f172ce5e73385f075ff3c37c166cb360ea16dcfdb53c8d29159a65bbad099394bd63a5d3ebb2c46f003424eb81889090876b6ff0a69a18a438ce6989c465d5e32ee545558b75a28f51622831cafef18822100f2bc5b8e45e495b13ec7ee150c02112b70cbf245310344a6341072e48784f01cdae1cb885b1853de04c43121910ccf30c9c24f491e56db7538e99ac00bf0224eaee2e50fa9cdbd0679a500ca1d835ec1a129b42e88c11dd90f84e413d0db6a22a21d7c090d641c34807145bb0ee35fdd8348b75e045fd7e2136ae8bad14feeb2581e862d9ef964280f9ffdd2ac55ce4935f88858da06e683520c9be9aa447691e3bf37c0652b944f1b1bc458b6e67e3b760086e274089ca9177970a5906d45cb50862e5c30620be6943cd075c7babb86a2aa0bbd9fa06d5388239c2606edd34e729fd78a76b597af751cec41ca553300d0db0ee933239487493f606f6b8b5e2f49d87e061d56104444e23659da7a65e6bcfb2b767643183efe835889452e94149017dd16271f78d50cc74ca7e259e128f02f6beb925a9cd8fea3d11b105c11620c10954a744c65df3ed7ca978994b85d6ae53a89c675d58e805ecab90e575a9b553e3b85507a190a62b3e59389892ff078b0d5196469a2c4ef1edbfbf64ec4a917fff3f7361cdb7a31b360cd44a129db7fa091c3b87c89028e49d62dba7db65326ff9358dac88745b1be5975a6d519be7c9caf432cf876bf1463632bf4a9bdb67b1d6a16a7c89e2845af39e1a92c73aaaa39a917bcaeb3cd7b7804829a65eca1a885c08d381e4bbdc6b8792404e8bd273b2940c60613467e6e2756d4035681de14cd875ab004b4df747c4f6e0ae913717ec7054c37b253320e8991bb9a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-C9ED9B897C34D7119115A0758332FE70D4A9E11FFB2D6A800AAE33F85FAC59E715AAD93BD79DC8D958079F3B5C2422F8FD1A1AF9406E8DA3297226440E30183051FC9AA52AFB8BEEA2228E88D193F231F2422977DDABE4AF4F0437628C6AFBE68F70CF4F56153A2691F7A4241EDCA760D4B3AE0A17A8A0214BF1BA65221DE64647AC6578F4C7E4A14C401F7DCC30A10A695A7F72B04393F4E9C4163AB68667B1757154BFE711BB54255F4DAA9D8AE6622C71EC8ACE5BB79C6B4C8AAF1B0A0099EBBD07B292CD7B55E44ECD68DFFF4173743145B71F536E7D23E78C63679FA2F3C72CAADEFD5A9471280CDD3DD8DB83F8AFF14FBEFDC8C5969B050D263EA462C28CA64362F7F165C3EF427FE5E90A83310DCB07C9612E9A0B8EA1D0631D84B4A7F1C7485B0C91C3B7BBB0EC98D353376B692BAAF24C5389D50250F3BBA82173DCDB52382176EC5CB8BD531DEA049C5B815D788491608FFA2AE8BF486849810AD89BF0352ED595E4EDBC0B81467D72944AB83C3CB2F90FCD10810EB65BDA18C43F9A9A5D98E714BE992B7DA02E9F7C389F1A22810DC0A473F8891C43932E0F6B5D3A21C3B611AF6C394AFC576C07572DC4A1E56B4576FE615E516F48544D099683EAA886CD41DA848567F70C2103C467D271919CC5935605C0EF05909635D431571E5A316E299E553EAAFE9C7CBF5063E2057D297F60B5DE1C17AF6B97192E840474CB7266A76D509A10FC7A71721D705A9DAAC5BAD8A52290C1D8DC7938663B24700F992FAB008CCB3801258245A0F5F329A4FE5553F4130DFB1D673338889B357FBF11681099FE9BFF18AEEBB31DAD290C1401D49CBBE38277AAC8A99C8BE4E6EDD8A0F3C901082A789A1037768AB7C3C704BF1C6E890D20B3DB6918C477350F4F25756BE1742DCB31705EA9DC975DE0C38C21D29B340C63438268F6CC399BD644EDCED36A7B50E8D65A507BEC51A31BD136525F4E7AFC1EF9E0E6325D032682EB4AFB7FB22F1716EC6F4C9852054429B5C5FAF3BC86213F6D800281913D5722F3A380307B59E1CC290EE66FB9699FFC627770B52619256C7B76D993FB4024D2DF0602F102A6A1257A200DE1F39DB54614FEC2B60F3728F59482D71C7E5BEC36F0D90D6FB0B4FA252E7FEC4F0FB9EF539257EFE87715ABEC75B2A5FCCBCFA5666F1C9BE2F0489E04E63ACBBB239EA8397FA2EC24C25C538BBBFEB74EB8E15FF93B0FEDB7F36FF67F7CB244CAA067EB2C005EDD2AC9E0765DD38E51E7C71AB72B056B230ECAA8985DCDB50439BA261A0DE57E68700C64655E1EB8608BCCC33480ECFFF1BB75D0AB69CEEA8F2E3E9515331A1EAAFB9BA32AF62798DF761267475DE343CFCF5A352C907A0314365B8CF6FD2E72F2142018C4BBCE4CF0A160266DE320EBBA359344A60D32CB135F5FF943173A3F9C7F4A68489E78621401425E5B8E6273309FA3313DCBF13D7C69B63C1EE34D3200BBB4CF57518A5E66D010984AAF34CA9B7DDC914A3AFB514FA1B9D3FCDF3324998D0D9058FEF10C30ED6B381C41DE363CB31C5107E7C00D4C0CCE485DBB4CD2092CD929E5717DB8CEE4790A48475E1DE9178E49B13C5173B6F301D5B7BFF1A9F8B3807A5FC84DCAFCCD8D585B77014EE285074E64448589A738F1323C7A865C3DD482499640A3F166F38E37C6F9ABA8263E4F3D1C2E7D7AFD16BB02B9B4BE8A055452071F278C32C3247DE2BF83A0633BABE7FA048BB18FDBA27022736615\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-6d9ffac759de540cb67a1d3ed0e50afaee62c1bdeae34e94e8c88d8fa0a86e22b911655d83e0197987aa1151adbb629f7d130a143a3c0f34ea817898a86d76f54ec5fbcf4d0ddc93ce671516be812b1eaa2fe2da29d0381d9d5cb8e702c038b8b8e51d3ae18d0837fe459be7cf6e4967233344749fea70a74f143fde0a0a9582366710648c4f1b26152ca0b56bb6bbb6011264960f9639ed7239881337eaaefd07908359dbbea6dca1834f03a753dc02ebf67371af2ae1a82183f654fe20ce6212eea1aa256b8c1366b4d13ed800e116365e8f3277eb522f2793812329e730f56f6af17cfde3273045aae0ec8188cb956a0058dce1c4d481ffb1e114405fab0a5e9a70af8d438a2a266d9a93332e621231c4ca1d2aa02e417a327a6feda50ac402263e797fea04579ff60b9f026bf7a97fc3378790e3dbc9e7b6cc12d1c01813367647bdd5f8b867c9e1b2d05c870b5935e5f19772fcde0d8116a9ca9d84cd340ed26adc1033a8615ddcd29f86659f3e742e7c08cbf197e4c2f680547099b364fc67b8140a22eff4119906322ea1badd4af4bd008bc46d335569052cf26520938e417c8a8a12c72cf0a451ae2f209532e214bfaffe20414b4243d9351093215ec3ea78a5689e4f89397c7d309abc54d55d3dbee907ebcc6a8ef921ad61c67c2094081d901ba8631745ca131a302fa813c7137c1f3fd66207ae753d0eafb1211ca4e0d247182b3155e12a42e1cce1c415f74677928f7db645889ea70928679c7fdc7e36e43231ec831a6a6b6241bf54466bf530553c268cf5d63b22d755fe9d341b0ac7ab830a303d3f74acbba37de4c109a63a6457e9f79955232e368e9b4aaf27c6c5d3984e7acbb9d19d4cce1b8d53a04d7e137811f10ce33ea05a0b25f0f5ad1499e39542a264ea0830cc2b20646c170495e71a428d35ce3b726ccbfa1499ea716df3a01186e776586d431b90978be9536e5587555aba18ac6f7aa3bd44867d85b6fe9727496d6e0c8e8e776cfe346c5546bd262d30492cb480040c42aaed646969120db4dcf7c3adc8a4e469680e1d5d1092594436655355631bf037a3cd4b9dada49c259e0c6998d466d6f3df582bf86cecb7f4c874f392806cb1dd3b08d3759792875a08d589cd8f8dd8bcb533accfe23001773d6b9ac4dd6686b4ec3ef8cf4335f70d86bd155e5e473666c3ab5b27f069616c6d87f3969a55a80e59825840feb3c82816ca0e7c544eae787ced30e7e5d0b911273909ac11c5f0407848a96fe139887569491fc82b02e70134a1325956e65f02cd97254d4f469455f5ddadb32d99b851020ffdebfec3c83fe99ac4143bc4de6e2341948494dbff83f13603bac25fc5801cd694eefa4439afc61ed048a811b355b75ca4f7f7cbe88debd671657bde2840e95032129f2f40fcdfd160a13c7c123fbc811a7759e86f914288b417a6051393fb564a8a2473c3cd5216b31848cae14dd935b79647aeb287a262a59d37da18b085a86745b2090a83b6796203baded78332e5a76ae6d8920473d268230c00a442af276d11c5179e0b776719f02f4d380861ef73ef946dd03cedc6b7e19c812cf6367d6fb847f0f00b0ae2d5296122bf26553bff501afe0d217628dd44a8a39b509fd5a50c2b991d70eaed000d85343135c8e1f9a4bc703559e08da575ce134e07a33e3f3214d75f959c85e28329aa2242d8dc69b12ea2c95be537b8d1de119a7ce7d7a672c7172bb7f9a5df91ed8e10adb5ca072a493f4199f1135ac519484678681bbc88135a766490f99c2b3d4c6951d3e5da5e169b908a60ea803227fb870510c1963196712d0283102d6883b9164d9c30f9853a799696d488ad8834b6903602d14565faf6be82e911ea41d2cdefafa2506b28f1ee5a77eaa115b91e1ab44b7123ec70114d0c4a13846bb046bfcbfea6097220fa91d1e0605017f3849f9e2be6507fa4b7bd4239ed56961e70bef8daec13fb486d458c7186b99adcc45ddddb818e4947c0e6c5eeada18f564bc664f51efac7a8f12a259956ffb2165f450d728ed5a3c9b4cd6dfeb2f90a7711620374a66510fb3c2b3fc316e15e52a5f91d3e38b3313b7f9b5a80b6b181e4c4fc036ea2574d219f179bc1afa98fc918e33a52cfbc95e20c09b4140367c978532e6be246c8cd1d2c5508721eb298db406a92e77d833bfa7c5865c997b402cd8c09df2c5668cb38b03eb0e86da9707853b20f1ab23e11b6d38421ec2d6882a9121b847f55923601914a11650f02f99895f9920e1df904c6f45715a4c0d7218933149297191f72eab16eafb816d5dc1f59c30a249b8545e6947ad81d5b8f562f42c016ad46f19f5ba10fbfd2a1c22974669c376f496519525bc7ffdd937da7845efd848aa2431344c7314d6eeaed5610ed1ff144794091ffdae46c31fa9e7116aed7dc93c4765b9b72e021b825107e248b988d11aad8a9d466b4b109ffb874f26d6d7f1a12dfcaba5093d60179d1cfd2b435cdac23f6b64cfddd536c55354aaf6a76d738bfc12ccb003a14d19b54e6ddba35dedfd5e4f7f8a18dbdb4d7a8b34acfa4ec462b9a9ac8fa962ae9bfe353ba9ee19d576a320e0f9e22347a84fcf58c0ad61429f9a5f22809b72e91574052534e96832a99db4fe9e22e20dc2ea8f5cc4cb70c844ca9a0334f92ee2703b58b2b09e77c71e27851824c78bf3f4d177237b212f73d6681c6bcc29f12116bae1a25666035313ea2af3e4e98af8f6cac0236c392c39516b610234304b4e4d1d02d8d8e349dd00db7b8acbcaa4c79aa99f711ba693c7e93c9a71342453add96a124e3d06e46c503425a311bc5249034ce01fcda3c5809de83a87d4eeca01b26f92d9ea61616fb5383918e87522bb636110aec1d2b43afdb4258a51f06ce0af14a8687276d67033d922026dd190346844df0974280d56c22fc76fca0132615d1d61bed3facb80f8ccf45ab82121ac3cdd34c425f0efc86e1546f35cf470bacc1976e8c8561b086c52dc71d9fca01223707341c9af7ea6791bb08c2d46a578ba479fd36a2ce79558387afe1375090a53aeb2183294e747043eff104374f6f247591860028a49ee51c5327007d08bda15dfe2de5109683f0c10b620e455d265411a460c3474c3c2c9de9e72356bdbd7309b6e6dd2fd9260131b595630932f46c372a3da2563f31fe5dbe9faac52abd5c842eb8eaade71500f235fe806fd906ae53a2b65a906dda24b3839a0492b206687931dedcf96c57f05c28bd3e1e97731523ee0bfb74cd9367676f142f73d861b070843e772fa18a80dd641f430236a96b294c68ec871f957e4f04546a0610b727b4bc9d46433434e43e9d6c0421997701c5464fd62d7f73768f92645b251151bbc11a9a968b863a2a25de9b1bf547cc6857bb65c3fdc38268b9a89d8a4e49f1c62190812148e2c2617a92ee7003a3de676129e1f6b92b81081f1be2d9715bb83c31fd3136c80a0b23b902a9a3e5f9383b1206d2d8638fb0a5e5c0e2df646235b6a40b5f4f2bc4a13041f44850bb8cb1ef1d525f2ced545246b830547136c8fcfe69c86d4846391d1b8d78a63f50a09ca62ba8c1578eb7ba182ed67975889ad92458caeddd358dbeedaa34e160051b2346ba269003fccc4c3f58d511bc74949b152ae37ef64d0ab0560b8c474d3a1f78b04de729c9f0c4ad7ad2812f037195c85f3d3130559a336610541de8dbce1c91ff95b4d73ca6e4f4023378a5e4e49c8a907cf89b3b71ebc5729b783764a8b9f998e5a299c877cad7bcfd34252ca87de197343c01249c205ec4057912afd681c5062897c79b272c9977af12ae543570f2d8c4977684a2689c627ea4f97a8dd9600a17b6bc10a71a9cae8b18737e3d4e070402d8925d8c81d49854806528d5b03fb90a4a01c03cde8213522cc3372e49fb12adede707ac55eeef0c72a1ce7793925ea6416728a2afd328d2241091049beea09b93158c0835f9e28d0fe34ad0e6cc4cd82651b3c9524e50b6e6e509fba04dcd311b679dc7c82d96490b2f3f7c48604860afd25d38786d7adee7dda54acdef35bf58c2fa5bb0c226b535a9f6230c9428175ddc939fbe2f2191adf27a496644d1004c05c06e4a2e8b82a1910665062c10e6fbcb6d4e49df3e6d17b02cb891f89070288c94ce4faff7709cf88994af70a256059e6bc4df8e2769f9d2871aaecd023d11b44c7ccb0b0f40f4bca202dfb1db1890c89c4121c3a221ca70592742c1c624f9c54ffa3ddcfdd40864836184cfb075417f28a6d5dd5ba9eb4fa2a5fed82c86900dc96aca2342d29dd7208270bd4d6ebeba516fa6d8809eef26e6e929853df5b7b22a66628d9a728170da4a4eda26af530fa05778698e85f02d979a76706b2daa3d154db0872ea5c8b06ca7235305b1d5c1021b0334dc8df6b267760e652a0e1a1fcbd0039d6f585879c7b53a2dd3f664e36fca174322e93989f78ec66ecb613b0a694f13fe2715a930b2ac5cc4ee65a120c3c309b97b8e1ff856857cd88c0ba77aa5557f4184002fb96b35f367bb62502fd6fedea2df3ddb6f4015b018fc00ee6a79ab78c25aacfef26b1d5b1fbcd372b296f320c3cbd02128827678f54ff94c2c5a677193999eb2c1d7f7080b1d4667828e292f373b47696f7b91aaccd4e9ebfb020a58acf20a39586173da2d737583d10000000000000b1221262c31\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c80f02072f243218956d3770dfa0eee288f8b5372ccff67c93318ebecefcfbdf18881d022533b778eb8b65b8881dc3c5a2fef36a869bd5cf304c457305af5cdda268b9cec761d38a2314eb1b8317184e325be289861c3518cea2a10dbb70a66f2c5f67c71d0ae6320e319afab670774d6f34ff4ac770a48ccfda9b1d8dfeddba5a72c38850214325e10e875c90dee2ae6991fc05b67acf1130453620aa0f16b3eb56700a11ae3340ebb059808062a52757126da288c4d6b913956f99c53715f2b7520caa18f15695ef52294bdfd7ebfe3d668ee773d7b49e7fae905b8e16aec6e314362245f4978fa92e5fa66906f875b74ed5705e4374e90ef2d4dafc3348d49c17027403ff6e18d4576e61b21b540f9b89f5604db87721ffc19a6e58e4582cfe90fdc3c8f1a06467125fc6b133619c19a299c2208ac729a2471152f58ab9221fb1f8b8ee99bc5562295e136c1d7491fe4a3272012e7cf23db42474500a6c3fac8f9fc80f5464feb32a81bad914c1034fb278bc6223e09a3b3a5d891540ae563116f2ab2719368627d70100c7156e1131f8778d605ee6da8b78a7681f79e681081c94c2032655ecbc5c54d813d1d3e4c3875b90a5bf28424d0f3aa44ea16709455e9d8b024f5cd288507cc5c4207a85b1780a40421c996c1e385c96b8a168c27fb7dd18b80ddd5cb27e815cc3456cfd285e3a451483ba46f8031e66bb2f26e3b34dca9229fc737f60e3bec555f749be2ce66967f842f519df636727ae2b0ad8fd7054ab44b3e676bbdc087c5e744ed20ee4d70451a3f991a2e11df9309307848714f5c5173234481528041f5c4cc401a59812652e7536f944a124359e24fe0e915a605f8f8cb656e6e29a2c62a58df629548cc7429fc016953c5c6cdfff738359f156f504d514c501cfbcd63c012e6e4a98a96abd0265a8cae4c287e8d44e9198d53c16fcc50237e227787adaac3e53097aae470812d7885e8a9fdec4c683178fa31699e09b66765e643eb3aefb034c471cf83fa6f6b900d8e9b76a25941356886d8bef84444a788103478bb73ec2e0772698f8d05c859dd7e37eb065e3bd9bf54bf30a37bc784adb358dabb075060e9777c74898d576ffb8b352a576252d203a0fd11b24bd73919ce83271e5ca576cb1237f2df574c65cce4051f89ba91e22e9c1e1e3d981e45597488fb23548a0c6f555a148a6f5b520293a2dc1655b62719d4defb596b613be1a131b08e29d3cac60bbbed0fb11a6bbefb006e6aa7fddd6667323a09ecd9d6b39073092c1162682ab5ed6fe878007609d361abc09f61d156eaeb34c4c01d660458c0e31af7f43e6ee71ca77564bca40f39e2949008afd9028e6bad1cd2fe320971e2cadc9d79a2c860a41c658ea8aa2f8842938bcdf8887cca5df17750722c135f92da46d749c43eda79f966449948fb955a39d90a725298566d8d010c4706ba4137aee184bbfb74650ba401a7d08410d8d8634765868805032b2605714f866c169ee247efc2991c6dc62e5978b787352011e006bbabda578ea283f510906b6c641e999c263f53fac8c00213338f021bd1c07ffc4184050a3c07e926d99e10f53b6017d297c29bc5762ff0eb64fe011a2296810a52c3dc0e0d5a44a0f576bedcada7defbd51595cc7e9d223acef03ce265ebc8e47f326a672daef305df9d8137c93786f791452842837ff9db6c480770edd3c1aab4577527d669d3a656b742f89d153036de73628f6d27c7816b105646cc9ed77d602e5fe2cf1d203aaa9cf8585d576f4a73ebcc5185f541b8dd3c0a42c34899d2350132680f1e95a5caa76cb97ca22ac2d149294eb0cc8a53d597fa77a686cf5699620c393073fcb41636d52861920ab80b8fc5eb1716389991a6517481c107055ea08c341c9da52ec48d44e80900038d0fd105bdf79be232a2c2b3c7d66adb018977cbd762c0f2feffa3aeab21b2ed461326b22ff1dfab712903ffd798c819b493ee7651e179873bf28167d8afee704450e826d7cba86a119e044e52a80b0ce31f1fa95e67c7dcba3e78d0569073e38508e3c2327a429030ea59a4384c8c29561d410dc24630a80673a7068aa518b8274c68cf4355db661804b5b44abaa70390dabce2f16b51537956b7356f46194b5056feb47445756d32ea2b853a3879652dd5a77c4c93cdbf5dfb3c94254071e0e054b49e85149b12b8d0edacceab8f4d8d8351d2c2929d3930c1d684ebd797e9a2528b01b249daced8dd27669bfb184de5e3d007a194a310314dd50489ac49bcd5e0648311a9489ea505a3eb26fe6eefdb5859e479c8ff00b719e0ceefacd729dcb9b00be0c1a5688b192594f5b9da5cda8745b925a6d768ad753c3006e644a1b790ea8906f791f879e1b9c90a124ae504f80f0c17ad9d823a794bf0db57a8240e982d9f99cfd9195305729a279f39dd2b1821fe09d757e875d6e9f162612fe0dfa08be5ce075bbf6845623ed468792a8a15e72deb7f3b7f2b44b903b5170e98f3691f32faad1b65213cb4198dde740b87ce9ee43da004160d773747d7e2506d7c41f0b6ac80b1f0a3c9666d864db66c42b8b4c839a2f19b85e3978807a2b0d8522ed3c6d1afababddfc0a06c6d5897daf6a72f62a49243012daf2e6f08e4077312fee54b5ac8f7bb9932c06b8dca2ec95ad741861bd12cbb87f0ad8e2383b2c1aadf8f9786585ec65d61db5f66d5caa23d86778d5d186537b6e65667212709e7dce06b86d88ab40ce21ec3c75320b08c9f92e216d2e3480e7cc9442e73eb1664e081ca56080c3c4570eb5cd51b0a0d7872c95798ab6f027c2c32044d937d05dd72a0ee4ef973dcdc2623cbfaf0925f375cd22878b2f28ab048cbca8777a6eb52def28d90c5327b21924492ab7d1e24fe6a24b37404e8de633fe6185aeb2cdf1093420b847530601330d914990d764b33bcfb7d3fa90ee25197fa585992c9d0726e3ddb72bb6b03f7ba66a888fb522e33a6a8132a6d39b7b83e255e84be3c6bd55714d0d0146647d7484d5737ff6dcd5e9f128434919e0259f8766d814d69811a25a6d36ded06f7a6ae919401383a87fd451fe1d59ac85205efa636ceedb523d39c048f45c36aa6ba72eaf527bfdfcc4d8e99264455274335ebe5141ea71803e7e2fc66d041848847717d37a4f7656ce2de0c4a23acb5214b78009259eac4ef77980e80ad76442c6df57e7507008d51dcd2b49c28df2bbd66f8a6a9d99c946ed37561384f1b981eff93a64d8282c71fe39cacd5cd8b087ffa3e52eea33d88c06944a025edfce077795525d33c75656fd4f314a0f6089375d96ad2bd29a62df58a45af0a03c7b9d917ec56f3b3083da68aeb20e034e113ef67b07b58bd7e49705fa600fb36be0f345390deb3d82286d4d04329fa60ff76958214775764c7874cff5287e435442aefb809fccdfdb56adcf00c5f420e70ffaa04c0f768750424f16a7b25533ce438ca89e33ca9afaddb2136e6b1c68468aa9e7434adf614d0e9d07a729c2aadeee1cc07db336d3bc2083d0d87f0e6b13659184da03434e93028c93123aa1be5f0ea0d41a1fbc6ac2b7987a66693c46b9d4539b3020d5422897d4f2b5c33e802df1de3e65fe7840b793bf0ae4aee817152b00a9f3ebf6a2d7ce5df3e4ffd5d0e35e958f59fe742d052f8119b4cca8f0f7605b2f7f9fe15f95cca1f59b443005bc97824c3f64d835b6326669ef53c12\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-d645f682a1b7aa2650f431a828463cdb131c1c317bc2d9a92477f9ce4a7190d287bd352213726174bb967d2538e6f796698924d4808a15377e3d05877a560d2cfbc13150acab39cc6ec464ae5fe51ef788aad862bdce80a3c3669186598ea3f01dfdf9479caf10033fa89d5bf164b454b1c909edc6a85793b2f3662ca4dabc42bf621b2c5f55b357d2b7c97b21a1748d6e6d0cb3c2e1d891b057f0c3bf482f04add99ecb92d32a099443987c25b1a5e26930082e9719fe2ca845343c3c0208d35cada03bf51f8952ef49c18c916c03417e217342ebf7234cf9270522b3f6bf7dbf5f7aff8b245f1833b8cb314f86b1e407f4e0b49f2f2917bde67c9ddb7fe39a64ad96811980b530df51645a89c365602dc6a6b53b67e56c74951d72e0cc2a7ca5ca0c1b32c3c9700fff54c317b3bd1474cb3cb402a85ba80def7b994f84018b9241ca20cc5ebe6cb24b26b4ee21904b658954fd9716004a009b762c5eb5afccfa8f6153d1cba1358653a88c0b87dc6478578929baee5bf33065aea3dc0bf333453ed0fda613d9a35e00eaef91ea96d87b676b66963d2affec30cbd7dbeed1f36dc93527db0a082d494afded3ac6df843e385a53d8a7a0dddc2a38cab1a92a649072768608fead5c538d8767a75f46bb73f7971a41401b8fd50312aadc6fc5f2096007d6002013ef9fd66be15822ca3b001540652636a8dbe65b2b6324885504ce3233f6fab6bdb5d05a10d85ca8b9934a5fe39d7c3a095530554d058f2f99f9c2775a0822ceccea548a35fcae73ee931ca01ccaadb226f91f0104743c423b220b9c76654c9baa1a1e60310673fe86e8c71eba544763f94b80dd075b3fcfd82956da9ffd4d4a0364e26cf4c4d7f0d2ba435a4e7b51b01e9cf55251a5f8fb4e32ed1fdfb6dffac187bfeab67b7bc06fbd1d623c68823d45d708ab29117ec17fb2df9ff17378ca7a021b504e678e4b7371f2aa05588d710f292e547f719f7d2e66ba39d382807ccd3cfa8ef2d33516053e6ebdb2a8584982efb880180c45480939af7b3d72e71d046fc78088c16aada249506b079daeb16056bcf49d495e5f5bc9b64125f66c809e02282e26a8b8c9656d19b75eddb4310daef82ff90bb199142ce3ea68dd6ef33cf4d0f2e7981f2d6d78beb9aa10ff7421804231b02b39b3e9c4be9363c49fce0b5a460f49094389ef2c28bfc45c805a563dc2202bd9da12485eff443013dc8090be20ba1430eb71516fb36926db06d59f5313d43294d09a5c242edc04ca7f1f69b3f87861fdd572385ad400f66ff9bf127e866957b5b7ef7e16f0cf93cd10d77b87894fd8c0f184f0a359cadbfb5fe6d91a06bdb000720f202f077cd4bf5c8b149565c43b4a07cdc5a3dae7599d26f3931d101d086b9546be593ea0bb85a1807eebaaa798e57d88d4b042aa3e3f621206e22f66335792b606f419d1dc63367d73dc462ebb177d3d9d4532ab6c39341b447af8a982d24300226fb367987aa37ed10223083e4db66a5a344628310d46174e0c8b466fbc0809905d416e1b742f3749ffe7ea56ec6c28b085d71d4e315b4e49d6ec945d23ecf5dcf503c59b839446abaa0ee57179a6567ab4d02fd1025b671aa5a464e1892e9e2b96248107fbe5fc4b792d1b6f62ecc6195be7acd19d76eabee8e8deea2ca2661a382f06e4ef90179a4fbe255f4a617bf6c1c3c564e05d1eac7cf110759364e7d3045b2330a52bdbc8ab2307e876df8b0011bd2361471c6cfd7fec98dd4161bd7f7517fa6bdd2d678dd4dedf71dfef7eef7d28d03131aa2db37f163d16818aac1e4daa94c6fc8ac8d76f03f981d98166431fb42081dc565049be93013f71832aea1c20dba0112222bd1acbd7e7c112ebfaa6e264655950a6fd78da09d55838d2f79a87a311eee67f023af189511c7e215cf8bf5b8f47ec397ff8ed22f5825814c86712c289977998dc8c7ac8eb60cce95ba56efe213043e7065d8c6e6c1c6b7c4b87f807e6375fd93e8133b9ca61735d2399bc2f0cd4e6d28c21c4172f26808a70ec7d5502449e335abfd7ec5e45fd298cdfc8699b2607745c30c89803cc741b1c74fc6698fa95c1397b59ce6a08a19d3572fa395af1f913af021cce85d40f53d511b2d6ca6860ffac07dae4de99cec54b0608ccefa3395e327d67aac3f8940c03c737f0066da5435ff060320aa68868b2fe309669a014e0ce7eebcb3e9f3d27684c0d14be48ef4d8de1f0f541c2dc22160aa238f736de0f31996fd1e554ddfd33892e998180e4a47fbe34f6e9f2004d009e83fc55e7c921a73390f6fd44a7f32122968e174fed54ad1117344325897482707ce6cb45121266c870f3f560c4315f046e3798073ee0ca7ef718176458c761825f7288b6663bf48b6efcc50e35a5ad124772fb64967056ab6a39658973471ecadd3d666e6f0377fad3b7390dc9ea67545fa030d1085244082ac60d0ba4d6f0ab44167571324e40ad664fc95c25dec94bfd59b32332ca5efda8288965284c7f88fb8045af9169eb63e98405e2aa3e949d4ebe07f3450ce6caa14e2b399e26a347d88b2fa8a301032c39bbbd945ef5d213cd4b3418c25cdd175a3ab8ffa41679cf6359ea3c28905309af59f0f92cb1db581e21da648f096171953fbf62d53da61da8eee1d24053270ef6911539a7ee93c6ff45a0b465ca879498e131d37d1a05be88fad8cc28a3026c7853b9a48bb8f1680889ebb3978b738ac7c3c54a0bbf1ddd79819a70e9d083775095e1daff66f72df70cf17e746c70f3d291a343d4530b6c9dbdc861816ad799b1a63f807fcf791fb1ca2e3160543abbd10e4fab61c18c3c4f150519d9690f7d22c10bcfed5c211a6af6f438737402b425c5ae274ca98716bf64b127ec0c7a6cf3598e9bac44149b93310ef5de9fd8381a961d5b9c166b7a687072a1aa27a8ecb2d9a023d353bdd29870650e0626931654ad80a995d6c5ce63ed42ec35444ee57444ef7edf45afe7255739b7ea731dd4c48a1497b5e6c135f4ddf4cae02577920f795809c1d00a391f15e7e376271c0cc0a09ef69efd28f6a44b6d2a9577ab7fd2198f81b92cf4094c7186e72fc3a379ec9e31b7bc12873a0008f40c14a81180f4caa16aee8ed827341c08fa4c98d3be393d524abfdf5546999acc4bb74e6d72b7db9c443bf8bc300fbb0d19ab0a716001cc87dd27bf2605930cfa437c08b0392e8526a26dac97e1e692baefc515eba1b82fec70c5eb4fc950386be3a5eb3379537100649cd192d611dc90e5787dccc69a364afa632abb31de145279e9d736ac1f6185f332b75875006f01eab3a48ad573d4e9b6849cba181d1aaeea5120fac5da72d81e7a36fd0847fdfc5f7f8f589b98511bc086a107d1ccc4797308be5b590ccfdab138078ca19679a5bde6962909491e1df2b048924a235819a7a28e3e3e97105a1a400c0997376ed9ff34b48d6076fc8d9668e6498171b82d7dab2418146610d80c2c7be50f614c6d5adf8511ce282d2175ca5101bb18dac9207813b9be0510a2195cc2c746d2bb99d3049f29374664d74497e0372994583c788765f3ac918db9a4d4d1f2c2482f50d013e7e93e0a5228cc03f4db0cfd14aacd90ed05b7ff5cca2b00f577e0ba47e7a0eda068f1aebbe688f167e3af3bcde28b3bcf0e89c63389564fd60be1c8919ac245db3cab86fef9d0bd4e365c1edb0472f4ba23b22c1918a399e3e08933031b2d0ada07b4c89abeff516f06b67e2b5c6bfe4fb6671ea4a45c375b9310f07278f0594e4943f4e45098e3c68c2c7f8b4eaec3b3d49a21c077469c84407b2ecf958c7aa3ccba4833a0b8c6f6cd8475c4d239608b9d25bcd9324326b4251b89579f2e902724f26943ae92b95487b215d719236f69eafc46070695e8d4a93053e275b93cf87723bdd589c15f722c093ca50c1d54121bcbcdff8c4e306cd4f11fcc681d6af09cc0de076a252bc8583b5afba1405798756432a729b177906ace7f3b8340f3526e7688fd49206e6853b4c72979469a30c584786f2b8c75cadea9eed04cfe68dfefbdd2ed5e1e2b3397ffab7c5d84e645a4049e50bdb9cb2453092354e0112cf00fd214e22681e4111a7d4563b84828d6bf6450facbdeca5137699c551f2b0c7a0bd5ce147dc71dc2bca5b0abbeeb109e6e951115c9c8448d455bf723b8e18e31b480e5b17c8de45d3f73ed313b9bd6a8f5156cabf25eea4737d4dfc8ffe042c6cf665bb346d89477d1faf60ace914eff5db92d82ab2da4e08de466f532d1f7c639d71e6c3dca9bff0c5a4948540cbecf4aa65c4dcd7caae9cc3ac56c04511518c1ebdd02aa8285b05393ce9fc2d2a3d8fcfcf79d4f1811d9073346d67f4f9af28d15706d577f8592c653c315a396e03f3dbe81c339c220aabd4f654239b14dae453dbd213da8819df690f38ab52a1f67319dce8ba5cd33e9bd8f5e61c0e0107e97b7bdc384269d410cbb77e19f2d89e38305c6e7dffb952e331bccdf884956c9c67ddf2d56c048b31ecaadea55e8efbbc94ee0a19980cd30edfc85d6b3ebfbeaa51ab1bb01008554717bbc6b17ce9b8b255707f95b7302d63b0189aa4e9eaa966429c1c1b9d2aaee73460a2335455f8e9df22a2c3861cd354f5163b1f1fc212f709c040516172a63acc5e6ee051f5a8a9195a3c0e3000000000000000000000000080d1418222b\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8ee898ba956b2d9173be3179771f705dfaea460258d89ebb97518aee95f7560af3a7aed5924ba5d41fc95d1e38a50f933d02fdd280aa39c5afe63c3d9d1794d60cd72286b030b4148763878971ed0b5148ed040f91506cc5443983ff03d71e76f9f9c56b1aa8cef53b23b78dfadf10a4c5a1644dd5b2a2e33818effc45eddc2ec0271d6e8c228b00eafc0d3759106302375985b74ae9848bbc6737ca0e0004e600a1208cca1189f40a7e02deb82f24343ce1dd15b6edf8bfb273ca6b01a29b9dcb7ccfcb3603564612bb0278ad176a72945dd9537ee8e61055db402662736e6d760b2f48194cd3c8f64b7157c0c598231e4994a50d837e29c7153a2ad127735672361e7cd7c50ed7e9466a3794c388dfa6ac647ae4fc7b4fe23e4ebecb77b54b382fd35c9d462acba17a5c143b52df0e5fc607cc4a5c5c504cbe12b8c226a0a954f69139cc1ba4a050c754773e38c5d43524ab7b76179d51ea7cbb54edf38fe67b71031273eb8c38cecab0ef49418716fbd2f2977fb1747e9818db3a8af81bcc4f93531f0e6f1a96666d32b2f5faa306648cb48c670e1597981643cc703056739317310728d16f6b0fa1ec0c27eb3897a76c85a8b33cf7fbc8dc5577c96de4c012563f84e9eb255ef38c2f3ee893a514f854ea1032f9d4ab2f9c12334f1fe48fbd71b6b115f33f6909f154596a3eb69ac7c91455c8097f5ebc088f1f7970f61e62bd19f825e54547c9ffacb0be763f8d85e4aebcc057c4a21d87b24a93969dca10d8ef3d8cbe138dbc8142fe9b25d3e14889d9ebab76b1c578757992eae0242b4fc7085041472ceb93e91ada06a75f7fd0d65cf21535ea945be4c96e6861da836b0a6bc8d524fa0f5559e28de32f5683d83e8359bc1dc63c579612c0b8fc621a7574b360a825e5cc74f24e03f171ef6d1f46e9fa47e2b2b97e377356eb0221a29a0c807c43988ed87433747039fb3757bf45db3c8767136d495e1422ddb72773b6839fa9bd028d9be2ea8af7f2dcdef13fed5f0fd44cc07f6096b03d6d4e7649b2f408b77f77156b7a52170a778e595713055dbac83b783c18765bb7dd90a6de2ff459f71f8171b5e33342a3aefbd500c222bd1224f1a3c3cd659f982303eb76c1a85a54c14c076ec49ff14021d84b51409729358d658e94becc1e3eb1c11bbfe79ef4837e9f0ee82bce0141f6ff8fe89567014c5cb2f077ca957e5d0c8cc77f2c2991f9bd50bfa07de7f5257845b5155e64948f60082027fa48a4e573a5879442420d39868dff08fd4fd4be01f0f4029c1d248bb5f0460cf9ddfbf16ae8f0bf845e472afb0c116f442f65c08f5abc517d3f001c2f6ea767d0ed5392bbb6d0a5183fb9b49410c7cde2fcb06a388b1df37ee982a8a07f0855b19ea4c2debc518b22d2347a1861a253d71cb980da4d9db62a982bba68b5d7b67fcab2d59a12b4a07fa5d720737d3729ac05a017ea2a6a14b1e0d708879561559da4f96721043fb9e525f84a4d5b746eeeb29c786b7fb0067c313ec6c3e1b15babd04503a437fc65f09be43f52deb92afd83c409c3c844d69354c9bc1fa3e4b57b9590efe6c64f185975a82a50f4abfcac043b2fcfec6992c1b0584306d0f6cf87654afe94559a06ee672c0d8650ed629311c63305a9b58679276faa5370a2ec225b693527452edd3a654eae692178995f0020a8f98d0438dfee350430b8a32639adbed99dbd89a32e3a1aac453735fc706369e477c7c176d446dd2a75e39e116643e3ed043d8c1a653a5a6804f5cc5b2de7f0fea5a9dc5b1593bdb481f0de3e4ab6881c81b5785e56a4a4c4651571a063df331bb7171919017a9594334e9befbb31b696a43a50a5768cb523deefc30c681296ca22c6a7d29fe07cc3ceb8693721af0f3d157348b22a7f42fdcb480aee1a878e476add1575e6196ae974075919e7ce786b8ce2b9122d88888452bf8d7d152643dbd3a2ed09d82324f0bfb16322d4cfb5ccbb0ad9a5d6b00a023a2a0a131c8dd26bc8c6ed0af34522c49cb7c171458cbaabfc30d3663bcb5091cd82f5a9564d835cff8362dccd71ed1ce4ff4486faf9f7c1d4f7f4a97f7f6e39cccbdf894828c9ceb0480e1dd8803ae0105deada46ff07bfd10f78e40ac8f6c024df3730f9125895012ce82f4141c1d57d25709c43eda091d15c0516bb88570f85f83ffeb0bc566d4babc7cb000afb3acea4151fa6872bafb8f161959a48bf1350c2de505174ed12b1c8ff13cba9fa06208269efe0b7dfec049990482fbd5e0befc66e6cbfd4a51247777b186fc071d16b6a097a026629d9ac25a8b19c4d792fa83676aeb4095ad170b0444699656838438f44e99e9573843775a513ad2d410c1b75e8387b0f43c85a7a47de8b178c997df7caf16bd0447e58add034c4d80acfc35d028de6cc5bb629b1246ebb814e162580325ea90f11c45163cb54405910bbe326019db6e01a46584672c8d890e1012244c75adbf85427ea5f3ca3885d7fe1bedff5181c4710b5291e9d40762c4ecb01ec87f4c56ccfbce91c8cf5a30cb07971a987379a61884221d5863b8ac975db6cbdeaaa9843a0536db58d10dc69fbdd40d50a87330e69b2f37f68b56eaeef9c954e2ab82ec848c9836877c2626a1e827ffb3e9306b2f5177580fb08796a8c84f45eeb9ec0e39e71323dd29f2cc3efed0e3b45347ad0aafac1a55f27b85a097ff3d472e3433a713fdbb7ade4c5be07db18549d6a8b13e679e5afa6697b7dc09b173582cc2cbd6070947638e5a6ac3fc55395f1cd9d3e721cad91c561c2c6f1702576c164764e5681c2b3b743a69fcfd6f0f83e21b695eb602f0f1c93ee7df80b4bbc1bf9ae1429733a052a232c3e3783a59b8eed4fdd2f3901ed0e0d160075c08c687478ff1156d239e0c21113c9281854d9afef67e2cbb6e41159124d217c57ab53cf667822e7dd01ba93af3e5948541d2e837172ae1623a07ee6155dbde9d2a576df6186de1c2aec399d22682603e7909610e463cccbcdad8addde5a3b37b7ebdb7bc7c2852bc6603568edae193fa204bdb5ff53177d1498b4a6d8eb5ef0a40528fe207567e070f8315fd4a03dc968e3f74edc11a3d2373821d38b074793c2b4bd3a39005d36a787ea2ef9d355fdb535d118af4897c4428d5e9150378e464ecea9a43a791070b64a455729d02565c6ab91771a483375158f24a0780ac7b42226367cca45d1b605d7e60467b50ae7a70d87b3b5020fd4e191e651878b509f5b5fef74fc0cf137ad6d93208a6794f17241fb462833d223a3dff1f179c69d7afcb9d19d803d4c7933456beef432fce5d642f72fef9b0e40211a660eabc4df8354968394a59fab78c44e36e65357e6a5963d828a2e801db6b266daa51de44ba2ac6bfac4a6bd0ae41c8704e290d7515adb26867c4530564bfdc76d98d4250539dffb46fbeaf7efbce573e177378745732dd9325ac98a747abcff929413f73e27502c433b589f879078ea826823d4d418660ea49457b21eff272778b240ca64a56e2349476dbeabb27c57bd51af02cda5b310a0eea25d2910c75784be6910418ae30f36bac9e78f80ea3fb68c681f3556d3f59b9516ecf88b4c16fdc9c5a8b8cf14e496741413903ebd4500b6812e4c3d2f7718d4d0a2e39a316b90f546a5b9aec24606fff6559cdf9ab48797a60ebdd5229a62dc872ec0d36f9f2afdab779b913b5a2dcab68943bebd5ad57a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-98b2f93395be5e131e0c5fb8a0792062513dd8be0e820804d26f937064f5c0bb3525d053e16da6567186dda337dff3c6f30c8cf96891ddbe0e15b349c03c6d53ea00c6ad4f6bebecf17b32a6b57c9ec32ab4397ec8062d9e8cec7e747a8d9fac7fdb897c43003780ad783874c2fcfec8a0d86ec519c07531a8f0008fd88395e44adff523568e526d190c65ba17b2bd7a383bb3f5df73cc2b646b40c49d2b87486a368d43e6d616e45ed0d9b3e772c7261faa5e5e68ceff3b6abf9ab7677949facd2690d6c88f8ffa3e05544603fed81516a829bd3d9bc55e53f85f31e98b01086c31995834d4fa0eb82ed75d3d510e4210ea4dd3cb8f2a8b446ea8283fb5cae01f7e733d3c60356bfb1411f8be5a6d0b6c20558f77e7c101e99419f94711a98b121fb7f953e0c19f91b3897baa245a62c7f3336fddd02358fc3d2672e9147dd3c7ea8cc3b1813ef8045fa37786c83f387731bc9e3e706468fc99a88917499d8603589e5d8b6d028d2dc2ffa4f03d6359bff057763ba7c106b4ff4dda55d9f1b71ded84896d844e44c9f3b1d174f368f220d7fb6dbe0d844f5b10c29d26ec169dbe54967e00f70fef69096bc8354a8bef7fe0be76e5f95758580c93ac8d9a349ceb388df4cc173f4bc2d1fe054ee7c649d238a656194bf77d5afac4a6115ec54278d17e93f73f9a4658a8f9f9820a31222f327613a2b66ab471132565f9dfe0388e622f784c7e09c0218603a17f83f246fb36a40f3b1d4e2a1bd2a49f388d3c4a7a06de761825b8ba7c580ac8c5ec6f44d371b43af52a62c31968155140e3903d0cbbd19397f80192e356e94523f7d4ecd4b2c55f7b88892fe94c0589a01807eaa594ff962ebad271a1f1998c517dcc3b98c5fc4d73b6efe16c4c45fbfbd18f5eb489ed9e1212bd07bce3e486c1264a595496401be6a914b2238d5f39f5b17a60886228e5e9b2d841cba626b26640edc619a444cfd036c54dc610a2102de9dfee18e18cf32a74245501cca7e49d987ef34f7a9adcdd3567e357244c012a7170b0d375be8a445e5b8752301d7ea633485974c30232fce5e6e9ea1be14f466d3a8241943872a1a881cd4ef436f1ead2ad9227143be6792406bd7c07d925091b51e5395cfbd30b8208eb6103a45fea3dcdd7ec9f478d303132705f3126942d19626d5009ed347db6e75e6a5f4f5651f72265f14a01fd48dbce38b2ebf162d25c4c3b0665a5bb30da9321f2cf070e16fe7b12f7ad39ea6b92755c4ff0d988ac561d310f6e492694ddd4c35c48c13d62848205ff97a58a12602c5575a1f755eb14e50f409b90924030ee3b58964f58dd8c600fb999bbd5daee8addbc185c52d7151bad1aef8d83a3a6d80137cea0f9b731249fcfa996b421b046b7cdebccd240b871a8dbd5bc072e69968f482538fb67b40d13f8bbd2341428d5a5d6bf50c19f89d54d239a0adea5bd89c12e548b69a19ccf9f9402316363aa7959fe3ab63f350f3fca1350b892ca634bda0b6656a44ef5995acee1f355fae403b7e05900cc4d6688bce46227c941400870a3e13bdf468646c828a39a072cbdb495c773fecddde1f37b1643802f565ecacfa1ccccc2a2829a68d9594af2cd44503ddfe823c8117f0cfde7c77397d7da69b37bb765e2e7dba9ab70e3b802a009f511bf762820a8c491c6c19ec72965508a82d199b34f17867be0669b4c792434e6e4e4c1efa395f1c4bd83a1414a51d71688544d57c2d5167a1929856076f7310c768a1919392171a57821109ac3e9b1bf7cef03088d98bd2dad5b0290072d7e5db27ae08e4bffe11d359dd5b58468e8d86d787c9adc8717986408b2d67c9e0e53cfebae82cb27f0919c62e89a68ac8903e80a7a11b7bd56ae232081af3146927271d3c2f2f7247a3def6de720917b014d6f03eb6ef9dceb771cabbc645f2cac7acc3f8d6dd40f6fd2bbe69ffcc5a083eb3a10993bbf6edb5872e001ef31e2a0e86ad58f6829c0f1f560fa7ef734de2e84857e3ef86cbbd0c1ef2fbcf282116297b5de572d10968edffa402de0ef9c4273f793598d94aef6e294d4ace8cccf70acd9f86ae774d15e9a1714ac761af94b446e4f0cde48748cc5db05ab4fd3bac0a1c43bb8f73a7ef7285866ff80fb41dc837a0f9d3ecf93ed0b79bcf6e94177d34084c597abd2fc46fdb4acd11d543f8c0b512efbf63ada213b2d955569da12b88b2d6605fc99c76ebef188881c7dd195e6ba6d5e55f1ca19202ac94c360d76d0359c3cb1f801414d97535313ab2ced2db1ecbbc3cb68e81988bff134138cc393b8ace18e20ee4e0f04c2206df124e4cc496c2acc185489cca0aa1f9848382a55d991fe5b1228f913ff81b7c564bc779ab311e9dcae58e7009eaa806896b1f7cb6718cbc8f8b6c4a65738a87e2338c6ffee4cdcc5ac060e0021a5836c45732cd668d2760de9597f719d26bdfd2403f795b8e7d52e657ae968d027b0da9e5e76d2fba34f1de7425b780bfe96c05f817dd8f0cfe176870201da00deb460d12a84f8bbc43c713793530062dc78e92dbde7a9f53e08259333253a42f5f7b1a7f35fb89e69efb700f7c6c465e80cf47efb8b396ae3455af4fa48b45a1fa87a110975cce3e92bc2394a456eab040c2fd333f70d8165e2b6431677fa28edc67dcae5f0aac65f879ca9c690648689c94d6f657065aaeed5dfae5658f4922439437c65a2ae5bb0853478178b890561a69a24bd0419e2a089ceb0196b232c45c7373938c51591ba527df1f21490883e62e99b0c4b914bc5e7be903824fc12da0654bb03d3c15261691db25a6f6fd53e3d4e9d8ece3d331f42d2c99e9f1fd9af4d68a361922b897ea6ab23d8c896208bcfa6f2c3b06ce3c88fb86994befac763586c2f0c37f55edba60286a764e4cccc5ff915739c510a5d45ead80d14465af87377ea019da46245597bb6af0918654596365f20c63c074c8a896e5b6efa0d2ba7318fb5a42c6eb52806ab9c6dd8f3b160900cd4d71be8262217b9877739e8344ec1a90511a23f38c5b5c2f23552743b953168de2bbb3a993691d0d87aa20cc70eda60839a20eb3ddcbd6abad31d3ea359938e76191507f298dcd7110e0ce6216bf9ffe2f361c8246a9299a1fed48aff683ec8475fabf36126ab166601981dab806616f38bb1bb93c335fbfa3b250e31560bc8d0dc53957da03da2f80cdf04764f2e9fa8e7d2f7a89724c74471d2bf713d4a4adfcb4cb178a492e64c1711761f9eb9d0e65e04b64f9b94f918f4ba6835f68aa523d147414531b925d3d9e7d315e1fdc533ee0c498e9f66bf813a25ff95873de22448924b36e6172a87d7adfffb9abc2bf2272c270b83cddece1cf189ff52e209dfb78b8a952142cb72c969c4ad7cff67b1ee5e5bb40caf0dd45cd37673908c430d0d776dc2519dc4984170ee7ca6365936369df16c4a094b86c1b3ed3d3cce82b2e56a5681c204e0acdd4a712b5cff260f4c27ea6c32e23c227dd8e1f8e99a67df32e7a24e0aed3dc9630b4b3331cfd625072c0024e96e79c4cf2ee92ea18a5e9182028d39b937029a4700d93deacdd4933cc31e93cb234214d334e1dfb5c323c964d90387ea4bccccd0e4386e4d770ea889aa480f0c8f828cd2185c18a49ce112c70d140e18d9aa6ca9ca2bfdc12003a63f67eb31f0699586ea8fb50d44fe9da2d01f0be10d6da99783821c07e892aa6fc6b190d9639d9249492c154b12e45e2009adcfa97b86650649599a9ebe07bbf8dc8d452071bc4f0e8203f81671e3bbe599c76589764c0c1923b141df67e260f7ff14752d7a84154dedad28c0bef90c9aaebf5d2b248e2e20a4ae9373e692bbbbd20c408f0ce99cd7435a4610fc51f051b1d17509a34d4804529a877828c0c263b19f84cc0b8d24b9910f6ad8006bb84e1a4c8eeba6e165efd50e5a444bc342bb8ebfea30385fc0c69f53d04286ca24c0a0a402668503bc94237daa53d1b41242a13050232772ac1b2c6ce9f6bcbb53ef6b94ff5d0c8294bd5a4b077c5ad5144b44a63ec630d84fa559ea329d0dc27dc7b8ba68a96777250244066cf1b8971261826d29f18bb34fc37a6a39e4870878eac95503dc5799dc8923a15a7c063f2e4f362294c1bde18d3289e67cc883f56ae5f56fe9ccc1e5101d67a552be55e06d54df6e97b49b33ca50ff15dfa8b7436e5ea540aea188dff17c3c657544d600fa5a3e7b783adc2065f05ddd72e65a69c7619a0bdd93c731afa3336d3e408e9bf09650b66026a6d691447db90e08800d2aa08fe312b5ed3ca2dee411bd17d7239f143259d697216e2f74d7980dc8ba3ef2ca2c95af10f36d9b28b1bb464155ffb6807e15facbad8b3ab23403bb9ae6546b183fbab7d4fe2fc507931fcfabbf868c6e21d23b0e02952db97e610b8857d84c777863f820978e29efc1d9c5ced05bb8e75b1246aaf401ff1d0d777ca6eb8d74c25821fd9a5dde41eb13d766c30345965553af361395076029184d32187e82dd7aeb73cc648893801441476a6b7a2914ab77063878d53a539f7774abd4fc9d19d5af3b143dddad76ba439466d646752b7ddadc708ac9a0751d9eb72559ab30043f41bd91fee7947106bc185f0406a7adcc2327517988aed2eb5bdde90e2779b5e3f6042757749da9c811162a93999f000000000000000000000000000000000000000000040c0f151c22\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-ab36c995c472d4212dacc8ea95f1ee25ec693ed8457bc6a62ed291a979b6a6e1c416d7e12a3146ac339866453960f2cc24f111573619dda31c999b213756e600bcb5a9d8375e25785b3c7069a72665195ee513f97cc8e28caa640266d2608fe2ff226de704047cf464619bbd363a3feb73e2d47df01f349cd7625d0b18db432bbe4e4e886f61b24e817847be9d3ad4b033e1f03e2c698f42ffa611d25621991861248d97c61f318726b3eb116bd545400c2f5e1c08294e3bc8c4d4846c7fc5bf23759ba32c95bae32b756ab1ffdc337e7d23e26fe601589ac97b74ea1dab26669d7f5dbdfd017586ebfdc10dafa5c641ed6b8d4c4293d0f76fba4e19e83d843e00922c7b35d9cf4f657e832f2ea4878288288e479ea2988e62e27dbddf355d08f5298c763a23f65b0b9edf84eb7e2090056d1ec21a7f666fe933db5a8413748350bea0e5c49530b18529ae94663b12277cc2fbe2f6ef372a78abf5e3760f036e98562ca5c1ed862337cf8ff8e37c1178b4eba53e50f74650d084541357dba684ec0c63d8b7be0e38793ef4085d6e6a5167536cbf29d36429580c7e9b925de24d11a48cfd43b6b199fbaaea0846c890db3825cf8868f0ef75bed833494583113093347b2a3078686a39d0e0f27900771d252f4930f1d9b5a57cabb712f8c6342f01b61b8cdfcce1c61d02a64f70dd01fce50df23efa5145274ed73cb201247a99997bf7996ef04ac8063d1c9c68e714cfeafc8d0ef261bfea3f88f90c573a4ac7651d441f3ea832bb1b648b509e290a94b11a1341cf61d81bd94b3e2f6bdbc4c652b87d98ac250ba30c7e14850cc92b8d97c67d31fd6c6426c9b53f0de6cfc2d2ebada0d2b8524a1682b3ac360084f5e8ffbe980692d988e499aa3e2aa0a7ee16f7180c29994474a01406fdcc9551c3649854beba55ed18c1707e3ed886cf286abdd07462c25e6d54bb7a66a0d84181e93863fb96006c2900f6c88cd090fa606848da29dd5eb8b0becf44bf6f5e519ba99d68d68d3e158dbf604335d8328fc28a52b3a58f2d78432716f474cd7f6a1030db967e4752d55f8bac1280f7ca3aaea99fa77f8129a5dba6963cb419fcfad7b2f174a83210f86c24c824e7b3209e2d0f52ada2a7e4d5ea0a1b1ba9c7b177869f80ee8a279a3a6d76e7dee2e3550471db770fcad139f03db4b99336eff5c3fc01adea008b7c482b04fef014120ab90338ed94c5b333383c07f180d86114484d7e4616533cb4174aaf7b72ced331b8d57a500f5d73c2e32fef18ba2f0999b6a053878f50115dfdb51fd9c8ccb0aaa78542ade15909466212d6059da9e3105a81e351d44d2aa6a8dabdb7e00bcbd32cdb1fa6f362cac5ebafc3c672aec57a6bda2e1f316e83112271fa86a084942214d869e4dcec2b3f09eda04e488d388c9635cd2c780901eef2b9ddeec1a99d3270b37dee43e827ca0252abf972115637c8e6f67ee39736ec00f08c2709ba7d715a5f1fd5f29c470829a9587db239fe562a8210ef12bd2ef28f8d9385da3cfbb555a09d51113cc7d37d4ec2f73ba3d9c3a8ad9b3513839ccaf0be054574b9ba5e230d866ff5238e14bd43bfeed4d597b4e29ca9cdf3a93cba7c1657ffa5bdee1633bb24c81df0fac649ad231db891111762630df8a7b83545458ba0fe51003c17822d1811a033393db4bd4dcc8c34269a2098b144f3f1251fbde8bc12277817ac7e6dfcff9b1dd7350bf22f8b4f8a5e2f4c79095b9823c995a6a2aad82de004a0a0e5838d2e3361a1f69bc3bb6d425400d3470723d80eb9ad97f159499885cd93d0d317d8ae9c6e80781874ec8b023d9db11e1ade79e3e5f78d4ac2256820fa2fe82137d909800e43bf00a83ec73c050cb4fce1d3fc5a18f88f8611f9fe3de7b4ab1415bc18955c02e550b00dfc6c4b14177d7c9fdc5665154a2563450f892f131cb29de6fc755ffe71e7cbb90a199c46c01b5f20a9c0e177908d340433b0518442897a5f00bf6eb8dbc6d46aceda6fd94fd42f7736941f633f6406d4dab88f2eb276b332f3dd19b641a3abe3a2d095893114a1d1996052ac689b059476e19495df304535d4755f3c8b5367b9d9c6201d100622f4aa48c20722a2a1b48b2df2c7f34695264434755a9cf52326705a44e38fcf28bee00fe9a91c06dc6172926183ec2d6963cc8c330d0bbd74754c74db1d5df618858bcb2a6d31671aa72cd8534568eab19ea67edb2461866c12e409695f41314d6bb6609a77625c3799c1d708e38d387f69d738e88cebbda49cce3e76f9cbd727f65d847408ca65ecd8c2adcc349ab559969d82bc3276ab9ae90e827fccec87b549c677597a8e3bef7e9d93584c5295abd6c8b761a56123ec2c75c5d44d23c98bc0eca433e715e4f745cc8cb0acd056675365406aff32d637d04f3591858993ed26f72d5fd2f51ab35757a2b71491029f1e8d7516697902097b2e820a56b1f0d74bd59dba71927c3d05a741b9227a0dc0e80ab395e9d5dda03a4fa22fe8b9fa5222aa682fbd954def3245338f97f8afe2a02c4f049d7c0adbfb4a80a5bb45660757a41593aa1c70bf5c4d49bc70d0d00893da8cebeee56c83061f4ee4448d1e4d0469d397708898f8d435af0ff9b7aeeb81e42d82a21e1aa02de748715f30c5eeef03c95d758612daf29c5553ac143030e0c7c6d003cd7f83f582c34f28d9003611ce06dd96c4d0a29c6117b3d9269435888542adc989ac164868b2eaa7202ec17ed70d4d45f5d5f5582753b66ce243cc3f5039dcc5f309693d59520c2e02b6b0d67d11b3dedceeb13e6d901bc086372462c97d20aa7519f1c3ec1abf680d111ecb51a40302f5ff185226f4e46ce970d83c1271ef7d3b7ac7bdcf7474a169d76f02deca3d60d7a913e79c8c03c81c6050e974a6b2cec76e2d4673a83c606b69f17767b60da6a4a4d659dfc4e962b212cde0b7fe4f0505be5734da9095cfb6e9aaf0abcdb48bf7997f49fb38b5c9cc366f16eded384ccefc725c5cd36e0d4623500a5badddd0c31d9aff05a15ccaee106aa20b481d029f9e9d502094dae21e651740efe441890124dd9908dff0894ffbaa6dd8a56bf30cec6d0d433bb6540162f6f52b8c121294f7d662c3c36b6caa40970b09e1f06d7942c6872c92fe354704f3a38d5ec1036bbed80b11ca3558490c59858599c9a04c06a4cc0e943c12df6e673f5e704ebd4adfc7a2c2c7f3f63b79147edb224782e85d89b6c4bd119bfecc46ff40ddfa36afb45fb6681e1927938c20325ac0a6862d1ef291d63f7356d67c7bdcfd11629558f96d15dc8e65554bbee419a99f96b5dced87c43645caba673b2f66b37466841f64df734b4ff0d20110eedd3b6677757cbd020263ba85c4466a16bf299f263091598b2f3f6b9eb152c2b51e8adf36fc932d4804d3d4d1e398857d5a0b7e0acb7dcb6dfafe0041bd0a8552d649769bd6a3b0e3e6d4cb6afd0f7f2935e00fe09e518c19bfb5668d38417136f79a5665cdef97b109d1ea03df21cec5ee116cbd8b9d55c6962bb452f8f9fe618b267a8883776d237d1175b51140bff60e0eb1c0911250272612976661964e820312cf9d2304f97207ad71cc46bcf4cb4b396dbcc062eef8d891d88ba38984bfca2c6054ff31085f3525c16fb80dce23e4e13415225cde498f84884b5d768dc2cbc517c4a00139cae2ffb60a4906c3fd0a097816d5b9d84970669bb39762b\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5bd74b9ad4b08f18b54784c7c6952152a4f597cee14d967851ae2d781f249d926ebb4f4490487d1ab299a179928f69811f39a8a019bd808c500010aa684ac9954aaa005c9319d75d6049ecd99ad4a3dd535d881e8eaea118635cc5dea0ff3d4a7d8bd9d2bd00b78777f6528b94cf8de6ecba3829e8fdbaaafec7a16106457f0204192d88bcc76271fa31718e6ab4be525b04e547f9774fa47a8e4a88a4fd9b058412f92b27a2e191d32f015ee31cad4321c62ca55e572cbb7c2872615e5a2924d7945f1ef161e407f415b4f963d4cf6272d954923da0db3b04649906ef6e2da18592227b2b301a36298861e793b88e7fd1de2957d8a92c727b492cde702ef2b123e9968774604b71323cc4e7e58114c3ec7b59c94d9a17453795f426f706d98235c99ac4b4288d894e480efa3dfd19b14872fcfea1836ca639fc7242a55a0d01e1e21301f39dcc9aa94d2d83bfdefc26cad8614406c70bb96c149ea652f66f8d26ee0455c6cdc8e648fb20886334d512fd940fef6d0d52a14fd9c33e0be6077a10b4729a8f6200ff5a5669b3b533d366b81cb6fab41dbb9dde1581e4f3bddbbbd5f18cc00123c82e9f82412b5fc8970b69bf2e68fd5fdd17b7288949e1a7a6eab8986ba2e7e2f98b5bf2a561ddbd935802fb59a20262a77137c99274f4597d070c0c7ab5eb82aa445fcc882b1dd0a825a1f0a2c8181bb6c608a53704b9d587e555d756333bea70a5e73ccc5ec20260c8ba150a44232aba5ed55f49281b0e697527a59e4cb579d27183921dd55492cfc2abe640e1aff9147927ca2a1d1ac594c52502536d1942fea6b3e52793e2a410fd6ca7dbea45a5a696695100f53b9fe1f28bbc0014ea9fa3b134f2cf0c0a2b0a74525468bccc4677e3959d62f2cff8119e5895211316b448451fee29720a74d0e09bfec52913b0a26d1a60e404b2c2ccd036d73a2cd4dfef3d9a10549287d70bcb561a3d466c8933668f69d2e3f1a90951ae4def67d49fd09dc61342a15d1d576ab41b7f145d73a99faabd04b9afbf8491a28c5483674e9f95f3e4146ea0d9b1ca61359c604b0c821a9cce85e53b5e666cf1786100fa4c4f14dfc178b63581bf502b7909c68e4587892188934c0472412667e552bd32184a306148019d56236fe38b03799c2a8c748c0b969d9d6de27a0b842be7580ec8e186c76eadfdfe4222628448abca620a246214d2629b2be13cfa9e9fa3c26c24b03da758d5870c4f79f68c3be2bf16f97a7459795e1e30d0706f33c4f865348785abc4e6feaaeff79b1b45527357d31ccf575785390c35b2a4c87cca14fe7bbbe6ba82d96cb9bd6f47d9ad73ea3b061e030bc03a670bec41615f86360a01a37a3ccc307e31aa6c32fd558d362142fd5668e948441275f265697e4700d87853b4d1b8f50c1c9eb96d05b96992daf7e9d3dc5b78a62867ebd7b901fc37ff34b67af0ece5fe7050c94a43ca96af0463ddeaebee931bfa9e14226b2c7bd40cc99cb7b3791bd57fbab3d4961fbcfa4d9fac748d73b2de0c7eff554699cee1a72b197d6ad5343aa72d7d0bcfe6c3b458d24e7e75d00a90628100d635f032f24834a3dd0ca0f5fa0d040b98ac6e0ad4a3c09445d91d929ffcd5424800bbf06a747c7a05eb87cebe5d64a383cd77a7cf3dcc80300927443692c50c7aa0d12e1482f071ac1d9acd625f6e8c59068f1a08eb163a11685c7699493cb28b1fcef193aa1151ae7519474629485b7e6fadf01f369f05a1c37d157be7560b38a59643ac997b18a16dfd211e23c1c02f936c773b8b3440115beac0fee20269302ba0ca35d0838799ab67bfcb300e89909e2fa63d83b035d855bee14c47d847ec7f7ed15bf16130ab8fb33eff281407f376b3fa4f6894e1681e6eb025be02de783b22680e6ba9c4646b88d91e18a48f751fbe168096bbbd16a2f4b2a13085158d55c5283a069362f83c9247b0c65639aa21405f343a19dc877843bb72e39e6cda5b7ea3f198cf59c9607e1c5f09bf8962bba657f609f4e9d3ca99cc58f6283689c9ca4d0c4f659831abd54e1f154b26d4b7a103d9ca6b6112cf5bdf0e70103c8147fa7f5223665f75bd153d9e5aa982ac475413083d9baf3cc20584c792ace31ca3c3ce87cc16fde69df770f717bf9b0f10a097595ae2bbab69dce06d1973b01ff9922d8199735d6e16dbf4e7b94493b1106fc938ed093eca657e173b107cf995a251e5b6b7c97daf07bbc2ff89f5f52121522d175ae97cec1e98183f646defd2b15cfa13107cca9ddd0cd9912a23b139f84a2265e35b7053cfb7be23b79f28fddc9e3190b0355d0922543ebff420493a9ee7bc1c18d36e2e76437404301180bd3695d7d059601e204f46da1c5224966fe6c099f0ebf6a2f8c61ccfecf12f9dd4f1a197138e013654280a7c5bd26ab1743e40d8971c8b6e4908113b84537a410faa756251faff8fc8bf0fe8d325dbe0c1a6f7e099535e08bfe584b232a36401d9340ce323eae8e8eb4fb3fb57687037b7b98c6ac8fd7d919b71beb9273f4234028ac2f034685c81e630d57a83162aec955bff545d8d0a9c24d4a023988890301ffd37af5824f59384f596a4c242fa8378ba2b09908c74c8144ef1a6a4ef0b9a6738f8ec52e114b9aea248a8d2d3733f71649222c8737764fb440c9f2972390d3d4ad7467cf238f48a0a299c891210a60deeea020e4b8a56d2b5fa61aec1b341044fabd4abda13c6e85fd70170d18295538bc8da2908c103a799448441c50250455f5481f7a4f6eef5792f97cabeaa99936557b0ca845bea86234c1de788cf2abc1f32a80b13573dc2b21b110fdddefead44d94f01ec772078b1175b0297b0b6de6d6097e8aa3e5278944fc9e7a884d3267632917bf56bb53dc074ea14a8dd6e6c1a73d9959a5d2ae385f5dba4b8447eb451dc441832a69c1c0a3ed41b0997878c966510dd500d61666827435b7dd7ccbd125f157a419ac5b614ba6d65438b6c99e4d8e5e6776809edafe8fa6a76e11f5f400975df6e6769f2c2c1ffe3d40482be08581d5e79088fbff8da514abbbca7b3ccfdfaa1915c373361a971ab7f5c1c09e9499592dccd610f14ed84db0a2be1c94e5bcda339e14ffb27af1ba66c7130f45942c687ce96ed553ad7776dd532ccbb0faf1aa41b7765023d56c9068d56c3c405b8b2890c4fa6bd79466a4a146657d9248d8a348bdcf41e3388993e8ff2be2fc8b8dae8d15269fdcc040f7e72872539205992444a4d19552ddc5e51b778c5b5786f2d7b79036b73e738d7200aafe96850887c44c982b0347c7646dbcbeb4b6b55971004ade87ff20adef58d3aadb40d320d43585e7e55da08344dcd9fd8345a2c612f656ae178c914b5662d088c3437a6e5928d3410cf65dbe2ad31f1fc3781d6a5006ca8136233814be8d655b94152ac70df8cfc6f9e9101f5b53cd5fd37176341e1eaf25f2fb477d1d212333ea200a5e9da88b19db4163a44cd4c9d3ee1af413fc6ccde64a9cedf21c8b8f113d62a63df2233f9a195aa67803d632ca873fa11069b5998c1200dbbdb9647a98acfb4e3229185b8c220a6079c72bd4645b04f32ffc85214bffd8ef2cf27d8459eea21069c13bfe052ef92a070e63d05c9a9a82699676ea5cad84e508d7e811073e17bf943516fd4512d53c7b3fccedcab36921945a19d0ec3d9303bd479a446ea1a5d5e4adc5a97b92db843b54de9498592c4859011bd4df412a6151bcaaa703fcd97e702d96b0ab14d7fb0ee225f8097c174b517ea051f8f8b8af47a75a93fab99ebfa84f8ba8dcc9c9927e24f6c99b66f34f86c2fdc88755154f06d9b1ff731411f35377e14d2375480b688108212f75d74695008a61fcd452b6dd23c4d910c409d9edb69d294a5bb46fbda29d6b31b24613e751b3aa8605046cdb449ba86f27d226e91757a242ec2e9d241aedcabca88269dbda5fe8e5d8bf4a4cf1bb1585f1166d36a388a47241245d0001e35a790d6d201a92f34ea315933c67aa26b4b22ffa7d87482c7a63b7544ab511644b9e95152998af887bdbbdeb6f2218f8936d5fa50686216e30db9686ff1e924c850cfa31ac950bba1cc1124a892fa1c40f62a99eb452a344f65a1410f500ab650f9e91244ce5e962caa13832df55c4b41f53509d13d1765063380b942a5d4e718b9fbdfdf31259b879614b2bcd5c7a637c0868abec9be94a132be2c62111e5f22f420630ca64031ee7f43df2f8709e9b200f0f459d9f0b4bfc370f6faebb0345da46aa11c975670cd94ade1781d56a3ccf2c0729a8238e9cfdb1ee2e575c524661d089f894a1502bde21465f430561a72b835a39a70c60d64f371affb8ea30849956b767a5ad7648be643e0071cf9f08e880f6926ae2fe97b8fd9ba02dfc965b3ef7c102eb207555f6037c634496fe8de5cc8ae0184b6df1201e8ebbabfabc4dee1df3a15a46414e5627c7b99982acf3fcc7806d0e8b9e9356f21f15366d6327a3fe4d332eb8ebd410407b1b57220ed702dba8783c1d7088e66ff9bea1af5794c964cc95c415b26598d39f448a428c575de927e7eb129539a267c3e9d2c7b844e80b1c396810f8b703c2f6f141339bbbd34938cc12ed634425b7d80829a9cb7c8d1f3050f1351587a898c92bda2e1e366b5cbec034750b2b8c4dc00000000000000000000000000000000000000080c16191d24\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-48862a8bc5235f5337a82329e949240dade33fc7d17ace18be0227ec719ac4f772476711c39ed4d858cef667f47b1f58122e3439253b354ffd3d915c4bdd94e14e1437d30cb3ca8309258b6817c6ccbffab6c0a3ee80a7f9fff6ec3cb6ac304fee454d34bf07d0dc401088d8e24c52088a2ed7532b1d1132cc318417a77dc300aa552835b4adb640a708d6c7fdcf8276730c8d30cb56df2cdf1fcee402cbcac2db33776f7f917458b10a470c1857d61131fb46e412a18569d4b8bf289e72bdbaf3eebbdb5fa6586c2b06ee55c39b2bc31db5dcf959366eabe602be533c08ae39d64ce46396bb1e4a8be9ca49afeb48a69e0084b4aa124ed85548ec4e1a992126bad1b391b49b3c711623e17544ec5afa38009bc99696dc6c1a749754adce3573aefa80f8a8586274159a2ac3119b4a8ac94d3766fe22f6eae181c619ec2fd487fe71505e6abbd6424f760b085d44ba33ff9d1a4f4f3de4cc1aba85b44ba77bb5545e9d652e264899e52d91a6fd02fbea09f7eceaf4837d74c8048c18bcfe4e1e0b9800d5c9ae5bd36ecf89ce860fcfcb0ee2f53feb79b1befc511e08fef900088763b959c7f497356c89a23436a98f70404c2d8dbe04c6fe0f82f781fd2e86c20464720363d4b84ecb44c5c282f665f28e0255fe98f260f711619c4663978dd9aa860b768056951ba1187a2c89436b89a161f14d693a230a5b6a65e10d8976f08b30bba4c59969a571216a470a04ef29a19b28b346093349e9a1e1836e1a9c911db91e73636592af1def9a5d6ec2a1b92683eaec682a4746cbbf8c6d5f72d724c41787cb5fe344fa20bdae6c890df2427d52f7bf6bac0234a763053727d24f580c68e890fd0157cc671f686a3d119996b3d3dc93ae2174c4c0883d2fa3edfaaa510b649db5b7d4a927f71d577f45dceca495f031898eada50604d9e7858ef6ebabb6f6249ec499194b5943488b010bda13ae262cd13f587c8ec42eba297e0f76ebf1be24f727071ddae5e32234742343fe63dd4cf59ab948a32beafb14335cb6d0eb60618ba5dac68c83639200408d90f5238ed455ead4851b71f21b7b9eac2d2e63b54ffd813c7366656100e3ab0f7f2491e3abbcaf07fafcb145e5ec677608a3a3c02cbc5e33d9bfc833ddb53d4da04fc3bd9b518b9c604a93d87a7535473f44c050bc73ebc62ba042c47d9c384b3de5e043181246f9bf792c385201173a5c759d18f138e3535e42f540f50c42664992425f57212bfb294d102a1a4094feabc90b27bab69ebb26ce4f49999cc217b7bec571b8c8b4aed446ea4ea105a68e48b9b73e4213c9f7355424fb40f78ee68901947fabe7e8c8be7ac7cf15eb7f6c93d424f2695b272641f83f028c8e13e0f9f2708d319554491fde76759b444681a6bc006a5bbf1bf9f115a37fd99e7686cdfa1312f9f22e915fe65501ba51df73e403e12baa7093088c27adb9da489ae95aec3ecabe59da3fc9036a801fdebf5ed75ab072e6ce1c4ba60bce26a3a4bbb204a22e1114883fc02471931b9aa472ba85731d3218255569f3f3938cacc9a0a9c86130bfc6c50a8574aba9dbc0f1423ff1c195dae72fbc1d2b43eb8bf59033ca66ea7de3968e1e21c3f1e8123a8e9696b2512693e5a2a29346ebff481192f268497b5133854f906114abb48efef96fc4d3d085236dcf5182287aaca94dd75e8ca0d1cc27fd25f7f7c238e8ef0c76d9bce030369e03af39b667a87044493c28a5e66ce15df046e920763e2c892b92216a563e82aaa93410c69cf06b32d76ae9c5c8be300c02fec3c7f4c578a7d74861e4d088670d71de16e56b0e2fd10c6449e877902dd324754e831472ff2559653f1a4a3d00cbef4c3c9d78d93fb121a69f3e1a0d569ef3a339c9f22e2fc10db1fe26e009016a7af39600f4524fadc422689de41fecae27ba755f39974acf21532f94b47cdab45b42ae49e89e80be15287d8f63e8b5cf075055209743c7e848cd1cdc0c24b913768ee317704601a258f31c46a8b20c1740e4f3b2b672b4c5771ae8218c8ec253a1644d1f36549aececb79fb169b31aa0c941da99c26dc4b6e3310ab69fed8358576332c82f3276118b23b609437242ae6b4f0897f9007a661167662b7bc381df4bf1bbc0f2df58f854ffb42d9735003a4fe0380e479e3f9ac63be1daee8adc35326206dd158e8c574f3292207fe4ae5d0500b7ef5a8d15686d2111a040a010691a623e4734d3ea7c2f813a897e81d1d26bb40a4b19e896294bb47602cb0cf1acdb97892ef3aac21b35c5c7cc111a437783550388aa97537a44e700eecb4d5a090c929a785ab5c1318e731c93378ef929e153c6f5ab343da506188480e502bbd2dbe9053df466d011e7c8a29a19eeb71e947286ed418618a6fcdfe157b4dcf86e96c665dc7714f68f0c61c88715f9826b85cefa4788aedf6489dfe53e26db0dcc35521ec218940935e9d02214962ba9c826a136e8043c2e4287eafb348f427ff5fc56f3b0370e5e2d0384f195398e88cbd3817479750b1aba1bd61199623623392d19e21a2edd0887766183567e087889e546971429180f0564a91e4259306a73baa9f12e142c4107c167293ae7bdbc13dc82b698d729bc9816b266edc814cb4f7e844b30e4fb6f5424202977a7220f11e8065c872e63a2545bb12d109f162c8dbb4ab9963fcced90b1735a4e2de740968a6f9b2ef93f9166a94809e9abd21d79437821766afa021909d075741f76c6412a7af8f05d03bb28a30064eb6935838bfc848046b214f43f17bcca2290a8e769f51979bb7c2c9ec7d5fd960a0222194e147164ba3e0552c4c225d31aa053b3c5d3927910769d40c26c300c8ae8b133266d2d9a4ff8a2141fc77863e3130e755c156a1c672475f4b091f956307525357a7f894950c8deb0fdb5c6700c2c6558ae00d29aaf17daee47be70be6a2206d39b04d49fd2b27e9e3b95ea995a2c721ea172d3ebf3ddde306942a030a5acb5b25b4ecf0f9f42d172a7863a12df9ab3015b5a7bd4b370662285a55690f05fdf3d66f7f924df032cbec839c0142917b4321cc8546a6ca0f32e983a102968c2fd2bfc150d1e7a2a61b8f6584beee3617e2a287f26293687596ca6378d7cbc19b45855eb8cdf16985c0eea06acf12a3080918748659fdee069f88310275f606f5232b5b41471aaa6e59cb2e534ddc4839cae92291dedc946a16ed408ab5cb607264b8e789d7e0cc8b693a148e0fd3c22811d8474247bb90c6f70f706cc58213d5d56b875903f7ad767ee3d0193421e69d88b6be7da34736fb36fd53b9566ebe0394b458a1780d1f20b0c155de48e58afa27fc211526d2f4ecf4f1f0165488cc3ecdf15c102c9eb7a22cdcf062c41664302deae6a3c48a6e1a1faa659dfabf0539c47c9245fcc4f8f356d325a36aaaa401486ee1a375725064423a5d9114c35b5e753cb8f6162bcf3fd071f26cef612017f5648fa0764faa4b805724e798b3285a6a93d8226de734cdc63602089f84fbf2f09bd8fc3c23d1e57573b0da75fcfbfd0101a7921d6d6eea998c6659444c0c5ad15460906b653adf7ee831206375dfa8611c4ea5a0c429253bc6cee49f69ceeb4ee700fad3e43cfe04177a4838ff2e4ffed9484a4c949a85268645f2494c01ce621e39c3ee9d168d76e3dc596fabe4a4067494b9ef6308b74cd7c578da7bae4bf8ccf566c2997b583a1266d8ca9\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-1fb3b6053f9518cc51b4a20cb33d02a7abcf1cad4ae7806efe9fbf8652e3755275a641f27879f163a1b265e886a1b21b129d48807bc4933df0cfee53f26305170c547145f3ff67fc6f317c5ffcd94f96fcc4453ac3fce38cbe41b6dc01c2146ea3d1e7a0bf001be3136362d75aa2785efafce667640dafb1b39d555a106b8cea129c5432867e0eaa493c43d21ab388aff1b6037621c1f134adab6093ee7e5760e9f33a0d8e8c63cd70c86438d3f94461a2d4bc9f41243e362bdfb4c809fb28157a6e5ab2f5c6e16a7336cdc4183ac4272920485fe34fe03057ae7b1440aaf99f28ba89ef1b0021cd863ba36e8deea60aa14cc7f2dab46dc401f12f5b61fb82a195781e337c195160fc474e52aecf4c6ff277908c481d51adac39219b29fa7ac703027354491b869e3ec404b4c35b214196822828079ec85ed0edefa0ed2a426ab9bf4c3784238390e8eec61cf7fa1c4a1ea1308e0815202f1109250fdcf69309ef634c4f0b134ad6d33ccb4a5e30c0472bd292c42de895de1c5989922bba6004283fd1376a0a263ebf74e414da5c058ed9788a862408de4de14b54d2adc7fb5e36f827f53b779e549698c8ae7fe4eccbca4b41b81e7239114720147851f0a72cd3183e33c6e82c557a5eecd4d07a824c6ea653168bdaac37a444fb63b29cbc35bdba265c5718421dc104206d224ef985992786180627df4b2f3ec5e6c200c2e0cbb6fad82db3f54d67f5fa7a9d1396c3b8376b3d83af731fbe8eed49bcd99e4fb693c87e259f20f61a6d67c8d87c967d65d03fe81e5d5f14021f8deb4d1a5d25902065e4ef707205a8159f02b4469be4c2094aa73580572a3568481f63e470bc86cfdf7b809c17801918f2a6f742892aaf696e2cbd2bc617f92efc482dc6bf8640a91582e988112cdb6161a41ab879e8c3c15e48bc2a7dd6b4fd25b5e7efd7388e6f3959bbafe518db3b73df504a6f6cbc6086ff160b3e7391845c9797a494000a23a9488008a595334b7b92db4b2f9a267869ee63b8d3b83bce7d57b9018bbc858943f0c7e8fe0c94cd0718672e4473692a2809423b2df248b2e61dea545b2f1db86b7246a345ec591083f4662b64664bc9200c3ae8ce7006cd795cc146aac8315129d62eb20e940aac6430165476742a19c17d906c3fd94a543b453a2f5d3c880ae6a1f64125efef20d7a0091e4bd66801fab9f7a396c84c4ed28526fc1b0042d4245d3f57731d56165e26e1ee72976cdc40b3574801255709cadd4361e7984527e6b9168a8f1b507b1a3f94d20b76bd4a0fd5ec81274207df86ef1b18c09e4f77d0670534a6ac9eaf076052d6d037ec469ab453404749c3c15cceef412a87301cd438c1e5c8d016a2c125a296c4deb4a12b4bf04d9593bd9d66814dff60549ec0a91acc5bb00a2f445c7989af4d3ba9d35868f7fd8a3687495f2580780f8a4c3e9f012f0cd07cfdd7e513c9a84bbf7dffdbe2934480ad3cb241a155248e9c30ba5f5d1574d73488beb96ae47913ef87530dbc9c941bcadc6a69b9acb06be7ceffd8cc7745a4fcf978c1fa126a22864e912e9c14fa73914ab1b9ff31988e6c859bf069bd1f912766680111d9996ce8565704046ceb64610f0c6162f74de87be26889ba868eaa8e3fd8c1c4eac20deba9467f4fe5427c06192a5ef0e84d2a063532131a366ba13b48a3735b7ac98d5d800f6ec7cb5b8bd604f7d3c72dc56e126ae14cb101afc3f5832fed4e94e5e7614e1232e970597997cfb3b9e6c5bba771552c38c9d6729ba0ffc2bd146754a3605c64718e9744e4f7c1ea184c477de17208f7baa9ba1913598889ac44b1d30f5b81aaa06a42c8f31c889737a8d15e6d473e0eb16fcb57a56f2fa9169a56a4d5b687b50e77bff964522f14530608fcb7f405cb5faf36ff235869b99b08765fbc6e21c91833a5c5e6e85aaac997fee4e800dab3c8fd5b35e1cd639931690f656f05b325ed80bccff2013c683b0419b5f43c3c14c245e40f537b55d20165a92e7b6bf8af9c81cb4b205f327b946c39a0ff087915b015c77930f221bb6c2c8d6500a521ea549f2d7fdb4108aed7a5aa6217450e238f1727535b3635f7e1b15b583743ffc9a2436e99c8f6e2a46bce90434f345090a76c422d778ebd3d9f4364af2c89d1353d64ec72d691d414f56c7a1747c7ea3ee8b284d3aa6612fcd30a08eb7eafc3dd42f221200fd0b394c99235ecebac79fe467c747b3ed5c09ebbbee5dc240287cceefe186f0a5b5f4fbddb0675f0159c750d715d0b01978cdd4e85ba77cae57024c6e6348155071016a96575e5f9b227c87e82db0a8470124b6572da0cbf2cab372d85708adadb04165b6cbe6950253e2c1034537ade941ab6633c1ee634371764ded5c131cd57eb9d3a794a2d26750d01498214ec9b78ba4c9400cbf7b910643a6ee5fb12fe1f2cb348d566e63dba6c1fddca6a0a6644eb7187a53d0b5d8bee99d31b92981fd81cad326a8c107abafb623a0d11e861177a58f1e3307fde29d63a3924bbeb0e946bf7f667599b92d98ab6af9d896e2ede95ca65cdc98b07456bdd037aafdc4c91bd387204ba7ea14dfe387430d290ada9a8296198e89b746f0264ef95c45ef3748bb9806f24a61565624fa84326594a572c701602c7317fdfa1990426ef70a5d3434e7b1ffd779e13b23bea25d63dbd7d9fcb713bca6c203d1b2f337a6e768ff8d5a1b1fed4d69f973f0e0a59f3c3527c30a1942054d3cfd04443d4611259b63c14f8eff56d17465e29a824afe408168acb215b5bb0252bb7c705280cc003311303373f30074bfa769676ec7a48df2d9f68fdb043b035fc1807fe7457e01e794a5130a857c56e92a8dc234f03c5c7fddf0f385f63b4ee438a2ed5a027af36eadab17dbd7eb9eb541e6ed5af00e1415622b083855f23d1c4639dc7c5b95c71673a2580e88092e446c29236900f685219aabdd06720f0e50dfca6bdf53c09ab3477833bb835304ffc65f1d6513acee999682bb70665806deb596566ac785afebd6ae7227ea882941257ebb10809923ae562cb34be2acde2b8b0de3f2a8b81c53d47a80a3b1d360c9cce2b484cc5dc62b948a6f990aec5d9c34b745943ba361e14de27232dadf5c72ad2f47e24d0872b2517843f3c43d1f348fdcb5fb589c4b304ddacd5451771ab0c53c03a33dcfd13e2720ddbca5fcd3f112eb81ad6bc1aa059e2261d7cfeab30fccb952a0254d92ab6c884ebe18c878adeee97721267393bfc85a5a4ebb7327c6f69a71a864e8fed0665b0ef302f16ca3d6ae033bbdb9443bc40c78eb7b3c5af66ba91ecd852e4682ae25575cd7d09adb3b74798d14bffca4f5bd837e80afbd77510ee78c32ee219f4156076dc6bc9ce87971e232aa4d034366a3e079e21cd17ce42c3f60f47225ec2407147bfe01eace5552956e6697a0a64eaa3b02ced7a39d1a1c2eefee96c2f8bd2c122ddb0960929e57247fa3a85fca43f63de635ad5d4fad02565aeb7f00db0c55c5552fcbbe5889b6495c59541a77a8dd20503cdf916b3bfc8f5e87b217134f2fc7a6cd13a736059348b3106bc431d929c09d4d6c0e39a93759953ed35f1df0ee90366e73cf0ddaa03bd39293e95929cefe9cfd06079b592b42c6e9f47ad6c4263233123092155047ee7c48e3e4e62f531d3810011a76f477a8650bbd7be790606775e1f932dba57e5d4bb2b2401a01a20b83b69ed97bf1ad8c765c93d8d4e1bdce3a524eebd6e54734d568711804d4da19fc69997129876d235fe53c78408e78081da0edb8d9c085c863c6603c06b8eec7733dd5713d79830b8debcf6d3e9183852502fc9bce62e85c20cc098cfce099d0a810df722d67932c2e3fbaef6efabbb67a83afd4cf9514598f316b72551abff34d1d13c93dc679bb58868148fbd33628d8279fee785dcc605073a000473e8ea9dd6646242ca2dc3c4863de1d0f8ad955682a9ba9fe52317c2e5d130892d5b6dbc41bd0ff3148308393d717ac0e96fc1f45e0539bb55eb50549e508da7db93d68f1711342a9d6ab64e178f55cd6eed8e8c28a497336fdee128df52ec475e46cefe3651ab9935ade5adf0b29ba5358d35d3b6516c8d3996aff1e2cd06363de48eab1bd00120a0d407b092870c2e76b276c70d4d7ac85366f60f2343241200253f92de66b037fae4fdeb1db275b7ae6ec196902ac69e9783fa6684584dc9067c7cd4a68405e0aeb2a4eddca1959cf788c0a516eb94f0824120ea24b9fa2354028afedbafff79917820d4d15b12def7f9efe49899c715c7b500f70980a8c799b93db838ca2859a06cdbdd5f84ced9987e1dbbf74ecf24d5f2484950dcd57347da8b8aece55d4afc7adcb0b232082157b0bbd455ca7ebcd0ebf257b184b3eb0d1ef736dc7d02681624622947c4f31f0dec5b430616a19b1300427495088898be15f27cbc4688ad4a93fa208ea20bed26e94984525db33a34b7631018e55d1b8ec54dc75c85e0c9a95c4f212092801e1578ea2e1a8a7850952a1bbd2642d7328a558c0fba8c167eb38d105d31be1cc497460fdc3973b7f004f1aa58fab493d29501e09568b3fdd7b1c8447cf154bf57356fca7c412c79417dc20e2d34485e6c757aacb1d7ec1c6d7bd97374b2c2d0132f6e749fa2b7eaf3ff2b385c6df71c232458babc000000000000000000000000000c10151f242a\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-4253129ba04cd46ebdd117f477bae35bdc6eede60df6a94a580b28abcf8bca383dcd4aca34a318f090c2e236534f4553838b273b1e19dae5a0a6e70df38f33620e3f56d4771ab8edd27ecbee13b41307dea5ffc221ced73da8412ebf90f75e2aa93345937b9904a2ed07488ba7ed7e4a81090fe062407bee215ebbcee51da2ee70bdfdc8bad9d0d859850ac3d18cbb32b70bcba14d4e918230a54a8132484ece197ae8a2a6311d0966f800594271dfd7859fe7b49e9a8a0afaf0ea5a4196428683334fbed3b2925023da8c6db5f6dcffe45d237072acd40f8c75f205628f6be070a24cbe2f41d1d4c08d2fdf9576e08845c31fdb9041f70dc18add5a64d548cd0706d8180687d15b98bc2973944f951ce63765f9a8ba439732a76554223408b658118fb347942439a2a1a38f9074b64b9df696f245b83029e59b352f5811a11ca86a46bb6a84c6eee2baa3672bed15876f1ac1c7c90d3aec56ed2907bb991843b6c2421b4ca6e503bea965671f85dc5afdfa79fb5e512496ee8b096e12cee410c973aec9673ad11fc802972195af9395042c71ad560ee16476b56c12c94786985928874633aa61c5396f819588d8d8d59b0b7b507c371060a974fa1afc142116a1fd7cd6923a7234050edec5c3096d11c9ff9c73c374d7a8e2415be0f277716ca566ac3760c87a98b2b7ce7b2f4932d8f8f2ee9a20a17532934642f39712948c8db39c9a8d1de46a4bfd6db147546db864f9bb95bae22845079577b771f7bae4ea6df336ae203185f9b08803f2fd4c2f0c56b3924b9f3328ce242ecfa31c5841125d5c16f975087d98dbc3f8141b1e4be6c9ab3f3cdff90a6104d2ccb6bb6e4ae7db2519432b728ad46308ac1f81e96568f60dbf4d36e45c663a29c4963a0c51350cddb77d8112ccafd4ce2ba45eef4cdabe7a83c53d5d4c98ed9999666e71d2cff7b07a9a65e35670f23e7eceaa04eec4ad1db0998ee5cd9e03496af5c174810266f7fbb2abeaf568944c7dc3f801941304d72f3644dcd8e2bbc034374750d328ef5e8a52d13936d7147af311cbf9b43c36e32df55be0f19cca9356ff9217bbe7ba2ac63af7d33c43702edd8aab86cb24fd6debe0678dd230dbde3fdbdc2d0d8ad74229c377201b794cfe1fd38bf0ac11f59c765aa3ba2eec27f3bdd2f6440b3a93392030e7338ac012622e4cbcc854d52fa39314ab36269d0848b8cb7b84e491de5bc55f42f147588847b48d62d72b448d112d4f7efa2279bd970bbf428a1ab9b21558e1234638237607adb6c74a01c4337cacf5ce2148c8b8fa9406c57e2c817cd810e552ce2f22d7833d1baa56c791f20421ab96f4b1786edd225b1d1b86a1c71d069c56d67da303aeb30aa7ed170370b04da8a325860eba8d88636861afe173b48deba835f04bce8c723da490d5c01ce033d6f360c3f13c07f77b8841362a69ac1884cad08871cb6b5b6d44b3aa8a6379d52c3d313a38f55408e6373d67d90ce7aee2da39a5f4baef11cb029f6185c4095b9ebfa0c21e3868b048a09cef166ea4998baa869e7bfcb38c4f21a355f268ed4ac94622654992d81f067556f20062186b7371aee40c2e2039d328f4055fcb89ff3ca2a386854c33187d924b5b2759c115c5c2db629ce439b336d84d24e3757c29c2cd942443b2d25d82ac88593da79a9e94b8f2cd730a9b11b3a3b4c95ee312ecd6252f3cb75642e74047f0b9091704d62d79478b199346dd49f3ede0264942d9c407b0e1d7f6351ef62ee2c4a88e0a33ee3292667711cff0f8fdfe8ebb97e06d2cca8a2b1539922f076e21656be5313c37da55a032b9c63b39076b365369a6774e2c3912573f6074a9d53202540465622f98efb447c57dee9d3d9be834824f9a01272293b5623bf062eac9be3a36e94a30df6631e5192194cfa4598699be808ab90935625dbb76e49e868328c19aaf6f6e0627e52b2ce30dde55da986579772370d3a17d2fb7e996595d8c2f8c8c66e97a51dba18174f4bc91ba39de6027318dfec5b083e2e931c420fe04b33e590c2010751013aadd0088fbd832f4318026362963e9e74e1eab1b7634f427040ffbeb2be690f0f36b55ce72be3465f7bab45f0b0861871430f0f063e7b3c3ed1fdf5f2eb2ebaea3763d60cbf578899a76dec331bddb4bb8730597c2fd13c97192b03d2d9199e3589c90e48042481f5169129c52f12469d8d20cecb8cebd5539dcfbba31bf02af7aa6656335530c51c2f9685aa9a658da2cdf3db47d841dc3eacf9ed9374cf07a02adf76cba9ad3102116cba090969a4cb3e2fe0ecbf73c7742645e718dc141d613947744970fdfcc3104c99e742e1a2e54c7bcc5e4530eaf55bf64c4b8d5639026dcc181f68ea40c5ceb84af301e9552474fea73695376d6c2e48104e61f8a9e0c5dce582c50433c583cddfe4ca40fa5b3de2a49b18680f0b07d1f1b563517af97ddacb984ab391a1d1c6848594b68d13389fc110a04551bfbb6d937e300d4b2d73013e052b215189ba0c11523f9c1f80482fccbcf438dba0a68e9fa6ff9b08b966ce916bf46951dd2e03e9eebb47adf1db15abdef480ac1b5d4adacf0142d3d8c33c0c959157bbed6c7240b48cef19112f2bb1cd98e84a23ba46c494a802b194da40aa5df2401c1423ec0a14cfab7728805c407413031a6d6b1998e7c6624343acdd90ac56a3f158883babade104802037b531d8b763050816caea682b0484ff0ab5be3692b1b59e78648087abefccd2314ead501a9f5928d42b64ef5fce259c69d2208143384b7740ee96a4aa1407cbbc4a6f191637168f0ccd8e7e2c21ce2aae1b363d7ee66e44cb53ffd1ec9093650b1f436e311eb16605b22fb1b3bf2e44e165f1b16c526ff0121af634d36a3fb594046f4ce5c9e4f3282a3cba9dd859fb957f20195d591996db6c55308978c03b7e241f7f0ea8026f5d324b859e5a4f0312c7d15c694be788b89d1bb2bda8dc12cc8591a1f32ed662fd3abf7c46be3ba804df0d3e17693fe1702ed8f360f1f92294e73d4ab2e4fa003a8104db60fc88252165272a1e9d1fed431727b06907605e3cf92bb60631ff5b94675883e37951323623b49b77ba5d477908d943f3cfb6c82c1e32a17b0dbdd3ce0647cb47a483e2f036ddef6c8361f15acf6fed93b751e6bfaa7b7a06493aeded3d1659945fea951918c0f2162a0f56934dda177f745d5734b4ba3503914ed460e56cf844bc82abb4be5ad413c0b4891ea5eb16e4bb8ea9984b20721231a7d2d3242b9941bda7df08bfff643bf9683f50b130a194d53808cbbaebd350532e07f2ac5857464240b066655717af04e3e9e5ec9d39351c8a5164055b28b411f4baa88540f8fbb0184eb8994181691e20cb4c79ff2a470262da05269f08a8e6c48fb2071f8c38eae0debf788b6dcf2fc6ff15f6a6be15450652089486d9e4fd0742c83ad6f7898baaa5d7197268c1498e0a426dbd32d2afc73cb44f7917391cb5ef2888cb46516d7269d098d5d63e3e59485337ed26fa18b9a54712e555af1bda8c1391c131f9d0113d058aed3c20cbf0348c65f110766b1a24bc9049ca9fc8b780b964b941065c66d4216d3c78462e6999c360f50709fe1de08ef86d42e1a9957990ed615d197fb77aa1f30b8ec6cfec3de1e3580acd7b57006140e680f3a3b9cc22db2d7d15e9f52db332df876e3d9f6b4340f6e1d84130db69e2a31cb8fb33\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5870BB288AA6130708F7BBAD9FBDD6D41E249D620495ACFE90C61737B57DBA890213D4741718545CCD8B3FFFC2DB33C39AD631D5B5CC902DE4D340DF03E09248F67E89D28071AA50FA532E94C391D2D1A61B1847C6B1088BE555E5C2694EB0FC1F029095ACD9DEB21EF886BE577682CA96AA2EB3DCB24B871336AC5F23C8488011860B455B687BD4CEF5FA11381BC292B4098BB2CFC1822B48ECFD28AEADA71809BFDA190836D3215CFE755FDD9374115E5A0CCAE15240EBA0147C2F89D8D24454D7A5AC2D20ECC0D46C040FAD233FC51C870080F1FCEFAE6C073AF5F7A78D610E23831D5990985FDBFDC6D101ACF3DB0A74D71739E0\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-4211c0fbcd62764b125a8c5263404d7848a1812dad1056f3368817cab3cdc97f852487ff9d2bf404029ae58f9ddba2fcf1cf5006568c2f424aa647b4024ef30a1ac57d831cb0eeb85414d3b9069918d92e0fd933b640f0a6a777637245081aa0d27b2fbca9deb27ca1d1338189124269a14120101f0fc279ecedaab6b5006ca4c7c0baee72c5d44f4c330c56bb4a822ffd3e9c3f2602ada56da71ff40a712f115cbb4bcfc484b9e778bde49ed7df2d9f233ce065d1a9b3eca2c494fb8b7ff6b35d64ce62ca335c27a3c157c801ee1988dd9c7d0cb0b6d9c2295b17f88ca760496dbdc9f68910fa07e48986bab423f9059ed8d4ce90b8d1943d1231c8442dff36a63d28e667bfd075a66a7d729a2d852e89d8f580ae18d6652d8c06e02bcdd48970a658ff1293b6eef87108f9192e65001a21bb2e5dbe932a524cd0a44155e52ed18e1f09b9c5d46483774b49a6559fa78377442c9652b879597b0569cb791731007d556a6a26efcb57910692925f041d4d55a71c7a221f52cc578df50d0b5176a262250f55bfa3abefafef82d31d1af2facb5b6d46c554f67d27a143fe7ad83d4529183a02594b584baf860c1141d50ec50db36ab24adf208289635a7106c3b0bfcf48c6ab881b75f379779fed7f1dac26a4698d1ab9334f88ffcbf9a96eff8e85b34a6ae4d2228b7ba474bb2bf32706ae6d35409477269baf4a8effd70f98fe8aa791bc49b7fda540d80d31d699508d3f9a502f90ced18fd6512aa02a22d941acd43e3ff4fc802f05da84ce5c367f9497e165ed4c5de86fd284e0c181a2cbd1f16b66bd3221fd07e368b1e00193020162ab47e61d05f54be7354b497cf7b6e8d77b932eb0f8161cd015c089ae62d604b647193819b21171c1f493bf0fc7f67407045f56e022ed791c17606633967986c9d93219b7db49f3ba21ccfd1bedaf84315a770d978ab657ec5d4e3e39d8de6a163ed199b5d713d206c9eaaaca1ec4415b015aed58797e4e116b366081825dfa54c25759212f4485eec2cef8f455109e893b4732b437c301db78978831edc4154a1be9972d4facf9137e59e2b04b89fce1b6cecbbdba092518d1d78d7086e55125e22edbdf53dbc67f38eabbe9e76c69554fab97dbb290192f1a5c66384a062c974df996b618fa8478fbdd0e30f11549040643d583ad80480c1fd0106c1f2367cf2ab8eeb641917381815b064905ed6e900b7be712d3ccdb0b1004ad33bb6e8a34b94c228940afa09623c85e490c32023e157b451f02aa6017c1656ae1dbb4e795aba6198e6b6abf66874acd91ea4028e3a9e1b68321fb6e707a72443a0a4749ca460cfc0422c7c6b2d322ace8b51270514d0fbe36d6dee137a89d32e2d55610a60dec2266fd7218ca4d925f15a7c84edeaefe84cfe9a1d672b551f5f2e32308d0a456d59c26b7a1689ffb0a3e4817c5e385a0f4658868814272451015ace5bce4150306621cf53e232cedd3dae72eb1a240e625de8556f5cbee438cbd913b3cd744146228535ea23f310379ab18c24ceebb685d0f61e5c81a2c3c9b4f4a7a533a49c8ef32ad14f2e77e210eaf1eed44cd6c845aeb78c63d7c12c6e5f91b59489fdcf68c4c0948a858933604033209a9d5a2bfb68b101f604f6f10bd9703fb9768c2aebca6ed5b00e4974bb348da101f7f2653d55decfd624a7d79c13c05a7da0ea3211f7bdcf7bf1df8d21ab5f4130f67d5576a4c8a927b7c7890fcf42e1a431c0befa7b86a5c56b283ec96a2f27309ed629b8bbacd4eeef278d7775d1c5ec5bd331cf622298a343cd473b905abd0904803d72bd2463d9a88cc11d62068f0d7fba61781fbbdea6842bcc58385c4f3493ceaf5d105a2ec7764030961546d89a8aa5252c117611c8313ee2d7c96cfa76b1f3daa4e9c885b2d271781c654b52ae904f5ddb3d58335dd81e2e6202925268eff4a6676b80f9042c1e1971fe8a9d6b7c8d88ea282e1696c70619a1baa29584c0acd26967b4dd0252fdc8dfb645a255d32b6065951e7c3da633b92017bf381f1788cdc24b205dd6a7db1335440d62d81ae8afbf2640162cb92095270a8ccd65ddf5fb667fe2b5d33fb1bc5014a6af35cc4e4232fe052014cf4bf2ad9b46684704532f33a0f165473ed2850293f6bad8fa8cac3d74a995b02980fe5275aefa92374719e218185a5d62a6347f64f9e64ee8d06cd9d509294f18542d432ee24177a0af0d2374b5e29735abec655bc4aa1eccb6b8c6cd5d0602b8de15ecf20dfb64f5b0b57cd4bf2e88495da925e98f46799d344c070d95e7527ee7d2bc1e5da7e7e857b2c3c91489d188b4b43477082773c95479290b13779c25682dea8fbe6c8d7cab9b07342894eea86e708d1e1e7f3ed998df17cd752e947e5d2cf4b4c3fb9adc9049bdbed6badc20124a694dcff1deab7a33fc3f7c8a9c7fda5ef59ba4ed3f3ee925aab58cc74b789103500aface7eb0311a90c13b1740a54541e95ed0982c9409800f89c9519ebe0f1f8017d639ea1f9cf33a70633ebe2abcaad745ef5edbbd50442265b477a2eb61e89054d50c8956e6e2743c23a387d316cc5d0b02182989c1f01580b597e0a9f578d3a3aa6d5f0ac1534497c5e8312055e434c7719567be933cf6d213be58ac37527999a9260e7a0850cab48097fd68175d24c6f1b1ad8e104b3578e4fe746621a50bbac09fcc3a0951cc968d708bbeea3e7437bc269416d826e8ffa279b755abff5bfca14e90d791ae0357d45a301d166c19dee82f2c2e6035895b294f0ef30d003c60422f78178c5305996363dc281f8627ac75bcbd28c2a7e1ca918d438c88cfaa57766a372513615592861b9872ad6fc4639e885bf03e32820a49687e0df3598b45a2f81e33fed4e91b9bb458fb55ca35d99351b20dbde76038188f01935c261f07b4287aef1158a5e2db5fb136446cf1ac6bc8265f84a1314f41cf40e283ec5da03269307a31cbc5a3a80b723b63c0366febd211a0a448604bd7e56d4d5d9a7e6d8a1247f098f01bab54f27e598fbe6483744e3bee936adbe1fa4869ed81931cd1d7b4f9ee02ede169104f910cb6dc75e10358e1ddb3f2a661595eb44cb851c53c3f2835f5434ed0945a354483203564d3377e78e3959b93244e836ed4475f82fc829946037bfe7300742203d35d55cbb5c18eff04f30bb9ff99ff1b45858d5a46774088bf295ccb5e03792779dea64d4318f800e10029995e3bd7cae442a8d9ab8cde1a26c1de7aea6a9a70bc16597e54e93729fe27d938b205a0edae98eb80c95e6ac8770f5a2db81bf1fef6fe3063e4681751e9003db29209d1f84851a0afcf62eb0e6605fa69da74650cbc4fd7347743075d9cca143a8084c15d4372a1d325adff6f2b945ac8f7e9bba76b6869abbf9704ccfa718d6926562dfc899c2498b073184ea1c6824a245be772b9276f279e2dbdf62fb28d3295f364f18032361a5db82d16cfa57b21b4270af55130c029b573ccceaeb81293f29c1ba5c0cd6292307c9f0c88100ae57ac1892e422891039541287499d3afbc1d3c68e93a14d5a3b0efb6ff267039fa3aef140953b23cc1d7882023407e7c77dc0924f58529e18b41b2f89747d8f1fb6c166807193100ee0a26b57beb8da3c34fd134a28d5df3cda61683e0ca0f9d92266cf0675081dc18946586e5b9e070504d6125fd485094f3df2eff6d9197b3c7953303f62e276df391c8abf86aef1931d60488556e412ae00f7c201e8d64070aa72e291e804c209c8dc3fe968d06311d569d726fca4a094c7d4dd4b16014d4a1cebaa97131ef1ee66d734b9f85c9a6e70afedb26e7ee8d150d611b852b0bdb34513ee3db302395492b845affb16680f5bea4896b866fc13081eb86f509970b69df9d7c023c160456eb94d7eba2e9e2e076c10ad52b9c966ac387f808811138b9f7416bd0a9d21dfe8b706ce321f284342aa301f4d8361bf20bccd478386673d2afbab6288b8aff15eebfcab25406864842b7fd6bcf6c42fbd8b2cd526c5dca80e46a04be95cd7d63d936eb8f5430415b9b1232e4ad3dda1abb1b1c0286e4d89b9750fc67eeb22342a2aaaf83766ffd72efd993dec4a06dcfbe5dc3c067dca721d41b14f8a3536e69923d34bab47021bd1a16640da14fee5e587a833f2b415f4c454b80c700a4d9bcad4c94b6db9cd969d199f0a3f4fdb7225d445cefee5c67b1d6ac63e8e51d80cf32ae75247436bef80affa4b36096b19b1dff52a88f7a3f2e29dfdb9c5dd994f3bcbafd976f318fc59e3d1ab60e92a2c0ca7eebf68da24253b4bf1bc99c98ac429becba641fc2642074a07a9249ebe6508dc5d0d460f6c7bb873cc6a2ad7b91f03edcdc731507ad451ee3d9a4527721a5e76a55dc008f438014fd0797066a51910e958d5a0d92ee2245c853b4c9a7b2e7efb1e9e749b420b126f0a0240c516882686660b38c60007f45d7648eaa2d7b1c6b1bdba8aa5ca140e8c38b0cb6d54e3083e903f7c3f6ac97d95293506613b3a35f1c2a8d401f66d917906210c758563e4722d30b05d375c8ecc41d898574c3a20d218b581db4c85ddb2125e56c4918d021f96bac324ff9e9789c921cc5281c0f0c98a98fcf218232a8b99a2bc34a4b7c9d9031b1d408bbec6e3e633555e8fabcb0115324e000000000000000000000000000000000000000000000001080d161c20\"\"\")\n-            )\n-    };\n-\n-    static SigVerTestCase[] SigVerTestCases65 = new SigVerTestCase[] {\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-36fa0dd4a24ec6fcb09f2302dadf25bb8118be5ada70e1eb7f57b93fa96b1b842b748c1f9ccc78cef5d647c28fe8a346ec60afd8a79dcf46d5a9666b0e50816972701861835ba933a4ed0df8b13eb32f07761ab2f9fb622346059777c7c75b2f370fa623cf1d71595827294cf14bfc36f0ccaeb3b9162825737481012d4547d1843873aae1a2ac6f262ec5d4b2403ff7cbb3e6758920a6dfc12f48396f8f96e144c1afa6f0a150c1a05047e35e95a3530748c121f953682cea77ac0e4dc7cf205cd63e8aa64e278cd6ea2726519fef2d0180931cb2e06739ccf01e2bc1ef7cbfdd6bab7b9bf82092e18440945bccd91ec8a703765615cbc42492925b3515a20c8e676593d0a4492011a3cfaaa78a21ee10bd266e27faf13ea69691bf5bdb89bf7bd13642fc757af3e5217696b6d0f25386a8e2e2476742b5b050813afda57377141f0fbea06f83544f14b1f027a05d9fe5d431ab6adc86623824c466f3d37b9f70a9318b52688d209a869c78a1f063742380c18961fd3cb19b3e0d90898025fc8d7785791d6ee155899e1c0c082657dbe848c1c03ef6ae62ac00e1ee2a71527338776085554a3929db26d61d842c15e24a917fff823ac1bd9deb37af188a6584bda29bced6401230efeabdc5e96bc2c77c23347e5f60ba29c581877edb9eec6831a9db4f93c383a5f2f770055a50c9d4579e69a22899901d1c9f2c5b892976d980ba4ad0864c0a046837791ef23540b603a5f7cb074d94620661e924d017d29d6fe6b4b9168cab2325a6f35e7d1dab818d4fca14f6af4b0eef66f869a0e1d7a8ed15ebb9b1d3cada4fcf106ce5d0c740c9d8eb5771933226ad5af16f8364d506cd700fb5270cb26dd0b17e04d7db7e5f503c9ce3c44d0b8297e619dbdb382c29d7801a9cde6cd5e6f8e4ecd6cb9e8e89ce2782812496a0948788fefd3fa8172df501475cb6d68cde63edce6b7b989281b2b95d60a301f10f60fb23d8dbaf6e4b4b345b0249434623580936e9ddb6440d7ef60fd96e1115585d16725e224a4c86356bf5275ac911864cf1631c6fa8e6ca3f093914638f40517a2102f23505a571e8578d4b5a7b97af3a0df8ba735d6e53bd6e0563dbb21c37ce4ce99f45752d69322675bd522046a89dd447a34fe781095126c774bba2b26c9d7cfe4df858e7a5304c5183d24bd59f41d7f22414dd6ad5865dcf10bb42857b738d11b2d6712d76bd252615e68c91aab09c8de5cc36cd9ea66a8ef4b65a91e86cc39bd107ba15b1e5be3f7e856070026827a16dfccb6943877ad4d3dafdf5afccb3ead3bbe493fe4d2928c335a9ec128f11dbcfffb8d439a7807cf035c01ad29d90f767d7f8456b4511321919e0a27220c411d94639de6ee232da1544671981c200642de22f01a8b14e8ea8ae91cc05f2a41acd085239ee00dd3e31bd21673fd2ed5a5692b3d163d99b1c19539445a3aaee990daba896e67ac125007115f126bfb6902fc8f53501656ba204677dd4b6132813d9064000d024cf0b2ad70168c8bfd6f78ffe6d1e6ad8731e880bdd52056f2bd42c825ff5dcad7b4b42275adc52b8eea33e23178ca2361d55d829de69edb56bb2a9ec300a4691cbc1fbe0b8f8f999eb6259fe49d6fa63d665722e542fac9a2ab5f203d1403ef328ed290fc2bfa1da1240076123d425e485589eb6c7ba701658fa6ceebe2fc2d211d0c14160ca5518aaac2c7763c4393e41c31a8b62b3af2ab12bce0f2324ffc1bf4d1cacb245da239406fbe105310f494502d6aed8fabd2042c7b1e4bbcc8b44d22f34850db34f8d8134ca2d7a7e7c57e447d66660c83001a54aadbf616517867f1a9a127a7073ab120ef4f6ebed8b66640dbab85f7e4f6c379d6962ea30b849b1919442aa6cd3defcddf35cfe6e4e9443b5c130503fb37dfbbaec995cae8b2bee478b99cea9a030368aa1070b17909d27024bff039dc4e1916d8006480d83858c04f22e0876e9eafdb67688d62c94252a74c1275c135631e162e4588b3f6d9f8140f28e8ab98e11cd96c7d5a528dc8af32ac90831bd74f2481983c62ef4111057b02621f89c85731edbd1b17f525f0a7c732fe8738df6f20912159a3a44b9b1518017e59e02b418dd08d066642c120af3ce2d22e7925fa7d811aad41328c66ec31ab05e1185351ef5cd3f88d931e70e4d60175634a8df275a96b669024f2a5d7dd9e8fb09ed16d5a754a25bfc0148b6b690ac7bb9e44062baab6f2c7e2dbda94a641a07fbfce7856bdd329ffda4a6ea637caaf36d1776ffbbb17241c7a69533adad3c242dd98168f0dddd11df24c0e2ad33db04cce7d8422d7211b6b04a93314655b7999093954674341f25989b19c2cc7851f8d3632543e5f706c1a4a71cd37f9d9aa06bc81220e8792baf65e69a75b9f1f9d709cf73f4819300efab7505f3f2a3ccf913cdea82c65a446817b316fe1048db8e7158a80ec221497a243a16b6292131573a6374c68deab40bcfbd4bc955778345eaa8fd9c8e405a9cb2ef79842bab9f48bbec5764dc6159cf34f4d6729e1451dff16a92b9920301522650ec397c4839857a03e991185fad483898e37485b7329a74929e7b865d1805ed02158b209fbc0661d4f9324f3be701928d65a04784b8fdae59666d70b1ed2d5310a2a66a3d7b948b160e16dee03a694403b7e10f4c9d860ab54c34b49dfc4789118f0bd4141158be72d710d9812f66f2070f5542064cd9fb7030e9b8a82e2ea74c2cfffaa3ba0046a59f4cd06ce680f5a9f2\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-7dfa6f43cf7e66cb9e8830871ea48edb07de9845daf9433d74ba10cded10ae8fb4955732aa5f11581322d945bd5b0c05ca195e5373453435602784c9e386ad0766d81c9c954614533a0ab7407d4eead99582655ed634e9a7db1458e3f91bf0c4ff63adb0b62c4e813c396d8a640d0464aff2abc80dac7a5d0329e31eb34d00c2d90142f47e1dcaa203f730de8723ff5f6e9db3dc53923c1dc413ce54f5049496cb69e1280ba7ecc7cb540a62e441c97743e196a0144db65e3c0022c9a6ec621eb1ef79c93b4b224c4a1df88afe1c4513988a9aa4d6aa2a440a9d2b3946dceb5954b0f5634af19cb9de528dfd8bfe857375a8c903b124fe6b9584fa68f56dde10114aa62aafde3159db334294c06b2774fd660a13e997403f04f5027bda9745e16684edbbdcde4155adfe34e0febff14bb05057ee9188c2f7ec829389e7fb24c24d3ceec6f37e53b592b40fbfde40cec330639e585017f79fc86c68de2d24e49b33b5368fd1c7d027503f12b339aac9a4dfbe711918e9eda6bba049154d4f3aa0519078e9ae18f5a94f31adbcc199a72a7b09de94c7a9ca94a04d016fe4051e5b778d5de31f3fb76fa68a71574fdeafcea5e72b563e99982ffcef751e8422d2750809786b57850b832c34a1ea88176861a4176a6623159d63535b5897ef1621564c1882e2ab954455cfd5eb080f9e979a580fd8ed7b02bd504c6ce24c55c1e582e524b6aaa8ef66c666807aaa994d22df7bd5c1a01b128a408b9dc762f2a5fae6a61da1ff4a2feb7e4389bf3fa4357c61acefdbe386b6e55eb3220eecc005cc0047b45bff02e87f1f55177c78c16f142c27e6e9c3ef81a5c5cc77e70695a7ca57e93da2b5c0b32a8df6a77dccb47f3c9406ac58bcac1ba5aa511e417648c4160979d7cd710d35f4b405e7b3d09d229d011013e7c84ca8d0693696b4028eaec2993755bddee22be25b4ab0c5541d6379a067b9fe755955cf11f7f83399bcf28c331c69e2f9a80431da37b14c7e854232037284e91978ef928fe68021138649d3cbc669126910cd648e39cd91efae120eb275b114d33629bf451416ca9affe96d67ddbdfea590b7babfbb49a8e6fada738b0f2bb907e34a856a835e09a8c9076ee222bbffaa25a30aaa21309449c4cd0a7fcb6110a1c82fa8d4a737bab8d92e4bdde60827442e9f74d135f3834073da3867b5094f4653d88607e8551f0c2951595fde2880f0407b60146b5f83ce3e589ef16368b7e058db6b3e8b98d6d459428635f1fe23fbbae5e96d5afbbded8dc22010c58d11e84edaf7ffb8c6598d15e8d3800cdde92ba519f3773ae13219b7e2b967f360162431f50b0de5c634dce2a361760bf2c656e47f8d10336c0c8a0694c148d43dcadb3f84ba52a2f8a167732f106df835e50af089652c7c806b1f51ed4dcdec2cb5d97b5c06f6c64c2be83ec4c1b228fe5615b7531921a5ab4e2357deff9d75e04586f0d325e0bc6306cc22f59e26dec56a2b0ac627f95be580a8efc9d7c27104a852df113d443664a9fb27c0a7e9181372eab430394ef71bb5327e2ed828b60a7b93a42b054cace4b029a8f4fa8fdbabd0b728971ba99c641ce864b627f9fa17c33a6f50d3df9c97d066546a37ecc518b6eec761351240ed4ac606e498daffcc4cb2ccb061619377d33d791938a32cc3640f45549f625e8c2c284a7fea4fe1a864417183177f9c914348d7a693e2d53a95dff9fbe6b26604ae005bb1244176ddb2eefc07942edc0b0fd336f267006979bd82c4499460185d7ad41301fbf5b17e78491a02b8df328aa35eca2346c1f37ca775d11facf01e26d7473956f28551bae4afa6039faf145ade0da17470beb6857ff7435b7ecfcfe51417282095d7a83316d16bfd0a209bddb52461fbd14a74bfe06183c01c40cd6086c6594921073e6a49580aab6b28c71b960ad575471fc6276b4df624870ed01346e3a6252b8e9ad82b40cc88f5627ea5d8073efa300eec86ea921cde8cec9e172314081eee5f6cc665f2b0f6e5a0e56a9d55d8fd1079ce1b5ee10fd69b1a1e8fce047cf7264edb9c44e51443387f9d2fc54b3ef09055f819fbb065d6f0f09e53b3d5536f1c5a98c1778a5a45755894290e45d27f93fdd72e948fb5a1e4b2b97798eb030933180e8aa5bef5d89770c546320c9e2080eb7a1ee3c03a424891517c3281a0f2a7865a138e7cdb1b417809c3c3f62b12baf9b02f9156ab6c774c03d698a9b52380124d863008bf3875dcb7a8a80191c288fcd856e138783a0fb301e395ade94de2193b7f316c63fafeb388a52bb934409064aa9822f5582f632324e11b6e4bd668c0c3d57267d64311556bf855524191565c02da543f1cbacf62a1d5d9839990ce77590f138e7db0641e51ad911c3c116addea6fad97243e9ee4efa3619e8809d67e8907aa0d63f4d9ed863999212e5edfc8e7c761795792e7d9c1d05af67f10645f76ef119c6ce384e92f1f91003761c9203f2e2e6afb3ed4daa3c24d74b9cec3526159f7f88b6df5354db2e7eb0dc1240cddcdf076b8b8f4567eefb4b27e07aa3a6dd9e17695f58a647002283b2f853e9c5abf16b5c4c1f4cf6dc67e14e2ffac3ea0e98830d8613fa7a149109d054ad4858fca3ee6bcef6bed0ed48a877ee4d0c758cae7394d1fa4d65e6fead01c555ed81e9757641d48ddf8ca28e3a6448e67eb0daf3dfdcbe10a376db16063c1a3c48abf242a5ce4e65ab7d3e535339e5689017337b6051820045bee408764b4578c6d0d7e1e17b9bf537912925cad18cda39c8402e3897ed04ca387dad9cc68d049350c2b9d8440f4195144c5704251e5164cb969f08a4ab01d230dcff7c769a026ae57fdd36abf805d114716a8bae45c099994eef19abaf515a0963633763fd2c42f4fce201ec61da3b5dd9d2d89c62b9dc8dfe0ae91fd52b67822cddc9e4604da09865e3a5f9db7e19f1c13420b07afbd84725095ffaa7f3f301937842ea821ddba3e138a0e2ff251d03830a885b5efa7f38492e376f610d89af18c7878e0e179c587d33c2e17241a570496e9ff8e0e980d8d7eafdea8f6cdb92ce8479f21d0a45855a41f5f20103389d3edcae037113c6777bea02de2fe919c021476b8ba937d1272dbdf038cf74e5bc7c94f25e85a8314ab2c1ebcb0db37daea22c2411c77489425be5a37509fb21dd995badd07c3c0cb55400f3df5253d856068a0c643ab1599a30844664e0c1234663f447a1d6eed317b362ca8574e724c263c29221231e41f980c8a773736572f282b5818220e34ee47ea2266f9291cc5ed376aba26385a5252e44d05a49755b1f7b0856f855070ab9ecb1a9de29a5b3920b3ceda55c0aaaac031f935e563c50c840f9002b49dd06fec768a9a258eec5b6aebb997a9e2fade8a95fb824c9fe7332528e62b23d82f99cb9e13e9a339f1f086a7a60aace5f34d2502a715df1d1ad9ce421ed1802f6acfcc96836e481a9f3963b0f28f5ac8381f83a7447e2cfe35f3f95276d54a8143b458bd195cfd4a2b474923791e8edd3ce383e80c9a87a258734656d7e82cc26aa4f038bff3d13512ca976408466f32fe5202dfef7a8bb8aa0b24d798191d8086b5a3ba1742f2c105439c58ce3288d19aaa535818ebcabf73678f27856da1507aea1df0202b01965042602c582bc9a3642ce2b04d4b0bb4fdf3d82fd3c4f4c99ac960530b04bf5fc3b885b0a5fc6fea3103ec3649f40ee24da9d140ca64f28cf0fe98d57f72fdedd468b27601cb5e34d34beee6151ed6e3c452925fdf6b9601d69ae3c36e9fff6d6a1b6af87b9a09c3f65e121e21d6b5d02e068098dd1394894e472ded09f085396a4a71cac238a878c215e7a955cda7f3742fdd1e2dc4348f9abfc46df4650e82373f08e08dac0a59ca8ffd419ca2886c891e88e41ceb85e10c57a915f14c79f5820ed8dac9a6bde0ad419198efaa1ce3dd2f30bfc82fb37103e7091d75c23ccd5b7d7fdf1ea49aade37b3e7fdfd9892597be68b47c912470b518667c28e7c8ed0fe339114bdacfc4b61ad2268929c0e3d49e77ea2a3a4469b79977e928b4deef31617f8d97d879293318ceb5c16ed2df4f1c0a7259786270836ed39ab184a0390e0d0d084c5313f9cdcfab7490c0f8df7f9fb8d2ba658aaee470524d96d90fb51f509ca6db5b0193f817707b6afe3faf49779c95976d57eb710498d9e7d4e1dbc7026a19d079bd8175ce4f98d07462f1ed85fd34101b213cba0cd73eeaca9133dc380031f6ebdac8f05eb29a4f22ba34e1a6fc29e5aad9fed9a74ad8ebb6463858bd894e390499d715c5140b5cb342effdc7184c53c33624fed2f9aa05e085cb7d68e7e3d425e6a08f91dca36e18c8061453bd980f41d85df2924f3903b1ca62841d4545f8ad8a4949166990499814a3db50a62730c88ab592be1209aeb8d2d5bcb3597d5160ebcc24e8601900010fddaf5842745be0b72359e5b90e6c11bcf5cad521bb23fcf452dadc00d83a9cec6f24184e90a3e35eeb3ec473cb0a9ece0ddb5418734231a399728a09387d82acd1690a66acd28ccde630704ca4e7d232ca5d37eec3925a3874581d181b7391af5d0adaeea556515a2a8e3b164a7b85adbf667992b6bff10356b3c3e085fd3d676d90bcd741577f000000000000000000000000000000000000000000000000000000060c1113191c\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f91692cbc904c6920af9eff6f57b6134b45bda6ebe9ae873a39c1e0f4330b9bf87aab1b9261fba98fc8681bd292e3e83cdf26046b01439457225d4fe957d9fa30e2edcbe49c1e920e9b4e1da4144a7918c575673b5728a3317247c1c38bbf42ba2491adc298d3f93d9061053b72d2677a5b168927d1739bb0540b3eba64ad0ff3869c7ca75bcdef3e697ddd18282f7e31622773f49cd2de94e93ee48f947c537ab55ae7cf18455a3b0ca3a933b562c51515beee14324e51416669fb931e4289e73ad6180f11994f5202af25df3c01dc9d8aad259c310e8bb17a77787b6492316c1b38785e127683653c33df908bcde08f4d4dcd56f70d44f3e37cc978019d04ffe2b2d940adb6e12197d951ee44b1c6219d4633f750066e86d3cbe36395ebf0e41f124522a6bd13f6ba9e95271ca11e4f6ed4ff76c08b3d3449ef64585ba266255b9f331d0ef2d7ee81cfa9918cd806b88cf3d1eb2e2e8444238d78929c3bb8a7a46b54b346bd0597d9bfefedd0d9267cafd84b11dc0793dc4bc9476fda6f1ccfb0c07d494345b50859a686f39c3aa487b6709790fad1688703c27baa9c783b77a07686c98b66063efbfa5a8de3ef43c59760607ef2b775396f096e3d9e4bd4bdc30a28bb62dbed11a0f9b02c64c1b43d98c2da2efdee1edf36dd2883a67c619204f0a6317899ea0269bfe5c6708920401e78a658dc4dedc7b35f5249d706f70c8b6e835093cd9b7dcd3afbcd8a94cbbed4600d86d7019a9b96d10a7a0bb4be62169195ace3dff5ddaf4c18815789ef97bb91023a33c3044f14068553913af1726ab597c534ac7011cd018f4a85b6d78648a3a1e5ddb20bbe862cd31b603bb275738801de06fb2133af9eb60a38daf9591c03a6c74c56283f658ffe6e0758c3e732bd7c0dde78ebd95d71302f3ac2d8f362cb8dcb5e8df32924e4c508c2e0166524e9f183df5933623ad00019730d2e8586a14776daf9d72dec6e3643aa32ae33fa5657bb00ebe779e4e9489abf8f768b181826617893321310b72e58f751d7a0d85bf68ab81daf73389700b65f8d16c2b075d1ed4e8db23619e960945978bd2db49ec1e17a9b7dc62c8037f20c45090d7482c0f66a1099cbfaa74669a2b7ca33e009d2a74db56453bab247a5bc28454435ae4196d74749904e790bb9fcf0108a471278debbb1002c5474040be81778077d02595a6b55123fa463a84343bf3501405b84fcf3921ee4e58aed85b623b14ca1b921494b26cb1bf53f5129e1f2184dfbdcd6e33675c09b4b1af71415849ad88c8c8a39f28300aaf8eb394776dbe1f2663014521011e41ed7fa1300febdbb59923bbaf121bba4dd42f3811e5d785c5512cea5e2fb787b26238a97845a9a60402484939932a183995fbe89b34120a839a91732bd0e7ba6864073967bce180af23f6ffb12b7e47cccfbd32a52d28a4acacf8e7abffd727e8c586c93e72e246f36060e88bef41c42a4ee0fd3025e24e739b6a648cbf2211d7803f9c94e3fa4adda936e30813aa9448dfed56b8c06695ac3605fa8754b4e6f1308cbe5237e0706358e1fca470c60757b9880f471f6655d138cc1dea586fb6765b6e0c2aa4cdaff60a6b2a696aacd5cfd433fcc6331d2cbae3a0f260079b692055012a1b684996ab5fe9a12ddc6b6a04437311408f938d634be38437928406ce2fc62d000e92398e8b06ce73def5fbe7d9f3f0e63854bb65269c9fc96590cd312d150d8447444c0581a4f6f35aaa90e1370c6b676133f2f78f151f223ca2131f2d561b7d08f4f83b255d1b33b9845284310ed342bba58e1f3ae9b5285803c7575b0e8c9c3be2fa58ed1025d9e9ca20ef203e9362222ddc0009a7e33dffb4de33bbd0a0aa7187d583cfa935ce26890f63f97caf2afcb8aaa482b5b6dd0ad1570e6e008b28bd9679046b9118d187be2e7f7f8ad6fbe10094b1fad46f78f372f68fd870566afd524e39216aee752ff5f9fc8a9eb6f5adae11ae83da416b982408376a99530f1bab6119f472a1d45864e611bb2a474342000938b5f9612d876b4278596a00d3db2351ea296fc2d606ba494b07b0dfe846b04f9899af02f9116b415279470e35663fe7e32d3ff5a2162e9f10b1fe42a5d04b14a55fb658e86eee8ac3a2ad85a1171a9e001a7a3bdf834db3192c5cdda3b08d31fdaacd3667d3577d40e0f79f037f4538de224dd3ddc62232e50e61b2f3de62823d58437a7c7462fee714a29b5cc366617fd12bf924f86a3308f8e57609dec2031fba77b52cf2888df554f814ee984f0108e55cab728c7af61d1f4e4b12ea7d027788ab973ecb10b7d668c3e77f7ae1b4b05ab8cdd73b0722498079a246ebc7eac75e831aadef51153d9ccc0cf5e82f7c57a5c57d95f2e0f623c24e05a3e8497e3937d9b8d095745beb6dc6c7a9d20d57f89864088a1bfb137726742e2a82ac544428fed5725b4e78ee4a9c66ba91eaaf4dc7c6c7cf23a37ca8db3ce626cd0c3fb086aa2866b6ad8113e2349908dcf155426d1c208467bcf8eccbfb74ab2e84a9de986b16a3a4bbb822f5dd6f9fa0ac93c4af7b4b332b0efe11e66482215102e0ce72617c1ae45d6f5fee32b27cd5bb18416f3f6f11d13c75be821dddc55df6c5d736f44371456b3827cbecb9d06d19513b8ca24dd0ee4dd31e9a6ae9d1b1a10b10e5bd7acbcc562449da200aa2ad9b3c4663b1be48fbf0b79cb7ac43ffd106699301c4412aa7ada34d1166056ab6cf9e0daa73240a3b0bd1267acdec0b04d5eb48\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-DBB70175E063054DDA24BCFCAF671F820D674F1D09CA173D4A1440AAF50F1FC8FADC1810F390286AC101D60507DD285275C6F97C0D2B2CF3C7F50609CEC64EB029C3DAD8B9954807E35D4836BEDF32501D0E7143BF488CD5B4D1A53C980BC70A3794E4392E4560E609B9C49900E1C56D319E1495D085440DFD081D1A7C52C0A8F64917834C64EF32A441C9045689DDD2EC218F58B3BD534F18309E1D780528D3BD1B23DDB3B18FC1F7C85324D45C3E9B25961FA5257EC31927CA35DB25E6FAF7669D60952502680BC7B5D777D77B194D0CC40372FC8F711EB048E01BBD5676CE3F2A9FEEAA4B5F29081C34969C746208E6F2329CB53A22058C0AE0852B7127FC4C74EB3A8300403F60B8AD1F95FD2991CE0C8CE452C2432B6422EFEA8AC0E1B53BC994C606301473D7855EF86687287BF56B450D2762C5E03AF26A987317C4BFB013A6BD791EFD141AB34718A37D1DCFBB63014F7F92C9E2870DE503452E271E9D02768357E3DEF6BAC5A0F0444DEE1FF5AFC79B3562C12696FEA15815B7D9BAA38C66919D137F82FE36B140B960E02966FABA1EE9CBAA04941396D665DD2C6B0559502577541AB0CEB066E066553A2DD407354123DF14F4B1DDE6B8C34E3264161796F48DB5319B3CDDFDFDBF5CE17BCB5924984143839B4EDDDAA8F0568ECCAD253C48D00687F9A07785A67B62D28B86D70E511AE08A525F66FB15AFD112C184785F91E76852DAAA3E78CB96E20249F38979031712440DB723B022E1323818431B897DACC51400DB25635EEE41761089DC47E8EA56DD0DF60B56FC682D000E9D660D0CF38C263B716359F41F3B190D201950E140D67F50287C09D2008664341A829A074F9629DABD88BE69A6058900DE5782CC621A91376E5CA31C66E3C430CD00FAA83BF765A2E6B2FCD20EEEACCB996FB5C4B63235142BD5FFB4390F8CB95BCD5853D0226F931C38FE972FBD0D6E10DC2CF29D1FFD2653CACBAB8B81DBE44A2B8F1C5DBDA7C56252E4B35888DFF7808B3514F4D7E5EAE9B51078E8D2E600EC57200FB48EF946F021CA8209E7DC6443B37D7281C73C6A3B43AA570398E62CD5ED9A34ED23AAFEFDB7DB3141202D940C1411CEFFBCED878C0D325E8CF7FDCC520CA3377BE97855827D2E6F4EC8786EA1374E006539387924161D65782C7B2C262AF9BA8FCFCB5B1477083836129DA973AB8B082324F74BC6320646448DCC8AB56582EC72EB192D3F72255D85FFAC2B5C62F245B73191A9176BA5A9FC0ACD3AD48D37E23EFA0C65F0423AB5CD0EB76BDC035112C7A118ED47C0E67E510A6F7A28F26C3D6A882EAE74BAE6CF1FD969FEEAF6B36C85F62D40CAA26B6CA98120D612598F360CA2628F6FD608F4E1E290B32C90FF71E181D4B72978DFCD189D857DAFC7B2AF8C958EEA6894ED59AD56B9AA6F83092EFECF9EC4091BCC9B8CCA245C30B54B9B8DFF3636BEFD417F46DDD2F6136B983CFAB532FB623FAFC3CC4CE8A91434377F4DCD1607BF04E431\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5c796ec117395c38a9d7fa1a02d81e3b51522aebf68f3fff55cbf7d584ec75e547d413562c4c87f28f57433cdbe7c96644619b9f03d119c7f87f0a970a46075cb8c29c506f67007470bb4843af6d3dd1c91bb3c2c62443eb18a69e675e3711a08dabee5cc1a03d35a1399755566dd2f07084a9039c7710ab57b380712b39cd6f3cd2098225785665bbb94f3761d5a8d431cebcb533cbee5afeba6cc877fbb168009b3f05f9829606055e71638b50f4c6a41b0b226134391ae0efae4cb1d2e31c782b55035cd9e2d0bb53fd72749de022537ad8f8ec49a297f9bc81d1ee0f5e6b96470d30d6b78f48266eea5d3d4805028f90abbe90232fea807b50323e722a42fb455f02cd2c6f5d932b9bc606f9509fe2b1c133eb12de12db0206d78b49154c34adfe204fbf5469a0a50301be999015c5798c567729b60b2690ed93db0eac4021d38665a3a7db7b5ad55d94b8cdc9171a00ffa3ddbea750e83e495f7db132fc253c82b6b901bcd00fe68f0277988a1b0b2cd1d051d10ee189cf971f79ab6d1bb641b1f3b160b4a4d095144d1f9ce0dbadbdf6955622a8b300c69ae67dec7f1b777f0266e71413d57b454cea0dcd8cf3c32b9bbccc36e1eaeb17c87734afde3feec5432a18ab9a7c6a1fb30e2e84af2c367b4f47529bf4e0782a26d41520df8ac3cad44d4e792af7f427c75221e4a5230e282bf938a6072574e23f4cd35aa49758829d521360db34cadf94f9ba90d5139179f877723150d4d6f53a5300ea3e26392399adb258bc8075cd19517cb70ed48ba9c61e5e5f3d245d45f44f5e6e033334dee3a95bff8dbad0a1f8ecedb431cd52530d7c2d06ebc8f1b80e5e30e746f9b3b3fc192e359119170e2216081dd908d0a5b03670cef41420585653521ffbdfa58957d06d7a0ed23088a5835690df344473f44b6213fa10832539197afbb410556b8046e06d814c2702ce1c50fd5677de3015575e42b78aea720270aa303e3a6539bf343c52ff933aa238770e7fda2d0d0702c1c7a829e798b0677c1044a7e4af1df817c4167909c158074a9933f364a1800e76234751e7463c78255c3d5189c2a3cce7c2e55dc55fe97131cd4255d92b3f9f5c888029d4b92ff3a544e25b80ac12e73c9a65fcf0b755ffd0a497c6113897ee8bfcff0dc8c9bd583af6fdb71523be596bf0753b25b47766d5be895dcfb63d7c7d9f6143efc509629d310dfff428a1d5328b5307edb41822695f56a09ff2202567ae1b80318f827e0bc29c5df5e4cb075f1d7c1cf2df62dc258544e3dea90239a1d997e52e568632e259def0bcdcfc6f9306c76558dbb30a880d41fcb4f99988e6a9186296e7a5a31c7b910fb2624a0400bbdc6fe0657865a6537131f0b0dd2f56e2d6e2201a843bef51916226577e6bb0e891247f93b5bc36c49fb37e458d363762c12b4b95ba75ac1b38f177fca6515c240c40007eeecea8dbef687a77d3c09f9b5bc5450231ee83294e5a8d0fa79430fc2e701ab39d3bd891e73a695ac6559d8a8b4dc4a6ceb7472ad032036e4aeaff3154099a6f2e8297c6e4bf121631b545b472ab316aa0a3e1192874793597e0fa0cf173a78507ea55b2ed0c13fb045a96acd9d9bf8cd5197f968efdd359bc4449458ac42e2efa187190790de076f56445f92a79be0469efa11c98992ec82e3a2ca311d76e282e91665f5659be663a33139e80952b444914fab59910ac08daacb6cfcda1dc75c00077391e2b38ca54c1e056968c4c41fe7201a3c637b37f48be5672828d5f20c06bbc818332f48e0a4c0cda579d4c114d0446896b60392bfb66ec8e4eb5c3e8932259c423025da0611e06b34209f35413be186d98f8494d18eb0b2d56aa47c6d72c5b57e2f68da8ec1039dc565dcd5c5937ce1d358d6c83ded381060647ddb52badec80e92a98dcd4be27a5990c85192e2989dc2553e3606f6e6ef8353202671a1f2dab2d3130946254a686121a26a29ac8553ef5a58d31f9607bf3912fd4340562ff48b38a12b7f4d8ef2e058c9c721467e0787aa0eb2ff53ffab5c2b3c40f52524d8ff1cd0df1edba1dcafcf983a9e8e9840ef269f9648d3ed8e7778e086bcb887c54e49c8848d21002ed58f163a6888b171a945a9269f410b3d541b07f7c83c0e6b80dde9bff6c3f6da1f780f52ce0da11c196c0493b6765bf01aaff22e44f2b538672b4db58a616e2d2a36b1a20a618acb6e7523546e61c8ec4b593407d0ccaa0ca85d2db46a6cf188939ed9583f591499fa436443287fda7e49602dd8677f171b487e4fd6229de805f4693fbc8f27b52f283fb0384a2994755c5a6c0ea99a8be6f6f743d05b75405f9e70d68d4904b258d0f5f3ad0b23d62767d54ec493f15bda17b34c31eb50210788d38ccd4490e0b65ed46e50875da092c35b0100aae8bc387ad595be005bb52ad0f3281ac662305e0a62ec6254c4e091b1fb0552398b9cdcf2c12069b90b6ca5d67ebeb22b6aba91a7ddd85ba31addb18ea61d98429e633e5296eda442264dfd6bafdd3f26c9d6cfa7d8c89f273c4058c7b88ddcf79d7cf5c8bedc4ccd69c4b545a0069906c12c0b5dd5514cc1d45a50173c4f51e0cb89e2e56025539394be823889e0b7cd3b2563f756bb6d95336a22a1f84215915507708fa18e425a6de61a7ac74689bd85bef8aee1a48226a96ac318bb3d8fe95be46eebfda3662e04741f93995e5c30b1b3864feae3b476f341c473d449f3d675c3335617a201e992e9e96d35640d0152587c7edf50ee5542164e12d268c0bdd808ebe067e4891172a4d765650decb3e9baedae4c39834b5b6df1c8252a9b588c30b25167c543f389f4d4db14fd1319161453311572c85bdb5fba5886325b5118b6bdf774c76fce3de923761e22054867a19a06e2f84463a737ee6b4f42cf97e062db911ef8dd2a6cfa15a4698ab96c9e70c7823956665386aab0ae235b485391542ff57967b67274a4a308818ffad47b82051e674ae13ff73a111c5da089500f14c7d05af77d777c612628b157f3a921bf8b0cac0fb426866833ee35a2176653dace88dbd03cbad446bece7c6177373db768d561aba1d86ef2a5680f5d71e2c4e35832e8ca69de760893f3e6dca2e9b39dfbfa2bd4e1f3c2f5ac06e7b07c9c3c85de16244a273385f9014263614cecc9ba3bc1679d8b2721211b7fe7fc96612abc39312d8d05dd530e9e6f00977bdb27b0632eff254f54213213f608177334ef02f79cbcd5062c9b50f9c3ab14a8fb019d0c2b11ed1a5f93d769d3fa14eb3a7e2a96c738d1a3d62dd49a5dcb34ddf6944c066ed1d4c662752fbc961eedf9606c40922c43c543f6c79cc4e91432d652c6ee492679f84ddf1e1e6fb885af725a63168a6c6eac8cb180fc2b71f8d83112b81b168e96e42d3f069b69995c351c6b2bf1344f98c5fdb2f3fc503dd6ccf5cbc9a1bbe111ba2380bcc2392cd3726bba4afe7dc66a103a2defa50516d7d0d5bd058c7361bc6a81379a6c48fe76e81cccab97af3cc2a96d4abd8d5399c8ebbec651320d66019aeee16dd9e126a4f6b16ddea40a36f2ddc9e5d91bf8d5a39cf7069ee917c23770c18c54a5d2ca8f23ca2c9d21f9003b7381c077b7607dd3e3b0c34cb12c77ef08547501085370c6225e45c40069c87161bfb45498397c5d714c86442cb1489accfb34531a14199cf29e0e611f4047f22d40db532956a20c8f5561d9c6120a80507c525dd8584d60f41e999686096454475a2c92bef5880e554a09cda2238323fad2827d9ba6cac319b01d2f89d708a593d660f9c19499328167c5843ff20a17bf0ba26c8418fef3ad764a865f471099708048a624c39bc7ac317badb19226d8c0943e0fb8aeee9789c0ab6e43f932621e89c424da8a6eda10b936218264161433976904836c0c913b5a0f2fcd701ae18ff8309f583f75946a02b930c897aa85ccd239ce2edfc7dac8689b8e678b620cc853e5dc57fea9221f3c5ece3a1484022934d9457b6d3a34b801baf8afa4adf307a8c7b6092168dc5fc35393f772b576345b2f6e1fdd9ccf27452174b8ef6bde9cfb37dfedc43755be905373f54e13a1a40c3757a15bc36aa21657ae4a64a16bbd4463fbaaf69cf4778306876b62abd4305d753da808f0728c3f51f838b640be0c093b732595b153e2615da3c0d5ce5801322689ce85f91767bcaeb81cabc3baeb76deb7154b79528766282bbea6d026687d2f823fc25b97ae523e1eecdcbebf460b447b1a2e677c0215fbae2da1dcd182bcfdc912b94c732b793588ffb0d1e118d02b093a3cffa510d159ccc74ceea63ed881ca79957dda6db1329c22c10a082baf48fd6a2b635b3f1b896e77087734528d0943da51d31b1619e549ee1366e9df05d0a356aae84cf8f3d0c8fd5ab534a3524be784eb0208501f17e3b8f70a52de886bc691db2bcdeb63f7bd739fa3dca52e4d44a7b6b57564f17076104da5169b46d47bfd01d2610a9fe55129e6249956233a911eef491d9c5877e55585f62f1d17a84bebd25738d11d830c2bbc5b55d7fc60894f4db0bfcc6639277d290ebffd8a02e4d0593f65223168240e528822a90d4fa94febfd55e5562fec1f279af1bf7333d5b8b8eabaec3ea262a40586d8ea1e12b3b417789ed00010f333a787d86ced10a233e7385c3d4de1c3450557ea5000000000000000009111721292f\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-775194fa9e30c689e7302d8c2fc00a7f00841fcdae64e399a53e0be695466306a8c2bcff2f1de6a5c7b2034f2581179849bab2b4166de1c203dc8c85878e9309eecca9cc75283fc90ef0e01e172630a1fa8075644c31e94da3d541eee7e08a1c3bcaf746798113c7a7d70f4eac26fdc630b692bd734e5a65b913133dca7d9a432e2f1195d4a76a6a011f2577a1699ae37852fa0ece9f007a429411282115ac4d55d1e7f073758e8dce2d93e2e81a857985a6567d28a155a0cc1dde48a3abdfbba3e562acce270827c77421780fa60556ccf9764f636cc54d094e19155267985d066b8af7a7cdbd0e76e18324bd77d92aa27795ad2f9abb5d68d0f768e1b124189b2078d133ac72cdf4d9d697c24aeab5684386c81dd11f5bff5039c0da8fbd0143278660abb563248fdcbe666a708ce2988ac38891a4e953913fe544014b4f05f75a92b14e29de39eb008b6b23875bf02076518036aebe85bff546d326d9bb9f7226271f5f6b655a8824029acdd548c075107e8316c839d9e4f94b71ee49ee62101c3dd49960eac7c6bb9f113bc7ae4975f50dfed974dcec3bcf3b90c77211bc4304ae5a73a277732ea37247ae7410858cfb053316ac2426bad05c656c6fae3f3c762b384cb6a3626dd14006e9621d3615249a61e39d665f516ae5720ca55f5a52aad68e5217a0ea27a8a02a4c502bcce7d9f80d5ad0ef395b9e55bd2b6f0fdb12cb7817908f2907f8a625e65a13d7947f15fab77009aab91ecd20964af49d008d32fab27589f393a36c088578f7b8207298cd028731b614ffe2fadf0b25b940cddc8b7d80c3885f437789d5bfe7668d51cdcf0db684fb4afa7506b828aead4fc51964af184c63e94424520c99a44ec01c1d7074d09ff0bc8408a7a6cc9b1d6af804794c4d81f71828e3ee97901f92d4a8ce677744492e15b2499ac9424850bf89126d8e7e895fafc2581ae1b593f9bdcd1eff97ada3be693eeb7316a6b41ae9cd719d7e1b0e9f41ae109a15ce1dc9407d01941826b7523e2ca34e8ca07ba1e94ca3ae63207c6185378dae26e4c675a676406eff2e89eccdb516059edb647c79aca7cde5a17f592d3334346b3148b34fa723f4a005a0d16864128560e805db41c6eae80fa1d8f0a07ba509baac7a10d0d34eee421a01a4d752853bf8cf5474109dc49d0a2e25b08cf36481902f911031fef980c5cdacea31f22949009c540e033e21495e740b559b3065a1ea6cb602979f331000dd442124ef0b1be09a4bad6668ca435c34c2a20ed8b254b12bf84992b43159efaebb5bb34a8cdd692c41be6c88dcb42e802f01d3a1ecddb061ff829487a3f5055c6aee621a811100ab764c7a20d662af257bb0def598e59b5d7c3f8729e5dc55535ad77e611fb20662a30f8267d20d8f60614e2a71585dd46b6762b93696bd012ed319e7c8f65c253bdcb977c063499672901214616d8f699ff0b04fc074384c648014f15225e5786fa1534cc85202db0213bcb1e494fe0da6110cc806f029b27625275f9b5bd783e86e494795fae430a042f90485cf18adaf974344d43dfb5ad13af1144e85ee57836702b2133774451a7d51007370b8d621f155980a417789537f7e1012ad2f9c5e70a579f7affb84e3a41cbbf33a1dc197776f816dff08e2e0f7e0537f4fe16589c66fd28e36feee9fbb959e269fb919f07ac55cd424f6570a55bf0514b86db71bf626786d6ec56073151b97974ae857eb651bc6a3866ae5fd61fc16ae29db7996d277b7f6c85b3d78928f4c84f0789348bf122768e7b17577667ccb5b7bbbbe5373e1b5aad9c3c4f7f3f1a96d6d4e42ced4e18760068a4a667550bee909946e57d5fdd66e92cf2bc195b5a2b2bf0214210640891a71f7be9aceebcb9cb463dd8b02190ad9aa006413c2784d468a2730ec70225c2a8eeab4c12bee8cadaba579c3db5b3f4dc210994e1bc26c8c548b9ca340a658368a405db1efc98114e24f2cd20fc8743261a262fd474ee6c7f254f89f0cb6c16161202342a8d1aa31e7d8a829a7e1c980a62306e7a3032f4addb96582966b56b37818875a14aa80457bb281a87ce72a5f90b0b30ed57cda8146f9dafb2d7e8ae79e8b0067f3323337c799aa849779ebf718ab52b8bca6a660795ae5a4adcab49f9f5555c1241100962d2d8f1c78a330b5ddf49bca2e06baf77d8480fe32570dc55cd009e94106de4cbcb6f0efb3f9b41308a5ce341c573ef085735667ab20ce51320df124806e7afbaf9cfeb57ada0aaff578056993aa5fbfdca313b1b0142e9159f89f25def669c8846feb01d2e06c6a1c1c4faf302330fa223ec9b52ccb85e284a98007e61f889bba87dd520f2f9d836741d01112928363a1e968cd77108fdf0b8624d5f01cf4af2354377e70c61da9ece5c40e8bed1b62da6a3c9840975bf8854f075812ec58c4d814d7c0d0686438b5d9a2bf273a54be6930e336928fc04657a17865a073c6ec72f8eac813b9e944edeab724185c75ab2910ec4a9b47d7abbdd41865936fe5cd7778bc0fa0db378c73e404c96f093123b183e5d9da04f157990bd3274892681d40be1387f96776a272300f2b3ce6d581a8faebbff01e6e0d5aaffe8f4412cd7bf3e593170dd0e3fb42cdefb4201e4448278571ade12a62f6ec6240951ee8e731a0f600c7c008900818bf46a585d64fc47d9897abad71a258a35e4ddd78607b175b60e3732ea47ec5e06b1cd47feed7f4116cee6e0c815bdd06e72c9206700e10a60deb5f2a7c03\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-02dede66fc74f94ce000d6c4898fcf4464b834b848d2bb2d98d3a5862ec632dc9636201321c793ab26e4a42ae4f13debf105d087b112849946c76b54b801382b9727d65bc732a5620e8f4f158f0c1737b0e4ab8e7404383f76c848b36f58f5f9d70ba14a8ebf622bc848a9bc3e116fd7b2627c41ccaea47d493ebc6d3dd167f79fc6ededc36c809ac87e77ee1b006e96ccccafb88d965bc1cc15388e6410c68a74d72b6632487c284fbfc10135da29f29264cbb9ef620c2668066a2fa80fcf2132e93a29383e56c8bd89b3aaf8a905d4e60c6f8002132d38abc3d3c3b6fdc6cf508c8f6a7cfe9f78be8445f00a13414e41c27ba31efc46d0e028b778ca57b2326d624e3af6be0d4cb2a80e44b3f1b83bf572e8b7516b8e4715376e5da06bdb7d487d6a2d268afdf5654023ef4a13aaee221fdf7b9a668b2f4e1858da3c1ae3a7a7279163ca9c1407e8c0fb69f0ddf75cca64f4b0f277acf9c469dcce264b8f37f9918626dcb4252391526ccb4f068879809a2b115ca1d75d7a1ddbe5c8261531a98494ff634dff81515fe3ea4e289d75631ded8b8ada415f6438ada0738bdf9f89e986dee9c80d82ec13aabf10849dad939e81441fb063aa627c4e316461fff15e61c85821bdd55b2cd1545f810c1f280e7852604be73963b75e33eda2e2300196590b9b77cac44d059016c0b08a2f18f18ededd8dcb1474b3e088a6e84c12eb0470cef4b409214eb47de0e277de2665c661ae7766de5d05bc357a2db50ce51d9087a66b1d3715f5be97a9ac56ef866fc3bd3025738d4310e4761b57b3f901c5165df95385cf70f064a760b37341fe2c8466aca8258fe821308d8be08f4d569e27365dc4be8a2ee4e5e13f9d467d8b6ea272e407386e9f448c1758858d038c18f49dd7f60874cd4059b5950b8e969df6a2400a628759d6d7839488674bc128e947594521a998a7e9aac9d61ced0aa7629035bdcdde11a82ebdee6145af1f9c31ab104219beeb4f222e0f0e155e6b67160f09f6ab6943a589bc4ea4a1eb3231bea73f16da8998af58b8f71d3aab3e2fa736f3307180e6d777bc5ad02be4d7c718855177d7c1826bdf9f3848c1b9b65c6a25a93af48c728b6485ab765d36ebe3fc82104d043238867683169cf120dcdd016156283a7e6171167ed19996ac57e4691ca3f49b43b03aeba25fcb3d5d89cfde475eac580b58291084d8f7d554b463b3620a63bad5c1fdbbf98a5d8200f0e0ff1aefab7754e70e4d666e0b31ba193fbc70d4dfc601464a7642c56385abe64df8f377e2e7b7c451e903a13df6020d3cc7bd73fac7f95dccc9be71af4facc9edd60e9e5cc5c99bdee1339fdde03b3342a4c0635c71106dbcc4ca3ccaa8ae7e0b9ce740fd9a6fce8cd805937b3daf103c246d3bf61a10eea6af21bc42867e471991459ea895bd74d6899da56c22ba33294cce17b88b39691c493d7ca312776dffb953720f02fd814e6b9c96e4e4a9aa6e2d255735ada1d02ebdefdfcb74573c77b4b19f751f55e20a5229a22e326ac75858d7eb4c7fe9a4ed48dd49be353269223d3021365569da4c2cbc3dc6ac620056c5aa7382a363f93b894c0a4fb1af983d90d8127115837531e9ec7ade4a419051d503c1501afdab4d9b9b9a741810693e256e3f03415901ca0eb9eb74083d88d7a1db546c4436e3b19f3be3da87a6e4a7033d0cde55ebc2f7123b750475886244bb6444ea293fe498fb1e98d9ef7b31a86cf05cc660841f0b21a3ced89cffba8cc08112fb9c20a8abaf1e9eeb7fc7c678377ff2edd2e4c4d3140bfa4106f46a8b137c4d68985dbe4b8d67342f409f75a3027dc6a71acfdec2b723a4e1b96a12e42e49eeef5ca77a8961c77c39d5542d5be19511d6bd5364ae79cb254da944281ded04e1e06b7d4de33e40b1086de49543e56e5d7d4ad2e224f31337351707819f96d36db4d3a29018403556995a098cde94138f71cefad7d8dace8a6e08008b22aa5d257508cc4f6a9811f036e7715c67ac369b6d80c425c79a8ee97c094c93dc18771394a56dd527a676d660472b9fcac4fe783500676a9aa6b0322752a73ab982fb28e5eb4ae639033340b9ccc8ba036ef1164d293627c41e094bba0bd851480d2f91ed8ec8a1d4a229f4d08dc25b5b7dadbcdf22b2269cea9c7c6b886ba74bc156590e440a9a0e128a35ec8aec4eac360fd9bb61e9804dedfdbed1e17454394ddaf851c73327022da9456ba7c4edbfe7a0031458088f026830c3695c5d89a60810c2cb6543880b892d8d5c93214ef78d8e7538028419592df1f630144856ea1ef215ef6658c350a50e018cf0dba35fda2694e1efa93cca66931d9560d90bb434501f5f420b8bfa02a566126dc2bbc9f4e0fb929e2c42637de5e2e77e07659ee590fd3b8facbe7847b9400df4bcd858925c15cbf1a385fd395d50b9590c154928cd95798b735faa3acdb4a8874672041d585e45318ee942b3e36711dcc706bda76966cc0100f14014f9ea47ed9c924035e2138107f52dd26bc5d0312879505d7ddb3b468765086169e24a6e1919de2eb169acb18267fd0ab0c468da0ac6436acd2c4e08fb85f134e648a992a69cb871173675e87906f30e7cedca148c00ddae418e07e1aabb8f82f53127635e09cd898b348d4bc5c575cb6656d4bf33af7414bd26a84b5184b9be5e15c384902b1c66a6bf08b16172ed8084de06331119df75913d29ddf181de3bfb9de1242183ee797309ca14ebfd5f8ac368aa72ed7403fbddcac4077d669930d742240dbffc1a2b4a83b043d904285ebc0937c087c9025c0472a2b6e546b6629cddad4b9e60d64c01e0ed4d4bf8e580013e2b215d24893b3dd7629e71cd6c9f906205ac2a1572fece8a7d95adf21ae18f530a6bc18291f22e1b05349abf287d50f1f6724f01d0cb3fb7e0a576997c3cd9c013ddcae7071a7edf496605715568407f86ea78b20e66404676f2b34618060e180e4f9dbfd9a70a1f96acad53deca1db22d87342ad2eead7289c7e481d2068a74e62f9c9b90eb02aed47b57352b23009adc93787eaa74c7b8981525eb077fd502e6c476f6fade93b53c29cea27cb4a7594b55e4ca11b66f94ecd43187fc23d27bc72d0f48a23987fe95b06940a360e9026a022d2ee3a11eb72c8573eea76accc0fc2acfc61fd9e1655c77bd652a5dc40de7dd0182ff371d5a8d3047bd82a69a4b75452dd2f4409c5176b02488b9ce6e8b5c0173d96e1a83e5889ae16b4a07b09afd8f11b9b80f812c9ce794da70ce46cc3e31e24325f5358cc0c64deb9305941c0511ebbdc302c2e362123dc4bb4c9579c6ae2f692949e92a76f9aad182ab69549702421d94c5625904af24a42620f331b8ca6f8d6ce59306517ad93fd6d1fffbfbdd16f4f120540753a630c0f56b178b1672504d1cc0a20bef9d93c8777c036d881a42a72dfaeb14a1a0b60990a8c27f978c95ce44edd72e677d3be62dbd26b3c9bb1ccf1128f79aeb2a41f6ba6d021300f0ccc1ad36169bf63e36b6da9b3a9a6e54815d3445125a2d5078ec0eebd58df4487919fadd4977129aa61ac337f347b3adda82072d758925f4ce6a5125b9e4f87dfdc5cc4b3af5f9589a9cc4969afe7c6b99edd05462d1da3c40d785b8067c4c866a8579fbe4d94786e0fb0b717c6fb96e2e3ebd72b6901acf96c0fb174c272f3559898019a3d87ebd6d9ece260ec913300392b541a1efc0811c10af0671206345b46a588abc932f58be6149ae6591250a8740dde925cb9fa12150c9f8d191163ecb613418058769c54f883e9c0b533f6d8f568c6a907c227d16054af09c6c73676f5b9859beeb5a762ea323eb76853f4a3ecb113ebc42f9c99d89e5869777448a26c40407362a45730621c700e3710a65ef8a49d9c19a2692bbb37c1fb4573498126522468f738da44bbd4a719383582244a284645b318bf7de280d1b9b9829af334d24c49c50fad08a3c1c630a8e682ed700682998fe7b121bce47bbde010fbc9ab70494d5d0b300b846e8987efee9ce09cc1bfcd828f18ea2bc4f40440f89ed48cfb103a80e77e26967b7ec56740d18ee40bfc9fbc6ae8a0d7f46f3bc09b7dfcc590b55e3d8fec26e7f4dbd7806f550519ba3ad64c15b657fc726001b0644054aa24f9b1dad492dadbea8082b176c5fd819a8e73665751578e74ef32779127616a28ebca4be7270c195ac077fd71627faf95fd02f3b6dc45a9f47d3f666c318d752ae08c17d2385e810408d90fe0aaffea328466c5fa82958e840ea6b7ec4f2bc6980db0f3a86461f51cb55dc262ebad5f326533b6bbe0d9c4b283f564949f9cb05291ddd5371af7713a088fb9033bce4436d93190fa742dda242d725bb1fc261925efed8df4b6e3040b7e4989384a464752833f83a087ab09eb0d2be8320ffe552741a5a6b90ac91150fe3df65323ddbfee23f6237c623eb57a44f7dd67be498c97bce8a03dc2f695d0a41e270663a06c67819f4ba401a45886d78853efce02a00335cffa3b47c29b5341f43756fc5c180edb367aa43f104be106d233224623da7738147527e42a904f5a1fcf1d35261139752f9bc38dc992095ac84d03f889024bc8dc211a1b41979ddfe455f696b8199a2e5ecf61625293a6e8f9e36718e9097badaf37098ace700000000000000000000000000000000000000030711182024\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-02b250a84d15d015d65daf64921d441de7eaced5dae8d5ed5aaae0780710cc6f6478e91ececa60d2de17019195875bb3bcc202adda53a06e8b8faef1dbb67e391e8c8e7145908fbed14602f4cd5e8c5c5024cb3e65fcd88368454b7fbf8b08553c0abd7dea5834b8ac4da6968cf7d4e4a6771111de335b8a1ed45a18a20d7cd4e9eeaf18868950880600a531f49ab5a53deed6c37ea1c22fc0769d8a8ba5a3c49134a80a649b0435e457314c10b7cebe346a822a005b4adea250c449c4025db99c8cd8a3b44a3582e8fe2c1f37dc64503f90143a4f60df3a0e123917d68ea2bd0ed734718e38a306e64516e7a30eff69cb22956eb3fcfca07806ecd92d31ccb06d2db525118fc75973c04c3ded11f9425d2f89e3442e8a4393f469278cad14b61b6a7b15931d647a867f2753b69b22f3ec80dae692d7cc06bd82249da6e24570831ee4088b052687d8277385fdd1f88b4291db8736884928eb2a3fedc6b57e0a4c9db49962ba32d0b75b0c453e63a17a85932e18853bb860869a022dc48a96d6ceb1bb78d262ccafea8f05d61d4f9131efd3683e371c60781e36219ca5648cb69e65b11c2f2035f26827a123ba43e86de7f3f2d91f07f0bce7bb833634fe33d094b9c0ec790a8560e7475f9570fa638f104b67a7c0bfb8ca02df96596a4a7c41b5d192c44c9086e387f6a868b8600aac16fab9582c7db786d859348d66ed769ab476f69aed6513178d594e268d4a2edd29e684ff71aed82504281589da608904bcfc3e21ae7ebf53ae4acfbee19324cf10bd49803a2508cb0d80940840a9b8c0d7ccf651f134e03218b076d5ba213491163bcbf407e42dda28aed332d455395866e6d5e11c08f4b76b25844fe2a44c28b13299a0f924d6b541492977c6d779a06f8e7d19a145f70b42a55f4d200d6bc97e052ace5af0d2429d752046f25a8d51eb43c13faa172d4a9553d0ac05e6655c57be3f232329c97c97f7315016a80e6e1c79d12c269129fc89b9f859d298933d7b0128a69508c6ff454fbb56a502cb740acd4623b23382f3b3857d1bfb0776c3f1405271c551cca1b4083a8059d755f2a55c39c2ea836f8992a1f386800627f30fb3ab6998d3b644855a8ebe7c92f45accdb7ddbc2ab67932cc4e75b02c78fac8edb89d5e68cd9bce2187eae5f612e7e4e80ebb50fc63abacb76e0f317a299d72088253308f8c5c1b9772f064c90496aee1282a4e3a9de98ef74a2c3a4899d117376aa2f5ebac04eb83d57eb887ddb6419bb266c94578fec097ff2ec3f06230430b1fed1262992f0172ccabbce8979b5cd43c87c2cef2144270561c6823a9dbdbc408b81af10680f1c6939f7c8f2487418d7eb696f491957a4ba1a9a261eba8d234a958c7ea2766915a3d483019d83daf0b4e1e8059e81c3894c4280288179700b0eb984a401d80bc537e979d3a50543e6865eb5b73e4dc0ba55514f22c034cda20874124d95ef6df0eb7e37d7e425dc53d0b0b81d6a3b222b6c066af30e1fd6d04b732e4ea9be724bc115d49e0ec3db841db81d9e0405c5005b475a1ce6f84b8ae38019cf2c21fb9ba58a59e983b55aed4b758851dee4885127c5655a54e3a79eac74256c4928274147d61a4c6f1347f4e3f49fd25b154caf3db3cdf7f885bfdbeb24ffc02226569ce08127fb17701bd8ab0c792891d0433013bbd62a359852c5f90bafbab1ecfc0b74d6937320b9019a955c05d9e121eaf87d08c4f55068f3b2973a2f4d1cbbc74887654d6ef8ef201d2b0c90af205f15bb460c4a01808bdc27911342a476458504c01de66877b9acbd8c015e049e37fd1f90c0b4e50b54bd83db0f87011f5d56e85eb4cc75e9bfd9e92b739f833119590e409be30bc75adcacfd0e6f31555f86bfe4436b9230e519d0983da0138f31278e6b7ba165030855d433fef12032855ac24d7d8148a2ce54f3ed2996bfbaaeaab3595ec02bcfd0c77480e87252f2ba6874d713a61849d303794d940deb31c1306963111fcb6ae6e1db1715c1ad5b49b0ba4262abe8d7c8227ac428d51ab503d12caafbe0539711c956cb5a19adb5cef22bd1c52f8a297913403d8bde655af805e96d20f277fe873c463b0bb747342804a0e74657c6c14d53049f3e42eac9e945e50d771c7467774a755a2209a1182a7f7e5e131c61f792e4fd962e40d5cfcedb4add6eb476689c508ad8dfc5552d65c937e39018b151555d605075023598fc479dca05d227fdce3bff4e2583dc972d3cbeb3b2d6d2de7e6ec44c00ded46ca34b8358842d0415f7332bd032b933be3b758b7ef285354610c0abb9d05ad104d44fc8e057f6585c2a1844cccd3bc394b0e097ff09da8841ff7e3fe82aef8cb8af844e70a1cfba3d7b88cbe2a82a01f49c06d00a8a44ca2ddb0d8080faed34fd0da509e80361ab110170631d00ca8d5d8c85cf788f105aed5e2d90f870d47c07d08dc16db01440c671d1c7f880bba7a69a76c3bf64ead43c3b7f0477c5fa030f93286a2781b435778450b4e73572423671f4861419c8057a4d5672877970e9121fcfe6b51ec469a0f71b5c69718c54c3165041d177480d761152eb05e2c3cd49a063a25b05f5e75a597c840235fd599618d72f99f088086cbda1a2a655aa528df1d694afbb5e27f910449863c01cbec95a297c5f89ef2e67fd0064ee5fc2449098a43e2bf86c2943007ddf82708326d5fcbdd6e8a5821f9707b6a7a509e27306f8808f5c0bb85b8edad600f1bb4d58cb4b9cf6a74767f9ff52dc\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-c344d3409be7db98ef0a349092d4bfa68e022cdf72abd10851fb824519086e7cb35ae13a93132867d90ce67d9c99315a3c548f7bed393d9eb71231bd9cfd951c53cf8a7555c2e8899d7914549a5565d8531685c7a02b82f3b95f38fcfe9c24118358f4dc4b0bad89c5e169e8f71e97e5f874bc8dea40c70e9fb2322131eced692b164c011d04844f0cf95a663a90e0409f2b36d8d936613343f6078751a082056d1c077fff3c3e0bbf5a9edac10d8ee0be319df29a998e5a52f06dfd12c47eaf72a457b18c73bce7931b74f28e2b3ca2037f0711b8a4755a860fd79bff06218b965a1e1368128e3db4401bf37185421d4b080e20a017f9695feb484b7a4ec6623cf5f82d99d1e0a3873d380cc5ba715021cc8b24f0839d10eb2b1679098330d772a081bcb20ba8613bad19841b411cb84e4f9bce9449b5d1b79922733e0acaaaf3c518d316c63a51ec49f4a5f30671df7b36e3996201fc625c91ec7cb621b54f98bce47381bc062be82eebbbd2196fc8fb1f26405a80a1cba591820c6b90f9374406c97020e0d8bbc4cf71d5379d54e3412f69d19b59237669e1751355c1721d097f07a218214428348ccbc0c954ea7029dc6aeb605ed6fa8334206e230c39ed5a836664a6c0b848de5c6a219a63ff24264ee44ee5d9f068a41cfe62cfbf885a2bb4c71f17863f5172b9b4203e9e9f21e0e744807277cabd3094d2727d78f930ba8779af85026e45b809b8b3ff259dd8511981e7955924bc29d448a5175c7742b7a1bd7db170c55a9831631267789adf7952fcba1391fc4eaacb7c3429f43a2b634553d8fe47ad9f39f81e54b0461061f6f67ab6b72a25e99801616737e8687c738b45a8ff6f05f6b5a30c8d87f6bb4e2d4aa82ecf9f7ff4d1a6d6b5ba61661e8a75d4dec3daa6ac96c0abf7ac09da08efe3eb73ec0de8ff231078bac1cf98ee9ac6aff210ce15f8cdabb143ec77860bb090463c0e6b63c0b12249633510404cbedad4eb85641630cd131a7897b46443008e79edbcfe471d37159a27a9622bdd6e34c1943e0b5ccf35d8885a9d584f6a54cfe7b1b45162360b573fc19055f6ac05df20662026072faa0f0fbdcf4f9b7d89d77fa0a3ca7ea0d857d0d9b94e95a406bc039799ed56e076114dd9f7c8c028c97e2bb813d8862da972b069d7c1e251487472c291baa0c0a9c9f349f29091d8a4332a56084e11296d1c72b7014045ee584056e9822b113136ca9fc27b1487f64e4fae57b31df3e6e2728fdeddb4437a8257af982cd08fff4c4e6e9aa82067182290da938b3b969e5ef0d15717f0c34130cc2d9bd29d9a4ea6707c9a45830c66a2598d8678581d9a389bfad0e34c3cf45c3596aa986380458c5cffc1dc06c5e143952a211288ef0d67c7375f0d9f59ef10a55623af7b6d2faae4802882d09cafc9da95e7e0254b147fdadd9b8b28498d625e9b0603c9e7e0a710d34134e6b4d2e31003ba30acb30df03a913851d5191adde83fb0278aec64262de99b7ccb1c6ad5358651f336083f59089beb924db5af90be237520b5354ba63393c2514f2f5c815b694258cbd56cb7caa5de34986f214c566305163782b9a67db2f1e51c0172f757e3c8d9804cefb63df98d4297555aa95781e8c1114d5c53b06491b2c4463790030d2d28d159c071c081286071d95cf5fc624b69eda6b2cee5d84ba30ee0b4357eaf5429c26fbcc455357de8730f0b50aca059334ac5af33c7169208be3b060abad80a41d5a720e262075442b1f514958120dfd51927363fb0b43767f3bf4ba7bd2669f79d9ae38c8b244c9a1334f802e7295c1a5b2d236edb5ef8eab028dd2bd8fec9f0ded1dced5a352f55f4b502f5aa12a3131bccbc88a2dfe990cf2cef02ae787db30e8bfe26079bed383e363576ee704e2b2b3b6dc0254ed4039bd0155fafa471919703f632bd8623350cefdcdad074337d5ea637a95f995141b21fef74b93be8fa18ada82dca3bb6ebbca0544d790ca07c42086bc4908a4dfded5d0c09e8c8d4382dd30fd6c586d5c379fdfb11f69faef1dbf46b0b03432c0b9967e6c7417b2488aa22682c5ee0fe6a08e90d6740af02f131c5acb53fed64329f8f108f53d762736519923ab734654f968783dfe8d13d715e9db219ab7441fcb739fc75913b20334155dafe6b85f28512d71a02e463e8f58162a2075d301d4215c61164b5143f096decc998b006051752431e1d1d7d109f92c986c40d2a8f17ce6fe1c32c33631974e47c73b5512697f5e3fcafcab2a4f8b462685fcd5c19decaea96d45a7c3d35eb6b81d52d3d300f4f94f2f831e3412b12429b71b46253c83d849250072c035003b8f4c0c7376e502183848ab14ed9f8b6ed1c87d554223fba1bc99d1d065cbb945de8968fe41c161c301b3cfb9c181ef3bbc120cbef645da02c295d6ed66925802868bc8ac6b437550637e5a16d429dfa4b124c1f1045174507f706d3c01f9343ec58bf79e5611109530e2543ddfaa2fc0641c69ec8f3947b4350bef318a55998fbc25686a5e115c35db12a12e77c8dd43863c2c024745410a0fcf1560f1a902bacc961d931f793238684944140150a99f2894748d03a83e030ca52fd83fe43bb9b7fe43a9451f3850f92df5e242a1e75c3a101efa727667ac45164c35fe7143b4ca2119d76980506e8981c4990c8f391a0c9416647554db2c46256f3e56963bd4f7ef309914dedbd893fc6855caccaee377d70cdd54c64ccc3e3d1c0e197684fc692e9d64be1b07af246bf6d2e4f38d2e8844e01efdac0b24dfbaf32f08492a99b38486a8db4661dac565fd847d83993cefa810c42cabd357b3b1d5669afb73274be28d637d8c2de41305c33ea3569f865834effe4ba3cced51fa00ea3dd7f442894bb2ef9a92378ea447fa6af9ab8b3fc01ac45c7221981471aa121d59e77a1d472906c437004ebbb168cca7f518145494516b1d3a1aaec164e5f73a96c244afe367943eca32c4e61bb5766122f1f19e9768c4eec5d76f3b10376191c5d42005a99eef0fe332cf5cfd4ba59f725bd50916348b5704943cd5d14bfa826630a9529744148d9ebac15a84cbf6490be826ea51fd42e505fe9e74a13ec9a1ad546c8c22e8d498ee7a0dd75387240c3d166fcce4d957fdaa53d0573ed995a229e2744bd8493d44d774910625310b4edb8e46ae665c40599c7b48058f104199ea6ce1070a37fcb383ce4e2af436185c4a3f20e186a25b8dbf4dfbad8304125e186eb76b6f6ceb7fdc51ed324272945e44b0bf11ce27b5b6b683fb4efb7e168ff13e46f1f0f4a136827d8d56cc6fed0a9fc8a2abc8f5c06d1dc0de33042c5b840c6d66a8f27331645a87fa6710f9f057685fe00247cb7f12b229a43f539f9c4a6727a8897c69d8ade9c2af6538c594699a9f428a998bc1e8d11adacba134649315ad51f73c1bdc11d8e5eaca86a138ad934b30b376d754bafb3fca13963eb800818592eca6807867d9bd23ec931a343776da195c8d43830028cf4328701faf124a19beaa44293e797c2bb89b2c9db45c7d3785a0cf5c9fc783d727da3a3f20f5366d9f39bf49bd1ef9811dcd74804716f82c0afe9a73c88138bb23babcf5b7acc87f5dbdc0ce1e39540a5e5979ced0aacc221362e2a18a4af86f34f9b2c03a21dd21f70ffd443be4bab058acac295aebc452b4fd32ea5750f4a2fe6260c30eea5bff0fa17f25c3dabe3b58fa72f75cbfc18a84e2ea3d568cf6e66e401ec82753652f44e9410bbc435721a10da1eec613e71f04023f3121df6b45316795f110c81ec9124b9a5568c08041eef364ee59b4eed261f3edd834741845ece57fc5ad1f50d183d03c0aadd61eddb2f13c46093082182b21d4bc5832081fee8c81c1d9a77f132e8e5e9f5a94650222dbe47f5d7f846b1e91d52f62609cf0420446b55ae4a96c2bafdab6a8793beedf7a7ee9f678a099996b6d6f8221427fc86e1a260d7426ebbfd7b9f3e0b9029907b00cf77409b24f73b7f21fd2030cdd4e36fc09322ff6176f49b6f3492076eb9de2d79f41316a202994871bf7ff96ab0cf94ea11ab959ebb4fbdef3813698b1c78e13f2422efa15198dba6af17ca9b2ad199f133076f9ffbe8496fd28e003575579d6f62c69a237c588ea8bbac99b32c43393b20112779db5f9989c04e9530af29a7cd959fa4eb1276c69d46a67ebe363d635aebe19452416e01db478ab32a32c6e95d43ed4693d51f4ded754c62f53524d4179dd05a102acb6e7057c63aba9c8664d9140f866a359f755ca2bb4b0e66b3794206bfb311535810a24a6256a8c0c79c4a87a8fd40bcb9bc23321fed6cef599deffa6994cad1bdb655eaf85d082cc1c626727918e63eb27521b6de4ef5857a2ea372f64409d4c6885d7eedc15c95aea623bf081991890b8d5673cc9ca26483d6b7bb88fa61b31a13f114923e7332eb2a52b9c42b7b341ac6495d1c4fe01f627350089daa8de8cb8b4c660ec9bb065ce689d965e14488e67976502337f1de27d825cb3e6f563312f1a3467e1d2b2628b5a3ebe401b6533f549263babe79b0ec66132bbde277a1b4b8d913b1c378e864d3c56820b6de08e3462882e72573e8ae08c64861669ab8e92b575c6e7fd5db3a698895d8dfef064b5fbfdef1f411373a788082a2bd0000000000000000000000000000000000000000060d141b1d23\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-2bd5cb469bc4c91a3b3064b58eac4e6e03a617650702c0d2d7a74874743bd42c097727845d5a69c2146cf89053741be3476ad6a7d574fa59f868e30f5d4d1f78157b0db9753ed7e6687383c367d9168806c52d5ee1cd548c65449576ca155cd2668aac7faa7a692f3660832c4e3d65ca6e31b1fd5f7a1ecdf76d4eee120d353e683b67760c52ddeb28c967c5a99cfea6a74a1bbbf468d8a6ec400253b81c6780292965478d5b1d90c37bb6a42cffc2d086d2bb03845e9f1f1d09b0bdd27a9c0495b9a86a4d0535d84c3c2748c7345090c2cb6d4fd1dd330bfe860d1f666567e0e164602073d427c293046ecc8d62d50fea16458e7cc18dfdcc76a01dfdf5a8dfef558c94e6200f65220f67d5831809b2c17911778ee60e724b9cb8cf7d54f3fc8717b2067c17926c69d7d05830ccb3d3d3ef910b622a95127e0b017eef9bb43823f977e904c7fcac76aa44b08ebae23f8898409db11fc2697225d06ea646fe78afe6c6c5861f361f15bc3008aa194250b3d2d14232535bc612afb523d4967370021ea8b6e4a8406b4e933c6f96c244eb363b38b65c35a3ae906051d2980f98483653c03a8e36490bd8d5bb80608eeca2ee9e8e570262ad2e0c77850eb8bdd1099de5aef34aacccdff2c152c3cbbcba38980f227d76d563b6ab1b8f62892e51d24dc2e648160f4cee0b095f9d9bd406ab0f1dc4ba9706611d9b5eac5fab8e246e2686b3ee96bfe4ddaeb26d0b1accde64707406572898cb41ecbf927794e422fffed966a0247a76dcf13d61c3fd256773ac41466befc8aad6f6c26d7a63d0f51efd63fe12274e0952c0047af384e7ce9bf7d7cfd329dbd9bce351290f9ec015cf784f49fc31648147bb46bc9bdd59418f998eb36636d82c5f6acd769ac965a04119aeddcb199f055ec3770c19329926830226d12a990057a2c60d4fccfd4fb20350b54ac2e7b3822cb6a81b0c2928a95c37ad33fc7760018c1a09c50b5e0ae0ac0fb0f89b3224b5c21adb473df9a1aaa9a338256b54cc5eaf2883bd282ff8c406aab2b67575fa1f6039d59bcdadcf4306f1e6b3f28e843205033101f7839b63b067fc1bb727ea98f9d2d30e874d2f825c1115a6b24623e0526246d9a4b8e8436231a9c815df3689596fead6c7bba5e739ae08b59be3c01241e73c1a7a2f9f0cf3feed564f1a2d5f045bc550707c52b367bded98e00d91190830024c28a3fa944edbbd4f292dddab123fadc3b14166e55c8eccfab9fcad135acb7bab9d00510d422232d5eef19ce46d742be4c2fe83cf6143028b8e0bb0aa4660564df0d717afb305638553170116ca5622e73fd7f92ec1a5a702ba0e26b0e1980c4eb38faa56ea64711e0e2a141e9e4062e6bc9bfcc387b100677a9deb0999fbc064a997b3a0c809b11456433ae9220ba1b0f4029fe4da9be24e66124e48f9edc05e9e86656fb7b1033cced41d50a0055be663e9bbb8a5d161b78226ecde3d7cb6e5b1995631cecac52be9c8986c0b22e3e8dcaf108d09ef484c579c6a207598aab00446b0bc847ca42e155b730570c365033498f0105023ca8859421aa3b43b37210eda50ac4d9ccc6aa69580fbec6d775aa2d31d6f97d3a079e0a164b5b5d48b5bbfd7ed8eceeee109e051f357f658bb41623120fc116bb202154def1bc1c11fa9956ac89ac065329d00dd0390e2611d244377a7b2aef7f00911fa3a464f68c88fe01e1dd5ed2743c11802af5a531f0956ca860f02009fb4dcb3034af02c905147038e3cfdbe401ba8998a91be1e119f9b1c674846bcb10c6c294ab4ba9e8732a01c1b8a0691753299c7ebc20e888e232cb56842aa9cb232dd585d52a1a46e7537a4fb271adf102b87e65a7694198ddbec6a697237a06091c81d33159a9b1b09af04fbbf368d6b44fe6ff7948977d339883821132959cf9f4c7b01eaa18c7bc0c38ef87e5c782e2f5de44316490e4c94621fb6a967241c49307d1356a7770eb5d0489e4631a159e4559516e0ff342bc093d2bc3bb4c4fd27ce3d21bbbc906c12c8060d11202de3ab3cbff4488676531bad3bde099adb4b547b8e916ea61565b6986325c7f2fd8649d79f42ed035104ceaea3afe21caeff7941a5ab5728c070ab717b675dd9ef985cfc0a9103d89ce52822aa532429bd612a0c13f65d24cfd27ede804411f81665fa13e08f9a1e39efa23821f2d21209bd02a05a41e6b5a9847becd791978fc3d90b78c57b5eb693548104f959822a78c097cbd1c12a09bc175ef97ae954c738588590517f6a7afda7732d2864845316d17121ce00e889843b76fc250b3c865e4509b1811cfdbeb619f21f6579ee26ea37e35198e59d416841876785cf967ca9d17ae1e31688035eca51859296ba364c8bb88f28580a75e195c00a036c8ccdb6f13beb393f4f5430479516c98efae15f2124a46a6b506830e50a8e37ee6e64a6722d659eea4a52d2d6def30d6387fe820ca189ce3c3ba7f45b0eec9fda6c18448cf33ec43906d6bcf98e20045c7b30967b6b28c988ec7e9aee979f0a310046a48641f982a7d9997c7f0bbe386f05458ba7dbf49647708ef232b3ac57fafd418bcef724ed3bbc9f540f2a186df0187b1e49bb0853acdf9dd18b95331ec1d5628a51c352a0f10b63ef512fdb150c63d6531b0811d9a4f071c76446b3aeba7fd2f0fc301e5f56fe5386ecf5c1759530a88e642b4b45ff7b67d7d3a234532890ccd8803a851adee2aeb35f6b4de938da6b8bc76668739a63da699a9b731bdd5a8b2f\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-C9ED9B897C34D7119115A0758332FE70D4A9E11FFB2D6A800AAE33F85FAC59E715AAD93BD79DC8D958079F3B5C2422F8FD1A1AF9406E8DA3297226440E30183051FC9AA52AFB8BEEA2228E88D193F231F2422977DDABE4AF4F0437628C6AFBE68F70CF4F56153A2691F7A4241EDCA760D4B3AE0A17A8A0214BF1BA65221DE64647AC6578F4C7E4A14C401F7DCC30A10A695A7F72B04393F4E9C4163AB68667B1757154BFE711BB54255F4DAA9D8AE6622C71EC8ACE5BB79C6B4C8AAF1B0A0099EBBD07B292CD7B55E44ECD68DFFF4173743145B71F536E7D23E78C63679FA2F3C72CAADEFD5A9471280CDD3DD8DB83F8AFF14FBEFDC8C5969B050D263EA462C28CA64362F7F165C3EF427FE5E90A83310DCB07C9612E9A0B8EA1D0631D84B4A7F1C7485B0C91C3B7BBB0EC98D353376B692BAAF24C5389D50250F3BBA82173DCDB52382176EC5CB8BD531DEA049C5B815D788491608FFA2AE8BF486849810AD89BF0352ED595E4EDBC0B81467D72944AB83C3CB2F90FCD10810EB65BDA18C43F9A9A5D98E714BE992B7DA02E9F7C389F1A22810DC0A473F8891C43932E0F6B5D3A21C3B611AF6C394AFC576C07572DC4A1E56B4576FE615E516F48544D099683EAA886CD41DA848567F70C2103C467D271919CC5935605C0EF05909635D431571E5A316E299E553EAAFE9C7CBF5063E2057D297F60B5DE1C17AF6B97192E840474CB7266A76D509A10FC7A71721D705A9DAAC5BAD8A52290C1D8DC7938663B24700F992FAB008CCB3801258245A0F5F329A4FE5553F4130DFB1D673338889B357FBF11681099FE9BFF18AEEBB31DAD290C1401D49CBBE38277AAC8A99C8BE4E6EDD8A0F3C901082A789A1037768AB7C3C704BF1C6E890D20B3DB6918C477350F4F25756BE1742DCB31705EA9DC975DE0C38C21D29B340C63438268F6CC399BD644EDCED36A7B50E8D65A507BEC51A31BD136525F4E7AFC1EF9E0E6325D032682EB4AFB7FB22F1716EC6F4C9852054429B5C5FAF3BC86213F6D800281913D5722F3A380307B59E1CC290EE66FB9699FFC627770B52619256C7B76D993FB4024D2DF0602F102A6A1257A200DE1F39DB54614FEC2B60F3728F59482D71C7E5BEC36F0D90D6FB0B4FA252E7FEC4F0FB9EF539257EFE87715ABEC75B2A5FCCBCFA5666F1C9BE2F0489E04E63ACBBB239EA8397FA2EC24C25C538BBBFEB74EB8E15FF93B0FEDB7F36FF67F7CB244CAA067EB2C005EDD2AC9E0765DD38E51E7C71AB72B056B230ECAA8985DCDB50439BA261A0DE57E68700C64655E1EB8608BCCC33480ECFFF1BB75D0AB69CEEA8F2E3E9515331A1EAAFB9BA32AF62798DF761267475DE343CFCF5A352C907A0314365B8CF6FD2E72F2142018C4BBCE4CF0A160266DE320EBBA359344A60D32CB135F5FF943173A3F9C7F4A68489E78621401425E5B8E6273309FA3313DCBF13D7C69B63C1EE34D3200BBB4CF57518A5E66D010984AAF34CA9B7DDC914A3AFB514FA1B9D3FCDF3324998D0D9058FEF10C30ED6B381C41DE363CB31C5107E7C00D4C0CCE485DBB4CD2092CD929E5717DB8CEE4790A48475E1DE9178E49B13C5173B6F301D5B7BFF1A9F8B3807A5FC84DCAFCCD8D585B77014EE285074E64448589A738F1323C7A865C3DD482499640A3F166F38E37C6F9ABA8263E4F3D1C2E7D7AFD16BB02B9B4BE8A055452071F278C32C3247DE2BF83A0633BABE7FA048BB18FDBA27022736615\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-6d9ffac759de540cb67a1d3ed0e50afaee62c1bdeae34e94e8c88d8fa0a86e22b911655d83e0197987aa1151adbb629f7d130a143a3c0f34ea817898a86d76f54ec5fbcf4d0ddc93ce671516be812b1eaa2fe2da29d0381d9d5cb8e702c038b8b8e51d3ae18d0837fe459be7cf6e4967233344749fea70a74f143fde0a0a9582366710648c4f1b26152ca0b56bb6bbb6011264960f9639ed7239881337eaaefd07908359dbbea6dca1834f03a753dc02ebf67371af2ae1a82183f654fe20ce6212eea1aa256b8c1366b4d13ed800e116365e8f3277eb522f2793812329e730f56f6af17cfde3273045aae0ec8188cb956a0058dce1c4d481ffb1e114405fab0a5e9a70af8d438a2a266d9a93332e621231c4ca1d2aa02e417a327a6feda50ac402263e797fea04579ff60b9f026bf7a97fc3378790e3dbc9e7b6cc12d1c01813367647bdd5f8b867c9e1b2d05c870b5935e5f19772fcde0d8116a9ca9d84cd340ed26adc1033a8615ddcd29f86659f3e742e7c08cbf197e4c2f680547099b364fc67b8140a22eff4119906322ea1badd4af4bd008bc46d335569052cf26520938e417c8a8a12c72cf0a451ae2f209532e214bfaffe20414b4243d9351093215ec3ea78a5689e4f89397c7d309abc54d55d3dbee907ebcc6a8ef921ad61c67c2094081d901ba8631745ca131a302fa813c7137c1f3fd66207ae753d0eafb1211ca4e0d247182b3155e12a42e1cce1c415f74677928f7db645889ea70928679c7fdc7e36e43231ec831a6a6b6241bf54466bf530553c268cf5d63b22d755fe9d341b0ac7ab830a303d3f74acbba37de4c109a63a6457e9f79955232e368e9b4aaf27c6c5d3984e7acbb9d19d4cce1b8d53a04d7e137811f10ce33ea05a0b25f0f5ad1499e39542a264ea0830cc2b20646c170495e71a428d35ce3b726ccbfa1499ea716df3a01186e776586d431b90978be9536e5587555aba18ac6f7aa3bd44867d85b6fe9727496d6e0c8e8e776cfe346c5546bd262d30492cb480040c42aaed646969120db4dcf7c3adc8a4e469680e1d5d1092594436655355631bf037a3cd4b9dada49c259e0c6998d466d6f3df582bf86cecb7f4c874f392806cb1dd3b08d3759792875a08d589cd8f8dd8bcb533accfe23001773d6b9ac4dd6686b4ec3ef8cf4335f70d86bd155e5e473666c3ab5b27f069616c6d87f3969a55a80e59825840feb3c82816ca0e7c544eae787ced30e7e5d0b911273909ac11c5f0407848a96fe139887569491fc82b02e70134a1325956e65f02cd97254d4f469455f5ddadb32d99b851020ffdebfec3c83fe99ac4143bc4de6e2341948494dbff83f13603bac25fc5801cd694eefa4439afc61ed048a811b355b75ca4f7f7cbe88debd671657bde2840e95032129f2f40fcdfd160a13c7c123fbc811a7759e86f914288b417a6051393fb564a8a2473c3cd5216b31848cae14dd935b79647aeb287a262a59d37da18b085a86745b2090a83b6796203baded78332e5a76ae6d8920473d268230c00a442af276d11c5179e0b776719f02f4d380861ef73ef946dd03cedc6b7e19c812cf6367d6fb847f0f00b0ae2d5296122bf26553bff501afe0d217628dd44a8a39b509fd5a50c2b991d70eaed000d85343135c8e1f9a4bc703559e08da575ce134e07a33e3f3214d75f959c85e28329aa2242d8dc69b12ea2c95be537b8d1de119a7ce7d7a672c7172bb7f9a5df91ed8e10adb5ca072a493f4199f1135ac519484678681bbc88135a766490f99c2b3d4c6951d3e5da5e169b908a60ea803227fb870510c1963196712d0283102d6883b9164d9c30f9853a799696d488ad8834b6903602d14565faf6be82e911ea41d2cdefafa2506b28f1ee5a77eaa115b91e1ab44b7123ec70114d0c4a13846bb046bfcbfea6097220fa91d1e0605017f3849f9e2be6507fa4b7bd4239ed56961e70bef8daec13fb486d458c7186b99adcc45ddddb818e4947c0e6c5eeada18f564bc664f51efac7a8f12a259956ffb2165f450d728ed5a3c9b4cd6dfeb2f90a7711620374a66510fb3c2b3fc316e15e52a5f91d3e38b3313b7f9b5a80b6b181e4c4fc036ea2574d219f179bc1afa98fc918e33a52cfbc95e20c09b4140367c978532e6be246c8cd1d2c5508721eb298db406a92e77d833bfa7c5865c997b402cd8c09df2c5668cb38b03eb0e86da9707853b20f1ab23e11b6d38421ec2d6882a9121b847f55923601914a11650f02f99895f9920e1df904c6f45715a4c0d7218933149297191f72eab16eafb816d5dc1f59c30a249b8545e6947ad81d5b8f562f42c016ad46f19f5ba10fbfd2a1c22974669c376f496519525bc7ffdd937da7845efd848aa2431344c7314d6eeaed5610ed1ff144794091ffdae46c31fa9e7116aed7dc93c4765b9b72e021b825107e248b988d11aad8a9d466b4b109ffb874f26d6d7f1a12dfcaba5093d60179d1cfd2b435cdac23f6b64cfddd536c55354aaf6a76d738bfc12ccb003a14d19b54e6ddba35dedfd5e4f7f8a18dbdb4d7a8b34acfa4ec462b9a9ac8fa962ae9bfe353ba9ee19d576a320e0f9e22347a84fcf58c0ad61429f9a5f22809b72e91574052534e96832a99db4fe9e22e20dc2ea8f5cc4cb70c844ca9a0334f92ee2703b58b2b09e77c71e27851824c78bf3f4d177237b212f73d6681c6bcc29f12116bae1a25666035313ea2af3e4e98af8f6cac0236c392c39516b610234304b4e4d1d02d8d8e349dd00db7b8acbcaa4c79aa99f711ba693c7e93c9a71342453add96a124e3d06e46c503425a311bc5249034ce01fcda3c5809de83a87d4eeca01b26f92d9ea61616fb5383918e87522bb636110aec1d2b43afdb4258a51f06ce0af14a8687276d67033d922026dd190346844df0974280d56c22fc76fca0132615d1d61bed3facb80f8ccf45ab82121ac3cdd34c425f0efc86e1546f35cf470bacc1976e8c8561b086c52dc71d9fca01223707341c9af7ea6791bb08c2d46a578ba479fd36a2ce79558387afe1375090a53aeb2183294e747043eff104374f6f247591860028a49ee51c5327007d08bda15dfe2de5109683f0c10b620e455d265411a460c3474c3c2c9de9e72356bdbd7309b6e6dd2fd9260131b595630932f46c372a3da2563f31fe5dbe9faac52abd5c842eb8eaade71500f235fe806fd906ae53a2b65a906dda24b3839a0492b206687931dedcf96c57f05c28bd3e1e97731523ee0bfb74cd9367676f142f73d861b070843e772fa18a80dd641f430236a96b294c68ec871f957e4f04546a0610b727b4bc9d46433434e43e9d6c0421997701c5464fd62d7f73768f92645b251151bbc11a9a968b863a2a25de9b1bf547cc6857bb65c3fdc38268b9a89d8a4e49f1c62190812148e2c2617a92ee7003a3de676129e1f6b92b81081f1be2d9715bb83c31fd3136c80a0b23b902a9a3e5f9383b1206d2d8638fb0a5e5c0e2df646235b6a40b5f4f2bc4a13041f44850bb8cb1ef1d525f2ced545246b830547136c8fcfe69c86d4846391d1b8d78a63f50a09ca62ba8c1578eb7ba182ed67975889ad92458caeddd358dbeedaa34e160051b2346ba269003fccc4c3f58d511bc74949b152ae37ef64d0ab0560b8c474d3a1f78b04de729c9f0c4ad7ad2812f037195c85f3d3130559a336610541de8dbce1c91ff95b4d73ca6e4f4023378a5e4e49c8a907cf89b3b71ebc5729b783764a8b9f998e5a299c877cad7bcfd34252ca87de197343c01249c205ec4057912afd681c5062897c79b272c9977af12ae543570f2d8c4977684a2689c627ea4f97a8dd9600a17b6bc10a71a9cae8b18737e3d4e070402d8925d8c81d49854806528d5b03fb90a4a01c03cde8213522cc3372e49fb12adede707ac55eeef0c72a1ce7793925ea6416728a2afd328d2241091049beea09b93158c0835f9e28d0fe34ad0e6cc4cd82651b3c9524e50b6e6e509fba04dcd311b679dc7c82d96490b2f3f7c48604860afd25d38786d7adee7dda54acdef35bf58c2fa5bb0c226b535a9f6230c9428175ddc939fbe2f2191adf27a496644d1004c05c06e4a2e8b82a1910665062c10e6fbcb6d4e49df3e6d17b02cb891f89070288c94ce4faff7709cf88994af70a256059e6bc4df8e2769f9d2871aaecd023d11b44c7ccb0b0f40f4bca202dfb1db1890c89c4121c3a221ca70592742c1c624f9c54ffa3ddcfdd40864836184cfb075417f28a6d5dd5ba9eb4fa2a5fed82c86900dc96aca2342d29dd7208270bd4d6ebeba516fa6d8809eef26e6e929853df5b7b22a66628d9a728170da4a4eda26af530fa05778698e85f02d979a76706b2daa3d154db0872ea5c8b06ca7235305b1d5c1021b0334dc8df6b267760e652a0e1a1fcbd0039d6f585879c7b53a2dd3f664e36fca174322e93989f78ec66ecb613b0a694f13fe2715a930b2ac5cc4ee65a120c3c309b97b8e1ff856857cd88c0ba77aa5557f4184002fb96b35f367bb62502fd6fedea2df3ddb6f4015b018fc00ee6a79ab78c25aacfef26b1d5b1fbcd372b296f320c3cbd02128827678f54ff94c2c5a677193999eb2c1d7f7080b1d4667828e292f373b47696f7b91aaccd4e9ebfb020a58acf20a39586173da2d737583d10000000000000b1221262c31\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c80f02072f243218956d3770dfa0eee288f8b5372ccff67c93318ebecefcfbdf44eb324573f1e7cab8f0bf2c46e14121dfa84a543892c7c90dfd5a6e2d9e97ebbe6fcac50f96b1471833441ea67805670c91d070814d14ed96d43d8478aff217c5045047e832a55914de5c621ce927144a790873ad5bf955e6b84650b6dbd479fd99ff33fbd0b58a9d057cd6ca317cc9e47a830badf04377d34768ab32b7316f2fd1e40b3a413370c0d64b360f3f46f447e9d3bd66a5207c73415add021ad7a32c0229f1b12d70f4b4bc545e8f56610ed11db236a139ff2eab8d38c2c39f258a94d52c3c947f0a3cf7acc0be3b0bed7d63f046644f28ff966c4f40d499c9350d74a81f76248603fce5692a0db585ed18c2d0791baf6eae4e932e2476e56f7b59c73acb881279ed46adb0116820456d9f4cc2fcd5c0b6bed1f1d1f5a83af213dbd244a10c1e3965526261481c4512df81faaad7f730052ee184841140f0f2002671f4031412a31117fcdf55534435fe123dcd0374e331d2136bada30418330d67b747ee45ba7b47b917257db42023048219635d07694064b5bb4b47e4a3950c50d15ef318eb4fc532ff7a2a455dbacdf04a3389b2d11e403247c84a6cb66cf9d2441ef0c453aac1d69f45be2291d4870dd91345b516d0243c4a76956a6880df06f9b527b32b6b05b0acf884a58b4ab42b4d4f92bafaa3d2c2bf9fbf6fd4804f884ce38c6f4501318a3efa1b0f9f7dee7d573a86e3108e3ce93f69bd35888cd0f0f98d3eb11c7571cad0573db31a692f09189eb5020d52196aac39a621380679a246868554e9f6b85eac016c1fc0847784ab92ce22c3a033892c09a834f68f03275d7b4e5980fdb51098d3fbb951e7599600e36f760d202f7f76f9f61a6e04a974b08fe2e6c2fafde4ee15d97d7c0c6e049ee9f66a4fc4e11fc65f29c91e31fb63a667dfc3b6445b56e7cad1aa237c56b16b6cf6d82349fe3dfb9eeceb332f97cb6fead2c791c846275e389835db39abd041ec91726b93a81bf3c45b948ca8dab2f98773b33f9e1ee1bf8bb0971c3dd10f2eeafd84f391f3fcbc481a3f6b87efb5756ca9699aae68f6effaa27b5c78a43b5c64411c7923937e7e03b0c9a39c125d268106e2fd2fcc1cdcf6f37e02a0848b46f169d65a184213f7d65026c57ba242a093c6f651cb7bd47d4adc50cab9ed9e9aec5da84210c7671e0df9a620fa27c43e44f3e0f8a1e143eb6fc1c120c4da0e30bf9de21f0a973e796ec08fb4d01976d9996af6c8bfa33400978ad16810faa80723b4e3748734891ae6e590eb411dd291efc808cadc857f64cbcf7e5f66f1a0fe7a687e1c83228722f3d111dfe2f9b0d992ce32795d3ad43f3022cb635234d7dd36320bb6dbb5289a03dd9e7a68febe91e6076e19eb979601199bdcd0239bfc9cfa43958a05c7f3185564cc457a088d0b02ee953e7c665e2eb53d709cda597d0fbe25f7538611086a5f42e1b8756906eadc43ec6bdc3d813b5e3e08fa7f8d9ee200bc098a16b5e5c382f500b45232dbff31a632b5fbb846b65a5a2829b4692b192569206ddd0d8b972e5273166919915c7bc77d5225aa75132bc115da4399b05009c258539f514005603c34e83d1a7ec6b277354d7128f09c5c05250d4d4567a7299bcc30e2a4475ca3a476cb61e2f994bc481c30d24bb11139ba0aebaa4dc48a229f3e6abf570ac3794c1117eb9b1fc682ecba28224274f63baf26bf1fb25be6120871958e81ab6e27594e15bbb06bbdd5b05d727f9e31328c7e60d5a069cf22eac5d4d617f3be9ad78e78b10c37b4ff083085230e23f8a57c4eddf6930bdfcb9484759310d62c4ed02cca6ba7fc3f5ebb23b65dffef3c1d5d020570865f7d2e13dc090c8aea4f6f02f666abc01d2b17623fd5c9bada469ef4b70f74011e494eb040357acf588aa2cfbb3ebdc4d0c087d7692c4c39be0bda4894c834dfbc11083586a641133ddbdf87a1078a73b4187f75cafeeafeb674a64b83cedf3a2d65e9a494a6c01df470c5b46f3581c36462301c9ae910daf7a8309d95f39e630f8f53ac368f51c7fd77dec9cd73069b392cc5929269c0a2eb82bd29e8952a27e03ac427498b6310fa2e93517b1388d125330a9ec3431b95f1f724bc6711b3e9b7cc111ee39a485281adb05d422f0833d6cdd5a9ba3f8b29796a8706024ab87f8f46e459bd6e8db00346d356d8d9ab9b7ec821fc8d962c5373f146243036e3c859972985f574874094a3f76cd925375485113778c4b4905bf8a50268781b96acf0539baf9d2a05d75ea81142198feb5fe2743783c83a8c80b77eda68e353d18cbc07894c460bca8f1cf96eb73cf39a300c9ac13dae0995423f19ee40665d6277014b9266919455bc2a1a7f3589c426593ba3138cf7fa976fd768db68e86356b7606b1e713b3c41c065ce17dee516b673689b7520dc4206000c5c5f47d64559ead4134b74a6ece8eca619dcc36fc61c825e6416dbcf4821db0eb38496d0e2ad86786e3176cefc73909023c4b50e60f1860d3b9436c20c5d91f1471b95f82df96825deb20d84c8a3fd053c3e20b8567c1694c20ef4a66f5edc24c07f511f1732427943414f601c9b376629a2bd307983834e167bc6552ed069517680bb2d3cbda51986c5331ca35806bdf327a9c262e8a26770c84d227e1cf3cb785429960f145e2ff4232d5f80388f15916cdccf82a44b548605138c5312b087aeae0f2712cbd61d3557160b14d4abf04317fda74db11186f0\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-d645f682a1b7aa2650f431a828463cdb131c1c317bc2d9a92477f9ce4a7190d287bd352213726174bb967d2538e6f796698924d4808a15377e3d05877a560d2cfbc13150acab39cc6ec464ae5fe51ef788aad862bdce80a3c3669186598ea3f01dfdf9479caf10033fa89d5bf164b454b1c909edc6a85793b2f3662ca4dabc42bf621b2c5f55b357d2b7c97b21a1748d6e6d0cb3c2e1d891b057f0c3bf482f04add99ecb92d32a099443987c25b1a5e26930082e9719fe2ca845343c3c0208d35cada03bf51f8952ef49c18c916c03417e217342ebf7234cf9270522b3f6bf7dbf5f7aff8b245f1833b8cb314f86b1e407f4e0b49f2f2917bde67c9ddb7fe39a64ad96811980b530df51645a89c365602dc6a6b53b67e56c74951d72e0cc2a7ca5ca0c1b32c3c9700fff54c317b3bd1474cb3cb402a85ba80def7b994f84018b9241ca20cc5ebe6cb24b26b4ee21904b658954fd9716004a009b762c5eb5afccfa8f6153d1cba1358653a88c0b87dc6478578929baee5bf33065aea3dc0bf333453ed0fda613d9a35e00eaef91ea96d87b676b66963d2affec30cbd7dbeed1f36dc93527db0a082d494afded3ac6df843e385a53d8a7a0dddc2a38cab1a92a649072768608fead5c538d8767a75f46bb73f7971a41401b8fd50312aadc6fc5f2096007d6002013ef9fd66be15822ca3b001540652636a8dbe65b2b6324885504ce3233f6fab6bdb5d05a10d85ca8b9934a5fe39d7c3a095530554d058f2f99f9c2775a0822ceccea548a35fcae73ee931ca01ccaadb226f91f0104743c423b220b9c76654c9baa1a1e60310673fe86e8c71eba544763f94b80dd075b3fcfd82956da9ffd4d4a0364e26cf4c4d7f0d2ba435a4e7b51b01e9cf55251a5f8fb4e32ed1fdfb6dffac187bfeab67b7bc06fbd1d623c68823d45d708ab29117ec17fb2df9ff17378ca7a021b504e678e4b7371f2aa05588d710f292e547f719f7d2e66ba39d382807ccd3cfa8ef2d33516053e6ebdb2a8584982efb880180c45480939af7b3d72e71d046fc78088c16aada249506b079daeb16056bcf49d495e5f5bc9b64125f66c809e02282e26a8b8c9656d19b75eddb4310daef82ff90bb199142ce3ea68dd6ef33cf4d0f2e7981f2d6d78beb9aa10ff7421804231b02b39b3e9c4be9363c49fce0b5a460f49094389ef2c28bfc45c805a563dc2202bd9da12485eff443013dc8090be20ba1430eb71516fb36926db06d59f5313d43294d09a5c242edc04ca7f1f69b3f87861fdd572385ad400f66ff9bf127e866957b5b7ef7e16f0cf93cd10d77b87894fd8c0f184f0a359cadbfb5fe6d91a06bdb000720f202f077cd4bf5c8b149565c43b4a07cdc5a3dae7599d26f3931d101d086b9546be593ea0bb85a1807eebaaa798e57d88d4b042aa3e3f621206e22f66335792b606f419d1dc63367d73dc462ebb177d3d9d4532ab6c39341b447af8a982d24300226fb367987aa37ed10223083e4db66a5a344628310d46174e0c8b466fbc0809905d416e1b742f3749ffe7ea56ec6c28b085d71d4e315b4e49d6ec945d23ecf5dcf503c59b839446abaa0ee57179a6567ab4d02fd1025b671aa5a464e1892e9e2b96248107fbe5fc4b792d1b6f62ecc6195be7acd19d76eabee8e8deea2ca2661a382f06e4ef90179a4fbe255f4a617bf6c1c3c564e05d1eac7cf110759364e7d3045b2330a52bdbc8ab2307e876df8b0011bd2361471c6cfd7fec98dd4161bd7f7517fa6bdd2d678dd4dedf71dfef7eef7d28d03131aa2db37f163d16818aac1e4daa94c6fc8ac8d76f03f981d98166431fb42081dc565049be93013f71832aea1c20dba0112222bd1acbd7e7c112ebfaa6e264655950a6fd78da09d55838d2f79a87a311eee67f023af189511c7e215cf8bf5b8f47ec397ff8ed22f5825814c86712c289977998dc8c7ac8eb60cce95ba56efe213043e7065d8c6e6c1c6b7c4b87f807e6375fd93e8133b9ca61735d2399bc2f0cd4e6d28c21c4172f26808a70ec7d5502449e335abfd7ec5e45fd298cdfc8699b2607745c30c89803cc741b1c74fc6698fa95c1397b59ce6a08a19d3572fa395af1f913af021cce85d40f53d511b2d6ca6860ffac07dae4de99cec54b0608ccefa3395e327d67aac3f8940c03c737f0066da5435ff060320aa68868b2fe309669a014e0ce7eebcb3e9f3d27684c0d14be48ef4d8de1f0f541c2dc22160aa238f736de0f31996fd1e554ddfd33892e998180e4a47fbe34f6e9f2004d009e83fc55e7c921a73390f6fd44a7f32122968e174fed54ad1117344325897482707ce6cb45121266c870f3f560c4315f046e3798073ee0ca7ef718176458c761825f7288b6663bf48b6efcc50e35a5ad124772fb64967056ab6a39658973471ecadd3d666e6f0377fad3b7390dc9ea67545fa030d1085244082ac60d0ba4d6f0ab44167571324e40ad664fc95c25dec94bfd59b32332ca5efda8288965284c7f88fb8045af9169eb63e98405e2aa3e949d4ebe07f3450ce6caa14e2b399e26a347d88b2fa8a301032c39bbbd945ef5d213cd4b3418c25cdd175a3ab8ffa41679cf6359ea3c28905309af59f0f92cb1db581e21da648f096171953fbf62d53da61da8eee1d24053270ef6911539a7ee93c6ff45a0b465ca879498e131d37d1a05be88fad8cc28a3026c7853b9a48bb8f1680889ebb3978b738ac7c3c54a0bbf1ddd79819a70e9d083775095e1daff66f72df70cf17e746c70f3d291a343d4530b6c9dbdc861816ad799b1a63f807fcf791fb1ca2e3160543abbd10e4fab61c18c3c4f150519d9690f7d22c10bcfed5c211a6af6f438737402b425c5ae274ca98716bf64b127ec0c7a6cf3598e9bac44149b93310ef5de9fd8381a961d5b9c166b7a687072a1aa27a8ecb2d9a023d353bdd29870650e0626931654ad80a995d6c5ce63ed42ec35444ee57444ef7edf45afe7255739b7ea731dd4c48a1497b5e6c135f4ddf4cae02577920f795809c1d00a391f15e7e376271c0cc0a09ef69efd28f6a44b6d2a9577ab7fd2198f81b92cf4094c7186e72fc3a379ec9e31b7bc12873a0008f40c14a81180f4caa16aee8ed827341c08fa4c98d3be393d524abfdf5546999acc4bb74e6d72b7db9c443bf8bc300fbb0d19ab0a716001cc87dd27bf2605930cfa437c08b0392e8526a26dac97e1e692baefc515eba1b82fec70c5eb4fc950386be3a5eb3379537100649cd192d611dc90e5787dccc69a364afa632abb31de145279e9d736ac1f6185f332b75875006f01eab3a48ad573d4e9b6849cba181d1aaeea5120fac5da72d81e7a36fd0847fdfc5f7f8f589b98511bc086a107d1ccc4797308be5b590ccfdab138078ca19679a5bde6962909491e1df2b048924a235819a7a28e3e3e97105a1a400c0997376ed9ff34b48d6076fc8d9668e6498171b82d7dab2418146610d80c2c7be50f614c6d5adf8511ce282d2175ca5101bb18dac9207813b9be0510a2195cc2c746d2bb99d3049f29374664d74497e0372994583c788765f3ac918db9a4d4d1f2c2482f50d013e7e93e0a5228cc03f4db0cfd14aacd90ed05b7ff5cca2b00f577e0ba47e7a0eda068f1aebbe688f167e3af3bcde28b3bcf0e89c63389564fd60be1c8919ac245db3cab86fef9d0bd4e365c1edb0472f4ba23b22c1918a399e3e08933031b2d0ada07b4c89abeff516f06b67e2b5c6bfe4fb6671ea4a45c375b9310f07278f0594e4943f4e45098e3c68c2c7f8b4eaec3b3d49a21c077469c84407b2ecf958c7aa3ccba4833a0b8c6f6cd8475c4d239608b9d25bcd9324326b4251b89579f2e902724f26943ae92b95487b215d719236f69eafc46070695e8d4a93053e275b93cf87723bdd589c15f722c093ca50c1d54121bcbcdff8c4e306cd4f11fcc681d6af09cc0de076a252bc8583b5afba1405798756432a729b177906ace7f3b8340f3526e7688fd49206e6853b4c72979469a30c584786f2b8c75cadea9eed04cfe68dfefbdd2ed5e1e2b3397ffab7c5d84e645a4049e50bdb9cb2453092354e0112cf00fd214e22681e4111a7d4563b84828d6bf6450facbdeca5137699c551f2b0c7a0bd5ce147dc71dc2bca5b0abbeeb109e6e951115c9c8448d455bf723b8e18e31b480e5b17c8de45d3f73ed313b9bd6a8f5156cabf25eea4737d4dfc8ffe042c6cf665bb346d89477d1faf60ace914eff5db92d82ab2da4e08de466f532d1f7c639d71e6c3dca9bff0c5a4948540cbecf4aa65c4dcd7caae9cc3ac56c04511518c1ebdd02aa8285b05393ce9fc2d2a3d8fcfcf79d4f1811d9073346d67f4f9af28d15706d577f8592c653c315a396e03f3dbe81c339c220aabd4f654239b14dae453dbd213da8819df690f38ab52a1f67319dce8ba5cd33e9bd8f5e61c0e0107e97b7bdc384269d410cbb77e19f2d89e38305c6e7dffb952e331bccdf884956c9c67ddf2d56c048b31ecaadea55e8efbbc94ee0a19980cd30edfc85d6b3ebfbeaa51ab1bb01008554717bbc6b17ce9b8b255707f95b7302d63b0189aa4e9eaa966429c1c1b9d2aaee73460a2335455f8e9df22a2c3861cd354f5163b1f1fc212f709c040516172a63acc5e6ee051f5a8a9195a3c0e3000000000000000000000000080d1418222b\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-8ee898ba956b2d9173be3179771f705dfaea460258d89ebb97518aee95f7560abe8e02119cec52c27d34c28ef28453699fd6ce193970443d211c471db1d15d60c59facdf1e49a57e03e2398a1e1375ba9f1250828cab80097369832edbaddc174c175033649f9dcaf8cb0e3bfcea913eb47a34946919f79809194df8daa2c4ae96c85bfbaef5d2519e3248b475b1e3f99cca049afc80599e671eca3ca8db36163dd4356d03929fffae072fafb039c2b091e89294083573550f5f7a5d8eed887e26379856a771f65d31a70a74db83ffe8814b7b52ae41bbce25aa4c33082177045d6d2acdaaef17bb73855f42001469c6b0717ea0a1dacab68372d25b575abcda54cc68db475132d20cd722f2e9eb7c2de6280ec574ece4c921952e79833f1338307d468df5cda8a70441b362cedfe524f2e9167070d475eaf2339821a1a1d576574b986d20e82d69e91cc84ce00cc82f4aa1c9907f6462119997701d9bca1788f1472c03bedc490d840301dba631eae8c1113274faf8923ab9ebf52cc80bce16b1db45d2ed8e4a14c4d63a74cd8d91a48b1663f8246312624c125e3abebf2d57229ded63f422e4bb0f126f9e47f5c301493d4c63b0ef611a7b141b74bc4971e2b16d8156dd759213ec7febbe076a8a534535353d01617b2d119f912d112e4f53a06b9f267b1b4d2feb6688195ff5d57065f54b2a18cbdd8f9d57a3588acb5822291cb8e01e2cca5d74547db3cb84cddc2fa2afb9008af15aba2409662989772108283c78b6a745b3f8e311998de25c880ee8a74f2fe99e45a7ab3db69e7849accfce7f8c5b726a888dd2bba623ab26145c933db5ccffcf7dad6fb7ad918f93fdef9f710fafa54a29b774d1ebf7f21c339c56616fa1c3865a0d57b45d0c4100efb16f8f62972cf5c9855bcc537270dc50c354c324462ac1c71d671e0bf37db744542e4ea766cd5d96c9e6349f64046d8c402036372d43705b33fbb3a261ee63700f79e1c18ccacab0d351c697ef40029c08a76c3a7c2bc185e03589a91d4851af6bdf83e3711aae0037452a2495d7a88d881504d4d251a24dfa389721c52afbfd0ecef34ea2458acf120bb122e614658fee8af89dac06797ea2d74ec3ccf3a1ab4ff120d5d69e0e6b08caf9ece5c58d0907419107d610ba0a61359dcf3fdb6209c6ace63e9442e67b7e8e78e94cb21143386eb5d5011ab83cc9d5c5bd03af2e1131e18433f0372a29c4f187049f7d58b18ddef1fad39c46c433268ae6d09ace463a5e49a130376a0dd89b38b3728161b14ade010f532172b71e887487e9ab4eb97f471f6aaf1e61b9e7c6742cc63d6b96443d67488746a69fa23cd89e977b891c2b57351ff75f2e0fd0316a561fbd37720cac1bb938ecc8fb5f5a96b97fffc1029dd1ffaeb87b20ac792e96294eccd88d2e8ec625e0fa8fec32b1592eac7f63c53320653dcf54ed35a05809ebabc6d382fd6eef515adc3e47319052278fd2f6f2aa22f6b85a71294e9d905228090a70314287802dbde42cd94e06747d09371e9860089f62c2ffcde6913a7b01880ef254ce9f02e6817ca231053d1578eeecb88c5afbd1cc23d5e8f10d983bb9b653f03c21fed44c3a327b967fec03ddcfb6fcd6ae38f2b0e1ad455c772b5628f2db1a9928a5be2e782871dc99c5e53d47a7adffff983ddc0768a52a4ffc3295f804bd06271f134c3d54b7539ec4431b34c7ff5dcbadb2cda2dc2934da8c153df98ccc225df28998467a782593225e7dcfa86f51c65777fb79d26473353a871d82341bf9685ecfb2a10a8525d7962247c399d19fdfcd24da464b04e3e312292bc7749f15fc3948b1b49c592f0b5ad01b0d01cc63c3274a16c1ca68b27ecc446a440895009251245a0989d2a643293ee17569c6f8551125279d3454472c8697914d22dcf5c2b0da92466fb66f08710957cd1d54928de436409760d481e9279fe250d3d4f2759db8fd7d7702e552cf5cb8aa30acfcd2af2c0546fb2aca0c687570dd398cbf0c1578b39c1b20e433f0b8a96d9ff715cf72b09b78f011f9c0c05ee2112074b7824179be2eb9099748fcd2d79919399e16c31adbd4decbb52bafaf895575e0c7bab7688f237cf0e0b88b714a3ac1b7742257d5ffce53f92c793f5c06b6193e55fd4dfaaf05559e2df4e12e5982c3679520db10dbb04f88a2a643d6ea0d96a0cae9b45c9d185d2a896083cb2c002d56f4559cf2aaf8cab564e7a5f14628b22cb8c0e2818f2e7da1ad694f9164228a773113fdb0c3734932d9c845fc694ec3c8b0237ece02ee1675e26ed57aa28d932caf8d31f9f6043b326211161266ddbd61a9c8d241ab049713977d1bf2d446f3c0860270a401095620db0f6faf43af3b1a6b1e33fd0d769501a27229e4195a138057befd232417282d9e65754d2311e5c547e5a85fbc34900edca8cf487ad2e3e7fea9ca7d88fdbebbc2fe736353df14221accd45de5ec983847d37821b8456c687eec93ce790e1a2cb6c84dfa2fd9aac2bd669d23c02ce78abcb1de43c4f3ea879b8b73123c00b48517b3de903922ebdf51fa632bfd4debb845113ed4ff66f9f20133a3f2a02c933a16ed747668313bf533bed5515b3058e86ee68f0d3f043e797e54aecdf7ccdf5d771613b000b7ac754a4ca6f2e2227d00dfb5231799698f12ba2975f842aff5f7252d49f05a6713487cebded694aa861bedd2fe11fd0fc4b4dd6a54fafcc6934aced6c75680042cb4137b669786219c197803f34b27ebc00c13\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-98b2f93395be5e131e0c5fb8a0792062513dd8be0e820804d26f937064f5c0bb3525d053e16da6567186dda337dff3c6f30c8cf96891ddbe0e15b349c03c6d53ea00c6ad4f6bebecf17b32a6b57c9ec32ab4397ec8062d9e8cec7e747a8d9fac7fdb897c43003780ad783874c2fcfec8a0d86ec519c07531a8f0008fd88395e44adff523568e526d190c65ba17b2bd7a383bb3f5df73cc2b646b40c49d2b87486a368d43e6d616e45ed0d9b3e772c7261faa5e5e68ceff3b6abf9ab7677949facd2690d6c88f8ffa3e05544603fed81516a829bd3d9bc55e53f85f31e98b01086c31995834d4fa0eb82ed75d3d510e4210ea4dd3cb8f2a8b446ea8283fb5cae01f7e733d3c60356bfb1411f8be5a6d0b6c20558f77e7c101e99419f94711a98b121fb7f953e0c19f91b3897baa245a62c7f3336fddd02358fc3d2672e9147dd3c7ea8cc3b1813ef8045fa37786c83f387731bc9e3e706468fc99a88917499d8603589e5d8b6d028d2dc2ffa4f03d6359bff057763ba7c106b4ff4dda55d9f1b71ded84896d844e44c9f3b1d174f368f220d7fb6dbe0d844f5b10c29d26ec169dbe54967e00f70fef69096bc8354a8bef7fe0be76e5f95758580c93ac8d9a349ceb388df4cc173f4bc2d1fe054ee7c649d238a656194bf77d5afac4a6115ec54278d17e93f73f9a4658a8f9f9820a31222f327613a2b66ab471132565f9dfe0388e622f784c7e09c0218603a17f83f246fb36a40f3b1d4e2a1bd2a49f388d3c4a7a06de761825b8ba7c580ac8c5ec6f44d371b43af52a62c31968155140e3903d0cbbd19397f80192e356e94523f7d4ecd4b2c55f7b88892fe94c0589a01807eaa594ff962ebad271a1f1998c517dcc3b98c5fc4d73b6efe16c4c45fbfbd18f5eb489ed9e1212bd07bce3e486c1264a595496401be6a914b2238d5f39f5b17a60886228e5e9b2d841cba626b26640edc619a444cfd036c54dc610a2102de9dfee18e18cf32a74245501cca7e49d987ef34f7a9adcdd3567e357244c012a7170b0d375be8a445e5b8752301d7ea633485974c30232fce5e6e9ea1be14f466d3a8241943872a1a881cd4ef436f1ead2ad9227143be6792406bd7c07d925091b51e5395cfbd30b8208eb6103a45fea3dcdd7ec9f478d303132705f3126942d19626d5009ed347db6e75e6a5f4f5651f72265f14a01fd48dbce38b2ebf162d25c4c3b0665a5bb30da9321f2cf070e16fe7b12f7ad39ea6b92755c4ff0d988ac561d310f6e492694ddd4c35c48c13d62848205ff97a58a12602c5575a1f755eb14e50f409b90924030ee3b58964f58dd8c600fb999bbd5daee8addbc185c52d7151bad1aef8d83a3a6d80137cea0f9b731249fcfa996b421b046b7cdebccd240b871a8dbd5bc072e69968f482538fb67b40d13f8bbd2341428d5a5d6bf50c19f89d54d239a0adea5bd89c12e548b69a19ccf9f9402316363aa7959fe3ab63f350f3fca1350b892ca634bda0b6656a44ef5995acee1f355fae403b7e05900cc4d6688bce46227c941400870a3e13bdf468646c828a39a072cbdb495c773fecddde1f37b1643802f565ecacfa1ccccc2a2829a68d9594af2cd44503ddfe823c8117f0cfde7c77397d7da69b37bb765e2e7dba9ab70e3b802a009f511bf762820a8c491c6c19ec72965508a82d199b34f17867be0669b4c792434e6e4e4c1efa395f1c4bd83a1414a51d71688544d57c2d5167a1929856076f7310c768a1919392171a57821109ac3e9b1bf7cef03088d98bd2dad5b0290072d7e5db27ae08e4bffe11d359dd5b58468e8d86d787c9adc8717986408b2d67c9e0e53cfebae82cb27f0919c62e89a68ac8903e80a7a11b7bd56ae232081af3146927271d3c2f2f7247a3def6de720917b014d6f03eb6ef9dceb771cabbc645f2cac7acc3f8d6dd40f6fd2bbe69ffcc5a083eb3a10993bbf6edb5872e001ef31e2a0e86ad58f6829c0f1f560fa7ef734de2e84857e3ef86cbbd0c1ef2fbcf282116297b5de572d10968edffa402de0ef9c4273f793598d94aef6e294d4ace8cccf70acd9f86ae774d15e9a1714ac761af94b446e4f0cde48748cc5db05ab4fd3bac0a1c43bb8f73a7ef7285866ff80fb41dc837a0f9d3ecf93ed0b79bcf6e94177d34084c597abd2fc46fdb4acd11d543f8c0b512efbf63ada213b2d955569da12b88b2d6605fc99c76ebef188881c7dd195e6ba6d5e55f1ca19202ac94c360d76d0359c3cb1f801414d97535313ab2ced2db1ecbbc3cb68e81988bff134138cc393b8ace18e20ee4e0f04c2206df124e4cc496c2acc185489cca0aa1f9848382a55d991fe5b1228f913ff81b7c564bc779ab311e9dcae58e7009eaa806896b1f7cb6718cbc8f8b6c4a65738a87e2338c6ffee4cdcc5ac060e0021a5836c45732cd668d2760de9597f719d26bdfd2403f795b8e7d52e657ae968d027b0da9e5e76d2fba34f1de7425b780bfe96c05f817dd8f0cfe176870201da00deb460d12a84f8bbc43c713793530062dc78e92dbde7a9f53e08259333253a42f5f7b1a7f35fb89e69efb700f7c6c465e80cf47efb8b396ae3455af4fa48b45a1fa87a110975cce3e92bc2394a456eab040c2fd333f70d8165e2b6431677fa28edc67dcae5f0aac65f879ca9c690648689c94d6f657065aaeed5dfae5658f4922439437c65a2ae5bb0853478178b890561a69a24bd0419e2a089ceb0196b232c45c7373938c51591ba527df1f21490883e62e99b0c4b914bc5e7be903824fc12da0654bb03d3c15261691db25a6f6fd53e3d4e9d8ece3d331f42d2c99e9f1fd9af4d68a361922b897ea6ab23d8c896208bcfa6f2c3b06ce3c88fb86994befac763586c2f0c37f55edba60286a764e4cccc5ff915739c510a5d45ead80d14465af87377ea019da46245597bb6af0918654596365f20c63c074c8a896e5b6efa0d2ba7318fb5a42c6eb52806ab9c6dd8f3b160900cd4d71be8262217b9877739e8344ec1a90511a23f38c5b5c2f23552743b953168de2bbb3a993691d0d87aa20cc70eda60839a20eb3ddcbd6abad31d3ea359938e76191507f298dcd7110e0ce6216bf9ffe2f361c8246a9299a1fed48aff683ec8475fabf36126ab166601981dab806616f38bb1bb93c335fbfa3b250e31560bc8d0dc53957da03da2f80cdf04764f2e9fa8e7d2f7a89724c74471d2bf713d4a4adfcb4cb178a492e64c1711761f9eb9d0e65e04b64f9b94f918f4ba6835f68aa523d147414531b925d3d9e7d315e1fdc533ee0c498e9f66bf813a25ff95873de22448924b36e6172a87d7adfffb9abc2bf2272c270b83cddece1cf189ff52e209dfb78b8a952142cb72c969c4ad7cff67b1ee5e5bb40caf0dd45cd37673908c430d0d776dc2519dc4984170ee7ca6365936369df16c4a094b86c1b3ed3d3cce82b2e56a5681c204e0acdd4a712b5cff260f4c27ea6c32e23c227dd8e1f8e99a67df32e7a24e0aed3dc9630b4b3331cfd625072c0024e96e79c4cf2ee92ea18a5e9182028d39b937029a4700d93deacdd4933cc31e93cb234214d334e1dfb5c323c964d90387ea4bccccd0e4386e4d770ea889aa480f0c8f828cd2185c18a49ce112c70d140e18d9aa6ca9ca2bfdc12003a63f67eb31f0699586ea8fb50d44fe9da2d01f0be10d6da99783821c07e892aa6fc6b190d9639d9249492c154b12e45e2009adcfa97b86650649599a9ebe07bbf8dc8d452071bc4f0e8203f81671e3bbe599c76589764c0c1923b141df67e260f7ff14752d7a84154dedad28c0bef90c9aaebf5d2b248e2e20a4ae9373e692bbbbd20c408f0ce99cd7435a4610fc51f051b1d17509a34d4804529a877828c0c263b19f84cc0b8d24b9910f6ad8006bb84e1a4c8eeba6e165efd50e5a444bc342bb8ebfea30385fc0c69f53d04286ca24c0a0a402668503bc94237daa53d1b41242a13050232772ac1b2c6ce9f6bcbb53ef6b94ff5d0c8294bd5a4b077c5ad5144b44a63ec630d84fa559ea329d0dc27dc7b8ba68a96777250244066cf1b8971261826d29f18bb34fc37a6a39e4870878eac95503dc5799dc8923a15a7c063f2e4f362294c1bde18d3289e67cc883f56ae5f56fe9ccc1e5101d67a552be55e06d54df6e97b49b33ca50ff15dfa8b7436e5ea540aea188dff17c3c657544d600fa5a3e7b783adc2065f05ddd72e65a69c7619a0bdd93c731afa3336d3e408e9bf09650b66026a6d691447db90e08800d2aa08fe312b5ed3ca2dee411bd17d7239f143259d697216e2f74d7980dc8ba3ef2ca2c95af10f36d9b28b1bb464155ffb6807e15facbad8b3ab23403bb9ae6546b183fbab7d4fe2fc507931fcfabbf868c6e21d23b0e02952db97e610b8857d84c777863f820978e29efc1d9c5ced05bb8e75b1246aaf401ff1d0d777ca6eb8d74c25821fd9a5dde41eb13d766c30345965553af361395076029184d32187e82dd7aeb73cc648893801441476a6b7a2914ab77063878d53a539f7774abd4fc9d19d5af3b143dddad76ba439466d646752b7ddadc708ac9a0751d9eb72559ab30043f41bd91fee7947106bc185f0406a7adcc2327517988aed2eb5bdde90e2779b5e3f6042757749da9c811162a93999f000000000000000000000000000000000000000000040c0f151c22\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-ab36c995c472d4212dacc8ea95f1ee25ec693ed8457bc6a62ed291a979b6a6e100ce9fd5dd70be6f21f54ef6648cb4882ed6eb92916a7ed3a4230ea9e92f8a3d03d7587ee6bedf6721f6d053cdbb9a487e2fe5604e0dfd0cbbe7679ddb1a4a27eed08d07da3e3e0c99fd7b3a50830effbf4502422264648ebdfd319664aa8c044f0a66e1ccce5a4b16cb7b180040b981191c751e684df289ed95f0974f82601aaf29dcc4d76ab93a3db4db5b4776cbff98fad420253968639c02b63da7f4659e9174c6abaf1c8e83f6b266a6df25bf52e3acfec600361ab92fee2590327e8879477e85d6f58349eab0ba292792ce6769affb157c05e79df66a498c4d312c55c292b7d6cf25d5030eab40eef294c36dbede934d32ca45a6a9fccc5cab367521c60fd1d79a7513812c9fc9698480a7d7a2add5afe1e24fbd2256b760c91f0cff0db3817ae4952ea7df13528987bfb441777a85d9e36df043a3182a07c410f4b6bc23b28bb860c6f0ea769db2848fd7b21459e08f10141b4fa63e52d92ded8fb54983bbcf1d854b87f4bf025fb5a0a09df89bd3f725da9bfdd413d1dc131d1ea5d54f899301c2c68afbff488a54122eae136cc38ac30b105273a8a1f89e115ca8a57b52e8b9fb1f85e4d126aa968d3125918355716a8ebab72e51e79678251f64f5d3daa326dbe96bf5bbc2f3f78659da5317773e379aa31457f446d84319da92caaef07d82d4c2a5cb2c6a03f1865be0fc1808862b46d30ee13c855237651844fc45a13162aecd01c56231e01507deedd06d432ef7ecfbe123cec60359df65bd276040eac6d7a4375a38bb62abb4e5121670d94f74b31f798459bd195006f8ed8b9319b572e74dc82842dbd403c0a8a63f7f7a2b2f48f71d13f96f37b0dbac0829ae5b6380d64cd468278642120442a59784ddccf85464e783f3d99a2dd613fc301521c0cd9d38488debaf36e47c93df341a50e4f1a68a2e615f91969f196e3f969f36119397fe59eb9332c2097d8e7501dfca1d1ea7499ea5f602cbbabf826a8b16cdae05a700f50212d62d781fd393fa238c83294b7ce60e0059523d6337b473bfdb80f9fb655533d3743984ffe028676519cb5d2a4a1a38f139a0c6c896ed9ca988e82c16c5088e8d15c2243bebff9c20ff059cbc91e93b29345f783658071f4be8277ac27c6a9d394749ac3edc77c9f3a93964e3463f075cd0b91dd6b5045fd6767447104e78cac5c0675533ca1deac92359d1fe0334902fa6f6619a52df272dd458552f1cc6f27c7c0274f49a2a80416b3a99d5666516cfc630f9c28280b3b522a93ba98ff91f08e8c1988e4aa32b965c59d8c8a6466912d351648065169ab873678ed25157a8dde08c1a2181e84d1aaf4f98bd5f3f7ed46f68ede8410c543e5a814305fc0cdbf82e416392600d29dbe2cded9938c086befd7d0adcbad5da5b4004b962109928ca5728fcc4ffb28e4fb337329217e31e61b99391a37340b990e4fff46303576899a383d663aa17cb212f98ee01276c071e84e6448d93513bd1ae775d448496f48508752732df8589e5dd030e1eb521ab986c4a3dd0f58269c3a74acc144396a6a83b9700d58c760d8b1af6325cd3f11136e45902283146c031589cde05c53568e14eb06e9cbe3e1c2ca20ba15226e6eda3ad9d274d86bfc8d3deebd0fb6b30da0aad3142d45ce40d8c531b928a5f7eda470f2ef443f790c649645264b35f1f1af690cc80b591d02281ca979f87a1e09c1b2ac16100178be5dcaba6ea4cc4a45dcc77f4d4f6f7be8fecba275047fb572c5ca4cadc7e3016959a16cdbd241b4adde01100ea0e3c7994b90a16e590f2aeb9de243be0614520d41a70fbce0ffd3c85a18be640cbdfcb1379318791f1cb50bf51175592c88edd4816833083f2b7b5554d59a23e4cbe712d2d49cc1a9f2208756f050f8120cead2cd8fac0e1f65ec5ad6ec0e06494217acff5219860233a65dbd3e2b1e20916137c0cf4518090ee4897b5fc90921279ec30cea06d116ccd8159403f3d2197ddd95c7e21a9ed25404a658c64437d98d9525cbbb223d91578257f0e63ba8f78c217f985390206e01acd31dda5cb260367cb68233b85e4bb72d82932538f50efcaa67f97284833f04058576656e770840ccb72f2157be55a6107b8ca27b12a6cabaf45e70ed6bdf077022bed277e1259e12255504777b0cd961a9d0cec2b985977893c43b6c22e4bacc99180eafbf1e59fc1532aba2ff9bb0418c80fc9d33ebb18531049ce73541fd96bc1c92d94da2e7105e2e2471eeecf32b1c51c1e00a9d3701b73b57b9e406d700ee4ed9738e0067ee58f2ed871252599e01315a168d452f496e8efb0ea455537806780f83d976e7e9b839590568f1f799f4c1282f00cbb571d934de2a610df4ccab317648ac384d32a5959ecad1f65f31932152a8a66aaf7acc9dd597db79c85a76f38ace97807fc0c8c759d1e58b9d4a061f62cb8826417ec7c7dd06608568bfa5d8333ba6ced03e9f06044218f19222ef5f79823b5e015f965ee9a17d25c09095cbcdbf08344f4d0129c44fcd509c8a76355aaa09cd726fd085f74b321069e53d151662fffa8bca2274fd35d84694fbaead2430652a60129f9173dd7877f01e21c50965895ece33bf904523e10765174a69986669ebf95d1515c605f1e38c34f83ee28aac1e362cc052ac558e1d5c9c24f20e447b12d25c81f75c4cb2f55a6f1522c21ab8bfe5c18f76b460ab41d202c47a9cc02b05c7ffb07\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5bd74b9ad4b08f18b54784c7c6952152a4f597cee14d967851ae2d781f249d926ebb4f4490487d1ab299a179928f69811f39a8a019bd808c500010aa684ac9954aaa005c9319d75d6049ecd99ad4a3dd535d881e8eaea118635cc5dea0ff3d4a7d8bd9d2bd00b78777f6528b94cf8de6ecba3829e8fdbaaafec7a16106457f0204192d88bcc76271fa31718e6ab4be525b04e547f9774fa47a8e4a88a4fd9b058412f92b27a2e191d32f015ee31cad4321c62ca55e572cbb7c2872615e5a2924d7945f1ef161e407f415b4f963d4cf6272d954923da0db3b04649906ef6e2da18592227b2b301a36298861e793b88e7fd1de2957d8a92c727b492cde702ef2b123e9968774604b71323cc4e7e58114c3ec7b59c94d9a17453795f426f706d98235c99ac4b4288d894e480efa3dfd19b14872fcfea1836ca639fc7242a55a0d01e1e21301f39dcc9aa94d2d83bfdefc26cad8614406c70bb96c149ea652f66f8d26ee0455c6cdc8e648fb20886334d512fd940fef6d0d52a14fd9c33e0be6077a10b4729a8f6200ff5a5669b3b533d366b81cb6fab41dbb9dde1581e4f3bddbbbd5f18cc00123c82e9f82412b5fc8970b69bf2e68fd5fdd17b7288949e1a7a6eab8986ba2e7e2f98b5bf2a561ddbd935802fb59a20262a77137c99274f4597d070c0c7ab5eb82aa445fcc882b1dd0a825a1f0a2c8181bb6c608a53704b9d587e555d756333bea70a5e73ccc5ec20260c8ba150a44232aba5ed55f49281b0e697527a59e4cb579d27183921dd55492cfc2abe640e1aff9147927ca2a1d1ac594c52502536d1942fea6b3e52793e2a410fd6ca7dbea45a5a696695100f53b9fe1f28bbc0014ea9fa3b134f2cf0c0a2b0a74525468bccc4677e3959d62f2cff8119e5895211316b448451fee29720a74d0e09bfec52913b0a26d1a60e404b2c2ccd036d73a2cd4dfef3d9a10549287d70bcb561a3d466c8933668f69d2e3f1a90951ae4def67d49fd09dc61342a15d1d576ab41b7f145d73a99faabd04b9afbf8491a28c5483674e9f95f3e4146ea0d9b1ca61359c604b0c821a9cce85e53b5e666cf1786100fa4c4f14dfc178b63581bf502b7909c68e4587892188934c0472412667e552bd32184a306148019d56236fe38b03799c2a8c748c0b969d9d6de27a0b842be7580ec8e186c76eadfdfe4222628448abca620a246214d2629b2be13cfa9e9fa3c26c24b03da758d5870c4f79f68c3be2bf16f97a7459795e1e30d0706f33c4f865348785abc4e6feaaeff79b1b45527357d31ccf575785390c35b2a4c87cca14fe7bbbe6ba82d96cb9bd6f47d9ad73ea3b061e030bc03a670bec41615f86360a01a37a3ccc307e31aa6c32fd558d362142fd5668e948441275f265697e4700d87853b4d1b8f50c1c9eb96d05b96992daf7e9d3dc5b78a62867ebd7b901fc37ff34b67af0ece5fe7050c94a43ca96af0463ddeaebee931bfa9e14226b2c7bd40cc99cb7b3791bd57fbab3d4961fbcfa4d9fac748d73b2de0c7eff554699cee1a72b197d6ad5343aa72d7d0bcfe6c3b458d24e7e75d00a90628100d635f032f24834a3dd0ca0f5fa0d040b98ac6e0ad4a3c09445d91d929ffcd5424800bbf06a747c7a05eb87cebe5d64a383cd77a7cf3dcc80300927443692c50c7aa0d12e1482f071ac1d9acd625f6e8c59068f1a08eb163a11685c7699493cb28b1fcef193aa1151ae7519474629485b7e6fadf01f369f05a1c37d157be7560b38a59643ac997b18a16dfd211e23c1c02f936c773b8b3440115beac0fee20269302ba0ca35d0838799ab67bfcb300e89909e2fa63d83b035d855bee14c47d847ec7f7ed15bf16130ab8fb33eff281407f376b3fa4f6894e1681e6eb025be02de783b22680e6ba9c4646b88d91e18a48f751fbe168096bbbd16a2f4b2a13085158d55c5283a069362f83c9247b0c65639aa21405f343a19dc877843bb72e39e6cda5b7ea3f198cf59c9607e1c5f09bf8962bba657f609f4e9d3ca99cc58f6283689c9ca4d0c4f659831abd54e1f154b26d4b7a103d9ca6b6112cf5bdf0e70103c8147fa7f5223665f75bd153d9e5aa982ac475413083d9baf3cc20584c792ace31ca3c3ce87cc16fde69df770f717bf9b0f10a097595ae2bbab69dce06d1973b01ff9922d8199735d6e16dbf4e7b94493b1106fc938ed093eca657e173b107cf995a251e5b6b7c97daf07bbc2ff89f5f52121522d175ae97cec1e98183f646defd2b15cfa13107cca9ddd0cd9912a23b139f84a2265e35b7053cfb7be23b79f28fddc9e3190b0355d0922543ebff420493a9ee7bc1c18d36e2e76437404301180bd3695d7d059601e204f46da1c5224966fe6c099f0ebf6a2f8c61ccfecf12f9dd4f1a197138e013654280a7c5bd26ab1743e40d8971c8b6e4908113b84537a410faa756251faff8fc8bf0fe8d325dbe0c1a6f7e099535e08bfe584b232a36401d9340ce323eae8e8eb4fb3fb57687037b7b98c6ac8fd7d919b71beb9273f4234028ac2f034685c81e630d57a83162aec955bff545d8d0a9c24d4a023988890301ffd37af5824f59384f596a4c242fa8378ba2b09908c74c8144ef1a6a4ef0b9a6738f8ec52e114b9aea248a8d2d3733f71649222c8737764fb440c9f2972390d3d4ad7467cf238f48a0a299c891210a60deeea020e4b8a56d2b5fa61aec1b341044fabd4abda13c6e85fd70170d18295538bc8da2908c103a799448441c50250455f5481f7a4f6eef5792f97cabeaa99936557b0ca845bea86234c1de788cf2abc1f32a80b13573dc2b21b110fdddefead44d94f01ec772078b1175b0297b0b6de6d6097e8aa3e5278944fc9e7a884d3267632917bf56bb53dc074ea14a8dd6e6c1a73d9959a5d2ae385f5dba4b8447eb451dc441832a69c1c0a3ed41b0997878c966510dd500d61666827435b7dd7ccbd125f157a419ac5b614ba6d65438b6c99e4d8e5e6776809edafe8fa6a76e11f5f400975df6e6769f2c2c1ffe3d40482be08581d5e79088fbff8da514abbbca7b3ccfdfaa1915c373361a971ab7f5c1c09e9499592dccd610f14ed84db0a2be1c94e5bcda339e14ffb27af1ba66c7130f45942c687ce96ed553ad7776dd532ccbb0faf1aa41b7765023d56c9068d56c3c405b8b2890c4fa6bd79466a4a146657d9248d8a348bdcf41e3388993e8ff2be2fc8b8dae8d15269fdcc040f7e72872539205992444a4d19552ddc5e51b778c5b5786f2d7b79036b73e738d7200aafe96850887c44c982b0347c7646dbcbeb4b6b55971004ade87ff20adef58d3aadb40d320d43585e7e55da08344dcd9fd8345a2c612f656ae178c914b5662d088c3437a6e5928d3410cf65dbe2ad31f1fc3781d6a5006ca8136233814be8d655b94152ac70df8cfc6f9e9101f5b53cd5fd37176341e1eaf25f2fb477d1d212333ea200a5e9da88b19db4163a44cd4c9d3ee1af413fc6ccde64a9cedf21c8b8f113d62a63df2233f9a195aa67803d632ca873fa11069b5998c1200dbbdb9647a98acfb4e3229185b8c220a6079c72bd4645b04f32ffc85214bffd8ef2cf27d8459eea21069c13bfe052ef92a070e63d05c9a9a82699676ea5cad84e508d7e811073e17bf943516fd4512d53c7b3fccedcab36921945a19d0ec3d9303bd479a446ea1a5d5e4adc5a97b92db843b54de9498592c4859011bd4df412a6151bcaaa703fcd97e702d96b0ab14d7fb0ee225f8097c174b517ea051f8f8b8af47a75a93fab99ebfa84f8ba8dcc9c9927e24f6c99b66f34f86c2fdc88755154f06d9b1ff731411f35377e14d2375480b688108212f75d74695008a61fcd452b6dd23c4d910c409d9edb69d294a5bb46fbda29d6b31b24613e751b3aa8605046cdb449ba86f27d226e91757a242ec2e9d241aedcabca88269dbda5fe8e5d8bf4a4cf1bb1585f1166d36a388a47241245d0001e35a790d6d201a92f34ea315933c67aa26b4b22ffa7d87482c7a63b7544ab511644b9e95152998af887bdbbdeb6f2218f8936d5fa50686216e30db9686ff1e924c850cfa31ac950bba1cc1124a892fa1c40f62a99eb452a344f65a1410f500ab650f9e91244ce5e962caa13832df55c4b41f53509d13d1765063380b942a5d4e718b9fbdfdf31259b879614b2bcd5c7a637c0868abec9be94a132be2c62111e5f22f420630ca64031ee7f43df2f8709e9b200f0f459d9f0b4bfc370f6faebb0345da46aa11c975670cd94ade1781d56a3ccf2c0729a8238e9cfdb1ee2e575c524661d089f894a1502bde21465f430561a72b835a39a70c60d64f371affb8ea30849956b767a5ad7648be643e0071cf9f08e880f6926ae2fe97b8fd9ba02dfc965b3ef7c102eb207555f6037c634496fe8de5cc8ae0184b6df1201e8ebbabfabc4dee1df3a15a46414e5627c7b99982acf3fcc7806d0e8b9e9356f21f15366d6327a3fe4d332eb8ebd410407b1b57220ed702dba8783c1d7088e66ff9bea1af5794c964cc95c415b26598d39f448a428c575de927e7eb129539a267c3e9d2c7b844e80b1c396810f8b703c2f6f141339bbbd34938cc12ed634425b7d80829a9cb7c8d1f3050f1351587a898c92bda2e1e366b5cbec034750b2b8c4dc00000000000000000000000000000000000000080c16191d24\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-48862a8bc5235f5337a82329e949240dade33fc7d17ace18be0227ec719ac4f71fad5a97f5d2cdf1c20dd6ef13760d4e0a1fc9535aaec433e7cf198e9b538d0a4a6482d60a005b195667769b820f677dd046b2b21af2c092abb4852bd66cad25888946d501cfc431187b25f773911ffb9e82785ab72df779f415cd506e52ef5b1828e20bb1ed742fc434ab38f3129dd3c50bfd1db5dccab13f2328740c5fd9f48da27f3f13df19e576fde636ab53f3c4ebb08681e288cf42b8bcdabeb3dc6c6c4e1a43e88e63d4e3797d7e8ad84835000206ba20f003fc90cd41e8b0230a1d80320d1a14d4a04788094aa376b2cfa10b72c66764fdc83223c39f8876407a05a5307f7748339547ef844012b48bc11799e72e67f993c601c6bf9bee389af261cbd8d07532a9d53888c543293e66e9149d8ea8862f69213c3421cfa0c2f121b5145cf9c4278b8dcf8facb6c5249837cf7c67b41c491a3345ba1dd03e6721b63ba12953055d5572dda5e34c0af2bccc6c4a0f98484108caa81d595ca4b23dd797dc814e4d724763cf782a531791873941f9873d7f6c0ba62080059cf0c3eeeaf7f04cb0d21ffb7608d279dedad1fade567e9f4725a98f041fdef9370cf1a1680feba08bb8205bb95cb9aaa16b7d2a818c3c3fcdd5bebc63099b4c4eafeca407e16678f3f15cad13c11275d786c033dd6fd280e263c83651e094bdcf87499323d179a383cdcf99fb8953228ca51382f81fe110c20265639636dbf562bd51d6398eca94e02daa1699a72c8d9ad005c4f4e21bcf4d1d4d935d25d02e0a672d419307cf720f65e11f0f1c45a0222c4583d94072381e8d5cafb06debbc117bb4fecdee6161e2a72589ed6da1b17f3f1d3ee85fba69993a9a7e389969de31ec514c1dcdb7ea4f2a5046ce463fa79ca665280cbff802b611ffe9ec0d63324626a83ad99535ac565ab42f17802d8e6f1f72edd03344d865270e374dac7e4701357ffdf256b185065521084319edcb56a55cdb91ba16c6ac647c8bdd9739de7ca426544ac9c0c59cba79897420531e1e1858f715cada8ae69d48d95cea603ef3569b98dcdf3497d784929aa0428a190908f796bba2e88b809c21385dad8bc18a05736efdfba2a81cadc11d06774c1a976d42b11367dda0a7daeaa1a271a54217a38acf3bedfa756eccfeef5ca121e4ed57eb006a103c471b5a104554e2f66d93f0c7343d78a6ec02dddccc2aee0d045cc9426fe6fac1e87ac8b2bbd6aaed7022d36719cb2d5324a1ae7d58ed779d3b33a4226b2156863a2fae4dc53725217751757a25e487be29a2507dc078aa0c45fd275ba4cb0874b74cc77eb516fab1bdc83cfca42c77c23dee74bae46afcee27d99f3035c67ec00bfc9d55f5317890bb744c15c5e2c871298a76413795d3af7bbcadfad9d1bb14a2aea340a08aa26c1c29f297bd31e40c5be7020fe29fe6f2dfdc86197389ac2b67d8b78ec6943b561dad1cec3324e7d7809ab3f6dca3e0c3568fec588e70f3ecec53112f6e7d3505eea1892a4fde381a2b672db39971d27a6400058a4b72bb7c51648ee3acd8fb1bf0b85f44fd20fa0e217ee9b9b92dca1e3b68e50d8d7415d08eb4d711c1dd7cdb3f43c87d60e8af1f2a6722fbb50c9d242674937573d0d9fee8a3f16aa781a1bf5df9cf8541a00ad026c2a0be05b3113576b6b84365f2cfcb110760ce7ff47d2e152436c8cf245c8a54da42062e072f9f90a83c73be236fa45d26129ec0791bd91fb5c389abf9315e27a0535b26e761e4441bcfc2b3b9a5dc0509affc072886852afdbd0869e18ca80960e8eb3cb77b2bd635a59ab0990a2c32e905288928f8063084c3ec9b53d31231cfbfe06bf15c6500d10ee110817f42253ee753c57cf5871929d9b512ee557cb4f9b8fda70fc43d1aaa7584842c6729cba6253c70faaf15f322434f39eacc0fe52079aabc00693b49d73223ea9341fecbbf5fd70b09bb2b5fc4e7c638f63d4eb4113447f8afa3766e3d39b0c507413c488dcdb53e5ee20118446684daa4e3f74e4b2297077f301151b06879e6ca608af5759c7b1297af86543755290c341442c61fef8c4b04a8579c9f321f4b8bc744c1f9d8ce90534a5bf92d780a222b1d452193cc6c25ecb816a3f4edd4a3a961ace14577dc824baadb5bbd363b3a426d8161c463538c5a6b15a9108024f4bf64e32e1cfe96e44063b27917501c87f10a7524694473554dbbba8f29a572846e54a16e6fd895a15b106ede3aa5ceae9755bad27a09b0fe67c41e8ce9006ffae11abd1b9b3e359b65f4b6181fc8d8c512fc22662ce71890335d9811180e329553dfa037a8fb0053e669d5d870b0d2a5100c4bb78fd297520bbad94d67471741bcf2e1c2ca4f6304e35663399f67840cdeeb9edb621c8ba854de5c52f306cc3d42e1c081e1debc8021f972549b8a9cfa033c7901da060e17f982f6cd2f195c87614d8bb787cd1b10ed6d31c5d4d561c1bbabaed7ff626a312470fae5ef2e51a05972b905b9c5bc284d7053d0585f1a91bd403769e8cf9bde215229259c43e02323155b13b5fb0d542aa625c0d6628579929f7040644e91ce4fcd47a895bf3dde0d0097bb42647807d7008caca01304f403ca8f49cf5c11d276d115d000fb2f220718649fb73dd06ae38fead76e80c20932444cba2a4aeccedccb7a29d57214d72780e38921a0d50879a014f52ca2604df524bc5fd650fef98cfaa1eba14d7380ca1f6c303c0aeae7cb9cf0cc2e3acedd6f151d\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\n-1fb3b6053f9518cc51b4a20cb33d02a7abcf1cad4ae7806efe9fbf8652e3755275a641f27879f163a1b265e886a1b21b129d48807bc4933df0cfee53f26305170c547145f3ff67fc6f317c5ffcd94f96fcc4453ac3fce38cbe41b6dc01c2146ea3d1e7a0bf001be3136362d75aa2785efafce667640dafb1b39d555a106b8cea129c5432867e0eaa493c43d21ab388aff1b6037621c1f134adab6093ee7e5760e9f33a0d8e8c63cd70c86438d3f94461a2d4bc9f41243e362bdfb4c809fb28157a6e5ab2f5c6e16a7336cdc4183ac4272920485fe34fe03057ae7b1440aaf99f28ba89ef1b0021cd863ba36e8deea60aa14cc7f2dab46dc401f12f5b61fb82a195781e337c195160fc474e52aecf4c6ff277908c481d51adac39219b29fa7ac703027354491b869e3ec404b4c35b214196822828079ec85ed0edefa0ed2a426ab9bf4c3784238390e8eec61cf7fa1c4a1ea1308e0815202f1109250fdcf69309ef634c4f0b134ad6d33ccb4a5e30c0472bd292c42de895de1c5989922bba6004283fd1376a0a263ebf74e414da5c058ed9788a862408de4de14b54d2adc7fb5e36f827f53b779e549698c8ae7fe4eccbca4b41b81e7239114720147851f0a72cd3183e33c6e82c557a5eecd4d07a824c6ea653168bdaac37a444fb63b29cbc35bdba265c5718421dc104206d224ef985992786180627df4b2f3ec5e6c200c2e0cbb6fad82db3f54d67f5fa7a9d1396c3b8376b3d83af731fbe8eed49bcd99e4fb693c87e259f20f61a6d67c8d87c967d65d03fe81e5d5f14021f8deb4d1a5d25902065e4ef707205a8159f02b4469be4c2094aa73580572a3568481f63e470bc86cfdf7b809c17801918f2a6f742892aaf696e2cbd2bc617f92efc482dc6bf8640a91582e988112cdb6161a41ab879e8c3c15e48bc2a7dd6b4fd25b5e7efd7388e6f3959bbafe518db3b73df504a6f6cbc6086ff160b3e7391845c9797a494000a23a9488008a595334b7b92db4b2f9a267869ee63b8d3b83bce7d57b9018bbc858943f0c7e8fe0c94cd0718672e4473692a2809423b2df248b2e61dea545b2f1db86b7246a345ec591083f4662b64664bc9200c3ae8ce7006cd795cc146aac8315129d62eb20e940aac6430165476742a19c17d906c3fd94a543b453a2f5d3c880ae6a1f64125efef20d7a0091e4bd66801fab9f7a396c84c4ed28526fc1b0042d4245d3f57731d56165e26e1ee72976cdc40b3574801255709cadd4361e7984527e6b9168a8f1b507b1a3f94d20b76bd4a0fd5ec81274207df86ef1b18c09e4f77d0670534a6ac9eaf076052d6d037ec469ab453404749c3c15cceef412a87301cd438c1e5c8d016a2c125a296c4deb4a12b4bf04d9593bd9d66814dff60549ec0a91acc5bb00a2f445c7989af4d3ba9d35868f7fd8a3687495f2580780f8a4c3e9f012f0cd07cfdd7e513c9a84bbf7dffdbe2934480ad3cb241a155248e9c30ba5f5d1574d73488beb96ae47913ef87530dbc9c941bcadc6a69b9acb06be7ceffd8cc7745a4fcf978c1fa126a22864e912e9c14fa73914ab1b9ff31988e6c859bf069bd1f912766680111d9996ce8565704046ceb64610f0c6162f74de87be26889ba868eaa8e3fd8c1c4eac20deba9467f4fe5427c06192a5ef0e84d2a063532131a366ba13b48a3735b7ac98d5d800f6ec7cb5b8bd604f7d3c72dc56e126ae14cb101afc3f5832fed4e94e5e7614e1232e970597997cfb3b9e6c5bba771552c38c9d6729ba0ffc2bd146754a3605c64718e9744e4f7c1ea184c477de17208f7baa9ba1913598889ac44b1d30f5b81aaa06a42c8f31c889737a8d15e6d473e0eb16fcb57a56f2fa9169a56a4d5b687b50e77bff964522f14530608fcb7f405cb5faf36ff235869b99b08765fbc6e21c91833a5c5e6e85aaac997fee4e800dab3c8fd5b35e1cd639931690f656f05b325ed80bccff2013c683b0419b5f43c3c14c245e40f537b55d20165a92e7b6bf8af9c81cb4b205f327b946c39a0ff087915b015c77930f221bb6c2c8d6500a521ea549f2d7fdb4108aed7a5aa6217450e238f1727535b3635f7e1b15b583743ffc9a2436e99c8f6e2a46bce90434f345090a76c422d778ebd3d9f4364af2c89d1353d64ec72d691d414f56c7a1747c7ea3ee8b284d3aa6612fcd30a08eb7eafc3dd42f221200fd0b394c99235ecebac79fe467c747b3ed5c09ebbbee5dc240287cceefe186f0a5b5f4fbddb0675f0159c750d715d0b01978cdd4e85ba77cae57024c6e6348155071016a96575e5f9b227c87e82db0a8470124b6572da0cbf2cab372d85708adadb04165b6cbe6950253e2c1034537ade941ab6633c1ee634371764ded5c131cd57eb9d3a794a2d26750d01498214ec9b78ba4c9400cbf7b910643a6ee5fb12fe1f2cb348d566e63dba6c1fddca6a0a6644eb7187a53d0b5d8bee99d31b92981fd81cad326a8c107abafb623a0d11e861177a58f1e3307fde29d63a3924bbeb0e946bf7f667599b92d98ab6af9d896e2ede95ca65cdc98b07456bdd037aafdc4c91bd387204ba7ea14dfe387430d290ada9a8296198e89b746f0264ef95c45ef3748bb9806f24a61565624fa84326594a572c701602c7317fdfa1990426ef70a5d3434e7b1ffd779e13b23bea25d63dbd7d9fcb713bca6c203d1b2f337a6e768ff8d5a1b1fed4d69f973f0e0a59f3c3527c30a1942054d3cfd04443d4611259b63c14f8eff56d17465e29a824afe408168acb215b5bb0252bb7c705280cc003311303373f30074bfa769676ec7a48df2d9f68fdb043b035fc1807fe7457e01e794a5130a857c56e92a8dc234f03c5c7fddf0f385f63b4ee438a2ed5a027af36eadab17dbd7eb9eb541e6ed5af00e1415622b083855f23d1c4639dc7c5b95c71673a2580e88092e446c29236900f685219aabdd06720f0e50dfca6bdf53c09ab3477833bb835304ffc65f1d6513acee999682bb70665806deb596566ac785afebd6ae7227ea882941257ebb10809923ae562cb34be2acde2b8b0de3f2a8b81c53d47a80a3b1d360c9cce2b484cc5dc62b948a6f990aec5d9c34b745943ba361e14de27232dadf5c72ad2f47e24d0872b2517843f3c43d1f348fdcb5fb589c4b304ddacd5451771ab0c53c03a33dcfd13e2720ddbca5fcd3f112eb81ad6bc1aa059e2261d7cfeab30fccb952a0254d92ab6c884ebe18c878adeee97721267393bfc85a5a4ebb7327c6f69a71a864e8fed0665b0ef302f16ca3d6ae033bbdb9443bc40c78eb7b3c5af66ba91ecd852e4682ae25575cd7d09adb3b74798d14bffca4f5bd837e80afbd77510ee78c32ee219f4156076dc6bc9ce87971e232aa4d034366a3e079e21cd17ce42c3f60f47225ec2407147bfe01eace5552956e6697a0a64eaa3b02ced7a39d1a1c2eefee96c2f8bd2c122ddb0960929e57247fa3a85fca43f63de635ad5d4fad02565aeb7f00db0c55c5552fcbbe5889b6495c59541a77a8dd20503cdf916b3bfc8f5e87b217134f2fc7a6cd13a736059348b3106bc431d929c09d4d6c0e39a93759953ed35f1df0ee90366e73cf0ddaa03bd39293e95929cefe9cfd06079b592b42c6e9f47ad6c4263233123092155047ee7c48e3e4e62f531d3810011a76f477a8650bbd7be790606775e1f932dba57e5d4bb2b2401a01a20b83b69ed97bf1ad8c765c93d8d4e1bdce3a524eebd6e54734d568711804d4da19fc69997129876d235fe53c78408e78081da0edb8d9c085c863c6603c06b8eec7733dd5713d79830b8debcf6d3e9183852502fc9bce62e85c20cc098cfce099d0a810df722d67932c2e3fbaef6efabbb67a83afd4cf9514598f316b72551abff34d1d13c93dc679bb58868148fbd33628d8279fee785dcc605073a000473e8ea9dd6646242ca2dc3c4863de1d0f8ad955682a9ba9fe52317c2e5d130892d5b6dbc41bd0ff3148308393d717ac0e96fc1f45e0539bb55eb50549e508da7db93d68f1711342a9d6ab64e178f55cd6eed8e8c28a497336fdee128df52ec475e46cefe3651ab9935ade5adf0b29ba5358d35d3b6516c8d3996aff1e2cd06363de48eab1bd00120a0d407b092870c2e76b276c70d4d7ac85366f60f2343241200253f92de66b037fae4fdeb1db275b7ae6ec196902ac69e9783fa6684584dc9067c7cd4a68405e0aeb2a4eddca1959cf788c0a516eb94f0824120ea24b9fa2354028afedbafff79917820d4d15b12def7f9efe49899c715c7b500f70980a8c799b93db838ca2859a06cdbdd5f84ced9987e1dbbf74ecf24d5f2484950dcd57347da8b8aece55d4afc7adcb0b232082157b0bbd455ca7ebcd0ebf257b184b3eb0d1ef736dc7d02681624622947c4f31f0dec5b430616a19b1300427495088898be15f27cbc4688ad4a93fa208ea20bed26e94984525db33a34b7631018e55d1b8ec54dc75c85e0c9a95c4f212092801e1578ea2e1a8a7850952a1bbd2642d7328a558c0fba8c167eb38d105d31be1cc497460fdc3973b7f004f1aa58fab493d29501e09568b3fdd7b1c8447cf154bf57356fca7c412c79417dc20e2d34485e6c757aacb1d7ec1c6d7bd97374b2c2d0132f6e749fa2b7eaf3ff2b385c6df71c232458babc000000000000000000000000000c10151f242a\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-4253129ba04cd46ebdd117f477bae35bdc6eede60df6a94a580b28abcf8bca385164de3e24f7792faf3d87c7eefe208adcca6f711f57d4860bd6df7f3950fdde40ca14784f71a397f300730072cb47d82ebe5c2360b09201e54b0e371efea2f1602ce195786dbcbd291a787e9fad05bcc548c4a8149d69b1b600f1111984774aff6083ba2dc1d1aee5d0d34483f9bf970229d87c858159225c3bb28b406f060dcd62f95770c78fba88f99e27093908cfee69b3d71a12f2d165bc8ed692209989f37c6bfc194a1ed596a38c4dfd284d734777864199cffd431d2479b24b3d77d6f33d92b684685e04dca571ca860f757c6cbadf7b1a96bcaaa2d349fdb057e066c613ea88c59c656ca5c10f521fa8bd770d982d7f042701146e16434dfd174a7ffa4efbe5845b6640763ae0b8df89e19beb0f3b21dde514da0693dfb0918ea8778ae0bb668b306a842b9c058aa8b3d3128fd468e4cd88e76e6f7cf737f85a36d52a1a8f3e185c455f57ad8fa5b1ca0e8ddc6548dbb6b217d1aed1e3fd82a335b8a41f2276c07bf9b08d2dd4e56ff71e22a66c7727f0a6a354c4c97826c9226b3de7931c252d11e098279f5a2b81117cfebc677ed05a2a81a0d74382ace17dc6a42e98df023115e03412b55a0e9edb4f1c7ea91841678c5c5cabaddd8fa57b5f1a5c1570ec341628d2f56268fe48ec9ad88f0cfe1a0b546bd10da7d81c39036c6a852841b8e060da573c61983502aa36e2874127f6f2c3461c7bf96119dbc5e1ebce6f33aa62eda8c7363aa842cc21cbbf2c1151d009226ed4f1b3afa65b06818805e41e7e2e63ef2a816f1d88f53f80963e9918136f84b1114bd2472c351816c4770722d797b6ed610526f8f27642d13bd31eeed3f8bd5cde13edc38c5d288e190fc7eeb5603ecccbf2e97ac9222cc7531dd1736cc6e93abfcc5386d1ba9f7143bfd369ca09f5b959e7700805597dae9eeb54194817c1b29d7f0519c39282b4ce257b191a1dc287ede4bde95f22c3f3b49c33a2f939c9dae34375ccb3d8995b3ad06af98d5b7370ffb863dc321c12d49bb94597ce00ba560ee60ad72cce2567c06f1d3fb5e277d252b6fdd2e291cf57438a015ea85b4977bb4766b3e439be35576718ed67a0ece1b590967082d6b813add2790d59ea20b088d30da760fc054f9d0d798c2c477d81a3d0bdc2197b74d41a9be185048c7497e8397b6881b5acf15090661651cd27f5ce524b326301221c06233f49396781dbc25f72caac8f26dcb17833647a4c704e4b1adf084bad42e041af26af4bfd75182fbafe5e6450a774548ef7f3ced7f4ce107f4c0e4044cf55f8f7d5e09974c79e36a85a6e7caf60b3693745ec9e09b047c7de351074ab58cbba84b0d93460086770d7f59d5e1b6291cb44a62e90ff7732b0d7d1e238ebbaa9dc8328012e1520e6a36ec864a769cbf39788db9a95a78e2d29f40b673cde57490ffbc36f973e7b13f0bbc977e43dd16716ca23fb865ba1b7c8b02d5323c166275472e90e6c72de1f08101084012706309c4aaa95c7b5c4165e7731782b508b085b825f2dfbb5017da0066a7b17fd22b7b71f9cfbb799589b633dd6de11f156d7aa0ce4278415b6a0f896e33e055f40e4c9f5fe63e72cc0d623100137a4cc43e90776d58ecd533fa1fadd505f416b65d528a209d29af23e268d420e67627f88fca6b019115cfc5d4731f793c9a7b7c8627e801d2644425e8cb2735361d4fb7866a460dc12cec76a4d82f1c2c0174b585b6a51f5aeae8e90c0d17c02f85ca2548ba685b1b04031fc82a12b55b00fad79e494f6285708502e3e387387e8ccbafe1907f33aebcf2662a4ee6097aff44a9117b3fb14403eeb36dd779782341527d59f5e7ae04f18a242c907927e27d32c46b5f0f6e2f097ae2f5f817dd66b6ed80c7d97aa3828de63df8975c4e83dd69d30fbca2164c61dea8d1c553c20afb3061ee242d33dc5c53fb0045c07d837ed97c77756b7fccb948dc89bb4221405f7d65388d62a52139b1b489afc181ee209ad37afb879488e14e286005dd4b3459722c5f2234cd5125b627ac46716d5f0e92712da986e95dc8d22fe9681645e9d7d2ed93fc223aebeeed8b1bbfdfde8c932a3052b6e45f49f85ee1561e455e96f6dafbb9fb89f2a64631e0757172172099a8b9e43965f014684b527576c72f6cb5b7d84df202830989d4ebc1160ff9e170f6b36d7136621611c725758b1e5713d99732014e6ae2b6b30c1ad4ed1d529fc3e4db71b16c03b0d12ef8f2fd2d5f9a2a3c369d4250472e5fc8d8987f9334a5b54adbef49ba79bc9e2249e2a2b726a354b596a957e17e03e4f3dd7562f6f7c3d8f8ed1f93b026d4f77e14cac27fdc6f5e567ddd8ac4ad88aba3b418bf03041ef47f4ee2e29ae4bcb0c4d0a40cec26a808d4e9a8fe90d4df0c2aecb9c713b55220306b4bf58b0373e7450388922f2ff2adda092a11127f6442a8e358914b9a9eb48196e3ffd9dbaa66c9730682b84c048a4023dd220b80d7cb185cf35e21369eed4e92d3c0ad70a33c409aa20402a2f0856f87e562befabc8ae292d720686c2ba269847ca0f1878e43056ad20807d1433e7e1e6c0f97bfcb6775505f581ff8dbeb4d11ba1a8343c517e472b631e6c325df855ba0a8b0a7b1cd21767375a34f60c61a72667e8bf2594c6f21eaead5efd2159a3a116a8dec925cafe3adbc050bde5a64292f18f0ae2a38a2206f33782b51407104a733f31b4922c531f6f6b57a626d97239e698\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-5870BB288AA6130708F7BBAD9FBDD6D41E249D620495ACFE90C61737B57DBA890213D4741718545CCD8B3FFFC2DB33C39AD631D5B5CC902DE4D340DF03E09248F67E89D28071AA50FA532E94C391D2D1A61B1847C6B1088BE555E5C2694EB0FC1F029095ACD9DEB21EF886BE577682CA96AA2EB3DCB24B871336AC5F23C8488011860B455B687BD4CEF5FA11381BC292B4098BB2CFC1822B48ECFD28AEADA71809BFDA190836D3215CFE755FDD9374115E5A0CCAE15240EBA0147C2F89D8D24454D7A5AC2D20ECC0D46C040FAD233FC51C870080F1FCEFAE6C073AF5F7A78D610E23831D5990985FDBFDC6D101ACF3DB0A74D71739E0\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-4211c0fbcd62764b125a8c5263404d7848a1812dad1056f3368817cab3cdc97f852487ff9d2bf404029ae58f9ddba2fcf1cf5006568c2f424aa647b4024ef30a1ac57d831cb0eeb85414d3b9069918d92e0fd933b640f0a6a777637245081aa0d27b2fbca9deb27ca1d1338189124269a14120101f0fc279ecedaab6b5006ca4c7c0baee72c5d44f4c330c56bb4a822ffd3e9c3f2602ada56da71ff40a712f115cbb4bcfc484b9e778bde49ed7df2d9f233ce065d1a9b3eca2c494fb8b7ff6b35d64ce62ca335c27a3c157c801ee1988dd9c7d0cb0b6d9c2295b17f88ca760496dbdc9f68910fa07e48986bab423f9059ed8d4ce90b8d1943d1231c8442dff36a63d28e667bfd075a66a7d729a2d852e89d8f580ae18d6652d8c06e02bcdd48970a658ff1293b6eef87108f9192e65001a21bb2e5dbe932a524cd0a44155e52ed18e1f09b9c5d46483774b49a6559fa78377442c9652b879597b0569cb791731007d556a6a26efcb57910692925f041d4d55a71c7a221f52cc578df50d0b5176a262250f55bfa3abefafef82d31d1af2facb5b6d46c554f67d27a143fe7ad83d4529183a02594b584baf860c1141d50ec50db36ab24adf208289635a7106c3b0bfcf48c6ab881b75f379779fed7f1dac26a4698d1ab9334f88ffcbf9a96eff8e85b34a6ae4d2228b7ba474bb2bf32706ae6d35409477269baf4a8effd70f98fe8aa791bc49b7fda540d80d31d699508d3f9a502f90ced18fd6512aa02a22d941acd43e3ff4fc802f05da84ce5c367f9497e165ed4c5de86fd284e0c181a2cbd1f16b66bd3221fd07e368b1e00193020162ab47e61d05f54be7354b497cf7b6e8d77b932eb0f8161cd015c089ae62d604b647193819b21171c1f493bf0fc7f67407045f56e022ed791c17606633967986c9d93219b7db49f3ba21ccfd1bedaf84315a770d978ab657ec5d4e3e39d8de6a163ed199b5d713d206c9eaaaca1ec4415b015aed58797e4e116b366081825dfa54c25759212f4485eec2cef8f455109e893b4732b437c301db78978831edc4154a1be9972d4facf9137e59e2b04b89fce1b6cecbbdba092518d1d78d7086e55125e22edbdf53dbc67f38eabbe9e76c69554fab97dbb290192f1a5c66384a062c974df996b618fa8478fbdd0e30f11549040643d583ad80480c1fd0106c1f2367cf2ab8eeb641917381815b064905ed6e900b7be712d3ccdb0b1004ad33bb6e8a34b94c228940afa09623c85e490c32023e157b451f02aa6017c1656ae1dbb4e795aba6198e6b6abf66874acd91ea4028e3a9e1b68321fb6e707a72443a0a4749ca460cfc0422c7c6b2d322ace8b51270514d0fbe36d6dee137a89d32e2d55610a60dec2266fd7218ca4d925f15a7c84edeaefe84cfe9a1d672b551f5f2e32308d0a456d59c26b7a1689ffb0a3e4817c5e385a0f4658868814272451015ace5bce4150306621cf53e232cedd3dae72eb1a240e625de8556f5cbee438cbd913b3cd744146228535ea23f310379ab18c24ceebb685d0f61e5c81a2c3c9b4f4a7a533a49c8ef32ad14f2e77e210eaf1eed44cd6c845aeb78c63d7c12c6e5f91b59489fdcf68c4c0948a858933604033209a9d5a2bfb68b101f604f6f10bd9703fb9768c2aebca6ed5b00e4974bb348da101f7f2653d55decfd624a7d79c13c05a7da0ea3211f7bdcf7bf1df8d21ab5f4130f67d5576a4c8a927b7c7890fcf42e1a431c0befa7b86a5c56b283ec96a2f27309ed629b8bbacd4eeef278d7775d1c5ec5bd331cf622298a343cd473b905abd0904803d72bd2463d9a88cc11d62068f0d7fba61781fbbdea6842bcc58385c4f3493ceaf5d105a2ec7764030961546d89a8aa5252c117611c8313ee2d7c96cfa76b1f3daa4e9c885b2d271781c654b52ae904f5ddb3d58335dd81e2e6202925268eff4a6676b80f9042c1e1971fe8a9d6b7c8d88ea282e1696c70619a1baa29584c0acd26967b4dd0252fdc8dfb645a255d32b6065951e7c3da633b92017bf381f1788cdc24b205dd6a7db1335440d62d81ae8afbf2640162cb92095270a8ccd65ddf5fb667fe2b5d33fb1bc5014a6af35cc4e4232fe052014cf4bf2ad9b46684704532f33a0f165473ed2850293f6bad8fa8cac3d74a995b02980fe5275aefa92374719e218185a5d62a6347f64f9e64ee8d06cd9d509294f18542d432ee24177a0af0d2374b5e29735abec655bc4aa1eccb6b8c6cd5d0602b8de15ecf20dfb64f5b0b57cd4bf2e88495da925e98f46799d344c070d95e7527ee7d2bc1e5da7e7e857b2c3c91489d188b4b43477082773c95479290b13779c25682dea8fbe6c8d7cab9b07342894eea86e708d1e1e7f3ed998df17cd752e947e5d2cf4b4c3fb9adc9049bdbed6badc20124a694dcff1deab7a33fc3f7c8a9c7fda5ef59ba4ed3f3ee925aab58cc74b789103500aface7eb0311a90c13b1740a54541e95ed0982c9409800f89c9519ebe0f1f8017d639ea1f9cf33a70633ebe2abcaad745ef5edbbd50442265b477a2eb61e89054d50c8956e6e2743c23a387d316cc5d0b02182989c1f01580b597e0a9f578d3a3aa6d5f0ac1534497c5e8312055e434c7719567be933cf6d213be58ac37527999a9260e7a0850cab48097fd68175d24c6f1b1ad8e104b3578e4fe746621a50bbac09fcc3a0951cc968d708bbeea3e7437bc269416d826e8ffa279b755abff5bfca14e90d791ae0357d45a301d166c19dee82f2c2e6035895b294f0ef30d003c60422f78178c5305996363dc281f8627ac75bcbd28c2a7e1ca918d438c88cfaa57766a372513615592861b9872ad6fc4639e885bf03e32820a49687e0df3598b45a2f81e33fed4e91b9bb458fb55ca35d99351b20dbde76038188f01935c261f07b4287aef1158a5e2db5fb136446cf1ac6bc8265f84a1314f41cf40e283ec5da03269307a31cbc5a3a80b723b63c0366febd211a0a448604bd7e56d4d5d9a7e6d8a1247f098f01bab54f27e598fbe6483744e3bee936adbe1fa4869ed81931cd1d7b4f9ee02ede169104f910cb6dc75e10358e1ddb3f2a661595eb44cb851c53c3f2835f5434ed0945a354483203564d3377e78e3959b93244e836ed4475f82fc829946037bfe7300742203d35d55cbb5c18eff04f30bb9ff99ff1b45858d5a46774088bf295ccb5e03792779dea64d4318f800e10029995e3bd7cae442a8d9ab8cde1a26c1de7aea6a9a70bc16597e54e93729fe27d938b205a0edae98eb80c95e6ac8770f5a2db81bf1fef6fe3063e4681751e9003db29209d1f84851a0afcf62eb0e6605fa69da74650cbc4fd7347743075d9cca143a8084c15d4372a1d325adff6f2b945ac8f7e9bba76b6869abbf9704ccfa718d6926562dfc899c2498b073184ea1c6824a245be772b9276f279e2dbdf62fb28d3295f364f18032361a5db82d16cfa57b21b4270af55130c029b573ccceaeb81293f29c1ba5c0cd6292307c9f0c88100ae57ac1892e422891039541287499d3afbc1d3c68e93a14d5a3b0efb6ff267039fa3aef140953b23cc1d7882023407e7c77dc0924f58529e18b41b2f89747d8f1fb6c166807193100ee0a26b57beb8da3c34fd134a28d5df3cda61683e0ca0f9d92266cf0675081dc18946586e5b9e070504d6125fd485094f3df2eff6d9197b3c7953303f62e276df391c8abf86aef1931d60488556e412ae00f7c201e8d64070aa72e291e804c209c8dc3fe968d06311d569d726fca4a094c7d4dd4b16014d4a1cebaa97131ef1ee66d734b9f85c9a6e70afedb26e7ee8d150d611b852b0bdb34513ee3db302395492b845affb16680f5bea4896b866fc13081eb86f509970b69df9d7c023c160456eb94d7eba2e9e2e076c10ad52b9c966ac387f808811138b9f7416bd0a9d21dfe8b706ce321f284342aa301f4d8361bf20bccd478386673d2afbab6288b8aff15eebfcab25406864842b7fd6bcf6c42fbd8b2cd526c5dca80e46a04be95cd7d63d936eb8f5430415b9b1232e4ad3dda1abb1b1c0286e4d89b9750fc67eeb22342a2aaaf83766ffd72efd993dec4a06dcfbe5dc3c067dca721d41b14f8a3536e69923d34bab47021bd1a16640da14fee5e587a833f2b415f4c454b80c700a4d9bcad4c94b6db9cd969d199f0a3f4fdb7225d445cefee5c67b1d6ac63e8e51d80cf32ae75247436bef80affa4b36096b19b1dff52a88f7a3f2e29dfdb9c5dd994f3bcbafd976f318fc59e3d1ab60e92a2c0ca7eebf68da24253b4bf1bc99c98ac429becba641fc2642074a07a9249ebe6508dc5d0d460f6c7bb873cc6a2ad7b91f03edcdc731507ad451ee3d9a4527721a5e76a55dc008f438014fd0797066a51910e958d5a0d92ee2245c853b4c9a7b2e7efb1e9e749b420b126f0a0240c516882686660b38c60007f45d7648eaa2d7b1c6b1bdba8aa5ca140e8c38b0cb6d54e3083e903f7c3f6ac97d95293506613b3a35f1c2a8d401f66d917906210c758563e4722d30b05d375c8ecc41d898574c3a20d218b581db4c85ddb2125e56c4918d021f96bac324ff9e9789c921cc5281c0f0c98a98fcf218232a8b99a2bc34a4b7c9d9031b1d408bbec6e3e633555e8fabcb0115324e000000000000000000000000000000000000000000000001080d161c20\"\"\")\n-            )\n-    };\n-\n-    static KeyGenTestCase[] KeyGenTestCases87 = new KeyGenTestCase[] {\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\")\n-            ),\n-            new KeyGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"\"\")\n-            )\n-    };\n-\n-    static SigGenTestCase[] SigGenTestCases87 = new SigGenTestCase[] {\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a12619d8176840867fd76c85b14a43f92b39487e19dc0bc5078a6ad5bb20ca92ace50ce68a6bb9ba3da7e58c2a40ad87729bf63ac51a2d4a58b9481279ed7d7a4e6fa5cb2f0e044555d05a83176c203f85d02157a149565b329a18d0963ffc378d02874aa78fb009073a6bb453d992a240eb7ef84149d000acfc8fe56af5be9390062e082991432664122412a2822114b6810bb581cab4650049894c824892824c8228020a3472909271cc28208a462a0833129828301c83401ab2849a48322097055a3628a028488c285194824d624282480206042281428624e49265822440e1084a5b42015c183163228192b4295ab82983b63101816d490004d4480e8184858cc805e4c089c9a05122348ac4b26801a9480a2902cb9829db108623230250488e439461d4204a9028699b960588286c94200c089484d3a864018604540811c8a449a12001e1c46d002106d1248d0c36848200819038210220128926280341495ca66c20b9880a1224dca6911827059892514c16919a06000a090d13128254140892406c11a76452c27054164408440051449289020020017209178d0ba801602869240865ca8464ca44652022218b082859c210219120c1b24c594441832660c30611e4326c53c40d50340dd31405634852e08409c218514aa021110366d022715b80050815708aa401e4302114b68541b004e1002e0103200402601a252858a22c8430685bc27001096511050699482ee03424880440daa42163062d944011d8328922a9310235210a484a54c02481c8681bb825e2448624c821e0384e1b150c8a168681c80402922981046d62444d8c08600c0904d0b245c092480aa930201810421028cc886992c870da00081423601812481b3322892652409884548285524089a136292326402028681001309018429910405a484d114692240860d1861108122d53b211c2c24c24c42019214da3c4500c2410e1262241a450413492214665d94091d22840d9c84d580426dc8650caa68412282a01a71188464a84a46021c38d0c390a8b081222846c1cc48444228642120accb26493328adaa41001154a94108e891406a412458c9680a0082260b208813882e24011244011000464482612113064622872e0068493004523012218b40408318d584280e31844418891c2228208098d1ab7852244804346261342861b36094c046c62040219362911026d24c6094834521a878513208a141065d34211e2486e884860003305db340492201008a12864446501936c50880c1b324c0cb4809b3086810224d48221d0b2844c020813478e0b874051342d238969db148124a4884380701c104924002913174223a5404326111c3382894465e410304c3829242610433690a1c8900cb4241933855b9490140364198949090269c2c04004978d22100e0cb8881c003193240c11022ae4a225e1002a62200dcb0821c9064d80104018a70c5024224182708382285aa4448c044a09160d48a42942442a04092a03174213059158b85040006a112724011726a1464dc9c605c0807012430ca4106400a245e2804008282cd4b20c58208688922824472893b829243520891812d3880ce24288e1888891462d82925050962d12448809954062c648081006132270211549d8806520431111c48c82b8085248210417451a94458cb86589882c9bc6488c206cd346828c0490522885a2460c1b08258018818c1262d9108e41a80523b7719ca40c1202425816724c4610038068144308082431500411193861a4306e14026ec49445a3a489e1125221141013b8800287311aa6701a398423a56de2142619032ac3266953281153066a90b66462028444b290ca04860a312e9cb2300a492080162d5122908c180204274220084cd3141151262d1807840b3608448824c3840d1ba2088c822008a2891ab62414c81064908012c6492093284b02615cb82d4094109a3060dc220064c86c8ab45123348da3022d00c830a3126a044668e1240619b9642328680bb105922809db302450180a209188801062a3b8116298319a266263288a11892d41289283844918c82410c1111114220bc88904859191286a143148a4828c51c480c4042659365001862422870c5a969119308d00a665e13830ca384910a00c0c923153c685d2c410499465a3866441801013262e6316000c49811c160211b92cd0c0497cda1a2038e94cc9434a919eb67de0c9982db1508cbb8471e4c0a2409980bdd2c41d4ada62f2f6a8a783ad512eeeab3b46f501b0a0f9a5c6e3572d1ec107bc431a95f7321bd2bcabbd951b2a544666141d24e2c200fcf2eac7ac8170e137971121862e74a9929db36472e42e1d928ae6ac4c15cf130b5fc7ca39c87dae2327f58bf048591416996bceab419a1dbf6d64bb53fdfc4c9ba426a6b1c20a21005fe2a80ee053814a44ae6f9c5a2af37785f5360f7f9e89e0d4d9df1a3a6d37a5b32017a7ea1196a6891c46ab6050b8e3af590d98eb670607ca1f3d8069200bdf40cbf61981ea4ef96392d56e2669e65784f57fca0e0dece5897fadd854482bc47d4407925a98750fd0a5a94a891b6cf66508e70e8971ae4b8382a7bc93613726eb26fe38931e4c5f384fdae6014d680451d723cf65aeef4a64609aa7d1df828ae3d8bd422e20e2b5cd44ea45d27a0c7223d72f1f93189a5eb39d9e3b622987cd57be3231ec5d6e9c6d73b54db0a9430c203bc6424c9783941bcd85ad59089dda8f71b1e0f620cfb7a24c0e16dc68681e6fc7060e28d216e5211de4c405b321ac0f7053a3eadc7bce05b34afbdfddbd30fa79abb5524a2600e83c935d70e0e31d31f30d14ddaba909fd868414412fa11696cbfe7338dee676f146e5032764e830897a022ca3a1d5e0fd78f360789d50a8f885ffd6ef62e1ef686f3020c9592d675280f9f99b4aad173e57a8ef11ad450c367e220dbc1f76f1a549954cf319cc859b8fe69b90aa0f63033e93a454ab569c570dc99fab2a5b42ad091904c31affb3569103545dd02e14621ffa97dfa373dcba17d970dec2fa02d99638348202b06b82fa65e75c2bab28a85ef546e760921acdc7421925aabe2f5af75bf7c361f326e3521d95763fa507607c43b2056f16e0375f3d742367ce49b841178a6f99c32fe99db478d78fd4607c3cf02823a6fef86fe2f77017b028f3518ce40eac99a80e0556b4de6e79c26c1bb5369f6ae01bd86e485ef4e45dcbb795af382d151db6b030c4d1e7fd35e3f7a757ad89a7577e65626da96a8a778763a4c764291b88436b7f731e62194f59cdbb60089b8f09c938e1b0055d489cd35567dc7748fe2e4dca6fd24005841daa87cd2a9403a869c93316f7acc22ad87ba0b8bcef3c0e270fe14dadcf6f95306fc2caa8086046ea8f1c6c11f304eff5a60a3a3c3390c9cc91616f78d72ecd5d9cfd2cd63a745433c3d96f3b3492df5e301f3b9576a8ea6f807e19ab3b75ba9759e6d325300a76ef7a8df818f43a2949c40f2c71ebbeaf5a21e2acb0b3b493349c82e7846e8740ec0ebee35b3e73e197d4128802abcfb9c4d5f48e1296dc13e868ee67ad00ccfcb0b09ca4036187bd5bad3382bc54d85d9b375bb27255276c2528fd2dde64770dbc59c49b4e000d1ac54ec66bce72fb50048073748462141daa2765d237612317fab755f83f2e83d3f7d20cccbb5b7c3f16a8d56e061216df7c1827591c3b75a46563be548840be63781d929bc08aef7ad6523d29e84bab02bc9c7eae34e760319e9ebda2fc6e1082489c8493693da37868ba7ef00b4048d555065bee64dcdbfea9d1aed92943e7a437fba543675e749790098da3a0774abd3d7bae399bb68d283c02032b0f3f39683f66eabf5025b870a16670f5c1ee4efe3ffcbbc3bf0da235ef4767f4ad8557f348ef0b49ae214a1ae4ddc7d95b74620c8c4d838cbd842b40229c0a0636513f78d8aac02f5862cfa8026acc57157cde593aa4f5da5e1a7293d4752c5a5e3e8a4a2789b759e392ac4261bbd6eedec10d496d874b8be5df5adc9819ce72305a4164d59122d59739e789229941767ee2e3137973264a9d15dbd151ae6589f497cb7d5d89df571e7392bd452e54e3bbf8376665e0a6ea8495410dfc268910f240eb2296c547633d86b0d67f4816ce21f50f771d093c81850f3fd0e08d2ae9ea659f636c13931a386d9f26091f47becc5d3a9e8cd7d7608f34eea7353d92dfc8bd73938e616eadb59c9587ec2dd946dcc71558c1e1b3bde7b3c576dccdc787687dd3a6e82f03add4cab5e703a1b49d348f6dcb270d59ca35d4192a4a2f4d34559996566db8ad704f8ccf5fd993d6fd7cfbe95e23d4832f37d59174c29ed5f6e81b0195392a6cd8e6d98c5f07225df8e9845bb019876971f6d7bf9c65cd14aab830db62bdb1909007f6e6a3e3f83cba9b2b1dacf01158923f078cf0f00b1c7e2a6fb0d58ecac00ba84b06ff99bef03109d19db64f641620c8a9981f670db917c4bf0957283547cfa55ddd7fe7ec05f1c3b3d11c0708e961a6fcc2e3dccc3fdd72d7345f51c530d22f3f8132f117de2c515935175107d93865f3c785109efc56bd9a7a8f6bbf2e0b7b79cc9b1b616b937b6d85516e48b7acf6106419f5845a751c7dfb247d8c8d93e24af0e5a85706a7d0d40ad1bf7e7d9c118f9748c40ded2543f83059922dca232968b88ce0b1755a693b5c57bd572477be7a1dea9b119b80830832462ddb89aa3a641199b15b067930bdb10b7ca4959019e700f065630ac1df5b8b4953847462ec1e9ae3d7152506aa92f2109b90a7ab2fc016868f627b5dc5c7e3d37da672a3ea4c3285bafb72d4db33373acf9d46406cca5d8823c3bfc0aaf8e91a9aadce204e2c10124e48d9482b2c254d2f221941e619d45ca9c2c7dd23c86c22112a59ff851648bf891d12bd6a7822470a8d934b3550c7fd8a1fa622c0da69ca2d36d8c5bf85b1ab20bd286f8c0c50fcb40a3decbf231a111a8637a7a97311ac3f620d7ad373965079b7a6b426173abddda12aea3d5daf9071ec87379845335886407b9d1a5740b5905ff06a0d0ea48934828ab8e80a28ef06483965ccc78dba14c1dac75d63b0b636131d43d6be22a7ac1e6fcdccc36229ab90e1e22e48d61fc6f52d177804f7dd47131fa7d3452fddc77b873d97e2d107ee6bd610739123e92496f0ede1532dfaa3d1dc762369bc76b202ca19295c5fcc02b59d8a744c487bf4ab50802564c1fde84678a3fd04fb21206e3e72ccc64f617b675a394dc1ff13cd220f09add174c418aeffe992a623c5cbee9aac03bcf5fd57d0520bd025b3332feb1fd4fd60489c391accfd32a83fe60eeab20590f3d8d8a4b5425df91ef0b7aa9414ae253896f05cd076f0fdd7954056d1b06aa5d35eb552422b9f77666cf477939f298476fc627c5e053fbfeb94aed83794e85e43aefdef8b6eaf6e2f4615af9e7566b9326f71837c423c91a98edf9bbba43e48fe49440a3d3957738c54e1aa6f5293e7ff2969d046111af130280745eec959e69703f77e9ec6906f417e367b3d7c093e15a6413eaf1a461dd00b5e0866114099d77ad24f45ac13e2d4870cf764858e7530cafb5b9d23c1e0ed0992fc0817d93628ab47eabdcc1bb781c4a5443ae20e053bfc58342396c2bca64d331169e316b3df073cadc87b4c9742b26e7c9d9cf9493e48e148c89d9639551c2ca98c843b27bdd9b3ea6821d26572dbda3a6aace7bf6102f11e91a64bdcfd83bb75ff6fbcbcdf33f82d026ad8d4eb189126573fae906f4104a668d0754c231fe0418e3644f64c1741db1a4c9a45554a12a924bee0c513076268421ae2621938ffb41394c80737a890ffa44b236329caabdc3d162af0beb93c3900c5bddf154f53f29f6ca9d3c04d60de97d8fcd314eebd93731677f52236793e423d37046188e9753fe42f475e36b2b66b55757958082b4ade20e47be6ea790ddc1d40f71a01adcfdf6d09d9db36707c13a66475e00bb98335eae6f283a7626c03ed45d5e2e910c0f83b3697ac58a7ca1db4076b1f8e80d88da73d6a0f786fe7b34104c335aaf53b9d73b89d517a62337729e99a7945aa32b8fc6772e735a649a27e6bb6065012ef9514bcf29bcf15581dbbf52d144d254328ec6c1030f870478b20d9fa844cf5db5111924f294ecc4039ac8e594942f2e60ccd62a244e224d487741218fb169e49ffcc48d6639ce66409e1f9638ecda661c871ad7a7752f8ec9b3af5a33b13fd7f816e97f300a506360dfa894e97428f8dc9ad64e79c1537945fea2b821d2fbf738ac4c126031e5b40d846dc3ace19ff3a46db533ba71a09b986faebb61ee77a709b45dca1b3c4d650e801a94b992485b5eaad7479631127c5b5a77a6331f8b2df656fd3e30badec74a0c2e2fd505147d3aa24ad26440cd7d724b7fea346476176a1002be8f4eb2d0f3b65f17a8050f77af6bbe2efa2d18c9be5fdc304f4bdd5ddad9e5c8fd4c4c9ce65529aa846205bb1531ccaa83bf9fd02de6bafa089d73a795c0d7c084f4d8c344eb1f00aaef38c53e0616571e4b0a46f5606fca5a9448b179c889ceacc444b33d6bd01dcfbcb09441222dce92cbd889790671fb536aa22ccc73ec34fa3fd63a2b2b1fe770bbcf758d9e1213fdf4014edb30eab83de89ed535947f34112680a3c85f18ff5ef055dc45403eafe35d22c741e1d498ba0014a2216c6b8791828c910ae231b717d75a61e07a0da4abdb846bf407d56cec5a54501cfc78e960532d3c440fb5c082a6d16c47b0a9b1d2cc7c415361ef20456c798689d457314378ca7bfa7812539481594a26e4cb0cbce956362a9e751272026706f95c560ad41ca190534d734486ffaa6182e6995d09543c538c4c7e066c3366fd7824a87ac587a9fa7994a7306acc560ff602c565c5ba028a624db4d9f\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f5e15972ad2246b58dc056182273172d39b05662b5048af41a6516a04e042cf25c9c233ecaf6416295430b3e77e8bc81d1939c0c6a6304ff1b750bd145a18a2a85e53116f2d3ae39e39afb5e342b59e66196b1155c886ed149278db268c22e7202ebd8ff6da2768ac4d5fb15b1f3307ec53dad5e6ad6db55255e7460677ed6cd8ac2446414600185000ab66d1292600b8120ca1611c2486c628828099929c2a6640411651c164684364adb887021348c094182da0664c0386263020e40926404b8410336228a046292421111956800032dd0321014832001122cc2042113100d6048650b108ca24428020865e3022924c28514c34580a864c4308290c86181982912014c92308d04901001852c44402a59b4414b022c49822100329199b00dc204915a082da42245e11632c84044ccb82488469022b66098288ea2a088da4432c3124ea01469233546134708c8a66dc02825120084cc868901a5311bb8500b0046820088218804a236481aa9411a0351d1340900c62861384109b081d1208a9a282160448818996859c60d011829429485e4a6900b9129210368081545240522d44444a002121294048a3840932852019590410870cc068ce4380923828512090d44b20082b8651ac42c22922dc2c03119a7259048208a0286e4c24c1c170224c58c02174a5a380811268a19298a08232a01010502b361d39270e2b409e40830a11629099821c222059c3661a3b050d3844dc92431c03029d4400d2443468ba4645c36054cc828a1b4201c4706102648a4466d00a86848b26464884914454d23b1644a3440a446525432521000911b4580a0b4219210311b802491120d1a16110c432e92122a1b037012111120096d1a252189c40d8a2849e1168d804602241170cc842462b08d890068d29004022884013421dc8401a2328d58260e49140244b081140946e2383089446c1a2946e398459b224c9238000915401b956523098ea2081208937021264903210621c79198026c1a4869c3424219908dc83452923650221571c4125101866cc3829058a6480c442a1305066338919c422dcab431a030298108110b425120c42010b28c21388e9990491412105986495046441cb405c1b8501897840ab9240b3260e2c6059c30628c48211ac78800182c89408881484de0260d1044108b920820166c12381019b78460286ddc328e4c04099a8450c396659814814288214a4405948484a0c8045a08040c3529c8488e8aa66d183890d9b46101394941a64549986c9ab20484c4110431914b002508330683487090c251224006d0c84121090544348622b345e1960589009010344eda02515948468c0462882491a28830010606c0b4008c24292436508c14662046085822244c90610c066dd8b20054906d8300919118259a04001a014809c42d0c088658b28ce0984ca3060d8b162563002e20340613b93183c624442884c1140512354e58028e8a8849dc4266a3b0210b3690048988da383153b6105b124e99182c8924918bc80ca1c48d194751c9c42da3a4911439241b19819a28868b320e48c26483c42143c6690907215c30660c086cd2b88c19c9004286054cb28d9a00295ba2401b3409c028129b285003a96c20146aa2044a60486922170ee1b6308b186cca085114b524643800c210055ab48112378c12420423c98dd0a82c90309124164e2496840b1924009300181160e4466219a620d3c04de1c04510301193202e60086c2189851131309ac84c9bb230244001024384ca245003c44158a06021b761882091999805d4926954a201c0a4288ab42d81a80853086ac8002614c12cd30825849024d3c40023002e08276d1c270d8ab86861a62118a648e230248c862024a584598804d2c849a4048922394c13000c11a310c9b08014016284448911b841a3c24d62a0890b861123146524006199200e520830940890c0c001c436600ba791d98601cb268292c221c8c668e01864491088520865e0062c18882ca2006a64c28919196c90220514178dc8000a11a6851aa8841213440b176959c02590804899260448b670c0a06943089212170554c02522000d1b360d01068e23376c1905648bb481c42202c824080a002e11064c2335725b1222132969cc2030100725c010821c17500027880ab70443a68123a82d0b8149584621d2c8215086280a896c233282440648f7997f3a4a02dd96ea05f99886e7035f7b872fd07fa322f21a3dc47f787d9914bee7c696dc22a45366e839af8eb0bb2bf61719b225d0d53ec79c27dbdb681f325d0a4c58d4e86f7dc0767a4d3f20e19025679b924d3953b1213ce7b1a08fcbf127dfe860cbecb06b90ff62d704fcfbbc0b7478a4e63e14ead7ee05634c7278f7d659a8706b0f16c40bf909b18f01bec20e95437aeb585899c0bb0af3328015af0aef1f14029b01f3a7d9cf188022296ac5501a61a6145b1ae36eac142b5c75fa314fec0a1d482690fe98c0895a042e2d893f42fd446cab8fea7b6f2eeae767abcf521aeae0620a7d5c6d8693371ff320af03cde468166b0b592d9cc188efa31b42b0e7eaff7356436ab7382e0a12a57aecbe989fc249f6c0dbdc11441e63b1dcd707eee1948df10d6a2521f8abd525ea05987867e9ecf3a1cce6b978ef0fd869c8d0c0539b58f3355f0dcd6ec6016d276e38455c67638572c6738d90e2877a6bac552cbbc596e474d403d8ab8ab69f40b7c694179a5e7db3664d4107de70c5ed848012af5edaf718380da6bb3eeac6250bb50d1b994bb96524e580cc3413c9e7bad19065c0575906ba4ee7b582be8048c5126ff2c45f1be6eabaeeee090c1fb716e16477cd029bba2ab1085fa4afab3481ad0aefbb216086c6c4d82986ab1f5d4695fd2f9f2488f741346a7fef2574568d0632a7d1b8ba706c849e524c0cbb397e18f2085c5ae5cbe2a829b3755127e35c2db720194824dc40e75144d764d7a2ff253a6f1b109a455e319c5ab28578121d641f41af2beb6bb71514a84efabcd56c19319e1bd3468531e8a4ce78c4f1b89164ba170123ff8efc61f01a92dd9a19027e11e2141ba7b4211e47ea5206608fa8fd9abefe0995a6857dd0bd3ed0cbe96cafacd110cf3233b67e8daba02a1f28c14529676f9902a87bcd0b05fd183ef4ed1cce31527cf25a30ec2098af07d8658e789c2b94aa9169708ed686401b73d828bfbdc8e943c259585da6ee392853c1f7fdb65ce2b5871f67b38aa35cbf851d4c721ba59b3a49e251e533f92c40128ffcc3403feb3d66b342e3fb58ad621e86ae4ea694e33c24e132ca123be19bf33f933edee5ed9a5ed6eaec769815eeffddf1892f9e76ea0893efbc9377366eabf1e32a628e26a0362451e4db704d1445f4aef183c43ae37d9e96af9702e5287275d2fc2c563f6a03528be62cda89cacf9458eb4b336ee78c814e52222b503dee582fee523473b97fc08a41b4f4068db2ed9ff94527c38b3e4369b702983539aabea9c88aff8f7c4a424f45634ab5258e3959681bdf1a038777b7525e53748abe024d824db279ebf2534adca871fe186b3bca61769c065486cd8c289c9b88cf6500fe7d691e1aaed1579ddea5f149ee1b4f5be1ec98b2978a82b8dde4a79b799fe6c98c7f0a7ab2aaa4d103e484014d6b989f560dd2ea6d9e6df9b1b267ffa1ed895ae6bdd5b13f9f0a4ec1a5d65180119abb4a841ac1d73841d481c37ce1b40b9ddb5bf36f0fceb9f33e98ba0cd4b57fe9c36cbb07a104c2e0b3481831ac2da6824edb76277e9c06e48347184208e4137498864dfaef57b45232afe4170fe85e7dab426b8f918d34ae28043f81a914062cc5e35d761c701ad6891ed3d008a800f1c63600690f14ecca044373648a0c1e7f15bb7655c88abeca60883f275a23e50de845f594ae839dec8cf9676f3abf2e2223aadcb68815d4519343f73e551ee7fffb015196728977bc8c6addd870e96bf439b37ed849f42ae9ca1d850b601c74382604d484c742874dc35ab740df13473b5bd55e61adaa012c5dac04696df0fa2ca3df9943ecfb6a76bd8ed39f185f45503b3dbaf7d4582fcb7a3825f3125e1c804488474cff917eaf61143750da50136311663a4fd4e8a9addc415ffd694c4cd7d4998c057aba4adf6c07ec5b1f6d622ff3f8f8d77deb65bd6c088a47caca00d551c38a55b6b2ecc773be718719a6355560d00686a77c68cda8efeea442026d99badbaafb6a861f222d6f9d7edd75267f5cfc87731801ca22a863afd7f4b394d90af2008fd2e799659a0843584bc6329b6a84f7ebdb3c374cde50f6bb5f9884b39830c4409c967654f5a64a6b8d7e0e316c7936fb84a3651eb5bce7ba80f3ae6093273dbd3ba337484720712caf9b3cbf191c8a49968c1e5e2499c4ade3cb350fa6049c491d52c2ed697d2d70d62aeecce9ad561547090b7e4ea7ffa0f21bed61468686f75303721109b440cc8cac0814c293bd9b219cd86843e6d3ed498203e7ca8f4ff82c9cccd229a2210c7f32e7b0a6b0646b8e4e9617707183f0f5edb0124bd0201588baf7e8b23fc7bf2d7aae16f54b37c963b3660a2c3257bc889ff9d00de92e1c2da98e25ca31549cf854d58af17fe346f0ea6ac4bbefb393f5908f1b64254e6176cb28fb9dfa70b7a0462cdb263a2a46858d1f37dba969e0226ab9af0b22a141e52bf8c0ce9f7234194a462deb924ff4771a5beeeb6d5686121a5fc01ac1ab9fcf701d7401373fdc2af3d8810a6783d3fc175f23f85a113bef7027057a967fc94a5c93b60f15b1d87d1be3d74d1d377b1604536720af47f6a7c2ea931a9fc6a0d9de8c2cd4c9b71c7e653a67b7aed5a8c2d0ce3c4e3c51ffe12357ca08438934952de8de66ea836a90b644e6a4241da70a15c08ca9f74bf3fc6d7f5eaa7cc2e8abcce78c8a19aa597980603ddff36eebed77f658bbf3d5e7498b16668bc8956066f3f5c64df78c6b9301834c91943be35c6e4f860e7662d1f6d9b36fa30a4b23322e6f7b328bd86e92da8937837fde1766adbdf647d7a2718f5447536280bac48bb1b53d884327b7077e17c4de67e6ecff8e89f18afb82f5e2b2e2dc7d78f8273affa55efc33e73935ca0016933259fd09e07d183ff884298df3aabf7e7907b08e457403cb99e99ba95eb854234f5593003cfe661daeba368aa456f9408b46f7ff92fbef9886bb93fecd778d09c4f43ffa5fe88f32dc4a404fec7a6d4b368403c38efff8d1758049a778af5023e626a01046f36e5c569ecd3859781caf50558cc8649301d0fdf323042834d7ccaf212ee8a4955fa9e4cf65ebb2029a0835e5db69993956956545de4cd1715980ff554a160e1f3e48c323e35b64274ef64bc7106c15e2f9d41ab4a92692a9f6edec8e66a73c2d4a6ff1a881e63163764fd3cbcb3f5601a84d4c26bec4fb978a3e2473d50bd561c08d16af2542a49851c8f63e0653bbd6b489799736fa39d8707f477218d918fb283218619bdd569e52b63fccc6e3c859a7febc7196326a69143af3da337cf0653a5d6370a5323f6c31f8791b1d5e55032261c5df8e07b8df185a31a9b398abc345b87ed8198555a0841e0927035f5f3cf5da4fb2c0ca18b1bbbe3a9c3b3df9d1d448e242513f5d0dd481d3d586ef61d5b857bbf2d1f771a2aed0ef2bced9a6d0bd576c1c8bd2e3ea9ca6a6b6f9e8296117012d48af013b1a607dd70fb2edbf409a0a9d5fc0a438464c773e045b8d124a0c2ab99b26f81afb2dd5d11ef44aac1eb1242de61af723667d1d25a349b4d842544fcb4e3bcb45e0e9563039bed3c0f25f6e3584c80a5c19e4f5c83929549ffc9f9c2be16c4bd36394ff69634a1550eb60c53d7b17e08f21121e10e2d792cafe97cfacc8ac6728d3d0950d3c33c5ddeec089e979598c6839cf981e48b5dd11003e91564f8bf52d2d20dd61001d3fbd329c22a89b6cf70816c268afcfc3576a29285c9123fbce1f0f6bed472a23d9b09f7eaa7be73451392f9130c7264ce87b942e679af7c91954cfe529869555a4cba8485f9ff3a9419649477ba45c1e7e852c3dcdb637cbec5261c94df5ccc30e904bda8413c4570bb978abc02aa0e909bf74bba0549ca34377ccbe36f1e132c074244926f0008671c9ca6a04aaa8f8466eab60543f5a0a39826aa231c97ee6704d685caf2873d918ee42ca7454dfc30746b8078829e8c89c831dde2ef7a6b2e5d6038ceaf4e24bab7b4a54792b58cd14548979e0fbc10114fbe23804eb997b765bff34b162a354a4d9702f4acdbf46d11b679e0f423b5c6e942bf5567cacd39053ab5512bd6e745c9073911f5735be1e5289cb7239ae1c784074e76d9364ae0f6482c1a31692156cdf4cbf4c140745cbbcb3b213ab1d8eee1370e9174e62bba205659507b195bda05b229d00be377c6697fc35cbbb14f9ddc32ecc66357321c915041dffe20be5a6d71d5236fff001ecc4b69fe08bb4533498e00695f6dffd34564e5c69a63ce0a0492b40a7aa45d0a6c90d6fb86f8ac006a1df480eae6adf7c78ae447ba7a771114345972d2cda9a0af25ffc15ddcc243fc2e90fdcaad91a216bcdd35a5f7d735ac4048a72dd510c6824df4098d9ffd7d71229ade24c5dfdaeb09070c99bb6b84cc91d1bb754e963e5a0d88a04282620102a5266a5f0ffb43a0e41e4370d66474ca6bb95144336a4c54bfdac1e59a678706f6bdddaee602c9bd3c0081c13dbe1644a755928f206a9e28006b3db33b6f265815e666ff3403d118d41c099c5be988332141bb73d2ed7ec71b3c2c4b2541b9ec06c3cd563c5e7ee8e6ed289be91969ad646b1260b4490aead12ba8f206e438f9260914f9c79549157455cda2dfbba3b4c1aa48de004bf002f366afa46573acce2c54d863c865415e887b18f31fabe9cb109c222f97097891f4198776cc8d710526956\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-B5CD00AE06396DEB95C9BE213BEA279AF0D10F1423B5A71854413E99F7216D9EAE76C8AB884545496559B14AC9A69801EE3FD2EEECCC557D7988F34B82D244461388C7D4EB16DAC3C0FCE0783321A1488DC16C3C688126754BB4C26308054545D2E46C6BEE26C25A7C3B701341A0323BEBFC50C718162B7FF3B6FAAE7156FE300F2219655D8D44DE89845393011A2B466233B907355467EC49C9F832044BDFCFCF722D6DE7946FA503861C80037549ECE8FFF95026CDA33C9000FACC334765A60456084A0614455C83E0D5D991F7ED43952B7A69F1E326D7BD33822CF1F286D85FAE78F0B8DE186368EB334CA56070122DEBBEB920C5547C46C1291E78AE48B72C7A39020A1A2E54E59A2E46606C99E652FADB39AAB25399B0830AE733FDFD973294B93F47C30D0824686C735E05FF51A95C1C76467A4BE6BA80C5182353BD510E8D4B60BD43436F7021B3F5980D1A769B2E3BF04E0C257EF577828B327E2AD85E0581787B9B7FE44D6B826BF8405D3D0BF8974D2B1C569006C7FC3D2891DAF38DAC36F64A256E337B660CA59D2B45F1B4AA1C0C72B78495FBCC9EE9CFFA4B5A101F973E3211E728040904B0B2515DA4B1CB3774EBEA1324EB6907324E733C7F17BEF6FAD0F6BCEC1F08F785DC6FFE02FFED5C0B7A631907196835EFFD0730FC8FE020B0545C920DD7B2D705F22D8D205804397F6FCC60386F4A576204949EF60DEAB269905707396CCCD8DA9B895270CB39839BFD3EE64149B0085B96FEDAAF8C738E449E585ADBA037BD560EAAE978A6ED61DF432B6A9C2E50C2EA33A8702A23E6848401F85E2C18C7C767DB15920C9B3B030728FD9511F8903DFC8572A3679F986CA1B684B3AAF489DCD93C622C6C4D475DD60F10C390873B09B5A352B6F5A104C90782E053F8121317EB8D1D4C0145E04E3B68446B69A0EF81097CC6BD0B756AF78963724D9C83C61B7B79647F0844867B605E2B60988D2D7AD07CD6BE2D8F904F0D269187C141AC67C9DCF9961BBFFDDF3BF34D9CC5781D1BEA348F49EA8FF7750F7F3E0624C16FAEFAF1D8B6A818AF5FC5C04E2504A0CF4C2DB54930EFA759A292A2AECA1EC3A08918513D95C44BD133657FF043318A17BE4A5DCAC54B87FF38869D017A4B14DEB60480AF1C5F19A9F87B94B8EFE0DF3F931CFADFFD7AA50AC86D9CAF6D434CC81E6ED123711E34B8295A446B554F6DD5350B44C614324D8727F1CE501743043DE6EA085DB5154AD8E30E114A02CDFC96BEB4F2718033B227CB8638BCF617C73BA4473851E62C8A287CC4F9C659190E60AEC468DE7EA8841E3CEF893F3DC79DDDD56B63102EAA5B2793711A0451EE1655C6768393F59CA6085866FB41541D9997C94BB56F6ED5D731585E7B25B1DC853830DE5DD75F66298BDBD2E505DCB3850F96CCE0D7274633234EE2FA1E2782DA3D6CD8F5DA2C3063A923DCB6A2F82614527CA2A88C1AF21025B88A08C3104C679175DE2CF00602B13E58FAC9376BECAE56A60A6A8F144F1C98C8FBDCDE6FBCA4ED13228FA77CBA5CE631BCDB368AD9219568777FB4397BB40485A9AB63E9E3FB343154108D8117CE25BEA30BC854A241745FC6C26AF0D64124AF10BE4BE01B8A3D842FD9CC4D805B2BE26F8B7BA0631443F48C7F74207F640B215E0DDC42B1954A1EAB2C68E63601DE3AE3EA54E16282BDED00FC7665A9E8B098BF034F5E950ECDC46CDD22210244F102E41E0930FDCB24AD6C72507E5AB6FCCD4D6B2A2703C358EC1B51AC87302A5F507BD01CA6B5FE04EA2A5322EDFAE8161965524C61956CD201C4BF2F01B54F008F5F4B6770D0622099CDBF94D6C41DAB4A5362D630B9BF9CE240ED08D698D1AABF29E60BA533697C3C830521314F13EECD95C7D2600E2A756AF19AD94D9EA39FEEF0E3EAB3EB401225C2E55B2F2A8D7D1A3AA77A38BF9BA31399F6E6458F3F21DE354BBECC2E29740FFF91FBB23E0F61D7E0698CBF82D439AFB018DC5F5011B7BE98993E8B655D83C666FC0CF84A532C7655365746FDB97874D62329B1EFDB0B0C8A46056A85B60E38AF8979FA4910D2D9CACC3B5C1E42049D04C44273953350E0F756081D2DF6429193768802577C381897BFE540BC036293643360C848A1AE388CD17781296A99AF0CF75F81D568D0648C8A15436BDCB16FD83287C6A54F88F2F75E6B28E1C5A3AC03501D6D723AC5EBF90517D194A596F7F95947CC169CFF2A65D2BC9B54CA6AA45BA9E901D4AAC81FFE9E62A479EEC5B3F9BFF24C69FF56EC52F1183B5AC48A5BAA90BF595990B6EBA5B1CB6D88511C7D0D165FDF2615351B0343918B966ED1CA0CEBF6956BD2CA599E18619E1A5930E47CAEA92B8E9647A0262A2B24E955040750E6C7B935982CB742EE756DB65B462F677AE09A7521B0D3A42C2E97890C47148618FA6089975F5D491F4D3F69EBCD54C2B53130698A1F4A47505194F675D68F2DDF5983B008E498AB4A25956CF724F5C1250D5F9C75F3DF9BAA696E300AA86FB4B9378EE18E79D015CDA55D6ABBF5B0BE819F9EE58B49656D3B112AD8FA6651A8905061A8E37760C3F2EBE6DA611BADD44268975B5000051BDF7158EE3DC200B47FBF8568C9F22719FBEFE5906444DE9300689BFA1AD167\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-89ad3b5244d66fc84f3dbb02bb51be6fa25bd2ea3deb3bb6d964448351d9821ff3350a0923768e299160662ec5f29db9d9591e3b6730565c74af37804e43d888b6ce506ec5390c18b510f7f40702ba377ecd3e482c23f10ddd8e2dcf132ff6caaa6cbbe799d88e81dc0465de420f7dee501868661eee9c9a2113091bbabd22a2d10692099725cb201163862d88c4845944051a414010460912c764a0066a081666e3484cc4c440d8a408c4466ea3460509170909844ccc2822da9481901449880831c0c20c9b106082c6601c9871d8320ed1942161246c91068201386dd21811183131c108282091450a248d09329219277222042891020ec80228e022429b2011e1922004b92c204440044329e3983110435118232d19b761448425d918901347614ab6084c8428083229c4206403b364d246856230721283000ab94409086188c64d24164012c281182186144632143825c48281cb9230dc162219414820432e1124221023124c1068e086640883811884210446525810725348485a142024119101166c1a8011d0244900934dd13891828470e4260919b06183b649d3b488819285123692d1b685d08261c1080e21b78c0a305013408d0a101098208a81c24d44102143202d0845280208264ac8700b342cc2186102394423280c40369208047020b948199951e420204b464e124066e2c06522202d10236dcc246a89926040281008c1119cb28898a630cb0464428045d006909b8211192646da90241b824c2212892005861b9451013165e21604c8347200448952124c1a290d21a74581942812268048382240400d0007301a056ec1244c1219822088480c4829d930828488048c40489a064c4aa40061308d1a25314c348e58822093a204212268800684d2328211244a1ab96512092440140a91166e4a845019057120178559426c8aa41114c0651b98654b9609d146480ba24c99024142344222024042480504883022426984024d23205244006ca1806c14060112c2251c289052b66452b82808b30d9308094126100b8749c81285483429c922019924450bb16d000460202742c1162590380622b5050a4060c0b24018266c89000964882d81320aa3b68de328250218469b34899180894c20012419469104611bc931a04052d4400d1b04300933648a0031c4a8500c430802252cdbb631c1482e00a92954a850a43804a3006ddab88820078ad03880904620cc4846a0960d10b5211c373289346503a2201b88084482805bc644d10885929208da84211292841826329ab43051904141a844a044120212311992290949244c4428c99251620820141244508404d1049112262902b620603208a3a270c4367241422593882c18a00060a24521378c4b14441c222061366e249641e3a86d59c201a292700a0006e3405021174e090942a1348dd3a0299a96219c924d1421520b430e0812129cc868e2b04804b94108b64c24016d5a868c20c8459a082d5096689994101aa5608c0091088950a4b4484b24654380211a266411968d80a22049369118c6290aa16c62806cd4a40d8cc201e4324619261008122924c42409a10c10230c01c609c010069b84699a14240404814324620a1162031548203191418209c4165220b72181a20010396163b86814374641a06d98344a9314869b92459c044ed03805980249a3b041d0960c5010048214060439249c02498c4220082828e3426d2228308b3451a3046463466a19018c5bb24022a30454146403221210182689044e53828804a72193b840c0c06d0a8144d9100440b20444900181a664843825c386812394645b806059080d08c760922262e1b2501a41721a3100029111e01065900000014669d8021122c8401b1192cb0850e0166a22812c601261c41649613442003089a3a490e0c009e3b8289ab42820242a0aa6451a073264482d04362648882140002ecc168503286e99b0614c342c802260e0b0080392110c841018130a19188a9c36610b465041b88d22a129db307083008423a124629661e00465c400681b28451b444dcb802c54c688db4265d0121119038c0c036a0413115016048ab2090b09260c050954486163a2640c281092800c03804053928508004904b9845b186144a85194186ddc92040a4904a00811c8b26c548645189544121685c04265c38860d4c42d61844d11b52c42228400b611241a129dcefb764c1653d46b842bdf5501ca1428a8af384c3016be82afe02e5a8c299790705b58a1f23e130b87ee9058545ca4762cc1fc1bbb0b5f9e7774e12c40cf09d64146aceb54d786746a48974aa907cdbe16dcdd77eaa11f1d6681e810144694fa949a4342b6b7511314bce155af629d90a93a3cd10a6b2ef2486634aa06121a8f1c1595e6e0350f470c0f44b37724e8bfa4773ff0c6d76d9a597d4fe2ee9f388ae8dd477beba96ea6be86e026468ef471e5135a5350d72e7f82d775eaf3d797c89ae0b90bcdeacb6752e775d7e90a3095cb725b5d6a82b994b439d0df25115cee06c9d0369f237684178860baa33fec3248860483389b8379e53c6eb16fbc8191603197c63f0419e9a98e833f4691229dcd5d94c71e37144efdbfd3a3d27e31d29d08abf2cf5ad55c3d93fe29650990f00859d0d2b6ab597246e7fb071a213c7c9e6090eb450a1e3fb1dc67c1f82fede9a3b84291930bd18975476dfa714ec3a2abad61a3bd4ec0210da3691d40aeac169ea03d9252fe7676d6d9262505e560796fa073a55f8c08b88e050dbcf80b813c55496045e2c8c45fa6da9248e18f5ddc1c3f1578a65eae7406d7cf41e67aff1e47520a1a208b6cb98fc3e6efb11c735287cc64dca777a4a9d269f40f77a99bff4bf40c18ff417b6ff9c4bc4927b0faabe301f6d98a52a9fefd655ae1f25d1d39d8a2963a8dcd54d3a9a6103d676727dae68e774ab301989f4d8f7ce36f0eaf5bbb736305ae2631e783799354d4124c75eb03973aefdbed89b6a91578eaf23a57cfcbafb9bd453320eb6e7dab046bd83629778226190ffab199abb162768975a6daac7a899d4586aaacc03497bf99e4ef318ec68e08d38b19d71a5c637941494fb428ac8273ac37b829bd8c9efb230e1c5925251f0f5e97913ae05ae2b9a94a06c3a3f50e720615766d2996625376d1c3837e587a9a6bfb7b22a52f1239d137dc5f82b4003a082e1afd13ec71f0177ffb29b6c7ca1d029a848a7a51615dfd49f1238ab7ecd99a4c247c6521136f713bd607b64d688e028ff223f4abce8ba86ccf2e467819556f7ca046046c3745211de9619087cfaced23db4d37c4d01756df82f3b2abe99ba612d222e5c013eeb0b75b4bbd55bf94201cacb7c6c661eefa52fbd8a1fd06567695a07fb596b13222141f7ffc72cf791d5773dcf847749859c27aaa4b5704c3b92031af9f527076dda5f45de8ab53bd023c3816478325782cb71b5d17335e235cd6386a816a10a7ed30f8dd9137cd5f66e76b6fd8862a8dedd5e6c388dfc4f73d060c6a19a6bb792ec2ef5f96fc5e470fc3d3895188dd051e59f43094ee61fde3f7b98ba1bb22debdf26acceb87ddaa01363f81beeec856ef25902a3692d0f46b3a37ea4c47a72aac18d77f3417a901de6e5b5117ac810017c280c37c8e0f19b157d84087ea8f74e817a1c647c699fb8ee25c473c8932cf723ac4df3d96475cc77fefc54ff6cdd8490519c97328abb27bf387c78274c42bf6beb338e07dbf954f37da0964a36bdd7740a93eb2a15b553e0879bf08ffef6f48a6983d3a419bab890f0fe797ff96aea354fdd4720aa4a80d81f58ce31039c4176dd6894f19ad915bc52645f4098c6a99306e9f842ee21e735a4092ea05fca13d63c6d41c9d799965124946dfde3108f45334af1daadff53ad649654c176d3d1239c7433da7a383b09d335b1219cabfa72faf74aa4c9ace7d7c35e3ef24283fbc33d52d9f9ae369edd9ba948c6a6e0c8ff652c5dd3249ba4ee9190548df9d44553ea48fc35521eaa19e5067015ffff30bdce2378c22493d4ab73678173a68f5c28e9b3b08de6ca1ad3feb47ae9b95708ad2abb571099faa68c92d2f64af1d3ac55301e71ceed47c9c21738397cfb834b6441ec1b1ae9a96f326590867cde1375634f74a42b5fe376a1856d9d3b4370407d99edfe986235f62e8862a4b2c25d37f15aa1ef6420fb7a9c41f1fc59e9e621084e8babeb2164dfbd0c8c27de2c938896dc918afabae6af451e53fe3478e41a9fd95a339bb010fa98353e5f17e07fe1581386b0d860991d1b3ce8be86c9eb0f6dda114448f42bffa2467a4ce338ee2e41d5fda6af91a333345d904a8ac8d1f9cad18f06a23b02d32c480fabd9982adee870acae3fc0b018bfeda93b163255814cb7a874ae669070ada5a9ba584baa3737d7729ea50d233c7e4a002ba3a5feb7b738fe176193a628f165204fd147b1f8d48c39122cc2987eed7f5f059c176836a28333fd5cdc1547a62e647e17c29e9f5e55c7707211dabde4983ea5dc9b6fdc600fcb8e522953d2bc3ac7d14c3bdcf1bd2ffb62db49c0c756875016adf31909e9c7a409279cf074e230267a7c30d07cba46652e6209e3be8a970af8c8ba6e0abfe8fa53340f06ab556be351cdb6df4f88a892a569a54bd3ecd71391094f2805f6c97e2c4dd8ef01caa44aa0bbf01e5f6b96c37c6f59f2aa8abae86cbbb01ab64afedf832772897ceee3c1a8676c25eb2d306ede14b53dc4b131201196c6eaaf52e5ccc1e38c904fd00951fc0f5368792841384091d47ca81b2f9b15c5efdf13524e97101911f89ac3065dd6888253f9bc6a13464c822791a240f1867dd92a43bd5f2407cd2c85bebcae207acd4e18630dee496a926184757eb76d6567e2be02f8e1260f4b996d689bbefa840f69bb410393e6eb1dafd44d9e9b5d16df766ec1acfc36c7cb0393343d266b1f1038c7a93e96912f5ab45c4152f5c41e5146f94d363bf7507ce873a9e3aae23f2507c5593cd3aba4329b9cc282f51a25fb50e6a8c87911f36d7e249603fd8aeeb7075839b4cf6dd2a39d19bc4d6a3e7c1864d682700d70972fcb47d614df7697685ed768bea835dba162c720c2f4edf2e6be50af9b198cb46ac8791a4b86e8c677a572ec142cfc8aacc8fdc655654c4afa8fdafb3bda9bc8c9d719b9b47da3073ffe1de8e60621c4e98372252673abf4dcddd2a48b9c431ddd3fa156c16fac044dad53e30bc38bd58d7f36a9751161acbaa04861a3fcdb3a3b6d92217f9d43f093198de2ba201d3fafe8f8b9501ec822335d3e38ddfe2f85259d29df67d6a6b54a4ce9b42950d4879db4d5e2fc8619ec15737f2a986ce120160fe68100eb4997aea3531948031445f0f0c1047fdb41e09440bf5655e1a72becc30369ec37729967fe08e75c6bbe07d7a9e25016540f3a1902dab57d8ac90fc4ffe079e0c4e42f9ce69b201f878e0b63a85702ae51a27a0fa5ac968eaf676e2759bfeeadadab6b70cb54510b8d0c5d9fcfecdb5047cd333872d5754b3018b5cca68d78114bac87d37bb3afa465e3e7dea2cc023b56e729d7df130c9161911ed1d56e5eb8617596dc4c1e167f4a976d63339bd444c31362716554c7072c65f483a3bc44e93b3ab41f177dc20cf32550b7346d42d28421b23eea1a3b2c38738ce9803996369b3dc44b5042ab7ee5faba539c208e65562757242dcb1b9dc34c453be1869fd575b3b32336beadc238a3486e9fb9f2c13c3c4688928397224e06294302d158eac9405b11f607020d8f410410460b2b54c4612dd992daaae186d130d2cd6cb59b3db055449d4293d0ec7459f99a5c89a6bbda86956b28b372f2e4b330b07bf280d2b498c785597536fad5c3e5bd2ea1061f036ad4df26dd7a19e3a5ffbb61831761b622877b0b61fff288d340a5bd9e67b32a3b1a182f2334273ff29ddc92c9af073280659c5180cc38eccd73417ddd1250ad04b7c241e41c993518dbbc9adeb525b102fa52d6c5c82da07d09364e14b2722eba04681408056e10c3cb95d68905ac63512c66da44186edee4db51d2ead4af3ba930ce11bfcf316b007a3eaaecb36f99aafa98f9eb58aa4be48afb11bd9ba5bb0c11ed31f2f221766204796aa21a6be78afeeb2bc239602be1c4c5d37643ed6847b3396a3e3f541493a6d038531b08d3ff3bc9b0bae0d686612a19c8786af55f744afbd0400f79381a4949a4918f9dfa67e7428b7449edcb13ae371fdbcce79a2e09d5e43f8f89511ec74482885bd2606fc5a50c46a57ff5f9fa416dc163e47e5e55de6e15e91c1ec9da4c424fbc7491c5863affbc4ff8a3e70640a4a200c8c332fbd6438adcdd402bde5cd2ca3f44365aa1b5bf6a4acb87f953521bd04c4dfcaa108726a9143338ea67a60543a383c2d95c6810e96f75202cc13664fc60df2e278aa81dc7309cae1c0bab58ec267e39dfc01ba3de9af0713d2c7882a6787b5d2cec943a5925449b912b5e5f9f2ceebdc723c375ca5fdbe49af7fcb5546bf3c741e1e1decd8f537a9aa7f351646807e6b6f2476913c1868245a1bd0a8421869feb3bf7db2d19151a7e918a0aed4ebbb3199e3fd7af74117f51900969466814323ed64a3aa9c817178c1a6d7dbc465bd2301d9e6f9878fca977dd82411807a747f5f33c4d4ab5e7bd6cf3d361292c7fe43ee50bf40ba8597a725333bc4505fdc08629feecad7eab499f6ee6fd3033986779920c7056fc7f8c01223efd7c5bc52d65a51c5d3fd5d96db44ef6650a26ddaa20bba2565d753e5667c4e883643c02dd5b7b62cd590ed41a2a970642c3be4c427347539e4b19e8a8ce898d014caac039cb822cf49bb225ff4ad402827e7784570ad6f5a99be49c167de94cd81a3acb72be029b50c072b03906c0e88e26b631034c9279fa87bf75a1ec57f87f5af302fc0cdb272\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigGenTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-fe28a25123cd888c478aac1d081ea7efc0ad28c299b7cf879c70474654b0bfc86095607a496c78350e34307d09bfe1c2440919feedd0b55e8f495f7da65c3415cc63f6996debcb3c67831c2db563ea863c2ca586cc66742ee69b014ac318e8553fb9a3d3c407f9f27c5fe91702bd52331103624c503cdf2a6dd0e9dac9f27aab90261120b905ccb81043122d21146e1b83308c12220a34521a3646a1942103924d1337700844890b098283a891d980685246458c004912388dd91828d2300e0c82690a3288a29689c8a67190826de2425224b45000306a424292dca22954946483865192b22414c46520a91194a60d0948809984891a160218074e6324845906511931715832615bb091da9229a124861a963008020c23246662a24dca98801a369204c24888221123319064a440caa828233131da344911412913038863b48d8aa6301ba4884c4249041990211745cbb848203509d8463004272a21298d12b26840b22843005211b381d2466c02048d0a1104db260811078a012590014810020210dc84651836024c0622db2208cc96259336280821268222101383900a364d22108dc92802e3126091c465a2a42c9c000613133102c1641a202a11c820149928e1228c5892251c1851c2a0049a982849484200166001996d22a08d8aa804cc184522496dc816910c4331a28268e4466a4cc66052a42449a6250a15468c480d02c72840462cda302da004241a170c1b387161124213158c5b920812886001844d4142600b4891a2948d8b802c08b250811224c4a0911304845b14819c9690213806dc88858ab810113760cb80300c212eca2661213081cc2625e432488834400a808912234e5036121836665cc868d0068199186113a42148206609466064486a13362061447021c601208671d1085194066cc3845059242e641640ccc83050142e98884d52066a8118460180919c2482239550e1400c54b868c3c68c5a3064c81645db422c18448d0a914c1344821c27680b212a5a246c1aa76d4a0226dc44804290311b3464238524c4020d88b28492020253b8311cc91098404ae40030a2924522018ae316429c44719c460451b04c14a63052126edab4511a246d2226714bc891c418249c186e630049221446e40069c8102211262e14c86189a4044bb6901a28861b02604914210b118e0bc18c13252a8236910c47889c246c02988840886059460150b06c11a18041260c03a42c9a300d0c48448a148e41400d633866e3b280a14422ca027011440411814041c609500046d138801112454ca2719136009b4865c1442dc0b084c380405838821ac22cc2124114904de140211c39122414019b1691838671ca30516184642295690b808919c9891280012223325098651a01119b421002a14599c6615804700911012349605ba25118229122996c1a239112048cd4b80503300114888058b6512332445a4491c9464551120cd004812195200bc33140182ce2122a184652a48268a336681a1121db348214446d84a060e13424da400d0ca6090214521a05720b361141804550186699a01110b60c198525d41628d3446240366d5b0286084750cb268da09465d3006d64842922368c1c096ac23011c23024a0949120464dda400c20816591209163086118016e88448e11a5059b148a4b38208004641c4051cc80081b074861824562c84554286ca0340014056d58282c8b021222c20863b804cb4472d2229284982d22885100c421149270532251832682c8366ee296088148319a444e201902002544e02091e2324e080742db0691dc0206a4468ac98011009645a2004a50380558200c1cc76852924d08a74c141700e0462108000a1bc03058964551a86c14153151164624040501097120a88411988503367262209153403109396ac8448e9912099b862550004d63c63108a208143821003982d302862022519c448d58126d624669894026cb2222802868c8106d92100144260d1a93300b166264884409a2415a886c0899040a3929db264d140644a430115c9865211541432865d2a2201ac00542b050c11230e4a8400a4180c004101c90296426919b84409936401236446310628240924ab00dda3066232942da048d223492d8302001900822a98cdab25103174a4cb03104186e924244c4281119a80d1932304120459a8601e1a04c11882412006299a600d0de68d40b4872c5c415d2aca8c2feaa1ae9dc06b16212d382caecea0b4bea0a1a4eedd4ed8203ee52e2e455b5d542a745bec1f76d74a497dc7172059da0fbb4ac038204c13cf6e8c61b590534ad23f02fb6d32ea4964898d9768c319e931861679a1cca240b2c0cb6c01a2474927e1dd15b63475b3fa68924d4502b3511df5b91723e59d9d97e909473f9cdf3e9c27391196d537273b3dbbfd7a16d808425f11f5fbf5e6c89b80e0df01c576db331ee6562b4d2ea4632b5c9132f4b88a409f93612ce7b2a074a3a6e8f498dcd1fe2996d9d7f604f1063d0e803cd71307d3dc882d5ded30fd5a799a52e28896b9312bb53d72f3bc4a7dd9e963e2f4d05d06cc4d80230ecfb70c5b826a2844d714729d9b8e391571adbe98766d5b180d4216e902ebff86c226e0bd5c3d00ec141b00f17b0d1d6f3a4f407a0cb015d70c7ececa5026c143710cd530a15052b4f8c4092de12bfd598693922007139e0a6c924d2a8491d982b653d5ae9b8762939fbe8870aef52714e7fe67a2da7751c91f8ab5fd73b2dce38ef6b21e869dbcf4224b9af61a773553701783a17187e2a5b28c8dfe501946f16e15621ba55f169b10542b6f07c445e44deeb1ed07708ca5d5c14230ddf8dd5faa0eb2e209dc3244039611cc9fce09c2c2b6d56b23c790fccd3787667e252823ce6bf9d60155dbc855a4c7b274883c5e2d7ccabf9b0640f8bfee4acc35f0cf8c7a9d71735e2c22ead23d6be69926de7010323083e66571680d2508d6e9e4c752eba3a3f050d4e53ddd657a4d09cfbfb9d8768ebc539874d27458dcfc8d2fc84e8a78ae7bfe1ffa6c0fbba1fdcb56b65ed5985f2e35243328b4f43771fcd9a735b3a721d84cd92082ae4b4d050d0954d9814627385e5cb538324c5a315474c156f4710be47eb9e5c66bb4eefd2cb13d066838d8ecaf73a4ad25af96c570d9b5ca331eb03040ca41e2d23a469072d506a6496fd33163f391b914c36f681ddbe497b5108bb5363b162c7e333f2172645f4363e8c849adc9c5f53d26ca93146bf967e77acf6106ec06db4c909e97cca3b005eb790ebd994bfbc8316c749b7c3c55849288a18f65004a3a975b3f72a8ae8aad361a1c7c5572a99713af4409b1f91d3d8da85def0360442f46b86bce3bcc53445cd93647d0168bbe1df9b9edd77c7d02596dfda2be9ca70b8d959e06961efb24e2effdc4182b347904587a80bc9a0783cd65fc32b3e6b48f67941b8842d3f48a819d52cae5dbd54d0d2a8479dffd63afdb882ceb95e36211861e4cd3ef0341c373951e8446df7fd2bb43beaa246d0bcfe24770f42861ec978d00efafb27e8b1b4974177f192e490eb75ba2faacefbae949b7a236ca1b4141a625683aa652d90f0876fc8bf90dc843715f869b0db24f9bd9a42ba188b048998e7f0b0691dd0087f0ac1cb770120c63af237a45f9fe45b3687c9f9ae9a66525af9447f0944cb4ecf84f01a2b34068b8457d01051f092834e6be601160a5ee17d94e168f6a9ebabd85686fdae3bd7f60f20aa4f9e669b1fc39da73dce2014dad3820d6f125c0c8bb3386b3ae5de0e193f6ddea02da3a5f8873bf8b0cae80fffb5e1acba58292bdbd9d380deceab59a29147f6b05f26ecd3d69a8e428cbba2b78f2069bbba85a28c441222e649dd7adbb3c3b2b3456a026f806834b9f3d43186b9720a7154ba4a12de629997f9aaca8139e3a773d7330c3da727037021618a2adb7ad5aa119bcaa3c366ba2ece4f48ac6ebee1df641a33e14f9ee478fb59c04a2051c88b09cab337af5b5908b4312abe14e1dce9dfca692cbc59625dd0dd7faca4ae82facae15dc860b4649032ef6bcf1dfeca621962bcb3101d1c263dfcfc8c7f14fe007611df65d8c2f308df5317edb623e18bca8a569c74c2c63e4be52ee4b0df90cef8b31c81271c2ccc8a3b21be2da5b733826f66e29fc91e299ba4f2f3f2701d51ab9283185c02746cc9d4350a3ab0781d3a2ebd37992a2439586abe5c23642dce99a413cbf2e1177b0a396ad5c0ef18949b1cd5c067a9e558de1b235a7b5b86b9abe8cd7cfb77752b692c28248823d09d52158e81205cb4342cb032d655b93db39ddda37d03118f70063e04a3a52b50c6112671643f53098e62078599323b9b63ae618aaccc9c28bf995dda6923287083671b10277b95fcc1649a2694c68cd5c35fd87042fbd83dfa792c71332e7a98fd7d98a85cb4eebd3ed4a3570b99e82e9fd421ef3ba9f7c1693ef62687854b32c3e8d22812726ae71186372a1f7c8af334a62bd1373adc9daa77ad5984aae2adeb45c9ee3f268f1e07f9cd4afaeed2b008dc38322bf820666aca43052f4503d47f2a9e2d78ad3381f5156f52b64fb793715dd812ab19bf7e7d65acae18e0ae092d403a3d7fcb551996becc7a7c1a195a418b91e4f4b8df8a478230b8e7e3383135d5a3084c4da9cfba60229a7bef26032e50a721ffd0b279681c1d8ce2e37afb9f58f5e871be0303d484af6b6cd21f6475d3b1514ac221d6ed2b756346875594b0b4003e6a4a798312fc76833b6c04d5aadf1d731283e898226642436dc59b933fa1dda83f7cf2f5fc4b0f16320e5f963b431ed2211176916937c43ef261ba2a930699555114ffbaa00ac6361d2e35b440ae4c063d6856d837103497c8b487fa00b6360d86251bd5faa7d23a213fd16106f8891a103167f167008c1d09c7e1c9d82fae09e5a3ea7c7193147930fef0b8c04a63ccfb986ea736b5d3fbe7a80a2524994332ecce5f0439c0660f9c7c1245cf622749fff13c132b5190aedca8b19fa660063bb18c7a6a3e469643bacc479c6d9df840dee239b582b5f469333f9abc063052d74f75d98bbb0d06c5c5da6d7b93b617a0f574274b2d8b25aa3b21079d463013e961fab521c67f5183e0a3613cfbd8f5ece6d3791efdb20ba9777c5cd95aa1209a9a95abe030134afe843d15e6a6874f3bc6570ed17df31c7b15ff9f3e4b8ec000cbf520dc164afc8c511cd35efba2b178e613908489cf5a17039df559abef9e8033c8c772052eba33577fb840b276ac325041ffaad171880f37830cb60da1997241cb6ee5594b97fb353bdd575916f9705010d04f9f90835b81bb949b6f35bff409d5588cfa50838a96b22ee7d5b66d973f614f6d323ba3b0581ee407791a20ff4a66cb4c208f049ab46617dc6d26d51c4b6dda716c018b70d6331aa999bcb898511191dcaf47001d1127e1f9886de617c2002e2ba2f27b04d3e53515a504a2d8d31c1fb587a160a9edfd1dd31966c013c2406725e79a7a93a73756b9a29f5e5b8b80e3b9c53977541df0c2043dc42dee4ed68819bb8387a33bc2be6f4b33db215d28a983873e200f685d7794d9a1d2c38608f477dd24178817f05884c01d1f2ea94738b5601ca99fe21f07234c7174c5b20d88986cf717507699ea651de129878b2264083dda1beb6afeca929e98df36308be0c8213ce94d4e5954c6cd1f2a4e19a3ae9e5e9d94178cfb6a9c90bc3bfeae5acc91e0493896bf8e20fc3d78204449eb3aad69261d768c263fdad21b4631d08379bbc27e4070a5bd3b10d8727351831a7ef1decb217366f4bdfad707c9e1698d6869bee22f3579e9a79e7107725303ff48353eec66bec3f00d23f2e56cc872f29d1865550b4584f0079804655375e07738b9bcb4ae00414243cab9ba6b91f3e158e87f8881401da309d549b456290a13e0f9e4d48432663edb082fcb0d84d0eed0a8b0ec2df577240b92638d99ffdc5246f6ee8ddf37af524625abb38c23792133c8a7fea5054040b1e64af208f1f0fd02b4ea1f62197390aeb4275328a32e4c8f6d68001b6b9323d4763a72abb5f7246856ce65faa9431c11e13457ea3698611659ada89b8d755e8ce1711420608b67be66a9e417ddf39bf9b4f9f63c160f679955c6cc80f2ecfd72c280e1c803d1afbaaaa37dbf996b1d612c861b8e42ecb1c1a3d40c35bed6b2378af865d5ea21a3511a4dcc4710769443ca30636c7dd175b6afbb976bbd849073e4f3ecd3095cda97c74682c0307fd13a3b754150e2d282c8b42b6d312e901f74f3fbbab48b92cb40d271588f1f71eb8f68fe494ea9feee165ee9e4c038229e707ec8f4b79bae7f3d908a4c1c71ebd574aff7772bd1d7baba202d472b3c24d44f0f2c459d8b903b171d2b39d5da366bbc8c03c2487fa0620db7346251a86aca3cae7b62ef4d0d487430463640c47748fb7d52a53f683f5a49d3f7eee3cbfe59696ddea73d2956aa9f7322f4828f949d42330e65880a1d7b3ec79eaddba9043ebc9e47b9c010bd230b2b68870401c42694ee96faabd822c5d216cdcab834faa71e3d3c2d24d12f70948e3b7b5a4e5511642c3b43157e2b9d1d54b1ae8a5d7deb3d4aac990a040b8320b0ae049bf25dd0ad3fba1beae1d6ea69c1f1ab631f06dce637a8244a3cbdfaca18d1375e0448992affae4a7d08653f6a475b2ca80057112e77b8e6a7c0f91e365b74504b3c19eb529741d2f6df00d965b611ff000d7e85f087ba0a99f1c4ebd1d3e8c30ebc2e6ed249154a709077d7683173c0b160f8aa7cdf7f6a7b39f85f4ff70ce1fde27e7a6197165a08faa439ae93a3d28cee7b1ba2e20f39ec6217aaa6800e1314408552ceba1f8dbbbc216403b976adde8509cdec0650b70a3d1b5daef27354bf1ff057b9992bd1f8512a04020c45d35684a781a3d2e891\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-4F4C7E0134BE5200C4512299D134770A64A76B73A82463FD8C86594939DCFD9DC55B895B32A2E96B8AFDB8CA83AB857679C372CD88754CD8A7B0A31D2ADDFD7D1BA64556AAF1CDD674F3E8F5FC0BAD2FA38326365918430AB2344CFF785D5F73F2B5D631DB29FAA0F9CCE5CB7FFE0CF4AF1C7A8950EF32F1D72080A492C7A25ABF67F409FF5D4B1E0D77268C0A1B2A32D9DEC61BB71EDAE6BFD58F274707182058F0E6AA31E6D3763732A82BD6F2C76647C7ACAAE7FB4AA51125F0D2D48351B6A3FC7FD18172FA8689AE1602C4EC0CAFA863AA98BDBB1CD8C2681C2B6C5C254E346C18E2A270CAF2606A6504D30C0E2E505C2FF9D18523BBDF21424C645AF0EFB2EA0FD21B5D0CD85C7C1EE176FCF904B481855C4CD739443F3340AE48276E7F4BDC00CD11C2B0D6B97BD00AC962EE1FCF8A73D3DA3CCBB3B72095CB33C5542D86E843641CC98E27545F99188AF064D5FE74739C54F5678F411D96A0EA043652935BFB2E37EC934327C7C841CB0CD04EC17FD06A18E88882177B51B00DB6EF1DA164245A3F2554CEDE8C84DD777F0B92CDA456D922D8B7B8B63B548CBB72CFACA540C0D69F9EF21759F243CFA03EBD6B080D23DD62945E623BC4F8323DAEC1215B251C35EA13A0F081B86E803BF37DAE6D913B7D942BD1C276ABEA3F8F74D0C8727EC21EED2AFD438BB7\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            )\n-    };\n-\n-    static SigVerTestCase[] SigVerTestCases87 = new SigVerTestCase[] {\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f72a05ee9f7d9072a579e3743771e12eb5c748904b15ff67e6a82e1bb77cafc34ea6f06d0f391a3eaef39db6331f1f9660795a5e7415ea21799da7f73b9e11d1f349dd10d258fb5ad40e6421b71a2fb114f893c051929bc4b5e5d9ea311c3c892ab045948fffaf578319fc5a73314fa93a88010bbaca9eb5ad63cf8f88497dd7520d12138628a52a5bb3010a3ee713ae6bd21fbc3ba12e2d444e8d96a3d06be555ac317d856fbfa97b46efcc1b15625457f065c9f8c73c203ea957acd2b865866869399ab9bdae1d30242b31bf8f29e445f07c74afd7e665bc9087d3fc94140393c6b4a81621c534cccbe0018bb3fc3e50342caaaea0f374e23500a2fe2d73dc1b0b0f7047de062b44e2e1362e16dc62306cf4edd306fa423d1b95b847b7974f547f0ee79181a4937094f1efd2864931048f5fc3535434c2b2df5b846ab4c7817b2814c6b4a984b8a3fe290cb63984fa8daed775fe4c2e452548476b2f33c727a0278b4712ce339fa7c68a6db7fb0c25dbd074a9b3bc5f6bbc22232f2ce264246fda6784f18282c904cec36fdbd92a7474733c63ce05a6e7a911cc85cc7ae477a301f069b62da720879f1ee02469ac49a69119c61f4db5bee7f00d93892b05e57ce3f58de9e3429c9432df433d6e111c8eaa02d1583b28a07dc5b3eb57261b7f158df82255cdac5bc7a559ac2fb30706029b843d304cb3e6b4a67f06f465ba45057e0d1220ada4e636075613acf81ed702ca3f1ee717dab24abd513514d7d893c2d10506f95b3988f875200801bf7a4739ac5cff8a30553131b10a317954c11e490793ddb7ce0faafa9f276ef47ba7545422e15653487300d678806f10e5025a7e9667c456fba359d09a11a17b0d0ac75ce9ea941b0fd218d6f3e81761831b9613c641cd85f658a9aae69a8b2b56342a1d879dd21c8485aaa5c3db1f3e19b00d1c83395b2045ce76a2067773e4cbd9408674184b3c333d3e887ce6c0b576808ced66eaeb8a8cd166b94796d60218d37aaa21ef12ef3b3b548bb72a672629583fd994b9f26759d71c7e15de4b10453ca02a64b37448a5eb632913e084db89ebad69eaa9587c1d205436a871a3ebfa7a2ca6a0b657b615a101e4fa29eb7862e804ab0d6e7a61f973c47171eedfe909807c88a0c9f0536f1c2eeb4826b68adbd4f987449e7a5e45b7efe1eaf09226778522a1998f9d79fc62ec7de72a05bd5e99f6aead845fa9ac32929ca2514671db615c916c0046e36951efa903571926766b8fd96db3e187c9c6355b92ca681a2244767e5bf7c1f565940e072536ced11f37a64036749cfeca9cabf0905e39d6d1a434831bd89492e9bf1a5ab9aab5176e697cfd5b0982266ecffd197a20326783972c972be1c21605398685bfe4091332fc53a396111b24f072d0b0e21e67fdc9a8d8088c1f9dee7430e8c75f69f3750aa6ce9ef7dfbaae0d58de48ae87137260e7a5f9ca430e141aa81921cc02a304dd3cbcb1c444eb96b4e689aa61a77f58cf5546b58b51287f4a9bfacc2096e8f555d5f69f50f5e8efc33715bacd6bc920439fd9eaf9968f6771275e16e286606a860263fd947febbdf046247a460f52f3f5e422a7b88b42ca4fc771dde31076254ed22402836af677b32773a9f331a2314c31925957a96c801fc20da62118b5074cffb95c2d31a0b80ae6fac13c13fcabec3cbe4731aebf1fdd3e4fb00e5a30f368d63cf7366631b56d691664e50367cc20753c6e9f6694ab7d090f94d337b54d00413b38531fa4f5bd9e56842e9574f226de48cc283c4c23fec937a8369d9b1a4bb2150ac0ee50b8da8d2dc874b53de33752d7bab603d1fb49c5ea5ccf7b6be07d6fd11e04dab95ef3b087abf23b1983461efd3a5db010317417fbf59e7fec98746be9be60b51381f3e5647ee7ee8b17e3e6c1157d992339f098e424f335bd17703d7cb4cf3d695f0e2d9c112cc71f8ff0d28ae3e2e3a0ad57051396b7b044054d6408a568aa0fe0bac15265c22d9274c5bf3977b4ca5b441da6dcb301e5e14406ee5a1b7f10e682f55c94fd2c0f6b97e6a75a4d7ed7b641cc2d01a2e18adbd02af4cc798a5c11c4d74a342a6e44e85099d4fca4eb68aaf1314f0f9e157c38b15fda038fbbe2bf1f8b3a4464c57104786e92dbd18c6e69c3bf6a6700b1b0873551e5f949ee94bbea0ebda0c036804b4fe6664456fd961e7f3141a0c1ab1b985876c998620944f89dd207ff7baba22bd198636102b3ec3deeac711edd17ea302fe9fd99897487788a3f5fb117b4d2cc64062a7ddc90f2f421a03044ff7d7a864e3a110fd002a9207f7b3d0214406a30dded64c5c76e04d0b09d3fb8782327172d4f27fef14ab8ec3efa160ebe010203460eb6694d0b6994e5053a03df54537101d48cc63930dc35e5360c3de909f8e060e53ec15ec2652b17a12befdd313bfc01335cd678ca4fed253398a61451e4ab83eeb7c29ef8a617b1cd3a09a470b4ede67593aa3f20ebd3e49e65840a2c5c6abc8a7365d4eb18d73e1f6fb5308ac006c8c43d33477a0b4329b6a9271f02ef6094ac6d236df8d5c95b0111dcde62248cc4bece19fdcd7869e9df88047cda20eee20a663d9c48b856cbe1ac561049b8366dae8e811bf9e307a7ee37a2d801e7fa02cf6177940dc6732544dc9293c751c547068f91dc984bb024b0dfa6c9702adb74df91cb6dfbebe498c0f715ab0cc744f364559929fe1a44855dcc43a6afb49e73643e5160b9b5fcf8df8d11ea90f1e573f94ea1a7f472cedfbd8de99b2748370dde471484c58ae5c337d8d5ebe022e3a1b2498a6897d4d0b4a20e2de6f6ebbda6aa83ab221c9f89bd0807d3461580018d83db68d632e0ec538c3d415d022a4411a664e669711513525f89e1fb47d7d3b54b90d227d5bd64d86a4a7b29266116a804f77db66195ac93070fe6b81d7480c360da18b8b57702ffe608010ece065c42695e2033690d1cc14f167de0bb3e5de2b5340c67b2eef8105b4a0f8d4daf5ee3134aa2ae557f1250abb6101d1494a34716d1b91bdb21afd8566662a5b6d4cdd968bdb2500e754ccb42826de1dac6612a43188b847d69ad8aa23b6745aa965d44d7d82b9ad1044706dafb952e1cf8a9db9681414467fed1471cec2fc9c49562529d7b8b22cd7b825f37783747fdfd2f2bb8f8d95b499cda043db9189d59d66b486485192629ce2ae833e9ef0487f8d9735e1b8651a45dcbf9040197c1b026143b3042117e0ec190942c72f120f13265816a6865113b8c7816f14ebe5ba9afb3e772b61330d0494705a5e31fb7a7823b0ea6553ae1736de468ffc67765d1474d8d2dac5140600718ff82d38ff19468c9f0f7747a3ca90db86d7d7c579d2e47bafcaf92d145250a88d11ad6556e24fef74a857fdd216b5b394f229b70e6dc5be32724cbd6b59889685e9ad1c36335f52e3ca2c4e96d332a950fca062cc31360a2fc405e418a25b237df6a393e92c4c02c987c1d8b88778481a825e3537dd8f1013d64ef1aeb966f0f94038e901b8c1814caa1cc8642497591f9c670888a2b7362543ecea4af57b99a5f1144a797157b842220df4b96ca7088c981f030fce4fa85d29ce754638cae597603793062d5d01acdc08aecc52ba59d8e46cf7eb84c5ccfac75f01cb8ec8c45c761d20d6c59e78bf36df162\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a12619d8176840867fd76c85b14a43f92b39487e19dc0bc5078a6ad5bb20ca92e505b3f93603bb83db02fa9bdf62c7265a7cfaea6cacdcd374e271d3d6ac510ce9158b03163e38327a68a1ecd5250c3d4dd32837d802e124d4fed040f7e14db378d1b8c3609a47c641fb9d9f9895fc968e95dd51c36b55fbbcbb5d0dc8e7067401c983eb0d0e31158e96960541f7bc0a721c2124e88eef835bc88387ce8e50f08da1f192499f6a722f46e2edaf1fa459fa98b753c8bc6c9b494d21d95b76e39e0b296279bfb37a0d7ccbb804d0098461325a53e8c61a098a8a19ef767200de1de9a50867f0860b37f022720d0a050ac9ec738c56f3839a0ecc0a6825adfe08efa4d5aff1314d4345cf74f75d44c2babfd2fe751397ca453a1b835471fb6afa4d33405ec9f3940d03cb1b1baade4088a9958c3fe56dbdef0ef1f7482ad9aab7c05cc5b1d6b537eebcb3453dea0961cfc8c370923dd97b4ed7c37ad628ea456958d98aca0e8a0c94f027e359b3a6d3a0401720899a090cb163b8643b9247f58fffdbab10d76517ac25c3cdb65f8fb9fa8ed5370f4005cdd88ee38c2e6c84ee06857618bb143db9462c256b0242a0be101fd459c180b5f1a1e54a123e0577d38e1616fdcc2480784c25c8e5da8740d132be3f5a498be74eba102bdad5716c9b9af34628c1a9dfe14b44aa52b69e5aa21f482f14d76228d49cf73c4710679e663be5242df2de684f5e1538827f612e7d2e2df673c97b4262990b4af83163041564c8f82abd740f434cdaf68e3ba0b33fa68a63807aee5b998091fb4c6cdfa37b4b9379d4e841054cd0d4df3b353e5c1960cebc031521da09cd4875fcd216ac0a57f3a95db3ccb6415f6da06dcb9cfc1f40d7024bc619a7267a78e0b1b8431e25580915c2dc2b328ad88ca3b551f271b217b0e1f749dd53c6d2de9ac24f93b683f268c2ffdeb1d421dd91ad3b3f9db1af344d27ee4bba7c6add4340277aac9759de7612f64192652e464269e919f73e50372df8d9854471b997fd4d84320fc17eb53da8c7980b36ae1351221d9a8a1f893a897e6043ef1962711cc4babf1b6a08353b03bed793d3d5c1d2da8aa8f6303a5e74fe2570876c9fed2e65db4b73a6285b68aac8d7eae27ea873d07f28d55f98b65bb0e19fd2d4302b5b0258b11d40a5afa0c7661b6394c1d0e533545e45c185a38b98a2f54010c87a58b321b6c5da226b4a326700457410903c2ccd591adda69ed0799543cabd39019314aeaa125ffbe4cd71abb849998e98d781780fb1425d32339f20f5b8562888aaab6beba58ec69c40520ab2f62d1d30b66eef52419196796ca59fd0d990f09f7375a6f32c2a473b2e58ae5ee07d8af938993c1b9b827936d103910719b6d46851d28e9d14189e004637c494f48a0c62cb5cc421ac919222cea674c8bb40fff2021352a7c504160ba7fb11a67b8e7743a11f8be1149e61961e82b284193d965632927a17b0d5dbcbafb732333a7fdbd7b14ad0e74f63999193fbd5613993997fd8cc79fb77b7f1228cef72acb76fcd9187dbb40135d3f6da905dfd5db52c61fad72767aa72c120d8b60e831fcd1e85c2d3a4262fd098e019ff4775f8b2506c33f1ac969da1a5b4dddeaaeae533916c18cc5e986b9f1ec39a374d375a1cfe8b41422ea4b316a50be72f56ab39e6107234ecb087031083b2cdc34076d76b0a25a3dc6523dab07fdc55e88dbd6ab7355f464db2636a6efe2eb2f12502f2ab38acb143058e636536fcbf6bc50fca85b353179f506c8647dbda379e0f1d04df6f785e56486144d5568579250bc18088714653df6350b6618889f28ac4117bd2c82e9f1ee80c29cb9d41541bdf27589b63dc300d49b72e1fd9f9836038396b569b4c02a58ad98e344a5a7a72c907058a193d840388e1f3a23a7ae512ca1e3ae2ad910ef498b19b0678a6b382b0aeffff8aa26851393f602dcf3348a303439b63c4856756b8dfd4fefc601c2f39b68e6274c6bcc58e56859b5d3b22b90ddc5047ddc813baa7fe0302833101a4bd217adfb3de05dccc25bc0f786ba55b8c498fb92203ebf2441b087d28799901452abeb87fbe8e6eca37342e782978f187d471957530379f573fef8d5b059e6a080be35fccd10b1d880609583488c15c49c4ae298a313ee008ff66c7eae1f78a657ab126d5402d4ed70fe9b93f278f2282c20763592bff5e6f51b415717ed651e99a93de7312811a35240b70f8a90449906b62c83a78e6c76449de415c84951001f2bc61c8c99d88c2cfa44858a91d4ce5323a3865e4b85bc281e5139f219d00ae9ef8f850778571fba831394774dfb237ceafeea621d6b32b8480ea566eaa95b4dc31dea36dbcbc8f4a370b7273047dce6ab39ec54ae2225eb64398568358eede9566d2a0a19794b5efa5b4fcf742b6098c800f693a26b3cd8d2834417a471f55c9160bee9ef34792b80f6692a066a951ddc520dd1cfe9354a3229cf030b625e7bc0a2bc60847d7bce334c1629f73b9f4d44ab5f0ba588edbe5a9c477a6c4716e8a8bdc47582b25f9cf94b349ce8aec25c8bf23efd8b393f66ff457a92cab8f04dd039c54ab0d42899410393507733e29d2094dbf57341108082ad11a127edf57d5f9b47e5a31e30c7e8708a00d9dd5d33eac2c3418435ef1f2e9d7b675eced020c4b38abafee74e66c3f6fd18126087a0154a429b40603d4f95a7db725d167690feaec9b9654bcdfd181741af7f0c00b8f8c558f6fffd0fed1b3d3c501ea911f0709bed24e57a68bda19441a3c420bea91f0b43733e4fbf23072727131315314933924a50cdff938c1e4754a05447a09b5b01140b4b095986fa0c5f065d36d83d47974c86c29f09f3bb4306f8927d4c7843d16dc9ad1ea594d742cabef956829042d550137aa38cd98be854b3dc02442c8358a4994ebcf253078dae428d084de52936079da403eca30b93d4ca5f3b0f40ad15052fe501d27c63a6af4f1ec3ce9dd63be7b3c1fcdd539f6d27cb58f9e6487cb95d268caa6f3e98c761bb651627c193e2e9a9b99fa56b4b608990983c8f4d4d14dcbdcc43b56fc8d35c62656188fdacf1970aa4dcd8e4de72ce813150e1ee2c9ee3ce5eca09fdd8e9d518ce0a4c32bccef10e566b305c0a93bb58680908988b84fb90087387fc41b013367d170dd64e11f7f245351f24d054d18ced50faf5fa58c30732874b76163b5e38a0665790c1b49ca13ee419abe708093d80e628d9ecce057ebee211b5dcae6e938575fde133a2ee7a011891c53cd6ad59716a2719c675d36ad09ff8fe60f7821584a21345ffd3072685717efd29f3b977c028606df2a8407c1a60449a60c0bb837dad423d1367429bf85f19eb539997f0d0db1fca77e32014fe50e17b449b0db6a5b5b7efbbe4593e24cffbee6eee071fec63163bd5968431b32a6fa996fbcf270a91e91710bb537ede6c8c84cb7145f78a636c205670dc8cf8db465431b377fa6b1df41c4a44cc89777a1144fa77db35b6ebcd8a98722b3e0d6111037c34fdaa632fe3ebef1c5bbc3c70852ef5cdc9edbf9c280407d213606af1180483e3d6a33781e9a78d8734d72a3675d7575ff567f6944447df15d75e306df470cdc12d6a3dcce7fa21ac11baa4c7f7d081cb0f10f60f02247452bb0e2bd1c676bf47a1ccf2787\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-f5e15972ad2246b58dc056182273172d39b05662b5048af41a6516a04e042cf2f0c5ddafb57cdadd0def1a82bfc1a4f6fc1c5f2e934016eff45dcaf88535735c50f3bf6e8cf4193e53e118a828cee10640664ac6fe927f1d3317e26333d1320fa0cedacb8cdac09f35aa4ffe425e9d76c4dbcf07f5853c521f80689a8f8dc36b4ee2c2de91cbc3ae01cca416522008a0372515438a42398b3cb6e8162e003dee631a0d6ce6ca42662cc5161aab21dc999bf840665fe093dd7f3eadf35eddbd3d5712b49735724d367ede964eda26337c412310bbb326b1a83454d90dc2c64a477db6c90ef3a451a38ab814cbab44f19e8c2fc24283ec18f60b4b3c683954bc78afb64ab8e0f6817ae0095b14c83604b934cdb75c263e99bdb5cece8382539dce358adddaefdb2a568071347a68f75893fd210057de0bea4c2fa882a86f120934c72a94dfc8629ce6aeb024c5c561e1f5e8230d830b0a593b42ba6d29c52997256bb9186446786566d9224120d95e8c1793aaee0fac3eec75aff47e90547cb7b42cad315ab5c0813ea269cfbbb4eff999002de0541ab117e6d374b9f956f44ac01371fbbb2cbfcc47e6696a16d1d731f878ee362f3355c6b625a9f77a9455b51cf54468d1a71580595dd4c7968149a0c39580016b1d01ad59504db610f7891b5e0d2ffe9bce4a2f32d64894396bc6a91aef4722367ca39e4c723f538d4e8d444d0e53fa8f434040751069e62f42a6d8ec29950b8fba9878533013983c8809af7e8252ed9186919c561c12a39a75be5dd4d1a8a6bffb00d7b305f13be81c188718a128b98c5795b2083fd221e950898c6c929b5b06b1e9649025c68a6fe0ac6b0de9a8acf6d53dc361e3727527ce4100bcd9a99293e85c0cf2c6c4e13b349c1f2b0512278661b3e1d08420d15cdbd0265b6eea3540641b18e5f301b63cb46cd7c404c8a0e5489f072da3cc013f7895f2d368dc37cfe65d50c613b5dd6b2d1d27bfd074cdc20062c00d8a32795e61056a4287bfc455dc0c9a9832f188a1f390a5ff3c7cdd8416ac997480982935480bad96c215079f32cb9dbacf094e0f36fcb701d834ab851d98f478acc3fe5cc352d8c31be7571dea6a4f2dc003264a5673fa9a8254fc0bf489c39baefea294e808fd6ccc6bcfe724042b9bc3e2d57b82ade7f3a85519829a1e39313ed34ffb00853bc3cefb0656529d7cd3557a7a3fea8a07239a9d2eaa4cae666b4e77bdb04e0cfaa75516658d53f1c99d6122ff64fba6f01ed7ad50619a62d9af7325e549ef4d8bdd09284cf10432f58826d29c1e3c06991a04affdc5d1af3aaa7c8bcb5929c20fed0338803db2db0a3ef6cbf4745c511b0824da52874b1f3e3efe9812017b9eb3dda24f12e8713bc5f23c4abc34fea3ff86489c16e12d5d1729549f8140649963dda606affe6884a7759cdbc9c7d1f7c0ea84d0c8b42bc133b43d3cf24a404eff4853c458d795c1a3097b6350223aab7b86aa4e9700aa0794c0993dbab8ffd4ed89277a51112b20feee0fe66207db1e9b98059a80c6b0739f55859eaf867f0a64c08596cf08942266b61b391ec772c2c809319d177b081362e1ee216cabb281e79e896d093d13761fc0b5589db0d72c1995e05fd4b2095b57c24917b8974421ffcead3900834ca801c841dc4aaa46ad0e2b8b64b84d66c8668aa3d78ef19c6e13eff3d3d45be3b35fdbf88845b868df1bcb25f7ba7b7e52542b79e829682ce01d55b254fd66119cb8583ab33177b86b6fd92ceade0a8471016a3ec439df031c9b15439e0295a3050962bc2e9acfff0da13b9ddfdf864b1091df92132e9120573474fcc15594d9248ffaa873d0597e77d63fae88a69c0fb226dbb81b304fb3b9f3869503c18aac521938985af600b55dd67387704faadae2376514a12cba29dd0486c954fd48fb3e36d54d72dc81991275c17db80c900ee6197321ba86faae1404c7d091cab83a0e4b54d39b9f2e3bc7431da20263ecffeb3b732c24e81a814a0f4798739d856d89c976e2ba1910d4fd5fc4090322f7ab5892ba2b45636e0eb9ad7d39a1fe65f6917ce299c862682fcedf6a357f82df9daebac485e5c44213980f1042e0c5f01221ffc73495dffb389a3a49fa323338d123dca12a11109d3c2f983f13b79e35b525ee2496e9e0daa9237ec2556af9fefd3d79fba73bd291b3de7f95326d60d029d418639f0a6724fc6c38f7862a7f1bd84ec9f90f090b5dc56d2186987f4b2ecb491f7f271151c7c270962ca1337ccb7fca3e32985e370b11985dc143d5eee404af8309e102798f8f39c829c693e1e9ceac552d4a782ac70758a851caec473ff3900c52f6f5c372df2a132cd4f216c5ed6cf4c9b827ecbe313b0254dc163389329223769de91631793d8325704768bc824994b45c3084c9498669d5b89a2d39a5fa83d27d41490a2c7232c8d26efde3887f82ce24c7436626ddaa2b4a049e84037a6708db1948ef1b95913366b695e4c097fc73e6d1d24b670c81b57806d0fd4520f0ff772cd9f7833a6165b6a9e4a0b6b8428c9a21f34f195c4057e313da89a55e21aaea8c5fb9165385d0e9d475e9088f7fa701db2bf4fa32cab7851cd538a6851ceeb3a21a44bd89df644c919dc95cde8c946d2b33ff19138b33d5a81421f47b9c8ecc2e2d9cad606216e9e35f4ac025f3c49aab0db157449ac7c471ca4317755b26b3561d279aa193ab67d91da3e33a7ab072888f5df300c0ccaabb9d2cc34522b0e865b55f850bcdb835a10d41befa6fda0f84a86877e6c83de62ebfb5bc7c0f291282a70bf3f6ec5b6109c3d9fb30b5f596c8177f996d3b4a91eb113de00361ee6398ced54b65ad054cbe1bef0a9586f2d6fce45358ac9da2f62a1285e71832c762265128c53836bb3d488bf13a4452053a6b2af4e98a32996a5218a761d3a847b0a2abe9f222970f0cdba9f40e5e04ee155ec9cb3c3d5172408d7b0d99b93d15266be3c174fd25729027fb02b23ce3304b5553680fc6bccbddbf8cf18d0290c865d55d057442e37f02726c89affc7016124ee3e7cafffde04f8f6588f63266bb5cc91169e954d98502a8fdd9cd68e786df2e4d512dc4a05a58945f2a4e66651d4c53f921e234c7f24fda5402570ff610f56c8fe45c5947f217f7935e4f7014bb14815b9c7d49c5c64b1178fdaf39db843f94e711658a13178a9bc5d46f0adbcff5232ab09b84ea33940b94fd8fe885c5c7fea6d0505d675b8d602f4c91893c09170b6596bde36f3f118a8c375563f94ac6d7a19d581f31332588f365608cb09bd01d7f4e5e01655578b28a366379f760e6de3ba8d031cdaba280349f9e4f8091589476323039c7e08f3c2cedbbfb69d64910a7b50ed2654e56a8e119838656a8049ff33dd81e7ed46766e1dfaa7a0480565f0e2ce6575ee811f4f854c8341ab1a72742970a3cbabef8d4e8eadc579eb9ebdffa35ac2860c8168540c0ff06427d3b4f065134b972d97f6ce49fed68b0e99e61d17c0f89952a40d375dbf2f971dbc67d7e64a6ff0ce7ecf4d921d68c67dfd55faf634ed322449a9ee445327be4df5762f17104de608abec72396f450bf60465b04644035ada94d19cdca98a4dbe51c75485b665a8b0fa6174d7ac9b385bbb964255d74f7b61ced4db2a1d7bb37562a2acf0e25070449\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-b5ddc2872c67aee1328b8becc910a85ebc35da9cb9ac8d19f282096d0022bc51dfd6718ccc09f953319df7a435f6492f9ab11438f6007646030cfe2d41849d540e6ffa22065d712eb7b36a2974a7e566e8672554c1d5ea9fe6a1f122a6ffa98102dd59d43193333d38fc6a1be550672ff1bcc4bcab186df01a9584c52047693c35e998827c0d855f0274584cb09776311470523e6d35eef3771e1b8d553e19f62c31cf3022113314f25f322d6791a670766f95d3e21c2faa57e714b2d8dc03e28d77bf8d6a102cf218c8a4aa4fded4cf88ba4c9558c66488127b8e52cdaa10487fcf90515a5216d0ba6a6e89756c664d31cd38d281ced994a1b1c72369b82c2a49b606e3cec00fb2746ab6f2b53f7b4ae4ed2838e9d7d08f9bd1709d7cabdf1f3f4113f06a0c8f0c8c8ecd0b516b3d47d9133c3ae054262c7190f23c802fb760c02a3dd60b182be708cb158caa516165a0919fb0738f72bbee1a4a270967461f3c707e5e03c76f8139a6976a5602570f3fe8bb15843301a51625a664bb45af4e80f6beb7be5b30a93f1658443aef86ca794a384a8e391a1f90ba6abba29702cade0c31aa199f4d5e01d4f8f26605f4d1dc03b33e269f27aebe4eca4fb85bc99043ef37a2be5fe91a9c273e1e06e1b38d6ed67ab34ca81975f9e1eba3ae888cb339152b9bece9e90d57154f728d0511aa8d3b210142d11de874a12160d7d61d73c176f35f547fdfda27bd5d5ef1d6fba1aa881e7766847b920c49bc389732fbf636fe3d13440207699b0ad309f7ee917b84b281e9661f920cb8289da2a8b9bd17fa75db956461e16cc494c3a3c46e4f7e2df3b5b21bac9ff26930be68c92315ab527dc603ddca5d4a12f4517a20785e791332bf898e50fe3292c4f1b9b9db4b41c5daab37cc8c75f90d5a586d97d0ba0ea01d9e177cacdb3e5f0e6e9287d3f2fb28fc0e4561139cd41266fe6c861785eeeba1ddcbb6c7bc03a4f268e9834d64c555ed30872e8f0b5643efe0f62afbe2ad9efbc4843c5733838ae72006437c254f968022745a49447365f39d1c189b7a7bec75cf345cc62dda809e64209f2302a3942035d0abce86f627fa07065d064428c02d9a48dac5466175ce9b83bdfcdefc9364da1ad356ff962eae2c22d580e915c8a003a62a20fe204a7fb03fef5c0fa56bff205f4e3cc1cc54d0b27df5450b93261ab21f1e056b9bd913f10d5c57bdedc888a0cd8c3f61febd456ca9d6d9dcebebedd2b732c80d6d5a2a2db403e8176826d47d4e1ed7267092879e5a4880ac9a10dc249adb18dc763ded9275a2dc580da01fdd0d4c60a2a2b918f163d91f423e4740f8d92a1422494842b36189dec000118b468456f43f0c48930065472f71810040d4ce3ccb51c800e62e164367a05f80c3283a562c06e4a8f7017b81ef0b0df71081a672454ffadc60dad337f4170a056935aeee88b0f81f356302e8a577d9cff5ca1e812f9ea7fd01b97d4211686206868403ccea209dfd24b89bc2d437f9ea81e1667b09a2e0893fc9c65f99d7a99ac266ab92983b3c443675f680772d7693864e75071ae430ebf59b56d6c73033e6b00476c0f0a596351fa2bad14517671f6a73206d0896712b824590fe2ff7ebc591fa6d556252c59083622067a1390427719e6301b743199cf14471a551e8962415b4c64c2847f76013409f6504238edcdb4616bb5ae54150b339499b30bcfaa09db9a30b612282cfea47c666735d3ff2994eac8dedaea997c337157e34afe74c563ae5997415ca2d1e59a32a29be23f51b0e5d763a5b0151f0abd44144073602451380ee27524dc89016dcbd5685dc34b18a41da3c483c6610abee38055d6668e9a4d5548047a10128877e57a9e55e3868393814e8e44ab79a099b51694b6196daa5e4d7e8442bb59c53c3b13e899727ca79ff9153fbc9e2810404076f07c60537d4ae110f2fbdc6fb8bf2e73211d5ed153589799db063be2df9378a14ba8704770c141af838cca295f33593739a6f94187827032704e716736c3f9b0af684b485822cb77c87c30f2783bf3fa9d4e1ac2201f8793d85e60049ce8f6ad2c4699e5364f3bd3a225b46d713890cf3d1f7e591893c9563dccf566ae6f880cf87d198e6f2ce29cb8683911858b3518bc4406845393f0e7240470119af07f4a5747249af96cb074a395b21f2a4fbaf50a780e688e8acd342ea93aed5fa9256e366506240738adf50369381520521538a5dbc4b73caba8a52c5e8184d9c40c14f5f0fa8bdb7b93b6e95aef7e1c79491c90b6225307c3fe7727f928f85f728a9480410b805496cf605ff284ab5a160b3fcd9c97ee4a8249cc90e1def62ee4621579ca78760b63ffba86d70e32e642cf4d4bfe3e65d221ff3ba11bf8c5fbe3303d94dd464d08dedbbc3b6e9c223dddb17d84f800e4a4002946baa6e327028d7f96c1299f7b3c8d630a0c56df6d4724d1fa14158f48b0b132eb56a73e8861c18ceed8df1b12c11c1009be26415c1ec76752c60bd8e850ec2337437fcce7e54cb9d0725ab60e0991759e61371ee7f3e90214ada3e2804c0b41eb77910a567a775bc9f548d90c51b1c7cbcc13b7de64dd0912c334f5b0beeb47b8e5bbb8a256403a66354382ae881d794e83d3254423816bed41456acad89388babd6b6365878438066cbec43480d713e0a11aa85cfc9b4937dc962b67d9d286453974cc85bf6b85da2dede72d2e42ef6f02e3bce340a0109fd70892661cbbae2a5aee9a17222e713ccd05e4b1671ee0c7baea4930837083fc33038843b95570a190e60fe1894573dc3e277bf005aebb27212fb4c4f30fa3148840d1600a9ea9b2a2356f1d528f76b0ce13c4c0e700f6192518c324ab0ae21add8f3ab29465e4eba6dc40d8c8d0c03c4f9835d4a941b82ccb86f021338f4297ff378fe6873e582434c6da35d9b854db0a8beb1725e3895f333309ad31bb23a4fdd6e6dc323c2f83865ddea3b60d1d1828c816d305494be5fa15df73b9723d454221e9bb262f2671c412e60e1353f542de2aeb5d379f552b963ea65b630a3b35e4d1dde64583b48e6651b4891000da1339e61f5823390df035f596c25d8f8028b2203b446ca4f35a979f9dded0268222cd3114957d087692517ced7dd73304e1a3861cd85ab9abcfdeab0179f4dc4f58351243ef76215f989d73882eddee5c83751684877353e9c4c55d37efdd4e9f8f8a8e01e8910c5721ad3f2d8cab4102dbd604d8b304090e21afffbbcdf48a87b35499441d8ce0d9680f7f2cb147bf4f28d2b3ab5574a5c51f2415c34fb4fa9a2e97badb824ef46753b012c439ca057768e7318b1bf1c7343955b6a8eb434ec62a236440d83c985f47692a425619e3d6f197c9b24b3720b20dd9bb21858d14e00f577d37b1030e5c39d4b17a01007c32d4fcd982ba4821db371d0bc9a4e13789c8f7481f9a687af04a91a5657a190ec75a12cb973c6123dcbc728d1bcea67afe1d752d05ce6fd53aa510d541907276305066500dfaeae4219876cd42e039e009ecd79acd6cc2a3e4270f1f3b8d9615c0825a13227130e3fbf4b4209ce1aad976a7134ba93455121be23cb7ade9486b9bcb3414645fc1075785bbfcad4389b0eaff8cb54d69a6be42abb56ee6d5a2505fe3658cfbca5d020f824febd71baa578c3fd67e4\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-D46F4482D570F26C7E9F0F74A354174CA145033097CED3896350DFCE8200CB9448F522B118698DAD51F6C672E1B12A412DB6B7B95CDBDAF6205DEB631E44634412F026CD95440258FE5F0C72C5F3E64FB3FD13E545DD856EC2B7F51AC28C0D5D698C66C700DD3E409BFD96E14A9DAE1677ADEF2CA2CCD178B826AAD3859E569541561073095EFCA329B5B216563D956D8B7BB918224FB479FF7025FD8168F54D14ED1FDF0B399130C6117B5645D0E8DD242C3C7AEC6A8361361CAD9A8FC3B5A40BF7E73F1BBA9AC7F5A583A5B0EB95AD0AB4C1360D0145FC2C3A9AA50186D649B72B41DB7EF392E663497B3166AF9BD0C1AE21650D6CD04DD36532AEA0FD1071D6E9554CBB575B2C1ACEA3DD4E18615FE83AA211F8AD330C78FD32D920ACB40627CA4AC80F840A64C019124079484B053F525A5403383C21B164D0C6BC1B462C0E1C269A1EA0B2438FA64934CEE47149C4EFF566D9C2234E656969C1C89A0B0A4DE124EB920FF534B934172686A18A1A269960C725940D3307B8A913D56B78A6CDCFD559FF97E225B61AFAE7F62B060E7D3E2D4040D8D9233A24827434AB4EB31B0D528CB0085953D9A1A0FFB748588A2DDEBF241F93B41F5C856159EBBBC6571AB12F4EB534ED3C624CD3F5F836A99C7E6E2FFA0369654A5C07C19D44BC9FAD96983660E4D6F95DD9C38D84DE11271D23A6158B685CF050121425AF91C6FFEFD0B2061F54CC4393F99857F3B9775F81B6526444AB705F9CB88A2D276AF2F530B646FC3D93DE7087EBC1FBC7F9A8DB3F3C8FA186F7B636CCEF99FDC4532E54F560519C94B79B1158D85BFBE23D4F36B64F8056BEE7558252DBB3D9A43748E2E6A338162F5E2BC0934E89DC79091180C93D340D3615F82E7780FABF782E5FE2B5D504F3BD1874EB5DB76CB616CC034D9B2B080319FEB8EB97F62FA4498878FF049FA97C56ACACD2414E0BEF018F25A6254448F02E64815E525AA06AEAB53969A66D453B732891E31C36679B5C0A4637611A5983F21F6D4ADA1DA5E890C909A9E968F947C686C17EC73A0F9BAE5C7BF7433133F35F22D2A0B40CC135A7591E2CD216F7D8018969940EB9A5C4BF21579C524C41AFF5DBC0E141FBD02F1BCF376DFFCFBD06F9CD4384E128CF1F03139C853CDD04DEC61EFB8F1DF1A6450E4ABDDDD8A9D85BA79479562A08CDF06BDDD2E740DE7AD9AD1016D72A649A73246E8DAE183AFCD6FBDC64B6B6B2EFDDF525F3B764CAB39BF8D617D47FD3380B4A30081AE6C3165E9437B2F37A73AFC5E596AA626FE5A32D8873712F99910DADD0DE296577D4749F88639D07F83B0F6A05B1668D8008EA749580EE5A629FC2313FAA2F8ADDB5764B242B6B595A39AD76CED4CE5BC34C580069071BED1F98CAF4BDF740A5B1DE3FD30C29DAD808537CB16D0EF22D937F297F50E1681C898375FE0374ADD6EA1B84C10261DBECCCA8E1D224A4709497CE696BCD2BC1369F4135E815A781EA26A055DEA28AFCFDEAF6AB1117085EBF6B8AA6845FD4763FF9274BFE5FC6E377B9F9DA8263DC1F3D53C83F446ABA5EEA4095AFF91F3BE30022B9BBC2C74FC52A3B15CC76F29E541A84C5BF42D499F9B5EA134E24F01E8D866FCD20B7F7A302120B13DE636F48FE8EB99F17ACC153CE4371B266CA61D13E19793CBEF12C0EBA9C728096A3DC6A6750DDB0F52E3807C22EBE4DC6B2407593A1B7BBCED799DC3EAFCE50B483818D903765A63FF572F5D4481357CD6ABD89EC260417306DA1CCF71DA568240D4FD6858BB7833B2C9C98B9E7286FA491F9E318F25D0459071848BBA0D3DB8D2BDDFCB7B8E9C64ED67B4A2B5E1E49B55C6DCBF93394010A078E6F52065AB777C7F6D831DDCC115CF316ACF3680BE8766B4E15574AA383030EDA83CA45B965836FB2374695B50472C4159CB7980FE48B58B40C6CDD2629FE3C6DE6E13ED6728FCE45024C96402B78BAF37E74A1C071F4BCC2A1B84933C872FFCD87C02DBE65438A3E770903A04DF96C569FA69828CCC32D13A0A419FCCE454F06EDE43A97CE5A9A169C6E849F075C66BAB418791778ECB2C158FC19FF5927ADFCA90BFDB3B4216E19BE11157E858610BAA373237B42F811EA97EEB93D735828B2ED092518160A2ED894BB108AD74AB0113A8D5882D99A06CE2313BEE3F902D5CE9CECC835974A47FCF6FD1648C635FE56D1B2404927C49EB53FBD625E0624D5AA04D6C0D5A082C37BD67F477850458B8672C408CEADD9A55CC268B75BC51D7B3D75668D52BB701BD980ED22CC20611EF618277B82624A1192287B46BB5C4468F94C68D96F3CA3ADED476A18BE6CCED70924139F2E16C8A54FD6C9F6695E624499AC8E9AF86A430AB856924A0899E75C1FE4A51DA0DE1588E66044B2465C04809272B2A5C8EDBCAE42B47E439FAE06938810526DDFF4B64C515787B41885BE369A31F90E2D6F6C71528412572A67DF6E155C3705929EB28B80DF15345E0E32540BA9AB7E1D1CF0C015E50C9180372C678CE6C34BDACADF45B0172A1D3082565E16938F57CE6B55D9A711CF72E362A2ABFD45B7B56D48E89A0079E973F597D2E457EFF423E229AD439C3193C264E0BF9A8A1FB50266AE4E0BB671817CAEF10A3BD43452A2FD2DCBB2481D63BB539E0C81F6986400D3A619AA92F250ADDCF661FFEDE7617162B532EE2088A87F58E1FD071F5D720FF1F72335A5B4582F1BEB3BF19DBC9D51A62CDF68A855F7F6DBBE5FEB226C9918E7FFBC8A38079E411EDB44177F843EB8CC1F73B9765A0EAD825B3C43F6760B5F03BB75DC7469701AE555C2B7037952180255612DCC9CD35DDB31F3A9218397E1924791D29C410D2E4C3F5549B7EADF75045EC78D579EA7948D121E8297BC5A3A9F7AA2E2EF5776CAE3B9CB73316170F9B48B657BBE365B352A8129130BF1E718B386AA27E493016ADA86C4B3D3D116B7252A747FD50DC14AA28676F1C25150A86C9F4547189523280A3A897F80FDBBA073EC645C9953B7F8CEC3BD08BC0CA5640545B08F728AA38A860ED38C068F0D\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-dd746786f61c3e55ab5c50adf85106c1e6b427fcd102ca6495b52558626a21a4fb55fe9ba5eb91b87bce568487ebcc93e0a21fedb007f71d08cfd354477e9037e89d2a29f95069de968d619058963dba16a62b6dea9d773f7c1c269d889c622240233a6a092118c0545a06ffd50ffcb1dbcb5750aa4afd30458502c0d0efd753e7c86819353c71287e31de22e48a98e69c22cd25875844cf29e9a3e19749101a7a0dcab9daa82954a7a9106e274ba1da75e46f9d80ef302b52da908eeaead2fcce93be69c2c62532f0a666d6621a616767f2397973949d7b434773bef0a03c9481bf2574c225b5be10edee03c612dfe8adf07a5e1e6abda7168e04d128aa900cb82687d5f738969360b03626043946caf151717d27a1d3d0172696b9ba476c215fadc652d25298775fd4d7d3e35261d58d081d5393851b955b8f09aba98889fa54f78267d4289043a041fe871521e7f6518ce67a0c3e83ac47895a3fab018425a0532987855d4fe4a549ad372f1aa9483e3c6fca47beba9e2e217d606684c92f56709758f3da75929c37eeb99c031a9b446319e79f07e5a676275a59ad658738634ba8b8a7f8ce6d29eba2889c6d2b7d1914220e60137eeda3f6277f1399677c149fe6cdafff59fe1e31b38c863ba140e35c88fe8e3164b9e0715ee9dcc0815a4e1b3f4ae5b0ef18b1b76501f05d1304ae1e444c62899e74588cf9a262ebf2721badd1f3b684f56efb78cd38845dd3b0f417bf3b3157464b96c04946cd825b2b02278cc88173b7415dcf35ef6948087c84fe130c5a0b28cd6b0c45c3989050afa72c5b406dd2dc4d6ecc65821c716361cc8735d703073c50536e7aed7430eb35be8ee3d193812846ec860b9a0d363b83a3ff8415e2a9512a09fe671945e5b32702e477ba1870a53abd27544af0b431353d2f09f323a6cc69ccb5541da3d29ca3d6608b98640bbcbdcde5979b4d6b7a5b829c10b891f1b4f49eafe6e7464d78ec377b85290889bfd5cb5aeef23c9d6628834813867b7969b6382b9c4a18d81723c8c68d983009b03a1a8c269030d8eef2f84d5b860e8cbad943487ef691c78027e41be206c692e3214a13719b45c2273843b042711c58ba8711d31c0e6055ac73527de16afd81ce41a2882633a8b03fd975c3579fe4beb04fb6530567f5985954702e45734918adfa15431e33f65e10b8bdd9a7ebeaafc57562b47b1db5fdc8436f07c00d1c04d598cb6191c0e1fbfdda1549e5e0fcea7f27b6d4d34296eb39958129dde5b7e61eaf7440a75c07ac5ff2c3c656cb8d424dd992914f530984ed09c62b067f419fcde877e6333ee1875ff5188c7c35921e2e803f3d6abf93ee58326cce90fc22de31640c46bb44de19c20d72bc7672d39a02025eec9010defef580152c84b3763227b1958e2200216e9983dba36009ab592e2a2c9a80084a3595816098e53c424522fb89c154087e8da923672a3a9f3ae7c5225cbcb1cf9b0eed8bf98633da2b4bb5bbced0c08c81fde4156c9c6a5f8203bf52ce662343df25b5dd04c9fb0b814603274d503d6c1c335f71693830fdcb18f14e358d9bd49ec412201713022e00496674d43fed07068409cac95236b117943822590a3b756d9af2051ace8ea5933df1fcccacec0e291be9a4c65ec0e2b30a27768bb41eff2ee1f862ba7274f0a473125f9182461ecddfdbfd8fbe891822f088659acb0f1f36776ba219c4bf07c2a6ff9154f98c447cf0292cef0b698cc91173f5d94a629db45ea1c1ee1de5cd4b29630756fbf5b5ec7afb33dea594d45e7d37ded62efcd6063ce7a33068ebdeb4c444accfd8915bb24eacd7c5e537d4bad580b87a6273f1d0fc76750df29521102fc83ca432b918d9b66327b661ae03363df65256e4d642b55484dbb5203223c957940d3b059c822aa036d6e77178fbbc54fb020df2e81296ae6a7360ac767e2e88b74a88830eafb203ce5837e14a083c46de3bce7e0eecaafa5e7de831564191a8b9166c36df7d6a60343b837aecb8366de91509b54d973c9d6d8b5921a7ded1f2e431fbaeba893d4e5b9363d4bd737ab270cbb2c6d5655b8dea2c4a931a719428f3e9f905e03d885ca15f3d1647cc26a6bf91b7ca400eb3ae4aa03445bce54634cde581b471e3c03040413a7ac5019a113749918c1c8d24c979e7914f677f5135a84fb0535b6781e5bbd96d7ee1cda0afcaf28b1d47ed240cab6f2388e3c826d34fc13adfca7c41d6eda4ccf7021f2121f16057e70a1a68c97943dee4260e783babc3377a9a4a73a4393ca57ad398904f116e33fd83ee291c92602696c5b3806bf5898c4e56216be8a7691cc80c2563cfd1df4a06e437465f8a155a795880c61de03492bc9aa3dc9c6249582ce894b7e55ef06376da4088ac64c4bc227099c2ea30963f99ec6c7149d233276f15f2f0e21af7fba63c8caf54bd96d674f824862417273cfa7547cfe89692ce254bd6986a1cf52f480ab6f4cf8edfeb676fa4bccb0dfb2ddedc87c41cae31c5699a2a6cb413434978dbfe44025a0294db796a8c6e892be55220fe5e2be391366f7506f78cfbaa16f7cf43384182743fca7861a3d4c7af134037e297a55a5f1abda942dc1acb5a4874e5af451465a6dd2840545e9dc9539fffbd34c8db9834e7a7a9a5dc368c80f33ae01ca4453420dd9de645b209c8bc3dab783d7ffad5da47f318bdddad918d4b15608e7681c695418345bb64f67f5c1270fb97708b39973d8b4aaa2dc9c66efbbc6bf7239d781bef6885b8b35f11ee4028dcaf58cf8e23ce27a1b0426087a6408c43fb97ec56565d7c9fd7291ec8d24ef6b6c857f5f830d3a032b06a89f2ff23e62ec34beaacece7d4bd2ec04d70a2586694e208909d0da2190a03915b853bfafb36bb6eb6e9b8386f7d1ef8425d98c0d2af53f50cccc33a7fc4c8422e202038e320af2edde374b80d310f2972cf1cb80c279cb55668a298c9fc4489dafd79361aa4368c8e411b360f5c40eecf727a1850fc8522b210e39a4872a3207f2e73ea761e235031a1c2e33a337a6c1e1e365379fc96c3599bf8ba1af7b4b1000e7b64ead57893e24564201a04416bccc1ebdd8826933e0d7ac15f0ed8e70939c9660d0a23711b4ec8c1659e658e1165d2eac42f99751b4c0c2ae1a444c0e61441956312e279ae940914edad7297480fd44ac29b6a71f97eabbdb7090c3cb45e4a78e223877867227a9dcf8f2476f92b9329cb674b4bfa14079fb6b0acb38ad69dfe947d13424b0820e7860654d2a48dbd09e8d29d2ac1a51a6c1b300a536ea30aab4e26bbe287e47b2601a5822b6aecf3761907924c0906a1f91649b1bab2ee5e6996515118dbd0b77016c1a5622496d2a22e40f66be9963f6cc8f7c85dfbd3402b77b4ca78c59c494ea8703d5a656732279add7f0350bdf0baefa88216f9a09d065a339fc2132a07eb0019ef97fd0663a4b68ffb809f771e95f279f57e3d70d0bef7859ce3f22facd32f4dcb1787bc8a00f0e547c9d40940bda8aa13455e8a82b0a5cf4e482aa422cfe55d163d638fcac3d4abef3278be141a9c67d1588441f5b8c5ccb5930adb6d323fb086834a1cb5c6d2feaa8677e22cbbf992cdc742af799d7d17f0b30bb0f36d6ef7ac3fbe41d696d4896269a4c64825efb9b412d6fe4b3f3ee1386f2b5f1750\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-846d5071be9f3c8a2a99cb9490b9aa8c794e568b4c2da75439df54fb42f6182850b620d6efd426e4a843d6d7ec259d33a3631f45f153b2c1ac14fe1579c5aed8566f5ad80eade4ee8290e3f2cedc98290c92b83f94e0ad6910163f734ebe5f92bf6fb3ab56e03725a86593c35a9f7fc5bb99664beb330b3cab837772dc2ca1fef7747589758898d62e0c53373097fb2b2321f8f8c397d2631c4d0900e9ff7d5a8e3fcb453034e1c70f3bc4451c649cbb31989b8b0a2d3e33b9f138458c5eb2fa76a2b27f9aa34841e8c108daa5ccb0ba3847d2847055bd1553a467e8554ab3c54c0cdcc439ba7ea6a39795d7008239599f09d5c7060410a8a12301dd5e68f65865b7cb636d7cdda135436615bca0a20d982274551e549373f43c435729c98147f87bd0b344411750da35ffe77b73d9d429bafd7f2c7d6f43fb6a00afe8492f45c0be3431db3aea58e945303c5d1d4d4672727848d72e32bf2f7143e2de29e3c00678b64a7a9c275322f1039ea4f751e4b5fbead29b85a823bce1d4c0d1cff1a5084f252b10d8281764c1ee8aff68ababc78567c759095fb64425d4ff00a5491ae6812658478e8b062742442bbdff9ac8e288af8f2a64087c2dda5c116edebe039135c5ed850c190ff60cdcc64a10b3a849a028e0c66420f7643e98aab79dee9d943ce7438e82705dd1d7a8f7c45cfe442ecf3f7b474f0aaaf1891f857351a2438f2d688384ddd33f0821167189edf67908c0f9ab6dc928fb6e0f69ac40363ccc7eb1bba1c38726eaaeddd350f3a5b077800c2f0557f9bb1f116f0256f99ae103bed8e8250f2f1ae4c01dfae76aac4f4025fe9897ebd7baca7a74ef7d6eda19e80c5701c1dc995f0de8c15d7767c11c572d4c5c4af1f8155d8ae1e196f83035d5fd89f2b6e4893d5df8b16b70a36a674892f393cf4f83168c3b12e428e1ee2a16770ee7d4c2bca95763a0ca91452c5643835196ae0c00d6bbb8ba6a76ebbd198577cfafa536b71c8b837f2b501ec08be9470bccb69925b625876812e02254b17ec5a7a7f2aa2f32707bb84831775a8e49ae31d82b006e76bf4c4e965ed437f5298b985248261df1e657b6fdc51f7340be6a56d3d358667f9df996bf97fd6fb4c7870565f49788e600e9e54fcd8c3a487523c6ba49a2d5f0afa819b01f00ca75b846c0f398df771b34e253db4e6f7748c4630b1d32e047b7686bc201ce3e850faeffff7a2a5efc3433a6e5a386fbd8204c18243cc582e9f3ce606be436b0f957ad73dc7cd65b3dd0c0b336556e4d9247cb041aa33ac5e7d8080883b0e7359b7128ff0c6ba39d6f392cb1f7371e4c496bee32f0785eb0134f74ad9bf244a6ef9f1cd67175795b9a965b6316fc008c1c02415a20f44713724e1c9a644a6b5d1150e31cd54c29368afaf2293f7c2ff68906cf99f5d32fea44b7c4ef08f627ff91627f8a0a2d828803e6af4b93905125640a32409fef71e00837a9d89e776b88d50e2c0415534223af6c950bc2a2e8a7cf852bbd21a0f2f20cd03a9fb7e8214df84a3dad03a3345dc44a1d15eaee127f50ed2588269f1c6cf55157b9f96239607cfddbcf55bcf1d24ecd3953e20a54a073ff3749c8882595decd36d8b0fdfd0571807e233208b34324c244a2887adfe1cb5daf8b79440a44a019c872813ac2dce13fef6e58ac58987241ece2a3299024b7adbdc89120d88823e1bc8cb8ce2217b443770e411ea969459c8c56e40346b2899db2abb764cfdfe82c7dbc1ae868baf4bfce840f68826e41e627df189910a780598cff166be972117b5c61c02dcede2d298acc8eab96ee718cbf4614d1bbd93d8f231dc6d18e4d8f4b396b5474e70c229e6219c3af9b41b83bb5525c1ea4f415fd06da7787a9d9d318c298446071e13971f7c742f3ff61d86bbb9a2347e0608fa335f006db2a618b43c2225ccffd8e34d924f8dc60bb1e34c1822bf1860a64df7b8a8c0d09e78a3fa17587d50aac69a6eeac1204a23fd3c4d7f02635988fe5555ee85a247c2bf6e952346b8ec11e76149e672a8be470132a010c73ce62171da95cc84bc086070d13eedc88840540f81d2980fea2cbfa94e5255e475c51732fa82c7a8795df3421ee7e55d391cce70e7daf7a80766a84d23063f93f75119a70bfb8086d41fe9b2840b4a48f0157f6a0382da9c332971d99805f2af01941b654cccafdfd95818131373b3746c00cb663cda6592e913558e61eef2eb5a2bcf2936f86ac5ab935d525fb0202b116e4ef0ea063643c7b58a172923aa8b312ab64be7ab8dcb04dbb35136d7d7a15d9b77ab3fd6ea1d45fe3b8c9f7286456d33f2cdd48c5f777769e570ac0d7ae56543ee4b0c6997041e0c67d82cd21b8b6d6f4399a7372f95ea0b580254704cef65e8d4bfb2ae556cabbc26f513e02c2be2cd9b1352b925dda37310d72df63436289bfbcaeaaeccb84a34ca75552f7b545e97c75add87bc3b93c8c7cb01f0fd813dd47eff1e40ae3e230c203b7d982cd29fd22f2b8548b98699e706155539b05d052c7ffb3150abcb5d990c9171db4f88ee7e42cf56d10eba0cd08c17ae14a7b41da377121902564c2088e647bac379e062b04643acf9d07750d3b95f7132e41434d4e3bb73ce29267761fe66866db875ad5d798c10bd14cb7c382132f19b577f3c24b1994b97bf488a3b3075a1c20c4447618694bc25b4f92283819a6a445fe7b3b389dfc74a544dc26a3429502601d19c38fc7cfdcf5d0aff6c28264cef679daa32d0bd0b80532d02478c09514118d9ef3aa3b093983c1f800d048454c7ab27a8220fc00a4285785230e7b97c415eb2cdc2c98131fb49ad4a7fd96d51b6077ec872cc95935aeb42da23e5e23342d0c5459603cb948d2426f68be756ed544a300474b4de646841b6ebdf4ee27e80d6820212335093eb29a5224ccec99af8cc84c65ab1b648f24aaa48be9c9fdb91dfa44e071a69f127e2206a00171513404f051a829271380a1d0eb14493fbc9ad99a205a2b76049489bce56af1946873a0900ac6294c11acd40a026abfc366198786eea707d5c97cb1bff25471125295d3e3ef6cf9ef7913a71204d162e00a614286c06325439d45ea06fe03e07d97566cf100b7e24ae606ebb7681679003517be905e7faa97a4ec9e57b97793d91b998be6c4d78b72b37dedf10620d57702445655b36476e893b3e212c0dc0b12c1a84b163189f008217945b60108d058029df8affb251756001ce79d5d8b917b20c4cc246548011824ea921d376ec7edb15e35d5e5d66646714244e228bc2f7956291a38f2f36da55f1a2134ede281026b32ed374c6023259c43e85437bc3938a869f6d5df3a50df8f2fc70622e1671a4ea290e36be376a99c681b517aa68bef04a252a4dca9dc19ce11e8a75c8a9f4146d670771855418b2c19a861e4bae7e73587a4aa9036a7d99a261ee745a03a32e5a13008c9b81d0837006beea487668296c8b683c98a44f5c155ee35277a4b97e7beaf690a21c5cb208cfc53d3c7949922cdfe18493efcb1426e8bc5707aa7282ca81b00e9d3d86d33d3b6b3364abaae0d25ff027d471b03abef975e27df7d8aa2ce5f657e2f9e120ad97a6280836754f16e86cce203c1246cffed258b0ce9c1848e05720663034019c43b2a43e25cbe96ab2fc8c7b58485f9bb105f\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-B5CD00AE06396DEB95C9BE213BEA279AF0D10F1423B5A71854413E99F7216D9EAE76C8AB884545496559B14AC9A69801EE3FD2EEECCC557D7988F34B82D244461388C7D4EB16DAC3C0FCE0783321A1488DC16C3C688126754BB4C26308054545D2E46C6BEE26C25A7C3B701341A0323BEBFC50C718162B7FF3B6FAAE7156FE300F2219655D8D44DE89845393011A2B466233B907355467EC49C9F832044BDFCFCF722D6DE7946FA503861C80037549ECE8FFF95026CDA33C9000FACC334765A60456084A0614455C83E0D5D991F7ED43952B7A69F1E326D7BD33822CF1F286D85FAE78F0B8DE186368EB334CA56070122DEBBEB920C5547C46C1291E78AE48B72C7A39020A1A2E54E59A2E46606C99E652FADB39AAB25399B0830AE733FDFD973294B93F47C30D0824686C735E05FF51A95C1C76467A4BE6BA80C5182353BD510E8D4B60BD43436F7021B3F5980D1A769B2E3BF04E0C257EF577828B327E2AD85E0581787B9B7FE44D6B826BF8405D3D0BF8974D2B1C569006C7FC3D2891DAF38DAC36F64A256E337B660CA59D2B45F1B4AA1C0C72B78495FBCC9EE9CFFA4B5A101F973E3211E728040904B0B2515DA4B1CB3774EBEA1324EB6907324E733C7F17BEF6FAD0F6BCEC1F08F785DC6FFE02FFED5C0B7A631907196835EFFD0730FC8FE020B0545C920DD7B2D705F22D8D205804397F6FCC60386F4A576204949EF60DEAB269905707396CCCD8DA9B895270CB39839BFD3EE64149B0085B96FEDAAF8C738E449E585ADBA037BD560EAAE978A6ED61DF432B6A9C2E50C2EA33A8702A23E6848401F85E2C18C7C767DB15920C9B3B030728FD9511F8903DFC8572A3679F986CA1B684B3AAF489DCD93C622C6C4D475DD60F10C390873B09B5A352B6F5A104C90782E053F8121317EB8D1D4C0145E04E3B68446B69A0EF81097CC6BD0B756AF78963724D9C83C61B7B79647F0844867B605E2B60988D2D7AD07CD6BE2D8F904F0D269187C141AC67C9DCF9961BBFFDDF3BF34D9CC5781D1BEA348F49EA8FF7750F7F3E0624C16FAEFAF1D8B6A818AF5FC5C04E2504A0CF4C2DB54930EFA759A292A2AECA1EC3A08918513D95C44BD133657FF043318A17BE4A5DCAC54B87FF38869D017A4B14DEB60480AF1C5F19A9F87B94B8EFE0DF3F931CFADFFD7AA50AC86D9CAF6D434CC81E6ED123711E34B8295A446B554F6DD5350B44C614324D8727F1CE501743043DE6EA085DB5154AD8E30E114A02CDFC96BEB4F2718033B227CB8638BCF617C73BA4473851E62C8A287CC4F9C659190E60AEC468DE7EA8841E3CEF893F3DC79DDDD56B63102EAA5B2793711A0451EE1655C6768393F59CA6085866FB41541D9997C94BB56F6ED5D731585E7B25B1DC853830DE5DD75F66298BDBD2E505DCB3850F96CCE0D7274633234EE2FA1E2782DA3D6CD8F5DA2C3063A923DCB6A2F82614527CA2A88C1AF21025B88A08C3104C679175DE2CF00602B13E58FAC9376BECAE56A60A6A8F144F1C98C8FBDCDE6FBCA4ED13228FA77CBA5CE631BCDB368AD9219568777FB4397BB40485A9AB63E9E3FB343154108D8117CE25BEA30BC854A241745FC6C26AF0D64124AF10BE4BE01B8A3D842FD9CC4D805B2BE26F8B7BA0631443F48C7F74207F640B215E0DDC42B1954A1EAB2C68E63601DE3AE3EA54E16282BDED00FC7665A9E8B098BF034F5E950ECDC46CDD22210244F102E41E0930FDCB24AD6C72507E5AB6FCCD4D6B2A2703C358EC1B51AC87302A5F507BD01CA6B5FE04EA2A5322EDFAE8161965524C61956CD201C4BF2F01B54F008F5F4B6770D0622099CDBF94D6C41DAB4A5362D630B9BF9CE240ED08D698D1AABF29E60BA533697C3C830521314F13EECD95C7D2600E2A756AF19AD94D9EA39FEEF0E3EAB3EB401225C2E55B2F2A8D7D1A3AA77A38BF9BA31399F6E6458F3F21DE354BBECC2E29740FFF91FBB23E0F61D7E0698CBF82D439AFB018DC5F5011B7BE98993E8B655D83C666FC0CF84A532C7655365746FDB97874D62329B1EFDB0B0C8A46056A85B60E38AF8979FA4910D2D9CACC3B5C1E42049D04C44273953350E0F756081D2DF6429193768802577C381897BFE540BC036293643360C848A1AE388CD17781296A99AF0CF75F81D568D0648C8A15436BDCB16FD83287C6A54F88F2F75E6B28E1C5A3AC03501D6D723AC5EBF90517D194A596F7F95947CC169CFF2A65D2BC9B54CA6AA45BA9E901D4AAC81FFE9E62A479EEC5B3F9BFF24C69FF56EC52F1183B5AC48A5BAA90BF595990B6EBA5B1CB6D88511C7D0D165FDF2615351B0343918B966ED1CA0CEBF6956BD2CA599E18619E1A5930E47CAEA92B8E9647A0262A2B24E955040750E6C7B935982CB742EE756DB65B462F677AE09A7521B0D3A42C2E97890C47148618FA6089975F5D491F4D3F69EBCD54C2B53130698A1F4A47505194F675D68F2DDF5983B008E498AB4A25956CF724F5C1250D5F9C75F3DF9BAA696E300AA86FB4B9378EE18E79D015CDA55D6ABBF5B0BE819F9EE58B49656D3B112AD8FA6651A8905061A8E37760C3F2EBE6DA611BADD44268975B5000051BDF7158EE3DC200B47FBF8568C9F22719FBEFE5906444DE9300689BFA1AD167\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a163f0cce9b86d8807e6ed09b486e1aa12807f2370f2cb6d886eb2ba3978ee84b7929d54580b5a86b0b7c29360399d37ac01374ee32107c9a97d857a7cdde38bfdd98150c2cedc2f10221a9061eda3b576958b8350cb89e27d4a3c30fff090a550643bdd0075da1b9831f971256805f102a6d59bb803b3201eb312924efda3e379f7b6130da6814c91529c23031ac3909d0e02e2110ad1f9d56abe22a1d359ae7db28ed5b6adfebf17055803967a1127d771f4c9adee662dbb277862240e03f2fcb6915fc99436775c91fdfd84151cf571a728cce6c4055ad18bb9ec10e39e6b3c7094ed3db3193256926a102cc94d2567a37f665dcf052e20863e9f8fc66b56bd471168681fef3ec42b641ec2eac3f42f99f702da13d9aade502e04e41cd57d5b05cde8861406b99e12e37a482014dec0cb4a6b90d97d5ed10153a23a86093105e27da2d7f3f34736f1613c4e86dec37597a85460c104508a5fe555bb77e951eddab081f9cbac0487c76dbe00eaf1c1ad87c06a4d7572c57037e94eb60be1ee07fa39b343335b16cf487f327bcb731f1592db0ea833121b21c2712374aa0fce26d676ef67ebbeb3f220e4c5caed17aadd42f09cef9b2fb7d5b5a6dd983eaf15312bb69186607bb3144dace7e4a603d3f82b7394ccfe67d555057e822c86e68b6ce0f18c218fc5a0145eed4c32a792c3cc8c9a56b6cb5b80fa444314470d72d6d84bed3db7328153899cdc04c2b753285fc44e3eab5d74e77977db248fb774166086bd37856f0be4cc7a0503a901443ae965b183dd75205d8dc86349b38d1b58ca7b8415a5f3ce70fc6fba330cb5b22067ff75cf074d91fc57cd95e74633ae348eb89efdeecb6e2f40cebf31122e0ba834cd30a35cf52478bb9e6a2c7b880a88f76ecc534d928d75f59be681a181d22fa5661a7d58cc9748eaf8d789c1a5741b2ab91219cada5047d815714c1e66e476dab23af40c1275408f3cbf8c8d7e591e571885f64c6548a066eaac99b9f92ed7c5abc4267fa926e961deb28a98fe0492085706aaf4810518bdf965ac32c6666b59eee893e773febcbe5de8db551f409593600659428be7b23951359d5394875f00c31fa7b707929550dbd62fd2696a193c49687f872936907feb2bbde12b3fd874a4e9d72d2765508f9ce08d9fbc2964c9abc93e83556a51f1e446d9b92a2834e316c822fa5f361d44c05948740ecf776794e453ca7057465e20e6819d617c8d0e245d2588e15c71e7a7ddd5cf3613f35da272c437bc8c334d6f9fd186d31cbb9de5a9f739258d44497086deb7e564a0c95d6a5431f31d470a1f872b20bad7af0a8b03c01cdf71567324efa383eba0e1f15f8474bb4e205f6e89f9a85d66eb57c6d9be0e50a958dd4b587ae9b4c3c7899d5bbf7d4d2945598bce9111ae4bede064d57f151fa171736719e0fd27625ecd15fc8b46e06477fc9c8f29c01874eefa8f7bc964ae223ff1e9c98814c01f5ec513509447cdabbc73cf7b96d06166e5524d2d433315c4d4f2e9d709fe0f78e88603336d47c7e301aa91a3fe1dab1eeddefaef17ac096017069e2ef40e3bc17035b80709142d8eed4c34637f41c4045ebedc268f6fb20c339dc5a5e89584722a4a156c26b04ea424426d70580bbfd9a2e095e5aa0ebad35c825d19df64557826f0c5c455107a5c06644afc4ad1115c1a08764d3af872ed3487a2e40e894c1515b16c953d07dc01ea9f2a54b2f2502661260e64b9a58c5000d4adede0347eb75c6af9add72e595fcac36ee0a08d7cd2da6e0bb3a3023b772c5535c3a8e6ccd52b3aed80a1f50a86906eac6a552ba07a8c7b16eb17b62f63f423dec086262bbe90736a47e4d5501682c5147c03d06a8060166790ed0673c2eb8bf54e890c579b2fa77a863411467a09a7673f5234c5213321ccada607a58a55229f8953159d3b67688305268c2a7c799a619a7d3fa69d4ca86969d428033b5adf318db78818f136f651f2696cc3aff43c3012fc1781aacf3de7973b165655f98ac9e7d5158a4edd4cc4b33064bba97b57f30908630624c13dce7627823b9708df52389bc4f1742d86b244f74d48dfe67b2076723294eab5cfc8539c21401480bcb1e745c1fe803e6e1fccbc0dab6273abf1e2f27155534f6b9a2d06aa82a7a7aadd1fc574f42214f3442422e12d3bbf7b2857fdfb8bfe4398b16be9a225f94934615461fd9a430db0c5e50c25beb3e3341e91dea7e8b3f2b05c25af2c1e63448fe311115758432cb09d8330d28398d9cb360eda112c245144742b733f524e8e7368acf8c48c1c1a3641822ff56388f0db4f3988cec2888bdee3d67a75bbf0ae0e6661582c7975e9a05d3b7b50c86359aa4240573cf27d7a6011cd295d3edf1bd0162290c0ea094546dd36d470c63166fcb4950a96f7272cc0b05144ff5d6342a27523787af5f23dd985720e1a8bad426f6dbf2c5f42178d8a71b7f473a0c9dbe278a0ec837da78b9cbe74b230db8a4079b2cc2c49539f78d55a1253995a2a822c7711f46c1cfd379ed523fda80ea91af7c5d872a5b6119cb70cda9bdc3fa8c4a83531c71f5da27ce6d876fe653e2e808eeb7209eeaf4b492c09d47385763775902afb05ab939f6406d582442ac3bf1113f172601c168b1407f701799d16b56c82da29ae0067d6c7f48c2b4a6b34d53fabc300ae7f55ef5f7094e403df40731538204b47f8fdf28f855722263e3c3f058f53e585275dd8cc5457003d60fdf32dc3703696c23fabad72cd64dfe195f2a5a3a54bb5c8e39443fc1c621fa1c140b5291617974f6f2600f47420b3332208c1f39f6155bb0c2502bcc942278ed27434077046d7a9d393ea87ac2990b9f3c7aaaa3107f40614a1fcb5711151f85f595018e48234d567814674aa0ed81a3a1b597d8c410124cec8a45cffc4acfc8a9429ed52008fe6fcedaa856b5001ce12da270aa7b7adf5c079eb88dad4d640064cf3ec2eef00934b75aed8a03cf04bd154ffa5804dc96fe81bcc2fd48b3b59ee470c4cb841b7b73e21e3b35a3c6aa8c793b97f51d552e66b8a5dcea3e138666f957beb6c64c3f8200f147bdd2714dc60d605fc6e47ba644fbe648f5cc8ea2bf52251242bfb4796c6462e48375143fc4f9ddb0543ad0ab15c54bc029b9c95be7da19aca2235085a2157b3a2968f987b738c395f99095c490f8a3f3ac186a86f2d09c8280799e6810c9fec0af33bd5b27b855c70c3b6ffa6cf85b6f76d32f076ca4f11878bc38d58e308676e8ab1587f9f889df68c3712394478987e70c3a15ef5b5249293f8e18ef6024776cf53b10f3611bae24ad3e3a4a78319e7ee8ddd478a43894a7c104e42a5b0f8d0f0774553c4efdc2bf72188e23d954032e2dd1dcbe5282e800057ae0f170e4ea9aa076c60cd4840ea1ee2d887b9a1c95aed4b0df041aa3c88214d47107f8e11315b9cdfdd2f488c88baf8479a163ca994880b3607c99625e1d1cbf59effce1661a520943242c63707f1b1ee6d331c2834e4bad510d04d96159ffe1e76be6ef380afc6234c530c479ebb1431a0eef0dad3b909e75977b25336b76899ed0ffb50897f2d523e8d5e346adc4d5bda3f647bf624b85c66c29797c97c579290f7cbfd5bf20539629ccc65648238b02ca58ebb2a8fc314357747a95d2821b1b04485320d\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\nn-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-89ad3b5244d66fc84f3dbb02bb51be6fa25bd2ea3deb3bb6d964448351d9821f8b1bb2aac85f6bdd7573795e228fc04b4b30dc6940c3d6fcdd803035a8d61344515b7983ecbafa0c23e961ebcce057ba857d058576d0cd929d9e5538c5b3818c2a697677ca30faa37b887f0309a8f59ebbf7f34b471abc65f533955172ee610971f85662ce59db9b4c7e49e75c5b03239533094362b94d5d399ae4b7f94d0cdfa51e0bd6d720eb3468c177273c3c0afb7569ca5514849053e433464a6136b160b35ff19406613e31e7c3b8265b585792a8e69d53a83498b089da59798b54d62cb669ac1c917f77901392fa1d667545e3103902104103c2ef080025978041f324196cfa0de5d9f4e2929b6a9a67057fa479c9484ce55165c9d0a60265b2ecc69430e3081b1dadc91056c8ea701e2ea48495153c86ee3b317ba127aaebd85349b94cd8fb60e28a4fd027ff1d96da4bd2b8fd1c0ded721f61168dc73823e9b68b8f6dfd3b27769e3f737be70a19c20b5dd06f91c5172eac3077c2273aca458315bceb77f3d2e84e4ef8ab66e26f8194b8fe666e66d34bb779406f1f60245e4014d4aa8b6d265c9ac85df71709d9d09cf9278d1ff37765698879fc3fef617139998f37630fb51e76b47dff86c367e270905643032387bc4fba84a63c539ceee7247b68e95a5c513c43b8b35e2f1228ff1c06478dee9461eec9763a227f9bc90db9c20796dd98c5d178de643df332e229daa52a1bfc0f445e2aa8ea64f233aced5d7197a32dd2954eb8ef28e8ede22aad2edcd334ea41995355eed254bbaa46af4c00c33862ce3c3f88bb2e60f6b1b9997769c91e4aa6e16aaba35688751054abe29545527b761e7b84a25a7c932706a772918994b446e531e75c94a00c1e4d5b2fca578664ad492517d149d656de717c834d6ed62bec4b78a6a7290497c0f6fca54de83cb42cf8480f67e83d0226f5b6f99562a024962920e75d4c6f766a6de0d16f7965d0b68b322743ef29f84dd1f374eb4e2be7b6deed0ec99c778994e2b267edb1b198e49a27d54306a484084d9906425be4232edfb9477651660876dd3b234c16f30496dde0704004c7474ea045ddde3ab0a13f62fc5367a4be561e1ff50a4d035e6360dab880429471ee57ad84898732d9f8f93763624ab53d8ce7e7d03029749ea625d424da59d22c593302cced4b7da41e9727cb9ee5d4a5ff5c7e6e4a2ec98520553d90afc6d0928201576210ed2dea2ace73dd5c072ece53068bbffe6a0ac44767df1433b4353540595f28d0238509f52b4588be42d9eccf8d3480199945e2d83dd64e279e25849e22bd4216af75045c5bc5ace43f3a5045bc15e7b6a8e099a709afa8c86bbb5c153d6d5cc522c115b56dc6eab85f76dddc857369c3355c15d9cdea649208c7a7579380fee044d98f8f1f6b108589a89877ca10d5bf94bda70d5d218efea9a24b9b6a6e724a056343099c04b2a13477d6d87c16817ffbceb55ba0046d1840e1f9d1e316fe35c6f06b4cec777013960a87712e3f33bfdfcca8c214bdb9a646d2eaca0f8ceedbc230d888de849c37035b550f17a927129fc04d4a51508a36ea478127b87e04116076e215aba3a925facb757bb5947c09e1cee47b4987983e1bbff5bba5432178dcb18b4f58c4aea40732ded1ee98858b936998fa5e7539a81b8fa94a852b44d824c3607856f1de4f8bc179673e0370cdb4f57f9c1a958174dced4f50c1f7eee29f8cea9518b48986e0f8867d96b0b497fb83a7feea379ef9fad3792c60d3f0e08fd70f09065396c9e2b1dc3072bdcd85ca66a5e541ce76426a56ba840a1a14f080dd3efedd7b4c1aa80aaab9c51a8878b7d7ba79122fa3356cd59fc8e616587e3214bd925808b5a7ce4dda34f42c76aa8d2916d5605c1d265f9abc7228b680aef5ae5e71b2281cc3765ba98ca9771dc2f0992263622232ae9aea0c790ffbb765028f17409a2e19a9d3ad5bff30c1e82bcb584245183d70cca5b2707384ae504f3ca475d2daedd1feb8ab8bde4e25f25326fe9e2f69557394010d346b025ad480306d46b259329a84d6b9477910529f6ebb7a92c9a196f495700729d71ab94890f1ca2d4a34128d1807bd2987df2b37cd490e7ebc91167b9dbcc34fd896089b748c63d6b6b4c8cc156b3e554f326eb08ac7170894b2eee348c9478f1f2ba488a1c3ce8ff7aa19a31474a8054de2b1b14bee71fe4abb259fac2da5e7e4a43f5b70948d44d03d3be1514da9ee932b4e4415f5f70de11f5ed3f437d2d0885cb7e4131c97760ddf5014b137e25869daaf0302dc26dce0b557187d418799392490c75dfb0d40469eff1b83ccb0dcd48ef1175e9c035b29b5f6c93ac5fe41b2cc2fc2d7cb8912f6a1f79d38ae7fba2600ea9a91be79dee4550fb613a8e29cd90e575cd55b54a3375a10bfe6de49d33f0d1a3f70a9526330c97e191a133a07d49ee12d9fe18c7c1c1ba5b6a74ba57c794e296e95ee063d615d77048e919977011087c419118deab38d7df9f7e79ecf51e45318df85820e2bb7c2d69a11c17d31ed1e86df304a4845bc8cee05d36f59d610a20bdf9b16e428fc267f585faa573b779bbd6e540b3e32ad3d9cd1c24a818ee83de5a91008e33e0a46a511c26a88fc61399efa2fdae38f75d1634fd57f9849c5a361b94f8b97c04cac9c0f7109bcb638775238711867f7b32b852feb3ee5653b0cce063415c9fe9dd7f8add3e4f996db03ba5f37a1cb344693ea95e35357772c68d090feaa3d2c61f4156bc530178b70e4b9a8e75aa1c3738a2219d3fdb5dcfaf5d9d77b541c944eca7c9af42a358222ae334ff5fa5f5eec2367040414d01b4c6876b79a78c006afb5a357a78b96ec3d502de789828b04eeae19cfc5fbfc01441da3e86934c4fe38804751e2d3b47d16c5a9a246ac5731186e97c9671eda1fd0f68ae37c00065b8c4092640153d30023a3298acee9550ada9aa5315c46fa879efa35280074f80b3a689f41a3408881f8b9c42eab59dddb4358776dea5d7a553545ac5a6a9de2ec05f70e29d81627eaf1d3e23eb019f1921752779b71c2a8f24fbeb800a12556cb12cbf7b426d3aea37a32b2782894cc23b5fad1f1dbdadd1adcf9df42afa30a2e2829b12f6050156d6c5c39dbabc32a02dc4383e889b0edd16c3061f730679a7bd95c07b197076675422e480d642c7b1d1865a7c472b30c50cadbf222374ff392d5a9f72dd8441ca3f3d688366e7f918142bc00e5045cbfa5df33abafa9f22a205bbcb1f3009b903480c5a72f804afc37808a29fc5a732fa606cb4b9745dde61e50faf8cace5b203b3c24828aab5140458cb4acd31d4795726dcbe47e27a48705062994584a7f51c3ef1d2e3e64d1149da353fea5ac3fdf544b5faf728e675c77341d0c6ab0dfde580a0cfa07ac93f4280357886c072b2afcae3c0c678c9003ddd1a0d2d9b9a04e93789cbeee7a13a58981c77e6f8b6190895d629606bc1c0f38b2ba1b1507c1a7a02d195c4ca2ecea6de3f793eed2541fcb96cc2ef03f82ce4b23ff0b5536d64c178dd6d24203409f85c8707a319cacc11ede0fd14344f7348908ba8f9179fef6c7ccb52f81c5ac8621467ab977d59ca0ad4bcaf38d36fb2776e4ca7e2c082297905d4fd95a7dff36857b3a4d45025eba22f3a893c748\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\n-16c069f82e6f6efe9eb825ae1b6e908e32c28e3b0ffc443e9472356bb19fe58378012592c1afc414e0ff970a13a9b8cb51b968a7ba9a2f7d0c326b5e1d074f5af742c2b548f87b8cf1baf45f86000801486773a4240372f8f1c05e0e9ceb1bf5f18556c62765cd06c472781f73f6c766b44c2f94e436eaedf8612cd1fe381e645689cb6e7befaf031823029f5a6d8913e2245fec9159995956825ee81fd66ecac65d960506f2b3f58aa4e9a6606bae585205b351c5654b9ff455b08aa9ac45ad3b20e7619a3383913defcc42c0d25acb6aa2f3d4e17e4febb6dcb59c31e853fc5db50770059aa70d8d3c58d3b98efea00f9756260d843cfda0c079fbbd4933ff8512ea6e379b7b1b92ed4146cd0135b2c8ac61496cc70b55de5eff005a310eaf50ea88666e342850ec6c22d2d5cfdeaeea40321c8278e341b8422bafdfe71b42cd3483d71df4c1ac8bb0c86a72480055d272dff99203919fc2a7836adc985befb8025e6e491957159183949343d316004c075332466101f14aa78296cba1072799d978c1b36e94f042eec38b989e0c7e40db362fbccdbdb56236397435b65b12cce3f13bf55abc805973dde8f9c65157c3a3751209afd01396ebd7bb20fc16229ab289848c1aa48f5bf86791468df8950ebb317d72c050270f275cc219faad9980c69c377679c4e137810813734726ec78ce545199e43552ed33ab3689b6ac18fc54fe847af97fff3e2d6fd2bd6885fb675278c4d897b507d37b5cd1eb291d6195c03b5beaecfd90244a497c69345f70a118f88ed8568386b1af2bd23c9d0f2763c19b669a7378c42942a242c3721c59a5c0390137077ab10d792e2670da72dcae6042778d691ed96dbe126c2ac03e6f5a71eb1cc363997ce106c6111e3ddf50da12a23447af30d684548536c2402b60b75805cd0a8ff2ce7b4d7863a0baffd5c0b98df8dbe6fecdc37b2c882027f0d5b78ba3bc35a352d419978bee8f39faf096d31196590c415044500140e8ca976340496f084eef29a1a1fdd8df215da732f37e140aa48aaa393e5d3af9b266f98f5ed1410c9b4c88936f1e2b225a6e1c99ee9ddb7aab09b55be15aff94d2f43a8ba09d673b5d1327ea95f42fd26b4e13cd02a6a26c0d20fca8dbea95e71a9d9b6ce80fce8c7c0cf0ccea591916e4b9eceb3b42645615a40fd063d1e0c7753211ffca88a67b3029d6f7e387b11ca34d5357df38f5d92042b2f9a7d8d27ef6c8ebbce9377568cdbdb146d2e15858cd7133b5cf242406a857e4247462d87994959ab3b350cbdbe521f81b9375ee660b53eb534195a7cb0751c54f3af3ba72ef2cb3aa6c748270a64b17685d046641c20156575846e42b93fb1c754140ed6a6a02df039cffd970c21349e2bbcb6323815f1849d38052e6bb143d11890518da4a213434b820c79994586638b70d6c006acd43e43a79821478bba9ec09f9442fb15308d01f533c460b70a28c710da2b3f4ac7449129081081c4c87a241ab2f9483add71974846a3f32c3c96a08ad090098f38021fdfeaf50a36261c728aa6395b2114a88cf9577793cc7bfe45a7e238b997bd35b2ffb0c3992f188de916f7c004c5f83da5aac274a47bb7348df3590668efe9c2503b2c316dc074262fe874ea700b93a9d2545ad3e22b395d294bca1a2b5615d259744c56cd3d736be2c4624a1302cd31ef33f75373d2bf8b22a9e85db1df34ea4d24f0593cf9d494ede243517e2618dd0a6bbd0ff46987995805ccc3439e39babab22a53893223e25eff5276ff7a5eaffb88fdd248f3b2a4936ae56bfac6d778126930b25f05bbf031fb0574aaa129e4614eb1a38171e9d19b7fa0ca5fe7b4860ae3447bf2de8a89b8d0e85c7e130bdeb0f40e6326b1167f744e2b664e370f8a9d31f662364f442f1cda1da1f9437ae6255367e242253a325de08f6a12774612997a2f8b2a6a6e084ba51a07947ee7f4eb68545594756582be6232224172439c1105f46da151fcf9ca328497f952151b38631f4797f6d6ba367ee502dac0b1c5f45137578a5fa947e311cc84b73c56f058a1265ca45c10423aa165f08c53bbbc7ea42309297f7f37a98d146c48a7cbb566e005b76ec243ce6f7b9231428cfc17eb4b1e0b8d3002628e3ed7bda600a5840d4c1b2fd97024bf2f9ed637b521e8e1645400a7037ce6db2bb696b604d6b5f4b40a9e4eb443517c00a5ac6c1859dd18b6fb772155f2d8be3099b638602bdb9e3941d31bbbba3cc52d7060f7b45416c9923ee3697caf14e7f51361051bcd540cda6a14a71cb62e033603bc9d58ecb39ade2144b13d1746f0de2d1742cb6b34d91917adb69634084e08b9b37dd2c62f55eb64ca81a60ab5b71bcafe2c42f9c8d9ce59e6be9c2f0019c3d96c6ab738cc9df2976f0b9c47579fcc2d72161317c541d5f7de0bdc19b6f7d3264db1079cf3deb1619fb6531aa0032b19d2cb2ccef9fd6c1149c12b701cf8387768c6eb004fa6bb876f7ec010abfcf631caa27cf36d30c1738d50e868214ff8989ad497d0b12ed2ae83be1772a531610e4698bd721630dc427f07bf6b4356d720f335ea66969d14b246b757ddd96d1607dcc72d9d36fb10f9a529056255b9f962ba7a02950a0b9c988fd381d801af73d7d9abdd842cac56a77c5e2a9ab91785ad17966a2fc31e42a663ac583488081c236d13b82b09933afc57e25847f8511b0cfcf472ca6b21898ae47ca8fe674a55f8737053ddcf963dce0568839660b47f2dfc9eaced787aab897d16cf1a1e969f4e5fff7a8ec5c3ca33b6047fccd8d32f4c3a61d2c69075e37640d9120330cdb9732ea9325e4fab3e94ed580fc5be75acfb14468fd12f6e4cf87a7ac340f990e33ee4e1d2cc48a793c8c480b59fcc4bec660d101fa1c61a50b423c16c09a29d2dfce1d2011d4e4cae986e4822090379c17ff077cf56d72478a9bd703c2ea037ee7419b8b4464388d3bcd5544d3a2ebf12be85917021388950c180f2b020ed1d6dcb3a7e0770c7c1f5a44030bb4076e568996c307182b103050bd43ae645aa96be787f1d82cdbd629220104bc5167c0a8b8436d828cd70d34c9ab0c039cdb0a1ef137783e92bd7eac1c995268ada3e1e8a494fb00c5d678f5b6010c8687b57bde36d001452b0a73912f6ad0f7076481210a975b44410fceacd0699fcf7c1489e42728ad705600cfe6c2267a9c7979274e73bc2aab80155fa561390cc9460a93f29c4db673b00dd95d5421b8c9ab003fa7b48f82fd6bfaa264f0debe6af3aae7716b66c5533c94bc595e646c38b004bfd638e261b14562ae061164db1716208f79e5ec5e457a9ec47d2b0b7b7b68a62c95de164217b7472fe600a52a3aac43775f267832bf98ee2112ca9db28be3e8a828bb1ac676178ed490e0d27fae273a7d1de1fbca15aabd065890467ad7d4648487c525bf1ded91ae1bd3a99c6c734d580c69895dff04f3409c2f7a3e0416b8a2c53c75dacaa8bc020c803ad12e8a48f850737fe8d88f08643bb6863ae7b23103b0037255cf87f27aecaa703db904d789c61147b8307928bb184bf94ea902f14032d3ab1d6d13066ef6dcfd80cbf155f68024fd9fe95ffa782b2de5c97e1027e7f794c4ad6a2c23e3b5c2de5289a1f96a4f549dd32e9e4cc07771da9d1c170a315ef9d6846bf10dc97c1ec7b748b5cdcecab920d93bcb5a706b23e70bda6ac80b8efc06eb3594e5edfa4326caf3afab8cbd479f5c689e86e20247a42e828e589d831a6f1b2eeaf747f903100540ae7d725b0e48a3d921c303e13cb2a3ab5f8cc20502b90ffbdd69cb42ec092cd2a24ae408436e77565084a7bc20742fe0983744d7c876b646b1385a383bec18fabda857b91088b8c7fdb5ac5591bfd8b4f5c8f880509d0b6a54ce45d15c639f3b818508c08e6ed4a37497b2080364ddf01465df73e2e91a7a9424b10ed9a6bf1f05bf559eced1d0b667c35885c43db657520609a3f55017f8ab363fd83ff7a88974aec48d9b359d25ac9e201302102b8e62ec176918449e7fb745ef5dfc03381237e259f4cf200714830b2ccc4925afed71a4b956d1bc55b9aacfd42aefd9d4815a6e1f6151fdc9379e34faf98911e2d5a64152c426c0e8f386e06a86190fd5aff238128a62f07e02934356511cfa2212cfe3df6d5c87cdef644e7a78b34a95dde40002d4fdb43243a2f33cd3bcbe00d3503451073c3b13bc772f98a579c72116f57f7bbd07f966bafea91fe80541acc19e4010723daf868ea6b5760e66d317090ae218f57ad67c2992b36e84d513052eceee456c29cf57b8336516148ce3835d6ca526913cce6acb9a6fa1e0ecbfd9f34609a6751367c07a6017a78e078f2627e9f7be020482731cb93e778728e0a35a7f5bb2d6c4c9e893f0f7581effe6881f645223b699367feb54b8bae06a68e025a9d8ff507efb1ee6a0b9a74b14d47c8c32a4188f98d9b359ad1dc9967d19aa737355356442e659db0097635fd03e6d2f629380a5a6394e28a13ff69f36ea8f0fc4b70d2d002500f988db49c8d4da0a71e720be07034ebb3389b2c75e3c6254a82e2e841ea0c99755dff1ae01e51367d4e02eecd304932510a947f948007414e2bac773d7359243b8bb9e973cd4a11f7e6406f450e42416ad0927b133e0767adf949efc3dcabd9b523dd92b63add6c12d211edda7dcc73deefa427ac96b72589ae0c9808e7bf62ac31ed8aa5bbbdb33db466bf8a33a7e3b170058b1cfe84c96eacf005ad0796aba2c994c375b79862fcb6cae4d13bad1dab2b838c657a55f85b988892f62c3581cf60f24478735c04288c1fa09896e7fccfe1a102daa51c24924ce9ea1ef8831c91d526a55ba7ef2149e0a5045d8362329b6e3487ce8a7f0c33a428149c55543bbaea26b533ac8103820d405138c17510970cf367b3e3a4c46822d10e05ed47ba4c3bcdd02eb7e4fd990da55a518761335f9d2efa6878f8d0e29b2704d3af11dec3f7a8c2fa9a7104e971ecdb7f18d93ad2a1ecdc8a4d1dcf8ccdd66608859438ed23e5179f6594c631103828dc2d9f8c784d2a4cff15c58084318c18571af7940cee704e9f3cd0bc758ae7cf9d70995f1f1422bdbd2bc441831aa72b66253be6ce186f6e93613f2d3888a555b578481ca324878518dd9537e5e1e7b27094dc5114a4e51a776fa8e5e86c556f45145cc3216569c17fe22bfe281579a6fd70334c574d1d7aa5fe461b3c0262830a2afd4b485d348babfe81a3418bacda574019077cfdcbef5de1e73c8a8bc3eb9113713b563da34073670cde452e84866d688ac9f691916bd443b02c8bf15c672e1e75b50156e1e5254fc23e0b0d6fa530435ae5fe06132d691a3e59489c7102aeec1ae9656aa334321b8f07aac206dc80cabc6b3c8aeae941438ff5cfbfc494fe08661ea496b7a81cfc949d60928251ba6217813140d050fa68c34dc58771b80b84e79f469442584db07c6b5ed39a5f83398965b715966a3ade89570b09a501860accccfe10aada86ae989bae9adc4ca7480916e1bd4733d6484959e4cd199086f413c17b61e16f42ad93a85ab8ee86e09fc1dff1087384ad087a6d95dd845e457f740e538faea88985df42fa2e0ad89c8885de6e0b1514cdfff9e86364dd37ae591a1843f60f71b8e8b6aedc3155ce76d1fd9c4a20d077050d7942e8369cfd9e0cbc19e62e32d15edd34b7f2645dc31c1de6ac3c36c5850d43a6c479e7680f02e23c8870c1730ad163dd31d38e1e7de492ffebab9f3366e85dc9ff42dbdd1eee8bf448abc8017a2bcee2367e958a01986fe9d7083e45e262595937e3287b499090d4ff466f52824b032428757eac7756ffe76ad43e6f70c98b4e0769ab91695a6ead1a1ed45ee36218dfbc4994b7e5227f0fa0536a9b73b01701d10f97d0c4b1bc9adfe7c2bda52e8e042b976a0ba1b9d988acacf9481831cf6881e70b21520cb0abfbca56bc3fde95dfc84de3b3aa9d4f598dc5aea2473ab0b2d9758b4bcf353c3fc2c6a7e487cdf1af90ba9b5a464539e788b86077ad0ef611a2910f784d72c75169ca095e14e4916c346e55cc1bf042b0d578d2923580709536adf49bbcbb7fee7d4c8a61fb39dcac21ee50f80a7bc76e82b285b0bc3f0b0fc9e70563e82ae65345d521a5ecbe211dc07acfc85f707c6d23326124eae586bf2fc77b6021630ccdb6dab8569b00374a1623f1a99138b870bc25d20911836d1aa907e9029436cf0d17dbc9bb350ecaed0bcbf4d48a4a7cb78e602e33d13f243347496765c40c8b786d8bd4ae6d9eb6ab879d4f56a004f9d6a3b6e98e2ab72296b546cc34abb697e7eceea1273f7d8658e60112932673e090be0c212d3d664237b91714d93edc6c86ec4a3c98731f7c102652015d58abca17b412ba07502d79ba43963dabc05bcff231d342951f36dbf8f8097e363595dcf7141215284cb4517474a85e0f0212c2e3c687d868794d51d1fa9b0cf102a62a3de0e2082848b90f31f203291b8bbbcd0eeff6b769095ebf9ff344ca7dee7eb000000000000000000000000000000000000000610151a212b3238\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-a01e3186a88928fad593837cd6f24d201ab8aa8cd445521805be6ad197e670b8ac1410aac5c88a4469cb7ee7b1e2588fe97a400d5cb948553a8bdd0ace8201d7ad26e7db90c6f841f7a30f31f167e5a3873dab36258655ef0cd745ffc8e3ba7be7f241ba2e97f456aa4292288d0825b921d8b266eec4fd51fc0d5efd1d9f67ce4bce0a521d2e693dfd86f3d3d308bb337ea64625b1404f0121f90c6ff06e14059bbe9cadb32051cd3bc9181d78f7268438729e1570e2bd89ce7e28afb134373120afcc99bf30d963f4bd616d8cf0c02c4f436592395ece85d2bf650553fa720b1ce842b0daad2f610a4a458ed4a4ca98f87eb5ed4bc0a57d892eaf62e9b525e6e6e30f0f9f0a5490ade1c10b8aeedffba0bbd7976aed7a24f1cae8670e9901ea3d72d6a895307ec5caa87b18ffa6286a802248f6e1eda5c5191ad3c8f015bc607b79e91522f729f966b1685752a927ff28b59b0e4584f02f456a6c6a81ca4ab7548e4768ea744461882c24cfd4d4212fb4733786e10b23574a3ed5310e65fe9e32ede340e6a2349b551f5a99b238e4bb0496e56b65d88cce8551b23a89937c534c1f38b2f09958d0b017c06ddd26fe08463dc6737a31c1d74add57eb32fb5acccef4258551bf5bd845a2e872cafd171a030db69944b594fe5c7214b21a0f5edc80ae3d3c6c8472fb546ef13c0d0d764087c8c68c39b61f805de2b3d9cd02a86a00c4cd585416a8c25369c959d2a0911da264404a5a95db3688a2b25461a5f26e941ac9da45f18d1ad2fe82614327ded1ebcdd50471e7ed37d32e3b48d12f090cc550b2e64e3527a81b1e66762ad75198787487c4bc3743ae3d4bbcb6cc2b279f088bbb2624980f9ad78efd1c0dadb870e6732b53e63a025e012628b9cacf5cd0ecc66b21754fcafb6e5fbfc99214b080b0373c5dd5bc70b28b727f943223dd69c8908a54e49c86f74da456492d06dd8e454953033de489dbc3fb7c98613a79f303e28b0f01c82270c671490105ff598f7e6f6bf6a6ea0288ec7ffdb90c4c7c8961874c8f020d7228fa79b9b0f86ca39738b755058d341a90bf63fe98104de55fc04a287905933c49e5d5475a49b873272a8498fdfc1e6b043bc0881bedaae1abde9ac55ba925af591037bcbfc768932e3749f2336ed3affb2530b4bd527cfe1589a0a0ae83320dbb8905d31a48d77c1df191d76311ab02de75591da5f2b9e34e470cfbc6e3459cff655518cd2e070c4b506d24f1281349d57732cdc303af02436dcd57ca2d1b716ba8f70cce68035f1bf9b932618d3913b1dc9a9bb6f60d35a68d90584077d02d93af025f84a414fb939b0246888dac3680534b2ba9f2e224b10e44ca412c94dca680b62845e441d3efad02ffb944950cce3c6fcfcfa14e3c9208e9fabc52b1499830cddb6bf6db50f9899833e2fa09e09d06555978a4006c0188bc13150cbf94232938f382633ebc6d41a8c5a917c4abb86b2b5c160dacbdd4a3a33acd5c158e0d95fca565deddbe2042912079e796b5b67905254bada03057326acd332a7c52492fb6a8b8876ab3a9935d11649475de72816dd6b756f204b6d1aef5f5acbf2ac139568851644f622a945526bcb3c86581fbb2e5298ff01b2aa48fb69b5de1a901167996eb41dd8fac44c5a02c3a36ecdba25a7edb2612a5b01b5e242b1a55a9548a962f93ca3797901ed4beb510c11a90821c5c1586cb82f2f095e87c8a42b81670d342bc34fa7bcccac96b9cfc2966f3b2337fd648534449c8d8d7c6f1c12330c2631201acd5a8c8a20d7b2006507b1ce5204cdf8bcaeee8b3036f9f0b7f47d5aa28df4cc55ca9c82bb2d59aff4436ed8a09ae1d44bcfdca5d13c4d4d8b7803bfabe2f8bb88e25eec965b0dc904e48e17acf9a84f50bd98d6739b312419033087ac252287562e9e88bda07b8de3ed0e503610da09e994a81ebd0ba89467c58dda3c2e9c963190f2afc949ef97e595dc445cde87b7303cd3aba04a35b348ee2a9d8421d1fd69ce0d3bcfec9d93d243f45eff6430e75ab1fcfce14659edc3f7d81efed055f948325d28fddd90fd7efc48812f267b828ae94a9964ae4a8e764fa6463840f8a6cf078b39f12ff36db6e03451d4996226b257094ddd73a323036fbee146e1ea3865dbb6d7a3dbdf85490b04c28908d4ab713fd403d97eccd18955707683723ac946b6d90b4ee63a771dac2bc66ed08cabb29fcd96c2b55513b4e3d9815567f5f8788fd22b6364b8cc3d2a86bf9ed5fe775e131206192a85406208c402937dab551fa4e8ee4e4254546a687b212c538a779f50ff39274d8f22cb2ba5ddd74a6440246b005e7fab095eee8c47243a274e11375232478df603bbcc729ea9b6778a37f64c4f314d963301c9a1f92cc8884dd393f3a4b6d42910110183d5fe41a0b950dfe477d505ab76a31fdb5195d1854b7487cb65c378b0494b45370dc64858041654be2ea89a704a6a903d044c962e3b7e068ac0ac837357ee49ae14d612f1e3a319eca339ddb1bab1104b980aae1ae07ddb27bb6a69ed585e3e7cb2c0987d51409d1fb23c4cce7108f6819153e7c670778852a7c7fb929d1357aab51bc9f0e32006bd7167bb39ddf9ecbde2c63e492a8dae0de0574c364e851b9937820e49459b5e9591f12b16f50c47712b2729e031b4e3de4042c51bb51b0dee5b44fb9cb37e915e64cc0761b9e3a8e0793fa49812d2909e8376db7c0dd611499ad7ec5c527c153f916a020d7c23597fdfc954171cc1ac1116a13c0e182d4660ef724c852a347fe9cd07e512f0712b55eb141ea4fb931ab8915f3dc3fea2fd8deba0640a5c60a8670216ca967fb8f89437cc7acda5db202129181ace745e0357a6884eaafd08e8bb992c8d68bae86a940a4d756526f38e115dd75a2ce0486cf170951130a8344bf3ebd241ca694a84d2af21c77f77460eff8151040be2b3b0922684e5570b1097f0a419af32453da40f52676006addb2b9d9124c206ddaed4cec1dd46d08dbfeaba8fe279e0ea1ceb6ee9722f67ef2f70d9f651fe4219f1732e35b3b824d3709621d42b6472a9a9c5a4cf2bc534464169d3dd3763f8ed1d80d43d656e32790334238c1d1c61f3852eeabcd9424d1f9e12d4a08a1da9d937b35c1ada0feee310836417d241c0d7261446f836ab3e9729797ada42635ab2b86248560724242a044323a078f28321c111340423770ccb36d548b82fb2f3db2f1f7eb2e801e510412a91854b574668205aab9d4719d09568b4392131620f3af1308cd02efde135423523e6b1a243f693364df54744a809f483ad375fb792a651cb7a81ff1590bace3d81d02ef26a33305156c620c7ba256c7bdd6b6567aff0ee45d48c8a087da1e91e39c4012221e2baf5c73c8634db7797043bb106a287d2f0af1389f382a452efe0d5ed1f4eec269bb0183eb6d6c73da1647edaecad7c07760543d4869f80674ae0d2a33834b4995ec00955f954fccde46b6b3c1fb37116b74cce6084ffeb1a9c384360a95b4626cec377a964144c0731c4e74e6eab065411f3a46dd97ee0a8a4635ec2409042e8196dd7e4e254eac645e94b99636fcd084140211d9bc34d0b104f202182baa97413e3cdb139c1b4cf1d88ea229f1acc6040c448c7278fc64f835480b1e7dee06cb1ec3c4244739930ae60b208a\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            ),\n-            new SigVerTestCase(\n-                    TestUtils.hexDecode(\"\"\"\n-fe28a25123cd888c478aac1d081ea7efc0ad28c299b7cf879c70474654b0bfc8eedcc03981c72ec5378f14a215f090573a961409c287dd8bb9e17b83d8336b047bded3b424e69fb26e750f5f98a9864c906d82f1ed3f136b22048ccb9f3b35c1c184c7f2646fa81ee83701e854b42e3c6d69cf329f742155b37ee4796e5626681e1a56afa9aabfb79eedc3241423864e67e579ae2dd28927246935ae35aa191781800b4133e0e8491e134410da8b724d7b11719721a454e468eb33baa944c28547cbc9cd85b909dbda3c83671400b0de43dab70b1541c97937fcff85510a80d96cb7ecc9f57942d5416f87d0ec5bd6aa0b83ee64a57e64f88576e5560474db63c12166b62b62566dd79f3e4752af1539b09b4f71da54331b00c854e9a43199110889ad7aac60a224a58df58e997792627d4e22ef649ffd9e4853c39965c6a252330109a9148a2d257e6ae7659441abeb74e3528eede0bba8506b8c8e5be6d2d048c4163d161708b4d28175ffa2bb4d226e4510dc3da42c0d8b6b17592ed49f3948ce18ca9d0d8885c2933a3fa3857179f4ad48f6bc834ce21e4efb3a4c0c255b7f826b9525efa9ad6a1899e01c72c3ba4d78247e41b4387df8e664ca190ad641928e58cfc20b94f20b42cb2929c56f61057e85e638dbb09b8816948a95f515992a38e4d0d4419b0ee9884aebcd29df37bea8c60c59fd091453d7f816ba2b6173aa8a684e36bc79420bc640f3f6ea457dd7aa633389a536e6377ce182ab2fd62e610f51c135b549565d3c5dfd5aa83783399604faecc2c4fdfee1c383c8532a8442e004909c24bbd6dd15f2aeb8e3a2c7de11488b08f23453aa38f8689d0e2d80717f38c68128755114b151f2ac8aa2ff6d8f54770c8dc731074391ec6212140ae79c160aa2216cf183fb86f829c01bee4ca9eeb9b1a534a0e68000ebe4d25c5bda0d3e264f634ed56f1ed762bdca4577646344cd069c8947ac1050b62eb43f0ed7d276f5a1eec4a620f5f160e66b11ef24a7fab0f500c7fd1d5831c6d1994f871216c812bbd4eadaa5050dd2e59edb14b6095c51cd6715db572205a644884bc28fb1ca2e73ed5df2a668abc255032ea645c11b85ae3103119d3089875148b1ebeafba87b0560c22b6bca7f981263541fba14cc4416f20394ecaae798bdae4c15962850d49ea1b3d99ac6ae25bd803437703854f514f36b30e73fb59c97d8f542485a434b2292992e78a73d021f074a11a14c9f95e6eedf86a986afb81be2b47f17178de4f21c287f25600e39147608d8fc3d5d8cb0d6409b3a42feebe1dff95b3c588935713c2f7e8f9d3c0a0546c8da656910fda9eeb4415dfbae2f90c9805917698ebe7866b96984ef22f9db48c81deda5c17928ee0d5dd9e88acd2f5147a9d8281acac581b0a0a5028014decb33281915de058d53fc75932fc1a0d4e349c75a7d1313f9ff44bd3c1e9f057bcbf6c0f889bbb0ec75b967de1bc7246eb91c515f8ff5c2ba15ad9df662e29eedeaa1a137a4c1ae62858c583874ce7b4179372289e9331eb8ef3effdd691b8d4410977cf0962ab9f5fa882faef80a2d2334ddbcf5301770197a713625596866432e342f11f6bdb51c6d629dc0cb159c986c55906497ff751a532d922380c3f0171ce058eb25beea093df5e2a45ac8546d815ff08babdf1a0365fef8e12d59ae04f0cb6c373d4e213ab8386b7ca98891c3f5c6c6bb2f5396d131ec9a173a5c2e760cbd8840ac3be5cc21d837d44efb33412a572853782a7e3c6b8f438e4a842f7db269f7ea339ce80d2da2bcbcc8c8da5e68588e136894e4bee6985934ce772fe9250ceb70d5902a49efa797bb3fb0b7021a80daa677807332bb4cb866918892c7b497865ba4df6cc56121315f9dbbcb7d82c9b1986c5ed428cc257b4087a27f1d340bd6e22506985b8b456bd3d726113d0b190491ab8296ce2725a2c62551924b1a85aedff7c3cd0f1b3f5fd8a8b0c1fd04bb5606c3ee0b3a5c8cca67cb2da6ad7eb74be8db03e91f43c315d4fae4d93f71a8eb1be4a54c6d66d44c203fcec2debd53debd527b4d61b2bea59b74865075de444839ee09fc9f6405a0a91021bc328e7aa8cfbe77ac8b49e049c8831689f52d29a7db38ece3f04b994090c636cac358d215cd36f55f44e1f99675137e192a876571a1271e7aae73443f0b6185d918f9b1bde15d313c1eb3c71bb01b98ecd764a1cc1a7c54378be4e3df310cc0a8297283b94bd45a53f19e55c18396a902c906e2f4249b5213a76e547e10648a48498f6b6423ecb8ecdcd707889092f38c735d5b1255670d121e16091ee2571716497a72c4e851beddc42b88fe4ce51b7084a8e9eeffeebafc1bff1bc787b8b289d793e60502880e7c4625f4dfcf8d9e03cf606b0d08a36522a7707985a1dafc3e16683bf1e6c7338b9f5959d94be1e6b36b5d2fc7c5476270c8b4a38d6b8b8545a88bf34e91c765aad1f753b717ddae316df7913c6cc1d02fedded7ca47464e236fa9c627935b0df1cbb6b3f87ee6779afbda2efbecfa7c5ee324f7037e99d65175a1786547659a3d3e039d9b2dfd48b52a4b676d282701e62c895ec730df929c439cfa55831d13760291fb2e87e92fc3e3228daf16c93b3cea4da2a7b089e79d5c2698e6909fbceeadc461180784c83d5d6857e7cf50917143970e4515ad5d19a9d4836ba201e356566dd1ccf5694feafc9f6b33e734925ed69e82f4821e7359ce6c2b5d9fd2fb470fef5cb90336befedccea1a0ecc4236de6e980e584cdde0796c1118da083cf0b064e91898529c486774440b87af2cf8851b455b072f011b008fc9deafdac5d1401653a989babbb5e0aa14e7ea672951d8c87f7c41cbdbe66eb9856a54652027efc81cd20195a31106fe3dddd23671924c58cca3109611cd74e8b212058a616b4571b5f48c8b13ea3c0d69eccf41734e6cd2e4e1502741577982d6ff5b213275178b215019ed430600a6b940145031d3559a83bb9321fd89d98a3a382ac2e3479fd91ecf7dc31a7732adb04d28de1549b96d153f909eb10e024156c28842a3179aff185f008244143614f96a8297cb553141d967e675fe09873850bf28cec3eb8c519586c220be8f365aed6401beb68235d87424d9ca06806a5b3c00f7fbafb951577ce79de9dcdb7e30913815f695d1267e78f72896073f1878fedc4924f86aa6149bcf2c69e9c0df1c2aa17f95501ceb1d9f074fe9e41d474f7f6bf73d1d993975cf58946d02b9417b398464e9239bd446bc77493c9028916ac652692d80229d20172a4c6b86b4573b407ad836d0e01358216520a442dfc2b302f74c16e06a087f46fb40ef6db475754bcf778ffab7b8ef8dfad3af69fa91537c34da59e0727b13cf3d45d48a5af9586471b7db96cbd0d4fcbc5b699c1b549ad74f43ada72884816102bbb41a5063803c7aab173ef368815bb5fc4621b4ffc290602392624ed534aa52a1b51247c78e79edc30c2ba2ac3b0180693edfa1777316b6b45614aa768edee575a6b2e57b90a0137188e83b18bb53f693124c8c84ae595fb5c24841b8d1696117a5ae94b487cf3e56bac558e2c9569d71c692aaba10ce9afac91593d3a2bc9348bc26b8a8620ca43aa4d17fb28c475d3211422a0450cc0a4f0577ff9ede1368f3e2e8cac80877355\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\n-4F4C7E0134BE5200C4512299D134770A64A76B73A82463FD8C86594939DCFD9DC55B895B32A2E96B8AFDB8CA83AB857679C372CD88754CD8A7B0A31D2ADDFD7D1BA64556AAF1CDD674F3E8F5FC0BAD2FA38326365918430AB2344CFF785D5F73F2B5D631DB29FAA0F9CCE5CB7FFE0CF4AF1C7A8950EF32F1D72080A492C7A25ABF67F409FF5D4B1E0D77268C0A1B2A32D9DEC61BB71EDAE6BFD58F274707182058F0E6AA31E6D3763732A82BD6F2C76647C7ACAAE7FB4AA51125F0D2D48351B6A3FC7FD18172FA8689AE1602C4EC0CAFA863AA98BDBB1CD8C2681C2B6C5C254E346C18E2A270CAF2606A6504D30C0E2E505C2FF9D18523BBDF21424C645AF0EFB2EA0FD21B5D0CD85C7C1EE176FCF904B481855C4CD739443F3340AE48276E7F4BDC00CD11C2B0D6B97BD00AC962EE1FCF8A73D3DA3CCBB3B72095CB33C5542D86E843641CC98E27545F99188AF064D5FE74739C54F5678F411D96A0EA043652935BFB2E37EC934327C7C841CB0CD04EC17FD06A18E88882177B51B00DB6EF1DA164245A3F2554CEDE8C84DD777F0B92CDA456D922D8B7B8B63B548CBB72CFACA540C0D69F9EF21759F243CFA03EBD6B080D23DD62945E623BC4F8323DAEC1215B251C35EA13A0F081B86E803BF37DAE6D913B7D942BD1C276ABEA3F8F74D0C8727EC21EED2AFD438BB7\"\"\"),\n-                    TestUtils.hexDecode(\"\"\"\\"\"\")\n-            )\n-    };\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/MLDSA.java","additions":0,"deletions":830,"binary":false,"changes":830,"status":"deleted"},{"patch":"@@ -1,835 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.java.security;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.InterruptedException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.KeyPair;\n-import java.util.Arrays;\n-import java.util.HexFormat;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(value = 3, jvmArgs = {\"--add-opens\", \"java.base\/com.sun.crypto.provider=ALL-UNNAMED\"})\n-\n-public class MLKEMBench {\n-        @Param({\"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\"} )\n-        private static String algorithm;\n-\n-        private static final int TestsPerOp = 100;\n-\n-    @State(Scope.Thread)\n-    public static class MyState {\n-        Object[] encapKey512 = new Object[encap512TestCases.length];\n-        Object[] encapKey768 = new Object[encap768TestCases.length];\n-        Object[] encapKey1024 = new Object[encap1024TestCases.length];\n-        Object[] decapKey512 = new Object[decap512TestCases.length];\n-        Object[] decapKey768 = new Object[decap768TestCases.length];\n-        Object[] decapKey1024 = new Object[decap1024TestCases.length];\n-        Object[] decapCiphertext512 = new Object[decap512TestCases.length];\n-        Object[] decapCiphertext768 = new Object[decap768TestCases.length];\n-        Object[] decapCiphertext1024 = new Object[decap1024TestCases.length];\n-\n-        Object ML_KEM_512;\n-        Object ML_KEM_768;\n-        Object ML_KEM_1024;\n-\n-        MethodHandle generateKemKeyPair, encapsulate, decapsulate;\n-\n-        @Setup(Level.Trial)\n-        public void setup() throws Throwable, Exception {\n-\n-            MethodHandles.Lookup lookup = MethodHandles.lookup();\n-            Class<?> ML_KEM = Class.forName(\"com.sun.crypto.provider.ML_KEM\");\n-            Class<?> K_PKE_CipherText = null;\n-            Class<?> ML_KEM_EncapsulationKey = null;\n-            Class<?> ML_KEM_DecapsulationKey = null;\n-            Class<?>[] dc = ML_KEM.getDeclaredClasses();\n-            for (Class<?> aClass : dc) {\n-                if (aClass.getName().contains(\"K_PKE_CipherText\")) {\n-                    K_PKE_CipherText = aClass;\n-                }\n-                if (aClass.getName().contains(\"ML_KEM_EncapsulationKey\")) {\n-                    ML_KEM_EncapsulationKey = aClass;\n-                }\n-                if (aClass.getName().contains(\"ML_KEM_DecapsulationKey\")) {\n-                    ML_KEM_DecapsulationKey = aClass;\n-                }\n-            }\n-            if (K_PKE_CipherText == null) {\n-                throw new Exception(\"missing K_PKE_CipherText class\");\n-            }\n-            if (ML_KEM_EncapsulationKey == null) {\n-                throw new Exception(\"missing ML_KEM_EncapsulationKey class\");\n-            }\n-            if (ML_KEM_DecapsulationKey == null) {\n-                throw new Exception(\"missing ML_KEM_DecapsulationKey class\");\n-            }\n-\n-            Constructor<?> EKconstructor =\n-                    ML_KEM_EncapsulationKey.getDeclaredConstructor(\n-                    byte[].class);\n-            EKconstructor.setAccessible(true);\n-\n-            Constructor<?> DKconstructor =\n-                    ML_KEM_DecapsulationKey.getDeclaredConstructor(\n-                    byte[].class);\n-            DKconstructor.setAccessible(true);\n-\n-            Constructor<?> CTconstructor =\n-                    K_PKE_CipherText.getDeclaredConstructor(\n-                    byte[].class);\n-            CTconstructor.setAccessible(true);\n-\n-            Constructor<?> ML_KEMconstructor = ML_KEM.getDeclaredConstructor(\n-                    String.class);\n-            ML_KEMconstructor.setAccessible(true);\n-\n-            Method m = ML_KEM.getDeclaredMethod(\"generateKemKeyPair\",\n-                    byte[].class, byte[].class);\n-            m.setAccessible(true);\n-            generateKemKeyPair = lookup.unreflect(m);\n-\n-            m = ML_KEM.getDeclaredMethod(\"encapsulate\",\n-                    ML_KEM_EncapsulationKey, byte[].class);\n-            m.setAccessible(true);\n-            encapsulate = lookup.unreflect(m);\n-\n-            m = ML_KEM.getDeclaredMethod(\"decapsulate\",\n-                    ML_KEM_DecapsulationKey, K_PKE_CipherText);\n-            m.setAccessible(true);\n-            decapsulate = lookup.unreflect(m);\n-\n-            switch (algorithm) {\n-                case \"ML-KEM-512\" -> {\n-                    ML_KEM_512 = ML_KEMconstructor.newInstance(algorithm);\n-                    int i = 0;\n-                    for (EncapsulateTestCase tc : encap512TestCases) {\n-                        encapKey512[i] = EKconstructor.newInstance(tc.ek);\n-                        i++;\n-                    }\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap512TestCases) {\n-                        decapKey512[i] = DKconstructor.newInstance(tc.dk);\n-                        decapCiphertext512[i] = CTconstructor.newInstance(tc.c);\n-                        i++;\n-                    }\n-                }\n-                case \"ML-KEM-768\" -> {\n-                    ML_KEM_768 = ML_KEMconstructor.newInstance(algorithm);\n-                    int i = 0;\n-                    for (EncapsulateTestCase tc : encap768TestCases) {\n-                        encapKey768[i] = EKconstructor.newInstance(tc.ek);\n-                        i++;\n-                    }\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap768TestCases) {\n-                        decapKey768[i] = DKconstructor.newInstance(tc.dk);\n-                        decapCiphertext768[i] = CTconstructor.newInstance(tc.c);\n-                        i++;\n-                    }\n-                }\n-                case \"ML-KEM-1024\" -> {\n-                    ML_KEM_1024 = ML_KEMconstructor.newInstance(algorithm);\n-                    int i = 0;\n-                    for (EncapsulateTestCase tc : encap1024TestCases) {\n-                        encapKey1024[i] = EKconstructor.newInstance(tc.ek);\n-                        i++;\n-                    }\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap1024TestCases) {\n-                        decapKey1024[i] = DKconstructor.newInstance(tc.dk);\n-                        decapCiphertext1024[i] = CTconstructor.newInstance(tc.c);\n-                        i++;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Benchmark\n-    public void keygen(MyState myState) throws Throwable {\n-        switch (algorithm) {\n-            case \"ML-KEM-512\" -> {\n-                int count = 0;\n-                while (true) {\n-                    for (KeygenTestCase tc : keygen512TestCases) {\n-                        myState.generateKemKeyPair.invoke(myState.ML_KEM_512,\n-                                tc.d, tc.z);\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-768\" -> {\n-                int count = 0;\n-                while (true) {\n-                    for (KeygenTestCase tc : keygen768TestCases) {\n-                        myState.generateKemKeyPair.invoke(myState.ML_KEM_768,\n-                                tc.d, tc.z);\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-1024\" -> {\n-                int count = 0;\n-                while (true) {\n-                    for (KeygenTestCase tc : keygen1024TestCases) {\n-                        myState.generateKemKeyPair.invoke(myState.ML_KEM_1024,\n-                                tc.d, tc.z);\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Benchmark\n-    public void encapsulate(MyState myState) throws Throwable {\n-        int i = 0;\n-        switch (algorithm) {\n-            case \"ML-KEM-512\" -> {\n-                int count = 0;\n-                while (true) {\n-                    i = 0;\n-                    for (EncapsulateTestCase tc : encap512TestCases) {\n-                        myState.encapsulate.invoke(myState.ML_KEM_512,\n-                                myState.encapKey512[i], tc.m);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-768\" -> {\n-                int count =  0;\n-                while (true) {\n-                    i = 0;\n-                    for (EncapsulateTestCase tc : encap768TestCases) {\n-                        myState.encapsulate.invoke(myState.ML_KEM_768,\n-                                myState.encapKey768[i], tc.m);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-1024\" -> {\n-                int count = 0;\n-                while (true) {\n-                    i = 0;\n-                    for (EncapsulateTestCase tc : encap1024TestCases) {\n-                        myState.encapsulate.invoke(myState.ML_KEM_1024,\n-                                myState.encapKey1024[i], tc.m);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Benchmark\n-    public void decapsulate(MyState myState) throws Throwable {\n-        int i = 0;\n-        switch (algorithm) {\n-            case \"ML-KEM-512\" -> {\n-                int count = 0;\n-                while (true) {\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap512TestCases) {\n-                        myState.decapsulate.invoke(myState.ML_KEM_512,\n-                                myState.decapKey512[i],\n-                                myState.decapCiphertext512[i]);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-768\" -> {\n-                int count = 0;\n-                while (true) {\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap768TestCases) {\n-                        myState.decapsulate.invoke(myState.ML_KEM_768,\n-                                myState.decapKey768[i],\n-                                myState.decapCiphertext768[i]);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            case \"ML-KEM-1024\" -> {\n-                int count = 0;\n-                while (true) {\n-                    i = 0;\n-                    for (DecapsulateTestCase tc : decap1024TestCases) {\n-                        myState.decapsulate.invoke(myState.ML_KEM_1024,\n-                                myState.decapKey1024[i],\n-                                myState.decapCiphertext1024[i]);\n-                        i++;\n-                        if (count++ >= TestsPerOp) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    static byte[] xeh(String in) {\n-        return HexFormat.of().parseHex(in);\n-    }\n-\n-    record KeygenTestCase(\n-            byte[] d,\n-            byte[] z) {\n-    }\n-\n-    record EncapsulateTestCase(\n-            byte[] ek,\n-            byte[] m) {\n-    }\n-\n-    record DecapsulateTestCase(\n-            byte[] dk,\n-            byte[] c) {\n-    }\n-\n-    static KeygenTestCase[] keygen512TestCases = new KeygenTestCase[] {\n-\n-            new KeygenTestCase(\n-                    xeh(\"796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"),\n-                    xeh(\"91618fe99a8f9420497b246f735b27a019078a9d3ca6b2a001aec0b9e07e680b\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"),\n-                    xeh(\"2026edec2070fd7a2aa93c55d26aa0cda5c16117ccac98cb86d9c99f5bac2cd2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"),\n-                    xeh(\"3ead7c9457670c2bbf1a3d0f38d6c0838098def05d5589bebee67ff5c33b4374\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"),\n-                    xeh(\"f910824d75a213bc1642bcfa5a6d304e4723ce0a2ca16000e66fccf48ba0a925\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"),\n-                    xeh(\"8908c5912b74c4f5d1b3043a95ea3fc16bcb8d85414a2f4fc134f18bbcde262f\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"),\n-                    xeh(\"138e93b1f959dbb22c0fad45bcc828b4d4f07ea2fc109eff6adf423d960558eb\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"),\n-                    xeh(\"71668363f77b645c3278b07c0e97e7a3336421e624485f2ec35f34a01c9189d2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"),\n-                    xeh(\"bdc7be9d2b2d3d8e7e616fe2f77f8bf11d4759b8247431b0e9220a7f8e5235bc\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"),\n-                    xeh(\"1878346fc47148ba7523463ff794a14438c5b5e8500bb6b92b364f90ec8c3d36\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"),\n-                    xeh(\"6078a65f40993ee3bfce7804086962e5726025b779ca7e62912f244b4162a093\")\n-            )\n-    };\n-\n-\n-    static KeygenTestCase[] keygen768TestCases = new KeygenTestCase[] {\n-            new KeygenTestCase(\n-                    xeh(\"796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"),\n-                    xeh(\"91618fe99a8f9420497b246f735b27a019078a9d3ca6b2a001aec0b9e07e680b\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"),\n-                    xeh(\"2026edec2070fd7a2aa93c55d26aa0cda5c16117ccac98cb86d9c99f5bac2cd2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"),\n-                    xeh(\"3ead7c9457670c2bbf1a3d0f38d6c0838098def05d5589bebee67ff5c33b4374\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"),\n-                    xeh(\"f910824d75a213bc1642bcfa5a6d304e4723ce0a2ca16000e66fccf48ba0a925\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"),\n-                    xeh(\"8908c5912b74c4f5d1b3043a95ea3fc16bcb8d85414a2f4fc134f18bbcde262f\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"),\n-                    xeh(\"138e93b1f959dbb22c0fad45bcc828b4d4f07ea2fc109eff6adf423d960558eb\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"),\n-                    xeh(\"71668363f77b645c3278b07c0e97e7a3336421e624485f2ec35f34a01c9189d2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"),\n-                    xeh(\"bdc7be9d2b2d3d8e7e616fe2f77f8bf11d4759b8247431b0e9220a7f8e5235bc\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"),\n-                    xeh(\"1878346fc47148ba7523463ff794a14438c5b5e8500bb6b92b364f90ec8c3d36\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"),\n-                    xeh(\"6078a65f40993ee3bfce7804086962e5726025b779ca7e62912f244b4162a093\")\n-            )\n-    };\n-\n-    static KeygenTestCase[] keygen1024TestCases = new KeygenTestCase[] {\n-            new KeygenTestCase(\n-                    xeh(\"796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"),\n-                    xeh(\"91618fe99a8f9420497b246f735b27a019078a9d3ca6b2a001aec0b9e07e680b\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"),\n-                    xeh(\"2026edec2070fd7a2aa93c55d26aa0cda5c16117ccac98cb86d9c99f5bac2cd2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"),\n-                    xeh(\"3ead7c9457670c2bbf1a3d0f38d6c0838098def05d5589bebee67ff5c33b4374\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"),\n-                    xeh(\"f910824d75a213bc1642bcfa5a6d304e4723ce0a2ca16000e66fccf48ba0a925\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"),\n-                    xeh(\"8908c5912b74c4f5d1b3043a95ea3fc16bcb8d85414a2f4fc134f18bbcde262f\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"),\n-                    xeh(\"138e93b1f959dbb22c0fad45bcc828b4d4f07ea2fc109eff6adf423d960558eb\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"),\n-                    xeh(\"71668363f77b645c3278b07c0e97e7a3336421e624485f2ec35f34a01c9189d2\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"),\n-                    xeh(\"bdc7be9d2b2d3d8e7e616fe2f77f8bf11d4759b8247431b0e9220a7f8e5235bc\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"),\n-                    xeh(\"1878346fc47148ba7523463ff794a14438c5b5e8500bb6b92b364f90ec8c3d36\")\n-            ),\n-            new KeygenTestCase(\n-                    xeh(\"741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"),\n-                    xeh(\"6078a65f40993ee3bfce7804086962e5726025b779ca7e62912f244b4162a093\")\n-            )\n-    };\n-\n-    static EncapsulateTestCase[] encap512TestCases = new EncapsulateTestCase[] {\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-c6e8499d78b750e516b8a67709468d3fa3b4d74c0a5f5a4b5cb94d8ca92188437040f9312aa41edcf274f0aace043862471591e84c0e05d61031d69f4fa11f4e8a0977673ab30b2bec0bccefe434b55632c6057842d977027ba616e6a7fec7340bb20c7331b4e2f1044e9692ab0136a0b285fde033ffb25543c5c9ffd83595e380f8e831701b1e16e040600c1c7924b6bc42331d987b7d63c007d76d198c0c32aa3e3663ca7606454a214821b15b8ebb018026aa1a618539c00d0a84c871c1baf016bc426b3d9be7598fd8148d63865bd6b455fb8a47562e95666e18405367d4cd581162fb878d8c0c3d627597a4811eee0963d4926861ea202d46a6a6e94e89b3cfdbf436fa2254f060ce6b80b4bdbb98da80417fb53eba8286b58644d8d84654fcae20906863fcaaf89abd992b176b05b2924bbe566728878b5e816b64a532ce2cd41f5a937ddadc15baf23023a19932b337f508c8fae504a3aa24261a9bd20701a2d3ceb3c72ebcd5807d358c2ed45d0b84092d6c93b74caa20ea4b5db66369d26fe64652270949a930bbd0103ea7d117e6160d9dfccded58476b94ae90036b68a40b9bfa61b15c889467a0a01342f843be8227ae9cfb1593c240a8735d8105a36c2b68e5ab97671b63a1cb1eb07495fd3bcb380aae66d20f3bb096b5db9944d83196b3bb3e321dc76c3b7d6828f366585f75a3c6d370f5580f22b385319483c9c19e6e81cc22690b18782c2d47be5c81cbb1c055cad84db9b06b15355697ea23a2374f027a63197b46f28a85d089a120848e94e9838cc72d1aeacf7d64ba69a93635c6a10ca5745645416e071a48056c78a50a0d4a60412966ab4961819918211a661cb839b01101798583934c9ce0aa447170b870306cfa02a16b9316f4f22d9b958a38b24960f0203cf2418495446c558a6ed8706d8c949e7b14cc168c965293d128ca16412ff7b221cad771d441ae3fc822d86645f5e266aaeb1df56a6185747e3312587d1b5f51e13e23586f9f3b1cf393bfb24173d7e27584b061f4258ff3c29d27167f58999b6b87a820b56fc7846cd3a0953aab07bcd256cd997b4e0172cfbdc0c2fef1b5fc616b03d1c3efaaeb7d48c64a0c839085160b4a5732\"\"\"),\n-                    xeh(\"6FF02E1DC7FD911BEEE0C692C8BD100C3E5C48964D31DF92994218E80664A6CA\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-1ad51d02065cbbe01bd1025aaaf94bbb2bac27e678fcd7578ef9bf3026700d711aca31cd4a9641a25286b26c034228cd906434c3e2a56f01b54a98878c6842b9bc9c8d95640bd496c0956446a0cd88d344d552a838e29f48850bec6b4667749fc4266ef8d5c47f8b21e7e108f8a58d44394c8711470ce8cfc92b2e49ea5b8b15772e4389564ac8d568b700d11eb5f83d018514d5d3acbd7c63f667ad9340b2dcfb972a333df99ab2dff50f570a4d0001a413a98f4075acc5241b5e6a6132551b9c4c1c22551b5a008df7d5a218783c2810b79a52552afa922de76dc4b89d87761cfabc81d218cc3259457316333c21bc9b650f6383c350e6681c694496565fa7203d05b0caf5a22a4ccb1fe7f00f89297f3dd02915eaa2a881cd41599635abb85890649f1a4710142c4aa4b5e3d71188562ef5205925652ae7606e30dac7099495ec939fc5b0778477be94185c649c858e146cc6750d3a1a98424b2645786681a1b1095979f2313228f96d9daba787a257f4e27a4ed3377dfbc71ccb9ddb227151203798b58f44a280c733a8aa8a631fa303b26c33bae7b088121d917268aba41cc797b7a3336f12101d5ee8900872b3a1710c885811a2d8c4f0a188d4352f259b62da152bf2a022dbb9c913c1c254a44287546c01053bfea0bbe3d05a24f1b70d969feac7c7325ba69ea981c5e179ad564e7ceb4ff38b824f9754af15664ff7a807bc34e62222217b96f364907916be6ef0cc99b014f3527572e0a6be517d2225aa6eb41e4c2a80aef4a212092bdc186598a69b4d0037cfeabfb13b9a9bc0019c5a83ee659100bd76a1da4b30b686ace6291877ab9d834a641abed635b8f3c536bd6394684ba283da1fe7797580924fa6a65e9de87bf833bd2e67c4a9e037aae0b3eb1701bc69add69127a98a5157a6b3f8393cd104c31a24ad3e381997f28c482c5dd6ec24d7747b559a29d56c0f655838fca25c4ad49e6cab35da559b354b55357748edfbca6122601a945d8611863917c48ba20d53b71909746723b4355a620b880cbb63f260ccb10db6d3809a96740ed153dfd07ba60159a3194553fa93ca28513a65b047a7350a0c6f43f7a09f3e2771f461bbba1e3508c8f8931c16ee\"\"\"),\n-                    xeh(\"4660985A5838041F2E50381CB4E7AC908BAC83CC1E074220C6705E3F5FBFC2EF\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-335b7558ac204e11a305d8b1526835e65a110d813499acc36a5409a15a8de46633bf587a706a7d388c5099c73adab17035a347b041cb82938da6838a11513c5756b3992ca2a40c91a450505be4cb4fd9625d209110888484033d09f8b60eeaca65330beee240f9861e768ac7218a6e41a1205f55b411e275253706c57b97ea650c6e69876f79bffed8759ce30df61465b4408a18bb003a7aa446642c90ea072f955f46044f4ed7b9a9b82749e56ad470b0d21b67b89cc7ac784f9dd016a9ca5d2b025668421c25a100dbc0328084c2e3367c022b60fc6206e40aab3a863ba8eb1f8682265af69d15aa9d173204533a1a7ad94f693310663212e4aa0e63f812f1608e1f9903f0685c9b9a797ea5939869b5421b87dfa1ce818265d5051038a9331168ce01971efc06cf02a59c9e1a03373a600f216f779aa73171be66f95d81808daf63a26cc3709ab58f22659ca9587c01029d915c7554946b217044e65a6c98258f6a0a2608a9cdb4c35a0e06c93b19988c221c96b79729cc227ad5c3d4f558062ca3179b8a0b6c0d6de0aaa466c498065ce690278b8980c7c567d308b181b06667f297ee9caa28ac2f5ab454b8045eea583d20993bf69359be500247b3a2ff0b95e243af49b6a08eb19c00f31f3611837cc64b85d8bc35da9466fc12967b158dba95782ab771c134f9945df0b02644fbc949cc633419c48643764e0679a690cdf0239b3aa49a58e171241a106c151b75197f7432cca3d6c133cca0a4902ed6c299a479224ec7baf4243152877adf3255ea114fa01a65a53ca47e3a6dff072d991730414754c831b3763a6673e9b8f4f7ca4d3891a33c542380cfbfe16a650ab749d79e08570629116ef7d50338f26834e298dec8abbcf588f37b428f211434666a1c6041a3a09918293fbff54d35c75c7dba2720a0a91592af264b446105bc5b41344067bb3e5943d62aaca4374f92933e3d4353f1898868d097e504cbb934cf727a9861169582bc4414e46c50c41693909cec50beeda69aadd6073fc1ca3e1a6a822751a404730c3c90a4ba6a9f4343988280eca4c4600b413cfacb8ce2823f2a2b96f56d9d1effc2d3292c0720e7bfe6aabcd8284abd8c3fe8aaee1bfca3\"\"\"),\n-                    xeh(\"0D643FF311D83CEDCB3A95BA0F76216A49BCA389A225396F708EC9A51BF18517\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-ae76c67fc7215e493c8645af1c58bec08b66f66a92346b92f873cbd646aa5dc2b9b6e4c2848a4324a8318e9983932055c4f58f42346df1da07977101434a9378d1a1559819756646eef3094b5ba55e33b596b71c04d249be4b8318a4becb008ed71000ae795ed1ac873e244beb7c4071047e83a8b3c6c2be2ab025726063175c4bab391597923d030b5a9238b131383d15dc2a4bb812a8539f9b0b0876a23ae049777e6229c1068a37ab13a2406c6f7ba4591520d8816ca3894bf3c601fdf493e70c5f4b19bead520d25cb6e8439a548f35cafe81497b297341005fffa18b99754cf199ec90504f9f16f8e415cba718318437aeac50ba8413e540b963cca2202a35e356701e177ab0dbacfe6a0c02b506fdd6436982737f903b8a8204cbb07c380340c5f1a84685392a2b62620004caea2c416e61f7c7b0e6e202d92021628cb4c10d57d5b60ba4d771712d552d1f9c6f352779f8c32fed54a8eec59f4b3177c7c3e81e3ab7dc83a396bbe38ac0fa3ccb174442ce638c6a0fc1fc9c426b5eab83d0397b559a97256b2b0817ee115b1e026c445629bf7a8803ff71aad99385a1abfdb22a3be0029503cb44b7a35847bc675f17437d9246cd104bd8608da3005e14a632d69006ed4434c80594b2909fe284203571eac04a00a120c24d050f40952fd53ac0cb39bca50c28ff450a6e208fb26bcacc1ccfa89bd7e05616a395aafd2bfa59cb541975cbe429919b32cae4b1f4a4b4b97858390c164fde76bcdb32b54b3325392c385d647b265578a1c56dfe5a252144ff1c02dc2054bb53525ce4b3bc2ec190e3ba06fbba12f06707f060bb1659607971f3726b9f59191e6e7b252602f51eb281f454f1d80a60ea29eab42752df9a3ce376467f694fcd288c9fc7851c04821b53e693208867604def746f787ada2097740ec8462ac89baf84c0d50bedb539ccab33894408c5b4b91def7955923a283677867a356b78c5a8eec308bfc982c8bbdc9e40d7695b42612ac27f6c118b5379518b49e338738e830fb6a66488b7115d24895963934688d91fa9608d41582e79e5d417ab07c81d39415fdbb870a3f503f1a197bbda81d7c3204a316392fb75016f88565a73a51537728ac7011\"\"\"),\n-                    xeh(\"AA28DCC71FA83D9997DD733D8B0D0394D84D33A3D3E1B74CB74DC6049628F861\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-59851028c33af8acbc9ff37ab19a9fbe45a0f08b9cdc2268d6e727665429f16448ed840d0a87c34c3422ed857c69f3168820b0ae998702ac6f55150ae3031a54fb80912ba94fb4bb31604492f406f654855b447b39d26bc81b0d1644c1ce2a7f347c239cecb0cf89ab14917192c12e7a694581021e96fb6868282df0a4850bf3acfde5424781c571e8857cec1f3735a464ec74d859b169142e2e7413d2a02c5e93570e3b9bd18983809129724743a1979794a2500e04a409506ecf0a975f58bb0d08b36c1733927c932e7c73afc47f81b5a87f25878d327d0c375c38d2940aaa543f46b1198345fce7b7bdecad6ad22e12155bc470448f98bac8ebb96bb34b552ab3bfe5255c6783a76425b386613a112ec1dbadbf105ae0ec3cad61c7032bbe0bcca9d3eabf03ac6f0d4c5e500348f6581876e80c531197e62071a9454947b450614761ec95bb7072ab53e81d89e47eb875263ae74ca6a28b2a2a1fd44947756c1f3eb38519c9b2d6d63197e6459bd1427f992680b1a6f1480cdb998006a25cf434346d04942732c5617245033b430b4ca726b94faee24ca54919f0842233e1c6268b4bca31be4ca7be9b52851e2ac0dee573f7959eb896b0bb18064cbb9b71585a319c74b7716de398a8111214ae3130bac5b196e6734d3cca4116bbf67ca42492be22f56b538a8532c6acf4404069a329735246e5eccc2730c2f5690c53510bb2685909015874a8125178c7fc00709b2a6720391e38a0193aa96715f13ed628068ff4bba6e74c7be095a897ba3dc50f88b2b08a353cb4c4bf382a5cd72227cb671ed74227ce245268c38874f53299604c41f15978c522e865333dd0c49cea97289813a828ca76b93dfd3987da9726f0d3492cf13ea72ab8d4e82e73a3987b336f0cd2157de0b9b4209869412b9074736867b10fa82b34e5424c5998295b6a54793e9ab119e9c68049ea2dbef55e27327080c6ae71d69374b8314ce6110369b76fa363dfc201729a700528944f2bc23c464eacf51519f0aed8160d5ceb66d10c865604b3b4ab05f1c2990bf2b5ed84898b6a891ba360af171b051b907d1245770038e379cb727784b219a3c5ce49fe6273600219bcc609c8ffcdf4acbadcb9\"\"\"),\n-                    xeh(\"A4BAA4C603DA1368C1F2AC552A331F77BF1D598C6BCB540D43CA1E6D4B8BDE77\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-861927e1d996dacb9c04c630b694150f23aa51f26bed8c744c36a7916864b5160e94cc515ae0a03ffb445245c56a434f9351ab64f6bcbb973718ebb612657d64f844df3b85bd484c473a685a0a4a94e9995d865aa5bcafb7dcbc7e9877d63890a86252c691044df94ef7a19c68056ed6315400f8bd38f48abcd09e82f0376816c0aae53a9cc61b466466b63938dbb0b1dd963adae40802216701d094c716211718943b543cbe0888b1dc463c20804c4c402105130dd7a87a48c3c3328f76a8aef2b0c7d22688e7636b88d62897809eadf1ccf2dcb5a0011998099506925dd3b74869f931394bcae43466a49a40b31075f074bda69c0ee2f7bafbf81712969b43f0beacc246b3e71c9df2c47db405e235ae97e1a99c0365076b29e593b39c485521716967751025bba279f3aab85c6bae3800f255396d136459545f192b650d3b142c383669d2547cc2732015bc4645554638284642b918b5bd65a06fb49c5fd267a90b77ac35d12da3512f44d2556e027e6582529cea194df88584190480d9b0b5335fdfa8685894514cf95386cc1cb63131dcd1022f5b568cc621a729423c0567a51313f647918368012a83816a2caf88e062a9a6064fb52d8b31abc270a01d974459b4134be74c41b6a22e72ba1c993924bc43be6509235298431c72943bbceed41a84f9b84ce21abcea516f32280a0586069acee7627b54055515604a9ba112e620783aa76264ab8136759af9dcc75718a9bac22092a645b1b5cf32a92e377ba03a6117ee842172505793f973f84cbf0fa22d3ce116ef4c1012bc69db94c7b2b461d978c27c93044f22972588af42e28dc3748299e7a098b5566d67110a036ca9c6740dac84205109f05104f80585970a7906d7bf93067472a34442780f0fd25729745c7f85198a753836c3381f0592f818916b48278e14b61f1616c32ccb987940550316462257f1daba0574223ed6767b9c696b1c01ed75484c1738cf60afaaf9b3144899c4dc00fdab36fbd792dbd4885ab3af6ed63f8394b66d0a910041b1d606923858432f81c37f57c146db8dba6775ba1899d5904f3a69abee80050d6232d858d95a7bd86ee6af48bf9c372170c7468fc024cfdd552fb21ae23b08\"\"\"),\n-                    xeh(\"C08584D2F5C950E371668A4FC8F527E20AF1532CC28EE6B5620729155B06389F\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-ae13099bb82ebe29ad44859860634d62f78fd6b26295d040f8a5c7ff7aa393d127e214aac9107ccc06d029da6a6b998736710c5fc3a6c9ecbdf00069a9eb2942b45b1626b7953886248caa59789f9e988fa26073bff9b703232859463a9335374506ac57a8c2936701fcfc0235d071bf9807e907734e6267d130c9d4b2406e999b6cd15adf7783db2309598c058a93ac043319194ba89857a59eb35fe4a3cd6fa1c9d7d46ba2f6c62ba85ca46cc8d450bfb0170f5ad6a2a0388ebe73a8b58627f6cc5e7477635ce32472a87b4b881ca9fc749ecba012187a5bdc6e9e12b668f32786cbb5fa4055f86590e00bc4340c04b8b0053b189a74d6bb22db2f75f6b32918c0c3ac7da62044db4a9c1c2b0b1ee81b5317b1fd734c33fa3733d7b37bfa36c16578cdb63cc6f73d661a35e6460b74396ec6a07111091071a757d962384940a1a2338a42fa68e81587fca304d8a86282230470c8988cd707437163cd46cb489b010d235fcb976e50b51e0a22c5662800e74903b403c025bc6df9d821752107b2e51874147645687fedb108c1894e0ac3801bc1398c4a187bea7d9949bc5cfb8368b296b2fbcf2b59c71321b5aa2055e5823f86113a1519c956d9c1793a5d52a906a5031e905a862fec5abfa0965fc49a2db189eb6bc69cb8882b703e0ab35e088340fc35812bc0a184956fdb448170a6b32b49ac0e2a65a1041d38d4512dea3fa111c7e428cdf52144ae0708c5c44382a0733de356ab556e0aa141d58cb1321058be25a543d7060252c9e87997c35295596c02bc7b926f5ba05675a5dfea5a3eb62b2521854f21498c428a23048fa38484935399bf07c64fb63f7ee793a63aceb6842bf05077d2b3647714332d259576182f0d9c508cf2321f0090a6c1cb0a5c106647101277a7b1248e74189df6b90c26a612b26555d433bac49a3ebd702e6d9649038233d6da01f77534a8d2038f615a502cca8526c314c5856a033ec97155ad79a2e2a32cc1e734cedbc6c0b94219d13bf985588400cc682294bf21183830b2bb51b87fd9073b9cb6237884df0cbb12b929f81448e5578928b07193ea4141d19b4eed07a956c34b6de59127c5e823bb8f6719ddeaf282650cfda0e26e57\"\"\"),\n-                    xeh(\"1D51A0CC52E85972001B77047D97DF5F47AE11FFC6C31B4AF42FB0791A3DB40F\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-d0f903b9113e3b18442e9b125dd762cc4bc2fde8007fca65b4817ef985667bd62bd8806563846ddf61b68a837d35859344e96ac450cc24303d9f116d502135369305a8cc8549641487f88e0f24a31c87cea974547abb569f9c312dac3fab517c85a5521d41b7eac40c62b7cb8a0776d89828e937177785a23ba0599381004c253fc90aa8332172f7366e6c756e6f266f2c5c9bc70a5cf18416c00c83dbe76a8a9c52ec5929217c0d2be88c8e3374c2111c2ac46a2a454ceab38f8d368f2281749d4109e90702bf368d6ba6ce212146d7a21a9ce6767fdba3bf1708fc359fe4e974b676bb9ee04db18b93f60759a071484c134e0ae29b135c5f2546562f6a471a826aaa3568bcfc721d707ccaf9351462098fcb21b441c81f876a7782363ef84eb9c59b2eac7f637ac205f0c1ddab4bc0868f42c4c2ffd0912a0578e9b81dfdb400a6a747c9bc8c97ba3ff8074f454367a5768d48653cad01c30212997553941780b44f3b26b9b79e6bc43cd56683dc9770a1d81ec0601e66326148f8645f820737c2479533a7cc3142341a2fba851cd304423d835bba5c73c3fc617f393e673591040876e670b94585902818883608a773e736f52c496691481b908106609366513ae14b618b8611539b56b3f466f13a5f59e5179fd29ac4ec7a92b5beb004b628e7701b11681cc61fd088a031d80d8e43b36042857155b0c5f207260bbbd30146d83a9c3c17a1bd804b56c96b01e71de75152f4b4990a001a1d8c736e39097771b819e58a2bf4498f1ca346cc851efb29c1551060998a7242c7fb5b04b6c8cf2f703056f18a9df28504752be88860507b1aa517914b278b61704f2e33cb02307a7a898e58a3a87221898cb57243000249709f5e53037728bacc7027dda1b7fbeb7739375811427b3f8c3dbcc0775442323289bd89ea0b668cb458da346dd25a45d4c9d6eb6ad98645a65794a795277480382ad7a99e85ae9e279ff5d38ac9a461d4a8aa2170136e69bb70c2c7734060421388330606763158f0c04788d79ded7b52b79abdbf891c2290b561ab4a6aa02e591637cdac7353798d9e256fd0286389f7d3b079e3e9f89ec0a68010202ca26dd2ea953f551554098ebaea56f782c3\"\"\"),\n-                    xeh(\"BC2D661E6283B835BAEE160D1448957AC2366DCD087176E252F81F1D11E28781\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-ed8034619a429573756962129b459916f158f0ecb0cae396f60c4c84670ce3fbbe119055f1a4382cf2a619c31cee5842ee8c9c6979193ba82ce9f94337306186b20a276c6d06c04f41a414c3100b31e2a2a9984067fac4a7b3c70747c55b87b2512219d62c8b51a6b628766d63d1096f63bec8806311415919336bf9d1b038022d00d1bb84387888dc10f0290b752627c2d78ca5c8475150bd925240ed94af40b43762a99a3f5b0f41d702db7cb485405d5a247ff48635ba7719aeb8a876f0986f233212c40a3645c3e4ea3b5fd02bb520b9d8aa22c4595849b8a2769b92edabb4ba1528dd067aa86b3bdb6a39985983c89c9c916b41b34018bda438e7815bdd4316f6202c0e3c73d53124ee110ee596a9e3198f24b814dfd77f0a2a7aaab3a918b64c47fa44ff018332557cd13325a8081e0002096e68a293258928896532ac5b0ef4bc28bb43f68505f8a61cde0b5ec9ca8d62c261b5290e16b22a4a978d5b141240043c9b457a89a764d9565067cba987a23d5d6b3016291fddac50c9e5581d988088a368d1c9c633bc594d39c56fc5b4a996b7c110208de1394559915138b7cd8941daccc7382b60b47770272a56f846b15c71704b8b7e08595d51658a10b348617c8b552588a20a07c6e0670416636ba0982726671d796803320e0346bea80578f7808419f14b8be67f8bbb627fe4c5c28074e1458ba909581f317e70a66320ebc5ffdab20202143f374742b77d88c80fa8b9593d74a04e2c7113101400c4afb7893f634565aeac9eb8c144a3a172a1263fbee499d7895e298b195d4caf46514927d39f430aaf13c4bc43735670e5b0350a42506621dfd737177ba3736026d314675947a1b7315844da146af84c4cfa8227bc3211895773082fa22a8c9e7c20d1257ee9577c3f36a6d3097212dc1b149421b9bab30124cb3298a6b1505bf586070f52aab80a71e17c223184b32e9a6aa4627b3b99bf089973ab53be7c461ad57317edc3b79872bc50a391a43bb18ee9bf0ca100f16409caf4abbe0239b98b16a598ce86e7c07b27646de1671e915763ec8dc3c09a20181e0525c571a18d74c74c0e798d11d22db509a0f0519c7440e6787efacb39fb35c8cab4a38302c0\"\"\"),\n-                    xeh(\"6745F4F0730AE3F14A428A95C9CDFE82717EAA94F65B00A01566A4DCC9ED1E5E\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-e782aff3f25dfd582912a662095a71ab2b81a7b88a0a0b531d0c735e84279a39713e9b78a39679cf2aa956a0bac8a8b8d6330eafe18a20890492b42ff0eaa210a97f931c8c66a4bde05ba317aa5a7c1bc4e7ea9c8a2aafeaea6216d03dacb9b1e17c30c49a58a5d21a05f37912dc336b8739abf4cb74455078655b7d6644f3d5b91f3a97b9317676156dba77747b0cb2ca21c87e7cb0e3238d67811f4e229ccce2303d358164e85a5ba766f91212a8540e800a6e5b829bd097925a01ad99f8af2b8c7832640c0e64cacf5cb5449829ef992bed3a85b3d86fe8689de552acd1b47f58b883e718c61b810a02563484e63a951927210cb5b1e740c1bc2132d026bbb8a9b2099922ea44c2445bb078cbd0accac1c22c0065b99601c07cca67ced147645508a50ba8e7a0012394cec77880a4916c653803266c0635741fe0c98812f37265842e6826ae18d4b27a334246520607dba4452ab7284300f96a01ce809cb4011df18940c6460c7a33aa34e997b89846a287af180ba68f170653e065c1475f48b9763d6bc2643269631729a11aa33aa32a14525641e4a68a61967326698be67d0fd2612daa94dfa9a5bbd3b87bf57ef75639e3c859ba8c0a90f5ac131c94a0644eae3c32811335401ca4c0994df4711c30ca05ca812667d47a8f96beb0a270f75ace7cea1047d4abc944cf71042aa092a041fb60d60976b0ec120600c79c51ce163a6e11e1b972e703ceb5c792482b01b7c617d31922f760e7465fa427ca118431727bce77c12c59b2a7cda287bfbba68c57aef92a4775c6602c87330d693bd10a5d21724ab58bcf03220a14c4463c5226b86a1fe15477e662ca03374287da5b7aa118de1255f574220d0bcc4f68b7d36286761c9ad5d9aebe422b26e95f1f5b67bc012950572374fb8e19575b2a7b911bdc8130d737d4e34ae721c76d131baa9a2f47e208c668215fc2c56f80b16a75114363c3a04918c0072d61f19d22e55d9d1cbfc9210246e12a530ab7c8a7633ca37b20789125573f866b94d872af914007c3ccbe898ba697f63d15b57b2aaa10145c5bd71966d54bb8728b531c87892711e6c0f2f1b554cadd3cfba90def490f706c74c451248631333f0b3f2813fa\"\"\"),\n-                    xeh(\"C3ED79224CB07A8D37DC9C789BC7AC8E278968E429087E5B2C0E878934DAA53F\")\n-            )\n-    };\n-\n-    static EncapsulateTestCase[] encap768TestCases = new EncapsulateTestCase[] {\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-3189cdb94a4e3048a4e18621c07578243bc5c017af25da2ffce6abc3194c510076b1d0c5b5529a80b3abaa9658de03ad1e151751f54998fb77ac52a2739b09c4f0ca0b8827c04bc280ca4e7d214231547370e98b92006270194ec3c79e96bb16550692f988627b496ea4f4cf7e9511c014c2ef89ba9620896785784fec1da3458a6f5a11d3840ba4f8714610200d3a276679a7e395488d770cd5122d17b37652a9871357594a87662aeb3befecb0e82513ab90b414d60c66fc61e4db22a2a3668c05338ec86018f154c929af387183079a59e201cb512536ea4908dbd559dbc63aae57cbc40437b0d5b54e784cf7488dffd5ae861b86e7b8a57563abf5f76c81b595a144a11c464d17e6b871011f8f82a8851321f2455644d0156ac96fcc944a0ad89d52f896a2e84f5d4a146e61bd132248572c27d823142629337e116f9635a32f4647bbf2b281d6c1058695b49b51e7f602466a107fab60edecb8cafc47bfa6c65643c662026f702ac7b7118bdc6448eb65bfdf8b9eff908f354410c77bb689d9b557439e9704c4d4107cd6559d1cb5a9a10b83f9f24d3e7418d3781eeb8b07cc8c5e38189afaf64db11b20ea072674fb42c3487d74c392f278c274da80f7518f983152101b1ec941baea92c132181a9442106be237198401ce1b652ed41e8f033c3a364519b2a1edc41ebbb36529440ed398207e600e3bd2622d4534d7f06013047b41a895444947ea252f13d40d0b82b82c0405bca2454a8823a0789468f845441089e18cb89f940519756628a8c61db794c9e86c3c4820b61413b1b88af8b20a687524ccd51fb9eb76eac8b958501342c19eb3b6210133c3848a4cc1b2cfa730cd99dc9e5635b3560b0731e202453b31474bcbabb626204ba05b251bb5c63f85a850efac7d3ffc0c8e161d014a441618be32c94d7ed2818e41acbd060cb9c5b43226c05553b5bd31b310fca52389361b8b2389c952e6a275d17408bedc24a01897ff484012e74545eb099fb0620fe7523d7b49288773224a72a01b198a299036889a5d690b994abda1066072f3566a33c944550880681f716c87a9ac546ff218ffbc8ac48a8efe2b11c8c2ae3bc0a76de2173cfc5af328929d540561a588d4337d1bf8748f71140224c2e4aa458aa2958b236a6c0c77492a307f754869d9c8385213240b7a1cf70b3f7aceccbaa50a134064d64750ab5ab35982ed596913d84c74a8c63647a2f5531247373ebe23695ba767d0eca290b94647a4c94e3949b7337fb7e77ff7668f695b9beb8ab87723a58ca62efa3b75a6584768c229f18a3c26ca1a4da72972c02a9205aa08991873b94fa1f995ea6c67b8a015bc3b7a77943435cbada7323309dc74b7a92c92127b35c32879567d4e389fd5b5a6c23b932108ce22505d815c50e8e80d9dfc6c3640b111cb9c5fdaa28d199a00e405f061b6cd601bc602a6a491cf900937fe566fe3bab921c09091152592f6bb7bd951eb960708167d08fc60c40563173c45a76188871c696ce5585dbc66c65906d1c30f1be660ee2560dd6730fa4ac1b0cacb9fc05a17fbbea5d47e1eba4999f964ad5b88f874655b59cfacd4c36b818d96822f56058abd8ca410456c7af21d99462df2a596e235708b49c595eb94eac7573ff3a49697ce2a18d1c318e2340daaeb34\"\"\"),\n-                    xeh(\"2CE74AD291133518FE60C7DF5D251B9D82ADD48462FF505C6E547E949E6B6BF7\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-600c29817b4e10241e9fe717ba2cbab8ec2b959a255bb414a2571cdaeaba0db244af9405aa870deef7491b1c5fead4652599c1dacaa309535a073144e5273e932a1877bc2bd3b9125ba658feacc6de45092229bc84a94ba3f5c8bdb37849b5372c205f7bd2588cbb47b87779b004309a0b713cf428bd3083b0d6622b1826446925922b293db9747027b587a7677079cc1871a8a5016c6c04bc5576ccab31a2a0b4a7b1b852319c41f4b7855c2451c27454038515b9876d6fa11820c2c024408735837264148ff7d6062570732d3a4da3a27752f60dc2c93ff7d91607c70a13442fe4929184fb9cc4e33c1684660e1a1f6b575ff35b449c14527352c134a11a155cafeb214d12854753f54bb1a342ebb918acaa17d882074467b475976ea080bd23b256c477a0acf56fc3d9ba9b34297e71cdc37733a3d66f11942017bb8c16229a23c196de8b8411336742328ad6dc5d4ba77108342d6847abde81a4e1a4b9cb8023a1d442e245186d155e9fa0653fc4a6668691e146a6c729507c2589ac12702b08142b9745b2774cc0c44fba928f42381ca7a82d98c3b445bca7e343b0b1334a03485494a3b6661613009201961551ef9c38a2f7cfd46ba9f906c19c59386af69ce0003fdf03c880d482ecd206a0e96f54c28160064d6caa31e2902c7eb03d5f0979262591cf498d51175212aa482045121fb30f18c2274525205d7c746225c920e62c88570a3fe23731c49cdee65afc965883fbcdaf2306344c32d46b403ce050582345e5c0cfb2d08d0018cc33d1acfea146de85c1e93a3a015a1cd9c7580bb1583afa73c175645581c59a801952643da86001f065bfe6bc1d94d510bf3a0a0268a77babb675f74ae426934be0c64b115e3dfbbd2e98632fdc840f3336f31698453641a18b667579ad112490b452c8b7b9bc7086bb19e483453c4007dcb556b013801729ae23924298bac6f8c59e3ca971bca2474323cf636aa02b008fa08d56a500af032801e3157f29505fd93cf3791a210498405813d612858f503857a0300d672414bcb7b98868d0d156935b1921620bbe262223f43f3d906e6bec23235441da41415f050523b3617bd57184719ec9c92ee2b6bb4bf6427d7045c01176723c1283dbcd82782476fb9237f96b7d13697ab710291683b2953dcb9b8ff0cc0cd99a33b5fc54f6d07edac2462beac952848aa6ecacf71a656ef9b2506585665a0fa4b8c74701868070beca33556f12c0be64caefe6a1e2e271e8470c5867852abab93ed925f3837e9dcc04440607a34c4299a44e2a537bea16b8da07187278ae672509d53aad998b0de88a7605c99c1fc36edbbba10884ada971813e64815adac6641630635a73336c44a3e673ac24ad41e85697859f257a2781b95ad9e27c5ce39470ba246bfc3e0dda46260939647355d0024aa21b2063b19967eb7d7a65118f6cada035053374812b995977eb6cf1238e5520b6ceb67f261293dc9ab205c5c548213730585ddcb3b6a0d0b164f9546d079d3ae00079f6abb170603528991d71389f9113c08434d481808a823feb372437975b5624590c183c131507b2894b6a15ba6ac18b7d1a5ff0d16ed0ec41e214c1d055226b4b0063059a7486088fcf467cb1580a201b23912e571b6523869522bfa4dff5fb95aeb9fff2ae41b2\"\"\"),\n-                    xeh(\"76D04F481E68B2F901ECAB58B6369A2CC31A9DCCED82A1BBD426BE0AEE266AEE\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-425144a91075cd90b31f9696fa1c326a8886765ccd67e119ddfaa185e292131128dd466206d9b4fc62250c6892be09bd6d379e88a86204226aa9449cb1f39efe58021154130e630ef70735ec57cf4f2acb93ec4434c4cd31f1a4fe798aeb50708cf90e5257991a09bdd3963f2fca8292c17f870a4f5af4cf682583ec953f1321b68f90722387136ad46d81e6a44080784b19cb975630116817e81b48051518ede43acdd9b9eab02dd481b200e3093dbb46228cc30d222c81514d1bf319bb239aa8db631f0849654285fa513b81149c19473b43caafd2115939464207076a11b7c6445a9837fcb6fea0930a321a22320658334d958a98c8921e6bea31b53b3d0912cf737c7b08022b0413bf27504eaaec33c7b8bce11427be219b945668baacb1c6e238a0a57b59d48477218db93b28860132647bcd69e8c62712a4abea8316c42e121201fb4a37e0d942464ac4e0c79805d3c61054a7e897809f37295e04ce42464d3096a388ea0b6ff5c04f3c665291012a5c4dd2cbc08d0996054a52d0a26d153aa54eb5a8ce66675bfcb657f0c952f273c5899fba9a01aef2b8934386d6695471dbac20a2b5936847da5b419ee5c34c4b100c36135ee1ca83b0990b7c405570321209a288d284e4bc7e56809591209d07050a39e629b3280574065d0f102788325b0b5b14d1fbcf2ddc0dcb6c9aa959ae2d2b7c011013814a3971d16b4d2c3480aa4c1eb135736c0d70829dea14ac862b46e9267f392ac8f1a2304b7125d7b08ed0839c61b4c02253045c2435990bc1b6d4c27244035a763d63e8ca6291390c417ee0e9beb805915dd737d68530ff27c943a39da835c49d99c0b6c50a770906aac0a5ba988e650caed744066c7a131eb050678837a3fa9b39379ef9e9283e2b0deacabf1b833b358a1a9f1c78bbf20498b9702b259ea5bb1d58844df66519c1bb0323a4b3f4866ae5ca703e6680de0253fc659b9491ae70d307f5aa4c2c888295b9122be209fda3a5a911959f6a9f0c550a3978991737a76ef408c27ccaac7443da67bfa76a79fbbc65ea72b3abb96b2b048ecd4116291852c568b59bfaaa9531524e36644112a76a809f9d0683a7d04a35cc4729017d70f5b1bb76b74b618cc9e181aadc8eb4ba5973a560c0f55dd1681ce91ca3e8e2275c8c71e5a536c7988200b5646afba80fe0c902e86d990a2ae91750409a5ea09645fa5521360051271ac6bc569b6d155fe8a379a418cfd000431cdba989872f73e2771e0b498e9698f0006050b5a06501a4b705434046aff69cc961077454795a6b3184f3ab402a22a819a24ca856c6a9e01d475c76aa7c71bfb692b182bb184b95b0fa363b76a93c7238a41661226c408218576b175e4084ca1d68b3edf79db991107bc106d103b7fa682189ba9f67c21865f2b88de32c6c757bf343b9b15b10e0a792dd3657e3d85be3dc5c3c52650425c8c62a735da286ecaa9aa15054f5245b3b514ef2c309dac712403a9d2999add6e351caacbd80a68995d67fe094a5c542994a88376397a7a15ccf1a9575e20b6a7b5c40c3c9739b02a53ed5abbc502ab66243c304b74fe27fb7ba7348b3a23cd65ad515755744839616a2e87120cb0a1e4f30ce7a6a2fa2488649dacd86c2e5fcd0162d826fb1e6adb4e0d9cd0d417b6e13a9ab1fd3fa\"\"\"),\n-                    xeh(\"FD3C91294D8C974930B4B6135AB647D4A7885C83FCDCB30CBD38332E14094491\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-12229f38375f8f405bdd3bc19ad9180367aba6988e0276031469512a6514a43902c6d66c06a236f247b077323d5bc1342c93ad1c0638f0b31aecc4a0980a543e488a39e726eceb54d1f807ce3aa556700842f1b2033871d2036ecc567f244c988242641c2aac1e31322cd08d2f95c5d559ba2328808618c5c6d8b49ca64c45082bca908dc5a75cffb1368c82cce0ca1bdd65128e3782d306829d608c2d40cd67e6ad09e79f39dbb6d9e41db559218c8263d1f6a8d4441f465a6e05510208b00522a9a6a77cae073817d99a40f1e84f4224289700a173c415095c7d35a32554678ee8087934c79943c7afdc40141a4810e94602d16c77cb80a2af5363f4444a9c32bfb8bc11e97c0d75435db0e70608dc95d85b70746263cf8c4def024a303807bb6640bee4176142c1be417aead89dcfba17eb319add262441a0c451847dd9e93dcae7c2e9c04f67c098123699df6c39dc90278362558df092c7292364c6c34cd0be104734fb1aca5282bcadc563ac571c8394b6fdeb9372081277b2987f3a26d0a812170303ca09218e842c1d2b886095bb25700e021abf45710550c4851fab4f7968460972144c1b6496f4465a0ab28478b1662b900353ca3fec6ab2c060d64caba43548c28654e1a38da32731d551b9ed03376c01be6466c74d44ce1aba9c2cc694db99cf1b09bc785ac5f0603c0248b352a69599e6b9225c887ec045a1708d73c263fea1bcc3782fd1ba1907064293fc4aced3604fd13c9d831323900f101534454bc7ff071372eba94db771dce7ab21e367925ca77bc3825db071e0f8cf207b2ca519bae8a2625c6b7b593888427a32462c0e98f009eab7b4bc151e7b727b6ba93ed0b686854026418272987069af29712c0c002e1304fa10071147ac1c6b4bbcd3232027ae2a0381a31812fb548360aa45bbbc711a7106c600af77535c51c85aafdbadf8ca6fb2c66bf66cb8856596b292490889a9b079c27d322ecbd34dcd8c2e637a7337eaaccf9c0654f748f73a6bc2921f36e1c6e662456aa66c55642c511c8376868a1a5c829da22e92e9a9af2b6ce7207bc7f94281c46eb76ab742c8ad0374973b36157018b9ba221afa3a3fd80601e85668391b97bfb30912038867b260ffc84c7fa054c0cb1f53d337b2f680d6f627093a21f7c6a065d276279bc83b759ae035288362b63b598e1611a21ae65c62f12948554cfe23bbf282702f87b540248219548fb0c363d19b9aa387353aec231965561397c3b4a41199615f02a27d7a5a6a8a93258b4466f389cd07a5ced1e75306d774c79c0b7b591fa5eb06b544bd4b751a3262481b300d1947a256f5c1a290c4eae87d0cb4b843441ef9f02ebc1100069b696c8ccbfa0958fb4551706306cb5c4d1e417a694718cf0a1e8337067a1a3c7981b81b868c8ebb71d956967e904f82c52f8a0865c05698f0e673ebe48c332293600986967559d9851bf75540cf7704dc35559b024298986d2f612a1ec18ff7f2ce1634482bf626939812c346174134ab65cc0bb7487e87d09ff7965f35a9474416c90a978bf29a5c3150bfa6745289473b485b7650ba78699b843e40c52ab380042cb3533ba8b640295faca956b0556a30be2b624942c97068f9d55db7c2d1acf9cf002c9ea2d973d79a050ba26ae235207358d083e310ab\"\"\"),\n-                    xeh(\"7DB18CA35A53AB3A65E4C17FA096DDECB19FC7747E657B49D1C1710DBD1D197B\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-772071873b6b97125b613002a38c5bae914cc90630d56673b824a14dd20697f800b13b17769c450a8b0dae472a2b70435643c82b329ca6440e3fd16a23dcba5d859ec8837a49d18f5c61950702846a806318752588f88590f0672fb5cf02f48fc3a8073b50c17dc8ab60c2601ef15ea514cf965a42bd771af7b917cc28a368755771ba3069036f57e1206857159394cf1b9702abfc5df3fc1dcfcbad79f2bcb3b7c9150706eb520a57b547bf217cdc902214c1b58a7c8c585b20ff1242de6525ae10cb857881897319f909870b5a5a732093f17c2172688fb585490307902e1872a4c384624b8b27539e7db3c78c272c14a988f3ab48a2e787a794b83186535970c0d19845b884c5cd427dd5ea699349363c3006656594a48bb22337877917258f0a356a58b0d5da3bd99976dde9357658b1394843c800a2cd1c608877703e3c5ca1f282d8b4b773d1623a39833f393009441c8813698957bb86ec8f4de60a92e0c2e6178e269024ff5896e2475d65854cbe4466b0671684b55490240b158657384b67db1b0b8c0c07422b460d05a1323456ca73cf749a727ad0cb81e1109388af47f321cdd836f008208978430ff1b6aad03163a412f6b93e09bcb6acdb3633b69c47aa5acb004fc7bcc8e3e2a24f949e24d1c23b9346e2c3a32c1791b67cb16f16a96ac58034daae1ca11a838ac0ddd43883976c9ddb799d53abec005b00faa3a15702ac2187d9b13b4e0a3ea8b2c9fc77a1cc23b633f9087c188291c74c9db8622dc03b78f48a35716ab5202cdde6cf3b62464cb87064b7b02a8890af2969c9275adfd28ec6c2940c717c8575a84a5cbbbd983c57183fc2eb1ac35744cda32515c2a66e3c988ed0cdb9e6778e98295f7cca7f283960275ca0222dae433c0035522ca7650606436bd767679b42b4b69912d0553e276f6b6428b7d7ca99b7ba855448e495bc51b1871a627edbf535045b037a698c8833a4696073bbe6740ff222c726c9cc636402c912dc1232b10197b7440490b92ca8e683eb4817a2b866c85a07a38885ba0284da691f99f167e1baa2caf41ad75a7931a43e21a9671bd97a65dc415c03b368d075bab0cd216b9939e4325e1c9c96251d48dc7f064339dc062b4a3777cc24bf01c272d1ca86819027cad3a491600efaf961c815940977074514a022dc40cd503ae778015d3305cd8b04d4c001d410cee5538e9331982ee52fee9857ea5c685b41bf16bc6bd7754dcab4ae99024f69336ddbc42a95079668bb8fccbc6ff66a6b05768d6b83c03c759a2bc6ad2c2205b26b41fdf022da075cf1589d88954ba502875c28ad47c31b857998acc5287da6308f800d53f95797e52d0a29ae4aeb018ee418c4f7cf72696aa286addae756e619aa8121b481ab66f25117970b66e5866b90652190d184669a4def63219c025f02149f287656e0a235cf426c7178ad99c61294a2cbc9e34fe5ea735baa8da8384daf0a13dce458433067b004bc78922c3dcc025e5688b67ab4d7fcbce06756d49772d4ebabd8b94bf07268cee346d252a9161262d38a9f04eacd7bc76a82f477334a0b3c272b4ab84aba7205a1b158319139827b3d219784101456b964929fa96d27d48ab35aa1b6f914c1465ca9548559c9a8d1f7e328029954825a12a8b4f2f4cf320831f0edb16a73\"\"\"),\n-                    xeh(\"876B17263B409171B746C6936EC65FC94137F958DC974BF98110A1D07F6D95F9\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-05b46c32848d4c14cb6c567b994c1bfb75bf11fc3db2915f890c626ef2bfb14c1aacf9b77914bda70a37e165c65b03727e1834f2d6471f85bc705b8f63c75672336141c44e6c9b7162f0ad93a840987474b7711be7b8b7a587608604acce1b6ef5618495f365f221b5464c41d6448f87986fe8f71d27658f40a15bdd74c7ece1b8992c137e3b43b8c27e228bb9483255a7050a23755c671b4d9854a185b2707b342d051c262d7cc12439b258b30a4c14096e1c91e962944e7ccc11ca35c5d83c937aa0cedacfb89cc6c552011e31b11fc95626fa0d1c04023d8772501402187ab2af9391abe69f988a5daf8114cae6ab0010041ef4af84763e287c4368eba94e6b0bbde17585bac5a8d89e285c4569d9025b65b301374a32018366bb66f54aa4b8cc385f93a34325282f36c5bbe172ad2cb44e32aa876113d8c1000d94b7f0838acd2000a6e386e287cf77226fbc9588a5019b073a237029820bbb77f934be084318e01562eda6b4e0f01d2dc17caf290fc5b2037738a33ed181c6b4aa4d10982c38aad1143ff9530e062ab3f16a9177f145bf0a4b1a1b037682506628ab3fb127df8ccc36d0095074c0db42bf628c690665cebbd232b302802943bec761acb00065b1e07471a39d36449de0c8591de5cddcdcc3a1c43b5107ae30640fa221bc5262a86c0b0124b434da226d959ac55060cba5f32587b1892471300159c9d8045d59cb00cba04821f1a6e19a713609855e3acc0959cb2c88ac19d335b0856d19e34e306602d9c66ad1085edecac34c55443af41e76fc072741ae61950cfc174ff4f3cee652b280a39124ab7bf6f5283f2151b375a2668b71049042a421086db12e7fc7bff4d95605e8b8d5c59bdb47a71d06089e8a13e064040b1289a70b804481bd22ebca2a4340e5a498e83bb0f96c4955f516a5d125408656b72299ae73ca18a2c58342810f9c10808353acf006f93637e0254b6cc216d4c7336d5b5ce5b55fcddca0cc59a0077a6b939484eb64648281b51c3756c9c8bfae53a904f25925ecb719c25a3d378f0cc5634a4470cd839cca90701582383bf27fd2f2bce345481a2a80cfc3b6588a3c328a9d2c0105129472f5231e5b901be663016d79987812c916caa364450301b7ac0f463e87e3971f4a5f13888f66d5c78aab602e4a01a99992fa25cb303cce0624bc69063063c55c16b48deb9a5945f28c614b7e5c83243fb4500b27bbd232baee32638afa0a72f505c1ca7a286c90acba7d3783a33a2b18ceba62dc7287db9aac24a946f0bbcab94c0a2d08c72b437548b9c0d5c41f3fba3d32026bf8db12ac067cc37bc79d143e3a6c40439bc476d5b10724b643ac4d5f230e2a1c14004835963b58a231bc94b008f3f50e9b493e849cca03170a67e90f00d623c9704ee9f788514239c8105938323a78f34751c8960ed420d5821b0db6722ee07a5915110315cd00bbc4ead43719bb3e4fb63afd743c522c6dd03babfd8c9891549814ab2b7e0c66c8661acfd34db8db48feda502bb271ccc03146e7c5423a8182e84554a9349238705c250c8e579079c6c7aea73f38476f46e22c67a67b4eb20dcee2556adac841b67f65421a814c9770f84a683ac0c2db2f26222107d360c1623c9da4922b3f97e33b0bfb50623a2989ec50c6612768f42d5769fb\"\"\"),\n-                    xeh(\"E0AAD46FDDE0B8E64361C3233263D8A751F5583DBE91AAA6E69E6318FC7A8EE0\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-246a3daffa8fecfac4cde76265e37997e53d8137c99ef4cdc8f0194f1984b7b3886ad87fb0227d569ba5783630f248add3b881d16c904f46249ebc73a6151ee2538fdc5b248971b3bbd5af462c36548b273beb06480b28b04b359c03af7df4344cfa28cd469476e3499652ad759b761697861f1479a4400bc034738ab9b674311374374ee5d73349c0a7b9dc0c158c13739a674532b62408bcb5c70ce4c54ae26c30118c8320eb05cb0c1454b7b06bcc013c7892c9b4693f40c6651925b0a3101da97d98c19ac5a5b3f7930061db8d38e37e37e3469ae6b52fb10300da5ab71a16e9d762a2d86473442c752187d33c2809272a16649f8403609e17bbf8003aff87468e8cb4e0e2b3a2fbc20fb8b172e606830666b6550a5c13ac862113b817c2c2f1415da33b9dc1a47451246b434f586a351c55b4c9b465fa1cc9578792368209655397c3761bd7329917497e3f357f0dc8418d474ec2f01af697b5fe30248de409130c3dcb079b50ccc73a1b709ffa5010f1644de0b3c2598e8580050a0b659c034ba7ab1c627cb43736b6b8a754dac647a1b94878529676426175c700896b5d123c5e125404a59507f5fac8acd5bc5de2035a33ceb680c412374c9753aebe423ab515886cbcab2554c9b28c3497b63bfbf7adb8db29b59abfcbb501f318b5c8d61c2f33336652c787348e00c4c15c911f7e2cb67f02ba5c2b8ec9c87ec1fa6d5dfbc05f7961c6c0829d7687df542b4eb42d8d373ecac1aa55d921f7319eaca181ba1c259e4118bc27615a866944a10e28e260f7ec1083229192212ccc9085c5436210a1392918567619b97be71f65c017555a4ae60a81ef0951165a191672c864f2112839596a343edb58885bc58c6406334a385512db7dadac2b7f510830f3b3b3440f73038d53e5ab143a6b53702f30407c6c824196b4bf069a812777a8b2c26e661cc083c52fd3259ae08b9181f06d8c993f14779300ba56b88647a5314066d4b771dbc76250a60fba5afee147b01396e91a0f0dd30ade7c82b6d85f8613a9354630bf669257b57dd563ab6b07c5a2a809cb16990ad98f23f34bebf6064c049f33913d54666892864627f8c4e64b20e06b43a5c5829bfab4eb774907c36ed5eb17ec3101aa8434a5318354510df87cc01a09d06806bd95939235fb635734068f1594a11a624e7b87ffb239dfdc864ba4322ac4357e499e80656db0bb68931159d759806b3c2518a319bde226a3c250ff0c2326750a0d23beb60b442ca595adac6f775cb06cc988718bcbc29c83e39646b99abbd5f7723757b9aaf63857c30e7f0337b8fc949cc0b4ced2260736298675aa8e6a1022aa1b8cfa3104387e429370689b398a317f0bc50d7841005048aa7e29a71d0b03348328c0c268e8f6a64f518ac06c4398d7b2f82abafaa1c9c37bb1e3a147bf870cd10c21cb702aed892346cc47e6928d3f16575f1254dbfcb910aa967a87323208937d1aaf7fa90f1261131ad4b04ff36e9f6696594a2ccf3a021ce852fb9043c194c4d3d704edfc5e3d2ab671b8103e8bcfc631107815790e5733eeb66fa344b9f276c531e5505303b267b6516b00b056780230847aea99cae15bb4faba0b9d461877419ca2d16ca437f0f2963e80f169e7bd65d440b7d6ed512ee105bb1690052a72bc54207b09\"\"\"),\n-                    xeh(\"90347D478D5D964D66A54BE930FD9F7FD3C2AE1492DAC35A6CBDD02616BCE14A\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-d5e216438b4535c69165f884be521e5ccc33f22695aa122e5d918e8d27a390035a42b9c8e4abc9dfaa92f090360c9892fec554851c7e434caf9d41896741aca2f2ad64e8b1e3916827215beae96d2d190f22917ccbfbb3452914078607a0eca4199714ea8040e9c9945c71501bd1b6baa00628c62c220b5dd79846da4399536547b04811f6915045e63abb9575076150bce269c61390cd3a3fb3db7235390b63dc49d041788d25650858a062e49f4d9855cac7c7d403b172044e2234425f503f3f613a5b1a72fb32590c851d71295f0da4113705b306e6524c398a59a83ee6a9893091beaa78470b274680017387eb13b97baff06a23986251a1f1a4f73a72054640d6574b5d070582925b201b37b5a690cecab7bcf72e16e3454eca10fac9b760cc94928307c2853a15c47c6d29ab90e322b3b566a43166428c09a1b3ab3515704bc76778c38b0ed224ae727024f2008cf2b5128cb912a9bd806bad62e78e1d79cc90f3675f863df590210a18b6b629cf91738f23280e93ba04b3661cb0e040709639a5b495c7a36eca739270031c97db9ed9432a4ad86608528a7ff7034652571fc6904662116980201f8073ca003092c19df909989dfc6744274a2e01377099bd618aa443c883bf8b87a9bcc9d35c56aeb49068592d31e16e12c711cc9a1e9780329a92aafa84827e685a21a84156b29233e50f577c54fca9a3f9dc6f4707704b515d9f2492dfc22977a36dde51704ac653764b124cfa615dd5932a05b895987aa714c1bb38c3166b27cba655786c29fb733448381fa7606df0f586c3ab0f2660901ed1444512ca70108e180776078c417cda8ad2241ea9304f820a9964e455d8da350ec30469fa6ec3470ff4848da109cb1060abea4c3a4b733b97d04beda35e769a7f1f84bf98c8790e91199ef04a6ac80bcdd39ad4979c327b84c0e897a4046bcab450eb3cc4d52b83e2f3845bb6c4729b3508e064576a6a8caa9cc12c917118196000a1e478c278257da8a10d78734b44e426335c81a4e6988015a6eff43470d98becc9722d254a6df327ecc91174a3a76ab430ab40678b37cb098926823955d5d8aa8f4c2598eb8ace098da3cc43e84a4a205c00cce1962c7411646a1a4cbac0fe884db3d55cbc0531d4497e562cc0b6f9139c905a8036153ea18570c1164e8b73c15630b4d020380c63cc1847e38a938085bd74338704266a6462163a176efc248c5ea6568056be253306ad8ba7d7d6144622002daa5034cca3af106a7f2b61a0e7b8804677adec1bfe84b09b910f96eca5f090cbc4e14139f12b29b7926225689acbbcd7e4cf2921219841c68d900397a100937687a9d779efa7301c4b1d1f74acfa820445c851bcb874c3c5b6e33297c2b424737b082e31034723b05c6182ee8154f5f13d69e67b25a58f8a543e19f7c279e99eda3c53854791c20a1ed0e95a8db87bca83aa6925658cf4035ca0879d477ab8b4c104e149b550b3209b5f36e149108a1918fc29de294fdb250fc66b691c30c9d6016b36a83e73f9a31df40744b39410201049642380ca752b64a2d536b6af19365b434b326cce1bda94719bae4d418b81cbb28921c8d02b4452556a156aacac7608eb97a2a56949059a5c232a561f842f40228b99be04e4a6a52718dc4ba9689b0020bf1bcb8bef\"\"\"),\n-                    xeh(\"119BC36B5F856C0A2F136B3EE42041B817125A600E829FF6B4B402131A26ABF1\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-cb8ccd08dca5a5e735178993710821454608015b34746800c7f8679d72b0c628757756a50a61186c553febf79c00430bd0709e3741886ee10667aa7f7e4c91d89820e66ca9bbfb029f5cba016b6240e2bfac3815afd613a13b04810a26559a60f6628308fc45238269c77428aa370418f11928d5b3c211cca7bba2de57898e132035a16a8ee780678b213917c725ba8dd1818428199c672b20ac05061a82246e3b55bfea529ba891da6320412108ef0ca184b44736dcb05990031f3496bfc96c50445040e27df4fa2c28205e1d9090034285912b199b909efd088cf4ea4241f5c3052050aff92be505a355b515e5d4ac55b859d5a3cb1a42564d398ef4cb91db1430a7da96f9e96cfa27cfb12664f9f694a36b211a7a79b46c70e0ea14219c119006bd287467c780b7e6e706dc30b230b20c3f8759f2b2326d8422b16c124ad4a8e031412efb450f881302448e26f383fe01d0b26770384638ee1aa51df773fce34a9dd00ca24c584f5512c108109bb9499922019381022a58c4494241b2b62da8ea0b784967d86c7d8fc5c6a8f6055865173854c38d6b407b3199cb44000aa90253d7790011a9d4551d66278d559808835208caf18cb31642b06164558b06fc615953bb1c5fec2600975dfab48e9123b0f3d8757f53555177766e819f9c5487c9700adfc917e5782c82c681ad8105d6427785c862201140c5919addec3f10574617201e4e35372d472f782388c707406d73b462f25e3ac846bf7274a721b1a05c36981093c3a853996552c85b4a90e0c796c790dd881fb255557e0731eaf8aa9747b0fbc64f2db3a7667a11b6c7718200367dd86f0690be472b5a2fa4b914f91622b78be310719ecb81d1eb8b6c76bc4df0116f84179654794b39832701911480601c77229bdb571c1110387a78d4510dc0705d66e189e1f80bf7e5c4952c083693c6908623be31b1d2c63eaec178c3523110ba13bdba64e6903df028a23167594a12b64de601c90b41231a29eb5c2ba2475b09091f8389363030ae56fc686d024a1f838a0fca5914941f72470ac5052b8863aee631a3206c9f79dc479c925d906c86d3e5797eb2ba45499690b3799ce39cc65a9887eb5785c1a6ed660502d85f5b169ace240aa6c492f9bba48c61c81f0722f8377263a33087814dd51070012a103a93160359c3c2a945933c081409cca0963e99883dd27cc2572683881c189861ab10e17e400b5da3d40983821b4c45aad97aadd35b6d7296cf2ba029981182f5a1b189668711d528de7c7b07a71a47056074066193936437016b5afa3fcb245c05764af1d77681325c0fc2bfd2a74f1490c704e216d18345a1e074dd440b730a0464db2bc5852caeec23c0bb0d754cadf8f050ada71d85061d18a6138d8b70f77aaf45aa25ba65c643f6103390168629bcaa10577070bad8119619320762486e9e340d43a04bbb408ab86801ef55647e43cf88a6c0772b8d5f274f1c12593b07bbad80ce3bf1903f24c6dc976cb8c08d2411bffb92221deacc5f2783b6d38078f51d42eb5ff1a6b78a5899f044ad4d57c582a72844a98e9d1bacd4c081abb44117d20a3fd3b18352a1f2943c29d0a4832a8eb4b22cf69030def765bc527aae51010c74cca53b8df382df9ec3e8d9d492fb165aa4df3ee6a45fc8a9953ae5\"\"\"),\n-                    xeh(\"697CC7445AE2C9ECCA2569B7871F0BBB364E63E4B782F734FAFED4FE33E4AF14\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-2689044d7cb15005ad5928aed39889c195c94ab0366f91910658388798b53c6028343664f5ec4601d4acef04d0b6f2460e75bbf32405a512ab2474b8da27acf70bbfadfcc21db84ea0b73b548066d4e4618a355f9c051b8b54977c3544bc7151e4ba1710e9a00e86a46d1149620c291d3673adc5101499301296cefdc04bfd5ba5d136ccc845b4e69c629d1086e94b622054c5fd662952345b48d988e4b7198f298ef6a925fa1a3f912ccad5b46eddc861e69130424a8d952110f5820c776a0af58c7aaf14922466ceca0aac3bf1261bc73df001bb7a081a9440c80453b8ea8b06e22689127cc9b2ea3d8e5c2bf8b25eef8841a527729dbca2ab815baff343aa74b4b07c06d5158e820c1fc440a86d44826c754a7e3b05d40c1cbf32206971c133c80f8f678d3c30ab99db0656f4ae9ca12ca4fa132265232bca7569c8624730b234065196d773a290a3633605166161d86bb169981c956394aa602d5ad37cc8d800a8770bafa1667b04ab37a668acc268394705e679594445bf0a7987b86cc8c8f48e180279a193a187025648b22f53d9ac5d8b8a760978181a9755e3195754530b907ce992b939fb3740e626ad5534256bb7dd538c6bd2296d5675567c2277552c52930401fa09b581b87c18c70ac8a4076c9ed8dc001478757f01ae8ad3adf49a6ab590a61fb2c5c8645076e78c58740aad2990cf3858e27ab151f797165550b1f4a0fa9b7d47a8c4dc47bb53b359742aa486ab776b3a7582459f229b969038379099c428c53c1486cb23911f50108032796e46ea04842b28a84373332287db410390563c2271be2ff14065f22b7ea32a284cc3d0654ec6ebcbd6412d2f5c29b3720182350b82b8b65fc57de3d90c0cb55455527a469097d913331a7a0cca8692200bb9711008fe5549c945b306fc48f58b8abd835dd339797b9c508bcc8e8d76a32d560cdbf7506b1c2d32fc35170347b71a3f456163bf3116794324a46651f359bfdb4a65cfb754ea47064a2336f85bb82f2947b9fa164e11a55ca10086ec5af899bf9f7a3c5130a9c4880412946ea6ac478258a67c58131df3b7338933b77c064bc9231a49330a1a7c85e864b17c56501697b3e22b1fc468261b8eb8f4b0c6703d6a1ab764496a6eb27f804631071962c4a8062203148cba5acf2226b74b66fb305ea88040f22779a5f3486574a7a2833cecc69af95c64348288bb1925abd5be25878d9585c540134eb2046d7bfc5fe16581677421c1b59f1c69a7717744ab87902480ad1f697cb7f66286c43b73702f42720840d598c3917f25da324e5aca224a9ccd9757e91b2dda2186d56ab2191b46c950c54e7c570a3a0d7805096a4718b57bcaaca5cd6fb1a6e1272ca1ac7fd9ea9cc72440400bb0a35abed71c3ff0b9855058891555c713783386bc591a9663e61bb9bf8055283c2488e198a6e991fcbaadc7885f25295b3d531920d880213b410c1763aee1beebe665abc1ab64c6ab3cdb95555004c40148a8530c22b06341c301f301970f51479199c785a4c616813e6e41bd8fe078a019a33af92df22b207b09972a60443a39bd11c5c38de24770f3a29588abca32283650a0587434b74bcbe6a7bd6d70bfc581848c9b2ecd6184a0623c75c1768e0f3948eae08ad7e7fdfa17684a3c63b6a10dbcfd6213\"\"\"),\n-                    xeh(\"52CEBDECF06579F4A9351F77CA95B5CEDD034D812F3FB7FB50320CA80E4118D5\")\n-            )\n-    };\n-\n-    static EncapsulateTestCase[] encap1024TestCases = new EncapsulateTestCase[] {\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-4f31c22cb34ef4a51478c635302525fc0abfd221ca8b3a6e224338bb0b9116ba54cd581cb7a3813c878d65317d8736881c8a6b6a7030441b44dc6663a6919c7a3574463b706105c332693d1918682d2a0f2e12b1a545a8aca6a38f0b63a216463099558d282dee3c33af3bc160d48b889a9d80e9cb6d83786dd826cf2c58c23c87f0279359026458040ae638c3eb5c5e0f7b6ff2e76ea598bac5143941d50d031a4906bcbc826a364d92641f68cd1b43973fe9b802f778963515cdd47eba329fe6b50c8bc5bf6d3aa02e69965693997afbae7e2c8f06b85435403c827a39d63c8cbc675d4fc31a5a699a0f2381918448a4471eb5aabb24c0685e6a1ce042553c360190ec470b44a7cebc153186be0d8c8996a9b3bf46383aac698758ca7c9b4a993b77e8397cd3a3bfd11b31b961c90875c900157f97e211ee6c853fea2dd83212c3f8861c0a98963820d6d73c7b3693b738519deca589639462db956bca22513b9cab7459a51296443076ff732e3eba57ca767d4374a8b2544c46c54c2f46cd7bc6461b8105f0d41ca4a532c6e4052629929c03bbd0b3c6b52c51cf3195eeea6aa9a55de0d9063bc57722a72409a59747965b4e6a5e14ec112a103bba204977d43822d20c92a2aa0f4882798216cd26a857c6a12bc78ffddab1d73a9b2f91ba4de83bfc54092d4359f03a4416230cd6616dcbd916b989856f3b0672b172e20732be0730d1a3a6a837c59a05b846ec1d600841594b306acc67cce4ab7b9715afe074a75738aed749c1494dd683ab6791522023acd8e5c403f77b23f128f16261a100497e0b1f906b7956c53c1f1a0d65d9422d7a3e234c252675446f085450446393c0c151e751ce25cc05b12a58c334ee1334d16b813c7689c6851b7662084ef05ae30bbebb5c2911859db6dc449165bf8b41626839cb37814768167ebd24300306af259941c7628997bc80156c6b87c758d6c40b55076b74b2b9942093dfc979ae59ca16a6ae33b523a7c687f3f22638f37c69c4946a26bdede88477c7b67538115cc890873ba223a953e1b79f7a902d0b20cda992a25b235f30164312111a01cc5d82d4a6e1c4961ad96bf48b797680bd0d04c83463bf92d86279c994c88b57f5a14c45645f28fc19ee835f0ba480bb04a17f5853c1e00c37f0857e88504166a230344bbd3180e6421432874fb6767d0a0c52c661bff33988d3e3132cb744df5b6c28ec4e7ba2b25c22a179914f043bb93536602d754c92cb6ebe42832f605d6dc99a8065cda1ecbdc589a93ed321c529c5f910ad86b9183b827e1e8005e0ac102a35b5abe533e31acf35e649f967c064963675421990082f4897971ee4204e3611bb3bca7af3a5507b239e9ccd49c5c4e09c14f3a3106bd961d9d649617212832c54f430140c8590dfb1bdd40785390384bc9640e2c8564c4a4f700ac1c6d1895fa40ca309aa5054b04934bfc190a45f78ac1a8811046710ded3246ef4032f3b73231913db1a58f45563e3a62413f6a0598264321b33460578f682ba40d29ce15697d6373bc6220c0931bcfe87326f019c7c746e0136a98a6bbe8c7caaea8a222e80915926c4fca60dad75a3f03a60375c09b5c5b120180b51f185157a345dbb91bb5aa6b704183ea0ac0f374a90c02206668224f975ed605ea1b01c55b9a2c159c2a096b3c4a98c2cb8b81682864188cceb3bafe825016381b8b2bb7df2ab4cf2a71f77347eb84314dda92f6d5a5c34d9cf3a123a16b892099c23dfdcb5b8e67be1087ec5b38b081289fa8c3d8d560a2d882f8b8501b4096d82602e7960a2c433abfe928e769b3e22965cf7f7350a1cb4543c52c8f3983dc84709c1909cb76084771c3a59867208c1bdf869b85548740c8b4390a2a7824d2b8a283606aa04a78b79acbeac33a2e4490a44b2995c70165aec4e37a79ee3224a8c3693056b67b1021c5c473e7fd31551a24a3383741d082366398b835389d4e4a34f7905a4c5808b27b44e86aaf02032ed07ab30452bead1907ac28a1a98a97683895ee583ec59316673213f9b1e5c2339678c0b6770459509ba5478830bba25239c311231b796c8225c9206facc138cbc2f58495f106b019041387982cbc656604e05c06e630b3d84aff82240b7a7cf6c078b9fa99fa426c197a5aaff94a93ebcb61de47f9c1c368b4f0104a0e8d4f20f98b38f6962ea4d6e053a96a8059c6e564a9ebc6c\"\"\"),\n-                    xeh(\"59C5154C04AE43AAFF32700F081700389D54BEC4C37C088B1C53F66212B12C72\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-a696835000919f0159cdc7aedd3148ccca020f181b2e3888cb6c3c8e271449bac0da2a2042e230895818cc5bc87e38471d3abc51f6c05fd80bcb43bf65d55a0c4c867ee28163618376fa5dada52c5f4306cdd99f0d4583c1399dcff8175f465a02d61dbb98680de662b49b762a8353ae15bc76bc097b789ab1057d2595363cc043e56c5b44562971c0097188a30e488433a07e7d934b89f4bd74b98822518d2e06932403bf81e97347c203e5413bdbaba6d4107e9ab4aeb1091d77a326d7ecbc09706a98499a70f28300a0c80c3aab68980c4d1cc662091bd370575e7986c38cccae743efaaa63eeb9965ae8605a799b447b76f91a15c8f16b6a52864431a19839543d86ab02c469ed7404d0eb365b7bb643153ee2737b9107a8362c4e3b05c0136c6d1510229497bef7819fc0a30030f899c0bcc6366090d4eab165258fd1447a3b12156bb6a4b3320914d797a2eba18bdc5615c208d1328808b667ec39a283dcc331e83b9d9302e3145fc003230c8a2365a5b3bb52104e698d41662318535dd9557df8907b6161a404e946a4b00a52829c8bf911d79385f254465bdcc77a31974fa6426554a12e399b8ac57e8c94163f3727472baebd458cece806446842c48659ac6c7262304fb693befd3b67b3237fc239a782c83afc72366cf9cea621989d801fa2477d564178d5c13197482f373a9e4ed9b2c276ba88e0348c1708c93a7c54d21bbc64496ac21969b975e5f56d033c287af7ac993cb87965818d26458844103957834760aec8c1572bcb0aaa740cd23b71a1a80396e45bd5a2bd704474f3d232041ab51404a768d404fb295a18275720b205b470778226abb26b775c972505eaa461fc52be230359e736cae2299cf47b1f1c0cbddc7472439ad8033608a8994825326b9297225c8fb4c0ab6a51c74ff2059d60aecac1cb8e9b5b0de1bbe00038bc883c25d23be3198c21648271cba8559c3a451624a403a6c390cac13412b2c788d7ab93de4790e8230bf7491e39019b1feba2a551629a5a012942912d2631b5f64e2965c73205bf25fc451d8836aa944063925a221784a9b5c99f13c381b5ad71c6581f28510ce93366534e8cd137faba6c53d92e25205c9cb43d7be5ca2940997ba3c903c04ea5ea4605503354d4bd63e3070a12840e2551f15c20f6769834761bbaf8a8b11ab94b69807a1ab2dcc396fccc22e3168e35c444efe876dc4b7d22683b6ae49467d88e08b795cd556b975155f4324dde94ac7a89ce5d802a91b4745c2b6a86cab67836030005c70944864c0835f8039c23d7a999d43bdbf7428bbc83e8e65c7b81639ad41bb1f357ce9080c3cb57319c1f37db4a3efc386a40cd60bb7a06ea70c38458bee0baa58a9209682e73fc2cb7a6aa55f863b49acd9cb18186b2b64434a5b7a38a2cab3b8baa47e6da377ffa1d6a432c847c4c0e757d0847933f5962722a92b06abd6ad28adb1736c0a96ac8130caa309f2e5893b0190bd67016f04b17f38218853300a05a00fc30330cd907fa08bed95646db857f4edbaae9847af03729205691eb715c2aacaaeed21419b187c7b99b1fd83ace009abd93586a413de2d9313a854142f076ff76a9661a96bd11c2e8986dd9a7b3d9e1076cc21c0787226a66087f13591c896da8e521f6117a9d7c5028692433e86959450868272445450aa42429478a4df821653067cf61638a1c676b776b9de76c50e99084e1d71202c8a563c9c4afb6bbf49c851bb939311b79a358a5118c945f0b9f54c7a5d0c504192a94e610153041a291f450bb44995050a964264a79818e6717c89b4046f16908d7254fa4f571548b01e9eb37759c7e4544c5e5f98ea014200fe291cf40bbd4c3a61213c2ce862ef907457db3b39f82c87690451c4a872846c86ca53681030ff839b24ea655b8a868fca9188cd2afc719b99fb3020e547ba9e1c35bbb7d153508889c7d33526dc071c4e89632fb5538adc58a6a304b17610558b302efe55a0c631e4760c1be689b843633aa31bba7d9c4144a14d7ea15e8895061c025bce225eae5570dc375b6c449672ba29c9c848ed16aff85785953cdf0891aa5756166db1effc3ac58c0969edb54428588055c9fce4b05c023bd386a9c19c33d33d59044f9893bb98f3a77b35ca101ff518e6eb4b056b816afb48b7b1f4f707d29344dc3cd4fc20ddee4ea9cb19d236d7d13a7846aa22c2872f73b\"\"\"),\n-                    xeh(\"2E2C821791D3EA49D0AF380B97AA24532F6109D85360A751BB8B4C048C48D26F\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-0799b60055b072088af992055fd18766111d70a92dcaa1881c1b5d03807e4a948d0937b9ed4385a6479a23930878102c0c9a04cd1b51bac6a7a81cbae47b15f33a331a5303695a4ab229585d27b3a7105419952bde5c659e089d38789d3a82212e03cd0ed7a6efaa913362b55f386d2e4b8d2565a5781642d8e970f6c9ca25d2acdb8a3da7f493e37331d26432c530bb401a4ce65c463d24194b2b1d708ab2a34009cdb02b1a96a921f42c90488940e7033090bffb30b17b06bf5f3b7115a24baa94a1620434247ac6c9579f42294e1f50cbba44829640bb7713c8ee957174a85b295bb1e44943db036773d91b211537fd9584954726cb83c4498658d1d2a10d2b6b1593348423aad4f6bcf1807d6599a24c4544dff617a2710e119bc17785b0a8c57428ec993e5991f76a9503fc580e4c62a0b296dc52a1a2c83846b7673ca308fc0877d5f473012c5c50a67813424792171e87a7ca555c0bb380ac351baa05074abbecb602610f1c095a4d3aca0bfa11092bb8dac09918449149960dd7d0928dfb2fc23b7b50d85012416e2d237afd47348378c024ac5b14c9ab4c5507a1355685550de7dace35cbbf20a679c9b76fef5b795e0a14c803c36984669cc88acd814d9380646edb1cfee159040c8366e7396af8977673400f5ab2c21980e2a184a472563b1c32886c58a0d68a2d39275529c3fe1a744c877a0605c5da7556dedb89ae8731e729b6911a6194d71102fb42961bbbf770873784af83c596a66c2a94a7c851d9677c779a0ec527bd761dec9bc9d1b22645eab949e31f1968c649c811884a765ae00e98f3228fb03643f47890f78fa6f0369dc37c98b593934a3937084f0664b10c091e7a1315adf4b3f34b5b20123905009c6f24c7f0c601b8f53664b6bd6d48cb487b0d22d45e00f19409a894f3ea32b2b3ad0536ac05e420a74a710dc8375aa9610d2640fc7818ed599598f60e21113670b99cc0d96447f6069e0b193ae79277cb29883506180743678b3c9b53718974210f043140d74392d9be2c08bcf796b462211d60d618faa152e461cebc3aa675ea1260f4585e810cd4ea8415687d3b2405ca72a46129c95f9bafde87061158920c4b13a3c5300918c8de4b0f840410ee91077d611971a4094f3a236230337127c5a789209f36c39b05b6618512ea7c9549aa4552d30ebb5226bf06708b4621a5cc8f58b8153ddca32748682e36363df63bc1249ce1205484048fc8798ba7929fa627404f072a2e0c02abeb48ac9475dc1c087e427309c2b701668a291a54056047def6b10618a34c550235aa6d39f05af809174041b2140640c252b604e81e56f34f2f711ce6d64e56ca0fce0133244481058aa477628022f2c2eb6c544d1045dc61aabeb0aa42127bda479160f582cb075619f810ca2ab886319bf87b12ab710db03b4a1a170be0699f7f333a46b18d71e6832c356fcef57db82430b1bb745f2215fab44571d4b0d9d568fa5cccc2919b2ff6b8d9281e07759069b9a602ba7642f570b20b15a156a1c322447323a4e9fa1219b812b03a5b2e1abe8c5b7ac26a8589733a3fd33480e18ac200362e5a0dfadb1252c0b2d8c139e4532507329ebc3910f05b480ed196bf86166bbb2f4a96a91053b511c81ffb748f420a33a6cb771dd0129cdca037e4533624aa16fc8f18a9bccbb475ef0a8b978ac9090a4539ca1fe06c5501f2b34480b025732a90a01e60ba9dfeabb4e8c61ed5c4396423af0aa79b86157e687c313e5623e6137f67a25680eb6bb841b80530362bd1425ee986b18830509bae9bd9926f020cd02713c7a83e8ca4318a044691637d03386dd28c3ba081481ca7649939bab47668fcd4291a4885317025e5250894e968168447f9f5c73702a5837802cc4593ab99242a59a39fa14935eba3e781a7f2740fbfca7141c821c8921e7c52b4ebe24732118cf57590dc919d09ea18d2ca63a605495bc2a88f9922eb356fe0343e4ac2666c49adaeea898b1c023058bb5bc4437bb6b798f59ecc8b565f811c8ffaa13cf8a4af8374c3221c3e1ab89cd94393053acceb40fd6a2c1d2c4c6316993835b9ade3a4bb396a5040574005ae9f1619c2fa66ecb363be8a7fb424927f8033ef8b2397a691d2670195590e9299375ca9b5dcfacee6eabe078b28e7aa1fa314cf3c866667cfcbbb5b57f2db74fb19e5e0ab5683efda06a93631032380727b6a80\"\"\"),\n-                    xeh(\"5729B2AF60A4A5EE3BA6D7F255D7D2437812579942FF2C6F48611669135DD695\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-5f0436c441361e37075a75830c1b0310e763205645d482c4870336de131a6cfcb2435119341cadb7e70eb3a7b7207237c654814c9a6e04c5955e5135c9d311786802df76bf33c37a04f84ec0f9311ac371664ca11dd56218f65240b97819165d90b113e955a19834a144e1ba40f97cf815b90b4cb7b06612168c6c46e11d4d79857f04cf00bc8e11b930588216e7ea3a5c99caae7b076a4680bd76aa3e1b806f428c8301641640b938743770b5c1ded957b8b1aae1fa28e6f19a3ac59f50a59a9a346766c9ae68a5c920b0377891511cc3b3fea22a0b7216ab1c1d8d97139d985f13345a073434150083cdea7977d9a5eae98314d6898fa14e89e4cc7d417d4b060baf854840e12505fca30bdc0d60a12fd30bacbd62287533aad397c208b0bbcd50b8f19431fe727460d754668309090cc81d8b7946333cb6fb890e152069624a923476369879f04771a0db28002ab860578fe351a2a1a2a11c198dab6b656a4580caa45e45d3987c4445f312c4d14c7f70505272364aa8341b1753af08040af6501f69e96d108a48ad245ba2663aa154339cb48d4bf55acfb9534ec42c06a11e4d4b3659f65ccda82661b1700090187cc57b17b50d66ebb7a44672191193dee20e9ce21bcb36be9d312941d622062c7906f5ccbeabc861d85ecff006300ca549043dfccc4400118a18b49eadb276ac45469ad69ce16c60bb717368d6c7b2f068bed1b2fa930552731444f08a239bb65f173b7e61730c68bf39656ce5f7425601519a2773aeaa3795d98db1146912683396b6c9232b498b9bcd3adc70f0935d71e56737a422b5792f75b12457f8817d926c44f8a8e2a34573ba7228204cd5ba24c7f245dfa0c1fc50be04e36f407043a4aa7a6f62b271ebc30bd76a80d242b934cb8448535ae51dd43b7614a736d72c14a577915f9c6b62cc10d0315442614a36f32d94077e65978430597a6694410888299939784237c991262d38a540a5e84f326906a7883a6ac3b05bd6051c5a11ae47809b30ac9a31226281a39f63be3876bbb6a896857a5177a94b8193acdb441125236c9cc291f2d7bea99025b282328c571e93f2bcc943b3d1f6ca4e3784f4314e570b48d483b6b20b9dc41280610aaa3a345e2645a3afe5b4f3b507b9c1a3502c84f581617f2449035ba524ca6a454c87c57652db9535b926557a19b157fb3f3896116ac1488a000f20c5251017c34416bf6d13c178204484c83da35817d0975183170a100c0b24404645d7b551ea24569c5d92235e6df27b105c065f66b23f4b119e5aaf6eb9ad73f3ac55826faa55021ee116d9ea096c350ed1c659751bac4a57c8c70126e736ba26f276b5391096541236b3360d9b76bea1b519d141f8fc9f4e8411d02702ff366aa7e1a5629295de395eb251c63e5170c1db22af621dadab30ffac21a9b400c8a7c30beb194f027858569029b19e43929901e18fc45c1d7dd6b464b64b14984f21286ca02124beec214d354ab820b4e4aa8a26a35fded6cf0d95a26f20123a909a7fa708c74580b7984ee082a05f8b481086b109d61b26fbc171844bc29c0ed42bbad4cc167935a9d1524a4e162a4d598a6e23ce1d404cc4a5b9b80481fa3b1e416027a590880b38517ee34e768c61c93cc170c4c8a8d3abf3e79ad2b53e710cc521027d2b8366ba7583e9744d68ebc33b4b45b8f04e44b98f890bbe3bbc0209d93a9d6140e6260cf28740fa35cd68513d4b024d5d5463d664b3d11a261d5bc5c1b8ac71f247eec4c66b72812c308b3b93a633b80e2ecc502813cfb4339c24ab91129c93b56b4d87a132d835986e994bf61432dfa98477dc70f7a66b53f88843e86ab729b5f79cca14e2263dfc868e2b81432bc47fd1aeac51c3a1d49549423d40a86210317e39d9ad15019e90050bcb882ef7dc09377a961465098d357061f8549ccbc7f951639e3a73b3e7a6db109ae463ca41038fa32418ae4777372121a5470622964f514c76c108535d7913fa16954d6668e2e01b16b492dce96a932532baf3a413a3c58967a46b80c5acf276e2a86cbf499009a5685f392dbaeb4621b66d9f1a631a60b59d03a8cef18f87c9c2cfe6290130198e67b8d095019b0484e0d274e488640db473d1402929cb501e9291cc428d37c0264d1c3edaf23921b66855f3b90ee38931192e0b30d24650e4c7c62b62b0bb885e610e1a9e542c7ef8f4f03f8ec11130\"\"\"),\n-                    xeh(\"FE8AD6E3F3EF1FD1890FB7FF75A8CD9B2A04CAFA7ACEAA99D06D116B81039DEE\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-09d4099084b07199a5cfc53573e6291a7978b848844c008f3fd45aae742d49f4af1229c49189bdfe177ee5c2c5315940f0024009eb4bafa5965a472d87767d4dbcbed6f6af41307cb48ba8f9828f229160df4581b59617d34203450b0426593947fc84d739784528081105c2c0fb9a7af8be6045c8606cb22d1324d5abbdb773c69f4bc88fa15e136509dbeb698ea0bdfed69f8ed67477e10244304f866a912d2c01bb4c428081aa46b862a6d420cbe7386596c34ec87f11084ed0493952a656939c5614e6afe7a022756621b77bc27648be0e86a763e36f8015b9e5e68684f73680773b5d5a9f37e90186fa13c11604e9f231ebe02a9c531370778579649f33c70e4be811ed668e62d28f67f7133f86695b790bfd2a39a0f22a49195ae4a40196a974a1b3424f4c574778b0036b21b356835eb2a142084aa2b736e4a810f08a2199c86c3e8a5ccf8386498592ab3570c6677ef089c0d05b06ccf4049314a8b29c9d9c18ce40933cb857941cb59abcb499ef53869f155bf2f4ae7e1c3e41889bb0682de1b4ba1ada65289669a55807d10672fce9142d1a8a7ca20c332b4064ca8a1fa5a8c4a898c76cb837b44013376fe1577b0104c95b3757c40a8c70d926216c4e9cf072ce4798b8d38776b3786f6136dec4b9c3a35ae088905df969ece6bd26572c91d78242060c54c9573a789d5110b25db9a5ad1474f2694b31553d3dc63d69913650287f6296854c46a10a54acf869757de3bb21342d26825a34704966e5239ad16b57458ad75881157988d5b0577d432b89ec573da15152e89afc7cb0c587a3db87bfe0db286c528c4b211382172064c94210f3b4c698124d860a13e12b87756bdd0002423649d7e7a1f57676c6e53c1ef6bb6152a932a110810ab80c2001aa53cab449a6d8b9a734e48de8f4777fb7c6f7408c2c8928f72482950b6497c2500af7568d514c4c34151f6749a0a6b79ddbc12e03c5563702ea733ea142035ab4149bb58ee56970378727e6215607a64fbbe7888323bb1e265dccea33d1f96b8e797532249092a202f3f9c9e7026483e78251cc57c1977c1e5a4ce4f9bb6eb4983823998101a58b0b785823b3352c6a5e2a8660fc143a5c2653e6a3920a8d75c29247a846f578abf56c2dae289e62d1a581dc561c946f00edc202222e0489b697c786ddd18f38a937c7f9b9cd0a3d85a9960ab2b470e5c57fa15991e74517fa9757a4a62a245392f3361f7601cf0040e391808235a593a88662895140e468e88ac4553908630564e61a89cfa2c2271a27c848a08b97adc0444a7b72bc0051695e197c91eb4af7ab869a4b9325ba36d3636645b23660b0a101eb0af171470dac7e4d72c53bf4070706c840f11d8514913873667f7ac5ffb6c011aa6dbc34c8bd22c597e0814feab71a99b2969b8679c4368282bd5a109781b02561b59164832b6096a13b204de5d8592b9045efa538072331f984b42f43a44d4ca6e2792bf26a4beb24089d046b13c25ec3612a73c19a8332a9fff70d5ff71851da2927a13942e8aac355582fa347920443f9a76c1d942d624c8b696bc3825675a6150cc56b0a3e5a19bd6782ce9781f4f2a4fe6b632de07047828713b23d98c91c99091571d90c3438c8b64592ffd747f29351d8ba91a2d6349da30247db82e2051cde3b0094c4aedf7556596968ae6acba7a790cba9c1de26689cbcaa4d61bec738a17f33b666764a2ffbafb488530f0c1b93617be1677a53cca42908c8c7a051ecb6a894273becd75313420b3d763a57ccb7cc73c8e94aca79ec03873c2ceea96b16d67c34c99f1f3642eb6948f4282e8d50ac30a10a47ab8859d54f86011a652913194c8b5e3139fb65039b4493a07a95b89177a4d1798d35cc1b10c9f0ea8b1afcb5ecb2841b143930c58ce8ac90b3b11f43837645a6b9f6c08b538a2b7b9272464b9707ab4faf9253012cbc985ac5594a7609a1b82c13bb886c564b577247f886382872d32102d0a31ed410942c5b1be910bc63b0212eb918eb0485e6734fc5f736aaf84467692534e0161c4258eeda24763894d0598795d48d99c56771139fcc016e516a29203774d038610bb5a57314a9ce0c677d192143d34c8b2148fc190f9514820bf8c8686a4413387cff6863fce50cc85cad03b350de7548972a4168f154337006e6873a14aabbe7a7f23ddbecee63d35e15fe156d0a508c235b058056ca\"\"\"),\n-                    xeh(\"0AA3B1F8FFA63F89F949DA18B6D8570BC5811F85A4BFB293E9D411ACD43C3227\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-d3aa9a1476a6b477cf20196569ca9cc4202176926f2e6b76cbf4b4abb4b183847e068c585d7c65ada8c29dec27a32642647901a23c635f6751ae131c34815b362ca00618554c4a9d028a6aeb81c0014815ebfc7f7f7001edeb5890995a25b89332c466c39888b9b542d741954a27b5dfc72a65a0cd453b8ca9529701d49d3cf21922a7a365fa3f73778161534274b3244a31a192c6075f2562f04c6c819111fb1a099c114e07e813a472a802a0af3167c7d1a68583c57305099cf4e9a0a5c724eb2a318ce0582078090f35b856f773194245e6678b9e77160201cdf2fa8d4456671fc9bcca217a2625784e4052e2f339c544a5e589b24faca6e3c332891b2bbb5849c6ab2805a4b8d01199feb49250bb8d30380ac3651c7a07525556c9d925001568a73b804f0d1b0e9b9ca8453c9303669618f398b95ac2e304432256811b910ae2570009c5199a110ad8424f135b93d99c375243c37fd36100ab89b88b1997d3ab9eba0bb6b33a8774b07c33a589c236be155b2df1420e75a0962315eca254a1fb01ed63102fd62f249c79dd051addd531597cac00757014e01366b771d9e06e825082a4a310f8f72b7cf644e56c59f751affa55985e42447adc6775187170aa0093ba12e65b1b3a2aa5b3739cf2b09c3677184d6302141b8eb4985fde8a993782c256f0ce35dc5f973cc7b4987b29a333e38ac3131b63638003c600b5077b6b5b7b9a246a02f466621ed67d4d419c65ac1144054120439424f58d9f776a9a3a2596d10de267b20848c6245350e68b593ec7b49c877e5614be71a624fde99c0423216302b3106a29c85698f1b3a96895aa97c021c9b539fa66230ba8c35b068c5b2565f974b112140db6588be7016bc1b2082be9a0f5394544141643b75270752bfc6920c288468330ca4b3171a715756dcb467ba635f7d17753e0c1d3778114227d8678cf63f580adf5407e9353cbc546068207f83b4f16ac1df250a1f8d499fcc9471de920faf2a23e27055fec098f791ca19b094fd7aef23201041378cb51501ad0691a39870dbc8d6c9ca2d6003de995b2cef5957745c6d04194d067a2c1140d7c6aa3e271b4b95ca49ecb9bb94254e562905a0623cd670befa9c5fb971e2a69151d209fe4494ea753a926b4524b05793fe5c1b55036a44061d8d1668bf0094cb14004d3759f510703bcb22d730091370e09c1022141c3b35035c2a08921e7a23c5899ece95136936b68e839b021a97499bd30dcbb1341141698594225cf52740ba1b68ea20768d7a8cf3af91f7c1b1a49817c04f475014b0b6ae38a81f03260ac672c6c5a7bd2b8f07b3e5243028a0c15aee58ade16c2ac72985de1525bb34f99090d67097c11f3303b219fa68453fcc03ec6c84aab448d7c308d76253fd5078764769fde087b6c955c1399b54ae068de44c0a282a7772154b50177b56c6a6c10a317d292bdfb4d447045072857a0a67dc5b87599424705ca9d6dc18c88134ea1c746ead5018d00bad1eca2b84217b53743fb377765b674d30aca06c79ae5c2bd0cc06e4f8249d8e5acd3177747d65a8692a3db8b1ea49504de28b67fa1ca3c3bb1b1365fbbdb3d40d666ad72b286b221ddcc505388819c993652c72397fb158a175906546e1c212609dc7b00150987b408b479bba5d290e0130d4c98c33f543da186bc514ab453f13404619e841c634b4c5486c2ab80258ade6007c8895554e819b5e894b1b6933692b3eef79571b8b38493c3cebb915c6aa35c5cc543547400b81b6058a6450ac5a7a81e8adb26f9a8367da7bf8cd2496031016ac92fa7853708463911780fc536cd54f498f807a5d029a24bac5c1b300351367e09d1ce68e6af97406c74f5c7ff796f4ecc10227bcb4bbc27044c9c1e7404bc15985cfc2dc166088119989ee32789bcb95fd0103ad969fa164bb5cca5cd5c3e6fb65f989a118d6a2bed2b59121b5000f64fa9fbc723a1969b93ccb83b661ab1b25913bf2f6cb604e0218cec9c8eb2aff60c948864288ab6bf1aa1bc65b7894e1357173ab691630821d63b75380958ca91cc6a9785556e4b63b5920c0e3876646e6833e542a250399b16814236524f31a470ef05cfd2dc0e01ab2b4d5a9b70c4cc5832b72a632e2733829c9753ae5a928106267097bef54b47918aabfcf91c1a6b9ef3f1154f8a7f309babe4a75743409f7b155e6557807d6b428f720e0bf260c6bf\"\"\"),\n-                    xeh(\"2429F93D29E48EB6A25ABBA3EE2F3423CDDDD0ECF4B2090C6CA5BF4883F4F3BA\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-5b42bbf7fa109a95c24b6a71902c2e2d806d1d2baeb0c2068ef710a989211b64636cf58bcf43a3eac1119f809a26f02a216341f4b60b3c7516a1cc40572c6855bc29d006737ce64739268d0bc59718b9aa34a82fc9834fb05b27593a708ac4756c28342a148b2173b4cd023fad458b0ec6807f421401991dae15cbd8b01181294f95e0a64446710c41671ae3b298202fc44045541ba5be8516c8e52e743c503c9cbf69d6007fe79c61255872d312e1b9843300a6b436a96403bc33f6577bd4ade56bba41ebc964028ae6684c65e0c348c7ac445bc6b3021529676d5c40a3255930f2118d2343a866a6c5f11c3a1c85a790f25c5096c816166d2d08cacb3bc503d83ca9d1ced3aa0372a3235e06ce21f3a8ce609621c954bc383c97b49f23e2329ce9b092037e661b361f9bb13a285cd77c02cbb6cba1e37cae8a6264448e07401ada6896baa3189a527071e52dca12211135b6c360158fc60ec2b692c119042565172ae9c7c5e15e1b1a0952e772d61b57e66680b8359cd4726421930562562913c0c30ee486b023c8e36926bbb00f1fcb4e89600bf7d79905794487ca1dc5d69264fc56872588faa81a755b3227d2532ef54f8b0a91b8a6ae66cb55d34197b7c71e69c7bd39f8276e35117e96775b6c6501034f81267222f54a3f7b94e4a7a3e3ca04948b4f17300b92330d43a41b3de69702c2bfb9272eff89868551beebe890cd002a86d8566ae5cf47a4ceea731ec574684533796162ae9f206dad42272e8a7f7e7c97f93334cc833396324a8654480e5193a8e0918b48015de487df1590b0f7627cea9fab8c3bc1cc31c52a7ae3e7173a7a8c420c7090cb0cfbb0b419d53af678b5db9244dc8b8645f6c093f1b14ba5b65e4c0b8a875d4d86266aba296e648670867b7af5ab2392c4193b9f83052425362c5ce4a45dfc3e5d9960ad3b392ef6348fc7a164b494f75476b78c3f2557cb898a70af6280b7053823727e18a7130fc777b7e81cb8952f23b9b27dc02447bab51dbb9c0dea135db473906987c5ba76b0424848bca4e09864db2cad5e97adbd00629219abf8978dacfb8370f2ac6057477cc7829b6c452d242299c0b314855c5a5c61ee4557555795286c904d08aebfd17edd57195f831321ea02d68493cc994dc8370e219152f5245560875a88c3b919f9ca9a745ee8b942e1316a177a9471cc84984c31b59b8190a9207e4ac1ba253093e7585621878a3004d21851f349805bd70573580f9a98c97d6a2e790c0305316040f64533a6bfdce19d9ab8658ed26dc39837fddc2be9c66012eb76bac7b8f2c05361ca1ea7e0a77ec18187565f3c4b43a6397da9a16a1987ac8c700996124a10789ac7e0932fb820f4f18a9a7675257c7cd08249f4185a1c7ab357470e8a35c688a236b4191ade41bb9271a3798380d4a2a643e302a53396fa8976d5b2096724ce85ca4cb36ba8f7bb470f534fb496a7104675a0367b05f090f4748145ca680a489fdf719612d52e610352462605c1a43d39945adbc42338424146c0707cb28b986888468b85f5347c8ccb6456dc442903baaee62f4bc1b56fb27dbb50c96d9b359894a823b812afeba2ba39b8af7227b8b58580a2603111a6fa511ba7e1c7ac4a037eb53a8caaa31eb551339212048865f4a5c8aa207ad8688c1e0626fee782fb6c0b97f5463d8830747b3eff7136a1a7a83d3c5cf5b32bc42b6bf06b4616055ba6b53fdf365b2c6209fc5239ad269263bc9458bcc2bf45cca868b4eda432d35a0caf361d9145a4200bc9a770b5571095eb18cdcdc407390099d43194fe096df8133a22753b7749c7b51c11b4b7a59427590f71091c969ea619601d494c91cacc34133e0cf75d1d34235a45b6977aa39847a01e1a5fe4e2c2a509a986249c482443cfa8cf3ff9358541757a776efbd7148383ac98289b4d68a579ac3fff02adbe7236e6d06c8416be80445de82619b065436468b0535906ecac1f563b5daa78b89c6ba5d4283b06795b4f88022be4b1b11ac075e8b571fc7af7d91f13334dc18a317ab4794ed69946c45a615c19209302cadc2f50c767840b397a9934bbc74d3d990a13e656d8a1347d4a46c6676402d563a0e860df9a5f0a911a7193be4b162428e0cb68b66b35146de6b2a57871bad3b166bf4a605bf3633912c31d0cb2e100c00ec9501d0be84468dabaf76fa2356a58155898e69a3c0e7d683c\"\"\"),\n-                    xeh(\"B65043CD3672CF9AE2CACC94F923CEF63B5127ABC63C2A5AE6C064B8C6FE7C57\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-d4f6ab585b2b11fc091bb28a92ab2a5d061a3e4890ba687cf532201369883ff26ffaa019319b6914b8a2d76091aecb59e37a0916e5380f2143cb34176b6310771703be07305869bab8d98fd0532847446fa156446f2ab465499f7aa81f450b09df23ce66d0c0e6b82579425748da4a4cb1a13f711791300d21c0bf8a5191f3a0817ed4519931150e3161bc1b076383056db994a3775a27b61c0cec0e5c3584295b01e9855a188a184f78baff6a4ecbc5cc1b0227a5f12498d0b90ecc450d5a278d74807af78b3ae94bae64a3baec0c6b109a57800297918bf949b69c5c905f944ec8cb7e84865d67382c6e3546bb4c891da34eed09028bb3677ba624a9d5c967e94b65e24b380719517712c12aad85672f20c77b19e477490a411389b5ef63429b15a1a8d680b0082d586955cd67163ea7a7c8c26e661c52eaba8503b14b168c8c79fb7e73109b135c7ef5790afe65853509196b099aabe81a525a0d6b6b3cb2d5400a916416688d8f960d1607c777db22b3b2954cdb9e3932432e24805f02aebf672e8e6640d949221d3570d901acd9863566f439f5a4525367337b718536623b23c16950dc59c4eb9c00b76e0d11a942fa4e531a6152ababe6e54c101433b5b41c038907a548c69b1111aec34d64e084863c950c4903493b768b831a4acc04059083d6e7a25bd71b68dc1d10309f4edb246b7576acc70838034bc0e050ab40808a298ac7571d6a392bfbe57ce2570f18f35a109ac32fb9cb7e5a1da9748cfacc022b15abcdc469e79319bce47262012334478f301c1c42583ce84116a251a0e4d8aa38366561a22552eab180b1634442138a1c370d23a6acd393cdac517f59acedea7e620b4458b03585410d3edc5264f9375ceb6df9f870c8d7393dd0c2394882179c991933b8e474a85ccc6338124604727bab826553927d86541a4da61fea2581c5d15cb70b740e7b38b1787d0ea7acb6843fda6c5dff60ced980b80775501120c46f78cbc49a4ec63a98d324a9a177bbdd74ba0ee0108187ac0e245cfc7420a9294019573453763cd4b9c1bea9366d8cc7c996853c5c172f9b0d667caee2395b7a7c7fa036be9ce7b59b96663d260b69940a2a83624a62623e8906352939338c724a038337a59f59392f759c516cc417478cb7fd8c92ce868127e156ad4abcc714328ce67e2082cf2805c3df4b5be17b29a2446fbe26a50a54afbfc47bfa27855563b64e3846e934311f515f20c68860012c43195e6a45684eda2de3f9af70549d3f41c0b17519b02a7d29b076e49a3f80554c8bd7cfdf12a42d9b511c4ba187845b5b725b1a384febb470e3063312e9a05e846fe28b155dd00253a3afb9c2143ebb0683b03457c937efb1158fa93130058213176cd7888598e457d33cc6a600c2fd465b3629cfe84bc51cb3aa8bc4111626bb57858c00ab7b8b13c729a052bc222b06745b5181bf1c58341d239db92378a83b20a7e1299d407295fb94beb2c111f07c57401e522149f9c2b0a6d369b6f829b09970b660aa3dd6b0792b21797716de834286d662a3b03c38cc9ff1aa982dacc0d6892cf01492dfc506e7c37ecb8b82603c7d65843cd011172033203e294e6920b2007631f377cd003d8b9a4421614cc20e126d07f05205d0c1883910d9172aac4864ff7b7a8b1a1f5a8c773427aaea747db3191d312b4f4a82b7d9b4ba69313e6b7cb310507d03f47f8186a15d49030df21c144b639a7721357aa2fce77149507a7c5430d9611d0e7a5c93e54593314f3749ab0025603417173b13bfd7f32c6f854238e2675a948130ea2213a749da0c18001791f31755ccd829d76c5c62eb58554277f262427506cb17143557c919443922a09c1b735943c1a411e9db8a6b5c0dfc73a06d49c86e5b5fb03677f234bc97a2931af2ac804c0a9d721ac2468058a037e53346175981c879be43400a1c0760ec3096a56c0b2f11c9b97a87bf388058424faba04abf8b4d7f5069a4f26b14e39917b7858465761fd802c7c8cc2ce11cbdd04a519bbed86261f3b3b3b07174c26008b4d71311a951e0584100ea7d97881da990ca3cbc1d9f596a798cb0b1f79353413871e5a4f093b4825a47833a99994848af3378849b089b3843c7b153e4dc10896b4a6aa9848c17cfd3e0a0c491b90587cd2611908fa04bda829f0b494b045f938e08a7bcf1212fd194fac918ead125d88e6c4463a04689\"\"\"),\n-                    xeh(\"6C8C075658F4257D42010EDFB1D7EA290D3344EE6E4C43DA799366985AD52243\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-bbf41352fb8040963385438d80125b7b78a7bb42515971c90c01323d9b3e75697ee3729f7521301d11518b92154436843987531887631819167405c36c35bc3be88d957053237bcbe1fc59fde76f1fb1c0bb4ab166ba098e6c4b58d26ba606589c568601c507a6fb149e30a9ddf126a4491812813ed0ac12854b3bde1b683cd23c588082066303931941aa5856bb94a0c932c85f9b9a4796b9152172647221d3e611b94b667e0985bac481f69ca20fa04dd57c42adb71ddb51933ff36dff38bb580b9bb0a666e80372c8e2b8c29a711f484d11c1ce58025c17d053196b50ed28342fba9b24b8093b7c286a4c1712346cf886454868ba79d53fa445733af9582113c85408c2e8473a3bc358af200cdeea56e44086e1179ed300204dd6b39815616dda5923dbbacff091970a57166b0ab5f1b25e1c1d2cc495151b97dd1aa87903204cd3b3b19830ff010d4df31ac3c7623ab64d951c9fd502ba14f4c884661d65d249c33b2f8d225c81f99f3bd88fc5a71f40722849b6b838c754a11a3b8bc8673cf900dc92b6f4f66b139c76a420abb5a2be9592ae1f3045a8da088871b45ab66610b64b163b38f641beee8a9a8f13a30996c262b2b9231241b34b5abef4830dfa922ed98a75f61cdd59666e3c728cbc8a6132a343a458beeb0702fc962439b2afe7b971ec62aa593cbe874b8a8c923f963060d1ad64bb6ad1dac893cc3ab5188e7943cf184b7b18ab26133ba4109a57207147f5e25e15302da5e82069aa721f77557c39c760d28cf37715f7a943de605193e29a6a94ae821675eb2b3f08ec4d7f0a99c5e71cb01292b327c107b61e6bf99066d74a9c8b47e99a05d8f2b9a1a5b12723c101220c57b509a42c5b28e853dd75251185661b61499ef978bd1ab9b92864ce013ce2123515ca5aad6b108660b4ff1492bb124f5bfaac592107c2678c5f04c2b658bd31cccb7a09028f48a245e638e8bcad19bbb2dfb6ba3bc10c487359b3b0421eaacdbe033b6d7a8d5d2311bcec5148226d4dec2061265c25b0746af8c63cf99f687a04c237739d648de7919cdb59973ba35d85187d20212ea537cecdd9c68de59345fa0dedd31ac6b21a7053adee561851b7be01770e07daaf903c2738dc835cccb05f5a931e2c4d2541a8328983d26b20de5bca159973bc01301d0541a8e311ef7046ee9b51a0f67d5202d0ea8c8217226a622b32b684066f2a000ae22cb1e29b47176e7973b3e9d4c18f22919a89a6573147129a43998886e8d95c804c15a01084f3d81d7f0288cfb34276536389344ed7c09eb47b9d20300abfea2a0b2878090819477a640e39cb7aa1643d4a59bc6488494a0ec3073dad9706b752c30b123fff3a1e66a8b575587e3b119d83e1b833893056b696ed49a399d11278f23f456b5192fa324fc4222dd247acb005dd50c918893819545f59b8b5550bd0a3d97ec24a5c22d4b8fb12290ce4cc96528893f772dce5c52dc0114f19c6ed026928f1092349475a020739aba5f5a45b8843157a76945dc84e7284572395345e695090b37edd895b22870b39ec07b36867b5dacff5392bede2680d74cc2272713be24ed37a22e33c36a84ca9643a46c68112a9d12aeaf67bc3160080113bea680d9b1bcfdf75be1c18c9f2e44781b18b59a090be8aa957c366a4b24a33b9b6d055674593470f37caf456b367fba266f34160d4cea1605d6140be110a93b2a57e06dc811b67572510549889002ae53dbdcc758fa1aa2e4bce4d6ba0dbd09ff3f736ce630c7b454096d6415ea32b797404f598c4b02a3dd6c98332b7440735a71124178a0622194993b442c5596bca2caaac46d77f6713a547980399c18e5685cd9dc879194cab66b99de4e2888952808b15c1bab5b712ab3e0c781b209162818cb3985b77f4e915e86779ecc5b2096104f512cbf1162b9aeba6a3546397e608d23861fa3aa5847a4cbea7229f5338ac4161b9765d74b175a4e95a68a6cebfd6ce796214163ac5b314c0deb2a3463b1f7e56b6ada724a2827f60647a92ea4f33d36d7683402fb12543f73a2804abd00371073306f06aab9705819091c9afab226514bed5c46f8c3c8046787602501d9d4561582164baf07497d09beaf06cb2a49627663e04cabf05e5bd55f9c0f75ca0a93678ffe69d7f8034b4f0898ce5ca9a26f52b3bae41398ef444b73decfdace24a6d62657cfe717bfbb904ea4bde70\"\"\"),\n-                    xeh(\"BD990171C3252230BE21FA7F186A121686187B77C234C37CA5122A7AC77E318B\")\n-            ),\n-            new EncapsulateTestCase(\n-                    xeh(\"\"\"\n-b36a6f80ebac6014cff91b17321b0fa32c4d1eccc3dec3707cd34c7bc63e62d2b57ec0314b659dff4263c0f2c5fae2a37a84b0dd415275b3452894904ef146f5728a76a56c9447988767390a693ff7e91fa6e36f3e5a5b42b97f1205704218379231169340c416f4737e06364b935186e79a6bc0912938ac1ef818d57878ee872af70c7f31e8a5da0746ff4137e8f9b6bd7b4b32b47e12660b239c77115c72741c74b8dab0fcd07180c35e0adcbd2d58b726e3775d288a6312aa158620022b623bb29e141c33e0532e5dfa67da9476f49a6f4e6b001597a54371be84d70d04340c2f403db373a1afb102780b5050c841d98b10af489a39f8c2e473c23f202f05a20dfc4844cf1126c562cc9610a98b0a2d5407169db917969b1aa5c314ccc96290d2c27743b1efdc410802c78543ae40686cff6b3dca439e243c867d70bb957086abb6a91b49c7a39bc2dd107f65c7bba534c1216857d2b1a7ee99ca0556b3405b25da0a0941f403d0e34677e49d1ca84f267bc86ff0154614ce5b3526aec88f95285c316175e15b4fb92bb3d2a99d70a0259ed295eb87b90b5b2f5e2a757692262866c70a9cb8d843490e563594344e05a4051b3155fb8817ed53431d5c0318146cc31b0c524b6410d53aa0612a51f1c763941c4cd42628f212c04cae54b6ca05a5afdab8ba54f5666a13396006afe7005f612180002d1005795c468cca3d778938e187b00bc29220266047b22df76b18040160a48e6378c99fc5afa4020fb2b135ca913c78c73363d93d10677bd6764a27221ef2a2600f5b867b52c375cca78846880ac448f1086ff678220b7a238675b740c21bfec76559d573a6a84190c750cb502d9c7663d50987876b607f548ef76b764d03b704781d3b324ed2d7c1ad285a3e1ab1e5d6c7ff49495825b1b41a5ac2f524bf27c2e875aab1023c5f058f1a7881c3e60ab9fb56d15562b6fcb8c8c04a272c8ee6c807baf6227330071e6c49c8c805b89b6acb2025b13c08fd9916cf40191b9520409a6cfbac821fe8951c027f84a11dce4c54db98be7427b724331c64169aec4304cd71128448473f599eeb8239b1463cbd43c0836755170c19b3108dbe42bcc290cf23619a303230f9b0982c3b7307734e940807245bc097649d2eb9ae2b0695fb56b16cf90eecec1a50c5157d48098a063b53158855c9a1f1db9ea92b7bdc2488bdd28c095ac4e3374311c2754cc56dc8e511a5bb4cd486cce605527d594ec1dc1356b9bc938c0488b6b6d53243f2443223ba200b0c32c6f49322545ffa8a2b1bab914a72918a658b6a053d91249fe0c20360116eb3090015c161d4480d492bc7644762a48b3f6b558eb1f9b34cc39398cb266be91c414a3ba790c9c92129e5d40ddbd3150a5c002f763484546519c3a2ed327192bcc80f4710e8690a8d30a36059b12df6c107d1a73d9bc57796ba08fa01fc0c2a4f8b7a63074786729e0596615ff4b7c957959ffb1c5537508b191507e16d33d1bee9eb2148618bc8b279f0e92072b8c037565251992e87db4c0de8775d151ad13b2c375a46688518e5a2c409e32b9f314e3b177d72a908f3fa0010c87724aa2a94ba6a2728824719c6a1b0a2e07c7a364a0a62cc2730966ccdc96eed27341f77389a854fd12b9aefc0aa4c59a8aba457c57222e7065be09b593dea82279c8f67971a46878bf557b8dc095a9a0241d3b64ebe02137ab14eecd7410bc70efd3c08c1d6220f597eeabcaeb4a7b129ca73fd96872077577e44c804bb55d02607234961816b85944913dd83c5c835b1c0cc94f871a29073b8912973dd430246f84780d51ab9e163cfec5bc3472e02377bc9a2760ef5529568a4497c556e9a5f71526396aacc3e86158ea4189906b8ac277a90e383e298c8a1b98623cc909f18c894daa83338bc3f3b57152cc472889ba297a533d0554a3186229a8514c9c4826725249c61e4411963329eb99a37a4337e24c2257e5354ec5c2e4cd85bdea15c4e16cffcc628dad7c3ed9066287b587cbab64f0ab3aceb69494a333d240074c989cde4932d291f8edb065577985f68421d312e429a15cb21b31576c8d0b470c2177cf7369d45ac839c5c191acb40e62a115364c8875883ac507e5dc90a6cdbc6a540b396b422e488bc7d25c8287b79efc32085758d593b33882f218e758a3186d9cf309538fc57b81edc3ad0d228aeef39b32aef07a4054c\"\"\"),\n-                    xeh(\"135056EAAD8A28DEB1BE77EEA30CDEBC7B3DD89D1444DBAE145F39898256ADB3\")\n-            )\n-    };\n-\n-    static DecapsulateTestCase[] decap512TestCases = new DecapsulateTestCase[] {\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-66c1c53cf37af5756e10648db20895447c40e147649357bc19a947f98a20908360dae890abf92f5db10deee57844b51bf15ca71743cbbbf647f07ba8f627a8e7bc12fa29c941b2809d48448147c94ae3081e772b4321a6be0ca55632af43bc7991483c1b4235be2c4e2582bec03c4531e8beadb504ce55a3d837c8357584d23bb430058833ab8d0c5912255a363d5b623bc88e70a293404c253127abdd3495b2d6cecca2582c7544280cd0c3f779e3facbda109a7b423b29a1c752a632c5e4094063c9a79abdd4947b530c3230ac7e567ca412b6217da030ff8a120e75746f26b8dc2429d76a0a5a06b029f5174c1079487a1432758f699032f2d32f218b625ca593d3d26f5d75b0c5651358ec8a1a6673aa7010af290c1bd1c6ae795d1b7318d4db125d970cff78c2810937a2680beb10b1200782d5682ed8ca1fb288212428918cd3517a7a999cb8ce4d442a9d82c8b13c5337355cc63b549c93c9c6016bfdcc498885baf837b360412e9f517e6f49baf1032620585b3d3270644c9530327382a5bd2ee0a538a03a0226cd1e6103f32b5e2b946e03839e4dd247f6957d357cbd1f1bcc889511306917a2377274c8bf31f41cd66a4bc93a8fb5718e88d88e1664b35cd91a7e324d4cd86a95f93a49d0aae96800a2a23b806542f9f02cc86c0497dc6f9933c772a7b497da3e64385f14c2c9b1624f37092d5c1a473e963b3aa6b67641112f501e7c5981745469163b8830113bc7f77a254750541c9e08b728b834b0cd39528f4a41e862ba4a0cc6d4415dc99a62a86562af7640d4487481c57009e1641376918db323c54b98ffc1a877e4b712d99d6708172fc6400da1761ff6ca603649ccc93824e7c601b75272580202c0434a199ffcec00b2c75da4ba041e766a8e9141785457a148517d58981fe031d332453553abab73ad287cbc610cabeb7822952b7e79db10a1dc4729f8cc39e3003756522de9cee0385383d54fd363613e8727c06a02dde3ab92c8926be48e6a386224daa106884eb18c7cfa1566ebc5ba6f9583c9a745bbc2c642522b0141743e6837e4d9a603fb403aca55bfe509c6e8499d78b750e516b8a67709468d3fa3b4d74c0a5f5a4b5cb94d8ca92188437040f9312aa41edcf274f0aace043862471591e84c0e05d61031d69f4fa11f4e8a0977673ab30b2bec0bccefe434b55632c6057842d977027ba616e6a7fec7340bb20c7331b4e2f1044e9692ab0136a0b285fde033ffb25543c5c9ffd83595e380f8e831701b1e16e040600c1c7924b6bc42331d987b7d63c007d76d198c0c32aa3e3663ca7606454a214821b15b8ebb018026aa1a618539c00d0a84c871c1baf016bc426b3d9be7598fd8148d63865bd6b455fb8a47562e95666e18405367d4cd581162fb878d8c0c3d627597a4811eee0963d4926861ea202d46a6a6e94e89b3cfdbf436fa2254f060ce6b80b4bdbb98da80417fb53eba8286b58644d8d84654fcae20906863fcaaf89abd992b176b05b2924bbe566728878b5e816b64a532ce2cd41f5a937ddadc15baf23023a19932b337f508c8fae504a3aa24261a9bd20701a2d3ceb3c72ebcd5807d358c2ed45d0b84092d6c93b74caa20ea4b5db66369d26fe64652270949a930bbd0103ea7d117e6160d9dfccded58476b94ae90036b68a40b9bfa61b15c889467a0a01342f843be8227ae9cfb1593c240a8735d8105a36c2b68e5ab97671b63a1cb1eb07495fd3bcb380aae66d20f3bb096b5db9944d83196b3bb3e321dc76c3b7d6828f366585f75a3c6d370f5580f22b385319483c9c19e6e81cc22690b18782c2d47be5c81cbb1c055cad84db9b06b15355697ea23a2374f027a63197b46f28a85d089a120848e94e9838cc72d1aeacf7d64ba69a93635c6a10ca5745645416e071a48056c78a50a0d4a60412966ab4961819918211a661cb839b01101798583934c9ce0aa447170b870306cfa02a16b9316f4f22d9b958a38b24960f0203cf2418495446c558a6ed8706d8c949e7b14cc168c965293d128ca16412ff7b221cad771d441ae3fc822d86645f5e266aaeb1df56a6185747e3312587d1b5f51e13e23586f9f3b1cf393bfb24173d7e27584b061f4258ff3c29d27167f58999b6b87a820b56fc7846cd3a0953aab07bcd256cd997b4e0172cfbdc0c2fef1b5fc616b03d1c3efaaeb7d48c64a0c839085160b4a5732eea1a09177c4895f1b454990da691770698b54c8cc8154c652046cff0fb30d40796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\"),\n-                    xeh(\"\"\"\n-ea231b200f36afe0ba1bbd719812ce994d5f6f2e60403c1e4fc1a295423e38a77d66bb06645c4ebd004542d2e39655a1bcc461af8b5d1882b8405902c8c3f63082d29f263cfa9527f04d8ac9eb99b9ed322079c5bd62c8b29c8a22992eee4cd6d7152da756a405bb0565808f3ee3d592c659b6da737b7ebe5f7196b859b04dafaaa10056488d4d455a939cd640a0031dcb9b4e5dd89bd634ad9c8003b924f76702987b6914630c5da035e34ddf40af1bd6fee7eafb0c602d91ad848f45ed222ce1334bfeb6f69a01bc4e5a11d044a421adb30dcb08d86460592f2b61f67ff0f02165b1340e9f6e93f88fa8d9bf1b82da7f21fcdddae82117881416f9b48833cabf7656d138e9dbcb29e0f4d15f11f303227a8ee6d04de284d9c76e0f35103ab4303e67ed76ca2f11c2d440e6df881c39fa1f2fb435b6f8c517c6a341b1cdf45064e7b67c1cad43b2c171e5557bb78c5ddeb9af3ad756451c70f10a60157750d2f40a5ab9fae21621484b110e7232b9ea9c52ed2c1331045d555dfe87ebe3ea13c52966080fc140728a26f4438fd25b4e5559a9ecd0c3a73e23c976abf2cd38a1e2f61e6c17672b569c08f3c2ae49add14370a5c9bdd3e5e6a4c0f7b3369f95dc33c30cda832b349af1f4b8699ceb1e17d3fcf515c2358db02b9cf0ec8b0706675e5003db6cf2182e34dd9d030e90620567fb83d83df293092efe9f0e935d79bda625826d45cd4fba547005b9e416c07112286eff057429dbee4822b935b3e16f9655a5fe6f362c58c7f52c5cbc75b733911378f174f706e4bc0b37848d274a29d9de894f5dcca67f6b80185b371f3b37e43d56e374070d6831f0ae48ae96c15ca80bea4eb6f37fb528064f09eab83f95d40c4a80feba2b1860b6c4bbf44bf3e4d4a72a28755f00126f0e4cf78a81cb1d8ed56f615e043e7b4a4f219c4f0735f68589152b5e0a81241ed434313635924eaddb815d0495d5fe065bcf5c6870b76781e486643a858d972e35d9c61be9f517f28963cf836eecb05f24777f600962ece48ab25cd32b80b9e96924f7ecbc1e3f29e011b086d9627770670fb7ebdab4c5\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-9e28069ea8b958931b9241af966388e1f4c336e0a960b266896b32cf80889750ba87e53272f792a1d0bd68ca5d25035f42d092c37882ef7c627837cdf6c56aa0185facb85d03bb8c353c1d3155a94286245ea0b2476b885d7c298ee079ccc30a717b7826076a95d49f060136529855beb163265851fa256393bc590e2a7f4fa83fb3a0327fa56c3f55bbc833c3341caf82690e1596c52f00a63e49998206431b564542cc0614d7af2437ce879223f529c0db41ac2f8b8ab1449eb8078f391227dc6c62f123950720ac5c841ee96a4f80a383907c81dd6b3e2d4a040b15301fc76aa6b00029217b1d3718644672e19998a74691dc996829d7a918662cc42c43b96a1347a716f41b11c9635f4a425260a1498adc86a6a111b2997522026c6a1a0f4555bbfae0aa262282c04c1058dc9dee882b81f3c8dfea72517717f1f8b778752cef58ca93a31747f833800c632ce9072738040c0a528b7704e0266aeec4c2dd27085a702249934bfa7b47d25b8f03955c2bb42cdd107fa4359131943aa4a78f716c26d2f448eb97249688998cb80439f4124db1cfe2d41221640e82021cff731397f50ce6c9c50b181a4fc8af39680547757f481598c5ac74867b4b25fa30df83192eb57019d36b00164184792b2b1832d107d0a2d404ead54f380aba0deb8fd10a6a018c9ef1b7b7c85ca8b3811ee72730438867b6bb32a8c517175c045ce7b562f9ae7d20ce0eea053b408b5ac745851c0e735c293a7bb89d4007c0761513962816a57f44643e170008bce2a64c6295c37392f1207a9d0bcf9fb0af7c4b7956bc2e1a7cbed9e5363a4a40de2c3e2d4121ad0acf932cb5b3613e052b109038160f9c4f4d5b6daf20a6a6334a7b787a2a1754969930d2a9a8c68b67ef4a4a0aa86e22e28479db632f0c1eb0e96c00dcc309007e4edcc97da65a46227156fcbf7b43898d44c419a099cebc9248050f60fb5e4156679622bdcddb62b70a8edd86a31b766f5818afc89932578a2d0bf845da2508c6e86c08414467694ab04321cbc77fd1762e60553d098b80bdc0cc7ac2bfe3eb02f888a2141377694506ea69341ad51d02065cbbe01bd1025aaaf94bbb2bac27e678fcd7578ef9bf3026700d711aca31cd4a9641a25286b26c034228cd906434c3e2a56f01b54a98878c6842b9bc9c8d95640bd496c0956446a0cd88d344d552a838e29f48850bec6b4667749fc4266ef8d5c47f8b21e7e108f8a58d44394c8711470ce8cfc92b2e49ea5b8b15772e4389564ac8d568b700d11eb5f83d018514d5d3acbd7c63f667ad9340b2dcfb972a333df99ab2dff50f570a4d0001a413a98f4075acc5241b5e6a6132551b9c4c1c22551b5a008df7d5a218783c2810b79a52552afa922de76dc4b89d87761cfabc81d218cc3259457316333c21bc9b650f6383c350e6681c694496565fa7203d05b0caf5a22a4ccb1fe7f00f89297f3dd02915eaa2a881cd41599635abb85890649f1a4710142c4aa4b5e3d71188562ef5205925652ae7606e30dac7099495ec939fc5b0778477be94185c649c858e146cc6750d3a1a98424b2645786681a1b1095979f2313228f96d9daba787a257f4e27a4ed3377dfbc71ccb9ddb227151203798b58f44a280c733a8aa8a631fa303b26c33bae7b088121d917268aba41cc797b7a3336f12101d5ee8900872b3a1710c885811a2d8c4f0a188d4352f259b62da152bf2a022dbb9c913c1c254a44287546c01053bfea0bbe3d05a24f1b70d969feac7c7325ba69ea981c5e179ad564e7ceb4ff38b824f9754af15664ff7a807bc34e62222217b96f364907916be6ef0cc99b014f3527572e0a6be517d2225aa6eb41e4c2a80aef4a212092bdc186598a69b4d0037cfeabfb13b9a9bc0019c5a83ee659100bd76a1da4b30b686ace6291877ab9d834a641abed635b8f3c536bd6394684ba283da1fe7797580924fa6a65e9de87bf833bd2e67c4a9e037aae0b3eb1701bc69add69127a98a5157a6b3f8393cd104c31a24ad3e381997f28c482c5dd6ec24d7747b559a29d56c0f655838fca25c4ad49e6cab35da559b354b55357748edfbca6122601a945d8611863917c48ba20d53b71909746723b4355a620b880cbb63f260ccb10db6d3809a96740ed153dfd07ba60159a3194553fa93ca28513a65b047a7350a0c6f43f7a09f3e2771f461bbba1e3508c8f8931c16ee6c08e1761b10f2eee40190ab3fada5811a768b72674b1725bcf05d76c132f99a60d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\"),\n-                    xeh(\"\"\"\n-cb7eb96dc952919624e5825a24ca80f9e2a313bbfa357af50438fa22870029c8f876cbc9cef450d124df902e93618d8dbc8d1344cc51fdfcb19788872aba1f13f673c387dd64009e1ef98ed34dd5c29d8849f503dd064424b39a8b55bcb714e6d09877fd5d7d1d721b2b32b871cb453b1b00587038f5c313b807b356bbf7fb9a50a3573a2af83f0e893c32a20cd95b9046cac886f74967e6c73e718b0cf8470312cf1a9241bf25238a3bb54e01b471bfc398b5e23ea7cce32ade3169dc472b25fc7cb68997f2bee116c86415245beb30a01841acac6bd06c82a6644aefa24601a2738fb1bfc2b08199d1574dd87d9b220d12866199c01b6c3372c204855ce8884ac7393da5479818f26dacecb32e43fc0d9affa881b4952aa4b95b8cc563e1cb4b06ac2edd783bf8cc4be2dcd0d3105f73c593f40771bba6432c654f34849f704ed007652628db269bdcc6ac14f1a15fabfbeb7529a5f3d70244fa2e7bfb4efa23199b88defc15821581f6b3ccbcf3fd75e3b41dc8a50bf21309e395d8e616d7655bb3e99e3c4cf09e192725ee5eef558f84fbaecf144c69742fdb40aee854b95c80878904773311d832cc5673ff0078c4f877d4f208a538ad243ffe87b4698af6ab0d207b338715518fd794930a8650fd5cea71f035623fd19dafcfadea4f53db42e76f5e61c46f1da934a497c3142ceaaa1d2b514b9149f34d1bff9c5f71206959b6e24a034e5be92da9713d79bd885c6500ff3dab4082d488e4932420cbd395a5d612245e81e8824d317aacefa6a4c93b82f2d99865dfd5d8a03623b463f0deadc1345d123b8ff876198cfbf945c0366a20a0bf6d5ca3814504591dfd731d033a30e2728b74f859f0b91c9a16bc310450ebd69d4da09931fdaca4b5721ef2627053a47b8a290018ad50a4c2a0e543b130402a323bd94bbae64a175790da350128e99ac8d9636ba12f5de00582a61bbca9acee2eea84be49dbbbdd730e0c078f94af4bf44ff8a8de89003867f94bbfa55bbd905d7a260c23ee448c198fc7a89787ce879c04a7a77f379bd55dd8c33c484b9dd070b116645a4a44506b8488db\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-1ff7b9950a3965da1037cc7e93959b73fb975a63af4069c76ff9b2a97c2727f4bf72aca77874771e938dbbaa1237781a7560c328b6ab6b372a93969a82d9a562043bb60aba1c6a2d35249e0d248e7105421a248ed75cccea32634c4b13d05b64be97689f46c4ed78b224a99b674a2f70a79e82a025a27165a52a3a656067de520a60858f5af6cfa39952360bbf94549e4046c2b65a6683994a5cf45eb465639f13bf7adc494b02384c28c5d321c7090777bce454aab17961cb786ed9845ea29bb8f2a322a34b921420cc800c865706be4b0de4c7c9e6f8bde4f4acb58433dd71031c23553136a25bc7c1af30030f543d3a86785a4791455cae59f8be1abb8e35a4b9ee2900e6c601f76044a3235003d963eb7383bb5a88deab5bf05a621e83c3c091c410c03f07fc8d59ca7def463f69a162c027ac38ecced39754c7a9558f3299ef41c98f779db82aaa7ce75cfecc453b801b0ca77ba505c087cc8a890a6a35d1688f46042ca7755a4804b896053da6114f6acf517136c485000237bbdf4829d966b3b6c97aa0b93046e6903c82ab552bbfdc1aa1bc7635c14c058c16581c771e9ca55115cc1627fca7ff650084c09a8ab4b8cf45a8bbe7162ad99274bc9024a96465b399c94b44af882862eaa8b98b32c7b280ac909aa8c0974116596f348aae2b4f0e533d291c6eb827b8894821595892258809dba111adeb3f184c490e49330441a57ce0b5f2045f4ab182f8764930833ad2c189ed6602e61c3815d57541a5b91beb442275939238c336a220d6f60977b0a0ccc894748abd21aa064644ae7a037c02c1246ea6443b23522886a290103f16c16b5c621aa67872fbe83603c47e6724374eb57c91c14af8265858f19161e756d927417d356a50733326e97ecf7a567736c67efb4fc18558a769cb30c756ab186d0110c10bcb7432e672394146d0e03d67794744f116aacac81ccc1bb04962ca331ce742167a654fbba262ceabcb9db5baffca3e3774898ffb6611c8698ef4af489a94d1e16ca1ec18f9d49083d712fb325f7dc016d5487eabeb33e5d996bdf5b8b45a890f099b0feb3521f82d335b7558ac204e11a305d8b1526835e65a110d813499acc36a5409a15a8de46633bf587a706a7d388c5099c73adab17035a347b041cb82938da6838a11513c5756b3992ca2a40c91a450505be4cb4fd9625d209110888484033d09f8b60eeaca65330beee240f9861e768ac7218a6e41a1205f55b411e275253706c57b97ea650c6e69876f79bffed8759ce30df61465b4408a18bb003a7aa446642c90ea072f955f46044f4ed7b9a9b82749e56ad470b0d21b67b89cc7ac784f9dd016a9ca5d2b025668421c25a100dbc0328084c2e3367c022b60fc6206e40aab3a863ba8eb1f8682265af69d15aa9d173204533a1a7ad94f693310663212e4aa0e63f812f1608e1f9903f0685c9b9a797ea5939869b5421b87dfa1ce818265d5051038a9331168ce01971efc06cf02a59c9e1a03373a600f216f779aa73171be66f95d81808daf63a26cc3709ab58f22659ca9587c01029d915c7554946b217044e65a6c98258f6a0a2608a9cdb4c35a0e06c93b19988c221c96b79729cc227ad5c3d4f558062ca3179b8a0b6c0d6de0aaa466c498065ce690278b8980c7c567d308b181b06667f297ee9caa28ac2f5ab454b8045eea583d20993bf69359be500247b3a2ff0b95e243af49b6a08eb19c00f31f3611837cc64b85d8bc35da9466fc12967b158dba95782ab771c134f9945df0b02644fbc949cc633419c48643764e0679a690cdf0239b3aa49a58e171241a106c151b75197f7432cca3d6c133cca0a4902ed6c299a479224ec7baf4243152877adf3255ea114fa01a65a53ca47e3a6dff072d991730414754c831b3763a6673e9b8f4f7ca4d3891a33c542380cfbfe16a650ab749d79e08570629116ef7d50338f26834e298dec8abbcf588f37b428f211434666a1c6041a3a09918293fbff54d35c75c7dba2720a0a91592af264b446105bc5b41344067bb3e5943d62aaca4374f92933e3d4353f1898868d097e504cbb934cf727a9861169582bc4414e46c50c41693909cec50beeda69aadd6073fc1ca3e1a6a822751a404730c3c90a4ba6a9f4343988280eca4c4600b413cfacb8ce2823f2a2b96f56d9d1effc2d3292c0720e7bfe6aabcd8284abd8c3fe8aaee1bfca30de00ed421da54add2aabcbc9c167ae2c0e8331df9e9acebb960e9169d90c036c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\"),\n-                    xeh(\"\"\"\n-7ac45cc6b87f431f05a28b0b6f8ec44fa020f8a0f798e4463e084e58c950d643a72fbdcb2a8e442aa2a9efa2345111838129097d942773073581f8828baaafee93d3bee80ed21e13fab0585b329de6348acebdf25e09f13c1edf96789a3e6c7b7e1143e0a5f408e33699c68ba140410e738e9501e4a087390970a86e212e3ccc18c62b4233ab94f3cb7faa3a5a8839d68514d851555704ae8a601d7e1df4f3e31390905945fdd88f0eb8a39afade14b0ebbaa16077acb4e3ffa41931bb057e386297d90045add3ff509df9650d86d2709d89a5fef748b15e5fdb8aa5c2dedd84533b5ba49bbe88ad78224379fefa0b68bedd76379b5b7a06235673f83871201316d9f8f050645f6d8031fd951ffb2fbbe4a66f0010abc8752ec509ea62cbf2a59c3a927918b06ae3524b6d94765f5ad6856f5ddb2cfc036f2520368a4e15cac62089adecca6b83e8b9896b48bb4aa4f33656c7a2ac3c02539c0525ae71481aa87be9b956ef8b6558f0bd2aa62d3be2489a4c477c605220ae63ce5b67b3d517eb53085a747c0566449c06c9a54993a2ab089ceb3183d5e69173b635d52b87d6c1e0dfd4c3f8a15e0cf2d2cccfb2d12429c6c174aed9d59ded4bed6ffb964e8d97d4d10ce0f2cb9124a4f88fb864bcfb6ac358824bf0e7408e19829fe038b481a4b161ef06b584eb720884865abea18a05a00d45b27ac0175ee1667f6feae675d8a4b85c2a181a52cbafd73d5e70becd0ad0b27b08b14ec2185e902bbadbd3c7a6c1d49a3a8e65568e590b44d12d6dff7abebd9158ce588d73a387f8dca572b51c24649e2ff02bdfaa779759b93a70f8d0e302a25b528e26a038298437619e4978f1af582d19a11ea772fd0e705dbcc92129e4e9f88857b0cde3da2055427dd8565b20e1531f701361b731bb2dc093f259a01941e255a1191718098e5477e27f7a3188339a1237e742d71882376b72f55bcc4ecbf03f1b29e79a1f0b969619755fa449f1727635d9eb71b977f4acbd58e5c72e89433689d5a2c759f7feb2051eecb6e4e2d3f37e36d863b4aa86d78df37b4dfcb453cae1c7869a0e67f6af60d90f\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-06f89c5592b91a8c7141b644db94cca7c52b0f36a1bbf6b0025b0b0e994b277b77ceec519e24387b7ac33004b38afaa2d34c6f87f9287ce8bd373a322d55c5f9e79c8f72bc17971c5dc77c2d26aa1cac4de8f7c2a613454105067359cc414a689184af5d5409d1e6bc4bea7dc2a20b11f272887c8491a0c0025163bb1a048d402d2542cb10b261e2f9c446304a98336a422ccad181cb53847275899d3a0c74a167c39245623620242d87a529119727933ec9d1b717c14980fc56dcdb963a48ad13239d7048773cf5269d3a5797016bcefc0466b6b7575024aae92e0c751ba0315505944dad99b54ac516966808197a714c7379e60c7dbedc9b7fb89fcdd96808d2c63ac13130824f5034c8843420abe07c837b4f853615ddb4900cb6abf3368765d0544c67b36570598746cdc8017b2d0a778213b7a15b492f4c9f462aa9ea3a99c9bbcc9f2052c4754cd347adc22b446690908d791b9912123b67cda366bb9ab058aa5285e17018ae498f1c7a1db6846ff7b30d3ef43aaf0c6bf2ccc574e44f29f8855b787ac63ca4e1a05a6b4a972608687b18696ea18ef69a660ff335ab54646f70350e5c236bc29835046f23ca2b46206f227b4d2f1c56e9394ffd70622e22c1180bc2093092307a34b9b4c71f514b8c890205fc001ab4bfdc131f58b751ee4011a55859b000088c6740e9f2cf1639840d0b4b3ef9cb7a133d5358923124cfb7c2131352b7e1fc590e711c575484304b0975415298c7ce558662ec621f9d1548b18188737b96e308c267acca09317453b863393aba3d96c9a99485ece5ce4dbb86675c21bd5a1356ca11e5b7050bd9bdf22418e24c966c04936a39a949f00f322b051dd40fad238a773b23f2f84a63675584a04b88676e0f864fa674658a1c2d5d7990411b7b8fc21c2e08c2d3da45bf55060a3b546ceb8e58f1326c50b861b7aad69607f4580236fc4a51e03b3479c8a25cc294aaacc5b376a3916ec41739ed11bedcbc445419331be39731d6c136d40a65000cbb046e48409f194706c09c6244401877501378751352abb7d8d52fb5fb47a76788cd99a0cf217f029c77ae76c67fc7215e493c8645af1c58bec08b66f66a92346b92f873cbd646aa5dc2b9b6e4c2848a4324a8318e9983932055c4f58f42346df1da07977101434a9378d1a1559819756646eef3094b5ba55e33b596b71c04d249be4b8318a4becb008ed71000ae795ed1ac873e244beb7c4071047e83a8b3c6c2be2ab025726063175c4bab391597923d030b5a9238b131383d15dc2a4bb812a8539f9b0b0876a23ae049777e6229c1068a37ab13a2406c6f7ba4591520d8816ca3894bf3c601fdf493e70c5f4b19bead520d25cb6e8439a548f35cafe81497b297341005fffa18b99754cf199ec90504f9f16f8e415cba718318437aeac50ba8413e540b963cca2202a35e356701e177ab0dbacfe6a0c02b506fdd6436982737f903b8a8204cbb07c380340c5f1a84685392a2b62620004caea2c416e61f7c7b0e6e202d92021628cb4c10d57d5b60ba4d771712d552d1f9c6f352779f8c32fed54a8eec59f4b3177c7c3e81e3ab7dc83a396bbe38ac0fa3ccb174442ce638c6a0fc1fc9c426b5eab83d0397b559a97256b2b0817ee115b1e026c445629bf7a8803ff71aad99385a1abfdb22a3be0029503cb44b7a35847bc675f17437d9246cd104bd8608da3005e14a632d69006ed4434c80594b2909fe284203571eac04a00a120c24d050f40952fd53ac0cb39bca50c28ff450a6e208fb26bcacc1ccfa89bd7e05616a395aafd2bfa59cb541975cbe429919b32cae4b1f4a4b4b97858390c164fde76bcdb32b54b3325392c385d647b265578a1c56dfe5a252144ff1c02dc2054bb53525ce4b3bc2ec190e3ba06fbba12f06707f060bb1659607971f3726b9f59191e6e7b252602f51eb281f454f1d80a60ea29eab42752df9a3ce376467f694fcd288c9fc7851c04821b53e693208867604def746f787ada2097740ec8462ac89baf84c0d50bedb539ccab33894408c5b4b91def7955923a283677867a356b78c5a8eec308bfc982c8bbdc9e40d7695b42612ac27f6c118b5379518b49e338738e830fb6a66488b7115d24895963934688d91fa9608d41582e79e5d417ab07c81d39415fdbb870a3f503f1a197bbda81d7c3204a316392fb75016f88565a73a51537728ac70111a4771134601afa8449cb475bbf9789541ad3f7b5f85a4f54aa3dfe0bfe01174ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\"),\n-                    xeh(\"\"\"\n-574c9a1db78f7ae6ccfcc6ef48b8246db140f1a0d94a5bfccbe8b807e08889de2b45666e78b96eb159a73916947c2ae930c389b6c858d52144ca1f5c6d66a43f6ddff5c233493592e89f196220ad4360503ace196ef8057800c2d05b5b12e98203986a45c0dccb4ce1bf84b76e3f6a84f6e8356956f0b05c02ef2552e135d90c61264c63033848651c71464108be23aa0004fa1ffac1f4e1022dc915abb7a9f66b8770386e4330d7a94722fe54411fe0388599e6ca1463c9ff6401d9b37d42a3039232b62a7f8dd7ea125a4e54feedea008d51eeda575b4ee42031c908ec52a4bdf61f1ebb051c65cb9f9c4780958f2fbc0fefd38574e7b09f48412a7990246cb64dd8da41d68f0c16468dae921d548240d14b3023c830cbdd130aa7aaa87861f58f2530f9052e84ade036b717b365c8cd897b20166859c95bd90a28ec0316a0784a9d30da3fc1a80e012ecef3d1b12f91766fde1bb4a99f4cb00a94fed0f345870881e777a6852700068f5d321be5311ac813cfb3f5acecc6ed2e0225e016856ca379bb61806e3dd5c264c31190a7f903f0691b92a55ecc40a0a683c09636842df5337b6bb1b2616ddafdf9e526b757bc33831172722d95cffb2162941ddc584e70055b1fe21eadd8ddcd04c2d574ded14fe924c0990ba81c2eb6e146e483d87655f139fc651a1070420de9d3d82e9af7591a981d1bbf650682332f3bec1ee2c291696af40d54289598327ce64c32c2c77a81a6b4818839e8a6145a9eda06570ce5a348a72e8c332015387298eed54daaef0d4950f1c94646e1bc80547209d23d51d50fc86f4fb4e32351ea2b7a6451a8caf36e211df0a7427a46d9ce462335545f133fc6864286ae2349ab61d1a993da4f81ef523b3f1ffc6141742aebf63ad97cd6b78df8d8f73b69a4d6efcfbba2c44da1f1bda3cb41e725221edcb4a7754b9d79fd8ea8bd2a11c73d39c9d10a3abd5af6c145964601a0478d9c18573907fa2d88ec51b56ffca7b51a7a604706fc035dfc12366430234a46863c2fc03f3fb599b7c99b58231c28bc571bc629192fd3f15092bbf5718e2644a76bef5af0a3\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-1e4375ab948b3505593ceb86f6d4938284c069ca2673f272b7b78479dbb923128983d882cac84076ccb047820dd6da22419aae702c6be0274273e1a5ae7badc7456dc8f0a34d8cce6608a4e5605c9bf2b5bc232afa9b32c9225ddfb87c24343104d3b14d3b86f8b72fa336344cf32315f296cb88c3e8a5352882acec72bb68470ad9170689c938f7a9110ec0bb5cc1550e1b5e26f44a99c73d3a5c3fd48b308ef854e70956b2402f1b5990070bb2f365cd057bac1f4599e85c82363ab851fa6f89e0ab188b28be11ce7e52060ad21961c26f037662319950e0f2c56793984a45560c427160315769e71f9e6b3535806bccb497aff0944d004a3f41c16285b803ecaba95789129242e5961ec48cad3a61753b631642065a378155b279874ff038db51a37f1445cd496f7bd220e5796c4bec29dbb9b982d04dc08ccb55283e041350688c9d2ac639498bc5eef46e7ee721f46932ed4c790ac18c0d11cfad286a2b647c37901b841984f7a11c0412ab8fd79ae47375476079d27728b5a01d537a1a37640a95166feba3b16ca16883a4096d511eaf1590e70c6ded992907e6bae99acaf8a55154646056815c8cebaf0fc3c789ab485ac0b8737258692b2fa8db2f69aa1577045769c92d8332906bba0e44cc79de2c69549a4605548e07104ad458c90c29a826e04e2f1442cb170cbbf4ae1bfc50a7a673d633420c56596b7b9cd966480143287b985abac15de74a5db1502da05088613712829500adc46425b54c080bb2a0bb1c9fa53f145a6ae655776df15ee60b38e014abd73579f51718b548cd418a7e7f29ce1c57912d77433aa34b00db00f3f20a00714e0da2a489b091b2e52daeb58dbeb759428c3a85219fe13995d9c0baaa468c5df3bb51c282d3e13166917487a81dcd837bbb7acc75d2c35690ad3aa412c8610a36da87c9d8669f56c68475096f853569914961e795a3795328e33f3e15c1ec940b4c5b4b5756c772d1228fe54f6e05485548675a6461f8a26ba7599f708526d57a0a67c0a20e25ab02dc03100687b8e375358b9d5c149a132a98fd29c2add61da49601d8b70749d18159851028c33af8acbc9ff37ab19a9fbe45a0f08b9cdc2268d6e727665429f16448ed840d0a87c34c3422ed857c69f3168820b0ae998702ac6f55150ae3031a54fb80912ba94fb4bb31604492f406f654855b447b39d26bc81b0d1644c1ce2a7f347c239cecb0cf89ab14917192c12e7a694581021e96fb6868282df0a4850bf3acfde5424781c571e8857cec1f3735a464ec74d859b169142e2e7413d2a02c5e93570e3b9bd18983809129724743a1979794a2500e04a409506ecf0a975f58bb0d08b36c1733927c932e7c73afc47f81b5a87f25878d327d0c375c38d2940aaa543f46b1198345fce7b7bdecad6ad22e12155bc470448f98bac8ebb96bb34b552ab3bfe5255c6783a76425b386613a112ec1dbadbf105ae0ec3cad61c7032bbe0bcca9d3eabf03ac6f0d4c5e500348f6581876e80c531197e62071a9454947b450614761ec95bb7072ab53e81d89e47eb875263ae74ca6a28b2a2a1fd44947756c1f3eb38519c9b2d6d63197e6459bd1427f992680b1a6f1480cdb998006a25cf434346d04942732c5617245033b430b4ca726b94faee24ca54919f0842233e1c6268b4bca31be4ca7be9b52851e2ac0dee573f7959eb896b0bb18064cbb9b71585a319c74b7716de398a8111214ae3130bac5b196e6734d3cca4116bbf67ca42492be22f56b538a8532c6acf4404069a329735246e5eccc2730c2f5690c53510bb2685909015874a8125178c7fc00709b2a6720391e38a0193aa96715f13ed628068ff4bba6e74c7be095a897ba3dc50f88b2b08a353cb4c4bf382a5cd72227cb671ed74227ce245268c38874f53299604c41f15978c522e865333dd0c49cea97289813a828ca76b93dfd3987da9726f0d3492cf13ea72ab8d4e82e73a3987b336f0cd2157de0b9b4209869412b9074736867b10fa82b34e5424c5998295b6a54793e9ab119e9c68049ea2dbef55e27327080c6ae71d69374b8314ce6110369b76fa363dfc201729a700528944f2bc23c464eacf51519f0aed8160d5ceb66d10c865604b3b4ab05f1c2990bf2b5ed84898b6a891ba360af171b051b907d1245770038e379cb727784b219a3c5ce49fe6273600219bcc609c8ffcdf4acbadcb9e5b333bc301e771315f8f9b17882a6ee955159ba457f9f019c41bdfd90776edd78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\"),\n-                    xeh(\"\"\"\n-2c3f3d5b5ab52392b227104e8b9c85303e6d579df35c1e7849ebb92e80ecf200ca9d9b9c408d9f68b4f4e5b0875047edb2facbd6a100c1e5a1465df22a88dc1055a663cb2084409d33ffab500c4e20ba796115a2a3f23228542ae90ede48e05dde69197b9d8138b6359d1aaf85443cea446a4a6b0fe769d2ac9de4a6eb1a4f0d307c6277a3fb1e4022667233b90885ad45eea2f6dbaa54d737886bb504c61b53fb24772c6c7efa12a7b13ade4d6c29e410a604fc5ad87f378e703ce9f709f9a7485aa18bf7e0b4d7d1b88968e06f085ae69d49fdd22c40533b07dbd7642444dcaf8e31c5c7c15f6261799663c5b00099261b747635a091c6759e2c1562a10adfaf75d120c33ade725b7cd6fc0edb63862831dbe6e73e356b729cd001289028596900b714f72d47da69306e3e5e823198ca4b45f56e1f60aeefb0827c44e4c16acdc892319b6ff3dfe138305df6bf7c518aa48241a1927171fcd1576f3279cc727fd8c6296b919296dd165ccba9544a8aa01a54df914c7e910d2930e27f7af36ab21929799b4ed216b971a801c11bc1381c205c55a76b9efbca88ee3ed2eca5f3771cce86617b5fbc411afd6d5d2c6e2a73675dbfb26cc7dd2cdf8a1f50ff8644dd1b173e090c8a70184bd14836254b29a489375d1b1a896c3a991a0cbaf86c93c581d0bb922acdac1bda28d3520bda5e4ae8815a72f1afcfd1168c4a4f8c526b12f9cf201e3b146779b2a2ecd35c56bceff5c0986402ac5783e1bee5b044cf6fbd94cdd7dce828b2421addb9bc80cc4aa298b2a95498c165ce241dd64aac62b1f17798d439c46ba24ec1290434e45b2560e8ddb938244c6557b52ce5f2d73d2d6ba3ae46bbd4afdcdf948c27d05b4476cd4fdb879d495c8405abd5ad4691f3853fd95253a22c4e012fea078e3e967ce666a5ebd6492a9fa2019be09923437d59b4ec38dfa71664020ec591a53ab5a2d6d77b3d44da2ba20a098a445182f62171b482cd5583ee290226bb7aa3eba414fc14dd7f0bb56e7b647269d92258a4e272b68cd42eac155f000f936ee48cb625b122c7237bbadfa4359abd3e82ae9899c5\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-96527bfd017c70facf0511955eb04e1c8b6ba35116b6c7242af57a8efb7045577eb101087062518f9421cf2b3f09b681ec2b8793b973c338ac4d39505e296d027cb413981ead738e27202782095589945028b5540dfb3cf120a22cf347c3e225391750c9f93b9799a0367418017164472a762c63a8c209b44260cf9997cd5b33be79fa2dddf177de723644f094f10a95920c2b27ec31e78b0521faad545c2964513fe8839014e9862dcc18c1cb088096b82980a1dc586c44b7610a6a90b10861a081acab7381955410f74970cac1afb52403a0ba7f81177ec65b3e045816361050b4226950a7b1bc474093d9c1df124773c82300778f52e8746a54808826399bb1cb7d7026340283f34baa768b785f62b449b9681193419af289c1eb845f16af7bf709ab3c7d00507f62457d74fa048942556d3877e54332be622274ca89c298b64a46c4594030a031c795523928f11f708ccfcc2b75db1814e087842596a575b35079184b8dd61543a94e93762b5116855a423201b66fedf028e25cc9a3d2733eda6b364c30d3c358fbfc4e563a52be95592c7a1169267fde07436c31250aa22285d229b04a1cef106c15b79681a955dda7028b3c205c188a32081b780500d1cb41df8601b7fc976dd67f9810c9d7b809ec3a725739609cd573c3038095235560e9989a06aa910486da5a24ff041071675f0ac327c6b4154f892f13230b05d37ff7f1867c7908f20a461839864a677d818a81d0b7c871b64de4082ab3d472503bb21535a34145bd2fc664208328745b9a06959340f939b39b2c02239db20204964b9329c3330104bf81aa127f75cbbd1822d96c99aa75a8562aab2a2ca9b5fac442988465232ce1cab05fb9c6abdb4337201a16374b75069bc893913ee28dab8b2e56d309ac2c0d244122ff755ed68474e3c254ffb03dac4c9e73392444daa7f8e7658780a49b44b134750eec8b4780c308587287c8c8c726041e2e70cf6488735a6ca6d300956fa1c027c3679e0ca96a457a1beb8e60f139eb0869f61872fa2c130117c321aa073935131a8c9be7c800e6270e71822492c992bcd26df43478861927e1d996dacb9c04c630b694150f23aa51f26bed8c744c36a7916864b5160e94cc515ae0a03ffb445245c56a434f9351ab64f6bcbb973718ebb612657d64f844df3b85bd484c473a685a0a4a94e9995d865aa5bcafb7dcbc7e9877d63890a86252c691044df94ef7a19c68056ed6315400f8bd38f48abcd09e82f0376816c0aae53a9cc61b466466b63938dbb0b1dd963adae40802216701d094c716211718943b543cbe0888b1dc463c20804c4c402105130dd7a87a48c3c3328f76a8aef2b0c7d22688e7636b88d62897809eadf1ccf2dcb5a0011998099506925dd3b74869f931394bcae43466a49a40b31075f074bda69c0ee2f7bafbf81712969b43f0beacc246b3e71c9df2c47db405e235ae97e1a99c0365076b29e593b39c485521716967751025bba279f3aab85c6bae3800f255396d136459545f192b650d3b142c383669d2547cc2732015bc4645554638284642b918b5bd65a06fb49c5fd267a90b77ac35d12da3512f44d2556e027e6582529cea194df88584190480d9b0b5335fdfa8685894514cf95386cc1cb63131dcd1022f5b568cc621a729423c0567a51313f647918368012a83816a2caf88e062a9a6064fb52d8b31abc270a01d974459b4134be74c41b6a22e72ba1c993924bc43be6509235298431c72943bbceed41a84f9b84ce21abcea516f32280a0586069acee7627b54055515604a9ba112e620783aa76264ab8136759af9dcc75718a9bac22092a645b1b5cf32a92e377ba03a6117ee842172505793f973f84cbf0fa22d3ce116ef4c1012bc69db94c7b2b461d978c27c93044f22972588af42e28dc3748299e7a098b5566d67110a036ca9c6740dac84205109f05104f80585970a7906d7bf93067472a34442780f0fd25729745c7f85198a753836c3381f0592f818916b48278e14b61f1616c32ccb987940550316462257f1daba0574223ed6767b9c696b1c01ed75484c1738cf60afaaf9b3144899c4dc00fdab36fbd792dbd4885ab3af6ed63f8394b66d0a910041b1d606923858432f81c37f57c146db8dba6775ba1899d5904f3a69abee80050d6232d858d95a7bd86ee6af48bf9c372170c7468fc024cfdd552fb21ae23b08c1e38d8ce7232e254e153d4b2c4fa1fbf93c919bdfa47bface7a3a8708917b45917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\"),\n-                    xeh(\"\"\"\n-ab66f3111bf51917775e0b0ddb50f0b1440256896320369968c564019c6f5236f4b951cd4370965a16f62bb2046f67584e4b3c2a6e048071d4c69835076b2bdb5f1c5323ddb937a371a418b0dd84c21ba037c2d94470a279b92e0ac53dac8de04f84ef1632fde456999bd2b596242dfca9484fde789794808c8cc5e6cb80ba87a850ecbee0262440402cd7f4ff1c6ba24879305b4f3542a7bb45c767c78af8d167a5233e42f0ac11d1c3a09aefca29eb25b3870fda30d97c53f988ed4820a7b979d3bb5aa4a3e09a962f98c58e3a2b231e6932fbf68398ee649642268950e7c3538268f02553caa443e6e3e29a32b2123603ea7e194122f0ecdf02f206c95a90c3605978b871ae70710887f46ecdcbe326368d909a062875f3beb750b366884802a0f6dae1ada16e55507ac15431c36ab1e01d54c453936d6857b78ce0384d970439aaa4e422441b1f8706eef30b6e8de22fbeaecd3204f8e9f40f1a6ea0825da1e0c967e3dcedb62ddd1befb3eb1c98d7decbafdf326268b79714b57dd7cd0f753c7619bc0f6ebbc8c4be474a6fbaf3d739c952b7f2ef8522583cea9f0a2690349422aa8b09f55cff3579546b2f3371c8592b459e3c0eabf4f871ada231c2933a6b19dd6c1267498d185f2d6971c1a73b4d61ba9eeb4797fbdaa11b87798e3caa78ad03e5edec0ce389c551855ae967849ada410e996b8cbdfba75cf9eb311220ee294585700d1cd15305a5c9a5925fcc6e46d8b94225fa01b69d70f0666466f69d58b0d3f1466d0972ef697ca0b8a40e19bb14aa83a7348338962882e05a79ae341b622ade01b19239e85ad3ea04d6d5d7d9e0d2db8ddd892b7ee6cb832b8b0911d85ea297e169f8d9623e12b9ec50d6e20a5f5f2a5607159f0ee44563851bd229d05276d87ec69aae43b8246e26d1c634fa5595e68a2c0d8c6f480f8642bb62ff80cdb0337f8f4aed0d12f773dfda04871ca37988b86f2b35c0babf83e45797e5b9edd97112bf079c470dfcd10ad989fb871cc66c696bbab7cd1c76dedb2c136192b6730d07a036fd1e3d176d69313bd3ae595f8b1ad63fb9439f0a53ab41\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-1ba960ba9a80a502090c1ab5d4f72369bb48ede1259a76c54cbb87579b0b623075ae8a1860bab4e39c460927af3e44007671c017778d160aa5f88cc292141eac1c6d417ba6defc66fe160fd64b5734c86fb5e54ae04363bd34982450279e24b4dcb2b6fd8260d385b810493f2506312c52c9486648079609ff972725392c7a0205a850a201e220f40219b3557993c2acc969708960a45e8c7f915562e6c7a42a2495dc499f1acc3c46d20b0b152de840b523c42b1251770956349fe35c8b78768798929df771469a476e997eb44380f19413d3a0a5d0c8c25ca540d6e092ff575e26543863728179b95533b36145a5324313433f7c66f78c66e664176b564babc846f454be93d9341a004bc05c2d067463a529a486fb447309298e26ca2c9105eb306c001cc3a28074af47675c40aa4cc371ba330fdc97bb03c95aab5247eee30cc8cb634d1274a4a2b4ebd6065ad3047701c930f3145b65a392d0956010c23d0c19c4968e22125b71d06087dac0af92af7fec35d008a073e99ffc9cbfcfaa7e25ebbaf0335072c083ebd81664085038121d7fb022aa1c9478254af14170b0d2009aeaa7f081b01e610d970b70e40851ce8743d020c731717bb8984884db8cfd52a79f0bbcc336bb43f27f8e5108d1f4887453126c628300f4ba10fb45b7d511909a035d65a2f6961e065a8492895699c539d7a78d4ba1912fa9c30bc43534b3c7be252f4aa27e78021e97a423e9ac6d9b57ae5262af73022eeddc4918b18a25c77032762c184c861d924c519a01bfa3618ea01d9b370c13934f2f6199487c58b5459cfe80c60daac2a364cd51d766cc90afb5796524a8320205b83bc9a6695b51e5f1ce8089beb6c403dbe50ffc557e49020d5e6586524976638b8d4ec1816e34bc373515a1bc98a21a51dab17df2971d64e63aff742a243c890ea06363bbc4994ba1b45c233e187ae78b0d44677254740e221998c6e3370446bcc21684593026b8bb2d32556137323e9ce258668c7d18c44330c59d567265ad60c317bc2d083a3a599cac8cbc87d0192907209b851638a50a32e7d76d29da291f861cc7b979ae13099bb82ebe29ad44859860634d62f78fd6b26295d040f8a5c7ff7aa393d127e214aac9107ccc06d029da6a6b998736710c5fc3a6c9ecbdf00069a9eb2942b45b1626b7953886248caa59789f9e988fa26073bff9b703232859463a9335374506ac57a8c2936701fcfc0235d071bf9807e907734e6267d130c9d4b2406e999b6cd15adf7783db2309598c058a93ac043319194ba89857a59eb35fe4a3cd6fa1c9d7d46ba2f6c62ba85ca46cc8d450bfb0170f5ad6a2a0388ebe73a8b58627f6cc5e7477635ce32472a87b4b881ca9fc749ecba012187a5bdc6e9e12b668f32786cbb5fa4055f86590e00bc4340c04b8b0053b189a74d6bb22db2f75f6b32918c0c3ac7da62044db4a9c1c2b0b1ee81b5317b1fd734c33fa3733d7b37bfa36c16578cdb63cc6f73d661a35e6460b74396ec6a07111091071a757d962384940a1a2338a42fa68e81587fca304d8a86282230470c8988cd707437163cd46cb489b010d235fcb976e50b51e0a22c5662800e74903b403c025bc6df9d821752107b2e51874147645687fedb108c1894e0ac3801bc1398c4a187bea7d9949bc5cfb8368b296b2fbcf2b59c71321b5aa2055e5823f86113a1519c956d9c1793a5d52a906a5031e905a862fec5abfa0965fc49a2db189eb6bc69cb8882b703e0ab35e088340fc35812bc0a184956fdb448170a6b32b49ac0e2a65a1041d38d4512dea3fa111c7e428cdf52144ae0708c5c44382a0733de356ab556e0aa141d58cb1321058be25a543d7060252c9e87997c35295596c02bc7b926f5ba05675a5dfea5a3eb62b2521854f21498c428a23048fa38484935399bf07c64fb63f7ee793a63aceb6842bf05077d2b3647714332d259576182f0d9c508cf2321f0090a6c1cb0a5c106647101277a7b1248e74189df6b90c26a612b26555d433bac49a3ebd702e6d9649038233d6da01f77534a8d2038f615a502cca8526c314c5856a033ec97155ad79a2e2a32cc1e734cedbc6c0b94219d13bf985588400cc682294bf21183830b2bb51b87fd9073b9cb6237884df0cbb12b929f81448e5578928b07193ea4141d19b4eed07a956c34b6de59127c5e823bb8f6719ddeaf282650cfda0e26e57a7165b1afbf3fa9fdcfd677e3b27a966fc034fb10c5f08a5c2cfe2fd02d9289fdf022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\"),\n-                    xeh(\"\"\"\n-697f53fe475ffe22de8a70436eb11099547e47df00dbb25b9ccf2c3ba3a48f8876694671779a72d10510bd703ab015a425ae50d413e9dc5e87548d70b84cb124e4950c1d546249c8c8d60fd06513bbbf6648230538bc5e88269ca0a961b9c8186abc70286289d58b96df28c39f158c1a707f75dd20371c63ff038d0ad388a22449ec4fd8f73fc82c75f1e3e6e1c9f510f3ad8ca3124aa47edf0cf150f7a664a4bd38bc73dc94a722b878b1ea51db19260f17120fbb99916e596ced350107d43bb26beca35978db929df046400f8094391830c99cf2d5cd0e1527f97419550ad1d1c31f94cbb95d3cc5ba06bdeeb973ee20b7961feee5b4c05e08b0320ea8b3be528b52bce8750fabccd59fa7f8bc9bb8f475e25f1884ce4255d4191863e20156318276d5fa1e7d2385c2744ef31c9950ab071f031d78cf28ac07c54f997ae8f07915b16b8490f1cc028ae6b4ebbe42e5d7b5d988abecd8ac22bae7887658f7af5c488d91993c72df113a6b7f435bdc3d90cb32af64d6dd617e5d0b0f611ec2a0575b347c1cd89f92c72bfa3e7ef1e3e3be4bf68ae05fef6da532ff76c9e9d7f7d354b2e638803509ec7757c78c35dee3c1149d2b25f8d18a8b6ba7b03a519d0ec7f18f895d575fe3c557d8dba332e2454281b676a96b3eb0d38ae2de00893649e1764e2cfe0b1d08ab1d69cf65049d3a2b7ba894910c6fea7eb94e64ff8a71c64ed4c9b6b4ad71597adefcddf0904364c50084bc6687affe770ddbf0e8e9268a64e70a9481d6065d2a93072daaa9583d9b2a20db31cb7d5edd37c59e4fd607ba897dd5afbc2a6403af20deccb1d4b3abeb9502c40b5440e5e9a7f850a38633bd5fa75bacadbaa330e7a401978a7d10c9332daf141580f8317fbe7c06da656e7942ea7d5d49a5bc28ffd15d17cd0dc337f7fe2f20d37ee71b51bb536f4692588acca8a3fc498de1d23c9a1b95c7efbdbca3874e91658cdb7755f5bd51553e1747737b1ce2c44604987e3c04d819d7449b6a40fbeef7b3cf7bef8df39926830c558591de535b8c5d482101a5c6a0715ec13910a243ed0d64efc997d2d2342032b8\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-6a7863ee2a8102b695afb7842cfc7ba822bbd8526522e76f3cb9884c2454da31b967f939a09c837bf2add1c9a5b5a4c13dc7742167c74678144d05b830b6756ac963d7567dc23860c8baacd3328bb209a4720c5294a665bd731213b5cee4a5c51e58b0d19891c8ba3ba2e4c1f43b9478100067681801a386474b834a2ac3ea03961f7b34263c1ed08bb9623203e920b56054a2dd7cb9caa59ec2e25d21f1442d24847080ac45b80ad2caa4025aadf282cb23853da2221d3a5782c3e34bdc3478f0e77dd77696b97c4a0273bd9ee375085c50140ca1bcda9b14117747163923b4612318c6e6417d51ba0b94202c98575699a337ef379f2e46aa32d60c1af81edfc31c35cbaacc0726179b8be68ab1cec3457cccb0ac2888fca66b94d83216b00457a28b9dc064e59157761b4c91070a7d52a9b4337d661674c497b5dc2b5bfeaa71e362882830458f215c4e75157877aab7030a2b47c36c4176df159f8c5c9f8b726335548697d004ea03893b2ba0b54317ed45863f17b5be19b5cd712b8f833755b06e33da356d1ccef0379cf7838dddb9306bd482ecf16b52a8530ff6bce2a1ca269c318f707ee0ebc4145811ad92a21b3b009606191da83dd5857d6a4849b21713e5868da4aa78702a28b33b3dfa4c34ce4a642767517bf90550c687039787d54079f6054e5e2cae5eea711a2736d8c32d3f46b84b33c41761314e91aeff51cf10191310e1c3829c8560e0c5dcf0724dd00ee2364fc82001e1e4b4d577c9768a6ab516a643d45c4f731cb9503be1a71f6bd78987427cf253a4d54a202e3c389a0c48c386793ca79af99a1f1c70130e583fa36b2e0f1ba809bcbcb9da0c19042c3d9061873b104fa7070677159edc93e00b414906c774c6c221e187b8e7b4d5636667aa10e8e89425da282399504b48ae6c690ba216bd27aaa4eb39ab09d99b85f396e21a6afa874b8fb642bca82ddac76539f236ef349534769487d99741b1c43abb21911b27eb0abe41a453dc4876a2a26dd3b93fdfa7a1817c747a2acb62e96f013675b988547f3b8a24a008b726c971b797edf0850073a94b397804aba8d0f903b9113e3b18442e9b125dd762cc4bc2fde8007fca65b4817ef985667bd62bd8806563846ddf61b68a837d35859344e96ac450cc24303d9f116d502135369305a8cc8549641487f88e0f24a31c87cea974547abb569f9c312dac3fab517c85a5521d41b7eac40c62b7cb8a0776d89828e937177785a23ba0599381004c253fc90aa8332172f7366e6c756e6f266f2c5c9bc70a5cf18416c00c83dbe76a8a9c52ec5929217c0d2be88c8e3374c2111c2ac46a2a454ceab38f8d368f2281749d4109e90702bf368d6ba6ce212146d7a21a9ce6767fdba3bf1708fc359fe4e974b676bb9ee04db18b93f60759a071484c134e0ae29b135c5f2546562f6a471a826aaa3568bcfc721d707ccaf9351462098fcb21b441c81f876a7782363ef84eb9c59b2eac7f637ac205f0c1ddab4bc0868f42c4c2ffd0912a0578e9b81dfdb400a6a747c9bc8c97ba3ff8074f454367a5768d48653cad01c30212997553941780b44f3b26b9b79e6bc43cd56683dc9770a1d81ec0601e66326148f8645f820737c2479533a7cc3142341a2fba851cd304423d835bba5c73c3fc617f393e673591040876e670b94585902818883608a773e736f52c496691481b908106609366513ae14b618b8611539b56b3f466f13a5f59e5179fd29ac4ec7a92b5beb004b628e7701b11681cc61fd088a031d80d8e43b36042857155b0c5f207260bbbd30146d83a9c3c17a1bd804b56c96b01e71de75152f4b4990a001a1d8c736e39097771b819e58a2bf4498f1ca346cc851efb29c1551060998a7242c7fb5b04b6c8cf2f703056f18a9df28504752be88860507b1aa517914b278b61704f2e33cb02307a7a898e58a3a87221898cb57243000249709f5e53037728bacc7027dda1b7fbeb7739375811427b3f8c3dbcc0775442323289bd89ea0b668cb458da346dd25a45d4c9d6eb6ad98645a65794a795277480382ad7a99e85ae9e279ff5d38ac9a461d4a8aa2170136e69bb70c2c7734060421388330606763158f0c04788d79ded7b52b79abdbf891c2290b561ab4a6aa02e591637cdac7353798d9e256fd0286389f7d3b079e3e9f89ec0a68010202ca26dd2ea953f551554098ebaea56f782c33b11b3def6e61889bc262dd4337801b55bcf0b5eb53996785555ccca66272809d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\"),\n-                    xeh(\"\"\"\n-e31362859b08dfcc50ad8f9dba1bfab3249b8e0b15347ae776b41dcdfaaf8596cdd6ad0eef2098b4759f8b168178d75f5a3d13c2e9af1c94d3e8598b779f14a5951928874d86a95b757816a5d74e086f81bc3313e72a1ecb637cac0212e57b3eb756056663ba1a1b066557816a8bc3c73615193bfb16543901948f7e0932eff974bd678be5002cbf91320d055e6f6245a6e3f384d88a70f0916dad162cd4b959894366032e0cc949e1e2b32a660717ef5cccb890df1357698c5f19afbe9742b87b0a077a67d2fab90488813517a8c4e35e2c58384e66d8076594ae713fcebf4c590c209c2eb015c24ade0eb37c341c922eda2220cf09a278aa4c63f97d317cf86bdb6129af96432fd53fdbf305cbd2d7ed9439760cd297d54d10cf7cb22434d51ffc04babf2b04b5acdc1aff426e9eb91e604149c8311b42ffaf14136322d8678e3fb5542423716ff4750c37c2e64fd4b772723b8c67c5876e3d99f29c8aacc118dd9998d11a0a7a18a29d593cfb1ec9a4ffa16efae2ecb4f9fed432edad543cdeb00025a734cd7f7b4c7ac96901468050ae981ac5846a6b7840ae674f97ceb5fd22efbb1ce9a003693883b84034eaaf39e87aa2ab39e782f8984b32ff7ee9cc832181da7589ffcf52562519c63ad3aadcbc04f479924b4ffff5d04fd683bc7f0c0612ae7b1d711edd39dd543efe54d87e6232005b2d9bde0ecf7ec6c0139da18161fff97055fad31f9d8952d370e25990b7322c8ee1ff5d4766e5c3ffa8b036aa0233d031787c5a6d4e788e0793f5bca432934029921014209478c6cfa5b4aa77311edb604fb3e794b61bb1a1a8e58ae4a537404df32a7ef520a8cfaed3cf45a1ed7d08059425c9bee99120d9f528c603acfadab24170c8f6cba3fd01a223324a63b5345a6def27bd5f27686deb78d0bf673f434201b9b1c24658e3f6b7f6fe2110e3cf4d8ed16c02ac9005ce57652c3307fc86f533469bd972a6d90ce8b256a9fdc42da4dee12be96954e71fc3f2a5f8192a97a7a22067bc2503cb51c5ab63e7b6f909166615b407a29b8cc8a2e9792f77836899b8f120852a53df8d4b3df6\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-6a7863ee2a8102b695afb7842cfc7ba822bbd8526522e76f3cb9884c2454da31b967f939a09c837bf2add1c9a5b5a4c13dc7742167c74678144d05b830b6756ac963d7567dc23860c8baacd3328bb209a4720c5294a665bd731213b5cee4a5c51e58b0d19891c8ba3ba2e4c1f43b9478100067681801a386474b834a2ac3ea03961f7b34263c1ed08bb9623203e920b56054a2dd7cb9caa59ec2e25d21f1442d24847080ac45b80ad2caa4025aadf282cb23853da2221d3a5782c3e34bdc3478f0e77dd77696b97c4a0273bd9ee375085c50140ca1bcda9b14117747163923b4612318c6e6417d51ba0b94202c98575699a337ef379f2e46aa32d60c1af81edfc31c35cbaacc0726179b8be68ab1cec3457cccb0ac2888fca66b94d83216b00457a28b9dc064e59157761b4c91070a7d52a9b4337d661674c497b5dc2b5bfeaa71e362882830458f215c4e75157877aab7030a2b47c36c4176df159f8c5c9f8b726335548697d004ea03893b2ba0b54317ed45863f17b5be19b5cd712b8f833755b06e33da356d1ccef0379cf7838dddb9306bd482ecf16b52a8530ff6bce2a1ca269c318f707ee0ebc4145811ad92a21b3b009606191da83dd5857d6a4849b21713e5868da4aa78702a28b33b3dfa4c34ce4a642767517bf90550c687039787d54079f6054e5e2cae5eea711a2736d8c32d3f46b84b33c41761314e91aeff51cf10191310e1c3829c8560e0c5dcf0724dd00ee2364fc82001e1e4b4d577c9768a6ab516a643d45c4f731cb9503be1a71f6bd78987427cf253a4d54a202e3c389a0c48c386793ca79af99a1f1c70130e583fa36b2e0f1ba809bcbcb9da0c19042c3d9061873b104fa7070677159edc93e00b414906c774c6c221e187b8e7b4d5636667aa10e8e89425da282399504b48ae6c690ba216bd27aaa4eb39ab09d99b85f396e21a6afa874b8fb642bca82ddac76539f236ef349534769487d99741b1c43abb21911b27eb0abe41a453dc4876a2a26dd3b93fdfa7a1817c747a2acb62e96f013675b988547f3b8a24a008b726c971b797edf0850073a94b397804aba8d0f903b9113e3b18442e9b125dd762cc4bc2fde8007fca65b4817ef985667bd62bd8806563846ddf61b68a837d35859344e96ac450cc24303d9f116d502135369305a8cc8549641487f88e0f24a31c87cea974547abb569f9c312dac3fab517c85a5521d41b7eac40c62b7cb8a0776d89828e937177785a23ba0599381004c253fc90aa8332172f7366e6c756e6f266f2c5c9bc70a5cf18416c00c83dbe76a8a9c52ec5929217c0d2be88c8e3374c2111c2ac46a2a454ceab38f8d368f2281749d4109e90702bf368d6ba6ce212146d7a21a9ce6767fdba3bf1708fc359fe4e974b676bb9ee04db18b93f60759a071484c134e0ae29b135c5f2546562f6a471a826aaa3568bcfc721d707ccaf9351462098fcb21b441c81f876a7782363ef84eb9c59b2eac7f637ac205f0c1ddab4bc0868f42c4c2ffd0912a0578e9b81dfdb400a6a747c9bc8c97ba3ff8074f454367a5768d48653cad01c30212997553941780b44f3b26b9b79e6bc43cd56683dc9770a1d81ec0601e66326148f8645f820737c2479533a7cc3142341a2fba851cd304423d835bba5c73c3fc617f393e673591040876e670b94585902818883608a773e736f52c496691481b908106609366513ae14b618b8611539b56b3f466f13a5f59e5179fd29ac4ec7a92b5beb004b628e7701b11681cc61fd088a031d80d8e43b36042857155b0c5f207260bbbd30146d83a9c3c17a1bd804b56c96b01e71de75152f4b4990a001a1d8c736e39097771b819e58a2bf4498f1ca346cc851efb29c1551060998a7242c7fb5b04b6c8cf2f703056f18a9df28504752be88860507b1aa517914b278b61704f2e33cb02307a7a898e58a3a87221898cb57243000249709f5e53037728bacc7027dda1b7fbeb7739375811427b3f8c3dbcc0775442323289bd89ea0b668cb458da346dd25a45d4c9d6eb6ad98645a65794a795277480382ad7a99e85ae9e279ff5d38ac9a461d4a8aa2170136e69bb70c2c7734060421388330606763158f0c04788d79ded7b52b79abdbf891c2290b561ab4a6aa02e591637cdac7353798d9e256fd0286389f7d3b079e3e9f89ec0a68010202ca26dd2ea953f551554098ebaea56f782c33b11b3def6e61889bc262dd4337801b55bcf0b5eb53996785555ccca66272809d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\"),\n-                    xeh(\"\"\"\n-e31362859b08dfcc50ad8f9dba1bfab3249b8e0b15347ae776b41dcdfaaf8596cdd6ad0eef2098b4759f8b168178d75f5a3d13c2e9af1c94d3e8598b779f14a5951928874d86a95b757816a5d74e086f81bc3313e72a1ecb637cac0212e57b3eb756056663ba1a1b066557816a8bc3c73615193bfb16543901948f7e0932eff974bd678be5002cbf91320d055e6f6245a6e3f384d88a70f0916dad162cd4b959894366032e0cc949e1e2b32a660717ef5cccb890df1357698c5f19afbe9742b87b0a077a67d2fab90488813517a8c4e35e2c58384e66d8076594ae713fcebf4c590c209c2eb015c24ade0eb37c341c922eda2220cf09a278aa4c63f97d317cf86bdb6129af96432fd53fdbf305cbd2d7ed9439760cd297d54d10cf7cb22434d51ffc04babf2b04b5acdc1aff426e9eb91e604149c8311b42ffaf14136322d8678e3fb5542423716ff4750c37c2e64fd4b772723b8c67c5876e3d99f29c8aacc118dd9998d11a0a7a18a29d593cfb1ec9a4ffa16efae2ecb4f9fed432edad543cdeb00025a734cd7f7b4c7ac96901468050ae981ac5846a6b7840ae674f97ceb5fd22efbb1ce9a003693883b84034eaaf39e87aa2ab39e782f8984b32ff7ee9cc832181da7589ffcf52562519c63ad3aadcbc04f479924b4ffff5d04fd683bc7f0c0612ae7b1d711edd39dd543efe54d87e6232005b2d9bde0ecf7ec6c0139da18161fff97055fad31f9d8952d370e25990b7322c8ee1ff5d4766e5c3ffa8b036aa0233d031787c5a6d4e788e0793f5bca432934029921014209478c6cfa5b4aa77311edb604fb3e794b61bb1a1a8e58ae4a537404df32a7ef520a8cfaed3cf45a1ed7d08059425c9bee99120d9f528c603acfadab24170c8f6cba3fd01a223324a63b5345a6def27bd5f27686deb78d0bf673f434201b9b1c24658e3f6b7f6fe2110e3cf4d8ed16c02ac9005ce57652c3307fc86f533469bd972a6d90ce8b256a9fdc42da4dee12be96954e71fc3f2a5f8192a97a7a22067bc2503cb51c5ab63e7b6f909166615b407a29b8cc8a2e9792f77836899b8f120852a53df8d4b3df6\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-14b4a7b64bba73d61fe5d4cb3d890e4b67784e9a76c69c9a6cc53d16d2ca27c149e2fc0f6ad163d4b9ce51d96cc1cb2d48821fba89823a440e04d9415c675500091bfae270fa457a2432375e42c6b49879684c98cb37a82a794293a5c3b3abb1e6694a42a6924f372c79c370a60091840c752f287468fbaad7f907c444cd88f7cf4c8a56406ab7aefc4f7c90ad7eb669c36267f2c7a50a5441627990432b823d5a0a16f8a344b68cb54439dc3727b622179de14b7478ce14059966312b2d6719bc80008c689a7f4a590fe7726dcabb05e463c9d20e92c190bd1379db03acc0a90404e4c1b7dc07ce710b93f9161325815df392bb28562faa79670601b8cb2c33e8a8d384b2458cb45b8c09e7831cc2f6beae566357e0661f980ea2f32f13d23cc5ca75d461aa69b31e3e55cf6a9baf127022114a206e918675b522e11ac9a85092f381662596b56bf71f1c119a45f32f45239f82055889c3194a4555b6d68caa549487da6b2f61567a92ca9c938d25ea0b0316990274a348b75b70c100bec44c5612249c4697649635b641693a54741e471f45e579e6d343587a3cd1789dd984bab0d126f6e99a205a3077b1467e252cd4624dbc0b88c630a9604691a01c490157c928239ef1a140cc25507cb267ae897b1a030ce09b99749a3cc0119232678877951fbc33a6a0ab19730b6849447620497ce4a5605b11844d91b5c5c2490e99495b61baee6820c1eac72a544e72a168ec093e5cc44e9ac018d2b63d79d01b6f8a1b6f2273751767fa35120f43aab38876bebca28d7cba27e4590a8c05448a897cc0a963eb9eca5c31cb52815cd88be80a93356b4082c33c43db0ce94b0d1470ba2761ce6400616ae35bd992693522cf873956112449e5d4845a012422240887016d28bc73423237759384c280184775a481f6c97da1038e07b8afb0a4e5936093755aca20802438156258b5bc607d1d171246e2a1f4d7bb18e9c8095b69c36b06bea680b4e32b6fb8bfaa2269dbb9422ef686a1da9649414ae5215434c75d96f38b373ba2735a60a2505297493afc37228ad883749b558b990cb5d1911b5322ed8034619a429573756962129b459916f158f0ecb0cae396f60c4c84670ce3fbbe119055f1a4382cf2a619c31cee5842ee8c9c6979193ba82ce9f94337306186b20a276c6d06c04f41a414c3100b31e2a2a9984067fac4a7b3c70747c55b87b2512219d62c8b51a6b628766d63d1096f63bec8806311415919336bf9d1b038022d00d1bb84387888dc10f0290b752627c2d78ca5c8475150bd925240ed94af40b43762a99a3f5b0f41d702db7cb485405d5a247ff48635ba7719aeb8a876f0986f233212c40a3645c3e4ea3b5fd02bb520b9d8aa22c4595849b8a2769b92edabb4ba1528dd067aa86b3bdb6a39985983c89c9c916b41b34018bda438e7815bdd4316f6202c0e3c73d53124ee110ee596a9e3198f24b814dfd77f0a2a7aaab3a918b64c47fa44ff018332557cd13325a8081e0002096e68a293258928896532ac5b0ef4bc28bb43f68505f8a61cde0b5ec9ca8d62c261b5290e16b22a4a978d5b141240043c9b457a89a764d9565067cba987a23d5d6b3016291fddac50c9e5581d988088a368d1c9c633bc594d39c56fc5b4a996b7c110208de1394559915138b7cd8941daccc7382b60b47770272a56f846b15c71704b8b7e08595d51658a10b348617c8b552588a20a07c6e0670416636ba0982726671d796803320e0346bea80578f7808419f14b8be67f8bbb627fe4c5c28074e1458ba909581f317e70a66320ebc5ffdab20202143f374742b77d88c80fa8b9593d74a04e2c7113101400c4afb7893f634565aeac9eb8c144a3a172a1263fbee499d7895e298b195d4caf46514927d39f430aaf13c4bc43735670e5b0350a42506621dfd737177ba3736026d314675947a1b7315844da146af84c4cfa8227bc3211895773082fa22a8c9e7c20d1257ee9577c3f36a6d3097212dc1b149421b9bab30124cb3298a6b1505bf586070f52aab80a71e17c223184b32e9a6aa4627b3b99bf089973ab53be7c461ad57317edc3b79872bc50a391a43bb18ee9bf0ca100f16409caf4abbe0239b98b16a598ce86e7c07b27646de1671e915763ec8dc3c09a20181e0525c571a18d74c74c0e798d11d22db509a0f0519c7440e6787efacb39fb35c8cab4a38302c0a9e1969f65545a404ceb25db8ea6c1d0939019e0fb29d41885757f5ffc81000f865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\"),\n-                    xeh(\"\"\"\n-a93e00395f1aa0795a82b149b5c8ad8dd0d51c577b2b394adc282b8482a3cc3a8cb8aa2bba8a40bc799074e5b30d17b567895533cb28fbb11c05e07da2c8e080ecaaed70fd5ab2c15b33b32de50b2072a04c084b4740893c7caaf5b5fd037f91b75149cd8ce00512c4fc12f5a67eca00523e00dc7d4e60908189983848e2f529ef5688ee182ab82c44e4f5e57b3a37e6599d34fe299705de154ad6ed4e5d424ac6843925d4df9b5de48688397a39dd487ab020f38d7dbfb8a021e099d9e87aea4531c3bad076c0726667b3aae460a8bad9c5597dc49105abf2d82992bc73638322f3399d86cc6dcf5a5a8646e7100426d6f587b688d8196c8df3ac141878561d144ce12a49ac8292fa309a9b0910a23781f686e8b4915b96ec71372a9f0645caa8e0fb5e4a3a67f465f000aedbf2923bc9af8cb5682fa2fbce090600f4534bd3e384829f9caa5b9ad9c100078071256bb1bc0c93267b4a1885283a4e3d9157d48d19dc97203f19a28a9454ef99536f8a669dfe4432051950fd911939ed2e4e28d46a78d1395dd2acddc031f3218ddd4441bd5be01830277d11927e5d32d7f45494e3c3319b2516b2fb1dd7945ab16cc8227b43d356a12fe6f8c5e4e36752aeb900a02109427cd384ae6aca3869b3be2a90021137deb1f1b9abbfa0ee4fb9b4da554d83b37e0d9ad6cc28d2190d2e8f24e0c26e716270b1ba0312ace2632922a2d5d5343efbd2c37b5b4e8d1463cb8c925bcf9cc90b65625eb91e723e8a9284d165392db21b1b1d2430f06632dc0a3b87182997613b94508954cc95863a1b93808ec0c384abbb3bbb829ea6ac74864b2b5e75907d3ccfe077e461981ea59b78d7d4d521ea2bc68f47bbe403d7419876486d56a28ec5f84526e45745a6fb23cd61b3558f0fcfb408ea6963b8eeeb4ba095d30fcb9fbb81235fee1b0bafafd718e602b5a2343fd6c884b3c084ce9f1cb310f8b9811dbd94778ecba5db61e3ebdae372763e64a0e5543e949d0fd6d4b5e4a165a2ce597c704bbe6c632fb312361a211242271d8a5fc2eb638ddcaaa43586388b98087221ad59a924c5fcacbfcf9176\"\"\")\n-            )\n-    };\n-\n-    static DecapsulateTestCase[] decap768TestCases = new DecapsulateTestCase[] {\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-2b3a0ad58903e3700b00ba4a6658209391cb5f7685e7f780d7bb8233e4989c0b2d2f8c9d59db9bc13ab81a87acc6981e4400033129a79552132e592834ac6933228bff548938c59869faa14467068bf8c4cf0a5dbb0a8fae2866067c2e406c3b353a4c34058c0a21792ee65c8d289df275b9fb231a5aca54469455efcb6e7ca619a1664bfdc31591e3318bba2bbb61670337a63bcc477dc20abefc5d04e816802084e185886fe08bcb620cf44c810cf786d20020c5f8458e191dc5ab42ab11b930d3658907bacfd28c0dc292e9e327d7c019fb770719f28961f019ed3cb4b78abef0a05c3e548586529f0e182cfa3ba0bcd6604dfbccf26182a1c3334c56b6fe571227b106acb7358156bdb6d1604f000f5da2928d099fba809b07912e80672c0cd07919dc41ef902d01779e9fe9a9dcd64648f02b5fb16db639422f168f96ea0b2887b2ba5a9437608b3279463ec17efe729f7421b161e98ae57764b75875727a1bd0024bc44a9b56bbc159f088d78080afa62fcb6095d2da8055645a8ffcce56fa8c04203024e406c5ea21cc4045e8e1550d016514924d7fea345d7c45c25410cff51450739155231f4ba73908c62f7c0343ab4800b3bb2269840cb3e05ab759ce5c8a9d62ac7200f8bb19b63b27707454f37dcd7c7e1f685aee256bba2c00ee076dc0d26399592f5a3591a128cb01e68830e66896e13be87205b33078efc44cfa1374a43896a3397219122a0ab030d1b2126f31112ac6690e996286568082c88b35259d23419d632b3aac7120dffb24ccec217e9883de4769a8086a8152363f42cbfecc2a13ac6ad9b6a4a8aa3287f322042c8671d6624c0490b1e2a27b81342672ac651236537b63cdda77166c585cc340a3090012f647affb818ac43d4e3bc559f0acd6157d12a86ba0640b4fd2b28694b7296738dd25089d33208002177819b46132217e6194c92085940435aebc77644aab97a432b184b172ca5370144ca9d501fd7b22b9c65b4b56796d854941a478e6d23ce561894b536b86013f1328059e7804f75bb2726302daf2b278e55dccf7a28e8192f2222f1cf335efec810e8b6521764e1e6174372a61c2d3314c53afb0755bd03bb48a280f0b3142efc08ddd6a0b6e3044ee4724831b43b0c965862b9dd9d88a4944c8d649c560d796a2372b3a065fd3c2480e1c0b32bb9625b47c5fb4c0adb0557427bc523bc97ac77edb00c3f5d6ca4a492009e182a1e6349f0090bbab3bdb0054b376712f1277c93397ca737ef1d612c7443be82996d2f95e1b26af9934c67a78a84b2559afaa1b73074040b052fbf0ab6dc546f042b1ef474769b235642480ea94ad7ddb0607f39258f73363b52e21b1577c2b5f1aa1829603647b9ba1eb17a6863350ac98c5c695cd86b090d3972c32d39b0370619998a030b2cba8998fd16c58c943af8a63c0b44acf7ad02c5bb5205795668ef97cd16aa67a47cb1b36977eeb905378a88b37af1a1a8281ebb28e5a05b248c9dd57b8836041082195922aaf073a04d8b2b5bb2c5be7cba621f08078651f9ab3a385cc0ac9ca33a0024f72c1895a698109478a9e4b7d3066466d28313bbc67e9319369f355eaf268e6d785ccc576a1344e38271a3189cdb94a4e3048a4e18621c07578243bc5c017af25da2ffce6abc3194c510076b1d0c5b5529a80b3abaa9658de03ad1e151751f54998fb77ac52a2739b09c4f0ca0b8827c04bc280ca4e7d214231547370e98b92006270194ec3c79e96bb16550692f988627b496ea4f4cf7e9511c014c2ef89ba9620896785784fec1da3458a6f5a11d3840ba4f8714610200d3a276679a7e395488d770cd5122d17b37652a9871357594a87662aeb3befecb0e82513ab90b414d60c66fc61e4db22a2a3668c05338ec86018f154c929af387183079a59e201cb512536ea4908dbd559dbc63aae57cbc40437b0d5b54e784cf7488dffd5ae861b86e7b8a57563abf5f76c81b595a144a11c464d17e6b871011f8f82a8851321f2455644d0156ac96fcc944a0ad89d52f896a2e84f5d4a146e61bd132248572c27d823142629337e116f9635a32f4647bbf2b281d6c1058695b49b51e7f602466a107fab60edecb8cafc47bfa6c65643c662026f702ac7b7118bdc6448eb65bfdf8b9eff908f354410c77bb689d9b557439e9704c4d4107cd6559d1cb5a9a10b83f9f24d3e7418d3781eeb8b07cc8c5e38189afaf64db11b20ea072674fb42c3487d74c392f278c274da80f7518f983152101b1ec941baea92c132181a9442106be237198401ce1b652ed41e8f033c3a364519b2a1edc41ebbb36529440ed398207e600e3bd2622d4534d7f06013047b41a895444947ea252f13d40d0b82b82c0405bca2454a8823a0789468f845441089e18cb89f940519756628a8c61db794c9e86c3c4820b61413b1b88af8b20a687524ccd51fb9eb76eac8b958501342c19eb3b6210133c3848a4cc1b2cfa730cd99dc9e5635b3560b0731e202453b31474bcbabb626204ba05b251bb5c63f85a850efac7d3ffc0c8e161d014a441618be32c94d7ed2818e41acbd060cb9c5b43226c05553b5bd31b310fca52389361b8b2389c952e6a275d17408bedc24a01897ff484012e74545eb099fb0620fe7523d7b49288773224a72a01b198a299036889a5d690b994abda1066072f3566a33c944550880681f716c87a9ac546ff218ffbc8ac48a8efe2b11c8c2ae3bc0a76de2173cfc5af328929d540561a588d4337d1bf8748f71140224c2e4aa458aa2958b236a6c0c77492a307f754869d9c8385213240b7a1cf70b3f7aceccbaa50a134064d64750ab5ab35982ed596913d84c74a8c63647a2f5531247373ebe23695ba767d0eca290b94647a4c94e3949b7337fb7e77ff7668f695b9beb8ab87723a58ca62efa3b75a6584768c229f18a3c26ca1a4da72972c02a9205aa08991873b94fa1f995ea6c67b8a015bc3b7a77943435cbada7323309dc74b7a92c92127b35c32879567d4e389fd5b5a6c23b932108ce22505d815c50e8e80d9dfc6c3640b111cb9c5fdaa28d199a00e405f061b6cd601bc602a6a491cf900937fe566fe3bab921c09091152592f6bb7bd951eb960708167d08fc60c40563173c45a76188871c696ce5585dbc66c65906d1c30f1be660ee2560dd6730fa4ac1b0cacb9fc05a17fbbea5d47e1eba4999f964ad5b88f874655b59cfacd4c36b818d96822f56058abd8ca410456c7af21d99462df2a596e235708b49c595eb94eac7573ff3a49697ce2a18d1c318e2340daaeb3475826b896ccff7a233709656603e1fb143844f26fb42a8b3803fc87b0e870632796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\"),\n-                    xeh(\"\"\"\n-d746c132b3940573e9dd81e355b4154e076d40bc7f84637981d39a1375b4b51f73aaa3e69bffbfe7dc06eacc4d80f96a5a89d8d682635b0ec84b2ef60f08cb6e29ec7b8c4aadd9e3f22851fafebfb22f7d6a78a85245337a9c8f64e94d73d2a20c39efe83532b96210b7439c39cfe6c5c7ea5badc2838fbaf8c31ea91484ecf476a2c46d52678e0752f9d011c38e702ec0f866e6da2acc91b4f2ad8b09a9f2cbdb7668ec16c62d584e6a5e8a6c7ab3b6e387e67649f402e706ef89f07e231eb0614339cfd389be92e2da2021613a38b6dafe4cb35c8af8462cf1b620f120ae07e7e97ccceea635f685ed28082a63591272426006107beb094ea22142e12d22f5f34ccbc72d444ccc26a3f1aa828f1de50a47f97fae14b6c77435b3127d248574a9a991b0d2311e334477a8e63d3524fa1d832b3308902cf0ec8826df24cfeed36b4dcc7c28ddfe4a1c85c13c87dbbfabbc16a36364d365c7a549ec92743f1eda2aeeb933be4179975a97ab436808d63b1f82e9cca1f7586369c23027ff45b66932798b31c1f06f0e001b47f59f6d66e182038620bbbf647b1003b3f57900dbff42fd0c9b73346a2f8d1168ff709e12c9e297315b084a60691d7846d3c881be21e9a38cd1a84454b848d4147242b0cc38562990ad4a52ba51d461090628af98fc5d3c66ed3144b420f639598261e947aced555e33dbd61433e1314145f9147b397e46dda0465a75782c40ebea2cf20afa74678cd9682568787a0dcd79318aa37da264d09af928d6c27127638c8e6b1d202cfe6f96a8f37367d5c275d6a5860ea2c2cf600d9f75c42756e36c4a32cac23c78ace15688f5f4d3fe9553b264bf29f09f2d8e5cecb1a7b775b69c10c66169435d238beff7b5efdd079a04202fe6c2ad0cf59309ee28d67591b62e763e634775f88171abeb7e607b6bf87adecb75c1306efd0c0f02307663a76b2e56b7c14ac40e6dcd180d778a0244fadd14ee68b23f13eeb6b7495edfb42529e61567b76c7fcc9fc2f8ca0b85e647481456edbef8305b6032f2afaf2863b4de0bf9f3e7279e6e4dc468291ba2ebd4be7dd0e1ede6918d9fa7e60017e88d2a982073c131da47a76b59604989854dc4663bb70bb42da22a1c15bc9dd7d0e856261195c2e726c72ae055fb4245a2702c2b63cdd3238ca040800631ff7f48ad62ef611042842d1ac379f51f6811f8d95b6f1f618962f2421d4eed7b8d42e6d942c62492adf6bc9a586ac4a3a4336490aafb115df5646bb3c69097e33a5771207eaefb5588741cc3e7bd92e123cf9e8ccc0f9db5ea2d4580a82baa36930a86865cda996dbddcb626edd51a698c352b834f0a198e0d8abec074287b0ff5516e1416590d889b61a4e1668d00ab94d5df6b57c834488a4f13b802abfe3eb507214081452ab04e528c9305752a72090673b1168ea70329749c07fc83ff1d1bd7b92ecc65212fd8c6bd972f3159c04e78e1f94ea0b70806e499dbad1915bf85311ded1df041fc0924d461d30c358d7f4819d1425afc0739f76566\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-d44c7828421af9298976b2c4cf623bb149a5bc26a2c9c451b270294ae97422277547c09eaca491ac6ab4d793747d1106b0b9a6e5e2cbac9a69e1aa6f2c2691b6db3448fb8ca79226f3c477318504302a34975c8bc8407ac9fb4bf1ab0c99370c319801b20177ca5561c2ab0000133792abb7ee81a76c0b9d870c6e96c40963ac9b2ce230f8b3b365765ea07b45b80b8b2d70624c3acd6491170e94bfaabac2f9274d4df0b1edec5bc213b3c9f3b507e14360804e51f28d2c9c6a46a6810f47ccf09956fa361fbcb5be19d3c921d707b5948a39682443401f4f13a259982f73887fce1a522d21670ba2a3e1987912319a6c32b0b2444009064c30f2bdcbb93563e135738865c30a749347c55d69357df88ccb22bdd2d004f6a730c7950aefd5039870a9dd203b1458aa39e0a4a5a4b460048861b6a189d89240c59da830a9881365fb2b800cdc01775b61d4e35dde4b0d0b4a49813796f773134004841540cd3aeb31c6f6ad0390cf57d5bde23a5117640300dc7077287c4257566ab29bc736c0201b63636568fb2cb642f64cb7eaa24ebbcbdd2a424ff2b595972af3f5cc6c6789a88154dce59787331e6fa98a1ba53c0927c9ef859ded2b6c9c5a316a7291865452735c18cb575d49b1cf0c2012f9f0ab8eb85e3428a1d59375bb740d4868c7cdd5843128815ae592cf2a329c51c819868745203547b012410a26e3d2b0ab4905317351cfb6233da8c05cb88cd353abd84820cbe25c56c504ab4ab78f9777e74051ae222dd6c56529b56515f77a48a9a069c65785339d05baa517d97c3d40737fe07d2229330d3719422a619cc189ab72b7ac496510432a6ce3ced0eb47d4b908d8fba18aa3b60de06fb23b9534ab4c07141f7cd1c440b0734de911bcb2b48d71afd9418f0a446361071eab130756f0cad5452690b5ad61b0988ce91d2c415a621061d9104cbf3a9c1ee684a2e2432fa8c49e59129be3b72d23934520ca59ea83dd11ab51c57b338408143962620c50e6499bede76d3307be180640f3648325dbba887539aaea5fc44a16073c1dc113c587e522be274ba69b80eaeaa61d69074a96ca9faa0299048add04b9bf9948b8a3be4860cc64b30b7346019fbb61f07850b5591ffad7c2b7118b0adb9ecaa00a1dea3f40bba75c5168aab405fd8b4911d11b01f3c1a997cc35f15dc0a4863e611239abc22b774a9ed81f695879519cb995e27daeb793efc5247e6b0956fc444ab8832c980857a951b139a11b444b338531cfe72b6c66ada8268680e7147a67a9293b8a91d6b1cfa0ad7b7788d17977420b09b5db6142f0997db61f33637a16394202056df3930072e30cda7a7ed60c7b362b113105be60b713c525484a482f6ea2897bb7552f473a0bba354bea3688450218f25163b32fbc7a17d8e348107305246337c6e344c131789829a110373ac83605e24666e308785fc64975b50910791b40563ed141ca2e8154dd879495a26b9de249c58100eba91398a67ed41475c43c7593a7402bb88893b919e6d147995897602c729da851ecacc6d7b67a0aa278b635453080371e302b9a131af18520b47c294a44180a0caf2db37638d4c7f8270b9940b7a452a01dc0bcb9fa4ae0c659600c29817b4e10241e9fe717ba2cbab8ec2b959a255bb414a2571cdaeaba0db244af9405aa870deef7491b1c5fead4652599c1dacaa309535a073144e5273e932a1877bc2bd3b9125ba658feacc6de45092229bc84a94ba3f5c8bdb37849b5372c205f7bd2588cbb47b87779b004309a0b713cf428bd3083b0d6622b1826446925922b293db9747027b587a7677079cc1871a8a5016c6c04bc5576ccab31a2a0b4a7b1b852319c41f4b7855c2451c27454038515b9876d6fa11820c2c024408735837264148ff7d6062570732d3a4da3a27752f60dc2c93ff7d91607c70a13442fe4929184fb9cc4e33c1684660e1a1f6b575ff35b449c14527352c134a11a155cafeb214d12854753f54bb1a342ebb918acaa17d882074467b475976ea080bd23b256c477a0acf56fc3d9ba9b34297e71cdc37733a3d66f11942017bb8c16229a23c196de8b8411336742328ad6dc5d4ba77108342d6847abde81a4e1a4b9cb8023a1d442e245186d155e9fa0653fc4a6668691e146a6c729507c2589ac12702b08142b9745b2774cc0c44fba928f42381ca7a82d98c3b445bca7e343b0b1334a03485494a3b6661613009201961551ef9c38a2f7cfd46ba9f906c19c59386af69ce0003fdf03c880d482ecd206a0e96f54c28160064d6caa31e2902c7eb03d5f0979262591cf498d51175212aa482045121fb30f18c2274525205d7c746225c920e62c88570a3fe23731c49cdee65afc965883fbcdaf2306344c32d46b403ce050582345e5c0cfb2d08d0018cc33d1acfea146de85c1e93a3a015a1cd9c7580bb1583afa73c175645581c59a801952643da86001f065bfe6bc1d94d510bf3a0a0268a77babb675f74ae426934be0c64b115e3dfbbd2e98632fdc840f3336f31698453641a18b667579ad112490b452c8b7b9bc7086bb19e483453c4007dcb556b013801729ae23924298bac6f8c59e3ca971bca2474323cf636aa02b008fa08d56a500af032801e3157f29505fd93cf3791a210498405813d612858f503857a0300d672414bcb7b98868d0d156935b1921620bbe262223f43f3d906e6bec23235441da41415f050523b3617bd57184719ec9c92ee2b6bb4bf6427d7045c01176723c1283dbcd82782476fb9237f96b7d13697ab710291683b2953dcb9b8ff0cc0cd99a33b5fc54f6d07edac2462beac952848aa6ecacf71a656ef9b2506585665a0fa4b8c74701868070beca33556f12c0be64caefe6a1e2e271e8470c5867852abab93ed925f3837e9dcc04440607a34c4299a44e2a537bea16b8da07187278ae672509d53aad998b0de88a7605c99c1fc36edbbba10884ada971813e64815adac6641630635a73336c44a3e673ac24ad41e85697859f257a2781b95ad9e27c5ce39470ba246bfc3e0dda46260939647355d0024aa21b2063b19967eb7d7a65118f6cada035053374812b995977eb6cf1238e5520b6ceb67f261293dc9ab205c5c548213730585ddcb3b6a0d0b164f9546d079d3ae00079f6abb170603528991d71389f9113c08434d481808a823feb372437975b5624590c183c131507b2894b6a15ba6ac18b7d1a5ff0d16ed0ec41e214c1d055226b4b0063059a7486088fcf467cb1580a201b23912e571b6523869522bfa4dff5fb95aeb9fff2ae41b26e9f4a0c89217af42c53174292774edf2b4d334aecad2ae1838f6b7927d8c92060d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\"),\n-                    xeh(\"\"\"\n-086f65f0cab0b99ae1bb3c2ce201813dadc0b42886de6f834962d0b0f556ddb4e83ae7c9e85d6b2eaa9f9c630a95ecf30fb88a00e0dd473053738838980d24e3c94e751df4cf8026b38e81a72ae86bcabce780273e00f3e5b821c1758f9eeb5ddf61e4cf878faabca05fca24b8735d3ac03c1206cf9155e7ac758069f48eee8b3767b48bf22721ef43394df758066e657d2baf6797e6f489469393754b22d702fd85e4cbf635500bf3cfc448a535eff7f6a2f5d9f0cbebc1e364a4a37a11f4f209a59fe109b3b07ea354c671f1f5a5cc4ac37d18184b4e487ae59ef8dae1efd296100d0c059cbce1b2342914863cd5a86b17442c616d8110f1f6c58788ca7c74970a9aa7acbb8826a1dabb80916d7f8d0c8f1dd07cdabb898cd79c64adf7dc6475e7a1d6994364ead883d520a6bc67fdd7fbdd0a2c151586c09084c6e7cf63af35bda610fe2b393d2df26b2234d7a8bda45732632d7d705ec7d76ae77e4f3536571e587cfa029a758911aeb657aa638ccbc9ffd1ad76a4af195d483cab979c3fde5180761989fa347ea8fb9fc7cec768e5e48e74604317504f7c402e44ba4281b09a0925e7a6389ff5cac489cf0beccbb8c5d6c2a45c671320b177b465148782edd926f1596d177e0710cac012d742d5d9de53ebd5aaab0a7c66499a27ce5a896ee605547296639a067762787cdca8d2147c47e53501ca453ddbe82be5691edc94df900bca5f3ff49d7a6186bf803f91cb3006ee8dc93afd3596d71beaa477afa91c6bcd43272598c887e8fa190dc898f85309720e5381ae27a15c8dad038e388e2b45c895cb64c2b6a0547867ac33d4338cf25ab834d17d4d657066408c75e146e442cd0d4305a31bf43cc20fce7b74d0edeb820cd83dc1895e12d1c254c1a9bb6f266d069ff867c4e86181622561649601635d260e868cbdbd5cef6334cea88b692f7616b0328633fb6e7e5cf94f130d090d31b61a1b31c7411c78001ed8aa6b569e42c465a60ffd94610f61ec8edbb8f86db60b99deb2cfa8660a3129eb654d775a4cd04287e4990e48f65db3c7821aed88021734ee3393582c425c2f0299907ffdd6891b7517d16203776c0c95a6a0c4100b7c358013598467af2320a8618e0f29744f519ee6d401f0eb742ccac23d23b0c985a5472cb9a4582a325abf00b6f0c1a88f3022617b75b8a20335cd2b38da0bc8c3d85340dfc85d15623c6a8ee3cb955ec6d1b4b01bea20e85353f8daacc821a40866d5590ef1ad289ed2c8c4f4e2213b395bf9758b6ad9fb44eec1515ef73a5316093f4893177761b4d0c5e43443c5a128dc2f79d6108e1540b20228c4058a4e2180fd02eae9127294567adfad6b7a393c915be347fa293d6eb68e18557bd89c19cf80f003eaa761a94783a731926fd69df099aa0a081747ea01e91a881e07df083c1781cc2607c2ebdd867d52d8ff276802c653dcc497535c96bcb6a16425adff31fe8611c55f598575e72ca06e0229f92f57b129fbd7f6a33c4716763bca05102b74afa9082eb03492f91c\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-337a1214847b4e068928d41e57d48b75296989f7b093760518b160b21515dec6aab4ac6ead05bdb5252e84f6a1ac02528efc6b87491f881ba1233b6d4fccbdaf6691b8c1883fa7bd47b1b9f2440811cc08763345cd6433d8bac1e0975d854b9f0b219d44fa19636616788b3e104a4b7ed32b80161a57e9452f5c3257c1b31663c54df544dd47b8477374e6618670d37cad3c4820910f88e870971555ca664b63409c8da2aeb7f78e52fb5bdff17d0862bc042bc6ad2a54d6d2292b4ca0d5859510c74536c605d78755d383993981aadd947682d3c6e33c1415725dd2c3730edc040b676422a8a88e33be28323e39acb2678a561fba2594d2244e7c73ab5c181050264da26159f6ce627a9e04f53fbfa5b7e5e116189c0606b315c1293949824429f340b5826eb3674333d7c62d5a2e7a9a5d0fe7bcb7f48eb39712dd53b691f62d67179f84f2848e9b2fd140115bfb9f8df6cdf05cc2f808b50b5470e1089aca044b8074ccbde39708fb2188e8352611a298d59b44680417dc35ddc93dc5a709fdc553d3e95987c1b149251d56c11d59c845eec726da222e2966886d33969885209e8972e26113a9634ac367a3fccc74007d7061e34fc939cf7f354d3465083ee143356a664d58a4c2897c77909d0f23929a2247f36c2f0f792654167a97d75aa93b1b13543e3e8591cfd29deaf56a5974c93bf165c73873db956619d6a982285084bc7cf2c4b58681a6e6913333595a07315f15d79ba0b27d590a146dc3b55354443ed74e524c2b486984e2e06622b0a00bacb8f654a205faa67a77609d89a1c12538c2f6cf6e019d11b54db176b9cdd3382c999a61a81e16126eeaca5320c44f44e77ed20117556b0929d538759619a8b57688c685bfdb8f918b0064029047d2043f2398f9539610302463a7b7bf436f58a8112cf1bcaaebcc19e94d0c3a8a53651d08b0782eb138d9741f8891b069e0b38fb24336d8a6cd1439f53b7b259c2eef718857112d9290ae9e402e8b5150cefa7496f224dba899abea69826490bc024b0dc080e5dab3a1a767ae3a22e49961a91257b80a04fa6aa48f3428e6041d6d64507c322b866899cf26adf5c48735dbc74f667d1e836447751a0da66e29548cae37a6f7c5aab572abc4e67bd58cbb5c65c2e41acf01b82019fc6c75f2931161cbbac2916250bc5472ccf7655b45d78402973da4c01b66134687f3b51349869bccb8cf4021c560209b184da65cba0928b01c45293f0b5e937b8cb6ec4a7e7a9c54a3b26d81c0fed81f18b764e639b0cca22824d09b90089995aaa2c9584f34a76d44e1092ad6cc6e99b4a6b43d58dc28a6c276f2140bebb9065ac6ad296a47cbd20df07a3cfc58556228b2bea47b19fc4646363ce4cc6bd286b912a608603bc2ac5a43eac45ff272be155969dbc764e630c0ab83197060caad34bd22b24beb25b2e7ac688ea552e8513b6422b9825112f39779dec761b92b391782bb239c99957a127352b68d77c55c013eaedc39efea650a7a214f0a8e55dc2848f84e792310aac629f6b2473a9b42783c6f870a33a197397e95652df3b646c3a9a2569d4dd333b7c62b7c7ba9198c2ba4c1110ef182c9ac645262b23ae8760753c4b88b55425144a91075cd90b31f9696fa1c326a8886765ccd67e119ddfaa185e292131128dd466206d9b4fc62250c6892be09bd6d379e88a86204226aa9449cb1f39efe58021154130e630ef70735ec57cf4f2acb93ec4434c4cd31f1a4fe798aeb50708cf90e5257991a09bdd3963f2fca8292c17f870a4f5af4cf682583ec953f1321b68f90722387136ad46d81e6a44080784b19cb975630116817e81b48051518ede43acdd9b9eab02dd481b200e3093dbb46228cc30d222c81514d1bf319bb239aa8db631f0849654285fa513b81149c19473b43caafd2115939464207076a11b7c6445a9837fcb6fea0930a321a22320658334d958a98c8921e6bea31b53b3d0912cf737c7b08022b0413bf27504eaaec33c7b8bce11427be219b945668baacb1c6e238a0a57b59d48477218db93b28860132647bcd69e8c62712a4abea8316c42e121201fb4a37e0d942464ac4e0c79805d3c61054a7e897809f37295e04ce42464d3096a388ea0b6ff5c04f3c665291012a5c4dd2cbc08d0996054a52d0a26d153aa54eb5a8ce66675bfcb657f0c952f273c5899fba9a01aef2b8934386d6695471dbac20a2b5936847da5b419ee5c34c4b100c36135ee1ca83b0990b7c405570321209a288d284e4bc7e56809591209d07050a39e629b3280574065d0f102788325b0b5b14d1fbcf2ddc0dcb6c9aa959ae2d2b7c011013814a3971d16b4d2c3480aa4c1eb135736c0d70829dea14ac862b46e9267f392ac8f1a2304b7125d7b08ed0839c61b4c02253045c2435990bc1b6d4c27244035a763d63e8ca6291390c417ee0e9beb805915dd737d68530ff27c943a39da835c49d99c0b6c50a770906aac0a5ba988e650caed744066c7a131eb050678837a3fa9b39379ef9e9283e2b0deacabf1b833b358a1a9f1c78bbf20498b9702b259ea5bb1d58844df66519c1bb0323a4b3f4866ae5ca703e6680de0253fc659b9491ae70d307f5aa4c2c888295b9122be209fda3a5a911959f6a9f0c550a3978991737a76ef408c27ccaac7443da67bfa76a79fbbc65ea72b3abb96b2b048ecd4116291852c568b59bfaaa9531524e36644112a76a809f9d0683a7d04a35cc4729017d70f5b1bb76b74b618cc9e181aadc8eb4ba5973a560c0f55dd1681ce91ca3e8e2275c8c71e5a536c7988200b5646afba80fe0c902e86d990a2ae91750409a5ea09645fa5521360051271ac6bc569b6d155fe8a379a418cfd000431cdba989872f73e2771e0b498e9698f0006050b5a06501a4b705434046aff69cc961077454795a6b3184f3ab402a22a819a24ca856c6a9e01d475c76aa7c71bfb692b182bb184b95b0fa363b76a93c7238a41661226c408218576b175e4084ca1d68b3edf79db991107bc106d103b7fa682189ba9f67c21865f2b88de32c6c757bf343b9b15b10e0a792dd3657e3d85be3dc5c3c52650425c8c62a735da286ecaa9aa15054f5245b3b514ef2c309dac712403a9d2999add6e351caacbd80a68995d67fe094a5c542994a88376397a7a15ccf1a9575e20b6a7b5c40c3c9739b02a53ed5abbc502ab66243c304b74fe27fb7ba7348b3a23cd65ad515755744839616a2e87120cb0a1e4f30ce7a6a2fa2488649dacd86c2e5fcd0162d826fb1e6adb4e0d9cd0d417b6e13a9ab1fd3fa49ecded0d3a19da325bac1a7b566823256fd56cc6b3a3696c752c98d221b9486c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\"),\n-                    xeh(\"\"\"\n-df7636e15fc4dc76d7e29df36ec563fc89a4698147ee234b22cc444c389126bc96d2ce9c972fc6069cd53f83e2d4990fe1974e56fb71b3a6051c4841e0b9058abd922a9991fe7ac05fc9a84bfb04487e7d6b4bbfab626a8ae016319af35d498ad76ba40ce005a4392c2900a716d16cad3fe32c80a7648de0ddacbe00f6ba77a1b7d9963772c1a08a8b1f367a48f59533a0fb64e40bb9b1eb6d855d2dfca71559eaec8105e5d8150489ad8b58774c6eea083f37fbdb6ee4c2ed4eb7042eb656e4992613cc467363571bc2462d260b793664058b723af3eba417da947b8003482665e8bc16045bf3f7f6c1f3014cc15b53053ec1bdb450df8aaaa7761eb06aba76117fe6c68dd9a138ec9d6b48551ed911e931e384d186953d180f3dd484e37dac5355fb922de719c8e2660b490f903a7d40464ce7058b322977063392415a8558d97cda6d576fafcb9df2f64b3e7b8387ee99fb39dc603a717e6411b7cbe812b4afa69bb8c096d2217d146b79dd30fe285b2426f3a44240982de43ee6383940ffbfef3323bd7a9eac6c0cfb4ef222288baa0361246888911d91b4b6b76d21ea11dd80a36b12381b31d1305842262437c97e501cb9fcab443ec26ddd18597170f2827b5b1840a94ff76f0a9c52d57d9adff6b522df25fc7797335844fa90901502878d6bb89b0beb7da8365d6127d453cbd7cffe728d477fad58633ab3ff9cda39a84cd5664662c2d4a3715c3ba00b390b8fdcc1b6ffe6d4f5a70d0191630d2e4e2ef1d499521aab477596d0c8ac3110a37b018dd616af42f39c06e862fa5804522603ac1d6beae7d68fd6b4995fc6479b5ca9a8009208775b4ff90c613a47563554cb2868e17929ddb722786251658ae59e643226fbce24178cf44f534e55ee0853bf7ae8c6d2074af6c10697ebfbc14c25b80105d32a98c88ab81545c5ff80e94564f223d72165b975b96d68986d4861fdbe94e2ad7a39cdd1de612c4426bb6e17c22cfdc9dbde43187f009f8d85bf30408731ae68afb69d08150f63d4ec4d4493e6a5f4cbb350b935101cf8d43136c7df534614272ffed99a686823cfca16758ad5349d0db3ebe3a63bec25615f5f2c0000a8f9d2150aa4478119603b151fad12c582490be381944b52670c0e10e18a4db0fb44c463e14f71f7cb7182c5d58692edd26ecf3fb40e2b42a4d4f79e3044fe11a85a87703e8b1606b7940ea0cf57067f28a1c99430f7220fb5be10833040ec9e1bffbda6e791d3c200f6a83a271ad1eb164f046a4184c9168af5ee6b5497d7372bdd1199f1d684a912c45ac70bbca360c1ed65c433dbf2cc2ef2e0a94be79c581fb6b31f6d43acc43ebd8e8e62e7b8ce5128aab3f20cba3df5e433b5b64dcbbacffc7b0858184834d42412c09cc6f68499a7792e8471501fda7eb07f3c0f7fba7bf3ff6dee1435269e20ce5da5577dbe68a0869b211c9fce3e8d456fe661e5710fa964c9ac304c28b7d84b0063e175bb4de4fb6859a2a30fa4b15e5d4bdbe6241760829584c594c201b65312011c\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-dffb727bba946a7a3a4066a2b14c31225806cec0a9f685a1d5d9a4ebbb4b98245dbd7a7303f13254302d7f428dfcc702c3b85780fb1a962529c0607461bc84269ac640f0a3741a342c960050940f06674dc4c449709a13449b190a28c8b89678df4924fe8288e7c37788e368b8c3a202db001cc56f70d7003bd6ca96c5114b28b19b13957231508ccc266ecac54f69120c76ab71bc9a1de3b9ad4c8b9c4c092845306ec68d46d077eaabac99e30d2133014d6061a507a0b1a4be09dcacfdf0cacdb24d612badd31cab6d710cd703b18b695a0d65caf440c735511cf6499288e45baa00cbbd904e629b8ffa40aad3799a5dbcaea9d3073a2b47a7502d2e53318168395576a65fd0c6639c9a513a87065c6657f822853a40ab25abb33a1fb834a14e2469c9d1a06127b4be271a09f7c70a948897729a93451ee67ac7834c05c44862bc291a89a7c27b829e7ce585cf4538d75c98c6e7975f62c3f0120a462cc93922156015b8f8615808c9ac8011c7282937ee3620e379c1227208fc2690030b46c71a6b08cb75f34347462763fb1c16ac23c7c37cc0f538584cc9b19be520f7b8186f1cba050c8da4d9576ae60c83d19563f620f50c0135a485a10425de995ec95b919443b1b7d87a27c3ad8046290a6677d3c8391be43f7ba4b46cdaa0431477ee94678f94a224ba1435b01b62444815022f9037a307054934640443207b0521ae9c9b0b4c1067da3151a30323bc5086cdc11ad549515b7b1455cacb3edcc4765b69aef4ab35094436a40b27d018b5fc77dcf951ebd214a72508fc554648679c9ee8089286635c45864ae591be1b5e8e981577a10ec7412273924a005b3219c7682e3c0671a975c463755e9941025b4b5a6cbbef5bb351a10ae38c5c19d113b13a8c11b36c40eb18a7b2ae2ad748ddc80e9ae011157c3c8c4041d0b2713156ac24a50e770b60c87a0d438a8b4570990993900d35421fa47f8283a9d4b9abbd0c5bb1ec02c0d9967ebab566e0a1a916cfa1ea52c7f9aed2152b852500a7581fe3fb4ec1b22b825c4af329abe6db87b2858d605459bf89bbe2580fb2e055387c6c33929ec0c60f269a6ca51c2323686c73e280aaa8138f8b2cea4cc27efb644c17b6cc646ba863aab91bb5dda711292a09257997f24a18b653910122965e873b09325ffee4b802da084c31a28fa6ce83da615b230cf1c11e16d9384be526e520c0e96059fc25653caa51a28657f96921f69c9f64f86805938166e03a81601b1f51a13eaaaaeaf420f83808429119fe017d9198915a6753cb35942f20b6ddac2e566b7d29b974ea96262f2a092a12592a73c383dc774cf6ae386200581a093abb9d7d5bc7d1fc694a909965c987dfd6b502fca685a6431fbaaeb85087c72a5dd4484e81b556b357b52fb76d234a24ec4991ec5863b66b7a09000e3b5804b575a5d06a0d60806e7b310e7804aaacf37d86e4c013f692d7f70912a1941ea0a7aeb5130ab43b3eb93b0e56c5cb242542b1bc3e9c9270b71fcf4028981ba7d9b60c3a6081731407acf2274021b607672528bb47afc2b39fe097f5c12f32c0c744961117212307525ab2e7a8f5f5302f2b90bceb84436a34b77cb1cae82fd6c63a44bb7312229f38375f8f405bdd3bc19ad9180367aba6988e0276031469512a6514a43902c6d66c06a236f247b077323d5bc1342c93ad1c0638f0b31aecc4a0980a543e488a39e726eceb54d1f807ce3aa556700842f1b2033871d2036ecc567f244c988242641c2aac1e31322cd08d2f95c5d559ba2328808618c5c6d8b49ca64c45082bca908dc5a75cffb1368c82cce0ca1bdd65128e3782d306829d608c2d40cd67e6ad09e79f39dbb6d9e41db559218c8263d1f6a8d4441f465a6e05510208b00522a9a6a77cae073817d99a40f1e84f4224289700a173c415095c7d35a32554678ee8087934c79943c7afdc40141a4810e94602d16c77cb80a2af5363f4444a9c32bfb8bc11e97c0d75435db0e70608dc95d85b70746263cf8c4def024a303807bb6640bee4176142c1be417aead89dcfba17eb319add262441a0c451847dd9e93dcae7c2e9c04f67c098123699df6c39dc90278362558df092c7292364c6c34cd0be104734fb1aca5282bcadc563ac571c8394b6fdeb9372081277b2987f3a26d0a812170303ca09218e842c1d2b886095bb25700e021abf45710550c4851fab4f7968460972144c1b6496f4465a0ab28478b1662b900353ca3fec6ab2c060d64caba43548c28654e1a38da32731d551b9ed03376c01be6466c74d44ce1aba9c2cc694db99cf1b09bc785ac5f0603c0248b352a69599e6b9225c887ec045a1708d73c263fea1bcc3782fd1ba1907064293fc4aced3604fd13c9d831323900f101534454bc7ff071372eba94db771dce7ab21e367925ca77bc3825db071e0f8cf207b2ca519bae8a2625c6b7b593888427a32462c0e98f009eab7b4bc151e7b727b6ba93ed0b686854026418272987069af29712c0c002e1304fa10071147ac1c6b4bbcd3232027ae2a0381a31812fb548360aa45bbbc711a7106c600af77535c51c85aafdbadf8ca6fb2c66bf66cb8856596b292490889a9b079c27d322ecbd34dcd8c2e637a7337eaaccf9c0654f748f73a6bc2921f36e1c6e662456aa66c55642c511c8376868a1a5c829da22e92e9a9af2b6ce7207bc7f94281c46eb76ab742c8ad0374973b36157018b9ba221afa3a3fd80601e85668391b97bfb30912038867b260ffc84c7fa054c0cb1f53d337b2f680d6f627093a21f7c6a065d276279bc83b759ae035288362b63b598e1611a21ae65c62f12948554cfe23bbf282702f87b540248219548fb0c363d19b9aa387353aec231965561397c3b4a41199615f02a27d7a5a6a8a93258b4466f389cd07a5ced1e75306d774c79c0b7b591fa5eb06b544bd4b751a3262481b300d1947a256f5c1a290c4eae87d0cb4b843441ef9f02ebc1100069b696c8ccbfa0958fb4551706306cb5c4d1e417a694718cf0a1e8337067a1a3c7981b81b868c8ebb71d956967e904f82c52f8a0865c05698f0e673ebe48c332293600986967559d9851bf75540cf7704dc35559b024298986d2f612a1ec18ff7f2ce1634482bf626939812c346174134ab65cc0bb7487e87d09ff7965f35a9474416c90a978bf29a5c3150bfa6745289473b485b7650ba78699b843e40c52ab380042cb3533ba8b640295faca956b0556a30be2b624942c97068f9d55db7c2d1acf9cf002c9ea2d973d79a050ba26ae235207358d083e310abc910d1bad823383a5154c8b9ceb2e525dcdc6e0a0eb8cdf10603a6185a3631d4ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\"),\n-                    xeh(\"\"\"\n-03788c19316364d84eae260acedabd726bed19087292fa3e1a00098d0e2d83f0001d7595ed9f43af93b801d06a1902ae53dc57bb9a6876c195473092bf794e390556ac245a5b8c25ff873d98f9736c2098852fe7aecba0264c080d9a94b353827f9eb6022e184a4825d708c64b4516b43de8badb525a1c97b2a449c9f0ec09908bef2904f609cc94728b7083d0c522bfc17f8d16b223ea19f494eaa917558e8c885c3409ea091cf7abfd250f3fd4d7d5ea41cdabe560bd2499cdced93e9bafc80fe740c43d6ef8eadd853785e6f3333bf1490e72191f139a591d08b68980f7ce8bbd4ef1a89c58ca403812f6b099ca5d9e1b80e4cb3be036b724142a90038abd5a9588e4540f8f0531714a039e9eae4b20b4fd7edc391fb366a1a2171d24bd627d9af4cd0da0b49e743d521b4d9c57f4bf82d3aeb1d0d58eb32f529587534e2ab9387bedb33feeabb68fcfe34b9e24758ec825060a1271639876ee6fe3295bc6c944d43ac028b6fcee8d127a2d54661bb2c2e91e4aee79bf7a122ed32c2ef6fc20ea01168af4a3e0d1ffb14d86682a9d7b450bf0d3c36af16f488c7d5cf0c3d6a02b0e88b85d2f92e6632df585bb4d3e2a7686447949db152ddad5a1266284fc1c37767d2a4d964dd1dacebec917bf84e92e7498cec4342e180510108acbac38b8beebde7271faf0a74cbfeb66241c6b27753135989e1f4c16cb062273c21666d5b1d68e34fdc1c34354c539d52f2de1d9c8b80b16a9065479e78406e766fcecb04017c31a2a31f7649f32315bdc6ffe2832f7aba29a76066df4fe473f47489ec783e36f591b607f5d93048bf48f54908cc645ee3f727c08549db2b07200d0ab3d7b31961418ee46dc954f493efa33296e722c72e4b69ae9c224b8b4ad9117f4aaa2c29578f8c20c95b3218f6970294064f9cc03b874a8c0907e232874164d4b8d8e1a573a2a894a3f8b5844e94a731daa17ad0d4c68443ea8d7a12fc74c7d930bdc9da13b322d2c12267a245d5c86456dfbd353f244f383324533ceb6ecb67552f9a9186bad91cce2c06ef328fc16159dda99984e03e624f8557db1dea2a42257e02c820939d1ff744fa6becadf1df969495411e141eecebad74201a81dcbb9ad80fd2ee2cdd2a34656d599cad9a62a96e83d10d6dbd1f2f0d6725f0c268627c6c6df9ae95cd972ab4e75277d47dd7e97a56a61ee3c75220c733b739ae941fea7e992c4513444aa6144eaefca06e26f998a503f33ee9840a66c0b4f0f305d55875a61c30156af670dfb236c32675d8ec124ef78e668abc8bfd20793f9b4a706de79733e4af44dcc003e55981f912fe43b298c46575aade5db5501582ecfd7314d4f62f9decace0b2992b17a0ae2c0c33e51cf4c25a93fc72cca2ab17125be2a781adcc8f686455a5bb0d328808bfe3273657c59aced7a486ed08ebb1427106d47278b058773be9bca944caccbece003b812846c81464de46cf2fd495e2edba200f92397d4c42565671ea688609267355287206d341213fa544ecdd0e4a900f7\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-e9f8ce5f78cfd9f8bcc28488b4fc383bc2433228019c49827382628b9c77bfa29035cac08802594704bee56911d587b71b351e6e1c1bd9dc1b44aa876f25c7e9d4811359631993c0aa31214960adf186ad50f10b933b46197b365c631a5803c502875e00a364f60c179086a9164b3106687752b017771a2b1c702cbd457a113abcc380020b427e7ca04523965a1f797f5675721c588e17a812f1d96b1a272b290479c78612f1987ddc9818ffe53a4921c71f9325cba7c975d392dadc18f174aee598286ffa29f0412a21fb96d7e0776708ccdc615ed4d87145425992ba8c77709ca4495de1b75de367c704654c0f1b391d766101f65535ebc9a8e4795402ceaf06a0328240713565070552adf02749964cf851ab2f2b37162b52d260a556634ff26b22b3aa28745624f74139fbb1ac976b1fb54b7590632ff7150de75ba0d6507bd8f029056232a73493dcfc70582126f2c7933b919172d465ce1acbdc3c8a2a372b13b6813df686c495b915c8a7bc089abf732b7bc38f7d6a15e07022df5922a801c943364f942b43eac13930d3c827b8a5b0fbab35e62391204ca333648a21b13c01abcfe8800b4593b52a0560373059678a8d645267a9c74d98a2c2bb94940137ae68a1e441c4fa30a7cf1433774762501b588a07ae98c493e4b9003133a441acc50c4ac6b69c7eccd1c84729693d097280338c133b91c4531b812a40e5c31ba41a436a71cdd07813f5a8bf85142c4c03a6a9f338a5b1caae9422f8f30e523c34b4741937a9b0037b39bd4731d73a97cfda20bd3534db05bffe4b4ac879cd50c758035c3f912467a83c9d071184c43bb525483a4f0575da39b11c6b942479b56c413d54aa3c455aab2e5287768c7195221caa13512174a4ee7164e0eb3c0d32417470a388da4013f51c00e31d87452d7855541d2846d53a0446921412fb4a7e492e9c0637bad68f33ab424b0898645b824c996f40133dcb73a9cc95472ab067b32b20b939ba3d9265154b114a8b20fde59e7dc5b0af6092f90b93630ca416f0b648ec0c4d5711d652a2375243ee76804b3a63382a2aa260a99b11782ca88ddfa5cd8658b1f2baba58405ba2fb46ddb113373cbadb737f34f6bcae676ce1b659ad57bffe64c79b648ee44552a051296b839baeb1a20c3777420b4a8a342ad693b23db1a074605f6cb282bb8a360fc2cf5b5ac3d0541832791af9580a1f099d98f5443ab7c246a3a510a84cfbc9a06a57938f5608cdb33725b03d700abaad2c8145732f82d575de539bf66943402c8aa4f9021a144976350f37cc407ed3787079c701cca78c606f31f2bda660c7f75b6407f18b8fb81ddddb7aa013b725fbc1d3b62e2a9988cbf8c443eb8c12a0ab2cf04095c622f2b48c01641df12a940d067c6af0c0a3bc0243bbb30e477af82c18e32695867a9cf18107f0469b9b95111c2a1d3eb40921b155e0f5986e25cd036c85f176850e57289e868d27585b965b721832862e4317de0c7d6db76e657166e4b81b5f57bed27a7e097482e5260be91767a7e7a37649726a8b79b71473cd1a25aae10aa2f480bfa65f4a010595435eec287ea586070b9a5f31f05b72c743288cbfaacacbbc5792ecc6c568ca3438e812772071873b6b97125b613002a38c5bae914cc90630d56673b824a14dd20697f800b13b17769c450a8b0dae472a2b70435643c82b329ca6440e3fd16a23dcba5d859ec8837a49d18f5c61950702846a806318752588f88590f0672fb5cf02f48fc3a8073b50c17dc8ab60c2601ef15ea514cf965a42bd771af7b917cc28a368755771ba3069036f57e1206857159394cf1b9702abfc5df3fc1dcfcbad79f2bcb3b7c9150706eb520a57b547bf217cdc902214c1b58a7c8c585b20ff1242de6525ae10cb857881897319f909870b5a5a732093f17c2172688fb585490307902e1872a4c384624b8b27539e7db3c78c272c14a988f3ab48a2e787a794b83186535970c0d19845b884c5cd427dd5ea699349363c3006656594a48bb22337877917258f0a356a58b0d5da3bd99976dde9357658b1394843c800a2cd1c608877703e3c5ca1f282d8b4b773d1623a39833f393009441c8813698957bb86ec8f4de60a92e0c2e6178e269024ff5896e2475d65854cbe4466b0671684b55490240b158657384b67db1b0b8c0c07422b460d05a1323456ca73cf749a727ad0cb81e1109388af47f321cdd836f008208978430ff1b6aad03163a412f6b93e09bcb6acdb3633b69c47aa5acb004fc7bcc8e3e2a24f949e24d1c23b9346e2c3a32c1791b67cb16f16a96ac58034daae1ca11a838ac0ddd43883976c9ddb799d53abec005b00faa3a15702ac2187d9b13b4e0a3ea8b2c9fc77a1cc23b633f9087c188291c74c9db8622dc03b78f48a35716ab5202cdde6cf3b62464cb87064b7b02a8890af2969c9275adfd28ec6c2940c717c8575a84a5cbbbd983c57183fc2eb1ac35744cda32515c2a66e3c988ed0cdb9e6778e98295f7cca7f283960275ca0222dae433c0035522ca7650606436bd767679b42b4b69912d0553e276f6b6428b7d7ca99b7ba855448e495bc51b1871a627edbf535045b037a698c8833a4696073bbe6740ff222c726c9cc636402c912dc1232b10197b7440490b92ca8e683eb4817a2b866c85a07a38885ba0284da691f99f167e1baa2caf41ad75a7931a43e21a9671bd97a65dc415c03b368d075bab0cd216b9939e4325e1c9c96251d48dc7f064339dc062b4a3777cc24bf01c272d1ca86819027cad3a491600efaf961c815940977074514a022dc40cd503ae778015d3305cd8b04d4c001d410cee5538e9331982ee52fee9857ea5c685b41bf16bc6bd7754dcab4ae99024f69336ddbc42a95079668bb8fccbc6ff66a6b05768d6b83c03c759a2bc6ad2c2205b26b41fdf022da075cf1589d88954ba502875c28ad47c31b857998acc5287da6308f800d53f95797e52d0a29ae4aeb018ee418c4f7cf72696aa286addae756e619aa8121b481ab66f25117970b66e5866b90652190d184669a4def63219c025f02149f287656e0a235cf426c7178ad99c61294a2cbc9e34fe5ea735baa8da8384daf0a13dce458433067b004bc78922c3dcc025e5688b67ab4d7fcbce06756d49772d4ebabd8b94bf07268cee346d252a9161262d38a9f04eacd7bc76a82f477334a0b3c272b4ab84aba7205a1b158319139827b3d219784101456b964929fa96d27d48ab35aa1b6f914c1465ca9548559c9a8d1f7e328029954825a12a8b4f2f4cf320831f0edb16a7359738889b1cf1870ea47583387ef1a1a3f7e78a70c9da0aec4b2d1bd6f4200cc78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\"),\n-                    xeh(\"\"\"\n-14b590d4c6aec9d35b258fac481f7fd76aab8734de44fdb50372c7d51a5c89e0eab0492d73a81289b2e144dfc808e57e4c2678d3d10a1174f11c08c67716faaf021a44538a85834cb1ba3185f03db791df8f1c0f2ba3515eaa1ff3d478f457112efee587d47ffbb0296d23153730f74923eac6a51234fa13e8ff0f849672e0e5b6fbc7c10acbbd9e422515cadcbf93709f6cb3b92f81fa4dfb44286752bf430e384058f6f5f0125a13bc7b86c3171cee73de2aeab726af76d8ad62492389fb1f29839938eddecadfcd2168bce9a954d9aa56d99cde981cbe9d33b3aa79f1751030699981ee68f4ff3dc3efa17cf8f93e3dd4b70aa8327358196fc77431f900c7741cf5d9c11bd0659920f2ca5f60e023dcfd6931f6202d9dc0fdec8b835dfef83b99d188935ecc9f4ed03b993bea634ff0fb77f9d2496a5125a3ea541b54f020442151d864ccd3231141a203496fa7a40196e9dc8618dd3a891677d48f1e694097569db4a52081ab1ff1396c3d930d3ee635500675ab1662f68f921b2ab6730de901b23121de37ef9ddd40cf62b13f8f48bd7e4ac2a38ad53f977afe961260de547be03d709e8316c7ea9b5415e48b240f5b97e2600c8d5f2172bc4d10f1a2814f650dd07373ef6da5486621f5131722add069526d3b24e97cfbb8ab5ae5cdfc16d944c524013bc71da81afe1bc9648dd7a5b0f0c509bc0251c08ed15baaf8fb9bd3db9ec006a445ceb115562f5ce1978781e1ee6cde9cd1ea2d5d32be612e7f2d9ee1a94dad192019cc031ef44fe5c1b3de9fd76062faa5f25b5a8da1342addaeaa095ff3295bd5002b7d8a2335a04f1c811d8e7c6cd7f3a43e1e4af1efffab01015256540b9c0b430ee65830fb8d1732c903520319776daccde5b9628416b422a36cfd5708ea263067a064fa753e35f08ec3b2a7a1839d1137b000e7ff2f95ab3484e9f1aee634fc08e217168450b2419955e8260dcb9b386c2e5dacdcdc1de195200e5ed96809bb89754ecff2d02be76226ca99b1be92123ae79a63e8332adfacbcd9adfc04a486b9c4defea6c2887db85e5215db4b32650199361a3fbe20ceaa0d6d578ab6125145d730e78566ff25427718d5a0fcd9c6adfa3db7f23017e5887ea5c4cec213abbf1784f548677ad209cb32c09d478c629e14944d9b4e699196ea771a4549d9b00d7acfb3cca68adddf4945dd63a6f72ba74da32113bd4f8631df7b750fc56ca49059839be96103e9f4266ae7bb7ec257136ef895dbb07ff91a63aaff2a5ea6f8fc35f345c52e0ffdb7e44b82755e80697b9a35c3f34a378c45b99ca31d009d6ebf23f923d27b3a10102e2e82cab80cd52d68f83e908c43e379f15c011e138de668eb2c74928356473cddccc209afacc181a054cdc6085af4933cf1177000abdcb405e9478e05ecf5b3f1a441d0c0069915352bd33a5613fe93eec63b6df41be11ca585b4354311569e866f2c188552bd287520b52b949ba6752e723ba887897787a53eeb114627c08621ba96aa69962abd5917ef33e7e9\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-a52bafa1cc917ba04e1db8b8e4c308863025978b8d048242a744c60b50cf651b7670cb488519815a74b6a0ca7c8b82abdd168e9be479556743e80bca927503aff16714e60962c2c9e93576cdca27336796076568e0b5bef71a7434e532274a500ba9109a8a0b7b771e5643516de322da248334f1cb70d27312242e0fba31d07113d3299b388b3be33b7941721ba36c863849a32425939dfacd4851976bb000e61cbca9c6034267cffd30872462c780785506506b87d270ee0095e88641f877a838b5837c2418a3ea005b2a5fc62c9fd1861a85c152adc63637273a8db69e4b6273f11c6a902b120b6374154b7392b0483a664e36a88e4ac5aeefc2c3f765af3ed68369d5c1c1928cad77227da1c4265062cce00f1cd03b169a782fd48d8cea5c80560af611597e71cba97ba1e163c3fd318d9c904d281a5c75b79b3d1b71f6fa9bf20915c5c148ac441150e63741177cabb720ccc72505f3890f1a2696d672012cb2a73b9d7dd05d0bd93930c77bab408078b077711b6d08176cbd227f1bd24e56603d8481939852a7bb98a72c073b622244fc4476cd633383f19784e399c24b55db12bd30f4aaee90c714c75342435b509b38fc7911aef43dfa169cda1402258c5835515907b3b11be48e4a7770ede4492c7b5cb9739e2310c3bd9a414b4678883ba7d374975a269021ac5d300b0a8a9071b2262d26b49f336a6f79e68a1e5c2203e296c960ce3ec71a5ef794838ccd79c758181b67c7988f96f858a365a9ba48290009af0bab82a4a4b18a7990d9ba0fd4e23da9d5c6e0d353b2fc4caa1a5eea00a7a0baa2ae1576fac5c6e229ba8b71b23b247072e0b3f92279e6100921895a0025b23d334098d92793fc5a50ccaf588cb2fb51c3a07c005261696985aa1e90a167a7803c588839d4c555c18f73579b3e422ff1202717d4842e48a846c9cd1d6c2f647b98a48c7e47a0204cc6b6d007b027f1c1721388d5a3ae615ca2cdec18e3f09dbdc66249d77ee6240c8240cc10021a6dfb4358d7740558517658c28f507f3504007f619fe51947b2681f3d48c1a81412fe6a09bf9cb56ff648810b5fe5686bbea352e102bb9803440367353646b300122f9b16b2631329e8563a5abc29fd477b8bcb5f0ef95987d4ae71243979b201b0cb27f07c839703bdce9a738eb4738d6457b937a2e65a011389737df46aad436689b69fd7680180ba0770c0484c085e9499adbf7026da72b48ef1cf45021f8d604f2a761d8fac10e6ba71e215712bbc73c5aa1f4b801dcf278063690d31617cd863237ac91556f492484238111a9da46ab6a1c3c1e00620b62102bcb1082ffb54f1ca840518a3a75b845a59ad45111170921f65704f2c83a8281b43facc0b2b007b0e88206bacbd3c6a78faf904f6475d328bc935d01de6033f9931b3bd5a3e10a406eb9290d1052eeb374ef71b96755446f4a98b6e4c9702f7c7acd64755478824855d3d25c9f8733f55f788e8e91913737bda97c1811b6cadd10e9e90072eb81c37611168ca0699c24d1426a1b3f6ab8b346d0a287ed4a04869d94dba7160ca32ca3b7a8ef8b896148419e3a80d217c1304394273e10d54365e83f9bd09119736f05e36218d70f9086e178c05b46c32848d4c14cb6c567b994c1bfb75bf11fc3db2915f890c626ef2bfb14c1aacf9b77914bda70a37e165c65b03727e1834f2d6471f85bc705b8f63c75672336141c44e6c9b7162f0ad93a840987474b7711be7b8b7a587608604acce1b6ef5618495f365f221b5464c41d6448f87986fe8f71d27658f40a15bdd74c7ece1b8992c137e3b43b8c27e228bb9483255a7050a23755c671b4d9854a185b2707b342d051c262d7cc12439b258b30a4c14096e1c91e962944e7ccc11ca35c5d83c937aa0cedacfb89cc6c552011e31b11fc95626fa0d1c04023d8772501402187ab2af9391abe69f988a5daf8114cae6ab0010041ef4af84763e287c4368eba94e6b0bbde17585bac5a8d89e285c4569d9025b65b301374a32018366bb66f54aa4b8cc385f93a34325282f36c5bbe172ad2cb44e32aa876113d8c1000d94b7f0838acd2000a6e386e287cf77226fbc9588a5019b073a237029820bbb77f934be084318e01562eda6b4e0f01d2dc17caf290fc5b2037738a33ed181c6b4aa4d10982c38aad1143ff9530e062ab3f16a9177f145bf0a4b1a1b037682506628ab3fb127df8ccc36d0095074c0db42bf628c690665cebbd232b302802943bec761acb00065b1e07471a39d36449de0c8591de5cddcdcc3a1c43b5107ae30640fa221bc5262a86c0b0124b434da226d959ac55060cba5f32587b1892471300159c9d8045d59cb00cba04821f1a6e19a713609855e3acc0959cb2c88ac19d335b0856d19e34e306602d9c66ad1085edecac34c55443af41e76fc072741ae61950cfc174ff4f3cee652b280a39124ab7bf6f5283f2151b375a2668b71049042a421086db12e7fc7bff4d95605e8b8d5c59bdb47a71d06089e8a13e064040b1289a70b804481bd22ebca2a4340e5a498e83bb0f96c4955f516a5d125408656b72299ae73ca18a2c58342810f9c10808353acf006f93637e0254b6cc216d4c7336d5b5ce5b55fcddca0cc59a0077a6b939484eb64648281b51c3756c9c8bfae53a904f25925ecb719c25a3d378f0cc5634a4470cd839cca90701582383bf27fd2f2bce345481a2a80cfc3b6588a3c328a9d2c0105129472f5231e5b901be663016d79987812c916caa364450301b7ac0f463e87e3971f4a5f13888f66d5c78aab602e4a01a99992fa25cb303cce0624bc69063063c55c16b48deb9a5945f28c614b7e5c83243fb4500b27bbd232baee32638afa0a72f505c1ca7a286c90acba7d3783a33a2b18ceba62dc7287db9aac24a946f0bbcab94c0a2d08c72b437548b9c0d5c41f3fba3d32026bf8db12ac067cc37bc79d143e3a6c40439bc476d5b10724b643ac4d5f230e2a1c14004835963b58a231bc94b008f3f50e9b493e849cca03170a67e90f00d623c9704ee9f788514239c8105938323a78f34751c8960ed420d5821b0db6722ee07a5915110315cd00bbc4ead43719bb3e4fb63afd743c522c6dd03babfd8c9891549814ab2b7e0c66c8661acfd34db8db48feda502bb271ccc03146e7c5423a8182e84554a9349238705c250c8e579079c6c7aea73f38476f46e22c67a67b4eb20dcee2556adac841b67f65421a814c9770f84a683ac0c2db2f26222107d360c1623c9da4922b3f97e33b0bfb50623a2989ec50c6612768f42d5769fbb7ca62b31fa837d30774f7ec8feafbcdbf5805c634c0c430d47b759eda5d1f98917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\"),\n-                    xeh(\"\"\"\n-9059c2e3a96472cd2e7bd86c3e78574ea36e2586c919b94a386dd22c9a816b3c9e70842584959abdebc1e208ea779851efa48a70258fc3f7d76c327d536e0f253f06c33698c8af6bf3eab1c4835e5ad76bef5da6e23a6f14f5d47d047a4a2b71ce626207e1f5d6619a992ba98205c6d1e27ba4ea52d450099988ad9a2800f3a18af4d4349ed0b7c04bb4a76b7c7f339898749aa56b8a6d274931904eb1e75e1f497c1ee28abd951b34fcc0dbc5885ebf91bc6eafe79d2286e69416c128ab3915124f80b6c19159064327433105fa13d97ff255b672fa51b6ad3722967f413dbb13a02a9014f6755c89559c40a7c6e9b61f4c48559529f1f9413824a2e466ad3dc3c8086f113edd0160bcf00574087db6b7288b1ad665781412086a2847f24286a11aa37f39088ad167344d0591ef98b458b75f5d8a4410fcfaa83d613166f7fa41ed17cf17ce4673f9cfda45592242d6f36df8f658dc6825d2ccc30d24be4cc553ac655e64477ff91fc70a26a7fe53a6ec2cdacc75872a7a2e6a30387443db17c694bbd9578971f1319e636439cffce1f46aad2f34d60ce2a8d96186b48e64240d1d0a5af878e7636e15664905f7cbceea895d97610cdcb4767c9288e0f8fb0e059bea8363f5cc036347eb2ff8652c68acd16ef5e0a77724449f8a143b23533209b050d3187e5a3ef08c9c5dc11d9836b6396f15d4218c98bd5b440853ae5ab0a921d476b0b143ba87d355b5bde28f751695c9a392bd2e29cd60e15d5133f0a636bc05c014cd623ce9c1ba5ffd69470767a9b779b03bd00971ea534ba1c5bcc0f66d3db1aa731566fe3049850aac69a461f648df35d295f91438ff2ea8b74de1937e29582b9abf960c3c74d41b63955348822c31d350b03de0b50e4233f8bbb3e3acdb2eeb1a6b5c68cc89816ad7266277a8068a8633af85f7faffb9d94efdfb61360d1960393f71050fb4a1fe964377860a0877d18f6449833f02228bcaf8b4eeb2bfb79fea35a4a117b6e5cd8c68262696fc3a011a64b5c73a524221c38b42f6e8219f418044419a08f670fded4634ab006403d85e8d03ed1a0d1550dc5ca41271f63fbf2b9361b5e196f765a18e35dfabbdb2a4b4b6ae7ce176a3a88eddde4591e5ed0936ba88e5be7b05862cdeff319dc9a4ec0f3446d8fd6545c3a240689872b9e92486a1837bec167ac6bad6dacd3e114b7da845b86a4b9a92ec3d7e37327012caba3dd22b8c4c2d2fc1c69f4d6ae6913f966444de9915d3d4a0185d82999277690ce9fbb9187436d8317460428cfb8e5869b9c9a48ec7f3d7c8e16b7d3c1111a5fa6b4f5ad80e5f2cd6c0a331afe0c554c01c61057bead42283e9f115689948129065b38ef077cb246c83a6e5156bc14c134a470ea44aba6c6f6d6b38138d0ada2ea680af00ca499801470beb646f820a427512146c60a857f812f7cbd89989d5a13311851baaa0deb66e7e2bd5f03edb21a9dce53d486434538ac17ce82e7c1ca87a39e31e039159b6f9b1318b5fa4122c3a7af4aee297d2ee2f6219\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-5b6a031b4405919bcf0a292e27c28187e3a4b1541be42bc0d972c2d8580253b9658c80089d39ce86021ce1504c6838a4f2ba1e956290d7895255ca0e1a14394ab8c00a1506211b9943c98e90838dbc70c6a9c329a9589c54f81c405608935c4c5fea378dd30a4ed60a5933c512967867b283425a8e222b50128c5d4385266af316add0c4b60895970944b6378cfce8838922325d15c74d20a27e912661796cdb959da71b96a34c514e561d306903eb07b04a394bab33ce952939f5ca616f37b81fd79b7b988712a86b80c639a4815fb288689fda7c9e3017edba542f59bf1ca9a6c950b26cb5a45bc5bb20a9b9fbeace65885037519a9bb72842ccb21928105d10279a500e5036131c97cae02caed6a9725556ca31415a683b16149723d1e7be1128c177497a9d942b727c1361f65e8a186a8d612be43044f24c4f977001d43446ed6968a49312e4cb9683db08c731ab0cd17b63a7b0ee19b30bcc0ed2505bf5fb915be7410a9948ea31570574029c531675b64dd5b529ee221bf4e06ec5030b8de52d932281bac9a5c7582bc2b781c7b89517c1b0a2d8146695a694f7670b3796130c171a949aa0f4b8ab9b8c894acabc10be1eb9c879b3bbca990b74f941f2782d6df8300dec9eaf51a48f72cf0c01c1cab4c420d650bbe23eee7181a71872713006e334b968a22d9d3883a241b72aa0ab81847683b077e26731f69734c6579ff7490009f05928ebc9afd499525b09729056768b9cd713a5a1186ae1e89b7157291b8698a4e2a675014b864a4106b02317994da8d7cb9fe2960cf01c6aeb67ea2b5108c52970ba2c9062cc523c59e3725480d528f75c9d5cd19399e8352baa5bc1662eb9e62153fc044b65a4ce2681cf122324d3c69fc02f5572b3695718fad2808e1abef8157b2e3904e22c11844c1df8d639d0c6712a190da9b75a6dd62212fc6e2a52ba111280d5a801224860e54836ea650d2e25cd89eb5b65f21d206c4e8b5a3b60c1ba0663b458e805a14927a0894575e2cf7c191e92bc20f6d7b81aba73ca28155a4b3feec403523a1d671aada5a5a1863cccd060bc4fb0009082ac282a43b951c2e54a7c865636cf91a617f3863e50c9ac3c67252365ce19ca690286cf5ac7e8355b5fe5426e1031c000318b09b982b59cd7c0cff3e5927b030db1078c625aad57976f3a03a300fa796e2740178b4125d38754367707c5c9f08b8135b3ab6859575bb0c54985186eacb46bec4499d1136bd49965678d62c7c53725a0039727f51c4760751d8c418d8170c55d44c0ae02cfcff87292069728694efad712306929a71045a9736e08e6346f148a0d23316de7b839c9c4fbf35ac38b32e4a394ca61b686208af5fa3cf6e86d56b4cf008d74684c175b178a2fa6576bd7742cc5c0679425a3283361d47956565758f507afd76f3a3747f1369f89c857098040722a9901518ce2290e03375c7d29118a11527ac024a40c8cede69f54c4af2e69134a2aae6e0134f8c6cb53d6ccfb36765d137ca6e982ec85a7d4986f1744b3b6a8b352eac726c9729b571e47556521d76a2705a10eb43d9ccb35fe0ba3b6461b83425294bb6f0ab9b8aecc7fc2d9685840ba2a94167f4684b9a173d954c7246a3daffa8fecfac4cde76265e37997e53d8137c99ef4cdc8f0194f1984b7b3886ad87fb0227d569ba5783630f248add3b881d16c904f46249ebc73a6151ee2538fdc5b248971b3bbd5af462c36548b273beb06480b28b04b359c03af7df4344cfa28cd469476e3499652ad759b761697861f1479a4400bc034738ab9b674311374374ee5d73349c0a7b9dc0c158c13739a674532b62408bcb5c70ce4c54ae26c30118c8320eb05cb0c1454b7b06bcc013c7892c9b4693f40c6651925b0a3101da97d98c19ac5a5b3f7930061db8d38e37e37e3469ae6b52fb10300da5ab71a16e9d762a2d86473442c752187d33c2809272a16649f8403609e17bbf8003aff87468e8cb4e0e2b3a2fbc20fb8b172e606830666b6550a5c13ac862113b817c2c2f1415da33b9dc1a47451246b434f586a351c55b4c9b465fa1cc9578792368209655397c3761bd7329917497e3f357f0dc8418d474ec2f01af697b5fe30248de409130c3dcb079b50ccc73a1b709ffa5010f1644de0b3c2598e8580050a0b659c034ba7ab1c627cb43736b6b8a754dac647a1b94878529676426175c700896b5d123c5e125404a59507f5fac8acd5bc5de2035a33ceb680c412374c9753aebe423ab515886cbcab2554c9b28c3497b63bfbf7adb8db29b59abfcbb501f318b5c8d61c2f33336652c787348e00c4c15c911f7e2cb67f02ba5c2b8ec9c87ec1fa6d5dfbc05f7961c6c0829d7687df542b4eb42d8d373ecac1aa55d921f7319eaca181ba1c259e4118bc27615a866944a10e28e260f7ec1083229192212ccc9085c5436210a1392918567619b97be71f65c017555a4ae60a81ef0951165a191672c864f2112839596a343edb58885bc58c6406334a385512db7dadac2b7f510830f3b3b3440f73038d53e5ab143a6b53702f30407c6c824196b4bf069a812777a8b2c26e661cc083c52fd3259ae08b9181f06d8c993f14779300ba56b88647a5314066d4b771dbc76250a60fba5afee147b01396e91a0f0dd30ade7c82b6d85f8613a9354630bf669257b57dd563ab6b07c5a2a809cb16990ad98f23f34bebf6064c049f33913d54666892864627f8c4e64b20e06b43a5c5829bfab4eb774907c36ed5eb17ec3101aa8434a5318354510df87cc01a09d06806bd95939235fb635734068f1594a11a624e7b87ffb239dfdc864ba4322ac4357e499e80656db0bb68931159d759806b3c2518a319bde226a3c250ff0c2326750a0d23beb60b442ca595adac6f775cb06cc988718bcbc29c83e39646b99abbd5f7723757b9aaf63857c30e7f0337b8fc949cc0b4ced2260736298675aa8e6a1022aa1b8cfa3104387e429370689b398a317f0bc50d7841005048aa7e29a71d0b03348328c0c268e8f6a64f518ac06c4398d7b2f82abafaa1c9c37bb1e3a147bf870cd10c21cb702aed892346cc47e6928d3f16575f1254dbfcb910aa967a87323208937d1aaf7fa90f1261131ad4b04ff36e9f6696594a2ccf3a021ce852fb9043c194c4d3d704edfc5e3d2ab671b8103e8bcfc631107815790e5733eeb66fa344b9f276c531e5505303b267b6516b00b056780230847aea99cae15bb4faba0b9d461877419ca2d16ca437f0f2963e80f169e7bd65d440b7d6ed512ee105bb1690052a72bc54207b09e402819946c6be8ad1896c231bd52d35277981d8b9f8b4b3115c3316a7cdd3dddf022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\"),\n-                    xeh(\"\"\"\n-90bd8c5e14744ddc8675a988db156ef227b724ca2e01095cb11f06a97e889db1e4f9de9ab6204f3c283e33d9de36249010686787e14282d3b7c2b074db1f0a509fcebae53c0b35dee8e46033a1f253f475eb9f09994c7d3e209cedc8d2b591739ff1a62e1f4c8cd833b8da55c8881ae07b3c84e26458384102722916451c642d19b47bfa713e815b37d63d2a9a7e4a5304ea1fab3eed37567d09ad16a4dcac45605b7ddcc65cff7aa8844c82e5999ed28f5d1109e7fd9e425b5409af85622420d21585cad96afa841584256682fbc10037a4989a55d2afa09a12bf007c569b25b937720623cb58456ad565f5b5fe9e475d00e67f7414411913b30949954d952a596985bc2786b7a6e697cdb6d82f24ffa4d1ccc6d8db78de1ac91991f22c254e3f3b5a0d3716e645af3c12c41a495e98115558013d12893c5fc8c21be7dea6d2f55befe296ecb980e3ba40267bd1aac40f378c67d64cbb0d053ad33f9949cf8c1d43b69c6e15a5aa2446681eedeee320c953a8f8aa8085d8454d9a6037dcd887c3499cc8e6e91e485fa8a5e7ce6492964dbbfaa9cc93a45b3488bcba7384787e1ec10635a092f51370421122dca671a5d670dc4a3735b04d977b1e378360282212024ad3fff86345a92f570069f8ff9f2ea5c28c44935a57e36db1caf6908cddeaf3896524c9042f3120f4a921e22b3ed73ae062b863f4fff402976fcd1e818a9069e594501d1776ea50377de97f71d9093bd7bebeb70a21154aa1c5b12d2b33540bf65e5fcd460c9a3e48386ad670c37b750fe72ac71b93b7f8c468692d95a3a4393b68b44919bd1e9e87492d9debb7fd09bc1d68cc758c82789e50027bc73a6df171de78958a112d50d50b9e32ca68c490061a4da36fe6bf7b0d1e8a8825045dbc1b5f6af55b953f9344794dde62414ee2ceda0c22301d8a84c01fdeb67cb8f3b5b3f66289d99a556985e09150ae36610f0ec8ee2d6b53ad1cd7780331f813f4397f5380ea5f1cd838e7cf58144bbe9db4366c126221ab1adce2b0a140a780495f1d8b2f41a6b5602e3fe66e449aed2e8cc141c7462c290d8f9b4b14a8705fc0cd689930f6686a102f3d90c6eeab216576d27112b6cec886241514c7341ea4d6198247d9eeb1e78af0d717a1de3b87af12536c37eef2242fe6d811126d4d587f601bdf739a0432d37597a56d518e4c5898037966a1bfe756f87ddaae26d382a04244564b90b103963a0798cb7237e4af9ac2fd1408b2b75583ecada700d9fef4b8f7fc130c3ae123a77f36c8bc3604fc9b517c7dea1bddf2fc0f820ae58fd889b68e079257b0dfaa0fd57fd2a4356b3eaedd37b1afdf48d85939a4b66466faee18f9c01c24409974f5e9e0b2caccb24c355f93a17dd899aa140191a036dce3d61a7bda069aebb7d24e1aca67751f2230e2ab9288e0a6f82489e8bf7a7409ade15e7b5c17c301e56e9e22f28c50047f2806f5f4283f42b9dc26d00783beeae516eb1f52c95a97de787d3491215b1007a3f42f80c969a926d2f56e81279f8013\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-57c70235fb2cdbdb64c2f2c8aa3933f94a9607104169371c182b7997018335aab5bbe8ba7050a5d97538a3f0a1819a56433b1870f6718b63c688860b7e55960c3b80d7a0029f973058b9bc09868b454b9d549603a5187704b904151c62d36516c0bc195d53ca93a0455eb02eb194295bb5a27b51be81b45d865ac7c76a0e81131528c54e14266c49e10bef401211438ce8d969dc240a0812297b88a4439667dd8325406b97a0f91eb9938b3ea71621cb329b24cac98311ac443373b86e7c2a7825532abb0357636ac4276655f3b2b9349054d4c6c25211876359cfce44bb61c41e40316509d6349761633c58958e2546e314ccf24139ccc48c70313fea782dd7c41cd3f9ca2cc7ae61b65aad856d122bbd4d973ac47c0389baa0f7e84fbaf7c57bd38d66127c7c1a226d396e5c363fa76515a67494a52a74fda7ccce919a027843ab5b1293d6709e60176f78887ba4b2456bc5422c49fd289260527d7497ac9ae89c10456d2d018b0b0a365d92061f9744272c92a6388a7b884ce8f722a0e999495b2322f088b7c561c2eb632c322b4898ab3df25d90e5b1677aa4ace1a0bfa91b50a4ad721943da175fc4969ee8435315acb1a923bfb30101f6080ce191c91b18b79a09561b3a7fef5879f3ab59a34177a6f0087681080e9799a4e874dcf26ca671392f5830cf384602636b5b9118916ba7c9880d0202a5f8cb38efa2608f68553dd28d1cc26eb6e06f18d8886839c342447ae4468c1800b64ab89348a8ba111c5740361fe182812a3716c1b577ec75c9f14c1ed62182fff0aacc20c2e9635c18e6a44ba541ec748059d386c91bb94901a7477b6343e6cd97cc711871084faa40887b28721176d8762e993b7831151d4287c31050491228b6af6b4913428646b66309d055e0b470d3c3584e960b17530d63c530fa352d6cec88b4e93019dacc39ccb10a04718026762c255b5e515d1e381dd6d948cca73210b184782528a5340feeecc236e6495bd7850ada82d138b3fdfc5e9aaa5310db28fdc9cd9d7ac69ca869ac376f153c0db1e97632ab7b4b1965ece9b7024c2eb280cd6962639b661c9dd719c7cc39e576450201ce3b5747d982b9fdbb728b23c30457c7e537c3cb5a0580fcb211b43fae656d9560296f1c6e7d0319e5697a3202461a0c52d8488de70ab842970c559026fa88004eeb746920402725501146b182a2696909cd7a75260f78cb1124a73cb4b22cf35aa60ab6d4a612e56a4f135391367a64003a0113cb2fc2a2a27c4bcb9e01a6d17623be3119f2795dff488c733c7f1299344fdc80f5a8cf5ad7b15ef76a72cba0abb181f9c6ca064a9e5366cb7758af1ec0400cc1380c837dfbea20b2e2b2deb9419fbac7fab5b4e33691872a8d8db27f1799500a938d309c50dd364e70b3709c9c67a6c1b721848bd3cc8b0636879c965be513a12c973b2c17b07a7901919a9ffb70b101d5314e508f9d1979fdfa36dc7790b4b034fba6ac85a015cd82684a573fd142a05a934eb647143d9070ee99bbe034530e281a075c70e5ab266858c3c57c22b9703464497b229acd7997bf6a31b08fb1cf206b569ebc7ff62108b0f404dca30dd0d51a8800503370cdd3090710d5a180d8cad5e216438b4535c69165f884be521e5ccc33f22695aa122e5d918e8d27a390035a42b9c8e4abc9dfaa92f090360c9892fec554851c7e434caf9d41896741aca2f2ad64e8b1e3916827215beae96d2d190f22917ccbfbb3452914078607a0eca4199714ea8040e9c9945c71501bd1b6baa00628c62c220b5dd79846da4399536547b04811f6915045e63abb9575076150bce269c61390cd3a3fb3db7235390b63dc49d041788d25650858a062e49f4d9855cac7c7d403b172044e2234425f503f3f613a5b1a72fb32590c851d71295f0da4113705b306e6524c398a59a83ee6a9893091beaa78470b274680017387eb13b97baff06a23986251a1f1a4f73a72054640d6574b5d070582925b201b37b5a690cecab7bcf72e16e3454eca10fac9b760cc94928307c2853a15c47c6d29ab90e322b3b566a43166428c09a1b3ab3515704bc76778c38b0ed224ae727024f2008cf2b5128cb912a9bd806bad62e78e1d79cc90f3675f863df590210a18b6b629cf91738f23280e93ba04b3661cb0e040709639a5b495c7a36eca739270031c97db9ed9432a4ad86608528a7ff7034652571fc6904662116980201f8073ca003092c19df909989dfc6744274a2e01377099bd618aa443c883bf8b87a9bcc9d35c56aeb49068592d31e16e12c711cc9a1e9780329a92aafa84827e685a21a84156b29233e50f577c54fca9a3f9dc6f4707704b515d9f2492dfc22977a36dde51704ac653764b124cfa615dd5932a05b895987aa714c1bb38c3166b27cba655786c29fb733448381fa7606df0f586c3ab0f2660901ed1444512ca70108e180776078c417cda8ad2241ea9304f820a9964e455d8da350ec30469fa6ec3470ff4848da109cb1060abea4c3a4b733b97d04beda35e769a7f1f84bf98c8790e91199ef04a6ac80bcdd39ad4979c327b84c0e897a4046bcab450eb3cc4d52b83e2f3845bb6c4729b3508e064576a6a8caa9cc12c917118196000a1e478c278257da8a10d78734b44e426335c81a4e6988015a6eff43470d98becc9722d254a6df327ecc91174a3a76ab430ab40678b37cb098926823955d5d8aa8f4c2598eb8ace098da3cc43e84a4a205c00cce1962c7411646a1a4cbac0fe884db3d55cbc0531d4497e562cc0b6f9139c905a8036153ea18570c1164e8b73c15630b4d020380c63cc1847e38a938085bd74338704266a6462163a176efc248c5ea6568056be253306ad8ba7d7d6144622002daa5034cca3af106a7f2b61a0e7b8804677adec1bfe84b09b910f96eca5f090cbc4e14139f12b29b7926225689acbbcd7e4cf2921219841c68d900397a100937687a9d779efa7301c4b1d1f74acfa820445c851bcb874c3c5b6e33297c2b424737b082e31034723b05c6182ee8154f5f13d69e67b25a58f8a543e19f7c279e99eda3c53854791c20a1ed0e95a8db87bca83aa6925658cf4035ca0879d477ab8b4c104e149b550b3209b5f36e149108a1918fc29de294fdb250fc66b691c30c9d6016b36a83e73f9a31df40744b39410201049642380ca752b64a2d536b6af19365b434b326cce1bda94719bae4d418b81cbb28921c8d02b4452556a156aacac7608eb97a2a56949059a5c232a561f842f40228b99be04e4a6a52718dc4ba9689b0020bf1bcb8bef492e4cb5232db76cf0a8602a85d8427b11ae9d75a2be6796ac7f8931f1f19668d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\"),\n-                    xeh(\"\"\"\n-b51200c43aff424af193d24559a9be52ec5a72f4cf45eb15f8d4deef3c3d80bc9d0c433e595f4a3f796cfa7a4f23eb5f8bc60b3124be513d7e5bcbf4fe34b8a97fc1a434acd645e4306d3c2e07473e321434ce4358ae05e1efd9c6fc50b7e46cc228c782472b52493287046cf91e202fd997e67a75e50ca3843ac1790fe02d2c0ea71dcac6d65969022ad8f9d832e8a7f1b872b97be28ff9f4519e705adcd341fcb021cddab2de4ea394decb80ce66ebff3b3734482d1acbf57fe6d4f548e81e831ef1eb854a6e05e1e05863a4dbc9f69351c4b7ea3ad95bcf64521bfbf337bd9c590f0c5354638f42cfbfa2cc31a5312aa208e2056ff61204374aef66943e96e2b9585a3245ef2c7b909fc5ffaff94ce682ede6a377fd71746e5410b1e6471b8f075f848e427438ac2138f9e24b10b0a7cbea823d6ee74cddb33ea9e92f81d5dceef0700eee3ab0ff8d97cd3334523d1fb7ec8b3b594a5a0d6dabb2b003a9bf156668b8c4881c9b9d23987262957ad351b9e576ce59416b2936877823bcdeef302ee78a74e8f8fa7adeb7615dc43eec2fcb5e8f328f7a865bc036ba9ce0f8f35257a9f78969dca4efda0617403c8767b97df223a2d40bbcc378f41f7ec4fa0425c04f61b976c0822185319a924808191f6f719f006c856a4f35b97f7fe64639dd7ce5916ecc5dfdef2dacbd0c95589c51d28e93099201bffc80e146e4d5d8f6db0ca7d26814f682de0a5bd2511acda58dbec969df0cdf826b957c69f1cfe409280f63cdbe0794c7c5a0593cca1b0f85129940d553bbc2f29d09a3c6c364d396a39decb13d29e9c649eba58c67f080396dfbd21cc83bbbbcf68c87ce2819cd12b10d7511ff6f73cc58f16eb72e2d689fe9a0e24ab338b034a7d0368f4750c30b9793202180c499db4e92c34803f94d2f2c9bec1e8bd7830f16f77102781c4555f9908c4c41caf3d62b2912bce732a83dc92a70b21a3dc173ce1ef3aff1f69f415ad749affde5e97ddbf7ca79fe3f0411826505a718a237eb81af0d8c4f09548dd37830ef49c34449d29e191a4f0b98cee0dad5ceec6b87707f8cceb2b886b33f7008eaf93243ea0ac326399dce281dd275d2555861e6c5f04c7b480dd563e3684585c73e28fad560950dc111d9444bc7e2ba960cbfc914e81b7844af5c290adcdff7840bd545db2d9318f2fad141e531ee95638b507b94f7dc7c0056dc56c614b06cd3639d6edcd21567dd810c252214a7a9405aebe8a19a703a9aadf60aaa44821d2e54038f9dde2bfb580aefa1bc595619678b5a98942d8f6284fa54726fc22912efd39d58d71aa6e5671125f51a23290e3aae9f3a3edb2a37daf9aebf4b278e5c7bf70881f093b64209dbd943d76a60018445496725d40d6eb37f2ae27fd706569bd467364b7fe89a944cf08dd3091a914b0bf36e6204c798dc98ef3ef0e395bb2f855f2cd1f6be7554c9402ee190100048d69827dea7b33d5433bccf14a0f1d40866f35e2474bb9d374b526353f80711bc76d9b29ff0e2418686a40a3b19\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-966853f02206fc71828a50115622706162598f8a876df00138caa8211c4d023a22127a0d611bb3800059eb2cb9a23b6f03510ec9f064067b39418c9d806a7de70b9e9b5acaca2b9a279797ca347c9035716ea92141340672d52b19689b7f025d9493323ba034511a4bbbc78ff0fc915baa9fe01078e0b511a4127a744a7fd04c4ae3d84212146e7c529ced97660aa49dc5b0a0d9560029c2a9eeb11f4943a5f80a4f2517cef8a91a3f9a0613f99558c43870e80b23d01fd720930f616943e15d6b8458a4e51fb5d784a0b35588d19eaf088dd04aa6564a038fc8219d81adb9091bda455058276655fc3d21902ad257426d25436ea6621709bc6647949123486b642a13f51b17f5545f61c66e095b2bd938d6825ef8427e0dc13bfe2ba0e61305b477a9aac566e86411d06b4304f6a3c4092a9a845a0700b722e1af1db3cecec69879fa29db9997db1836fd6766772b93a1d713c93667a6f2495425bebaa4a91c500151f2abb1d6443e1676f294b9cb261103ca3761da75dc718c5fda2a8203c4231356fa03be4016a9d6a24a2b04418c279a94911bce16507e450c3da684941a4a1ecc2fa8f39996c185af609e0867c24bb42cb428049497012180a942f81180c3a87480524b22b6a4dc5b6c5112c3289ebc819ab6ea7302e835dfebc525531b6bc80a84a196df896106d73b63020bbe794adfd08ad6cb0429dc3ac0f11bbd3c5d9dfb6c736386842303b15246d9a57df7d2971e169a2611bf179432a6462d5c9303fae68790a4769ab58c3cf670d6847240549ceb78432f63b3c4632d18f9a15f42532648794d056a138788eba86c1f71286f06979621a41d866765a5726f5ca0976268f505c92c01aea855a32f74c4f05454ed1b232803afaa672a0f841d0fb0824a512dd98c8adfd06269c92b71880aee691fc546b2e6c0c99ee18c41db8fd3aa3108a48c4f60b2698b501b8a39629cb1b3b027ec00c9f181bf38c25767419e6bfa4a2de982f5952396ba076b0b0b0e891fe041a5d7235f8ffa573595b02c550e2df02ff6c9a78707565cb5be1d5234a45b9a9d250679d5cadad2638f9706a8dc558029a9602c6638f366333ab989817ad64860151442acc4083d991867a65915a52b74409344498bca11433cbac3a82458c0ea647d8b9a7db51023a8b6b5e3356ffa3fd6d3ca7b0466518a4f8cc78f6dab6d33a6cc3cdb8aa1acafcff9cb22b3090561179f9aa777b3b6272c9f45f1cfb848b7840a020b51a7a017be69660997ccb96096cd1a92b55a4c5d1a831e2734b11ee46c16128123480b03e714cbbb632ce487e4a906a358a6f5bc14e4e92039575a43f7b96d46711aca37207439e3531a5d877ba1d60bfb8a0d58247727e7212db9410ad6ce66ec3def428d644b15a497bb81954a53bb95d2e51f2e7559c165c61713453959a51319bdc4138aba87149341cb4b114a22150133924fd5544749141a9abc5cc3336f89834119250a1a537718301fd25888e2b78efd3b0c6f42c9ef3524780049ea4609478333c5d386550b9ffad18f24520158330eaaa7110fe649e1aca827f16cac8b73105bbefe23c48752cc1ff65f4913616bab71458122e2dc0a24e54137c5737cfc0d9aa743cb8ccd08dca5a5e735178993710821454608015b34746800c7f8679d72b0c628757756a50a61186c553febf79c00430bd0709e3741886ee10667aa7f7e4c91d89820e66ca9bbfb029f5cba016b6240e2bfac3815afd613a13b04810a26559a60f6628308fc45238269c77428aa370418f11928d5b3c211cca7bba2de57898e132035a16a8ee780678b213917c725ba8dd1818428199c672b20ac05061a82246e3b55bfea529ba891da6320412108ef0ca184b44736dcb05990031f3496bfc96c50445040e27df4fa2c28205e1d9090034285912b199b909efd088cf4ea4241f5c3052050aff92be505a355b515e5d4ac55b859d5a3cb1a42564d398ef4cb91db1430a7da96f9e96cfa27cfb12664f9f694a36b211a7a79b46c70e0ea14219c119006bd287467c780b7e6e706dc30b230b20c3f8759f2b2326d8422b16c124ad4a8e031412efb450f881302448e26f383fe01d0b26770384638ee1aa51df773fce34a9dd00ca24c584f5512c108109bb9499922019381022a58c4494241b2b62da8ea0b784967d86c7d8fc5c6a8f6055865173854c38d6b407b3199cb44000aa90253d7790011a9d4551d66278d559808835208caf18cb31642b06164558b06fc615953bb1c5fec2600975dfab48e9123b0f3d8757f53555177766e819f9c5487c9700adfc917e5782c82c681ad8105d6427785c862201140c5919addec3f10574617201e4e35372d472f782388c707406d73b462f25e3ac846bf7274a721b1a05c36981093c3a853996552c85b4a90e0c796c790dd881fb255557e0731eaf8aa9747b0fbc64f2db3a7667a11b6c7718200367dd86f0690be472b5a2fa4b914f91622b78be310719ecb81d1eb8b6c76bc4df0116f84179654794b39832701911480601c77229bdb571c1110387a78d4510dc0705d66e189e1f80bf7e5c4952c083693c6908623be31b1d2c63eaec178c3523110ba13bdba64e6903df028a23167594a12b64de601c90b41231a29eb5c2ba2475b09091f8389363030ae56fc686d024a1f838a0fca5914941f72470ac5052b8863aee631a3206c9f79dc479c925d906c86d3e5797eb2ba45499690b3799ce39cc65a9887eb5785c1a6ed660502d85f5b169ace240aa6c492f9bba48c61c81f0722f8377263a33087814dd51070012a103a93160359c3c2a945933c081409cca0963e99883dd27cc2572683881c189861ab10e17e400b5da3d40983821b4c45aad97aadd35b6d7296cf2ba029981182f5a1b189668711d528de7c7b07a71a47056074066193936437016b5afa3fcb245c05764af1d77681325c0fc2bfd2a74f1490c704e216d18345a1e074dd440b730a0464db2bc5852caeec23c0bb0d754cadf8f050ada71d85061d18a6138d8b70f77aaf45aa25ba65c643f6103390168629bcaa10577070bad8119619320762486e9e340d43a04bbb408ab86801ef55647e43cf88a6c0772b8d5f274f1c12593b07bbad80ce3bf1903f24c6dc976cb8c08d2411bffb92221deacc5f2783b6d38078f51d42eb5ff1a6b78a5899f044ad4d57c582a72844a98e9d1bacd4c081abb44117d20a3fd3b18352a1f2943c29d0a4832a8eb4b22cf69030def765bc527aae51010c74cca53b8df382df9ec3e8d9d492fb165aa4df3ee6a45fc8a9953ae56be2651a7ba8719c565e02579ec454f32be2888fd5dd95ac20b8079a1567b365865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\"),\n-                    xeh(\"\"\"\n-ddf623ebb88ef5e69f87faaf620a10bed3440299b2c788981fd5f782671a5d2db99576baa8455f70250ded987e3e94d9822bad551c86346af95b86a4e0143da4a4ee58b66b289c37e1180b14a2594dbdb1fc468964375d466229c95182dd5d02b85b75b9eb413ba4e04a927798eaff56362d804fad7534ea1f2bfdb3c73cfe4b3c04406a425a3d94b71617100493f9ecfbfc9101a1c63b9d6cb991aee3e94983b4f162ce01a151658c49a465f01a5dd9b7a888e55480de880cefff5151086557c1665e818d9ca4e0b50859f8020a6023fb8039cdcfb1e8951c5ee63f2bb1be2076bd35462a7cd225c1c8b299ef2f394714aedb8e37c21a1ba751633fb94c745ef30f6a3a13d8023311a5602e5fe23ac7d652213a1d8ac19ea24022b2502f982f45fe0261679fea76d0ec9b988080e7dd018e7cce9c0ec7ca496daa1a11d86f9cfc9df15e2924b585fbcfeb5bc2ce2d66cd7cf2ab3aee35b26e1c17dfdb6da77cc464f454d91595fc82d53d7148333d9cf8d3bc7528108c635a960be9b5d243d4423f2692c41c441b4d0f52eb4a170707b8004fe323548bd9f4aa8aa608a5e2e39ac77495f62511223c9d5615ed888c73250a513e07f6c0867bcd84561ccfc2f7684c655a1104dd59347b6e0ae57496d45a93576b1b5e7469914eb924f5a391da1fea99f8f42343bc85957529b41bc8d12010ae1338b142fda8bcb0e6249fe47ec6217027f60b27a45b7da221038569f7ef6b8d5669e71af465f0c373695e2dc699697d07bab7a28ec7438b3ece4126f549dd3ebfc181ea6e13f31024a226d499b69f8f41f1b2c66643c0d8a3051e3ec97e52573aeead5c3fd2f762e0205af6418f2cc10086cb9aed95a413687f20683ce21b02c695dac6a079768982183beb0fbf92d65e28c6bb9ea294a2cab22497efb34a1bb8979fdb36fe968985b26f4567bbf103be28f02b1f709d3dcade83349be35d3771355f541b48745d86a3d04a9ff9e8e2742e4874861eae4efd2ffcd966855864cf212145365f003e0c95564e36476e69371ce9ac72056936ebddaa41c8ef74e341de5400988bfed7b06566980419b355d9088313d1610c4cc5872406dfd5bab0d2e6842fa7a6d9935b1b9bd4bc543689123a1cdde023a3606a79809909873175eed8580f4c5a987cda884551e90cea3ce850c689fff7fe7c43577a2b09ef4c864f83b1c52641b81625208fb47029138c6dac1af70c92a391dbb1e80996012151aee86bc7e4039941e3149d3ca3709858b18c77eeef230b5482d3399baaa7862197c0d82af8be727763583a3964dd5ca88a11804fcad1d9a6f86901ee78a7482f6bb47fa33aa21288bf27eb60d92e5e9d64bd5440dddf8b4ab9836a42e027a8d96e999661a888d08e816a5d217f4b94543868f56b3e5a9c348204277090fd4d3175d72f1ea2cb51693e6a29c808fb2d518f206a49198504d44b71285701d70ca36fa695023e6c1d79dcd761d1941996d7f7f099471b30e9f5448f7322b44977dcfcd7a56491144f57233f26e613\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-89cbb4263b87fb3abd58177936748efc870d2fdc7f1ef00a58ba3a607b5ee49cb69de049b5d88f29503afb655ba6b844bd991ef17c13277594e3082c8c7342733447530617d6e9b5c2013fb33a4b7a20618e078ebc046e841547f6093746f8b79a987c31fc341172a1b6768ded603d11f52ed9a399c9b23aa984b0f3995545196e7e0080ad6c884a5cbb120cb1db4aa729b6ab1a0849fd24b8e178124a7921ea357944d35b778b823c10cf3da46562fabc7ca28b5cb8b6f295417cecbb6ba4885e08a9032460558a0364a1c3e2a749f2da4dd7eaa76347414fa868f7819bf5d91650969fec1a4c5b01c0df820bc63cb6d391086d49741c84bc28aaaae11a29141204b025a4bf867f259749ec99043c520c1ca46e73c2aa12f9a4a6f009f5a5557c60c1fccb148e0c8080e9aa685212ce6108689618e718278b48222bc59ed4a4b541a8c0e4fa8e383303d8677156607a3281b2b2f7979fe22ba62742c8c734d17b159ce0552e713f7eab01821a0b71aa6a418a4381f572abcbce44e586431cb45f0b933d1c75299c041fd50a97f030ade1ac46e07bafebb6a98c7414e13a99467adcba6390379206441e1027012d967eaf747ebe6428f7518236e34a8c37ca0e92648b10be47bbad8c28b49cd93340e8180064b2e0362439824e332c379c3003bcc69018329e4a657b75f2b1ccf26b24207a008d04dcaca70993332808014c355013d492a52a879f1bc784bc354c30b4523a590c652d4083b532c79e8c4a554f052cb3ab43abd734f8d920de834ced2692c8310c8ac229b04aa6b533b2c3abadaaaa65e3794bacccbdd39cb2b6d47ac7aaa266a2145d054fd30c9612c451bc0a5ec7a3b10dac389005b27b6b7f99e7766f813823b36b797cad73c71f83229ad6ab46e1224d80aa0bc42b2cd0b66a3c322f4a35a6544b3132c9aaaf2311480c86d2393ee2544a329192c1f3201e082fb94b5484907600516a05b7b9a8c26d3452bcf8b1cda0331adbf713ff023af0132010ec3f810c85492a7341c0294c81773469c2da3a74f0e9ab46d45028823e83aa016d57cece757dc7461a88b688a8e97ff756afdc291b8d755ca1536a355a571e721c042472f87b4b32a31423f2c7ef896658296f1b520cd515acd01ba6f7c1b34aeac799441ed54a6232172306c3c0b51220dff0391a1526cbeb64bca256f5919eb8b7655b142e36e95b8a479e7f596d481aaddfd653ad7922dc988333ca77bfa1bbd49966c25775211332a81194b452297cc2a8c8f7b9a2d013eda34d4f5bc7d9213d7cb721fe18b532757bad4229585527ff202240ea09eca0740656b189b82a68c75a82065b40e127842059453447f4b144f002a01d69c7f7f62c8104346067ca6b899bd04c075fec6a462a0735a54d36541f3b556e4f0189ca8c8b2a366799e1a72661851635250b4317f0da80ed014283f4132896974578b4b3f2b0870bab58c3acafe84737aaa8a614533b61b471e10cf02c87b88c940f5620c4e81542041f8971ae6880a71bac55064a4a91a2347e020be3e81158997e07d32d80d8b47fc52b19cb8e84e09f08d14da2459934bb5adcbc7b6ce833e0da95ccc2266343257e124e3861b8041288b148c1aa8c5c2689044d7cb15005ad5928aed39889c195c94ab0366f91910658388798b53c6028343664f5ec4601d4acef04d0b6f2460e75bbf32405a512ab2474b8da27acf70bbfadfcc21db84ea0b73b548066d4e4618a355f9c051b8b54977c3544bc7151e4ba1710e9a00e86a46d1149620c291d3673adc5101499301296cefdc04bfd5ba5d136ccc845b4e69c629d1086e94b622054c5fd662952345b48d988e4b7198f298ef6a925fa1a3f912ccad5b46eddc861e69130424a8d952110f5820c776a0af58c7aaf14922466ceca0aac3bf1261bc73df001bb7a081a9440c80453b8ea8b06e22689127cc9b2ea3d8e5c2bf8b25eef8841a527729dbca2ab815baff343aa74b4b07c06d5158e820c1fc440a86d44826c754a7e3b05d40c1cbf32206971c133c80f8f678d3c30ab99db0656f4ae9ca12ca4fa132265232bca7569c8624730b234065196d773a290a3633605166161d86bb169981c956394aa602d5ad37cc8d800a8770bafa1667b04ab37a668acc268394705e679594445bf0a7987b86cc8c8f48e180279a193a187025648b22f53d9ac5d8b8a760978181a9755e3195754530b907ce992b939fb3740e626ad5534256bb7dd538c6bd2296d5675567c2277552c52930401fa09b581b87c18c70ac8a4076c9ed8dc001478757f01ae8ad3adf49a6ab590a61fb2c5c8645076e78c58740aad2990cf3858e27ab151f797165550b1f4a0fa9b7d47a8c4dc47bb53b359742aa486ab776b3a7582459f229b969038379099c428c53c1486cb23911f50108032796e46ea04842b28a84373332287db410390563c2271be2ff14065f22b7ea32a284cc3d0654ec6ebcbd6412d2f5c29b3720182350b82b8b65fc57de3d90c0cb55455527a469097d913331a7a0cca8692200bb9711008fe5549c945b306fc48f58b8abd835dd339797b9c508bcc8e8d76a32d560cdbf7506b1c2d32fc35170347b71a3f456163bf3116794324a46651f359bfdb4a65cfb754ea47064a2336f85bb82f2947b9fa164e11a55ca10086ec5af899bf9f7a3c5130a9c4880412946ea6ac478258a67c58131df3b7338933b77c064bc9231a49330a1a7c85e864b17c56501697b3e22b1fc468261b8eb8f4b0c6703d6a1ab764496a6eb27f804631071962c4a8062203148cba5acf2226b74b66fb305ea88040f22779a5f3486574a7a2833cecc69af95c64348288bb1925abd5be25878d9585c540134eb2046d7bfc5fe16581677421c1b59f1c69a7717744ab87902480ad1f697cb7f66286c43b73702f42720840d598c3917f25da324e5aca224a9ccd9757e91b2dda2186d56ab2191b46c950c54e7c570a3a0d7805096a4718b57bcaaca5cd6fb1a6e1272ca1ac7fd9ea9cc72440400bb0a35abed71c3ff0b9855058891555c713783386bc591a9663e61bb9bf8055283c2488e198a6e991fcbaadc7885f25295b3d531920d880213b410c1763aee1beebe665abc1ab64c6ab3cdb95555004c40148a8530c22b06341c301f301970f51479199c785a4c616813e6e41bd8fe078a019a33af92df22b207b09972a60443a39bd11c5c38de24770f3a29588abca32283650a0587434b74bcbe6a7bd6d70bfc581848c9b2ecd6184a0623c75c1768e0f3948eae08ad7e7fdfa17684a3c63b6a10dbcfd6213163b473bc3d8caf0196f53711e7354f6151a7a2235bfca5f2c1b1d6ac7b65ca6741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"\"\"),\n-                    xeh(\"\"\"\n-04ca3f0c74332cf9356674d23c5a99177a03dadb1763b9cd6ab7804cd81cc84d079ef30cd3e536f0d6b119629f6c6afe1a982abf3f5738a1f686883766fd009b393c556f92e90cfe6ffa41439bffe299c162051231c6439d83d6b542204c532c4bb997247e18b85b467c3f19d6f583ecda477268ef89a9512daaa80533e19fa7fa5146a0f23d17df32afd12cbe17f93ce23d9f8d2b9a1f9b6a2f3b7413c0245df5d243b632e95d7f6d16d6324c594a989953ebd02e491e61c0b0e31f33659c57c3fbfbbce1d9fb20ad217d3236dd9418723a3799d7cd1bf119d2cf0dd2044ea2ef490a4e5d432e467cc5bf7a8340a2769184ea1782487f2fa91352b82a787955e35c156d5ab42d57aa1dcbc032634cf53dc4a64d080f057b023d453b34f179fd685d9fa6d57760d56e91b773295c10b90ddc4ff84d4228e55eb51654d8c0bffc2a4574d80a45d6d48ca8bf1825b46b16afe264dfff1d1c75c7ca83cc40df842f8c5db6aa3f92e74bd1dd5db25d8370ca1d25f5bed0c8db2223c75e43fd245be2088b3d9f25c8742f356a5abdd43328884835d135781db0393262d7e3fd859ca637ff54d833c03381d2e4b8ea9390d720b94f014f09ec691d07f77f2bb7eb792e45155548f4ac8da20540007c83ad66ccb403f9f93d7cab15a5203e4d0852c07f0c350f2da9f4477482777c14ff9f79db9d6e41a42c39631705c2307d26e54fab94aa002a5d1eb7376025133e737a93e88427fe3c3ac651cde934bd7a13f65a5af6de7e8d687c95207942af7b2c7d4a5dc1ecca1c61893f461f8744a76f45546a0ab023f7c07191be7ab9e3cb18b0e2ae1e3ab485966b2f93384ab93e331bfb7f7e65aeb7e0a6299f7b4ab81e25d95ed51502b9cb8d7ae752459d0164700cfc0f983d1a4f28b41b1e279dc71996b77b53f8e2bf67dfd7efa14886e43dc327793ce965018367973108056ced3ee94cd4aff4ee43d1b720ecf57097b0296e14433c2636c8d08c5fd37a1624d6b90309f93ef1d0b7de7e140694865b1f31c1cf4a972839a3e6462c053209498834cf5cf34d7b45b174ed86019371bbfd1a7415951d05fe7ab3bf59e25a67e5bcd72ec9206d6da4677fbbae005fa465fb0a55683b47d07bab6537c276477d0b660ab92a003d55bc8e645145e93ab0eef825475f7d53b173aa45fb6975cfe46c28c76fae8d0b70640467cef9256fb1755ae34c280f83c2898e908eb0d8680e25d982448f2e044543751daab8d7cdf2525c9d3f1fa96b7828d0ebb59785056c0b27b2f396e410df72291342e5bdf91f73b865a64a519aa0196997066e5cdc29cf2af335585fee2b6ba6eb3fc2bd57bd1cc4a2b27dd291a3f1296e7074b8f58204c0b62a4e016ebae22319f7ce4e147a4823bf70e5724c97d0b5441fca2e33831fec1cf2c34a95f2c6b78c6f714035b0f9d50e1fcb2549bb621de83581a498a79c1fe5d44288ff57c80245d5350e5af2b20d9983f4613ec85114c6c5afd3cc3272ef984ede02ba3fccf9315f8cb9f586ec036e68b8aa73\"\"\")\n-            )\n-    };\n-\n-    static DecapsulateTestCase[] decap1024TestCases = new DecapsulateTestCase[] {\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-63d3868f4a29b1b1a87dfbb469d278ebbb928f612c1cfca80174a1d19396fe53cf33a8c1f1a88478c667e784567f43794aac9d135293bd754efd504f7b668f8a55bc51054573c95940a977a26255c0188456e2a1d110538939227711180dd36cad815221e47e8e8a48e61c7596b019d2b84e8995c3c7c9c690008207d78cb5640e428c36e92a67a6eab32e2164e35730eababa199743a4297f81b471961076474080ff6735c2e8cbd43138c3710e002829a7a5bc3efb9854c25d318657889940f58259b6466ec1b823a5d7aa835b76dd232f3ec9979005cc15ca84568785207963e476a93e585933129d25488c02d822093480e06b7459739fcecc65fea4b88ca58af5588ed577cbf15270003c0e02bb082dac7d84a19dc24137f7650e0a43c7ad064043e02fd73b1ac3460cba0b5948c0192d3851c36105144026d6a5a16ddb7fc963ca91800aee7b96ce04786780971359aa6862b6ecbabd74b5729510714867c77df98d3097b33c62b0dc7bccce1b10d0a518f1a2652c01609a3958ed95414c73b2a8b6307805504b6cbc5603649ca60e24672b4fe4bf88a3cf82909f13e2725094ce628ca2c0f48f91448a1db937653c4472d21107450926505dbb79742d38391d254703c2ba2279b522dc6f27523c8e6c193ab16d8c188dd5d452d5700310e22dac04bd3d98778923931758645098a71e4388cb5891b03b37f0ccb33fa75e3fac3627ec58310b4a6600c0b3c15bdc25c24ee245969264213c42efc96e09a9989515a632eb33e3692ca7fa67fb1319e7d82ba4708aaf611c6f4818a3798b7c27b828a57a4e2a49b8115be8002a420bc48d353a27411774341891021037d72a5940b8a41b5859aca1b142a80f26722d65588a1cc6e5a97be59cb116c6b8d4e88bd7d6061c6cb4f877cdba907abde86b5c2c73cd03382a50ac1debc15200a7a9d45b7f87ad046ba2d347a2ad899d51e73c48560f42b989d1d92ce9193ffb746a808145655028e392024673a8186c3e8bb63b30dcbf2302998591435bf534a19779683898a7a28d015b5aff84c229cc4f8784b198b25a47e0b1d2e3cc065b8c4a108c4bb64612da64db905e88b13e4f0b18f9f133452229bc02ad9049a8fe44b16581137684b3fd081dabdb389d663097f405eb2378112b2ef9751f8fa4ce6464220c1a8ebaf91ab5b3736cb465f9e4c9a4720ccf6338cca11d786725e7203770ba5e1111a84b75048c9399a94c014ffb8d2f5c516b4638a06067a5138265c98861ba50038804f7505b198c4a2775cdce2623100b8b92d489290b076c5a5566c62a969b4717124e8cd220ccd05d7977b2db0534a958183285cbcf1a6665cc2ce7d1193e16288ae06810640da7665cde163e20008659da76aae4c1ab787984704c6eb28d5b5078b971aebd77b20793117ca55671267c511480401a0a2285577ea36815d39a41d23537648f9eba50603a2360b2ce98952c34b2250dc876c5bbb7fed6708fa7cddcb15f732a77524001c972cb7533b9ab9c8f5a894d5a9c336b0c942249a39c039a59e789df2a6474610d9fc2bc4826cbf8812b90f5317359678ac78b6818b5b744b35773aedd3585aae724863818de706b05272459ca6ced128092d1b016fc76594461185c27a0433d2c7b36e807bec3fc527267a76d9a58edf3ccae8c251ba71517aac370902ec3f3600d5b995ca1b7b2a6ad833107b39ba6db71bf3d025a5fc81acfca9b465909740ba18df95a342a26f5437453fc0826209ce13c69b7b988f5d1a68fd484a2b1854a62ad09d96d6dd37795e29e83f9501aa21a89a31994b34a9131b65a2ab13d142c6099aff44b34d9a62905ea883102881f380c2bfb5e357040a29b7a2d1b039fe35aaad9936246cba4fc84af5066ae1c5cd7371bd1bb305d18873472b969e3727f17bb6feba5191680612822ccd96734b549f0c193c2fc0e496067ae05c75f9c39537533b07c297b463fc1e25fdec2526b30adf908bc8fe125092166939ba8257b33dee403b0d53f766b384a2a3503e9ca43f042d289bf2414b276657671a5c8c9f3a924c26286624f0e99cf413914cfeb4995994d082a6ea3020ca97a52ada836bcb28b53239724d712f690122591a7b1d7261ab798f644cf58076d75c39384f3433eb1b99e3b3a2d190492b5398bb9144f31c22cb34ef4a51478c635302525fc0abfd221ca8b3a6e224338bb0b9116ba54cd581cb7a3813c878d65317d8736881c8a6b6a7030441b44dc6663a6919c7a3574463b706105c332693d1918682d2a0f2e12b1a545a8aca6a38f0b63a216463099558d282dee3c33af3bc160d48b889a9d80e9cb6d83786dd826cf2c58c23c87f0279359026458040ae638c3eb5c5e0f7b6ff2e76ea598bac5143941d50d031a4906bcbc826a364d92641f68cd1b43973fe9b802f778963515cdd47eba329fe6b50c8bc5bf6d3aa02e69965693997afbae7e2c8f06b85435403c827a39d63c8cbc675d4fc31a5a699a0f2381918448a4471eb5aabb24c0685e6a1ce042553c360190ec470b44a7cebc153186be0d8c8996a9b3bf46383aac698758ca7c9b4a993b77e8397cd3a3bfd11b31b961c90875c900157f97e211ee6c853fea2dd83212c3f8861c0a98963820d6d73c7b3693b738519deca589639462db956bca22513b9cab7459a51296443076ff732e3eba57ca767d4374a8b2544c46c54c2f46cd7bc6461b8105f0d41ca4a532c6e4052629929c03bbd0b3c6b52c51cf3195eeea6aa9a55de0d9063bc57722a72409a59747965b4e6a5e14ec112a103bba204977d43822d20c92a2aa0f4882798216cd26a857c6a12bc78ffddab1d73a9b2f91ba4de83bfc54092d4359f03a4416230cd6616dcbd916b989856f3b0672b172e20732be0730d1a3a6a837c59a05b846ec1d600841594b306acc67cce4ab7b9715afe074a75738aed749c1494dd683ab6791522023acd8e5c403f77b23f128f16261a100497e0b1f906b7956c53c1f1a0d65d9422d7a3e234c252675446f085450446393c0c151e751ce25cc05b12a58c334ee1334d16b813c7689c6851b7662084ef05ae30bbebb5c2911859db6dc449165bf8b41626839cb37814768167ebd24300306af259941c7628997bc80156c6b87c758d6c40b55076b74b2b9942093dfc979ae59ca16a6ae33b523a7c687f3f22638f37c69c4946a26bdede88477c7b67538115cc890873ba223a953e1b79f7a902d0b20cda992a25b235f30164312111a01cc5d82d4a6e1c4961ad96bf48b797680bd0d04c83463bf92d86279c994c88b57f5a14c45645f28fc19ee835f0ba480bb04a17f5853c1e00c37f0857e88504166a230344bbd3180e6421432874fb6767d0a0c52c661bff33988d3e3132cb744df5b6c28ec4e7ba2b25c22a179914f043bb93536602d754c92cb6ebe42832f605d6dc99a8065cda1ecbdc589a93ed321c529c5f910ad86b9183b827e1e8005e0ac102a35b5abe533e31acf35e649f967c064963675421990082f4897971ee4204e3611bb3bca7af3a5507b239e9ccd49c5c4e09c14f3a3106bd961d9d649617212832c54f430140c8590dfb1bdd40785390384bc9640e2c8564c4a4f700ac1c6d1895fa40ca309aa5054b04934bfc190a45f78ac1a8811046710ded3246ef4032f3b73231913db1a58f45563e3a62413f6a0598264321b33460578f682ba40d29ce15697d6373bc6220c0931bcfe87326f019c7c746e0136a98a6bbe8c7caaea8a222e80915926c4fca60dad75a3f03a60375c09b5c5b120180b51f185157a345dbb91bb5aa6b704183ea0ac0f374a90c02206668224f975ed605ea1b01c55b9a2c159c2a096b3c4a98c2cb8b81682864188cceb3bafe825016381b8b2bb7df2ab4cf2a71f77347eb84314dda92f6d5a5c34d9cf3a123a16b892099c23dfdcb5b8e67be1087ec5b38b081289fa8c3d8d560a2d882f8b8501b4096d82602e7960a2c433abfe928e769b3e22965cf7f7350a1cb4543c52c8f3983dc84709c1909cb76084771c3a59867208c1bdf869b85548740c8b4390a2a7824d2b8a283606aa04a78b79acbeac33a2e4490a44b2995c70165aec4e37a79ee3224a8c3693056b67b1021c5c473e7fd31551a24a3383741d082366398b835389d4e4a34f7905a4c5808b27b44e86aaf02032ed07ab30452bead1907ac28a1a98a97683895ee583ec59316673213f9b1e5c2339678c0b6770459509ba5478830bba25239c311231b796c8225c9206facc138cbc2f58495f106b019041387982cbc656604e05c06e630b3d84aff82240b7a7cf6c078b9fa99fa426c197a5aaff94a93ebcb61de47f9c1c368b4f0104a0e8d4f20f98b38f6962ea4d6e053a96a8059c6e564a9ebc6cdc60c0de1d36c87ca4279906279ca2baf7abe635ebd3b63eee5bb0d48f6dae10796732acba3efdf731bf7c242aeeddf5eba5b131da90e36af23a3bce9c7aa93a\"\"\"),\n-                    xeh(\"\"\"\n-e7264e0af8a23070a8c6e9a34aee33c43edd08518807c80517f919f0b4594b220e17825d8fbec1e0d915a64ec7c248f2337184a2c13faf74b1f7d39034daada6422850ee9fe4e631ae7cf4921aa8d2304b85af8ecd09cc8dc87970181af62ff056a03a21dc1ddb2b4624c0f4abee83a4f040b98bcc1620a037486379c4e9555242583190bb6e952467cba25a05f9440b41d8dbfa34ae84687156d44e8a08cfa4449904fd04604481e5072942d85fe0f0ba90326c8a9fcb8dfefd1a391f80fb5dc1e6ac7eff332295558a0567dfd1218e421d7442853cb777f36bb112c854859711b988a9b58e07594e3b33484cec55c2ed39d54a762dd518137e91572d9265c71cd5a039e56a9702afa2f9059a655bae01ce9c0057c9ae8302dcef0ae6063f08757d30dc8d2b32e53e88b2e80739e8c715af7221fabf57df76b960b21db21c9d85db13f5336b0ad56b7e50b888f044823c5233759f0056775d8baf2efeef1d6028c6ef27964e01ae23290c1de232c564124544e9224bf4616e5d54af0e013f41b7b3986d1a8ac822d8a842e825b3f1bce18171626caff262275cc30bb5f18eddefab0cafde8ce6e7a0feace3d3cdb47757c756b15a2df7127e0d21d232082daec8fc33a1f0606c0d18d2767ad7890d196bf0735d97ed36c994d21fa28c3c3a79c10dfdc8b83d40b93023a8ec9e44b26ffe6a959ef6e1017f77bdfac76633d4d33f7d90be2c4476e0e80e76b66054f37a08a9b75fb11895c6c2c42da00947458b151ea2901d0e407429935854b2008e25427d924b4649cb2130a5b3edf43a0a0051b431ba6f8abb0951ceceeb1dde5a29058d85bb7e40db68846fd94aa38cda27979ab1298ec80b1118f2659c5ec9e8ab2cb538a64c0b695a6902b27c00ad1be5a200b0f9b26d6934a55ce6acb44cb3a97fd3f0a68261cfdb32fd986ebcb8ef537fc2b78477ea72fa2d3c5336a62db5876d3f0451866c27f1d460c5d9a473442f908176fb1162247ff5f116849ed6b7ef943197c1d0811386942f8d8b2e88f6c780aad8a648d6dc1533dabb0d05b333cd436f7b0711fb2c4f604052f0c9ecac0e0317c893d87922b23b84ecb074d1b7d12093c802b3666ee0a9a37b33f0cc033c4218fa2a8d735252f2f3869126c949d4af918f70a3be928ecb25bccdaeb29d87a5a8995f4d33510e133027188972998f0e9efa5fa311b4193d29e25a84e25fe203120d1dd9b83d1a3d70f8131db19ed072cd2c84b95b1808e325d74b675b2de30b54f0e739a54960bf32a523a2991ff55ec23e459aba6d3f84c1effd79ceb2f821d9330e4c6dd5be2bac39e8cedbfbd731294effbd53af271422397395806644a1f7086f2ed55032fbe7840139676b79dd84c3837a4dde7f5ec6926c9223283b48d26af7c6109cc290f8aa201e5e953334304e6c49b8fabd194e0151702e50381ff8bb8391e157f072b3c31ae01a5766f5f27dccfc293a8846e279fa43deb6937f14e3208b3111dfa7530f9b53e05ecf55d61bad2a2f5776edf33e511613d2441f19994930c00b4c992dd4245171566da2f536766ca4f2f9d6fcee7afb81197abfbda64e841a14370ee08ee2a60013ca6166f825efd339459f206f1e43e3dd85cdc5053a84a8aee21764c258404318baf94ff261545933a0f6db252e24104e11d7eac64d1c6e091f66366b2c3d671e28d7d6c6b39da5e94ad94e81cd0371c44e940169c2971b384c398786a8fc1fec41e212302b421acd0a6cadf9696937abfae7ca60ce0a09c3d487fbcd100b0b34e24eee164b484f7e665bb623bd3ae914966cb42ce2d176d30eeec62f717ab6af75557df9ec572b20c59b6bcc302af8dc828a3d9ee5613325044ce0f28b6748750aa4a25813f97c168efe87dcda7135019b5a5e399dfe8b176d811e771805aef02432bec8c5b45c956b27916ddf67cfda2733e87d2d5998cabc88e08b6dc8a843a125323f66c50af9801a6e43b1b959bd14bcb497e5f6712890358d1b60d660f62980b2f1b1d158db5ba0d3db1457efdfd7f45e7cc7a2ffc3b4a85518b9403adf9a901397e761af1b653f4b9405a2a2aa07fbc517a16155d9bead37d314f22720ae353f4a600ad50e1e3fd26d27235352314be1f54f97966d0dcdac7678632d8768c00dc80b54b1220ea459111e9612ba4b0d4c693e7e32192e3b339181bf0a9f9b54ddb274a21c9bfce46846fa3a84f46b\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-1a320473966c4aa3087e3212af70b1b11ccd746a08a4c738e39b06e74685bbb4a9ca6a6e43c27cbc4bb3ef3ccb6eaa1ad714cad82a2d7adc59db821b32d747a9da182b7503f1706b6db1c2e518734f60b41d6cacd61c1451676a49d838f6e2c7e9f2ac376a312e7a7d6179a8f6b498d7f2198d2815e3517442bcc5778ba5c45642983430c5125b7760c5b523284358617f1cc5004bb237fb1ac7d938e210294033728fb69c98789c2c05cec3ea565b145f6eb2a662300a1ac877be0b73dbb01c7c0a2e3718aaf45a770f02c51d579c630332a87b6d79855651f695c77bb55676b953f749827b4f039593b04124282801bbdac214fa2d73a30e7513b919304f954349f1c9bec729970fa90538b2a7c9e85d510231b12bbf8965933ddacd221a1c7c635468180d752ca46f586c78a41c06d83f9dd553aadbcdf36b5733087891870b3b661b600458b7ca234ad604213165f265476c493c235a6d9410a43a641150a93788950e8905042840aa55d0ba5beb78e9f03cbe290875505806863ead88c660144317e1c40a2bb9c966a22e956e1eaa28e9bc10f0b7ca466828451266dc2510ae677cad9375d93261a68136a617bec3e3c2d160033e477d33223e5b0013d859b40d187d6dd50d1580632724ca3d3201dc1bc2b4f59cbe164668952e85f3152370018ccc0b686b052d2165752b40e9bc58ff6c6093a4257a824ce4338b2e366c60e313a683870739391caa98f623aebeec020a15c1f74a538f71634093a9af37ba7d9530ebc363296a60e4818e8d4a0d5fac200947842304bcc68b2eb4a797f14a9accc53375d9445625b49da5663d7659ea600f972766c9b839053a57ce30975a1b45f84b0433267d4ce2ad20e0adbdbb0aa37092e8c486f78a508882a1c7f34334785991827d4529c98c5c40e75883d35246fb5b8615567382574b1113cefdc8bf41a48c8d7585eec6bda67295d6c0ac5eb699f2f9bb9f6568aad661d638943e211106a42867b26cf0cbbc986c2437212c5f9b83b445bb21a7a056074d969182265a55d6179f50d327e6f39098cb304c6a02abbb046c9ca42420b2707056020a2c3fe973a974c1008d955941cbe2001937b7215b106396392724e305df7792834aae28003115208b2a853821ab3c4485ba7e8b2b0a715803ac25dfeb23c8ba6f46e093b3e30abdf20b4f31ca93ecacfc1509b1a9a3ef7c8dbb9aa3f9108b042b7f89232781198750e5597e78651a46217eb9b462696056262f3f4b4c7d36ba6b59b375bc8b64d8387301a00b36c2afc36c7f061b27482ddbeb55bebb3144c43a72042e3893895f823d90f3ac0c18504bb52dc2f574744a98c73183c01257b2746936f530a51ba57f6a487a007f86633796509f714420e143ca2178bb04173c941c768308804ce92b9ef05e89b36510ba2a8c8c7c8ad46fd3e614f0baaff2582d2821785814c2a7c40f6f224a08d4a732a306a53b2f03f556eb0b86f6f05c7a20b5ece842550521960301f0d3cf71460211635a5b2a699c2ac952e06fd017b811ea4a14841048c2637d3123fe3b6b67848b18ba49128a8f42db474ea455bd801603381a450504a137c82e71501cea1403a5a4ad22cb6d032c84b2c62f8552a3d02922d9491fe6673d121895b55e188219432c4a5f00922b57956bb292798c41eb2273a066a1ed06a25eb60540042fd201cdc3986345f80d28b99bc80bcdc2ea41d166a72abc9ed546207c17317858b79be46b33f7156bf511de1bc18cdc883095aa47d3cdbb3a582292b0b1c67cc722b7d3731a4f3bb63bb4009562925b4b2a68b3331328244879bd34c258d6b28e8e54a3e59c552be15e97454c083b846cf50581c373f7f73f3ea8158f92aee5bb43905c728125adba1c0d7d4110b6e04b0040a9ec365c9e8b74c4059e78950bacab2c69a5709b379323365311613dde867e6d44094961c876db6b021b203beca1cad38c2d565fea49bcf59697ffe180f3f6b6bce65ed6212c6cb60dcfa0a787280e7eec0e36e7733e246b6b1a99fe91a053338d43ec3b1808c9a782aa44bbbeecc84930e568d58705a560ba11901265885956086feab13795822c14754009b28806e5cfd6f223607525a6fc087ff4874cc6b995b9c7f2645578987b5b6c3fd485834287817dca09cb75a0c0e00fdcf30ea696835000919f0159cdc7aedd3148ccca020f181b2e3888cb6c3c8e271449bac0da2a2042e230895818cc5bc87e38471d3abc51f6c05fd80bcb43bf65d55a0c4c867ee28163618376fa5dada52c5f4306cdd99f0d4583c1399dcff8175f465a02d61dbb98680de662b49b762a8353ae15bc76bc097b789ab1057d2595363cc043e56c5b44562971c0097188a30e488433a07e7d934b89f4bd74b98822518d2e06932403bf81e97347c203e5413bdbaba6d4107e9ab4aeb1091d77a326d7ecbc09706a98499a70f28300a0c80c3aab68980c4d1cc662091bd370575e7986c38cccae743efaaa63eeb9965ae8605a799b447b76f91a15c8f16b6a52864431a19839543d86ab02c469ed7404d0eb365b7bb643153ee2737b9107a8362c4e3b05c0136c6d1510229497bef7819fc0a30030f899c0bcc6366090d4eab165258fd1447a3b12156bb6a4b3320914d797a2eba18bdc5615c208d1328808b667ec39a283dcc331e83b9d9302e3145fc003230c8a2365a5b3bb52104e698d41662318535dd9557df8907b6161a404e946a4b00a52829c8bf911d79385f254465bdcc77a31974fa6426554a12e399b8ac57e8c94163f3727472baebd458cece806446842c48659ac6c7262304fb693befd3b67b3237fc239a782c83afc72366cf9cea621989d801fa2477d564178d5c13197482f373a9e4ed9b2c276ba88e0348c1708c93a7c54d21bbc64496ac21969b975e5f56d033c287af7ac993cb87965818d26458844103957834760aec8c1572bcb0aaa740cd23b71a1a80396e45bd5a2bd704474f3d232041ab51404a768d404fb295a18275720b205b470778226abb26b775c972505eaa461fc52be230359e736cae2299cf47b1f1c0cbddc7472439ad8033608a8994825326b9297225c8fb4c0ab6a51c74ff2059d60aecac1cb8e9b5b0de1bbe00038bc883c25d23be3198c21648271cba8559c3a451624a403a6c390cac13412b2c788d7ab93de4790e8230bf7491e39019b1feba2a551629a5a012942912d2631b5f64e2965c73205bf25fc451d8836aa944063925a221784a9b5c99f13c381b5ad71c6581f28510ce93366534e8cd137faba6c53d92e25205c9cb43d7be5ca2940997ba3c903c04ea5ea4605503354d4bd63e3070a12840e2551f15c20f6769834761bbaf8a8b11ab94b69807a1ab2dcc396fccc22e3168e35c444efe876dc4b7d22683b6ae49467d88e08b795cd556b975155f4324dde94ac7a89ce5d802a91b4745c2b6a86cab67836030005c70944864c0835f8039c23d7a999d43bdbf7428bbc83e8e65c7b81639ad41bb1f357ce9080c3cb57319c1f37db4a3efc386a40cd60bb7a06ea70c38458bee0baa58a9209682e73fc2cb7a6aa55f863b49acd9cb18186b2b64434a5b7a38a2cab3b8baa47e6da377ffa1d6a432c847c4c0e757d0847933f5962722a92b06abd6ad28adb1736c0a96ac8130caa309f2e5893b0190bd67016f04b17f38218853300a05a00fc30330cd907fa08bed95646db857f4edbaae9847af03729205691eb715c2aacaaeed21419b187c7b99b1fd83ace009abd93586a413de2d9313a854142f076ff76a9661a96bd11c2e8986dd9a7b3d9e1076cc21c0787226a66087f13591c896da8e521f6117a9d7c5028692433e86959450868272445450aa42429478a4df821653067cf61638a1c676b776b9de76c50e99084e1d71202c8a563c9c4afb6bbf49c851bb939311b79a358a5118c945f0b9f54c7a5d0c504192a94e610153041a291f450bb44995050a964264a79818e6717c89b4046f16908d7254fa4f571548b01e9eb37759c7e4544c5e5f98ea014200fe291cf40bbd4c3a61213c2ce862ef907457db3b39f82c87690451c4a872846c86ca53681030ff839b24ea655b8a868fca9188cd2afc719b99fb3020e547ba9e1c35bbb7d153508889c7d33526dc071c4e89632fb5538adc58a6a304b17610558b302efe55a0c631e4760c1be689b843633aa31bba7d9c4144a14d7ea15e8895061c025bce225eae5570dc375b6c449672ba29c9c848ed16aff85785953cdf0891aa5756166db1effc3ac58c0969edb54428588055c9fce4b05c023bd386a9c19c33d33d59044f9893bb98f3a77b35ca101ff518e6eb4b056b816afb48b7b1f4f707d29344dc3cd4fc20ddee4ea9cb19d236d7d13a7846aa22c2872f73bdcef6fc0ae6bcb0db78f453b452335a651c8329fa3a35d69d60c44b61ecbb96360d235ddc4f334bfd91d6b7df1a4fed84c88c2933806f13fe06ef15aed96c9e1\"\"\"),\n-                    xeh(\"\"\"\n-c79699b8ef9b89c2e49b1453fe7ab6858b2da61696644d42d0cdc229fc9d8ed9f38043053da70a864565598b4d4a819187e5e5e78026cae4d4f3a1e7c0775e249b364683de669993e18a50cdfcffae79a31e1aa288a4b6f8827b28cbee6345db8e91d8201b19d1d80454574f170aaef523cdc9ff92b10bbe28fb8ab5e6e7db3e68041e5a9c2e47573ad50e15805d1564837819acc59de70cdc254a283670d1b6aaf2819b225d925449e373cda59460b7609ca12d6b22deba14849de7c6eefded5b1e1b208bf788e999e6307b6ada075c6c94b7deeeaaa423084a4e8359cbb5dd15cc17c50d2bc266da206e5325e6cbe0f6f60017342cf5c1f62536934aee341f184069608fb6f012c3d01056abb74f93eb014aab9ecb011a236d3c1a06280ac2e568d77492cf890846f5cc693a1195c99505ffd7ca8c0ef8440cec1cd3f98058e30295697aafd6dc09a5094670c5d289cee2ab00d0bca1be7c11d85d0017eabf6ebede1700a5b7fee55766785ba95a082a7335c44e313efdfa61e220a288820577b01194d7a581de47c8b238bf14e0eb6d3d19f8f6c5c4c0addac509c93f2873171397f2e9acf784ff75eb9f4004699bc0dd6a44157e48a8b4ba4a43beaf34be3b1702e43f454f6984de2e62493c92fada8649364e46587f0d9218e67382f07e0b332a2096ac209c41e0e7f11be7e7fcc10d11f4875e772a23d2fa91dc9adc605bf1b430e8ffb01172ee90ca1cc99ddb896dab2143b65041c7f4c3d59ccdcb15de31ca6c58f763525ea0406b1333cdf4242db129df0d2dff792d323963d185be073fe8278a8a41ec4e2b92e2ef9c7ec455d63d957af57362d717d4fddc772158117737e5592dbdb75f577cff804adf7e33a0363a505b4cc9839b7d5af46671203e894bee7ef6f49f4158f2b0dc740d008eba3ccffa57e2adf670e71d0391b237fb0385f2dbc6e23b5d425d446e71e1455a0d42071969c08d625f1ef2b448ccc9e7811a1e2a37f645bffbdbf924ce82cb529586f2e3cbc20f27b943b21eaa9cd18019308bb48bf77f0862b92ad3cb47e7391d57f5769b064d72b77cfe21c301aaf15939bf9700b39c9f9a4540dd7a98e99770c5035dec99463d716c8419fe26f6809029ad924f69283172e65e2fb6fa468e13050a0a28245d39c5fa5e4d8914772442f7efcede8155d7eda49d443e8bae0d324f845acc04bb20b462ea33e26e96d3d7c7d7639887d2209072fa81ef756f17af18a7c309a6d24d5448c9552da0bf8d753c7e5d00a4ccec78da0e98ff7545556d014083704ba4725e24810aa3fc407b7c69f8dd40ec0c992c1f56bc66acf78c1dc8444b93ce924bba5356127b4ac3dcbddac6e50962cd4815343b4c07c1894703459fa00b39f7ac8f2476a373910573490e0c27de4252f93a0397195311ca501de3fbf2e8dc54cab6259e1005024934c056b6a84d8e27bcafe8d645ad3a30866cd3f3f85b1685718006242d5ec834afd8a310f2a1451a0f453861575bd1148230320f80f9bf32be14a7e60bb0861840c9a578eb0b1ad3307b4f3ab6e9da924ccdfeb95ce969e6756de4f50a2ef107a19eed220de2a75bd0fc29f5af6b7d45ae9f2189c311bca2b3762b85d4e118662c6790d042ce4ba139e57f4527ef413bc2d369478a2bdfbd13678efd2ee9aac0c327f38dd7d7215378df392c55d003d29a33a3ba8f5dc802008cc15948e19e927c05ab1b877f2b8b7470832d832f3becf92969e5615c16ee4889b6eab1db8d979b5920d8510213dbb7fbef97113faf3f921d250c62a1fc09f331581e38f22bb4dc0721424806741cbb1184736280828474fe39a94c8545a63797a36eeccd6a285187665c06bb78294c40c33e23619c58b8894afa386e7608c374e0f47711c8ef2ae63c18a4974d3f1026d9d32847b9d0b99f00d56f4d249c661bef930d4989e16711c0fba50762b00699802a2a4477762deffd425c4cb737597e2f3c4c4ebf04d4e6225668a95d5180f7cc983e3aad5166a713460d6db2598a220e8f979c484415f5eae35447db6df2cfec6a1fc6c891a1a41a14e7f717b0550afdc112c78111f2116b9143100f4dc03e0e07f9f1bc14387c0873bfa3664f7dd3967c912a78552837a148c9951e8b5e082f194a640baf620da0a0c591df26397ce8f4dad2a421827f65ad7a674236ecde9638a6404e9b3337debd0fc92a1cb9b8d8a49a1d9357\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-15fb53c5e0be680103b2fab23e8c1f8a7c9c06c089a1929eb4c8184030abfaea1be6ac4fd64b7b46a2ac0b84a86fac8b2da83535ec3e2b833433f047a5a62cb3f01a9467ca71907644d2832d628433f90b4d047aa6c1854eb61b085b09dfd6c2fb03b82c429f93949d55c993c94645bda692e67c2fde953960d0617ce613b0f51a0e300850bc1f233046898035a0e37b8f1064ed67caa3fa181999a9501c281b8386467835a0d3598cb98e361ac800ad4fa794943bfbaec427809739c5d21253ea721a8ad75db9f5a88baa356bfa5494081e3dd4bb5ce1444fb8258cc867eea28522da5acd855ba744572f28b0b3772a195836804a585351b1db059aa2463e21bc00ddbb177bd7848b7895727472e0730d52a058b3d9b2e8534e29062b84da503fc219729641e2a94890cbbdd8613b47c24795aa5012f813a8607b4ee3873a472167379c7feb14c661cbcf094a38473b624c9f3d1c13719b361cca2a788b914e71626032aacf02143376a331674c00121dd1e2cc27f6aa5ae7604fb224c55a56e6c6ac4e112259666a450728abea1c2ba0b215a5532407334fc823f2f538b19c41bdc769bb39016c6b80e979448c2303e5b369a0745cd2a52e09ea78a31656b5eb1b9911cdece131f012b2c1a4b58c7b5fd6935d3dd4537388aa6ffb2aec95046b93a42c98b1616c50ea3381d5a663c28c1ff5a6c539d762a2e069b79514dcdc897192b27b6704764c0e3272cfd76b06f18a52f10b843d2c245451155da8a2ae11bfa6595e686799c7a5a2e9710881008190974052d2be87f30cc7193f85364f3e7691ace93e546c4a5208bd0b18ac8da883fff99c555b4990822627904bbbe577766ba2b1865a787a2019bc7f70829a17ba325ac65b3b8ca922f2937e01179ac7184e596485fa326ff10320e68609c87560c58a281c7786a36105278789544ba33237e45b7f0f6c51d7aac94b4c4b189bcc6d01a74cb4841d1cc35475735d88a8ba650b8053693cf3680ac01a7a23024746ce36e7a86d49a9843bce16374e2fa845277207c6d949aa869ea7bc560da4872daa20e882330f6250a7cc9fe879a805974907b7bc3e0a06f1436370557a90842c0f6a5460917021e975ba21682339240db26c9a20b8b453487555aa2a1c5928b0304d4aa4d009cf290c006fdb5f64b94824ec1e2f51c3774656433b811cd33c54821800f81e5d48a5d43035d6dc36bf6466c231690fcb48d086aa5fcc69f5a70e5871b29c469e232478a684a09a4683f84933002b2196db7b37f08a2a82a494a15ab69ca901ea289985b500a40edb592628a16c4f827b3fe29a0f92718a8ac57195bf8bd5bedb9c9035c3a68300181d404be29427f02027506079fb9534e882715b388edcb05e5281674f161d739039232a57afc2ab8c3bcf03182463592ad5d0375e098c3c951e1e1284cf2b604475afc2a9af4da0ab3cc583b3991ebdb0babd1c92df9104b0c1a3abb8a95bd96a711c99b7b62ad244cb4fb243cf1c6714db4fb2a7c9a21784135a5e00b1b33857ca4a948bca6abbd212b1c06aad751b4f787b9a7169aeb8094b14f93869481c9e66a4c97c1a7fbc18fc0443679827320689b8901544eb2eca55c9450c1f5a4379907a66def76ec3f917ab7c39a791a44171a549f93ba9a5c8bbc19998bbc2bcd712b224cfe6eb3874130965972dd54ba21f5886be038f73698e3eb519578593a5444e918880c345be03e19f45b5028ce557f454b2aac808b1f98fcfb3c19c214a2db082c492ba02d9986a570b66c574d2081d80165c72f9053061c6454561d280558fa1bd7921b572c78773513560638691657b632b8110bc31a372a0ec6b3b8a3a9259c148450c8427a62fda54490ebb6acc42804721801bf83c7b656419f0801ae2a722db4037937d08064cdc3216e6216d402aaceca387bc56123954b8f724368ada1e7f01265d0682ffe847fc44565e5577125b815eca0c97f2555ff1520e2c4c5e6467ac09143bc797ac6326c68066035ca14663a335b5137544b876e9156942a3cbc9ca8734ce6f76b9f51b0a758b9b50877f925c4842828a7afa4219928173b92a3a7692477ba098c966a42001103b198b1a2094c42a9dd6cc1cf46c84945aa40bbe71e48a20913d0ea600a33164eeda16a811168fb123ef887496d20f0799b60055b072088af992055fd18766111d70a92dcaa1881c1b5d03807e4a948d0937b9ed4385a6479a23930878102c0c9a04cd1b51bac6a7a81cbae47b15f33a331a5303695a4ab229585d27b3a7105419952bde5c659e089d38789d3a82212e03cd0ed7a6efaa913362b55f386d2e4b8d2565a5781642d8e970f6c9ca25d2acdb8a3da7f493e37331d26432c530bb401a4ce65c463d24194b2b1d708ab2a34009cdb02b1a96a921f42c90488940e7033090bffb30b17b06bf5f3b7115a24baa94a1620434247ac6c9579f42294e1f50cbba44829640bb7713c8ee957174a85b295bb1e44943db036773d91b211537fd9584954726cb83c4498658d1d2a10d2b6b1593348423aad4f6bcf1807d6599a24c4544dff617a2710e119bc17785b0a8c57428ec993e5991f76a9503fc580e4c62a0b296dc52a1a2c83846b7673ca308fc0877d5f473012c5c50a67813424792171e87a7ca555c0bb380ac351baa05074abbecb602610f1c095a4d3aca0bfa11092bb8dac09918449149960dd7d0928dfb2fc23b7b50d85012416e2d237afd47348378c024ac5b14c9ab4c5507a1355685550de7dace35cbbf20a679c9b76fef5b795e0a14c803c36984669cc88acd814d9380646edb1cfee159040c8366e7396af8977673400f5ab2c21980e2a184a472563b1c32886c58a0d68a2d39275529c3fe1a744c877a0605c5da7556dedb89ae8731e729b6911a6194d71102fb42961bbbf770873784af83c596a66c2a94a7c851d9677c779a0ec527bd761dec9bc9d1b22645eab949e31f1968c649c811884a765ae00e98f3228fb03643f47890f78fa6f0369dc37c98b593934a3937084f0664b10c091e7a1315adf4b3f34b5b20123905009c6f24c7f0c601b8f53664b6bd6d48cb487b0d22d45e00f19409a894f3ea32b2b3ad0536ac05e420a74a710dc8375aa9610d2640fc7818ed599598f60e21113670b99cc0d96447f6069e0b193ae79277cb29883506180743678b3c9b53718974210f043140d74392d9be2c08bcf796b462211d60d618faa152e461cebc3aa675ea1260f4585e810cd4ea8415687d3b2405ca72a46129c95f9bafde87061158920c4b13a3c5300918c8de4b0f840410ee91077d611971a4094f3a236230337127c5a789209f36c39b05b6618512ea7c9549aa4552d30ebb5226bf06708b4621a5cc8f58b8153ddca32748682e36363df63bc1249ce1205484048fc8798ba7929fa627404f072a2e0c02abeb48ac9475dc1c087e427309c2b701668a291a54056047def6b10618a34c550235aa6d39f05af809174041b2140640c252b604e81e56f34f2f711ce6d64e56ca0fce0133244481058aa477628022f2c2eb6c544d1045dc61aabeb0aa42127bda479160f582cb075619f810ca2ab886319bf87b12ab710db03b4a1a170be0699f7f333a46b18d71e6832c356fcef57db82430b1bb745f2215fab44571d4b0d9d568fa5cccc2919b2ff6b8d9281e07759069b9a602ba7642f570b20b15a156a1c322447323a4e9fa1219b812b03a5b2e1abe8c5b7ac26a8589733a3fd33480e18ac200362e5a0dfadb1252c0b2d8c139e4532507329ebc3910f05b480ed196bf86166bbb2f4a96a91053b511c81ffb748f420a33a6cb771dd0129cdca037e4533624aa16fc8f18a9bccbb475ef0a8b978ac9090a4539ca1fe06c5501f2b34480b025732a90a01e60ba9dfeabb4e8c61ed5c4396423af0aa79b86157e687c313e5623e6137f67a25680eb6bb841b80530362bd1425ee986b18830509bae9bd9926f020cd02713c7a83e8ca4318a044691637d03386dd28c3ba081481ca7649939bab47668fcd4291a4885317025e5250894e968168447f9f5c73702a5837802cc4593ab99242a59a39fa14935eba3e781a7f2740fbfca7141c821c8921e7c52b4ebe24732118cf57590dc919d09ea18d2ca63a605495bc2a88f9922eb356fe0343e4ac2666c49adaeea898b1c023058bb5bc4437bb6b798f59ecc8b565f811c8ffaa13cf8a4af8374c3221c3e1ab89cd94393053acceb40fd6a2c1d2c4c6316993835b9ade3a4bb396a5040574005ae9f1619c2fa66ecb363be8a7fb424927f8033ef8b2397a691d2670195590e9299375ca9b5dcfacee6eabe078b28e7aa1fa314cf3c866667cfcbbb5b57f2db74fb19e5e0ab5683efda06a93631032380727b6a801b309e8e810537ee79b47e8007d436502f14e7a898d48484c4c8886f0310cba2c14612e7a22ec88bb5e9dcf865776c37cd5b1c6d1b18798be80b9562ba4752e1\"\"\"),\n-                    xeh(\"\"\"\n-6828da82ecdc732f9f2bfc44c3d6348f43edd227f8de2c883b9be7f10b00fd82d457c2cc8c8bb275ea493eb0bab179eed34c870bfed6feb8de10c782e20182e3525bc437fe2d042807afb232cb9d93671583781bb83caa6205c4b7d800edbac31fba90c06ed3cdaaad0a876ed6b0b36baa080cb98709e2bcbed2422dcaf3dd4c43661b71996e246ae507c6abec79be6cf0569ab80e959e4efa0f1fc70ee620595ca82c77d86f23f958f7696f3d02c98b4fefb8c0605211df49d87f03284ea641f66ee2463ca442872bebb75c69d3b86f5e0fdb4c87423464362daf809a818f4a6f123c852e37e5695113f200b3a5563863942f41225d11277c456d238815a6ac53b4d0af38d7ab3109991ae2e36fdf04abffdf4b79efa8b10c52029dea1ea3119681531451fad6a51eb06ec1d162cdc4e11d842e283a7bd4be32cb8e2b086d45484710ab0d23dad66816d914f1b69ba17f9fc8c607bf8807e17f615ccc449866103ffa2c72cbb7efd44df0d62d6c2d8d801fd75e3bbfb5ec7e28498719c28a86cf1d69275f08116125f1a72f5a6c19b38da8a3561f8cfe2d4efaccf39f77e9e7a3413d6a556386a5350f62ca7c33591f94c7853bd6d4e5256a13ccf4cecfd2ba450ec6c03d7a3a48305981634ffb33533fea02d8100eb1ad574628a56f986dbb5eb9c603e52d7327490212ee4d1632ed4f5f85969b53d3549c63d73eda74479a2e9c91239b30c50aba979fb2f6209c35973822982ab252acb8138a0e574a201249fe2e0987e37705d714fe74892dc690e4c2b8dc6493b55a75d100aaaa160ba1e5e71af05400c35a04f3b76d103ddfc79435ef7e83f2db5541ea16830d00554ea942dae48b9485182634312e70c4f0de7a9a9381652f3c6732034f768a07883ed3afb5bad9fcf9fc19963db92fe4c23772e5d6859deca5359964597ec9dbc06c0b988fba9c26d03457c89cf1418b5c2552e51fbe66a5d49a39d69279edbbc01c8dba250dd2218aa0bd60bdf9ae3c22e6e4cbc2b074818614be6a9e6acefde06b7a734efe82d061e479fab45d255381098d7672007d672df5a08b0d659544340de907aa63a803f188c8ecf09b27ac79dfb10ce0ddb09b71b14d839874cad31af07f6b13e4c6aef06f79359d131db5f56653fd135b0b553bc03cf9c8c24847239247c6b29f646e56c08fa9735c218c9f3ff895738555640518fe8f3a21f5752a04708ff5b157a5f725ad3c0786240b25d8e4033028349691cf58b5a17939560ea81e8d721940405d44f6e093c46946e496f2ddc4fd77c0e059138b5527ff2809b8f415f00049d07a24c97e4162c2023859d4b1dc18e45d8553a478dc9fb93427356bd77da7e641011863db2158a75ab3664496ccb0dbda445faffcca2d841438d6988ac1f636993d833cc8d44e7ce92108d7b904a59944ff47312f117850268bbe7676dedbc5bd17a8ff5040107ff13b61c5280be9d21b9d9c9ccdbbf3031327ed1d2a639c1fab9c3688eb514be79ede525d65408c913cf936d219f0b8d46d4861e109a80489a7de53de3b55809cf5e2ee1d0e4af20416c51d3d4d5f5a94e42279fb39af570bdf558527f9df41642cad191302d3c23d5f1a819996dbbae5a29e44dd9edb8a32f703d0868ab6a8d6714948b6ceeac635539ec9baae0b365698065c5091275002b43df42cb83447a7e26fe865834070be51b75e066b00524505b01b9005c346e662b874837f53b9996effacbc37ba75d271f3af3de97d0c1f6bacd3c8394c7fbd5218e637089175b74f493f7006229231c21688721a5254498fb616ec915d7b5f04ac18520dcd8f6a025c6564e6109fe19d0a746450454f76fe192e4e90aaeb38f070a65b8bce90c956ba2c007659e2d3d729ddaa117895c8e0fb8f757604bf39eeef565ef96ddf146a7a71f0004dcfa36a504701bd3d36d1444dd95848b7a2eb796dc311dce1b83ed731684d485e1d860ed2573509c15a71dd89bb0199f92c54636222ce4ad5c034806167d925b47625b00de711455c077abec03568acc201af169d36815c78c885604151973b305ae5a80f0cf5ad11834a48b8023ae6a4f0a60f087dc96fc6fb52167f251a3308f09ff1ab754eb87356ab68f6dc88603049479a5f2d535c10184924034b51e3824b71cda2373000ce341e0199781074a869953386a6d0ae36b6f692c38913ff9a69c061042612a80bbb4f9b4d39\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-9a17699301bda8f100aeec84b6c2ca606648db979a4c7410f29c28d6c5ac1b2b86f6e8a1fe878a5a7014ebea98d9069e88705f9271422cd62f51579357f5035477ce73c2cb94d422b921b5efccc962a81f1ea74f57c8457023887b93c61d02178cb5833c2ab733b00604a84ee3a556032063685a710df1712b74aee69007f1bb23bc7b2930e7c54224b5a9f3b204c070a2fc82cc5bb16b9602c37a659dfbaa31976c44619fa2d8997a08176a4a383761c3295c114a2965b1b11ad32b4e20b32b4d39692772c173a1c0bc45a87a7a9e4cd86b537a226fb165bab458f5a46ab0aa050338a94df46d46a31e059382860bbac2ecaced47959b98213b2855553b351ae60f4a2653571772e0421cc9f78d34500cea44cbdd5934535678cf642594050babfcc176e30325a96cc0b360081bb9ce618f51d23eae86c8ff7a4bbc37cd98351530bbb8888264c46ccbe02b4a638ca614702238a240c85909ecdb3994d8b1b34ac30de4481c08944f454d95d761a8a05b024bc563f5afde38124916c5f4011a8fca0e44eb1292458f1c72bdbe15c2812b017611a09de22942112df5fa8b7b314c50aa4107828ec70380bff6750e5963581b9c26813ca81b5a4c7436b5b5962169ce0047bbe6c07f76a69cd4674721c2244a09cbac849c3dd730167233aefc6ee7b72b81896b56279d9b861a97939057cb4a2b6782ad485c597932963738abc022b5b2c463ea1dcbfa4edec34bd1595363a7800d6c32030ac6aae65ca671c896336f07666aa2f9617e924c08e93084586afe98b1ab184f951a1f485943262728e1b5c7c1209a02c247e24caf0f74445a22991fa1624010a12dab52ed45523d28c5d3902cd77b87402bb3e9d6b422ea41f033364d645cd6240e2813c8307347a0954bc3907c31770b9afb4e1d907bf9da59da9cce0e8a1396879e3706662022b67d489e7a501e46580cf7c4037573c1d597b32b92caf8b87106251e40e897c491072c358aa0723f942badd4920cb252042b330a9283b6f4859494a453d22c5d70f03d75b93495985c6aa0b0c7093b4b103d4efc4dc3d079d4d2b23ef44c5b002b41d80f0e45919c76939df63ada491ce4a4225ed87487d1931cc28b3b2658a6c46704aa327dc3870a7067c6114ba86c95ab42bab5690bbb171491136db0e50266595faf8a171fca4d9200052a668590021882904365e6195ad2bfdbc26dd518790ad447c44a28cc770094b738ac5b9bc7b0c64e4cca7161a99b2c26ab28535514a277c983c3833f726b9017e98a53a93e27652dbab4675e304bd2e798b50b27aafac6386bb70367b58e2853d71228b19b9b4a747d6c81041c16a5947a0bba44a26d761a2f87a66d4bc272ccc79f1b292827a7f1e93a7967b563f8437b859f911176849b33777a1921d73e5ca0914f137e2159cf4ce575464147f9dc66610abca6061127d126264326e4e404e5fb351caa251ec20808366ec9f447673a89d52b521b54a3d87184f4aca669f16c9e48be599060d5d82277163d6cda0a2d5805ef65043ae704d992839d28a1a49a675f843a2a063f05cb84ee234218cca032f32ea8e31b84d59506312aa668130579cda14cab0808406df9b5fd5c5679c92053d1769830c5a565b5db96522aa16f9edc1aa638073d7b875a4c5989d57be049a2c52a51406958bff911ae72b90e790f9b21ce15400ba4ab0fffd00cbcac8e4c6bba6543ab4da9488d6017d95abe7e477901ccc3ab935d67086c2ab8c576e1a1af4b9ceb31857302a91bbac2d02066681a5464eb0491b893f3611a94e8b2140ba407eb074164bacf341d4b375e143a57d149a424f00fbb5730646a6bcd1b07ab25993e29ac7f29a93c954b796830a4848b78c0c1a40a5b3bd3c329d33669c07b47154e2d2c129efa6d46600e3655438e98243b02a1ce85c73b05072652c9a68072c9b01088581fe919cbc55b859631a42b93410ea5493d8a1b1b36a1f200523bd2bb6d5993a6305610fa20de08b2302b9e64b5ccf76274bb20279a7b4a3e39a498c662cf6b095633ab7ca05977c36e55b9c20b226e5c648bddc3ca6934630b389815c38b89c8001933b4c715cab439c78fc55c81d003065054d5061d1d80afbe083ff9071ac28c47b1ea8ba836961c97ba6039325df1b79bd51b66790760e74b8315a75f0436c441361e37075a75830c1b0310e763205645d482c4870336de131a6cfcb2435119341cadb7e70eb3a7b7207237c654814c9a6e04c5955e5135c9d311786802df76bf33c37a04f84ec0f9311ac371664ca11dd56218f65240b97819165d90b113e955a19834a144e1ba40f97cf815b90b4cb7b06612168c6c46e11d4d79857f04cf00bc8e11b930588216e7ea3a5c99caae7b076a4680bd76aa3e1b806f428c8301641640b938743770b5c1ded957b8b1aae1fa28e6f19a3ac59f50a59a9a346766c9ae68a5c920b0377891511cc3b3fea22a0b7216ab1c1d8d97139d985f13345a073434150083cdea7977d9a5eae98314d6898fa14e89e4cc7d417d4b060baf854840e12505fca30bdc0d60a12fd30bacbd62287533aad397c208b0bbcd50b8f19431fe727460d754668309090cc81d8b7946333cb6fb890e152069624a923476369879f04771a0db28002ab860578fe351a2a1a2a11c198dab6b656a4580caa45e45d3987c4445f312c4d14c7f70505272364aa8341b1753af08040af6501f69e96d108a48ad245ba2663aa154339cb48d4bf55acfb9534ec42c06a11e4d4b3659f65ccda82661b1700090187cc57b17b50d66ebb7a44672191193dee20e9ce21bcb36be9d312941d622062c7906f5ccbeabc861d85ecff006300ca549043dfccc4400118a18b49eadb276ac45469ad69ce16c60bb717368d6c7b2f068bed1b2fa930552731444f08a239bb65f173b7e61730c68bf39656ce5f7425601519a2773aeaa3795d98db1146912683396b6c9232b498b9bcd3adc70f0935d71e56737a422b5792f75b12457f8817d926c44f8a8e2a34573ba7228204cd5ba24c7f245dfa0c1fc50be04e36f407043a4aa7a6f62b271ebc30bd76a80d242b934cb8448535ae51dd43b7614a736d72c14a577915f9c6b62cc10d0315442614a36f32d94077e65978430597a6694410888299939784237c991262d38a540a5e84f326906a7883a6ac3b05bd6051c5a11ae47809b30ac9a31226281a39f63be3876bbb6a896857a5177a94b8193acdb441125236c9cc291f2d7bea99025b282328c571e93f2bcc943b3d1f6ca4e3784f4314e570b48d483b6b20b9dc41280610aaa3a345e2645a3afe5b4f3b507b9c1a3502c84f581617f2449035ba524ca6a454c87c57652db9535b926557a19b157fb3f3896116ac1488a000f20c5251017c34416bf6d13c178204484c83da35817d0975183170a100c0b24404645d7b551ea24569c5d92235e6df27b105c065f66b23f4b119e5aaf6eb9ad73f3ac55826faa55021ee116d9ea096c350ed1c659751bac4a57c8c70126e736ba26f276b5391096541236b3360d9b76bea1b519d141f8fc9f4e8411d02702ff366aa7e1a5629295de395eb251c63e5170c1db22af621dadab30ffac21a9b400c8a7c30beb194f027858569029b19e43929901e18fc45c1d7dd6b464b64b14984f21286ca02124beec214d354ab820b4e4aa8a26a35fded6cf0d95a26f20123a909a7fa708c74580b7984ee082a05f8b481086b109d61b26fbc171844bc29c0ed42bbad4cc167935a9d1524a4e162a4d598a6e23ce1d404cc4a5b9b80481fa3b1e416027a590880b38517ee34e768c61c93cc170c4c8a8d3abf3e79ad2b53e710cc521027d2b8366ba7583e9744d68ebc33b4b45b8f04e44b98f890bbe3bbc0209d93a9d6140e6260cf28740fa35cd68513d4b024d5d5463d664b3d11a261d5bc5c1b8ac71f247eec4c66b72812c308b3b93a633b80e2ecc502813cfb4339c24ab91129c93b56b4d87a132d835986e994bf61432dfa98477dc70f7a66b53f88843e86ab729b5f79cca14e2263dfc868e2b81432bc47fd1aeac51c3a1d49549423d40a86210317e39d9ad15019e90050bcb882ef7dc09377a961465098d357061f8549ccbc7f951639e3a73b3e7a6db109ae463ca41038fa32418ae4777372121a5470622964f514c76c108535d7913fa16954d6668e2e01b16b492dce96a932532baf3a413a3c58967a46b80c5acf276e2a86cbf499009a5685f392dbaeb4621b66d9f1a631a60b59d03a8cef18f87c9c2cfe6290130198e67b8d095019b0484e0d274e488640db473d1402929cb501e9291cc428d37c0264d1c3edaf23921b66855f3b90ee38931192e0b30d24650e4c7c62b62b0bb885e610e1a9e542c7ef8f4f03f8ec111302c342652fbfc5c1267c0776f8f71fecf641804590c1fe43f2ff453bcb84289c9ed5bf4a40e4ce8d367598819be8ec4ed706df4d26819f69729c2acf274515c8e\"\"\"),\n-                    xeh(\"\"\"\n-6bc2d2cab5f1a65e54cef43e6e70d79e001ef07e360312b952de8f41e1ab8b58ca8926a0e5f037ff2c7fe755b47e46a7f28d2993d22f0e538415adf94d3dcbad32584fc0706fa28bafaf0f29ae6cdc97811406ca855f7ceee962c863e0b3cc1e107a75d213a550265c5ca4ddbc573e3ea0c7fbf5f7ad15a470b71452ff4af1c0fea5b9082a210988b7374b1541c6a36111884697b9780793b1fb755623a3e2119afe55d031d751b24a8c77f5fd15f7ebec6f9bdd4debf944930afe82e0afab87a9f7629bb146d6ae4135e1a3a280479347c409fc5ee0f811a267bd959a9b476e7ec49df9e616430451c56e220d49f4271b8e8c59ec7d640fa582683e42d7b07d5cac0aa26eb98c17e7c3c94a2627d1fb3b76748856cd1a5c5e1f6b0b1fbfb396c681e809a60090dabbf2021627ca06950216cb8c5d51e689ca76ef9734b23e3afab0069982b6e033b852e7494ce6bcf3812ba88a24edf15caa59b1d2ac146b18a32ef7ab377c12a44e0809790826672610d212f675a42df93e149a18f610ee55f68a08b350a79416174a488618daf2ec8c93f1f466627dfaf870c293e4a94e38d144cf38c2ae4949384c930dfdc17c9165d78144cab97daf68143f3c40e957220521dc28f8c82f3e14091cfb78a5ebc4c481dc2717616c36ae8acc74421ef4a9d88a4bcaf42882e39cff6a0eb52a9b6571b0c2c9ac18fbee2e9a8d7c17d2008912f89801f822c28d0751397e5283b02c70b33d736bc5ef99fa41348bcb68238b47d32a915f8e0999bf9c5e9afc497d7de87fc8f78ed60aca03d5831316aece8bb1bd5ea82ee05694497d90d337ec3142ee6614971f925156cbe074e416c9e052865910f03c9057c8fd6c8cf12c2f03560403d73e3e96e9e71994f03d0b8faeda1c866ccbc77feb536eea7103031b0037e9d0c4d6ebaa3db432fd1258fe7bae3c4ebb639ffc7b7a5660efeda0483ed89a256041cfbd8aae8add367160efd72a5332c8386725ed754fa6e2057ee5cc0b3d0f87961cc2e22065aa1cb22f72888ac5a509b9f302645bbfa64eaf2825c6c30f10059935bc7a41be3471c7e8dbe0922a1d6a8beb91b21e2181c9900c93caf5640d8a886312451b7c620b0516fef8088d9ab966559be634d965df184fc581062fcead1b9675a4c620ec5c66582ff023fdef67153de6124abff36ef884ff2abdac8c1b29425616b6ff8893c2ad7cde0f2a0140baaf912a1a158df9fcd45104766ca3faf2f22279e70505e6fedd1bcdf005d33d0ec89c8f82084335e6f69396d2ad1da31a577c64c3c60afd20022067af6007f7a35e8fb410cc0e1e906a9ef77034096e8a4f32544517f75e3833210cc8e5989f440fc1d92e2106244c00ae40e566080be0b2d14544a02e950ce73dd3653168575f8ab0f6931b58cdac707574a432bdf9d4c6bf2b61ae8ae4dc54f7e48cef7639b29ec5d918a06f468c8162cd7b33a627bcab108dc94a4976f1be7a9b376f8982de227462c47cf07f7070816be5256c59eb2b4ec6268fae1b50978722558abd117f5399b071a5f7f878530dc877394e9209c7e4f4c1b5c417c402ccf0ddb247b07e203f71e7a94b7d41ce97755b983fb376e0da89afb76b5df6f166a822b15c7e614afdd9c004f1883fdc8ca12c264892e1d82ae2e675e8d5c9ba11836ea336150a8b49f29b0b7d98122cb4fbf6594723de1f1cdcb4fe0a44976a5b40b087df6c30241ab081b1313c396bfaebe92021151f8e2ff5a917458afe820f9bd709b4c8510f3801e091942c626a802179d704bcd65c1ee123fbe72a68012dd5a98c0d97908b1484c56ff7bbebcfb6d2aa1426ed7c901d61f01926d348f20a35ea40a186a1a16cd872e9bb53f0fb9f44dc5f098503f9115dbad301363ed7d60efacbeb8ff02db264b9b23baf595f273360d093a36f0276154e88d413cc6cbc9cf64d133eb4cf6ed845827263cde49c116c6e6f4c25f8ce9a611ece5aca8bcc348d57a884ab926c96251e534a5313e52aa7b46d61b85d66c5edc065c7fc6a62909257fc8b6c0b171283e25212e3a96224d7da12ffc3bf303f16f5dd96101a7b816b260774a22c449e25cfc991ca4153a093058a64ac5d3fe2113646f598315f3e1e54bedd65680c6a2614e1c8af922519fac6bfc0e589bc28e3e70b53dab591e6a8942b2bf62bbb9a18c09b20cbfa4be5d7cb0f2fbd8fe948c3f2d9411845f61cf371\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-8398ce8a287994fbb98d1515027626ad0bbc20d68e8954ac322789e8ea8264e6b060279df7eb3109f63d68d8126d336e1f0ca4dde11bdbf11378d0ac967063f8b91563ea8ec51346e3b21e886cab1d39b368f77cbcc021252299d8e5a571f74a9e2a173566194fd161bf1850b24925fa85058da68f4720626c3c96c729cbc7bc7798d3725e2411eab78843056904b6b760137e790b0595960915a4934351ae7d0b098dc9c603e1879efa3685480a1a3b3492c5bdef811bc55c28e0ec9ed2546512736552427944a1bbe21593e8b630d4dc25ca2b31310423d44223a751bc11d0b9d4f60cdda5477e6406d47b7dad2b9deca294786c41aa4047ae664c86a05128eb1916b6999c12499e3993f4c15200507b51f237703507db46a881f4630d079cbc95825f91a89579ba30004ca7478786d00126d22759487ffc192c2e77c81d40a05a33b613152a91b15f293027d8354df9754abe701c89c583858627a50c5913850288d07279865bfda15750ca82e7db9dd2ca535f882a75a6ad8c8a51d0232eda653e033ab3afc242c3e77940258b355554a1eb84657bba96ac255645373139b1c38b14ca3c773d90012503579a69c0e42c4b263c23d8dc6fcc09491ea83543028f757838fac956e3052659ec2f6c66380d9b51df627e7a80560a4728c4f583a4434eb8f38a258117f88639669ccc55a67e309c2e788319ac543966b77fb498c43ac6a2f7d02d3d88b4dc85a57aa17286947dc2d7a40088c26922cb3b0a53b02074621314f6c4c431dcc6af3549ec5158368155ffac9bc31941b8c60e2147a73f61183cb67fd144ba0090832958056a65c88eda50518a54ec637d8c934a2230a608e526b55b3b2c515fb4db3ceb528661e17b2c44c1b1e5a7763cbffcca5211321f4aa9252138cce7bbc1e234bb473a845775a2fee466195ccaf6e8c0c198c434a389cd8577cef4a800a984f6c002397c3c2706cfe96743520ab2a9257206f8c6cb387bc4b8ca913a992616296e502d4aeb8ac5b96ce5e283b6b98d289a2097b02007e17d10129a55dc0e41781b8cd292292c542a2b9e180a95aa5bbec8e6a4cda47ace3536e8b6c6ece51537551bb1d47f82f5c0962259fc4909cd85b2378a4d4416ba2536829db4c8e1f561677ab24f21b853c93bb6a54111583cc7a6721abb300964959ba667a45508b81b15b2f30e6dc2562d5131f7b7255d4cb769c47e05a9509bf2c3416212dd2a3cfa788b76f44692959019ac16f240892eda8807f93b86c6c92c2b595e55c349463db2bc453bb137d3dc94c8c15f54221df02b8dfae58e6d49b87e71cef6e48336686a1e68cd841a49ed107e91fa26e29488d98c281bf27997c173a6f9043c024676ea75965b7bf5ac221a291ddfdb2debc3b2694c36373235ab8a7e1979678c6cc9fe767b16491069f59f6cf54476770528f84222f223685307df567806c64f4d334abc3955b7772f7446059e316bdf6ccf69b6169a52724e05a050fc4c5bba010089a2e35b8313952f68a3197ff95556f29c85d5a397b54f05c9940cb655270121b3c48e6af77e7a321bc77a90286548268843942b5e80514a01dc12c1015a8e1abc83e684e97274d7866f513a12aeec103e59bf7a6b1bc49672fa5486d2eb436acc3a6d356a1b238fa3a5648dc9ca6821b902cc1167c52764426783b3a39fd5285fc142859637ece183da73c899b78b20485ee80a502c419a70db4547114ae71aa6cda695310459d67ba841963189d75d32f7a767a1603567534521cfd68511e23a1728c693ff316a1a21751162501bac2f6f97548e0c5eff67b2fcea8814b12c38d4680a54a1a28a64c159521ea08c901a0336355c8fd87b003c8e49068455c733975512e516b4a7c542f2592cdc7885e1299e1ce310eabc295dd0416e673e564c2f37ec9482f880d772643c779eeeeb0c8a06606c956b2556936c7ab0871416dfa9a9465279930621dfd4bdc4548f4715297ba30fe4d9a23f460fa4c00e61335ad50c86a9a707713b3ad32aa7f45a2a376184be72caf154b3ff93b873543c1c5c90fcf77f0be2b5f66b54ec6754c7a50ed0fbb99f720f36335e634857fc8c9e3b1cc8bfa5b53d371bd51c67ee564855c57b3a250022056868f2160cb65b758a9663438fccf2c39b866062f668d194a29dd1c809d4099084b07199a5cfc53573e6291a7978b848844c008f3fd45aae742d49f4af1229c49189bdfe177ee5c2c5315940f0024009eb4bafa5965a472d87767d4dbcbed6f6af41307cb48ba8f9828f229160df4581b59617d34203450b0426593947fc84d739784528081105c2c0fb9a7af8be6045c8606cb22d1324d5abbdb773c69f4bc88fa15e136509dbeb698ea0bdfed69f8ed67477e10244304f866a912d2c01bb4c428081aa46b862a6d420cbe7386596c34ec87f11084ed0493952a656939c5614e6afe7a022756621b77bc27648be0e86a763e36f8015b9e5e68684f73680773b5d5a9f37e90186fa13c11604e9f231ebe02a9c531370778579649f33c70e4be811ed668e62d28f67f7133f86695b790bfd2a39a0f22a49195ae4a40196a974a1b3424f4c574778b0036b21b356835eb2a142084aa2b736e4a810f08a2199c86c3e8a5ccf8386498592ab3570c6677ef089c0d05b06ccf4049314a8b29c9d9c18ce40933cb857941cb59abcb499ef53869f155bf2f4ae7e1c3e41889bb0682de1b4ba1ada65289669a55807d10672fce9142d1a8a7ca20c332b4064ca8a1fa5a8c4a898c76cb837b44013376fe1577b0104c95b3757c40a8c70d926216c4e9cf072ce4798b8d38776b3786f6136dec4b9c3a35ae088905df969ece6bd26572c91d78242060c54c9573a789d5110b25db9a5ad1474f2694b31553d3dc63d69913650287f6296854c46a10a54acf869757de3bb21342d26825a34704966e5239ad16b57458ad75881157988d5b0577d432b89ec573da15152e89afc7cb0c587a3db87bfe0db286c528c4b211382172064c94210f3b4c698124d860a13e12b87756bdd0002423649d7e7a1f57676c6e53c1ef6bb6152a932a110810ab80c2001aa53cab449a6d8b9a734e48de8f4777fb7c6f7408c2c8928f72482950b6497c2500af7568d514c4c34151f6749a0a6b79ddbc12e03c5563702ea733ea142035ab4149bb58ee56970378727e6215607a64fbbe7888323bb1e265dccea33d1f96b8e797532249092a202f3f9c9e7026483e78251cc57c1977c1e5a4ce4f9bb6eb4983823998101a58b0b785823b3352c6a5e2a8660fc143a5c2653e6a3920a8d75c29247a846f578abf56c2dae289e62d1a581dc561c946f00edc202222e0489b697c786ddd18f38a937c7f9b9cd0a3d85a9960ab2b470e5c57fa15991e74517fa9757a4a62a245392f3361f7601cf0040e391808235a593a88662895140e468e88ac4553908630564e61a89cfa2c2271a27c848a08b97adc0444a7b72bc0051695e197c91eb4af7ab869a4b9325ba36d3636645b23660b0a101eb0af171470dac7e4d72c53bf4070706c840f11d8514913873667f7ac5ffb6c011aa6dbc34c8bd22c597e0814feab71a99b2969b8679c4368282bd5a109781b02561b59164832b6096a13b204de5d8592b9045efa538072331f984b42f43a44d4ca6e2792bf26a4beb24089d046b13c25ec3612a73c19a8332a9fff70d5ff71851da2927a13942e8aac355582fa347920443f9a76c1d942d624c8b696bc3825675a6150cc56b0a3e5a19bd6782ce9781f4f2a4fe6b632de07047828713b23d98c91c99091571d90c3438c8b64592ffd747f29351d8ba91a2d6349da30247db82e2051cde3b0094c4aedf7556596968ae6acba7a790cba9c1de26689cbcaa4d61bec738a17f33b666764a2ffbafb488530f0c1b93617be1677a53cca42908c8c7a051ecb6a894273becd75313420b3d763a57ccb7cc73c8e94aca79ec03873c2ceea96b16d67c34c99f1f3642eb6948f4282e8d50ac30a10a47ab8859d54f86011a652913194c8b5e3139fb65039b4493a07a95b89177a4d1798d35cc1b10c9f0ea8b1afcb5ecb2841b143930c58ce8ac90b3b11f43837645a6b9f6c08b538a2b7b9272464b9707ab4faf9253012cbc985ac5594a7609a1b82c13bb886c564b577247f886382872d32102d0a31ed410942c5b1be910bc63b0212eb918eb0485e6734fc5f736aaf84467692534e0161c4258eeda24763894d0598795d48d99c56771139fcc016e516a29203774d038610bb5a57314a9ce0c677d192143d34c8b2148fc190f9514820bf8c8686a4413387cff6863fce50cc85cad03b350de7548972a4168f154337006e6873a14aabbe7a7f23ddbecee63d35e15fe156d0a508c235b058056ca100bdf10442a08ad6ba0238be525e8f98c76ffde6e11557835660824ccc66d3e78981182b43d78c40b828554c36d70b960a02c66490c15a4caa6a7d5f1e9ce34\"\"\"),\n-                    xeh(\"\"\"\n-7f0a07ea9e9359fa3b7aceb9b0ab5c41ccb755a103f6becbcb4d4a5a1b288add3448e1376688839a711536f82b6b1fd4b24294a074f0ffda82d2f8d4f7f5ef11068736efc9b9206c032b942de82f4abde3fcbce845ba7a32b4eb943b0f5051fe5cd99040ba07bf75fc6347968666c2afb8af6ffd55cecc84ec7858e5621d0db6918077aa12a475840c4258559ccfd14fd8afc65011c8862a50393755eb9ab5d297069627df3a673318b1582e2200b14fcd61b1ffc814080515c2b4fe189acf5d194b69a402b93963ef951d86f80897cf85c4e09e054620fc7e2581bc54949b58cdbcde49da1997cb4085d32609d71ca1a210f1e47c06d407539bc6fc2e58b6f42d96bdbb40e1a338299886e1eb57ada636334f8936b0432a6853df768f33b0ac4b4e393f3004aeeb993f9f9e230dcd99cd6d34f9131de3dff2789f2a1d55d57c2181ef8531d56201fdd1743abaef92ba6ccf2b38b66d330d5011ca0733ff24cd806d9ef90c60306234f34053ebc8bcb79e4878259871a0be9222bed289daa932556ba1b3cd11242f2e3ffe56b0223e8c62285dc000e206eab3c3a271b4638c4d3af6b738791bb1988b32e57af74f1009ef5352bd48419934c8ba18074c8de0e61695e2ce0d0ab6a0924e39d69e8ab93d135b5e142cd1593eaad8d130920e74fbb063a66c21999e421d74898f031d98e0947e4a91954e7b9fdea147e840a931fe0ab5e59324d18280df15e1736e03b0644cc0a84d87c52a348f5c82953a3c86a63d456f83a772b7f83fae2c2b21ab5a9fec90a3947616754028be3592cc094016e1cb6079910773d9ac5957c2c6fbb11693c9c3e49fad6d14718608287af29b743f68d5cd5080b838a50d292ff62fc67fa898a4cab37c547e25146ca7362a54c8ea1362c03992101da3e84f1b4839b092603a32e21f99239f98bf1d01cde96a550b70264eac372cb1b9dbb034a0dfa3737b82588fff82cb80bc6c8f38c15ce4d3dd7aca813f12996f903a0f4ce0023f33653a9328d5885ef2752c14e58dd8d6e95ee95e74edba1487bbb46974bccb3108223cb685b0b8518e8320b36f4664f2d45d6d0f9d4035de9ddcd09e567efa1d8905295130026bd2d05cc6b40615572428b4ee33a57a993faa3a0eebd0dfe8be4ec4672dc824a22bedd8a8f956f6dd3842e1e5143cd64dcaa728805ddbaa09632d8d2a1b4a8198da00d0e0fe275e83cf1d1127d249d4539b34a704a1ab78c4e2bf1dcd716ec5aaadedbdccde9c08ec394d17500a49d08772257fac9d354adf15e3b3f1a5623bbcc393c0d3769101c9e9345f2a15cb5d664fb22b12009d72f9ce0132d9b04a8b7fd1e7d87e42795521a9dc20f54ad9c7150a29df970717b0e37bd746163c5048ca029e2e9355923ec9ce36ee5a6d0c5bca5dcdd2e3050eaf2dc8f010bbf22fefa270427b090fcf3b4d3823c1c335c6a0794ab7119224a5f7b6cc7af188b97567d47969401f62eed6e1e4ffca075a7fdff17e12923a03d4f70165d9202d6e0816d97ed71943c54a0c5137a3f7e723b3fa178a7680845d56460cc9d05e87e92df648443a9430b91994d9cc55caf0fb56976bf75a1fbdf90a7e6655de4d2d37ae2b785ed31a1058c7f80fe89c042fb940c4c11e91d3eb18e0be27b8321c6c999953fbdd428f57b0f52b254def8e4620c07f5fffbb373eca6b57b6a8f6f6189bc6f9770ed1015ad089e9759c70163d1b9f2d4756c75f82693a13676e752db4b09d855b60e38337000c2d126665f794430fc261c0032886a4a76e6693f17cfdf2261a052f33aea417e7ef8a9675d851b8545d65d19f458623d7b94dd1e4a587b416385dd8b2b9528e0f827e66f4b5fc350fcf7366f17135321b6c998b203019b21e0e62e11851273441d4d6d0830a16cd0951b0d5b69adc27de6818229057f9f96c89911a64a9caa6b50ba5ae2265b8a6c63bd844dcba7977ea0bf1b8304c1412239056602e80889a26ab42f73d7444954b9ecbe9b329998bd15f8fbc4fca07ae0be6381c044dc30d7947da3efbc552189bca550580ce843f946f783e06169167c068f0b844a7c807e28ea93b31cc1056781bd076ab4496e4cfc1fa582016f080a80e86b8b7b4ed0b6e7f44ffcf9288ffbb75a0c7d719952c463c92fb19386649db9afd7855e9b18e235b46208fc3d39108fe6e33f0c4e446021a5ad0114a3ce7b1967c191f415e9f7db613a2d9\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-d6424525c08d11e26c59b4cf74c0b97165a85cd9c4aab72ca566240c3a8d248012e8ca8c75927021936901682a9fb98124e6b00ad2aa6afc20c9d15501d127186042c6e0b13a073e7bd100a2882759e487f8b70dbb391711ac6ccd77b07ba72c9d8c1bde14ae224ac302aa4609d77bfb176062616ba7589eb597475f1732acb5a3392582af7064a6d23bc1820be326572b403573378586d4cae5db40c1d91285dc4a3a9ac43c07362761a5925043d7b63030113a9775513160042ff79fc3b1155b9c2df8c75338817d174774fce4cc0508958c49412675845ceab7fd9b0b9d1abd0a6057a1e5079b266162f281d9f399062b672c6754a21b79e5423069117fe785985ae7cd5eb43fc92268140747b20983b85205ae063cb9e18a59a2577b4c7e889b16d189894e5788d459070f498eab465d1250812a155d33dc4b97b45889c11a98e6183232993b56007aa6544d8527244ba9ab55c3d2b39a839a1fb6988244e6c96648a2872202c37a35f2204386ec414686a52c8a0b9f976237070ff4762c21875508384c626262c38aa248090a7d523e429c8ab417a3097b230990c9c3810b0ef01cc9c29d8549cd4dd3caab37c5ed650d41158e34443492082e91ca574e96938cd05e3fd1bcd6c57ceaa2b3b657cf35707cd12485b4605e06100a5de0b8d0abbb6fd74d2a93042f8c68f88502953a66d3d11ebd06bb981c1250d0abcb86824358c77fcb5f1df96b93c2c833d51aaa36cb9a5508eee473ac6b8768b49fec81690242006391a3ff6a7b968802275c6274fa965c3958c3d7b9009910a7785801988c5239882bb2c4a79a8db3d09d25208a9e585e379c108a925716ab107379a3fb8404ba1393213166e9a5c58a8a9a90a41f4b530e67604ee8f249e8448c63e52841a8b1d35c8b91d4344bb1262a8b2fc513b7b20636b46708bfb347394cb5a257ce738c72aa4c53726a3c931777d1a02e68b49d18b2a81c89206847342f22c1330b883fecc1f8db292ebb51cb021329c38520a0a232ac1dde91552a64752a2a4246e877ee9a7028737e9f2bce4c7bb37f4848a14a5885aacabea49e6146ad9bc255e02b8f38375800912b23b2659f94a3935307f9932c0d8b1a9360b133b6528ed8732e48b44af7733f1416c98202a6aa127e6c8b110c879ca17039746b3832c9b916aa99e668a9b7ce78bc44b8000213e2ac5ba752fe3704d94b61fb0985510200b4f1a4bdb9aaed09704c9cbec39b09d468c5eed73a4947a48d57519be1afd4aabaa406542ec819acebc4b7d9b8b99133a6337c48ca1d2e5520089512b8daadbc3ba0de3941d1fa0e261bcd6f3825f29166852227f2283666019596941be6a807e39cc1dc23a7d472b56c71a2791a316ada15753a102911a32d843c51a2c6a8b947f65152b2941a5794548acb64e30961faf40e89d5354e658b858b1263911092c43d6ee8230512423d69ba49d865a1228402ab954b839c45bca4d83162ca083e910c05e88247809bb7aa7055ec8b7d4f996cd9ac59e2f982efb015d822c388eb4acc13870b9527ac70794f109fe58caa71817469b97debf66996c551284aa6a2505500927b3ad2595ca152f19825a90733b4f838019a754873a8bc15b160c5621759344fd31f96b4b648622f709c6541c09a4c949a34f82530f65b39285ab721ae74d83eb8ca5d12a01aa734bad0b15c2633addf7a92dc598adb817575926f9d021e4130b246e202bef3460ac7454a54cf66110ea87734f0c90f45374872950a3ec7b436c60c06b9bd25fb44d1f96b0383bf7736cd2f21b5f2306fbe88718b26cf45b31b32e8059fd87f17e70ecc74222642a54cc99a849012ccd818bc8006218b3deb12bbc92038735288195c5789fc932e0174f35b1975b611cb56a1eac5638492caf349abba8c526fb7280ef556c3b69ae2d15e9e108613466de9fb45d620b676f81c79598954e11091d2904a63749eb414987a2a44997d5ab40e7fd98d4ca276f892bfe4a35509fca06364444c7770a0c13570826c7ceb3f65b6b77637bf0d28a3a227bce187810386b40c0418b2e27a3ab183e8a28db4ea7ff8278c64a3164fcbc7df682ed98862aa965ff5d107b230b73e745339122b99897264ba067c186bfb95be4ce1435ecb23c1cbc67c181066e3c408da9a2ce36a32f1bbd3aa9a1476a6b477cf20196569ca9cc4202176926f2e6b76cbf4b4abb4b183847e068c585d7c65ada8c29dec27a32642647901a23c635f6751ae131c34815b362ca00618554c4a9d028a6aeb81c0014815ebfc7f7f7001edeb5890995a25b89332c466c39888b9b542d741954a27b5dfc72a65a0cd453b8ca9529701d49d3cf21922a7a365fa3f73778161534274b3244a31a192c6075f2562f04c6c819111fb1a099c114e07e813a472a802a0af3167c7d1a68583c57305099cf4e9a0a5c724eb2a318ce0582078090f35b856f773194245e6678b9e77160201cdf2fa8d4456671fc9bcca217a2625784e4052e2f339c544a5e589b24faca6e3c332891b2bbb5849c6ab2805a4b8d01199feb49250bb8d30380ac3651c7a07525556c9d925001568a73b804f0d1b0e9b9ca8453c9303669618f398b95ac2e304432256811b910ae2570009c5199a110ad8424f135b93d99c375243c37fd36100ab89b88b1997d3ab9eba0bb6b33a8774b07c33a589c236be155b2df1420e75a0962315eca254a1fb01ed63102fd62f249c79dd051addd531597cac00757014e01366b771d9e06e825082a4a310f8f72b7cf644e56c59f751affa55985e42447adc6775187170aa0093ba12e65b1b3a2aa5b3739cf2b09c3677184d6302141b8eb4985fde8a993782c256f0ce35dc5f973cc7b4987b29a333e38ac3131b63638003c600b5077b6b5b7b9a246a02f466621ed67d4d419c65ac1144054120439424f58d9f776a9a3a2596d10de267b20848c6245350e68b593ec7b49c877e5614be71a624fde99c0423216302b3106a29c85698f1b3a96895aa97c021c9b539fa66230ba8c35b068c5b2565f974b112140db6588be7016bc1b2082be9a0f5394544141643b75270752bfc6920c288468330ca4b3171a715756dcb467ba635f7d17753e0c1d3778114227d8678cf63f580adf5407e9353cbc546068207f83b4f16ac1df250a1f8d499fcc9471de920faf2a23e27055fec098f791ca19b094fd7aef23201041378cb51501ad0691a39870dbc8d6c9ca2d6003de995b2cef5957745c6d04194d067a2c1140d7c6aa3e271b4b95ca49ecb9bb94254e562905a0623cd670befa9c5fb971e2a69151d209fe4494ea753a926b4524b05793fe5c1b55036a44061d8d1668bf0094cb14004d3759f510703bcb22d730091370e09c1022141c3b35035c2a08921e7a23c5899ece95136936b68e839b021a97499bd30dcbb1341141698594225cf52740ba1b68ea20768d7a8cf3af91f7c1b1a49817c04f475014b0b6ae38a81f03260ac672c6c5a7bd2b8f07b3e5243028a0c15aee58ade16c2ac72985de1525bb34f99090d67097c11f3303b219fa68453fcc03ec6c84aab448d7c308d76253fd5078764769fde087b6c955c1399b54ae068de44c0a282a7772154b50177b56c6a6c10a317d292bdfb4d447045072857a0a67dc5b87599424705ca9d6dc18c88134ea1c746ead5018d00bad1eca2b84217b53743fb377765b674d30aca06c79ae5c2bd0cc06e4f8249d8e5acd3177747d65a8692a3db8b1ea49504de28b67fa1ca3c3bb1b1365fbbdb3d40d666ad72b286b221ddcc505388819c993652c72397fb158a175906546e1c212609dc7b00150987b408b479bba5d290e0130d4c98c33f543da186bc514ab453f13404619e841c634b4c5486c2ab80258ade6007c8895554e819b5e894b1b6933692b3eef79571b8b38493c3cebb915c6aa35c5cc543547400b81b6058a6450ac5a7a81e8adb26f9a8367da7bf8cd2496031016ac92fa7853708463911780fc536cd54f498f807a5d029a24bac5c1b300351367e09d1ce68e6af97406c74f5c7ff796f4ecc10227bcb4bbc27044c9c1e7404bc15985cfc2dc166088119989ee32789bcb95fd0103ad969fa164bb5cca5cd5c3e6fb65f989a118d6a2bed2b59121b5000f64fa9fbc723a1969b93ccb83b661ab1b25913bf2f6cb604e0218cec9c8eb2aff60c948864288ab6bf1aa1bc65b7894e1357173ab691630821d63b75380958ca91cc6a9785556e4b63b5920c0e3876646e6833e542a250399b16814236524f31a470ef05cfd2dc0e01ab2b4d5a9b70c4cc5832b72a632e2733829c9753ae5a928106267097bef54b47918aabfcf91c1a6b9ef3f1154f8a7f309babe4a75743409f7b155e6557807d6b428f720e0bf260c6bf3de22d70d55541a6240ba4023d046d7bf1c7158a3cbfb7b8bd2a552495311db5917a2234587c5969cc1ed10d51b0dcf8b3017143ebf31687930f3e2c610a4850\"\"\"),\n-                    xeh(\"\"\"\n-645008486a43ea6c461d7f98a471fd6227b43772ee680a0a0becaf2d2115b94b33ad85482d86bd3b2217f17b94bf38f229f4ebb984609a000a02eac5b2220aeffbb7c771672db10fb779f1823246961702d4e314c98f98b38055ca88090b51deeac33d4c899d57499863f9b1e02dfdc96750f923ce68fccdb9bc01631b3a5444fe45d6b6d347b4097f657a2e3bb7fbf48e9fa687291da77da8998d292776409912d8e44c6623a50be758c677404aabed063de84b4f96e641690dcc9184e6d1e13372eceea41873039bc8b7cc2aaf6eb00908967f8d6ed8a1e4aa087f3a81af329ced0eb5dbf8191994fcde14636c307992bc859cbef1f1807b8c1df4422f0a1863c4b47715149f466fecf32d4060c648d5bf90d3806e253df269d4c19be5e3b3455a7162c197f1ba307fa2969f5797a04ebe6412dec4ebaa507542f86eb2d28fc704bf5ac58965cfad57ac8f019de27f82c79cc2c232f0b3389917c3777722ddfa6801c14b3240e73c24a68a1d22e374241ecb8ebabde5c3c638f678227d34870facacd1696d011d2e387ee8fbf61f121a7cbebada4138c48309d8f0a9b0f5e0b71aba21c538e91f3f0dcb49ad2747ce9f9a99cd810d3a264e468082c000d4d3cf1136fe900e73eec013323ea8998fbef7d5ad3f62286571bc24f9b45f4c07a19037038045b5de6e69002f3c6361bf34fcde13ab18937ee0a7827ad14b705d6c6f4d2bd0a3aba60749f0f9212e64717d2a03cd0b1bc621202d91e46e44afc5db28559e2e37f13be40681694d5b431ec4430f4f737734c36d683f22b12240e727eae9f70955cb958b2dfb9e1b702040c1af17dd23db44bf71ea0f1a52313b3cc1c75036f668b7c19d7a9678fad74758b50942e85735b218491b85b1ed4d142d1a2081557f18753d6fb0d1807324fb4c7125b46b9bdaaeb414e302b347251a35fa6236e15fe1996cfc9827afc1d7a153c1f8a3f9a0ed306e5f3b2d0909f7316980572ca4cd2f304150c4150b5b14de007e9ec913a0ceb71c4dfe8d91d3fb211bce71aa501d469ef70649013650da608373f19753692418256879e6063c40a0d16139574ea818d49ae4d1174596bd33d71fb052fa08ce51483169974f8c298e5ec9fe87042927e899f22ce51ac22bded7a685dc8a1181a4f7b4a43c1df697577d73736306596ad7d475b484358251718dca8f3b4fb264ef960f14f0c25a2129c40aaa54bfe51018ba6df19024b7642641129b6b6d0486f8722803045fcf2447c0852e4476d93d3301da71b5f1ab1bb8b7e613d50e081198249bba6d8cc30cb70991163d3d4870285f949fbaa6152e356c0acf3212fce4d8524b97b1638938cc9cc63780b63766245402ba09f8f0fba311016dab14375d023178b42a7b59e72d7141a89c98f37cfb1e4868550d16c8c8fb3351ff6c12e5fcd8364330b8e0f049d8990bf2df53dc3b08d3db78f8d2885004a5e05a7ce25dd34ada644669937ce7b426a5f432c95fda3b004d453ea51806add6267f9cd1c1a645282dc5a069b9721166962004ada462a588c84f54d6bde421ed35d81b0ed6b864a9442876b5a71f4cb12d2c3af3e5523e08e1b2ac8a1bfd9174a708f106106384fd644beb561d6e4a544e14cec57c897af99ba7925c25bb256a092314c5081c156154d3a7bf4bf8209246919cbe90ca4471cd65b93d4ae28595aab093c788d4feac9844287dd1307775ed3a86a27febcdbde0581a4a90b53ac8f9d6e680727973b3ae8a2b3bfe261536a878c7ed9922a3daba30c826c6e2790c88c07dc7bc4e9e716bfe509c4b8b98330b9ad6952d542b8a512f7eeb6dfba79237262babd8226c64e76c8ae04783bc4b494ec5c8f82b30e2ca87147fa4c2b32beb2214d80de46add116748027533cc7fa4ad0448c3b482c80807514a4b1f9252798dc53b83fef7cf9561532435ae15dc19abc799f43729ac98a11c786556e3bfede9220a4966356815bb16f887bd462bab989527b02beb9f9e8a9fc548eb9022d187b66835df6b22edc93829306ff84977303505c3c13336c8d558651a5b2bd0e1653effff06bf7bfdf78f9abdecc6c66c232fb9ab6e8b7a89bfbfe55795c27fa596866d308ada3856adf93a9661cbdf61486e9c2b255e689de3cd28f327f059c353b30441197ed3f04bacb6a27710c231e2cd0e159642518a5a50df24f1191faa68c570abfa808616911e0058f7ac1d\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-19a1c59df3428e937d18d8571a5b12540a27073275dc343dd0c862a9e150f57b768a4059a3441716d0401e6a92499948ca2b84d2fc687b08a929476fd3905fb1a207dd357275b03307a2295ee619ed04acde08722da7a4dc86be267400b5f7103b6a613a067dfc406b311b42dd699acb022decdb3b6d37793275c945dac6387323d0b6a3d06044969770b2a7ab47165c983267f5d515d3758f6097a2e6a8405a4222b2f92cef4b0d28316c69ac4f4e275812e6caa1284dbfa490a1ba0bdd1b2b9cf9aa8641a34de7816690b3d4317d5c899ea95b61570139bddc86eb83863c0a88e59b3fcce28084c3b8decb9050a657c7e7637acb49d9ecb7542224f82a9938880744652f361a9b39ecc5bffa6193e79db43ab89b681a10d69e1ab26bf2ca7e665193da9c6a6a558654314f7bb8c8a555b133235f50965026c080725391c2e75870fb3ad5668e2274690b076cce04a657eb7bd763c40cc418dab5c278032a7d1225eee448fbb849e847096a58064cfab6f3830f7f286b2fcb0e82902a9a0b052fd49afd3134557510686123e7c5ac88605910b94131a61c39008c3181cecfb2679a187ae809c03f9a02c856709a24a4355c7f0dfc3465401c15332fa0a7073c05bc4a23b7666b83881556445caae0d2be25672fb6134385c41d4e187630b67a96e35658760d261a4ea71bb5485b4fdcf74c0e739258441f2f50a08762b13d965f4fd12252123901e4cbde1a2ad47601b1a685eed55efbc78bac0b06bf803e6dd585f11259ab3b4c17286c1502c47419979b37852ec2661cd827dc97629b4104a59ac162e24f0e4c1dda2923af8c624c0653e479a46fa80418bbb9f1f29ab0faa0135c57cbdc09e4955a4df04f540845012056951315c3854a16ba69ba092cd2b6016b74a3dfaa94d43767ef2050166b146ab1bf48d0a61bf39ace177d1f061732fc4341637f60317a0a736fff931618a0733ec8115a3b5c0bea4b8f8b47906988543164bf0a1135901a057691829234db396b2d543b78fb5eed054791d29d0514170fbb9acad0670a058dcf264c0525c13f883bc69960ccc6888a2a7796753297e33799ca223f54400634b8eabac16c70b9757b91a03046378a6295203af5d787fda68323b11311bb8720ea21130b9684a0510973bf27304dbb86818b3c8952865f34d6288f64b2525358c77a503f95b2dd599d86c02794d1cd5d40285e587ee4a7880ed515c031a6296b7d3cb92cf0a1519fc14657f7c1290bc2e7148502822fed447cb1078b40118f257554ff4304da892bda891baca5a47536796bc55856c48982e7b02a719837ea43242ac246f04d69e06692565f97596d35ca49633abc0cd941ce84aae080934d671760b41d7c93972a9854e81372c4c979e2f4332a19b19606743c61a5ca456cb4baae8f2bbd35161f44ca4ea58c5c3d7cc395933e6584582a8994d6470848a9c127bb35ba3323053678f7909a95ac06e87c52cfdb84c8ec97b244a51f47c3255bc80469c85660510c2093c15bb138e0ba93f3a816d22ec6680a61257ebffc8a5f1a7b78e36c8ad46d34708a4ac730ba61878a357fc0079eca75c0e1f225d878b852a3a0e3cc06f0b7c5b553547b133ec5f1a26cb85203a94e53a24b91b89fb3027da3a7788eb0751e45be61ab03c234117e20c30bd3b064aa6134b59c2d6cb6d347640d715c92056e901984ead919e93a3630700e60830583191449734305293cdab0b69c266eb0b9b6c742a342472335b29adba00225678dbb6a3383c57be74c2c0832c003f3125785b7720c3ecd804aea15173b19b9825b5d7ec6a63d4447398549639a86ab241d1d400a608730d771abeba84d6a8894440585cf16a02e856ef13a8197b343922b40986b9f3a2873ff29816a682ed6e9753f392c3ffba79a116382197d71e39ec79c7aa9da19cba825f527c9eef3272c0129b9f281a0c574aac0b938776e6adb3bdd88ab3fb1a4f0913a2e4c53e76a7c03294b97b1bcc4276254c5ba27c7acd53c212a118801450fcd160e11c41364a5803bdcb277452a5c5193d0114f0e9247fc3abaa98acd43c9784a7c5eb3a508162c602091271926a52b01951dc4a5862767c863c7af6397c5a2b8953b4aead8480d520f111b85938b4de50a6a5724354844b3ffc12b2b420287a6798220905b42bbf7fa109a95c24b6a71902c2e2d806d1d2baeb0c2068ef710a989211b64636cf58bcf43a3eac1119f809a26f02a216341f4b60b3c7516a1cc40572c6855bc29d006737ce64739268d0bc59718b9aa34a82fc9834fb05b27593a708ac4756c28342a148b2173b4cd023fad458b0ec6807f421401991dae15cbd8b01181294f95e0a64446710c41671ae3b298202fc44045541ba5be8516c8e52e743c503c9cbf69d6007fe79c61255872d312e1b9843300a6b436a96403bc33f6577bd4ade56bba41ebc964028ae6684c65e0c348c7ac445bc6b3021529676d5c40a3255930f2118d2343a866a6c5f11c3a1c85a790f25c5096c816166d2d08cacb3bc503d83ca9d1ced3aa0372a3235e06ce21f3a8ce609621c954bc383c97b49f23e2329ce9b092037e661b361f9bb13a285cd77c02cbb6cba1e37cae8a6264448e07401ada6896baa3189a527071e52dca12211135b6c360158fc60ec2b692c119042565172ae9c7c5e15e1b1a0952e772d61b57e66680b8359cd4726421930562562913c0c30ee486b023c8e36926bbb00f1fcb4e89600bf7d79905794487ca1dc5d69264fc56872588faa81a755b3227d2532ef54f8b0a91b8a6ae66cb55d34197b7c71e69c7bd39f8276e35117e96775b6c6501034f81267222f54a3f7b94e4a7a3e3ca04948b4f17300b92330d43a41b3de69702c2bfb9272eff89868551beebe890cd002a86d8566ae5cf47a4ceea731ec574684533796162ae9f206dad42272e8a7f7e7c97f93334cc833396324a8654480e5193a8e0918b48015de487df1590b0f7627cea9fab8c3bc1cc31c52a7ae3e7173a7a8c420c7090cb0cfbb0b419d53af678b5db9244dc8b8645f6c093f1b14ba5b65e4c0b8a875d4d86266aba296e648670867b7af5ab2392c4193b9f83052425362c5ce4a45dfc3e5d9960ad3b392ef6348fc7a164b494f75476b78c3f2557cb898a70af6280b7053823727e18a7130fc777b7e81cb8952f23b9b27dc02447bab51dbb9c0dea135db473906987c5ba76b0424848bca4e09864db2cad5e97adbd00629219abf8978dacfb8370f2ac6057477cc7829b6c452d242299c0b314855c5a5c61ee4557555795286c904d08aebfd17edd57195f831321ea02d68493cc994dc8370e219152f5245560875a88c3b919f9ca9a745ee8b942e1316a177a9471cc84984c31b59b8190a9207e4ac1ba253093e7585621878a3004d21851f349805bd70573580f9a98c97d6a2e790c0305316040f64533a6bfdce19d9ab8658ed26dc39837fddc2be9c66012eb76bac7b8f2c05361ca1ea7e0a77ec18187565f3c4b43a6397da9a16a1987ac8c700996124a10789ac7e0932fb820f4f18a9a7675257c7cd08249f4185a1c7ab357470e8a35c688a236b4191ade41bb9271a3798380d4a2a643e302a53396fa8976d5b2096724ce85ca4cb36ba8f7bb470f534fb496a7104675a0367b05f090f4748145ca680a489fdf719612d52e610352462605c1a43d39945adbc42338424146c0707cb28b986888468b85f5347c8ccb6456dc442903baaee62f4bc1b56fb27dbb50c96d9b359894a823b812afeba2ba39b8af7227b8b58580a2603111a6fa511ba7e1c7ac4a037eb53a8caaa31eb551339212048865f4a5c8aa207ad8688c1e0626fee782fb6c0b97f5463d8830747b3eff7136a1a7a83d3c5cf5b32bc42b6bf06b4616055ba6b53fdf365b2c6209fc5239ad269263bc9458bcc2bf45cca868b4eda432d35a0caf361d9145a4200bc9a770b5571095eb18cdcdc407390099d43194fe096df8133a22753b7749c7b51c11b4b7a59427590f71091c969ea619601d494c91cacc34133e0cf75d1d34235a45b6977aa39847a01e1a5fe4e2c2a509a986249c482443cfa8cf3ff9358541757a776efbd7148383ac98289b4d68a579ac3fff02adbe7236e6d06c8416be80445de82619b065436468b0535906ecac1f563b5daa78b89c6ba5d4283b06795b4f88022be4b1b11ac075e8b571fc7af7d91f13334dc18a317ab4794ed69946c45a615c19209302cadc2f50c767840b397a9934bbc74d3d990a13e656d8a1347d4a46c6676402d563a0e860df9a5f0a911a7193be4b162428e0cb68b66b35146de6b2a57871bad3b166bf4a605bf3633912c31d0cb2e100c00ec9501d0be84468dabaf76fa2356a58155898e69a3c0e7d683cbecf451f22d5fbfe5c268257c663f42d4b0855590a07919c4363de5890b4d5b3df022c3c86b725c5f2b54196b7d68684b9fde93be78e38beaeef18195321f4e2\"\"\"),\n-                    xeh(\"\"\"\n-f1c15b3bf410c7218777a21f73ea71a361f62f85b7c47b2fc9c6f3c197cde8d13933da55d11496e10946e0e8a4dd59ec816afb6b28222cadb9f4a50591a4c3a9a8c8c4fe5819e1803f7190861d624757322be0fa7c8ce617d581136a4f939e0a5f4f1707fe493bf47a4b099f073fe10021f3690332f9cf77939e955a38f84271f4b260d90dc9195288d932e41edda41694b7772fc1f61bd5bb93ea9fe413b676b737dec76d94193982cd5fbcdc8986b107046755f1936b283768638b16a4dc16daa7f6c0b05fd11da8040cd0a25058fea49c576f6336a456584b0b5d9a38971d0e686b12a901c7daac4e2faa85160832582732b044f9360a8754c2d0a1dd5871b3d5048a3cd6e8eb5cef0739f1f6dadb83d3e65dcd3462b29c12abb026f5cc762466c25016129d0b92e0c10afbc70ddc6fcf33f434091798cd2ffabb10b8923dbcf890eba3faff2b2ec8e1dbf170c58768f8e37559e228660408be1ed5a93d7328a2ab1f48f9387056c5a51ee52f34178e2212bc85caa9312f50513878dbcb2ebb9e4479a8e9ac2abc42591c98e1b35ad5dd24da6d8c6c2fc0d7b964385f5b9596f6c76f5f681974ef8e5363f58cbf507fda58ceea9e3dced21dc95c75ba63c459b23cfb66bed7890c0b0aa078d77c7180ff9101d5762628e8140071ce861da0359db6b349c14a5399002486f54a77a6ccbaa01c1fef5c172e0737d19f9f68e7d20ec7ac9d211d81cae09a0a2f7086a4a8952e81dfc0c2ada2c9ee06d47421602fa9009bd221e02e33ccc0c47f670b5e05973236f3e74e768a0a84d890bbf908e835aa1644b418dd228bc3a9b06afc0e292f9d71fbfd5955b2765ce90df64ba9baac0cb5d5802b919cc0955c20bbbfdd624d5f6e0b0db3bdc01fc1dad5baa6482b71c247cc103f08db1064ca5144276b8062f31ad4e8adeb6543f85074a7aea53cfe360f71cdae05b99ab8d5acbb9312fd136920ca09a654d962e5623b7ffed22ee0773f3e4814bb232b112736b9a9fc66ba6e00b898a8b9258d2823022766c595ca5183be62be21c27b5abb0808eb0978d0541a66c294646ffea3ac2a480e8f9d3f0c58eee4d0bebd002c435d1f8802b854d953c3e9242495805ac0874d74837febffa135af5916702cbdec1d7b6f60880f85d6482302ef8c2fcdaea831d70e821055be0b5db3ec0797fcee74f652bcfb559416586bf09960662c408cadb7c41d36ce7ce803b9c9fc5ddb2d7274867eac6ae12ac08cd318735f2645c752c02dd74f2eb45293ef165d2bddfde7e5d235ca7480139554fe134577a430a5644a9704cb162cccff0550e738d79f8d01ac56edf07ce9561afa24294c7ea61f6e90ca071df601e83288acfb0bf69be559a2e788f7c18f25138584739dee13a307135d60df207ac6784f201826de1c7d48467cbeb721e711c7edae6443471f862b2867a8af1687aa2afde61a8c7d8431b2080b2a119b5d5c43e6743d1ada10027870d4ca0803646cfcb0712c692a6ea22a94b7fb5a455b6fb121c0afe8c176c8db060e200be7f59f9c075327a6f2e1e1b3a06df1684956a60332e86282872b18013898e004fe6dda04ecdd243fd45552cb2a705682f049383284ff382d6c68673987d6e880f0ede4c85b6f01ba89fee8b1fc2e9e091289438221079edaadca58b845da049475fff9dc5283f7db3c34c5816b87f83804f2acca031e06463cba06f97fbdba8e4d17040807b380ef7e87712f1124b43570b8f36be0818ffa1ae107964befe8f0568ee037d185cc6f6df9abb0f8547be4205d0778441ae56983272f4051165c9710c7bc2dce963717b3a9487a02bba79042ba5f255430202520134ca0f5276be9580174760b3aa4a7befc6efdac17f9d70f420a4c9106db961af42853c07c92f4ff6dc65a19b75228e34c43d70a44b61f6897fd6ad59817c919293af8c51b869666ce236e018edb3703452ce0c021aa1007d68fc575046eedb9e43c14e1d6202d0fb49cb40e7f6d78a062ec8cfe12e8936c928a8bf501c2362b62fd7a7d313c1343806736931d5dafff16471dfb637285286db906e3747ec089e29b0b4e15e3ef7a1ddce3996ecf7e7f834afbb004e59ec0fa83d6a0862b2838feb896cd83b5c4dc69077ec8641e9d5406aa683c68de2ee59ee254419b3a38719b40637349b6adf63a28a0b3893d661ff2589b5365e8ec9059081783cf3b4fa5abfb4d48be\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-fcc4a70fd4395ea9728287b502e92bf9d77d3da38e0685858de5cbc8f286530cca0c683d13328aea540b77d41b806627139592d2672323c0b94be3cb9320454e334c4ffb6a12e12e63a96d1273cc8d4a6359263e91963ad472aa8cf2a96b3a62a079835535444541ca9e434348f3c6ed4a981ed70c59c33c27f25be9e407e6e7cb52a0274f1b7403f3bd3dc32de1f807b3317e7b5ca5e3864ea4739be575605f023273b17e2b9135f5b13bd09a00fec6283e0a744b784cf4595060c657abd8ab38270979606f7c0b1ee85b5cf1b2696db43e5eb21ac523bba172bab8223917508018d85b4afa10435bcdbd6405b9ac64f423adca6b7b9326adb5110809f12daea8270e48419d463c7bc264ed5b208880b8a515422ec9319b245f1331ae9ef80f46da776b4c83dc351622ec349b0b2e7be0c101b36c8bdca3573087d0960e7837579d451be25101cd45313b6b24c3630e18bc88407a75a16cacdf1664d19b56d9593fd2bc7bacd1cad8d96ad29c7c4d29c898220ec610479fe984da083863062b57b83b1a2b97c6789429a87b575365995223470c4d43c401cf27a910c31464f200b362434a8492b8126b965689b722c663342bee757f23112092a3486181047296328772b3a02b398d617cc69ba5bd252bb1879a7fe48ce8d47404f3414c79935c109e22d18790c9c07f606de7b69bca824ccba0a111059faaa36363052f811ac12fec42062820d88c4ccc787410d884d8e06812eb3fe676860ab0b069ac312ed332eae3059320956385ad2d502e11510cffec2fcf514180d46caff1044878ab667a56aba86be9e93957d929a15950fbf2a1333665a4525e6f592b1f9ba45df02843aa2541e233437522ad16383b991e0093c87c061df7127bca8275ab0234ee9bbf4986447c72cd65d657422a2b095c0703265bd129a019ea398152ba09ab9665e62163d862fc334c60d09894eb106be946fbd08f726a4fe01203ac34b560a1218543460d687c3b64929352456c65c55f52828677b99b412d07e250a969800ea7b5ec3053c99ab169cc913387933e29b52138a57214c99bb87be8c4ccf3337398c6cf3cd5c37df09bef147fcbc71829da53021c8b7ff04bace1c24b862e1b233b52985d11370842a89f9f33829c534f62828dcd91304966b045499c43046e822997d34105e1b31b49613682215a17ba2284d162b77996aee868ff3b25a7d5c5a740bc79771592f83570e682fedaab2528c3c427a04ac109576634e2846c1f43bbeb4226105713470b9b2556cd65b7c178f918d47b4307126578a81d02d99feaa5065bc0b492b4a9d08783af447827075b83890c6630619d9cc97daaae2bf91f7f021040858c99404dc6dc2e3c7a18a9345bc3308662f78032fa3a0328400a84982e86bb1cb08359f7455929863515343731c42c8a58ea3b0a5abc23cd7a8e8e029807fac289e3b9fa1a54e0f652b371c5e20839e84c9faf0685b4053b4e54741a916b76d398c76a26d572ccf2a4c83546c4ed8a6b88458db9523e65f676eaa1a74f731f74758c86a82662987fec79b287e02444dbc4a032a18c1ba4bd5a8c45dbac2f58a379649992056172c986361c0ea21935782756c4d00aeab17ac6ca938b063a27c00a4aea7e7e307145138fb68a697be49bb026a8b5c31700026d1026475ac98672554b0d8b2e9eec61ab891cb4911c19381b053b4a49b8559aac9791575c3b71154997ae5a65770e1b28ea601c2ed76a72974fea67a2e7f610442b749f8b3dbc725ba2528602978b05cc846ea634f625807b15a9100a1b743b6daef06d37479f9ce65accfb1de08c3d432a6403f06ebd423e6e357821150f448c6078d565068c8b343a2a5c609cad649945934bff443f19442e3eba04ed1227dc112e4ae670e2e20777f89c124cb3716a4465e84f0b86a78fa68ed83ab67841a76aa9b909f5a242d7c0ad499c81f5811ba94ee3a5c44d8818a0808522544f540106c89884da8890c6fb3b03887a62aa218537a18240789ed98acf313108884eefa00017fa4eab371d94e5410b118b095b2489448c55f45b511906d0c4caa9aa4ae20861ee3586a2da74e5098a50d543f1d16db01577f1525f649074adcacfb6283c69b41a73ca1ed97412c2002ee54192e34b71f95b0603d1858cf808b55584625ba1d4f6ab585b2b11fc091bb28a92ab2a5d061a3e4890ba687cf532201369883ff26ffaa019319b6914b8a2d76091aecb59e37a0916e5380f2143cb34176b6310771703be07305869bab8d98fd0532847446fa156446f2ab465499f7aa81f450b09df23ce66d0c0e6b82579425748da4a4cb1a13f711791300d21c0bf8a5191f3a0817ed4519931150e3161bc1b076383056db994a3775a27b61c0cec0e5c3584295b01e9855a188a184f78baff6a4ecbc5cc1b0227a5f12498d0b90ecc450d5a278d74807af78b3ae94bae64a3baec0c6b109a57800297918bf949b69c5c905f944ec8cb7e84865d67382c6e3546bb4c891da34eed09028bb3677ba624a9d5c967e94b65e24b380719517712c12aad85672f20c77b19e477490a411389b5ef63429b15a1a8d680b0082d586955cd67163ea7a7c8c26e661c52eaba8503b14b168c8c79fb7e73109b135c7ef5790afe65853509196b099aabe81a525a0d6b6b3cb2d5400a916416688d8f960d1607c777db22b3b2954cdb9e3932432e24805f02aebf672e8e6640d949221d3570d901acd9863566f439f5a4525367337b718536623b23c16950dc59c4eb9c00b76e0d11a942fa4e531a6152ababe6e54c101433b5b41c038907a548c69b1111aec34d64e084863c950c4903493b768b831a4acc04059083d6e7a25bd71b68dc1d10309f4edb246b7576acc70838034bc0e050ab40808a298ac7571d6a392bfbe57ce2570f18f35a109ac32fb9cb7e5a1da9748cfacc022b15abcdc469e79319bce47262012334478f301c1c42583ce84116a251a0e4d8aa38366561a22552eab180b1634442138a1c370d23a6acd393cdac517f59acedea7e620b4458b03585410d3edc5264f9375ceb6df9f870c8d7393dd0c2394882179c991933b8e474a85ccc6338124604727bab826553927d86541a4da61fea2581c5d15cb70b740e7b38b1787d0ea7acb6843fda6c5dff60ced980b80775501120c46f78cbc49a4ec63a98d324a9a177bbdd74ba0ee0108187ac0e245cfc7420a9294019573453763cd4b9c1bea9366d8cc7c996853c5c172f9b0d667caee2395b7a7c7fa036be9ce7b59b96663d260b69940a2a83624a62623e8906352939338c724a038337a59f59392f759c516cc417478cb7fd8c92ce868127e156ad4abcc714328ce67e2082cf2805c3df4b5be17b29a2446fbe26a50a54afbfc47bfa27855563b64e3846e934311f515f20c68860012c43195e6a45684eda2de3f9af70549d3f41c0b17519b02a7d29b076e49a3f80554c8bd7cfdf12a42d9b511c4ba187845b5b725b1a384febb470e3063312e9a05e846fe28b155dd00253a3afb9c2143ebb0683b03457c937efb1158fa93130058213176cd7888598e457d33cc6a600c2fd465b3629cfe84bc51cb3aa8bc4111626bb57858c00ab7b8b13c729a052bc222b06745b5181bf1c58341d239db92378a83b20a7e1299d407295fb94beb2c111f07c57401e522149f9c2b0a6d369b6f829b09970b660aa3dd6b0792b21797716de834286d662a3b03c38cc9ff1aa982dacc0d6892cf01492dfc506e7c37ecb8b82603c7d65843cd011172033203e294e6920b2007631f377cd003d8b9a4421614cc20e126d07f05205d0c1883910d9172aac4864ff7b7a8b1a1f5a8c773427aaea747db3191d312b4f4a82b7d9b4ba69313e6b7cb310507d03f47f8186a15d49030df21c144b639a7721357aa2fce77149507a7c5430d9611d0e7a5c93e54593314f3749ab0025603417173b13bfd7f32c6f854238e2675a948130ea2213a749da0c18001791f31755ccd829d76c5c62eb58554277f262427506cb17143557c919443922a09c1b735943c1a411e9db8a6b5c0dfc73a06d49c86e5b5fb03677f234bc97a2931af2ac804c0a9d721ac2468058a037e53346175981c879be43400a1c0760ec3096a56c0b2f11c9b97a87bf388058424faba04abf8b4d7f5069a4f26b14e39917b7858465761fd802c7c8cc2ce11cbdd04a519bbed86261f3b3b3b07174c26008b4d71311a951e0584100ea7d97881da990ca3cbc1d9f596a798cb0b1f79353413871e5a4f093b4825a47833a99994848af3378849b089b3843c7b153e4dc10896b4a6aa9848c17cfd3e0a0c491b90587cd2611908fa04bda829f0b494b045f938e08a7bcf1212fd194fac918ead125d88e6c4463a046899d659644d8f67504e278e1ecc03c50e807ee0dfa346aedb596d90d0dbaf82f24d69702e666f4086d18d3da173a6d0b44bbebfac8edad421aab72b823fc63d600\"\"\"),\n-                    xeh(\"\"\"\n-683607bb0aaaefc605290b064fb9b57f641f6303e7f36b8af42a63985f1c3b202fb40733ef308bc517dace0777b0c5ca164a8a1adac8dc44a320a4d81f924cea669ac48fb2d8ed8fd357e86e8c1c8dbd1fd3087f5287d24a78dbb9dfaac25abde3144d7c5f686afb07d4e407007363d2bd1e5477df4a49c4f6334a687f8a16964df2bc6e368de4b979d7491bc070292335dcbe09af01a54a759679f019d97b73eebba8aac0e8d10efe4855b54d5a74afbc70650ebb26370ae701c7647e4d5efb29697e31be934f4713bcfaa7969d9aac9bb021e73d5894819379bd03f05e8a724049a3e66fd5a0daea65448778121c41dda31d8dc805674bb44538970b2348858b2a0e323a1801d16eef04d97b4cdc8736b645fa242d333ebfb0b61c279d0efc19fb7f928e63c36a1c05746a3d29ec7d7abf8f3f5d3dc394bdda5708ad7757d79c29a40569e79791612a3cfa514b05b355051d7fddf24a0bde67e76dbd0884ceb3226fb61d48219f032909f979365cd2d33452dabac242fa9474bcd86d41738a1e23b373e85f1eaa6470c9ad08e84f212c71d49381bc6f29e813882cc5ed33148a40f9044f5b713460c21896c4ec5fc5edb5eb19da83212e01469f560d468817b5d4fd4af0665d2a47aa2faa618dc43abea75d0051a087b4ac513d8327e5a747a8c8ca0c6baa5cd6e8f0179bca470764795f42c48b5027e9506685c030c1ed45a197b566eb658fc1d3cbf27f585ac28f70fe942e2074403ebcf5d06065c6ba22b16e11bc2fef932c32ff316c95989054926ca812967e0447980a24ed6496e3930ec307de1785a72feb21664ed88bac3993f5e0845f53514963409e5ea751757b2c91b8d797fb7e2be34ba545ffcfc2191ea909265f2f056383b8f974096fb60eb01535718e60af1db55a8ac8cf8d2b753e9366521bc78cf6e9857391dde51021c7eab027e05999f570a68c851b8bbf3fa1e9ad605c07f9287506d456f2e8f25c8d391c3d6db6b12a8a306a1e642ebbb1a6ac481a5f844ac4aa3bf797b784e8d21d105fbaf699b342d37bf713e06384fe473a46f2eca96b09a64e3a05b46b24d0c795cbf2dad7e5ea935d414d162a8b74a3c47447a4c39bbce215fe864547dc4f647e0a8f29cbc6d29a2319ac497dbdda3a7b1b9f6154edb773cea671c353fe76ca6f4a5e160e01a2c82e2d5788628d17c077be6bd131c07a2011b5d40bd8caf784f456960de5d757cce1f0fd7cd3e1e1bbe08f00e20b4bbbb8b09c717036009b749bb8881938c3e0c49eed2949a93d3025e350a2aa2b2ba1cc55a60c13e63f614eb2e7861ea1afb2ca493ab36a6fa62ba85c7b737b061a465d8a719a16c68471c66fad823652b676d8a86350bfe4798f948dd794156d0461552b2e9726e3dc01ccbf1d805249c0eb46af62c2456109b57bbd75289062251b760ed80f1d5ffbb8a2b93923bda87bf5619fb8025c4128e7b3a4e4c2c5643b149fa9b1d0a4c06b7575f893d5f144104d313c47fe8e4275c4cd9caff44e0f234f970834f168bc7dd9a82f173d2a65c3f4ddbb1058ce70b37af74c7ee763d4398c777c38e111770de22bf654f44de171c6a49b405400b280e639f66b6376bf3b18dd9818302cad3d22fc2911246d89b82dca8a155790d3da8a6b12d65b3158494c8a84deeffccf53bba29d9fb83a62fd0666fcec097a75aaa7f6aca01a909b2f0865ad37652c90e339207bcd6a1ac7c7676fa26c7cd809cb4d1606172d40d2508ec259050ac3cf23210c6f977c52d121a5a1b4c26c597f8e6ba7fdaf9d4d83a2f605b1548bf58ba62c8e57f6e93629d01c3dc8420cfc5b2f8c5c193edfcdd3e3cb696aefbe19de337176994c6a7c4926d4579f9bb228b28f1b5ce23def5c67232d79023b91ac2a6f46fb6eeb47894c2b7cc46c8c14e3b3800a20760724004e20b9d5e17dba258528572bd2ba5013fda9ad0c5368d38252327fbd1340f0475382cd4cbb608605deebc5df36483a37e71a7544eb4bf861641b1704eb976fbeceeb295bb955e11cafa9b781eaa8dee2eaa9cec3643088d6e15b7dda593550f1197a1d08fc1084c30465a95701fb59b39aba26252131c2725788eae129c553789112108c433dc5cce3a5067ccf7802acf4c98b2951bf3e41f24abb2d840295fda825b1cea22248a71950411389ead7e2d55282d90491d9669519f4c0a8955826cc1351de731b2c4a8d2bd8\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-dcfa84201ba9bf3915847c6755f8868b513fb5abc116920451f113e2c481d599129c1439e36bb5f0470e44f09a581c46cfb63d935ccfbdb26da9977ed53c6c56717805caca6056b007db45c261932b62a7d0c09ad99317b5ec82d7c61b2d3b13f0480d65abc07376a2552c21317a4426e868925829bdb661cae4ad4dd111f8080f05018f7dd976725941d5aac3ae00c9e0f15681e8bfa3db983a29390c108059d2696c3118c3a4ca0d970c5c603bad8c109563b58e0a1291868e2283447017938a3acd4442008f7b13536c75b3353918469933588602ba5b856aab04e2a7735786f5bc0f30a616369cb405c35250644ec9687488c781179b42dc9801793b80af048ee1e9488b7c755a985b27b55b71761cb5c101692362c1dcc1f86b147e1c708df38acf9179248551927a49dd0a333237b0705b0311a632acb5990b674ef55427bf64c86ed90089c5b6ccb12dea12565979c6492a0ac8106cef2b432ba6654c65c9fb40913727ba261c82aedcce19369d479aac4c403f45584fa71a238207a332b8b9b7685ded0661844911bb4a052678810ab6c879279e3442cf92f26b1041cc2f6c30c1f1b8c394271f19309c26270d9bc59d81628998575788ca4fd59a09a54c1c78cfc4260e1b149c9c7a00953029fd62064f74cc56765ef9c01596692b12b144d20b97ae050c7a2b51aa16a1a037939e91a8253acf29218b1a760dca0ba5143bc59154bbb86c36bf161794966f42c8b50a4a51f9b6939970c16a846fc728aa8d6064e9e8a57ce5647288cba6339eaacba7d1e56073aa17b629344dd87799e28e97245d92235abccbbe490a55b0f02b4c95642dfa0c674118031c457027cf37435c586918e5480cc20542af3a47adc66f216b5f2fb29d63d874967814f85738e76b7a2fb04bfbfb3ade632d4aba4b435102f4b07def648351bab8c329c957eb7d423964ee61cc8245c963ca666331c10c1ca922a4595d962647271c34753434b06ac9bb2e0a3c84b89604e90b24fd366d65616be48b953a657fde9a87e0e0a59e770194644af2018a3cec7a3cf902261538ba8b6f96545112331b335926dbc1b9d89007c2ca32f21955a739995db6a7ec2300fea40317905eec95ad690592d8c8c2d4012703b0c99c571c9ed859e9a040787c00a1b055ef8cb5ab7a15b10064d550b27e076752ea8fea36496afb6951827d2ec90e07875fe0bbb2e1ac4498619272705db8232423473e90d9a61e23ac5aba208b984fc5f5779052a7f14a39106cc718c9178fe2159c824e59045b4246c9309318456735f1434c6c78c41ba09d04833a37540afc77a55bb39e6450aa65c3305160a18e7c84f095b2a34699a8303cdcf75394032e0e8474268602f56a8ce12026f4d73d4d02bdbf1699acc65ff289cd45b0c3e958ad85327869385b58c9a19a1a119755480c0a72f12c6587bc00ed8a9c0224773a0a892053722a58509e746422f6a3f21a5d6c199c583c302ef2a07096b90f10821ee036cd26b45445afce6c12ff935615ba1c77921457f119645021f880806969533e06a044695feb4857e94016010b4b7724849303c48ba2ba64e17d2738cac6711fe79b049c740869993d8b158295f42fa2a37f808022e698764b476d81aaa63971586f84a5ebcb0b578caf2f6a80dd384050cba2663c90b9a713fce515d7058494d5a82a160750f5825e5a907b1c523131a6494bc03954886c10c520fccf48e97f90f04346f7c3890338dc30688d93a350db4bf9a31244ba7d4ed1510a381f13180856a188036526f7c10bafb11284e87656f736a9764a67b963db67ba284cc13b734a6eb1a9094c2a5d342c2e504d87781f87c8320f21057dd21f884186c014ced432242d618b09c4237bf50b720a97b2d86934213bf5d044d25673c26068150228b19219f4f6a6de8729d10c04a7055d7bd3a5b3716f702c6db5f8c93b1536739535e8c83da1d03eb01c514b330592656a81077fc64b9682a5877006b5d7464867ec27c7238e0ee7761c8183a6fc468098917a620161ca01ad34c54da2bf82ac01bf32c14589b188cb338b7294527a34c971826111a6160793fab4772e264779f29ee2bbc6cf822dcdd5cc0b76c8c2fa8234724856f89108e79bd23a1a2ba163d1c988ff98c4980842126889b92681c523358d22adbbf41352fb8040963385438d80125b7b78a7bb42515971c90c01323d9b3e75697ee3729f7521301d11518b92154436843987531887631819167405c36c35bc3be88d957053237bcbe1fc59fde76f1fb1c0bb4ab166ba098e6c4b58d26ba606589c568601c507a6fb149e30a9ddf126a4491812813ed0ac12854b3bde1b683cd23c588082066303931941aa5856bb94a0c932c85f9b9a4796b9152172647221d3e611b94b667e0985bac481f69ca20fa04dd57c42adb71ddb51933ff36dff38bb580b9bb0a666e80372c8e2b8c29a711f484d11c1ce58025c17d053196b50ed28342fba9b24b8093b7c286a4c1712346cf886454868ba79d53fa445733af9582113c85408c2e8473a3bc358af200cdeea56e44086e1179ed300204dd6b39815616dda5923dbbacff091970a57166b0ab5f1b25e1c1d2cc495151b97dd1aa87903204cd3b3b19830ff010d4df31ac3c7623ab64d951c9fd502ba14f4c884661d65d249c33b2f8d225c81f99f3bd88fc5a71f40722849b6b838c754a11a3b8bc8673cf900dc92b6f4f66b139c76a420abb5a2be9592ae1f3045a8da088871b45ab66610b64b163b38f641beee8a9a8f13a30996c262b2b9231241b34b5abef4830dfa922ed98a75f61cdd59666e3c728cbc8a6132a343a458beeb0702fc962439b2afe7b971ec62aa593cbe874b8a8c923f963060d1ad64bb6ad1dac893cc3ab5188e7943cf184b7b18ab26133ba4109a57207147f5e25e15302da5e82069aa721f77557c39c760d28cf37715f7a943de605193e29a6a94ae821675eb2b3f08ec4d7f0a99c5e71cb01292b327c107b61e6bf99066d74a9c8b47e99a05d8f2b9a1a5b12723c101220c57b509a42c5b28e853dd75251185661b61499ef978bd1ab9b92864ce013ce2123515ca5aad6b108660b4ff1492bb124f5bfaac592107c2678c5f04c2b658bd31cccb7a09028f48a245e638e8bcad19bbb2dfb6ba3bc10c487359b3b0421eaacdbe033b6d7a8d5d2311bcec5148226d4dec2061265c25b0746af8c63cf99f687a04c237739d648de7919cdb59973ba35d85187d20212ea537cecdd9c68de59345fa0dedd31ac6b21a7053adee561851b7be01770e07daaf903c2738dc835cccb05f5a931e2c4d2541a8328983d26b20de5bca159973bc01301d0541a8e311ef7046ee9b51a0f67d5202d0ea8c8217226a622b32b684066f2a000ae22cb1e29b47176e7973b3e9d4c18f22919a89a6573147129a43998886e8d95c804c15a01084f3d81d7f0288cfb34276536389344ed7c09eb47b9d20300abfea2a0b2878090819477a640e39cb7aa1643d4a59bc6488494a0ec3073dad9706b752c30b123fff3a1e66a8b575587e3b119d83e1b833893056b696ed49a399d11278f23f456b5192fa324fc4222dd247acb005dd50c918893819545f59b8b5550bd0a3d97ec24a5c22d4b8fb12290ce4cc96528893f772dce5c52dc0114f19c6ed026928f1092349475a020739aba5f5a45b8843157a76945dc84e7284572395345e695090b37edd895b22870b39ec07b36867b5dacff5392bede2680d74cc2272713be24ed37a22e33c36a84ca9643a46c68112a9d12aeaf67bc3160080113bea680d9b1bcfdf75be1c18c9f2e44781b18b59a090be8aa957c366a4b24a33b9b6d055674593470f37caf456b367fba266f34160d4cea1605d6140be110a93b2a57e06dc811b67572510549889002ae53dbdcc758fa1aa2e4bce4d6ba0dbd09ff3f736ce630c7b454096d6415ea32b797404f598c4b02a3dd6c98332b7440735a71124178a0622194993b442c5596bca2caaac46d77f6713a547980399c18e5685cd9dc879194cab66b99de4e2888952808b15c1bab5b712ab3e0c781b209162818cb3985b77f4e915e86779ecc5b2096104f512cbf1162b9aeba6a3546397e608d23861fa3aa5847a4cbea7229f5338ac4161b9765d74b175a4e95a68a6cebfd6ce796214163ac5b314c0deb2a3463b1f7e56b6ada724a2827f60647a92ea4f33d36d7683402fb12543f73a2804abd00371073306f06aab9705819091c9afab226514bed5c46f8c3c8046787602501d9d4561582164baf07497d09beaf06cb2a49627663e04cabf05e5bd55f9c0f75ca0a93678ffe69d7f8034b4f0898ce5ca9a26f52b3bae41398ef444b73decfdace24a6d62657cfe717bfbb904ea4bde70180c895d3559ae762a856ae7a8fb57e1ea35ba8d4386aac7d50bee0032580858865f638c38f0852d2d712a708ffbd7d96f0df21071d8bfec74c2302ea4c5adba\"\"\"),\n-                    xeh(\"\"\"\n-744266fc2795dae658efa879de343d6831d4d4d778afb0f064fda23d22d976434ad41868ba11ac4e73588ff2398b2985150eed716b430f34daff5d1f7365d3f28777e2cba704d43963e2a906a197af491e192d8308401b5cbe38a6b48053a62308e54593935665e78e70636146fb726096e90c796e88c0462827cfee8462b9e6e0762b061aa685261aa38bb6364ca84e14e07c81d0d02cc65a14e49683095573e628d54938bfb4997381461a3801306a2fcffcfc54cb834a98efd328fb516d04c6f8334b839a7f0fcf340874cd94060cd926c24a201e98901890c4fcdf8e55c8a485e245a37a618ca074097dffd436b1caa2b900538a8b35096a9fda5c98ed5031bb25d8ba86f5285a003a7aad4470bdf7dceafbdb46450020723bcbe8a44babd45faaf3ab416acdcf0564c0b513203c8b3bdae283145063b8de3bb045e2595d2e72eb324fa2c4ee7d7bf5685684dbd69ab1ff5aa2a91f22a9177c053e5a9b30aaf7334425fa01f223b8dd846435615dd7434053397cf0b9e4ad650365b847298672b80950a9cb89b4258a10b9e44248f2d06a6921c7b87441f72caa127e741958fbe42565770eae9b2198370c2d422e7c3baffa8fc1139d2da25e3693648da40dfb8f18eeb84c70276c198a31a0ad3372285d50aad40d7355985c574694abd8452231ad2b862545bb3a620e477ec23dd592ab6ab2e91d1ad0b185f8c918484a4b44b2351d8292f00a025c23f758fec9be75398e83df275f52b8be0d9dacf3d2aa57e0055e67cfa0f872d60bab9b6c3904906547d5a610e7b0f1be8f6d081b608edd81ec0b0c6c45f625c9da548a4a1a119f3d9b2793112a4d7f77c9c7ae4ae7e48678a1e536658ef5584bcf8a7ae9f9af9629f697fcc932d365c7d238834c633a703c5b29e9a8e4fbe1ec1c42ff5ecbb9eaaa70903c92b9f66dc6660eeff2b4e8a563d5b39cb355e8df23b017eb7d38e422288c11e4a03803b0ed6526148b25c847968f554ede044c91ee8bdb9a1717fa253e65f2e5387eb19e84a6ccc5929e1366b4bf1e1af72a60ed2e674e54d256da46772b474dc8858967edbaf79c6780a839b2a20e44a02f06d1981b03229af586ed809da1b34d154e2ca64a1460f3d14bad117c39438922fb300398cb9a17dc266ccfde46da47f4dcc6cf54ed01374d3d16284eec4f5ceffad0ddd92b4b7cc0cabe0992b076e1f06ad2d746917ec8c0915c73121a57217a425dbb672de08414c22a38753d6a0738f9609bd15f26be584290829650025e2bd61a121dce852ed9ba96ef487b1cfe28d682e01e375753059a78e6dfdc3f9a703c02e8ce4565cc9cc3086ce2f0a692b4a791c622f73a8dac791440a1dd625f64f7ee8af1e4a9cd8aca89bb697d0295c40489be97453e46e1648998aea2bc2a53c053b6f89e33c9dbee8d5ee607b3d9b212322c5d6c1573612179964f316131b0a1f3cc7f107a03ace199b1033b64b6a36b456f17028a53699b729a663ca99e30c72d35dd277509adb62646647c2e4f2b4d31a7ae3e83b9d82ab3c0785ece85c765a2a1473af5bac7cffb1a790c73161221b45acc0b1dac261959b1e2ae2a18dc4bab57ac5e793c4d58661ef836fdcde7d8a187345cdb357e5cc9d32fa16a194873fe32a03fa31c8c194f7b63cd9640398518a1b12ca69ec6ef28c4a1547883277a94ffba92416aab83b240b034ea3597c8dab9fc0859f8c5fcef50eb00705a5b21a015939a9319929729bc43b43f36032b17781cc062b46b23a1533c981e4bbefa2ab32a81b30a4ff5655070f765af27022b4a7352189e52ba9e7e7a2c1f5eb1d5238814677802356a8f7ca849402430bc2a5e6c7323a9a2b23401876f4c5e4cfe56214fd667622a2b5e1eb054552fe10fb96788be387a68564e1516d9be5b99a76cd0431f65cdf85de40a45491d5b25071efbafc7c385902b913105b9ae0ef20c67006d72dacd4097df75e5d378fc174099079cd126729e6981c0f9a82314debdd86bf5041eae98aeb754999db6e426dc8e3a6fc5b17cede84d4b1b65ac1ef519a325dc5abe2f4ccb32b5cbfe457c7441b156f39dd4181743a4378361681fbbd186479b7e958472fcef7a0f6ab47afc8a858a5fc2e5c64d55a916c9484978b5e747cf885bfc9d2426443e38cd3cf13d57bd18e0d0c5478a86e20b1db35856388c4963fa1586175765cc8293fe5379cc7193d19e97e6bd34\"\"\")\n-            ),\n-            new DecapsulateTestCase(\n-                    xeh(\"\"\"\n-c58540ef1a9e5dc496f0a413f8001e0731abc1b169a1f0ab030564ce03bb10d75a621bb8410b2a6186c6ca081944463aeeba6a45494fe1f1c9db2c48cf089cfb928d3de1cc6d02556ac7607af731cce7cceb00627e9a55a85c6eaa430dcdc068d79a8bcc8b4820f61cdc7214c64caae4a096d71390b95ca1bf243f4b3598b800a38804ac2ba7c2484b0a9d2790c3b91df06a40f5eccd52a36dd524b1a2831e915643063103961a01192a1fafa56c48e90828c359944857226a62f93b053bf550d5247077643171100b01309a3d344995b85fd1238fb14a73f2f03b4e201cd736c4f73c5ff3206c6c89a878178d4010a94963c025f090f2d32db71252a06acc88d7657d1a811b5052240ace860a217597a29d5041868a6bc5b278f0b04726414383807617b81bf7623186e44ef0695b97291827e0bc9fd92acb014714e151162a7b4e1ba04d5221bda5b2faf2ab4657853daa21f2b726f54a9bc35ba271d917a2bc1ec357957c094dbc683f03a5710344bba6242fc678809cc71d9a2a76a2a64bb0b8c5f66212a5a35c5e309b61c264cdf418bc27635d7751771cc875318c9f1b0df70073019a89a6e124c349a279f431f14b431ff11b0cb17ec3eab1a2a4a5bac45415825c4ec76016ca5f25581c89083f43a863c08092a8849d45f512be71870be0c25416be17c02e20e75cd519a3c43a419a3ab6d0c55752702612e298489559effc83f244510c987b247009b7d74e43fa56ee0179e5949a050b2a961c6a74819451058f1a624e9dcb47bee04411cc3bef260efd21acc3485d99d87f48a04512e9642eb37ab5d21cdbb21cfbb15df320cf887a9befc60a366a331e3b3be06a96ce46cf0fe559a6205677c62e30b964c53b669ac82a1e900c13364552c50c9da3a8355a0bfb97ac13695dfea28abec17016d381ccfa785e070a2f5568d1fabae0b6128d820cee749300bc482988b735e10a6629408f4242796925fe5a64d2d47b46db6e7c078c294aa6b0f87271a80f2b4015967564f30378768553f290b3df99a0c7008e99f1c026f7796ffbbd43b092c009821b58cbdee8670a1894f47192b4587429d3a99efa95bc176af901558db0280e0c62fea04474ac084ee960fb6604327b391c2ab2fce53eb5345966d8bdda98a107a210cde574b91012ea51b5860bb86c136b2389cb0565ba0e29871ba1b8b733755a3aae23e330a2a3b98af8204537aaae670fbb087e38767961641718c469eb7ab99616c402c8abc8544c47f733374661eaf0b6025084b2407fd4680a1fb57b17681d65ea7bab457eb2858e41fb9863646f30c2aca073b894f4723f727ff2b52c59e33987c4508696caac603f37dc854c3c6c98da6b69e5b20f917537a7ac2f37bc941303d9b4c38662174ea7c4af651d751684fdaa12cc6b6e0deabbbcb868165a28584410dcc33db62b446d23917a503daa2b633dda7eea324926c773140355a0571cb24117ec433aa1f2425d90081c45a47dba89106ba82d1060661a681b26c899766b13a000e6d9c0fcb588ceea0cdcd703b9600adf105819608cf4b81bc8c8c14ad38ec3b0b7def92f67f5adcfea5dd85a058a87151573075fc5916dba1208724202316ea14104570aba447339280c5d6a580137378390ec4439251f93326c423c1b84c4abefb78ccfc0783856b3793c23ee401da23c5eaed04302395b672316719429d8b66b7b33198792af7257b3d8ab9077d13a055c40fcd1874b8a8aa8201dfb76a396b534a1b2aef9824107f04a81dbb87984433b4c8e1e7799e2f7c8a284b02780704ca3218333894c1571c96671e2e0195d3a01aab22739c8917409c794072c83ec90ca1a78b7b1c6ccf48340dac772f46c33c524dd6a58e9e281249111fa772b1781cbeb1653876122f0146448d81c63f1279510a7ec528f78328605a21a7f8a0844d30b96a118c775832cb6b281cc3e965924cc4c6847651d3dfb434f100b509c0c3d66537d47219a77ba9922a15e5c97550bd0fe561b9109bbf89c555c4637daabc2a9620fac81ab69dab4de54529a957b8f0184c790403a379793704135b357cd8155517254255c254c982dcab7a05647ad73e1184e1aba78fa5c8ee24ef5183e873105a89c54b085c7f8404278697f212678fd3948d423707f957880b54611d04e05965db36a6f80ebac6014cff91b17321b0fa32c4d1eccc3dec3707cd34c7bc63e62d2b57ec0314b659dff4263c0f2c5fae2a37a84b0dd415275b3452894904ef146f5728a76a56c9447988767390a693ff7e91fa6e36f3e5a5b42b97f1205704218379231169340c416f4737e06364b935186e79a6bc0912938ac1ef818d57878ee872af70c7f31e8a5da0746ff4137e8f9b6bd7b4b32b47e12660b239c77115c72741c74b8dab0fcd07180c35e0adcbd2d58b726e3775d288a6312aa158620022b623bb29e141c33e0532e5dfa67da9476f49a6f4e6b001597a54371be84d70d04340c2f403db373a1afb102780b5050c841d98b10af489a39f8c2e473c23f202f05a20dfc4844cf1126c562cc9610a98b0a2d5407169db917969b1aa5c314ccc96290d2c27743b1efdc410802c78543ae40686cff6b3dca439e243c867d70bb957086abb6a91b49c7a39bc2dd107f65c7bba534c1216857d2b1a7ee99ca0556b3405b25da0a0941f403d0e34677e49d1ca84f267bc86ff0154614ce5b3526aec88f95285c316175e15b4fb92bb3d2a99d70a0259ed295eb87b90b5b2f5e2a757692262866c70a9cb8d843490e563594344e05a4051b3155fb8817ed53431d5c0318146cc31b0c524b6410d53aa0612a51f1c763941c4cd42628f212c04cae54b6ca05a5afdab8ba54f5666a13396006afe7005f612180002d1005795c468cca3d778938e187b00bc29220266047b22df76b18040160a48e6378c99fc5afa4020fb2b135ca913c78c73363d93d10677bd6764a27221ef2a2600f5b867b52c375cca78846880ac448f1086ff678220b7a238675b740c21bfec76559d573a6a84190c750cb502d9c7663d50987876b607f548ef76b764d03b704781d3b324ed2d7c1ad285a3e1ab1e5d6c7ff49495825b1b41a5ac2f524bf27c2e875aab1023c5f058f1a7881c3e60ab9fb56d15562b6fcb8c8c04a272c8ee6c807baf6227330071e6c49c8c805b89b6acb2025b13c08fd9916cf40191b9520409a6cfbac821fe8951c027f84a11dce4c54db98be7427b724331c64169aec4304cd71128448473f599eeb8239b1463cbd43c0836755170c19b3108dbe42bcc290cf23619a303230f9b0982c3b7307734e940807245bc097649d2eb9ae2b0695fb56b16cf90eecec1a50c5157d48098a063b53158855c9a1f1db9ea92b7bdc2488bdd28c095ac4e3374311c2754cc56dc8e511a5bb4cd486cce605527d594ec1dc1356b9bc938c0488b6b6d53243f2443223ba200b0c32c6f49322545ffa8a2b1bab914a72918a658b6a053d91249fe0c20360116eb3090015c161d4480d492bc7644762a48b3f6b558eb1f9b34cc39398cb266be91c414a3ba790c9c92129e5d40ddbd3150a5c002f763484546519c3a2ed327192bcc80f4710e8690a8d30a36059b12df6c107d1a73d9bc57796ba08fa01fc0c2a4f8b7a63074786729e0596615ff4b7c957959ffb1c5537508b191507e16d33d1bee9eb2148618bc8b279f0e92072b8c037565251992e87db4c0de8775d151ad13b2c375a46688518e5a2c409e32b9f314e3b177d72a908f3fa0010c87724aa2a94ba6a2728824719c6a1b0a2e07c7a364a0a62cc2730966ccdc96eed27341f77389a854fd12b9aefc0aa4c59a8aba457c57222e7065be09b593dea82279c8f67971a46878bf557b8dc095a9a0241d3b64ebe02137ab14eecd7410bc70efd3c08c1d6220f597eeabcaeb4a7b129ca73fd96872077577e44c804bb55d02607234961816b85944913dd83c5c835b1c0cc94f871a29073b8912973dd430246f84780d51ab9e163cfec5bc3472e02377bc9a2760ef5529568a4497c556e9a5f71526396aacc3e86158ea4189906b8ac277a90e383e298c8a1b98623cc909f18c894daa83338bc3f3b57152cc472889ba297a533d0554a3186229a8514c9c4826725249c61e4411963329eb99a37a4337e24c2257e5354ec5c2e4cd85bdea15c4e16cffcc628dad7c3ed9066287b587cbab64f0ab3aceb69494a333d240074c989cde4932d291f8edb065577985f68421d312e429a15cb21b31576c8d0b470c2177cf7369d45ac839c5c191acb40e62a115364c8875883ac507e5dc90a6cdbc6a540b396b422e488bc7d25c8287b79efc32085758d593b33882f218e758a3186d9cf309538fc57b81edc3ad0d228aeef39b32aef07a4054c55a1b8e412d907ce76b043fc9b10de7a9d3005a20d9c70d011dbad1e53a7637a741a60c9f1715c42a5a9e67b4e69e5f128372002a6c4f54ae5869500171e2541\"\"\"),\n-                    xeh(\"\"\"\n-0ddcfac2dca44756fc1b11c740a2d9f197a04eb49fb236e8a72761c343e2cf6c0a15ece304fbceba5619f1eebf2ec4285dca695fdf201ec2e89ff040a0983603abc1ca303ffd8ffea696953ecba82d866e9299cf793de3be15122de05aad7f939c382305d89c25dfe2f056f788c7911d44926d15b80052249e76de754d408cd05f5a8e067a38ce8d37174a7b90c393d1f72cad0834a97659b08917d07c363fe2efbd2fe95b1f717b7283aa8963bb3bfc22d2de515494882d9e1b76ef5d29ac625e2f0c0f67be70fc406302c0002ca7ba7cfbe08c308a11a6543df01235697fd05f94feb7c9f9f7bca1fc216214bb4e96f4e9f265cc2b4f411a4393607c39b6e6113a354b3c3b93090d13824c05813c8b4b353f5accac0062d9927a3dc3ded66c35567bf0b21fa0933af66369beed10f17c08f1bf96dd65da973608ce1ceff65a8e6e6b65f7f335b9593752bc4bac179b8d6594a93cdcfedb26c010769d75744d4c8e422dde126c698df3d791b51ec526cd2e4e58a0d6727e0df79db80c876ca598d5e3ae73313b91764bae84e76556883e6f4f82206f367b041e5b53753316cc54dccb87189bda18a31e76b6c1579a90fa2d54bb901c82257b608ed3b79eadb9aa2cc6a96e107cfed0fd1cf906cef7abc6519bb674f5a0eabfd10efa47cbd6c13b21185085ea8efa498732e1a19c1d3fa85856f4f4704f65a920889cf96a7b52fefc3e2d926c5eeb9139ac247a8c0b73667e3b0e438da939ffe8bbf849c112aead11d8354d04201d34319f4c65c3e4a1125b018a22e2e246c1aba3943dbf5db4797b97daf73451a6067a669941c06d19531ad8b74d523e2bc7ee512cc9bb749ad4d2ed87357d0dba42098b5533d95419aa18ac3965b87ef2b41dcec80e9661a10ff077a098cb55a604d1f9059c8260b6b1a388d8ca3a83288cb956d2ebb0a5076132fefad9c8eba00eeed61a8a8b7d59bc342f56f6df694b5d85dc28ef87da73e8d5e9a29af336cb5996c9b1485c93a1f8a1a3cfcd17842d17635a15fc5b63cca2ad560824210aaa27ad7bb8aa3e16cad96be489fdc43d8245cfc3fa439d4b473992dbd1d3b913282756e2c60ee2fb125663f5837c4e12da4232ea51b75710da1436fce145ff43637f166b3227c1ed590d2bca27bf14a028940c81de99487a6b501a9106255eb81ee939ce7f9e2bbd6be754aad73bc287ad27430625e171bc3239575353f3782be69cf21d829c0ddafb8bd96614aaa1f9fd5ba1b0429e379d32cb76119da0b3f9fd76dc1b92b25057fa695be31fa5fdb50464d6ba4a71d6726be84382b84bbf63f538b5a2cc9d91eb449841afb18ab8279b4eb9e80155cf1eaa11a2d4a421d880c85d037995cb9303a3f5d071a226ca55031334fc1c4a1f2be30f7a4268441a987cee3233651e988abd40e3b1306f492cf412a207d644fb66243efbac5eaa2e6ac045283889888a59ad47bde45a7262c0b9470d427ae8aab1a1c589653bfc20c17dbe7e6306ef97c0f6c925f1a38b146cde1f6216deeba31ffd5cf6276e82a5c69f5c6e4b69899505e03a528f23483d0bf414ac0031fc329cb9971b33ce94bd2dcdf42b88a084725a98eb9565bc90f34fde114514d5b81f7916294745b42c2c81b8cfede599200ecf50c2a8f369713cf2a3ab69e8c8a1f0c967112500790e905d958457a04e046bae97b5f14ef782eeebd4454a4a4114ed46debc56e4c3d4beccda4a9e5ed3127a9e53f2906e3755e4a75ad6c387aba579a19493a089b0e75c7bbf906f73fc017272e3f739b6ddd46e027ada7b86b91ebdd70a5ebfdec11d1ef9434d305be66e2a6889028382e39536405137dee759636f437f5a2da8bc5f883ffeacc1d8ff9bde31010906add2a5d06bfae7c9921cba9e67725c17870998257afc64409481f562a04d4f3acac8d6b65d6c7db7422792207ae376e6b6a5f80d417c4cf08ac90a0518b8d852a8f4e6c6cc28c975e0080d911d24b06cb05952035f7ce53cf1a14c7079b52bfdca9bae9accd71175031cc28d359d89067ebc2ff1b5d6ee6249e64a42227599f54f36a278a73bb416f5d136cd370b77b432b57c7ed9b69f34d5e14b2f0f8b008e0ef5d9afab188a532a5b63ded634e8821adcae833ef5c5ebbb166bf0d0db45612f6bb5fc498b9478f903e305479c878cd8bef22c248336cb457601d5129d818e9a06074577c9c151087aacaa1f24\"\"\")\n-            )\n-    };\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/MLKEMBench.java","additions":0,"deletions":835,"binary":false,"changes":835,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-package org.openjdk.bench.java.security;\n+package org.openjdk.bench.javax.crypto.full;\n@@ -29,1 +29,0 @@\n-import org.openjdk.jmh.annotations.Level;\n@@ -38,0 +37,1 @@\n+import sun.security.util.RawKeySpec;\n@@ -39,6 +39,0 @@\n-import java.io.IOException;\n-import java.util.HexFormat;\n-import java.security.ProviderException;\n-import java.security.PublicKey;\n-import java.security.Security;\n-import java.security.Provider;\n@@ -46,0 +40,1 @@\n+import java.security.Security;\n@@ -47,0 +42,1 @@\n+import java.util.HexFormat;\n@@ -49,2 +45,0 @@\n-import sun.security.util.RawKeySpec;\n-\n@@ -54,5 +48,7 @@\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(value = 3, jvmArgs = {\"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\"})\n+@Warmup(iterations = 3, time = 3)\n+@Measurement(iterations = 8, time = 2)\n+@Fork(value = 5, jvmArgs = {\"-XX:+AlwaysPreTouch\", \"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\"})\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.Throughput)\n+public class HSSBench {\n@@ -60,1 +56,2 @@\n-public class HSS {\n+    @Param({\"HSS\/LMS\"})\n+    private String algorithm;  \/\/ do not change. Added for visibility\n@@ -77,1 +74,1 @@\n-    public static void verify(Signature v, byte[] pk, byte[] msg, byte[] sig)\n+    public static void verify(Signature v, byte[] msg, byte[] sig)\n@@ -85,12 +82,2 @@\n-    @State(Scope.Benchmark)\n-    public static class test01 {\n-        byte[] pk;\n-        byte[] msg;\n-        byte[] sig;\n-\n-        @Param({\"Test 1\"})\n-        private String test;\n-\n-        @Setup\n-        public void setup() throws Exception {\n-            pk = decode(\"\"\"\n+    public static class TestData01 {\n+        static final byte[] pk = decode(\"\"\"\n@@ -103,1 +90,1 @@\n-            msg = decode(\"\"\"\n+        static final byte[] msg = decode(\"\"\"\n@@ -108,1 +95,1 @@\n-            sig = decode(\"\"\"\n+        static final byte[] sig = decode(\"\"\"\n@@ -201,1 +188,0 @@\n-        }\n@@ -204,12 +190,2 @@\n-    @State(Scope.Benchmark)\n-    public static class test02 {\n-        byte[] pk;\n-        byte[] msg;\n-        byte[] sig;\n-\n-        @Param({\"Test 2\"})\n-        private String test;\n-\n-        @Setup\n-        public void setup() throws Exception {\n-            pk = decode(\"\"\"\n+    public static class TestData02 {\n+        static final byte[] pk = decode(\"\"\"\n@@ -222,1 +198,1 @@\n-            msg = decode(\"\"\"\n+        static final byte[] msg = decode(\"\"\"\n@@ -227,1 +203,1 @@\n-            sig = decode(\"\"\"\n+        static final byte[] sig = decode(\"\"\"\n@@ -358,1 +334,0 @@\n-        }\n@@ -362,1 +337,1 @@\n-    public static class verifier01 {\n+    public static class Verifier01 {\n@@ -366,2 +341,2 @@\n-        public void setup(test01 test) throws Exception {\n-            v = getVerifier(test.pk);\n+        public void setup() throws Exception {\n+            v = getVerifier(TestData01.pk);\n@@ -371,1 +346,1 @@\n-    public static class verifier02 {\n+    public static class Verifier02 {\n@@ -375,2 +350,2 @@\n-        public void setup(test02 test) throws Exception {\n-            v = getVerifier(test.pk);\n+        public void setup() throws Exception {\n+            v = getVerifier(TestData02.pk);\n@@ -381,2 +356,2 @@\n-    public void verify01(test01 test, verifier01 v) throws Exception {\n-        HSS.verify(v.v, test.pk, test.msg, test.sig);\n+    public void verify01(Verifier01 v) throws Exception {\n+        verify(v.v, TestData01.msg, TestData01.sig);\n@@ -385,2 +360,2 @@\n-    public void verify02(test02 test, verifier02 v) throws Exception {\n-        HSS.verify(v.v, test.pk, test.msg, test.sig);\n+    public void verify02(Verifier02 v) throws Exception {\n+        verify(v.v, TestData02.msg, TestData02.sig);\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/HSSBench.java","additions":32,"deletions":57,"binary":false,"changes":89,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/HSS.java","status":"renamed"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.full;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import javax.crypto.DecapsulateException;\n+import javax.crypto.KEM;\n+import java.security.InvalidKeyException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+\n+public class KEMBench extends CryptoBase {\n+\n+    public static final int SET_SIZE = 128;\n+\n+    @Param({\"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\" })\n+    private String algorithm;\n+\n+    private KeyPair[] keys;\n+    private byte[][] messages;\n+\n+    private KEM kem;\n+\n+    @Setup\n+    public void setup() throws NoSuchAlgorithmException, InvalidKeyException {\n+        kem = (prov == null) ? KEM.getInstance(algorithm) : KEM.getInstance(algorithm, prov);\n+        KeyPairGenerator generator = (prov == null) ? KeyPairGenerator.getInstance(algorithm) : KeyPairGenerator.getInstance(algorithm, prov);\n+        keys = new KeyPair[SET_SIZE];\n+        for (int i = 0; i < keys.length; i++) {\n+            keys[i] = generator.generateKeyPair();\n+        }\n+        messages = new byte[SET_SIZE][];\n+        for (int i = 0; i < messages.length; i++) {\n+            KEM.Encapsulator enc = kem.newEncapsulator(keys[i].getPublic());\n+            KEM.Encapsulated encap = enc.encapsulate();\n+            messages[i] = encap.encapsulation();\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(SET_SIZE)\n+    public void encapsulate(Blackhole bh) throws InvalidKeyException {\n+        for (KeyPair kp : keys) {\n+            bh.consume(kem.newEncapsulator(kp.getPublic()).encapsulate().encapsulation());\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(SET_SIZE)\n+    public void decapsulate(Blackhole bh) throws InvalidKeyException, DecapsulateException {\n+        for (int i = 0; i < messages.length; i++) {\n+            bh.consume(kem.newDecapsulator(keys[i].getPrivate()).decapsulate(messages[i]));\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/KEMBench.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-        generator.initialize(keyLength);\n+        if (keyLength > 0) { \/\/ not all key pair generators allow the use of key length\n+            generator.initialize(keyLength);\n+        }\n@@ -100,0 +102,19 @@\n+\n+    public static class MLDSA extends KeyPairGeneratorBench {\n+\n+        @Param({\"ML-DSA-44\", \"ML-DSA-65\", \"ML-DSA-87\" })\n+        private String algorithm;\n+\n+        @Param({\"0\"}) \/\/ ML-DSA key length is not supported\n+        private int keyLength;\n+    }\n+\n+    public static class MLKEM extends KeyPairGeneratorBench {\n+\n+        @Param({\"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\" })\n+        private String algorithm;\n+\n+        @Param({\"0\"}) \/\/ ML-KEM key length is not supported\n+        private int keyLength;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/KeyPairGeneratorBench.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,3 @@\n-        kpg.initialize(keyLength);\n+        if (keyLength > 0) { \/\/ not all key pair generators allow the use of key length\n+            kpg.initialize(keyLength);\n+        }\n@@ -139,0 +141,9 @@\n+    public static class MLDSA extends SignatureBench {\n+\n+        @Param({\"ML-DSA-44\", \"ML-DSA-65\", \"ML-DSA-87\" })\n+        private String algorithm;\n+\n+        @Param({\"0\"}) \/\/ ML-DSA key length is not supported\n+        private int keyLength;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/SignatureBench.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.small;\n+\n+public class HSSBench extends org.openjdk.bench.javax.crypto.full.HSSBench {\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/HSSBench.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.small;\n+\n+import org.openjdk.jmh.annotations.Param;\n+\n+public class KEMBench extends org.openjdk.bench.javax.crypto.full.KEMBench {\n+\n+    @Param({\"ML-KEM-768\"})\n+    private String algorithm;\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/KEMBench.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,18 @@\n+    public static class MLDSA extends KeyPairGeneratorBench {\n+\n+        @Param({\"ML-DSA-65\"})\n+        private String algorithm;\n+\n+        @Param({\"0\"}) \/\/ ML_DSA key length is not supported\n+        private int keyLength;\n+    }\n+\n+    public static class MLKEM extends KeyPairGeneratorBench {\n+\n+        @Param({\"ML-KEM-768\"})\n+        private String algorithm;\n+\n+        @Param({\"0\"}) \/\/ ML-KEM key length is not supported\n+        private int keyLength;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/KeyPairGeneratorBench.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,13 @@\n+    public static class MLDSA extends SignatureBench {\n+\n+        @Param({\"ML-DSA-65\" })\n+        private String algorithm;\n+\n+        @Param({\"1024\"})\n+        int dataSize;\n+\n+        @Param({\"0\"}) \/\/ ML-DSA key length is not supported\n+        private int keyLength;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/small\/SignatureBench.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Group;\n+import org.openjdk.jmh.annotations.GroupThreads;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 8, time = 4)\n+@Measurement(iterations = 6, time = 3)\n+public class DMBCheck {\n+\n+  \/\/ The allocations of DoubleDMB$A and DoubleDMB$C\n+  \/\/ will cause aarch64 dmb barrier instructions.\n+  \/\/ The different latency of the dmb ish\/ishst\/ishld modes\n+  \/\/ may make a noticeable difference in the benchmark results.\n+  \/\/ These modes may be set by cpu defaults or XX options.\n+\n+  class A {\n+\n+    final String b = new String(\"Hi there\");\n+  }\n+\n+  class C {\n+\n+    private A a;\n+\n+    public A getA() {\n+      if (a == null) {\n+        a = new A();\n+      }\n+      return a;\n+    }\n+  }\n+\n+  static C c = null;\n+\n+  @Setup\n+  public void setup() {\n+    c = new C();\n+  }\n+\n+  @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+  void action(Blackhole b) throws Exception {\n+    c = new C();\n+\n+    if (c.getA().b == null) {\n+      throw new Exception(\"a should not be null\");\n+    }\n+    b.consume(c);\n+  }\n+\n+  @Benchmark\n+  @Fork(value = 1, jvmArgs = {\n+    \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+AlwaysMergeDMB\", \"-XX:+IgnoreUnrecognizedVMOptions\"})\n+  public void plusAlwaysMergeDMB(Blackhole b) throws Exception {\n+\n+    action(b);\n+  }\n+\n+  @Benchmark\n+  @Fork(value = 1, jvmArgs = {\n+    \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-AlwaysMergeDMB\", \"-XX:+IgnoreUnrecognizedVMOptions\"})\n+  public void minusAlwaysMergeDMB(Blackhole b) throws Exception {\n+\n+    action(b);\n+  }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/DMBCheck.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}