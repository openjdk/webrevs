{"files":[{"patch":"@@ -119,1 +119,1 @@\n-  \/\/ TODO 8325106 Re-enable\n+  \/\/ TODO 8328675 Re-enable\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -583,8 +583,11 @@\n-     InlineTypeNode* receiver = peek()->as_InlineType();\n-     \/\/ TODO 8325106 re-enable the assert\n-     \/\/assert(receiver->is_larval(), \"must be larval\");\n-     InlineTypeNode* clone = receiver->clone()->as_InlineType();\n-     clone->set_is_larval(false);\n-     replace_in_map(receiver, _gvn.transform(clone));\n-     \/\/ TODO 8325106 do we need a barrier here to prevent the initializing stores to flow below?\n-   }\n+    InlineTypeNode* receiver = peek()->as_InlineType();\n+    \/\/ TODO 8325106 re-enable the assert\n+    \/\/assert(receiver->is_larval(), \"must be larval\");\n+    InlineTypeNode* clone = receiver->clone()->as_InlineType();\n+    clone->set_is_larval(false);\n+    replace_in_map(receiver, _gvn.transform(clone));\n+    \/\/ Do not let stores that initialize this buffer be reordered with a subsequent\n+    \/\/ store that would make this buffer accessible by other threads.\n+    \/\/ TODO 8325106 MemBarRelease vs. MemBarStoreStore\n+    insert_mem_bar(Op_MemBarRelease);\n+  }\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -590,1 +590,1 @@\n-      \/\/ TODO 8325106 isn't a MembarRelease sufficient here?\n+      \/\/ TODO 8325106 MemBarRelease vs. MemBarStoreStore\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,0 +125,4 @@\n+runtime\/cds\/appcds\/HelloInlineClassTest.java 8328683 generic-all\n+runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java 8328683 generic-all\n+runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java 8328683 generic-all\n+runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java 8328683 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-    @IR(failOn = {IRNode.ALLOC_OF, \"Integer\"})\n+    \/\/ TODO 8328675 Re-enable\n+    \/\/ @IR(failOn = {IRNode.ALLOC_OF, \"Integer\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestOptimizeUnstableIf.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-\n@@ -42,1 +39,1 @@\n- *                   -XX:CompileCommand=dontinline,*TestValueConstruction::<init> -Xbatch\n+ *                   -XX:CompileCommand=dontinline,*MyValue*::<init> -Xbatch\n@@ -57,1 +54,1 @@\n- *                   -XX:CompileCommand=dontinline,*TestValueConstruction::<init> -Xbatch\n+ *                   -XX:CompileCommand=dontinline,*MyValue*::<init> -Xbatch\n@@ -67,1 +64,1 @@\n-\/\/ TODO 8325106 Add -XX:+DeoptimizeALot and tests with constructor invocations from constructor\n+\/\/ TODO 8325106 Add -XX:+DeoptimizeALot\n@@ -93,2 +90,29 @@\n-    public static int test1(int i) {\n-        MyValue1 val = new MyValue1(i);\n+    static value class MyValue3 extends MyAbstract {\n+        int x;\n+\n+        public MyValue3(int x) {\n+          this.x = x;\n+          \/\/ TODO 8325106 enable\n+          \/\/  this(x, 0);\n+          \/\/  helper1(this, x, y); \/\/ 'this' escapes through argument\n+          \/\/  helper2(x, y); \/\/ 'this' escapes through receiver\n+        }\n+\n+        public MyValue3(int x, int unused) {\n+            this.x = x;\n+          \/\/  super();\n+          \/\/  helper1(this, x, y); \/\/ 'this' escapes through argument\n+          \/\/  helper2(x, y); \/\/ 'this' escapes through receiver\n+        }\n+\n+        public static void helper1(MyValue3 obj, int x) {\n+            Asserts.assertEQ(obj.x, x);\n+        };\n+\n+        public void helper2(int x) {\n+            Asserts.assertEQ(this.x, x);\n+        };\n+    }\n+\n+    public static int test1(int x) {\n+        MyValue1 val = new MyValue1(x);\n@@ -98,2 +122,2 @@\n-    public static MyValue1 helper1(int i) {\n-        return new MyValue1(i);\n+    public static MyValue1 helper1(int x) {\n+        return new MyValue1(x);\n@@ -102,2 +126,2 @@\n-    public static Object test2(int i) {\n-        return helper1(i);\n+    public static Object test2(int x) {\n+        return helper1(x);\n@@ -114,3 +138,3 @@\n-    public static MyValue1 test4(int i) {\n-        MyValue1 v = new MyValue1(i);\n-        v = new MyValue1(i);\n+    public static MyValue1 test4(int x) {\n+        MyValue1 v = new MyValue1(x);\n+        v = new MyValue1(x);\n@@ -120,2 +144,2 @@\n-    public static int test5(int i) {\n-        MyValue2 val = new MyValue2(i);\n+    public static int test5(int x) {\n+        MyValue2 val = new MyValue2(x);\n@@ -125,2 +149,2 @@\n-    public static MyValue2 helper2(int i) {\n-        return new MyValue2(i);\n+    public static MyValue2 helper2(int x) {\n+        return new MyValue2(x);\n@@ -129,2 +153,2 @@\n-    public static Object test6(int i) {\n-        return helper2(i);\n+    public static Object test6(int x) {\n+        return helper2(x);\n@@ -141,3 +165,30 @@\n-    public static MyValue2 test8(int i) {\n-        MyValue2 v = new MyValue2(i);\n-        v = new MyValue2(i);\n+    public static MyValue2 test8(int x) {\n+        MyValue2 v = new MyValue2(x);\n+        v = new MyValue2(x);\n+        return v;\n+    }\n+\n+    public static int test9(int x) {\n+        MyValue3 val = new MyValue3(x);\n+        return val.x;\n+    }\n+\n+    public static MyValue3 helper3(int x) {\n+        return new MyValue3(x);\n+    }\n+\n+    public static Object test10(int x) {\n+        return helper3(x);\n+    }\n+\n+    public static Object test11(int limit) {\n+        MyValue3 res = null;\n+        for (int i = 0; i <= 10; ++i) {\n+            res = new MyValue3(i);\n+        }\n+        return res;\n+    }\n+\n+    public static MyValue3 test12(int x) {\n+        MyValue3 v = new MyValue3(x);\n+        v = new MyValue3(x);\n@@ -148,3 +199,3 @@\n-        for (int i = 0; i < 50_000; ++i) {\n-            Asserts.assertEQ(test1(i),i);\n-            Asserts.assertEQ(test2(i), new MyValue1(i));\n+        for (int x = 0; x < 50_000; ++x) {\n+            Asserts.assertEQ(test1(x),x);\n+            Asserts.assertEQ(test2(x), new MyValue1(x));\n@@ -152,3 +203,3 @@\n-            Asserts.assertEQ(test4(i), new MyValue1(i));\n-            Asserts.assertEQ(test5(i), i);\n-            Asserts.assertEQ(test6(i), new MyValue2(i));\n+            Asserts.assertEQ(test4(x), new MyValue1(x));\n+            Asserts.assertEQ(test5(x), x);\n+            Asserts.assertEQ(test6(x), new MyValue2(x));\n@@ -156,1 +207,5 @@\n-            Asserts.assertEQ(test8(i), new MyValue2(i));\n+            Asserts.assertEQ(test8(x), new MyValue2(x));\n+            Asserts.assertEQ(test9(x), x);\n+            Asserts.assertEQ(test10(x), new MyValue3(x));\n+            Asserts.assertEQ(test11(10), new MyValue3(10));\n+            Asserts.assertEQ(test12(x), new MyValue3(x));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueConstruction.java","additions":86,"deletions":31,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -32,1 +33,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses HelloInlineClassTest\n+ * @run main\/othervm -XX:+EnableValhalla HelloInlineClassTest\n@@ -47,1 +48,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\", \"-XX:+EnableValhalla\",\n@@ -51,1 +52,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\", \"-XX:+EnableValhalla\",\n@@ -57,1 +58,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\", \"-XX:+EnableValhalla\",\n@@ -62,1 +63,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\", \"-XX:+EnableValhalla\",\n@@ -70,1 +71,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\", \"-XX:+EnableValhalla\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/HelloInlineClassTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @enablePreview\n@@ -54,1 +55,1 @@\n-                    \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                    \"--enable-preview\", \"-XX:+EnableValhalla\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -37,1 +38,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n@@ -95,1 +96,1 @@\n-        TestCommon.dumpBaseArchive(baseArchiveName, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", unlockArg, logArg)\n+        TestCommon.dumpBaseArchive(baseArchiveName, \"--enable-preview\", \"-XX:+EnableValhalla\", unlockArg, logArg)\n@@ -101,1 +102,1 @@\n-              \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+              \"--enable-preview\", \"-XX:+EnableValhalla\",\n@@ -113,1 +114,1 @@\n-             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+             \"--enable-preview\", \"-XX:+EnableValhalla\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -34,1 +35,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n@@ -63,0 +64,1 @@\n+             \"--enable-preview\",\n@@ -64,1 +66,0 @@\n-             \"-XX:+EnablePrimitiveClasses\",\n@@ -72,0 +73,1 @@\n+            \"--enable-preview\",\n@@ -73,1 +75,0 @@\n-            \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-    static primitive class Point {\n+    static value class Point {\n@@ -51,1 +51,1 @@\n-    static primitive class Rectangle {\n+    static value class Rectangle {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/HelloInlineClassApp.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Point {\n+public value class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/Point.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-            are generated for primitive classes.\n+            are generated for value classes.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,1 +31,1 @@\n- * @run main\/othervm\/native -agentlib:FieldAccessModify -XX:+EnableValhalla -XX:+EnablePrimitiveClasses FieldAccessModify\n+ * @run main\/othervm\/native -agentlib:FieldAccessModify -XX:+EnableValhalla FieldAccessModify\n@@ -41,1 +42,1 @@\n-    private static primitive class MyPrimitive {\n+    private static value class MyPrimitive {\n@@ -69,1 +70,1 @@\n-    private static primitive class PrimitiveHolder {\n+    private static value class PrimitiveHolder {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/FieldAccessModify\/FieldAccessModify.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run testng\/othervm  SimpleValueGraphs\n+ * @enablePreview\n+ * @run testng\/othervm SimpleValueGraphs\n@@ -262,1 +263,1 @@\n-    static identity class TreeI implements Tree, Serializable {\n+    static class TreeI implements Tree, Serializable {\n@@ -376,1 +377,1 @@\n-    static identity class IdentExt implements Externalizable {\n+    static class IdentExt implements Externalizable {\n","filename":"test\/jdk\/java\/io\/Serializable\/valueObjects\/SimpleValueGraphs.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -28,1 +29,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueSerialization\n+ * @run testng\/othervm -XX:+EnableValhalla ValueSerialization\n@@ -100,2 +101,2 @@\n-    \/** A Serializable primitive class Point *\/\n-    static primitive class SerializablePrimitivePoint implements Serializable {\n+    \/** A Serializable value class Point *\/\n+    static value class SerializablePrimitivePoint implements Serializable {\n","filename":"test\/jdk\/java\/io\/Serializable\/valueObjects\/ValueSerialization.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -119,1 +120,1 @@\n-value class AValueClass<E> {}\n\\ No newline at end of file\n+value class AValueClass<E> {}\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}