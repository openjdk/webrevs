{"files":[{"patch":"@@ -406,0 +406,4 @@\n+    public boolean isStrict() {\n+        return (flags() & STRICT) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -484,1 +484,1 @@\n-        \/\/ Do something with all static or non-static field initializers and initialization blocks.\n+        \/\/ Do something with static or non-static field initializers and initialization blocks.\n@@ -486,0 +486,10 @@\n+            forEachInitializer(classDef, isStatic, false, handler);\n+        }\n+\n+        \/* Do something with static or non-static field initializers and initialization blocks.\n+         * the `earlyOnly` argument will determine if we will deal or not with early variable instance\n+         * initializers we want to process only those before a super() invocation and ignore them after\n+         * it.\n+         *\/\n+        protected void forEachInitializer(JCClassDecl classDef, boolean isStatic, boolean earlyOnly,\n+                                          Consumer<? super JCTree> handler) {\n@@ -503,2 +513,12 @@\n-                    if (!def.hasTag(METHODDEF) && (isDefStatic == isStatic))\n-                        handler.accept(def);\n+                    if (!def.hasTag(METHODDEF) && (isDefStatic == isStatic)) {\n+                        if (def instanceof JCVariableDecl varDecl) {\n+                            boolean isEarly = varDecl.init != null &&\n+                                    varDecl.sym.owner.isValueClass() &&\n+                                    !varDecl.sym.isStatic();\n+                            if (isEarly == earlyOnly) {\n+                                handler.accept(def);\n+                            }\n+                        } else if (!earlyOnly) {\n+                            handler.accept(def);\n+                        }\n+                    }\n@@ -2301,1 +2321,1 @@\n-                    log.error(pos, errkey);\n+                log.error(pos, errkey);\n@@ -3035,0 +3055,8 @@\n+            Name name = TreeInfo.name(tree.meth);\n+            \/\/ let's process early initializers\n+            if (name == names._super) {\n+                forEachInitializer(classDef, false, true, def -> {\n+                    scan(def);\n+                    clearPendingExits(false);\n+                });\n+            }\n@@ -3042,1 +3070,1 @@\n-                Name name = TreeInfo.name(tree.meth);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1006,0 +1006,9 @@\n+        assertOK(\n+                \"\"\"\n+                value class V {\n+                    String s1;\n+                    { System.out.println(s1); }\n+                    String s2 = (s1 = \"abc\");\n+                }\n+                \"\"\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}