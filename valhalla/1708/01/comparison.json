{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 0\n@@ -33,0 +33,71 @@\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 6\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 7\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315003\n+ * @summary Test that removing allocation merges of non-value and value object at EA is working properly.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestAllocationMergeAndFolding 8\n+ *\/\n@@ -44,5 +115,10 @@\n-        InlineTypes.getFramework()\n-                .addScenarios(InlineTypes.DEFAULT_SCENARIOS)\n-                .addScenarios(new Scenario(7, \"--enable-preview\", \"-XX:-UseCompressedOops\"))\n-                .addScenarios(new Scenario(8, \"--enable-preview\", \"-XX:+UseCompressedOops\"))\n-                .start();\n+        TestFramework framework = InlineTypes.getFramework();\n+        int index = Integer.parseInt(args[0]);\n+        if (index < 7) {\n+                framework.addScenarios(InlineTypes.DEFAULT_SCENARIOS[index]);\n+        } else if (index == 7) {\n+                framework.addScenarios(new Scenario(7, \"--enable-preview\", \"-XX:-UseCompressedOops\"));\n+        } else {\n+                framework.addScenarios(new Scenario(8, \"--enable-preview\", \"-XX:+UseCompressedOops\"));\n+        }\n+        framework.start();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestAllocationMergeAndFolding.java","additions":83,"deletions":7,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -70,1 +70,79 @@\n- * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @run main compiler.valhalla.inlinetypes.TestArrays 6\n@@ -84,1 +162,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -57,1 +57,79 @@\n- * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8327695\n+ * @summary Test the basic value class implementation in C2.\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestBasicFunctionality 6\n@@ -65,1 +143,1 @@\n-                   .addScenarios(InlineTypes.DEFAULT_SCENARIOS)\n+                   .addScenarios(InlineTypes.DEFAULT_SCENARIOS[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -60,1 +60,85 @@\n- * @run main\/othervm\/timeout=450 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test value class calling convention optimizations.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestCallingConvention 6\n@@ -103,1 +187,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":86,"deletions":2,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n@@ -58,1 +59,91 @@\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test intrinsic support for value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics 6\n@@ -76,1 +167,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":93,"deletions":2,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -41,1 +41,73 @@\n- * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test calling native methods with value class arguments from compiled code.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestJNICalls 6\n@@ -51,1 +123,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":74,"deletions":2,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -74,1 +74,79 @@\n- * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test inline types in LWorld.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestLWorld 6\n@@ -92,1 +170,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -56,1 +56,79 @@\n- * @run main\/timeout=450 compiler.valhalla.inlinetypes.TestMethodHandles\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test method handle support for inline types\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @requires vm.opt.AbortVMOnCompilationFailure != true\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestMethodHandles 6\n@@ -150,1 +228,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -58,1 +58,73 @@\n- * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestNullableArrays\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test nullable value class arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestNullableArrays 6\n@@ -73,1 +145,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":74,"deletions":2,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -63,1 +63,79 @@\n- * @run main\/timeout=1000 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of nullable value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n+ * @run main compiler.valhalla.inlinetypes.TestNullableInlineTypes 6\n@@ -76,1 +154,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -52,1 +52,73 @@\n- * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestOnStackReplacement\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test on stack replacement (OSR) with value classes.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestOnStackReplacement 6\n@@ -62,1 +134,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":74,"deletions":2,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -50,1 +50,73 @@\n- * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestValueClasses\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 1\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 2\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 3\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 4\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 5\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @summary Test correct handling of value classes.\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestValueClasses 6\n@@ -65,1 +137,1 @@\n-                   .addScenarios(scenarios)\n+                   .addScenarios(scenarios[Integer.parseInt(args[0])])\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":74,"deletions":2,"binary":false,"changes":76,"status":"modified"}]}