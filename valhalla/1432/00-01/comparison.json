{"files":[{"patch":"@@ -294,1 +294,1 @@\n-                    case 246 -> {\n+                    case StackMapDecoder.EARLY_LARVAL -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,0 +175,11 @@\n+    \/\/ In sync with StackMapGenerator::needsLarvalFrame\n+    private static boolean needsLarvalFrameForTransition(List<NameAndTypeEntry> prevUnsets, StackMapFrameInfo fr) {\n+        if (prevUnsets.equals(fr.unsetFields()))\n+            return false;\n+        if (!fr.locals().contains(SimpleVerificationTypeInfo.UNINITIALIZED_THIS)) {\n+            assert fr.unsetFields().isEmpty() : fr; \/\/ should be checked in StackMapFrameInfo constructor\n+            return false;\n+        }\n+        return true;\n+    }\n+\n@@ -178,5 +189,1 @@\n-        writeLarvalFrame:\n-        if (!prevUnsets.equals(fr.unsetFields())) {\n-            if (fr.unsetFields().isEmpty() && !fr.locals().contains(SimpleVerificationTypeInfo.UNINITIALIZED_THIS)) {\n-                break writeLarvalFrame;\n-            }\n+        if (needsLarvalFrameForTransition(prevUnsets, fr)) {\n@@ -299,1 +306,1 @@\n-            if (actualFrameType != 247 && !unsetFields.isEmpty() && !locals.contains(SimpleVerificationTypeInfo.UNINITIALIZED_THIS)) {\n+            if (actualFrameType != EARLY_LARVAL && !unsetFields.isEmpty() && !locals.contains(SimpleVerificationTypeInfo.UNINITIALIZED_THIS)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1261,1 +1261,1 @@\n-            if (!UnsetField.mismatches(myUnsets, myUnsetSize, targetUnsets, targetUnsetSize)) {\n+            if (UnsetField.matches(myUnsets, myUnsetSize, targetUnsets, targetUnsetSize)) {\n@@ -1334,0 +1334,11 @@\n+        \/\/ In sync with StackMapDecoder::needsLarvalFrameForTransition\n+        private boolean needsLarvalFrame(Frame prevFrame) {\n+            if (UnsetField.matches(unsetFields, unsetFieldsSize, prevFrame.unsetFields, prevFrame.unsetFieldsSize))\n+                return false;\n+            if (!hasUninitializedThis()) {\n+                assert unsetFieldsSize == 0 : this; \/\/ Should have been handled by processInvokeInstructions\n+                return false;\n+            }\n+            return true;\n+        }\n+\n@@ -1336,10 +1347,1 @@\n-            int unsetCount = unsetFieldsSize;\n-            var unsets = unsetFields;\n-            writeUnsetField:\n-            if (UnsetField.mismatches(unsets, unsetCount, prevFrame.unsetFields, prevFrame.unsetFieldsSize)) {\n-                if (unsetCount == 0 && !hasUninitializedThis()) {\n-                    \/\/ no uninitializedThis in locals implies empty unset, base frame is sufficient\n-                    break writeUnsetField;\n-                }\n-                assert hasUninitializedThis() : this; \/\/ Already handled by processInvokeInstructions\n-                \/\/ Emit enclosing early_larval_frame\n+            if (needsLarvalFrame(prevFrame)) {\n@@ -1347,2 +1349,2 @@\n-                for (int i = 0; i < unsetCount; i++) {\n-                    var f = unsets[i];\n+                for (int i = 0; i < unsetFieldsSize; i++) {\n+                    var f = unsetFields[i];\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.constantpool.ConstantPool;\n@@ -84,1 +83,1 @@\n-        public static boolean mismatches(UnsetField[] one, int sizeOne, UnsetField[] two, int sizeTwo) {\n+        public static boolean matches(UnsetField[] one, int sizeOne, UnsetField[] two, int sizeTwo) {\n@@ -86,1 +85,1 @@\n-                return true;\n+                return false;\n@@ -89,1 +88,1 @@\n-                    return true;\n+                    return false;\n@@ -92,1 +91,1 @@\n-            return false;\n+            return true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/WritableField.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1334,1 +1334,1 @@\n-        abstract int getEntryType();\n+        abstract int getFrameType();\n@@ -1342,3 +1342,3 @@\n-            int entryType = getEntryType();\n-            writer.databuf.appendByte(entryType);\n-            if (writer.debugstackmap) System.out.println(\" frame_type=\" + entryType + \" bytecode offset \" + pc);\n+            int frameType = getFrameType();\n+            writer.databuf.appendByte(frameType);\n+            if (writer.debugstackmap) System.out.println(\" frame_type=\" + frameType + \" bytecode offset \" + pc);\n@@ -1353,1 +1353,1 @@\n-            int getEntryType() {\n+            int getFrameType() {\n@@ -1359,1 +1359,1 @@\n-                if (getEntryType() == SAME_FRAME_EXTENDED) {\n+                if (getFrameType() == SAME_FRAME_EXTENDED) {\n@@ -1376,1 +1376,1 @@\n-            int getEntryType() {\n+            int getFrameType() {\n@@ -1384,1 +1384,1 @@\n-                if (getEntryType() == SAME_LOCALS_1_STACK_ITEM_EXTENDED) {\n+                if (getFrameType() == SAME_LOCALS_1_STACK_ITEM_EXTENDED) {\n@@ -1405,1 +1405,1 @@\n-            int getEntryType() { return frameType; }\n+            int getFrameType() { return frameType; }\n@@ -1426,1 +1426,1 @@\n-            int getEntryType() { return frameType; }\n+            int getFrameType() { return frameType; }\n@@ -1451,1 +1451,1 @@\n-            int getEntryType() { return FULL_FRAME; }\n+            int getFrameType() { return FULL_FRAME; }\n@@ -1486,1 +1486,1 @@\n-            int getEntryType() { return EARLY_LARVAL; }\n+            int getFrameType() { return EARLY_LARVAL; }\n@@ -1493,1 +1493,1 @@\n-                    System.out.println(\"    # writing: EarlyLarval stackmap entry with \" + unsetFields.size() + \" fields\");\n+                    System.out.println(\"    # writing: EarlyLarval stackmap frame with \" + unsetFields.size() + \" fields\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1364,1 +1364,1 @@\n-        boolean generateAssertUnsetFieldsEntry = unsetFieldsAtPC != null && generateEarlyLarvalFrame && hasUninitalizedThis\n+        boolean encloseWithEarlyLarvalFrame = unsetFieldsAtPC != null && generateEarlyLarvalFrame && hasUninitalizedThis\n@@ -1376,1 +1376,1 @@\n-        if (generateAssertUnsetFieldsEntry) {\n+        if (encloseWithEarlyLarvalFrame) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -75,1 +77,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -93,0 +95,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -113,1 +117,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -133,0 +137,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -161,1 +167,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -180,0 +186,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -201,1 +209,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -221,0 +229,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -243,0 +253,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -268,1 +280,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -286,0 +298,2 @@\n+                .withVersion(latestMajorVersion(), PREVIEW_MINOR_VERSION)\n+                .withFlags(ACC_PUBLIC | ACC_IDENTITY)\n@@ -323,1 +337,1 @@\n-        \/\/MethodHandles.lookup().ensureInitialized(ByteCodeLoader.load(className, classBytes)); \/\/ sanity check to pass verification\n+        runtimeVerify(className, classBytes);\n@@ -344,0 +358,7 @@\n+\n+    private static void runtimeVerify(String className, byte[] classBytes) {\n+        var clazz = assertDoesNotThrow(() -> ByteCodeLoader.load(className, classBytes));\n+        var lookup = assertDoesNotThrow(() -> MethodHandles.privateLookupIn(clazz, MethodHandles.lookup()));\n+        if (true) return; \/\/ TODO VM fix \"java.lang.ClassFormatError: StackMapTable format error: wrong attribute size\"\n+        assertDoesNotThrow(() -> lookup.ensureInitialized(clazz)); \/\/ forces verification\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/StrictStackMapsTest.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"}]}