{"files":[{"patch":"@@ -137,1 +137,0 @@\n-runtime\/valhalla\/inlinetypes\/CircularityTest.java 8349037 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,206 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-import jdk.internal.vm.annotation.LooselyConsistentValue;\n-import jdk.internal.vm.annotation.NullRestricted;\n-import jdk.internal.vm.annotation.Strict;\n-\n-\/*\n- * @test\n- * @summary Test initialization of static inline fields with circularity\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.vm.annotation\n- * @enablePreview\n- * @run main\/othervm runtime.valhalla.inlinetypes.CircularityTest\n- *\/\n-\n-\n-public class CircularityTest {\n-    static boolean b = true;\n-    static int counter = 0;\n-    @LooselyConsistentValue\n-    static value class A {\n-        @Strict\n-        @NullRestricted\n-        static B b;\n-        @Strict\n-        @NullRestricted\n-        static C c;\n-        int i = 0;\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class B {\n-        static {\n-            Asserts.assertNotNull(A.c, \"Should have returned C's default value\");\n-        }\n-        int i = 0;\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class C {\n-        int i;\n-        public C(int i) {\n-            this.i = i;\n-        }\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class D {\n-        @Strict\n-        @NullRestricted\n-        static C c;\n-        int i = 0;\n-        static {\n-            if (CircularityTest.b) {\n-                \/\/ throw an exception to cause D's initialization to fail\n-                throw new RuntimeException();\n-            }\n-        }\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class E {\n-        @Strict\n-        @NullRestricted\n-        static F f;\n-        @Strict\n-        @NullRestricted\n-        static C c;\n-        int i = 0;\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class F {\n-        int i = 0;\n-        static {\n-            E.c = new C(5);\n-        }\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class G {\n-        @Strict\n-        @NullRestricted\n-        static H h;\n-        int i = 0;\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class H {\n-        int i = 0;\n-        static {\n-            if (CircularityTest.b) {\n-                \/\/ throw an exception to cause H's initialization to fail\n-                throw new RuntimeException();\n-            }\n-        }\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class I {\n-        @Strict\n-        @NullRestricted\n-        static J j;\n-        @Strict\n-        @NullRestricted\n-        static H h;\n-        int i = 0;\n-    }\n-\n-    @LooselyConsistentValue\n-    static value class J {\n-        int i = 0;\n-        static {\n-            CircularityTest.counter = 1;\n-            H h = I.h;\n-            CircularityTest.counter = 2;\n-        }\n-    }\n-\n-    static public void main(String[] args) {\n-        Throwable exception = null;\n-        \/\/ Test 1:\n-        \/\/ Initialization of A will trigger initialization of B which, in its static\n-        \/\/ initializer will access a static inline field c of A that has not been initialized\n-        \/\/ yet. The access must succeed (no exception) because the field is being\n-        \/\/ accessed during the initialization of D, by the thread initializing D,\n-        \/\/ and the value must be the default value of C (not null).\n-        try {\n-            A a = new A();\n-        } catch (Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"Circularity should not have caused exceptions\");\n-\n-        \/\/ Test 2:\n-        \/\/ Class D will fail to initialized (exception thrown in its static initializer).\n-        \/\/ Attempt to access a static inline field of D *after* its failed initialization\n-        \/\/ should trigger an exception.\n-        exception = null;\n-        try {\n-            D d = new D();\n-        } catch (Throwable t) {\n-            \/\/ ignoring the exception thrown to cause initialization failure\n-        }\n-        try {\n-            C c = D.c;\n-        } catch (Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"Accessing static fields of a class which failed to initialized should throw an exception\");\n-        Asserts.assertEquals(exception.getClass(), java.lang.NoClassDefFoundError.class, \"Wrong exception class\");\n-        \/\/ Test 3:\n-        \/\/ Initialization of E will trigger the initialization of F which, in its static initalizer,\n-        \/\/ will initialized a static inline field of F before the JVM does. The JVM must not\n-        \/\/ overwrite the value set by user code.\n-        E e = new E();\n-        Asserts.assertEquals(E.c.i, 5, \"JVM must not overwrite fields initialized by user code\");\n-\n-        \/\/ Test 4:\n-        \/\/ Initialization of G should fail because its static inline field h\n-        exception = null;\n-        try {\n-            G g = new G();\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"G's initialization should have failed\");\n-        Asserts.assertEquals(exception.getClass(), java.lang.ExceptionInInitializerError.class, \"Wrong exception\");\n-\n-        \/\/ Test 5:\n-        \/\/ Initialization of of I should fail when J tries to access I.h\n-        exception = null;\n-        try {\n-            I i = new I();\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"I's initialization should have failed\");\n-        Asserts.assertEquals(exception.getClass(), java.lang.NoClassDefFoundError.class, \"Wrong exception\");\n-        Asserts.assertEquals(CircularityTest.counter, 1, \"Didn't failed at the right place\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CircularityTest.java","additions":0,"deletions":206,"binary":false,"changes":206,"status":"deleted"}]}