{"files":[{"patch":"@@ -2049,1 +2049,2 @@\n-            long flags = flags();\n+            \/\/ just in case the method is restricted but that is not a modifier\n+            long flags = flags() & ~RESTRICTED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -355,7 +355,0 @@\n-    \/** The current `this' symbol.\n-     *  @param env    The current environment.\n-     *\/\n-    Symbol thisSym(DiagnosticPosition pos, Env<AttrContext> env) {\n-        return rs.resolveSelf(pos, env, env.enclClass.sym, names._this);\n-    }\n-\n@@ -992,4 +985,4 @@\n-                \/\/ If this class appears as an anonymous class in a constructor\n-                \/\/ prologue, disable implicit outer instance from being passed.\n-                \/\/ (This would be an illegal access to \"this before super\").\n-                if (ctorProloguePrev && env.tree.hasTag(NEWCLASS)) {\n+                \/\/ If a class declaration appears in a constructor prologue,\n+                \/\/ that means it's either a local class or an anonymous class.\n+                \/\/ Either way, there is no immediately enclosing instance.\n+                if (ctorProloguePrev) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"}]}