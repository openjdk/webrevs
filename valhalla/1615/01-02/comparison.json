{"files":[{"patch":"@@ -72,1 +72,1 @@\n-                       int locationsSize, int stringsSize) {\n+            int locationsSize, int stringsSize) {\n@@ -78,2 +78,3 @@\n-                       int flags, int resourceCount,\n-                       int tableLength, int locationsSize, int stringsSize) {\n+                int flags, int resourceCount,\n+                int tableLength, int locationsSize, int stringsSize)\n+    {\n@@ -91,1 +92,1 @@\n-        return HEADER_SLOTS * 4;\n+       return HEADER_SLOTS * 4;\n@@ -99,1 +100,1 @@\n-                    \"jimage header not the correct size: \" + buffer.capacity());\n+                \"jimage header not the correct size: \" + buffer.capacity());\n@@ -113,1 +114,1 @@\n-                resourceCount, tableLength, locationsSize, stringsSize);\n+            resourceCount, tableLength, locationsSize, stringsSize);\n@@ -175,4 +176,4 @@\n-                getRedirectSize() +\n-                getOffsetsSize() +\n-                getLocationsSize() +\n-                getStringsSize();\n+               getRedirectSize() +\n+               getOffsetsSize() +\n+               getLocationsSize() +\n+               getStringsSize();\n@@ -187,1 +188,1 @@\n-                getRedirectSize();\n+               getRedirectSize();\n@@ -192,1 +193,1 @@\n-                getOffsetsSize();\n+               getOffsetsSize();\n@@ -197,1 +198,1 @@\n-                getLocationsSize();\n+               getLocationsSize();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageHeader.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                        \"Invalid jimage attribute kind: \" + kind);\n+                    \"Invalid jimage attribute kind: \" + kind);\n@@ -193,1 +193,1 @@\n-                    stream.put((int) (value >> (i << 3)));\n+                    stream.put((int)(value >> (i << 3)));\n@@ -201,1 +201,1 @@\n-    }\n+     }\n@@ -216,1 +216,1 @@\n-        int moduleOffset = (int) attributes[ATTRIBUTE_MODULE];\n+        int moduleOffset = (int)attributes[ATTRIBUTE_MODULE];\n@@ -287,1 +287,1 @@\n-                          ImageStrings strings) {\n+            ImageStrings strings) {\n@@ -299,1 +299,1 @@\n-                                      int moduleOffset, int parentOffset, int baseOffset, int extOffset, ImageStrings strings) {\n+            int moduleOffset, int parentOffset, int baseOffset, int extOffset, ImageStrings strings) {\n@@ -339,1 +339,1 @@\n-                    \"Invalid jimage attribute kind: \" + kind);\n+                \"Invalid jimage attribute kind: \" + kind);\n@@ -347,1 +347,1 @@\n-                    \"Invalid jimage attribute kind: \" + kind);\n+                \"Invalid jimage attribute kind: \" + kind);\n@@ -349,1 +349,1 @@\n-        return getStrings().get((int) attributes[kind]);\n+        return getStrings().get((int)attributes[kind]);\n@@ -357,1 +357,1 @@\n-        return (int) getAttribute(ATTRIBUTE_MODULE);\n+        return (int)getAttribute(ATTRIBUTE_MODULE);\n@@ -365,1 +365,1 @@\n-        return (int) getAttribute(ATTRIBUTE_BASE);\n+        return (int)getAttribute(ATTRIBUTE_BASE);\n@@ -373,1 +373,1 @@\n-        return (int) getAttribute(ATTRIBUTE_PARENT);\n+        return (int)getAttribute(ATTRIBUTE_PARENT);\n@@ -381,1 +381,1 @@\n-        return (int) getAttribute(ATTRIBUTE_EXTENSION);\n+        return (int)getAttribute(ATTRIBUTE_EXTENSION);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageLocation.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.jimage;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+\/**\n+ * Factory to get ImageReader\n+ *\n+ * @implNote This class needs to maintain JDK 8 source compatibility.\n+ *\n+ * It is used internally in the JDK to implement jimage\/jrtfs access,\n+ * but also compiled and delivered as part of the jrtfs.jar to support access\n+ * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n+ *\/\n+public class ImageReaderFactory {\n+    private ImageReaderFactory() {}\n+\n+    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n+    private static final Path BOOT_MODULES_JIMAGE;\n+\n+    static {\n+        FileSystem fs;\n+        if (ImageReaderFactory.class.getClassLoader() == null) {\n+            try {\n+                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n+                        .getMethod(\"theFileSystem\")\n+                        .invoke(null);\n+            } catch (Exception e) {\n+                throw new ExceptionInInitializerError(e);\n+            }\n+        } else {\n+            fs = FileSystems.getDefault();\n+        }\n+        BOOT_MODULES_JIMAGE = fs.getPath(JAVA_HOME, \"lib\", \"modules\");\n+    }\n+\n+    private static final Map<Path, ImageReader> readers = new ConcurrentHashMap<>();\n+\n+    \/**\n+     * Returns an {@code ImageReader} to read from the given image file\n+     *\/\n+    public static ImageReader get(Path jimage) throws IOException {\n+        Objects.requireNonNull(jimage);\n+        try {\n+            return readers.computeIfAbsent(jimage, OPENER);\n+        } catch (UncheckedIOException io) {\n+            throw io.getCause();\n+        }\n+    }\n+\n+    private static Function<Path, ImageReader> OPENER = new Function<Path, ImageReader>() {\n+        public ImageReader apply(Path path) {\n+            try {\n+                return ImageReader.open(path);\n+            } catch (IOException io) {\n+                throw new UncheckedIOException(io);\n+            }\n+        }\n+    };\n+\n+    \/**\n+     * Returns the {@code ImageReader} to read the image file in this\n+     * run-time image.\n+     *\n+     * @throws UncheckedIOException if an I\/O error occurs\n+     *\/\n+    public static ImageReader getImageReader() {\n+        try {\n+            return get(BOOT_MODULES_JIMAGE);\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReaderFactory.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -64,1 +64,0 @@\n-\n@@ -178,1 +177,1 @@\n-            new HashSet<String>(Arrays.asList(\"basic\", \"jrt\")));\n+                    new HashSet<String>(Arrays.asList(\"basic\", \"jrt\")));\n@@ -209,2 +208,2 @@\n-            throw new UnsupportedOperationException(\"Syntax '\" + syntax\n-                    + \"' not recognized\");\n+                throw new UnsupportedOperationException(\"Syntax '\" + syntax\n+                        + \"' not recognized\");\n@@ -302,1 +301,1 @@\n-                        \"option class: \" + option.getClass());\n+                    \"option class: \" + option.getClass());\n@@ -306,1 +305,1 @@\n-                options.contains(StandardOpenOption.APPEND)) {\n+            options.contains(StandardOpenOption.APPEND)) {\n@@ -347,2 +346,2 @@\n-                                     Set<? extends OpenOption> options,\n-                                     FileAttribute<?>... attrs)\n+            Set<? extends OpenOption> options,\n+            FileAttribute<?>... attrs)\n@@ -358,2 +357,2 @@\n-                                             Set<? extends OpenOption> options,\n-                                             FileAttribute<?>... attrs)\n+            Set<? extends OpenOption> options,\n+            FileAttribute<?>... attrs)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/JrtFileSystem.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        @SuppressWarnings({\"removal\", \"suppression\"})\n+        @SuppressWarnings({ \"removal\", \"suppression\" })\n@@ -110,1 +110,1 @@\n-            return newFileSystem((String) env.get(\"java.home\"), uri, env);\n+            return newFileSystem((String)env.get(\"java.home\"), uri, env);\n@@ -138,1 +138,1 @@\n-        Map<String, ?> newEnv = new HashMap<>(env);\n+        Map<String,?> newEnv = new HashMap<>(env);\n@@ -143,1 +143,1 @@\n-            @SuppressWarnings({\"deprecation\", \"suppression\"})\n+            @SuppressWarnings({ \"deprecation\", \"suppression\" })\n@@ -145,1 +145,1 @@\n-            return ((FileSystemProvider) tmp).newFileSystem(uri, newEnv);\n+            return ((FileSystemProvider)tmp).newFileSystem(uri, newEnv);\n@@ -159,1 +159,2 @@\n-                throws ClassNotFoundException {\n+                throws ClassNotFoundException\n+        {\n@@ -175,1 +176,1 @@\n-    @SuppressWarnings({\"removal\", \"suppression\"})\n+    @SuppressWarnings({ \"removal\", \"suppression\" })\n@@ -184,1 +185,1 @@\n-        final URL[] urls = new URL[]{url};\n+        final URL[] urls = new URL[] { url };\n@@ -282,1 +283,1 @@\n-    getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n+            getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n@@ -309,3 +310,3 @@\n-                                                              Set<? extends OpenOption> options,\n-                                                              ExecutorService exec,\n-                                                              FileAttribute<?>... attrs)\n+            Set<? extends OpenOption> options,\n+            ExecutorService exec,\n+            FileAttribute<?>... attrs)\n@@ -318,2 +319,2 @@\n-                                              Set<? extends OpenOption> options,\n-                                              FileAttribute<?>... attrs)\n+            Set<? extends OpenOption> options,\n+            FileAttribute<?>... attrs)\n@@ -332,2 +333,2 @@\n-                                      Set<? extends OpenOption> options,\n-                                      FileAttribute<?>... attrs)\n+            Set<? extends OpenOption> options,\n+            FileAttribute<?>... attrs)\n@@ -353,1 +354,1 @@\n-    readAttributes(Path path, Class<A> type, LinkOption... options)\n+            readAttributes(Path path, Class<A> type, LinkOption... options)\n@@ -363,1 +364,1 @@\n-    readAttributes(Path path, String attribute, LinkOption... options)\n+            readAttributes(Path path, String attribute, LinkOption... options)\n@@ -370,1 +371,1 @@\n-                             Object value, LinkOption... options)\n+            Object value, LinkOption... options)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/JrtFileSystemProvider.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-@SuppressWarnings({\"removal\", \"suppression\"})\n+@SuppressWarnings({ \"removal\", \"suppression\"} )\n@@ -102,6 +102,6 @@\n-                new PrivilegedAction<Boolean>() {\n-                    @Override\n-                    public Boolean run() {\n-                        return Files.isRegularFile(moduleImageFile);\n-                    }\n-                });\n+            new PrivilegedAction<Boolean>() {\n+                @Override\n+                public Boolean run() {\n+                    return Files.isRegularFile(moduleImageFile);\n+                }\n+            });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/SystemImage.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    private SystemModuleFinders() {}\n+    private SystemModuleFinders() { }\n@@ -151,1 +151,1 @@\n-                = (Map.Entry<String, ModuleReference>[]) new Map.Entry[moduleCount];\n+            = (Map.Entry<String, ModuleReference>[])new Map.Entry[moduleCount];\n@@ -159,4 +159,4 @@\n-                    targets[i],\n-                    recordedHashes[i],\n-                    hashSupplier,\n-                    moduleResolutions[i]);\n+                                                     targets[i],\n+                                                     recordedHashes[i],\n+                                                     hashSupplier,\n+                                                     moduleResolutions[i]);\n@@ -239,4 +239,4 @@\n-                    attrs.target(),\n-                    attrs.recordedHashes(),\n-                    hashSupplier,\n-                    attrs.moduleResolution());\n+                                                     attrs.target(),\n+                                                     attrs.recordedHashes(),\n+                                                     hashSupplier,\n+                                                     attrs.moduleResolution());\n@@ -334,7 +334,7 @@\n-                uri,\n-                readerSupplier,\n-                null,\n-                target,\n-                recordedHashes,\n-                hasher,\n-                mres);\n+                                                       uri,\n+                                                       readerSupplier,\n+                                                       null,\n+                                                       target,\n+                                                       recordedHashes,\n+                                                       hasher,\n+                                                       mres);\n@@ -518,1 +518,1 @@\n-            for (; ; ) {\n+            for (;;) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-        return len > Integer.MAX_VALUE ? -1 : (int) len;\n+        return len > Integer.MAX_VALUE ? -1 : (int)len;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageStringsWriter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    @DataProvider(name = \"classes\")\n+    @DataProvider(name=\"classes\")\n@@ -64,1 +64,1 @@\n-        return new Object[][]{\n+        return new Object[][] {\n@@ -82,1 +82,1 @@\n-    @Test(dataProvider = \"classes\")\n+    @Test(dataProvider=\"classes\")\n@@ -107,2 +107,2 @@\n-                            + moduleName\n-                            + \", or class: \" + className);\n+                    + moduleName\n+                    + \", or class: \" + className);\n@@ -234,1 +234,1 @@\n-            System.arraycopy(nativeNames, 0, combined, names.length, nativeNames.length);\n+            System.arraycopy(nativeNames,0, combined, names.length, nativeNames.length);\n@@ -358,1 +358,1 @@\n-        Class<?>[] testclass = {JImageReadTest.class};\n+        Class<?>[] testclass = { JImageReadTest.class};\n","filename":"test\/jdk\/jdk\/internal\/jimage\/JImageReadTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}