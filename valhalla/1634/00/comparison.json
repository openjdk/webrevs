{"files":[{"patch":"@@ -39,1 +39,1 @@\n- * @test TestTearing\n+ * @test id=tiered\n@@ -41,0 +41,1 @@\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n@@ -42,1 +43,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/testlibrary \/test\/lib \/\n@@ -85,0 +86,43 @@\n+\/**\n+ * @test id=c1\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening\n+ *                   -XX:CompileCommand=dontinline,*::incrementAndCheck*\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening\n+ *                   -XX:CompileCommand=dontinline,*::incrementAndCheck*\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ *\n+ * @run main\/othervm\/timeout=450 -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseArrayFlattening\n+ *                   -Xcomp compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseArrayFlattening\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseArrayFlattening\n+ *                   -XX:CompileCommand=dontinline,*::incrementAndCheck*\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseArrayFlattening\n+ *                   -XX:CompileCommand=dontinline,*::incrementAndCheck*\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ *\/\n+\n@@ -188,0 +232,1 @@\n+        private final int loopLimit;\n@@ -189,1 +234,1 @@\n-        public Runner(TestTearing test) {\n+        public Runner(TestTearing test, int loopLimit) {\n@@ -191,0 +236,1 @@\n+            this.loopLimit = loopLimit;\n@@ -194,1 +240,1 @@\n-            for (int i = 0; i < 1_000_000; ++i) {\n+            for (int i = 0; i < loopLimit; ++i) {\n@@ -278,0 +324,5 @@\n+        int loopLimit = 1_000_000;\n+        if (args.length > 0) {\n+            Asserts.assertTrue(args[0].equals(\"C1\"));\n+            loopLimit = 50_000;\n+        }\n@@ -281,1 +332,1 @@\n-            runner = new Runner(test);\n+            runner = new Runner(test, loopLimit);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTearing.java","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"}]}