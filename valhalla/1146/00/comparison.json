{"files":[{"patch":"@@ -1344,0 +1344,9 @@\n+  \/\/ Valhalla update: the code is now a bit convuloted because arrays and primitive\n+  \/\/ classes don't have the same modifiers set anymore, but we cannot introduce\n+  \/\/ branches in LIR generation (JDK-8211231). So, the first part of the code remains\n+  \/\/ identical, using the byteArrayKlass object to avoid a NPE when accessing the\n+  \/\/ modifiers. But then the code also prepares the correct modifiers set for\n+  \/\/ primitive classes, and there's a second conditional move to put the right\n+  \/\/ value into result.\n+\n+\n@@ -1345,1 +1354,2 @@\n-  assert(univ_klass_obj->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), \"Sanity\");\n+  assert(univ_klass_obj->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC\n+                                              | (Arguments::enable_preview() ? JVM_ACC_IDENTITY : 0)), \"Sanity\");\n@@ -1355,0 +1365,7 @@\n+  LIR_Opr klass_modifiers = new_register(T_INT);\n+  __ move(new LIR_Address(klass, in_bytes(Klass::modifier_flags_offset()), T_INT), klass_modifiers);\n+\n+  LIR_Opr prim_modifiers = load_immediate(JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC, T_INT);\n+\n+  __ cmp(lir_cond_equal, recv_klass, LIR_OprFact::metadataConst(0));\n+  __ cmove(lir_cond_equal, prim_modifiers, klass_modifiers, result, T_INT);\n@@ -1356,2 +1373,0 @@\n-  \/\/ Get the answer.\n-  __ move(new LIR_Address(klass, in_bytes(Klass::modifier_flags_offset()), T_INT), result);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -40,0 +41,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -52,0 +54,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -66,0 +69,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -103,9 +107,9 @@\n-        Asserts.assertEQ(int[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(long[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(double[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(float[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(char[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(byte[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(short[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(Object[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n-        Asserts.assertEQ(CanonicalizeGetModifiers[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL);\n+        Asserts.assertEQ(int[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(long[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(double[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(float[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(char[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(byte[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(short[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(Object[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n+        Asserts.assertEQ(CanonicalizeGetModifiers[].class.getModifiers(), Modifier.PUBLIC | Modifier.ABSTRACT | Modifier.FINAL | (PreviewFeatures.isEnabled() ? Modifier.IDENTITY : 0));\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/CanonicalizeGetModifiers.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -39,0 +40,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -49,0 +51,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -60,0 +63,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -84,1 +88,1 @@\n-                throw new IllegalStateException(\"Error with: \" + cl);\n+                throw new IllegalStateException(\"Error with: \" + cl + \" : \" + actualMods  + \" vs \" + expectedMods);\n@@ -94,1 +98,1 @@\n-        test(new TestGetModifiers().new T5().getClass(),    IDENTITY);\n+        test(new TestGetModifiers().new T5().getClass(),       IDENTITY);\n@@ -105,9 +109,9 @@\n-        test(int[].class,                                   PUBLIC | ABSTRACT | FINAL);\n-        test(long[].class,                                  PUBLIC | ABSTRACT | FINAL);\n-        test(double[].class,                                PUBLIC | ABSTRACT | FINAL);\n-        test(float[].class,                                 PUBLIC | ABSTRACT | FINAL);\n-        test(char[].class,                                  PUBLIC | ABSTRACT | FINAL);\n-        test(byte[].class,                                  PUBLIC | ABSTRACT | FINAL);\n-        test(short[].class,                                 PUBLIC | ABSTRACT | FINAL);\n-        test(Object[].class,                                PUBLIC | ABSTRACT | FINAL);\n-        test(TestGetModifiers[].class,                      PUBLIC | ABSTRACT | FINAL);\n+        test(int[].class,                                   PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(long[].class,                                  PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(double[].class,                                PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(float[].class,                                 PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(char[].class,                                  PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(byte[].class,                                  PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(short[].class,                                 PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(Object[].class,                                PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n+        test(TestGetModifiers[].class,                      PUBLIC | ABSTRACT | FINAL | (PreviewFeatures.isEnabled() ? IDENTITY : 0));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/klass\/TestGetModifiers.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"}]}