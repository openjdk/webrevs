{"files":[{"patch":"@@ -1335,1 +1335,1 @@\n-                        if (v.owner.kind == TYP && v.owner.isValueClass() && !v.isStatic()) {\n+                        if (v.owner.kind == TYP && !v.isStatic() && v.isStrict()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-                                    varDecl.sym.owner.isValueClass() &&\n+                                    varDecl.sym.isStrict() &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2768,1 +2768,1 @@\n-                if (tree.sym.owner.isValueClass()) {\n+                if (tree.sym.owner.isValueClass() || tree.sym.owner.hasStrict()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1071,0 +1071,47 @@\n+\n+            assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.NullRestricted;\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class StrictNR {\n+                        static value class IValue {\n+                            int i = 0;\n+                        }\n+                        value class SValue {\n+                            short s = 0;\n+                        }\n+                        @Strict\n+                        @NullRestricted\n+                        IValue val = new IValue();\n+                        @Strict\n+                        @NullRestricted\n+                        final IValue val2;\n+                        @Strict\n+                        @NullRestricted\n+                        SValue val3 = new SValue();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.NullRestricted;\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class StrictNR {\n+                        static value class IValue {\n+                            int i = 0;\n+                        }\n+                        value class SValue {\n+                            short s = 0;\n+                        }\n+                        @Strict\n+                        @NullRestricted\n+                        IValue val = new IValue();\n+                            @Strict\n+                            @NullRestricted\n+                            SValue val4;\n+                        public StrictNR() {\n+                            val4 = new SValue();\n+                        }\n+                    }\n+                    \"\"\"\n+            );\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}