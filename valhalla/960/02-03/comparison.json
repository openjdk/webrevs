{"files":[{"patch":"@@ -140,1 +140,0 @@\n-JVM_GetZeroInstance\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1140,3 +1140,0 @@\n-JNIEXPORT jobject JNICALL\n-JVM_GetZeroInstance(JNIEnv *env, jclass cls);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -426,17 +426,0 @@\n-JVM_ENTRY(jobject, JVM_GetZeroInstance(JNIEnv *env, jclass cls)) {\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(cls));\n-  k->initialize(CHECK_NULL);\n-  if (!k->is_value_class()) {\n-    ResourceMark rm;\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), err_msg(\"%s not a value class\", k->external_name()));\n-  }\n-  InlineKlass* vk = InlineKlass::cast(k);\n-  if (!vk->is_implicitly_constructible()) {\n-    ResourceMark rm;\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), err_msg(\"%s not implicitly constructible\", vk->external_name()));\n-  }\n-  oop v = vk->default_value();\n-  return JNIHandles::make_local(THREAD, v);\n-}\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -347,0 +347,7 @@\n+UNSAFE_ENTRY(jobject, Unsafe_UninitializedDefaultValue(JNIEnv *env, jobject unsafe, jclass vc)) {\n+  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(vc));\n+  InlineKlass* vk = InlineKlass::cast(k);\n+  oop v = vk->default_value();\n+  return JNIHandles::make_local(THREAD, v);\n+} UNSAFE_END\n+\n@@ -1000,0 +1007,1 @@\n+    {CC \"uninitializedDefaultValue\", CC \"(\" CLS \")\" OBJ,         FN_PTR(Unsafe_UninitializedDefaultValue)},\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1965,1 +1965,2 @@\n-            Object obj = ValueClass.zeroInstance(clazz);\n+            \/\/ may not be implicitly constructible; so allocate with Unsafe\n+            Object obj = UNSAFE.uninitializedDefaultValue(clazz);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -314,0 +314,5 @@\n+    \/**\n+     * Returns an uninitialized default instance of the given value class.\n+     *\/\n+    public native <V> V uninitializedDefaultValue(Class<?> type);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -35,1 +36,1 @@\n-    private static final JavaLangAccess javaLangAccess = SharedSecrets.getJavaLangAccess();\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -49,1 +50,9 @@\n-    public static native <T> T zeroInstance(Class<T> cls);\n+    public static <T> T zeroInstance(Class<T> cls) {\n+        if (!cls.isValue()) {\n+            throw new IllegalArgumentException(cls.getName() + \" not a value class\");\n+        }\n+        if (!isImplicitlyConstructible(cls)) {\n+            throw new IllegalArgumentException(cls.getName() + \" not implicitly constructible\");\n+        }\n+        return UNSAFE.uninitializedDefaultValue(cls);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/ValueClass.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,5 +36,0 @@\n-JNIEXPORT jobject JNICALL\n-Java_jdk_internal_value_ValueClass_zeroInstance(JNIEnv *env, jclass dummy, jclass cls) {\n-    return JVM_GetZeroInstance(env, cls);\n-}\n-\n","filename":"src\/java.base\/share\/native\/libjava\/ValueClass.c","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}