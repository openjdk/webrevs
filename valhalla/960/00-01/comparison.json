{"files":[{"patch":"@@ -1304,1 +1304,1 @@\n-    MN_NULL_RESTRICTED_FIELD = 0x01000000, \/\/ null-restricted fiel\n+    MN_NULL_RESTRICTED_FIELD = 0x01000000, \/\/ null-restricted field\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -634,3 +634,3 @@\n-            FT_CHECKED_VALUE    = FT_LAST_WRAPPER+2,  \/\/ flattened and non-flattened\n-            FT_LIMIT            = FT_LAST_WRAPPER+4;\n-    private static int afIndex(byte formOp, boolean isVolatile, boolean isFlatValue, int ftypeKind) {\n+            FT_CHECKED_VALUE    = FT_LAST_WRAPPER+2,  \/\/ flattened and non-flattened and null-restricted\n+            FT_LIMIT            = FT_LAST_WRAPPER+6;\n+    private static int afIndex(byte formOp, boolean isVolatile, boolean isFlatValue, boolean isNullRestricted, int ftypeKind) {\n@@ -640,0 +640,1 @@\n+                + (isNullRestricted ? 1 : 0)\n@@ -644,1 +645,1 @@\n-            = new LambdaForm[afIndex(AF_LIMIT, false, false, 0)];\n+            = new LambdaForm[afIndex(AF_LIMIT, false, false, false, 0)];\n@@ -689,1 +690,1 @@\n-        int afIndex = afIndex(formOp, isVolatile, isFlat, ftypeKind);\n+        int afIndex = afIndex(formOp, isVolatile, isFlat, isNullRestricted, ftypeKind);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -128,2 +128,1 @@\n-        \/\/ FIXME\n-        \/\/ setField(MixedValues.class, \"staticValue\", null, vo, false);\n+        setField(MixedValues.class, \"staticValue\", null, vo, false);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -55,1 +56,1 @@\n-        assertTrue(new EmptyContainer() == EmptyContainer.default);\n+        assertTrue(new EmptyContainer() == ValueClass.zeroInstance(EmptyContainer.class));\n@@ -61,1 +62,1 @@\n-        assertTrue(mh.invoke(new EmptyContainer()) == MyValueEmpty.default);\n+        assertTrue(mh.invoke(new EmptyContainer()) == ValueClass.zeroInstance(MyValueEmpty.class));\n@@ -67,1 +68,1 @@\n-        assertTrue(vh.get(new EmptyContainer()) == MyValueEmpty.default);\n+        assertTrue(vh.get(new EmptyContainer()) == ValueClass.zeroInstance(MyValueEmpty.class));\n@@ -73,1 +74,1 @@\n-        assertTrue(f.get(new EmptyContainer()) == MyValueEmpty.default);\n+        assertTrue(f.get(new EmptyContainer()) == ValueClass.zeroInstance(MyValueEmpty.class));\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}