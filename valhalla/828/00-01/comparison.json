{"files":[{"patch":"@@ -683,1 +683,3 @@\n-  if (is_default(phase) && inline_klass()->is_initialized() &&\n+  if (!is_larval(phase) &&\n+      is_default(phase) &&\n+      inline_klass()->is_initialized() &&\n@@ -915,1 +917,1 @@\n-  InlineTypeNode* vt = make_uninitialized(kit->gvn(), vk);\n+  InlineTypeNode* res = make_uninitialized(kit->gvn(), vk);\n@@ -917,1 +919,1 @@\n-    vt->set_req(i, in(i));\n+    res->set_req(i, in(i));\n@@ -920,1 +922,0 @@\n-  Node* alloc_oop = NULL;\n@@ -926,1 +927,1 @@\n-    alloc_oop = kit->new_instance(klass_node, NULL, NULL, true);\n+    Node* alloc_oop  = kit->new_instance(klass_node, NULL, NULL, true);\n@@ -931,1 +932,1 @@\n-    vt->set_oop(alloc_oop);\n+    res->set_oop(alloc_oop);\n@@ -934,12 +935,2 @@\n-  \/\/vt->set_type(TypeInlineType::make(vk, true));\n-  InlineTypeNode* res = kit->gvn().transform(vt)->as_InlineType();\n-  \/\/ Set larval state to the current oop if it is not the allocated\n-  \/\/ private buffer. This is a temporary fix for the larval state\n-  \/\/ assertion failure in \"Unsafe_FinishPrivateBuffer()\".\n-  Node* oop = res->get_oop();\n-  if (allocate && oop != alloc_oop) {\n-    Node* mark_addr = kit->basic_plus_adr(oop, oopDesc::mark_offset_in_bytes());\n-    Node* mark = kit->make_load(NULL, mark_addr, TypeX_X, TypeX_X->basic_type(), MemNode::unordered);\n-    mark = kit->gvn().transform(new OrXNode(mark, kit->MakeConX(markWord::larval_bit_in_place)));\n-    kit->store_to_memory(kit->control(), mark_addr, mark, TypeX_X->basic_type(), kit->gvn().type(mark_addr)->is_ptr(), MemNode::unordered);\n-  }\n+  \/\/res->set_type(TypeInlineType::make(vk, true));\n+  res = kit->gvn().transform(res)->as_InlineType();\n@@ -974,0 +965,10 @@\n+bool InlineTypeNode::is_larval(PhaseGVN* gvn) const {\n+  if (!is_allocated(gvn)) {\n+    return false;\n+  }\n+\n+  Node* oop = get_oop();\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(oop, gvn);\n+  return alloc != NULL && alloc->_larval;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+  \/\/ Checks if the inline type oop is an allocated buffer with larval state\n+  bool is_larval(PhaseGVN* gvn) const;\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}