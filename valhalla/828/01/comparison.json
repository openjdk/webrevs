{"files":[{"patch":"@@ -683,1 +683,3 @@\n-  if (is_default(phase) && inline_klass()->is_initialized() &&\n+  if (!is_larval(phase) &&\n+      is_default(phase) &&\n+      inline_klass()->is_initialized() &&\n@@ -963,0 +965,10 @@\n+bool InlineTypeNode::is_larval(PhaseGVN* gvn) const {\n+  if (!is_allocated(gvn)) {\n+    return false;\n+  }\n+\n+  Node* oop = get_oop();\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(oop, gvn);\n+  return alloc != NULL && alloc->_larval;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+  \/\/ Checks if the inline type oop is an allocated buffer with larval state\n+  bool is_larval(PhaseGVN* gvn) const;\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8303416\n+ * @summary Fix JVM crash at Unsafe_FinishPrivateBuffer\n+ * @library \/test\/lib\n+ * @compile -XDenablePrimitiveClasses\n+ *          --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+ *          TestLarvalState.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+ *                   compiler.valhalla.inlinetypes.TestLarvalState\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import java.lang.reflect.*;\n+import java.util.Random;\n+\n+import jdk.internal.misc.Unsafe;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+public class TestLarvalState {\n+    private static int LENGTH = 10000;\n+\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    static byte[] arr = new byte[LENGTH];\n+\n+    static {\n+        for (int i = 0; i < LENGTH; i++) {\n+            arr[i] = (byte) RD.nextInt(127);\n+        }\n+    }\n+\n+    public static byte test(byte b) {\n+        Value obj = new Value();\n+        obj = Unsafe.getUnsafe().makePrivateBuffer(obj);\n+        Unsafe.getUnsafe().putByte(obj, obj.offset, b);\n+        obj = Unsafe.getUnsafe().finishPrivateBuffer(obj);\n+        return Unsafe.getUnsafe().getByte(obj, obj.offset);\n+    }\n+\n+    public static void main(String[] args) {\n+        byte actual = 0;\n+        for (int i = 0; i < LENGTH; i++) {\n+            actual += test(arr[i]);\n+        }\n+\n+        byte expected = 0;\n+        for (int i = 0; i < LENGTH; i++) {\n+            expected += arr[i];\n+        }\n+        Asserts.assertEquals(expected, actual);\n+    }\n+\n+    primitive static class Value {\n+        byte field = 0;\n+\n+        static long offset = fieldOffset();\n+\n+        private static long fieldOffset() {\n+            try {\n+                var f = Value.class.getDeclaredField(\"field\");\n+                return Unsafe.getUnsafe().objectFieldOffset(f);\n+            } catch (Exception e) {\n+                System.out.println(e);\n+            }\n+            return -1L;\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLarvalState.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}