{"files":[{"patch":"@@ -1475,3 +1475,5 @@\n-  Node* uin = unique_input(phase, false);\n-  if (uin != nullptr) {\n-    return uin;\n+  {\n+    Node* uin = unique_input(phase, false);\n+    if (uin != nullptr) {\n+      return uin;\n+    }\n@@ -1479,3 +1481,5 @@\n-  uin = unique_input_recursive(phase);\n-  if (uin != nullptr) {\n-    return uin;\n+  {\n+    Node* uin = unique_constant_input_recursive(phase);\n+    if (uin != nullptr) {\n+      return uin;\n+    }\n@@ -1583,1 +1587,1 @@\n-Node* PhiNode::unique_input_recursive(PhaseGVN* phase) {\n+Node* PhiNode::unique_constant_input_recursive(PhaseGVN* phase) {\n@@ -1605,0 +1609,3 @@\n+          if (!phi_in->is_Con()) {\n+            return nullptr;\n+          }\n@@ -2121,0 +2128,3 @@\n+      if (n->is_top()) {\n+        break;\n+      }\n@@ -2123,1 +2133,5 @@\n-    vt->merge_with(phase, n->as_InlineType(), i, transform);\n+    if (n->is_top()) {\n+      vt->merge_with_top(phase, i, transform);\n+    } else {\n+      vt->merge_with(phase, n->as_InlineType(), i, transform);\n+    }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  Node* unique_input_recursive(PhaseGVN* phase);\n+  Node* unique_constant_input_recursive(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,44 @@\n+\/\/ Merges 'this' with 'top' by updating the input PhiNodes added by 'clone_with_phis'\n+InlineTypeNode* InlineTypeNode::merge_with_top(PhaseGVN* gvn, int pnum, bool transform) {\n+  \/\/ Merge oop inputs\n+  PhiNode* phi = get_oop()->as_Phi();\n+  phi->set_req(pnum, gvn->C->top());\n+  if (transform) {\n+    set_oop(*gvn, gvn->transform(phi));\n+  }\n+\n+  \/\/ Merge is_buffered inputs\n+  phi = get_is_buffered()->as_Phi();\n+  phi->set_req(pnum, gvn->C->top());\n+  if (transform) {\n+    set_req(IsBuffered, gvn->transform(phi));\n+  }\n+\n+  \/\/ Merge null_marker inputs\n+  Node* null_marker = get_null_marker();\n+  if (null_marker->is_Phi()) {\n+    phi = null_marker->as_Phi();\n+    phi->set_req(pnum, gvn->C->top());\n+    if (transform) {\n+      set_req(NullMarker, gvn->transform(phi));\n+    }\n+  } else {\n+    assert(null_marker->find_int_con(0) == 1, \"only with a non null inline type\");\n+  }\n+\n+  \/\/ Merge field values\n+  for (uint i = 0; i < field_count(); ++i) {\n+    Node* val1 = field_value(i);\n+    if (val1->is_InlineType()) {\n+      val1->as_InlineType()->merge_with_top(gvn, pnum, transform);\n+    } else {\n+      assert(val1->is_Phi(), \"must be a phi node\");\n+      val1->set_req(pnum, gvn->C->top());\n+    }\n+    if (transform) {\n+      set_field_value(i, gvn->transform(val1));\n+    }\n+  }\n+  return this;\n+}\n+\n@@ -210,1 +254,1 @@\n-  if (!recursive || !field_is_flat(index)) {\n+  if (!recursive || !field_is_flat(index) || value->is_top()) {\n@@ -1639,0 +1683,3 @@\n+  if (toop == Type::TOP) {\n+    return Type::TOP;\n+  }\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+  InlineTypeNode* merge_with_top(PhaseGVN* gvn, int pnum, bool transform);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -783,1 +783,1 @@\n-    if (!no_dead_loop) n->dump_bfs(100,nullptr,\"#\");\n+    if (!no_dead_loop) n->dump_bfs(100,nullptr,\"\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}