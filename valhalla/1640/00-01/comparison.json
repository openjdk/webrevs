{"files":[{"patch":"@@ -2092,1 +2092,1 @@\n-  InlineTypeNode* vt = InlineTypeNode::make_null(*phase, inline_klass, \/* transform = *\/ false)->clone_with_phis(phase, in(0), nullptr, !_type->maybe_null());\n+  InlineTypeNode* vt = InlineTypeNode::make_null(*phase, inline_klass, \/* transform = *\/ false)->clone_with_phis(phase, in(0), nullptr, !_type->maybe_null(), true);\n@@ -2133,3 +2133,2 @@\n-    if (n->is_top()) {\n-      vt->merge_with_top(phase, i, transform);\n-    } else {\n+    assert(n->is_top() || n->is_InlineType(), \"Only InlineType or top at this point.\");\n+    if (n->is_InlineType()) {\n@@ -2137,1 +2136,1 @@\n-    }\n+    } \/\/ else nothing to do: phis above vt created by clone_with_phis are initialized to top already.\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map, bool is_non_null) {\n+\/\/ top_for_other_inputs: input of phis above the returned InlineTypeNode are initialized to top.\n+InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map, bool is_non_null, bool phi_input_are_top) {\n@@ -51,0 +52,2 @@\n+  Node* const top = gvn->C->top();\n+\n@@ -52,1 +55,6 @@\n-  PhiNode* oop = PhiNode::make(region, vt->get_oop(), t);\n+  PhiNode* oop;\n+  if (phi_input_are_top) {\n+    oop = PhiNode::make(region, top, t);\n+  } else {\n+    oop = PhiNode::make(region, vt->get_oop(), t);\n+  }\n@@ -59,1 +67,6 @@\n-  Node* is_buffered_node = PhiNode::make(region, vt->get_is_buffered(), t);\n+  Node* is_buffered_node;\n+  if (phi_input_are_top) {\n+    is_buffered_node = PhiNode::make(region, top, t);\n+  } else {\n+    is_buffered_node = PhiNode::make(region, vt->get_is_buffered(), t);\n+  }\n@@ -70,1 +83,5 @@\n-    null_marker_node = PhiNode::make(region, vt->get_null_marker(), t);\n+    if (phi_input_are_top) {\n+      null_marker_node = PhiNode::make(region, top, t);\n+    } else {\n+      null_marker_node = PhiNode::make(region, vt->get_null_marker(), t);\n+    }\n@@ -89,1 +106,5 @@\n-      value = PhiNode::make(region, value, t);\n+      if (phi_input_are_top) {\n+        value = PhiNode::make(region, top, t);\n+      } else {\n+        value = PhiNode::make(region, value, t);\n+      }\n@@ -168,44 +189,0 @@\n-}\n-\n-\/\/ Merges 'this' with 'top' by updating the input PhiNodes added by 'clone_with_phis'\n-InlineTypeNode* InlineTypeNode::merge_with_top(PhaseGVN* gvn, int pnum, bool transform) {\n-  \/\/ Merge oop inputs\n-  PhiNode* phi = get_oop()->as_Phi();\n-  phi->set_req(pnum, gvn->C->top());\n-  if (transform) {\n-    set_oop(*gvn, gvn->transform(phi));\n-  }\n-\n-  \/\/ Merge is_buffered inputs\n-  phi = get_is_buffered()->as_Phi();\n-  phi->set_req(pnum, gvn->C->top());\n-  if (transform) {\n-    set_req(IsBuffered, gvn->transform(phi));\n-  }\n-\n-  \/\/ Merge null_marker inputs\n-  Node* null_marker = get_null_marker();\n-  if (null_marker->is_Phi()) {\n-    phi = null_marker->as_Phi();\n-    phi->set_req(pnum, gvn->C->top());\n-    if (transform) {\n-      set_req(NullMarker, gvn->transform(phi));\n-    }\n-  } else {\n-    assert(null_marker->find_int_con(0) == 1, \"only with a non null inline type\");\n-  }\n-\n-  \/\/ Merge field values\n-  for (uint i = 0; i < field_count(); ++i) {\n-    Node* val1 = field_value(i);\n-    if (val1->is_InlineType()) {\n-      val1->as_InlineType()->merge_with_top(gvn, pnum, transform);\n-    } else {\n-      assert(val1->is_Phi(), \"must be a phi node\");\n-      val1->set_req(pnum, gvn->C->top());\n-    }\n-    if (transform) {\n-      set_field_value(i, gvn->transform(val1));\n-    }\n-  }\n-  return this;\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":26,"deletions":49,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  InlineTypeNode* clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map = nullptr, bool is_non_null = false);\n+  InlineTypeNode* clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map = nullptr, bool is_non_null = false, bool phi_input_are_top = false);\n@@ -106,1 +106,0 @@\n-  InlineTypeNode* merge_with_top(PhaseGVN* gvn, int pnum, bool transform);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -783,1 +783,1 @@\n-    if (!no_dead_loop) n->dump_bfs(100,nullptr,\"\");\n+    if (!no_dead_loop) n->dump_bfs(100,nullptr,\"#\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}