{"files":[{"patch":"@@ -27,1 +27,2 @@\n- * @compile --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XDgenerateAssertUnsetFieldsFrame StrictFinalInstanceFieldsTest.java\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.test.lib.value.StrictCompiler StrictFinalInstanceFieldsTest.java\n@@ -31,1 +32,1 @@\n-import jdk.internal.vm.annotation.Strict;\n+import jdk.test.lib.value.Strict;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFinalInstanceFieldsTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8351362\n+ * @summary Unit Test for StrictCompiler\n+ * @enablePreview\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.test.lib.value.StrictCompiler StrictCompilerTest.java\n+ * @run junit StrictCompilerTest\n+ *\/\n+\n+import jdk.test.lib.value.Strict;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.lang.classfile.ClassFile.ACC_FINAL;\n+import static java.lang.classfile.ClassFile.ACC_STRICT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class StrictCompilerTest {\n+    @Test\n+    void testReflectMyself() throws Throwable {\n+        for (var field : One.class.getDeclaredFields()) {\n+            assertEquals(ACC_STRICT | ACC_FINAL, field.getModifiers(), () -> field.getName());\n+        }\n+    }\n+}\n+\n+class One {\n+    @Strict\n+    final int a;\n+    @Strict\n+    final Object b;\n+\n+    One() {\n+        this.a = 1;\n+        this.b = 2392352234L;\n+        super();\n+    }\n+}\n","filename":"test\/lib-test\/jdk\/test\/lib\/StrictCompilerTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -219,1 +219,5 @@\n-        Collection<JavaFileObject> sourceFiles = new LinkedList<JavaFileObject>();\n+        return compile(inputMap, new String[0]);\n+    }\n+\n+    public static Map<String, byte[]> compile(Map<String, ? extends CharSequence> inputMap, String... options) {\n+        Collection<JavaFileObject> sourceFiles = new ArrayList<>();\n@@ -228,1 +232,1 @@\n-        Boolean exitCode = compiler.getTask(writer, fileManager, null, null, null, sourceFiles).call();\n+        Boolean exitCode = compiler.getTask(writer, fileManager, null, Arrays.asList(options), null, sourceFiles).call();\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.value;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * Annotation to indicate the compiler that the ACC_STRICT flag should be set to\n+ * the annotated field. Used by StrictTransformer.\n+ *\/\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Strict {\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/value\/Strict.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.value;\n+\n+import java.io.IOException;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+\n+import static java.lang.classfile.ClassFile.ACC_STRICT;\n+\n+\/**\n+ * Compile a java file with InMemoryJavaCompiler, and then modify the resulting\n+ * class file to include strict modifier and null restriction attributes.\n+ *\/\n+public final class StrictCompiler {\n+    public static final String TEST_SRC = System.getProperty(\"test.src\", \"\").trim();\n+    public static final String TEST_CLASSES = System.getProperty(\"test.classes\", \"\").trim();\n+    private static final ClassDesc CD_Strict = ClassDesc.of(\"jdk.test.lib.value.Strict\");\n+    \/\/ NR will stay in jdk.internal for now until we expose as a more formal feature\n+    private static final ClassDesc CD_NullRestricted = ClassDesc.of(\"jdk.internal.vm.annotation.NullRestricted\");\n+\n+    \/**\n+     * @param args source and destination\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n+    public static void main(String[] args) throws IOException {\n+        Map<String, String> ins = new HashMap<>();\n+        List<String> opts = new ArrayList<>();\n+        for (var a : args) {\n+            if (a.endsWith(\".java\")) {\n+                String className = a.substring(0, a.length() - 5);\n+                Path src = Path.of(TEST_SRC, a);\n+                ins.put(className, Files.readString(src));\n+            } else {\n+                opts.add(a);\n+            }\n+        }\n+        if (!opts.contains(\"--source\")) {\n+            opts.add(\"--source\");\n+            opts.add(String.valueOf(Runtime.version().feature()));\n+        }\n+        if (!opts.contains(\"--enable-preview\")) {\n+            opts.add(\"--enable-preview\");\n+        }\n+        var classes = InMemoryJavaCompiler.compile(ins, opts.toArray(String[]::new));\n+        Files.createDirectories(Path.of(TEST_CLASSES));\n+        for (var entry : classes.entrySet()) {\n+            dumpClass(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    private static void dumpClass(String name, byte[] rawBytes) throws IOException {\n+        var cm = ClassFile.of().parse(rawBytes);\n+        var transformed = ClassFile.of().transformClass(cm, ClassTransform.transformingFields(new FieldTransform() {\n+            int oldAccessFlags;\n+            boolean nullRestricted;\n+            boolean strict;\n+\n+            @Override\n+            public void accept(FieldBuilder builder, FieldElement element) {\n+                if (element instanceof AccessFlags af) {\n+                    oldAccessFlags = af.flagsMask();\n+                    return;\n+                }\n+                builder.with(element);\n+                if (element instanceof RuntimeVisibleAnnotationsAttribute rvaa) {\n+                    for (var anno : rvaa.annotations()) {\n+                        var descString = anno.className();\n+                        if (descString.equalsString(CD_Strict.descriptorString())) {\n+                            strict = true;\n+                        } else if (descString.equalsString(CD_NullRestricted.descriptorString())) {\n+                            nullRestricted = true;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void atEnd(FieldBuilder builder) {\n+                if (strict) {\n+                    oldAccessFlags |= ACC_STRICT;\n+                }\n+                builder.withFlags(oldAccessFlags);\n+                assert !nullRestricted || strict : name;\n+            }\n+        }));\n+\n+        Path dst = Path.of(TEST_CLASSES, name + \".class\");\n+        Files.write(dst, transformed);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/value\/StrictCompiler.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}