{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n@@ -38,0 +40,2 @@\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Modifier;\n@@ -39,0 +43,1 @@\n+import java.util.stream.Stream;\n@@ -41,1 +46,2 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -49,3 +55,20 @@\n-    @Test\n-    void testReflectRewrittenRecord() throws Throwable {\n-        for (var field : Rec.class.getDeclaredFields()) {\n+    static Stream<Class<?>> testClasses() {\n+        return Stream.of(Rec.class, Exp.class, Inner.class);\n+    }\n+\n+    static Stream<ClassModel> testClassModels() {\n+        return testClasses().map(cls -> {\n+            try (var in = StrictCompilerSuperTest.class.getResourceAsStream(\"\/\" + cls.getName() + \".class\")) {\n+                return ClassFile.of().parse(in.readAllBytes());\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        });\n+    }\n+\n+    @MethodSource(\"testClasses\")\n+    @ParameterizedTest\n+    void testReflectRewrittenRecord(Class<?> cls) throws Throwable {\n+        for (var field : cls.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) || field.isSynthetic())\n+                continue;\n@@ -56,6 +79,3 @@\n-    @Test\n-    void testRewrittenStrictAccessInClassFile() throws Throwable {\n-        ClassModel cm;\n-        try (var in = StrictCompilerSuperTest.class.getResourceAsStream(\"\/StrictCompilerSuperTest$Rec.class\")) {\n-            cm = ClassFile.of().parse(in.readAllBytes());\n-        }\n+    @MethodSource(\"testClassModels\")\n+    @ParameterizedTest\n+    void testRewrittenStrictAccessInClassFile(ClassModel cm) throws Throwable {\n@@ -63,0 +83,2 @@\n+            if (f.flags().has(AccessFlag.STATIC) || f.flags().has(AccessFlag.SYNTHETIC))\n+                continue;\n@@ -67,6 +89,3 @@\n-    @Test\n-    void testRewrittenCtorBytecode() throws Throwable {\n-        ClassModel cm;\n-        try (var in = StrictCompilerSuperTest.class.getResourceAsStream(\"\/StrictCompilerSuperTest$Rec.class\")) {\n-            cm = ClassFile.of().parse(in.readAllBytes());\n-        }\n+    @MethodSource(\"testClassModels\")\n+    @ParameterizedTest\n+    void testRewrittenCtorBytecode(ClassModel cm) throws Throwable {\n@@ -84,1 +103,28 @@\n-    record Rec(@Strict int a, @Strict long b) {}\n+    record Rec(@Strict int a, @Strict long b) {\n+        static final String NOISE = \"noise\";\n+    }\n+\n+    static class Exp {\n+        private @Strict final int a;\n+        private @Strict final long b;\n+\n+        Exp(int a, long b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+    }\n+\n+    class Inner {\n+        private @Strict final int a;\n+        private @Strict final long b;\n+\n+        Inner(int a, long b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return a + \" \" + StrictCompilerSuperTest.this + \" \" + b;\n+        }\n+    }\n","filename":"test\/lib-test\/jdk\/test\/lib\/StrictCompilerSuperTest.java","additions":63,"deletions":17,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -107,1 +108,1 @@\n-        Set<FieldKey> strictFinals = new HashSet<>();\n+        Set<FieldKey> strictInstances = new HashSet<>();\n@@ -109,0 +110,2 @@\n+            if (f.flags().has(AccessFlag.STATIC))\n+                continue;\n@@ -114,1 +117,1 @@\n-                        strictFinals.add(new FieldKey(f.fieldName(), f.fieldType()));\n+                        strictInstances.add(new FieldKey(f.fieldName(), f.fieldType()));\n@@ -148,1 +151,1 @@\n-                                strictFinals.contains(new FieldKey(ins.name(), ins.type()))) {\n+                                strictInstances.contains(new FieldKey(ins.name(), ins.type()))) {\n@@ -194,1 +197,1 @@\n-        var transformed = ClassFile.of().transformClass(cm, ClassTransform.transformingFields(new FieldTransform() {\n+        var transformed = ClassFile.of().transformClass(cm, ClassTransform.transformingFields(FieldTransform.ofStateful(() -> new FieldTransform() {\n@@ -226,1 +229,1 @@\n-        }));\n+        })));\n","filename":"test\/lib\/jdk\/test\/lib\/value\/StrictCompiler.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}