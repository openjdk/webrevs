{"files":[{"patch":"@@ -3506,1 +3506,1 @@\n-Node* GraphKit::gen_checkcast(Node *obj, Node* superklass, Node* *failure_control, bool null_free) {\n+Node* GraphKit::gen_checkcast(Node* obj, Node* superklass, Node* *failure_control, bool null_free) {\n@@ -3509,0 +3509,13 @@\n+  const Type* obj_type = _gvn.type(obj);\n+  if (obj_type->is_inlinetypeptr() && !obj_type->maybe_null() && klass_ptr_type->klass_is_exact() && obj_type->inline_klass() == klass_ptr_type->exact_klass(true)) {\n+    \/\/ Special case: larval inline objects must not be scalarized. They are also generally not\n+    \/\/ allowed to participate in most operations except as the first operand of putfield, or as an\n+    \/\/ argument to a constructor invocation with it being a receiver, Unsafe::putXXX with it being\n+    \/\/ the first argument, or Unsafe::finishPrivateBuffer. This allows us to aggressively scalarize\n+    \/\/ value objects in all other places. This special case comes from the limitation of the Java\n+    \/\/ language, Unsafe::makePrivateBuffer returns an Object that is checkcast-ed to the concrete\n+    \/\/ value type. We must do this first because C->static_subtype_check may do nothing when\n+    \/\/ StressReflectiveCode is set.\n+    return obj;\n+  }\n+\n@@ -3522,3 +3535,2 @@\n-    const Type* t = _gvn.type(obj);\n-    if (t->isa_oop_ptr()) {\n-      kptr = t->is_oopptr()->as_klass_type();\n+    if (obj_type->isa_oop_ptr()) {\n+      kptr = obj_type->is_oopptr()->as_klass_type();\n@@ -3526,1 +3538,1 @@\n-      ciInlineKlass* vk = t->inline_klass();\n+      ciInlineKlass* vk = obj_type->inline_klass();\n@@ -3531,11 +3543,0 @@\n-      if (t->is_inlinetypeptr() && !t->maybe_null() && kptr == improved_klass_ptr_type) {\n-        \/\/ Special case: larval inline objects must not be scalarized. They are also generally not\n-        \/\/ allowed to participate in most operations except as an argument to Unsafe::putXXX or\n-        \/\/ Unsafe::finishPrivateBuffer. This allows us to aggressively scalarize value objects in\n-        \/\/ all other places. This special case comes from the limitation of the Java language,\n-        \/\/ Unsafe::makePrivateBuffer returns an Object that is checkcast-ed to the concrete value\n-        \/\/ type. We must do this first because C->static_subtype_check may do nothing when\n-        \/\/ StressReflectiveCode is set.\n-        return obj;\n-      }\n-\n@@ -3560,1 +3561,1 @@\n-        if (t->isa_oopptr() != nullptr && !t->is_oopptr()->maybe_null()) {\n+        if (obj_type->isa_oopptr() != nullptr && !obj_type->is_oopptr()->maybe_null()) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"}]}