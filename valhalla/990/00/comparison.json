{"files":[{"patch":"@@ -363,1 +363,1 @@\n-    STRICT(Modifier.STRICT, true, Location.EMPTY_SET,\n+    STRICT(0x0000_0800, true, !ValhallaFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_FIELD,\n@@ -367,4 +367,9 @@\n-                   return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2)  >= 0 &&\n-                           cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n-                       Location.SET_METHOD:\n-                       Location.EMPTY_SET;}\n+                   if (ValhallaFeatures.isEnabled() && cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0) {\n+                       return Location.SET_FIELD;\n+                   } else {\n+                       return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2) >= 0 &&\n+                               cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n+                               Location.SET_METHOD :\n+                               Location.EMPTY_SET;\n+                   }\n+               }\n@@ -530,1 +535,1 @@\n-            if ((mask & accessMask) != 0) {\n+            if ((mask &  accessMask) != 0) {\n@@ -707,1 +712,1 @@\n-                                       TRANSIENT, SYNTHETIC, ENUM)),\n+                                       TRANSIENT, SYNTHETIC, ENUM, STRICT)),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-     * The {@code int} value representing the {@code strictfp}\n+     * The {@code int} value representing the {@code strict}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+    public static final int ACC_STRICT   = 0x0800;\n@@ -412,0 +413,5 @@\n+    \/**\n+     * Flag to indicate that a field is strict\n+     *\/\n+    public static final long STRICT = 1L<<51; \/\/ VarSymbols\n+\n@@ -447,0 +453,1 @@\n+        ExtendedVarFlags                  = (long) VarFlags | STRICT,\n@@ -572,1 +579,2 @@\n-        };\n+        },\n+        STRICT(Flags.STRICT);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1197,1 +1197,5 @@\n-                        tree.body.stats = tree.body.stats.prepend(supCall);\n+                        if (owner.isValueClass()) {\n+                            tree.body.stats = tree.body.stats.append(supCall);\n+                        } else {\n+                            tree.body.stats = tree.body.stats.prepend(supCall);\n+                        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1262,3 +1262,4 @@\n-                mask = VarFlags;\n-                if (sym.owner.type.isValueClass() && (flags & STATIC) == 0) {\n-                    implicit |= FINAL;\n+                boolean isInstanceFieldOfValueClass = sym.owner.type.isValueClass() && (flags & STATIC) == 0;\n+                mask = !isInstanceFieldOfValueClass ? VarFlags : ExtendedVarFlags;\n+                if (isInstanceFieldOfValueClass) {\n+                    implicit |= FINAL | STRICT;\n@@ -4094,0 +4095,1 @@\n+        ClassSymbol classSym;\n@@ -4096,0 +4098,1 @@\n+            classSym = classDef.sym;\n@@ -4168,1 +4171,1 @@\n-                if (!firstStatement)\n+                if (!firstStatement && !classSym.isValueClass()) \/\/ let's wave value classes for now\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-import static com.sun.tools.javac.comp.Flow.ThisExposability.ALLOWED;\n-import static com.sun.tools.javac.comp.Flow.ThisExposability.BANNED;\n@@ -2017,8 +2015,0 @@\n-    \/** Enum to model whether constructors allowed to \"leak\" this reference before\n-        all instance fields are DA.\n-     *\/\n-    enum ThisExposability {\n-        ALLOWED,     \/\/ identity Object classes - NOP\n-        BANNED,      \/\/ primitive\/value classes - Error\n-    }\n-\n@@ -2113,3 +2103,0 @@\n-        \/\/ Are constructors allowed to leak this reference ?\n-        ThisExposability thisExposability = ALLOWED;\n-\n@@ -2241,22 +2228,0 @@\n-        void checkEmbryonicThisExposure(JCTree node) {\n-            if (this.thisExposability == ALLOWED || classDef == null)\n-                return;\n-\n-            \/\/ Note: for non-initial constructors, firstadr is post all instance fields.\n-            for (int i = firstadr; i < nextadr; i++) {\n-                VarSymbol sym = vardecls[i].sym;\n-                if (sym.owner != classDef.sym)\n-                    continue;\n-                if ((sym.flags() & (FINAL | HASINIT | STATIC | PARAMETER)) != FINAL)\n-                    continue;\n-                if (sym.pos < startPos || sym.adr < firstadr)\n-                    continue;\n-                if (!inits.isMember(sym.adr)) {\n-                    if (this.thisExposability == BANNED) {\n-                        log.error(node, Errors.ThisExposedPrematurely);\n-                    }\n-                    return; \/\/ don't flog a dead horse.\n-                }\n-            }\n-        }\n-\n@@ -2456,1 +2421,0 @@\n-            ThisExposability priorThisExposability = this.thisExposability;\n@@ -2472,6 +2436,0 @@\n-                        this.thisExposability = ALLOWED;\n-                    } else {\n-                        if (tree.sym.owner.type.isValueClass())\n-                            this.thisExposability = BANNED;\n-                        else\n-                            this.thisExposability = ALLOWED;\n@@ -2542,1 +2500,0 @@\n-                this.thisExposability = priorThisExposability;\n@@ -3033,6 +2990,0 @@\n-\n-            if (tree.meth.hasTag(IDENT)) {\n-                JCIdent ident = (JCIdent) tree.meth;\n-                if (ident.name != names._super && !ident.sym.isStatic())\n-                    checkEmbryonicThisExposure(tree);\n-            }\n@@ -3045,6 +2996,0 @@\n-            if (classDef != null && tree.encl == null && tree.clazz.hasTag(IDENT)) {\n-                JCIdent clazz = (JCIdent) tree.clazz;\n-                if (!clazz.sym.isStatic() && clazz.type.getEnclosingType().tsym == classDef.sym) {\n-                    checkEmbryonicThisExposure(tree);\n-                }\n-            }\n@@ -3120,8 +3065,1 @@\n-            ThisExposability priorThisExposability = this.thisExposability;\n-            try {\n-                if (tree.name == names._this && classDef != null && tree.sym.owner == classDef.sym) {\n-                    checkEmbryonicThisExposure(tree);\n-                } else if (tree.sym.kind == VAR || tree.sym.isStatic()) {\n-                    this.thisExposability = ALLOWED;\n-                }\n-                super.visitSelect(tree);\n+            super.visitSelect(tree);\n@@ -3130,4 +3068,1 @@\n-                    checkInit(tree.pos(), (VarSymbol)tree.sym);\n-                }\n-            } finally {\n-                 this.thisExposability = priorThisExposability;\n+                checkInit(tree.pos(), (VarSymbol)tree.sym);\n@@ -3197,3 +3132,0 @@\n-            if (tree.name == names._this) {\n-                checkEmbryonicThisExposure(tree);\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":70,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1516,1 +1516,1 @@\n-                    if (env1.info.ctorPrologue && (sym.flags_field & SYNTHETIC) == 0)\n+                    if (env1.info.ctorPrologue && (sym.flags_field & SYNTHETIC) == 0 && !sym.owner.isValueClass())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3139,0 +3139,4 @@\n+        if ((flags & ACC_STRICT) != 0) {\n+            flags &= ~ACC_STRICT;\n+            flags |= STRICT;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1783,0 +1783,3 @@\n+        if ((flags & STRICT) != 0) {\n+            result |= ACC_STRICT;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -427,0 +427,2 @@\n+        \/\/ only used for value classes\n+        ListBuffer<JCStatement> initBlocks = new ListBuffer<>();\n@@ -442,2 +444,7 @@\n-                else if ((block.flags & SYNTHETIC) == 0)\n-                    initCode.append(block);\n+                else if ((block.flags & SYNTHETIC) == 0) {\n+                    if (c.isValueClass()) {\n+                        initBlocks.append(block);\n+                    } else {\n+                        initCode.append(block);\n+                    }\n+                }\n@@ -482,2 +489,1 @@\n-        if (initCode.length() != 0) {\n-            List<JCStatement> inits = initCode.toList();\n+        if (initCode.length() != 0 || initBlocks.length() != 0) {\n@@ -487,1 +493,1 @@\n-                normalizeMethod((JCMethodDecl)t, inits, initTAlist);\n+                normalizeMethod((JCMethodDecl)t, initCode.toList(), initBlocks.toList(), initTAlist);\n@@ -550,1 +556,1 @@\n-    void normalizeMethod(JCMethodDecl md, List<JCStatement> initCode, List<TypeCompound> initTAs) {\n+    void normalizeMethod(JCMethodDecl md, List<JCStatement> initCode, List<JCStatement> initBlocks,  List<TypeCompound> initTAs) {\n@@ -554,1 +560,5 @@\n-            TreeInfo.mapSuperCalls(md.body, supercall -> make.Block(0, initCode.prepend(supercall)));\n+            if (md.sym.owner.isValueClass()) {\n+                TreeInfo.mapSuperCalls(md.body, supercall -> make.Block(0, initCode.append(supercall).appendList(initBlocks)));\n+            } else {\n+                TreeInfo.mapSuperCalls(md.body, supercall -> make.Block(0, initCode.prepend(supercall)));\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -4060,3 +4060,0 @@\n-compiler.err.this.exposed.prematurely=\\\n-    value class instance should not be passed around before being fully initialized\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    public static final int ACC_STRICT        = 0x0800; \/\/                      method\n+    public static final int ACC_STRICT        = 0x0800; \/\/                      field\n@@ -130,1 +130,1 @@\n-        ACC_VOLATILE, ACC_TRANSIENT, ACC_SYNTHETIC, ACC_ENUM\n+        ACC_VOLATILE, ACC_TRANSIENT, ACC_SYNTHETIC, ACC_ENUM, ACC_STRICT\n@@ -206,2 +206,2 @@\n-            case 0x40:\n-                return (t == Kind.Class || t == Kind.InnerClass) ? \"value\" : \"volatile\";\n+            case ACC_VOLATILE:\n+                return \"volatile\";\n@@ -213,1 +213,1 @@\n-                return (t == Kind.Class || t == Kind.InnerClass) ? \"primitive\" : \"strictfp\";\n+                return (t == Kind.Field) ? \"strict\" : \"strictfp\";\n@@ -245,2 +245,2 @@\n-        case 0x800:\n-            return (t == Kind.Class || t == Kind.InnerClass) ? \"ACC_PRIMITIVE\" : \"ACC_STRICT\";\n+        case ACC_STRICT:\n+            return \"ACC_STRICT\";\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/AccessFlags.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-                case 'Q':\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Descriptor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -245,4 +245,0 @@\n-\n-    ACONST_INIT(203, CPREF_W),\n-    WITHFIELD(204, CPREF_W),\n-\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Opcode.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,0 @@\n-            case 'Q':\n@@ -195,1 +194,1 @@\n-        assert sig.charAt(sigp) == 'L' || sig.charAt(sigp) == 'Q';\n+        assert sig.charAt(sigp) == 'L';\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Signature.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -492,6 +492,0 @@\n-                case \"<vnew>\":\n-                    String returnType = getJavaName(sigPrinter.print(d.result()));\n-                    if (!returnType.equals(\"void\")) { \/\/ static factories for primitive classes\n-                        print(returnType);\n-                        print(\" \");\n-                    }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -152,1 +152,0 @@\n-            case 'Q':\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeprscan\/Pretty.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-                case 'Q':\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeprscan\/scan\/MethodSig.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/\/ key: compiler.err.this.exposed.prematurely\n+\/\/ key: compiler.err.cant.ref.before.ctor.called\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ThisExposedPrematurely.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-                \"         7: anewarray     #7                  \/\/ class ArrayCreationWithQuestion$VT\",\n-                \"        16: anewarray     #7                  \/\/ class ArrayCreationWithQuestion$VT\",\n+                \"         3: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n+                \"        12: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-        assertFail(\"compiler.err.this.exposed.prematurely\",\n+        assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n@@ -257,1 +257,1 @@\n-        assertOK(\n+        assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n@@ -263,1 +263,1 @@\n-                        foo(this); \/\/ Ok.\n+                        foo(this); \/\/ error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}