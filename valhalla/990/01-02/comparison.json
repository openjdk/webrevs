{"files":[{"patch":"@@ -535,1 +535,1 @@\n-            if ((mask &  accessMask) != 0) {\n+            if ((mask & accessMask) != 0) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4170,0 +4170,2 @@\n+                \/\/ valhalla is using this feature so commenting this code for now so that the\n+                \/\/ build doesn't depend on preview code\n@@ -4171,1 +4173,1 @@\n-                if (!firstStatement && !classSym.isValueClass()) \/\/ let's wave value classes for now\n+                \/*if (!firstStatement) {\n@@ -4173,0 +4175,1 @@\n+                }*\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1517,5 +1517,1 @@\n-                        if (sym.owner.isValueClass()) {\n-                            if (!env.tree.hasTag(ASSIGN) || !TreeInfo.isIdentOrThisDotIdent(((JCAssign)env.tree).lhs)) {\n-                                return new RefBeforeCtorCalledError(sym);\n-                            }\n-                        } else {\n+                        if (!env.tree.hasTag(ASSIGN) || !TreeInfo.isIdentOrThisDotIdent(((JCAssign)env.tree).lhs)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8324873\n+ * @summary [lworld] implementation of value classes construction\n+ * @compile\/fail\/ref=DA_DUConstructors.out -XDrawDiagnostics DA_DUConstructors.java\n+ *\/\n+\n+public class DA_DUConstructors {\n+    \/\/ identity\n+    class C1 {\n+        final int x;\n+        final int y = x + 1;\n+        C1() {\n+            x = 12;\n+            super();\n+        }\n+    }\n+\n+    class C2 {\n+        final int x;\n+        C2() {\n+            this(x = 3); \/\/ error\n+        }\n+        C2(int i) {\n+            x = 4;\n+        }\n+    }\n+\n+    class C3 {\n+        C3(int i) {}\n+    }\n+    class C4 extends C3 {\n+        final int x;\n+        C4() {\n+            super(x = 3); \/\/ ok\n+        }\n+    }\n+\n+    class C5 {\n+        final int x;\n+        final int y = x + 1; \/\/ x is not DA\n+        C5() {\n+            x = 12; super();\n+        }\n+        C5(int i) {\n+            \/* no prologue *\/\n+            x = i;\n+        }\n+    }\n+\n+    \/\/ value classes\n+    value class V1 {\n+        int x;\n+        int y = x + 1; \/\/ allowed\n+        V1() {\n+            x = 12;\n+            \/\/ super();\n+        }\n+    }\n+\n+    value class V2 {\n+        int x;\n+        V2() { this(x = 3); } \/\/ error\n+        V2(int i) { x = 4; }\n+    }\n+\n+    abstract value class AV1 {\n+        AV1(int i) {}\n+    }\n+\n+    value class V3 extends AV1 {\n+        int x;\n+        V3() {\n+            super(x = 3); \/\/ ok\n+        }\n+    }\n+\n+    value class V4 { \/\/ OK\n+        int x;\n+        int y = x + 1;\n+\n+        V4() {\n+            x = 12;\n+        }\n+\n+        V4(int i) {\n+            x = i;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+DA_DUConstructors.java:22:17: compiler.err.var.might.already.be.assigned: x\n+DA_DUConstructors.java:41:23: compiler.err.var.might.not.have.been.initialized: x\n+DA_DUConstructors.java:63:20: compiler.err.var.might.already.be.assigned: x\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -94,1 +94,1 @@\n-        this.x = x.length;              \/\/ this should FAIL\n+        this.x = x.length;              \/\/ this should work\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n-SuperInitFails.java:94:9: compiler.err.cant.ref.before.ctor.called: this\n@@ -27,3 +26,1 @@\n-- compiler.note.preview.filename: SuperInitFails.java, DEFAULT\n-- compiler.note.preview.recompile\n-26 errors\n+25 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @ignore fails at execution time because of Optional\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitGood.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -229,0 +229,2 @@\n+compiler.misc.feature.super.init                            # temporary as we are using statements before super in value classes\n+compiler.warn.preview.feature.use                           # temporary as we are using statements before super in value classes\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n- \/\/ key: compiler.misc.feature.super.init\n- \/\/ key: compiler.warn.preview.feature.use\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FeatureStatementsBeforeSuper.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ReturnBeforeSuperclassInit.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}