{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -782,4 +782,4 @@\n-# $(eval $(call SetupTarget, build-microbenchmark, \\\n-#     MAKEFILE := test\/BuildMicrobenchmark, \\\n-#     DEPS := interim-langtools exploded-image, \\\n-# ))\n+$(eval $(call SetupTarget, build-microbenchmark, \\\n+    MAKEFILE := test\/BuildMicrobenchmark, \\\n+    DEPS := interim-langtools exploded-image, \\\n+))\n@@ -1283,3 +1283,3 @@\n-# ifneq ($(JMH_CORE_JAR), )\n-#   test-image: build-microbenchmark\n-# endif\n+ifneq ($(JMH_CORE_JAR), )\n+  test-image: build-microbenchmark\n+endif\n","filename":"make\/Main.gmk","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    private static Q64byte.ref ack_ref(Q64byte.ref x, Q64byte.ref y) {\n+    private static Q64byte ack_ref(Q64byte x, Q64byte y) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/ackermann\/Inline64byte.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    private static Q64int.ref ack_ref(Q64int.ref x, Q64int.ref y) {\n+    private static Q64int ack_ref(Q64int x, Q64int y) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/ackermann\/Inline64int.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    private static Q64long.ref ack_ref(Q64long.ref x, Q64long.ref y) {\n+    private static Q64long ack_ref(Q64long x, Q64long y) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/ackermann\/Inline64long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    private static int cmp_Ref(Q64byte.ref[] objects1, Q64byte.ref[] objects2) {\n+    private static int cmp_Ref(Q64byte[] objects1, Q64byte[] objects2) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/InlineIsCmpBranch64byte.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    private static int cmp_Ref(Q64long.ref[] objects1, Q64long.ref[] objects2) {\n+    private static int cmp_Ref(Q64long[] objects1, Q64long[] objects2) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/InlineIsCmpBranch64long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        Q64byte.ref[] arr1, arr2;\n+        Q64byte[] arr1, arr2;\n@@ -174,2 +174,2 @@\n-            arr1 = new Q64byte.ref[SIZE];\n-            arr2 = new Q64byte.ref[SIZE];\n+            arr1 = new Q64byte[SIZE];\n+            arr2 = new Q64byte[SIZE];\n@@ -183,2 +183,2 @@\n-            arr1 = new Q64byte.ref[SIZE];\n-            arr2 = new Q64byte.ref[SIZE];\n+            arr1 = new Q64byte[SIZE];\n+            arr2 = new Q64byte[SIZE];\n@@ -192,2 +192,2 @@\n-            arr1 = new Q64byte.ref[SIZE];\n-            arr2 = new Q64byte.ref[SIZE];\n+            arr1 = new Q64byte[SIZE];\n+            arr2 = new Q64byte[SIZE];\n@@ -201,2 +201,2 @@\n-            arr1 = new Q64byte.ref[SIZE];\n-            arr2 = new Q64byte.ref[SIZE];\n+            arr1 = new Q64byte[SIZE];\n+            arr2 = new Q64byte[SIZE];\n@@ -210,2 +210,2 @@\n-            arr1 = new Q64byte.ref[SIZE];\n-            arr2 = new Q64byte.ref[SIZE];\n+            arr1 = new Q64byte[SIZE];\n+            arr2 = new Q64byte[SIZE];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/StatesQ64byte.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        Q64long.ref[] arr1, arr2;\n+        Q64long[] arr1, arr2;\n@@ -174,2 +174,2 @@\n-            arr1 = new Q64long.ref[SIZE];\n-            arr2 = new Q64long.ref[SIZE];\n+            arr1 = new Q64long[SIZE];\n+            arr2 = new Q64long[SIZE];\n@@ -183,2 +183,2 @@\n-            arr1 = new Q64long.ref[SIZE];\n-            arr2 = new Q64long.ref[SIZE];\n+            arr1 = new Q64long[SIZE];\n+            arr2 = new Q64long[SIZE];\n@@ -192,2 +192,2 @@\n-            arr1 = new Q64long.ref[SIZE];\n-            arr2 = new Q64long.ref[SIZE];\n+            arr1 = new Q64long[SIZE];\n+            arr2 = new Q64long[SIZE];\n@@ -201,2 +201,2 @@\n-            arr1 = new Q64long.ref[SIZE];\n-            arr2 = new Q64long.ref[SIZE];\n+            arr1 = new Q64long[SIZE];\n+            arr2 = new Q64long[SIZE];\n@@ -210,2 +210,2 @@\n-            arr1 = new Q64long.ref[SIZE];\n-            arr2 = new Q64long.ref[SIZE];\n+            arr1 = new Q64long[SIZE];\n+            arr2 = new Q64long[SIZE];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/StatesQ64long.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-        public Q64long.ref f;\n+        public Q64long f;\n@@ -123,1 +123,1 @@\n-        public RefWrapper(Q64long.ref f) {\n+        public RefWrapper(Q64long f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/field\/StatesQ64long.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Q128int.ref[] src = s.arr;\n+        Q128int[] src = s.arr;\n@@ -68,1 +68,1 @@\n-        Q128int.ref[] dst = d.arr;\n+        Q128int[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/copy\/Inline128int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Q32int.ref[] src = s.arr;\n+        Q32int[] src = s.arr;\n@@ -68,1 +68,1 @@\n-        Q32int.ref[] dst = d.arr;\n+        Q32int[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/copy\/Inline32int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Q64byte.ref[] src = s.arr;\n+        Q64byte[] src = s.arr;\n@@ -68,1 +68,1 @@\n-        Q64byte.ref[] dst = d.arr;\n+        Q64byte[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/copy\/Inline64byte.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Q64int.ref[] src = s.arr;\n+        Q64int[] src = s.arr;\n@@ -68,1 +68,1 @@\n-        Q64int.ref[] dst = d.arr;\n+        Q64int[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/copy\/Inline64int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        QOpt.ref<Int32>[] src = s.arr;\n+        QOpt<Int32>[] src = s.arr;\n@@ -69,1 +69,1 @@\n-        QOpt.ref<Int32>[] dst = d.arr;\n+        QOpt<Int32>[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/copy\/InlineOpt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-            arr[i] = R32int.default;\n+            arr[i] = new R32int();\n@@ -85,1 +85,1 @@\n-        Arrays.fill(st.arr, R32int.default);\n+        Arrays.fill(st.arr, new R32int()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/Identity32int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-            arr[i] = ROpt<Int32>.default;\n+            arr[i] = ROpt.of();\n@@ -87,1 +87,1 @@\n-        Arrays.fill(st.arr, ROpt<Int32>.default);\n+        Arrays.fill(st.arr, ROpt.of()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/IdentityOpt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        static Q128int.ref f = new Q128int(42);\n+        static Q128int f = new Q128int(42);\n@@ -46,1 +46,1 @@\n-        Q128int.ref f = new Q128int(42);\n+        Q128int f = new Q128int(42);\n@@ -59,1 +59,1 @@\n-            arr[i] = Q128int.default;\n+            arr[i] = new Q128int();\n@@ -112,1 +112,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -114,1 +114,1 @@\n-            arr[i] = Q128int.default;\n+            arr[i] = new Q128int();\n@@ -121,1 +121,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -131,1 +131,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -140,1 +140,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -149,1 +149,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -158,1 +158,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -167,1 +167,1 @@\n-        Arrays.fill(st.arr, Q128int.default);\n+        Arrays.fill(st.arr, new Q128int()  );\n@@ -203,1 +203,1 @@\n-        Arrays.fill(st.arr, Q128int.default);\n+        Arrays.fill(st.arr, new Q128int()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/Inline128int.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        static Q32int.ref f = new Q32int(42);\n+        static Q32int f = new Q32int(42);\n@@ -46,1 +46,1 @@\n-        Q32int.ref f = new Q32int(42);\n+        Q32int f = new Q32int(42);\n@@ -59,1 +59,1 @@\n-            arr[i] = Q32int.default;\n+            arr[i] = new Q32int();\n@@ -112,1 +112,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -114,1 +114,1 @@\n-            arr[i] = Q32int.default;\n+            arr[i] = new Q32int()  ;\n@@ -121,1 +121,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -131,1 +131,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -140,1 +140,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -149,1 +149,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -158,1 +158,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -167,1 +167,1 @@\n-        Arrays.fill(st.arr, Q32int.default);\n+        Arrays.fill(st.arr, new Q32int()  );\n@@ -203,1 +203,1 @@\n-        Arrays.fill(st.arr, Q32int.default);\n+        Arrays.fill(st.arr, new Q32int()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/Inline32int.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        static Q64byte.ref f = new Q64byte(42);\n+        static Q64byte f = new Q64byte(42);\n@@ -46,1 +46,1 @@\n-        Q64byte.ref f = new Q64byte(42);\n+        Q64byte f = new Q64byte(42);\n@@ -59,1 +59,1 @@\n-            arr[i] = Q64byte.default;\n+            arr[i] = new Q64byte()  ;\n@@ -112,1 +112,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -114,1 +114,1 @@\n-            arr[i] = Q64byte.default;\n+            arr[i] = new Q64byte()  ;\n@@ -121,1 +121,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -131,1 +131,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -140,1 +140,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -149,1 +149,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -158,1 +158,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -167,1 +167,1 @@\n-        Arrays.fill(st.arr, Q64byte.default);\n+        Arrays.fill(st.arr, new Q64byte()  );\n@@ -203,1 +203,1 @@\n-        Arrays.fill(st.arr, Q64byte.default);\n+        Arrays.fill(st.arr, new Q64byte()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/Inline64byte.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        static Q64int.ref f = new Q64int(42);\n+        static Q64int f = new Q64int(42);\n@@ -46,1 +46,1 @@\n-        Q64int.ref f = new Q64int(42);\n+        Q64int f = new Q64int(42);\n@@ -59,1 +59,1 @@\n-            arr[i] = Q64int.default;\n+            arr[i] = new Q64int()  ;\n@@ -112,1 +112,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -114,1 +114,1 @@\n-            arr[i] = Q64int.default;\n+            arr[i] = new Q64int()  ;\n@@ -121,1 +121,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -131,1 +131,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -140,1 +140,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -149,1 +149,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -158,1 +158,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -167,1 +167,1 @@\n-        Arrays.fill(st.arr, Q64int.default);\n+        Arrays.fill(st.arr, new Q64int()  );\n@@ -203,1 +203,1 @@\n-        Arrays.fill(st.arr, Q64int.default);\n+        Arrays.fill(st.arr, new Q64int()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/Inline64int.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        static QOpt.ref<Int32> f = QOpt.of(new R32int(42));\n+        static QOpt<Int32> f = QOpt.of(new R32int(42));\n@@ -48,1 +48,1 @@\n-        QOpt.ref<Int32> f = QOpt.of(new R32int(42));\n+        QOpt<Int32> f = QOpt.of(new R32int(42));\n@@ -61,1 +61,1 @@\n-            arr[i] = QOpt<Int32>.default;\n+            arr[i] = QOpt.of();\n@@ -114,1 +114,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -116,1 +116,1 @@\n-            arr[i] = QOpt<Int32>.default;\n+            arr[i] = QOpt.of();\n@@ -123,1 +123,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -133,1 +133,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -142,1 +142,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -151,1 +151,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -160,1 +160,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -169,1 +169,1 @@\n-        Arrays.fill(st.arr, QOpt<Int32>.default);\n+        Arrays.fill(st.arr, QOpt.of() );\n@@ -205,1 +205,1 @@\n-        Arrays.fill(st.arr, QOpt<Int32>.default);\n+        Arrays.fill(st.arr, QOpt.of()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/fill\/InlineOpt.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q128int.ref v) {\n+    public void ref_consume(Q128int v) {\n@@ -75,1 +75,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -84,1 +84,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -93,1 +93,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/read\/Inline128int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q32int.ref v) {\n+    public void ref_consume(Q32int v) {\n@@ -75,1 +75,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -84,1 +84,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -93,1 +93,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/read\/Inline32int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q64byte.ref v) {\n+    public void ref_consume(Q64byte v) {\n@@ -75,1 +75,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -84,1 +84,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -93,1 +93,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/read\/Inline64byte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q64int.ref v) {\n+    public void ref_consume(Q64int v) {\n@@ -75,1 +75,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -84,1 +84,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -93,1 +93,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/read\/Inline64int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -51,1 +51,1 @@\n-    public static Q128int.ref getRef(int i) {\n+    public static Q128int getRef(int i) {\n@@ -72,1 +72,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -90,1 +90,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/set\/Inline128int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -51,1 +51,1 @@\n-    public static Q32int.ref getRef(int i) {\n+    public static Q32int getRef(int i) {\n@@ -72,1 +72,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -90,1 +90,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/set\/Inline32int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -51,1 +51,1 @@\n-    public static Q64byte.ref getRef(int i) {\n+    public static Q64byte getRef(int i) {\n@@ -72,1 +72,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -90,1 +90,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/set\/Inline64byte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -51,1 +51,1 @@\n-    public static Q64int.ref getRef(int i) {\n+    public static Q64int getRef(int i) {\n@@ -72,1 +72,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -90,1 +90,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/set\/Inline64int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -65,1 +65,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -90,1 +90,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n@@ -101,1 +101,1 @@\n-        Q128int.ref[] arr = st.arr;\n+        Q128int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/sum\/Inline128int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -59,1 +59,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -81,1 +81,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n@@ -92,1 +92,1 @@\n-        Q32int.ref[] arr = st.arr;\n+        Q32int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/sum\/Inline32int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -73,1 +73,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -102,1 +102,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n@@ -113,1 +113,1 @@\n-        Q64byte.ref[] arr = st.arr;\n+        Q64byte[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/sum\/Inline64byte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -61,1 +61,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -84,1 +84,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n@@ -95,1 +95,1 @@\n-        Q64int.ref[] arr = st.arr;\n+        Q64int[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/sum\/Inline64int.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -60,1 +60,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -82,1 +82,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n@@ -93,1 +93,1 @@\n-        QOpt.ref<Int32>[] arr = st.arr;\n+        QOpt<Int32>[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/sum\/InlineOpt.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        public Q128byte.ref[] arr;\n+        public Q128byte[] arr;\n@@ -89,1 +89,1 @@\n-            arr = new Q128byte.ref[size];\n+            arr = new Q128byte[size];\n@@ -113,1 +113,1 @@\n-            arr = new Q128byte.ref[size];\n+            arr = new Q128byte[size];\n@@ -129,1 +129,1 @@\n-            arr = new Q128byte.ref[size];\n+            arr = new Q128byte[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ128byte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        public Q128int.ref[] arr;\n+        public Q128int[] arr;\n@@ -90,1 +90,1 @@\n-            arr = new Q128int.ref[size];\n+            arr = new Q128int[size];\n@@ -114,1 +114,1 @@\n-            arr = new Q128int.ref[size];\n+            arr = new Q128int[size];\n@@ -130,1 +130,1 @@\n-            arr = new Q128int.ref[size];\n+            arr = new Q128int[size];\n@@ -171,1 +171,1 @@\n-            arr = new Q128int.ref[size];\n+            arr = new Q128int[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ128int.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        public Q128long.ref[] arr;\n+        public Q128long[] arr;\n@@ -89,1 +89,1 @@\n-            arr = new Q128long.ref[size];\n+            arr = new Q128long[size];\n@@ -113,1 +113,1 @@\n-            arr = new Q128long.ref[size];\n+            arr = new Q128long[size];\n@@ -129,1 +129,1 @@\n-            arr = new Q128long.ref[size];\n+            arr = new Q128long[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ128long.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        public Q32int.ref[] arr;\n+        public Q32int[] arr;\n@@ -90,1 +90,1 @@\n-            arr = new Q32int.ref[size];\n+            arr = new Q32int[size];\n@@ -114,1 +114,1 @@\n-            arr = new Q32int.ref[size];\n+            arr = new Q32int[size];\n@@ -130,1 +130,1 @@\n-            arr = new Q32int.ref[size];\n+            arr = new Q32int[size];\n@@ -171,1 +171,1 @@\n-            arr = new Q32int.ref[size];\n+            arr = new Q32int[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ32int.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        public Q64byte.ref[] arr;\n+        public Q64byte[] arr;\n@@ -90,1 +90,1 @@\n-            arr = new Q64byte.ref[size];\n+            arr = new Q64byte[size];\n@@ -114,1 +114,1 @@\n-            arr = new Q64byte.ref[size];\n+            arr = new Q64byte[size];\n@@ -130,1 +130,1 @@\n-            arr = new Q64byte.ref[size];\n+            arr = new Q64byte[size];\n@@ -171,1 +171,1 @@\n-            arr = new Q64byte.ref[size];\n+            arr = new Q64byte[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ64byte.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        public Q64int.ref[] arr;\n+        public Q64int[] arr;\n@@ -90,1 +90,1 @@\n-            arr = new Q64int.ref[size];\n+            arr = new Q64int[size];\n@@ -114,1 +114,1 @@\n-            arr = new Q64int.ref[size];\n+            arr = new Q64int[size];\n@@ -130,1 +130,1 @@\n-            arr = new Q64int.ref[size];\n+            arr = new Q64int[size];\n@@ -171,1 +171,1 @@\n-            arr = new Q64int.ref[size];\n+            arr = new Q64int[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQ64int.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        public QOpt.ref<Int32>[] arr;\n+        public QOpt<Int32>[] arr;\n@@ -91,1 +91,1 @@\n-            arr = new QOpt.ref[size];\n+            arr = new QOpt[size];\n@@ -115,1 +115,1 @@\n-            arr = new QOpt.ref[size];\n+            arr = new QOpt[size];\n@@ -131,1 +131,1 @@\n-            arr = new QOpt.ref[size];\n+            arr = new QOpt[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/util\/StatesQOpt.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -117,1 +117,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -207,1 +207,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -217,1 +217,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -307,1 +307,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -317,1 +317,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -407,1 +407,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -417,1 +417,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -507,1 +507,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -517,1 +517,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -607,1 +607,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -617,1 +617,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -707,1 +707,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -717,1 +717,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -736,1 +736,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -746,1 +746,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -756,1 +756,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -766,1 +766,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -776,1 +776,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -786,1 +786,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -796,1 +796,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -806,2 +806,2 @@\n-        Q64long.ref[] src = s.arr;\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] src = s.arr;\n+        Q64long[] dst = d.arr;\n@@ -816,2 +816,2 @@\n-        Q64long.ref[] src = s.arr;\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] src = s.arr;\n+        Q64long[] dst = d.arr;\n@@ -826,1 +826,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -836,1 +836,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -846,1 +846,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -856,1 +856,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -866,1 +866,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -876,1 +876,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -886,1 +886,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -896,1 +896,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -906,2 +906,2 @@\n-        Q64long.ref[] src = s.arr;\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] src = s.arr;\n+        Q64long[] dst = d.arr;\n@@ -916,2 +916,2 @@\n-        Q64long.ref[] src = s.arr;\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] src = s.arr;\n+        Q64long[] dst = d.arr;\n@@ -926,1 +926,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -1007,1 +1007,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -1017,1 +1017,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/copy\/InlineCopy0.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -666,1 +666,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -675,1 +675,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -684,1 +684,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -693,1 +693,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -702,1 +702,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -711,1 +711,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -720,1 +720,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -729,1 +729,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -738,1 +738,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -747,1 +747,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -756,1 +756,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -765,1 +765,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -774,1 +774,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -783,1 +783,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -792,1 +792,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -801,1 +801,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -810,1 +810,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -819,1 +819,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -828,1 +828,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n@@ -837,1 +837,1 @@\n-        Q64long.ref[] src = s.arr;\n+        Q64long[] src = s.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/copy\/InlineCopy1.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -118,1 +118,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -208,1 +208,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -218,1 +218,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -308,1 +308,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -318,1 +318,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -408,1 +408,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -418,1 +418,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -508,1 +508,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -518,1 +518,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -608,1 +608,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -618,1 +618,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -708,1 +708,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -718,1 +718,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -808,1 +808,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -818,1 +818,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -908,1 +908,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -918,1 +918,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -1008,1 +1008,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n@@ -1018,1 +1018,1 @@\n-        Q64long.ref[] dst = d.arr;\n+        Q64long[] dst = d.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/copy\/InlineCopy2.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -48,1 +48,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -55,1 +55,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -57,1 +57,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -66,1 +66,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -73,1 +73,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -75,1 +75,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -84,1 +84,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -93,1 +93,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -102,1 +102,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -111,1 +111,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -120,1 +120,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -129,1 +129,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -138,1 +138,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -147,1 +147,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -156,1 +156,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -165,1 +165,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -174,1 +174,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -183,1 +183,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -192,1 +192,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -201,1 +201,1 @@\n-            arr[i] = Q64long.default;\n+            arr[i] = new Q64long()  ;\n@@ -210,1 +210,1 @@\n-            st.arr[i] = Q64long.default;\n+            st.arr[i] = new Q64long()  ;\n@@ -217,1 +217,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -223,1 +223,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -229,1 +229,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -235,1 +235,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -241,1 +241,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -247,1 +247,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -253,1 +253,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -259,1 +259,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -265,1 +265,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n@@ -271,1 +271,1 @@\n-        Arrays.fill(st.arr, Q64long.default);\n+        Arrays.fill(st.arr, new Q64long()  );\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillDef.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        Q64long.ref f = new Q64long(42);\n+        Q64long f = new Q64long(42);\n@@ -64,1 +64,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -82,1 +82,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillInstInt.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -82,1 +82,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillInstObj.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        Q64long.ref f = new Q64long(42);\n+        Q64long f = new Q64long(42);\n@@ -64,1 +64,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -82,1 +82,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillInstRef.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -82,1 +82,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillInstVal.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -83,1 +83,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillInt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -78,1 +78,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillNew.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -83,1 +83,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillObj.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    public static Q64long.ref get(int i) {\n+    public static Q64long get(int i) {\n@@ -44,1 +44,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -54,1 +54,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -63,2 +63,2 @@\n-        Q64long.ref[] arr = st.arr;\n-        Q64long.ref v = get(42);\n+        Q64long[] arr = st.arr;\n+        Q64long v = get(42);\n@@ -74,1 +74,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -83,2 +83,2 @@\n-        Q64long.ref[] arr = st.arr;\n-        Q64long.ref v = get(42);\n+        Q64long[] arr = st.arr;\n+        Q64long v = get(42);\n@@ -94,1 +94,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -104,1 +104,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -114,1 +114,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -124,1 +124,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -134,1 +134,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -144,1 +144,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -154,1 +154,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -164,1 +164,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -174,1 +174,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -184,1 +184,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -194,1 +194,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -204,1 +204,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -214,1 +214,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -224,1 +224,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n@@ -234,1 +234,1 @@\n-        Q64long.ref v = get(42);\n+        Q64long v = get(42);\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillRef.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -78,1 +78,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillStatInt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -78,1 +78,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillStatObj.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-        static Q64long.ref f = new Q64long(42);\n+        static Q64long f = new Q64long(42);\n@@ -60,1 +60,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -78,1 +78,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillStatRef.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -78,1 +78,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillStatVal.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -83,1 +83,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/fill\/Inline64longFillVal.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q64long.ref v) {\n+    public void ref_consume(Q64long v) {\n@@ -88,1 +88,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -97,1 +97,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -106,1 +106,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -115,1 +115,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -151,1 +151,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -160,1 +160,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -169,1 +169,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -178,1 +178,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/read\/Inline64long.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -77,1 +77,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/set\/Inline64longSetInt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -72,1 +72,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/set\/Inline64longSetNew.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -77,1 +77,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/set\/Inline64longSetObj.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    public static Q64long.ref get(int i) {\n+    public static Q64long get(int i) {\n@@ -59,1 +59,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -77,1 +77,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/set\/Inline64longSetRef.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -77,1 +77,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/set\/Inline64longSetVal.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -81,1 +81,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -125,1 +125,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n@@ -169,1 +169,1 @@\n-        Q64long.ref[] arr = st.arr;\n+        Q64long[] arr = st.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/sum\/Inline64long.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        public Q64long.ref[] arr;\n+        public Q64long[] arr;\n@@ -90,1 +90,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n@@ -114,1 +114,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n@@ -130,1 +130,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n@@ -171,1 +171,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/arraytotal\/util\/StatesQ64long.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-            dst[i].f = (Q64long.ref)src[i].f;\n+            dst[i].f = (Q64long)src[i].f;\n@@ -99,1 +99,1 @@\n-            dst[i].f = (Q64long.ref)src[i].f;\n+            dst[i].f = (Q64long)src[i].f;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/copy\/Inline64long.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    public void ref_consume(Q128int.ref v) {\n+    public void ref_consume(Q128int v) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/read\/Inline128int.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    public void ref_consume(Q32int.ref v) {\n+    public void ref_consume(Q32int v) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/read\/Inline32int.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    public void ref_consume(Q64byte.ref v) {\n+    public void ref_consume(Q64byte v) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/read\/Inline64byte.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    public void ref_consume(Q64int.ref v) {\n+    public void ref_consume(Q64int v) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/read\/Inline64int.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    public void ref_consume(Q64long.ref v) {\n+    public void ref_consume(Q64long v) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/read\/Inline64long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    public static Q128int.ref getRef(int i) {\n+    public static Q128int getRef(int i) {\n@@ -74,1 +74,1 @@\n-            arr[i].f = Q128int.default;\n+            arr[i].f = new Q128int()  ;\n@@ -110,1 +110,1 @@\n-            arr[i].f = Q128int.default;\n+            arr[i].f = new Q128int()  ;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/set\/Inline128int.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    public static Q32int.ref getRef(int i) {\n+    public static Q32int getRef(int i) {\n@@ -74,1 +74,1 @@\n-            arr[i].f = Q32int.default;\n+            arr[i].f = new Q32int()  ;\n@@ -110,1 +110,1 @@\n-            arr[i].f = Q32int.default;\n+            arr[i].f = new Q32int()  ;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/set\/Inline32int.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    public static Q64byte.ref getRef(int i) {\n+    public static Q64byte getRef(int i) {\n@@ -74,1 +74,1 @@\n-            arr[i].f = Q64byte.default;\n+            arr[i].f = new Q64byte()  ;\n@@ -110,1 +110,1 @@\n-            arr[i].f = Q64byte.default;\n+            arr[i].f = new Q64byte()  ;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/set\/Inline64byte.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    public static Q64int.ref getRef(int i) {\n+    public static Q64int getRef(int i) {\n@@ -74,1 +74,1 @@\n-            arr[i].f = Q64int.default;\n+            arr[i].f = new Q64int()  ;\n@@ -110,1 +110,1 @@\n-            arr[i].f = Q64int.default;\n+            arr[i].f = new Q64int()  ;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/set\/Inline64int.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    public static Q64long.ref getRef(int i) {\n+    public static Q64long getRef(int i) {\n@@ -103,1 +103,1 @@\n-            arr[i].f = Q64long.default;\n+            arr[i].f = new Q64long()  ;\n@@ -157,1 +157,1 @@\n-            arr[i].f = Q64long.default;\n+            arr[i].f = new Q64long()  ;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/set\/Inline64long.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public Q128int.ref f;\n+        public Q128int f;\n@@ -74,1 +74,1 @@\n-        public RefWrapper(Q128int.ref f) {\n+        public RefWrapper(Q128int f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/util\/StatesQ128int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public Q32int.ref f;\n+        public Q32int f;\n@@ -74,1 +74,1 @@\n-        public RefWrapper(Q32int.ref f) {\n+        public RefWrapper(Q32int f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/util\/StatesQ32int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public Q64byte.ref f;\n+        public Q64byte f;\n@@ -74,1 +74,1 @@\n-        public RefWrapper(Q64byte.ref f) {\n+        public RefWrapper(Q64byte f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/util\/StatesQ64byte.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public Q64int.ref f;\n+        public Q64int f;\n@@ -74,1 +74,1 @@\n-        public RefWrapper(Q64int.ref f) {\n+        public RefWrapper(Q64int f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/util\/StatesQ64int.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        public Q64long.ref f;\n+        public Q64long f;\n@@ -74,1 +74,1 @@\n-        public RefWrapper(Q64long.ref f) {\n+        public RefWrapper(Q64long f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/field\/util\/StatesQ64long.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-primitive class Point {\n+value class Point {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/intrinsics\/IsFlattenedArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public static primitive class Val1 implements MyInterface {\n+    public static value class Val1 implements MyInterface {\n@@ -65,1 +65,1 @@\n-    public static primitive class Val2 implements MyInterface {\n+    public static value class Val2 implements MyInterface {\n@@ -76,1 +76,1 @@\n-    public static primitive class Val3 implements MyInterface {\n+    public static value class Val3 implements MyInterface {\n@@ -94,1 +94,1 @@\n-        public Val1.ref[] arr;\n+        public Val1[] arr;\n@@ -135,1 +135,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -145,1 +145,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -175,1 +175,1 @@\n-            arr = new Val2.ref[SIZE];\n+            arr = new Val2[SIZE];\n@@ -205,1 +205,1 @@\n-            arr = new Val3.ref[SIZE];\n+            arr = new Val3[SIZE];\n@@ -233,1 +233,1 @@\n-    public int reduceRef(Val1.ref[] arr) {\n+    public int reduceRef(Val1[] arr) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArray0.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public static primitive class Val1 implements MyInterface {\n+    public static value class Val1 implements MyInterface {\n@@ -66,1 +66,1 @@\n-    public static primitive class Val2 implements MyInterface {\n+    public static value class Val2 implements MyInterface {\n@@ -78,1 +78,1 @@\n-    public static primitive class Val3 implements MyInterface {\n+    public static value class Val3 implements MyInterface {\n@@ -97,1 +97,1 @@\n-        public Val1.ref[] arr;\n+        public Val1[] arr;\n@@ -138,1 +138,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -148,1 +148,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -178,1 +178,1 @@\n-            arr = new Val2.ref[SIZE];\n+            arr = new Val2[SIZE];\n@@ -208,1 +208,1 @@\n-            arr = new Val3.ref[SIZE];\n+            arr = new Val3[SIZE];\n@@ -236,1 +236,1 @@\n-    public int reduceRef(Val1.ref[] arr) {\n+    public int reduceRef(Val1[] arr) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArray1.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    public static primitive class Val1  {\n+    public static value class Val1  {\n@@ -61,1 +61,1 @@\n-    public static primitive class Val2  {\n+    public static value class Val2  {\n@@ -72,1 +72,1 @@\n-    public static primitive class Val3  {\n+    public static value class Val3  {\n@@ -90,1 +90,1 @@\n-        public Val1.ref[] arr;\n+        public Val1[] arr;\n@@ -131,1 +131,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -141,1 +141,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -171,1 +171,1 @@\n-            arr = new Val2.ref[SIZE];\n+            arr = new Val2[SIZE];\n@@ -201,1 +201,1 @@\n-            arr = new Val3.ref[SIZE];\n+            arr = new Val3[SIZE];\n@@ -229,1 +229,1 @@\n-    public int reduceRef(Val1.ref[] arr) {\n+    public int reduceRef(Val1[] arr) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArrayHashExplicit.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    public static primitive class Val1  {\n+    public static value class Val1  {\n@@ -57,1 +57,1 @@\n-    public static primitive class Val2  {\n+    public static value class Val2  {\n@@ -64,1 +64,1 @@\n-    public static primitive class Val3  {\n+    public static value class Val3  {\n@@ -78,1 +78,1 @@\n-        public Val1.ref[] arr;\n+        public Val1[] arr;\n@@ -119,1 +119,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -129,1 +129,1 @@\n-            arr = new Val1.ref[SIZE];\n+            arr = new Val1[SIZE];\n@@ -159,1 +159,1 @@\n-            arr = new Val2.ref[SIZE];\n+            arr = new Val2[SIZE];\n@@ -189,1 +189,1 @@\n-            arr = new Val3.ref[SIZE];\n+            arr = new Val3[SIZE];\n@@ -217,1 +217,1 @@\n-    public int reduceRef(Val1.ref[] arr) {\n+    public int reduceRef(Val1[] arr) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArrayHashImplicit.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public static primitive class Val1 implements MyInterface {\n+    public static value class Val1 implements MyInterface {\n@@ -65,1 +65,1 @@\n-    public static primitive class Val2 implements MyInterface {\n+    public static value class Val2 implements MyInterface {\n@@ -76,1 +76,1 @@\n-    public static primitive class Val3 implements MyInterface {\n+    public static value class Val3 implements MyInterface {\n@@ -96,1 +96,1 @@\n-        public Val1.ref f;\n+        public Val1 f;\n@@ -98,1 +98,1 @@\n-        public Ref1Wrapper(Val1.ref f) {\n+        public Ref1Wrapper(Val1 f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineField.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public static primitive class Val1 implements MyInterface {\n+    public static value class Val1 implements MyInterface {\n@@ -66,1 +66,1 @@\n-    public static primitive class Val2 implements MyInterface {\n+    public static value class Val2 implements MyInterface {\n@@ -78,1 +78,1 @@\n-    public static primitive class Val3 implements MyInterface {\n+    public static value class Val3 implements MyInterface {\n@@ -99,1 +99,1 @@\n-        public Val1.ref f;\n+        public Val1 f;\n@@ -101,1 +101,1 @@\n-        public Ref1Wrapper(Val1.ref f) {\n+        public Ref1Wrapper(Val1 f) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineField1.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    public static primitive class V {\n+    public static value class V {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineRec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    public static final QComplex.ref RZERO = new QComplex(0,0);\n+    public static final QComplex RZERO = new QComplex(0,0);\n@@ -53,2 +53,2 @@\n-        QComplex.ref[][] A;\n-        QComplex.ref[][] B;\n+        QComplex[][] A;\n+        QComplex[][] B;\n@@ -58,1 +58,1 @@\n-            A = new QComplex.ref[size][size];\n+            A = new QComplex[size][size];\n@@ -60,1 +60,1 @@\n-            B = new QComplex.ref[size][size];\n+            B = new QComplex[size][size];\n@@ -66,1 +66,1 @@\n-        public QComplex.ref[][] multiply() {\n+        public QComplex[][] multiply() {\n@@ -68,1 +68,1 @@\n-            QComplex.ref[][] R = new QComplex.ref[size][size];\n+            QComplex[][] R = new QComplex[size][size];\n@@ -71,1 +71,1 @@\n-                    QComplex.ref s = RZERO;\n+                    QComplex s = RZERO;\n@@ -221,2 +221,2 @@\n-        QComplex.ref[][] A;\n-        QComplex.ref[][] B;\n+        QComplex[][] A;\n+        QComplex[][] B;\n@@ -234,1 +234,1 @@\n-        public QComplex.ref[][] multiply() {\n+        public QComplex[][] multiply() {\n@@ -236,1 +236,1 @@\n-            QComplex.ref[][] R = new QComplex[size][size];\n+            QComplex[][] R = new QComplex[size][size];\n@@ -239,1 +239,1 @@\n-                    QComplex.ref s = RZERO;\n+                    QComplex s = RZERO;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/matrix\/Inline.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-     * Default initial capacity.\n+     *new ()   initial capacity.\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/ArrayListInt.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    ArrayList<PrimitiveInt.ref> arrayListOfPrimitiveInt;\n+    ArrayList<PrimitiveInt> arrayListOfPrimitiveInt;\n@@ -91,1 +91,1 @@\n-        arrayListOfPrimitiveInt = new ArrayList<PrimitiveInt.ref>(size);\n+        arrayListOfPrimitiveInt = new ArrayList<PrimitiveInt>(size);\n@@ -128,1 +128,1 @@\n-        ArrayList<PrimitiveInt.ref> list = new ArrayList<>(size);\n+        ArrayList<PrimitiveInt> list = new ArrayList<>(size);\n@@ -225,1 +225,1 @@\n-        final ArrayList<PrimitiveInt.ref> list = arrayListOfPrimitiveInt;\n+        final ArrayList<PrimitiveInt> list = arrayListOfPrimitiveInt;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/ArrayListOfIntBench.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -510,1 +510,1 @@\n-        es[size = newSize] = PrimitiveInt.default;\n+        es[size = newSize] = new PrimitiveInt();\n@@ -521,1 +521,1 @@\n-            es[i] = PrimitiveInt.default;\n+            es[i] = new PrimitiveInt();\n@@ -550,1 +550,1 @@\n-            es[i] = PrimitiveInt.default;\n+            es[i] = new PrimitiveInt();\n@@ -631,1 +631,1 @@\n-        public void forEachRemaining(Consumer<? super PrimitiveInt.ref> action) {\n+        public void forEachRemaining(Consumer<? super PrimitiveInt> action) {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/ArrayListPrimitiveInt.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -3,1 +26,1 @@\n-public primitive class PrimitiveInt {\n+public value class PrimitiveInt {\n@@ -6,0 +29,4 @@\n+    PrimitiveInt() {\n+        this.value = 0;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/PrimitiveInt.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1098,1 +1098,1 @@\n-    private primitive class AListCursor<E> implements InlineCursor<E> {\n+    private value class AListCursor<E> implements InlineCursor<E> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/XArrayList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-    static primitive class YNode<K,V> implements Map.Entry<K,V> {\n+    static value class YNode<K,V> implements Map.Entry<K,V> {\n@@ -281,1 +281,1 @@\n-    primitive class YNodeWrapper implements Map.Entry<K,V> {\n+    value class YNodeWrapper implements Map.Entry<K,V> {\n@@ -933,1 +933,1 @@\n-        return YNode.default;\n+        return new YNode();\n@@ -981,1 +981,1 @@\n-                tab[i] = YNode.default;\n+                tab[i] = new YNode();\n@@ -1376,1 +1376,1 @@\n-        YNode<K,V> oldValue = (index >= 0) ? table[index] : YNode.default;\n+        YNode<K,V> oldValue = (index >= 0) ? table[index] : new YNode();\n@@ -1890,1 +1890,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/HashMap.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -302,1 +302,1 @@\n-        return XNode.default;\n+        return new XNode();\n@@ -308,1 +308,1 @@\n-    static primitive class XNode<K,V> implements Map.Entry<K,V> {\n+    static value class XNode<K,V> implements Map.Entry<K,V> {\n@@ -314,0 +314,7 @@\n+        XNode() {\n+            this.hash = 0;\n+            this.key = null;\n+            this.value = null;\n+            this.next = null;\n+        }\n+\n@@ -393,1 +400,1 @@\n-    primitive class XNodeWrapper implements Map.Entry<K,V> {\n+    value class XNodeWrapper implements Map.Entry<K,V> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/XHashMap.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        public Q32int.ref[] arr;\n+        public Q32int[] arr;\n@@ -77,1 +77,1 @@\n-            arr = new Q32int.ref[size];\n+            arr = new Q32int[size];\n@@ -103,1 +103,1 @@\n-        Q32int.ref[] values = s.arr;\n+        Q32int[] values = s.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/traversal\/Inline32.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        public Q64long.ref[] arr;\n+        public Q64long[] arr;\n@@ -77,1 +77,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n@@ -93,1 +93,1 @@\n-            arr = new Q64long.ref[size];\n+            arr = new Q64long[size];\n@@ -145,1 +145,1 @@\n-        Q64long.ref[] values = s.arr;\n+        Q64long[] values = s.arr;\n@@ -154,1 +154,1 @@\n-        Q64long.ref[] values = s.arr;\n+        Q64long[] values = s.arr;\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/traversal\/Inline64.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/A64long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Int32.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Opt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q128byte implements Int128, ByByte {\n+public value class Q128byte implements Int128, ByByte {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128byte.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q128int implements Int128, ByInt {\n+public value class Q128int implements Int128, ByInt {\n@@ -30,0 +30,4 @@\n+    public Q128int() {\n+        this(0, 0);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128int.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q128long implements Int128, ByLong {\n+public value class Q128long implements Int128, ByLong {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q32byte implements Int32, ByByte {\n+public value class Q32byte implements Int32, ByByte {\n@@ -32,0 +32,4 @@\n+    public Q32byte() {\n+        this(0);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q32byte.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q32int implements Int32, ByInt {\n+public value class Q32int implements Int32, ByInt {\n@@ -29,0 +29,4 @@\n+    public Q32int() {\n+        v0 = 0;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q32int.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q64byte implements Int64, ByByte {\n+public value class Q64byte implements Int64, ByByte {\n@@ -30,0 +30,5 @@\n+    public Q64byte() {\n+        this.v0 = new Q32byte();\n+        this.v1 = new Q32byte();\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64byte.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q64int implements Int64, ByInt {\n+public value class Q64int implements Int64, ByInt {\n@@ -30,0 +30,4 @@\n+    public Q64int() {\n+        this(0);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64int.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Q64long implements Int64, ByLong {\n+public value class Q64long implements Int64, ByLong {\n@@ -29,0 +29,4 @@\n+    public Q64long() {\n+        this(0);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64long.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class QComplex implements Complex {\n+public value class QComplex implements Complex {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/QComplex.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-public primitive class QOpt<T> implements Opt<T> {\n+public value class QOpt<T> implements Opt<T> {\n@@ -35,0 +35,4 @@\n+    public static <T> QOpt<T> of() {\n+        return new QOpt<>(null);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/QOpt.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/R32byte.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+    public R32int() {\n+        this.v0 = 0;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/R32int.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,4 @@\n+    private <T> ROpt() {\n+        this.value = null;\n+    }\n+\n@@ -35,0 +39,4 @@\n+    public static <T> ROpt<T> of() {\n+        return new ROpt<>(null);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/ROpt.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}