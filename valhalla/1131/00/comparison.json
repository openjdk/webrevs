{"files":[{"patch":"@@ -4313,19 +4313,0 @@\n-void ClassFileParser::throwInlineTypeLimitation(THREAD_AND_LOCATION_DECL,\n-                                                const char* msg,\n-                                                const Symbol* name,\n-                                                const Symbol* sig) const {\n-\n-  ResourceMark rm(THREAD);\n-  if (name == nullptr || sig == nullptr) {\n-    Exceptions::fthrow(THREAD_AND_LOCATION_ARGS,\n-        vmSymbols::java_lang_ClassFormatError(),\n-        \"class: %s - %s\", _class_name->as_C_string(), msg);\n-  }\n-  else {\n-    Exceptions::fthrow(THREAD_AND_LOCATION_ARGS,\n-        vmSymbols::java_lang_ClassFormatError(),\n-        \"\\\"%s\\\" sig: \\\"%s\\\" class: %s - %s\", name->as_C_string(), sig->as_C_string(),\n-        _class_name->as_C_string(), msg);\n-  }\n-}\n-\n@@ -4366,5 +4347,0 @@\n-      if (ik->is_inline_klass()) {\n-        JavaThread *THREAD = JavaThread::current();\n-        throwInlineTypeLimitation(THREAD_AND_LOCATION, \"Inline Types do not support Cloneable\");\n-        return;\n-      }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -481,5 +481,0 @@\n-  void throwInlineTypeLimitation(THREAD_AND_LOCATION_DECL,\n-                                 const char* msg,\n-                                 const Symbol* name = nullptr,\n-                                 const Symbol* sig  = nullptr) const;\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -723,1 +723,0 @@\n-       klass->is_inline_klass() ||\n@@ -730,0 +729,6 @@\n+  if (klass->is_inline_klass()) {\n+    \/\/ Value instances have no identity, so return the current instance instead of allocating a new one\n+    \/\/ Value classes cannot have finalizers, so the method can return immediately\n+    return JNIHandles::make_local(THREAD, obj());\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestCloneableValue\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile TestCloneableValue.java\n+ * @run main\/othervm runtime.valhalla.inlinetypes.TestCloneableValue\n+ *\/\n+\n+ package runtime.valhalla.inlinetypes;\n+\n+ import jdk.test.lib.Asserts;\n+\n+ import java.util.ArrayList;\n+\n+ public class TestCloneableValue  {\n+\n+    static value class SimpleValue implements Cloneable {\n+      int i;\n+      double j;\n+\n+      public SimpleValue() {\n+        i = 42;\n+        j = Math.E;\n+      }\n+\n+      @Override\n+      public Object clone() throws CloneNotSupportedException {\n+        return super.clone(); \/\/ deleguate to Object's method performing a shallow copy\n+      }\n+     }\n+\n+    static value class NotSoSimpleValue implements Cloneable {\n+      ArrayList list;\n+\n+      public NotSoSimpleValue() {\n+        list = new ArrayList<>();\n+      }\n+\n+      private NotSoSimpleValue(ArrayList l) {\n+        list = l;\n+      }\n+\n+      @Override\n+      public Object clone() throws CloneNotSupportedException {\n+        return new NotSoSimpleValue((ArrayList)list.clone());\n+      }\n+    }\n+\n+     public static void main(String[] args) {\n+      var sv = new SimpleValue();\n+      try {\n+        var c1 = sv.clone();\n+        Asserts.assertEQ(sv, c1);\n+        Asserts.assertEQ(sv.hashCode(), c1.hashCode());\n+      } catch(CloneNotSupportedException e) {\n+        Asserts.fail(\"Unexpected exception\", e);\n+      }\n+\n+      var nssv = new NotSoSimpleValue();\n+      try {\n+        var c2 = nssv.clone();\n+        Asserts.assertNE(nssv, c2);\n+        Asserts.assertEQ(nssv.hashCode(), c2.hashCode());\n+      } catch(CloneNotSupportedException e) {\n+        Asserts.fail(\"Unexpected exception\", e);\n+      }\n+     }\n+ }\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestCloneableValue.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}