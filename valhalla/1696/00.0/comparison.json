{"files":[{"patch":"@@ -568,0 +568,4 @@\n+  # In the ubsan case we have to link every binary with the C++-compiler as linker, because inherently\n+  # the C-Compiler and the C++-compiler used as linker provide a different set of ubsan exports.\n+  # Linking an executable with the C-compiler and one of its shared libraries with the C++-compiler\n+  # leeds to unresolved symbols.\n@@ -569,2 +573,3 @@\n-      UBSAN_CFLAGS=\"$UBSAN_CFLAGS -fno-sanitize=function,vptr -DLLVM_SYMBOLIZER=$(dirname $(dirname $CC))\/tools\/ibm-llvm-symbolizer\"\n-      UBSAN_LDFLAGS=\"$UBSAN_LDFLAGS -fno-sanitize=function,vptr -Wl,-bbigtoc\"\n+    UBSAN_CFLAGS=\"$UBSAN_CFLAGS -DLLVM_SYMBOLIZER=$(dirname $(dirname $CC))\/tools\/ibm-llvm-symbolizer\"\n+    UBSAN_LDFLAGS=\"$UBSAN_LDFLAGS -Wl,-bbigtoc\"\n+    LD=\"$LDCXX\"\n","filename":"make\/autoconf\/jdk-options.m4","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -301,4 +301,4 @@\n-  if (_compute_lock) {\n-    \/\/ lock_reg was destroyed by fast unlocking attempt => recompute it\n-    ce->monitor_address(_monitor_ix, _lock_reg);\n-  }\n+\n+  \/\/ lock_reg was destroyed by fast unlocking attempt => recompute it\n+  ce->monitor_address(_monitor_ix, _lock_reg);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-    stub = new MonitorExitStub(FrameMap::r0_opr, true, 0);\n+    stub = new MonitorExitStub(FrameMap::r0_opr, 0);\n@@ -2691,1 +2691,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n@@ -2699,1 +2698,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n-  assert_different_registers(hdr, obj, disp_hdr, temp, rscratch2);\n+int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register basic_lock, Register temp, Label& slow_case) {\n+  assert_different_registers(hdr, obj, basic_lock, temp, rscratch2);\n@@ -71,1 +71,1 @@\n-  str(obj, Address(disp_hdr, BasicObjectLock::obj_offset()));\n+  str(obj, Address(basic_lock, BasicObjectLock::obj_offset()));\n@@ -75,1 +75,1 @@\n-  lightweight_lock(disp_hdr, obj, hdr, temp, rscratch2, slow_case);\n+  lightweight_lock(basic_lock, obj, hdr, temp, rscratch2, slow_case);\n@@ -81,2 +81,2 @@\n-void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n-  assert_different_registers(hdr, obj, disp_hdr, temp, rscratch2);\n+void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register basic_lock, Register temp, Label& slow_case) {\n+  assert_different_registers(hdr, obj, basic_lock, temp, rscratch2);\n@@ -85,1 +85,1 @@\n-  ldr(obj, Address(disp_hdr, BasicObjectLock::obj_offset()));\n+  ldr(obj, Address(basic_lock, BasicObjectLock::obj_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -429,0 +429,2 @@\n+    case Op_RegI: \/\/ RA may place scalar values (Op_RegI\/N\/L\/P) in FP registers when UseFPUForSpilling is enabled\n+    case Op_RegN:\n@@ -430,1 +432,1 @@\n-      assert(opto_reg % 4 == 0, \"Float register should only occupy a single slot\");\n+      assert(opto_reg % 4 == 0, \"32-bit register should only occupy a single slot\");\n@@ -437,0 +439,2 @@\n+    case Op_RegL:\n+    case Op_RegP:\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2042,3 +2042,0 @@\n-    Label count;\n-    const int mark_word_offset = BasicLock::displaced_header_offset_in_bytes();\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-    stub = new MonitorExitStub(FrameMap::R0_opr, true, 0);\n+    stub = new MonitorExitStub(FrameMap::R0_opr, 0);\n@@ -2430,1 +2430,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-    stub = new MonitorExitStub(FrameMap::R4_opr, true, 0);\n+    stub = new MonitorExitStub(FrameMap::R4_opr, 0);\n@@ -2617,1 +2617,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n@@ -2629,1 +2628,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-    stub = new MonitorExitStub(lock, true, 0);\n+    stub = new MonitorExitStub(lock, 0);\n@@ -2714,1 +2714,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n@@ -2722,1 +2721,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -299,4 +299,4 @@\n-  if (_compute_lock) {\n-    \/\/ lock_reg was destroyed by fast unlocking attempt => recompute it\n-    ce->monitor_address(_monitor_ix, _lock_reg);\n-  }\n+\n+  \/\/ lock_reg was destroyed by fast unlocking attempt => recompute it\n+  ce->monitor_address(_monitor_ix, _lock_reg);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-    stub = new MonitorExitStub(FrameMap::rax_opr, true, 0);\n+    stub = new MonitorExitStub(FrameMap::rax_opr, 0);\n@@ -2942,1 +2942,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n@@ -2951,1 +2950,0 @@\n-    assert(BasicLock::displaced_header_offset_in_bytes() == 0, \"lock_reg must point to the displaced header\");\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Register tmp, Label& slow_case) {\n+int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register basic_lock, Register tmp, Label& slow_case) {\n@@ -47,1 +47,1 @@\n-  assert_different_registers(hdr, obj, disp_hdr, tmp);\n+  assert_different_registers(hdr, obj, basic_lock, tmp);\n@@ -53,1 +53,1 @@\n-  movptr(Address(disp_hdr, BasicObjectLock::obj_offset()), obj);\n+  movptr(Address(basic_lock, BasicObjectLock::obj_offset()), obj);\n@@ -57,1 +57,1 @@\n-  lightweight_lock(disp_hdr, obj, hdr, tmp, slow_case);\n+  lightweight_lock(basic_lock, obj, hdr, tmp, slow_case);\n@@ -62,3 +62,3 @@\n-void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Label& slow_case) {\n-  assert(disp_hdr == rax, \"disp_hdr must be rax, for the cmpxchg instruction\");\n-  assert(hdr != obj && hdr != disp_hdr && obj != disp_hdr, \"registers must be different\");\n+void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register basic_lock, Label& slow_case) {\n+  assert(basic_lock == rax, \"basic_lock must be rax, for the cmpxchg instruction\");\n+  assert(hdr != obj && hdr != basic_lock && obj != basic_lock, \"registers must be different\");\n@@ -67,1 +67,1 @@\n-  movptr(obj, Address(disp_hdr, BasicObjectLock::obj_offset()));\n+  movptr(obj, Address(basic_lock, BasicObjectLock::obj_offset()));\n@@ -70,1 +70,1 @@\n-  lightweight_unlock(obj, disp_hdr, hdr, slow_case);\n+  lightweight_unlock(obj, rax, hdr, slow_case);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5082,1 +5082,1 @@\n-    default: assert(false, \"%s\", type2name(to_elem_bt));\n+    default: assert(false, \"Unexpected basic type for target of vector cast int to subword: %s\", type2name(to_elem_bt));\n@@ -5087,1 +5087,1 @@\n- * Algorithm for vector D2L and F2I conversions:-\n+ * Algorithm for vector D2L and F2I conversions (AVX 10.2 unsupported):-\n@@ -5125,1 +5125,1 @@\n-    default: assert(false, \"%s\", type2name(to_elem_bt));\n+    default: assert(false, \"Unexpected basic type for target of vector castF2X EVEX: %s\", type2name(to_elem_bt));\n@@ -5172,1 +5172,1 @@\n-      default: assert(false, \"%s\", type2name(to_elem_bt));\n+      default: assert(false, \"Unexpected basic type for target of vector castD2X AVX512DQ EVEX: %s\", type2name(to_elem_bt));\n@@ -5187,1 +5187,1 @@\n-      default: assert(false, \"%s\", type2name(to_elem_bt));\n+      default: assert(false, \"Unexpected basic type for target of vector castD2X EVEX: %s\", type2name(to_elem_bt));\n@@ -5192,0 +5192,80 @@\n+void C2_MacroAssembler::vector_castF2X_avx10(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttps2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"Unexpected basic type for target of vector castF2X AVX10 (reg src): %s\", type2name(to_elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_castF2X_avx10(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttps2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"Unexpected basic type for target of vector castF2X AVX10 (mem src): %s\", type2name(to_elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_castD2X_avx10(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttpd2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"Unexpected basic type for target of vector castD2X AVX10 (reg src): %s\", type2name(to_elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_castD2X_avx10(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttpd2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"Unexpected basic type for target of vector castD2X AVX10 (mem src): %s\", type2name(to_elem_bt));\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":85,"deletions":5,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -351,0 +351,7 @@\n+  void vector_castF2X_avx10(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc);\n+\n+  void vector_castF2X_avx10(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc);\n+\n+  void vector_castD2X_avx10(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc);\n+\n+  void vector_castD2X_avx10(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -7700,2 +7700,5 @@\n-  predicate(!VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n-            type2aelembytes(Matcher::vector_element_basic_type(n)) <= 4);\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            !VM_Version::supports_avx512vl() &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n+            type2aelembytes(Matcher::vector_element_basic_type(n)) <= 4 &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n@@ -7723,1 +7726,2 @@\n-  predicate((VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n@@ -7745,0 +7749,27 @@\n+instruct castFtoX_reg_avx10(vec dst, vec src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"vector_cast_f2x_avx10 $dst, $src\\t!\" %}\n+  ins_encode %{\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen_enc = (to_elem_bt == T_LONG) ? vector_length_encoding(this) : vector_length_encoding(this, $src);\n+    __ vector_castF2X_avx10(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct castFtoX_mem_avx10(vec dst, memory src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastF2X (LoadVector src)));\n+  format %{ \"vector_cast_f2x_avx10 $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int vlen = Matcher::vector_length(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen_enc = (to_elem_bt == T_LONG) ? vector_length_encoding(this) : vector_length_encoding(vlen * sizeof(jfloat));\n+    __ vector_castF2X_avx10(to_elem_bt, $dst$$XMMRegister, $src$$Address, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -7757,1 +7788,3 @@\n-  predicate(!VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            !VM_Version::supports_avx512vl() &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n@@ -7773,1 +7806,2 @@\n-  predicate((VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n@@ -7789,0 +7823,27 @@\n+instruct castDtoX_reg_avx10(vec dst, vec src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"vector_cast_d2x_avx10 $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_castD2X_avx10(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct castDtoX_mem_avx10(vec dst, memory src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastD2X (LoadVector src)));\n+  format %{ \"vector_cast_d2x_avx10 $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int vlen = Matcher::vector_length(this);\n+    int vlen_enc = vector_length_encoding(vlen * sizeof(jdouble));\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_castD2X_avx10(to_elem_bt, $dst$$XMMRegister, $src$$Address, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":66,"deletions":5,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -11766,0 +11766,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11775,0 +11776,22 @@\n+instruct convF2I_reg_reg_avx10(rRegI dst, regF src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2I src));\n+  format %{ \"evcvttss2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct convF2I_reg_mem_avx10(rRegI dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2I (LoadF src)));\n+  format %{ \"evcvttss2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisl($dst$$Register, $src$$Address);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11777,0 +11800,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11786,0 +11810,22 @@\n+instruct convF2L_reg_reg_avx10(rRegL dst, regF src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2L src));\n+  format %{ \"evcvttss2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisq($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct convF2L_reg_mem_avx10(rRegL dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2L (LoadF src)));\n+  format %{ \"evcvttss2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisq($dst$$Register, $src$$Address);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11788,0 +11834,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11797,0 +11844,22 @@\n+instruct convD2I_reg_reg_avx10(rRegI dst, regD src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2I src));\n+  format %{ \"evcvttsd2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct convD2I_reg_mem_avx10(rRegI dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2I (LoadD src)));\n+  format %{ \"evcvttsd2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisl($dst$$Register, $src$$Address);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11799,0 +11868,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11808,0 +11878,22 @@\n+instruct convD2L_reg_reg_avx10(rRegL dst, regD src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2L src));\n+  format %{ \"evcvttsd2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisq($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct convD2L_reg_mem_avx10(rRegL dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2L (LoadD src)));\n+  format %{ \"evcvttsd2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisq($dst$$Register, $src$$Address);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":92,"deletions":0,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -462,1 +462,0 @@\n-  bool _compute_lock;\n@@ -466,1 +465,1 @@\n-  MonitorExitStub(LIR_Opr lock_reg, bool compute_lock, int monitor_ix)\n+  MonitorExitStub(LIR_Opr lock_reg, int monitor_ix)\n@@ -468,1 +467,1 @@\n-      _compute_lock(compute_lock), _monitor_ix(monitor_ix) { }\n+      _monitor_ix(monitor_ix) { }\n@@ -472,5 +471,1 @@\n-    if (_compute_lock) {\n-      visitor->do_temp(_lock_reg);\n-    } else {\n-      visitor->do_input(_lock_reg);\n-    }\n+    visitor->do_temp(_lock_reg);\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -644,1 +644,1 @@\n-  CodeStub* slow_path = new MonitorExitStub(lock, true, monitor_no);\n+  CodeStub* slow_path = new MonitorExitStub(lock, monitor_no);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2524,1 +2524,1 @@\n-      if (!vmClasses::Parameter_klass_loaded())\n+      if (!vmClasses::reflect_Parameter_klass_is_loaded())\n@@ -4142,1 +4142,1 @@\n-  if (vmClasses::Cloneable_klass_loaded()) {\n+  if (vmClasses::Cloneable_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  friend class ClassLoaderDataGraphKlassIteratorAtomic;\n+  friend class ClassLoaderDataGraphIteratorAtomic;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1164,1 +1164,1 @@\n-  if (vmClasses::Class_klass_loaded()) {\n+  if (vmClasses::Class_klass_is_loaded()) {\n@@ -1247,1 +1247,1 @@\n-  if (!vmClasses::Class_klass_loaded() && !CDSConfig::is_using_aot_linked_classes()) {\n+  if (!vmClasses::Class_klass_is_loaded() && !CDSConfig::is_using_aot_linked_classes()) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-        SystemDictionaryShared::warn_excluded(klass, \"Verified with old verifier\");\n+        SystemDictionaryShared::log_exclusion(klass, \"Verified with old verifier\");\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -805,5 +805,0 @@\n-\n-static void clean_ic_if_metadata_is_dead(CompiledIC *ic) {\n-  ic->clean_metadata();\n-}\n-\n@@ -812,2 +807,1 @@\n-static void clean_if_nmethod_is_unloaded(CallsiteT* callsite, nmethod* from,\n-                                         bool clean_all) {\n+static void clean_if_nmethod_is_unloaded(CallsiteT* callsite, bool clean_all) {\n@@ -888,1 +882,1 @@\n-        clean_ic_if_metadata_is_dead(CompiledIC_at(&iter));\n+        CompiledIC_at(&iter)->clean_metadata();\n@@ -891,1 +885,1 @@\n-      clean_if_nmethod_is_unloaded(CompiledIC_at(&iter), this, clean_all);\n+      clean_if_nmethod_is_unloaded(CompiledIC_at(&iter), clean_all);\n@@ -896,1 +890,1 @@\n-      clean_if_nmethod_is_unloaded(CompiledDirectCall::at(iter.reloc()), this, clean_all);\n+      clean_if_nmethod_is_unloaded(CompiledDirectCall::at(iter.reloc()), clean_all);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1102,0 +1102,9 @@\n+struct NMethodMarkingScope : StackObj {\n+  NMethodMarkingScope() {\n+    nmethod::oops_do_marking_prologue();\n+  }\n+  ~NMethodMarkingScope() {\n+    nmethod::oops_do_marking_epilogue();\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1067,1 +1067,1 @@\n-  size_t free_memory = 0;\n+  physical_memory_size_type free_memory = 0;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1057,2 +1057,1 @@\n-private:\n-  uint _worker_id;\n+  ParCompactionManager* _cm;\n@@ -1061,1 +1060,1 @@\n-  PCAddThreadRootsMarkingTaskClosure(uint worker_id) : _worker_id(worker_id) { }\n+  PCAddThreadRootsMarkingTaskClosure(ParCompactionManager* cm) : _cm(cm) { }\n@@ -1063,2 +1062,0 @@\n-    assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n-\n@@ -1067,3 +1064,1 @@\n-    ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(_worker_id);\n-\n-    MarkingNMethodClosure mark_and_push_in_blobs(&cm->_mark_and_push_closure);\n+    MarkingNMethodClosure mark_and_push_in_blobs(&_cm->_mark_and_push_closure);\n@@ -1071,1 +1066,1 @@\n-    thread->oops_do(&cm->_mark_and_push_closure, &mark_and_push_in_blobs);\n+    thread->oops_do(&_cm->_mark_and_push_closure, &mark_and_push_in_blobs);\n@@ -1074,1 +1069,1 @@\n-    cm->follow_marking_stacks();\n+    _cm->follow_marking_stacks();\n@@ -1118,1 +1113,1 @@\n-      PCAddThreadRootsMarkingTaskClosure closure(worker_id);\n+      PCAddThreadRootsMarkingTaskClosure closure(cm);\n@@ -1664,1 +1659,0 @@\n-  uint _num_workers;\n@@ -1670,1 +1664,0 @@\n-      _num_workers(active_workers),\n@@ -1675,1 +1668,1 @@\n-    {\n+    if (worker_id == 0) {\n@@ -1677,2 +1670,2 @@\n-      PSParallelCompact::fill_dead_objs_in_dense_prefix(worker_id, _num_workers);\n-      log_trace(gc, phases)(\"Fill dense prefix by worker %u: %.3f ms\", worker_id, (Ticks::now() - start).seconds() * 1000);\n+      PSParallelCompact::fill_dead_objs_in_dense_prefix();\n+      log_trace(gc, phases)(\"Fill dense prefix by worker 0: %.3f ms\", (Ticks::now() - start).seconds() * 1000);\n@@ -1691,0 +1684,1 @@\n+      \/\/ The preceding live obj.\n@@ -1692,2 +1686,2 @@\n-      HeapWord* after_obj = obj_start + cast_to_oop(obj_start)->size();\n-      assert(after_obj == start, \"precondition\");\n+      HeapWord* obj_end = obj_start + cast_to_oop(obj_start)->size();\n+      assert(obj_end == start, \"precondition\");\n@@ -1707,1 +1701,1 @@\n-void PSParallelCompact::fill_dead_objs_in_dense_prefix(uint worker_id, uint num_workers) {\n+void PSParallelCompact::fill_dead_objs_in_dense_prefix() {\n@@ -1713,6 +1707,1 @@\n-  if (bottom == prefix_end) {\n-    return;\n-  }\n-\n-  size_t bottom_region = _summary_data.addr_to_region_idx(bottom);\n-  size_t prefix_end_region = _summary_data.addr_to_region_idx(prefix_end);\n+  const size_t region_size = ParallelCompactData::RegionSize;\n@@ -1720,5 +1709,3 @@\n-  size_t start_region;\n-  size_t end_region;\n-  split_regions_for_worker(bottom_region, prefix_end_region,\n-                           worker_id, num_workers,\n-                           &start_region, &end_region);\n+  \/\/ Fill dead space in [start_addr, end_addr)\n+  HeapWord* const start_addr = bottom;\n+  HeapWord* const end_addr   = prefix_end;\n@@ -1726,6 +1713,11 @@\n-  if (start_region == end_region) {\n-    return;\n-  }\n-\n-  HeapWord* const start_addr = _summary_data.region_to_addr(start_region);\n-  HeapWord* const end_addr = _summary_data.region_to_addr(end_region);\n+  for (HeapWord* cur_addr = start_addr; cur_addr < end_addr; \/* empty *\/) {\n+    RegionData* cur_region_ptr = _summary_data.addr_to_region_ptr(cur_addr);\n+    if (cur_region_ptr->data_size() == region_size) {\n+      \/\/ Full; no dead space. Next region.\n+      if (_summary_data.is_region_aligned(cur_addr)) {\n+        cur_addr += region_size;\n+      } else {\n+        cur_addr = _summary_data.region_align_up(cur_addr);\n+      }\n+      continue;\n+    }\n@@ -1733,10 +1725,4 @@\n-  \/\/ Skip live partial obj (if any) from previous region.\n-  HeapWord* cur_addr;\n-  RegionData* start_region_ptr = _summary_data.region(start_region);\n-  if (start_region_ptr->partial_obj_size() != 0) {\n-    HeapWord* partial_obj_start = start_region_ptr->partial_obj_addr();\n-    assert(bitmap->is_marked(partial_obj_start), \"inv\");\n-    cur_addr = partial_obj_start + cast_to_oop(partial_obj_start)->size();\n-  } else {\n-    cur_addr = start_addr;\n-  }\n+    \/\/ Fill dead space inside cur_region.\n+    if (_summary_data.is_region_aligned(cur_addr)) {\n+      cur_addr += cur_region_ptr->partial_obj_size();\n+    }\n@@ -1744,7 +1730,7 @@\n-  \/\/ end_addr is inclusive to handle regions starting with dead space.\n-  while (cur_addr <= end_addr) {\n-    \/\/ Use prefix_end to handle trailing obj in each worker region-chunk.\n-    HeapWord* live_start = bitmap->find_obj_beg(cur_addr, prefix_end);\n-    if (cur_addr != live_start) {\n-      \/\/ Only worker 0 handles proceeding dead space.\n-      if (cur_addr != start_addr || worker_id == 0) {\n+    HeapWord* region_end_addr = _summary_data.region_align_up(cur_addr + 1);\n+    assert(region_end_addr <= end_addr, \"inv\");\n+    while (cur_addr < region_end_addr) {\n+      \/\/ Use end_addr to allow filler-obj to cross region boundary.\n+      HeapWord* live_start = bitmap->find_obj_beg(cur_addr, end_addr);\n+      if (cur_addr != live_start) {\n+        \/\/ Found dead space [cur_addr, live_start).\n@@ -1753,0 +1739,6 @@\n+      if (live_start >= region_end_addr) {\n+        cur_addr = live_start;\n+        break;\n+      }\n+      assert(bitmap->is_marked(live_start), \"inv\");\n+      cur_addr = live_start + cast_to_oop(live_start)->size();\n@@ -1754,5 +1746,0 @@\n-    if (live_start >= end_addr) {\n-      break;\n-    }\n-    assert(bitmap->is_marked(live_start), \"inv\");\n-    cur_addr = live_start + cast_to_oop(live_start)->size();\n@@ -1791,7 +1778,31 @@\n-  HeapWord* cur_addr = bottom;\n-  while (cur_addr < dense_prefix_end) {\n-    oop obj = cast_to_oop(cur_addr);\n-    oopDesc::verify(obj);\n-    if (!mark_bitmap()->is_marked(cur_addr)) {\n-      Klass* k = cast_to_oop(cur_addr)->klass();\n-      assert(k == Universe::fillerArrayKlass() || k == vmClasses::FillerObject_klass(), \"inv\");\n+\n+  const size_t region_size = ParallelCompactData::RegionSize;\n+\n+  for (HeapWord* cur_addr = bottom; cur_addr < dense_prefix_end; \/* empty *\/) {\n+    RegionData* cur_region_ptr = _summary_data.addr_to_region_ptr(cur_addr);\n+    if (cur_region_ptr->data_size() == region_size) {\n+      \/\/ Full; no dead space. Next region.\n+      if (_summary_data.is_region_aligned(cur_addr)) {\n+        cur_addr += region_size;\n+      } else {\n+        cur_addr = _summary_data.region_align_up(cur_addr);\n+      }\n+      continue;\n+    }\n+\n+    \/\/ This region contains filler objs.\n+    if (_summary_data.is_region_aligned(cur_addr)) {\n+      cur_addr += cur_region_ptr->partial_obj_size();\n+    }\n+\n+    HeapWord* region_end_addr = _summary_data.region_align_up(cur_addr + 1);\n+    assert(region_end_addr <= dense_prefix_end, \"inv\");\n+\n+    while (cur_addr < region_end_addr) {\n+      oop obj = cast_to_oop(cur_addr);\n+      oopDesc::verify(obj);\n+      if (!mark_bitmap()->is_marked(cur_addr)) {\n+        Klass* k = cast_to_oop(cur_addr)->klass();\n+        assert(k == Universe::fillerArrayKlass() || k == vmClasses::FillerObject_klass(), \"inv\");\n+      }\n+      cur_addr += obj->size();\n@@ -1799,1 +1810,0 @@\n-    cur_addr += obj->size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":76,"deletions":66,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-#include \"gc\/shared\/strongRootsScope.hpp\"\n@@ -487,3 +486,1 @@\n-    StrongRootsScope srs(0);\n-\n-    MarkingNMethodClosure mark_code_closure(&follow_root_closure);\n+    GCTraceTime(Debug, gc, phases) tm_m(\"Marking From Roots\", gc_timer());\n@@ -498,2 +495,7 @@\n-    \/\/ 2. Threads stack frames and active nmethods in them.\n-    Threads::oops_do(&follow_root_closure, &mark_code_closure);\n+    {\n+      \/\/ 2. Threads stack frames and active nmethods in them.\n+      NMethodMarkingScope nmethod_marking_scope;\n+      MarkingNMethodClosure mark_code_closure(&follow_root_closure);\n+\n+      Threads::oops_do(&follow_root_closure, &mark_code_closure);\n+    }\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-  volatile_nonstatic_field(BasicLock,          _metadata,                              uintptr_t)                                    \\\n+  volatile_nonstatic_field(BasicLock,          _monitor,                               ObjectMonitor*)                               \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -511,1 +511,1 @@\n-  \/\/ for Object_klass_loaded in objArrayKlassKlass::allocate_objArray_klass_impl.\n+  \/\/ for Object_klass_is_loaded in ObjArrayKlass::allocate_objArray_klass.\n@@ -597,1 +597,1 @@\n-  assert(vmClasses::Class_klass_loaded(), \"java.lang.Class should be loaded\");\n+  assert(vmClasses::Class_klass_is_loaded(), \"java.lang.Class should be loaded\");\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-  if (vmClasses::Object_klass_loaded()) {\n+  if (vmClasses::Object_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-  guarantee((!Universe::is_bootstrapping() || vmClasses::Object_klass_loaded()), \"Really ?!\");\n+  guarantee((!Universe::is_bootstrapping() || vmClasses::Object_klass_is_loaded()), \"Really ?!\");\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  if (vmClasses::ClassLoader_klass_loaded()) {\n+  if (vmClasses::ClassLoader_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -603,2 +603,1 @@\n-\/\/ The log parameter is for clean_weak_klass_links to report unlinked classes.\n-Klass* Klass::subklass(bool log) const {\n+Klass* Klass::subklass() const {\n@@ -615,5 +614,0 @@\n-    } else if (log) {\n-      if (log_is_enabled(Trace, class, unload)) {\n-        ResourceMark rm;\n-        log_trace(class, unload)(\"unlinking class (subclass): %s\", chain->external_name());\n-      }\n@@ -690,1 +684,2 @@\n-void Klass::clean_subklass() {\n+\/\/ The log parameter is for clean_weak_klass_links to report unlinked classes.\n+Klass* Klass::clean_subklass(bool log) {\n@@ -695,1 +690,5 @@\n-      return;\n+      return subklass;\n+    }\n+    if (log && log_is_enabled(Trace, class, unload)) {\n+      ResourceMark rm;\n+      log_trace(class, unload)(\"unlinking class (subclass): %s\", subklass->external_name());\n@@ -698,1 +697,1 @@\n-    AtomicAccess::cmpxchg(&_subklass, subklass, subklass->next_sibling());\n+    AtomicAccess::cmpxchg(&_subklass, subklass, subklass->next_sibling(log));\n@@ -717,2 +716,1 @@\n-    Klass* sub = current->subklass(true);\n-    current->clean_subklass();\n+    Klass* sub = current->clean_subklass(true);\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-  Klass* subklass(bool log = false) const;\n+  Klass* subklass() const;\n@@ -420,0 +420,1 @@\n+  void     set_next_sibling(Klass* s);\n@@ -422,1 +423,0 @@\n-  void     set_next_sibling(Klass* s);\n@@ -778,1 +778,1 @@\n-  void clean_subklass();\n+  Klass* clean_subklass(bool log = false);\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_loaded()) {\n+  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_loaded()) {\n+  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/refArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1209,0 +1209,5 @@\n+  \/\/ Mod by zero?  Throw exception at runtime!\n+  if (t2 == TypeInteger::zero(bt)) {\n+    return Type::TOP;\n+  }\n+\n@@ -1218,5 +1223,0 @@\n-  \/\/ Mod by zero?  Throw exception at runtime!\n-  if (t2 == TypeInteger::zero(bt)) {\n-    return Type::TOP;\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1360,1 +1360,1 @@\n-    size_t avail_mem = 0;\n+    physical_memory_size_type avail_mem = 0;\n@@ -1364,1 +1364,1 @@\n-      (\"loading name=%s kind=%d (avail_mem=%zuK)\",\n+      (\"loading name=%s kind=%d (avail_mem=\" PHYS_MEM_TYPE_FORMAT \"K)\",\n@@ -1532,1 +1532,1 @@\n-      (\"loaded name=%s (avail_mem=%zuK)\", the_class->external_name(), avail_mem >> 10);\n+      (\"loaded name=%s (avail_mem=\" PHYS_MEM_TYPE_FORMAT \"K)\", the_class->external_name(), avail_mem >> 10);\n@@ -4490,1 +4490,1 @@\n-    size_t avail_mem = 0;\n+    physical_memory_size_type avail_mem = 0;\n@@ -4494,1 +4494,1 @@\n-      (\"redefined name=%s, count=%d (avail_mem=%zuK)\",\n+      (\"redefined name=%s, count=%d (avail_mem=\" PHYS_MEM_TYPE_FORMAT \"K)\",\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2620,1 +2620,1 @@\n-  size_t avail_mem = 0;\n+  physical_memory_size_type avail_mem = 0;\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1665,1 +1665,1 @@\n-  size_t phys_mem = os::physical_memory();\n+  physical_memory_size_type phys_mem = os::physical_memory();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1645,4 +1645,3 @@\n-  if (thread->is_interp_only_mode()) {\n-    JvmtiThreadState *state = thread->jvmti_thread_state();\n-    if (state != nullptr)\n-      state->invalidate_cur_stack_depth();\n+  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  if (state != nullptr) {\n+    state->invalidate_cur_stack_depth();\n@@ -1653,1 +1652,1 @@\n-  if (JvmtiExport::can_post_frame_pop()) {\n+  if (JvmtiExport::has_frame_pops(thread)) {\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1788,1 +1788,1 @@\n-                mon_info->lock()->set_bad_metadata_deopt();\n+                mon_info->lock()->set_bad_monitor_deopt();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,0 @@\n-\n@@ -687,1 +686,0 @@\n-  volatile_nonstatic_field(BasicLock,          _metadata,                                     uintptr_t)                             \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3133,1 +3133,1 @@\n-    size_t free_memory = 0;\n+    physical_memory_size_type free_memory = 0;\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+#define PHYS_MEM_TYPE_FORMAT     \"%\"          PRIu64\n@@ -420,0 +421,5 @@\n+\/\/ This typedef is to address the issue of running a 32-bit VM. In this case the amount\n+\/\/ of physical memory may not fit in size_t, so we have to have a larger type. Once 32-bit\n+\/\/ is deprecated, one can use size_t.\n+typedef uint64_t physical_memory_size_type;\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+import sun.invoke.util.BytecodeDescriptor;\n@@ -95,2 +96,0 @@\n-import sun.reflect.generics.repository.MethodRepository;\n-import sun.reflect.generics.repository.ConstructorRepository;\n@@ -1528,11 +1527,4 @@\n-            MethodRepository typeInfo = MethodRepository.make(enclosingInfo.getDescriptor(),\n-                                                              getFactory());\n-            Class<?>   returnType       = toClass(typeInfo.getReturnType());\n-            Type []    parameterTypes   = typeInfo.getParameterTypes();\n-            Class<?>[] parameterClasses = new Class<?>[parameterTypes.length];\n-\n-            \/\/ Convert Types to Classes; returned types *should*\n-            \/\/ be class objects since the methodDescriptor's used\n-            \/\/ don't have generics information\n-            for(int i = 0; i < parameterClasses.length; i++)\n-                parameterClasses[i] = toClass(parameterTypes[i]);\n+            \/\/ Descriptor already validated by VM\n+            List<Class<?>> types = BytecodeDescriptor.parseMethod(enclosingInfo.getDescriptor(), getClassLoader());\n+            Class<?>   returnType       = types.removeLast();\n+            Class<?>[] parameterClasses = types.toArray(EMPTY_CLASS_ARRAY);\n@@ -1657,11 +1649,4 @@\n-            ConstructorRepository typeInfo = ConstructorRepository.make(enclosingInfo.getDescriptor(),\n-                                                                        getFactory());\n-            Type []    parameterTypes   = typeInfo.getParameterTypes();\n-            Class<?>[] parameterClasses = new Class<?>[parameterTypes.length];\n-\n-            \/\/ Convert Types to Classes; returned types *should*\n-            \/\/ be class objects since the methodDescriptor's used\n-            \/\/ don't have generics information\n-            for (int i = 0; i < parameterClasses.length; i++)\n-                parameterClasses[i] = toClass(parameterTypes[i]);\n-\n+            \/\/ Descriptor already validated by VM\n+            List<Class<?>> types = BytecodeDescriptor.parseMethod(enclosingInfo.getDescriptor(), getClassLoader());\n+            types.removeLast();\n+            Class<?>[] parameterClasses = types.toArray(EMPTY_CLASS_ARRAY);\n@@ -1973,1 +1958,1 @@\n-        return list.toArray(new Class<?>[0]);\n+        return list.toArray(EMPTY_CLASS_ARRAY);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-     * where each day is 86400 seconds which implies a 24 hour day.\n+     * where each day is 86,400 seconds which implies a 24 hour day.\n@@ -198,1 +198,1 @@\n-     * where each hour is 3600 seconds.\n+     * where each hour is 3,600 seconds.\n@@ -386,2 +386,2 @@\n-     *    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n-     *    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+     *    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3,600 seconds)\n+     *    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86,400 seconds)\n@@ -488,1 +488,1 @@\n-     * To guarantee to obtain a positive duration call {@link #abs()} on the result.\n+     * To guarantee a positive duration, call {@link #abs()} on the result.\n@@ -763,1 +763,1 @@\n-     * The number of days is multiplied by 86400 to obtain the number of seconds to add.\n+     * The number of days is multiplied by 86,400 to obtain the number of seconds to add.\n@@ -904,1 +904,1 @@\n-     * The number of days is multiplied by 86400 to obtain the number of seconds to subtract.\n+     * The number of days is multiplied by 86,400 to obtain the number of seconds to subtract.\n@@ -920,1 +920,1 @@\n-     * The number of hours is multiplied by 3600 to obtain the number of seconds to subtract.\n+     * The number of hours is multiplied by 3,600 to obtain the number of seconds to subtract.\n@@ -935,1 +935,1 @@\n-     * The number of hours is multiplied by 60 to obtain the number of seconds to subtract.\n+     * The number of minutes is multiplied by 60 to obtain the number of seconds to subtract.\n@@ -1176,1 +1176,1 @@\n-     * number of seconds by 86400.\n+     * number of seconds by 86,400.\n@@ -1191,1 +1191,1 @@\n-     * number of seconds by 3600.\n+     * number of seconds by 3,600.\n@@ -1283,1 +1283,1 @@\n-     * number of seconds by 86400.\n+     * number of seconds by 86,400.\n@@ -1487,1 +1487,1 @@\n-     *    \"20.345 seconds\"                 -- \"PT20.345S\n+     *    \"20.345 seconds\"                 -- \"PT20.345S\"\n@@ -1489,2 +1489,2 @@\n-     *    \"10 hours\" (10 * 3600 seconds)   -- \"PT10H\"\n-     *    \"2 days\" (2 * 86400 seconds)     -- \"PT48H\"\n+     *    \"10 hours\" (10 * 3,600 seconds)  -- \"PT10H\"\n+     *    \"2 days\" (2 * 86,400 seconds)    -- \"PT48H\"\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n- * forming a 86400 second day.\n+ * forming an 86,400 second day.\n@@ -121,1 +121,1 @@\n- * to be very close to the 86400th fraction of a day.\n+ * to be very close to the 86,400th fraction of a day.\n@@ -125,1 +125,1 @@\n- * As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n+ * As a result, the length of a solar day in 2012 is slightly longer than 86,400 SI seconds.\n@@ -134,1 +134,1 @@\n- * As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n+ * As such, UTC permits a day to have 86,399 SI seconds or 86,401 SI seconds where\n@@ -146,1 +146,1 @@\n- * The Java Time-Scale divides each calendar day into exactly 86400\n+ * The Java Time-Scale divides each calendar day into exactly 86,400\n@@ -174,1 +174,1 @@\n- * exactly 86400 seconds per day.\n+ * exactly 86,400 seconds per day.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-     * @param daysToSubtract  the months to subtract, positive or negative\n+     * @param daysToSubtract  the days to subtract, positive or negative\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n- * used, typically \"summer\" time.. Two additional methods,\n+ * used, typically \"summer\" time. Two additional methods,\n@@ -257,1 +257,1 @@\n-     * The local date time and first combined to form a local date-time.\n+     * The local date and time are first combined to form a local date-time.\n@@ -274,1 +274,1 @@\n-     * @return the offset date-time, not null\n+     * @return the zoned date-time, not null\n@@ -344,1 +344,1 @@\n-     * @return the offset date-time, not null\n+     * @return the zoned date-time, not null\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,18 +164,1 @@\n-            values = LintCategory.newEmptySet();\n-\n-            Source source = Source.instance(context);\n-            if (source.compareTo(Source.JDK9) >= 0) {\n-                values.add(LintCategory.DEP_ANN);\n-            }\n-            if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n-                values.add(LintCategory.STRICTFP);\n-            }\n-            values.add(LintCategory.REQUIRES_TRANSITIVE_AUTOMATIC);\n-            values.add(LintCategory.OPENS);\n-            values.add(LintCategory.MODULE);\n-            values.add(LintCategory.REMOVAL);\n-            if (!options.isSet(Option.PREVIEW)) {\n-                values.add(LintCategory.PREVIEW);\n-            }\n-            values.add(LintCategory.IDENTITY);\n-            values.add(LintCategory.INCUBATING);\n+            values = getDefaults();\n@@ -196,0 +179,17 @@\n+    \/\/ Obtain the set of on-by-default categories. Note that for a few categories,\n+    \/\/ whether the category is on-by-default depends on other compiler options.\n+    private EnumSet<LintCategory> getDefaults() {\n+        EnumSet<LintCategory> defaults = LintCategory.newEmptySet();\n+        Source source = Source.instance(context);\n+        Stream.of(LintCategory.values())\n+          .filter(lc ->\n+            switch (lc) {\n+                case DEP_ANN  -> source.compareTo(Source.JDK9) >= 0;\n+                case STRICTFP -> Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source);\n+                case PREVIEW  -> !options.isSet(Option.PREVIEW);\n+                default       -> lc.enabledByDefault;\n+            })\n+          .forEach(defaults::add);\n+        return defaults;\n+    }\n+\n@@ -224,1 +224,1 @@\n-        CLASSFILE(\"classfile\", false),\n+        CLASSFILE(\"classfile\", false, false),\n@@ -241,1 +241,1 @@\n-        DEP_ANN(\"dep-ann\"),\n+        DEP_ANN(\"dep-ann\", true, true),\n@@ -271,1 +271,1 @@\n-        IDENTITY(\"identity\", true, \"synchronization\"),\n+        IDENTITY(\"identity\", true, true, \"synchronization\"),\n@@ -279,1 +279,1 @@\n-        INCUBATING(\"incubating\", false),\n+        INCUBATING(\"incubating\", false, true),\n@@ -300,1 +300,1 @@\n-        MODULE(\"module\"),\n+        MODULE(\"module\", true, true),\n@@ -310,1 +310,1 @@\n-        OPENS(\"opens\"),\n+        OPENS(\"opens\", true, true),\n@@ -318,1 +318,1 @@\n-        OPTIONS(\"options\", false),\n+        OPTIONS(\"options\", false, false),\n@@ -326,1 +326,1 @@\n-        OUTPUT_FILE_CLASH(\"output-file-clash\", false),\n+        OUTPUT_FILE_CLASH(\"output-file-clash\", false, false),\n@@ -344,1 +344,1 @@\n-        PATH(\"path\", false),\n+        PATH(\"path\", false, false),\n@@ -348,0 +348,3 @@\n+         *\n+         * <p>\n+         * This category is not supported by {@code @SuppressWarnings}.\n@@ -349,1 +352,1 @@\n-        PROCESSING(\"processing\"),\n+        PROCESSING(\"processing\", false, false),\n@@ -359,1 +362,1 @@\n-        REMOVAL(\"removal\"),\n+        REMOVAL(\"removal\", true, true),\n@@ -369,1 +372,1 @@\n-        REQUIRES_TRANSITIVE_AUTOMATIC(\"requires-transitive-automatic\"),\n+        REQUIRES_TRANSITIVE_AUTOMATIC(\"requires-transitive-automatic\", true, true),\n@@ -384,1 +387,1 @@\n-        STRICTFP(\"strictfp\"),\n+        STRICTFP(\"strictfp\", true, true),\n@@ -414,1 +417,1 @@\n-        PREVIEW(\"preview\"),\n+        PREVIEW(\"preview\", true, true),\n@@ -422,1 +425,1 @@\n-            this(option, true);\n+            this(option, true, false);\n@@ -425,1 +428,1 @@\n-        LintCategory(String option, boolean annotationSuppression, String... aliases) {\n+        LintCategory(String option, boolean annotationSuppression, boolean enabledByDefault, String... aliases) {\n@@ -428,0 +431,1 @@\n+            this.enabledByDefault = enabledByDefault;\n@@ -464,0 +468,6 @@\n+\n+        \/**\n+         * Is this category included in the default set of enabled lint categories?\n+         * Note that for some categories, command line options can alter this at runtime.\n+         *\/\n+        public final boolean enabledByDefault;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":44,"deletions":34,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -171,1 +171,2 @@\n-    Enable recommended warning categories\n+    Enable recommended lint warning categories. In this release, all\\n\\\n+    available lint warning categories are recommended.\n@@ -173,1 +174,1 @@\n-    Enable all warning categories\n+    Enable all lint warning categories\n@@ -175,1 +176,1 @@\n-    Disable all warning categories\n+    Disable all lint warning categories\n@@ -180,3 +181,4 @@\n-    Warning categories to enable or disable, separated by comma.\\n\\\n-    Precede a key by ''-'' to disable the specified warning.\\n\\\n-    Use --help-lint to see the supported keys.\n+    Lint warning categories to enable or disable, separated by comma.\\n\\\n+    Precede a key by ''-'' to disable the specified category. Use\\n\\\n+    ''--help-lint'' to show supported keys and which categories are\\n\\\n+    enabled by default.\n@@ -301,7 +303,0 @@\n-# L10N: do not localize: identity synchronization\n-javac.opt.Xlint.desc.synchronization=\\\n-    Warn about synchronization attempts on instances of value-based classes.\\n\\\n-\\                         This key is a deprecated alias for ''identity'', which has the same uses and\\n\\\n-\\                         effects. Users are encouraged to use the ''identity'' category for all future\\n\\\n-\\                         and existing uses of ''synchronization''.\n-\n@@ -311,0 +306,4 @@\n+javac.opt.Xlint.alias.of=\\\n+    Deprecated alias for ''{0}'' with an identical effect. Users are encouraged to use\\n\\\n+\\                         ''{0}'' instead of ''{1}'' for all current and future uses.\n+\n@@ -344,0 +343,5 @@\n+javac.opt.help.lint.enabled.by.default=\\\n+    The following lint warning categories are enabled by default:\n+javac.opt.help.lint.footer=\\\n+    Categories and their aliases can be used interchangeably; for example, the flag\\n\\\n+    ''-Xlint:{0},{1}'' would be redundant.\n@@ -356,0 +360,1 @@\n+# L10N: do not localize: ''preview''\n@@ -357,1 +362,1 @@\n-    Enable preview language features.\\n\\\n+    Enable preview language features. Also disables the ''preview'' lint category.\\n\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -144,1 +144,2 @@\n- * strings that can be used with {@code @SuppressWarnings}.\n+ * strings that are recognized by <em>javac<\/em> in {@code @SuppressWarnings}\n+ * annotations. Unrecognized strings are ignored.\n@@ -155,1 +156,0 @@\n- * <tr><th scope=\"row\">{@code classfile}            <td>issues related to classfile contents\n@@ -168,1 +168,0 @@\n- * <tr><th scope=\"row\">{@code incubating}           <td>use of incubating modules\n@@ -178,1 +177,0 @@\n- * <tr><th scope=\"row\">{@code path}                 <td>invalid path elements on the command line\n@@ -182,1 +180,0 @@\n- * <tr><th scope=\"row\">{@code restricted}           <td>use of restricted methods\n@@ -185,0 +182,1 @@\n+ * <tr><th scope=\"row\">{@code restricted}           <td>use of restricted methods\n@@ -192,5 +190,3 @@\n- * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes;\n- *                                                      this key is a deprecated alias for {@code identity}, which has\n- *                                                      the same uses and effects. Users are encouraged to use the\n- *                                                      {@code identity} category for all future and existing uses of\n- *                                                      {@code synchronization}\n+ * <tr><th scope=\"row\">{@code synchronization}      <td>deprecated alias for {@code identity} with an identical effect.\n+ *                                                      Users are encouraged to use {@code identity} instead of\n+ *                                                      {@code synchronization} for all current and future uses.\n@@ -212,0 +208,19 @@\n+ * All of the non-{@code docllint:} strings listed above may also be used with the {@code -Xlint} command line flag.\n+ * The {@code -Xlint} flag also supports these strings not supported by {@code @SuppressWarnings}:\n+ *\n+ * <table class=\"striped\">\n+ *     <caption>Strings supported by {@code -Xlint} but not {@code SuppressWarnings}<\/caption>\n+ * <thead>\n+ * <tr><th>String<th>Warnings Related To ...\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><th scope=\"row\">{@code classfile}            <td>issues related to classfile contents\n+ * <tr><th scope=\"row\">{@code incubating}           <td>use of incubating modules\n+ * <tr><th scope=\"row\">{@code options}              <td>issues relating to use of command line options\n+ * <tr><th scope=\"row\">{@code output-file-clash}    <td>output files being overwritten due to filename clashes\n+ * <tr><th scope=\"row\">{@code path}                 <td>invalid path elements on the command line\n+ * <tr><th scope=\"row\">{@code processing}           <td>issues regarding annotation processing\n+ * <tr><th scope=\"row\">{@code restricted}           <td>use of restricted methods\n+ * <\/tbody>\n+ * <\/table>\n+ *\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -211,2 +211,2 @@\n-:   Enables preview language features. Used in conjunction with either\n-    [`-source`](#option-source) or [`--release`](#option-release).\n+:   Enables preview language features. Also disables the `preview` lint category.\n+    Used in conjunction with either [`-source`](#option-source) or [`--release`](#option-release).\n@@ -560,2 +560,2 @@\n-:   Enables all recommended warnings. In this release, enabling all available\n-    warnings is recommended.\n+:   Enables recommended lint warning categories. In this release, all available\n+    lint warning categories are recommended.\n@@ -564,1 +564,1 @@\n-:   Enables and\/or disables warning categories using the one or more of the keys described\n+:   Enables and\/or disables lint warning categories using the one or more of the keys described\n@@ -654,4 +654,3 @@\n-    -   `synchronization`: Warns about synchronization attempts on instances\n-        of value-based classes. This key is a deprecated alias for `identity`,\n-        which has the same uses and effects. Users are encouraged to use the\n-        `identity` category for all future and existing uses of `synchronization`.\n+    -   `synchronization`: Deprecated alias for `identity` with an identical\n+        effect. Users are encouraged to use `identity` instead of `synchronization`\n+        for all current and future uses.\n@@ -673,3 +672,7 @@\n-    With the exception of `all` and `none`, the keys can be used with\n-    the `@SuppressWarnings` annotation to suppress warnings in a part\n-    of the source code being compiled.\n+    The keys listed above may be used in `@SuppressWarnings` annotations to suppress\n+    warnings within the annotated declaration, with the exception of: `all`, `none`,\n+    `classfile`, `incubating`, `options`, `output-file-clash`, `processing`, and `path`.\n+\n+    By default, the following lint warning categories are enabled: `dep-ann`, `identity`,\n+    `incubating`, `module`, `opens`, `preview`, `removal`, `requires-transitive-automatic`,\n+    and `strictfp`.\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -656,0 +656,10 @@\n+    public static final String CONV_D2I = PREFIX + \"CONV_D2I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CONV_D2I, \"ConvD2I\");\n+    }\n+\n+    public static final String CONV_D2L = PREFIX + \"CONV_D2L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CONV_D2L, \"ConvD2L\");\n+    }\n+\n@@ -661,0 +671,10 @@\n+    public static final String CONV_F2I = PREFIX + \"CONV_F2I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CONV_F2I, \"ConvF2I\");\n+    }\n+\n+    public static final String CONV_F2L = PREFIX + \"CONV_F2L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CONV_F2L, \"ConvF2L\");\n+    }\n+\n@@ -2735,0 +2755,60 @@\n+    public static final String X86_SCONV_D2I = PREFIX + \"X86_SCONV_D2I\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_D2I, \"convD2I_reg_reg\");\n+    }\n+\n+    public static final String X86_SCONV_D2L = PREFIX + \"X86_SCONV_D2L\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_D2L, \"convD2L_reg_reg\");\n+    }\n+\n+    public static final String X86_SCONV_F2I = PREFIX + \"X86_SCONV_F2I\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_F2I, \"convF2I_reg_reg\");\n+    }\n+\n+    public static final String X86_SCONV_F2L = PREFIX + \"X86_SCONV_F2L\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_F2L, \"convF2L_reg_reg\");\n+    }\n+\n+    public static final String X86_SCONV_D2I_AVX10 = PREFIX + \"X86_SCONV2_D2I_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_D2I_AVX10, \"convD2I_(reg_reg|reg_mem)_avx10\");\n+    }\n+\n+    public static final String X86_SCONV_D2L_AVX10 = PREFIX + \"X86_SCONV_D2L_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_D2L_AVX10, \"convD2L_(reg_reg|reg_mem)_avx10\");\n+    }\n+\n+    public static final String X86_SCONV_F2I_AVX10 = PREFIX + \"X86_SCONV_F2I_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_F2I_AVX10, \"convF2I_(reg_reg|reg_mem)_avx10\");\n+    }\n+\n+    public static final String X86_SCONV_F2L_AVX10 = PREFIX + \"X86_SCONV_F2L_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_SCONV_F2L_AVX10, \"convF2L_(reg_reg|reg_mem)_avx10\");\n+    }\n+\n+    public static final String X86_VCAST_F2X = PREFIX + \"X86_VCAST_F2X\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_VCAST_F2X, \"castFtoX_reg_(av|eve)x\");\n+    }\n+\n+    public static final String X86_VCAST_D2X = PREFIX + \"X86_VCAST_D2X\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_VCAST_D2X, \"castDtoX_reg_(av|eve)x\");\n+    }\n+\n+    public static final String X86_VCAST_F2X_AVX10 = PREFIX + \"X86_VCAST_F2X_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_VCAST_F2X_AVX10, \"castFtoX_(reg|mem)_avx10\");\n+    }\n+\n+    public static final String X86_VCAST_D2X_AVX10 = PREFIX + \"X86_VCAST_D2X_AVX10\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(X86_VCAST_D2X_AVX10, \"castDtoX_(reg|mem)_avx10\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -490,1 +490,0 @@\n-java\/awt\/KeyboardFocusmanager\/ConsumeNextMnemonicKeyTypedTest\/ConsumeNextMnemonicKeyTypedTest.java 8321303 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,2 +55,0 @@\n-jdk\/jshell\/ToolSimpleTest.java                                                  8366582    generic-all\n-jdk\/jshell\/ToolLocalSimpleTest.java                                             8366582    generic-all\n","filename":"test\/langtools\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}