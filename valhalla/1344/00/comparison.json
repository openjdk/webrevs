{"files":[{"patch":"@@ -423,0 +423,5 @@\n+    \/**\n+     * Flag to indicate that a class has at least one strict field\n+     *\/\n+    public static final long HAS_STRICT = 1L<<52; \/\/ ClassSymbols, temporary hack\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -410,0 +410,4 @@\n+    public boolean hasStrict() {\n+        return (flags() & HAS_STRICT) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -394,0 +394,2 @@\n+                \/\/ temporary hack to indicate that a class has at least one strict field\n+                toAnnotate.owner.flags_field |= Flags.HAS_STRICT;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1215,1 +1215,1 @@\n-                        if (owner.isValueClass()) {\n+                        if (owner.isValueClass() || owner.hasStrict()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -445,1 +445,1 @@\n-                    if (c.isValueClass()) {\n+                    if (c.isValueClass() || c.hasStrict()) {\n@@ -560,1 +560,1 @@\n-            if (md.sym.owner.isValueClass()) {\n+            if (md.sym.owner.isValueClass() || md.sym.owner.hasStrict()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,2 +69,10 @@\n-    private static String[] PREVIEW_OPTIONS = {\"--enable-preview\", \"-source\",\n-            Integer.toString(Runtime.version().feature())};\n+    private static String[] PREVIEW_OPTIONS = {\n+            \"--enable-preview\",\n+            \"-source\", Integer.toString(Runtime.version().feature())\n+    };\n+\n+    private static String[] PREVIEW_OPTIONS_PLUS_VM_ANNO = {\n+            \"--enable-preview\",\n+            \"-source\", Integer.toString(Runtime.version().feature()),\n+            \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+    };\n@@ -1015,0 +1023,51 @@\n+\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            setCompileOptions(PREVIEW_OPTIONS_PLUS_VM_ANNO);\n+            String[] sources = new String[]{\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        static value class IValue {\n+                            int i = 0;\n+                        }\n+                        @Strict\n+                        final IValue val = new IValue();\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        static value class IValue {\n+                            int i = 0;\n+                        }\n+                        @Strict\n+                        final IValue val;\n+                        Test() {\n+                            val = new IValue();\n+                        }\n+                    }\n+                    \"\"\"\n+            };\n+            expectedCodeSequence = \"aload_0,new,dup,invokespecial,putfield,aload_0,invokespecial,return,\";\n+            for (String src : sources) {\n+                dir = assertOK(true, src);\n+                for (final File fileEntry : dir.listFiles()) {\n+                    ClassFile classFile = ClassFile.read(fileEntry);\n+                    if (classFile.getName().equals(\"Test\")) {\n+                        for (Method method : classFile.methods) {\n+                            if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n+                                Code_attribute code = (Code_attribute)method.attributes.get(\"Code\");\n+                                String foundCodeSequence = \"\";\n+                                for (Instruction inst: code.getInstructions()) {\n+                                    foundCodeSequence += inst.getMnemonic() + \",\";\n+                                }\n+                                Assert.check(expectedCodeSequence.equals(foundCodeSequence), \"found \" + foundCodeSequence);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        } finally {\n+            setCompileOptions(previousOptions);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"}]}