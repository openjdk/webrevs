{"files":[{"patch":"@@ -965,3 +965,3 @@\n-                        MemberName.getFactory().resolveOrFail(REF_invokeVirtual, member,\n-                                                              DirectMethodHandle.class, LM_TRUSTED,\n-                                                              NoSuchMethodException.class));\n+                            MemberName.getFactory().resolveOrFail(REF_invokeVirtual, member,\n+                                                                  DirectMethodHandle.class, LM_TRUSTED,\n+                                                                  NoSuchMethodException.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -401,2 +401,0 @@\n-        \/\/ all fields declared in a value type are effectively final\n-        assert(!clazz.isValue() || !isField() || Modifier.isFinal(flags));\n@@ -443,1 +441,1 @@\n-    \/** Query whether this member is a flattened field *\/\n+    \/** Query whether this member is a flat field *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5193,5 +5193,1 @@\n-        if (type.isPrimitive()) {\n-            return zero(Wrapper.forPrimitiveType(type), type);\n-        } else {\n-            return zero(Wrapper.OBJECT, type);\n-        }\n+        return type.isPrimitive() ?  zero(Wrapper.forPrimitiveType(type), type) : zero(Wrapper.OBJECT, type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -953,6 +953,4 @@\n-         * class to get its Class object at runtime.  And also generate code\n-         * to invoke Class::asValueType if the class is a primitive value type.\n-         *\n-         * The code is written to the supplied stream.  Note that the code generated\n-         * by this method may caused the checked ClassNotFoundException to be thrown.\n-         * A class loader is anticipated at local variable index 0.\n+         * class to get its Class object at runtime.  The code is written to\n+         * the supplied stream.  Note that the code generated by this method\n+         * may caused the checked ClassNotFoundException to be thrown. A class\n+         * loader is anticipated at local variable index 0.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -256,1 +256,0 @@\n-     * @param simpleName      the simple name of the record class\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1528,1 +1528,1 @@\n-     * For primitive type, CAS should do substitutability test as opposed\n+     * For value type, CAS should do substitutability test as opposed\n@@ -1531,2 +1531,2 @@\n-     * Perhaps we can keep the xxxObject methods for compatibility and\n-     * change the JDK 13 xxxReference method signature freely.\n+     * TODO: replace global lock workaround with the proper support for\n+     * atomic access to value objects and loosely consistent values.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-     * Returns true if the given {@code Class} object is implicitly constructible\n+     * {@return true if the given {@code Class} object is implicitly constructible}\n@@ -49,1 +49,1 @@\n-     * Returns the default value of the given value class type.\n+     * {@return the default value of the given value class type}\n@@ -67,1 +67,1 @@\n-     * Returns {@code CheckedType} representing the type of the given field.\n+     * {@return {@code CheckedType} representing the type of the given field}\n@@ -75,1 +75,1 @@\n-     * Returns {@code CheckedType} representing the component type of the given array.\n+     * {@return {@code CheckedType} representing the component type of the given array}\n@@ -122,0 +122,3 @@\n+    \/**\n+     * {@return true if the given array is a null-restricted array}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/ValueClass.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}