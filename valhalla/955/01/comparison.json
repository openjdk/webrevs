{"files":[{"patch":"@@ -43,1 +43,1 @@\n-      uses: actions\/checkout@v3\n+      uses: actions\/checkout@v4\n","filename":".github\/actions\/get-gtest\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-      uses: actions\/checkout@v3\n+      uses: actions\/checkout@v4\n","filename":".github\/actions\/get-jtreg\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        uses: actions\/checkout@v3\n+        uses: actions\/checkout@v4\n","filename":".github\/workflows\/build-cross-compile.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        uses: actions\/checkout@v3\n+        uses: actions\/checkout@v4\n","filename":".github\/workflows\/build-linux.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        uses: actions\/checkout@v3\n+        uses: actions\/checkout@v4\n","filename":".github\/workflows\/build-macos.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        uses: actions\/checkout@v3\n+        uses: actions\/checkout@v4\n","filename":".github\/workflows\/build-windows.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        uses: actions\/checkout@v3\n+        uses: actions\/checkout@v4\n","filename":".github\/workflows\/test.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -563,2 +563,4 @@\n-    TOOLCHAIN_CFLAGS_JVM=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -MP\"\n-    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -Zc:wchar_t-\"\n+    # The -utf-8 option sets source and execution character sets to UTF-8 to enable correct\n+    # compilation of all source files regardless of the active code page on Windows.\n+    TOOLCHAIN_CFLAGS_JVM=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -utf-8 -MP\"\n+    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -utf-8 -Zc:wchar_t-\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,0 +90,9 @@\n+  # Tests are built with internal debug symbols where supported.\n+  # With Visual Studio or on macosx, we revert to external.\n+  $1_COPY_DEBUG_SYMBOLS := false\n+  ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+    $1_COPY_DEBUG_SYMBOLS := true\n+  else ifeq ($(call isTargetOs, macosx), true)\n+    $1_COPY_DEBUG_SYMBOLS := true\n+  endif\n+\n@@ -109,1 +118,1 @@\n-        COPY_DEBUG_SYMBOLS := $$(if $$($1_COPY_DEBUG_SYMBOLS_$$(name)),$$($1_COPY_DEBUG_SYMBOLS_$$(name)),false), \\\n+        COPY_DEBUG_SYMBOLS := $$($1_COPY_DEBUG_SYMBOLS), \\\n","filename":"make\/common\/TestFilesCompilation.gmk","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+JVM_ExpandStackFrameInfo\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,6 @@\n+    static final String[] LIST_PATTERN_KEYS = {\n+            \"ListPatterns_standard\",\n+            \"ListPatterns_or\",\n+            \"ListPatterns_unit\",\n+    };\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/Bundle.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -624,1 +624,8 @@\n-            var source = bundleMap.get(aliases.get(key));\n+            var sourceKey = aliases.get(key);\n+            if (key.startsWith(\"ListPatterns_\")) {\n+                String k;\n+                while ((k = aliases.get(sourceKey)) != null) {\n+                    sourceKey = k;\n+                }\n+            }\n+            var source = bundleMap.get(sourceKey);\n@@ -874,0 +881,1 @@\n+        \"ListPatterns\",\n@@ -938,0 +946,8 @@\n+\n+        \/\/ ListPatterns\n+        for (var lpKey : Bundle.LIST_PATTERN_KEYS) {\n+            copyIfPresent(map, lpKey, formatData);\n+            copyIfPresent(map, lpKey + \"-short\", formatData);\n+            copyIfPresent(map, lpKey + \"-narrow\", formatData);\n+        }\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Optional;\n@@ -815,0 +816,1 @@\n+                        || (currentContainer.getqName().equals(\"listPattern\"))\n@@ -823,0 +825,22 @@\n+        \/\/ ListPatterns\n+        case \"listPattern\":\n+            currentStyle = Optional.ofNullable(attributes.getValue(\"type\")).orElse(\"standard\");\n+            pushStringArrayEntry(qName, attributes, \"ListPatterns_\" + currentStyle, 5);\n+            break;\n+        case \"listPatternPart\":\n+            type = attributes.getValue(\"type\");\n+            pushStringArrayElement(qName, attributes,\n+                switch (type) {\n+                    case \"start\" -> 0;\n+                    case \"middle\" -> 1;\n+                    case \"end\" -> 2;\n+                    case \"2\" -> 3;\n+                    case \"3\" -> 4;\n+                    default -> throw new IllegalArgumentException(\n+                        \"\"\"\n+                        The \"type\" attribute value for \"listPatternPart\" element is not recognized: %s\n+                        \"\"\".formatted(type)\n+                    );\n+                });\n+            break;\n+\n@@ -976,0 +1000,3 @@\n+        case \"listPattern\":\n+            keyName = type;\n+            break;\n@@ -1038,0 +1065,13 @@\n+        \/\/ listPattern\n+        if (path.indexOf(\"..\/listPattern\") != -1) {\n+            typeKey = \"[@type='\";\n+            start = path.indexOf(typeKey);\n+            String style;\n+            if (start != -1) {\n+                style = \"ListPatterns_\" + path.substring(start + typeKey.length(), path.indexOf(\"']\", start));\n+            } else {\n+                style = \"ListPatterns_standard\";\n+            }\n+            return toJDKKey(qName, \"\", style);\n+        }\n+\n@@ -1110,0 +1150,4 @@\n+        case \"listPattern\":\n+            currentStyle = \"\";\n+            putIfEntry();\n+            break;\n@@ -1131,0 +1175,6 @@\n+            } else if (containerqName.equals(\"listPattern\")) {\n+                var sae = (StringArrayEntry)entry.getParent();\n+                CLDRConverter.aliases.put(\n+                        toJDKKey(containerqName, \"\", sae.getKey()),\n+                        getTarget(entry.getKey(), \"\", \"\", \"\")\n+                );\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/LDMLParseHandler.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -867,1 +867,0 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_COPY_DEBUG_SYMBOLS_libnativeStack := true\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-          assert(ext().shift() <= 0 || ext().shift() == (int)size, \"bad shift\");\n+          guarantee(ext().shift() <= 0 || ext().shift() == (int)size, \"bad shift\");\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1349,3 +1349,2 @@\n-  Label profile_cast_success, profile_cast_failure;\n-  Label *success_target = should_profile ? &profile_cast_success : success;\n-  Label *failure_target = should_profile ? &profile_cast_failure : failure;\n+  Label* success_target = success;\n+  Label* failure_target = failure;\n@@ -1369,0 +1368,2 @@\n+      Register mdo  = klass_RInfo;\n+      __ mov_metadata(mdo, md->constant_encoding());\n@@ -1372,2 +1373,0 @@\n-      Register mdo  = klass_RInfo;\n-      __ mov_metadata(mdo, md->constant_encoding());\n@@ -1383,0 +1382,9 @@\n+\n+      Label update_done;\n+      Register recv = k_RInfo;\n+      __ load_klass(recv, obj);\n+      type_profile_helper(mdo, md, data, recv, &update_done);\n+      Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+      __ addptr(counter_addr, DataLayout::counter_increment);\n+\n+      __ bind(update_done);\n@@ -1440,20 +1448,0 @@\n-  if (should_profile) {\n-    Register mdo  = klass_RInfo, recv = k_RInfo;\n-    __ bind(profile_cast_success);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    __ load_klass(recv, obj);\n-    Label update_done;\n-    type_profile_helper(mdo, md, data, recv, success);\n-    __ b(*success);\n-\n-    __ bind(profile_cast_failure);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    Address counter_addr\n-      = __ form_address(rscratch2, mdo,\n-                        md->byte_offset_of_slot(data, CounterData::count_offset()),\n-                        0);\n-    __ ldr(rscratch1, counter_addr);\n-    __ sub(rscratch1, rscratch1, DataLayout::counter_increment);\n-    __ str(rscratch1, counter_addr);\n-    __ b(*failure);\n-  }\n@@ -1491,3 +1479,3 @@\n-    Label profile_cast_success, profile_cast_failure, done;\n-    Label *success_target = should_profile ? &profile_cast_success : &done;\n-    Label *failure_target = should_profile ? &profile_cast_failure : stub->entry();\n+    Label done;\n+    Label* success_target = &done;\n+    Label* failure_target = stub->entry();\n@@ -1497,2 +1485,0 @@\n-      __ cbnz(value, not_null);\n-      \/\/ Object is null; update MDO and exit\n@@ -1501,0 +1487,2 @@\n+      __ cbnz(value, not_null);\n+      \/\/ Object is null; update MDO and exit\n@@ -1510,0 +1498,8 @@\n+\n+      Label update_done;\n+      Register recv = k_RInfo;\n+      __ load_klass(recv, value);\n+      type_profile_helper(mdo, md, data, recv, &update_done);\n+      Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+      __ addptr(counter_addr, DataLayout::counter_increment);\n+      __ bind(update_done);\n@@ -1530,19 +1526,0 @@\n-    if (should_profile) {\n-      Register mdo  = klass_RInfo, recv = k_RInfo;\n-      __ bind(profile_cast_success);\n-      __ mov_metadata(mdo, md->constant_encoding());\n-      __ load_klass(recv, value);\n-      Label update_done;\n-      type_profile_helper(mdo, md, data, recv, &done);\n-      __ b(done);\n-\n-      __ bind(profile_cast_failure);\n-      __ mov_metadata(mdo, md->constant_encoding());\n-      Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-      __ lea(rscratch2, counter_addr);\n-      __ ldr(rscratch1, Address(rscratch2));\n-      __ sub(rscratch1, rscratch1, DataLayout::counter_increment);\n-      __ str(rscratch1, Address(rscratch2));\n-      __ b(*stub->entry());\n-    }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":26,"deletions":49,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -398,5 +398,0 @@\n-\n-  \/\/ Profile the failure of the check.\n-  if (profile) {\n-    profile_typecheck_failed(r2); \/\/ blows r2\n-  }\n@@ -1332,1 +1327,1 @@\n-    record_klass_in_profile(receiver, mdp, reg2, true);\n+    record_klass_in_profile(receiver, mdp, reg2);\n@@ -1355,1 +1350,1 @@\n-                                        Label& done, bool is_virtual_call) {\n+                                        Label& done) {\n@@ -1357,8 +1352,1 @@\n-    if (is_virtual_call) {\n-      increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n-    }\n-#if INCLUDE_JVMCI\n-    else if (EnableJVMCI) {\n-      increment_mdp_data_at(mdp, in_bytes(ReceiverTypeData::nonprofiled_receiver_count_offset()));\n-    }\n-#endif \/\/ INCLUDE_JVMCI\n+    increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n@@ -1366,10 +1354,0 @@\n-    int non_profiled_offset = -1;\n-    if (is_virtual_call) {\n-      non_profiled_offset = in_bytes(CounterData::count_offset());\n-    }\n-#if INCLUDE_JVMCI\n-    else if (EnableJVMCI) {\n-      non_profiled_offset = in_bytes(ReceiverTypeData::nonprofiled_receiver_count_offset());\n-    }\n-#endif \/\/ INCLUDE_JVMCI\n-\n@@ -1377,1 +1355,1 @@\n-        &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset, non_profiled_offset);\n+        &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset);\n@@ -1383,2 +1361,1 @@\n-                                        OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                        int non_profiled_offset) {\n+                                        OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn) {\n@@ -1415,10 +1392,6 @@\n-        if (non_profiled_offset >= 0) {\n-          cbz(reg2, found_null);\n-          \/\/ Item did not match any saved item and there is no empty row for it.\n-          \/\/ Increment total counter to indicate polymorphic case.\n-          increment_mdp_data_at(mdp, non_profiled_offset);\n-          b(done);\n-          bind(found_null);\n-        } else {\n-          cbnz(reg2, done);\n-        }\n+        cbz(reg2, found_null);\n+        \/\/ Item did not match any saved item and there is no empty row for it.\n+        \/\/ Increment total counter to indicate polymorphic case.\n+        increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n+        b(done);\n+        bind(found_null);\n@@ -1432,1 +1405,1 @@\n-        item_offset_fn, item_count_offset_fn, non_profiled_offset);\n+        item_offset_fn, item_count_offset_fn);\n@@ -1479,2 +1452,1 @@\n-                                                        Register mdp, Register reg2,\n-                                                        bool is_virtual_call) {\n+                                                        Register mdp, Register reg2) {\n@@ -1484,1 +1456,1 @@\n-  record_klass_in_profile_helper(receiver, mdp, reg2, 0, done, is_virtual_call);\n+  record_klass_in_profile_helper(receiver, mdp, reg2, 0, done);\n@@ -1546,18 +1518,0 @@\n-void InterpreterMacroAssembler::profile_typecheck_failed(Register mdp) {\n-  if (ProfileInterpreter && TypeProfileCasts) {\n-    Label profile_continue;\n-\n-    \/\/ If no method data exists, go to profile_continue.\n-    test_method_data_pointer(mdp, profile_continue);\n-\n-    int count_offset = in_bytes(CounterData::count_offset());\n-    \/\/ Back up the address, since we have already bumped the mdp.\n-    count_offset -= in_bytes(VirtualCallData::virtual_call_data_size());\n-\n-    \/\/ *Decrement* the counter.  We expect to see zero or small negatives.\n-    increment_mdp_data_at(mdp, count_offset, true);\n-\n-    bind (profile_continue);\n-  }\n-}\n-\n@@ -1577,1 +1531,1 @@\n-      record_klass_in_profile(klass, mdp, reg2, false);\n+      record_klass_in_profile(klass, mdp, reg2);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":15,"deletions":61,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-                               Register reg2, bool is_virtual_call);\n+                               Register reg2);\n@@ -294,1 +294,1 @@\n-                                      Label& done, bool is_virtual_call);\n+                                      Label& done);\n@@ -297,2 +297,1 @@\n-                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                     int non_profiled_offset);\n+                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1238,0 +1238,104 @@\n+\/\/ Look up the method for a megamorphic invokeinterface call in a single pass over itable:\n+\/\/ - check recv_klass (actual object class) is a subtype of resolved_klass from CompiledICHolder\n+\/\/ - find a holder_klass (class that implements the method) vtable offset and get the method from vtable by index\n+\/\/ The target method is determined by <holder_klass, itable_index>.\n+\/\/ The receiver klass is in recv_klass.\n+\/\/ On success, the result will be in method_result, and execution falls through.\n+\/\/ On failure, execution transfers to the given label.\n+void MacroAssembler::lookup_interface_method_stub(Register recv_klass,\n+                                                  Register holder_klass,\n+                                                  Register resolved_klass,\n+                                                  Register method_result,\n+                                                  Register temp_itbl_klass,\n+                                                  Register scan_temp,\n+                                                  int itable_index,\n+                                                  Label& L_no_such_interface) {\n+  \/\/ 'method_result' is only used as output register at the very end of this method.\n+  \/\/ Until then we can reuse it as 'holder_offset'.\n+  Register holder_offset = method_result;\n+  assert_different_registers(resolved_klass, recv_klass, holder_klass, temp_itbl_klass, scan_temp, holder_offset);\n+\n+  int vtable_start_offset = in_bytes(Klass::vtable_start_offset());\n+  int itable_offset_entry_size = itableOffsetEntry::size() * wordSize;\n+  int ioffset = in_bytes(itableOffsetEntry::interface_offset());\n+  int ooffset = in_bytes(itableOffsetEntry::offset_offset());\n+\n+  Label L_loop_search_resolved_entry, L_resolved_found, L_holder_found;\n+\n+  ldrw(scan_temp, Address(recv_klass, Klass::vtable_length_offset()));\n+  add(recv_klass, recv_klass, vtable_start_offset + ioffset);\n+  \/\/ itableOffsetEntry[] itable = recv_klass + Klass::vtable_start_offset() + sizeof(vtableEntry) * recv_klass->_vtable_len;\n+  \/\/ temp_itbl_klass = itable[0]._interface;\n+  int vtblEntrySize = vtableEntry::size_in_bytes();\n+  assert(vtblEntrySize == wordSize, \"ldr lsl shift amount must be 3\");\n+  ldr(temp_itbl_klass, Address(recv_klass, scan_temp, Address::lsl(exact_log2(vtblEntrySize))));\n+  mov(holder_offset, zr);\n+  \/\/ scan_temp = &(itable[0]._interface)\n+  lea(scan_temp, Address(recv_klass, scan_temp, Address::lsl(exact_log2(vtblEntrySize))));\n+\n+  \/\/ Initial checks:\n+  \/\/   - if (holder_klass != resolved_klass), go to \"scan for resolved\"\n+  \/\/   - if (itable[0] == holder_klass), shortcut to \"holder found\"\n+  \/\/   - if (itable[0] == 0), no such interface\n+  cmp(resolved_klass, holder_klass);\n+  br(Assembler::NE, L_loop_search_resolved_entry);\n+  cmp(holder_klass, temp_itbl_klass);\n+  br(Assembler::EQ, L_holder_found);\n+  cbz(temp_itbl_klass, L_no_such_interface);\n+\n+  \/\/ Loop: Look for holder_klass record in itable\n+  \/\/   do {\n+  \/\/     temp_itbl_klass = *(scan_temp += itable_offset_entry_size);\n+  \/\/     if (temp_itbl_klass == holder_klass) {\n+  \/\/       goto L_holder_found; \/\/ Found!\n+  \/\/     }\n+  \/\/   } while (temp_itbl_klass != 0);\n+  \/\/   goto L_no_such_interface \/\/ Not found.\n+  Label L_search_holder;\n+  bind(L_search_holder);\n+    ldr(temp_itbl_klass, Address(pre(scan_temp, itable_offset_entry_size)));\n+    cmp(holder_klass, temp_itbl_klass);\n+    br(Assembler::EQ, L_holder_found);\n+    cbnz(temp_itbl_klass, L_search_holder);\n+\n+  b(L_no_such_interface);\n+\n+  \/\/ Loop: Look for resolved_class record in itable\n+  \/\/   while (true) {\n+  \/\/     temp_itbl_klass = *(scan_temp += itable_offset_entry_size);\n+  \/\/     if (temp_itbl_klass == 0) {\n+  \/\/       goto L_no_such_interface;\n+  \/\/     }\n+  \/\/     if (temp_itbl_klass == resolved_klass) {\n+  \/\/        goto L_resolved_found;  \/\/ Found!\n+  \/\/     }\n+  \/\/     if (temp_itbl_klass == holder_klass) {\n+  \/\/        holder_offset = scan_temp;\n+  \/\/     }\n+  \/\/   }\n+  \/\/\n+  Label L_loop_search_resolved;\n+  bind(L_loop_search_resolved);\n+    ldr(temp_itbl_klass, Address(pre(scan_temp, itable_offset_entry_size)));\n+  bind(L_loop_search_resolved_entry);\n+    cbz(temp_itbl_klass, L_no_such_interface);\n+    cmp(resolved_klass, temp_itbl_klass);\n+    br(Assembler::EQ, L_resolved_found);\n+    cmp(holder_klass, temp_itbl_klass);\n+    br(Assembler::NE, L_loop_search_resolved);\n+    mov(holder_offset, scan_temp);\n+    b(L_loop_search_resolved);\n+\n+  \/\/ See if we already have a holder klass. If not, go and scan for it.\n+  bind(L_resolved_found);\n+  cbz(holder_offset, L_search_holder);\n+  mov(scan_temp, holder_offset);\n+\n+  \/\/ Finally, scan_temp contains holder_klass vtable offset\n+  bind(L_holder_found);\n+  ldrw(method_result, Address(scan_temp, ooffset - ioffset));\n+  add(recv_klass, recv_klass, itable_index * wordSize + in_bytes(itableMethodEntry::method_offset())\n+    - vtable_start_offset - ioffset); \/\/ substract offsets to restore the original value of recv_klass\n+  ldr(method_result, Address(recv_klass, method_result, Address::uxtw(0)));\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -1007,0 +1007,9 @@\n+  void lookup_interface_method_stub(Register recv_klass,\n+                                    Register holder_klass,\n+                                    Register resolved_klass,\n+                                    Register method_result,\n+                                    Register temp_reg,\n+                                    Register temp_reg2,\n+                                    int itable_index,\n+                                    Label& L_no_such_interface);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -42,0 +41,2 @@\n+#include \"oops\/methodCounters.hpp\"\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  const Register resolved_klass_reg = rmethod; \/\/ resolved interface klass (REFC)\n+  const Register resolved_klass_reg = r17; \/\/ resolved interface klass (REFC)\n@@ -204,10 +204,0 @@\n-  __ lookup_interface_method(\/\/ inputs: rec. class, interface\n-                             recv_klass_reg, resolved_klass_reg, noreg,\n-                             \/\/ outputs:  scan temp. reg1, scan temp. reg2\n-                             temp_reg2, temp_reg,\n-                             L_no_such_interface,\n-                             \/*return_method=*\/false);\n-\n-  const ptrdiff_t  typecheckSize = __ pc() - start_pc;\n-  start_pc = __ pc();\n-\n@@ -215,7 +205,2 @@\n-  __ lookup_interface_method(\/\/ inputs: rec. class, interface, itable index\n-                             recv_klass_reg, holder_klass_reg, itable_index,\n-                             \/\/ outputs: method, scan temp. reg\n-                             rmethod, temp_reg,\n-                             L_no_such_interface);\n-\n-  const ptrdiff_t lookupSize = __ pc() - start_pc;\n+  __ lookup_interface_method_stub(recv_klass_reg, holder_klass_reg, resolved_klass_reg, rmethod,\n+                                  temp_reg, temp_reg2, itable_index, L_no_such_interface);\n@@ -225,1 +210,1 @@\n-  const ptrdiff_t codesize = typecheckSize + lookupSize;\n+  const ptrdiff_t codesize = __ pc() - start_pc;\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":4,"deletions":19,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,0 +110,2 @@\n+\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -40,0 +39,2 @@\n+#include \"oops\/methodCounters.hpp\"\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2794,1 +2794,1 @@\n-      if (Rd != Rs1) {                                                                        \\\n+      if (Rd != Rs1) {                                                                       \\\n@@ -2815,1 +2815,1 @@\n-      if (Rd != Rs1) {                                                                        \\\n+      if (Rd != Rs1) {                                                                       \\\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1136,1 +1136,3 @@\n-                                   Register klass_RInfo, Label* obj_is_null) {\n+                                   Register k_RInfo, Register klass_RInfo, Label* obj_is_null) {\n+  Register mdo = klass_RInfo;\n+  __ mov_metadata(mdo, md->constant_encoding());\n@@ -1140,2 +1142,0 @@\n-  Register mdo = klass_RInfo;\n-  __ mov_metadata(mdo, md->constant_encoding());\n@@ -1148,0 +1148,9 @@\n+\n+  Label update_done;\n+  Register recv = k_RInfo;\n+  __ load_klass(recv, obj);\n+  type_profile_helper(mdo, md, data, recv, &update_done);\n+  Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+  __ increment(counter_addr, DataLayout::counter_increment);\n+\n+  __ bind(update_done);\n@@ -1174,3 +1183,2 @@\n-  Label profile_cast_success, profile_cast_failure;\n-  Label *success_target = should_profile ? &profile_cast_success : success;\n-  Label *failure_target = should_profile ? &profile_cast_failure : failure;\n+  Label* success_target = success;\n+  Label* failure_target = failure;\n@@ -1193,1 +1201,1 @@\n-    profile_object(md, data, obj, klass_RInfo, obj_is_null);\n+    profile_object(md, data, obj, k_RInfo, klass_RInfo, obj_is_null);\n@@ -1210,3 +1218,1 @@\n-  if (should_profile) {\n-    type_profile(obj, md, klass_RInfo, k_RInfo, data, success, failure, profile_cast_success, profile_cast_failure);\n-  }\n+\n@@ -2125,3 +2131,3 @@\n-  Label profile_cast_success, profile_cast_failure, done;\n-  Label *success_target = should_profile ? &profile_cast_success : &done;\n-  Label *failure_target = should_profile ? &profile_cast_failure : stub->entry();\n+  Label  done;\n+  Label* success_target = &done;\n+  Label* failure_target = stub->entry();\n@@ -2130,1 +2136,1 @@\n-    profile_object(md, data, value, klass_RInfo, &done);\n+    profile_object(md, data, value, k_RInfo, klass_RInfo, &done);\n@@ -2141,19 +2147,0 @@\n-  \/\/ fall through to the success case\n-  if (should_profile) {\n-    Register mdo = klass_RInfo;\n-    Register recv = k_RInfo;\n-    __ bind(profile_cast_success);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    __ load_klass(recv, value);\n-    type_profile_helper(mdo, md, data, recv, &done);\n-    __ j(done);\n-\n-    __ bind(profile_cast_failure);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-    __ ld(t1, counter_addr);\n-    __ addi(t1, t1, -DataLayout::counter_increment);\n-    __ sd(t1, counter_addr);\n-    __ j(*stub->entry());\n-  }\n-\n@@ -2163,21 +2150,0 @@\n-void LIR_Assembler::type_profile(Register obj, ciMethodData* md, Register klass_RInfo, Register k_RInfo,\n-                                 ciProfileData* data, Label* success, Label* failure,\n-                                 Label& profile_cast_success, Label& profile_cast_failure) {\n-  Register mdo = klass_RInfo;\n-  Register recv = k_RInfo;\n-  __ bind(profile_cast_success);\n-  __ mov_metadata(mdo, md->constant_encoding());\n-  __ load_klass(recv, obj);\n-  Label update_done;\n-  type_profile_helper(mdo, md, data, recv, success);\n-  __ j(*success);\n-\n-  __ bind(profile_cast_failure);\n-  __ mov_metadata(mdo, md->constant_encoding());\n-  Address counter_addr = __ form_address(t1, mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-  __ ld(t0, counter_addr);\n-  __ addi(t0, t0, -DataLayout::counter_increment);\n-  __ sd(t0, counter_addr);\n-  __ j(*failure);\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":20,"deletions":54,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-                      Register klass_RInfo, Label* obj_is_null);\n+                      Register k_RInfo, Register klass_RInfo, Label* obj_is_null);\n@@ -108,4 +108,0 @@\n-  void type_profile(Register obj, ciMethodData* md, Register klass_RInfo, Register k_RInfo,\n-                    ciProfileData* data, Label* success, Label* failure,\n-                    Label& profile_cast_success, Label& profile_cast_failure);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1375,0 +1375,64 @@\n+\/\/ According to Java SE specification, for floating-point round operations, if\n+\/\/ the input is NaN, +\/-infinity, or +\/-0, the same input is returned as the\n+\/\/ rounded result; this differs from behavior of RISC-V fcvt instructions (which\n+\/\/ round out-of-range values to the nearest max or min value), therefore special\n+\/\/ handling is needed by NaN, +\/-Infinity, +\/-0.\n+void C2_MacroAssembler::round_double_mode(FloatRegister dst, FloatRegister src, int round_mode,\n+                                          Register tmp1, Register tmp2, Register tmp3) {\n+\n+  assert_different_registers(dst, src);\n+  assert_different_registers(tmp1, tmp2, tmp3);\n+\n+  \/\/ Set rounding mode for conversions\n+  \/\/ Here we use similar modes to double->long and long->double conversions\n+  \/\/ Different mode for long->double conversion matter only if long value was not representable as double,\n+  \/\/ we got long value as a result of double->long conversion so, it is definitely representable\n+  RoundingMode rm;\n+  switch (round_mode) {\n+    case RoundDoubleModeNode::rmode_ceil:\n+      rm = RoundingMode::rup;\n+      break;\n+    case RoundDoubleModeNode::rmode_floor:\n+      rm = RoundingMode::rdn;\n+      break;\n+    case RoundDoubleModeNode::rmode_rint:\n+      rm = RoundingMode::rne;\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+\n+  \/\/ tmp1 - is a register to store double converted to long int\n+  \/\/ tmp2 - is a register to create constant for comparison\n+  \/\/ tmp3 - is a register where we store modified result of double->long conversion\n+  Label done, bad_val;\n+\n+  \/\/ Conversion from double to long\n+  fcvt_l_d(tmp1, src, rm);\n+\n+  \/\/ Generate constant (tmp2)\n+  \/\/ tmp2 = 100...0000\n+  addi(tmp2, zr, 1);\n+  slli(tmp2, tmp2, 63);\n+\n+  \/\/ Prepare converted long (tmp1)\n+  \/\/ as a result when conversion overflow we got:\n+  \/\/ tmp1 = 011...1111 or 100...0000\n+  \/\/ Convert it to: tmp3 = 100...0000\n+  addi(tmp3, tmp1, 1);\n+  andi(tmp3, tmp3, -2);\n+  beq(tmp3, tmp2, bad_val);\n+\n+  \/\/ Conversion from long to double\n+  fcvt_d_l(dst, tmp1, rm);\n+  \/\/ Add sign of input value to result for +\/- 0 cases\n+  fsgnj_d(dst, dst, src);\n+  j(done);\n+\n+  \/\/ If got conversion overflow return src\n+  bind(bad_val);\n+  fmv_d(dst, src);\n+\n+  bind(done);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -152,0 +152,3 @@\n+  void round_double_mode(FloatRegister dst, FloatRegister src, int round_mode,\n+                         Register tmp1, Register tmp2, Register tmp3);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+  product(bool, UseZtso, false, EXPERIMENTAL, \"Assume Ztso memory model\")        \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -354,3 +354,0 @@\n-\n-  \/\/ Profile the failure of the check.\n-  profile_typecheck_failed(x12); \/\/ blows x12\n@@ -1269,1 +1266,1 @@\n-    record_klass_in_profile(receiver, mdp, reg2, true);\n+    record_klass_in_profile(receiver, mdp, reg2);\n@@ -1294,2 +1291,1 @@\n-                                Register reg2,\n-                                Label& done, bool is_virtual_call) {\n+                                Register reg2, Label& done) {\n@@ -1297,4 +1293,1 @@\n-    if (is_virtual_call) {\n-      increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n-    }\n-\n+    increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n@@ -1302,5 +1295,0 @@\n-    int non_profiled_offset = -1;\n-    if (is_virtual_call) {\n-      non_profiled_offset = in_bytes(CounterData::count_offset());\n-    }\n-\n@@ -1308,1 +1296,1 @@\n-      &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset, non_profiled_offset);\n+        &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset);\n@@ -1312,3 +1300,3 @@\n-void InterpreterMacroAssembler::record_item_in_profile_helper(\n-  Register item, Register mdp, Register reg2, int start_row, Label& done, int total_rows,\n-  OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn, int non_profiled_offset) {\n+void InterpreterMacroAssembler::record_item_in_profile_helper(Register item, Register mdp,\n+                                        Register reg2, int start_row, Label& done, int total_rows,\n+                                        OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn) {\n@@ -1345,10 +1333,6 @@\n-        if (non_profiled_offset >= 0) {\n-          beqz(reg2, found_null);\n-          \/\/ Item did not match any saved item and there is no empty row for it.\n-          \/\/ Increment total counter to indicate polymorphic case.\n-          increment_mdp_data_at(mdp, non_profiled_offset);\n-          j(done);\n-          bind(found_null);\n-        } else {\n-          bnez(reg2, done);\n-        }\n+        beqz(reg2, found_null);\n+        \/\/ Item did not match any saved item and there is no empty row for it.\n+        \/\/ Increment total counter to indicate polymorphic case.\n+        increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n+        j(done);\n+        bind(found_null);\n@@ -1362,1 +1346,1 @@\n-        item_offset_fn, item_count_offset_fn, non_profiled_offset);\n+          item_offset_fn, item_count_offset_fn);\n@@ -1432,2 +1416,1 @@\n-                                                        Register mdp, Register reg2,\n-                                                        bool is_virtual_call) {\n+                                                        Register mdp, Register reg2) {\n@@ -1437,1 +1420,1 @@\n-  record_klass_in_profile_helper(receiver, mdp, reg2, done, is_virtual_call);\n+  record_klass_in_profile_helper(receiver, mdp, reg2, done);\n@@ -1497,18 +1480,0 @@\n-void InterpreterMacroAssembler::profile_typecheck_failed(Register mdp) {\n-    if (ProfileInterpreter && TypeProfileCasts) {\n-    Label profile_continue;\n-\n-    \/\/ If no method data exists, go to profile_continue.\n-    test_method_data_pointer(mdp, profile_continue);\n-\n-    int count_offset = in_bytes(CounterData::count_offset());\n-    \/\/ Back up the address, since we have already bumped the mdp.\n-    count_offset -= in_bytes(VirtualCallData::virtual_call_data_size());\n-\n-    \/\/ *Decrement* the counter.  We expect to see zero or small negatives.\n-    increment_mdp_data_at(mdp, count_offset, true);\n-\n-    bind (profile_continue);\n-  }\n-}\n-\n@@ -1528,1 +1493,1 @@\n-      record_klass_in_profile(klass, mdp, reg2, false);\n+      record_klass_in_profile(klass, mdp, reg2);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":17,"deletions":52,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                               Register reg2, bool is_virtual_call);\n+                               Register reg2);\n@@ -253,2 +253,1 @@\n-                                      Register reg2,\n-                                      Label& done, bool is_virtual_call);\n+                                      Register reg2, Label& done);\n@@ -257,2 +256,1 @@\n-                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                     int non_profiled_offset);\n+                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2595,1 +2595,1 @@\n-  lr_d(tmp, addr, Assembler::aqrl);\n+  load_reserved(tmp, addr, int64, Assembler::aqrl);\n@@ -2599,1 +2599,1 @@\n-  sc_d(tmp, newv, addr, Assembler::rl);\n+  store_conditional(tmp, newv, addr, int64, Assembler::rl);\n@@ -2618,1 +2618,2 @@\n-void MacroAssembler::load_reserved(Register addr,\n+void MacroAssembler::load_reserved(Register dst,\n+                                   Register addr,\n@@ -2623,1 +2624,1 @@\n-      lr_d(t0, addr, acquire);\n+      lr_d(dst, addr, acquire);\n@@ -2626,1 +2627,1 @@\n-      lr_w(t0, addr, acquire);\n+      lr_w(dst, addr, acquire);\n@@ -2629,1 +2630,1 @@\n-      lr_w(t0, addr, acquire);\n+      lr_w(dst, addr, acquire);\n@@ -2637,1 +2638,1 @@\n-void MacroAssembler::store_conditional(Register addr,\n+void MacroAssembler::store_conditional(Register dst,\n@@ -2639,0 +2640,1 @@\n+                                       Register addr,\n@@ -2643,1 +2645,1 @@\n-      sc_d(t0, new_val, addr, release);\n+      sc_d(dst, new_val, addr, release);\n@@ -2647,1 +2649,1 @@\n-      sc_w(t0, new_val, addr, release);\n+      sc_w(dst, new_val, addr, release);\n@@ -2781,1 +2783,1 @@\n-  load_reserved(addr, size, acquire);\n+  load_reserved(t0, addr, size, acquire);\n@@ -2783,1 +2785,1 @@\n-  store_conditional(addr, new_val, size, release);\n+  store_conditional(t0, new_val, addr, size, release);\n@@ -2815,1 +2817,1 @@\n-  load_reserved(addr, size, acquire);\n+  load_reserved(t0, addr, size, acquire);\n@@ -2817,1 +2819,1 @@\n-  store_conditional(addr, new_val, size, release);\n+  store_conditional(t0, new_val, addr, size, release);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -379,0 +379,16 @@\n+  void fence(uint32_t predecessor, uint32_t successor) {\n+    if (UseZtso) {\n+      if ((pred_succ_to_membar_mask(predecessor, successor) & StoreLoad) == StoreLoad) {\n+        \/\/ TSO allows for stores to be reordered after loads. When the compiler\n+        \/\/ generates a fence to disallow that, we are required to generate the\n+        \/\/ fence for correctness.\n+        Assembler::fence(predecessor, successor);\n+      } else {\n+        \/\/ TSO guarantees other fences already.\n+      }\n+    } else {\n+      \/\/ always generate fence for RVWMO\n+      Assembler::fence(predecessor, successor);\n+    }\n+  }\n+\n@@ -380,1 +396,1 @@\n-    fence(w, 0);\n+    Assembler::fence(w, 0);\n@@ -1440,2 +1456,2 @@\n-  void load_reserved(Register addr, enum operand_size size, Assembler::Aqrl acquire);\n-  void store_conditional(Register addr, Register new_val, enum operand_size size, Assembler::Aqrl release);\n+  void load_reserved(Register dst, Register addr, enum operand_size size, Assembler::Aqrl acquire);\n+  void store_conditional(Register dst, Register new_val, Register addr, enum operand_size size, Assembler::Aqrl release);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -7712,0 +7712,14 @@\n+\/\/ Round Instruction\n+instruct roundD_reg(fRegD dst, fRegD src, immI rmode, iRegLNoSp tmp1, iRegLNoSp tmp2, iRegLNoSp tmp3) %{\n+  match(Set dst (RoundDoubleMode src rmode));\n+  ins_cost(2 * XFER_COST + BRANCH_COST);\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+\n+  format %{ \"RoundDoubleMode $src, $rmode\" %}\n+  ins_encode %{\n+    __ round_double_mode(as_FloatRegister($dst$$reg),\n+               as_FloatRegister($src$$reg), $rmode$$constant, $tmp1$$Register, $tmp2$$Register, $tmp3$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,0 +102,11 @@\n+  \/\/ Enable vendor specific features\n+\n+  if (mvendorid.enabled()) {\n+    \/\/ Rivos\n+    if (mvendorid.value() == RIVOS) {\n+      if (FLAG_IS_DEFAULT(UseConservativeFence)) {\n+        FLAG_SET_DEFAULT(UseConservativeFence, false);\n+      }\n+    }\n+  }\n+\n@@ -213,0 +224,8 @@\n+#ifdef __riscv_ztso\n+  \/\/ Hotspot is compiled with TSO support, it will only run on hardware which\n+  \/\/ supports Ztso\n+  if (FLAG_IS_DEFAULT(UseZtso)) {\n+    FLAG_SET_DEFAULT(UseZtso, true);\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -43,0 +43,6 @@\n+\n+  \/\/ JEDEC encoded as ((bank - 1) << 7) | (0x7f & JEDEC)\n+  enum VendorId {\n+    RIVOS = 0x6cf, \/\/ JEDEC: 0x4f, Bank: 14\n+  };\n+\n@@ -137,0 +143,1 @@\n+  decl(ext_Ztso        , \"Ztso\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZtso))        \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -570,0 +570,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1735,3 +1735,2 @@\n-  Label profile_cast_success, profile_cast_failure;\n-  Label *success_target = op->should_profile() ? &profile_cast_success : success;\n-  Label *failure_target = op->should_profile() ? &profile_cast_failure : failure;\n+  Label* success_target = success;\n+  Label* failure_target = failure;\n@@ -1754,1 +1753,1 @@\n-    __ cmpptr(obj, NULL_WORD);\n+    __ testptr(obj, obj);\n@@ -1757,2 +1756,0 @@\n-      __ jccb(Assembler::notEqual, not_null);\n-      \/\/ Object is null; update MDO and exit\n@@ -1761,0 +1758,2 @@\n+      __ jccb(Assembler::notEqual, not_null);\n+      \/\/ Object is null; update MDO and exit\n@@ -1766,0 +1765,10 @@\n+\n+      Label update_done;\n+      Register recv = k_RInfo;\n+      __ load_klass(recv, obj, tmp_load_klass);\n+      type_profile_helper(mdo, md, data, recv, &update_done);\n+\n+      Address nonprofiled_receiver_count_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+      __ addptr(nonprofiled_receiver_count_addr, DataLayout::counter_increment);\n+\n+      __ bind(update_done);\n@@ -1834,1 +1843,1 @@\n-        __ cmpl(klass_RInfo, 0);\n+        __ testl(klass_RInfo, klass_RInfo);\n@@ -1848,1 +1857,1 @@\n-      __ cmpl(k_RInfo, 0);\n+      __ testl(k_RInfo, k_RInfo);\n@@ -1853,14 +1862,0 @@\n-  if (op->should_profile()) {\n-    Register mdo  = klass_RInfo, recv = k_RInfo;\n-    __ bind(profile_cast_success);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    __ load_klass(recv, obj, tmp_load_klass);\n-    type_profile_helper(mdo, md, data, recv, success);\n-    __ jmp(*success);\n-\n-    __ bind(profile_cast_failure);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-    __ subptr(counter_addr, DataLayout::counter_increment);\n-    __ jmp(*failure);\n-  }\n@@ -1897,3 +1892,3 @@\n-    Label profile_cast_success, profile_cast_failure, done;\n-    Label *success_target = op->should_profile() ? &profile_cast_success : &done;\n-    Label *failure_target = op->should_profile() ? &profile_cast_failure : stub->entry();\n+    Label done;\n+    Label* success_target = &done;\n+    Label* failure_target = stub->entry();\n@@ -1901,1 +1896,1 @@\n-    __ cmpptr(value, NULL_WORD);\n+    __ testptr(value, value);\n@@ -1904,2 +1899,0 @@\n-      __ jccb(Assembler::notEqual, not_null);\n-      \/\/ Object is null; update MDO and exit\n@@ -1908,0 +1901,2 @@\n+      __ jccb(Assembler::notEqual, not_null);\n+      \/\/ Object is null; update MDO and exit\n@@ -1913,0 +1908,9 @@\n+\n+      Label update_done;\n+      Register recv = k_RInfo;\n+      __ load_klass(recv, value, tmp_load_klass);\n+      type_profile_helper(mdo, md, data, recv, &update_done);\n+\n+      Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+      __ addptr(counter_addr, DataLayout::counter_increment);\n+      __ bind(update_done);\n@@ -1932,1 +1936,1 @@\n-    __ cmpl(k_RInfo, 0);\n+    __ testl(k_RInfo, k_RInfo);\n@@ -1936,15 +1940,0 @@\n-    if (op->should_profile()) {\n-      Register mdo  = klass_RInfo, recv = k_RInfo;\n-      __ bind(profile_cast_success);\n-      __ mov_metadata(mdo, md->constant_encoding());\n-      __ load_klass(recv, value, tmp_load_klass);\n-      type_profile_helper(mdo, md, data, recv, &done);\n-      __ jmpb(done);\n-\n-      __ bind(profile_cast_failure);\n-      __ mov_metadata(mdo, md->constant_encoding());\n-      Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-      __ subptr(counter_addr, DataLayout::counter_increment);\n-      __ jmp(*stub->entry());\n-    }\n-\n@@ -2845,1 +2834,6 @@\n-        __ cmpl(reg1, c->as_jint());\n+        jint i = c->as_jint();\n+        if (i == 0) {\n+          __ testl(reg1, reg1);\n+        } else {\n+          __ cmpl(reg1, i);\n+        }\n@@ -2851,1 +2845,1 @@\n-          __ cmpptr(reg1, NULL_WORD);\n+          __ testptr(reg1, reg1);\n@@ -2859,1 +2853,1 @@\n-          __ cmpptr(reg1, NULL_WORD);\n+          __ testptr(reg1, reg1);\n@@ -3359,1 +3353,1 @@\n-    __ cmpl(rax, 0);\n+    __ testl(rax, rax);\n@@ -3509,1 +3503,1 @@\n-      __ cmpl(src, 0);\n+      __ testl(src, src);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":43,"deletions":49,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -577,5 +577,0 @@\n-\n-  \/\/ Profile the failure of the check.\n-  if (profile) {\n-    profile_typecheck_failed(rcx); \/\/ blows rcx\n-  }\n@@ -1876,8 +1871,1 @@\n-    if (is_virtual_call) {\n-      increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n-    }\n-#if INCLUDE_JVMCI\n-    else if (EnableJVMCI) {\n-      increment_mdp_data_at(mdp, in_bytes(ReceiverTypeData::nonprofiled_receiver_count_offset()));\n-    }\n-#endif \/\/ INCLUDE_JVMCI\n+    increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n@@ -1885,10 +1873,0 @@\n-    int non_profiled_offset = -1;\n-    if (is_virtual_call) {\n-      non_profiled_offset = in_bytes(CounterData::count_offset());\n-    }\n-#if INCLUDE_JVMCI\n-    else if (EnableJVMCI) {\n-      non_profiled_offset = in_bytes(ReceiverTypeData::nonprofiled_receiver_count_offset());\n-    }\n-#endif \/\/ INCLUDE_JVMCI\n-\n@@ -1896,1 +1874,1 @@\n-        &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset, non_profiled_offset);\n+                                  &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset);\n@@ -1900,4 +1878,4 @@\n-void InterpreterMacroAssembler::record_item_in_profile_helper(Register item, Register mdp,\n-                                        Register reg2, int start_row, Label& done, int total_rows,\n-                                        OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                        int non_profiled_offset) {\n+void InterpreterMacroAssembler::record_item_in_profile_helper(Register item, Register mdp, Register reg2, int start_row,\n+                                                              Label& done, int total_rows,\n+                                                              OffsetFunction item_offset_fn,\n+                                                              OffsetFunction item_count_offset_fn) {\n@@ -1934,11 +1912,7 @@\n-        if (non_profiled_offset >= 0) {\n-          Label found_null;\n-          jccb(Assembler::zero, found_null);\n-          \/\/ Item did not match any saved item and there is no empty row for it.\n-          \/\/ Increment total counter to indicate polymorphic case.\n-          increment_mdp_data_at(mdp, non_profiled_offset);\n-          jmp(done);\n-          bind(found_null);\n-        } else {\n-          jcc(Assembler::notZero, done);\n-        }\n+        Label found_null;\n+        jccb(Assembler::zero, found_null);\n+        \/\/ Item did not match any saved item and there is no empty row for it.\n+        \/\/ Increment total counter to indicate polymorphic case.\n+        increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n+        jmp(done);\n+        bind(found_null);\n@@ -1953,1 +1927,1 @@\n-        item_offset_fn, item_count_offset_fn, non_profiled_offset);\n+                                    item_offset_fn, item_count_offset_fn);\n@@ -2069,19 +2043,0 @@\n-void InterpreterMacroAssembler::profile_typecheck_failed(Register mdp) {\n-  if (ProfileInterpreter && TypeProfileCasts) {\n-    Label profile_continue;\n-\n-    \/\/ If no method data exists, go to profile_continue.\n-    test_method_data_pointer(mdp, profile_continue);\n-\n-    int count_offset = in_bytes(CounterData::count_offset());\n-    \/\/ Back up the address, since we have already bumped the mdp.\n-    count_offset -= in_bytes(VirtualCallData::virtual_call_data_size());\n-\n-    \/\/ *Decrement* the counter.  We expect to see zero or small negatives.\n-    increment_mdp_data_at(mdp, count_offset, true);\n-\n-    bind (profile_continue);\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":14,"deletions":59,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n@@ -283,4 +282,4 @@\n-  void record_item_in_profile_helper(Register item, Register mdp,\n-                                     Register reg2, int start_row, Label& done, int total_rows,\n-                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                     int non_profiled_offset);\n+  void record_item_in_profile_helper(Register item, Register mdp, Register reg2, int start_row,\n+                                     Label& done, int total_rows,\n+                                     OffsetFunction item_offset_fn,\n+                                     OffsetFunction item_count_offset_fn);\n@@ -303,1 +302,1 @@\n-  void profile_typecheck_failed(Register mdp);\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -334,0 +334,10 @@\n+#ifdef ASSERT\n+  \/\/ make sure the type is INT\n+  {\n+    Label L;\n+    __ cmpl(rbx, T_INT);\n+    __ jcc(Assembler::equal, L);\n+    __ stop(\"StubRoutines::call_stub: unexpected result type\");\n+    __ bind(L);\n+  }\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    snprintf(buf, sizeof(buf)\/2, \"%s,\", uarch);\n+    snprintf(buf, sizeof(buf)\/2, \"%s \", uarch);\n@@ -125,0 +125,1 @@\n+          strcat(buf, \" \");\n@@ -131,1 +132,1 @@\n-          prebuf[0] = '_';\n+          prebuf[0] = ' ';\n@@ -210,3 +211,0 @@\n-  \/\/ JEDEC encoded as ((bank - 1) << 7) | (0x7f & JEDEC)\n-  static constexpr int RIVOS_MVENDORID = 0x6cf; \/\/ JEDEC: 0x4f, Bank: 14\n-\n@@ -217,1 +215,1 @@\n-    case RIVOS_MVENDORID:\n+    case RIVOS:\n@@ -239,0 +237,1 @@\n+  ext_Ztso.enable_feature();\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4836,1 +4836,1 @@\n-  CompileTask::print_inlining_ul(callee, scope()->level(), bci(), msg);\n+  CompileTask::print_inlining_ul(callee, scope()->level(), bci(), inlining_result_of(success), msg);\n@@ -4841,1 +4841,1 @@\n-  CompileTask::print_inlining_tty(callee, scope()->level(), bci(), msg);\n+  CompileTask::print_inlining_tty(callee, scope()->level(), bci(), inlining_result_of(success), msg);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -445,0 +445,3 @@\n+      if (VM_Version::profile_all_receivers_at_type_check()) {\n+        return (c < 0 ? max_jint : c); \/\/ always non-negative\n+      }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -941,1 +941,1 @@\n-  MutexLocker locker(Zip_lock, Monitor::_no_safepoint_check_flag);\n+  ConditionalMutexLocker locker(Zip_lock, Zip_lock != nullptr, Monitor::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -572,3 +572,0 @@\n-  \/\/ Adjust global class iterator.\n-  ClassLoaderDataGraph::adjust_saved_class(scratch_class);\n-\n@@ -636,3 +633,0 @@\n-\n-  \/\/ Clean up global class iterator for compiler\n-  ClassLoaderDataGraph::adjust_saved_class(this);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,79 +83,0 @@\n-\/\/ Class iterator used by the compiler.  It gets some number of classes at\n-\/\/ a safepoint to decay invocation counters on the methods.\n-class ClassLoaderDataGraphKlassIteratorStatic {\n-  ClassLoaderData* _current_loader_data;\n-  Klass*           _current_class_entry;\n- public:\n-\n-  ClassLoaderDataGraphKlassIteratorStatic() : _current_loader_data(nullptr), _current_class_entry(nullptr) {}\n-\n-  InstanceKlass* try_get_next_class() {\n-    assert(SafepointSynchronize::is_at_safepoint(), \"only called at safepoint\");\n-    size_t max_classes = ClassLoaderDataGraph::num_instance_classes();\n-    assert(max_classes > 0, \"should not be called with no instance classes\");\n-    for (size_t i = 0; i < max_classes; ) {\n-\n-      if (_current_class_entry != nullptr) {\n-        Klass* k = _current_class_entry;\n-        _current_class_entry = _current_class_entry->next_link();\n-\n-        if (k->is_instance_klass()) {\n-          InstanceKlass* ik = InstanceKlass::cast(k);\n-          i++;  \/\/ count all instance classes found\n-          \/\/ Not yet loaded classes are counted in max_classes\n-          \/\/ but only return loaded classes.\n-          if (ik->is_loaded()) {\n-            return ik;\n-          }\n-        }\n-      } else {\n-        \/\/ Go to next CLD\n-        if (_current_loader_data != nullptr) {\n-          _current_loader_data = _current_loader_data->next();\n-        }\n-        \/\/ Start at the beginning\n-        if (_current_loader_data == nullptr) {\n-          _current_loader_data = ClassLoaderDataGraph::_head;\n-        }\n-\n-        _current_class_entry = _current_loader_data->klasses();\n-      }\n-    }\n-    \/\/ Should never be reached unless all instance classes have failed or are not fully loaded.\n-    \/\/ Caller handles null.\n-    return nullptr;\n-  }\n-\n-  \/\/ If the current class for the static iterator is a class being unloaded or\n-  \/\/ deallocated, adjust the current class.\n-  void adjust_saved_class(ClassLoaderData* cld) {\n-    if (_current_loader_data == cld) {\n-      _current_loader_data = cld->next();\n-      if (_current_loader_data != nullptr) {\n-        _current_class_entry = _current_loader_data->klasses();\n-      }  \/\/ else try_get_next_class will start at the head\n-    }\n-  }\n-\n-  void adjust_saved_class(Klass* klass) {\n-    if (_current_class_entry == klass) {\n-      _current_class_entry = klass->next_link();\n-    }\n-  }\n-};\n-\n-static ClassLoaderDataGraphKlassIteratorStatic static_klass_iterator;\n-\n-InstanceKlass* ClassLoaderDataGraph::try_get_next_class() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"only called at safepoint\");\n-  return static_klass_iterator.try_get_next_class();\n-}\n-\n-void ClassLoaderDataGraph::adjust_saved_class(ClassLoaderData* cld) {\n-  return static_klass_iterator.adjust_saved_class(cld);\n-}\n-\n-void ClassLoaderDataGraph::adjust_saved_class(Klass* klass) {\n-  return static_klass_iterator.adjust_saved_class(klass);\n-}\n-\n@@ -497,1 +418,0 @@\n-  bool seen_dead_loader = false;\n@@ -508,1 +428,0 @@\n-      seen_dead_loader = true;\n@@ -526,1 +445,1 @@\n-  return seen_dead_loader;\n+  return loaders_removed != 0;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":1,"deletions":82,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -100,5 +100,0 @@\n-  \/\/ VM_CounterDecay iteration support\n-  static InstanceKlass* try_get_next_class();\n-  static void adjust_saved_class(ClassLoaderData* cld);\n-  static void adjust_saved_class(Klass* klass);\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3038,0 +3038,61 @@\n+\/\/ java_lang_ClassFrameInfo\n+\n+int java_lang_ClassFrameInfo::_classOrMemberName_offset;\n+int java_lang_ClassFrameInfo::_flags_offset;\n+\n+#define CLASSFRAMEINFO_FIELDS_DO(macro) \\\n+  macro(_classOrMemberName_offset, k, \"classOrMemberName\", object_signature,  false); \\\n+  macro(_flags_offset,             k, vmSymbols::flags_name(), int_signature, false)\n+\n+void java_lang_ClassFrameInfo::compute_offsets() {\n+  InstanceKlass* k = vmClasses::ClassFrameInfo_klass();\n+  CLASSFRAMEINFO_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n+}\n+\n+#if INCLUDE_CDS\n+void java_lang_ClassFrameInfo::serialize_offsets(SerializeClosure* f) {\n+  CLASSFRAMEINFO_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n+}\n+#endif\n+\n+static int get_flags(const methodHandle& m) {\n+  int flags = (jushort)( m->access_flags().as_short() & JVM_RECOGNIZED_METHOD_MODIFIERS );\n+  if (m->is_object_constructor()) {\n+    flags |= java_lang_invoke_MemberName::MN_IS_OBJECT_CONSTRUCTOR;\n+  } else {\n+    flags |= java_lang_invoke_MemberName::MN_IS_METHOD;\n+  }\n+  if (m->caller_sensitive()) {\n+    flags |= java_lang_invoke_MemberName::MN_CALLER_SENSITIVE;\n+  }\n+  if (m->is_hidden()) {\n+    flags |= java_lang_invoke_MemberName::MN_HIDDEN_MEMBER;\n+  }\n+  assert((flags & 0xFF000000) == 0, \"unexpected flags\");\n+  return flags;\n+}\n+\n+oop java_lang_ClassFrameInfo::classOrMemberName(oop obj) {\n+  return obj->obj_field(_classOrMemberName_offset);\n+}\n+\n+int java_lang_ClassFrameInfo::flags(oop obj) {\n+  return obj->int_field(_flags_offset);\n+}\n+\n+void java_lang_ClassFrameInfo::init_class(Handle stackFrame, const methodHandle& m) {\n+  stackFrame->obj_field_put(_classOrMemberName_offset, m->method_holder()->java_mirror());\n+  \/\/ flags is initialized when ClassFrameInfo object is constructed and retain the value\n+  int flags = java_lang_ClassFrameInfo::flags(stackFrame()) | get_flags(m);\n+  stackFrame->int_field_put(_flags_offset, flags);\n+}\n+\n+void java_lang_ClassFrameInfo::init_method(Handle stackFrame, const methodHandle& m, TRAPS) {\n+  oop rmethod_name = java_lang_invoke_ResolvedMethodName::find_resolved_method(m, CHECK);\n+  stackFrame->obj_field_put(_classOrMemberName_offset, rmethod_name);\n+  \/\/ flags is initialized when ClassFrameInfo object is constructed and retain the value\n+  int flags = java_lang_ClassFrameInfo::flags(stackFrame()) | get_flags(m);\n+  stackFrame->int_field_put(_flags_offset, flags);\n+}\n+\n+\n@@ -3040,1 +3101,2 @@\n-int java_lang_StackFrameInfo::_memberName_offset;\n+int java_lang_StackFrameInfo::_type_offset;\n+int java_lang_StackFrameInfo::_name_offset;\n@@ -3046,1 +3108,2 @@\n-  macro(_memberName_offset, k, \"memberName\", object_signature,            false); \\\n+  macro(_type_offset,       k, \"type\",       object_signature,            false); \\\n+  macro(_name_offset,       k, \"name\",       string_signature,            false); \\\n@@ -3063,6 +3126,3 @@\n-Method* java_lang_StackFrameInfo::get_method(Handle stackFrame, InstanceKlass* holder, TRAPS) {\n-  HandleMark hm(THREAD);\n-  Handle mname(THREAD, stackFrame->obj_field(_memberName_offset));\n-  Method* method = (Method*)java_lang_invoke_MemberName::vmtarget(mname());\n-  \/\/ we should expand MemberName::name when Throwable uses StackTrace\n-  \/\/ MethodHandles::expand_MemberName(mname, MethodHandles::_suppress_defc|MethodHandles::_suppress_type, CHECK_NULL);\n+Method* java_lang_StackFrameInfo::get_method(oop obj) {\n+  oop m = java_lang_ClassFrameInfo::classOrMemberName(obj);\n+  Method* method = java_lang_invoke_ResolvedMethodName::vmtarget(m);\n@@ -3075,5 +3135,3 @@\n-  Handle mname(THREAD, stackFrame->obj_field(_memberName_offset));\n-  Handle cont_h (THREAD, cont);\n-  InstanceKlass* ik = method->method_holder();\n-  CallInfo info(method(), ik, CHECK);\n-  MethodHandles::init_method_MemberName(mname, info);\n+  Handle cont_h(THREAD, cont);\n+  java_lang_ClassFrameInfo::init_method(stackFrame, method, CHECK);\n+\n@@ -3094,4 +3152,0 @@\n-  Handle mname(THREAD, stackFrame->obj_field(java_lang_StackFrameInfo::_memberName_offset));\n-  Klass* clazz = java_lang_Class::as_Klass(java_lang_invoke_MemberName::clazz(mname()));\n-  InstanceKlass* holder = InstanceKlass::cast(clazz);\n-  Method* method = java_lang_StackFrameInfo::get_method(stackFrame, holder, CHECK);\n@@ -3099,0 +3153,2 @@\n+  Method* method = java_lang_StackFrameInfo::get_method(stackFrame());\n+  InstanceKlass* holder = method->method_holder();\n@@ -3105,2 +3161,2 @@\n-void java_lang_StackFrameInfo::set_version(oop element, short value) {\n-  element->short_field_put(_version_offset, value);\n+oop java_lang_StackFrameInfo::type(oop obj) {\n+  return obj->obj_field(_type_offset);\n@@ -3109,1 +3165,17 @@\n-void java_lang_StackFrameInfo::set_bci(oop element, int value) {\n+void java_lang_StackFrameInfo::set_type(oop obj, oop value) {\n+  obj->obj_field_put(_type_offset, value);\n+}\n+\n+oop java_lang_StackFrameInfo::name(oop obj) {\n+  return obj->obj_field(_name_offset);\n+}\n+\n+void java_lang_StackFrameInfo::set_name(oop obj, oop value) {\n+  obj->obj_field_put(_name_offset, value);\n+}\n+\n+void java_lang_StackFrameInfo::set_version(oop obj, short value) {\n+  obj->short_field_put(_version_offset, value);\n+}\n+\n+void java_lang_StackFrameInfo::set_bci(oop obj, int value) {\n@@ -3111,1 +3183,1 @@\n-  element->int_field_put(_bci_offset, value);\n+  obj->int_field_put(_bci_offset, value);\n@@ -3114,2 +3186,2 @@\n-void java_lang_StackFrameInfo::set_contScope(oop element, oop value) {\n-  element->obj_field_put(_contScope_offset, value);\n+void java_lang_StackFrameInfo::set_contScope(oop obj, oop value) {\n+  obj->obj_field_put(_contScope_offset, value);\n@@ -3140,2 +3212,2 @@\n-void java_lang_LiveStackFrameInfo::set_monitors(oop element, oop value) {\n-  element->obj_field_put(_monitors_offset, value);\n+void java_lang_LiveStackFrameInfo::set_monitors(oop obj, oop value) {\n+  obj->obj_field_put(_monitors_offset, value);\n@@ -3144,2 +3216,2 @@\n-void java_lang_LiveStackFrameInfo::set_locals(oop element, oop value) {\n-  element->obj_field_put(_locals_offset, value);\n+void java_lang_LiveStackFrameInfo::set_locals(oop obj, oop value) {\n+  obj->obj_field_put(_locals_offset, value);\n@@ -3148,2 +3220,2 @@\n-void java_lang_LiveStackFrameInfo::set_operands(oop element, oop value) {\n-  element->obj_field_put(_operands_offset, value);\n+void java_lang_LiveStackFrameInfo::set_operands(oop obj, oop value) {\n+  obj->obj_field_put(_operands_offset, value);\n@@ -3152,2 +3224,2 @@\n-void java_lang_LiveStackFrameInfo::set_mode(oop element, int value) {\n-  element->int_field_put(_mode_offset, value);\n+void java_lang_LiveStackFrameInfo::set_mode(oop obj, int value) {\n+  obj->int_field_put(_mode_offset, value);\n@@ -4029,0 +4101,3 @@\n+#define RESOLVEDMETHOD_FIELDS_DO(macro) \\\n+  macro(_vmholder_offset, k, \"vmholder\", class_signature, false)\n+\n@@ -4032,0 +4107,1 @@\n+  RESOLVEDMETHOD_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n@@ -4037,0 +4113,1 @@\n+  RESOLVEDMETHOD_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n@@ -5299,0 +5376,1 @@\n+  f(java_lang_ClassFrameInfo) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":109,"deletions":31,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-  static inline void set_value_raw(oop string, typeArrayOop buffer);\n@@ -1215,1 +1214,0 @@\n-  macro(java_lang_invoke_ResolvedMethodName, vmholder, object_signature, false) \\\n@@ -1304,1 +1302,2 @@\n-    MN_FLAT_FIELD            = 0x00400000, \/\/ flat field\n+    MN_HIDDEN_MEMBER         = 0x00400000, \/\/ @Hidden annotation detected\n+    MN_FLAT_FIELD            = 0x00800000, \/\/ flat field\n@@ -1608,0 +1607,20 @@\n+class java_lang_ClassFrameInfo: AllStatic {\n+private:\n+  static int _classOrMemberName_offset;\n+  static int _flags_offset;\n+\n+public:\n+  static oop  classOrMemberName(oop info);\n+  static int  flags(oop info);\n+\n+  \/\/ Setters\n+  static void init_class(Handle stackFrame, const methodHandle& m);\n+  static void init_method(Handle stackFrame, const methodHandle& m, TRAPS);\n+\n+  static void compute_offsets();\n+  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n+\n+  \/\/ Debugging\n+  friend class JavaClasses;\n+};\n+\n@@ -1615,1 +1634,2 @@\n-  static int _memberName_offset;\n+  static int _type_offset;\n+  static int _name_offset;\n@@ -1620,2 +1640,0 @@\n-  static Method* get_method(Handle stackFrame, InstanceKlass* holder, TRAPS);\n-\n@@ -1623,0 +1641,5 @@\n+  \/\/ Getters\n+  static oop name(oop info);\n+  static oop type(oop info);\n+  static Method* get_method(oop info);\n+\n@@ -1625,0 +1648,2 @@\n+  static void set_name(oop info, oop value);\n+  static void set_type(oop info, oop value);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -42,4 +42,0 @@\n-void java_lang_String::set_value_raw(oop string, typeArrayOop buffer) {\n-  string->obj_field_put_raw(_value_offset, buffer);\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1625,1 +1625,1 @@\n-      MutexLocker ml2(is_concurrent ? Module_lock : nullptr);\n+      ConditionalMutexLocker ml2(Module_lock, is_concurrent);\n@@ -1628,1 +1628,1 @@\n-      MutexLocker ml1(is_concurrent ? SystemDictionary_lock : nullptr);\n+      ConditionalMutexLocker ml1(SystemDictionary_lock, is_concurrent);\n@@ -1651,1 +1651,1 @@\n-    MutexLocker ml(is_concurrent ? ClassInitError_lock : nullptr);\n+    ConditionalMutexLocker ml(ClassInitError_lock, is_concurrent);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -790,0 +790,2 @@\n+\n+  \/\/ Try to retrieve the lambda proxy class from static archive.\n@@ -791,2 +793,20 @@\n-  if (info == nullptr) {\n-    info = _dynamic_archive.lookup_lambda_proxy_class(&key);\n+  InstanceKlass* proxy_klass = retrieve_lambda_proxy_class(info);\n+  if (proxy_klass == nullptr) {\n+    if (info != nullptr && log_is_enabled(Debug, cds)) {\n+      ResourceMark rm;\n+      log_debug(cds)(\"Used all static archived lambda proxy classes for: %s %s%s\",\n+                     caller_ik->external_name(), invoked_name->as_C_string(), invoked_type->as_C_string());\n+    }\n+  } else {\n+    return proxy_klass;\n+  }\n+\n+  \/\/ Retrieving from static archive is unsuccessful, try dynamic archive.\n+  info = _dynamic_archive.lookup_lambda_proxy_class(&key);\n+  proxy_klass = retrieve_lambda_proxy_class(info);\n+  if (proxy_klass == nullptr) {\n+    if (info != nullptr && log_is_enabled(Debug, cds)) {\n+      ResourceMark rm;\n+      log_debug(cds)(\"Used all dynamic archived lambda proxy classes for: %s %s%s\",\n+                     caller_ik->external_name(), invoked_name->as_C_string(), invoked_type->as_C_string());\n+    }\n@@ -794,0 +814,4 @@\n+  return proxy_klass;\n+}\n+\n+InstanceKlass* SystemDictionaryShared::retrieve_lambda_proxy_class(const RunTimeLambdaProxyClassInfo* info) {\n@@ -813,6 +837,0 @@\n-    } else {\n-      if (log_is_enabled(Debug, cds)) {\n-        ResourceMark rm;\n-        log_debug(cds)(\"Used all archived lambda proxy classes for: %s %s%s\",\n-                       caller_ik->external_name(), invoked_name->as_C_string(), invoked_type->as_C_string());\n-      }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+  static InstanceKlass* retrieve_lambda_proxy_class(const RunTimeLambdaProxyClassInfo* info) NOT_CDS_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -164,0 +164,1 @@\n+  do_klass(ClassFrameInfo_klass,                        java_lang_ClassFrameInfo                              ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -382,0 +382,1 @@\n+  template(java_lang_ClassFrameInfo,                  \"java\/lang\/ClassFrameInfo\")                 \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1351,1 +1351,1 @@\n-    MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+    ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  MutexLocker lock(_mutex, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker lock(_mutex, _mutex != nullptr, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1232,0 +1232,1 @@\n+      \/\/ In libjvmci, JVMCI initialization should not deadlock with other threads\n@@ -1243,1 +1244,0 @@\n-      }\n@@ -1245,4 +1245,5 @@\n-      \/\/ Don't allow blocking compilation requests to JVMCI\n-      \/\/ if JVMCI itself is not yet initialized\n-      if (!JVMCI::is_compiler_initialized() && compiler(comp_level)->is_jvmci()) {\n-        blocking = false;\n+        \/\/ Don't allow blocking compilation requests to JVMCI\n+        \/\/ if JVMCI itself is not yet initialized\n+        if (!JVMCI::is_compiler_initialized() && compiler(comp_level)->is_jvmci()) {\n+          blocking = false;\n+        }\n@@ -1323,0 +1324,7 @@\n+#if INCLUDE_JVMCI\n+  if (comp->is_jvmci() && !JVMCI::can_initialize_JVMCI()) {\n+    \/\/ JVMCI compilation is not yet initializable.\n+    return nullptr;\n+  }\n+#endif\n+\n@@ -1351,6 +1359,0 @@\n-#if INCLUDE_JVMCI\n-  if (comp->is_jvmci() && !JVMCI::can_initialize_JVMCI()) {\n-    return nullptr;\n-  }\n-#endif\n-\n@@ -2816,4 +2818,7 @@\n-  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock   : nullptr) : nullptr;\n-  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock : nullptr) : nullptr;\n-  Mutex*   function_lock_1 = allFun ? nullptr : (should_take_Compile_lock   ? Compile_lock    : nullptr);\n-  Monitor* function_lock_2 = allFun ? nullptr : (should_take_CodeCache_lock ? CodeCache_lock  : nullptr);\n+  bool take_global_lock_1   =  allFun && should_take_Compile_lock;\n+  bool take_global_lock_2   =  allFun && should_take_CodeCache_lock;\n+  bool take_function_lock_1 = !allFun && should_take_Compile_lock;\n+  bool take_function_lock_2 = !allFun && should_take_CodeCache_lock;\n+  bool take_global_locks    = take_global_lock_1 || take_global_lock_2;\n+  bool take_function_locks  = take_function_lock_1 || take_function_lock_2;\n+\n@@ -2821,3 +2826,4 @@\n-  MutexLocker mu1(global_lock_1, Mutex::_safepoint_check_flag);\n-  MutexLocker mu2(global_lock_2, Mutex::_no_safepoint_check_flag);\n-  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n+\n+  ConditionalMutexLocker mu1(Compile_lock, take_global_lock_1, Mutex::_safepoint_check_flag);\n+  ConditionalMutexLocker mu2(CodeCache_lock, take_global_lock_2, Mutex::_no_safepoint_check_flag);\n+  if (take_global_locks) {\n@@ -2830,3 +2836,3 @@\n-    MutexLocker mu11(function_lock_1, Mutex::_safepoint_check_flag);\n-    MutexLocker mu22(function_lock_2, Mutex::_no_safepoint_check_flag);\n-    if ((function_lock_1 != nullptr) || (function_lock_2 != nullptr)) {\n+    ConditionalMutexLocker mu11(Compile_lock, take_function_lock_1,  Mutex::_safepoint_check_flag);\n+    ConditionalMutexLocker mu22(CodeCache_lock, take_function_lock_2, Mutex::_no_safepoint_check_flag);\n+    if (take_function_locks) {\n@@ -2838,1 +2844,1 @@\n-    if ((function_lock_1 != nullptr) || (function_lock_2 != nullptr)) {\n+    if (take_function_locks) {\n@@ -2859,1 +2865,1 @@\n-  if ((global_lock_1 != nullptr) || (global_lock_2 != nullptr)) {\n+  if (take_global_locks) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":29,"deletions":23,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-\n+private:\n@@ -314,0 +314,1 @@\n+public:\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -412,1 +412,1 @@\n-void CompileTask::print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, const char* msg) {\n+void CompileTask::print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg) {\n@@ -447,1 +447,3 @@\n-    st->print(\"   %s\", msg);\n+    st->print(\"   %s%s\", result == InliningResult::SUCCESS ? \"\" : \"failed to inline: \", msg);\n+  } else if (result == InliningResult::FAILURE) {\n+    st->print(\"   %s\", \"failed to inline\");\n@@ -472,1 +474,1 @@\n-void CompileTask::print_inlining_ul(ciMethod* method, int inline_level, int bci, const char* msg) {\n+void CompileTask::print_inlining_ul(ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg) {\n@@ -476,1 +478,1 @@\n-    print_inlining_inner(&ls, method, inline_level, bci, msg);\n+    print_inlining_inner(&ls, method, inline_level, bci, result, msg);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,6 @@\n+enum class InliningResult { SUCCESS, FAILURE };\n+\n+inline InliningResult inlining_result_of(bool success) {\n+  return success ? InliningResult::SUCCESS : InliningResult::FAILURE;\n+}\n+\n@@ -228,3 +234,3 @@\n-  static void print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, const char* msg = nullptr);\n-  static void print_inlining_tty(ciMethod* method, int inline_level, int bci, const char* msg = nullptr) {\n-    print_inlining_inner(tty, method, inline_level, bci, msg);\n+  static void print_inlining_inner(outputStream* st, ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg = nullptr);\n+  static void print_inlining_tty(ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg = nullptr) {\n+    print_inlining_inner(tty, method, inline_level, bci, result, msg);\n@@ -232,1 +238,1 @@\n-  static void print_inlining_ul(ciMethod* method, int inline_level, int bci, const char* msg = nullptr);\n+  static void print_inlining_ul(ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg = nullptr);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -342,1 +342,1 @@\n-    double const ExpectedNumberOfRefills = G1LastPLABAverageOccupancy \/ TargetPLABWastePct;\n+    double const ExpectedNumberOfRefills = (100 - G1LastPLABAverageOccupancy) \/ TargetPLABWastePct;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -233,5 +233,0 @@\n-  \/\/ By default do not let the target stack size to be more than 1\/4 of the entries\n-  if (FLAG_IS_DEFAULT(GCDrainStackTargetSize)) {\n-    FLAG_SET_ERGO(GCDrainStackTargetSize, MIN2(GCDrainStackTargetSize, TASKQUEUE_SIZE \/ 4));\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2219,1 +2219,1 @@\n-    const int* node_ids = _numa->node_ids();\n+    const uint* node_ids = _numa->node_ids();\n@@ -2222,1 +2222,1 @@\n-      st->print(\"%d=%u \", node_ids[node_index], num_free_regions);\n+      st->print(\"%u=%u \", node_ids[node_index], num_free_regions);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-  _region_attr.set_humongous_candidate(index, region_at(index)->rem_set()->is_tracked());\n+  _region_attr.set_humongous_candidate(index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,4 +329,8 @@\n-    time_remaining_ms = _policy->select_candidates_from_marking(&candidates()->marking_regions(),\n-                                                                time_remaining_ms,\n-                                                                &initial_old_regions,\n-                                                                &_optional_old_regions);\n+    if (collector_state()->in_mixed_phase()) {\n+      time_remaining_ms = _policy->select_candidates_from_marking(&candidates()->marking_regions(),\n+                                                                  time_remaining_ms,\n+                                                                  &initial_old_regions,\n+                                                                  &_optional_old_regions);\n+    } else {\n+      log_debug(gc, ergo, cset)(\"Do not add marking candidates to collection set due to pause type.\");\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1352,1 +1352,0 @@\n-  \/\/ Per-region work during the Cleanup pause.\n@@ -2322,1 +2321,1 @@\n-    target_size = MIN2(_task_queue->max_elems() \/ 3, GCDrainStackTargetSize);\n+    target_size = GCDrainStackTargetSize;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  \/\/ (This also implies that we expect G1LastPLABAverageOccupancy\/TargetPLABWastePct\n+  \/\/ (This also implies that we expect (100-G1LastPLABAverageOccupancy)\/TargetPLABWastePct\n@@ -116,1 +116,1 @@\n-  return (size_t)((double)total_waste_allowed \/ G1LastPLABAverageOccupancy);\n+  return (size_t)((double)total_waste_allowed \/ (100 - G1LastPLABAverageOccupancy));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacStats.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,0 +126,4 @@\n+  _gc_par_phases[CodeRoots]->create_thread_work_items(\"Scanned Nmethods\", CodeRootsScannedNMethods);\n+\n+  _gc_par_phases[OptCodeRoots]->create_thread_work_items(\"Scanned Nmethods\", CodeRootsScannedNMethods);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,0 +137,4 @@\n+  enum GCCodeRootsWorkItems {\n+    CodeRootsScannedNMethods\n+  };\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  void set_humongous_candidate(uintptr_t index, bool remset_is_tracked) {\n+  void set_humongous_candidate(uintptr_t index) {\n@@ -137,0 +137,2 @@\n+    \/\/ Humongous candidates must have complete remset.\n+    const bool remset_is_tracked = true;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-      const int* node_ids = numa->node_ids();\n+      const uint* node_ids = numa->node_ids();\n@@ -121,1 +121,1 @@\n-        ls.print(\"%d: %u->%u\", node_ids[i], before_per_node_length[i], after_per_node_length[i]);\n+        ls.print(\"%u: %u->%u\", node_ids[i], before_per_node_length[i], after_per_node_length[i]);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-const int* G1NUMA::node_ids() const {\n+const uint* G1NUMA::node_ids() const {\n@@ -65,2 +65,1 @@\n-uint G1NUMA::index_of_node_id(int node_id) const {\n-  assert(node_id >= 0, \"invalid node id %d\", node_id);\n+uint G1NUMA::index_of_node_id(uint node_id) const {\n@@ -83,1 +82,1 @@\n-  _node_ids = NEW_C_HEAP_ARRAY(int, _num_active_node_ids, mtGC);\n+  _node_ids = NEW_C_HEAP_ARRAY(uint, _num_active_node_ids, mtGC);\n@@ -101,2 +100,2 @@\n-  _node_ids = NEW_C_HEAP_ARRAY(int, num_node_ids, mtGC);\n-  _num_active_node_ids = (uint)os::numa_get_leaf_groups(_node_ids, num_node_ids);\n+  _node_ids = NEW_C_HEAP_ARRAY(uint, num_node_ids, mtGC);\n+  _num_active_node_ids = checked_cast<uint>(os::numa_get_leaf_groups(reinterpret_cast<int*>(_node_ids), num_node_ids));\n@@ -104,1 +103,1 @@\n-  int max_node_id = 0;\n+  uint max_node_id = 0;\n@@ -114,1 +113,1 @@\n-  for (int i = 0; i < _len_node_id_to_index_map; i++) {\n+  for (uint i = 0; i < _len_node_id_to_index_map; i++) {\n@@ -128,2 +127,2 @@\n-  FREE_C_HEAP_ARRAY(int, _node_id_to_index_map);\n-  FREE_C_HEAP_ARRAY(int, _node_ids);\n+  FREE_C_HEAP_ARRAY(uint, _node_id_to_index_map);\n+  FREE_C_HEAP_ARRAY(uint, _node_ids);\n@@ -162,1 +161,1 @@\n-int G1NUMA::numa_id(int index) const {\n+uint G1NUMA::numa_id(uint index) const {\n@@ -173,1 +172,1 @@\n-    return index_of_node_id(numa_id);\n+    return index_of_node_id(checked_cast<uint>(numa_id));\n@@ -221,1 +220,1 @@\n-  log_trace(gc, heap, numa)(\"Request memory [\" PTR_FORMAT \", \" PTR_FORMAT \") to be NUMA id (%d)\",\n+  log_trace(gc, heap, numa)(\"Request memory [\" PTR_FORMAT \", \" PTR_FORMAT \") to be NUMA id (%u)\",\n@@ -223,1 +222,1 @@\n-  os::numa_make_local((char*)aligned_address, size_in_bytes, _node_ids[node_index]);\n+  os::numa_make_local((char*)aligned_address, size_in_bytes, checked_cast<int>(_node_ids[node_index]));\n@@ -282,1 +281,1 @@\n-  const int* numa_ids = _numa->node_ids();\n+  const uint* numa_ids = _numa->node_ids();\n@@ -284,1 +283,1 @@\n-    _ls->print(\"%d: %u\/%u\/%u \", numa_ids[i], _matched[i], _mismatched[i], _total[i]);\n+    _ls->print(\"%u: %u\/%u\/%u \", numa_ids[i], _matched[i], _mismatched[i], _total[i]);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  int _len_node_id_to_index_map;\n+  uint _len_node_id_to_index_map;\n@@ -45,1 +45,1 @@\n-  int* _node_ids;\n+  uint* _node_ids;\n@@ -62,1 +62,1 @@\n-  inline uint index_of_node_id(int node_id) const;\n+  inline uint index_of_node_id(uint node_id) const;\n@@ -89,1 +89,1 @@\n-  int numa_id(int index) const;\n+  uint numa_id(uint index) const;\n@@ -92,1 +92,1 @@\n-  const int* node_ids() const;\n+  const uint* node_ids() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-G1NUMAStats::G1NUMAStats(const int* node_ids, uint num_node_ids) :\n+G1NUMAStats::G1NUMAStats(const uint* node_ids, uint num_node_ids) :\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  const int* _node_ids;\n+  const uint* _node_ids;\n@@ -104,1 +104,1 @@\n-  G1NUMAStats(const int* node_ids, uint num_node_ids);\n+  G1NUMAStats(const uint* node_ids, uint num_node_ids);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -760,0 +760,19 @@\n+\/\/ Wrapper around a CodeBlobClosure to count the number of code blobs scanned.\n+class G1ScanAndCountCodeBlobClosure : public CodeBlobClosure {\n+  CodeBlobClosure* _cl;\n+  size_t _count;\n+\n+public:\n+  G1ScanAndCountCodeBlobClosure(CodeBlobClosure* cl) : _cl(cl), _count(0) {\n+  }\n+\n+  void do_code_blob(CodeBlob* cb) override {\n+    _cl->do_code_blob(cb);\n+    _count++;\n+  }\n+\n+  size_t count() const {\n+    return _count;\n+  }\n+};\n+\n@@ -771,0 +790,2 @@\n+  size_t _code_roots_scanned;\n+\n@@ -801,0 +822,1 @@\n+    _code_roots_scanned(0),\n@@ -825,0 +847,2 @@\n+      G1ScanAndCountCodeBlobClosure cl(_pss->closures()->weak_codeblobs());\n+\n@@ -826,1 +850,3 @@\n-      r->code_roots_do(_pss->closures()->weak_codeblobs());\n+      r->code_roots_do(&cl);\n+\n+      _code_roots_scanned = cl.count();\n@@ -837,0 +863,2 @@\n+  size_t code_roots_scanned() const { return _code_roots_scanned; }\n+\n@@ -859,0 +887,2 @@\n+  p->record_or_add_thread_work_item(coderoots_phase, worker_id, cl.code_roots_scanned(), G1GCPhaseTimes::CodeRootsScannedNMethods);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-      st->print(\"|%d\", numa->numa_id(node_index()));\n+      st->print(\"|%u\", numa->numa_id(node_index()));\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-  MutexLocker ml(CodeCache_lock->owned_by_self() ? nullptr : &_m, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(&_m, !CodeCache_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,2 +187,1 @@\n-    \/\/ don't let the target stack size to be more than 1\/4 of the entries\n-    _target_stack_size = MIN2(GCDrainStackTargetSize, (queue_size \/ 4));\n+    _target_stack_size = GCDrainStackTargetSize;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-          range(0, (UINT_MAX - 1) \/ 2)                                      \\\n+          range(0, 8 * 1024)                                                \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -314,1 +314,0 @@\n-  virtual void post_compact() { ShouldNotReachHere(); }\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-             ShenandoahNMethodBarrier ? new ShenandoahBarrierSetNMethod(heap) : nullptr,\n+             new ShenandoahBarrierSetNMethod(heap),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,14 @@\n+bool ShenandoahCodeRoots::use_nmethod_barriers_for_mark() {\n+  \/\/ Continuations need nmethod barriers for scanning stack chunk nmethods.\n+  if (Continuations::enabled()) return true;\n+\n+  \/\/ Concurrent class unloading needs nmethod barriers.\n+  \/\/ When a nmethod is about to be executed, we need to make sure that all its\n+  \/\/ metadata are marked. The alternative is to remark thread roots at final mark\n+  \/\/ pause, which would cause latency issues.\n+  if (ShenandoahHeap::heap()->unload_classes()) return true;\n+\n+  \/\/ Otherwise, we can go without nmethod barriers.\n+  return false;\n+}\n+\n@@ -121,2 +135,7 @@\n-void ShenandoahCodeRoots::arm_nmethods() {\n-  assert(BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr, \"Sanity\");\n+void ShenandoahCodeRoots::arm_nmethods_for_mark() {\n+  if (use_nmethod_barriers_for_mark()) {\n+    BarrierSet::barrier_set()->barrier_set_nmethod()->arm_all_nmethods();\n+  }\n+}\n+\n+void ShenandoahCodeRoots::arm_nmethods_for_evac() {\n@@ -166,1 +185,1 @@\n-  if (ShenandoahNMethodBarrier) {\n+  if (use_nmethod_barriers_for_mark()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -100,1 +100,2 @@\n-  static void arm_nmethods();\n+  static void arm_nmethods_for_mark();\n+  static void arm_nmethods_for_evac();\n@@ -105,0 +106,2 @@\n+  static bool use_nmethod_barriers_for_mark();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-  size_t _success_full_gcs;\n+  \/\/ Written by control thread, read by mutators\n+  volatile size_t _success_full_gcs;\n@@ -85,0 +86,4 @@\n+\n+  size_t full_gc_count() const {\n+    return _success_full_gcs + _alloc_failure_degenerated_upgrade_to_full;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -548,6 +548,3 @@\n-  \/\/ Arm nmethods for concurrent marking. When a nmethod is about to be executed,\n-  \/\/ we need to make sure that all its metadata are marked. alternative is to remark\n-  \/\/ thread roots at final mark pause, but it can be potential latency killer.\n-  if (heap->unload_classes()) {\n-    ShenandoahCodeRoots::arm_nmethods();\n-  }\n+\n+  \/\/ Arm nmethods for concurrent mark\n+  ShenandoahCodeRoots::arm_nmethods_for_mark();\n@@ -606,1 +603,1 @@\n-      ShenandoahCodeRoots::arm_nmethods();\n+      ShenandoahCodeRoots::arm_nmethods_for_evac();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -184,5 +184,3 @@\n-      if (ClassUnloading) {\n-         \/\/ Disarm nmethods that armed in concurrent cycle.\n-         \/\/ In above case, update roots should disarm them\n-         ShenandoahCodeRoots::disarm_nmethods();\n-      }\n+      \/\/ Disarm nmethods that armed in concurrent cycle.\n+      \/\/ In above case, update roots should disarm them\n+      ShenandoahCodeRoots::disarm_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -881,15 +881,5 @@\n-    \/\/ strategy is to try again, as long as GC makes progress.\n-    \/\/\n-    \/\/ Then, we need to make sure the allocation was retried after at least one\n-    \/\/ Full GC, which means we want to try more than ShenandoahFullGCThreshold times.\n-\n-    size_t tries = 0;\n-\n-    while (result == nullptr && _progress_last_gc.is_set()) {\n-      tries++;\n-      control_thread()->handle_alloc_failure(req);\n-      result = allocate_memory_under_lock(req, in_new_region);\n-    }\n-\n-    while (result == nullptr && tries <= ShenandoahFullGCThreshold) {\n-      tries++;\n+    \/\/ strategy is to try again, as long as GC makes progress (or until at least\n+    \/\/ one full GC has completed).\n+    size_t original_count = shenandoah_policy()->full_gc_count();\n+    while (result == nullptr\n+        && (_progress_last_gc.is_set() || original_count == shenandoah_policy()->full_gc_count())) {\n@@ -899,1 +889,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -83,3 +83,1 @@\n-  assert(bs != nullptr || !ShenandoahNMethodBarrier,\n-        \"Must have nmethod barrier for concurrent GC\");\n-  if (bs != nullptr && bs->is_armed(nm)) {\n+  if (bs->is_armed(nm)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  CodeBlobToOopClosure* adjust_code_closure = (ClassUnloading && ShenandoahNMethodBarrier) ?\n+  CodeBlobToOopClosure* adjust_code_closure = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  CodeBlobToOopClosure* codes_cl = (ClassUnloading && ShenandoahNMethodBarrier) ?\n+  CodeBlobToOopClosure* codes_cl = ShenandoahCodeRoots::use_nmethod_barriers_for_mark() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-  \/\/ Weak reference processing\n@@ -94,0 +93,6 @@\n+\n+  \/\/ Arm all nmethods. Even though this is STW mark, some marking code\n+  \/\/ piggybacks on nmethod barriers for special instances.\n+  ShenandoahCodeRoots::arm_nmethods_for_mark();\n+\n+  \/\/ Weak reference processing\n@@ -123,0 +128,3 @@\n+  \/\/ Mark is finished, can disarm the nmethods now.\n+  ShenandoahCodeRoots::disarm_nmethods();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -355,3 +355,0 @@\n-  product(bool, ShenandoahNMethodBarrier, true, DIAGNOSTIC,                 \\\n-          \"Turn on\/off NMethod entry barriers in Shenandoah\")               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -250,2 +250,1 @@\n-  JVM_STACKWALK_FILL_CLASS_REFS_ONLY       = 0x2,\n-  JVM_STACKWALK_GET_CALLER_CLASS           = 0x04,\n+  JVM_STACKWALK_CLASS_INFO_ONLY            = 0x2,\n@@ -256,0 +255,3 @@\n+JNIEXPORT void JNICALL\n+JVM_ExpandStackFrameInfo(JNIEnv *env, jobject obj);\n+\n@@ -257,1 +259,1 @@\n-JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jlong mode,\n+JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jint mode,\n@@ -262,1 +264,1 @@\n-JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jlong mode, jlong anchor,\n+JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jint mode, jlong anchor,\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,4 +62,0 @@\n-void InvocationCounter::decay() {\n-  update(count() >> 1);\n-}\n-\n","filename":"src\/hotspot\/share\/interpreter\/invocationCounter.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-  void decay();                                  \/\/ decay counter (divide by two)\n","filename":"src\/hotspot\/share\/interpreter\/invocationCounter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -141,0 +141,1 @@\n+  bool _vthread;\n@@ -143,1 +144,0 @@\n-  bool _vthread;\n@@ -168,2 +168,3 @@\n-    _cont_entry(JfrThreadLocal::is_vthread(jt) ? jt->last_continuation() : nullptr),\n-    _async_mode(async_mode), _vthread(JfrThreadLocal::is_vthread(jt)) {\n+    _vthread(JfrThreadLocal::is_vthread(jt)),\n+    _cont_entry(_vthread ? jt->last_continuation() : nullptr),\n+    _async_mode(async_mode) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-  if (!t->is_Java_thread() || !Atomic::load_acquire(&tl->_vthread)) {\n+  if (!t->is_Java_thread()) {\n@@ -401,1 +401,0 @@\n-  \/\/ virtual thread\n@@ -403,0 +402,4 @@\n+  if (!is_vthread(jt)) {\n+    return jvm_thread_id(t, tl);\n+  }\n+  \/\/ virtual thread\n@@ -459,1 +462,1 @@\n-  return Atomic::load_acquire(&jt->jfr_thread_local()->_vthread);\n+  return Atomic::load_acquire(&jt->jfr_thread_local()->_vthread) && jt->last_continuation() != nullptr;\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,5 @@\n+  if (UseJVMCINativeLibrary) {\n+    \/\/ Initializing libjvmci does not execute Java code so\n+    \/\/ can be done any time.\n+    return true;\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/methodCounters.hpp\"\n@@ -731,1 +732,0 @@\n-  declare_constant(ReceiverTypeData::nonprofiled_count_off_set)           \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2677,1 +2677,1 @@\n-      MutexLocker ml(SafepointSynchronize::is_at_safepoint() ? nullptr : mdo->extra_data_lock());\n+      ConditionalMutexLocker ml(mdo->extra_data_lock(), !SafepointSynchronize::is_at_safepoint());\n@@ -3632,2 +3632,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock\n-                 , Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -3674,2 +3673,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -3690,2 +3688,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1194,1 +1194,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -1205,1 +1205,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n@@ -33,1 +32,0 @@\n-#include \"oops\/methodCounters.hpp\"\n@@ -223,20 +221,3 @@\n-  u2   number_of_breakpoints() const {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs == nullptr) {\n-      return 0;\n-    } else {\n-      return mcs->number_of_breakpoints();\n-    }\n-  }\n-  void incr_number_of_breakpoints(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->incr_number_of_breakpoints();\n-    }\n-  }\n-  void decr_number_of_breakpoints(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->decr_number_of_breakpoints();\n-    }\n-  }\n+  inline u2 number_of_breakpoints() const;\n+  inline void incr_number_of_breakpoints(Thread* current);\n+  inline void decr_number_of_breakpoints(Thread* current);\n@@ -244,6 +225,1 @@\n-  void clear_number_of_breakpoints() {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->clear_number_of_breakpoints();\n-    }\n-  }\n+  inline void clear_number_of_breakpoints();\n@@ -287,6 +263,1 @@\n-  void interpreter_throwout_increment(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->interpreter_throwout_increment();\n-    }\n-  }\n+  inline void interpreter_throwout_increment(Thread* current);\n@@ -295,8 +266,1 @@\n-  int  interpreter_throwout_count() const        {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs == nullptr) {\n-      return 0;\n-    } else {\n-      return mcs->interpreter_throwout_count();\n-    }\n-  }\n+  inline int interpreter_throwout_count() const;\n@@ -363,30 +327,6 @@\n-  int prev_event_count() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->prev_event_count();\n-  }\n-  void set_prev_event_count(int count) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_prev_event_count(count);\n-    }\n-  }\n-  jlong prev_time() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->prev_time();\n-  }\n-  void set_prev_time(jlong time) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_prev_time(time);\n-    }\n-  }\n-  float rate() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->rate();\n-  }\n-  void set_rate(float rate) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_rate(rate);\n-    }\n-  }\n+  inline int prev_event_count() const;\n+  inline void set_prev_event_count(int count);\n+  inline jlong prev_time() const;\n+  inline void set_prev_time(jlong time);\n+  inline float rate() const;\n+  inline void set_rate(float rate);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":12,"deletions":72,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/methodCounters.hpp\"\n@@ -118,0 +119,87 @@\n+#if INCLUDE_JVMTI\n+inline u2 Method::number_of_breakpoints() const {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs == nullptr) {\n+    return 0;\n+  } else {\n+    return mcs->number_of_breakpoints();\n+  }\n+}\n+\n+inline void Method::incr_number_of_breakpoints(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->incr_number_of_breakpoints();\n+  }\n+}\n+\n+inline void Method::decr_number_of_breakpoints(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->decr_number_of_breakpoints();\n+  }\n+}\n+\n+\/\/ Initialization only\n+inline void Method::clear_number_of_breakpoints() {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->clear_number_of_breakpoints();\n+  }\n+}\n+#endif \/\/ INCLUDE_JVMTI\n+\n+#if COMPILER2_OR_JVMCI\n+inline void Method::interpreter_throwout_increment(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->interpreter_throwout_increment();\n+  }\n+}\n+#endif\n+\n+inline int Method::interpreter_throwout_count() const        {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs == nullptr) {\n+    return 0;\n+  } else {\n+    return mcs->interpreter_throwout_count();\n+  }\n+}\n+\n+inline int Method::prev_event_count() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->prev_event_count();\n+}\n+\n+inline void Method::set_prev_event_count(int count) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_prev_event_count(count);\n+  }\n+}\n+\n+inline jlong Method::prev_time() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->prev_time();\n+}\n+\n+inline void Method::set_prev_time(jlong time) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_prev_time(time);\n+  }\n+}\n+\n+inline float Method::rate() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->rate();\n+}\n+\n+inline void Method::set_rate(float rate) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_rate(rate);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/method.inline.hpp","additions":88,"deletions":0,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -422,3 +422,0 @@\n-#if INCLUDE_JVMCI\n-  st->print_cr(\"count(%u) nonprofiled_count(%u) entries(%u)\", count(), nonprofiled_count(), entries);\n-#else\n@@ -426,1 +423,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"interpreter\/invocationCounter.hpp\"\n@@ -1098,3 +1099,6 @@\n-\/\/ dynamic type check.  It consists of a counter which counts the total times\n-\/\/ that the check is reached, and a series of (Klass*, count) pairs\n-\/\/ which are used to store a type profile for the receiver of the check.\n+\/\/ dynamic type check.  It consists of a series of (Klass*, count)\n+\/\/ pairs which are used to store a type profile for the receiver of\n+\/\/ the check, the associated count is incremented every time the type\n+\/\/ is seen. A per ReceiverTypeData counter is incremented on type\n+\/\/ overflow (when there's no more room for a not yet profiled Klass*).\n+\/\/\n@@ -1106,13 +1110,0 @@\n-#if INCLUDE_JVMCI\n-    \/\/ Description of the different counters\n-    \/\/ ReceiverTypeData for instanceof\/checkcast\/aastore:\n-    \/\/   count is decremented for failed type checks\n-    \/\/   JVMCI only: nonprofiled_count is incremented on type overflow\n-    \/\/ VirtualCallData for invokevirtual\/invokeinterface:\n-    \/\/   count is incremented on type overflow\n-    \/\/   JVMCI only: nonprofiled_count is incremented on method overflow\n-\n-    \/\/ JVMCI is interested in knowing the percentage of type checks involving a type not explicitly in the profile\n-    nonprofiled_count_off_set = counter_cell_count,\n-    receiver0_offset,\n-#else\n@@ -1120,1 +1111,0 @@\n-#endif\n@@ -1135,1 +1125,1 @@\n-    return counter_cell_count + (uint) TypeProfileWidth * receiver_type_row_cell_count JVMCI_ONLY(+ 1);\n+    return counter_cell_count + (uint) TypeProfileWidth * receiver_type_row_cell_count;\n@@ -1197,7 +1187,0 @@\n-#if INCLUDE_JVMCI\n-    if (!this->is_VirtualCallData()) {\n-      \/\/ if this is a ReceiverTypeData for JVMCI, the nonprofiled_count\n-      \/\/ must also be reset (see \"Description of the different counters\" above)\n-      set_nonprofiled_count(0);\n-    }\n-#endif\n@@ -1213,11 +1196,0 @@\n-#if INCLUDE_JVMCI\n-  static ByteSize nonprofiled_receiver_count_offset() {\n-    return cell_offset(nonprofiled_count_off_set);\n-  }\n-  uint nonprofiled_count() const {\n-    return uint_at(nonprofiled_count_off_set);\n-  }\n-  void set_nonprofiled_count(uint count) {\n-    set_uint_at(nonprofiled_count_off_set, count);\n-  }\n-#endif \/\/ INCLUDE_JVMCI\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":8,"deletions":36,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -548,1 +548,1 @@\n-                                               caller_bci, inline_msg);\n+                                 caller_bci, inlining_result_of(success), inline_msg);\n@@ -550,1 +550,1 @@\n-    C->print_inlining(callee_method, inline_level(), caller_bci, inline_msg);\n+    C->print_inlining(callee_method, inline_level(), caller_bci, inlining_result_of(success), inline_msg);\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -783,0 +783,6 @@\n+                                                                            \\\n+  product(intx, TypeProfileSubTypeCheckCommonThreshold, 50,                 \\\n+          \"Use profile data at type check if profiled types account for\"    \\\n+          \"more than this threshold\")                                       \\\n+          range(0, 100)                                                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  virtual void print_inlining_late(const char* msg) {\n+  virtual void print_inlining_late(InliningResult result, const char* msg) {\n@@ -375,1 +375,1 @@\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), msg);\n+    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n@@ -525,1 +525,1 @@\n-  virtual void print_inlining_late(const char* msg) {\n+  virtual void print_inlining_late(InliningResult result, const char* msg) {\n@@ -529,1 +529,1 @@\n-    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), msg);\n+    C->print_inlining(method(), call->jvms()->depth()-1, call->jvms()->bci(), result, msg);\n@@ -558,1 +558,1 @@\n-      C->print_inlining(method(), jvms->depth()-1, call_node()->jvms()->bci(),\n+      C->print_inlining(method(), jvms->depth()-1, call_node()->jvms()->bci(), InliningResult::FAILURE,\n@@ -568,1 +568,1 @@\n-      C->print_inlining(method(), jvms->depth()-1, call_node()->jvms()->bci(),\n+      C->print_inlining(method(), jvms->depth()-1, call_node()->jvms()->bci(), InliningResult::FAILURE,\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  virtual void print_inlining_late(const char* msg) { ShouldNotReachHere(); }\n+  virtual void print_inlining_late(InliningResult result, const char* msg) { ShouldNotReachHere(); }\n@@ -178,3 +178,1 @@\n-    if (C->print_inlining()) {\n-      C->print_inlining(callee, inline_level, bci, msg);\n-    }\n+    print_inlining_impl(C, callee, inline_level, bci, InliningResult::SUCCESS, msg);\n@@ -184,1 +182,1 @@\n-    print_inlining(C, callee, inline_level, bci, msg);\n+    print_inlining_impl(C, callee, inline_level, bci, InliningResult::FAILURE, msg);\n@@ -191,0 +189,8 @@\n+\n+private:\n+  static void print_inlining_impl(Compile* C, ciMethod* callee, int inline_level, int bci,\n+                                  InliningResult result, const char* msg) {\n+    if (C->print_inlining()) {\n+      C->print_inlining(callee, inline_level, bci, result, msg);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-  Node* search_identical(int dist);\n+  Node* search_identical(int dist, PhaseIterGVN* igvn);\n@@ -445,0 +445,2 @@\n+\n+  bool same_condition(const Node* dom, PhaseIterGVN* igvn) const;\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2586,1 +2586,1 @@\n-              cg->print_inlining_late(msg);\n+              cg->print_inlining_late(InliningResult::FAILURE, msg);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -522,1 +522,1 @@\n-  void print_inlining(ciMethod* method, int inline_level, int bci, const char* msg = nullptr) {\n+  void print_inlining(ciMethod* method, int inline_level, int bci, InliningResult result, const char* msg = nullptr) {\n@@ -524,1 +524,1 @@\n-    CompileTask::print_inlining_inner(&ss, method, inline_level, bci, msg);\n+    CompileTask::print_inlining_inner(&ss, method, inline_level, bci, result, msg);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-      CompileTask::print_inlining_tty(prof_method, depth, bci);\n+      CompileTask::print_inlining_tty(prof_method, depth, bci, InliningResult::SUCCESS);\n@@ -377,1 +377,1 @@\n-      print_inlining(callee, jvms->depth() - 1, jvms->bci(), msg);\n+      print_inlining(callee, jvms->depth() - 1, jvms->bci(), InliningResult::FAILURE, msg);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2812,1 +2812,2 @@\n-Node* Phase::gen_subtype_check(Node* subklass, Node* superklass, Node** ctrl, Node* mem, PhaseGVN& gvn) {\n+Node* Phase::gen_subtype_check(Node* subklass, Node* superklass, Node** ctrl, Node* mem, PhaseGVN& gvn,\n+                               ciMethod* method, int bci) {\n@@ -2869,1 +2870,3 @@\n-  bool might_be_cache = (gvn.find_int_con(chk_off, cacheoff_con) == cacheoff_con);\n+  const TypeInt* chk_off_t = chk_off->Value(&gvn)->isa_int();\n+  int chk_off_con = (chk_off_t != nullptr && chk_off_t->is_con()) ? chk_off_t->get_con() : cacheoff_con;\n+  bool might_be_cache = (chk_off_con == cacheoff_con);\n@@ -2897,1 +2900,1 @@\n-  if( superklass == nkls )\n+  if (superklass == nkls) {\n@@ -2899,0 +2902,41 @@\n+  }\n+\n+  \/\/ Gather the various success & failures here\n+  RegionNode* r_not_subtype = new RegionNode(3);\n+  gvn.record_for_igvn(r_not_subtype);\n+  RegionNode* r_ok_subtype = new RegionNode(4);\n+  gvn.record_for_igvn(r_ok_subtype);\n+\n+  \/\/ If we might perform an expensive check, first try to take advantage of profile data that was attached to the\n+  \/\/ SubTypeCheck node\n+  if (might_be_cache && method != nullptr && VM_Version::profile_all_receivers_at_type_check()) {\n+    ciCallProfile profile = method->call_profile_at_bci(bci);\n+    float total_prob = 0;\n+    for (int i = 0; profile.has_receiver(i); ++i) {\n+      float prob = profile.receiver_prob(i);\n+      total_prob += prob;\n+    }\n+    if (total_prob * 100. >= TypeProfileSubTypeCheckCommonThreshold) {\n+      const TypeKlassPtr* superk = gvn.type(superklass)->is_klassptr();\n+      for (int i = 0; profile.has_receiver(i); ++i) {\n+        ciKlass* klass = profile.receiver(i);\n+        const TypeKlassPtr* klass_t = TypeKlassPtr::make(klass);\n+        Compile::SubTypeCheckResult result = C->static_subtype_check(superk, klass_t);\n+        if (result != Compile::SSC_always_true && result != Compile::SSC_always_false) {\n+          continue;\n+        }\n+        float prob = profile.receiver_prob(i);\n+        ConNode* klass_node = gvn.makecon(klass_t);\n+        IfNode* iff = gen_subtype_check_compare(*ctrl, subklass, klass_node, BoolTest::eq, prob, gvn, T_ADDRESS);\n+        Node* iftrue = gvn.transform(new IfTrueNode(iff));\n+\n+        if (result == Compile::SSC_always_true) {\n+          r_ok_subtype->add_req(iftrue);\n+        } else {\n+          assert(result == Compile::SSC_always_false, \"\");\n+          r_not_subtype->add_req(iftrue);\n+        }\n+        *ctrl = gvn.transform(new IfFalseNode(iff));\n+      }\n+    }\n+  }\n@@ -2914,0 +2958,5 @@\n+    PhaseIterGVN* igvn = gvn.is_IterGVN();\n+    if (igvn != nullptr) {\n+      igvn->remove_globally_dead_node(r_ok_subtype);\n+      igvn->remove_globally_dead_node(r_not_subtype);\n+    }\n@@ -2917,6 +2966,0 @@\n-  \/\/ Gather the various success & failures here\n-  RegionNode *r_ok_subtype = new RegionNode(4);\n-  gvn.record_for_igvn(r_ok_subtype);\n-  RegionNode *r_not_subtype = new RegionNode(3);\n-  gvn.record_for_igvn(r_not_subtype);\n-\n@@ -2990,1 +3033,2 @@\n-    Node* n = Phase::gen_subtype_check(subklass, superklass, &ctrl, mem, _gvn);\n+\n+    Node* n = Phase::gen_subtype_check(subklass, superklass, &ctrl, mem, _gvn, method(), bci());\n@@ -2995,1 +3039,1 @@\n-  Node* check = _gvn.transform(new SubTypeCheckNode(C, obj_or_subklass, superklass));\n+  Node* check = _gvn.transform(new SubTypeCheckNode(C, obj_or_subklass, superklass, method(), bci()));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":55,"deletions":11,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"opto\/subtypenode.hpp\"\n@@ -1501,1 +1502,1 @@\n-  Node* prev_dom = search_identical(dist);\n+  Node* prev_dom = search_identical(dist, igvn);\n@@ -1576,1 +1577,1 @@\n-Node* IfNode::search_identical(int dist) {\n+Node* IfNode::search_identical(int dist, PhaseIterGVN* igvn) {\n@@ -1582,2 +1583,2 @@\n-  while (dom->Opcode() != op    ||  \/\/ Not same opcode?\n-         dom->in(1)    != in(1) ||  \/\/ Not same input 1?\n+  while (dom->Opcode() != op ||  \/\/ Not same opcode?\n+         !same_condition(dom, igvn) ||  \/\/ Not same input 1?\n@@ -1607,0 +1608,30 @@\n+bool IfNode::same_condition(const Node* dom, PhaseIterGVN* igvn) const {\n+  Node* dom_bool = dom->in(1);\n+  Node* this_bool = in(1);\n+  if (dom_bool == this_bool) {\n+    return true;\n+  }\n+\n+  if (dom_bool == nullptr || !dom_bool->is_Bool() ||\n+      this_bool == nullptr || !this_bool->is_Bool()) {\n+    return false;\n+  }\n+  Node* dom_cmp = dom_bool->in(1);\n+  Node* this_cmp = this_bool->in(1);\n+\n+  \/\/ If the comparison is a subtype check, then SubTypeCheck nodes may have profile data attached to them and may be\n+  \/\/ different nodes even-though they perform the same subtype check\n+  if (dom_cmp == nullptr || !dom_cmp->is_SubTypeCheck() ||\n+      this_cmp == nullptr || !this_cmp->is_SubTypeCheck()) {\n+    return false;\n+  }\n+\n+  if (dom_cmp->in(1) != this_cmp->in(1) ||\n+      dom_cmp->in(2) != this_cmp->in(2) ||\n+      dom_bool->as_Bool()->_test._test != this_bool->as_Bool()->_test._test) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n@@ -1984,1 +2015,1 @@\n-    prev_dom = search_identical(4);\n+    prev_dom = search_identical(4, igvn);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, inline_msg);\n+    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, InliningResult::SUCCESS, inline_msg);\n@@ -124,1 +124,1 @@\n-      C->print_inlining(callee, jvms->depth() - 1, bci, inline_msg);\n+      C->print_inlining(callee, jvms->depth() - 1, bci, InliningResult::SUCCESS, inline_msg);\n@@ -150,1 +150,1 @@\n-    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, msg);\n+    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, InliningResult::FAILURE, msg);\n@@ -152,1 +152,1 @@\n-      C->print_inlining(callee, jvms->depth() - 1, bci, msg);\n+      C->print_inlining(callee, jvms->depth() - 1, bci, InliningResult::FAILURE, msg);\n@@ -193,1 +193,1 @@\n-    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, inline_msg);\n+    CompileTask::print_inlining_ul(callee, jvms->depth() - 1, bci, InliningResult::SUCCESS, inline_msg);\n@@ -195,1 +195,1 @@\n-      C->print_inlining(callee, jvms->depth() - 1, bci, inline_msg);\n+      C->print_inlining(callee, jvms->depth() - 1, bci, InliningResult::SUCCESS, inline_msg);\n@@ -211,1 +211,1 @@\n-    CompileTask::print_inlining_ul(kit.callee(), jvms->depth() - 1, bci, msg);\n+    CompileTask::print_inlining_ul(kit.callee(), jvms->depth() - 1, bci, InliningResult::FAILURE, msg);\n@@ -213,1 +213,1 @@\n-      C->print_inlining(kit.callee(), jvms->depth() - 1, bci, msg);\n+      C->print_inlining(kit.callee(), jvms->depth() - 1, bci, InliningResult::FAILURE, msg);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1747,0 +1747,3 @@\n+\n+  Node* similar_subtype_check(const Node* x, Node* r_in);\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -148,0 +148,3 @@\n+        if (y == nullptr) {\n+          y = similar_subtype_check(x, region->in(i));\n+        }\n@@ -225,0 +228,24 @@\n+\/\/ Subtype checks that carry profile data don't common so look for a replacement by following edges\n+Node* PhaseIdealLoop::similar_subtype_check(const Node* x, Node* r_in) {\n+  if (x->is_SubTypeCheck()) {\n+    Node* in1 = x->in(1);\n+    for (DUIterator_Fast imax, i = in1->fast_outs(imax); i < imax; i++) {\n+      Node* u = in1->fast_out(i);\n+      if (u != x && u->is_SubTypeCheck() && u->in(1) == x->in(1) && u->in(2) == x->in(2)) {\n+        for (DUIterator_Fast jmax, j = u->fast_outs(jmax); j < jmax; j++) {\n+          Node* bol = u->fast_out(j);\n+          for (DUIterator_Fast kmax, k = bol->fast_outs(kmax); k < kmax; k++) {\n+            Node* iff = bol->fast_out(k);\n+            \/\/ Only dominating subtype checks are interesting: otherwise we risk replacing a subtype check by another with\n+            \/\/ unrelated profile\n+            if (iff->is_If() && is_dominator(iff, r_in)) {\n+              return u;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -1297,1 +1324,1 @@\n-  if (!dom->is_If() || dom->in(1) != n->in(1)) {\n+  if (!dom->is_If() ||  !n->as_If()->same_condition(dom, &_igvn)) {\n@@ -1586,1 +1613,1 @@\n-    if (max > 1 && bol->is_Bool()) {\n+    if (bol->is_Bool() && (max > 1 || bol->in(1)->is_SubTypeCheck())) {\n@@ -1588,1 +1615,2 @@\n-      Node *cutoff = get_ctrl(bol);\n+      Node* cmp = bol->in(1);\n+      Node *cutoff = cmp->is_SubTypeCheck() ? dom_lca(get_ctrl(cmp->in(1)), get_ctrl(cmp->in(2))) : get_ctrl(bol);\n@@ -1594,1 +1622,1 @@\n-        if (dom->req() > 1 && dom->in(1) == bol && prevdom->in(0) == dom &&\n+        if (dom->req() > 1 && n->as_If()->same_condition(dom, &_igvn) && prevdom->in(0) == dom &&\n@@ -1655,0 +1683,6 @@\n+    if (n->in(1) != dom_if->in(1)) {\n+      assert(n->in(1)->in(1)->is_SubTypeCheck() &&\n+             (n->in(1)->in(1)->as_SubTypeCheck()->method() != nullptr ||\n+              dom_if->in(1)->in(1)->as_SubTypeCheck()->method() != nullptr), \"only for subtype checks with profile data attached\");\n+      _igvn.replace_input_of(n, 1, dom_if->in(1));\n+    }\n@@ -4423,0 +4457,6 @@\n+      }\n+\n+      assert(current->vect_type() != nullptr, \"must have vector type\");\n+      if (current->vect_type() != last_ur->vect_type()) {\n+        \/\/ Reductions do not have the same vector type (length and element type).\n+        break; \/\/ Chain traversal fails.\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":44,"deletions":4,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2728,1 +2728,1 @@\n-    Node* not_subtype_ctrl = Phase::gen_subtype_check(subklass, superklass, &ctrl, nullptr, _igvn);\n+    Node* not_subtype_ctrl = Phase::gen_subtype_check(subklass, superklass, &ctrl, nullptr, _igvn, check->method(), check->bci());\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -672,1 +672,1 @@\n-      Node* not_subtype_ctrl = Phase::gen_subtype_check(src_klass, dest_klass, ctrl, mem, _igvn);\n+      Node* not_subtype_ctrl = Phase::gen_subtype_check(src_klass, dest_klass, ctrl, mem, _igvn, nullptr, -1);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  static Node* gen_subtype_check(Node* subklass, Node* superklass, Node** ctrl, Node* mem, PhaseGVN& gvn);\n+  static Node* gen_subtype_check(Node* subklass, Node* superklass, Node** ctrl, Node* mem, PhaseGVN& gvn, ciMethod* method, int bci);\n","filename":"src\/hotspot\/share\/opto\/phase.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,1 +250,0 @@\n-\n@@ -252,0 +251,18 @@\n+\n+uint SubTypeCheckNode::size_of() const {\n+  return sizeof(*this);\n+}\n+\n+uint SubTypeCheckNode::hash() const {\n+  return NO_HASH;\n+}\n+\n+#ifndef PRODUCT\n+void SubTypeCheckNode::dump_spec(outputStream* st) const {\n+  if (_method != nullptr) {\n+    st->print(\" profiled at: \");\n+    _method->print_short_name(st);\n+    st->print(\":%d\", _bci);\n+  }\n+}\n+#endif\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-  SubTypeCheckNode(Compile* C, Node* obj_or_subklass, Node* superklass)\n-    : CmpNode(obj_or_subklass, superklass) {\n+  SubTypeCheckNode(Compile* C, Node* obj_or_subklass, Node* superklass, ciMethod* method, int bci)\n+    : CmpNode(obj_or_subklass, superklass), _method(method), _bci(bci) {\n@@ -51,1 +51,11 @@\n-  bool depends_only_on_test() const { return false; };\n+  bool depends_only_on_test() const { return false; }\n+\n+  ciMethod* method() const { return _method; }\n+  int bci() const { return _bci; }\n+\n+  uint size_of() const;\n+  uint hash() const;\n+\n+#ifndef PRODUCT\n+  void dump_spec(outputStream* st) const;\n+#endif\n@@ -53,1 +63,0 @@\n-#ifdef ASSERT\n@@ -55,0 +64,4 @@\n+  \/\/ method\/bci for this subtype check so profile data can be retrieved after parsing is over\n+  ciMethod* _method;\n+  int _bci;\n+#ifdef ASSERT\n@@ -59,1 +72,0 @@\n-#endif \/\/ ASSERT\n@@ -62,0 +74,1 @@\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/opto\/subtypenode.hpp","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -546,1 +546,1 @@\n-  java_lang_StackFrameInfo::to_stack_trace_element(stack_frame_info, stack_trace_element, THREAD);\n+  java_lang_StackFrameInfo::to_stack_trace_element(stack_frame_info, stack_trace_element, CHECK);\n@@ -551,0 +551,15 @@\n+JVM_ENTRY(void, JVM_ExpandStackFrameInfo(JNIEnv *env, jobject obj))\n+  Handle stack_frame_info(THREAD, JNIHandles::resolve_non_null(obj));\n+\n+  bool have_name = (java_lang_StackFrameInfo::name(stack_frame_info()) != nullptr);\n+  bool have_type = (java_lang_StackFrameInfo::type(stack_frame_info()) != nullptr);\n+  Method* method = java_lang_StackFrameInfo::get_method(stack_frame_info());\n+  if (!have_name) {\n+    oop name = StringTable::intern(method->name(), CHECK);\n+    java_lang_StackFrameInfo::set_name(stack_frame_info(), name);\n+  }\n+  if (!have_type) {\n+    Handle type = java_lang_String::create_from_symbol(method->signature(), CHECK);\n+    java_lang_StackFrameInfo::set_type(stack_frame_info(), type());\n+  }\n+JVM_END\n@@ -552,2 +567,1 @@\n-\n-JVM_ENTRY(jobject, JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jlong mode,\n+JVM_ENTRY(jobject, JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jint mode,\n@@ -563,1 +577,1 @@\n-  \/\/ frames array is a Class<?>[] array when only getting caller reference,\n+  \/\/ frames array is a ClassFrameInfo[] array when only getting caller reference,\n@@ -580,1 +594,1 @@\n-JVM_ENTRY(jint, JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jlong mode, jlong anchor,\n+JVM_ENTRY(jint, JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jint mode, jlong anchor,\n@@ -583,1 +597,1 @@\n-  \/\/ frames array is a Class<?>[] array when only getting caller reference,\n+  \/\/ frames array is a ClassFrameInfo[] array when only getting caller reference,\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -312,0 +312,2 @@\n+  static bool is_any_thread_filtered_event_enabled_globally();\n+  static void recompute_thread_filtered(JvmtiThreadState *state);\n@@ -733,0 +735,14 @@\n+bool\n+JvmtiEventControllerPrivate::is_any_thread_filtered_event_enabled_globally() {\n+  julong global_thread_events = JvmtiEventController::_universal_global_event_enabled.get_bits() & THREAD_FILTERED_EVENT_BITS;\n+  return global_thread_events != 0L;\n+}\n+\n+void\n+JvmtiEventControllerPrivate::recompute_thread_filtered(JvmtiThreadState *state) {\n+  assert(Threads::number_of_threads() == 0 || JvmtiThreadState_lock->is_locked(), \"sanity check\");\n+\n+  if (is_any_thread_filtered_event_enabled_globally()) {\n+    JvmtiEventControllerPrivate::recompute_thread_enabled(state);\n+  }\n+}\n@@ -742,7 +758,2 @@\n-  if ((JvmtiEventController::_universal_global_event_enabled.get_bits() & THREAD_FILTERED_EVENT_BITS) != 0) {\n-    MutexLocker mu(JvmtiThreadState_lock);\n-    \/\/ create the thread state if missing\n-    JvmtiThreadState *state = JvmtiThreadState::state_for_while_locked(thread);\n-    if (state != nullptr) {    \/\/ skip threads with no JVMTI thread state\n-      recompute_thread_enabled(state);\n-    }\n+  if (is_any_thread_filtered_event_enabled_globally()) { \/\/ intentionally racy\n+    JvmtiThreadState::state_for(thread);\n@@ -752,1 +763,0 @@\n-\n@@ -1118,0 +1128,5 @@\n+void\n+JvmtiEventController::recompute_thread_filtered(JvmtiThreadState *state) {\n+  JvmtiEventControllerPrivate::recompute_thread_filtered(state);\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -237,0 +237,1 @@\n+  static void recompute_thread_filtered(JvmtiThreadState *state);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -420,0 +420,9 @@\n+JvmtiThreadState*\n+JvmtiExport::get_jvmti_thread_state(JavaThread *thread) {\n+  assert(thread == JavaThread::current(), \"must be current thread\");\n+  if (thread->is_vthread_mounted() && thread->jvmti_thread_state() == nullptr) {\n+    JvmtiEventController::thread_started(thread);\n+  }\n+  return thread->jvmti_thread_state();\n+}\n+\n@@ -923,1 +932,1 @@\n-    _state = _thread->jvmti_thread_state();\n+    _state = JvmtiExport::get_jvmti_thread_state(_thread);\n@@ -1215,1 +1224,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1313,1 +1322,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1332,1 +1341,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1340,1 +1349,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1355,1 +1364,1 @@\n-  JvmtiThreadState* state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1393,1 +1402,1 @@\n-  JvmtiThreadState* state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1522,1 +1531,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1570,1 +1579,1 @@\n-  JvmtiThreadState *state = cur_thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(cur_thread);\n@@ -1604,1 +1613,1 @@\n-  JvmtiThreadState *state = cur_thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(cur_thread);\n@@ -1639,1 +1648,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1674,1 +1683,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1707,1 +1716,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1801,1 +1810,1 @@\n-  JvmtiThreadState* state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1841,1 +1850,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -1962,1 +1971,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2004,1 +2013,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2092,1 +2101,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2208,1 +2217,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2364,1 +2373,1 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2606,1 +2615,1 @@\n-  JvmtiThreadState* state = thread->jvmti_thread_state();\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2725,1 +2734,4 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  HandleMark hm(thread);\n+  Handle h(thread, object);\n+\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2733,3 +2745,0 @@\n-  HandleMark hm(thread);\n-  Handle h(thread, object);\n-\n@@ -2758,1 +2767,4 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  HandleMark hm(thread);\n+  Handle h(thread, object);\n+\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2766,3 +2778,0 @@\n-  HandleMark hm(thread);\n-  Handle h(thread, object);\n-\n@@ -2792,1 +2801,4 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  HandleMark hm(thread);\n+  Handle h(thread, object);\n+\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2800,3 +2812,0 @@\n-  HandleMark hm(thread);\n-  Handle h(thread, object);\n-\n@@ -2826,1 +2835,4 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  HandleMark hm(thread);\n+  Handle h(thread, object);\n+\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2834,3 +2846,0 @@\n-  HandleMark hm(thread);\n-  Handle h(thread, object);\n-\n@@ -2889,1 +2898,4 @@\n-  JvmtiThreadState *state = thread->jvmti_thread_state();\n+  HandleMark hm(thread);\n+  Handle h(thread, object);\n+\n+  JvmtiThreadState *state = get_jvmti_thread_state(thread);\n@@ -2899,2 +2911,0 @@\n-  HandleMark hm(thread);\n-  Handle h(thread, object);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":50,"deletions":40,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -301,0 +301,5 @@\n+  \/\/ If the jvmti_thread_state is absent and any thread filtered event\n+  \/\/ is enabled globally then it is created.\n+  \/\/ Otherwise, the thread->jvmti_thread_state() is returned.\n+  static JvmtiThreadState* get_jvmti_thread_state(JavaThread *thread);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -220,6 +220,1 @@\n-Mutex* JvmtiManageCapabilities::lock() {\n-  if (Thread::current_or_null() == nullptr) {\n-    return nullptr;  \/\/ Detached thread, can be a call from Agent_OnLoad.\n-  }\n-  return _capabilities_lock;\n-}\n+\n@@ -249,1 +244,1 @@\n-  MutexLocker ml(lock(), Mutex::_no_safepoint_check_flag);\n+  CapabilitiesMutexLocker ml;\n@@ -257,1 +252,1 @@\n-  MutexLocker ml(lock(), Mutex::_no_safepoint_check_flag);\n+  CapabilitiesMutexLocker ml;\n@@ -299,1 +294,1 @@\n-  MutexLocker ml(lock(), Mutex::_no_safepoint_check_flag);\n+  CapabilitiesMutexLocker ml;\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -57,0 +57,9 @@\n+  \/\/ lock, unless called from a detached thread (e.g. can be a call from Agent_OnLoad)\n+  class CapabilitiesMutexLocker: public ConditionalMutexLocker {\n+    public:\n+      CapabilitiesMutexLocker() :\n+        ConditionalMutexLocker(_capabilities_lock,\n+                               Thread::current_or_null() != nullptr,\n+                               Mutex::_no_safepoint_check_flag) {}\n+  };\n+\n@@ -70,3 +79,0 @@\n-  \/\/ returns nullptr in onload phase\n-  static Mutex* lock();\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -468,0 +468,2 @@\n+  \/\/ Callers are responsible to call recompute_thread_filtered() to update event bits\n+  \/\/ if thread-filtered events are enabled globally.\n@@ -471,0 +473,1 @@\n+  \/\/ Calls recompute_thread_filtered() to update event bits if thread-filtered events are enabled globally.\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+    JvmtiEventController::recompute_thread_filtered(state);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+  HIDDEN_MEMBER        = java_lang_invoke_MemberName::MN_HIDDEN_MEMBER,\n@@ -1010,0 +1011,1 @@\n+    template(java_lang_invoke_MemberName,MN_HIDDEN_MEMBER) \\\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-JavaFrameStream::JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont)\n+JavaFrameStream::JavaFrameStream(JavaThread* thread, jint mode, Handle cont_scope, Handle cont)\n@@ -157,2 +157,2 @@\n-\/\/   frames_array     Buffer to store Class or StackFrame in, starting at start_index.\n-\/\/                    frames array is a Class<?>[] array when only getting caller\n+\/\/   frames_array     Buffer to store stack frame information in, starting at start_index.\n+\/\/                    frames array is a ClassFrameInfo[] array when only getting caller\n@@ -165,1 +165,1 @@\n-int StackWalk::fill_in_frames(jlong mode, BaseFrameStream& stream,\n+int StackWalk::fill_in_frames(jint mode, BaseFrameStream& stream,\n@@ -189,1 +189,2 @@\n-    if (!ShowHiddenFrames && (skip_hidden_frames(mode) || get_caller_class(mode))) {\n+    LogTarget(Debug, stackwalk) lt;\n+    if (!ShowHiddenFrames && skip_hidden_frames(mode)) {\n@@ -191,1 +192,0 @@\n-        LogTarget(Debug, stackwalk) lt;\n@@ -195,1 +195,1 @@\n-          ls.print(\"  hidden method: \");\n+          ls.print(\"  skip hidden method: \");\n@@ -199,0 +199,1 @@\n+\n@@ -206,1 +207,0 @@\n-    LogTarget(Debug, stackwalk) lt;\n@@ -215,7 +215,0 @@\n-    if (!need_method_info(mode) && get_caller_class(mode) &&\n-          index == start_index && method->caller_sensitive()) {\n-      ResourceMark rm(THREAD);\n-      THROW_MSG_0(vmSymbols::java_lang_UnsupportedOperationException(),\n-        err_msg(\"StackWalker::getCallerClass called from @CallerSensitive '%s' method\",\n-                method->external_name()));\n-    }\n@@ -259,1 +252,3 @@\n-    frames_array->obj_at_put(index, method->method_holder()->java_mirror());\n+    HandleMark hm(THREAD);\n+    Handle stackFrame(THREAD, frames_array->obj_at(index));\n+    java_lang_ClassFrameInfo::init_class(stackFrame, method);\n@@ -359,1 +354,1 @@\n-\/\/ Fill StackFrameInfo with bci and initialize memberName\n+\/\/ Fill StackFrameInfo with bci and initialize ResolvedMethodName\n@@ -408,2 +403,2 @@\n-\/\/   frames_array   Buffer to store StackFrame in, starting at start_index.\n-\/\/                  frames array is a Class<?>[] array when only getting caller\n+\/\/   frames_array   Buffer to store stack frame info in, starting at start_index.\n+\/\/                  frames array is a ClassFrameInfo[] array when only getting caller\n@@ -415,1 +410,1 @@\n-oop StackWalk::walk(Handle stackStream, jlong mode, int skip_frames, Handle cont_scope, Handle cont,\n+oop StackWalk::walk(Handle stackStream, jint mode, int skip_frames, Handle cont_scope, Handle cont,\n@@ -422,1 +417,1 @@\n-  log_debug(stackwalk)(\"Start walking: mode \" JLONG_FORMAT \" skip %d frames batch size %d\", mode, skip_frames, frame_count);\n+  log_debug(stackwalk)(\"Start walking: mode \" INT32_FORMAT_X \" skip %d frames batch size %d\", mode, skip_frames, frame_count);\n@@ -440,1 +435,0 @@\n-    assert(use_frames_array(mode), \"Bad mode for get live frame\");\n@@ -457,1 +451,1 @@\n-                               jlong mode, int skip_frames, int frame_count,\n+                               jint mode, int skip_frames, int frame_count,\n@@ -550,1 +544,1 @@\n-jint StackWalk::fetchNextBatch(Handle stackStream, jlong mode, jlong magic,\n+jint StackWalk::fetchNextBatch(Handle stackStream, jint mode, jlong magic,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":18,"deletions":24,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont);\n+  JavaFrameStream(JavaThread* thread, jint mode, Handle cont_scope, Handle cont);\n@@ -145,1 +145,1 @@\n-  static int fill_in_frames(jlong mode, BaseFrameStream& stream,\n+  static int fill_in_frames(jint mode, BaseFrameStream& stream,\n@@ -150,4 +150,1 @@\n-  static inline bool get_caller_class(jlong mode) {\n-    return (mode & JVM_STACKWALK_GET_CALLER_CLASS) != 0;\n-  }\n-  static inline bool skip_hidden_frames(jlong mode) {\n+  static inline bool skip_hidden_frames(jint mode) {\n@@ -156,1 +153,1 @@\n-  static inline bool live_frame_info(jlong mode) {\n+  static inline bool live_frame_info(jint mode) {\n@@ -161,5 +158,2 @@\n-  static inline bool need_method_info(jlong mode) {\n-    return (mode & JVM_STACKWALK_FILL_CLASS_REFS_ONLY) == 0;\n-  }\n-  static inline bool use_frames_array(jlong mode) {\n-    return (mode & JVM_STACKWALK_FILL_CLASS_REFS_ONLY) == 0;\n+  static inline bool need_method_info(jint mode) {\n+    return (mode & JVM_STACKWALK_CLASS_INFO_ONLY) == 0;\n@@ -167,1 +161,2 @@\n-  static oop walk(Handle stackStream, jlong mode, int skip_frames, Handle cont_scope, Handle cont,\n+\n+  static oop walk(Handle stackStream, jint mode, int skip_frames, Handle cont_scope, Handle cont,\n@@ -172,1 +167,1 @@\n-                             jlong mode, int skip_frames, int frame_count,\n+                             jint mode, int skip_frames, int frame_count,\n@@ -175,1 +170,1 @@\n-  static jint fetchNextBatch(Handle stackStream, jlong mode, jlong magic,\n+  static jint fetchNextBatch(Handle stackStream, jint mode, jlong magic,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -591,2 +591,2 @@\n-    int num_node_ids = (int)numa->num_active_nodes();\n-    const int* node_ids = numa->node_ids();\n+    int num_node_ids = checked_cast<int>(numa->num_active_nodes());\n+    const uint* node_ids = numa->node_ids();\n@@ -596,1 +596,1 @@\n-      result->int_at_put(i, (jint)node_ids[i]);\n+      result->int_at_put(i, checked_cast<jint>(node_ids[i]));\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -189,0 +189,2 @@\n+  static bool profile_all_receivers_at_type_check() { return true; }\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,2 +123,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -145,2 +144,2 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n+\n@@ -176,2 +175,2 @@\n-      MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                 Mutex::_no_safepoint_check_flag);\n+      ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n+\n@@ -204,2 +203,2 @@\n-        MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n-                       Mutex::_no_safepoint_check_flag);\n+        ConditionalMutexLocker ml(CompiledMethod_lock, !CompiledMethod_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n+\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -515,1 +515,1 @@\n-  MutexLocker ml(_lock.owned_by_self() ? nullptr :  &_lock, Mutex::_no_safepoint_check_flag);\n+  ConditionalMutexLocker ml(&_lock, !_lock.owned_by_self(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-void MutexLocker::post_initialize() {\n+void MutexLockerImpl::post_initialize() {\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,3 @@\n-class MutexLocker: public StackObj {\n+\/\/ Internal implementation. Skips on null Mutex.\n+\/\/ Subclasses enforce stronger invariants.\n+class MutexLockerImpl: public StackObj {\n@@ -193,2 +195,2 @@\n- public:\n-  MutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+\n+  MutexLockerImpl(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n@@ -206,1 +208,1 @@\n-  MutexLocker(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+  MutexLockerImpl(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n@@ -218,1 +220,1 @@\n-  ~MutexLocker() {\n+  ~MutexLockerImpl() {\n@@ -225,0 +227,1 @@\n+ public:\n@@ -228,0 +231,30 @@\n+\/\/ Simplest mutex locker.\n+\/\/ Does not allow null mutexes.\n+class MutexLocker: public MutexLockerImpl {\n+ public:\n+   MutexLocker(Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(mutex, flag) {\n+     assert(mutex != nullptr, \"null mutex not allowed\");\n+   }\n+\n+   MutexLocker(Thread* thread, Mutex* mutex, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(thread, mutex, flag) {\n+     assert(mutex != nullptr, \"null mutex not allowed\");\n+   }\n+};\n+\n+\/\/ Conditional mutex locker.\n+\/\/ Like MutexLocker above, but only locks when condition is true.\n+class ConditionalMutexLocker: public MutexLockerImpl {\n+ public:\n+   ConditionalMutexLocker(Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(condition ? mutex : nullptr, flag) {\n+     assert(!condition || mutex != nullptr, \"null mutex not allowed when locking\");\n+   }\n+\n+   ConditionalMutexLocker(Thread* thread, Mutex* mutex, bool condition, Mutex::SafepointCheckFlag flag = Mutex::_safepoint_check_flag) :\n+     MutexLockerImpl(thread, condition ? mutex : nullptr, flag) {\n+     assert(!condition || mutex != nullptr, \"null mutex not allowed when locking\");\n+   }\n+};\n+\n@@ -231,2 +264,1 @@\n-\n-class MonitorLocker: public MutexLocker {\n+class MonitorLocker: public MutexLockerImpl {\n@@ -242,1 +274,1 @@\n-    MutexLocker(monitor, flag), _flag(flag) {\n+    MutexLockerImpl(monitor, flag), _flag(flag) {\n@@ -248,1 +280,1 @@\n-    MutexLocker(thread, monitor, flag), _flag(flag) {\n+    MutexLockerImpl(thread, monitor, flag), _flag(flag) {\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":41,"deletions":9,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-    BasicType result_type,\n+    int       result_type, \/* BasicType on 4 bytes *\/\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  ConditionalMutexLocker ml(PeriodicTask_lock, !PeriodicTask_lock->owned_by_self());\n@@ -111,1 +111,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  ConditionalMutexLocker ml(PeriodicTask_lock, !PeriodicTask_lock->owned_by_self());\n","filename":"src\/hotspot\/share\/runtime\/task.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  MutexLocker ml(Threads_lock->owned_by_self() ? nullptr : Threads_lock);\n+  ConditionalMutexLocker ml(Threads_lock, !Threads_lock->owned_by_self());\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-  MutexLocker::post_initialize();\n+  MutexLockerImpl::post_initialize();\n@@ -696,1 +696,1 @@\n-  bool force_JVMCI_intialization = false;\n+  bool force_JVMCI_initialization = false;\n@@ -700,7 +700,1 @@\n-    force_JVMCI_intialization = EagerJVMCI || JVMCIPrintProperties || JVMCILibDumpJNIConfig;\n-\n-    if (!force_JVMCI_intialization) {\n-      \/\/ 8145270: Force initialization of JVMCI runtime otherwise requests for blocking\n-      \/\/ compilations via JVMCI will not actually block until JVMCI is initialized.\n-      force_JVMCI_intialization = UseJVMCICompiler && (!UseInterpreter || !BackgroundCompilation);\n-    }\n+    force_JVMCI_initialization = EagerJVMCI || JVMCIPrintProperties || JVMCILibDumpJNIConfig;\n@@ -710,5 +704,1 @@\n-  \/\/ Postpone completion of compiler initialization to after JVMCI\n-  \/\/ is initialized to avoid timeouts of blocking compilations.\n-  if (JVMCI_ONLY(!force_JVMCI_intialization) NOT_JVMCI(true)) {\n-    CompileBroker::compilation_init_phase2();\n-  }\n+  CompileBroker::compilation_init_phase2();\n@@ -757,1 +747,1 @@\n-  if (force_JVMCI_intialization) {\n+  if (force_JVMCI_initialization) {\n@@ -759,1 +749,0 @@\n-    CompileBroker::compilation_init_phase2();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/xmlstream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,2 +131,2 @@\n-     * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n-     * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n+     * The bulk read operations {@link java.io.Reader#read(char[]) read(char[])},\n+     * {@link java.io.Reader#read(char[], int, int) read(char[], int, int)} and\n@@ -154,1 +154,1 @@\n-     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n@@ -309,1 +309,1 @@\n-     * Reads a password or passphrase from the console with echoing disabled\n+     * Reads a password or passphrase from the console with echoing disabled.\n@@ -324,1 +324,1 @@\n-     * immediately .\n+     * immediately.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -835,1 +835,1 @@\n-            Integer.getChars(i, spaceNeeded, value);\n+            StringLatin1.getChars(i, spaceNeeded, value);\n@@ -860,1 +860,1 @@\n-            Long.getChars(l, spaceNeeded, value);\n+            StringLatin1.getChars(l, spaceNeeded, value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang;\n+\n+import jdk.internal.access.JavaLangInvokeAccess;\n+import jdk.internal.access.SharedSecrets;\n+import java.lang.StackWalker.StackFrame;\n+\n+\/**\n+ * ClassFrameInfo is an implementation of StackFrame that contains only\n+ * the class name and declaring class.\n+ *\n+ * Methods that access the method information such as method name,\n+ * will throw UnsupportedOperationException.\n+ *\n+ * @see StackWalker.Option#DROP_METHOD_INFO\n+ *\/\n+class ClassFrameInfo implements StackFrame {\n+    static final JavaLangInvokeAccess JLIA = SharedSecrets.getJavaLangInvokeAccess();\n+\n+    Object classOrMemberName;    \/\/ Class or ResolvedMemberName initialized by VM\n+    int flags;                   \/\/ updated by VM to set hidden and caller-sensitive bits\n+\n+    \/*\n+     * Construct an empty ClassFrameInfo object that will be filled by the VM\n+     * during stack walking.\n+     *\n+     * @see StackStreamFactory.AbstractStackWalker#callStackWalk\n+     * @see StackStreamFactory.AbstractStackWalker#fetchStackFrames\n+     *\/\n+    ClassFrameInfo(StackWalker walker) {\n+        this.flags = walker.retainClassRef ? RETAIN_CLASS_REF_BIT : 0;\n+    }\n+\n+    \/\/ package-private called by StackStreamFactory to skip\n+    \/\/ the capability check\n+    Class<?> declaringClass() {\n+        return (Class<?>) classOrMemberName;\n+    }\n+\n+    boolean isCallerSensitive() {\n+        return JLIA.isCallerSensitive(flags & MEMBER_INFO_FLAGS);\n+    }\n+\n+    boolean isHidden() {\n+        return JLIA.isHiddenMember(flags & MEMBER_INFO_FLAGS);\n+    }\n+\n+    \/\/ ----- implementation of StackFrame methods\n+\n+    @Override\n+    public String getClassName() {\n+        return declaringClass().getName();\n+    }\n+\n+    @Override\n+    public Class<?> getDeclaringClass() {\n+        ensureRetainClassRefEnabled();\n+        return declaringClass();\n+    }\n+\n+    @Override\n+    public String getMethodName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int getByteCodeIndex() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int getLineNumber() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isNativeMethod() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public StackTraceElement toStackTraceElement() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String tags = isHidden() ? \" hidden\" : \"\";\n+        if (isCallerSensitive()) {\n+            tags += \" caller sensitive\";\n+        }\n+        return declaringClass().getName() + \" \" + tags;\n+    }\n+\n+    private static final int MEMBER_INFO_FLAGS = 0x00FFFFFF;\n+    private static final int RETAIN_CLASS_REF_BIT = 0x08000000; \/\/ retainClassRef\n+\n+    boolean retainClassRef() {\n+        return (flags & RETAIN_CLASS_REF_BIT) == RETAIN_CLASS_REF_BIT;\n+    }\n+\n+    void ensureRetainClassRefEnabled() {\n+        if (!retainClassRef()) {\n+            throw new UnsupportedOperationException(\"No access to RETAIN_CLASS_REFERENCE\");\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassFrameInfo.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -417,27 +417,0 @@\n-    static final byte[] DigitTens = {\n-        '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n-        '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n-        '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n-        '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n-        '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n-        '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n-        '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n-        '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n-        '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n-        '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n-        } ;\n-\n-    static final byte[] DigitOnes = {\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        } ;\n-\n-\n@@ -459,1 +432,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -486,47 +459,0 @@\n-    \/**\n-     * Places characters representing the integer i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n-     * integer.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(int i, int index, byte[] buf) {\n-        int q, r;\n-        int charPos = index;\n-\n-        boolean negative = i < 0;\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Generate two digits per iteration\n-        while (i <= -100) {\n-            q = i \/ 100;\n-            r = (q * 100) - i;\n-            i = q;\n-            buf[--charPos] = DigitOnes[r];\n-            buf[--charPos] = DigitTens[r];\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        buf[--charPos] = DigitOnes[-i];\n-        if (i < -9) {\n-            buf[--charPos] = DigitTens[-i];\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":75,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -489,59 +489,0 @@\n-    \/**\n-     * Places characters representing the long i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n-     * long.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(long i, int index, byte[] buf) {\n-        long q;\n-        int r;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-        while (i <= Integer.MIN_VALUE) {\n-            q = i \/ 100;\n-            r = (int)((q * 100) - i);\n-            i = q;\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        int q2;\n-        int i2 = (int)i;\n-        while (i2 <= -100) {\n-            q2 = i2 \/ 100;\n-            r  = (q2 * 100) - i2;\n-            i2 = q2;\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        buf[--charPos] = Integer.DigitOnes[-i2];\n-        if (i2 < -9) {\n-            buf[--charPos] = Integer.DigitTens[-i2];\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":60,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import jdk.internal.access.JavaLangInvokeAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -31,1 +29,0 @@\n-import java.lang.StackWalker.StackFrame;\n@@ -33,0 +30,1 @@\n+import java.lang.reflect.Modifier;\n@@ -34,7 +32,9 @@\n-class StackFrameInfo implements StackFrame {\n-    private static final JavaLangInvokeAccess JLIA =\n-        SharedSecrets.getJavaLangInvokeAccess();\n-\n-    private final boolean retainClassRef;\n-    private Object memberName;    \/\/ MemberName initialized by VM\n-    private int bci;              \/\/ initialized by VM to >= 0\n+\/**\n+ * StackFrameInfo is an implementation of StackFrame that contains the\n+ * class and method information.  This is used by stack walker configured\n+ * without StackWalker.Option#DROP_METHOD_INFO.\n+ *\/\n+class StackFrameInfo extends ClassFrameInfo {\n+    private String name;\n+    private Object type;          \/\/ String or MethodType\n+    private int bci;              \/\/ set by VM to >= 0\n@@ -52,2 +52,1 @@\n-        this.retainClassRef = walker.retainClassRef;\n-        this.memberName = JLIA.newMemberName();\n+        super(walker);\n@@ -59,1 +58,1 @@\n-        return JLIA.getDeclaringClass(memberName);\n+        return JLIA.getDeclaringClass(classOrMemberName);\n@@ -69,6 +68,0 @@\n-    @Override\n-    public Class<?> getDeclaringClass() {\n-        ensureRetainClassRefEnabled();\n-        return declaringClass();\n-    }\n-\n@@ -77,1 +70,5 @@\n-        return JLIA.getName(memberName);\n+        if (name == null) {\n+            expandStackFrameInfo();\n+            assert name != null;\n+        }\n+        return name;\n@@ -83,1 +80,17 @@\n-        return JLIA.getMethodType(memberName);\n+\n+        if (type == null) {\n+            expandStackFrameInfo();\n+            assert type != null;\n+        }\n+\n+        if (type instanceof MethodType mt) {\n+            return mt;\n+        }\n+\n+        \/\/ type is not a MethodType yet.  Convert it thread-safely.\n+        synchronized (this) {\n+            if (type instanceof String sig) {\n+                type = JLIA.getMethodType(sig, declaringClass().getClassLoader());\n+            }\n+        }\n+        return (MethodType)type;\n@@ -86,0 +99,3 @@\n+    \/\/ expand the name and type field of StackFrameInfo\n+    private native void expandStackFrameInfo();\n+\n@@ -88,1 +104,1 @@\n-        return JLIA.getMethodDescriptor(memberName);\n+        return getMethodType().descriptorString();\n@@ -117,1 +133,1 @@\n-        return JLIA.isNative(memberName);\n+        return Modifier.isNative(flags);\n@@ -142,6 +158,0 @@\n-\n-    private void ensureRetainClassRefEnabled() {\n-        if (!retainClassRef) {\n-            throw new UnsupportedOperationException(\"No access to RETAIN_CLASS_REFERENCE\");\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackFrameInfo.java","additions":40,"deletions":30,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.reflect.Array;\n@@ -35,0 +36,1 @@\n+import java.util.Arrays;\n@@ -70,0 +72,3 @@\n+    \/\/ Number of elements in the buffer reserved for VM to use\n+    private static final int RESERVED_ELEMENTS = 1;\n+    private static final int MIN_BATCH_SIZE    = RESERVED_ELEMENTS + 2;\n@@ -73,1 +78,0 @@\n-    private static final int MIN_BATCH_SIZE    = SMALL_BATCH;\n@@ -77,2 +81,1 @@\n-    @Native private static final int FILL_CLASS_REFS_ONLY      = 0x2;\n-    @Native private static final int GET_CALLER_CLASS          = 0x4;\n+    @Native private static final int CLASS_INFO_ONLY           = 0x2;\n@@ -81,0 +84,1 @@\n+\n@@ -92,1 +96,1 @@\n-        if (walker.hasLocalsOperandsOption())\n+        if (walker.hasLocalsOperandsOption()) {\n@@ -94,1 +98,1 @@\n-        else\n+        } else {\n@@ -96,0 +100,1 @@\n+        }\n@@ -111,0 +116,11 @@\n+    private static int toStackWalkMode(StackWalker walker, int mode) {\n+        int newMode = mode;\n+        if (walker.hasOption(Option.DROP_METHOD_INFO))\n+            newMode |= CLASS_INFO_ONLY;\n+        if (walker.hasOption(Option.SHOW_HIDDEN_FRAMES))\n+            newMode |= SHOW_HIDDEN_FRAMES;\n+        if (walker.hasLocalsOperandsOption())\n+            newMode |= FILL_LIVE_STACK_FRAMES;\n+        return newMode;\n+    }\n+\n@@ -127,1 +143,1 @@\n-        protected final long mode;\n+        protected final int mode;\n@@ -140,1 +156,1 @@\n-            this.mode = toStackWalkMode(walker, mode);\n+            this.mode = mode;\n@@ -154,10 +170,0 @@\n-        private int toStackWalkMode(StackWalker walker, int mode) {\n-            int newMode = mode;\n-            if (walker.hasOption(Option.SHOW_HIDDEN_FRAMES) &&\n-                    (mode & FILL_CLASS_REFS_ONLY) != FILL_CLASS_REFS_ONLY)\n-                newMode |= SHOW_HIDDEN_FRAMES;\n-            if (walker.hasLocalsOperandsOption())\n-                newMode |= FILL_LIVE_STACK_FRAMES;\n-            return newMode;\n-        }\n-\n@@ -195,1 +201,1 @@\n-         * Returns the next batch size, always >= minimum batch size (32)\n+         * Returns the next batch size, always >= minimum batch size\n@@ -453,1 +459,1 @@\n-         * @param frames      Either a Class<?> array, if mode is {@link #FILL_CLASS_REFS_ONLY}\n+         * @param frames      Either a {@link ClassFrameInfo} array, if mode is {@link #CLASS_INFO_ONLY}\n@@ -457,1 +463,1 @@\n-        private native R callStackWalk(long mode, int skipframes,\n+        private native R callStackWalk(int mode, int skipframes,\n@@ -469,1 +475,1 @@\n-         * @param frames      Either a Class<?> array, if mode is {@link #FILL_CLASS_REFS_ONLY}\n+         * @param frames      Either a {@link ClassFrameInfo} array, if mode is {@link #CLASS_INFO_ONLY}\n@@ -474,1 +480,1 @@\n-        private native int fetchStackFrames(long mode, long anchor,\n+        private native int fetchStackFrames(int mode, long anchor,\n@@ -486,1 +492,1 @@\n-    static class StackFrameTraverser<T> extends AbstractStackWalker<T, StackFrameInfo>\n+    static class StackFrameTraverser<T> extends AbstractStackWalker<T, StackFrame>\n@@ -494,54 +500,0 @@\n-        final class StackFrameBuffer extends FrameBuffer<StackFrameInfo> {\n-            private StackFrameInfo[] stackFrames;\n-            StackFrameBuffer(int initialBatchSize) {\n-                super(initialBatchSize);\n-\n-                this.stackFrames = new StackFrameInfo[initialBatchSize];\n-                for (int i = START_POS; i < initialBatchSize; i++) {\n-                    stackFrames[i] = new StackFrameInfo(walker);\n-                }\n-            }\n-\n-            @Override\n-            StackFrameInfo[] frames() {\n-                return stackFrames;\n-            }\n-\n-            @Override\n-            void resize(int startIndex, int elements) {\n-                if (!isActive())\n-                    throw new IllegalStateException(\"inactive frame buffer can't be resized\");\n-\n-                assert startIndex == START_POS :\n-                       \"bad start index \" + startIndex + \" expected \" + START_POS;\n-\n-                int size = startIndex+elements;\n-                if (stackFrames.length < size) {\n-                    StackFrameInfo[] newFrames = new StackFrameInfo[size];\n-                    \/\/ copy initial magic...\n-                    System.arraycopy(stackFrames, 0, newFrames, 0, startIndex);\n-                    stackFrames = newFrames;\n-                }\n-                for (int i = startIndex; i < size; i++) {\n-                    stackFrames[i] = new StackFrameInfo(walker);\n-                }\n-                currentBatchSize = size;\n-            }\n-\n-            @Override\n-            StackFrameInfo nextStackFrame() {\n-                if (isEmpty()) {\n-                    throw new NoSuchElementException(\"origin=\" + origin + \" fence=\" + fence);\n-                }\n-\n-                StackFrameInfo frame = stackFrames[origin];\n-                origin++;\n-                return frame;\n-            }\n-\n-            @Override\n-            final Class<?> at(int index) {\n-                return stackFrames[index].declaringClass();\n-            }\n-        }\n-\n@@ -552,6 +504,1 @@\n-            this(walker, function, DEFAULT_MODE);\n-        }\n-        StackFrameTraverser(StackWalker walker,\n-                            Function<? super Stream<StackFrame>, ? extends T> function,\n-                            int mode) {\n-            super(walker, mode);\n+            super(walker, toStackWalkMode(walker, DEFAULT_MODE));\n@@ -570,1 +517,1 @@\n-            StackFrameInfo frame = frameBuffer.nextStackFrame();\n+            StackFrame frame = frameBuffer.nextStackFrame();\n@@ -587,1 +534,3 @@\n-            this.frameBuffer = new StackFrameBuffer(getNextBatchSize());\n+            this.frameBuffer = walker.hasOption(Option.DROP_METHOD_INFO)\n+                                    ? new ClassFrameBuffer(walker, getNextBatchSize())\n+                                    : new StackFrameBuffer<>(StackFrameInfo.class, walker, getNextBatchSize());\n@@ -594,2 +543,1 @@\n-                \/\/ and not too small\n-                int initialBatchSize = Math.max(walker.estimateDepth(), SMALL_BATCH);\n+                int initialBatchSize = Math.max(walker.estimateDepth()+RESERVED_ELEMENTS, MIN_BATCH_SIZE);\n@@ -654,0 +602,97 @@\n+    static class StackFrameBuffer<T extends ClassFrameInfo> extends FrameBuffer<T> {\n+        final StackWalker walker;\n+        private final Class<T> type;\n+        private final Constructor<T> ctor;\n+        private T[] stackFrames;\n+        StackFrameBuffer(Class<T> type, StackWalker walker, int initialBatchSize) {\n+            super(initialBatchSize);\n+            this.walker = walker;\n+            this.type = type;\n+            try {\n+                this.ctor = type.getDeclaredConstructor(StackWalker.class);\n+            } catch (NoSuchMethodException e) {\n+                throw new InternalError(e);\n+            }\n+            this.stackFrames = fill(allocateArray(initialBatchSize), START_POS, initialBatchSize);\n+        }\n+\n+        @Override\n+        T[] frames() {\n+            return stackFrames;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        T[] allocateArray(int size) {\n+            return (T[])Array.newInstance(type, size);\n+        }\n+\n+        T[] fill(T[] array, int startIndex, int size) {\n+            try {\n+                for (int i = startIndex; i < size; i++) {\n+                    array[i] = ctor.newInstance(walker);\n+                }\n+            } catch (ReflectiveOperationException e) {\n+                throw new InternalError(e);\n+            }\n+            return array;\n+        }\n+\n+        @Override\n+        void resize(int startIndex, int elements) {\n+            if (!isActive())\n+                throw new IllegalStateException(\"inactive frame buffer can't be resized\");\n+\n+            assert startIndex == START_POS :\n+                    \"bad start index \" + startIndex + \" expected \" + START_POS;\n+\n+            int size = startIndex+elements;\n+            if (stackFrames.length < size) {\n+                T[] newFrames = allocateArray(size);\n+                \/\/ copy initial magic...\n+                System.arraycopy(stackFrames, 0, newFrames, 0, startIndex);\n+                stackFrames = newFrames;\n+            }\n+            fill(stackFrames, startIndex, size);\n+            currentBatchSize = size;\n+        }\n+\n+        @Override\n+        T nextStackFrame() {\n+            if (isEmpty()) {\n+                throw new NoSuchElementException(\"origin=\" + origin + \" fence=\" + fence);\n+            }\n+\n+            T frame = stackFrames[origin];\n+            origin++;\n+            return frame;\n+        }\n+\n+        @Override\n+        final Class<?> at(int index) {\n+            return stackFrames[index].declaringClass();\n+        }\n+    }\n+\n+    \/*\n+     * Buffer for ClassFrameInfo.  It allocates ClassFrameInfo via bytecode\n+     * invocation instead of via core reflection to minimize the overhead.\n+     *\/\n+    static class ClassFrameBuffer extends StackFrameBuffer<ClassFrameInfo> {\n+        ClassFrameBuffer(StackWalker walker, int initialBatchSize) {\n+            super(ClassFrameInfo.class, walker, initialBatchSize);\n+        }\n+\n+        @Override\n+        ClassFrameInfo[] allocateArray(int size) {\n+            return new ClassFrameInfo[size];\n+        }\n+\n+        @Override\n+        ClassFrameInfo[] fill(ClassFrameInfo[] array, int startIndex, int size) {\n+            for (int i = startIndex; i < size; i++) {\n+                array[i] = new ClassFrameInfo(walker);\n+            }\n+            return array;\n+        }\n+    }\n+\n@@ -658,1 +703,1 @@\n-    static final class CallerClassFinder extends AbstractStackWalker<Integer, Class<?>> {\n+    static final class CallerClassFinder extends AbstractStackWalker<Integer, ClassFrameInfo> {\n@@ -666,46 +711,1 @@\n-            super(walker, FILL_CLASS_REFS_ONLY|GET_CALLER_CLASS);\n-        }\n-\n-        static final class ClassBuffer extends FrameBuffer<Class<?>> {\n-            Class<?>[] classes;      \/\/ caller class for fast path\n-            ClassBuffer(int batchSize) {\n-                super(batchSize);\n-                classes = new Class<?>[batchSize];\n-            }\n-\n-            @Override\n-            Class<?>[] frames() { return classes;}\n-\n-            @Override\n-            final Class<?> at(int index) { return classes[index];}\n-\n-            \/\/ ------ subclass may override the following methods -------\n-            \/**\n-             * Resizes the buffers for VM to fill in the next batch of stack frames.\n-             * The next batch will start at the given startIndex with the maximum number\n-             * of elements.\n-             *\n-             * <p> Subclass may override this method to manage the allocated buffers.\n-             *\n-             * @param startIndex the start index for the first frame of the next batch to fill in.\n-             * @param elements the number of elements for the next batch to fill in.\n-             *\n-             *\/\n-            @Override\n-            void resize(int startIndex, int elements) {\n-                if (!isActive())\n-                    throw new IllegalStateException(\"inactive frame buffer can't be resized\");\n-\n-                assert startIndex == START_POS :\n-                       \"bad start index \" + startIndex + \" expected \" + START_POS;\n-\n-                int size = startIndex+elements;\n-                if (classes.length < size) {\n-                    \/\/ copy the elements in classes array to the newly allocated one.\n-                    \/\/ classes[0] is a Thread object\n-                    Class<?>[] prev = classes;\n-                    classes = new Class<?>[size];\n-                    System.arraycopy(prev, 0, classes, 0, startIndex);\n-                }\n-                currentBatchSize = size;\n-            }\n+            super(walker, toStackWalkMode(walker, CLASS_INFO_ONLY));\n@@ -723,9 +723,17 @@\n-            Class<?>[] frames = new Class<?>[2];\n-            \/\/ skip the API calling this getCallerClass method\n-            \/\/ 0: StackWalker::getCallerClass\n-            \/\/ 1: caller-sensitive method\n-            \/\/ 2: caller class\n-            while (n < 2 && (caller = nextFrame()) != null) {\n-                if (isMethodHandleFrame(caller)) { continue; }\n-                if (isReflectionFrame(caller)) { continue; }\n-                frames[n++] = caller;\n+            ClassFrameInfo curFrame = null;\n+            \/\/ StackWalker::getCallerClass method\n+            \/\/ 0: caller-sensitive method\n+            \/\/ 1: caller class\n+            ClassFrameInfo[] frames = new ClassFrameInfo[2];\n+            while (n < 2 && hasNext() && (curFrame = frameBuffer.nextStackFrame()) != null) {\n+                caller = curFrame.declaringClass();\n+                if (curFrame.isHidden() || isReflectionFrame(caller) || isMethodHandleFrame(caller)) {\n+                    if (isDebug)\n+                        System.err.println(\"  skip: frame \" + frameBuffer.getIndex() + \" \" + curFrame);\n+                    continue;\n+                }\n+                frames[n++] = curFrame;\n+            }\n+            if (isDebug) {\n+                System.err.println(\"0: \" + frames[0]);\n+                System.err.println(\"1: \" + frames[1]);\n@@ -734,1 +742,5 @@\n-                throw new IllegalCallerException(\"no caller frame\");\n+                throw new IllegalCallerException(\"no caller frame: \" + Arrays.toString(frames));\n+            }\n+            if (frames[0].isCallerSensitive()) {\n+                throw new UnsupportedOperationException(\"StackWalker::getCallerClass called from @CallerSensitive \"\n+                        + Arrays.toString(frames));\n@@ -739,0 +751,8 @@\n+        \/*\n+         * Typically finding the caller class only needs to walk two stack frames\n+         * 0: StackWalker::getCallerClass\n+         * 1: API\n+         * 2: caller class\n+         *\n+         * So start the initial batch size with the minimum size.\n+         *\/\n@@ -741,1 +761,1 @@\n-            this.frameBuffer = new ClassBuffer(getNextBatchSize());\n+            this.frameBuffer = new ClassFrameBuffer(walker, MIN_BATCH_SIZE);\n@@ -746,1 +766,5 @@\n-            return MIN_BATCH_SIZE;\n+            \/\/ this method is only called when the caller class is not found in\n+            \/\/ the first batch. getCallerClass may be invoked via core reflection.\n+            \/\/ So increase the next batch size as there may be implementation-specific\n+            \/\/ frames before reaching the caller class's frame.\n+            return SMALL_BATCH;\n@@ -751,1 +775,1 @@\n-            return MIN_BATCH_SIZE;\n+            return SMALL_BATCH;\n@@ -759,55 +783,0 @@\n-        \/\/ VM will fill in all method info and live stack info directly in StackFrameInfo\n-        final class LiveStackFrameBuffer extends FrameBuffer<LiveStackFrameInfo> {\n-            private LiveStackFrameInfo[] stackFrames;\n-            LiveStackFrameBuffer(int initialBatchSize) {\n-                super(initialBatchSize);\n-                this.stackFrames = new LiveStackFrameInfo[initialBatchSize];\n-                for (int i = START_POS; i < initialBatchSize; i++) {\n-                    stackFrames[i] = new LiveStackFrameInfo(walker);\n-                }\n-            }\n-\n-            @Override\n-            LiveStackFrameInfo[] frames() {\n-                return stackFrames;\n-            }\n-\n-            @Override\n-            void resize(int startIndex, int elements) {\n-                if (!isActive()) {\n-                    throw new IllegalStateException(\"inactive frame buffer can't be resized\");\n-                }\n-                assert startIndex == START_POS :\n-                       \"bad start index \" + startIndex + \" expected \" + START_POS;\n-\n-                int size = startIndex + elements;\n-                if (stackFrames.length < size) {\n-                    LiveStackFrameInfo[] newFrames = new LiveStackFrameInfo[size];\n-                    \/\/ copy initial magic...\n-                    System.arraycopy(stackFrames, 0, newFrames, 0, startIndex);\n-                    stackFrames = newFrames;\n-                }\n-\n-                for (int i = startIndex(); i < size; i++) {\n-                    stackFrames[i] = new LiveStackFrameInfo(walker);\n-                }\n-\n-                currentBatchSize = size;\n-            }\n-\n-            @Override\n-            LiveStackFrameInfo nextStackFrame() {\n-                if (isEmpty()) {\n-                    throw new NoSuchElementException(\"origin=\" + origin + \" fence=\" + fence);\n-                }\n-\n-                LiveStackFrameInfo frame = stackFrames[origin];\n-                origin++;\n-                return frame;\n-            }\n-\n-            @Override\n-            final Class<?> at(int index) {\n-                return stackFrames[index].declaringClass();\n-            }\n-        }\n@@ -817,1 +786,1 @@\n-            super(walker, function, DEFAULT_MODE);\n+            super(walker, function);\n@@ -822,1 +791,1 @@\n-            this.frameBuffer = new LiveStackFrameBuffer(getNextBatchSize());\n+            this.frameBuffer = new StackFrameBuffer<>(LiveStackFrameInfo.class, walker, getNextBatchSize());\n@@ -832,1 +801,1 @@\n-        static final int START_POS = 2;     \/\/ 0th and 1st elements are reserved\n+        static final int START_POS = RESERVED_ELEMENTS;\n@@ -854,1 +823,1 @@\n-         * mode is {@link #FILL_CLASS_REFS_ONLY}, or an array of\n+         * mode is {@link #CLASS_INFO_ONLY}, or an array of\n@@ -1024,1 +993,1 @@\n-                c.getName().startsWith(\"java.util.stream.\");\n+                c.getPackageName().equals(\"java.util.stream\");\n@@ -1030,1 +999,1 @@\n-        return c.getName().startsWith(\"java.lang.invoke.\");\n+        return c.getPackageName().equals(\"java.lang.invoke\");\n@@ -1034,1 +1003,0 @@\n-        \/\/ ## should filter all @Hidden frames?\n@@ -1038,2 +1006,1 @@\n-               ConstructorAccessor.class.isAssignableFrom(c) ||\n-               c.getName().startsWith(\"java.lang.invoke.LambdaForm\");\n+               ConstructorAccessor.class.isAssignableFrom(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":179,"deletions":212,"binary":false,"changes":391,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,7 +52,9 @@\n- * <p> The {@linkplain Option <em>stack walking options<\/em>} of a\n- * {@code StackWalker} determines the information of\n- * {@link StackFrame StackFrame} objects to be returned.\n- * By default, stack frames of the reflection API and implementation\n- * classes are {@linkplain Option#SHOW_HIDDEN_FRAMES hidden}\n- * and {@code StackFrame}s have the class name and method name\n- * available but not the {@link StackFrame#getDeclaringClass() Class reference}.\n+ * <p> {@linkplain Option <em>Stack walker options<\/em>} configure the stack frame\n+ * information obtained by a {@code StackWalker}.\n+ * By default, the class name and method information are collected but\n+ * not the {@link StackFrame#getDeclaringClass() Class reference}.\n+ * The method information can be dropped via the {@link Option#DROP_METHOD_INFO\n+ * DROP_METHOD_INFO} option. The {@code Class} object can be retained for\n+ * access via the {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option.\n+ * Stack frames of the reflection API and implementation classes are\n+ * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden} by default.\n@@ -69,3 +71,3 @@\n- * <p>1. To find the first caller filtering a known list of implementation class:\n- * <pre>{@code\n- *     StackWalker walker = StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n+ * <p>1. To find the first caller filtering out a known list of implementation class:\n+ * {@snippet lang=\"java\" :\n+ *     StackWalker walker = StackWalker.getInstance(Set.of(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE));\n@@ -73,4 +75,4 @@\n- *         s.map(StackFrame::getDeclaringClass)\n- *          .filter(interestingClasses::contains)\n- *          .findFirst());\n- * }<\/pre>\n+ *             s.map(StackFrame::getDeclaringClass)\n+ *              .filter(Predicate.not(implClasses::contains))\n+ *              .findFirst());\n+ * }\n@@ -79,4 +81,3 @@\n- * <pre>{@code\n- *     List<StackFrame> stack = StackWalker.getInstance().walk(s ->\n- *         s.limit(10).collect(Collectors.toList()));\n- * }<\/pre>\n+ * {@snippet lang=\"java\" :\n+ *     List<StackFrame> stack = StackWalker.getInstance().walk(s -> s.limit(10).toList());\n+ * }\n@@ -96,3 +97,11 @@\n-     * <p> The {@link #getDeclaringClass()} method may be unsupported as determined\n-     * by the {@linkplain Option stack walking options} of a {@linkplain\n-     * StackWalker stack walker}.\n+     * <p> {@linkplain Option <em>Stack walker options<\/em>} configure the stack\n+     * frame information obtained by a {@code StackWalker}.\n+     * If the stack walker is configured with {@link Option#DROP_METHOD_INFO\n+     * DROP_METHOD_INFO} option, method information such as\n+     * the {@linkplain StackFrame#getMethodName() method name},\n+     * the {@linkplain StackFrame#getLineNumber() line number},\n+     * the {@linkplain StackFrame#getByteCodeIndex() bytecode index}, etc\n+     * will be dropped.\n+     * If the stack walker is configured with {@link Option#RETAIN_CLASS_REFERENCE\n+     * RETAIN_CLASS_REFERENCE} option, the {@link #getDeclaringClass() Class} object\n+     * will be retained for access.\n@@ -101,1 +110,1 @@\n-     * @jvms 2.6\n+     * @jvms 2.6 Frames\n@@ -105,5 +114,2 @@\n-         * Gets the <a href=\"ClassLoader.html#binary-name\">binary name<\/a>\n-         * of the declaring class of the method represented by this stack frame.\n-         *\n-         * @return the binary name of the declaring class of the method\n-         *         represented by this stack frame\n+         * {@return the {@linkplain ClassLoader##binary-name binary name}\n+         * of the declaring class of the method represented by this stack frame}\n@@ -116,2 +122,4 @@\n-         * Gets the name of the method represented by this stack frame.\n-         * @return the name of the method represented by this stack frame\n+         * {@return the name of the method represented by this stack frame}\n+         *\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -122,5 +130,2 @@\n-         * Gets the declaring {@code Class} for the method represented by\n-         * this stack frame.\n-         *\n-         * @return the declaring {@code Class} of the method represented by\n-         * this stack frame\n+         * {@return the declaring {@code Class} for the method represented by\n+         * this stack frame}\n@@ -128,3 +133,2 @@\n-         * @throws UnsupportedOperationException if this {@code StackWalker}\n-         *         is not configured with {@link Option#RETAIN_CLASS_REFERENCE\n-         *         Option.RETAIN_CLASS_REFERENCE}.\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         without {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option\n@@ -141,1 +145,1 @@\n-         * @return the {@code MethodType} for this stack frame\n+         * @return the {@code MethodType} of the method represented by this stack frame\n@@ -143,3 +147,3 @@\n-         * @throws UnsupportedOperationException if this {@code StackWalker}\n-         *         is not configured with {@link Option#RETAIN_CLASS_REFERENCE\n-         *         Option.RETAIN_CLASS_REFERENCE}.\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option or\n+         *         without {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option\n@@ -164,0 +168,3 @@\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n+         *\n@@ -185,0 +192,3 @@\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n+         *\n@@ -201,0 +211,3 @@\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n+         *\n@@ -216,0 +229,3 @@\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n+         *\n@@ -221,2 +237,2 @@\n-         * Returns {@code true} if the method containing the execution point\n-         * represented by this stack frame is a native method.\n+         * {@return {@code true} if the method containing the execution point\n+         * represented by this stack frame is a native method}\n@@ -224,2 +240,2 @@\n-         * @return {@code true} if the method containing the execution point\n-         *         represented by this stack frame is a native method.\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -230,1 +246,1 @@\n-         * Gets a {@code StackTraceElement} for this stack frame.\n+         * {@return {@code StackTraceElement} for this stack frame}\n@@ -232,1 +248,2 @@\n-         * @return {@code StackTraceElement} for this stack frame.\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -253,0 +270,15 @@\n+        \/**\n+         * Drops the method information from {@code StackFrame}s\n+         * walked by this {@code StackWalker}.\n+         *\n+         * <p> A {@code StackWalker} configured with this option will drop\n+         * the {@linkplain StackFrame#getMethodName() method name},\n+         * the {@linkplain StackFrame#getMethodType() method type},\n+         * the {@linkplain StackFrame#getLineNumber() line number},\n+         * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n+         * the {@linkplain StackFrame#getFileName() source file name} and\n+         * {@linkplain StackFrame#isNativeMethod() native method or not}.\n+         *\n+         * @since 22\n+         *\/\n+        DROP_METHOD_INFO,\n@@ -322,18 +354,0 @@\n-    \/**\n-     * Returns a {@code StackWalker} instance.\n-     *\n-     * <p> This {@code StackWalker} is configured to skip all\n-     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and\n-     * no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n-     *\n-     * @param contScope the continuation scope up to which (inclusive) to walk the stack\n-     *\n-     * @return a {@code StackWalker} configured to skip all\n-     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and\n-     * no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n-     *\n-     *\/\n-    static StackWalker getInstance(ContinuationScope contScope) {\n-        return getInstance(EnumSet.noneOf(Option.class), contScope);\n-    }\n-\n@@ -343,1 +357,0 @@\n-     *\n@@ -362,1 +375,1 @@\n-     * Returns a {@code StackWalker} instance with the given option specifying\n+     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n@@ -366,23 +379,3 @@\n-     * If a security manager is present and the given {@code option} is\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n-     * @param option {@link Option stack walking option}\n-     * @param contScope the continuation scope up to which (inclusive) to walk the stack\n-     *\n-     * @return a {@code StackWalker} configured with the given option\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n-     *\/\n-    static StackWalker getInstance(Option option, ContinuationScope contScope) {\n-        return getInstance(EnumSet.of(Objects.requireNonNull(option)), contScope);\n-    }\n-\n-    \/**\n-     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n-     * the stack frame information it can access.  If the given {@code options}\n-     * is empty, this {@code StackWalker} is configured to skip all\n-     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and no\n-     * {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n+     * If the given {@code options} is empty, this {@code StackWalker} is\n+     * configured to skip all {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames}\n+     * and no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n@@ -396,1 +389,1 @@\n-     * @param options {@link Option stack walking option}\n+     * @param options {@link Option stack walking options}\n@@ -404,26 +397,1 @@\n-        return getInstance(options, null);\n-    }\n-\n-    \/**\n-     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n-     * the stack frame information it can access.  If the given {@code options}\n-     * is empty, this {@code StackWalker} is configured to skip all\n-     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and no\n-     * {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n-     *\n-     * <p>\n-     * If a security manager is present and the given {@code options} contains\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n-     * @param options {@link Option stack walking option}\n-     * @param contScope the continuation scope up to which (inclusive) to walk the stack\n-     *\n-     * @return a {@code StackWalker} configured with the given options\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n-     *\/\n-    static StackWalker getInstance(Set<Option> options, ContinuationScope contScope) {\n-        if (options.isEmpty() && contScope == null) {\n+        if (options.isEmpty()) {\n@@ -435,1 +403,1 @@\n-        return new StackWalker(optionSet, contScope);\n+        return new StackWalker(optionSet);\n@@ -440,4 +408,6 @@\n-     * the stack frame information it can access. If the given {@code options}\n-     * is empty, this {@code StackWalker} is configured to skip all\n-     * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames} and no\n-     * {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n+     * the stack frame information it can access.\n+     *\n+     * <p>\n+     * If the given {@code options} is empty, this {@code StackWalker} is\n+     * configured to skip all {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames}\n+     * and no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n@@ -478,6 +448,0 @@\n-    private StackWalker(EnumSet<Option> options, ContinuationScope contScope) {\n-        this(options, 0, null, contScope, null);\n-    }\n-    private StackWalker(EnumSet<Option> options, ContinuationScope contScope, Continuation continuation) {\n-        this(options, 0, null, contScope, continuation);\n-    }\n@@ -487,9 +451,0 @@\n-    private StackWalker(EnumSet<Option> options, int estimateDepth, ContinuationScope contScope) {\n-        this(options, estimateDepth, null, contScope, null);\n-    }\n-    private StackWalker(EnumSet<Option> options,\n-                        int estimateDepth,\n-                        ContinuationScope contScope,\n-                        Continuation continuation) {\n-        this(options, estimateDepth, null, contScope, continuation);\n-    }\n@@ -544,2 +499,1 @@\n-     * <blockquote>\n-     * <pre>{@code\n+     * {@snippet lang=\"java\" :\n@@ -547,4 +501,4 @@\n-     *     s.dropWhile(f -> f.getClassName().startsWith(\"com.foo.\"))\n-     *      .limit(10)\n-     *      .collect(Collectors.toList()));\n-     * }<\/pre><\/blockquote>\n+     *         s.dropWhile(f -> f.getClassName().startsWith(\"com.foo.\"))\n+     *          .limit(10)\n+     *          .toList());\n+     * }\n@@ -641,1 +595,1 @@\n-     * <pre>{@code\n+     * {@snippet lang=\"java\" :\n@@ -643,1 +597,2 @@\n-     *     private final StackWalker walker = StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n+     *     private final StackWalker walker =\n+     *         StackWalker.getInstance(Set.of(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE));\n@@ -656,1 +611,1 @@\n-     * }<\/pre>\n+     * }\n@@ -662,1 +617,1 @@\n-     * <pre>{@code\n+     * {@snippet lang=\"java\" :\n@@ -667,1 +622,1 @@\n-     * }<\/pre>\n+     * }\n@@ -703,0 +658,4 @@\n+    static StackWalker newInstance(Set<Option> options, ContinuationScope contScope) {\n+        return newInstance(options, null, contScope);\n+    }\n+\n@@ -704,3 +663,1 @@\n-        EnumSet<Option> optionSet = toEnumSet(options);\n-        checkPermission(optionSet);\n-        return new StackWalker(optionSet, 0, extendedOption, contScope, null);\n+        return newInstance(options, extendedOption, contScope, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":109,"deletions":152,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,1 +253,1 @@\n-            return Integer.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n@@ -288,1 +288,1 @@\n-            return Long.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import jdk.internal.util.DecimalDigits;\n+import jdk.internal.util.ByteArrayLittleEndian;\n@@ -37,0 +39,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -44,1 +47,0 @@\n-\n@@ -82,0 +84,109 @@\n+    \/**\n+     * Places characters representing the integer i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n+     * integer.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(int i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        int q, r;\n+        int charPos = index;\n+\n+        boolean negative = i < 0;\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Generate two digits per iteration\n+        while (i <= -100) {\n+            q = i \/ 100;\n+            r = (q * 100) - i;\n+            i = q;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DecimalDigits.digitPair(r));\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DecimalDigits.digitPair(-i));\n+        } else {\n+            buf[--charPos] = (byte)('0' - i);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n+    \/**\n+     * Places characters representing the long i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n+     * long.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(long i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DecimalDigits.digitPair((int)((q * 100) - i)));\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DecimalDigits.digitPair((q2 * 100) - i2));\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DecimalDigits.digitPair(-i2));\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":112,"deletions":1,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -1522,1 +1523,1 @@\n-     * This is a variant of {@link Integer#getChars(int, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(int, int, byte[])}, but for\n@@ -1531,0 +1532,1 @@\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n@@ -1544,2 +1546,2 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n+            charPos -= 2;\n+            putPair(buf, charPos, r);\n@@ -1549,1 +1551,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i]);\n@@ -1551,1 +1552,4 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i]);\n+            charPos -= 2;\n+            putPair(buf, charPos, -i);\n+        } else {\n+            putChar(buf, --charPos, '0' - i);\n@@ -1561,1 +1565,1 @@\n-     * This is a variant of {@link Long#getChars(long, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(long, int, byte[])}, but for\n@@ -1570,0 +1574,1 @@\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n@@ -1571,1 +1576,0 @@\n-        int r;\n@@ -1582,1 +1586,2 @@\n-            r = (int)((q * 100) - i);\n+            charPos -= 2;\n+            putPair(buf, charPos, (int)((q * 100) - i));\n@@ -1584,2 +1589,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1593,1 +1596,2 @@\n-            r  = (q2 * 100) - i2;\n+            charPos -= 2;\n+            putPair(buf, charPos, (q2 * 100) - i2);\n@@ -1595,2 +1599,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1600,1 +1602,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i2]);\n@@ -1602,1 +1603,4 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i2]);\n+            charPos -= 2;\n+            putPair(buf, charPos, -i2);\n+        } else {\n+            putChar(buf, --charPos, '0' - i2);\n@@ -1610,0 +1614,6 @@\n+\n+    private static void putPair(byte[] buf, int charPos, int v) {\n+        int packed = (int) DecimalDigits.digitPair(v);\n+        putChar(buf, charPos, packed & 0xFF);\n+        putChar(buf, charPos + 1, packed >> 8);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -197,1 +197,3 @@\n-     * Runs or continues execution of the continuation on the current thread.\n+     * Runs or continues execution on the current thread. The virtual thread is mounted\n+     * on the current thread before the task runs or continues. It unmounts when the\n+     * task completes or yields.\n@@ -199,0 +201,1 @@\n+    @ChangesCurrentThread\n@@ -220,0 +223,1 @@\n+        mount();\n@@ -223,0 +227,1 @@\n+            unmount();\n@@ -224,1 +229,1 @@\n-                afterTerminate();\n+                afterDone();\n@@ -288,3 +293,1 @@\n-     * Runs a task in the context of this virtual thread. The virtual thread is\n-     * mounted on the current (carrier) thread before the task runs. It unmounts\n-     * from its carrier thread when the task completes.\n+     * Runs a task in the context of this virtual thread.\n@@ -294,1 +297,1 @@\n-        assert state == RUNNING;\n+        assert Thread.currentThread() == this && state == RUNNING;\n@@ -296,2 +299,1 @@\n-        \/\/ first mount\n-        mount();\n+        \/\/ notify JVMTI, may post VirtualThreadStart event\n@@ -325,1 +327,1 @@\n-                \/\/ last unmount\n+                \/\/ notify JVMTI, may post VirtualThreadEnd event\n@@ -327,4 +329,0 @@\n-                unmount();\n-\n-                \/\/ final state\n-                setState(TERMINATED);\n@@ -420,3 +418,2 @@\n-     * Unmounts this virtual thread, invokes Continuation.yield, and re-mounts the\n-     * thread when continued. When enabled, JVMTI must be notified from this method.\n-     * @return true if the yield was successful\n+     * Invokes Continuation.yield, notifying JVMTI (if enabled) to hide frames until\n+     * the continuation continues.\n@@ -425,1 +422,0 @@\n-    @ChangesCurrentThread\n@@ -427,1 +423,0 @@\n-        \/\/ unmount\n@@ -429,1 +424,0 @@\n-        unmount();\n@@ -433,2 +427,0 @@\n-            \/\/ re-mount\n-            mount();\n@@ -480,2 +472,1 @@\n-     * Invoked after the thread terminates execution. It notifies anyone\n-     * waiting for the thread to terminate.\n+     * Invoked after the continuation completes.\n@@ -483,2 +474,2 @@\n-    private void afterTerminate() {\n-        afterTerminate(true, true);\n+    private void afterDone() {\n+        afterDone(true, true);\n@@ -488,2 +479,2 @@\n-     * Invoked after the thread terminates (or start failed). This method\n-     * notifies anyone waiting for the thread to terminate.\n+     * Invoked after the continuation completes (or start failed). Sets the thread\n+     * state to TERMINATED and notifies anyone waiting for the thread to terminate.\n@@ -494,2 +485,3 @@\n-    private void afterTerminate(boolean notifyContainer, boolean executed) {\n-        assert (state() == TERMINATED) && (carrierThread == null);\n+    private void afterDone(boolean notifyContainer, boolean executed) {\n+        assert carrierThread == null;\n+        setState(TERMINATED);\n@@ -549,2 +541,1 @@\n-                setState(TERMINATED);\n-                afterTerminate(addedToContainer, \/*executed*\/false);\n+                afterDone(addedToContainer, \/*executed*\/false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":22,"deletions":31,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -260,0 +260,14 @@\n+            if (CDS.isSharingEnabled()) {\n+                \/\/ load from CDS archive if present\n+                Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n+                                                                   interfaceMethodName,\n+                                                                   factoryType,\n+                                                                   interfaceMethodType,\n+                                                                   implementation,\n+                                                                   dynamicMethodType,\n+                                                                   isSerializable,\n+                                                                   altInterfaces,\n+                                                                   altMethods);\n+                if (innerClass != null) return innerClass;\n+            }\n+\n@@ -276,11 +290,0 @@\n-            \/\/ load from CDS archive if present\n-            Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n-                                                               interfaceMethodName,\n-                                                               factoryType,\n-                                                               interfaceMethodType,\n-                                                               implementation,\n-                                                               dynamicMethodType,\n-                                                               isSerializable,\n-                                                               altInterfaces,\n-                                                               altMethods);\n-            if (innerClass != null) return innerClass;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -104,3 +104,0 @@\n-        if (CDS.isDumpingArchive())\n-            throw new IllegalStateException(\"cannot load class from CDS archive at dump time\");\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,5 +69,0 @@\n-\/*non-public*\/\n-final class ResolvedMethodName {\n-    \/\/@Injected JVM_Method* vmtarget;\n-    \/\/@Injected Class<?>    vmholder;\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+import static java.lang.invoke.MethodHandleNatives.Constants.MN_CALLER_SENSITIVE;\n+import static java.lang.invoke.MethodHandleNatives.Constants.MN_HIDDEN_MEMBER;\n@@ -1546,2 +1548,3 @@\n-            public Object newMemberName() {\n-                return new MemberName();\n+            public Class<?> getDeclaringClass(Object rmname) {\n+                ResolvedMethodName method = (ResolvedMethodName)rmname;\n+                return method.declaringClass();\n@@ -1551,8 +1554,2 @@\n-            public String getName(Object mname) {\n-                MemberName memberName = (MemberName)mname;\n-                return memberName.getName();\n-            }\n-            @Override\n-            public Class<?> getDeclaringClass(Object mname) {\n-                MemberName memberName = (MemberName)mname;\n-                return memberName.getDeclaringClass();\n+            public MethodType getMethodType(String descriptor, ClassLoader loader) {\n+                return MethodType.fromDescriptor(descriptor, loader);\n@@ -1561,4 +1558,2 @@\n-            @Override\n-            public MethodType getMethodType(Object mname) {\n-                MemberName memberName = (MemberName)mname;\n-                return memberName.getMethodType();\n+            public boolean isCallerSensitive(int flags) {\n+                return (flags & MN_CALLER_SENSITIVE) == MN_CALLER_SENSITIVE;\n@@ -1567,10 +1562,2 @@\n-            @Override\n-            public String getMethodDescriptor(Object mname) {\n-                MemberName memberName = (MemberName)mname;\n-                return memberName.getMethodDescriptor();\n-            }\n-\n-            @Override\n-            public boolean isNative(Object mname) {\n-                MemberName memberName = (MemberName)mname;\n-                return memberName.isNative();\n+            public boolean isHiddenMember(int flags) {\n+                return (flags & MN_HIDDEN_MEMBER) == MN_HIDDEN_MEMBER;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -119,1 +119,2 @@\n-            MN_FLATTENED             = 0x00400000, \/\/ flattened field\n+            MN_HIDDEN_MEMBER         = 0x00400000, \/\/ members defined in a hidden class or with @Hidden\n+            MN_FLATTENED             = 0x00800000, \/\/ flattened field\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.invoke;\n+\n+final class ResolvedMethodName {\n+    \/\/@Injected JVM_Method* vmtarget;\n+    private Class<?> vmholder;\n+\n+    Class<?> declaringClass() {\n+        return vmholder;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ResolvedMethodName.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -47,2 +47,3 @@\n- * A {@code ChoiceFormat} allows you to attach a format to a range of numbers.\n- * It is generally used in a {@code MessageFormat} for handling plurals.\n+ * {@code ChoiceFormat} is a concrete subclass of {@code NumberFormat} that\n+ * allows you to attach a format to a range of numbers.\n+ * It is generally used in a {@link MessageFormat} for handling plurals.\n@@ -71,2 +72,4 @@\n- * When creating a {@code ChoiceFormat}, you must specify an array of formats\n- * and an array of limits. The length of these arrays must be the same.\n+ * A {@code ChoiceFormat} can be constructed using either an array of formats\n+ * and an array of limits or a string pattern. When constructing with\n+ * format and limit arrays, the length of these arrays must be the same.\n+ *\n@@ -86,1 +89,2 @@\n- * Here is a simple example that shows formatting and parsing:\n+ * Below is an example of constructing a ChoiceFormat with arrays to format\n+ * and parse values:\n@@ -100,1 +104,2 @@\n- * Here is a more complex example, with a pattern format:\n+ * For more sophisticated patterns, {@code ChoiceFormat} can be used with\n+ * {@link MessageFormat} to produce accurate forms for singular and plural:\n@@ -117,3 +122,69 @@\n- * <p>\n- * Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n- * For example:\n+ * Would output the following:\n+ * <blockquote>\n+ * <pre>{@code\n+ * There are no files on ADisk\n+ * There is one file on ADisk\n+ * There are 2 files on ADisk\n+ * There are 3 files on ADisk\n+ * }<\/pre>\n+ * <\/blockquote>\n+ *\n+ * <h2><a id=\"patterns\">Patterns<\/a><\/h2>\n+ * A {@code ChoiceFormat} pattern has the following syntax:\n+ * <blockquote>\n+ * <dl>\n+ * <dt><i>Pattern:<\/i>\n+ * <dd>SubPattern *(\"|\" SubPattern)\n+ * <dd><i>Note: Each additional SubPattern must have a Limit greater than the previous SubPattern's Limit<\/i>\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>SubPattern:<\/i>\n+ * <dd>Limit Relation Format\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Limit:<\/i>\n+ * <dd>Number \/ \"&infin;\" \/ \"-&infin;\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Number:<\/i>\n+ * <dd>[\"-\"] *(Digit) 1*(Decimal \/ Digit) *(Digit) [Exponent]\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Decimal:<\/i>\n+ * <dd>1*(Digit \".\") \/ 1*(\".\" Digit)\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Digit:<\/i>\n+ * <dd>0 - 9\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Exponent:<\/i>\n+ * <dd>*(Digit) Digit ExponentSymbol Digit *(Digit)\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>ExponentSymbol:<\/i>\n+ * <dd>\"e\" \/ \"E\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Relation:<\/i>\n+ * <dd>\"#\" \/ \"&lt;\" \/ \"&le;\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Format:<\/i>\n+ * <dd>Any characters except the <i>Relation<\/i> symbols\n+ * <\/dl>\n+ *\n+ * <\/blockquote>\n+ *\n+ * <i>Note:The relation &le; is not equivalent to &lt;&equals;<\/i>\n+ *\n+ * <p>Below is an example of constructing a ChoiceFormat with a pattern:\n@@ -124,1 +195,0 @@\n- * System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n@@ -126,10 +196,10 @@\n- * System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n- * System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n- * System.out.println(\"Format with 0 : \" + fmt.format(0));\n- * System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n- * System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n- * System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n- * System.out.println(\"Format with 2 : \" + fmt.format(2));\n- * System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n- * System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));\n- * System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n+ * System.out.println(fmt.format(Double.NEGATIVE_INFINITY)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(-1.0)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(0)); \/\/ outputs \"is zero or fraction\"\n+ * System.out.println(fmt.format(0.9)); \/\/ outputs \"is zero or fraction\"\n+ * System.out.println(fmt.format(1)); \/\/ outputs \"is one\"\n+ * System.out.println(fmt.format(1.5)); \/\/ outputs \"is 1+\"\n+ * System.out.println(fmt.format(2)); \/\/ outputs \"is two\"\n+ * System.out.println(fmt.format(2.1)); \/\/ outputs \"is more than 2.\"\n+ * System.out.println(fmt.format(Double.NaN)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(Double.POSITIVE_INFINITY)); \/\/ outputs \"is more than 2.\"\n@@ -138,15 +208,0 @@\n- * And the output result would be like the following:\n- * <blockquote>\n- * <pre>{@code\n- * Format with -INF : is negative\n- * Format with -1.0 : is negative\n- * Format with 0 : is zero or fraction\n- * Format with 0.9 : is zero or fraction\n- * Format with 1.0 : is one\n- * Format with 1.5 : is 1+\n- * Format with 2 : is two\n- * Format with 2.1 : is more than 2.\n- * Format with NaN : is negative\n- * Format with +INF : is more than 2.\n- * }<\/pre>\n- * <\/blockquote>\n@@ -175,2 +230,5 @@\n-     * Sets the pattern.\n-     * @param newPattern See the class description.\n+     * Apply the given pattern to this ChoiceFormat object. The syntax\n+     * for the ChoiceFormat pattern can be seen in the {@linkplain ##patterns\n+     * Patterns} section.\n+     *\n+     * @param newPattern a pattern string\n@@ -180,1 +238,2 @@\n-     *            is invalid\n+     *            violates the pattern syntax\n+     * @see #ChoiceFormat(String)\n@@ -263,1 +322,2 @@\n-     * Gets the pattern.\n+     * {@return a pattern {@code string} that represents the the limits and formats\n+     * of this ChoiceFormat object}\n@@ -265,1 +325,5 @@\n-     * @return the pattern string\n+     * The {@code string} returned is not guaranteed to be the same input\n+     * {@code string} passed to either {@link #applyPattern(String)} or\n+     * {@link #ChoiceFormat(String)}.\n+     *\n+     * @see #applyPattern(String)\n@@ -315,1 +379,4 @@\n-     * Constructs with limits and corresponding formats based on the pattern.\n+     * Constructs a ChoiceFormat with limits and corresponding formats\n+     * based on the pattern.\n+     * The syntax for the ChoiceFormat pattern can be seen in the {@linkplain\n+     * ##patterns Patterns} section.\n@@ -321,1 +388,1 @@\n-     *            is invalid\n+     *            violates the pattern syntax\n@@ -367,2 +434,1 @@\n-     * Get the limits passed in the constructor.\n-     * @return the limits.\n+     * {@return the limits of this ChoiceFormat}\n@@ -376,2 +442,1 @@\n-     * Get the formats passed in the constructor.\n-     * @return the formats.\n+     * {@return the formats of this ChoiceFormat}\n@@ -393,0 +458,1 @@\n+    @Override\n@@ -406,1 +472,2 @@\n-   public StringBuffer format(double number, StringBuffer toAppendTo,\n+    @Override\n+    public StringBuffer format(double number, StringBuffer toAppendTo,\n@@ -437,0 +504,1 @@\n+    @Override\n@@ -496,0 +564,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":116,"deletions":47,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -172,2 +172,2 @@\n- *      Any Unicode characters except {@code U+FFFE}, {@code U+FFFF}, and\n- *      {@linkplain DecimalFormat##special_pattern_character special characters}.\n+ *      Any characters except the {@linkplain\n+ *      DecimalFormat##special_pattern_character special pattern characters}\n@@ -175,2 +175,2 @@\n- *      Any Unicode characters except {@code U+FFFE}, {@code U+FFFF}, and\n- *      {@linkplain DecimalFormat##special_pattern_character special characters}.\n+ *      Any characters except the {@linkplain\n+ *      DecimalFormat##special_pattern_character special pattern characters}\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n- * <h2>Patterns<\/h2>\n+ * <h2 id=\"patterns\">Patterns<\/h2>\n@@ -89,1 +89,10 @@\n- * {@code DecimalFormat} patterns have the following syntax:\n+ * Note: For any given {@code DecimalFormat} pattern, if the pattern is not\n+ * in scientific notation, the maximum number of integer digits will not be\n+ * derived from the pattern, and instead set to {@link Integer#MAX_VALUE}.\n+ * Otherwise, if the pattern is in scientific notation, the maximum number of\n+ * integer digits will be derived from the pattern. This derivation is detailed\n+ * in the {@link ##scientific_notation Scientific Notation} section. This behavior\n+ * is the typical end-user desire; {@link #setMaximumIntegerDigits(int)} can be\n+ * used to manually adjust the maximum integer digits.\n+ *\n+ * <p> {@code DecimalFormat} patterns have the following syntax:\n@@ -99,1 +108,2 @@\n- *         any Unicode characters except {@code U+FFFE}, {@code U+FFFF}, and special characters\n+ *         Any characters except the {@linkplain ##special_pattern_character\n+ *         special pattern characters}\n@@ -101,1 +111,2 @@\n- *         any Unicode characters except {@code U+FFFE}, {@code U+FFFF}, and special characters\n+ *         Any characters except the {@linkplain ##special_pattern_character\n+ *         special pattern characters}\n@@ -248,1 +259,1 @@\n- * <h3>Scientific Notation<\/h3>\n+ * <h3 id=\"scientific_notation\">Scientific Notation<\/h3>\n@@ -452,0 +463,2 @@\n+     * The number of maximum integer digits is usually not derived from the pattern.\n+     * See the note in the {@link ##patterns Patterns} section for more detail.\n@@ -477,0 +490,2 @@\n+     * The number of maximum integer digits is usually not derived from the pattern.\n+     * See the note in the {@link ##patterns Patterns} section for more detail.\n@@ -3301,3 +3316,2 @@\n-     * There is no limit to integer digits set\n-     * by this routine, since that is the typical end-user desire;\n-     * use setMaximumInteger if you want to set a real value.\n+     * The number of maximum integer digits is usually not derived from the pattern.\n+     * See the note in the {@link ##patterns Patterns} section for more detail.\n@@ -3328,3 +3342,2 @@\n-     * There is no limit to integer digits set\n-     * by this routine, since that is the typical end-user desire;\n-     * use setMaximumInteger if you want to set a real value.\n+     * The number of maximum integer digits is usually not derived from the pattern.\n+     * See the note in the {@link ##patterns Patterns} section for more detail.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * information such as dates, messages, and numbers.\n+ * information such as dates, messages, numbers, and lists.\n@@ -64,3 +64,3 @@\n- * The Java Platform provides three specialized subclasses of {@code Format}--\n- * {@code DateFormat}, {@code MessageFormat}, and\n- * {@code NumberFormat}--for formatting dates, messages, and numbers,\n+ * The Java Platform provides specialized subclasses of {@code Format}--\n+ * {@code DateFormat}, {@code MessageFormat}, {@code NumberFormat}, and\n+ * {@code ListFormat}--for formatting dates, messages, numbers, and lists\n@@ -131,0 +131,1 @@\n+ * @see          java.text.ListFormat\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,611 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.text;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.Serial;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.IntStream;\n+import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+\/**\n+ * {@code ListFormat} formats or parses a list of strings in a locale-sensitive way.\n+ * Use {@code ListFormat} to construct a list of strings displayed for end users.\n+ * For example, displaying a list of 3 weekdays, e.g. \"Monday\", \"Wednesday\", \"Friday\"\n+ * as \"Monday, Wednesday, and Friday\" in an inclusive list type. This class provides\n+ * the functionality defined in Unicode Consortium's LDML specification for\n+ * <a href=\"https:\/\/www.unicode.org\/reports\/tr35\/tr35-general.html#ListPatterns\">\n+ * List Patterns<\/a>.\n+ * <p>\n+ * Three formatting types are provided: {@link Type#STANDARD STANDARD}, {@link Type#OR OR},\n+ * and {@link Type#UNIT UNIT}, which determines the punctuation\n+ * between the strings and the connecting words if any. Also, three formatting styles for each\n+ * type are provided: {@link Style#FULL FULL}, {@link Style#SHORT SHORT}, and\n+ * {@link Style#NARROW NARROW}, suitable for how the strings are abbreviated (or not).\n+ * The following snippet is an example of formatting\n+ * the list of Strings {@code \"Foo\", \"Bar\", \"Baz\"} in US English with\n+ * {@code STANDARD} type and {@code FULL} style:\n+ * {@snippet lang=java :\n+ * ListFormat.getInstance(Locale.US, ListFormat.Type.STANDARD, ListFormat.Style.FULL)\n+ *     .format(List.of(\"Foo\", \"Bar\", \"Baz\"))\n+ * }\n+ * This will produce the concatenated list string, \"Foo, Bar, and Baz\" as seen in\n+ * the following:\n+ * <table class=\"striped\">\n+ * <caption style=\"display:none\">Formatting examples<\/caption>\n+ * <thead>\n+ * <tr><th scope=\"col\"><\/th>\n+ *     <th scope=\"col\">FULL<\/th>\n+ *     <th scope=\"col\">SHORT<\/th>\n+ *     <th scope=\"col\">NARROW<\/th><\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">STANDARD<\/th>\n+ *     <td>Foo, Bar, and Baz<\/td>\n+ *     <td>Foo, Bar, &amp; Baz<\/td>\n+ *     <td>Foo, Bar, Baz<\/td>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">OR<\/th>\n+ *     <td>Foo, Bar, or Baz<\/td>\n+ *     <td>Foo, Bar, or Baz<\/td>\n+ *     <td>Foo, Bar, or Baz<\/td>\n+ * <tr><th scope=\"row\" style=\"text-align:left\">UNIT<\/th>\n+ *     <td>Foo, Bar, Baz<\/td>\n+ *     <td>Foo, Bar, Baz<\/td>\n+ *     <td>Foo Bar Baz<\/td>\n+ * <\/tbody>\n+ * <\/table>\n+ * Note: these examples are from CLDR, there could be different results from other locale providers.\n+ * <p>\n+ * Alternatively, Locale, Type, and\/or Style independent instances\n+ * can be created with {@link #getInstance(String[])}. The String array to the\n+ * method specifies the delimiting patterns for the start\/middle\/end portion of\n+ * the formatted string, as well as optional specialized patterns for two or three\n+ * elements. Refer to the method description for more detail.\n+ * <p>\n+ * On parsing, if some ambiguity is found in the input string, such as delimiting\n+ * sequences in the input string, the result, when formatted with the same formatting, does not\n+ * re-produce the input string. For example, a two element String list\n+ * \"a, b,\", \"c\" will be formatted as \"a, b, and c\", but may be parsed as three elements\n+ * \"a\", \"b\", \"c\".\n+ *\n+ * @implSpec This class is immutable and thread-safe\n+ *\n+ * @spec https:\/\/www.unicode.org\/reports\/tr35 Unicode Locale Data Markup Language (LDML)\n+ * @since 22\n+ *\/\n+public final class ListFormat extends Format {\n+\n+    @Serial\n+    private static final long serialVersionUID = 5272525550078071946L;\n+\n+    private static final int START = 0;\n+    private static final int MIDDLE = 1;\n+    private static final int END = 2;\n+    private static final int TWO = 3;\n+    private static final int THREE = 4;\n+    private static final int PATTERN_ARRAY_LENGTH = THREE + 1;\n+\n+    \/**\n+     * The locale to use for formatting list patterns.\n+     * @serial\n+     *\/\n+    private final Locale locale;\n+\n+    \/**\n+     * The array of five pattern Strings. Each element corresponds to the Unicode LDML's\n+     * `listPatternsPart` type, i.e, start\/middle\/end\/two\/three.\n+     * @serial\n+     *\/\n+    private final String[] patterns;\n+\n+    private static final Pattern PARSE_START = Pattern.compile(\"(.*?)\\\\{0}(.*?)\\\\{1}\");\n+    private static final Pattern PARSE_MIDDLE = Pattern.compile(\"\\\\{0}(.*?)\\\\{1}\");\n+    private static final Pattern PARSE_END = Pattern.compile(\"\\\\{0}(.*?)\\\\{1}(.*?)\");\n+    private static final Pattern PARSE_TWO = Pattern.compile(\"(.*?)\\\\{0}(.*?)\\\\{1}(.*?)\");\n+    private static final Pattern PARSE_THREE = Pattern.compile(\"(.*?)\\\\{0}(.*?)\\\\{1}(.*?)\\\\{2}(.*?)\");\n+    private transient Pattern startPattern;\n+    private transient String middleBetween;\n+    private transient Pattern endPattern;\n+\n+    private ListFormat(Locale l, String[] patterns) {\n+        locale = l;\n+        this.patterns = patterns;\n+        init();\n+    }\n+\n+    private void init() {\n+        \/\/ check for null pattern elements\n+        for (String elem : patterns) {\n+            if (elem == null) {\n+                throw new IllegalArgumentException(\"patterns array contains one or more null elements\");\n+            }\n+        }\n+\n+        \/\/ get pattern strings\n+        var m = PARSE_START.matcher(patterns[START]);\n+        String startBefore;\n+        String startBetween;\n+        if (m.matches()) {\n+            startBefore = m.group(1);\n+            startBetween = m.group(2);\n+        } else {\n+            throw new IllegalArgumentException(\"start pattern is incorrect: \" + patterns[START]);\n+        }\n+        m = PARSE_MIDDLE.matcher(patterns[MIDDLE]);\n+        if (m.matches()) {\n+            middleBetween = m.group(1);\n+        } else {\n+            throw new IllegalArgumentException(\"middle pattern is incorrect: \" + patterns[MIDDLE]);\n+        }\n+        m = PARSE_END.matcher(patterns[END]);\n+        String endBetween;\n+        String endAfter;\n+        if (m.matches()) {\n+            endBetween = m.group(1);\n+            endAfter = m.group(2);\n+        } else {\n+            throw new IllegalArgumentException(\"end pattern is incorrect: \" + patterns[END]);\n+        }\n+\n+        \/\/ Validate two\/three patterns, if given. Otherwise, generate them\n+        if (!patterns[TWO].isEmpty()) {\n+            if (!PARSE_TWO.matcher(patterns[TWO]).matches()) {\n+                throw new IllegalArgumentException(\"pattern for two is incorrect: \" + patterns[TWO]);\n+            }\n+        } else {\n+            patterns[TWO] = startBefore + \"{0}\" + endBetween + \"{1}\" + endAfter;\n+        }\n+        if (!patterns[THREE].isEmpty()) {\n+            if (!PARSE_THREE.matcher(patterns[THREE]).matches()) {\n+                throw new IllegalArgumentException(\"pattern for three is incorrect: \" + patterns[THREE]);\n+            }\n+        } else {\n+            patterns[THREE] = startBefore + \"{0}\" + startBetween + \"{1}\" + endBetween + \"{2}\" + endAfter;\n+        }\n+\n+        startPattern = Pattern.compile(startBefore + \"(.+?)\" + startBetween);\n+        endPattern = Pattern.compile(endBetween + \"(.+?)\" + endAfter);\n+    }\n+\n+    \/**\n+     * {@return the available locales that support ListFormat}\n+     *\/\n+    public static Locale[] getAvailableLocales() {\n+        \/\/ Same as a typical format class\n+        return DateFormat.getAvailableLocales();\n+    }\n+\n+    \/**\n+     * {@return the ListFormat object for the default\n+     * {@link Locale.Category#FORMAT FORMAT Locale}, {@link Type#STANDARD STANDARD} type,\n+     * and {@link Style#FULL FULL} style}\n+     *\/\n+    public static ListFormat getInstance() {\n+        return getInstance(Locale.getDefault(Locale.Category.FORMAT), Type.STANDARD, Style.FULL);\n+    }\n+\n+    \/**\n+     * {@return the ListFormat object for the specified {@link Locale}, {@link Type Type},\n+     * and {@link Style Style}}\n+     * @param locale {@code Locale} to be used, not null\n+     * @param type type of the ListFormat. One of {@code STANDARD}, {@code OR},\n+     *             or {@code UNIT}, not null\n+     * @param style style of the ListFormat. One of {@code FULL}, {@code SHORT},\n+     *              or {@code NARROW}, not null\n+     * @throws NullPointerException if any of the arguments are null\n+     *\/\n+    public static ListFormat getInstance(Locale locale, Type type, Style style) {\n+        Objects.requireNonNull(locale);\n+        Objects.requireNonNull(type);\n+        Objects.requireNonNull(style);\n+        return new ListFormat(locale, LocaleProviderAdapter.forType(LocaleProviderAdapter.Type.CLDR)\n+                .getLocaleResources(locale)\n+                .getListPatterns(type, style));\n+    }\n+\n+    \/**\n+     * {@return the ListFormat object for the specified patterns}\n+     * <p>\n+     * This factory returns an instance based on the customized patterns array,\n+     * instead of letting the runtime provide appropriate patterns for the {@code Locale},\n+     * {@code Type}, or {@code Style}.\n+     * <p>\n+     * The patterns array should contain five String patterns, each corresponding to the Unicode LDML's\n+     * {@code listPatternPart}, i.e., \"start\", \"middle\", \"end\", two element, and three element patterns\n+     * in this order. Each pattern contains \"{0}\" and \"{1}\" (and \"{2}\" for the three element pattern)\n+     * placeholders that are substituted with the passed input strings on formatting.\n+     * If the length of the patterns array is not 5, an {@code IllegalArgumentException}\n+     * is thrown.\n+     * <p>\n+     * Each pattern string is first parsed as follows. Literals in parentheses, such as\n+     * \"start_before\", are optional:\n+     * <blockquote><pre>\n+     * start := (start_before){0}start_between{1}\n+     * middle := {0}middle_between{1}\n+     * end := {0}end_between{1}(end_after)\n+     * two := (two_before){0}two_between{1}(two_after)\n+     * three := (three_before){0}three_between1{1}three_between2{2}(three_after)\n+     * <\/pre><\/blockquote>\n+     * If two or three pattern string is empty, it falls back to\n+     * {@code \"(start_before){0}end_between{1}(end_after)\"},\n+     * {@code \"(start_before){0}start_between{1}end_between{2}(end_after)\"} respectively.\n+     * If parsing of any pattern string for start, middle, end, two, or three fails,\n+     * it throws an {@code IllegalArgumentException}.\n+     * <p>\n+     * On formatting, the input string list with {@code n} elements substitutes above\n+     * placeholders based on the number of elements:\n+     * <blockquote><pre>\n+     * n = 1: {0}\n+     * n = 2: parsed pattern for \"two\"\n+     * n = 3: parsed pattern for \"three\"\n+     * n > 3: (start_before){0}start_between{1}middle_between{2} ... middle_between{m}end_between{n}(end_after)\n+     * <\/pre><\/blockquote>\n+     * As an example, the following table shows a pattern array which is equivalent to\n+     * {@code STANDARD} type, {@code FULL} style in US English:\n+     * <table class=\"striped\">\n+     * <caption style=\"display:none\">Standard\/Full Patterns in US English<\/caption>\n+     * <thead>\n+     * <tr><th scope=\"col\">Pattern Kind<\/th>\n+     *     <th scope=\"col\">Pattern String<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">start<\/th>\n+     *     <td>\"{0}, {1}\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">middle<\/th>\n+     *     <td>\"{0}, {1}\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">end<\/th>\n+     *     <td>\"{0}, and {1}\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">two<\/th>\n+     *     <td>\"{0} and {1}\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">three<\/th>\n+     *     <td>\"\"<\/td>\n+     * <\/tbody>\n+     * <\/table>\n+     * Here are the resulting formatted strings with the above pattern array.\n+     * <table class=\"striped\">\n+     * <caption style=\"display:none\">Formatting examples<\/caption>\n+     * <thead>\n+     * <tr><th scope=\"col\">Input String List<\/th>\n+     *     <th scope=\"col\">Formatted String<\/th><\/tr>\n+     * <\/thead>\n+     * <tbody>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">\"Foo\", \"Bar\", \"Baz\", \"Qux\"<\/th>\n+     *     <td>\"Foo, Bar, Baz, and Qux\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">\"Foo\", \"Bar\", \"Baz\"<\/th>\n+     *     <td>\"Foo, Bar, and Baz\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">\"Foo\", \"Bar\"<\/th>\n+     *     <td>\"Foo and Bar\"<\/td>\n+     * <tr><th scope=\"row\" style=\"text-align:left\">\"Foo\"<\/th>\n+     *     <td>\"Foo\"<\/td>\n+     * <\/tbody>\n+     * <\/table>\n+     *\n+     * @param patterns array of patterns, not null\n+     * @throws IllegalArgumentException if the length {@code patterns} array is not 5, or\n+     *          any of {@code start}, {@code middle}, {@code end}, {@code two}, or\n+     *          {@code three} patterns cannot be parsed.\n+     * @throws NullPointerException if {@code patterns} is null.\n+     *\/\n+    public static ListFormat getInstance(String[] patterns) {\n+        Objects.requireNonNull(patterns);\n+        if (patterns.length != PATTERN_ARRAY_LENGTH) {\n+            throw new IllegalArgumentException(\"Pattern array length should be \" + PATTERN_ARRAY_LENGTH);\n+        }\n+        return new ListFormat(Locale.ROOT, Arrays.copyOf(patterns, PATTERN_ARRAY_LENGTH));\n+    }\n+\n+    \/**\n+     * {@return the string that consists of the input strings, concatenated with the\n+     * patterns of this {@code ListFormat}}\n+     * @apiNote Formatting the string from an excessively long list may exceed memory\n+     *          or string sizes.\n+     * @param input The list of input strings to format. There should at least\n+     *              one String element in this list, otherwise an {@code IllegalArgumentException}\n+     *              is thrown.\n+     * @throws IllegalArgumentException if the length of {@code input} is zero.\n+     * @throws NullPointerException if {@code input} is null.\n+     *\/\n+    public String format(List<String> input) {\n+        Objects.requireNonNull(input);\n+\n+        return format(input, new StringBuffer(),\n+                DontCareFieldPosition.INSTANCE).toString();\n+    }\n+\n+    \/**\n+     * Formats an object and appends the resulting text to a given string\n+     * buffer. The object should either be a List or an array of Objects.\n+     *\n+     * @apiNote Formatting the string from an excessively long list or array\n+     *          may exceed memory or string sizes.\n+     * @param obj    The object to format. Must be a List or an array\n+     *               of Object.\n+     * @param toAppendTo    where the text is to be appended\n+     * @param pos    Ignored. Not used in ListFormat. May be null\n+     * @return       the string buffer passed in as {@code toAppendTo},\n+     *               with formatted text appended\n+     * @throws    NullPointerException if {@code obj} or {@code toAppendTo} is null\n+     * @throws    IllegalArgumentException if the given object cannot\n+     *               be formatted\n+     *\/\n+    @Override\n+    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+        Objects.requireNonNull(obj);\n+        Objects.requireNonNull(toAppendTo);\n+\n+        if (obj instanceof Object[] objs) {\n+            return generateMessageFormat(objs).format(objs, toAppendTo, DontCareFieldPosition.INSTANCE);\n+        } else if (obj instanceof List<?> objs) {\n+            var a = objs.toArray(new Object[0]);\n+            return generateMessageFormat(a).format(a, toAppendTo, DontCareFieldPosition.INSTANCE);\n+        } else {\n+            throw new IllegalArgumentException(\"The object to format should be a List<Object> or an Object[]\");\n+        }\n+    }\n+\n+    \/**\n+     * {@return the parsed list of strings from the {@code source} string}\n+     *\n+     * Note that {@link #format(List)} and this method\n+     * may not guarantee a round-trip, if the input strings contain ambiguous\n+     * delimiters. For example, a two element String list {@code \"a, b,\", \"c\"} will be\n+     * formatted as {@code \"a, b, and c\"}, but may be parsed as three elements\n+     * {@code \"a\", \"b\", \"c\"}.\n+     *\n+     * @param source the string to parse, not null.\n+     * @throws ParseException if parse failed\n+     * @throws NullPointerException if source is null\n+     *\/\n+    public List<String> parse(String source) throws ParseException {\n+        var pp = new ParsePosition(0);\n+        if (parseObject(source, pp) instanceof List<?> orig) {\n+            \/\/ parseObject() should've returned List<String>\n+            return orig.stream().map(o -> (String)o).toList();\n+        } else {\n+            throw new ParseException(\"Parse failed\", pp.getErrorIndex());\n+        }\n+    }\n+\n+    \/**\n+     * Parses text from a string to produce a list of strings.\n+     * <p>\n+     * The method attempts to parse text starting at the index given by\n+     * {@code parsePos}.\n+     * If parsing succeeds, then the index of {@code parsePos} is updated\n+     * to the index after the last character used (parsing does not necessarily\n+     * use all characters up to the end of the string), and the parsed\n+     * object is returned. The updated {@code parsePos} can be used to\n+     * indicate the starting point for the next call to parse additional text.\n+     * If an error occurs, then the index of {@code parsePos} is not\n+     * changed, the error index of {@code parsePos} is set to the index of\n+     * the character where the error occurred, and null is returned.\n+     * See the {@link #parse(String)} method for more information\n+     * on list parsing.\n+     *\n+     * @param source A string, part of which should be parsed.\n+     * @param parsePos A {@code ParsePosition} object with index and error\n+     *            index information as described above.\n+     * @return A list of string parsed from the {@code source}.\n+     *            In case of error, returns null.\n+     * @throws NullPointerException if {@code source} or {@code parsePos} is null.\n+     *\/\n+    @Override\n+    public Object parseObject(String source, ParsePosition parsePos) {\n+        Objects.requireNonNull(source);\n+        Objects.requireNonNull(parsePos);\n+        var sm = startPattern.matcher(source);\n+        var em = endPattern.matcher(source);\n+        Object parsed = null;\n+        if (sm.find(parsePos.getIndex()) && em.find(parsePos.getIndex())) {\n+            \/\/ get em to the last\n+            var c = em.start();\n+            while (em.find()) {\n+                c = em.start();\n+            }\n+            em.find(c);\n+            var startEnd = sm.end();\n+            var endStart = em.start();\n+            if (startEnd <= endStart) {\n+                var mid = source.substring(startEnd, endStart);\n+                var count = mid.split(middleBetween).length + 2;\n+                parsed = new MessageFormat(createMessageFormatString(count), locale).parseObject(source, parsePos);\n+            }\n+        }\n+\n+        if (parsed == null) {\n+            \/\/ now try exact number patterns\n+            parsed = new MessageFormat(patterns[TWO], locale).parseObject(source, parsePos);\n+            if (parsed == null) {\n+                parsed = new MessageFormat(patterns[THREE], locale).parseObject(source, parsePos);\n+            }\n+        }\n+\n+        \/\/ return the entire source from parsePos if still no match\n+        if (parsed == null) {\n+            parsed = new String[]{source.substring(parsePos.getIndex())};\n+            parsePos.setIndex(source.length());\n+        }\n+\n+        if (parsed instanceof Object[] objs) {\n+            parsePos.setErrorIndex(-1);\n+            return Arrays.asList(objs);\n+        } else {\n+            \/\/ MessageFormat.parseObject() failed\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public AttributedCharacterIterator formatToCharacterIterator(Object arguments) {\n+        Objects.requireNonNull(arguments);\n+\n+        if (arguments instanceof List<?> objs) {\n+            var a = objs.toArray(new Object[0]);\n+            return generateMessageFormat(a).formatToCharacterIterator(a);\n+        } else if (arguments instanceof Object[] objs) {\n+            return generateMessageFormat(objs).formatToCharacterIterator(objs);\n+        } else {\n+            throw new IllegalArgumentException(\"The arguments should be a List<Object> or an Object[]\");\n+        }\n+    }\n+\n+    \/**\n+     * Checks if this {@code ListFormat} is equal to another {@code ListFormat}.\n+     * The comparison is based on the {@code Locale} and formatting patterns, given or\n+     * generated with {@code Locale}, {@code Type}, and {@code Style}.\n+     * @param obj the object to check, {@code null} returns {@code false}\n+     * @return {@code true} if this is equals to the other {@code ListFormat}\n+     *\/\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj instanceof ListFormat other) {\n+            return locale.equals(other.locale) &&\n+                Arrays.equals(patterns, other.patterns);\n+        }\n+\n+        return false;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(locale, Arrays.hashCode(patterns));\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String toString() {\n+        return\n+            \"\"\"\n+            ListFormat [locale: \"%s\", start: \"%s\", middle: \"%s\",  end: \"%s\", two: \"%s\", three: \"%s\"]\n+            \"\"\".formatted(locale.getDisplayName(), patterns[START], patterns[MIDDLE], patterns[END], patterns[TWO], patterns[THREE]);\n+    }\n+\n+    private MessageFormat generateMessageFormat(Object[] input) {\n+        var len = input.length;\n+        return switch (len) {\n+            case 0 -> throw new IllegalArgumentException(\"There should at least be one input string\");\n+            case 1 -> new MessageFormat(\"{0}\", locale);\n+            case 2, 3 -> new MessageFormat(patterns[len + 1], locale);\n+            default -> new MessageFormat(createMessageFormatString(len), locale);\n+        };\n+    }\n+\n+    private String createMessageFormatString(int count) {\n+        var sb = new StringBuilder(256).append(patterns[START]);\n+        IntStream.range(2, count - 1).forEach(i -> sb.append(middleBetween).append(\"{\").append(i).append(\"}\"));\n+        sb.append(patterns[END].replaceFirst(\"\\\\{0}\", \"\").replaceFirst(\"\\\\{1}\", \"\\\\{\" + (count - 1) + \"\\\\}\"));\n+        return sb.toString();\n+    }\n+\n+    @java.io.Serial\n+    private void readObject(ObjectInputStream stream)\n+            throws IOException, ClassNotFoundException {\n+        stream.defaultReadObject();\n+        try {\n+            init();\n+        } catch (IllegalArgumentException iae) {\n+            throw new IOException(\"Deserialization failed.\", iae);\n+        }\n+    }\n+\n+    \/**\n+     * A ListFormat type - {@link #STANDARD STANDARD}, {@link #OR OR}, and\n+     * {@link #UNIT UNIT}.\n+     * <p>\n+     * {@code Type} is an enum which represents the type for formatting\n+     * a list within a given {@code ListFormat} instance. It determines\n+     * the punctuation and the connecting words in the formatted text.\n+     *\n+     * @since 22\n+     *\/\n+    public enum Type {\n+\n+        \/**\n+         * The {@code STANDARD} ListFormat type. This is the default\n+         * type, which concatenates elements in \"and\" enumeration.\n+         *\/\n+        STANDARD,\n+\n+        \/**\n+         * The {@code OR} ListFormat type. This type concatenates\n+         * elements in \"or\" enumeration.\n+         *\/\n+        OR,\n+\n+        \/**\n+         * The {@code UNIT} ListFormat type. This type concatenates\n+         * elements, useful for enumerating units.\n+         *\/\n+        UNIT\n+    }\n+\n+    \/**\n+     * A ListFormat style - {@link #FULL FULL}, {@link #SHORT SHORT},\n+     * and {@link #NARROW NARROW}.\n+     * <p>\n+     * {@code Style} is an enum which represents the style for formatting\n+     * a list within a given {@code ListFormat} instance.\n+     *\n+     * @since 22\n+     *\/\n+    public enum Style {\n+\n+        \/**\n+         * The {@code FULL} ListFormat style. This is the default style, which typically is the\n+         * full description of the text and punctuation that appear between the list elements.\n+         * Suitable for elements, such as \"Monday\", \"Tuesday\", \"Wednesday\", etc.\n+         *\/\n+        FULL,\n+\n+        \/**\n+         * The {@code SHORT} ListFormat style. This style is typically an abbreviation\n+         * of the text and punctuation that appear between the list elements.\n+         * Suitable for elements, such as \"Mon\", \"Tue\", \"Wed\", etc.\n+         *\/\n+        SHORT,\n+\n+        \/**\n+         * The {@code NARROW} ListFormat style. This style is typically the shortest description\n+         * of the text and punctuation that appear between the list elements.\n+         * Suitable for elements, such as \"M\", \"T\", \"W\", etc.\n+         *\/\n+        NARROW\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":611,"deletions":0,"binary":false,"changes":611,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+import java.util.Objects;\n+\n@@ -47,1 +49,2 @@\n- * entire {@code String}.\n+ * entire {@code String}. All constructors throw {@code NullPointerException}\n+ * if {@code text} is {@code null}.\n@@ -66,2 +69,1 @@\n-    public StringCharacterIterator(String text)\n-    {\n+    public StringCharacterIterator(String text) {\n@@ -76,0 +78,2 @@\n+     * @throws IllegalArgumentException if {@code pos} is not within the bounds of\n+     * range (inclusive) from {@code 0} to the length of {@code text}\n@@ -77,3 +81,2 @@\n-    public StringCharacterIterator(String text, int pos)\n-    {\n-    this(text, 0, text.length(), pos);\n+    public StringCharacterIterator(String text, int pos) {\n+        this(text, 0, text.length(), pos);\n@@ -90,0 +93,4 @@\n+     * @throws IllegalArgumentException if {@code begin} and {@code end} are not\n+     * within the bounds of range (inclusive) from {@code 0} to the length of {@code text},\n+     * {@code begin} is greater than {@code end}, or {@code pos} is not within\n+     * the bounds of range (inclusive) from {@code begin} to {@code end}\n@@ -92,3 +99,1 @@\n-        if (text == null)\n-            throw new NullPointerException();\n-        this.text = text;\n+        this.text = Objects.requireNonNull(text, \"text must not be null\");\n@@ -114,0 +119,1 @@\n+     * @throws NullPointerException if {@code text} is {@code null}\n@@ -117,3 +123,1 @@\n-        if (text == null)\n-            throw new NullPointerException();\n-        this.text = text;\n+        this.text = Objects.requireNonNull(text, \"text must not be null\");\n@@ -151,0 +155,3 @@\n+     *\n+     * @throws IllegalArgumentException if {@code p} is not within the bounds\n+     * (inclusive) of {@link #getBeginIndex()} to {@link #getEndIndex()}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringCharacterIterator.java","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for decimal digits.\n- *\n- * @since 21\n- *\/\n-final class DecimalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of DecimalDigits.\n-     *\/\n-    static final Digits INSTANCE = new DecimalDigits();\n-\n-    static {\n-        short[] digits = new short[10 * 10];\n-\n-        for (int i = 0; i < 10; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 10; j++) {\n-                short lo = (short) (j + '0');\n-                digits[i * 10 + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private DecimalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        boolean negative = value < 0;\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long q;\n-        int r;\n-        while (value <= Integer.MIN_VALUE) {\n-            q = value \/ 100;\n-            r = (int)((q * 100) - value);\n-            value = q;\n-            int digits = DIGITS[r];\n-\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int iq, ivalue = (int)value;\n-        while (ivalue <= -100) {\n-            iq = ivalue \/ 100;\n-            r = (iq * 100) - ivalue;\n-            ivalue = iq;\n-            int digits = DIGITS[r];\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (ivalue < 0) {\n-            ivalue = -ivalue;\n-        }\n-\n-        int digits = DIGITS[ivalue];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (9 < ivalue) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (negative) {\n-            putCharMH.invokeExact(buffer, --index, (int)'-');\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        boolean negative = value < 0;\n-        int sign = negative ? 1 : 0;\n-\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long precision = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (value > precision)\n-                return i + sign;\n-\n-            precision = 10 * precision;\n-        }\n-\n-        return 19 + sign;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/DecimalDigits.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -39,0 +39,3 @@\n+import jdk.internal.util.DecimalDigits;\n+import jdk.internal.util.HexDigits;\n+import jdk.internal.util.OctalDigits;\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for hexadecimal digits.\n- *\n- * @since 21\n- *\/\n-final class HexDigits implements Digits {\n-    \/**\n-     * Each element of the array represents the ascii encoded\n-     * hex relative to its index, for example:<p>\n-     * <pre>\n-     *       0 -> '00' -> ('0' << 8) | '0' -> 12336\n-     *       1 -> '01' -> ('0' << 8) | '1' -> 12337\n-     *       2 -> '02' -> ('0' << 8) | '2' -> 12338\n-     *\n-     *     ...\n-     *\n-     *      10 -> '0a' -> ('0' << 8) | 'a' -> 12385\n-     *      11 -> '0b' -> ('0' << 8) | 'b' -> 12386\n-     *      12 -> '0c' -> ('0' << 8) | 'b' -> 12387\n-     *\n-     *     ...\n-     *\n-     *      26 -> '1a' -> ('1' << 8) | 'a' -> 12641\n-     *      27 -> '1b' -> ('1' << 8) | 'b' -> 12642\n-     *      28 -> '1c' -> ('1' << 8) | 'c' -> 12643\n-     *\n-     *     ...\n-     *\n-     *     253 -> 'fd' -> ('f' << 8) | 'd' -> 26212\n-     *     254 -> 'fe' -> ('f' << 8) | 'e' -> 26213\n-     *     255 -> 'ff' -> ('f' << 8) | 'f' -> 26214\n-     * <\/pre>\n-     * <p>use like this:\n-     * <pre>\n-     *     int v = 254;\n-     *\n-     *     char[] chars = new char[2];\n-     *\n-     *     short i = DIGITS[v]; \/\/ 26213\n-     *\n-     *     chars[0] = (char) (byte) (i >> 8); \/\/ 'f'\n-     *     chars[1] = (char) (byte) i;        \/\/ 'e'\n-     * <\/pre>\n-     *\/\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of HexDigits.\n-     *\/\n-    static final Digits INSTANCE = new HexDigits();\n-\n-    static {\n-        short[] digits = new short[16 * 16];\n-\n-        for (int i = 0; i < 16; i++) {\n-            short hi = (short) ((i < 10 ? i + '0' : i - 10 + 'a') << 8);\n-\n-            for (int j = 0; j < 16; j++) {\n-                short lo = (short) (j < 10 ? j + '0' : j - 10 + 'a');\n-                digits[(i << 4) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private HexDigits() {\n-    }\n-\n-    \/**\n-     * Combine two hex shorts into one int based on big endian\n-     *\/\n-    static int digit(int b0, int b1) {\n-        return (DIGITS[b0 & 0xff] << 16) | DIGITS[b1 & 0xff];\n-    }\n-\n-    \/**\n-     * Combine four hex shorts into one long based on big endian\n-     *\/\n-    static long digit(int b0, int b1, int b2, int b3) {\n-        return (((long) DIGITS[b0 & 0xff]) << 48)\n-                | (((long) DIGITS[b1 & 0xff]) << 32)\n-                | (DIGITS[b2 & 0xff] << 16)\n-                | DIGITS[b3 & 0xff];\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        while ((value & ~0xFF) != 0) {\n-            int digits = DIGITS[(int) (value & 0xFF)];\n-            value >>>= 8;\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0xFF)];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (0xF < value) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        return value == 0 ? 1 :\n-                67 - Long.numberOfLeadingZeros(value) >> 2;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexDigits.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for octal digits.\n- *\n- * @since 21\n- *\/\n-final class OctalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of OctalDigits.\n-     *\/\n-    static final Digits INSTANCE = new OctalDigits();\n-\n-    static {\n-        short[] digits = new short[8 * 8];\n-\n-        for (int i = 0; i < 8; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 8; j++) {\n-                short lo = (short) (j + '0');\n-                digits[(i << 3) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private OctalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        while ((value & ~0x3F) != 0) {\n-            int digits = DIGITS[(int) (value & 0x3F)];\n-            value >>>= 6;\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0x3F)];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (7 < value) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/OctalDigits.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -192,1 +192,1 @@\n- * java.text.DecimalFormat DecimalFormat} object, {@code df}, and its and\n+ * java.text.DecimalFormat DecimalFormat} object, {@code df}, and its\n@@ -1847,1 +1847,1 @@\n-     * @param pattern a string specifying the pattern to skip over\n+     * @param pattern the pattern to skip over\n","filename":"src\/java.base\/share\/classes\/java\/util\/Scanner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-import jdk.internal.util.ByteArray;\n+import jdk.internal.util.ByteArrayLittleEndian;\n+import jdk.internal.util.HexDigits;\n@@ -472,1 +473,1 @@\n-        ByteArray.setLong(\n+        ByteArrayLittleEndian.setLong(\n@@ -475,1 +476,1 @@\n-                HexDigits.digit((int) (msb >> 56), (int) (msb >> 48), (int) (msb >> 40), (int) (msb >> 32)));\n+                HexDigits.packDigits((int) (msb >> 56), (int) (msb >> 48), (int) (msb >> 40), (int) (msb >> 32)));\n@@ -477,1 +478,1 @@\n-        ByteArray.setInt(\n+        ByteArrayLittleEndian.setInt(\n@@ -480,1 +481,1 @@\n-                HexDigits.digit(((int) msb) >> 24, ((int) msb) >> 16));\n+                HexDigits.packDigits(((int) msb) >> 24, ((int) msb) >> 16));\n@@ -482,1 +483,1 @@\n-        ByteArray.setInt(\n+        ByteArrayLittleEndian.setInt(\n@@ -485,1 +486,1 @@\n-                HexDigits.digit(((int) msb) >> 8, (int) msb));\n+                HexDigits.packDigits(((int) msb) >> 8, (int) msb));\n@@ -487,1 +488,1 @@\n-        ByteArray.setInt(\n+        ByteArrayLittleEndian.setInt(\n@@ -490,1 +491,1 @@\n-                HexDigits.digit((int) (lsb >> 56), (int) (lsb >> 48)));\n+                HexDigits.packDigits((int) (lsb >> 56), (int) (lsb >> 48)));\n@@ -492,1 +493,1 @@\n-        ByteArray.setLong(\n+        ByteArrayLittleEndian.setLong(\n@@ -495,2 +496,2 @@\n-                HexDigits.digit(((int) (lsb >> 40)), (int) (lsb >> 32), ((int) lsb) >> 24, ((int) lsb) >> 16));\n-        ByteArray.setInt(\n+                HexDigits.packDigits((int) (lsb >> 40), (int) (lsb >> 32), ((int) lsb) >> 24, ((int) lsb) >> 16));\n+        ByteArrayLittleEndian.setInt(\n@@ -499,1 +500,1 @@\n-                HexDigits.digit(((int) lsb) >> 8, (int) lsb));\n+                HexDigits.packDigits(((int) lsb) >> 8, (int) lsb));\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-                () -> StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n+                () -> StackWalker.getInstance(Set.of(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE));\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurityManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,11 +43,1 @@\n-     * Create a new MemberName instance. Used by {@code StackFrameInfo}.\n-     *\/\n-    Object newMemberName();\n-\n-    \/**\n-     * Returns the name for the given MemberName. Used by {@code StackFrameInfo}.\n-     *\/\n-    String getName(Object mname);\n-\n-    \/**\n-     * Returns the {@code MethodType} for the given MemberName.\n+     * Returns the declaring class for the given ResolvedMethodName.\n@@ -56,1 +46,1 @@\n-    MethodType getMethodType(Object mname);\n+    Class<?> getDeclaringClass(Object rmname);\n@@ -59,1 +49,2 @@\n-     * Returns the descriptor for the given MemberName.\n+     * Returns the {@code MethodType} for the given method descriptor\n+     * and class loader.\n@@ -62,1 +53,1 @@\n-    String getMethodDescriptor(Object mname);\n+    MethodType getMethodType(String descriptor, ClassLoader loader);\n@@ -65,2 +56,1 @@\n-     * Returns {@code true} if the given MemberName is a native method.\n-     * Used by {@code StackFrameInfo}.\n+     * Returns true if the given flags has MN_CALLER_SENSITIVE flag set.\n@@ -68,1 +58,1 @@\n-    boolean isNative(Object mname);\n+    boolean isCallerSensitive(int flags);\n@@ -71,2 +61,1 @@\n-     * Returns the declaring class for the given MemberName.\n-     * Used by {@code StackFrameInfo}.\n+     * Returns true if the given flags has MN_HIDDEN_MEMBER flag set.\n@@ -74,1 +63,1 @@\n-    Class<?> getDeclaringClass(Object mname);\n+    boolean isHiddenMember(int flags);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java","additions":9,"deletions":20,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1072,0 +1072,1 @@\n+    int ACC_VALUE    = 0x0040;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-        return \"MemorySegment{ heapBase: \" + heapBase() + \" address:\" + address() + \" limit: \" + length + \" }\";\n+        return \"MemorySegment{ heapBase: \" + heapBase() + \" address: 0x\" + Long.toHexString(address()) + \" byteSize: \" + length + \" }\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -75,1 +77,8 @@\n-        Path system32 = Path.of(System.getenv(\"SystemRoot\"), \"System32\");\n+        @SuppressWarnings(\"removal\")\n+        String systemRoot = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+            @Override\n+            public String run() {\n+                return System.getenv(\"SystemRoot\");\n+            }\n+        });\n+        Path system32 = Path.of(systemRoot, \"System32\");\n@@ -79,1 +88,7 @@\n-        boolean useUCRT = Files.exists(ucrtbase);\n+        @SuppressWarnings(\"removal\")\n+        boolean useUCRT = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n+            @Override\n+            public Boolean run() {\n+                return Files.exists(ucrtbase);\n+            }\n+        });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -40,7 +41,12 @@\n-        try {\n-            System.loadLibrary(\"fallbackLinker\");\n-        } catch (UnsatisfiedLinkError ule) {\n-            return false;\n-        }\n-        init();\n-        return true;\n+        return java.security.AccessController.doPrivileged(\n+                new java.security.PrivilegedAction<>() {\n+                    public Boolean run() {\n+                        try {\n+                            System.loadLibrary(\"fallbackLinker\");\n+                            init();\n+                            return true;\n+                        } catch (UnsatisfiedLinkError ule) {\n+                            return false;\n+                        }\n+                    }\n+                });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,3 +44,0 @@\n-    OTHER(is64bit() ? 64 : 32, ByteOrder.nativeOrder()),\n-    X64(64, ByteOrder.LITTLE_ENDIAN),  \/\/ Represents AMD64 and X86_64\n-    X86(32, ByteOrder.LITTLE_ENDIAN),\n@@ -49,1 +46,0 @@\n-    RISCV64(64, ByteOrder.LITTLE_ENDIAN),\n@@ -51,3 +47,0 @@\n-    S390(64, ByteOrder.BIG_ENDIAN),\n-    PPC64(64, ByteOrder.BIG_ENDIAN),\n-    PPC64LE(64, ByteOrder.LITTLE_ENDIAN),\n@@ -56,0 +49,6 @@\n+    OTHER(is64bit() ? 64 : 32, ByteOrder.nativeOrder()),\n+    PPC(32, ByteOrder.BIG_ENDIAN),\n+    PPC64(64, ByteOrder.BIG_ENDIAN),\n+    PPC64LE(64, ByteOrder.LITTLE_ENDIAN),\n+    RISCV64(64, ByteOrder.LITTLE_ENDIAN),\n+    S390(64, ByteOrder.BIG_ENDIAN),\n@@ -57,0 +56,2 @@\n+    X86(32, ByteOrder.LITTLE_ENDIAN),\n+    X64(64, ByteOrder.LITTLE_ENDIAN),  \/\/ Represents AMD64 and X86_64\n@@ -158,0 +159,8 @@\n+    \/**\n+     * {@return {@code true} if the current architecture is PPC, big-endian}\n+     *\/\n+    @ForceInline\n+    public static boolean isPPC() {\n+        return PlatformProps.TARGET_ARCH_IS_PPC;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for decimal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class DecimalDigits implements Digits {\n+\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    private static final short[] DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n+\n+    \/**\n+     * Singleton instance of DecimalDigits.\n+     *\/\n+    public static final Digits INSTANCE = new DecimalDigits();\n+\n+    \/**\n+     * Constructor.\n+     *\/\n+    private DecimalDigits() {\n+    }\n+\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n+        boolean negative = value < 0;\n+        if (!negative) {\n+            value = -value;\n+        }\n+\n+        long q;\n+        int r;\n+        while (value <= Integer.MIN_VALUE) {\n+            q = value \/ 100;\n+            r = (int)((q * 100) - value);\n+            value = q;\n+            int digits = DIGITS[r];\n+\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        int iq, ivalue = (int)value;\n+        while (ivalue <= -100) {\n+            iq = ivalue \/ 100;\n+            r = (iq * 100) - ivalue;\n+            ivalue = iq;\n+            int digits = DIGITS[r];\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        if (ivalue < 0) {\n+            ivalue = -ivalue;\n+        }\n+\n+        int digits = DIGITS[ivalue];\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n+\n+        if (9 < ivalue) {\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        if (negative) {\n+            putCharMH.invokeExact(buffer, --index, (int)'-');\n+        }\n+\n+        return index;\n+    }\n+\n+    @Override\n+    public int size(long value) {\n+        boolean negative = value < 0;\n+        int sign = negative ? 1 : 0;\n+\n+        if (!negative) {\n+            value = -value;\n+        }\n+\n+        long precision = -10;\n+        for (int i = 1; i < 19; i++) {\n+            if (value > precision)\n+                return i + sign;\n+\n+            precision = 10 * precision;\n+        }\n+\n+        return 19 + sign;\n+    }\n+\n+    \/**\n+     * For values from 0 to 99 return a short encoding a pair of ASCII-encoded digit characters in little-endian\n+     * @param i value to convert\n+     * @return a short encoding a pair of ASCII-encoded digit characters\n+     *\/\n+    public static short digitPair(int i) {\n+        return DIGITS[i];\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package java.util;\n+package jdk.internal.util;\n@@ -36,1 +36,1 @@\n-sealed interface Digits permits DecimalDigits, HexDigits, OctalDigits {\n+public sealed interface Digits permits DecimalDigits, HexDigits, OctalDigits {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Digits.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/util\/Digits.java","status":"renamed"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for hexadecimal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class HexDigits implements Digits {\n+    \/**\n+     * Each element of the array represents the ascii encoded\n+     * hex relative to its index, for example:<p>\n+     * <pre>\n+     *       0 -> '00' -> '0' | ('0' << 8) -> 0x3030\n+     *       1 -> '01' -> '0' | ('1' << 8) -> 0x3130\n+     *       2 -> '02' -> '0' | ('2' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0a' -> '0' | ('a' << 8) -> 0x6130\n+     *      11 -> '0b' -> '0' | ('b' << 8) -> 0x6230\n+     *      12 -> '0c' -> '0' | ('b' << 8) -> 0x6330\n+     *\n+     *     ...\n+     *\n+     *      26 -> '1a' -> '1' | ('a' << 8) -> 0x6131\n+     *      27 -> '1b' -> '1' | ('b' << 8) -> 0x6231\n+     *      28 -> '1c' -> '1' | ('c' << 8) -> 0x6331\n+     *\n+     *     ...\n+     *\n+     *     253 -> 'fd' -> 'f' | ('d' << 8) -> 0x6466\n+     *     254 -> 'fe' -> 'f' | ('e' << 8) -> 0x6566\n+     *     255 -> 'ff' -> 'f' | ('f' << 8) -> 0x6666\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    private static final short[] DIGITS;\n+\n+    \/**\n+     * Singleton instance of HexDigits.\n+     *\/\n+    public static final Digits INSTANCE = new HexDigits();\n+\n+    static {\n+        short[] digits = new short[16 * 16];\n+\n+        for (int i = 0; i < 16; i++) {\n+            short lo = (short) (i < 10 ? i + '0' : i - 10 + 'a');\n+\n+            for (int j = 0; j < 16; j++) {\n+                short hi = (short) ((j < 10 ? j + '0' : j - 10 + 'a') << 8);\n+                digits[(i << 4) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+\n+    \/**\n+     * Constructor.\n+     *\/\n+    private HexDigits() {\n+    }\n+\n+    \/**\n+     * Return a little-endian packed integer for the 4 ASCII bytes for an input unsigned 2-byte integer.\n+     * {@code b0} is the most significant byte and {@code b1} is the least significant byte.\n+     * The integer is passed byte-wise to allow reordering of execution.\n+     *\/\n+    public static int packDigits(int b0, int b1) {\n+        return DIGITS[b0 & 0xff] | (DIGITS[b1 & 0xff] << 16);\n+    }\n+\n+    \/**\n+     * Return a little-endian packed long for the 8 ASCII bytes for an input unsigned 4-byte integer.\n+     * {@code b0} is the most significant byte and {@code b3} is the least significant byte.\n+     * The integer is passed byte-wise to allow reordering of execution.\n+     *\/\n+    public static long packDigits(int b0, int b1, int b2, int b3) {\n+        return DIGITS[b0 & 0xff]\n+                | (DIGITS[b1 & 0xff] << 16)\n+                | (((long) DIGITS[b2 & 0xff]) << 32)\n+                | (((long) DIGITS[b3 & 0xff]) << 48);\n+    }\n+\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n+        while ((value & ~0xFF) != 0) {\n+            int digits = DIGITS[(int) (value & 0xFF)];\n+            value >>>= 8;\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        int digits = DIGITS[(int) (value & 0xFF)];\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n+\n+        if (0xF < value) {\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        return index;\n+    }\n+\n+    @Override\n+    public int size(long value) {\n+        return value == 0 ? 1 :\n+                67 - Long.numberOfLeadingZeros(value) >> 2;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for octal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class OctalDigits implements Digits {\n+    @Stable\n+    private static final short[] DIGITS;\n+\n+    \/**\n+     * Singleton instance of OctalDigits.\n+     *\/\n+    public static final Digits INSTANCE = new OctalDigits();\n+\n+    static {\n+        short[] digits = new short[8 * 8];\n+\n+        for (int i = 0; i < 8; i++) {\n+            short lo = (short) (i + '0');\n+\n+            for (int j = 0; j < 8; j++) {\n+                short hi = (short) ((j + '0') << 8);\n+                digits[(i << 3) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+\n+    \/**\n+     * Constructor.\n+     *\/\n+    private OctalDigits() {\n+    }\n+\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n+        while ((value & ~0x3F) != 0) {\n+            int digits = DIGITS[(int) (value & 0x3F)];\n+            value >>>= 6;\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        int digits = DIGITS[(int) (value & 0x3F)];\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n+\n+        if (7 < value) {\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        return index;\n+    }\n+\n+    @Override\n+    public int size(long value) {\n+        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -55,2 +55,0 @@\n-    static final boolean TARGET_ARCH_IS_X64     = \"@@OPENJDK_TARGET_CPU@@\" == \"x64\";\n-    static final boolean TARGET_ARCH_IS_X86     = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n@@ -59,1 +57,0 @@\n-    static final boolean TARGET_ARCH_IS_RISCV64 = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n@@ -61,3 +58,0 @@\n-    static final boolean TARGET_ARCH_IS_S390    = \"@@OPENJDK_TARGET_CPU@@\" == \"s390\";\n-    static final boolean TARGET_ARCH_IS_PPC64   = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n-    static final boolean TARGET_ARCH_IS_PPC64LE = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64le\";\n@@ -66,0 +60,5 @@\n+    static final boolean TARGET_ARCH_IS_PPC     = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc\";\n+    static final boolean TARGET_ARCH_IS_PPC64   = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n+    static final boolean TARGET_ARCH_IS_PPC64LE = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64le\";\n+    static final boolean TARGET_ARCH_IS_RISCV64 = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n+    static final boolean TARGET_ARCH_IS_S390    = \"@@OPENJDK_TARGET_CPU@@\" == \"s390\";\n@@ -67,0 +66,3 @@\n+    static final boolean TARGET_ARCH_IS_X86     = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n+    static final boolean TARGET_ARCH_IS_X64     = \"@@OPENJDK_TARGET_CPU@@\" == \"x64\";\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.BufferedOutputStream;\n@@ -113,1 +114,2 @@\n-             PrintStream ps = new PrintStream(out, true, StandardCharsets.UTF_8)) {\n+             BufferedOutputStream bos = new BufferedOutputStream(out);\n+             PrintStream ps = new PrintStream(bos, false, StandardCharsets.UTF_8)) {\n@@ -135,1 +137,2 @@\n-        PrintStream ps = new PrintStream(out, true, StandardCharsets.UTF_8);\n+        BufferedOutputStream bos = new BufferedOutputStream(out);\n+        PrintStream ps = new PrintStream(bos, false, StandardCharsets.UTF_8);\n@@ -139,1 +142,1 @@\n-            ps.flush();\n+            ps.flush();  \/\/ flushes underlying stream\n@@ -161,1 +164,1 @@\n-        ps.format(\"#%d \\\"%s\\\"%s%n\", thread.threadId(), thread.getName(), suffix);\n+        ps.println(\"#\" + thread.threadId() + \" \\\"\" + thread.getName() + \"\\\"\" + suffix);\n@@ -163,1 +166,2 @@\n-            ps.format(\"      %s%n\", ste);\n+            ps.print(\"      \");\n+            ps.println(ste);\n@@ -174,1 +178,2 @@\n-        PrintStream ps = new PrintStream(out, true, StandardCharsets.UTF_8);\n+        BufferedOutputStream bos = new BufferedOutputStream(out);\n+        PrintStream ps = new PrintStream(bos, false, StandardCharsets.UTF_8);\n@@ -178,1 +183,1 @@\n-            ps.flush();\n+            ps.flush();  \/\/ flushes underlying stream\n@@ -260,3 +265,4 @@\n-        out.format(\"           \\\"tid\\\": \\\"%d\\\",%n\", thread.threadId());\n-        out.format(\"           \\\"name\\\": \\\"%s\\\",%n\", escape(thread.getName()));\n-        out.format(\"           \\\"stack\\\": [%n\");\n+        out.println(\"           \\\"tid\\\": \\\"\" + thread.threadId() + \"\\\",\");\n+        out.println(\"           \\\"name\\\": \\\"\" + escape(thread.getName()) + \"\\\",\");\n+        out.println(\"           \\\"stack\\\": [\");\n+\n@@ -266,1 +272,3 @@\n-            out.format(\"              \\\"%s\\\"\", escape(stackTrace[i].toString()));\n+            out.print(\"              \\\"\");\n+            out.print(escape(stackTrace[i].toString()));\n+            out.print(\"\\\"\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadDumper.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.io.InputStreamReader;\n-import java.io.OutputStream;\n-import java.io.BufferedReader;\n@@ -33,2 +30,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -247,1 +242,1 @@\n-            if (c2b == null && map[i] != -1) {\n+            if (c2b == null) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/CharsetMapping.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.text.ListFormat;\n@@ -101,0 +102,1 @@\n+    private static final String LIST_PATTERN = \"LP.\";\n@@ -834,0 +836,26 @@\n+    \/**\n+     * {@return the list patterns for the locale}\n+     *\n+     * @param type a {@link ListFormat.Type}\n+     * @param style a {@link ListFormat.Style}\n+     *\/\n+    public String[] getListPatterns(ListFormat.Type type, ListFormat.Style style) {\n+        String typeStr = type.toString().toLowerCase(Locale.ROOT);\n+        String styleStr = style.toString().toLowerCase(Locale.ROOT);\n+        String[] lpArray;\n+        String cacheKey = LIST_PATTERN + typeStr;\n+\n+        removeEmptyReferences();\n+        ResourceReference data = cache.get(cacheKey);\n+\n+        if (data == null || ((lpArray = (String[]) data.get()) == null)) {\n+            ResourceBundle rb = localeData.getDateFormatData(locale);\n+            lpArray = rb.getStringArray(\"ListPatterns_\" + typeStr + (style == ListFormat.Style.FULL ? \"\" : \"-\" + styleStr));\n+            if (lpArray == null) {\n+                cache.put(cacheKey, new ResourceReference(cacheKey, new String[5], referenceQueue));\n+            }\n+        }\n+\n+        return lpArray;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleResources.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <signal.h>\n+\n+#include \"jni.h\"\n+#include \"jvm.h\"\n+\n+#include \"java_lang_StackFrameInfo.h\"\n+\n+JNIEXPORT void JNICALL Java_java_lang_StackFrameInfo_expandStackFrameInfo\n+  (JNIEnv *env, jobject obj) {\n+     JVM_ExpandStackFrameInfo(env, obj);\n+}\n","filename":"src\/java.base\/share\/native\/libjava\/StackFrameInfo.c","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-   return JVM_STACKWALK_FILL_CLASS_REFS_ONLY == java_lang_StackStreamFactory_FILL_CLASS_REFS_ONLY &&\n+   return JVM_STACKWALK_CLASS_INFO_ONLY == java_lang_StackStreamFactory_CLASS_INFO_ONLY &&\n@@ -55,1 +55,1 @@\n- * Signature: (JILjdk\/internal\/vm\/ContinuationScope;Ljdk\/internal\/vm\/Continuation;II[Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+ * Signature: (IILjdk\/internal\/vm\/ContinuationScope;Ljdk\/internal\/vm\/Continuation;II[Ljava\/lang\/Object;)Ljava\/lang\/Object;\n@@ -58,1 +58,1 @@\n-  (JNIEnv *env, jobject stackstream, jlong mode, jint skipFrames, jobject contScope, jobject cont,\n+  (JNIEnv *env, jobject stackstream, jint mode, jint skipFrames, jobject contScope, jobject cont,\n@@ -68,1 +68,1 @@\n- * Signature: (JJII[Ljava\/lang\/Object;)I\n+ * Signature: (IJII[Ljava\/lang\/Object;)I\n@@ -71,1 +71,1 @@\n-  (JNIEnv *env, jobject stackstream, jlong mode, jlong anchor,\n+  (JNIEnv *env, jobject stackstream, jint mode, jlong anchor,\n","filename":"src\/java.base\/share\/native\/libjava\/StackStreamFactory.c","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,10 @@\n-    if (getJavaPath(argv[argi++], java, RELATIVE_DEPTH) != 0) {\n+    int error = getJavaPath(argv[argi++], java, RELATIVE_DEPTH);\n+#ifdef __linux__\n+    \/* Try to read the symbolic link to the current binary\n+     * if the java path can not be resolved from argv[0]. *\/\n+    if (error != 0) {\n+        error = getJavaPath(\"\/proc\/self\/exe\", java, RELATIVE_DEPTH);\n+    }\n+#endif\n+\n+    if (error != 0) {\n","filename":"src\/java.base\/unix\/native\/launcher\/jexec.c","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -761,0 +761,23 @@\n+    \/**\n+     * {@return the class body of an {@code enum} constant if the\n+     * argument is an {@code enum} constant declared with an optional\n+     * class body, {@code null} otherwise}\n+     *\n+     * @implSpec\n+     * The default implementation of this method throws {@code\n+     * UnsupportedOperationException} if the argument is an {@code\n+     * enum} constant and throws an {@code IllegalArgumentException}\n+     * if it is not.\n+     *\n+     * @param enumConstant an enum constant\n+     * @throws IllegalArgumentException if the argument is not an {@code enum} constant\n+     * @jls 8.9.1 Enum Constants\n+     * @since 22\n+     *\/\n+    default TypeElement getEnumConstantBody(VariableElement enumConstant) {\n+        switch(enumConstant.getKind()) {\n+        case ENUM_CONSTANT -> throw new UnsupportedOperationException();\n+        default            -> throw new IllegalArgumentException(\"Argument not an enum constant\");\n+        }\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -776,5 +776,0 @@\n-    private static final String newFolderString =\n-            UIManager.getString(\"FileChooser.other.newFolder\");\n-    private static final String newFolderNextString  =\n-            UIManager.getString(\"FileChooser.other.newFolder.subsequent\");\n-\n@@ -788,0 +783,4 @@\n+        String newFolderString =\n+                UIManager.getString(\"FileChooser.other.newFolder\");\n+        String newFolderNextString =\n+                UIManager.getString(\"FileChooser.other.newFolder.subsequent\");\n@@ -841,5 +840,0 @@\n-    private static final String newFolderString =\n-            UIManager.getString(\"FileChooser.win32.newFolder\");\n-    private static final String newFolderNextString  =\n-            UIManager.getString(\"FileChooser.win32.newFolder.subsequent\");\n-\n@@ -902,0 +896,4 @@\n+        String newFolderString =\n+                UIManager.getString(\"FileChooser.win32.newFolder\");\n+        String newFolderNextString =\n+                UIManager.getString(\"FileChooser.win32.newFolder.subsequent\");\n@@ -969,3 +967,0 @@\n-    private static final String newFolderString =\n-            UIManager.getString(\"FileChooser.other.newFolder\");\n-\n@@ -979,0 +974,2 @@\n+        String newFolderString =\n+                UIManager.getString(\"FileChooser.other.newFolder\");\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/filechooser\/FileSystemView.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-char* normalize(const char* path);\n+char* normalize_path(const char* path);\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/FileSystemSupport.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -927,1 +927,1 @@\n-        TRANSFORM(path, normalize(path));\n+        TRANSFORM(path, normalize_path(path));\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/InvocationAdapter.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-char* normalize(const char* pathname) {\n+char* normalize_path(const char* pathname) {\n","filename":"src\/java.instrument\/unix\/native\/libinstrument\/FileSystemSupport_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-char* normalize(char* path) {\n+char* normalize_path(char* path) {\n","filename":"src\/java.instrument\/windows\/native\/libinstrument\/FileSystemSupport_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -177,1 +179,4 @@\n-    final Object startTlsLock = new Object();\n+    final ReentrantLock startTlsLock = new ReentrantLock();\n+\n+    \/\/ Connection instance lock\n+    private final ReentrantLock lock = new ReentrantLock();\n@@ -376,2 +381,7 @@\n-    synchronized int getMsgId() {\n-        return ++outMsgId;\n+    int getMsgId() {\n+        lock.lock();\n+        try {\n+            return ++outMsgId;\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -411,1 +421,2 @@\n-            synchronized (this) {\n+            lock.lock();\n+            try {\n@@ -414,0 +425,2 @@\n+            } finally {\n+                lock.unlock();\n@@ -430,1 +443,2 @@\n-        synchronized (this) {\n+        lock.lock();\n+        try {\n@@ -435,0 +449,2 @@\n+        } finally {\n+            lock.unlock();\n@@ -479,9 +495,13 @@\n-    private synchronized void addRequest(LdapRequest ldapRequest) {\n-\n-        LdapRequest ldr = pendingRequests;\n-        if (ldr == null) {\n-            pendingRequests = ldapRequest;\n-            ldapRequest.next = null;\n-        } else {\n-            ldapRequest.next = pendingRequests;\n-            pendingRequests = ldapRequest;\n+    private void addRequest(LdapRequest ldapRequest) {\n+        lock.lock();\n+        try {\n+            LdapRequest ldr = pendingRequests;\n+            if (ldr == null) {\n+                pendingRequests = ldapRequest;\n+                ldapRequest.next = null;\n+            } else {\n+                ldapRequest.next = pendingRequests;\n+                pendingRequests = ldapRequest;\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -491,6 +511,9 @@\n-    synchronized LdapRequest findRequest(int msgId) {\n-\n-        LdapRequest ldr = pendingRequests;\n-        while (ldr != null) {\n-            if (ldr.msgId == msgId) {\n-                return ldr;\n+    LdapRequest findRequest(int msgId) {\n+        lock.lock();\n+        try {\n+            LdapRequest ldr = pendingRequests;\n+            while (ldr != null) {\n+                if (ldr.msgId == msgId) {\n+                    return ldr;\n+                }\n+                ldr = ldr.next;\n@@ -498,1 +521,3 @@\n-            ldr = ldr.next;\n+            return null;\n+        } finally {\n+            lock.unlock();\n@@ -500,1 +525,0 @@\n-        return null;\n@@ -504,3 +528,5 @@\n-    synchronized void removeRequest(LdapRequest req) {\n-        LdapRequest ldr = pendingRequests;\n-        LdapRequest ldrprev = null;\n+    void removeRequest(LdapRequest req) {\n+        lock.lock();\n+        try {\n+            LdapRequest ldr = pendingRequests;\n+            LdapRequest ldrprev = null;\n@@ -508,3 +534,3 @@\n-        while (ldr != null) {\n-            if (ldr == req) {\n-                ldr.cancel();\n+            while (ldr != null) {\n+                if (ldr == req) {\n+                    ldr.cancel();\n@@ -512,4 +538,6 @@\n-                if (ldrprev != null) {\n-                    ldrprev.next = ldr.next;\n-                } else {\n-                    pendingRequests = ldr.next;\n+                    if (ldrprev != null) {\n+                        ldrprev.next = ldr.next;\n+                    } else {\n+                        pendingRequests = ldr.next;\n+                    }\n+                    ldr.next = null;\n@@ -517,1 +545,2 @@\n-                ldr.next = null;\n+                ldrprev = ldr;\n+                ldr = ldr.next;\n@@ -519,2 +548,2 @@\n-            ldrprev = ldr;\n-            ldr = ldr.next;\n+        } finally {\n+            lock.unlock();\n@@ -549,1 +578,2 @@\n-            synchronized (this) {\n+            lock.lock();\n+            try {\n@@ -552,0 +582,2 @@\n+            } finally {\n+                lock.unlock();\n@@ -561,2 +593,4 @@\n-    synchronized void abandonOutstandingReqs(Control[] reqCtls) {\n-        LdapRequest ldr = pendingRequests;\n+    void abandonOutstandingReqs(Control[] reqCtls) {\n+        lock.lock();\n+        try {\n+            LdapRequest ldr = pendingRequests;\n@@ -564,3 +598,6 @@\n-        while (ldr != null) {\n-            abandonRequest(ldr, reqCtls);\n-            pendingRequests = ldr = ldr.next;\n+            while (ldr != null) {\n+                abandonRequest(ldr, reqCtls);\n+                pendingRequests = ldr = ldr.next;\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -604,1 +641,2 @@\n-            synchronized (this) {\n+            lock.lock();\n+            try {\n@@ -607,0 +645,2 @@\n+            } finally {\n+                lock.unlock();\n@@ -628,2 +668,2 @@\n-\n-        synchronized (this) {\n+        lock.lock();\n+        try {\n@@ -674,2 +714,1 @@\n-                        ldr = ldr.next;\n-                    }\n+                    ldr = ldr.next;\n@@ -678,0 +717,3 @@\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -726,5 +768,7 @@\n-    public synchronized void replaceStreams(InputStream newIn, OutputStream newOut) {\n-        if (debug) {\n-            System.err.println(\"Replacing \" + inStream + \" with: \" + newIn);\n-            System.err.println(\"Replacing \" + outStream + \" with: \" + newOut);\n-        }\n+    public void replaceStreams(InputStream newIn, OutputStream newOut) {\n+        lock.lock();\n+        try {\n+            if (debug) {\n+                System.err.println(\"Replacing \" + inStream + \" with: \" + newIn);\n+                System.err.println(\"Replacing \" + outStream + \" with: \" + newOut);\n+            }\n@@ -732,1 +776,1 @@\n-        inStream = newIn;\n+            inStream = newIn;\n@@ -734,7 +778,7 @@\n-        \/\/ Cleanup old stream\n-        try {\n-            outStream.flush();\n-        } catch (IOException ie) {\n-            if (debug)\n-                System.err.println(\"Connection: cannot flush outstream: \" + ie);\n-        }\n+            \/\/ Cleanup old stream\n+            try {\n+                outStream.flush();\n+            } catch (IOException ie) {\n+                if (debug)\n+                    System.err.println(\"Connection: cannot flush outstream: \" + ie);\n+            }\n@@ -742,2 +786,5 @@\n-        \/\/ Replace stream\n-        outStream = newOut;\n+            \/\/ Replace stream\n+            outStream = newOut;\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -749,4 +796,12 @@\n-    public synchronized void replaceStreams(InputStream newIn, OutputStream newOut, boolean isStartTls) {\n-        synchronized (startTlsLock) {\n-            replaceStreams(newIn, newOut);\n-            isUpgradedToStartTls = isStartTls;\n+    public void replaceStreams(InputStream newIn, OutputStream newOut, boolean isStartTls) {\n+        lock.lock();\n+        try {\n+            startTlsLock.lock();\n+            try {\n+                replaceStreams(newIn, newOut);\n+                isUpgradedToStartTls = isStartTls;\n+            } finally {\n+                startTlsLock.unlock();\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -768,2 +823,7 @@\n-    private synchronized InputStream getInputStream() {\n-        return inStream;\n+    private InputStream getInputStream() {\n+        lock.lock();\n+        try {\n+            return inStream;\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -820,1 +880,3 @@\n-    private final Object pauseLock = new Object();  \/\/ lock for reader to wait on while paused\n+    \/\/ lock for reader to wait on while paused\n+    private final ReentrantLock pauseLock = new ReentrantLock();\n+    private final Condition pauseCondition = pauseLock.newCondition();\n@@ -827,1 +889,2 @@\n-        synchronized (pauseLock) {\n+        pauseLock.lock();\n+        try {\n@@ -834,1 +897,1 @@\n-                pauseLock.notify();\n+                pauseCondition.signal();\n@@ -836,0 +899,2 @@\n+        } finally {\n+            pauseLock.unlock();\n@@ -842,1 +907,1 @@\n-     * MUST be called from within synchronized (pauseLock) clause.\n+     * MUST be called with pauseLock locked.\n@@ -845,0 +910,1 @@\n+        assert pauseLock.isHeldByCurrentThread();\n@@ -852,1 +918,1 @@\n-                pauseLock.wait(); \/\/ notified by unpauseReader\n+                pauseCondition.await(); \/\/ notified by unpauseReader\n@@ -988,1 +1054,2 @@\n-                                synchronized (pauseLock) {\n+                                pauseLock.lock();\n+                                try {\n@@ -999,0 +1066,2 @@\n+                                } finally {\n+                                    pauseLock.unlock();\n@@ -1080,3 +1149,5 @@\n-    public synchronized void setHandshakeCompletedListener(SSLSocket sslSocket) {\n-        if (tlsHandshakeListener != null)\n-            tlsHandshakeListener.tlsHandshakeCompleted.cancel(false);\n+    public void setHandshakeCompletedListener(SSLSocket sslSocket) {\n+        lock.lock();\n+        try {\n+            if (tlsHandshakeListener != null)\n+                tlsHandshakeListener.tlsHandshakeCompleted.cancel(false);\n@@ -1084,2 +1155,5 @@\n-        tlsHandshakeListener = new HandshakeListener();\n-        sslSocket.addHandshakeCompletedListener(tlsHandshakeListener);\n+            tlsHandshakeListener = new HandshakeListener();\n+            sslSocket.addHandshakeCompletedListener(tlsHandshakeListener);\n+        } finally {\n+            lock.unlock();\n+        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":152,"deletions":78,"binary":false,"changes":230,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -50,0 +52,4 @@\n+    \/\/ EventQueue instance lock\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private final Condition condition = lock.newCondition();\n+\n@@ -89,10 +95,16 @@\n-    synchronized void enqueue(EventObject event, Vector<NamingListener> vector) {\n-        QueueElement newElt = new QueueElement(event, vector);\n-\n-        if (head == null) {\n-            head = newElt;\n-            tail = newElt;\n-        } else {\n-            newElt.next = head;\n-            head.prev = newElt;\n-            head = newElt;\n+    void enqueue(EventObject event, Vector<NamingListener> vector) {\n+        lock.lock();\n+        try {\n+            QueueElement newElt = new QueueElement(event, vector);\n+\n+            if (head == null) {\n+                head = newElt;\n+                tail = newElt;\n+            } else {\n+                newElt.next = head;\n+                head.prev = newElt;\n+                head = newElt;\n+            }\n+            condition.signal();\n+        } finally {\n+            lock.unlock();\n@@ -100,1 +112,0 @@\n-        notify();\n@@ -111,10 +122,16 @@\n-    private synchronized QueueElement dequeue()\n-                                throws InterruptedException {\n-        while (tail == null)\n-            wait();\n-        QueueElement elt = tail;\n-        tail = elt.prev;\n-        if (tail == null) {\n-            head = null;\n-        } else {\n-            tail.next = null;\n+    private QueueElement dequeue() throws InterruptedException {\n+        lock.lock();\n+        try {\n+            while (tail == null)\n+                condition.await();\n+            QueueElement elt = tail;\n+            tail = elt.prev;\n+            if (tail == null) {\n+                head = null;\n+            } else {\n+                tail.next = null;\n+            }\n+            elt.prev = elt.next = null;\n+            return elt;\n+        } finally {\n+            lock.unlock();\n@@ -122,2 +139,0 @@\n-        elt.prev = elt.next = null;\n-        return elt;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/EventQueue.java","additions":39,"deletions":24,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -120,0 +121,3 @@\n+    \/\/ EventSupport instance lock. Accessed by LdapCtx\n+    final ReentrantLock lock = new ReentrantLock();\n+\n@@ -152,1 +156,1 @@\n-    synchronized void addNamingListener(String nm, int scope,\n+    void addNamingListener(String nm, int scope,\n@@ -155,16 +159,13 @@\n-        if (l instanceof ObjectChangeListener ||\n-            l instanceof NamespaceChangeListener) {\n-            NotifierArgs args = new NotifierArgs(nm, scope, l);\n-\n-            NamingEventNotifier notifier = notifiers.get(args);\n-            if (notifier == null) {\n-                notifier = new NamingEventNotifier(this, ctx, args, l);\n-                notifiers.put(args, notifier);\n-            } else {\n-                notifier.addNamingListener(l);\n-            }\n-        }\n-        if (l instanceof UnsolicitedNotificationListener) {\n-            \/\/ Add listener to this's list of unsolicited notifiers\n-            if (unsolicited == null) {\n-                unsolicited = new Vector<>(3);\n+        lock.lock();\n+        try {\n+            if (l instanceof ObjectChangeListener ||\n+                l instanceof NamespaceChangeListener) {\n+                NotifierArgs args = new NotifierArgs(nm, scope, l);\n+\n+                NamingEventNotifier notifier = notifiers.get(args);\n+                if (notifier == null) {\n+                    notifier = new NamingEventNotifier(this, ctx, args, l);\n+                    notifiers.put(args, notifier);\n+                } else {\n+                    notifier.addNamingListener(l);\n+                }\n@@ -172,0 +173,5 @@\n+            if (l instanceof UnsolicitedNotificationListener) {\n+                \/\/ Add listener to this's list of unsolicited notifiers\n+                if (unsolicited == null) {\n+                    unsolicited = new Vector<>(3);\n+                }\n@@ -173,1 +179,4 @@\n-            unsolicited.addElement((UnsolicitedNotificationListener)l);\n+                unsolicited.addElement((UnsolicitedNotificationListener) l);\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -181,1 +190,1 @@\n-    synchronized void addNamingListener(String nm, String filter,\n+    void addNamingListener(String nm, String filter,\n@@ -184,10 +193,13 @@\n-        if (l instanceof ObjectChangeListener ||\n-            l instanceof NamespaceChangeListener) {\n-            NotifierArgs args = new NotifierArgs(nm, filter, ctls, l);\n-\n-            NamingEventNotifier notifier = notifiers.get(args);\n-            if (notifier == null) {\n-                notifier = new NamingEventNotifier(this, ctx, args, l);\n-                notifiers.put(args, notifier);\n-            } else {\n-                notifier.addNamingListener(l);\n+        lock.lock();\n+        try {\n+            if (l instanceof ObjectChangeListener ||\n+                l instanceof NamespaceChangeListener) {\n+                NotifierArgs args = new NotifierArgs(nm, filter, ctls, l);\n+\n+                NamingEventNotifier notifier = notifiers.get(args);\n+                if (notifier == null) {\n+                    notifier = new NamingEventNotifier(this, ctx, args, l);\n+                    notifiers.put(args, notifier);\n+                } else {\n+                    notifier.addNamingListener(l);\n+                }\n@@ -195,5 +207,6 @@\n-        }\n-        if (l instanceof UnsolicitedNotificationListener) {\n-            \/\/ Add listener to this's list of unsolicited notifiers\n-            if (unsolicited == null) {\n-                unsolicited = new Vector<>(3);\n+            if (l instanceof UnsolicitedNotificationListener) {\n+                \/\/ Add listener to this's list of unsolicited notifiers\n+                if (unsolicited == null) {\n+                    unsolicited = new Vector<>(3);\n+                }\n+                unsolicited.addElement((UnsolicitedNotificationListener) l);\n@@ -201,1 +214,2 @@\n-            unsolicited.addElement((UnsolicitedNotificationListener)l);\n+        } finally {\n+            lock.unlock();\n@@ -208,15 +222,12 @@\n-    synchronized void removeNamingListener(NamingListener l) {\n-        if (debug) {\n-            System.err.println(\"EventSupport removing listener\");\n-        }\n-        \/\/ Go through list of notifiers, remove 'l' from each.\n-        \/\/ If 'l' is notifier's only listener, remove notifier too.\n-        Iterator<NamingEventNotifier> iterator = notifiers.values().iterator();\n-        while (iterator.hasNext()) {\n-            NamingEventNotifier notifier = iterator.next();\n-            if (notifier != null) {\n-                if (debug) {\n-                    System.err.println(\"EventSupport removing listener from notifier\");\n-                }\n-                notifier.removeNamingListener(l);\n-                if (!notifier.hasNamingListeners()) {\n+    void removeNamingListener(NamingListener l) {\n+        lock.lock();\n+        try {\n+            if (debug) {\n+                System.err.println(\"EventSupport removing listener\");\n+            }\n+            \/\/ Go through list of notifiers, remove 'l' from each.\n+            \/\/ If 'l' is notifier's only listener, remove notifier too.\n+            Iterator<NamingEventNotifier> iterator = notifiers.values().iterator();\n+            while (iterator.hasNext()) {\n+                NamingEventNotifier notifier = iterator.next();\n+                if (notifier != null) {\n@@ -224,1 +235,9 @@\n-                        System.err.println(\"EventSupport stopping notifier\");\n+                        System.err.println(\"EventSupport removing listener from notifier\");\n+                    }\n+                    notifier.removeNamingListener(l);\n+                    if (!notifier.hasNamingListeners()) {\n+                        if (debug) {\n+                            System.err.println(\"EventSupport stopping notifier\");\n+                        }\n+                        notifier.stop();\n+                        iterator.remove();\n@@ -226,2 +245,0 @@\n-                    notifier.stop();\n-                    iterator.remove();\n@@ -230,7 +247,9 @@\n-        }\n-        \/\/ Remove from list of unsolicited notifier\n-        if (debug) {\n-            System.err.println(\"EventSupport removing unsolicited: \" + unsolicited);\n-        }\n-        if (unsolicited != null) {\n-            unsolicited.removeElement(l);\n+            \/\/ Remove from list of unsolicited notifier\n+            if (debug) {\n+                System.err.println(\"EventSupport removing unsolicited: \" + unsolicited);\n+            }\n+            if (unsolicited != null) {\n+                unsolicited.removeElement(l);\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -240,2 +259,7 @@\n-    synchronized boolean hasUnsolicited() {\n-        return (unsolicited != null && unsolicited.size() > 0);\n+    boolean hasUnsolicited() {\n+        lock.lock();\n+        try {\n+            return (unsolicited != null && unsolicited.size() > 0);\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -249,9 +273,14 @@\n-    synchronized void removeDeadNotifier(NotifierArgs info) {\n-        if (debug) {\n-            System.err.println(\"EventSupport.removeDeadNotifier: \" + info.name);\n-        }\n-        if (notifiers != null) {\n-            \/\/ Only do this if cleanup() not been triggered, otherwise here\n-            \/\/ will throw NullPointerException since notifiers will be set to\n-            \/\/ null in cleanup()\n-            notifiers.remove(info);\n+    void removeDeadNotifier(NotifierArgs info) {\n+        lock.lock();\n+        try {\n+            if (debug) {\n+                System.err.println(\"EventSupport.removeDeadNotifier: \" + info.name);\n+            }\n+            if (notifiers != null) {\n+                \/\/ Only do this if cleanup() not been triggered, otherwise here\n+                \/\/ will throw NullPointerException since notifiers will be set to\n+                \/\/ null in cleanup()\n+                notifiers.remove(info);\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -266,11 +295,13 @@\n-    synchronized void fireUnsolicited(Object obj) {\n-        if (debug) {\n-            System.err.println(\"EventSupport.fireUnsolicited: \" + obj + \" \"\n-                + unsolicited);\n-        }\n-        if (unsolicited == null || unsolicited.size() == 0) {\n-            \/\/ This shouldn't really happen, but might in case\n-            \/\/ there is a timing problem that removes a listener\n-            \/\/ before a fired event reaches here.\n-            return;\n-        }\n+    void fireUnsolicited(Object obj) {\n+        lock.lock();\n+        try {\n+            if (debug) {\n+                System.err.println(\"EventSupport.fireUnsolicited: \" + obj + \" \"\n+                        + unsolicited);\n+            }\n+            if (unsolicited == null || unsolicited.size() == 0) {\n+                \/\/ This shouldn't really happen, but might in case\n+                \/\/ there is a timing problem that removes a listener\n+                \/\/ before a fired event reaches here.\n+                return;\n+            }\n@@ -278,1 +309,1 @@\n-        if (obj instanceof UnsolicitedNotification) {\n+            if (obj instanceof UnsolicitedNotification) {\n@@ -280,1 +311,1 @@\n-            \/\/ Fire UnsolicitedNotification to unsolicited listeners\n+                \/\/ Fire UnsolicitedNotification to unsolicited listeners\n@@ -282,3 +313,3 @@\n-            UnsolicitedNotificationEvent evt =\n-                new UnsolicitedNotificationEvent(ctx, (UnsolicitedNotification)obj);\n-            queueEvent(evt, unsolicited);\n+                UnsolicitedNotificationEvent evt =\n+                        new UnsolicitedNotificationEvent(ctx, (UnsolicitedNotification) obj);\n+                queueEvent(evt, unsolicited);\n@@ -286,1 +317,1 @@\n-        } else if (obj instanceof NamingException) {\n+            } else if (obj instanceof NamingException) {\n@@ -288,1 +319,1 @@\n-            \/\/ Fire NamingExceptionEvent to unsolicited listeners.\n+                \/\/ Fire NamingExceptionEvent to unsolicited listeners.\n@@ -290,3 +321,3 @@\n-            NamingExceptionEvent evt =\n-                new NamingExceptionEvent(ctx, (NamingException)obj);\n-            queueEvent(evt, unsolicited);\n+                NamingExceptionEvent evt =\n+                        new NamingExceptionEvent(ctx, (NamingException) obj);\n+                queueEvent(evt, unsolicited);\n@@ -294,5 +325,5 @@\n-            \/\/ When an exception occurs, the unsolicited listeners\n-            \/\/ are automatically deregistered.\n-            \/\/ When LdapClient.processUnsolicited() fires a NamingException,\n-            \/\/ it will update its listener list so we don't have to.\n-            \/\/ Likewise for LdapCtx.\n+                \/\/ When an exception occurs, the unsolicited listeners\n+                \/\/ are automatically deregistered.\n+                \/\/ When LdapClient.processUnsolicited() fires a NamingException,\n+                \/\/ it will update its listener list so we don't have to.\n+                \/\/ Likewise for LdapCtx.\n@@ -300,1 +331,4 @@\n-            unsolicited = null;\n+                unsolicited = null;\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -309,5 +343,9 @@\n-    synchronized void cleanup() {\n-        if (debug) System.err.println(\"EventSupport clean up\");\n-        if (notifiers != null) {\n-            for (NamingEventNotifier notifier : notifiers.values()) {\n-                notifier.stop();\n+    void cleanup() {\n+        lock.lock();\n+        try {\n+            if (debug) System.err.println(\"EventSupport clean up\");\n+            if (notifiers != null) {\n+                for (NamingEventNotifier notifier : notifiers.values()) {\n+                    notifier.stop();\n+                }\n+                notifiers = null;\n@@ -315,5 +353,7 @@\n-            notifiers = null;\n-        }\n-        if (eventQueue != null) {\n-            eventQueue.stop();\n-            eventQueue = null;\n+            if (eventQueue != null) {\n+                eventQueue.stop();\n+                eventQueue = null;\n+            }\n+            \/\/ %%% Should we fire NamingExceptionEvents to unsolicited listeners?\n+        } finally {\n+            lock.unlock();\n@@ -321,1 +361,0 @@\n-        \/\/ %%% Should we fire NamingExceptionEvents to unsolicited listeners?\n@@ -335,6 +374,26 @@\n-    synchronized void queueEvent(EventObject event,\n-                                 Vector<? extends NamingListener> vector) {\n-        if (notifiers == null) {\n-            \/\/ That means cleanup() already done, not queue event anymore,\n-            \/\/ otherwise, new created EventQueue will not been cleanup.\n-            return;\n+    void queueEvent(EventObject event,\n+                    Vector<? extends NamingListener> vector) {\n+        lock.lock();\n+        try {\n+            if (notifiers == null) {\n+                \/\/ That means cleanup() already done, not queue event anymore,\n+                \/\/ otherwise, new created EventQueue will not been cleanup.\n+                return;\n+            }\n+            if (eventQueue == null)\n+                eventQueue = new EventQueue();\n+\n+            \/*\n+             * Copy the vector in order to freeze the state of the set\n+             * of EventListeners the event should be delivered to prior\n+             * to delivery.  This ensures that any changes made to the\n+             * Vector from a target listener's method during the delivery\n+             * of this event will not take effect until after the event is\n+             * delivered.\n+             *\/\n+            @SuppressWarnings(\"unchecked\") \/\/ clone()\n+            Vector<NamingListener> v =\n+                    (Vector<NamingListener>) vector.clone();\n+            eventQueue.enqueue(event, v);\n+        } finally {\n+            lock.unlock();\n@@ -342,15 +401,0 @@\n-        if (eventQueue == null)\n-            eventQueue = new EventQueue();\n-\n-        \/*\n-         * Copy the vector in order to freeze the state of the set\n-         * of EventListeners the event should be delivered to prior\n-         * to delivery.  This ensures that any changes made to the\n-         * Vector from a target listener's method during the delivery\n-         * of this event will not take effect until after the event is\n-         * delivered.\n-         *\/\n-        @SuppressWarnings(\"unchecked\") \/\/ clone()\n-        Vector<NamingListener> v =\n-                (Vector<NamingListener>)vector.clone();\n-        eventQueue.enqueue(event, v);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/EventSupport.java","additions":175,"deletions":131,"binary":false,"changes":306,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -128,0 +129,2 @@\n+    \/\/ LdapClient instance lock, accessed by LdapCtx\n+    final ReentrantLock lock = new ReentrantLock();\n@@ -148,2 +151,7 @@\n-    synchronized boolean authenticateCalled() {\n-        return authenticateCalled;\n+    boolean authenticateCalled() {\n+        lock.lock();\n+        try {\n+            return authenticateCalled;\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -152,2 +160,1 @@\n-    synchronized LdapResult\n-    authenticate(boolean initial, String name, Object pw, int version,\n+    LdapResult authenticate(boolean initial, String name, Object pw, int version,\n@@ -156,5 +163,1 @@\n-\n-        int readTimeout = conn.readTimeout;\n-        conn.readTimeout = conn.connectTimeout;\n-        LdapResult res = null;\n-\n+        lock.lock();\n@@ -162,2 +165,3 @@\n-            authenticateCalled = true;\n-\n+            int readTimeout = conn.readTimeout;\n+            conn.readTimeout = conn.connectTimeout;\n+            LdapResult res;\n@@ -165,6 +169,1 @@\n-                ensureOpen();\n-            } catch (IOException e) {\n-                NamingException ne = new CommunicationException();\n-                ne.setRootCause(e);\n-                throw ne;\n-            }\n+                authenticateCalled = true;\n@@ -172,12 +171,7 @@\n-            switch (version) {\n-            case LDAP_VERSION3_VERSION2:\n-            case LDAP_VERSION3:\n-                isLdapv3 = true;\n-                break;\n-            case LDAP_VERSION2:\n-                isLdapv3 = false;\n-                break;\n-            default:\n-                throw new CommunicationException(\"Protocol version \" + version +\n-                    \" not supported\");\n-            }\n+                try {\n+                    ensureOpen();\n+                } catch (IOException e) {\n+                    NamingException ne = new CommunicationException();\n+                    ne.setRootCause(e);\n+                    throw ne;\n+                }\n@@ -185,2 +179,12 @@\n-            if (authMechanism.equalsIgnoreCase(\"none\") ||\n-                authMechanism.equalsIgnoreCase(\"anonymous\")) {\n+                switch (version) {\n+                    case LDAP_VERSION3_VERSION2:\n+                    case LDAP_VERSION3:\n+                        isLdapv3 = true;\n+                        break;\n+                    case LDAP_VERSION2:\n+                        isLdapv3 = false;\n+                        break;\n+                    default:\n+                        throw new CommunicationException(\"Protocol version \" + version +\n+                                \" not supported\");\n+                }\n@@ -188,6 +192,31 @@\n-                \/\/ Perform LDAP bind if we are reauthenticating, using LDAPv2,\n-                \/\/ supporting failover to LDAPv2, or controls have been supplied.\n-                if (!initial ||\n-                    (version == LDAP_VERSION2) ||\n-                    (version == LDAP_VERSION3_VERSION2) ||\n-                    ((ctls != null) && (ctls.length > 0))) {\n+                if (authMechanism.equalsIgnoreCase(\"none\") ||\n+                        authMechanism.equalsIgnoreCase(\"anonymous\")) {\n+\n+                    \/\/ Perform LDAP bind if we are reauthenticating, using LDAPv2,\n+                    \/\/ supporting failover to LDAPv2, or controls have been supplied.\n+                    if (!initial ||\n+                            (version == LDAP_VERSION2) ||\n+                            (version == LDAP_VERSION3_VERSION2) ||\n+                            ((ctls != null) && (ctls.length > 0))) {\n+                        try {\n+                            \/\/ anonymous bind; update name\/pw for LDAPv2 retry\n+                            res = ldapBind(name = null, (byte[]) (pw = null), ctls, null,\n+                                    false);\n+                            if (res.status == LdapClient.LDAP_SUCCESS) {\n+                                conn.setBound();\n+                            }\n+                        } catch (IOException e) {\n+                            NamingException ne =\n+                                    new CommunicationException(\"anonymous bind failed: \" +\n+                                            conn.host + \":\" + conn.port);\n+                            ne.setRootCause(e);\n+                            throw ne;\n+                        }\n+                    } else {\n+                        \/\/ Skip LDAP bind for LDAPv3 anonymous bind\n+                        res = new LdapResult();\n+                        res.status = LdapClient.LDAP_SUCCESS;\n+                    }\n+                } else if (authMechanism.equalsIgnoreCase(\"simple\")) {\n+                    \/\/ simple authentication\n+                    byte[] encodedPw = null;\n@@ -195,3 +224,2 @@\n-                        \/\/ anonymous bind; update name\/pw for LDAPv2 retry\n-                        res = ldapBind(name=null, (byte[])(pw=null), ctls, null,\n-                            false);\n+                        encodedPw = encodePassword(pw, isLdapv3);\n+                        res = ldapBind(name, encodedPw, ctls, null, false);\n@@ -203,2 +231,2 @@\n-                            new CommunicationException(\"anonymous bind failed: \" +\n-                            conn.host + \":\" + conn.port);\n+                                new CommunicationException(\"simple bind failed: \" +\n+                                        conn.host + \":\" + conn.port);\n@@ -207,27 +235,7 @@\n-                    }\n-                } else {\n-                    \/\/ Skip LDAP bind for LDAPv3 anonymous bind\n-                    res = new LdapResult();\n-                    res.status = LdapClient.LDAP_SUCCESS;\n-                }\n-            } else if (authMechanism.equalsIgnoreCase(\"simple\")) {\n-                \/\/ simple authentication\n-                byte[] encodedPw = null;\n-                try {\n-                    encodedPw = encodePassword(pw, isLdapv3);\n-                    res = ldapBind(name, encodedPw, ctls, null, false);\n-                    if (res.status == LdapClient.LDAP_SUCCESS) {\n-                        conn.setBound();\n-                    }\n-                } catch (IOException e) {\n-                    NamingException ne =\n-                        new CommunicationException(\"simple bind failed: \" +\n-                            conn.host + \":\" + conn.port);\n-                    ne.setRootCause(e);\n-                    throw ne;\n-                } finally {\n-                    \/\/ If pw was copied to a new array, clear that array as\n-                    \/\/ a security precaution.\n-                    if (encodedPw != pw && encodedPw != null) {\n-                        for (int i = 0; i < encodedPw.length; i++) {\n-                            encodedPw[i] = 0;\n+                    } finally {\n+                        \/\/ If pw was copied to a new array, clear that array as\n+                        \/\/ a security precaution.\n+                        if (encodedPw != pw && encodedPw != null) {\n+                            for (int i = 0; i < encodedPw.length; i++) {\n+                                encodedPw[i] = 0;\n+                            }\n@@ -236,8 +244,14 @@\n-                }\n-            } else if (isLdapv3) {\n-                \/\/ SASL authentication\n-                try {\n-                    res = LdapSasl.saslBind(this, conn, conn.host, name, pw,\n-                        authMechanism, env, ctls);\n-                    if (res.status == LdapClient.LDAP_SUCCESS) {\n-                        conn.setBound();\n+                } else if (isLdapv3) {\n+                    \/\/ SASL authentication\n+                    try {\n+                        res = LdapSasl.saslBind(this, conn, conn.host, name, pw,\n+                                authMechanism, env, ctls);\n+                        if (res.status == LdapClient.LDAP_SUCCESS) {\n+                            conn.setBound();\n+                        }\n+                    } catch (IOException e) {\n+                        NamingException ne =\n+                                new CommunicationException(\"SASL bind failed: \" +\n+                                        conn.host + \":\" + conn.port);\n+                        ne.setRootCause(e);\n+                        throw ne;\n@@ -245,6 +259,2 @@\n-                } catch (IOException e) {\n-                    NamingException ne =\n-                        new CommunicationException(\"SASL bind failed: \" +\n-                        conn.host + \":\" + conn.port);\n-                    ne.setRootCause(e);\n-                    throw ne;\n+                } else {\n+                    throw new AuthenticationNotSupportedException(authMechanism);\n@@ -252,3 +262,0 @@\n-            } else {\n-                throw new AuthenticationNotSupportedException(authMechanism);\n-            }\n@@ -256,30 +263,31 @@\n-            \/\/\n-            \/\/ re-try login using v2 if failing over\n-            \/\/\n-            if (initial &&\n-                (res.status == LdapClient.LDAP_PROTOCOL_ERROR) &&\n-                (version == LdapClient.LDAP_VERSION3_VERSION2) &&\n-                (authMechanism.equalsIgnoreCase(\"none\") ||\n-                    authMechanism.equalsIgnoreCase(\"anonymous\") ||\n-                    authMechanism.equalsIgnoreCase(\"simple\"))) {\n-\n-                byte[] encodedPw = null;\n-                try {\n-                    isLdapv3 = false;\n-                    encodedPw = encodePassword(pw, false);\n-                    res = ldapBind(name, encodedPw, ctls, null, false);\n-                    if (res.status == LdapClient.LDAP_SUCCESS) {\n-                        conn.setBound();\n-                    }\n-                } catch (IOException e) {\n-                    NamingException ne =\n-                        new CommunicationException(authMechanism + \":\" +\n-                            conn.host +     \":\" + conn.port);\n-                    ne.setRootCause(e);\n-                    throw ne;\n-                } finally {\n-                    \/\/ If pw was copied to a new array, clear that array as\n-                    \/\/ a security precaution.\n-                    if (encodedPw != pw && encodedPw != null) {\n-                        for (int i = 0; i < encodedPw.length; i++) {\n-                            encodedPw[i] = 0;\n+                \/\/\n+                \/\/ re-try login using v2 if failing over\n+                \/\/\n+                if (initial &&\n+                        (res.status == LdapClient.LDAP_PROTOCOL_ERROR) &&\n+                        (version == LdapClient.LDAP_VERSION3_VERSION2) &&\n+                        (authMechanism.equalsIgnoreCase(\"none\") ||\n+                                authMechanism.equalsIgnoreCase(\"anonymous\") ||\n+                                authMechanism.equalsIgnoreCase(\"simple\"))) {\n+\n+                    byte[] encodedPw = null;\n+                    try {\n+                        isLdapv3 = false;\n+                        encodedPw = encodePassword(pw, false);\n+                        res = ldapBind(name, encodedPw, ctls, null, false);\n+                        if (res.status == LdapClient.LDAP_SUCCESS) {\n+                            conn.setBound();\n+                        }\n+                    } catch (IOException e) {\n+                        NamingException ne =\n+                                new CommunicationException(authMechanism + \":\" +\n+                                        conn.host + \":\" + conn.port);\n+                        ne.setRootCause(e);\n+                        throw ne;\n+                    } finally {\n+                        \/\/ If pw was copied to a new array, clear that array as\n+                        \/\/ a security precaution.\n+                        if (encodedPw != pw && encodedPw != null) {\n+                            for (int i = 0; i < encodedPw.length; i++) {\n+                                encodedPw[i] = 0;\n+                            }\n@@ -289,1 +297,0 @@\n-            }\n@@ -291,9 +298,14 @@\n-            \/\/ principal name not found\n-            \/\/ (map NameNotFoundException to AuthenticationException)\n-            \/\/ %%% This is a workaround for Netscape servers returning\n-            \/\/ %%% no such object when the principal name is not found\n-            \/\/ %%% Note that when this workaround is applied, it does not allow\n-            \/\/ %%% response controls to be recorded by the calling context\n-            if (res.status == LdapClient.LDAP_NO_SUCH_OBJECT) {\n-                throw new AuthenticationException(\n-                    getErrorMessage(res.status, res.errorMessage));\n+                \/\/ principal name not found\n+                \/\/ (map NameNotFoundException to AuthenticationException)\n+                \/\/ %%% This is a workaround for Netscape servers returning\n+                \/\/ %%% no such object when the principal name is not found\n+                \/\/ %%% Note that when this workaround is applied, it does not allow\n+                \/\/ %%% response controls to be recorded by the calling context\n+                if (res.status == LdapClient.LDAP_NO_SUCH_OBJECT) {\n+                    throw new AuthenticationException(\n+                            getErrorMessage(res.status, res.errorMessage));\n+                }\n+                conn.setV3(isLdapv3);\n+                return res;\n+            } finally {\n+                conn.readTimeout = readTimeout;\n@@ -301,2 +313,0 @@\n-            conn.setV3(isLdapv3);\n-            return res;\n@@ -304,1 +314,1 @@\n-            conn.readTimeout = readTimeout;\n+            lock.unlock();\n@@ -316,1 +326,1 @@\n-    public synchronized LdapResult ldapBind(String dn, byte[]toServer,\n+    public LdapResult ldapBind(String dn, byte[]toServer,\n@@ -318,1 +328,1 @@\n-        throws java.io.IOException, NamingException {\n+            throws IOException, NamingException {\n@@ -320,1 +330,3 @@\n-        ensureOpen();\n+        lock.lock();\n+        try {\n+            ensureOpen();\n@@ -322,2 +334,2 @@\n-        \/\/ flush outstanding requests\n-        conn.abandonOutstandingReqs(null);\n+            \/\/ flush outstanding requests\n+            conn.abandonOutstandingReqs(null);\n@@ -325,4 +337,4 @@\n-        BerEncoder ber = new BerEncoder();\n-        int curMsgId = conn.getMsgId();\n-        LdapResult res = new LdapResult();\n-        res.status = LDAP_OPERATIONS_ERROR;\n+            BerEncoder ber = new BerEncoder();\n+            int curMsgId = conn.getMsgId();\n+            LdapResult res = new LdapResult();\n+            res.status = LDAP_OPERATIONS_ERROR;\n@@ -330,4 +342,4 @@\n-        \/\/\n-        \/\/ build the bind request.\n-        \/\/\n-        ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);\n+            \/\/\n+            \/\/ build the bind request.\n+            \/\/\n+            ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);\n@@ -336,12 +348,15 @@\n-                ber.encodeInt(isLdapv3 ? LDAP_VERSION3 : LDAP_VERSION2);\n-                ber.encodeString(dn, isLdapv3);\n-\n-                \/\/ if authentication mechanism specified, it is SASL\n-                if (auth != null) {\n-                    ber.beginSeq(Ber.ASN_CONTEXT | Ber.ASN_CONSTRUCTOR | 3);\n-                        ber.encodeString(auth, isLdapv3);    \/\/ SASL mechanism\n-                        if (toServer != null) {\n-                            ber.encodeOctetString(toServer,\n-                                Ber.ASN_OCTET_STR);\n-                        }\n-                    ber.endSeq();\n+            ber.encodeInt(isLdapv3 ? LDAP_VERSION3 : LDAP_VERSION2);\n+            ber.encodeString(dn, isLdapv3);\n+\n+            \/\/ if authentication mechanism specified, it is SASL\n+            if (auth != null) {\n+                ber.beginSeq(Ber.ASN_CONTEXT | Ber.ASN_CONSTRUCTOR | 3);\n+                ber.encodeString(auth, isLdapv3);    \/\/ SASL mechanism\n+                if (toServer != null) {\n+                    ber.encodeOctetString(toServer,\n+                            Ber.ASN_OCTET_STR);\n+                }\n+                ber.endSeq();\n+            } else {\n+                if (toServer != null) {\n+                    ber.encodeOctetString(toServer, Ber.ASN_CONTEXT);\n@@ -349,5 +364,1 @@\n-                    if (toServer != null) {\n-                        ber.encodeOctetString(toServer, Ber.ASN_CONTEXT);\n-                    } else {\n-                        ber.encodeOctetString(null, Ber.ASN_CONTEXT, 0, 0);\n-                    }\n+                    ber.encodeOctetString(null, Ber.ASN_CONTEXT, 0, 0);\n@@ -355,0 +366,1 @@\n+            }\n@@ -361,1 +373,1 @@\n-        ber.endSeq();\n+            ber.endSeq();\n@@ -363,4 +375,4 @@\n-        LdapRequest req = conn.writeRequest(ber, curMsgId, pauseAfterReceipt);\n-        if (toServer != null) {\n-            ber.reset();        \/\/ clear internally-stored password\n-        }\n+            LdapRequest req = conn.writeRequest(ber, curMsgId, pauseAfterReceipt);\n+            if (toServer != null) {\n+                ber.reset();        \/\/ clear internally-stored password\n+            }\n@@ -368,2 +380,2 @@\n-        \/\/ Read reply\n-        BerDecoder rber = conn.readReply(req);\n+            \/\/ Read reply\n+            BerDecoder rber = conn.readReply(req);\n@@ -371,5 +383,5 @@\n-        rber.parseSeq(null);    \/\/ init seq\n-        rber.parseInt();        \/\/ msg id\n-        if (rber.parseByte() !=  LDAP_REP_BIND) {\n-            return res;\n-        }\n+            rber.parseSeq(null);    \/\/ init seq\n+            rber.parseInt();        \/\/ msg id\n+            if (rber.parseByte() != LDAP_REP_BIND) {\n+                return res;\n+            }\n@@ -377,2 +389,2 @@\n-        rber.parseLength();\n-        parseResult(rber, res, isLdapv3);\n+            rber.parseLength();\n+            parseResult(rber, res, isLdapv3);\n@@ -380,6 +392,6 @@\n-        \/\/ handle server's credentials (if present)\n-        if (isLdapv3 &&\n-            (rber.bytesLeft() > 0) &&\n-            (rber.peekByte() == (Ber.ASN_CONTEXT | 7))) {\n-            res.serverCreds = rber.parseOctetString((Ber.ASN_CONTEXT | 7), null);\n-        }\n+            \/\/ handle server's credentials (if present)\n+            if (isLdapv3 &&\n+                (rber.bytesLeft() > 0) &&\n+                (rber.peekByte() == (Ber.ASN_CONTEXT | 7))) {\n+                res.serverCreds = rber.parseOctetString((Ber.ASN_CONTEXT | 7), null);\n+            }\n@@ -387,1 +399,1 @@\n-        res.resControls = isLdapv3 ? parseControls(rber) : null;\n+            res.resControls = isLdapv3 ? parseControls(rber) : null;\n@@ -389,2 +401,5 @@\n-        conn.removeRequest(req);\n-        return res;\n+            conn.removeRequest(req);\n+            return res;\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -409,4 +424,9 @@\n-    synchronized void incRefCount() {\n-        ++referenceCount;\n-        if (debug > 1) {\n-            System.err.println(\"LdapClient.incRefCount: \" + referenceCount + \" \" + this);\n+    void incRefCount() {\n+        lock.lock();\n+        try {\n+            ++referenceCount;\n+            if (debug > 1) {\n+                System.err.println(\"LdapClient.incRefCount: \" + referenceCount + \" \" + this);\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -414,1 +434,0 @@\n-\n@@ -437,2 +456,4 @@\n-    synchronized void close(Control[] reqCtls, boolean hardClose) {\n-        --referenceCount;\n+    void close(Control[] reqCtls, boolean hardClose) {\n+        lock.lock();\n+        try {\n+            --referenceCount;\n@@ -440,5 +461,5 @@\n-        if (debug > 1) {\n-            System.err.println(\"LdapClient: \" + this);\n-            System.err.println(\"LdapClient: close() called: \" + referenceCount);\n-            (new Throwable()).printStackTrace();\n-        }\n+            if (debug > 1) {\n+                System.err.println(\"LdapClient: \" + this);\n+                System.err.println(\"LdapClient: close() called: \" + referenceCount);\n+                (new Throwable()).printStackTrace();\n+            }\n@@ -446,9 +467,4 @@\n-        if (referenceCount <= 0) {\n-            if (debug > 0) System.err.println(\"LdapClient: closed connection \" + this);\n-            if (!pooled) {\n-                \/\/ Not being pooled; continue with closing\n-                conn.cleanup(reqCtls, false);\n-            } else {\n-                \/\/ Pooled\n-                \/\/ Is this a real close or a request to return conn to pool\n-                if (hardClose) {\n+            if (referenceCount <= 0) {\n+                if (debug > 0) System.err.println(\"LdapClient: closed connection \" + this);\n+                if (!pooled) {\n+                    \/\/ Not being pooled; continue with closing\n@@ -456,1 +472,0 @@\n-                    pcb.removePooledConnection(this);\n@@ -458,1 +473,8 @@\n-                    pcb.releasePooledConnection(this);\n+                    \/\/ Pooled\n+                    \/\/ Is this a real close or a request to return conn to pool\n+                    if (hardClose) {\n+                        conn.cleanup(reqCtls, false);\n+                        pcb.removePooledConnection(this);\n+                    } else {\n+                        pcb.releasePooledConnection(this);\n+                    }\n@@ -461,0 +483,2 @@\n+        } finally {\n+            lock.unlock();\n@@ -490,2 +514,7 @@\n-    public synchronized void closeConnection() {\n-        forceClose(false); \/\/ this is a pool callback so no need to clean pool\n+    public void closeConnection() {\n+        lock.lock();\n+        try {\n+            forceClose(false); \/\/ this is a pool callback so no need to clean pool\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -1494,1 +1523,2 @@\n-    private Vector<LdapCtx> unsolicited = new Vector<>(3);\n+    private final Vector<LdapCtx> unsolicited = new Vector<>(3);\n+    private final ReentrantLock unsolicitedLock = new ReentrantLock();\n@@ -1536,1 +1566,2 @@\n-            synchronized (unsolicited) {\n+            unsolicitedLock.lock();\n+            try {\n@@ -1554,0 +1585,2 @@\n+            } finally {\n+                unsolicitedLock.unlock();\n@@ -1582,1 +1615,2 @@\n-        synchronized (unsolicited) {\n+        unsolicitedLock.lock();\n+        try {\n@@ -1587,0 +1621,2 @@\n+        } finally {\n+            unsolicitedLock.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapClient.java","additions":247,"deletions":211,"binary":false,"changes":458,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -303,0 +304,1 @@\n+    private final ReentrantLock lock = new ReentrantLock(); \/\/ LdapCtx instance lock\n@@ -2652,5 +2654,7 @@\n-    public synchronized void close() throws NamingException {\n-        if (debug) {\n-            System.err.println(\"LdapCtx: close() called \" + this);\n-            (new Throwable()).printStackTrace();\n-        }\n+    public void close() throws NamingException {\n+        lock.lock();\n+        try {\n+            if (debug) {\n+                System.err.println(\"LdapCtx: close() called \" + this);\n+                (new Throwable()).printStackTrace();\n+            }\n@@ -2658,5 +2662,5 @@\n-        \/\/ Event (normal and unsolicited)\n-        if (eventSupport != null) {\n-            eventSupport.cleanup(); \/\/ idempotent\n-            removeUnsolicited();\n-        }\n+            \/\/ Event (normal and unsolicited)\n+            if (eventSupport != null) {\n+                eventSupport.cleanup(); \/\/ idempotent\n+                removeUnsolicited();\n+            }\n@@ -2664,6 +2668,10 @@\n-        \/\/ Enumerations that are keeping the connection alive\n-        if (enumCount > 0) {\n-            if (debug)\n-                System.err.println(\"LdapCtx: close deferred\");\n-            closeRequested = true;\n-            return;\n+            \/\/ Enumerations that are keeping the connection alive\n+            if (enumCount > 0) {\n+                if (debug)\n+                    System.err.println(\"LdapCtx: close deferred\");\n+                closeRequested = true;\n+                return;\n+            }\n+            closeConnection(SOFT_CLOSE);\n+        } finally {\n+            lock.unlock();\n@@ -2671,1 +2679,0 @@\n-        closeConnection(SOFT_CLOSE);\n@@ -2788,1 +2795,3 @@\n-                synchronized (clnt) {\n+                ReentrantLock clientLock = clnt.lock;\n+                clientLock.lock();\n+                try {\n@@ -2795,0 +2804,2 @@\n+                } finally {\n+                    clientLock.unlock();\n@@ -2894,1 +2905,3 @@\n-            synchronized (clnt.conn.startTlsLock) {\n+            ReentrantLock startTlsLock = clnt.conn.startTlsLock;\n+            startTlsLock.lock();\n+            try {\n@@ -2898,0 +2911,2 @@\n+            } finally {\n+                startTlsLock.unlock();\n@@ -2970,3 +2985,8 @@\n-    synchronized void incEnumCount() {\n-        ++enumCount;\n-        if (debug) System.err.println(\"LdapCtx: \" + this + \" enum inc: \" + enumCount);\n+    void incEnumCount() {\n+        lock.lock();\n+        try {\n+            ++enumCount;\n+            if (debug) System.err.println(\"LdapCtx: \" + this + \" enum inc: \" + enumCount);\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -2975,3 +2995,5 @@\n-    synchronized void decEnumCount() {\n-        --enumCount;\n-        if (debug) System.err.println(\"LdapCtx: \" + this + \" enum dec: \" + enumCount);\n+    void decEnumCount() {\n+        lock.lock();\n+        try {\n+            --enumCount;\n+            if (debug) System.err.println(\"LdapCtx: \" + this + \" enum dec: \" + enumCount);\n@@ -2979,5 +3001,6 @@\n-        if (enumCount == 0 && closeRequested) {\n-            try {\n-                close();\n-            } catch (NamingException e) {\n-                \/\/ ignore failures\n+            if (enumCount == 0 && closeRequested) {\n+                try {\n+                    close();\n+                } catch (NamingException e) {\n+                    \/\/ ignore failures\n+                }\n@@ -2985,0 +3008,2 @@\n+        } finally {\n+            lock.unlock();\n@@ -3579,5 +3604,8 @@\n-    public void addNamingListener(String nm, String filter, SearchControls ctls,\n-        NamingListener l) throws NamingException {\n-            if (eventSupport == null)\n-                eventSupport = new EventSupport(this);\n-            eventSupport.addNamingListener(getTargetName(new CompositeName(nm)),\n+    public void addNamingListener(String nm, String filter,\n+                                  SearchControls ctls, NamingListener l)\n+            throws NamingException {\n+\n+        if (eventSupport == null)\n+            eventSupport = new EventSupport(this);\n+\n+        eventSupport.addNamingListener(getTargetName(new CompositeName(nm)),\n@@ -3586,4 +3614,4 @@\n-            \/\/ If first time asking for unsol\n-            if (l instanceof UnsolicitedNotificationListener && !unsolicited) {\n-                addUnsolicited();\n-            }\n+        \/\/ If first time asking for unsol\n+        if (l instanceof UnsolicitedNotificationListener && !unsolicited) {\n+            addUnsolicited();\n+        }\n@@ -3656,1 +3684,3 @@\n-        synchronized (eventSupport) {\n+        ReentrantLock eventSupportLock = eventSupport.lock;\n+        eventSupportLock.lock();\n+        try {\n@@ -3659,0 +3689,2 @@\n+        } finally {\n+            eventSupportLock.unlock();\n@@ -3685,1 +3717,3 @@\n-        synchronized(eventSupport) {\n+        ReentrantLock eventSupportLock = eventSupport.lock;\n+        eventSupportLock.lock();\n+        try {\n@@ -3690,0 +3724,2 @@\n+        } finally {\n+            eventSupportLock.unlock();\n@@ -3702,1 +3738,3 @@\n-        synchronized(eventSupport) {\n+        ReentrantLock eventSupportLock = eventSupport.lock;\n+        eventSupportLock.lock();\n+        try {\n@@ -3713,0 +3751,2 @@\n+        } finally {\n+            eventSupportLock.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapCtx.java","additions":83,"deletions":43,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -46,1 +47,1 @@\n-    private static final Object LOCK = new int[0];\n+    private static final ReentrantLock LOCK = new ReentrantLock();\n@@ -78,1 +79,2 @@\n-        synchronized (LOCK) {\n+        LOCK.lock();\n+        try {\n@@ -81,0 +83,2 @@\n+        } finally {\n+            LOCK.unlock();\n@@ -99,1 +103,2 @@\n-        synchronized (LOCK) {\n+        LOCK.lock();\n+        try {\n@@ -106,0 +111,2 @@\n+        } finally {\n+            LOCK.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapDnsProviderService.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import javax.naming.NamingException;\n@@ -34,0 +33,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -49,0 +49,2 @@\n+    \/\/ LdapRequest instance lock\n+    private final ReentrantLock lock = new ReentrantLock();\n@@ -65,3 +67,8 @@\n-    synchronized void close() {\n-        closed = true;\n-        replies.offer(EOF);\n+    void close() {\n+        lock.lock();\n+        try {\n+            closed = true;\n+            replies.offer(EOF);\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -74,8 +81,2 @@\n-    synchronized boolean addReplyBer(BerDecoder ber) {\n-        \/\/ check the closed boolean value here as we don't want anything\n-        \/\/ to be added to the queue after close() has been called.\n-        if (cancelled || closed) {\n-            return false;\n-        }\n-\n-        \/\/ peek at the BER buffer to check if it is a SearchResultDone PDU\n+    boolean addReplyBer(BerDecoder ber) {\n+        lock.lock();\n@@ -83,7 +84,5 @@\n-            ber.parseSeq(null);\n-            ber.parseInt();\n-            completed = (ber.peekByte() == LdapClient.LDAP_REP_RESULT);\n-        } catch (IOException e) {\n-            \/\/ ignore\n-        }\n-        ber.reset();\n+            \/\/ check the closed boolean value here as we don't want anything\n+            \/\/ to be added to the queue after close() has been called.\n+            if (cancelled || closed) {\n+                return false;\n+            }\n@@ -91,6 +90,9 @@\n-        \/\/ Add a new reply to the queue of unprocessed replies.\n-        try {\n-            replies.put(ber);\n-        } catch (InterruptedException e) {\n-            \/\/ ignore\n-        }\n+            \/\/ peek at the BER buffer to check if it is a SearchResultDone PDU\n+            try {\n+                ber.parseSeq(null);\n+                ber.parseInt();\n+                completed = (ber.peekByte() == LdapClient.LDAP_REP_RESULT);\n+            } catch (IOException e) {\n+                \/\/ ignore\n+            }\n+            ber.reset();\n@@ -98,1 +100,11 @@\n-        return pauseAfterReceipt;\n+            \/\/ Add a new reply to the queue of unprocessed replies.\n+            try {\n+                replies.put(ber);\n+            } catch (InterruptedException e) {\n+                \/\/ ignore\n+            }\n+\n+            return pauseAfterReceipt;\n+        } finally {\n+            lock.unlock();\n+        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapRequest.java","additions":39,"deletions":27,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.util.concurrent.locks.ReentrantLock;\n+\n@@ -397,0 +399,3 @@\n+        \/\/ SchemaInfo instance lock\n+        private final ReentrantLock lock = new ReentrantLock();\n+\n@@ -407,4 +412,9 @@\n-        synchronized void close() throws NamingException {\n-            if (schemaEntry != null) {\n-                schemaEntry.close();\n-                schemaEntry = null;\n+        void close() throws NamingException {\n+            lock.lock();\n+            try {\n+                if (schemaEntry != null) {\n+                    schemaEntry.close();\n+                    schemaEntry = null;\n+                }\n+            } finally {\n+                lock.unlock();\n@@ -420,1 +430,1 @@\n-        synchronized void modifyAttributes(Hashtable<?,?> env,\n+        void modifyAttributes(Hashtable<?,?> env,\n@@ -423,2 +433,8 @@\n-            if (schemaEntry == null) {\n-                schemaEntry = reopenEntry(env);\n+            lock.lock();\n+            try {\n+                if (schemaEntry == null) {\n+                    schemaEntry = reopenEntry(env);\n+                }\n+                schemaEntry.modifyAttributes(\"\", mods);\n+            } finally {\n+                lock.unlock();\n@@ -426,1 +442,0 @@\n-            schemaEntry.modifyAttributes(\"\", mods);\n@@ -429,1 +444,1 @@\n-        synchronized void modifyAttributes(Hashtable<?,?> env, int mod,\n+        void modifyAttributes(Hashtable<?,?> env, int mod,\n@@ -431,2 +446,8 @@\n-            if (schemaEntry == null) {\n-                schemaEntry = reopenEntry(env);\n+            lock.lock();\n+            try {\n+                if (schemaEntry == null) {\n+                    schemaEntry = reopenEntry(env);\n+                }\n+                schemaEntry.modifyAttributes(\"\", mod, attrs);\n+            } finally {\n+                lock.unlock();\n@@ -434,1 +455,0 @@\n-            schemaEntry.modifyAttributes(\"\", mod, attrs);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapSchemaCtx.java","additions":33,"deletions":13,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.locks.ReentrantLock;\n+\n@@ -49,0 +51,2 @@\n+    \/\/ ConnectionDesc instance lock\n+    private final ReentrantLock lock = new ReentrantLock();\n@@ -85,9 +89,14 @@\n-    synchronized boolean release() {\n-        d(\"release()\");\n-        if (state == BUSY) {\n-            state = IDLE;\n-\n-            idleSince = System.currentTimeMillis();\n-            return true;  \/\/ Connection released, ready for reuse\n-        } else {\n-            return false; \/\/ Connection wasn't busy to begin with\n+    boolean release() {\n+        lock.lock();\n+        try {\n+            d(\"release()\");\n+            if (state == BUSY) {\n+                state = IDLE;\n+\n+                idleSince = System.currentTimeMillis();\n+                return true;  \/\/ Connection released, ready for reuse\n+            } else {\n+                return false; \/\/ Connection wasn't busy to begin with\n+            }\n+        } finally {\n+            lock.unlock();\n@@ -103,7 +112,14 @@\n-    synchronized PooledConnection tryUse() {\n-        d(\"tryUse()\");\n-\n-        if (state == IDLE) {\n-            state = BUSY;\n-            ++useCount;\n-            return conn;\n+    PooledConnection tryUse() {\n+        lock.lock();\n+        try {\n+            d(\"tryUse()\");\n+\n+            if (state == IDLE) {\n+                state = BUSY;\n+                ++useCount;\n+                return conn;\n+            }\n+\n+            return null;\n+        } finally {\n+            lock.unlock();\n@@ -111,2 +127,0 @@\n-\n-        return null;\n@@ -124,12 +138,17 @@\n-    synchronized boolean expire(long threshold) {\n-        if (state == IDLE && idleSince < threshold) {\n-\n-            d(\"expire(): expired\");\n-\n-            state = EXPIRED;\n-            conn.closeConnection();  \/\/ Close real connection\n-\n-            return true;  \/\/ Expiration successful\n-        } else {\n-            d(\"expire(): not expired\");\n-            return false; \/\/ Expiration did not occur\n+    boolean expire(long threshold) {\n+        lock.lock();\n+        try {\n+            if (state == IDLE && idleSince < threshold) {\n+\n+                d(\"expire(): expired\");\n+\n+                state = EXPIRED;\n+                conn.closeConnection();  \/\/ Close real connection\n+\n+                return true;  \/\/ Expiration successful\n+            } else {\n+                d(\"expire(): not expired\");\n+                return false; \/\/ Expiration did not occur\n+            }\n+        } finally {\n+            lock.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/pool\/ConnectionDesc.java","additions":50,"deletions":31,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import javax.naming.CommunicationException;\n@@ -321,3 +320,8 @@\n-    synchronized void close() {\n-        expire(System.currentTimeMillis());     \/\/ Expire idle connections\n-        closed = true;   \/\/ Close in-use connections when they are returned\n+    void close() {\n+        lock.lock();\n+        try {\n+            expire(System.currentTimeMillis());     \/\/ Expire idle connections\n+            closed = true;   \/\/ Close in-use connections when they are returned\n+        } finally {\n+            lock.unlock();\n+        }\n@@ -333,1 +337,2 @@\n-        synchronized (this) {\n+        lock.lock();\n+        try {\n@@ -351,0 +356,2 @@\n+        } finally {\n+          lock.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/pool\/Connections.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,0 +97,1 @@\n+    private final ReentrantLock mapLock = new ReentrantLock();\n@@ -128,1 +129,2 @@\n-            synchronized (map) {\n+            mapLock.lock();\n+            try {\n@@ -130,0 +132,2 @@\n+            } finally {\n+                mapLock.unlock();\n@@ -162,1 +166,2 @@\n-        synchronized (map) {\n+        mapLock.lock();\n+        try {\n@@ -182,0 +187,2 @@\n+        } finally {\n+            mapLock.unlock();\n@@ -237,1 +244,2 @@\n-        synchronized (map) {\n+        mapLock.lock();\n+        try {\n@@ -239,0 +247,2 @@\n+        } finally {\n+            mapLock.unlock();\n@@ -251,1 +261,2 @@\n-        synchronized (map) {\n+        mapLock.lock();\n+        try {\n@@ -253,0 +264,2 @@\n+        } finally {\n+            mapLock.unlock();\n@@ -291,1 +304,2 @@\n-        synchronized (map) {\n+        mapLock.lock();\n+        try {\n@@ -299,0 +313,2 @@\n+        } finally {\n+            mapLock.unlock();\n@@ -305,2 +321,5 @@\n-        synchronized (map) {\n-            return super.toString() + \" \" + map.toString();\n+        mapLock.lock();\n+        try {\n+            return super.toString() + \" \" + map;\n+        } finally {\n+            mapLock.unlock();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/pool\/Pool.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,0 @@\n-import org.xml.sax.SAXNotRecognizedException;\n-import org.xml.sax.SAXNotSupportedException;\n@@ -65,1 +63,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: July 2023\n@@ -472,3 +470,6 @@\n-        try {\n-            final XMLReader reader = JdkXmlUtils.getXMLReader(_overrideDefaultParser,\n-                    _xsltc.isSecureProcessing());\n+        final XMLReader reader = JdkXmlUtils.getXMLReader(\n+                (XMLSecurityManager)_xsltc.getProperty(JdkConstants.SECURITY_MANAGER),\n+                _overrideDefaultParser,\n+                _xsltc.isSecureProcessing(),\n+                _xsltc.getFeature(JdkXmlFeatures.XmlFeature.USE_CATALOG),\n+                (CatalogFeatures)_xsltc.getProperty(JdkXmlFeatures.CATALOG_FEATURES));\n@@ -476,2 +477,2 @@\n-            JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, XMLConstants.ACCESS_EXTERNAL_DTD,\n-                    _xsltc.getProperty(XMLConstants.ACCESS_EXTERNAL_DTD), true);\n+        JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, XMLConstants.ACCESS_EXTERNAL_DTD,\n+                _xsltc.getProperty(XMLConstants.ACCESS_EXTERNAL_DTD), true);\n@@ -479,0 +480,3 @@\n+        \/\/ try setting other JDK-impl properties, ignore if not supported\n+        JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkConstants.CDATA_CHUNK_SIZE,\n+            _xsltc.getProperty(JdkConstants.CDATA_CHUNK_SIZE), false);\n@@ -480,50 +484,1 @@\n-            boolean supportCatalog = true;\n-            boolean useCatalog = _xsltc.getFeature(JdkXmlFeatures.XmlFeature.USE_CATALOG);\n-            try {\n-                reader.setFeature(JdkXmlUtils.USE_CATALOG, useCatalog);\n-            }\n-            catch (SAXNotRecognizedException | SAXNotSupportedException e) {\n-                supportCatalog = false;\n-            }\n-\n-            if (supportCatalog && useCatalog) {\n-                try {\n-                    CatalogFeatures cf = (CatalogFeatures)_xsltc.getProperty(JdkXmlFeatures.CATALOG_FEATURES);\n-                        if (cf != null) {\n-                            for (CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n-                                reader.setProperty(f.getPropertyName(), cf.get(f));\n-                            }\n-                        }\n-                } catch (SAXNotRecognizedException e) {\n-                    \/\/shall not happen for internal settings\n-                }\n-            }\n-\n-            String lastProperty = \"\";\n-            try {\n-                XMLSecurityManager securityManager =\n-                        (XMLSecurityManager)_xsltc.getProperty(JdkConstants.SECURITY_MANAGER);\n-                for (XMLSecurityManager.Limit limit : XMLSecurityManager.Limit.values()) {\n-                    if (limit.isSupported(XMLSecurityManager.Processor.PARSER)) {\n-                        lastProperty = limit.apiProperty();\n-                        reader.setProperty(lastProperty, securityManager.getLimitValueAsString(limit));\n-                    }\n-                }\n-                if (securityManager.printEntityCountInfo()) {\n-                    lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n-                    reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n-                }\n-            } catch (SAXException se) {\n-                XMLSecurityManager.printWarning(reader.getClass().getName(), lastProperty, se);\n-            }\n-\n-            \/\/ try setting other JDK-impl properties, ignore if not supported\n-            JdkXmlUtils.setXMLReaderPropertyIfSupport(reader, JdkConstants.CDATA_CHUNK_SIZE,\n-                _xsltc.getProperty(JdkConstants.CDATA_CHUNK_SIZE), false);\n-\n-            return(parse(reader, input));\n-        }\n-        catch (SAXException e) {\n-            reportError(ERROR, new ErrorMsg(e.getMessage()));\n-        }\n-        return null;\n+        return(parse(reader, input));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/Parser.java","additions":14,"deletions":59,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+ *\n+ * @LastModified: July 2023\n@@ -67,2 +69,5 @@\n-        XMLReader parent = JdkXmlUtils.getXMLReader(_overrideDefaultParser,\n-                _transformer.isSecureProcessing());\n+        XMLReader parent = JdkXmlUtils.getXMLReader(_transformer._securityManager,\n+                _overrideDefaultParser,\n+                _transformer.isSecureProcessing(),\n+                _transformer._useCatalog,\n+                _transformer._catalogFeatures);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TrAXFilter.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,0 @@\n-import jdk.xml.internal.JdkConstants;\n-import jdk.xml.internal.XMLSecurityManager;\n@@ -74,0 +72,1 @@\n+import jdk.xml.internal.JdkConstants;\n@@ -81,0 +80,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -91,1 +91,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: July 2023\n@@ -506,1 +506,1 @@\n-            cfBuilder = CatalogFeatures.builder().with(Feature.FILES, _catalogFiles);\n+            cfBuilder = cfBuilder.with(Feature.FILES, _catalogFiles);\n@@ -510,1 +510,1 @@\n-            cfBuilder = CatalogFeatures.builder().with(Feature.DEFER, _catalogDefer);\n+            cfBuilder = cfBuilder.with(Feature.DEFER, _catalogDefer);\n@@ -514,1 +514,1 @@\n-            cfBuilder = CatalogFeatures.builder().with(Feature.PREFER, _catalogPrefer);\n+            cfBuilder = cfBuilder.with(Feature.PREFER, _catalogPrefer);\n@@ -518,1 +518,1 @@\n-            cfBuilder = CatalogFeatures.builder().with(Feature.RESOLVE, _catalogResolve);\n+            cfBuilder = cfBuilder.with(Feature.RESOLVE, _catalogResolve);\n@@ -768,2 +768,5 @@\n-                    reader = JdkXmlUtils.getXMLReader(_overrideDefaultParser,\n-                            !_isNotSecureProcessing);\n+                    reader = JdkXmlUtils.getXMLReader(_xmlSecurityManager,\n+                            _overrideDefaultParser,\n+                            !_isNotSecureProcessing,\n+                            _xmlFeatures.getFeature(JdkXmlFeatures.XmlFeature.USE_CATALOG),\n+                            _catalogFeatures);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,0 @@\n-import static jdk.xml.internal.JdkConstants.SP_XSLTC_IS_STANDALONE;\n@@ -104,1 +103,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: July 2023\n@@ -222,1 +221,1 @@\n-    private XMLSecurityManager _securityManager;\n+    protected XMLSecurityManager _securityManager;\n@@ -310,1 +309,1 @@\n-            String catalogFiles = _catalogFeatures.get(CatalogFeatures.Feature.DEFER);\n+            String catalogFiles = _catalogFeatures.get(CatalogFeatures.Feature.FILES);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerImpl.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.xml.sax.SAXException;\n@@ -54,1 +53,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: July 2023\n@@ -94,2 +93,6 @@\n-                        reader = JdkXmlUtils.getXMLReader(overrideDefaultParser,\n-                                xsltc.isSecureProcessing());\n+                        reader = JdkXmlUtils.getXMLReader(\n+                                (XMLSecurityManager)xsltc.getProperty(JdkConstants.SECURITY_MANAGER),\n+                                overrideDefaultParser,\n+                                xsltc.isSecureProcessing(),\n+                                xsltc.getFeature(JdkXmlFeatures.XmlFeature.USE_CATALOG),\n+                                (CatalogFeatures)xsltc.getProperty(JdkXmlFeatures.CATALOG_FEATURES));\n@@ -110,21 +113,0 @@\n-                    String lastProperty = \"\";\n-                    try {\n-                        XMLSecurityManager securityManager =\n-                                (XMLSecurityManager)xsltc.getProperty(JdkConstants.SECURITY_MANAGER);\n-                        if (securityManager != null) {\n-                            for (XMLSecurityManager.Limit limit : XMLSecurityManager.Limit.values()) {\n-                                if (limit.isSupported(XMLSecurityManager.Processor.PARSER)) {\n-                                    lastProperty = limit.apiProperty();\n-                                    reader.setProperty(lastProperty,\n-                                            securityManager.getLimitValueAsString(limit));\n-                                }\n-                            }\n-                            if (securityManager.printEntityCountInfo()) {\n-                                lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n-                                reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n-                            }\n-                        }\n-                    } catch (SAXException se) {\n-                        XMLSecurityManager.printWarning(reader.getClass().getName(), lastProperty, se);\n-                    }\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/Util.java","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -59,0 +58,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -74,1 +74,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/dom\/DOMConfigurationImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -39,0 +38,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -48,0 +48,2 @@\n+ *\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n@@ -34,0 +33,1 @@\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n@@ -44,1 +44,1 @@\n- * @LastModified: Aug 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XML11EntityScanner.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -39,0 +38,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -73,1 +73,1 @@\n- * @LastModified: Nov 2022\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XML11NSDocumentScannerImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -44,0 +42,2 @@\n+import jdk.xml.internal.XMLLimitAnalyzer;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -66,1 +66,1 @@\n- * @LastModified: Feb 2020\n+ * @LastModified: July 2023\n@@ -391,0 +391,1 @@\n+        fEntityScanner = fEntityManager.getEntityScanner();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDTDScannerImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -59,0 +57,2 @@\n+import jdk.xml.internal.XMLSecurityManager;\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n@@ -77,1 +77,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -329,0 +329,2 @@\n+    \/\/ DTD Error Code\n+    protected String fDTDErrorCode = null;\n@@ -795,1 +797,1 @@\n-                \/\/ Xerces properties\n+        \/\/ Xerces properties\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDocumentFragmentScannerImpl.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import javax.xml.stream.XMLInputFactory;\n@@ -48,0 +47,2 @@\n+import jdk.xml.internal.JdkConstants;\n+import jdk.xml.internal.JdkProperty.State;\n@@ -49,0 +50,1 @@\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n@@ -70,1 +72,1 @@\n- * @LastModified: Sep 2017\n+ * @LastModified: July 2023\n@@ -261,2 +263,0 @@\n-\n-\n@@ -268,3 +268,0 @@\n-\n-\n-\n@@ -279,1 +276,3 @@\n-        fSupportDTD = ((Boolean)propertyManager.getProperty(XMLInputFactory.SUPPORT_DTD)).booleanValue();\n+\n+        \/\/ Check the DTD setting\n+        checkDTDSetting();\n@@ -282,1 +281,3 @@\n-        fLoadExternalDTD = !((Boolean)propertyManager.getProperty(Constants.ZEPHYR_PROPERTY_PREFIX + Constants.IGNORE_EXTERNAL_DTD)).booleanValue();\n+        fLoadExternalDTD = !((Boolean)propertyManager.getProperty(\n+                Constants.ZEPHYR_PROPERTY_PREFIX + Constants.IGNORE_EXTERNAL_DTD));\n+\n@@ -323,0 +324,3 @@\n+        \/\/ Check the DTD setting\n+        checkDTDSetting();\n+\n@@ -325,1 +329,0 @@\n-        fDisallowDoctype = componentManager.getFeature(DISALLOW_DOCTYPE_DECL_FEATURE, false);\n@@ -358,0 +361,20 @@\n+    \/**\n+     * Checks the DTD settings. Uses the JDK property {@code jdk.xml.dtd.support}\n+     * in all cases except:\n+     *      if the Xerces property is set\n+     *      if the StAX property is set\n+     *\/\n+    private void checkDTDSetting() {\n+        fDisallowDoctype = fSecurityManager.is(Limit.DTD, JdkConstants.DENY);\n+        fSupportDTD = !fSecurityManager.is(Limit.DTD, JdkConstants.IGNORE);\n+        fDTDErrorCode = \"JDK_DTD_DENY\";\n+\n+        if (fSecurityManager.getState(Limit.XERCES_DISALLOW_DTD) == State.APIPROPERTY\n+                || fSecurityManager.getState(Limit.XERCES_DISALLOW_DTD) == State.LEGACY_APIPROPERTY) {\n+            fDisallowDoctype = fSecurityManager.is(Limit.XERCES_DISALLOW_DTD);\n+            fDTDErrorCode = \"DoctypeNotAllowed\";\n+        } else if (fSecurityManager.getState(Limit.STAX_SUPPORT_DTD) == State.APIPROPERTY\n+                || fSecurityManager.getState(Limit.STAX_SUPPORT_DTD) == State.LEGACY_APIPROPERTY) {\n+            fSupportDTD = fSecurityManager.is(Limit.STAX_SUPPORT_DTD);\n+        }\n+    }\n@@ -898,1 +921,1 @@\n-                            reportFatalError(\"DoctypeNotAllowed\", null);\n+                            reportFatalError(fDTDErrorCode, null);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLDocumentScannerImpl.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -62,0 +60,1 @@\n+import jdk.xml.internal.JdkProperty;\n@@ -64,0 +63,3 @@\n+import jdk.xml.internal.XMLLimitAnalyzer;\n+import jdk.xml.internal.XMLSecurityManager;\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n@@ -94,1 +96,1 @@\n- * @LastModified: Aug 2021\n+ * @LastModified: July 2023\n@@ -1547,1 +1549,0 @@\n-        fSupportDTD = ((Boolean)propertyManager.getProperty(XMLInputFactory.SUPPORT_DTD));\n@@ -1566,0 +1567,1 @@\n+        checkSupportDTD();\n@@ -1636,1 +1638,1 @@\n-        fSupportDTD = true;\n+        checkSupportDTD();\n@@ -1662,0 +1664,14 @@\n+    \/**\n+     * Checks the supportDTD setting. Use the StAX supportDTD property if it is\n+     * set, otherwise the jdk.xml.dtd.support. Refer to the module-summary for\n+     * more details.\n+     *\/\n+    private void checkSupportDTD() {\n+        \/\/ SupportDTD set the DTD property, so no longer read from propertyManager\n+        fSupportDTD = !fSecurityManager.is(Limit.DTD, JdkConstants.IGNORE);\n+        if (fSecurityManager.getState(Limit.STAX_SUPPORT_DTD) == JdkProperty.State.APIPROPERTY\n+                || fSecurityManager.getState(Limit.STAX_SUPPORT_DTD) == JdkProperty.State.LEGACY_APIPROPERTY) {\n+            fSupportDTD = fSecurityManager.is(Limit.STAX_SUPPORT_DTD);\n+        }\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n@@ -51,0 +48,3 @@\n+import jdk.xml.internal.XMLLimitAnalyzer;\n+import jdk.xml.internal.XMLSecurityManager;\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n@@ -60,1 +60,1 @@\n- * @LastModified: Mar 2022\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityScanner.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n-\n@@ -40,0 +38,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -58,1 +57,1 @@\n- * @LastModified: Nov 2022\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLNSDocumentScannerImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -44,0 +42,2 @@\n+import jdk.xml.internal.XMLLimitAnalyzer;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -70,1 +70,1 @@\n- * @LastModified: Aug 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLScanner.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,0 +2,3 @@\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#\n@@ -326,0 +329,5 @@\n+\n+# Implementation Property DTD\n+        JDK_DTD_DENY = JAXP00010008: DOCTYPE is disallowed when the DTD property is set to deny. \\\n+                       Refer to: property jdk.xml.dtd.support in java.xml\/module-summary.\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -79,1 +78,1 @@\n-import jdk.xml.internal.JdkXmlFeatures;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -106,1 +105,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/XMLSchemaLoader.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -31,0 +30,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -37,1 +37,1 @@\n- *\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/models\/CMNodeFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -45,0 +44,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -70,1 +70,1 @@\n- * @LastModified: Apr 2022\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSAttributeChecker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -112,0 +111,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -134,1 +134,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -2286,2 +2286,4 @@\n-                    parser = JdkXmlUtils.getXMLReader(fOverrideDefaultParser,\n-                            fSecurityManager.isSecureProcessing());\n+                    parser = JdkXmlUtils.getXMLReader(fSecurityManager,\n+                            fOverrideDefaultParser, fSecurityManager.isSecureProcessing(),\n+                            fUseCatalog,\n+                            JdkXmlUtils.getCatalogFeatures(fDefer, fCatalogFile, fPrefer, fResolve));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSDHandler.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -35,0 +34,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -42,1 +42,1 @@\n- * @LastModified: Mar 2023\n+ * @LastModified: July 2023\n@@ -82,0 +82,2 @@\n+            \/\/ read system properties for compatibility\n+            fSecurityManager.readSystemProperties();\n@@ -235,0 +237,1 @@\n+            fSecurityManager.setSecureProcessing(fSecureProcess);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -50,0 +49,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -62,1 +62,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -143,0 +143,6 @@\n+        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+        domParser.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n+\n+        fSecurityManager = dbf.fSecurityManager;\n+        domParser.setProperty(SECURITY_MANAGER, fSecurityManager);\n+\n@@ -176,6 +182,0 @@\n-        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n-        domParser.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n-\n-        fSecurityManager = new XMLSecurityManager(secureProcessing);\n-        domParser.setProperty(SECURITY_MANAGER, fSecurityManager);\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager;\n@@ -32,0 +33,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -44,0 +46,1 @@\n+ * @LastModified: July 2023\n@@ -68,0 +71,4 @@\n+    \/\/ Security Managers\n+    XMLSecurityManager fSecurityManager = new XMLSecurityManager(true);\n+    XMLSecurityPropertyManager fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+\n@@ -78,0 +85,2 @@\n+            \/\/ read system properties for compatibility\n+            fSecurityManager.readSystemProperties();\n@@ -125,0 +134,1 @@\n+            fSecurityManager.setSecureProcessing(fSecureProcess);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserFactoryImpl.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -48,0 +47,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -66,1 +66,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -134,2 +134,2 @@\n-        fSecurityManager = new XMLSecurityManager(secureProcessing);\n-        fSecurityPropertyMgr = new XMLSecurityPropertyManager();\n+        fSecurityManager = spf.fSecurityManager;\n+        fSecurityPropertyMgr = spf.fSecurityPropertyMgr;\n@@ -415,7 +415,0 @@\n-                try {\n-                    super.setProperty(SECURITY_MANAGER, fSecurityManager);\n-                } catch (SAXException e) {\n-                    throw new UnsupportedOperationException(\n-                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),\n-                    \"property-not-recognized\", new Object [] {SECURITY_MANAGER}), e);\n-                }\n@@ -423,0 +416,8 @@\n+            try {\n+                super.setProperty(SECURITY_MANAGER, fSecurityManager);\n+            } catch (SAXException e) {\n+                throw new UnsupportedOperationException(\n+                SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),\n+                \"property-not-recognized\", new Object [] {SECURITY_MANAGER}), e);\n+            }\n+\n@@ -425,7 +426,7 @@\n-                try {\n-                    super.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n-                } catch (SAXException e) {\n-                    throw new UnsupportedOperationException(\n-                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),\n-                    \"property-not-recognized\", new Object [] {SECURITY_MANAGER}), e);\n-                }\n+            }\n+            try {\n+                super.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);\n+            } catch (SAXException e) {\n+                throw new UnsupportedOperationException(\n+                SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),\n+                \"property-not-recognized\", new Object [] {XML_SECURITY_PROPERTY_MANAGER}), e);\n@@ -565,0 +566,5 @@\n+            if (SECURITY_MANAGER.equals(name)) {\n+                fSecurityManager = XMLSecurityManager.convert(value, fSecurityManager);\n+                super.setProperty(name, value);\n+            }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/SAXParserImpl.java","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -43,0 +42,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -72,0 +72,1 @@\n+                            (XMLSecurityManager)fComponentManager.getProperty(Constants.SECURITY_MANAGER),\n@@ -74,14 +75,0 @@\n-                    XMLSecurityManager securityManager =\n-                            (XMLSecurityManager)fComponentManager.getProperty(Constants.SECURITY_MANAGER);\n-                    if (securityManager != null) {\n-                        for (XMLSecurityManager.Limit limit : XMLSecurityManager.Limit.values()) {\n-                            if (securityManager.isSet(limit.ordinal())){\n-                                tf.setAttribute(limit.apiProperty(),\n-                                        securityManager.getLimitValueAsString(limit));\n-                            }\n-                        }\n-                        if (securityManager.printEntityCountInfo()) {\n-                            tf.setAttribute(JdkConstants.JDK_DEBUG_LIMIT, \"yes\");\n-                        }\n-                    }\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/StAXValidatorHelper.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -34,1 +34,0 @@\n-import javax.xml.catalog.CatalogFeatures;\n@@ -38,1 +37,0 @@\n-import javax.xml.transform.TransformerFactory;\n@@ -45,1 +43,0 @@\n-import jdk.xml.internal.JdkXmlFeatures;\n@@ -55,1 +52,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -144,0 +141,1 @@\n+                            (XMLSecurityManager)fComponentManager.getProperty(Constants.SECURITY_MANAGER),\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/StreamValidatorHelper.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl;\n@@ -39,1 +38,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -66,1 +64,0 @@\n-import javax.xml.parsers.SAXParserFactory;\n@@ -74,0 +71,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -98,1 +96,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -679,2 +677,6 @@\n-                    reader = JdkXmlUtils.getXMLReader(fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER),\n-                            fComponentManager.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING));\n+                    reader = JdkXmlUtils.getXMLReader(\n+                            (XMLSecurityManager)fComponentManager.getProperty(SECURITY_MANAGER),\n+                            fComponentManager.getFeature(JdkConstants.OVERRIDE_PARSER),\n+                            fComponentManager.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING),\n+                            fComponentManager.getFeature(XMLConstants.USE_CATALOG),\n+                            null);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/ValidatorHandlerImpl.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -59,0 +58,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -73,1 +73,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -53,1 +52,1 @@\n-import jdk.xml.internal.JdkXmlUtils;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -61,1 +60,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/validation\/XMLSchemaValidatorComponentManager.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -53,0 +52,2 @@\n+import jdk.xml.internal.JdkProperty;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -81,1 +82,1 @@\n- * @LastModified: Sep 2019\n+ * @LastModified: July 2023\n@@ -1672,5 +1673,5 @@\n-            \/\/\n-            \/\/ Default handling\n-            \/\/\n-\n-            fConfiguration.setFeature(featureId, state);\n+            \/\/ Handle security setting\n+            if (!securityManager.setLimit(featureId, JdkProperty.State.APIPROPERTY, state)) {\n+                \/\/fall back to the default configuration\n+                fConfiguration.setFeature(featureId, state);\n+            }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/AbstractSAXParser.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -45,0 +44,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -63,1 +63,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n@@ -453,3 +453,4 @@\n-            \/\/\n-            \/\/ Default handling\n-            \/\/\n+            if (!securityManager.setLimit(featureId, JdkProperty.State.APIPROPERTY, state)) {\n+                \/\/fall back to the default configuration\n+                fConfiguration.setFeature(featureId, state);\n+            }\n@@ -457,1 +458,0 @@\n-            fConfiguration.setFeature(featureId, state);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/DOMParser.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -31,0 +30,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -42,1 +42,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SAXParser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +27,1 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -47,1 +46,1 @@\n- *\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/SecurityConfiguration.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -32,1 +31,1 @@\n-\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -52,1 +51,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/parsers\/XMLParser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,251 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.org.apache.xerces.internal.utils;\n-\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n-import java.util.Formatter;\n-import java.util.HashMap;\n-import java.util.Map;\n-import jdk.xml.internal.JdkConstants;\n-\n-\/**\n- * A helper for analyzing entity expansion limits\n- *\n- * @author Joe Wang Oracle Corp.\n- *\n- *\/\n-public final class XMLLimitAnalyzer {\n-\n-    \/**\n-     * Map old property names with the new ones\n-     *\/\n-    public static enum NameMap {\n-        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n-\n-        final String newName;\n-        final String oldName;\n-\n-        NameMap(String newName, String oldName) {\n-            this.newName = newName;\n-            this.oldName = oldName;\n-        }\n-\n-        String getOldName(String newName) {\n-            if (newName.equals(this.newName)) {\n-                return oldName;\n-            }\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Max value accumulated for each property\n-     *\/\n-    private final int[] values;\n-    \/**\n-     * Names of the entities corresponding to their max values\n-     *\/\n-    private final String[] names;\n-    \/**\n-     * Total value of accumulated entities\n-     *\/\n-    private final int[] totalValue;\n-\n-    \/**\n-     * Maintain values of the top 10 elements in the process of parsing\n-     *\/\n-    private final Map<String, Integer>[] caches;\n-\n-    private String entityStart, entityEnd;\n-    \/**\n-     * Default constructor. Establishes default values for known security\n-     * vulnerabilities.\n-     *\/\n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-    public XMLLimitAnalyzer() {\n-        values = new int[Limit.values().length];\n-        totalValue = new int[Limit.values().length];\n-        names = new String[Limit.values().length];\n-        caches = new Map[Limit.values().length];\n-    }\n-\n-    \/**\n-     * Add the value to the current max count for the specified property\n-     * To find the max value of all entities, set no limit\n-     *\n-     * @param limit the type of the property\n-     * @param entityName the name of the entity\n-     * @param value the value of the entity\n-     *\/\n-    public void addValue(Limit limit, String entityName, int value) {\n-        addValue(limit.ordinal(), entityName, value);\n-    }\n-\n-    \/**\n-     * Add the value to the current count by the index of the property\n-     * @param index the index of the property\n-     * @param entityName the name of the entity\n-     * @param value the value of the entity\n-     *\/\n-    public void addValue(int index, String entityName, int value) {\n-        if (index == Limit.ENTITY_EXPANSION_LIMIT.ordinal() ||\n-                index == Limit.MAX_OCCUR_NODE_LIMIT.ordinal() ||\n-                index == Limit.ELEMENT_ATTRIBUTE_LIMIT.ordinal() ||\n-                index == Limit.TOTAL_ENTITY_SIZE_LIMIT.ordinal() ||\n-                index == Limit.ENTITY_REPLACEMENT_LIMIT.ordinal()\n-                ) {\n-            totalValue[index] += value;\n-            return;\n-        }\n-        if (index == Limit.MAX_ELEMENT_DEPTH_LIMIT.ordinal() ||\n-                index == Limit.MAX_NAME_LIMIT.ordinal()) {\n-            values[index] = value;\n-            totalValue[index] = value;\n-            return;\n-        }\n-\n-        Map<String, Integer> cache;\n-        if (caches[index] == null) {\n-            cache = new HashMap<>(10);\n-            caches[index] = cache;\n-        } else {\n-            cache = caches[index];\n-        }\n-\n-        int accumulatedValue = value;\n-        if (cache.containsKey(entityName)) {\n-            accumulatedValue += cache.get(entityName);\n-            cache.put(entityName, accumulatedValue);\n-        } else {\n-            cache.put(entityName, value);\n-        }\n-\n-        if (accumulatedValue > values[index]) {\n-            values[index] = accumulatedValue;\n-            names[index] = entityName;\n-        }\n-\n-\n-        if (index == Limit.GENERAL_ENTITY_SIZE_LIMIT.ordinal() ||\n-                index == Limit.PARAMETER_ENTITY_SIZE_LIMIT.ordinal()) {\n-            totalValue[Limit.TOTAL_ENTITY_SIZE_LIMIT.ordinal()] += value;\n-        }\n-    }\n-\n-    \/**\n-     * Return the value of the current max count for the specified property\n-     *\n-     * @param limit the property\n-     * @return the value of the property\n-     *\/\n-    public int getValue(Limit limit) {\n-        return getValue(limit.ordinal());\n-    }\n-\n-    public int getValue(int index) {\n-        if (index == Limit.ENTITY_REPLACEMENT_LIMIT.ordinal()) {\n-            return totalValue[index];\n-        }\n-        return values[index];\n-    }\n-    \/**\n-     * Return the total value accumulated so far\n-     *\n-     * @param limit the property\n-     * @return the accumulated value of the property\n-     *\/\n-    public int getTotalValue(Limit limit) {\n-        return totalValue[limit.ordinal()];\n-    }\n-\n-    public int getTotalValue(int index) {\n-        return totalValue[index];\n-    }\n-    \/**\n-     * Return the current max value (count or length) by the index of a property\n-     * @param index the index of a property\n-     * @return count of a property\n-     *\/\n-    public int getValueByIndex(int index) {\n-        return values[index];\n-    }\n-\n-    public void startEntity(String name) {\n-        entityStart = name;\n-    }\n-\n-    public boolean isTracking(String name) {\n-        if (entityStart == null) {\n-            return false;\n-        }\n-        return entityStart.equals(name);\n-    }\n-    \/**\n-     * Stop tracking the entity\n-     * @param limit the limit property\n-     * @param name the name of an entity\n-     *\/\n-    public void endEntity(Limit limit, String name) {\n-        entityStart = \"\";\n-        Map<String, Integer> cache = caches[limit.ordinal()];\n-        if (cache != null) {\n-            cache.remove(name);\n-        }\n-    }\n-\n-    \/**\n-     * Resets the current value of the specified limit.\n-     * @param limit The limit to be reset.\n-     *\/\n-    public void reset(Limit limit) {\n-        if (limit.ordinal() == Limit.TOTAL_ENTITY_SIZE_LIMIT.ordinal()) {\n-            totalValue[limit.ordinal()] = 0;\n-        } else if (limit.ordinal() == Limit.GENERAL_ENTITY_SIZE_LIMIT.ordinal()) {\n-            names[limit.ordinal()] = null;\n-            values[limit.ordinal()] = 0;\n-            caches[limit.ordinal()] = null;\n-            totalValue[limit.ordinal()] = 0;\n-        }\n-    }\n-\n-    public void debugPrint(XMLSecurityManager securityManager) {\n-        Formatter formatter = new Formatter();\n-        System.out.println(formatter.format(\"%30s %15s %15s %15s %30s\",\n-                \"Property\",\"Limit\",\"Total size\",\"Size\",\"Entity Name\"));\n-\n-        for (Limit limit : Limit.values()) {\n-            formatter = new Formatter();\n-            System.out.println(formatter.format(\"%30s %15d %15d %15d %30s\",\n-                    limit.name(),\n-                    securityManager.getLimit(limit),\n-                    totalValue[limit.ordinal()],\n-                    values[limit.ordinal()],\n-                    names[limit.ordinal()]));\n-        }\n-    }\n-}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLLimitAnalyzer.java","additions":0,"deletions":251,"binary":false,"changes":251,"status":"deleted"},{"patch":"@@ -1,638 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.org.apache.xerces.internal.utils;\n-\n-import com.sun.org.apache.xerces.internal.util.SecurityManager;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import jdk.xml.internal.JdkConstants;\n-import jdk.xml.internal.JdkProperty.State;\n-import jdk.xml.internal.JdkProperty.ImplPropMap;\n-import jdk.xml.internal.SecuritySupport;\n-import org.xml.sax.SAXException;\n-\n-\/**\n- * This class manages standard and implementation-specific limitations.\n- *\n- *\/\n-public final class XMLSecurityManager {\n-\n-    \/**\n-     * Limits managed by the security manager\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    public static enum Limit {\n-\n-        ENTITY_EXPANSION_LIMIT(\"EntityExpansionLimit\",\n-                JdkConstants.JDK_ENTITY_EXPANSION_LIMIT, JdkConstants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000),\n-        MAX_OCCUR_NODE_LIMIT(\"MaxOccurLimit\",\n-                JdkConstants.JDK_MAX_OCCUR_LIMIT, JdkConstants.SP_MAX_OCCUR_LIMIT, 0, 5000),\n-        ELEMENT_ATTRIBUTE_LIMIT(\"ElementAttributeLimit\",\n-                JdkConstants.JDK_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000),\n-        TOTAL_ENTITY_SIZE_LIMIT(\"TotalEntitySizeLimit\",\n-                JdkConstants.JDK_TOTAL_ENTITY_SIZE_LIMIT, JdkConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000),\n-        GENERAL_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\",\n-                JdkConstants.JDK_GENERAL_ENTITY_SIZE_LIMIT, JdkConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0),\n-        PARAMETER_ENTITY_SIZE_LIMIT(\"MaxEntitySizeLimit\",\n-                JdkConstants.JDK_PARAMETER_ENTITY_SIZE_LIMIT, JdkConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000),\n-        MAX_ELEMENT_DEPTH_LIMIT(\"MaxElementDepthLimit\",\n-                JdkConstants.JDK_MAX_ELEMENT_DEPTH, JdkConstants.SP_MAX_ELEMENT_DEPTH, 0, 0),\n-        MAX_NAME_LIMIT(\"MaxXMLNameLimit\",\n-                JdkConstants.JDK_XML_NAME_LIMIT, JdkConstants.SP_XML_NAME_LIMIT, 1000, 1000),\n-        ENTITY_REPLACEMENT_LIMIT(\"EntityReplacementLimit\",\n-                JdkConstants.JDK_ENTITY_REPLACEMENT_LIMIT, JdkConstants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000);\n-\n-        final String key;\n-        final String apiProperty;\n-        final String systemProperty;\n-        final int defaultValue;\n-        final int secureValue;\n-\n-        Limit(String key, String apiProperty, String systemProperty, int value, int secureValue) {\n-            this.key = key;\n-            this.apiProperty = apiProperty;\n-            this.systemProperty = systemProperty;\n-            this.defaultValue = value;\n-            this.secureValue = secureValue;\n-        }\n-\n-        \/**\n-         * Checks whether the specified name is a limit. Checks both the\n-         * property and System Property which is now the new property name.\n-         *\n-         * @param name the specified name\n-         * @return true if there is a match, false otherwise\n-         *\/\n-        public boolean is(String name) {\n-            \/\/ current spec: new property name == systemProperty\n-            return (systemProperty != null && systemProperty.equals(name)) ||\n-                   \/\/ current spec: apiProperty is legacy\n-                   (apiProperty.equals(name));\n-        }\n-\n-        \/**\n-         * Returns the state of a property name. By the specification as of JDK 17,\n-         * the \"jdk.xml.\" prefixed System property name is also the current API\n-         * name. The URI-based qName is legacy.\n-         *\n-         * @param name the property name\n-         * @return the state of the property name, null if no match\n-         *\/\n-        public State getState(String name) {\n-            if (systemProperty != null && systemProperty.equals(name)) {\n-                return State.APIPROPERTY;\n-            } else if (apiProperty.equals(name)) {\n-                \/\/the URI-style qName is legacy\n-                return State.LEGACY_APIPROPERTY;\n-            }\n-            return null;\n-        }\n-\n-        public String key() {\n-            return key;\n-        }\n-\n-        public String apiProperty() {\n-            return apiProperty;\n-        }\n-\n-        public String systemProperty() {\n-            return systemProperty;\n-        }\n-\n-        public int defaultValue() {\n-            return defaultValue;\n-        }\n-\n-        int secureValue() {\n-            return secureValue;\n-        }\n-    }\n-\n-    \/**\n-     * Map old property names with the new ones\n-     *\/\n-    public static enum NameMap {\n-\n-        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n-        final String newName;\n-        final String oldName;\n-\n-        NameMap(String newName, String oldName) {\n-            this.newName = newName;\n-            this.oldName = oldName;\n-        }\n-\n-        String getOldName(String newName) {\n-            if (newName.equals(this.newName)) {\n-                return oldName;\n-            }\n-            return null;\n-        }\n-    }\n-    private static final int NO_LIMIT = 0;\n-    \/**\n-     * Values of the properties\n-     *\/\n-    private final int[] values;\n-    \/**\n-     * States of the settings for each property\n-     *\/\n-    private State[] states;\n-    \/**\n-     * Flag indicating if secure processing is set\n-     *\/\n-    boolean secureProcessing;\n-\n-    \/**\n-     * States that determine if properties are set explicitly\n-     *\/\n-    private boolean[] isSet;\n-\n-\n-    \/**\n-     * Index of the special entityCountInfo property\n-     *\/\n-    private final int indexEntityCountInfo = 10000;\n-    private String printEntityCountInfo = \"\";\n-\n-    \/**\n-     * Default constructor. Establishes default values for known security\n-     * vulnerabilities.\n-     *\/\n-    public XMLSecurityManager() {\n-        this(false);\n-    }\n-\n-    \/**\n-     * Instantiate Security Manager in accordance with the status of\n-     * secure processing\n-     * @param secureProcessing\n-     *\/\n-    public XMLSecurityManager(boolean secureProcessing) {\n-        values = new int[Limit.values().length];\n-        states = new State[Limit.values().length];\n-        isSet = new boolean[Limit.values().length];\n-        this.secureProcessing = secureProcessing;\n-        for (Limit limit : Limit.values()) {\n-            if (secureProcessing) {\n-                values[limit.ordinal()] = limit.secureValue;\n-                states[limit.ordinal()] = State.FSP;\n-            } else {\n-                values[limit.ordinal()] = limit.defaultValue();\n-                states[limit.ordinal()] = State.DEFAULT;\n-            }\n-        }\n-        \/\/read system properties or jaxp.properties\n-        readSystemProperties();\n-    }\n-\n-    \/**\n-     * Setting FEATURE_SECURE_PROCESSING explicitly\n-     *\/\n-    public void setSecureProcessing(boolean secure) {\n-        secureProcessing = secure;\n-        for (Limit limit : Limit.values()) {\n-            if (secure) {\n-                setLimit(limit.ordinal(), State.FSP, limit.secureValue());\n-            } else {\n-                setLimit(limit.ordinal(), State.FSP, limit.defaultValue());\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Return the state of secure processing\n-     * @return the state of secure processing\n-     *\/\n-    public boolean isSecureProcessing() {\n-        return secureProcessing;\n-    }\n-\n-    \/**\n-     * Finds a limit's new name with the given property name.\n-     * @param propertyName the property name specified\n-     * @return the limit's new name if found, null otherwise\n-     *\/\n-    public String find(String propertyName) {\n-        for (Limit limit : Limit.values()) {\n-            if (limit.is(propertyName)) {\n-                \/\/ current spec: new property name == systemProperty\n-                return limit.systemProperty();\n-            }\n-        }\n-        \/\/ENTITYCOUNT's new name is qName\n-        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n-            return ImplPropMap.ENTITYCOUNT.qName();\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Set limit by property name and state\n-     * @param propertyName property name\n-     * @param state the state of the property\n-     * @param value the value of the property\n-     * @return true if the property is managed by the security manager; false\n-     *              if otherwise.\n-     *\/\n-    public boolean setLimit(String propertyName, State state, Object value) {\n-        int index = getIndex(propertyName);\n-        if (index > -1) {\n-            State pState = state;\n-            if (index != indexEntityCountInfo && state == State.APIPROPERTY) {\n-                pState = (Limit.values()[index]).getState(propertyName);\n-            }\n-            setLimit(index, pState, value);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Set the value for a specific limit.\n-     *\n-     * @param limit the limit\n-     * @param state the state of the property\n-     * @param value the value of the property\n-     *\/\n-    public void setLimit(Limit limit, State state, int value) {\n-        setLimit(limit.ordinal(), state, value);\n-    }\n-\n-    \/**\n-     * Set the value of a property by its index\n-     *\n-     * @param index the index of the property\n-     * @param state the state of the property\n-     * @param value the value of the property\n-     *\/\n-    public void setLimit(int index, State state, Object value) {\n-        if (index == indexEntityCountInfo) {\n-            printEntityCountInfo = (String)value;\n-        } else {\n-            int temp;\n-            if (value instanceof Integer) {\n-                temp = (Integer)value;\n-            } else {\n-                temp = Integer.parseInt((String) value);\n-                if (temp < 0) {\n-                    temp = 0;\n-                }\n-            }\n-            setLimit(index, state, temp);\n-        }\n-    }\n-\n-    \/**\n-     * Set the value of a property by its index\n-     *\n-     * @param index the index of the property\n-     * @param state the state of the property\n-     * @param value the value of the property\n-     *\/\n-    public void setLimit(int index, State state, int value) {\n-        if (index == indexEntityCountInfo) {\n-            \/\/if it's explicitly set, it's treated as yes no matter the value\n-            printEntityCountInfo = JdkConstants.JDK_YES;\n-        } else {\n-            \/\/only update if it shall override\n-            if (state.compareTo(states[index]) >= 0) {\n-                values[index] = value;\n-                states[index] = state;\n-                isSet[index] = true;\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Return the value of the specified property\n-     *\n-     * @param propertyName the property name\n-     * @return the value of the property as a string. If a property is managed\n-     * by this manager, its value shall not be null.\n-     *\/\n-    public String getLimitAsString(String propertyName) {\n-        int index = getIndex(propertyName);\n-        if (index > -1) {\n-            return getLimitValueByIndex(index);\n-        }\n-\n-        return null;\n-    }\n-    \/**\n-     * Return the value of the specified property\n-     *\n-     * @param limit the property\n-     * @return the value of the property\n-     *\/\n-    public int getLimit(Limit limit) {\n-        return values[limit.ordinal()];\n-    }\n-\n-    \/**\n-     * Return the value of a property by its ordinal\n-     *\n-     * @param limit the property\n-     * @return value of a property\n-     *\/\n-    public String getLimitValueAsString(Limit limit) {\n-        return Integer.toString(values[limit.ordinal()]);\n-    }\n-\n-    \/**\n-     * Return the value of a property by its ordinal\n-     *\n-     * @param index the index of a property\n-     * @return limit of a property as a string\n-     *\/\n-    public String getLimitValueByIndex(int index) {\n-        if (index == indexEntityCountInfo) {\n-            return printEntityCountInfo;\n-        }\n-\n-        return Integer.toString(values[index]);\n-    }\n-\n-    \/**\n-     * Return the state of the limit property\n-     *\n-     * @param limit the limit\n-     * @return the state of the limit property\n-     *\/\n-    public State getState(Limit limit) {\n-        return states[limit.ordinal()];\n-    }\n-\n-    \/**\n-     * Return the state of the limit property\n-     *\n-     * @param limit the limit\n-     * @return the state of the limit property\n-     *\/\n-    public String getStateLiteral(Limit limit) {\n-        return states[limit.ordinal()].literal();\n-    }\n-\n-    \/**\n-     * Get the index by property name\n-     *\n-     * @param propertyName property name\n-     * @return the index of the property if found; return -1 if not\n-     *\/\n-    public int getIndex(String propertyName) {\n-        for (Limit limit : Limit.values()) {\n-            \/\/ see JDK-8265248, accept both the URL and jdk.xml as prefix\n-            if (limit.is(propertyName)) {\n-                \/\/internally, ordinal is used as index\n-                return limit.ordinal();\n-            }\n-        }\n-        \/\/special property to return entity count info\n-        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n-            return indexEntityCountInfo;\n-        }\n-        return -1;\n-    }\n-\n-    \/**\n-     * Check if there's no limit defined by the Security Manager\n-     * @param limit\n-     * @return\n-     *\/\n-    public boolean isNoLimit(int limit) {\n-        return limit==NO_LIMIT;\n-    }\n-    \/**\n-     * Check if the size (length or count) of the specified limit property is\n-     * over the limit\n-     *\n-     * @param limit the type of the limit property\n-     * @param entityName the name of the entity\n-     * @param size the size (count or length) of the entity\n-     * @return true if the size is over the limit, false otherwise\n-     *\/\n-    public boolean isOverLimit(Limit limit, String entityName, int size,\n-            XMLLimitAnalyzer limitAnalyzer) {\n-        return isOverLimit(limit.ordinal(), entityName, size, limitAnalyzer);\n-    }\n-\n-    \/**\n-     * Check if the value (length or count) of the specified limit property is\n-     * over the limit\n-     *\n-     * @param index the index of the limit property\n-     * @param entityName the name of the entity\n-     * @param size the size (count or length) of the entity\n-     * @return true if the size is over the limit, false otherwise\n-     *\/\n-    public boolean isOverLimit(int index, String entityName, int size,\n-            XMLLimitAnalyzer limitAnalyzer) {\n-        if (values[index] == NO_LIMIT) {\n-            return false;\n-        }\n-        if (size > values[index]) {\n-            limitAnalyzer.addValue(index, entityName, size);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Check against cumulated value\n-     *\n-     * @param limit the type of the limit property\n-     * @param size the size (count or length) of the entity\n-     * @return true if the size is over the limit, false otherwise\n-     *\/\n-    public boolean isOverLimit(Limit limit, XMLLimitAnalyzer limitAnalyzer) {\n-        return isOverLimit(limit.ordinal(), limitAnalyzer);\n-    }\n-\n-    public boolean isOverLimit(int index, XMLLimitAnalyzer limitAnalyzer) {\n-        if (values[index] == NO_LIMIT) {\n-            return false;\n-        }\n-\n-        if (index == Limit.ELEMENT_ATTRIBUTE_LIMIT.ordinal() ||\n-                index == Limit.ENTITY_EXPANSION_LIMIT.ordinal() ||\n-                index == Limit.TOTAL_ENTITY_SIZE_LIMIT.ordinal() ||\n-                index == Limit.ENTITY_REPLACEMENT_LIMIT.ordinal() ||\n-                index == Limit.MAX_ELEMENT_DEPTH_LIMIT.ordinal() ||\n-                index == Limit.MAX_NAME_LIMIT.ordinal()\n-                ) {\n-            return (limitAnalyzer.getTotalValue(index) > values[index]);\n-        } else {\n-            return (limitAnalyzer.getValue(index) > values[index]);\n-        }\n-    }\n-\n-    public void debugPrint(XMLLimitAnalyzer limitAnalyzer) {\n-        if (printEntityCountInfo.equals(JdkConstants.JDK_YES)) {\n-            limitAnalyzer.debugPrint(this);\n-        }\n-    }\n-\n-\n-    \/**\n-     * Indicate if a property is set explicitly\n-     * @param index\n-     * @return\n-     *\/\n-    public boolean isSet(int index) {\n-        return isSet[index];\n-    }\n-\n-    public boolean printEntityCountInfo() {\n-        return printEntityCountInfo.equals(JdkConstants.JDK_YES);\n-    }\n-\n-    \/**\n-     * Read system properties, or the configuration file\n-     *\/\n-    private void readSystemProperties() {\n-        for (Limit limit : Limit.values()) {\n-            \/\/ attempts to read both the current and old system propery\n-            if (!getSystemProperty(limit, limit.systemProperty())\n-                    && (!getOldSystemProperty(limit))) {\n-                \/\/if system property is not found, try the config file\n-                getPropertyConfig(limit, limit.systemProperty());\n-            }\n-        }\n-    }\n-\n-    \/\/ Array list to store printed warnings for each SAX parser used\n-    private static final CopyOnWriteArrayList<String> printedWarnings = new CopyOnWriteArrayList<>();\n-\n-    \/**\n-     * Prints out warnings if a parser does not support the specified feature\/property.\n-     *\n-     * @param parserClassName the name of the parser class\n-     * @param propertyName the property name\n-     * @param exception the exception thrown by the parser\n-     *\/\n-    public static void printWarning(String parserClassName, String propertyName, SAXException exception) {\n-        String key = parserClassName+\":\"+propertyName;\n-        if (printedWarnings.addIfAbsent(key)) {\n-            System.err.println( \"Warning: \"+parserClassName+\": \"+exception.getMessage());\n-        }\n-    }\n-\n-    \/**\n-     * Reads a system property, sets value and state if found.\n-     *\n-     * @param limit the limit property\n-     * @param sysPropertyName the name of system property\n-     *\/\n-    private boolean getSystemProperty(Limit limit, String sysPropertyName) {\n-        try {\n-            String value = SecuritySupport.getSystemProperty(sysPropertyName);\n-            if (value != null && !value.equals(\"\")) {\n-                values[limit.ordinal()] = Integer.parseInt(value);\n-                states[limit.ordinal()] = State.SYSTEMPROPERTY;\n-                return true;\n-            }\n-        } catch (NumberFormatException e) {\n-            \/\/invalid setting\n-            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Reads the legacy system property.\n-     * @param limit a limit object\n-     * @return true if found, false otherwise\n-     *\/\n-    private boolean getOldSystemProperty(Limit limit) {\n-        boolean found = false;\n-        for (NameMap nameMap : NameMap.values()) {\n-            String oldName = nameMap.getOldName(limit.systemProperty());\n-            if (oldName != null) {\n-                if (getSystemProperty(limit, oldName)) {\n-                    found = true;\n-                    break;\n-                }\n-            }\n-        }\n-        return found;\n-    }\n-\n-    \/**\n-     * Reads a property from a configuration file, if any.\n-     *\n-     * @param limit the limit property\n-     * @param sysPropertyName the name of system property\n-     * @return\n-     *\/\n-    private boolean getPropertyConfig(Limit limit, String sysPropertyName) {\n-        try {\n-            String value = SecuritySupport.readConfig(sysPropertyName);\n-            if (value != null && !value.equals(\"\")) {\n-                values[limit.ordinal()] = Integer.parseInt(value);\n-                states[limit.ordinal()] = State.JAXPDOTPROPERTIES;\n-                return true;\n-            }\n-        } catch (NumberFormatException e) {\n-            \/\/invalid setting\n-            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Convert a value set through setProperty to XMLSecurityManager.\n-     * If the value is an instance of XMLSecurityManager, use it to override the default;\n-     * If the value is an old SecurityManager, convert to the new XMLSecurityManager.\n-     *\n-     * @param value user specified security manager\n-     * @param securityManager an instance of XMLSecurityManager\n-     * @return an instance of the new security manager XMLSecurityManager\n-     *\/\n-    public static XMLSecurityManager convert(Object value, XMLSecurityManager securityManager) {\n-        if (value == null) {\n-            if (securityManager == null) {\n-                securityManager = new XMLSecurityManager(true);\n-            }\n-            return securityManager;\n-        }\n-        if (value instanceof XMLSecurityManager) {\n-            return (XMLSecurityManager)value;\n-        } else {\n-            if (securityManager == null) {\n-                securityManager = new XMLSecurityManager(true);\n-            }\n-            if (value instanceof SecurityManager) {\n-                SecurityManager origSM = (SecurityManager)value;\n-                securityManager.setLimit(Limit.MAX_OCCUR_NODE_LIMIT, State.APIPROPERTY, origSM.getMaxOccurNodeLimit());\n-                securityManager.setLimit(Limit.ENTITY_EXPANSION_LIMIT, State.APIPROPERTY, origSM.getEntityExpansionLimit());\n-                securityManager.setLimit(Limit.ELEMENT_ATTRIBUTE_LIMIT, State.APIPROPERTY, origSM.getElementAttrLimit());\n-            }\n-            return securityManager;\n-        }\n-    }\n-}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityManager.java","additions":0,"deletions":638,"binary":false,"changes":638,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;\n@@ -83,0 +82,1 @@\n+import jdk.xml.internal.XMLSecurityManager;\n@@ -131,1 +131,1 @@\n- * @LastModified: July 2022\n+ * @LastModified: July 2023\n@@ -1734,0 +1734,5 @@\n+                fChildConfig.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), fCatalogFile);\n+                fChildConfig.setProperty(CatalogFeatures.Feature.DEFER.getPropertyName(), fDefer);\n+                fChildConfig.setProperty(CatalogFeatures.Feature.PREFER.getPropertyName(), fPrefer);\n+                fChildConfig.setProperty(CatalogFeatures.Feature.RESOLVE.getPropertyName(), fResolve);\n+                fChildConfig.setFeature(XMLConstants.USE_CATALOG, fUseCatalog);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/xinclude\/XIncludeHandler.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +23,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;\n-import java.io.IOException;\n@@ -27,0 +24,2 @@\n+import java.io.IOException;\n+import jdk.xml.internal.XMLLimitAnalyzer;\n@@ -42,0 +41,1 @@\n+ * @LastModified: July 2023\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/xni\/parser\/XMLDTDScanner.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @LastModified: Jan 2023\n+ * @LastModified: July 2023\n@@ -126,0 +126,2 @@\n+            JdkXmlUtils.setReaderProperty(reader, _xmlSecurityManager, _useCatalog,\n+                    _catalogFeatures);\n@@ -127,1 +129,2 @@\n-            reader = JdkXmlUtils.getXMLReader(m_overrideDefaultParser, _secureProcessing);\n+            reader = JdkXmlUtils.getXMLReader(_xmlSecurityManager, m_overrideDefaultParser,\n+                    _secureProcessing, _useCatalog, _catalogFeatures);\n@@ -144,36 +147,0 @@\n-        String lastProperty = \"\";\n-        try {\n-            if (_xmlSecurityManager != null) {\n-                for (XMLSecurityManager.Limit limit : XMLSecurityManager.Limit.values()) {\n-                    if (limit.isSupported(XMLSecurityManager.Processor.PARSER)) {\n-                        lastProperty = limit.apiProperty();\n-                        reader.setProperty(lastProperty,\n-                                _xmlSecurityManager.getLimitValueAsString(limit));\n-                    }\n-                }\n-                if (_xmlSecurityManager.printEntityCountInfo()) {\n-                    lastProperty = JdkConstants.JDK_DEBUG_LIMIT;\n-                    reader.setProperty(lastProperty, JdkConstants.JDK_YES);\n-                }\n-            }\n-        } catch (SAXException se) {\n-            XMLSecurityManager.printWarning(reader.getClass().getName(), lastProperty, se);\n-        }\n-\n-        boolean supportCatalog = true;\n-        try {\n-            reader.setFeature(JdkXmlUtils.USE_CATALOG, _useCatalog);\n-        }\n-        catch (SAXNotRecognizedException | SAXNotSupportedException e) {\n-            supportCatalog = false;\n-        }\n-\n-        if (supportCatalog && _useCatalog && _catalogFeatures != null) {\n-            try {\n-                for (CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n-                    reader.setProperty(f.getPropertyName(), _catalogFeatures.get(f));\n-                }\n-            } catch (SAXNotRecognizedException e) {\n-                \/\/shall not happen for internal settings\n-            }\n-        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/utils\/XMLReaderManager.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -290,1 +290,11 @@\n-    public static final String CONFIG_FILE = \"java.xml.config.file\";\n+    public static final String CONFIG_FILE_PROPNAME = \"java.xml.config.file\";\n+\n+    \/**\n+     * System Property for the DTD property\n+     *\/\n+    public static final String DTD_PROPNAME = \"jdk.xml.dtd.support\";\n+\n+    \/\/ DTD property values\n+    public static final int ALLOW = 0;\n+    public static final int IGNORE = 1;\n+    public static final int DENY = 2;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,3 @@\n+    public static final boolean IS_WINDOWS = SecuritySupport.getSystemProperty(\"os.name\").contains(\"Windows\");\n+    public static final String JAVA_HOME = SecuritySupport.getSystemProperty(\"java.home\");\n+\n@@ -64,1 +67,3 @@\n-\n+    \/** Property identifier: security manager. *\/\n+    private static final String SECURITY_MANAGER =\n+        Constants.XERCES_PROPERTY_PREFIX + Constants.SECURITY_MANAGER_PROPERTY;\n@@ -76,1 +81,4 @@\n-\n+    \/\/values for the Resolve property\n+    public static final String RESOLVE_STRICT = \"strict\";\n+    public static final String RESOLVE_CONTINUE = \"continue\";\n+    public static final String RESOLVE_IGNORE = \"ignore\";\n@@ -165,1 +173,1 @@\n-            builder = builder.with(CatalogFeatures.Feature.FILES, file);\n+            builder = builder.with(Feature.FILES, file);\n@@ -168,1 +176,1 @@\n-            builder = builder.with(CatalogFeatures.Feature.PREFER, prefer);\n+            builder = builder.with(Feature.PREFER, prefer);\n@@ -171,1 +179,1 @@\n-            builder = builder.with(CatalogFeatures.Feature.DEFER, defer);\n+            builder = builder.with(Feature.DEFER, defer);\n@@ -174,1 +182,1 @@\n-            builder = builder.with(CatalogFeatures.Feature.RESOLVE, resolve);\n+            builder = builder.with(Feature.RESOLVE, resolve);\n@@ -180,0 +188,9 @@\n+    \/**\n+     * Checks whether the RESOLVE feature in the CatalogFeatures is continue.\n+     * @param cf the specified CatalogFeatures\n+     * @return true if the RESOLVE feature is\n+     *\/\n+    public static boolean isResolveContinue(CatalogFeatures cf) {\n+        return (cf == null || cf.get(Feature.RESOLVE).equals(RESOLVE_CONTINUE));\n+    }\n+\n@@ -240,0 +257,5 @@\n+     * Note: parameter useXMLReaderFactory was removed. The method instead checks\n+     * the SAX_DRIVER property for whether the XMLReader should be created using\n+     * XMLReaderFactory for compatibility.  (see JDK-6490921).\n+     *\n+     * @param sm the XMLSecurityManager\n@@ -244,3 +266,2 @@\n-     * @param useXMLReaderFactory a flag indicating when the XMLReader should be\n-     * created using XMLReaderFactory. True is a compatibility mode that honors\n-     * the property org.xml.sax.driver (see JDK-6490921).\n+     * @param useCatalog a flag indicating whether Catalog is enabled\n+     * @param catalogFeatures the CatalogFeatures\n@@ -249,2 +270,3 @@\n-    public static XMLReader getXMLReader(boolean overrideDefaultParser,\n-            boolean secureProcessing) {\n+    public static XMLReader getXMLReader(XMLSecurityManager sm,\n+            boolean overrideDefaultParser, boolean secureProcessing,\n+            boolean useCatalog, CatalogFeatures catalogFeatures) {\n@@ -275,5 +297,3 @@\n-            return reader;\n-        }\n-\n-        \/\/ use the system-default\n-        saxFactory = defaultSAXFactory;\n+        } else {\n+            \/\/ use the system-default\n+            saxFactory = defaultSAXFactory;\n@@ -281,1 +301,1 @@\n-        try {\n+            try {\n@@ -283,2 +303,3 @@\n-        } catch (ParserConfigurationException | SAXException ex) {\n-            \/\/ shall not happen with the system-default reader\n+            } catch (ParserConfigurationException | SAXException ex) {\n+                \/\/ shall not happen with the system-default reader\n+            }\n@@ -286,0 +307,3 @@\n+\n+        setReaderProperty(reader, sm, useCatalog, catalogFeatures);\n+\n@@ -289,0 +313,41 @@\n+    \/**\n+     * Sets properties on the reader, including XMLSecurityManager and Catalog\n+     * features.\n+     *\n+     * @param reader the XMLReader\n+     * @param sm the XMLSecurityManager\n+     * @param useCatalog the USE_CATALOG property\n+     * @param catalogFeatures the Catalog features\n+     *\/\n+    public static void setReaderProperty(XMLReader reader, XMLSecurityManager sm,\n+            boolean useCatalog, CatalogFeatures catalogFeatures) {\n+        if (reader != null) {\n+            try {\n+                reader.setProperty(SECURITY_MANAGER, sm);\n+            } catch (SAXException ex) {\n+                \/\/ internal setting, shouldn't happen\n+            }\n+\n+            boolean supportCatalog = true;\n+            try {\n+                reader.setFeature(JdkXmlUtils.USE_CATALOG, useCatalog);\n+            }\n+            catch (SAXException e) {\n+                supportCatalog = false;\n+            }\n+\n+            if (catalogFeatures != null) {\n+                CatalogFeatures cf = catalogFeatures;\n+                if (supportCatalog && useCatalog) {\n+                    try {\n+                        for (CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n+                            reader.setProperty(f.getPropertyName(), cf.get(f));\n+                        }\n+                    } catch (SAXException e) {\n+                        \/\/shall not happen for internal settings\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n@@ -356,1 +421,9 @@\n-    public static SAXTransformerFactory getSAXTransformFactory(boolean overrideDefaultParser) {\n+    \/**\n+     * Returns an instance of SAXTransformerFactory with the current XMLSecurityManager\n+     * and the setting of the OVERRIDE_PARSER property.\n+     * @param sm the XMLSecurityManager\n+     * @param overrideDefaultParser the setting of the OVERRIDE_PARSER property\n+     * @return an instance of SAXTransformerFactory\n+     *\/\n+    public static SAXTransformerFactory getSAXTransformFactory(XMLSecurityManager sm,\n+            boolean overrideDefaultParser) {\n@@ -360,0 +433,11 @@\n+        if (sm != null) {\n+            for (XMLSecurityManager.Limit limit : XMLSecurityManager.Limit.values()) {\n+                if (sm.isSet(limit)){\n+                    tf.setAttribute(limit.apiProperty(), sm.getLimitValueAsString(limit));\n+                }\n+            }\n+            if (sm.printEntityCountInfo()) {\n+                tf.setAttribute(JdkConstants.JDK_DEBUG_LIMIT, \"yes\");\n+            }\n+        }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlUtils.java","additions":105,"deletions":21,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-                    String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE);\n+                    String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE_PROPNAME);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n@@ -30,0 +34,2 @@\n+import java.util.stream.Collectors;\n+import javax.xml.stream.XMLInputFactory;\n@@ -40,0 +46,33 @@\n+    public static final String DTD_KEY = JdkConstants.DTD_PROPNAME;\n+\n+    \/\/ Xerces Feature\n+    public static final String DISALLOW_DTD = \"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\";\n+    public static final String LOAD_EXTERNAL_DTD = \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\";\n+\n+    \/\/ StAX feature\n+    public static final String ZEPHYR_PROPERTY_PREFIX = \"http:\/\/java.sun.com\/xml\/stream\/properties\/\" ;\n+    public static final String IGNORE_EXTERNAL_DTD = ZEPHYR_PROPERTY_PREFIX + \"ignore-external-dtd\";\n+\n+    \/\/ Valid values for the DTD property\n+    public static final String DTD_ALLOW = \"allow\";\n+    public static final String DTD_IGNORE = \"ignore\";\n+    public static final String DTD_DENY = \"deny\";\n+    static final Map<String, Integer> DTD_MAP;\n+    \/\/ Source Level JDK 8\n+    static {\n+        Map<String, Integer> map = new HashMap<>();\n+        map.put(DTD_ALLOW, 0);\n+        map.put(DTD_IGNORE, 1);\n+        map.put(DTD_DENY, 2);\n+        DTD_MAP = Collections.unmodifiableMap(map);\n+    }\n+\n+    \/\/ Value converter for properties of type Boolean\n+    private static final BooleanMapper BOOLMAPPER = new BooleanMapper();\n+\n+    \/\/ Value converter for properties of type Integer\n+    private static final IntegerMapper INTMAPPER = new IntegerMapper();\n+\n+    \/\/ DTD value map\n+    private static final StringMapper DTDMAPPER = new StringMapper(DTD_MAP);\n+\n@@ -46,1 +85,1 @@\n-            JdkConstants.SP_ENTITY_EXPANSION_LIMIT, 0, 64000, Processor.PARSER),\n+            JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT, 0, 64000, Processor.PARSER, INTMAPPER),\n@@ -48,1 +87,1 @@\n-            JdkConstants.SP_MAX_OCCUR_LIMIT, 0, 5000, Processor.PARSER),\n+            JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT, 0, 5000, Processor.PARSER, INTMAPPER),\n@@ -50,1 +89,1 @@\n-            JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, 0, 10000, Processor.PARSER),\n+            JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT, 0, 10000, Processor.PARSER, INTMAPPER),\n@@ -52,1 +91,1 @@\n-            JdkConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, 0, 50000000, Processor.PARSER),\n+            JdkConstants.SP_TOTAL_ENTITY_SIZE_LIMIT, null, 0, 50000000, Processor.PARSER, INTMAPPER),\n@@ -54,1 +93,1 @@\n-            JdkConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, 0, 0, Processor.PARSER),\n+            JdkConstants.SP_GENERAL_ENTITY_SIZE_LIMIT, null, 0, 0, Processor.PARSER, INTMAPPER),\n@@ -56,1 +95,1 @@\n-            JdkConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, 0, 1000000, Processor.PARSER),\n+            JdkConstants.SP_PARAMETER_ENTITY_SIZE_LIMIT, null, 0, 1000000, Processor.PARSER, INTMAPPER),\n@@ -58,1 +97,1 @@\n-            JdkConstants.SP_MAX_ELEMENT_DEPTH, 0, 0, Processor.PARSER),\n+            JdkConstants.SP_MAX_ELEMENT_DEPTH, null, 0, 0, Processor.PARSER, INTMAPPER),\n@@ -60,1 +99,1 @@\n-            JdkConstants.SP_XML_NAME_LIMIT, 1000, 1000, Processor.PARSER),\n+            JdkConstants.SP_XML_NAME_LIMIT, null, 1000, 1000, Processor.PARSER, INTMAPPER),\n@@ -62,1 +101,1 @@\n-            JdkConstants.SP_ENTITY_REPLACEMENT_LIMIT, 0, 3000000, Processor.PARSER),\n+            JdkConstants.SP_ENTITY_REPLACEMENT_LIMIT, null, 0, 3000000, Processor.PARSER, INTMAPPER),\n@@ -64,1 +103,1 @@\n-            JdkConstants.XPATH_GROUP_LIMIT, 10, 10, Processor.XPATH),\n+            JdkConstants.XPATH_GROUP_LIMIT, null, 10, 10, Processor.XPATH, INTMAPPER),\n@@ -66,1 +105,1 @@\n-            JdkConstants.XPATH_OP_LIMIT, 100, 100, Processor.XPATH),\n+            JdkConstants.XPATH_OP_LIMIT, null, 100, 100, Processor.XPATH, INTMAPPER),\n@@ -68,1 +107,5 @@\n-            JdkConstants.XPATH_TOTALOP_LIMIT, 10000, 10000, Processor.XPATH)\n+            JdkConstants.XPATH_TOTALOP_LIMIT, null, 10000, 10000, Processor.XPATH, INTMAPPER),\n+        DTD(\"DTDProperty\", JdkConstants.DTD_PROPNAME, JdkConstants.DTD_PROPNAME, null,\n+                JdkConstants.ALLOW, JdkConstants.ALLOW, Processor.PARSER, DTDMAPPER),\n+        XERCES_DISALLOW_DTD(\"disallowDTD\", DISALLOW_DTD, null, null, 0, 0, Processor.PARSER, BOOLMAPPER),\n+        STAX_SUPPORT_DTD(\"supportDTD\", XMLInputFactory.SUPPORT_DTD, null, null, 1, 1, Processor.PARSER, BOOLMAPPER),\n@@ -74,0 +117,1 @@\n+        final String spOld;\n@@ -77,0 +121,1 @@\n+        final ValueMapper mapper;\n@@ -78,2 +123,2 @@\n-        Limit(String key, String apiProperty, String systemProperty, int value,\n-                int secureValue, Processor processor) {\n+        Limit(String key, String apiProperty, String systemProperty, String spOld, int value,\n+                int secureValue, Processor processor, ValueMapper mapper) {\n@@ -83,0 +128,1 @@\n+            this.spOld = spOld;\n@@ -86,0 +132,1 @@\n+            this.mapper = mapper;\n@@ -132,0 +179,5 @@\n+        \/\/ returns legacy System Property\n+        public String spOld() {\n+            return spOld;\n+        }\n+\n@@ -143,12 +195,0 @@\n-    }\n-\n-    \/**\n-     * Map old property names with the new ones\n-     *\/\n-    public static enum NameMap {\n-\n-        ENTITY_EXPANSION_LIMIT(JdkConstants.SP_ENTITY_EXPANSION_LIMIT, JdkConstants.ENTITY_EXPANSION_LIMIT),\n-        MAX_OCCUR_NODE_LIMIT(JdkConstants.SP_MAX_OCCUR_LIMIT, JdkConstants.MAX_OCCUR_LIMIT),\n-        ELEMENT_ATTRIBUTE_LIMIT(JdkConstants.SP_ELEMENT_ATTRIBUTE_LIMIT, JdkConstants.ELEMENT_ATTRIBUTE_LIMIT);\n-        final String newName;\n-        final String oldName;\n@@ -156,10 +196,2 @@\n-        NameMap(String newName, String oldName) {\n-            this.newName = newName;\n-            this.oldName = oldName;\n-        }\n-\n-        String getOldName(String newName) {\n-            if (newName.equals(this.newName)) {\n-                return oldName;\n-            }\n-            return null;\n+        public ValueMapper mapper() {\n+            return mapper;\n@@ -173,0 +205,1 @@\n+        ANY,\n@@ -233,1 +266,2 @@\n-        \/\/read system properties or jaxp.properties\n+\n+        \/\/read system properties or the config file (jaxp.properties by default)\n@@ -287,2 +321,8 @@\n-        int index = getIndex(propertyName);\n-        if (index > -1) {\n+        \/\/ special property to return entity count info\n+        if (ImplPropMap.ENTITYCOUNT.is(propertyName)) {\n+            printEntityCountInfo = (String)value;\n+            return true;\n+        }\n+\n+        Limit limit = getEnumValue(propertyName);\n+        if (limit != null) {\n@@ -290,2 +330,3 @@\n-            if (index != indexEntityCountInfo && state == State.APIPROPERTY) {\n-                pState = (Limit.values()[index]).getState(propertyName);\n+            if (state == State.APIPROPERTY) {\n+                \/\/ ordinal is the index of the value array\n+                pState = (Limit.values()[limit.ordinal()]).getState(propertyName);\n@@ -293,1 +334,1 @@\n-            setLimit(index, pState, value);\n+            setLimit(limit, pState, value);\n@@ -311,1 +352,1 @@\n-     * Set the value of a property by its index\n+     * Sets the value of a property by its enum name\n@@ -313,1 +354,1 @@\n-     * @param index the index of the property\n+     * @param limit the limit\n@@ -317,14 +358,4 @@\n-    public void setLimit(int index, State state, Object value) {\n-        if (index == indexEntityCountInfo) {\n-            printEntityCountInfo = (String)value;\n-        } else {\n-            int temp;\n-            if (value instanceof Integer) {\n-                temp = (Integer)value;\n-            } else {\n-                temp = Integer.parseInt((String) value);\n-                if (temp < 0) {\n-                    temp = 0;\n-                }\n-            }\n-            setLimit(index, state, temp);\n+    public void setLimit(Limit limit, State state, Object value) {\n+        int intValue = limit.mapper().toInt(value);\n+        if (intValue < 0) {\n+            intValue = 0;\n@@ -332,0 +363,2 @@\n+\n+        setLimit(limit.ordinal(), state, intValue);\n@@ -387,1 +420,1 @@\n-        return Integer.toString(values[limit.ordinal()]);\n+        return limit.mapper().toString(values[limit.ordinal()]);\n@@ -401,1 +434,2 @@\n-        return Integer.toString(values[index]);\n+        Limit limit = Limit.values()[index];\n+        return limit.mapper().toString(values[index]);\n@@ -424,0 +458,16 @@\n+    \/**\n+     * Returns the enum value by its property name.\n+     *\n+     * @param propertyName property name\n+     * @return the enum value if found; null otherwise\n+     *\/\n+    public Limit getEnumValue(String propertyName) {\n+        for (Limit limit : Limit.values()) {\n+            if (limit.is(propertyName)) {\n+                return limit;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n@@ -526,2 +576,26 @@\n-     * @param index\n-     * @return\n+     * @param limit the limit\n+     * @return true if the limit is set, false otherwise\n+     *\/\n+    public boolean isSet(Limit limit) {\n+        return isSet[limit.ordinal()];\n+    }\n+\n+    \/**\n+     * Checks whether the specified {@link Limit} is set and the value is\n+     * as specified.\n+     *\n+     * @param limit the {@link Limit}\n+     * @param value the value\n+     * @return true if the {@code Limit} is set and the values match\n+     *\/\n+    public boolean is(Limit limit, int value) {\n+        return getLimit(limit) == value;\n+    }\n+\n+    \/**\n+     * Checks whether the specified {@link Limit} is set and the value is\n+     * 1 (true for a property of boolean type).\n+     *\n+     * @param limit the {@link Limit}\n+     *\n+     * @return true if the {@code Limit} is set and the value is 1\n@@ -529,2 +603,2 @@\n-    public boolean isSet(int index) {\n-        return isSet[index];\n+    public boolean is(Limit limit) {\n+        return getLimit(limit) == 1;\n@@ -540,1 +614,1 @@\n-    private void readSystemProperties() {\n+    public void readSystemProperties() {\n@@ -542,5 +616,10 @@\n-            \/\/ attempts to read both the current and old system propery\n-            if (!getSystemProperty(limit, limit.systemProperty())\n-                    && (!getOldSystemProperty(limit))) {\n-                \/\/if system property is not found, try the config file\n-                getPropertyConfig(limit, limit.systemProperty());\n+            if (State.SYSTEMPROPERTY.compareTo(states[limit.ordinal()]) >= 0 &&\n+                    limit.systemProperty() != null) {\n+                \/\/ attempts to read both the current and old system propery\n+                if (!getSystemProperty(limit, limit.systemProperty())\n+                        && (!getSystemProperty(limit, limit.spOld()))) {\n+                    \/\/if system property is not found, try the config file\n+                    if (State.JAXPDOTPROPERTIES.compareTo(states[limit.ordinal()]) >= 0) {\n+                        getPropertyConfig(limit, limit.systemProperty());\n+                    }\n+                }\n@@ -575,0 +654,2 @@\n+        if (sysPropertyName == null) return false;\n+\n@@ -578,2 +659,1 @@\n-                values[limit.ordinal()] = Integer.parseInt(value);\n-                states[limit.ordinal()] = State.SYSTEMPROPERTY;\n+                setLimit(limit, State.SYSTEMPROPERTY, value);\n@@ -589,19 +669,0 @@\n-    \/**\n-     * Reads the legacy system property.\n-     * @param limit a limit object\n-     * @return true if found, false otherwise\n-     *\/\n-    private boolean getOldSystemProperty(Limit limit) {\n-        boolean found = false;\n-        for (NameMap nameMap : NameMap.values()) {\n-            String oldName = nameMap.getOldName(limit.systemProperty());\n-            if (oldName != null) {\n-                if (getSystemProperty(limit, oldName)) {\n-                    found = true;\n-                    break;\n-                }\n-            }\n-        }\n-        return found;\n-    }\n-\n@@ -619,2 +680,1 @@\n-                values[limit.ordinal()] = Integer.parseInt(value);\n-                states[limit.ordinal()] = State.JAXPDOTPROPERTIES;\n+                setLimit(limit, State.JAXPDOTPROPERTIES, value);\n@@ -661,0 +721,157 @@\n+\n+    \/**\n+     * Represents a mapper for properties of type String. The input is expected\n+     * to be a String or Object. If there is a map, the mappings are between the\n+     * keys and values within the map.\n+     *\/\n+    public static class StringMapper extends ValueMapper {\n+        private final Map<String, Integer> map;\n+        private final Map<Integer, String> reverseMap;\n+\n+        public StringMapper(Map<String, Integer> map) {\n+            this.map = map;\n+            if (map != null) {\n+                reverseMap = map.entrySet().stream()\n+                    .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));\n+            } else {\n+                reverseMap = null;\n+            }\n+        }\n+\n+        \/**\n+         * Finds the mapping int value with the specified property value. This\n+         * method will try to convert the provided value to an integer if no\n+         * mapping is found.\n+         * @param value the property value\n+         * @return the mapping int value if found, null otherwise\n+         *\/\n+        @Override\n+        public int toInt(Object value) {\n+            Objects.requireNonNull(value);\n+            Integer iVal;\n+            if (map != null) {\n+                iVal = map.get(((String)value).toLowerCase());\n+                iVal = (iVal == null) ? 0 : iVal;\n+            } else {\n+                try {\n+                    iVal = (int)Double.parseDouble((String)value);\n+                } catch (NumberFormatException e) {\n+                    \/\/ Note: this is the currently expected behavior. It may be\n+                    \/\/ appropriate for the setter to catch it.\n+                    throw new NumberFormatException(\"Invalid setting \" + value\n+                            + \" for a property of Integer type.\");\n+                }\n+            }\n+            return iVal;\n+        }\n+\n+        @Override\n+        public String toObject(int value) {\n+            if (reverseMap != null) {\n+                return reverseMap.get(value);\n+            }\n+            return Integer.toString(value);\n+        }\n+\n+        @Override\n+        public String toString(int value) {\n+            return toObject(value);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a mapper for properties of type Integer. The input is expected\n+     * to be either an Integer or String.\n+     *\/\n+    public static class IntegerMapper extends ValueMapper {\n+        @Override\n+        public int toInt(Object value) {\n+            Objects.requireNonNull(value);\n+\n+            Integer iVal;\n+            if (value instanceof Integer) {\n+                iVal = (Integer)value;\n+            } else {\n+                try {\n+                    iVal = Integer.parseInt((String)value);\n+                } catch (NumberFormatException e) {\n+                    \/\/ Note: this is the currently expected behavior. It may be\n+                    \/\/ appropriate for the setter to catch it.\n+                    throw new NumberFormatException(\"Invalid setting \" + value\n+                            + \" for a property of Integer type.\");\n+                }\n+            }\n+\n+            return iVal;\n+        }\n+\n+        @Override\n+        public Integer toObject(int value) {\n+            return value;\n+        }\n+\n+        @Override\n+        public String toString(int value) {\n+            return Integer.toString(value);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a mapper for properties of type Boolean. The input is expected\n+     * to be either a Boolean or String.\n+     *\/\n+    public static class BooleanMapper extends ValueMapper {\n+        @Override\n+        public int toInt(Object value) {\n+            Objects.requireNonNull(value);\n+\n+            Boolean bVal;\n+            if (value instanceof Boolean) {\n+                bVal = (Boolean)value;\n+            } else {\n+                bVal = ((String)value).equalsIgnoreCase(\"true\");\n+            }\n+\n+            return bVal ? 1 : 0;\n+        }\n+\n+        @Override\n+        public Boolean toObject(int value) {\n+            return value != 0;\n+        }\n+\n+        @Override\n+        public String toString(int value) {\n+            return Boolean.toString(value != 0);\n+        }\n+    }\n+\n+    \/**\n+     * Represents a mapper of property values between int and other types, such as\n+     * Boolean, String, and Object.\n+     *\/\n+    public static abstract class ValueMapper {\n+        \/\/ converts to an int value from that of the specified type\n+        public abstract int toInt(Object value);\n+        \/\/ converts the int value back to the original type\n+        public abstract Object toObject(int value);\n+        \/\/ converts the int value of a property to a String representation\n+        public abstract String toString(int value);\n+\n+    }\n+\n+    \/**\n+     * Represents a mapper of property values between int and other types, such as\n+     * Boolean, String, and Object.\n+     *\n+     * @param <T> the value type to be mapped with an int value\n+     *\/\n+    public abstract class ValueMapper1<T> {\n+        \/\/ converts to an int value from that of the specified type\n+        public abstract int toInt(T value);\n+        \/\/ converts the int value back to the original type\n+        public abstract T toObject(int value);\n+        \/\/ converts the int value of a property to a String representation\n+        public abstract String toString(int value);\n+\n+    }\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":310,"deletions":93,"binary":false,"changes":403,"status":"modified"},{"patch":"@@ -755,1 +755,1 @@\n- * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"4\">yes<\/td>\n@@ -811,0 +811,34 @@\n+ * <tr>\n+ * <td id=\"DTD\">{@systemProperty jdk.xml.dtd.support}<a href=\"#Note7\">[7]<\/a><\/td>\n+ * <td>Instructs the parser to handle DTDs in accordance with the setting of this property.\n+ * The options are:\n+ * <ul>\n+ * <li><p>\n+ * {@code allow} -- indicates that the parser shall continue processing DTDs;\n+ * <\/li>\n+ * <li><p>\n+ * {@code ignore} -- indicates that the parser shall skip DTDs;\n+ * <\/li>\n+ * <li><p>\n+ * {@code deny} -- indicates that the parser shall reject DTDs as an error.\n+ * The parser shall report the error in accordance with its relevant specification.\n+ * <\/li>\n+ * <\/ul>\n+ * <\/td>\n+ * <td style=\"text-align:center\">String<\/td>\n+ * <td>\n+ * {@code allow, ignore, and deny}. Values are case-insensitive.\n+ * <\/td>\n+ * <td style=\"text-align:center\">allow<\/td>\n+ * <td style=\"text-align:center\">No<\/td>\n+ * <td style=\"text-align:center\">Yes<\/td>\n+ * <td style=\"text-align:center\">\n+ *     <a href=\"#DOM\">DOM<\/a><br>\n+ *     <a href=\"#SAX\">SAX<\/a><br>\n+ *     <a href=\"#StAX\">StAX<\/a><br>\n+ *     <a href=\"#Validation\">Validation<\/a><br>\n+ *     <a href=\"#Transform\">Transform<\/a>\n+ * <\/td>\n+ * <td style=\"text-align:center\"><a href=\"#Processor\">Method 1<\/a><\/td>\n+ * <td style=\"text-align:center\">22<\/td>\n+ * <\/tr>\n@@ -841,0 +875,13 @@\n+ * <p id=\"Note7\">\n+ * <b>[7]<\/b> The {@code jdk.xml.dtd.support} property complements the two existing\n+ * DTD-related properties, {@code disallow-doctype-decl}(fully qualified name:\n+ * {@code http:\/\/apache.org\/xml\/features\/disallow-doctype-decl}) and supportDTD\n+ * ({@code javax.xml.stream.supportDTD}), by providing a uniformed support for the\n+ * processors listed and a system property that can be used in the\n+ * <a href=\"#Conf_CF\">JAXP Configuration File<\/a>. When {@code disallow-doctype-decl} is\n+ * set on the DOM or SAX factory, or supportDTD on StAX factory, the {@code jdk.xml.dtd.support}\n+ * property will have no effect.\n+ * <p>\n+ * These three properties control whether DTDs as a whole shall be processed. When\n+ * they are set to deny or ignore, other properties that regulate a part or an\n+ * aspect of DTD shall have no effect.\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -4969,1 +4969,1 @@\n-                                   TreeInfo.unguardedCase(testCase)) {\n+                                   (testCase.equals(c) || TreeInfo.unguardedCase(testCase))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -527,0 +527,2 @@\n+            patchCompletingNormallyCases(cases);\n+\n@@ -544,1 +546,2 @@\n-                if (validCaseLabelList && !previousCompletesNormally) {\n+                if ((validCaseLabelList && !previousCompletesNormally) ||\n+                        c.guard != null) {\n@@ -660,0 +663,47 @@\n+\n+    \/\/ Duplicates the block statement where needed.\n+    \/\/ Processes cases in place, e.g.\n+    \/\/ switch (obj) {\n+    \/\/     case Integer _ when ((Integer) obj) > 0:\n+    \/\/     case String _  when !((String) obj).isEmpty():\n+    \/\/         return 1;\n+    \/\/     ...\n+    \/\/ }\n+    \/\/ =>\n+    \/\/ switch (typeSwitch(...)) {\n+    \/\/     case 0:\n+    \/\/         if (!((Integer)obj) > 0) { ... }\n+    \/\/         return 1;\n+    \/\/     case 1:\n+    \/\/         if (!((String)obj).isEmpty()) { ... }\n+    \/\/         return 1;\n+    \/\/     ...\n+    \/\/ }\n+    private static void patchCompletingNormallyCases(List<JCCase> cases) {\n+        while (cases.nonEmpty()) {\n+            var currentCase = cases.head;\n+\n+            if (currentCase.caseKind == CaseKind.STATEMENT &&\n+                currentCase.completesNormally &&\n+                cases.tail.nonEmpty() &&\n+                cases.tail.head.guard != null) {\n+                ListBuffer<JCStatement> newStatements = new ListBuffer<>();\n+                List<JCCase> copyFrom = cases;\n+\n+                while (copyFrom.nonEmpty()) {\n+                    newStatements.appendList(copyFrom.head.stats);\n+\n+                    if (!copyFrom.head.completesNormally) {\n+                        break;\n+                    }\n+\n+                    copyFrom = copyFrom.tail;\n+                };\n+\n+                currentCase.stats = newStatements.toList();\n+            }\n+\n+            cases = cases.tail;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1341,2 +1341,3 @@\n-            boolean[] hasTry = new boolean[1];\n-            new TreeScanner() {\n+            class HasTryScanner extends TreeScanner {\n+                private boolean hasTry;\n+\n@@ -1345,1 +1346,6 @@\n-                    hasTry[0] = true;\n+                    hasTry = true;\n+                }\n+\n+                @Override\n+                public void visitSynchronized(JCSynchronized tree) {\n+                    hasTry = true;\n@@ -1355,2 +1361,6 @@\n-            }.scan(tree);\n-            return hasTry[0];\n+            };\n+\n+            HasTryScanner hasTryScanner = new HasTryScanner();\n+\n+            hasTryScanner.scan(tree);\n+            return hasTryScanner.hasTry;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import com.sun.tools.javac.comp.Attr;\n@@ -96,0 +97,1 @@\n+    private final Attr attr;\n@@ -117,0 +119,1 @@\n+        attr = Attr.instance(context);\n@@ -728,0 +731,31 @@\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public TypeElement getEnumConstantBody(VariableElement enumConstant) {\n+        if (enumConstant.getKind() == ElementKind.ENUM_CONSTANT) {\n+            JCTree enumBodyTree = getTreeAlt(enumConstant);\n+            JCTree enclosingEnumTree = getTreeAlt(enumConstant.getEnclosingElement());\n+\n+            if (enumBodyTree instanceof JCVariableDecl decl\n+                && enclosingEnumTree instanceof JCClassDecl clazz\n+                && decl.init instanceof JCNewClass nc\n+                && nc.def != null) {\n+                if ((clazz.sym.flags_field & Flags.UNATTRIBUTED) != 0) {\n+                    attr.attribClass(clazz.pos(), clazz.sym);\n+                }\n+                return nc.def.sym; \/\/ ClassSymbol for enum constant body\n+            } else {\n+                return null;\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Argument not an enum constant\");\n+        }\n+    }\n+\n+    private JCTree getTreeAlt(Element e) {\n+        Symbol sym = cast(Symbol.class, e);\n+        Env<AttrContext> enterEnv = getEnterEnv(sym);\n+        if (enterEnv == null)\n+            return null;\n+        JCTree tree = TreeInfo.declarationFor(sym, enterEnv.tree);\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,0 +187,10 @@\n+                \/\/ Print nothing for an anonymous class used for an\n+                \/\/ enum constant body.\n+                TypeMirror supertype = e.getSuperclass();\n+                if (supertype.getKind() != TypeKind.NONE) {\n+                    TypeElement superClass = (TypeElement)(((DeclaredType)supertype).asElement());\n+                    if (superClass.getKind() == ENUM) {\n+                        return this;\n+                    }\n+                }\n+\n@@ -696,0 +706,6 @@\n+            if (e.getKind() == ENUM) {\n+                \/\/ any permitted classes on an enum are anonymous\n+                \/\/ classes for enum bodies, elide.\n+                return;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  static final int INCLUDE_JVMCI;\n@@ -47,6 +46,1 @@\n-    INCLUDE_JVMCI = VM.getVM().getTypeDataBase().lookupIntConstant(\"INCLUDE_JVMCI\");\n-    if (INCLUDE_JVMCI == 1) {\n-        receiver0Offset = nonProfiledCountOffset + 1;\n-    } else {\n-        receiver0Offset = counterCellCount;\n-    }\n+    receiver0Offset = counterCellCount;\n@@ -69,3 +63,0 @@\n-    if (INCLUDE_JVMCI == 1) {\n-      cellCount += 1;\n-    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ReceiverTypeData.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -333,4 +333,3 @@\n-    \/\/ If we are returning to a compiled MethodHandle call site, the\n-    \/\/ saved_fp will in fact be a saved value of the unextended SP.  The\n-    \/\/ simplest way to tell whether we are returning to such a call site\n-    \/\/ is as follows:\n+    \/\/ Sites calling method handle intrinsics and lambda forms are\n+    \/\/ treated as any other call site. Therefore, no special action is\n+    \/\/ needed when we are returning to any of these call sites.\n@@ -341,12 +340,4 @@\n-      \/\/ If the sender PC is a deoptimization point, get the original\n-      \/\/ PC.  For MethodHandle call site the unextended_sp is stored in\n-      \/\/ saved_fp.\n-      if (senderNm.isDeoptMhEntry(getPC())) {\n-        \/\/ DEBUG_ONLY(verifyDeoptMhOriginalPc(senderNm, getFP()));\n-        raw_unextendedSP = getFP();\n-      }\n-      else if (senderNm.isDeoptEntry(getPC())) {\n-        \/\/ DEBUG_ONLY(verifyDeoptOriginalPc(senderNm, raw_unextendedSp));\n-      }\n-      else if (senderNm.isMethodHandleReturn(getPC())) {\n-        raw_unextendedSP = getFP();\n+      \/\/ If the sender PC is a deoptimization point, get the original PC.\n+      if (senderNm.isDeoptEntry(getPC()) ||\n+          senderNm.isDeoptMhEntry(getPC())) {\n+        \/\/ DEBUG_ONLY(verifyDeoptriginalPc(senderNm, raw_unextendedSp));\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/aarch64\/AARCH64Frame.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -339,2 +339,1 @@\n-     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n-     * on the given {@opcode}.\n+     * referenced by the {@code which}.\n@@ -343,1 +342,1 @@\n-     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * has not yet been rewritten, or {@code which} is not a valid index for\n@@ -345,0 +344,3 @@\n+     *\n+     * @param which  for INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}, must be {@code cpci}. For all other bytecodes,\n+     *               must be {@code rawIndex}\n@@ -346,2 +348,2 @@\n-    String lookupNameInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n-        return lookupNameInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n+    String lookupNameInPool(HotSpotConstantPool constantPool, int which, int opcode) {\n+        return lookupNameInPool(constantPool, constantPool.getConstantPoolPointer(), which, opcode);\n@@ -350,1 +352,1 @@\n-    private native String lookupNameInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n+    private native String lookupNameInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which, int opcode);\n@@ -354,2 +356,1 @@\n-     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n-     * on the given {@opcode}.\n+     * referenced by the {@code which}.\n@@ -358,1 +359,1 @@\n-     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * has not yet been rewritten, or {@code which} is not a valid index for\n@@ -360,0 +361,3 @@\n+     *\n+     * @param which  for INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}, must be {@code cpci}. For all other bytecodes,\n+     *               must be {@code rawIndex}\n@@ -361,2 +365,2 @@\n-    String lookupSignatureInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n-        return lookupSignatureInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n+    String lookupSignatureInPool(HotSpotConstantPool constantPool, int which, int opcode) {\n+        return lookupSignatureInPool(constantPool, constantPool.getConstantPoolPointer(), which, opcode);\n@@ -365,1 +369,1 @@\n-    private native String lookupSignatureInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n+    private native String lookupSignatureInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which, int opcode);\n@@ -369,1 +373,1 @@\n-     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n+     * referenced by the {@code which}. The meaning of {@code which} is dependent\n@@ -373,1 +377,1 @@\n-     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * has not yet been rewritten, or {@code which} is not a valid index for\n@@ -375,0 +379,3 @@\n+     *\n+     * @param which  for INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}, must be {@code cpci}. For all other bytecodes,\n+     *               must be {@code rawIndex}\n@@ -376,2 +383,2 @@\n-    int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n-        return lookupKlassRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n+    int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, int which, int opcode) {\n+        return lookupKlassRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), which, opcode);\n@@ -380,1 +387,1 @@\n-    private native int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n+    private native int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which, int opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -399,12 +399,0 @@\n-    \/**\n-     * Gets the name of a {@code JVM_CONSTANT_NameAndType} constant pool entry referenced by another\n-     * entry denoted by {@code which}.\n-     *\n-     * @param rawIndex rewritten index in the bytecode stream\n-     * @param opcode the opcode of the instruction for which the lookup is being performed\n-     * @return name as {@link String}\n-     *\/\n-    private String getNameOf(int rawIndex, int opcode) {\n-        return compilerToVM().lookupNameInPool(this, rawIndex, opcode);\n-    }\n-\n@@ -424,11 +412,0 @@\n-    \/**\n-     * Gets the signature of a {@code JVM_CONSTANT_NameAndType} constant pool entry referenced by\n-     * another entry denoted by {@code which}.\n-     *\n-     * @param rawIndex rewritten index in the bytecode stream\n-     * @param opcode the opcode of the instruction for which the lookup is being performed\n-     * @return signature as {@link String}\n-     *\/\n-    private String getSignatureOf(int rawIndex, int opcode) {\n-        return compilerToVM().lookupSignatureInPool(this, rawIndex, opcode);\n-    }\n@@ -452,1 +429,2 @@\n-     * @param rawIndex rewritten index in the bytecode stream\n+     * @param which  for INVOKE{VIRTUAL,SPECIAL,STATIC,INTERFACE}, must be {@code cpci}. For all other bytecodes,\n+     *               must be {@code rawIndex}\n@@ -456,2 +434,2 @@\n-    private int getKlassRefIndexAt(int rawIndex, int opcode) {\n-        return compilerToVM().lookupKlassRefIndexInPool(this, rawIndex, opcode);\n+    private int getKlassRefIndexAt(int which, int opcode) {\n+        return compilerToVM().lookupKlassRefIndexInPool(this, which, opcode);\n@@ -722,2 +700,10 @@\n-        final int cpci = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n-        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, cpci, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n+        int which; \/\/ interpretation depends on opcode\n+        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n+            if (!isInvokedynamicIndex(rawIndex)) {\n+                throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n+            }\n+            which = rawIndex;\n+        } else {\n+            which = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n+        }\n+        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, which, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n@@ -728,2 +714,2 @@\n-            String name = getNameOf(cpci, opcode);\n-            HotSpotSignature signature = new HotSpotSignature(runtime(), getSignatureOf(cpci, opcode));\n+            String name = compilerToVM().lookupNameInPool(this, which, opcode);\n+            HotSpotSignature signature = new HotSpotSignature(runtime(), compilerToVM().lookupSignatureInPool(this, which, opcode));\n@@ -733,1 +719,1 @@\n-                final int klassIndex = getKlassRefIndexAt(cpci, opcode);\n+                final int klassIndex = getKlassRefIndexAt(which, opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":17,"deletions":31,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-        final int nonprofiledCountOffset = cellIndexToOffset(config.receiverTypeDataNonprofiledCountOffset);\n@@ -70,2 +69,2 @@\n-        final int typeCheckDataSize = cellIndexToOffset(2) + typeDataRowSize * config.typeProfileWidth;\n-        final int virtualCallDataSize = cellIndexToOffset(2) + typeDataRowSize * (config.typeProfileWidth + config.methodProfileWidth);\n+        final int typeCheckDataSize = cellIndexToOffset(1) + typeDataRowSize * config.typeProfileWidth;\n+        final int virtualCallDataSize = cellIndexToOffset(1) + typeDataRowSize * (config.typeProfileWidth + config.methodProfileWidth);\n@@ -507,1 +506,1 @@\n-            totalCount += getTypesNotRecordedExecutionCount(data, position);\n+            totalCount += getCounterValue(data, position);\n@@ -511,6 +510,0 @@\n-        protected abstract long getTypesNotRecordedExecutionCount(HotSpotMethodData data, int position);\n-\n-        public int getNonprofiledCount(HotSpotMethodData data, int position) {\n-            return data.readUnsignedIntAsSignedInt(position, state.nonprofiledCountOffset);\n-        }\n-\n@@ -551,2 +544,2 @@\n-            sb.append(format(\"count(%d) null_seen(%s) exception_seen(%s) nonprofiled_count(%d) entries(%d)\", getCounterValue(data, pos), nullSeen, exceptionSeen,\n-                            getNonprofiledCount(data, pos), profile.entries));\n+            sb.append(format(\"count(%d) null_seen(%s) exception_seen(%s) entries(%d)\", getCounterValue(data, pos), nullSeen, exceptionSeen,\n+                            profile.entries));\n@@ -575,5 +568,0 @@\n-\n-        @Override\n-        protected long getTypesNotRecordedExecutionCount(HotSpotMethodData data, int position) {\n-            return getNonprofiledCount(data, position);\n-        }\n@@ -605,9 +593,0 @@\n-        @Override\n-        protected long getTypesNotRecordedExecutionCount(HotSpotMethodData data, int position) {\n-            return getCounterValue(data, position);\n-        }\n-\n-        private long getMethodsNotRecordedExecutionCount(HotSpotMethodData data, int position) {\n-            return data.readUnsignedIntAsSignedInt(position, state.nonprofiledCountOffset);\n-        }\n-\n@@ -639,2 +618,0 @@\n-            totalCount += getMethodsNotRecordedExecutionCount(data, position);\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotMethodData.java","additions":5,"deletions":28,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -381,1 +381,0 @@\n-    final int receiverTypeDataNonprofiledCountOffset = getConstant(\"ReceiverTypeData::nonprofiled_count_off_set\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+# on RHEL we got unwanted improved debugging enhancements\n+%define _build_id_links none\n+\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.spec","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1101,0 +1101,2 @@\n+     *\n+     * @deprecated Use {@link java.util.concurrent.locks.LockSupport#unpark(Thread)} instead.\n@@ -1102,0 +1104,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n@@ -1117,0 +1120,3 @@\n+     *\n+     * @deprecated Use {@link java.util.concurrent.locks.LockSupport#parkNanos(long)} or\n+     * {@link java.util.concurrent.locks.LockSupport#parkUntil(long)} instead.\n@@ -1118,0 +1124,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n@@ -1137,0 +1144,3 @@\n+     *\n+     * @deprecated Use {@link java.lang.management.OperatingSystemMXBean#getSystemLoadAverage()}\n+     * instead.\n@@ -1138,0 +1148,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n@@ -1226,1 +1237,0 @@\n-\n@@ -1237,0 +1247,2 @@\n+     *\n+     * @deprecated Use {@link java.lang.invoke.VarHandle#acquireFence()} instead.\n@@ -1239,0 +1251,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n@@ -1254,0 +1267,2 @@\n+     *\n+     * @deprecated Use {@link java.lang.invoke.VarHandle#releaseFence()} instead.\n@@ -1256,0 +1271,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n@@ -1268,0 +1284,2 @@\n+     *\n+     * @deprecated Use {@link java.lang.invoke.VarHandle#fullFence()} instead.\n@@ -1270,0 +1288,1 @@\n+    @Deprecated(since=\"22\", forRemoval=true)\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java 8315969 generic-all\n+\n@@ -74,0 +76,2 @@\n+compiler\/c2\/irTests\/ProfileAtTypeCheck.java 8320296 generic-all\n+\n@@ -128,1 +132,1 @@\n-serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 linux-all,windows-x64\n+serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 linux-all,windows-x64,aix-ppc64\n@@ -194,1 +198,1 @@\n-vmTestbase\/nsk\/jvmti\/InterruptThread\/intrpthrd003\/TestDescription.java 8288911 macosx-x64\n+vmTestbase\/nsk\/jvmti\/InterruptThread\/intrpthrd003\/TestDescription.java 8288911 macosx-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,434 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.whitebox.gc.GC;\n+import java.util.ArrayList;\n+\n+\/*\n+ * @test\n+ * bug 8308869\n+ * @summary C2: use profile data in subtype checks when profile has more than one class\n+ * @library \/test\/lib \/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @requires vm.compiler2.enabled\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.c2.irTests.ProfileAtTypeCheck\n+ *\/\n+\n+public class ProfileAtTypeCheck {\n+    public static void main(String[] args) {\n+        \/\/ Only interpreter collects profile\n+        Scenario interpreterProfiling = new Scenario(0, \"-XX:TypeProfileSubTypeCheckCommonThreshold=90\", \"-XX:-TieredCompilation\");\n+        \/\/ Only c1 collects profile\n+        Scenario c1Profiling = new Scenario(1, \"-XX:TypeProfileSubTypeCheckCommonThreshold=90\", \"-XX:+TieredCompilation\", \"-XX:-ProfileInterpreter\");\n+\n+        if (GC.isSelectedErgonomically() && GC.Parallel.isSupported()) {\n+            interpreterProfiling.addFlags(\"-XX:+UseParallelGC\");\n+            c1Profiling.addFlags(\"-XX:+UseParallelGC\");\n+        }\n+\n+        TestFramework framework = new TestFramework();\n+        framework.addScenarios(interpreterProfiling, c1Profiling).start();\n+    }\n+\n+    @DontInline\n+    static void dummyA(A a) {\n+    }\n+\n+    @DontInline\n+    static void dummyB(B b) {\n+    }\n+\n+    @DontInline\n+    static void dummyI(I i) {\n+    }\n+\n+    \/\/ profile reports many classes\n+\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" })\n+    public static void test1(Object o) {\n+        dummyA((A)o);\n+    }\n+\n+    @Run(test = \"test1\")\n+    @Warmup(10000)\n+    private void test1Runner() {\n+        test1(a);\n+        test1(b);\n+        test1(c);\n+        test1(d);\n+    }\n+\n+    \/\/ profile reports a single class\n+\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, failOn = { IRNode.SUBTYPE_CHECK })\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"1\" })\n+    public static void test2(Object o) {\n+        dummyA((A)o);\n+    }\n+\n+    @Run(test = \"test2\")\n+    @Warmup(10000)\n+    private void test2Runner() {\n+        test2(a);\n+    }\n+\n+    \/\/ \"easy\" test because B has no subclass\n+\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"1\" })\n+    public static void test3(Object o) {\n+        if (o instanceof B) {\n+            dummyB((B)o);\n+        }\n+    }\n+\n+    @Run(test = \"test3\")\n+    @Warmup(10000)\n+    private void test3Runner() {\n+        test3(b);\n+        test3(c);\n+        test3(d);\n+    }\n+\n+    \/\/ full subtype check\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static void test4(Object o) {\n+        dummyI((I)o);\n+    }\n+\n+    @Run(test = \"test4\")\n+    @Warmup(10000)\n+    private void test4Runner() {\n+        test4(a);\n+        test4(b);\n+        test4(c);\n+        test4(d);\n+    }\n+\n+    \/\/ full subtype check + profile use for success path\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static void test5(Object o) {\n+        dummyI((I)o);\n+    }\n+\n+    @Run(test = \"test5\")\n+    @Warmup(10000)\n+    private void test5Runner() {\n+        test5(a);\n+        test5(b);\n+    }\n+\n+    \/\/ Check primary super\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n+    public static void test6(Object o) {\n+        dummyA((A)o);\n+    }\n+\n+    @Run(test = \"test6\")\n+    @Warmup(10000)\n+    private void test6Runner() {\n+        test6(b);\n+        test6(c);\n+        test6(d);\n+    }\n+\n+    \/\/ full subtype check + profile use for both success and failure paths\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static boolean test7(Object o) {\n+        return o instanceof I;\n+    }\n+\n+    @Run(test = \"test7\")\n+    @Warmup(10000)\n+    private void test7Runner() {\n+        test7(a);\n+        test7(e);\n+    }\n+\n+    \/\/ full subtype check + profile use for success path (profile has unrecorded entries)\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static void test8(Object o) {\n+        dummyI((I)o);\n+    }\n+\n+    @Run(test = \"test8\")\n+    @Warmup(10000)\n+    private void test8Runner() {\n+        for (int i = 0; i < 40; i++) {\n+            test8(a); \/\/ 95% of profile is A\n+        }\n+        \/\/ plus some B and C\n+        test8(b);\n+        test8(c);\n+    }\n+\n+    \/\/ test that split if triggers\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.PHASEIDEALLOOP1 }, counts = { IRNode.SUBTYPE_CHECK, \"2\" })\n+    public static void test9(boolean flag1, boolean flag2, Object o1, Object o2) {\n+        if (o1 == null) {\n+            throw new RuntimeException();\n+        }\n+        if (o2 == null) {\n+            throw new RuntimeException();\n+        }\n+        Object o;\n+        if (flag1) {\n+            o = a;\n+            if (o == null) {\n+            }\n+        } else {\n+            if (flag2) {\n+                o = o1;\n+            } else {\n+                o = o2;\n+            }\n+        }\n+        dummyI((I)o);\n+    }\n+\n+    @Run(test = \"test9\")\n+    @Warmup(10_000)\n+    private void test9Runner() {\n+        test9(true, true, a, a);\n+        test9(false, true, c, c);\n+        test9(false, false, d, d);\n+    }\n+\n+    \/\/ test that dominating subtype check is removed\n+    static Object fieldTest10;\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"2\" })\n+    @IR(phase = { CompilePhase.ITER_GVN1 }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    public static void test10(boolean flag) {\n+        if (fieldTest10 instanceof I) {\n+            if (flag) {\n+                dummyI((I)fieldTest10);\n+            }\n+        }\n+    }\n+\n+    @Run(test = \"test10\")\n+    @Warmup(10_000)\n+    private void test10Runner() {\n+        fieldTest10 = a;\n+        test10(true);\n+        fieldTest10 = b;\n+        test10(false);\n+        fieldTest10 = c;\n+        test10(true);\n+        fieldTest10 = d;\n+        test10(false);\n+    }\n+\n+    static Object fieldTest11;\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"2\" })\n+    @IR(phase = { CompilePhase.PHASEIDEALLOOP_ITERATIONS }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    public static void test11(boolean flag1, boolean flag2) {\n+        if (fieldTest11 instanceof I) {\n+            if (flag1) {\n+                for (int i = 1; i < 10; i *= 2) {\n+                }\n+            }\n+            if (flag2) {\n+                dummyI((I)fieldTest11);\n+            }\n+        }\n+    }\n+\n+    @Run(test = \"test11\")\n+    @Warmup(10_000)\n+    private void test11Runner() {\n+        fieldTest11 = a;\n+        test11(true, true);\n+        fieldTest11 = b;\n+        test11(false, false);\n+        fieldTest11 = c;\n+        test11(true, true);\n+        fieldTest11 = d;\n+        test11(false, false);\n+    }\n+\n+    static Object fieldTest12;\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"3\" })\n+    @IR(phase = { CompilePhase.PHASEIDEALLOOP_ITERATIONS }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    public static void test12() {\n+        test12Helper(true);\n+    }\n+\n+    public static void test12Helper(boolean flag) {\n+        if (fieldTest12 instanceof I) {\n+            for (int i = 1; i < 10; i *= 2) {\n+            }\n+        }\n+        if (flag) {\n+            if (fieldTest12 instanceof I) {\n+                dummyI((I)fieldTest12);\n+            }\n+        }\n+    }\n+\n+    @Run(test = \"test12\")\n+    @Warmup(10_000)\n+    private void test12Runner() {\n+        fieldTest12 = a;\n+        test12();\n+        test12Helper(false);\n+        fieldTest12 = b;\n+        test12();\n+        test12Helper(false);\n+        fieldTest12 = c;\n+        test12();\n+        test12Helper(true);\n+        fieldTest12 = d;\n+        test12();\n+        test12Helper(true);\n+        fieldTest12 = e;\n+        test12();\n+    }\n+\n+    \/\/ Test that subtype checks with different profile don't common\n+    @Test\n+    @IR(phase = { CompilePhase.ITER_GVN1 }, counts = { IRNode.SUBTYPE_CHECK, \"2\" })\n+    public static void test13(boolean flag, Object o) {\n+        if (o == null) {\n+            throw new RuntimeException();\n+        }\n+        if (flag) {\n+            dummyI((I)o);\n+        } else {\n+            dummyI((I)o);\n+        }\n+    }\n+\n+    @Run(test = \"test13\")\n+    @Warmup(10_000)\n+    private void test13Runner() {\n+        test13(true, a);\n+        test13(true, b);\n+        test13(false, c);\n+        test13(false, d);\n+    }\n+\n+    static Object fieldTest14_1;\n+    static Object fieldTest14_2;\n+    \/\/ test that split if triggers\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"2\" })\n+    @IR(applyIf = { \"UseParallelGC\", \"true\" }, phase = { CompilePhase.PHASEIDEALLOOP1 }, counts = { IRNode.SUBTYPE_CHECK, \"3\" })\n+    public static void test14(boolean flag1, boolean flag2, Object o1, Object o2, Object o3) {\n+        if (o1 == null) {\n+            throw new RuntimeException();\n+        }\n+        if (o2 == null) {\n+            throw new RuntimeException();\n+        }\n+        if (o3 == null) {\n+            throw new RuntimeException();\n+        }\n+        Object o;\n+        if (flag1) {\n+            fieldTest14_1 = o3;\n+            fieldTest14_2 = (I)o3;\n+            o = fieldTest14_1;\n+        } else {\n+            if (flag2) {\n+                o = o1;\n+            } else {\n+                o = o2;\n+            }\n+        }\n+        dummyI((I)o);\n+    }\n+\n+    @Run(test = \"test14\")\n+    @Warmup(10_000)\n+    private void test14Runner() {\n+        test14(true, true, a, a, a);\n+        test14(true, true, b, b, b);\n+        test14(false, true, c, c, c);\n+        test14(false, false, d, d, d);\n+    }\n+\n+    \/\/ full subtype check + profile use for success path\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static void test15(Object o) {\n+        array[0] = o;\n+    }\n+\n+    @Run(test = \"test15\")\n+    @Warmup(10000)\n+    private void test15Runner() {\n+        test15(a);\n+        test15(b);\n+    }\n+\n+    interface I {\n+    }\n+\n+\n+    static A a = new A();\n+    static B b = new B();\n+    static C c = new C();\n+    static D d = new D();\n+    static E e = new E();\n+    static final Object[] array = new I[1];\n+\n+    static class A implements I {\n+    }\n+\n+    static class B extends A {\n+    }\n+\n+    static class C extends A {\n+    }\n+\n+    static class D extends A {\n+    }\n+\n+    static class E {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ProfileAtTypeCheck.java","additions":434,"deletions":0,"binary":false,"changes":434,"status":"added"},{"patch":"@@ -214,3 +214,3 @@\n-            output.shouldNotMatch(\"TestNull::testArg .* inline\");\n-            output.shouldNotMatch(\"TestNull::testRet .* inline\");\n-            output.shouldNotMatch(\"TestNull::test .* inline\");\n+            output.shouldMatch(\"TestNull::testArg .* failed to inline\");\n+            output.shouldMatch(\"TestNull::testRet .* failed to inline\");\n+            output.shouldMatch(\"TestNull::test .* failed to inline\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/unloaded\/TestInlineUnloaded.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-            return reason.equals(\"disallowed by ciReplay\");\n+            return reason.equals(\"failed to inline: disallowed by ciReplay\");\n@@ -93,1 +93,1 @@\n-            return reason.equals(\"unloaded signature classes\");\n+            return reason.equals(\"failed to inline: unloaded signature classes\");\n@@ -105,1 +105,1 @@\n-            return reason.equals(\"inlining too deep\");\n+            return reason.equals(\"failed to inline: inlining too deep\");\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/InliningBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestInvalidReplayFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   not inlineable\");\n-        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   no static binding\");\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   failed to inline: not inlineable\");\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   failed to inline: no static binding\");\n@@ -91,1 +91,1 @@\n-        analyzer.shouldContain(\"TestStaticInit$A::m (1 bytes)   no static binding\");\n+        analyzer.shouldContain(\"TestStaticInit$A::m (1 bytes)   failed to inline: no static binding\");\n@@ -128,1 +128,1 @@\n-        analyzer.shouldNotMatch(\"java\\\\.lang\\\\.invoke\\\\..+::linkToTargetMethod \\\\(9 bytes\\\\)   not inlineable\");\n+        analyzer.shouldNotMatch(\"java\\\\.lang\\\\.invoke\\\\..+::linkToTargetMethod \\\\(9 bytes\\\\)   failed to inline: not inlineable\");\n@@ -131,1 +131,1 @@\n-        analyzer.shouldContain(\"java\/lang\/invoke\/MethodHandle::invokeBasic (not loaded)   not inlineable\");\n+        analyzer.shouldContain(\"java\/lang\/invoke\/MethodHandle::invokeBasic (not loaded)   failed to inline: not inlineable\");\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/ResolvedClassTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCopyValueOf.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringIndexOfCharIntrinsics.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,0 +163,5 @@\n+    \/\/ We never call this method, so its indy is never resolved.\n+    static String concatString3_never_call(String a, String b) {\n+        return a + b;\n+    }\n+\n@@ -187,1 +192,1 @@\n-    public void lookupAppendixTest_dynamic(String methodName) throws Exception {\n+    private void lookupAppendixTest_dynamic(String methodName) throws Exception {\n@@ -212,1 +217,1 @@\n-    public void lookupAppendixTest_virtual() throws Exception {\n+    private void lookupAppendixTest_virtual() throws Exception {\n@@ -236,0 +241,87 @@\n+\n+    static void invokeVirtual(Object o) {\n+        o.hashCode();\n+    }\n+\n+    @Test\n+    public void lookupMethodTest_dynamic() throws Exception {\n+        concatString1(\"aaa\", \"bbb\"); \/\/ force the indy to be resolved\n+\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;\");\n+        ResolvedJavaMethod m = type.findMethod(\"concatString1\", methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected:\n+        \/\/ aload_0;\n+        \/\/ aload_1;\n+        \/\/ invokedynamic ...StringConcatFactory.makeConcatWithConstants...\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(8, bytecode.length);\n+        Assert.assertEquals(ALOAD_0, beU1(bytecode, 0));\n+        Assert.assertEquals(ALOAD_1, beU1(bytecode, 1));\n+        Assert.assertEquals(INVOKEDYNAMIC, beU1(bytecode, 2));\n+\n+        \/\/ Note: internally HotSpot stores the indy index as a native int32, but m.getCode() byte-swaps all such\n+        \/\/ indices so they appear to be big-endian.\n+        int rawIndex = beS4(bytecode, 3);\n+        System.out.println(\"rawIndex = \" + rawIndex);\n+        JavaMethod callee = m.getConstantPool().lookupMethod(rawIndex, INVOKEDYNAMIC, \/*caller=*\/m);\n+        System.out.println(\"callee = \" + callee);\n+        Assert.assertTrue(callee.toString().equals(\"HotSpotMethod<Invokers$Holder.linkToTargetMethod(Object, Object, Object)>\"),\n+                          \"wrong method: \" + callee);\n+    }\n+\n+    @Test\n+    public void lookupMethodTest_dynamic_unresolved() throws Exception {\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;\");\n+        ResolvedJavaMethod m = type.findMethod(\"concatString3_never_call\", methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected:\n+        \/\/ aload_0;\n+        \/\/ aload_1;\n+        \/\/ invokedynamic ...StringConcatFactory.makeConcatWithConstants...\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(8, bytecode.length);\n+        Assert.assertEquals(ALOAD_0, beU1(bytecode, 0));\n+        Assert.assertEquals(ALOAD_1, beU1(bytecode, 1));\n+        Assert.assertEquals(INVOKEDYNAMIC, beU1(bytecode, 2));\n+\n+        \/\/ Note: internally HotSpot stores the indy index as a native int32, but m.getCode() byte-swaps all such\n+        \/\/ indices so they appear to be big-endian.\n+        int rawIndex = beS4(bytecode, 3);\n+        System.out.println(\"rawIndex = \" + rawIndex);\n+        JavaMethod callee = m.getConstantPool().lookupMethod(rawIndex, INVOKEDYNAMIC, \/*caller=*\/m);\n+        System.out.println(\"callee = \" + callee);\n+        Assert.assertTrue(callee.toString().startsWith(\"jdk.vm.ci.meta.UnresolvedJavaMethod\"),\n+                          \"wrong method: \" + callee);\n+    }\n+\n+    @Test\n+    public void lookupMethodTest_virtual() throws Exception {\n+        MetaAccessProvider metaAccess = JVMCI.getRuntime().getHostJVMCIBackend().getMetaAccess();\n+        ResolvedJavaType type = metaAccess.lookupJavaType(ConstantPoolTest.class);\n+        Signature methodSig = metaAccess.parseMethodDescriptor(\"(Ljava\/lang\/Object;)V\");\n+        ResolvedJavaMethod m = type.findMethod(\"invokeVirtual\", methodSig);\n+        Assert.assertNotNull(m);\n+\n+        \/\/ Expected\n+        \/\/ 0: aload_0\n+        \/\/ 1: invokevirtual #rawIndex \/\/ Method Method java\/lang\/Object.hashCode:()I\n+        byte[] bytecode = m.getCode();\n+        Assert.assertNotNull(bytecode);\n+        Assert.assertEquals(ALOAD_0, beU1(bytecode, 0));\n+        Assert.assertEquals(INVOKEVIRTUAL, beU1(bytecode, 1));\n+        int rawIndex = beU2(bytecode, 2);\n+        System.out.println(\"rawIndex = \" + rawIndex);\n+        JavaMethod callee = m.getConstantPool().lookupMethod(rawIndex, INVOKEVIRTUAL, \/*caller=*\/m);\n+        System.out.println(\"callee = \" + callee);\n+        Assert.assertTrue(callee.toString().equals(\"HotSpotMethod<Object.hashCode()>\"),\n+                          \"wrong method: \" + callee);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/ConstantPoolTest.java","additions":94,"deletions":2,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -435,0 +435,5 @@\n+    public static final String CMP_P = PREFIX + \"CMP_P\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CMP_P, \"CmpP\");\n+    }\n+\n@@ -632,0 +637,10 @@\n+    public static final String LOAD_NKLASS = PREFIX + \"LOAD_NKLASS\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(LOAD_NKLASS, \"LoadNKlass\");\n+    }\n+\n+    public static final String LOAD_KLASS_OR_NKLASS = PREFIX + \"LOAD_KLASS_OR_NKLASS\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(LOAD_KLASS_OR_NKLASS, \"LoadN?Klass\");\n+    }\n+\n@@ -1056,0 +1071,5 @@\n+    public static final String PARTIAL_SUBTYPE_CHECK = PREFIX + \"PARTIAL_SUBTYPE_CHECK\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(PARTIAL_SUBTYPE_CHECK, \"PartialSubtypeCheck\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n- * @test\n- * @bug 8302652\n+ * @test id=Vanilla-Unaligned\n+ * @bug 8302652 8314612\n@@ -28,0 +28,1 @@\n+ * @requires vm.compiler2.enabled\n@@ -29,1 +30,28 @@\n- * @run driver compiler.loopopts.superword.TestUnorderedReduction\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction Vanilla-Unaligned\n+ *\/\n+\n+\/**\n+ * @test id=Vanilla-Aligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction Vanilla-Aligned\n+ *\/\n+\n+\/**\n+ * @test id=MaxVectorSize16-Unaligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction MaxVectorSize16-Unaligned\n+ *\/\n+\n+\/**\n+ * @test id=MaxVectorSize32-Aligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction MaxVectorSize32-Aligned\n@@ -41,3 +69,16 @@\n-        TestFramework.runWithFlags(\"-Xbatch\",\n-                                   \"-XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*\",\n-                                   \"-XX:MaxVectorSize=16\");\n+        TestFramework framework = new TestFramework(TestUnorderedReduction.class);\n+        framework.addFlags(\"-Xbatch\",\n+                           \"-XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*\");\n+\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Test requires exactly one argument!\");\n+        }\n+\n+        switch (args[0]) {\n+            case \"Vanilla-Unaligned\"         -> { framework.addFlags(\"-XX:-AlignVector\"); }\n+            case \"Vanilla-Aligned\"           -> { framework.addFlags(\"-XX:+AlignVector\"); }\n+            case \"MaxVectorSize16-Unaligned\" -> { framework.addFlags(\"-XX:-AlignVector\", \"-XX:MaxVectorSize=16\"); }\n+            case \"MaxVectorSize32-Aligned\"   -> { framework.addFlags(\"-XX:+AlignVector\", \"-XX:MaxVectorSize=32\"); }\n+            default -> { throw new RuntimeException(\"Test argument not recognized: \" + args[0]); }\n+        }\n+        framework.start();\n@@ -81,0 +122,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n@@ -121,0 +163,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n@@ -156,0 +199,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestUnorderedReduction.java","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n- * @test SharedStubToInterpTest\n- * @summary Checks that stubs to the interpreter can be shared for static or final method.\n+ * @test id=C1\n@@ -29,0 +28,1 @@\n+ * @summary Checks that stubs to the interpreter can be shared for static or final method.\n@@ -30,0 +30,4 @@\n+ * @requires vm.opt.TieredStopAtLevel == null & vm.opt.TieredCompilation == null\n+ * @requires vm.simpleArch == \"x86\" | vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\" | vm.simpleArch == \"riscv64\"\n+ * @requires vm.debug\n+ * @run driver compiler.sharedstubs.SharedStubToInterpTest -XX:TieredStopAtLevel=1\n@@ -31,1 +35,3 @@\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"i386\" | os.arch==\"x86\" | os.arch==\"aarch64\" | os.arch==\"riscv64\"\n+ * @test id=C2\n+ * @requires vm.opt.TieredStopAtLevel == null & vm.opt.TieredCompilation == null\n+ * @requires vm.simpleArch == \"x86\" | vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\" | vm.simpleArch == \"riscv64\"\n@@ -33,0 +39,1 @@\n+ * @run driver compiler.sharedstubs.SharedStubToInterpTest -XX:-TieredCompilation\n@@ -34,1 +41,0 @@\n- * @run driver compiler.sharedstubs.SharedStubToInterpTest\n@@ -48,1 +54,1 @@\n-    private static void runTest(String compiler, String test) throws Exception {\n+    private static void runTest(String test) throws Exception {\n@@ -51,1 +57,0 @@\n-        command.add(compiler);\n@@ -64,1 +69,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(command);\n@@ -76,8 +81,3 @@\n-        List<String> compilers = java.util.Arrays.asList(\"-XX:-TieredCompilation\" \/* C2 *\/,\n-            \"-XX:TieredStopAtLevel=1\" \/* C1 *\/);\n-        List<String> tests = java.util.Arrays.asList(\"StaticMethodTest\",\n-            \"FinalClassTest\", \"FinalMethodTest\");\n-        for (String compiler : compilers) {\n-            for (String test : tests) {\n-                runTest(compiler, test);\n-            }\n+        String[] methods = new String[] { \"StaticMethodTest\", \"FinalClassTest\", \"FinalMethodTest\"};\n+        for (String methodName : methods) {\n+            runTest(methodName);\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStubToInterpTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test SharedTrampolineTest\n+ * @test SharedTrampolineTest id=C2\n@@ -31,0 +31,1 @@\n+ * @requires vm.opt.TieredCompilation == null\n@@ -34,1 +35,1 @@\n- * @run driver compiler.sharedstubs.SharedTrampolineTest\n+ * @run driver compiler.sharedstubs.SharedTrampolineTest -XX:-TieredCompilation\n@@ -40,1 +41,0 @@\n-import java.util.Iterator;\n@@ -42,1 +42,0 @@\n-import java.util.stream.Collectors;\n@@ -50,1 +49,1 @@\n-    private static void runTest(String compiler, String test) throws Exception {\n+    private static void runTest(String test) throws Exception {\n@@ -53,1 +52,0 @@\n-        command.add(compiler);\n@@ -63,1 +61,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(command);\n@@ -75,6 +73,3 @@\n-        List<String> compilers = List.of(\"-XX:-TieredCompilation\" \/* C2 *\/);\n-        List<String> tests = List.of(\"StaticMethodTest\");\n-        for (String compiler : compilers) {\n-            for (String test : tests) {\n-                runTest(compiler, test);\n-            }\n+        String[] tests = new String[] {\"StaticMethodTest\"};\n+        for (String test : tests) {\n+            runTest(test);\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedTrampolineTest.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/JfrNetwork.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/JfrReporter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-                new String[] { \"ShenandoahNMethodBarrier\" },\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-                \"ShenandoahNMethodBarrier\",\n@@ -53,1 +52,0 @@\n-                \"ShenandoahNMethodBarrier\",\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierDisable.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithDefNew.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithG1.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithParallel.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithDefNew.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithParallel.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    static Field memberName;\n+    static Field classOrMemberName;\n@@ -70,0 +70,3 @@\n+        Class<?> classFrameInfoClass = Class.forName(\"java.lang.ClassFrameInfo\");\n+        classOrMemberName = classFrameInfoClass.getDeclaredField(\"classOrMemberName\");\n+        classOrMemberName.setAccessible(true);\n@@ -71,2 +74,0 @@\n-        memberName = stackFrameInfoClass.getDeclaredField(\"memberName\");\n-        memberName.setAccessible(true);\n@@ -79,1 +80,1 @@\n-        Method ewsNI = StackWalker.class.getDeclaredMethod(\"newInstance\", Set.class, extendedOptionClass, jdk.internal.vm.ContinuationScope.class);\n+        Method ewsNI = StackWalker.class.getDeclaredMethod(\"newInstance\", Set.class, extendedOptionClass);\n@@ -87,1 +88,1 @@\n-        sw = (StackWalker) ewsNI.invoke(null, java.util.Collections.emptySet(), localsAndOperandsOption, null);\n+        sw = (StackWalker) ewsNI.invoke(null, java.util.Collections.emptySet(), localsAndOperandsOption);\n","filename":"test\/hotspot\/jtreg\/runtime\/LocalLong\/LocalLongHelper.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommandLineDetail.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommandLineEmptyArgument.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommandLineInvalidArgument.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommandLineSummary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommandLineTurnOffNMT.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/JcmdWithNMTDisabled.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n@@ -37,0 +38,1 @@\n+ * @requires vm.flagless\n@@ -45,0 +47,1 @@\n+ * @requires vm.flagless\n@@ -53,0 +56,1 @@\n+ * @requires vm.flagless\n@@ -61,0 +65,1 @@\n+ * @requires vm.flagless\n@@ -69,0 +74,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocLimitTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmArgs);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(vmArgs);\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/NMTInitializationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    pb = ProcessTools.createJavaProcessBuilder(\n+    pb = ProcessTools.createTestJvm(\n@@ -48,1 +48,1 @@\n-      pb = ProcessTools.createJavaProcessBuilder(\n+      pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/NMTWithCDS.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -58,1 +58,1 @@\n-    ProcessBuilder pb1 = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb1 = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/PrintNMTStatistics.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/PrintNMTStatisticsWithNMTDisabled.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @bug 8219584 8227528\n+ * @bug 8219584 8227528 8315795\n@@ -71,1 +71,1 @@\n-                \"-XX:AbortVMOnSafepointTimeoutDelay=2500\",\n+                \"-XX:AbortVMOnSafepointTimeoutDelay=10000\", \/\/ Using 10 seconds instead of a smaller value for windows-debug\n","filename":"test\/hotspot\/jtreg\/runtime\/Safepoint\/TestAbortVMOnSafepointTimeout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307468\n+ * @summary Test archiving of lambda proxy classes with the same LambdaProxyClassKey\n+ *          (see cds\/lambdaProxyClassDictionary.hpp). If some lambda proxy classes\n+ *          are already in the static archive, during dynamic dump with the static archive,\n+ *          the ones in the static archive should not be generated and archived\n+ *          in the dynamic archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build LambdasWithSameKey\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar lambdas_same_key.jar LambdasWithSameKey\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdasInTwoArchives\n+ *\/\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class LambdasInTwoArchives extends DynamicArchiveTestBase {\n+    static final String lambdaPattern =\n+        \".*cds.class.*klasses.*LambdasWithSameKey[$][$]Lambda.*\/0x.*hidden\";\n+    static final String loadFromStatic =\n+        \".*class.load.*LambdasWithSameKey[$][$]Lambda\/0x.*source:.*shared.*objects.*file\";\n+    static final String loadFromTop = loadFromStatic + \".*(top).*\";\n+    static final String usedAllStatic =\n+        \"Used all static archived lambda proxy classes for: LambdasWithSameKey\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(LambdasInTwoArchives::test);\n+    }\n+\n+    static void checkLambdas(OutputAnalyzer output, String matchPattern, int numLambdas) throws Exception {\n+        List<String> lines = output.asLines();\n+        Pattern pattern = Pattern.compile(matchPattern);\n+        int count = 0;\n+        for (int i = 0; i < lines.size(); i++) {\n+            if (pattern.matcher(lines.get(i)).matches()) {\n+                count++;\n+            }\n+        }\n+        if (count != numLambdas) {\n+            throw new RuntimeException(\"Expecting \" + numLambdas + \" lambda proxy classes, but got \" + count);\n+        }\n+    }\n+\n+    static void test() throws Exception {\n+        String classListFileName = \"lambda-classes.list\";\n+        File fileList = new File(classListFileName);\n+        if (fileList.exists()) {\n+            fileList.delete();\n+        }\n+        String appJar = ClassFileInstaller.getJarPath(\"lambdas_same_key.jar\");\n+        String mainClass = \"LambdasWithSameKey\";\n+        \/\/ Generate a class list for static dump.\n+        \/\/ Note that the class list contains one less lambda proxy class comparing\n+        \/\/ with running the LambdasWithSameKey app with the \"run\" argument.\n+        String[] launchArgs = {\n+                \"-Xshare:off\",\n+                \"-XX:DumpLoadedClassList=\" + classListFileName,\n+                \"-Xlog:cds\",\n+                \"-Xlog:cds+lambda\",\n+                \"-cp\", appJar, mainClass};\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(launchArgs);\n+        OutputAnalyzer oa = TestCommon.executeAndLog(pb, \"lambda-classes\");\n+        oa.shouldHaveExitValue(0);\n+\n+        String logOptions = \"-Xlog:cds=debug,class+load,cds+class=debug\";\n+        String baseArchiveName = CDSTestUtils.getOutputFileName(\"lambda-base.jsa\");\n+        \/\/ Static dump based on the class list.\n+        dumpBaseArchive(baseArchiveName,\n+                        \"-XX:SharedClassListFile=\" + classListFileName,\n+                        logOptions,\n+                        \"-cp\", appJar, mainClass)\n+            \/\/ Expects 2 lambda proxy classes with LambdasWithSameKey as the\n+            \/\/ caller class in the static dump log.\n+            .assertNormalExit(output -> checkLambdas(output, lambdaPattern, 2));\n+\n+        String topArchiveName = getNewArchiveName(\"lambda-classes-top\");\n+\n+        \/\/ Dynamic dump with the static archive.\n+        dump2(baseArchiveName, topArchiveName,\n+                 logOptions,\n+                 \"-cp\", appJar, mainClass, \"run\")\n+            \/\/ Expects only 1 lambda proxy class with LambdasWithSameKey as the\n+            \/\/ caller class in the dynamic dump log.\n+            .assertNormalExit(output -> checkLambdas(output, lambdaPattern, 1))\n+            .assertNormalExit(output -> {\n+                output.shouldContain(usedAllStatic);\n+            });\n+\n+        \/\/ Run with both static and dynamic archives.\n+        run2(baseArchiveName, topArchiveName,\n+            logOptions,\n+            \"-cp\", appJar, mainClass, \"run\")\n+            \/\/ Two lambda proxy classes should be loaded from the static archive.\n+            .assertNormalExit(output -> checkLambdas(output, loadFromStatic, 2))\n+            .assertNormalExit(output -> { output.shouldContain(usedAllStatic); })\n+            \/\/ One lambda proxy class should be loaded from the dynamic archive.\n+            .assertNormalExit(output -> checkLambdas(output, loadFromTop, 1));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdasInTwoArchives.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -69,1 +69,1 @@\n-                output.shouldContain(\"Used all archived lambda proxy classes for: UsedAllArchivedLambdasApp run()Ljava\/lang\/Runnable;\")\n+                output.shouldContain(\"Used all dynamic archived lambda proxy classes for: UsedAllArchivedLambdasApp run()Ljava\/lang\/Runnable;\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/UsedAllArchivedLambdas.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * This class is for generating lambda proxy classes with the same invoke dynamic\n+ * info such as: caller class, invoked name, invoked type, method type, etc.\n+ *\n+ *\/\n+\n+public class LambdasWithSameKey {\n+    public static void main(String args[]) {\n+        boolean isRun = (args.length == 1 && args[0].equals(\"run\")) ? true : false;\n+        {Runnable run1 = LambdasWithSameKey::myrun; run1.run();}\n+        {Runnable run1 = LambdasWithSameKey::myrun; run1.run();}\n+        if (isRun) {\n+            {Runnable run1 = LambdasWithSameKey::myrun; run1.run();}\n+        }\n+    }\n+\n+    static void myrun() {\n+        System.out.println(\"myrun\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/LambdasWithSameKey.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/LongExceptionMessageTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/ModulesSymLink.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n@@ -43,0 +44,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/THPsInThreadStackPreventionTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDetection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n@@ -39,0 +40,1 @@\n+ * @requires vm.flagless\n@@ -50,0 +52,1 @@\n+ * @requires vm.flagless\n@@ -61,0 +64,1 @@\n+ * @requires vm.flagless\n@@ -72,0 +76,1 @@\n+ * @requires vm.flagless\n@@ -83,0 +88,1 @@\n+ * @requires vm.flagless\n@@ -94,0 +100,1 @@\n+ * @requires vm.flagless\n@@ -105,0 +112,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm\/timeout=150 ReflectOutOfMemoryError\n+ * @run main\/othervm -Xmx128m ReflectOutOfMemoryError\n","filename":"test\/hotspot\/jtreg\/runtime\/reflect\/ReflectOutOfMemoryError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetClassMethods\/OverpassMethods.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetClassMethods\/libOverpassMethods.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8312174\n+ * @summary missing JVMTI events from vthreads parked during JVMTI attach\n+ * @requires vm.continuations\n+ * @requires vm.jvmti\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @run main\/othervm\/native\n+ *     -Djdk.virtualThreadScheduler.parallelism=9\n+ *     -Djdk.attach.allowAttachSelf=true -XX:+EnableDynamicAgentLoading VThreadEventTest attach\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+\/*\n+ * The test uses custom implementation of the CountDownLatch class.\n+ * The reason is we want the state of tested thread to be predictable.\n+ * With java.util.concurrent.CountDownLatch it is not clear what thread state is expected.\n+ *\/\n+class CountDownLatch {\n+    private int count = 0;\n+\n+    CountDownLatch(int count) {\n+        this.count = count;\n+    }\n+\n+    public synchronized void countDown() {\n+        count--;\n+        notify();\n+    }\n+\n+    public synchronized void await() throws InterruptedException {\n+        while (count > 0) {\n+            wait(1);\n+        }\n+    }\n+}\n+\n+public class VThreadEventTest {\n+    static final int TCNT1 = 10;\n+    static final int TCNT2 = 4;\n+    static final int TCNT3 = 4;\n+    static final int THREAD_CNT = TCNT1 + TCNT2 + TCNT3;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    private static native int threadEndCount();\n+    private static native int threadMountCount();\n+    private static native int threadUnmountCount();\n+\n+    private static volatile boolean attached;\n+    private static boolean failed;\n+    private static List<Thread> test1Threads = new ArrayList(TCNT1);\n+\n+    private static CountDownLatch ready0 = new CountDownLatch(THREAD_CNT);\n+    private static CountDownLatch ready1 = new CountDownLatch(TCNT1);\n+    private static CountDownLatch ready2 = new CountDownLatch(THREAD_CNT);\n+    private static CountDownLatch mready = new CountDownLatch(1);\n+\n+    private static void await(CountDownLatch dumpedLatch) {\n+        try {\n+            dumpedLatch.await();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/\/ The test1 vthreads are kept unmounted until interrupted after agent attach.\n+    static final Runnable test1 = () -> {\n+        synchronized (test1Threads) {\n+            test1Threads.add(Thread.currentThread());\n+        }\n+        log(\"test1 vthread started\");\n+        ready0.countDown();\n+        await(mready);\n+        ready1.countDown(); \/\/ to guaranty state is not State.WAITING after await(mready)\n+        try {\n+            Thread.sleep(20000); \/\/ big timeout to keep unmounted until interrupted\n+        } catch (InterruptedException ex) {\n+            \/\/ it is expected, ignore\n+        }\n+        ready2.countDown();\n+    };\n+\n+    \/\/ The test2 vthreads are kept mounted until agent attach.\n+    static final Runnable test2 = () -> {\n+        log(\"test2 vthread started\");\n+        ready0.countDown();\n+        await(mready);\n+        while (!attached) {\n+            \/\/ keep mounted\n+        }\n+        ready2.countDown();\n+    };\n+\n+    \/\/ The test3 vthreads are kept mounted until agent attach.\n+    static final Runnable test3 = () -> {\n+        log(\"test3 vthread started\");\n+        ready0.countDown();\n+        await(mready);\n+        while (!attached) {\n+            \/\/ keep mounted\n+        }\n+        LockSupport.parkNanos(10_000_000L); \/\/ will cause extra mount and unmount\n+        ready2.countDown();\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        if (Runtime.getRuntime().availableProcessors() < 8) {\n+            log(\"WARNING: test expects at least 8 processors.\");\n+        }\n+        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n+            for (int i = 0; i < TCNT1; i++) {\n+                executorService.execute(test1);\n+            }\n+            for (int i = 0; i < TCNT2; i++) {\n+                executorService.execute(test2);\n+            }\n+            for (int i = 0; i < TCNT3; i++) {\n+                executorService.execute(test3);\n+            }\n+            await(ready0);\n+            mready.countDown();\n+            await(ready1); \/\/ to guaranty state is not State.WAITING after await(mready) in test1()\n+            \/\/ wait for test1 threads to reach WAITING state in sleep()\n+            for (Thread t : test1Threads) {\n+                Thread.State state = t.getState();\n+                log(\"DBG: state: \" + state);\n+                while (state != Thread.State.WAITING) {\n+                    Thread.sleep(10);\n+                    state = t.getState();\n+                    log(\"DBG: state: \" + state);\n+                }\n+            }\n+\n+            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+            vm.loadAgentLibrary(\"VThreadEventTest\");\n+            Thread.sleep(200); \/\/ to allow the agent to get ready\n+\n+            attached = true;\n+            for (Thread t : test1Threads) {\n+                 t.interrupt();\n+            }\n+            ready2.await();\n+        }\n+        \/\/ wait until all VirtualThreadEnd events have been sent\n+        for (int sleepNo = 1; threadEndCount() < THREAD_CNT; sleepNo++) {\n+            Thread.sleep(100);\n+            if (sleepNo % 100 == 0) { \/\/ 10 sec period of waiting\n+                log(\"main: waited seconds: \" + sleepNo\/10);\n+            }\n+        }\n+        int threadEndCnt = threadEndCount();\n+        int threadMountCnt = threadMountCount();\n+        int threadUnmountCnt = threadUnmountCount();\n+        int threadEndExp = THREAD_CNT;\n+        int threadMountExp = THREAD_CNT - TCNT2;\n+        int threadUnmountExp = THREAD_CNT + TCNT3;\n+\n+        log(\"ThreadEnd cnt: \"     + threadEndCnt     + \" (expected: \" + threadEndExp + \")\");\n+        log(\"ThreadMount cnt: \"   + threadMountCnt   + \" (expected: \" + threadMountExp + \")\");\n+        log(\"ThreadUnmount cnt: \" + threadUnmountCnt + \" (expected: \" + threadUnmountExp + \")\");\n+\n+        if (threadEndCnt != threadEndExp) {\n+            log(\"FAILED: unexpected count of ThreadEnd events\");\n+            failed = true;\n+        }\n+        if (threadMountCnt != threadMountExp) {\n+            log(\"FAILED: unexpected count of ThreadMount events\");\n+            failed = true;\n+        }\n+        if (threadUnmountCnt != threadUnmountExp) {\n+            log(\"FAILED: unexpected count of ThreadUnmount events\");\n+            failed = true;\n+        }\n+        if (failed) {\n+            throw new RuntimeException(\"FAILED: event count is wrong\");\n+        }\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/VThreadEventTest.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <cstring>\n+#include <jvmti.h>\n+#include <atomic>\n+#include \"jvmti_common.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv *jvmti = nullptr;\n+static std::atomic<int> thread_end_cnt(0);\n+static std::atomic<int> thread_unmount_cnt(0);\n+static std::atomic<int> thread_mount_cnt(0);\n+\n+void JNICALL VirtualThreadEnd(jvmtiEnv *jvmti, JNIEnv* jni, jthread vthread) {\n+  thread_end_cnt++;\n+}\n+\n+void JNICALL VirtualThreadMount(jvmtiEnv* jvmti, ...) {\n+  thread_mount_cnt++;\n+}\n+\n+void JNICALL VirtualThreadUnmount(jvmtiEnv* jvmti, ...) {\n+  thread_unmount_cnt++;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_VThreadEventTest_threadEndCount(JNIEnv* jni, jclass clazz) {\n+  return thread_end_cnt;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_VThreadEventTest_threadMountCount(JNIEnv* jni, jclass clazz) {\n+  return thread_mount_cnt;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_VThreadEventTest_threadUnmountCount(JNIEnv* jni, jclass clazz) {\n+  return thread_unmount_cnt;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiCapabilities caps;\n+  jvmtiError err;\n+\n+  LOG(\"Agent_OnAttach started\\n\");\n+  if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {\n+    LOG(\"Could not initialize JVMTI env\\n\");\n+    return JNI_ERR;\n+  }\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_support_virtual_threads = 1;\n+  check_jvmti_error(jvmti->AddCapabilities(&caps), \"AddCapabilities\");\n+\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.VirtualThreadEnd = &VirtualThreadEnd;\n+\n+  err = jvmti->SetEventCallbacks(&callbacks, (jint)sizeof(callbacks));\n+  check_jvmti_error(err, \"SetEventCallbacks\");\n+\n+  err = set_ext_event_callback(jvmti, \"VirtualThreadMount\", VirtualThreadMount);\n+  check_jvmti_error(err, \"SetExtEventCallback for VirtualThreadMount\");\n+\n+  err = set_ext_event_callback(jvmti, \"VirtualThreadUnmount\", VirtualThreadUnmount);\n+  check_jvmti_error(err, \"SetExtEventCallback for VirtualThreadUnmount\");\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_END, nullptr);\n+  check_jvmti_error(err, \"SetEventNotificationMode for VirtualThreadEnd\");\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, EXT_EVENT_VIRTUAL_THREAD_MOUNT, nullptr);\n+  check_jvmti_error(err, \"SetEventNotificationMode for VirtualThreadMount\");\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, EXT_EVENT_VIRTUAL_THREAD_UNMOUNT, nullptr);\n+  check_jvmti_error(err, \"SetEventNotificationMode for VirtualThreadUnmount\");\n+\n+  LOG(\"vthread events enabled\\n\");\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+} \/\/ extern \"C\"\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/libVThreadEventTest.cpp","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -76,0 +76,3 @@\n+                \/\/ The test loads lots of small classes to exhaust Metaspace, skip method\n+                \/\/ dependency verification to improve performance in debug builds.\n+                Platform.isDebugBuild() ? \"-XX:-VerifyDependencies\" : \"--show-version\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJmapCore.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-                 BadFailOnConstraint.create(Traps.class, \"nullCheck()\", 3, \"uncommon_trap\", \"unstable_if\"),\n+                 BadFailOnConstraint.create(Traps.class, \"nullCheck()\", 3, \"uncommon_trap\", \"class_check\"),\n@@ -225,4 +225,4 @@\n-        runCheck(BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 1, cmp, \"precise\"),\n-                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 1,cmp, \"precise\", \"MyClass\"),\n-                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 2,cmp, \"precise\", \"ir_framework\/tests\/MyClass\"),\n-                 GoodFailOnConstraint.create(CheckCastArray.class, \"array()\", 3),\n+        runCheck(BadFailOnConstraint.create(CheckCastArray.class, \"array(java.lang.Object[])\", 1, cmp, \"precise\"),\n+                 BadFailOnConstraint.create(CheckCastArray.class, \"array(java.lang.Object[])\", 2, 1,cmp, \"precise\", \"MyClass\"),\n+                 BadFailOnConstraint.create(CheckCastArray.class, \"array(java.lang.Object[])\", 2, 2,cmp, \"precise\", \"ir_framework\/tests\/MyClass\"),\n+                 GoodFailOnConstraint.create(CheckCastArray.class, \"array(java.lang.Object[])\", 3),\n@@ -1083,1 +1083,1 @@\n-    @IR(failOn = IRNode.UNSTABLE_IF_TRAP) \/\/ fails\n+    @IR(failOn = IRNode.CLASS_CHECK_TRAP) \/\/ fails\n@@ -1087,1 +1087,1 @@\n-                  IRNode.CLASS_CHECK_TRAP,\n+                  IRNode.UNSTABLE_IF_TRAP,\n@@ -1240,2 +1240,8 @@\n-    public boolean array() {\n-        return oArr instanceof MyClass[];\n+    public boolean array(Object[] arr) {\n+        return arr instanceof MyClass[];\n+    }\n+\n+    @Run(test = \"array\")\n+    public void testArray() {\n+        array(oArr);\n+        array(mArr);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_anonclassloader_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_anonclassloader_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_anonclassloader_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_anonclassloader_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level1_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level2_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level3_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_compilation_level4_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_humongous_class_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_jni_classloading_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_global_ref_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_jni_local_ref_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_stackLocal_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_staticField_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_strongRef_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_threadItself_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_phantom_ref_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_prot_domains_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_redefinition_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_reflection_classloading_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_inMemoryCompilation_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_inMemoryCompilation_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_inMemoryCompilation_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_keep_cl\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_keep_class\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_weak_ref_keep_obj\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load001\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load002\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load003\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load004\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load005\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load006\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load007\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load008\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load009\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load010\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load011\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/load012\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload001\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload002\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload003\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload004\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload005\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload006\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload007\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload008\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload009\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload010\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload011\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/classload\/unload012\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager.Limit;\n@@ -37,0 +36,5 @@\n+import jdk.xml.internal.XMLSecurityManager.BooleanMapper;\n+import jdk.xml.internal.XMLSecurityManager.IntegerMapper;\n+import jdk.xml.internal.XMLSecurityManager.Limit;\n+import jdk.xml.internal.XMLSecurityManager.StringMapper;\n+import jdk.xml.internal.XMLSecurityManager.ValueMapper;\n@@ -93,0 +97,12 @@\n+            Object value1 = null, value2 = null;\n+            ValueMapper mapper = limit.mapper();\n+            if (mapper instanceof StringMapper) {\n+                value1 = mapper.toObject(0);\n+                value2 = mapper.toObject(1);\n+            } else if (mapper instanceof BooleanMapper) {\n+                value1 = true;\n+                value2 = false;\n+            } else if (mapper instanceof IntegerMapper) {\n+                value1 = 100;\n+                value2 = 200;\n+            }\n@@ -94,1 +110,2 @@\n-                testProperties(p, limit.apiProperty(), 100, limit.systemProperty(), 200, true);\n+                testProperties(p, limit.apiProperty(), value1, limit.systemProperty(), value2,\n+                    (limit.systemProperty() != null && !limit.apiProperty().equals(limit.systemProperty())));\n@@ -179,1 +196,0 @@\n-\n@@ -268,1 +284,8 @@\n-            ret2 = Integer.parseInt((String)ret2);\n+            if (differ) {\n+                ret2 = Integer.parseInt((String)ret2);\n+            }\n+        } else if ((value1 instanceof Boolean) && ret1 instanceof String) {\n+            ret1 = Boolean.parseBoolean((String)ret1);\n+            if (differ) {\n+                ret2 = Boolean.parseBoolean((String)ret2);\n+            }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/ImplPropertyTest.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+\n+# ---- For DTD test ----\n+#\n+# Disallow DTD\n+jdk.xml.dtd.support=deny\n+#\n+# Implementation specific limits:\n+jdk.xml.entityExpansionLimit=1000\n+\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/dtd2.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.dtd.DOMTest 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.DOMTest 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.DOMTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.DOMTest 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.DOMTest 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.DOMTest 5 \/\/ verifies disallow-doctype-decl=false\n+ * @run driver common.dtd.DOMTest 6 \/\/ verifies disallow-doctype-decl=true\n+ * @summary verifies DOM's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class DOMTest extends DTDTestBase {\n+    public static void main(String args[]) throws Exception {\n+        new DOMTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(Processor.DOM, null, index);\n+        super.testDOM(filename, fsp, state, config, sysProp, apiProp, expectError, error);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/DOMTest.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,300 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+import common.util.TestBase;\n+\n+\/**\n+ * @bug 8306632\n+ * @summary tests the DTD property jdk.xml.dtd.support.\n+ * The DTD property controls how DTDs are processed.\n+ *\/\n+public class DTDTestBase extends TestBase {\n+    static final String SRC_DIR;\n+    static {\n+        String srcDir = System.getProperty(\"test.src\", \".\");\n+        if (IS_WINDOWS) {\n+            srcDir = srcDir.replace('\\\\', '\/');\n+        }\n+        SRC_DIR = srcDir;\n+        TEST_SOURCE_DIR = srcDir + \"\/..\/xmlfiles\/\";\n+    }\n+\n+    public void testDOM(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        DocumentBuilderFactory dbf = getDBF(fsp, state, config, sysProp, apiProp);\n+        process(filename, dbf, expectError, error);\n+    }\n+\n+    public void testSAX(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        SAXParser parser = getSAXParser(fsp, state, config, sysProp, apiProp);\n+        process(filename, parser, expectError, error);\n+    }\n+\n+    public void testStAX(String filename, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        XMLInputFactory xif = getXMLInputFactory(state, config, sysProp, apiProp);\n+        process(filename, xif, expectError, error);\n+    }\n+\n+    public void testSchema1(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        SchemaFactory sf = getSchemaFactory(fsp, state, config, sysProp, apiProp);\n+        process(filename, sf, expectError, error);\n+    }\n+\n+    public void testSchema2(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+        testSchema1(filename, xsd, fsp, state, config, sysProp, apiProp, expectError,  error);\n+    }\n+\n+    public void testValidation(String filename, String xsd, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        SchemaFactory sf = getSchemaFactory(fsp, state, config, sysProp, apiProp);\n+        validate(filename, sf, expectError, error);\n+    }\n+\n+    public void testStylesheet(String filename, String xsl, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        TransformerFactory tf = getTransformerFactory(fsp, state, config, sysProp, apiProp);\n+        process(filename, tf, expectError, error);\n+    }\n+\n+    public void testTransform(String filename, String xsl, Properties fsp, PropertyState state,\n+        Properties config, Properties[] sysProp, Properties[] apiProp,\n+        boolean expectError, String error) throws Exception {\n+\n+        TransformerFactory tf = getTransformerFactory(fsp, state, config, sysProp, apiProp);\n+        transform(filename, xsl, tf, expectError, error);\n+    }\n+\n+    \/*\n+     * DataProvider for testing configuring properties for parsers.\n+     *\n+     * Fields:\n+     *     file, FSP, state of setting, config file, system property, api property,\n+     *     Custom Catalog, error expected, error code or expected result\n+     *\/\n+    public Object[][] getConfigs(Processor processor) {\n+        \/\/ file with an external DTD that's not in JdkCatalog\n+        String fileDTDNotInC = \"properties1.xml\";\n+\n+        \/\/ error code when DTD=deny; The cause for DOM\n+        String errCode = \"JAXP00010008\";\n+\n+        \/\/ Xerces error message when DTD is disallowed\n+        String errXerces = \"disallow-doctype-decl\";\n+\n+        \/\/ error (not from catalog) is expect when CATALOG=continue\n+        boolean isErrExpected = true;\n+        String expected1 = \"invalid.site.com\";\n+\n+        \/\/ expected when DTD is ignored\n+        String expected = \"\";\n+\n+        switch (processor) {\n+            case SAX:\n+                \/\/errCode = \"JAXP00090001\";\n+                break;\n+            case STAX:\n+                errCode = \"JAXP00010008\";\n+                \/\/ StAX is non-validating parser\n+                isErrExpected = false;\n+                expected = \".*[\\\\w\\\\s]+(value1)[\\\\w\\\\s]+.*\";\n+                expected1 = expected;\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        return new Object[][]{\n+            \/\/ Case 1: external reference pointing to an invalid site\n+            \/**\n+             * Case 1-1: DTD=allow by default; no Config file;\n+             * Expect: error as the parser processes DTD and tries to access the invalid site\n+             * Error: JAXP00010008 java.net.UnknownHostException: invalid.site.com\n+             *\/\n+            {fileDTDNotInC, null, null, null, null, null, isErrExpected, expected},\n+\n+            \/**\n+             * Case 1-2: DTD=deny in config file\n+             * Expect: Exception since DTD is denied\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_DTD2, null, null, true, errCode},\n+\n+            \/**\n+             * Case 1-3: DTD=allow with the System Property\n+             * Expect: error as Case 1-1\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, null, isErrExpected, expected1},\n+\n+            \/**\n+             * Case 1-4: DTD=deny with the API property\n+             * Expect: Exception as Case 1-2\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.DTD2}, true, errCode},\n+\n+            \/**\n+             * Case 1-5: DTD=ignore with the API property\n+             * Expect: no error, DTD is ignored\n+             *\/\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.DTD1}, false, expected},\n+\n+            \/\/ Case 2: repeat Case 1-3 (allow), 1-4 (deny) with the Xerces property on the factory\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.XERCES_ALLOW_DTD}, isErrExpected, expected1},\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.XERCES_DISALLOW_DTD}, true, errXerces},\n+\n+            \/\/ Case 3: repeat Case 1-3 (allow), 1-5 (ignore) with the StAX property on the factory\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.SUPPORT_DTD}, isErrExpected, expected1},\n+            {fileDTDNotInC, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.SUPPORT_DTD_FALSE}, false, expected},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing configuring properties for validation or transform.\n+     *\n+     * Fields:\n+     *     xml file, xsd or xsl file, FSP, state of setting, config file, system property,\n+     *     api property, Custom Catalog, error expected, error code or expected result\n+     *\/\n+    public Object[][] getConfig(String m) {\n+        \/\/ SchemaTest1: Schema Import\n+        String xmlFile = \"XSDImport_company.xsd\";\n+        String xsdOrXsl = null;\n+        String expected = \"\";\n+        boolean errOnIgnore = false;\n+        String ignoreExpected = \"\";\n+        String errCode = \"JAXP00010008\";\n+\n+        switch (m) {\n+            case \"SchemaTest2\":\n+                \/\/ Schema Include\n+                xmlFile = \"XSDInclude_company.xsd\";\n+                break;\n+            case \"Validation\":\n+                \/\/ Schema Location\n+                xmlFile = \"val_test.xml\";\n+                errOnIgnore = true;\n+                ignoreExpected = \"x1\";\n+                break;\n+            case \"Stylesheet\":\n+                xmlFile = \"XSLDTD.xsl\";\n+                break;\n+            case \"Transform\":\n+                xmlFile = \"XSLPI.xml\";\n+                xsdOrXsl = \"<?xml version='1.0'?>\"\n+                + \"<!DOCTYPE top SYSTEM 'test.dtd'\"\n+                + \"[\"\n+                + \"<!ENTITY % pe \\\"x\\\">\"\n+                + \"<!ENTITY   x1 \\\"AAAAA\\\">\"\n+                + \"<!ENTITY   x2 \\\"bbb\\\">\"\n+                +\"]>\"\n+                + \"<?xml-stylesheet href=\\\"\"\n+                + TEST_SOURCE_DIR\n+                + \"\/XSLPI_target.xsl\\\" type=\\\"text\/xml\\\"?>\"\n+                + \"<xsl:stylesheet \"\n+                + \"    xmlns:xsl='http:\/\/www.w3.org\/1999\/XSL\/Transform' \"\n+                + \"    version='1.0'>\"\n+                + \"<\/xsl:stylesheet> \";\n+                errCode = \"JAXP00010008\";\n+                break;\n+            default:\n+                break;\n+        }\n+        return new Object[][]{\n+            \/\/ Case 1: external reference pointing to an invalid site\n+            \/**\n+             * Case 1-1: default setting, DTD=allow\n+             * Expect: pass without error\n+             *\/\n+            {xmlFile, xsdOrXsl, null, null, null, null, null, false, expected},\n+\n+            \/**\n+             * Case 1-2: DTD=deny in config file\n+             * Expect: Exception since DTD is denied\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE, Properties.CONFIG_FILE_DTD2, null, null, true, errCode},\n+\n+            \/**\n+             * Case 1-3: DTD=allow with the System Property\n+             * Expect: error as Case 1-1\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, null, false, expected},\n+\n+            \/**\n+             * Case 1-4: DTD=deny with the API property\n+             * Expect: Exception as Case 1-2\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.DTD2}, true, errCode},\n+\n+            \/**\n+             * Case 1-5: DTD=ignore with the API property\n+             * Expect: no error, DTD is ignored\n+             *\/\n+            {xmlFile, xsdOrXsl, null, PropertyState.CONFIG_FILE_SYSTEM_API, Properties.CONFIG_FILE_DTD2, new Properties[]{Properties.DTD0}, new Properties[]{Properties.DTD1}, errOnIgnore, ignoreExpected},\n+\n+        };\n+    }\n+\n+    \/\/ Returns absolute path\n+    static String getPath(String file) {\n+        String temp = TEST_SOURCE_DIR + file;\n+        if (IS_WINDOWS) {\n+            temp = \"\/\" + temp;\n+        }\n+        return temp;\n+    }\n+\n+    \/\/ parameters in the same order as the test method\n+    String filename; String xsd; String xsl; Properties fsp; PropertyState state;\n+    Properties config; Properties[] sysProp; Properties[] apiProp;\n+    boolean expectError; String error;\n+\n+    \/\/ Maps the DataProvider array to individual parameters\n+    public void paramMap(Processor processor, String method, String index) {\n+        int i = 0;\n+        Object[][] params;\n+        if (processor == Processor.VALIDATOR ||\n+                processor == Processor.TRANSFORMER) {\n+            params = getConfig(method);\n+            i = 1;\n+        } else {\n+            params = getConfigs(processor);\n+        }\n+        Object[] param = params[Integer.parseInt(index)];\n+        filename = (String)param[0];\n+        if (processor == Processor.VALIDATOR) {\n+            xsd = (String)param[i];\n+        } else if (processor == Processor.TRANSFORMER) {\n+            xsl = (String)param[i];\n+        }\n+        fsp = (Properties)param[i + 1];\n+        state = (PropertyState)param[i + 2];\n+        config = (Properties)param[i + 3];\n+        sysProp = (Properties[])param[i + 4];\n+        apiProp = (Properties[])param[i + 5];\n+        expectError = (boolean)param[i + 6];\n+        error = (String)param[i + 7];\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/DTDTestBase.java","additions":300,"deletions":0,"binary":false,"changes":300,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+import common.util.TestBase;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.dtd.SAXTest 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.SAXTest 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.SAXTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.SAXTest 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.SAXTest 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.SAXTest 5 \/\/ verifies disallow-doctype-decl=false\n+ * @run driver common.dtd.SAXTest 6 \/\/ verifies disallow-doctype-decl=true\n+ * @summary verifies SAX's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class SAXTest extends DTDTestBase {\n+    public static void main(String args[]) throws Exception {\n+        new SAXTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(TestBase.Processor.SAX, null, index);\n+        super.testSAX(filename, fsp, state, config, sysProp, apiProp, expectError, error);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/SAXTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.dtd.SchemaTest SchemaTest1 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.SchemaTest SchemaTest1 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.SchemaTest SchemaTest1 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.SchemaTest SchemaTest1 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.SchemaTest SchemaTest1 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.SchemaTest SchemaTest2 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.SchemaTest SchemaTest2 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.SchemaTest SchemaTest2 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.SchemaTest SchemaTest2 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.SchemaTest SchemaTest2 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.SchemaTest Validation 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.SchemaTest Validation 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.SchemaTest Validation 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.SchemaTest Validation 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.SchemaTest Validation 4 \/\/ verifies DTD=ignore\n+ * @summary verifies Schema and Validation's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class SchemaTest extends DTDTestBase {\n+\n+    public static void main(String args[]) throws Exception {\n+        new SchemaTest().run(args[0], args[1]);\n+    }\n+\n+    public void run(String method, String index) throws Exception {\n+        paramMap(Processor.VALIDATOR, method, index);\n+        switch (method) {\n+            case \"SchemaTest1\":\n+                super.testSchema1(filename, xsd, fsp, state, config, sysProp, apiProp, expectError, error);\n+                break;\n+            case \"SchemaTest2\":\n+                super.testSchema2(filename, xsd, fsp, state, config, sysProp, apiProp, expectError, error);\n+                break;\n+            case \"Validation\":\n+                super.testValidation(filename, xsd, fsp, state, config, sysProp, apiProp, expectError, error);\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/SchemaTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+import common.util.TestBase;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.dtd.StAXTest 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.StAXTest 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.StAXTest 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.StAXTest 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.StAXTest 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.StAXTest 5 \/\/ verifies disallow-doctype-decl=false\n+ * @run driver common.dtd.StAXTest 6 \/\/ verifies disallow-doctype-decl=true\n+ * @run driver common.dtd.StAXTest 7 \/\/ verifies supportDTD=true\n+ * @run driver common.dtd.StAXTest 8 \/\/ verifies supportDTD=false\n+ * @summary verifies StAX's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class StAXTest extends DTDTestBase {\n+\n+    public static void main(String args[]) throws Exception {\n+        new StAXTest().run(args[0]);\n+    }\n+\n+    public void run(String index) throws Exception {\n+        paramMap(TestBase.Processor.STAX, null, index);\n+        super.testStAX(filename, fsp, state, config, sysProp, apiProp, expectError, error);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/StAXTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+package common.dtd;\n+\n+import common.util.TestBase;\n+\n+\/**\n+ * @test @bug 8306632\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run driver common.dtd.TransformTest Stylesheet 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.TransformTest Stylesheet 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.TransformTest Stylesheet 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.TransformTest Stylesheet 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.TransformTest Stylesheet 4 \/\/ verifies DTD=ignore\n+ * @run driver common.dtd.TransformTest Transform 0 \/\/ verifies default setting dtd.support=allow\n+ * @run driver common.dtd.TransformTest Transform 1 \/\/ verifies overriding with config file\n+ * @run driver common.dtd.TransformTest Transform 2 \/\/ verifies overriding with system property\n+ * @run driver common.dtd.TransformTest Transform 3 \/\/ verifies overriding with factory setting (DTD=deny)\n+ * @run driver common.dtd.TransformTest Transform 4 \/\/ verifies DTD=ignore\n+ * @summary verifies Transform's support of the property jdk.xml.dtd.support.\n+ *\/\n+public class TransformTest extends DTDTestBase {\n+\n+    public static void main(String args[]) throws Exception {\n+        new TransformTest().run(args[0], args[1]);\n+    }\n+\n+    public void run(String method, String index) throws Exception {\n+        paramMap(TestBase.Processor.TRANSFORMER, method, index);\n+        switch (method) {\n+            case \"Stylesheet\":\n+                super.testStylesheet(filename, xsl, fsp, state, config, sysProp, apiProp, expectError, error);\n+                break;\n+            case \"Transform\":\n+                super.testTransform(filename, xsl, fsp, state, config, sysProp, apiProp, expectError, error);\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/dtd\/TransformTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,635 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.regex.Pattern;\n+import javax.xml.XMLConstants;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLResolver;\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import org.w3c.dom.Document;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+\/**\n+ * Test base for common\/dtd\n+ *\/\n+public class TestBase {\n+    static final boolean DEBUG = true;\n+    public static final String ORACLE_JAXP_PROPERTY_PREFIX =\n+        \"http:\/\/www.oracle.com\/xml\/jaxp\/properties\/\";\n+    public static final String JDK_ENTITY_COUNT_INFO =\n+            ORACLE_JAXP_PROPERTY_PREFIX + \"getEntityCountInfo\";\n+    public static final String CATALOG_FILE = CatalogFeatures.Feature.FILES.getPropertyName();\n+    public static final boolean IS_WINDOWS = System.getProperty(\"os.name\").contains(\"Windows\");\n+    public static String SRC_DIR = System.getProperty(\"test.src\", \".\");\n+    public static String TEST_SOURCE_DIR;\n+\n+\n+    \/\/ configuration file system property\n+    private static final String CONFIG_FILE = \"java.xml.config.file\";\n+\n+    \/\/ Xerces Property\n+    public static final String DISALLOW_DTD = \"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\";\n+    public static final String LOAD_EXTERNAL_DTD = \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\";\n+\n+    \/\/ Zephyr Properties\n+    public static final String ZEPHYR_PROPERTY_PREFIX = \"http:\/\/java.sun.com\/xml\/stream\/properties\/\" ;\n+    public static final String IGNORE_EXTERNAL_DTD = ZEPHYR_PROPERTY_PREFIX + \"ignore-external-dtd\";\n+\n+    \/\/ Impl Specific Properties\n+    public static final String SP_DTD = \"jdk.xml.dtd.support\";\n+    public static final String OVERRIDE_PARSER = \"jdk.xml.overrideDefaultParser\";\n+\n+    \/\/ DTD\/CATALOG constants\n+    public static final String RESOLVE_CONTINUE = \"continue\";\n+    public static final String RESOLVE_IGNORE = \"ignore\";\n+    public static final String RESOLVE_STRICT = \"strict\";\n+\n+    public static final String DTD_ALLOW = \"allow\";\n+    public static final String DTD_IGNORE = \"ignore\";\n+    public static final String DTD_DENY = \"deny\";\n+\n+    \/\/ JAXP Configuration File(JCF) location\n+    \/\/ DTD = deny\n+    public static final String JCF_DTD2 = \"..\/config\/files\/dtd2.properties\";\n+\n+\n+    String xmlExternalEntity, xmlExternalEntityId;\n+    String xmlGE_Expansion, xmlGE_ExpansionId;\n+\n+    public static enum Processor { DOM, SAX, STAX, VALIDATOR, TRANSFORMER };\n+    static enum SourceType { STREAM, SAX, STAX, DOM };\n+\n+    public static enum Properties {\n+        CONFIG_FILE_DTD2(null, CONFIG_FILE, Type.FEATURE, getPath(JCF_DTD2)),\n+        FSP(XMLConstants.FEATURE_SECURE_PROCESSING, null, Type.FEATURE, \"true\"),\n+        FSP_FALSE(XMLConstants.FEATURE_SECURE_PROCESSING, null, Type.FEATURE, \"false\"),\n+\n+        \/\/ properties\n+        DTD0(SP_DTD, \"ditto\", Type.PROPERTY, DTD_ALLOW),\n+        DTD1(SP_DTD, \"ditto\", Type.PROPERTY, DTD_IGNORE),\n+        DTD2(SP_DTD, \"ditto\", Type.PROPERTY, DTD_DENY),\n+\n+        \/\/ StAX properties\n+        SUPPORT_DTD(XMLInputFactory.SUPPORT_DTD, null, Type.FEATURE, \"true\"),\n+        SUPPORT_DTD_FALSE(XMLInputFactory.SUPPORT_DTD, null, Type.FEATURE, \"false\"),\n+        SUPPORT_EXTERNAL_ENTITIES(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, null, Type.FEATURE, \"true\"),\n+        SUPPORT_EXTERNAL_ENTITIES_FALSE(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, null, Type.FEATURE, \"false\"),\n+        REPLACE_ENTITY_REF(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, null, Type.FEATURE, \"true\"),\n+        REPLACE_ENTITY_REF_FALSE(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, null, Type.FEATURE, \"false\"),\n+        ZEPHY_IGNORE_EXTERNAL_DTD(IGNORE_EXTERNAL_DTD, null, Type.FEATURE, \"true\"),\n+        ZEPHY_IGNORE_EXTERNAL_DTD_FALSE(IGNORE_EXTERNAL_DTD, null, Type.FEATURE, \"false\"),\n+\n+        \/\/ Xerces properties\n+        XERCES_DISALLOW_DTD(DISALLOW_DTD, null, Type.FEATURE, \"true\"),\n+        XERCES_ALLOW_DTD(DISALLOW_DTD, null, Type.FEATURE, \"false\"),\n+        XERCES_LOAD_EXTERNAL_DTD(LOAD_EXTERNAL_DTD, null, Type.FEATURE, \"true\"),\n+        XERCES_LOAD_EXTERNAL_DTD_FALSE(LOAD_EXTERNAL_DTD, null, Type.FEATURE, \"false\"),\n+\n+        ;\n+\n+        final String apiName, spName;\n+        final Type type;\n+        final String value;\n+\n+        String file, resolve;\n+        Properties(String apiName, String spName, Type t, String value) {\n+            this.apiName = apiName;\n+            \/\/ if spName not specified, it's the same as the API name\n+            if (\"ditto\".equals(spName)) {\n+                this.spName = apiName;\n+            } else {\n+                this.spName = spName;\n+            }\n+            this.type = t;\n+            this.value = value;\n+        }\n+\n+        public Type type() {\n+            return type;\n+        }\n+\n+        public String value() {\n+            return value;\n+        }\n+    }\n+\n+    public static enum Type {\n+        CONFIGFILE,\n+        FEATURE,\n+        PROPERTY,\n+        LIMIT,\n+    }\n+\n+    \/\/ the state of property setting\n+    public static enum PropertyState {\n+        \/\/ set through the factories\n+        API,\n+        \/\/ set through the System Property\n+        SYSTEM,\n+        \/\/ set in the Config file\n+        CONFIG_FILE,\n+        \/\/ set with both the Config file and System Property, the later shall prevail\n+        CONFIG_FILE_SYSTEM,\n+        \/\/ set: Config file, System Property and API, the later shall prevail\n+        CONFIG_FILE_SYSTEM_API,\n+    }\n+\n+    protected void process(String filename, DocumentBuilderFactory dbf, boolean expectError,\n+            String error) throws Exception {\n+        \/\/dbf.setAttribute(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"continue\");\n+        DocumentBuilder builder = dbf.newDocumentBuilder();\n+        File file = new File(getPath(filename));\n+        try {\n+            Document document = builder.parse(file);\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            processError(expectError, error, e);\n+        }\n+    }\n+\n+    protected void process(String filename, SAXParser parser, boolean expectError,\n+            String error) throws Exception {\n+\n+        File file = new File(getPath(filename));\n+        try {\n+            parser.parse(file, new DefaultHandler());\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            \/\/e.printStackTrace();\n+            processError(expectError, error, e);\n+        }\n+    }\n+\n+    protected void process(String filename, XMLInputFactory xif, boolean expectError,\n+            String expected) throws Exception {\n+\n+        String xml = getPath(filename);\n+        try {\n+            InputStream entityxml = new FileInputStream(xml);\n+            XMLStreamReader streamReader = xif.createXMLStreamReader(xml, entityxml);\n+            String text = getText(streamReader, XMLStreamConstants.CHARACTERS);\n+            System.out.println(\"Text: [\" + text.trim() + \"]\");\n+            Assert.assertTrue(Pattern.matches(expected, text.trim()));\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            processError(expectError, expected, e);\n+        }\n+    }\n+\n+    protected void process(String filename, SchemaFactory sf, boolean expectError,\n+            String expected) throws Exception {\n+\n+        String xsd = getPath(filename);\n+        try {\n+            Schema schema = sf.newSchema(new StreamSource(new File(xsd)));\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            processError(expectError, expected, e);\n+        }\n+    }\n+\n+    protected void process(String filename, TransformerFactory tf, boolean expectError,\n+            String expected) throws Exception {\n+        String xsl = getPath(filename);\n+        try {\n+            SAXSource xslSource = new SAXSource(new InputSource(xsl));\n+            xslSource.setSystemId(xsl);\n+            Transformer transformer = tf.newTransformer(xslSource);\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            \/\/e.printStackTrace();\n+            processError(expectError, expected, e);\n+        }\n+    }\n+\n+    protected void transform(String xmlFile, String xsl, TransformerFactory tf,\n+            boolean expectError, String expected) throws Exception {\n+        String xmlSysId = getPath(xmlFile);\n+        try {\n+            SAXSource xslSource = new SAXSource(new InputSource(new StringReader(xsl)));\n+            \/\/SAXSource xslSource = new SAXSource(new InputSource(xslSysId));\n+            xslSource.setSystemId(xmlSysId);\n+            Transformer transformer = tf.newTransformer(xslSource);\n+            StringWriter sw = new StringWriter();\n+            transformer.transform(getSource(SourceType.STREAM, xmlSysId), new StreamResult(sw));\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            processError(expectError, expected, e);\n+        }\n+    }\n+\n+    protected void validate(String filename, SchemaFactory sf, boolean expectError,\n+            String expected) throws Exception {\n+        String xml = getPath(filename);\n+        try {\n+            Schema schema = sf.newSchema();\n+            Validator validator = schema.newValidator();\n+            validator.validate(new StreamSource(new File(xml)));\n+            Assert.assertTrue(!expectError);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            processError(expectError, expected, e);\n+        }\n+    }\n+\n+    protected void processError(boolean expectError, String error, Exception e)\n+            throws Exception {\n+        \/\/e.printStackTrace();\n+        String str = e.getMessage();\n+\/\/        System.out.println(\"Exp Msg: \" + str);\n+        \/\/e.printStackTrace();\n+        if (!expectError) {\n+            Assert.assertTrue(false, \"Expected pass, but Exception is thrown \" +\n+                    str);\n+        } else {\n+            Assert.assertTrue((str != null) && str.contains(error));\n+        }\n+    }\n+\n+    \/**\n+     * Returns a DocumentBuilderFactory with settings as specified.\n+     *\n+     * @param fsp FSP setting\n+     * @param state the setting method\n+     * @param config the configuration file setting\n+     * @param sysProp properties to be set through the System Property API\n+     * @param apiProp the properties to be set via the factory\n+     * @return a DocumentBuilderFactory\n+     *\/\n+    protected DocumentBuilderFactory getDBF(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp) {\n+        setSystemProperty(config, state, sysProp);\n+\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultNSInstance();\n+        dbf.setXIncludeAware(true);\n+        if (fsp != null) {\n+            try {\n+                dbf.setFeature(fsp.apiName, Boolean.parseBoolean(fsp.value));\n+            } catch (ParserConfigurationException ex) {\n+                \/\/ shouldn't happen\n+                \/\/ex.printStackTrace();\n+                Assert.fail(\"Test error: setting \" + fsp.apiName + \" to \" + fsp.value);\n+            }\n+        }\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                if (property.type == Type.FEATURE) {\n+                    try {\n+                        dbf.setFeature(property.apiName, Boolean.parseBoolean(property.value));\n+                    } catch (ParserConfigurationException ex) {\n+                        Assert.fail(\"Test error: setting \" + fsp.apiName + \" to \" + fsp.value);\n+                    }\n+                } else {\n+                    dbf.setAttribute(property.apiName, property.value);\n+                }\n+            }\n+        }\n+\n+        clearSystemProperty(state, sysProp);\n+\n+        return dbf;\n+    }\n+\n+    \/**\n+     * Returns an instance of SAXParser with a catalog if one is provided.\n+     *\n+     * @param fsp Feature Secure Processing\n+     * @param state the state of property settings\n+     * @param config the config file\n+     * @param sysProp the system properties\n+     * @param apiProp the properties to be set via the factory\n+     * @return an instance of SAXParser\n+     * @throws ParserConfigurationException\n+     * @throws Exception\n+     *\/\n+    public SAXParser getSAXParser(Properties fsp, PropertyState state, Properties config,\n+            Properties[] sysProp, Properties[] apiProp) throws Exception {\n+        setSystemProperty(config, state, sysProp);\n+\n+        SAXParserFactory spf = SAXParserFactory.newDefaultNSInstance();\n+        spf.setXIncludeAware(true);\n+        if (fsp != null) {\n+            try {\n+                spf.setFeature(fsp.apiName, Boolean.parseBoolean(fsp.value));\n+            } catch (ParserConfigurationException ex) {\n+                Assert.fail(\"Test error: setting \" + fsp.apiName + \" to \" + fsp.value);\n+            }\n+        }\n+\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                if (property.type == Type.FEATURE) {\n+                    try {\n+                        spf.setFeature(property.apiName, Boolean.parseBoolean(property.value));\n+                    } catch (ParserConfigurationException ex) {\n+                        Assert.fail(\"Test error: setting \" + fsp.apiName + \" to \" + fsp.value);\n+                    }\n+                }\n+            }\n+        }\n+        SAXParser parser = spf.newSAXParser();\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                if (property.type != Type.FEATURE) {\n+                    parser.setProperty(property.apiName, property.value);\n+                }\n+            }\n+        }\n+\n+        clearSystemProperty(state, sysProp);\n+        return parser;\n+    }\n+\n+    protected XMLInputFactory getXMLInputFactory(PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp) {\n+        setSystemProperty(config, state, sysProp);\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                factory.setProperty(property.apiName, property.value);\n+            }\n+        }\n+\n+        clearSystemProperty(state, sysProp);\n+\n+        return factory;\n+    }\n+\n+    protected SchemaFactory getSchemaFactory(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp)\n+            throws Exception {\n+        setSystemProperty(config, state, sysProp);\n+        SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+\n+        if (fsp != null) {\n+            factory.setFeature(fsp.apiName, Boolean.parseBoolean(fsp.value));\n+        }\n+\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                if (property.type == Type.FEATURE) {\n+                    factory.setFeature(property.apiName, Boolean.parseBoolean(property.value));\n+                } else {\n+                    factory.setProperty(property.apiName, property.value);\n+                }\n+            }\n+        }\n+\n+        clearSystemProperty(state, sysProp);\n+\n+        return factory;\n+    }\n+\n+    protected TransformerFactory getTransformerFactory(Properties fsp, PropertyState state,\n+            Properties config, Properties[] sysProp, Properties[] apiProp)\n+            throws Exception {\n+        setSystemProperty(config, state, sysProp);\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        \/\/tf.setAttribute(JDK_ENTITY_COUNT_INFO, \"yes\");\n+        if (fsp != null) {\n+            tf.setFeature(fsp.apiName, Boolean.parseBoolean(fsp.value));\n+        }\n+        if (state == PropertyState.API || state == PropertyState.CONFIG_FILE_SYSTEM_API) {\n+            for (Properties property : apiProp) {\n+                if (property.type == Type.FEATURE) {\n+                    tf.setFeature(property.apiName, Boolean.parseBoolean(property.value));\n+                } else {\n+                    tf.setAttribute(property.apiName, property.value);\n+                }\n+            }\n+        }\n+\n+        clearSystemProperty(state, sysProp);\n+\n+        return tf;\n+    }\n+\n+    XMLStreamReader getStreamReader(boolean setUseCatalog, boolean useCatalog,\n+            String catalog, String xml, XMLResolver resolver)\n+            throws FileNotFoundException, XMLStreamException {\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        if (catalog != null) {\n+            factory.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), catalog);\n+        }\n+\n+        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n+        factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n+\n+        if (resolver != null) {\n+            factory.setProperty(XMLInputFactory.RESOLVER, resolver);\n+        }\n+\n+        if (setUseCatalog) {\n+            factory.setProperty(XMLConstants.USE_CATALOG, useCatalog);\n+        }\n+\n+        InputStream entityxml = new FileInputStream(xml);\n+        XMLStreamReader streamReader = factory.createXMLStreamReader(xml, entityxml);\n+        return streamReader;\n+    }\n+\n+\n+    \/**\n+     * Returns the accumulated text of an event type.\n+     *\n+     * @param streamReader the XMLStreamReader\n+     * @param type the type of event requested\n+     * @return the text of the accumulated text for the request type\n+     * @throws XMLStreamException\n+     *\/\n+    String getText(XMLStreamReader streamReader, int type) throws XMLStreamException {\n+        StringBuilder text = new StringBuilder();\n+        StringBuilder entityRef = new StringBuilder();\n+\n+        while(streamReader.hasNext()){\n+            int eventType = streamReader.next();\n+            switch (eventType) {\n+                case XMLStreamConstants.START_ELEMENT:\n+                    break;\n+                case XMLStreamConstants.CHARACTERS:\n+                    text.append(streamReader.getText());\n+                    break;\n+                case XMLStreamConstants.ENTITY_REFERENCE:\n+                    entityRef.append(streamReader.getText());\n+                    break;\n+            }\n+        }\n+        if (type == XMLStreamConstants.CHARACTERS) {\n+            return text.toString();\n+        } else {\n+            return entityRef.toString();\n+        }\n+    }\n+\n+    \/**\n+     * Build a Source for _xmlFile depending on the value of sourceType.\n+     * @return\n+     * @throws FileNotFoundException\n+     * @throws XMLStreamException\n+     *\/\n+    private Source getSource(SourceType sourceType, String xmlFile)\n+            throws FileNotFoundException, XMLStreamException {\n+        if (sourceType == null) {\n+            throw new Error(\"Test Bug: Please check that sourceType is set\");\n+        }\n+        switch(sourceType) {\n+            case SAX: return new SAXSource(new InputSource(xmlFile));\n+            case STAX: return new StAXSource(XMLInputFactory.newFactory()\n+                    .createXMLEventReader(xmlFile, new FileInputStream(xmlFile)));\n+            case DOM: return new DOMSource(null,xmlFile);\n+            default: return new StreamSource(xmlFile);\n+        }\n+    }\n+\n+    \/**\n+     * Sets the System Property via the System Property API and\/or the Config file.\n+     *\n+     * @param config the configuration file setting\n+     * @param state the setting method\n+     * @param sysProp properties to be set through the System Property API\n+     *\/\n+    protected void setSystemProperty(Properties config, PropertyState state, Properties[] sysProp) {\n+        \/\/ no System Property\n+        if (state == null) return;\n+        if (sysProp != null) {\n+            for (Properties property : sysProp) {\n+                setSystemProperty1(config, state, property);\n+            }\n+        } else {\n+            setSystemProperty1(config, state, null);\n+        }\n+    }\n+\n+    protected void setSystemProperty1(Properties config, PropertyState state, Properties property) {\n+        switch (state) {\n+            case SYSTEM:\n+                System.setProperty(property.spName, property.value);\n+                break;\n+            case CONFIG_FILE:\n+                System.setProperty(CONFIG_FILE, config.value);\n+                break;\n+            case CONFIG_FILE_SYSTEM:\n+            case CONFIG_FILE_SYSTEM_API:\n+                System.setProperty(CONFIG_FILE, config.value);\n+                if (property != null) {\n+                    System.setProperty(property.spName, property.value);\n+                }\n+                break;\n+        }\n+    }\n+\n+    \/**\n+     * Clears the System Properties.\n+     *\n+     * @param state the state of setting, refer to {@link PropertyState}.\n+     * @param sysProp the system properties\n+     *\/\n+    protected void clearSystemProperty(PropertyState state, Properties[] sysProp) {\n+        if (state == null) return;\n+        if (sysProp != null) {\n+            for (Properties property : sysProp) {\n+                clearSystemProperty1(state, property);\n+            }\n+        } else {\n+            clearSystemProperty1(state, null);\n+        }\n+    }\n+    protected void clearSystemProperty1(PropertyState m, Properties property) {\n+        if (m == null) return;\n+        switch (m) {\n+            case SYSTEM:\n+                System.clearProperty(property.spName);\n+                break;\n+            case CONFIG_FILE:\n+                System.clearProperty(CONFIG_FILE);\n+                break;\n+            case CONFIG_FILE_SYSTEM:\n+            case CONFIG_FILE_SYSTEM_API:\n+                System.clearProperty(CONFIG_FILE);\n+                if (property != null) {\n+                    System.clearProperty(property.spName);\n+                }\n+                break;\n+        }\n+    }\n+\n+    static String getPath(String file) {\n+        String temp = TEST_SOURCE_DIR + file;\n+        if (IS_WINDOWS) {\n+            temp = \"\/\" + temp;\n+        }\n+        return temp;\n+    }\n+\n+    static class Assert {\n+        public static void assertTrue(boolean condition) {\n+            assertTrue(condition, null);\n+        }\n+\n+        public static void assertTrue(boolean condition, String message) {\n+            if (!condition) {\n+                if (message != null) {\n+                    throw new RuntimeException(\"Expected true but was false. \" + message);\n+                } else {\n+                    throw new RuntimeException(\"Expected true but was false. \");\n+                }\n+            }\n+        }\n+\n+        public static void fail(String message) {\n+            throw new RuntimeException(\"Test failed. \" + message);\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":635,"deletions":0,"binary":false,"changes":635,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+<?xml version=\"1.1\"?>\n+<!DOCTYPE top SYSTEM 'test.dtd'\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<xsd:schema xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+            targetNamespace=\"http:\/\/www.company.org\"\n+            xmlns=\"http:\/\/www.company.org\"\n+            elementFormDefault=\"unqualified\"\n+            xmlns:per=\"http:\/\/www.person.org\"\n+            xmlns:pro=\"http:\/\/www.product.org\">\n+    <xsd:import namespace=\"http:\/\/www.person.org\"\n+                schemaLocation=\"XSDImport_person.xsd\"\/>\n+    <xsd:import namespace=\"http:\/\/www.product.org\"\n+                schemaLocation=\"XSDImport_product.xsd\"\/>\n+    <xsd:element name=\"Company\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"Person\" type=\"per:PersonType\" \n+                             maxOccurs=\"unbounded\"\/>\n+                <xsd:element name=\"Product\" type=\"pro:ProductType\" \n+                             maxOccurs=\"unbounded\"\/>\n+            <\/xsd:sequence>\n+        <\/xsd:complexType>\n+    <\/xsd:element>\n+<\/xsd:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDImport_company.xsd","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version=\"1.1\"?>\n+<xsd:schema xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+            targetNamespace=\"http:\/\/www.person.org\"\n+            xmlns=\"http:\/\/www.person.org\"\n+            elementFormDefault=\"unqualified\">\n+    <xsd:complexType name=\"PersonType\">\n+        <xsd:sequence>\n+           <xsd:element name=\"Name\" type=\"xsd:string\"\/>\n+           <xsd:element name=\"SSN\" type=\"xsd:string\"\/>\n+        <\/xsd:sequence>\n+    <\/xsd:complexType>\n+<\/xsd:schema>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDImport_person.xsd","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+<?xml version=\"1.1\"?>\n+<xsd:schema xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+            targetNamespace=\"http:\/\/www.product.org\"\n+            xmlns=\"http:\/\/www.product.org\"\n+            elementFormDefault=\"unqualified\">\n+    <xsd:complexType name=\"ProductType\">\n+        <xsd:sequence>\n+           <xsd:element name=\"Type\" type=\"xsd:string\"\/>\n+        <\/xsd:sequence>\n+    <\/xsd:complexType>\n+<\/xsd:schema>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDImport_product.xsd","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+<?xml version=\"1.1\"?>\n+<!DOCTYPE top SYSTEM 'test.dtd'\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<xsd:schema xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+            targetNamespace=\"http:\/\/www.company.org\"\n+            xmlns=\"http:\/\/www.company.org\"\n+            elementFormDefault=\"qualified\">\n+    <xsd:include schemaLocation=\"XSDInclude_person.xsd\"\/>\n+    <xsd:include schemaLocation=\"XSDInclude_product.xsd\"\/>\n+    <xsd:element name=\"Company\">\n+        <xsd:complexType>\n+            <xsd:sequence>\n+                <xsd:element name=\"Person\" type=\"PersonType\"\n+                             maxOccurs=\"unbounded\"\/>\n+                <xsd:element name=\"Product\" type=\"ProductType\"\n+                             maxOccurs=\"unbounded\"\/>\n+            <\/xsd:sequence>\n+        <\/xsd:complexType>\n+    <\/xsd:element>\n+<\/xsd:schema>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDInclude_company.xsd","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDInclude_person.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XSDInclude_person.xsd","status":"copied"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSDInclude_product.xsd","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/XSDInclude_product.xsd","status":"copied"},{"patch":"@@ -0,0 +1,108 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n+<!-- Portions (C) International Organization for Standardization 1986\n+     Permission to copy in any form is granted for use with\n+     conforming SGML systems and applications as defined in\n+     ISO 8879, provided this notice is included in all copies.\n+-->\n+<!-- Character entity set. Typical invocation:\n+     <!ENTITY % HTMLlat1 PUBLIC\n+       \"-\/\/W3C\/\/ENTITIES Latin 1\/\/EN\/\/HTML\">\n+     %HTMLlat1;\n+-->\n+\n+<!ENTITY nbsp   \"&#160;\" >\n+<!ENTITY iexcl  \"&#161;\" >\n+<!ENTITY cent   \"&#162;\" >\n+<!ENTITY pound  \"&#163;\" >\n+<!ENTITY curren \"&#164;\" >\n+<!ENTITY yen    \"&#165;\" >\n+<!ENTITY brvbar \"&#166;\" >\n+<!ENTITY sect   \"&#167;\" >\n+<!ENTITY uml    \"&#168;\" >\n+<!ENTITY copy   \"&#169;\" >\n+<!ENTITY ordf   \"&#170;\" >\n+<!ENTITY laquo  \"&#171;\" >\n+<!ENTITY not    \"&#172;\" >\n+<!ENTITY shy    \"&#173;\" >\n+<!ENTITY reg    \"&#174;\" >\n+<!ENTITY macr   \"&#175;\" >\n+<!ENTITY deg    \"&#176;\" >\n+<!ENTITY plusmn \"&#177;\" >\n+<!ENTITY sup2   \"&#178;\" >\n+<!ENTITY sup3   \"&#179;\" >\n+<!ENTITY acute  \"&#180;\" >\n+<!ENTITY micro  \"&#181;\" >\n+<!ENTITY para   \"&#182;\" >\n+<!ENTITY middot \"&#183;\" >\n+<!ENTITY cedil  \"&#184;\" >\n+<!ENTITY sup1   \"&#185;\" >\n+<!ENTITY ordm   \"&#186;\" >\n+<!ENTITY raquo  \"&#187;\" >\n+<!ENTITY frac14 \"&#188;\" >\n+<!ENTITY frac12 \"&#189;\" >\n+<!ENTITY frac34 \"&#190;\" >\n+<!ENTITY iquest \"&#191;\" >\n+<!ENTITY Agrave \"&#192;\" >\n+<!ENTITY Aacute \"&#193;\" >\n+<!ENTITY Acirc  \"&#194;\" >\n+<!ENTITY Atilde \"&#195;\" >\n+<!ENTITY Auml   \"&#196;\" >\n+<!ENTITY Aring  \"&#197;\" >\n+<!ENTITY AElig  \"&#198;\" >\n+<!ENTITY Ccedil \"&#199;\" >\n+<!ENTITY Egrave \"&#200;\" >\n+<!ENTITY Eacute \"&#201;\" >\n+<!ENTITY Ecirc  \"&#202;\" >\n+<!ENTITY Euml   \"&#203;\" >\n+<!ENTITY Igrave \"&#204;\" >\n+<!ENTITY Iacute \"&#205;\" >\n+<!ENTITY Icirc  \"&#206;\" >\n+<!ENTITY Iuml   \"&#207;\" >\n+<!ENTITY ETH    \"&#208;\" >\n+<!ENTITY Ntilde \"&#209;\" >\n+<!ENTITY Ograve \"&#210;\" >\n+<!ENTITY Oacute \"&#211;\" >\n+<!ENTITY Ocirc  \"&#212;\" >\n+<!ENTITY Otilde \"&#213;\" >\n+<!ENTITY Ouml   \"&#214;\" >\n+<!ENTITY times  \"&#215;\" >\n+<!ENTITY Oslash \"&#216;\" >\n+<!ENTITY Ugrave \"&#217;\" >\n+<!ENTITY Uacute \"&#218;\" >\n+<!ENTITY Ucirc  \"&#219;\" >\n+<!ENTITY Uuml   \"&#220;\" >\n+<!ENTITY Yacute \"&#221;\" >\n+<!ENTITY THORN  \"&#222;\" >\n+<!ENTITY szlig  \"&#223;\" >\n+<!ENTITY agrave \"&#224;\" >\n+<!ENTITY aacute \"&#225;\" >\n+<!ENTITY acirc  \"&#226;\" >\n+<!ENTITY atilde \"&#227;\" >\n+<!ENTITY auml   \"&#228;\" >\n+<!ENTITY aring  \"&#229;\" >\n+<!ENTITY aelig  \"&#230;\" >\n+<!ENTITY ccedil \"&#231;\" >\n+<!ENTITY egrave \"&#232;\" >\n+<!ENTITY eacute \"&#233;\" >\n+<!ENTITY ecirc  \"&#234;\" >\n+<!ENTITY euml   \"&#235;\" >\n+<!ENTITY igrave \"&#236;\" >\n+<!ENTITY iacute \"&#237;\" >\n+<!ENTITY icirc  \"&#238;\" >\n+<!ENTITY iuml   \"&#239;\" >\n+<!ENTITY eth    \"&#240;\" >\n+<!ENTITY ntilde \"&#241;\" >\n+<!ENTITY ograve \"&#242;\" >\n+<!ENTITY oacute \"&#243;\" >\n+<!ENTITY ocirc  \"&#244;\" >\n+<!ENTITY otilde \"&#245;\" >\n+<!ENTITY ouml   \"&#246;\" >\n+<!ENTITY divide \"&#247;\" >\n+<!ENTITY oslash \"&#248;\" >\n+<!ENTITY ugrave \"&#249;\" >\n+<!ENTITY uacute \"&#250;\" >\n+<!ENTITY ucirc  \"&#251;\" >\n+<!ENTITY uuml   \"&#252;\" >\n+<!ENTITY yacute \"&#253;\" >\n+<!ENTITY thorn  \"&#254;\" >\n+<!ENTITY yuml   \"&#255;\" >\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLDTD.dtd","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+<?xml version=\"1.1\"?>\n+<!DOCTYPE top SYSTEM 'test.dtd'\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<doc><\/doc>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLDTD.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.1\" encoding=\"ISO-8859-1\" standalone=\"no\"?>\n+<!DOCTYPE HTMLlat1 SYSTEM \"XSLDTD.dtd\">\n+<xsl:stylesheet xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\" version=\"1.0\">\n+\n+  <!-- FileName: copy20 -->\n+  <!-- Document: http:\/\/www.w3.org\/TR\/xslt -->\n+  <!-- DocVersion: 19991116 -->\n+  <!-- Section: 11.3 -->\n+  <!-- Creator: David Marston -->\n+  <!-- Purpose: Test copy-of a string constant containing character entity -->\n+\n+<xsl:output method=\"xml\" encoding=\"UTF-8\"\/>\n+<!-- With this output encoding, should get two bytes (xC3,xA6) for the &aelig -->\n+\n+<xsl:template match=\"\/\">\n+  <out>\n+    <xsl:copy-of select=\"'abcd&aelig;fgh'\"\/>\n+  <\/out>\n+<\/xsl:template>\n+\n+<\/xsl:stylesheet>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLDTD.xsl","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n+<!DOCTYPE doc SYSTEM 'test.dtd'\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<doc\/>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLPI.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+<?xml version='1.1'?>\r\n+<?xml-stylesheet href=\"XSLPI_target.xsl\" type=\"text\/xml\"?>\r\n+<xsl:stylesheet \r\n+    xmlns:xsl='http:\/\/www.w3.org\/1999\/XSL\/Transform' \r\n+    version='1.0'>\r\n+<\/xsl:stylesheet>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLPI.xsl","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\"?>\r\n+<xsl:stylesheet xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\" version=\"1.0\">\r\n+\r\n+  <xsl:template match=\"footer\">\r\n+   <dv id=\"footer\"><xsl:apply-templates\/><\/dv>\r\n+  <\/xsl:template>\r\n+\r\n+\r\n+<\/xsl:stylesheet>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/XSLPI_target.xsl","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE properties SYSTEM \"http:\/\/java.sun.com\/dtd\/properties.dtd\">\n+<properties>\n+    <comment>java.util.Properties<\/comment>\n+    <entry key=\"property1\">value1<\/entry>\n+    <entry key=\"property2\">value2<\/entry>\n+    <entry key=\"property3\">value3<\/entry>\n+<\/properties>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/properties.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE properties SYSTEM \"http:\/\/invalid.site.com\/dtd\/properties1.dtd\"\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<properties>\n+    <comment>java.util.Properties<\/comment>\n+    <entry key=\"property1\">value1<\/entry>\n+    <entry key=\"property2\">value2<\/entry>\n+    <entry key=\"property3\">value3<\/entry>\n+<\/properties>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/properties1.xml","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+\r\n+<!ENTITY % bltin \"&#42;\">\r\n+<!ENTITY % pe \"x\">\r\n+\r\n+<!ELEMENT top (#PCDATA)>\r\n+\r\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/test.dtd","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+<?xml version=\"1.1\"?>\n+<!DOCTYPE top SYSTEM 'test.dtd'\n+[\n+    <!ENTITY % pe \"x\">\n+    <!ENTITY   x \"AAAAA\">\n+    <!ENTITY   x1 \"BBB\">\n+        ]>\n+<test:root xmlns:test=\"test\"\n+            xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+            xsi:schemaLocation=\"test val_test.xsd\"\n+            xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\">\n+   <child xsi:type=\"xsd:string\">&x1;<\/child>\n+<\/test:root>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/val_test.xml","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.1\"?>\n+<xsd:schema xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+             targetNamespace=\"test\">\n+     <xsd:element name=\"root\">\n+         <xsd:complexType>\n+             <xsd:sequence>\n+                 <xsd:element name=\"child\" type=\"xsd:anyType\"\/>\n+             <\/xsd:sequence>\n+         <\/xsd:complexType>\n+\n+         <xsd:key name=\"key1\">\n+             <xsd:selector xpath=\".\"\/>\n+             <xsd:field xpath=\"child\"\/>\n+         <\/xsd:key>\n+     <\/xsd:element>\n+<\/xsd:schema>\n\\ No newline at end of file\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/xmlfiles\/val_test.xsd","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -128,0 +128,1 @@\n+java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java 8288839 windows-x64\n@@ -133,0 +134,1 @@\n+java\/awt\/Focus\/NonFocusableWindowTest\/NonfocusableOwnerTest.java 8280392 windows-x64\n@@ -140,0 +142,1 @@\n+java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java 8294264 windows-x64\n@@ -440,1 +443,1 @@\n-java\/awt\/PopupMenu\/PopupMenuLocation.java 8238720 windows-all\n+java\/awt\/PopupMenu\/PopupMenuLocation.java 8238720,8315878 windows-all,macosx-aarch64\n@@ -463,0 +466,4 @@\n+# Several tests which fail on some hidpi systems\/macosx12-aarch64 system\n+java\/awt\/Window\/8159168\/SetShapeTest.java 8274106 macosx-aarch64\n+java\/awt\/image\/multiresolution\/MultiResolutionJOptionPaneIconTest.java 8274106 macosx-aarch64\n+\n@@ -657,2 +664,0 @@\n-java\/awt\/Window\/8159168\/SetShapeTest.java 8274106 macosx-aarch64\n-java\/awt\/image\/multiresolution\/MultiResolutionJOptionPaneIconTest.java 8274106 macosx-aarch64\n@@ -661,4 +666,0 @@\n-java\/awt\/Mouse\/EnterExitEvents\/DragWindowTest.java 8298823 macosx-all\n-java\/awt\/Focus\/NonFocusableWindowTest\/NonfocusableOwnerTest.java 8280392 windows-x64\n-java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java 8294264 windows-x64\n-\n@@ -666,1 +667,0 @@\n-java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java 8288839 windows-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/jmx\/mbeanserver\/introspector\/BeanClass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/jmx\/mbeanserver\/introspector\/SimpleIntrospectorTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapDnsProviderTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/8300268\/MaxIdleConnectionsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/8300268\/jdk.httpserver\/sun\/net\/httpserver\/HttpServerAccess.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/HttpExchange\/jdk.httpserver\/sun\/net\/httpserver\/HttpExchangeAccess.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4475478\n+ * @summary Tests that there is no NullPointerException\n+            thrown when we try to set Frame's icon\n+            which has null data\n+ * @key headful\n+ * @run main SetIconImageExceptionTest\n+*\/\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+\n+public class SetIconImageExceptionTest {\n+    static Frame f;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                \/\/ Test with non-existent image to test with null data\n+                \/\/  not throwing NPE\n+                Image icon = Toolkit.getDefaultToolkit().getImage(\"notexistent.gif\");\n+                f = new Frame(\"Frame with icon\");\n+                f.setIconImage(icon);\n+                f.setVisible(true);\n+            } finally {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            }\n+        });\n+    }\n+\n+ }\/\/ class SetIconImageExceptionTest\n+\n","filename":"test\/jdk\/java\/awt\/Icon\/SetIconImageExceptionTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/foreign\/TestHFA.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run testng\/othervm\/policy=security.policy\n+ *          -Djava.security.manager=default TestLinker\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+grant codeBase \"file:${test.classes}\/*\" {\n+    \/\/ Permissions needed to run the test\n+    permission java.util.PropertyPermission \"os.name\", \"read\";\n+    permission java.util.PropertyPermission \"NativeTestHelper.DEFAULT_RANDOM.seed\", \"read\";\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.foreign\";\n+};\n+\n","filename":"test\/jdk\/java\/foreign\/security.policy","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/CharCheck.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/CheckUnicode.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/DumpCharProperties.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/UnicodeBlock\/CheckBlocks.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/UnicodeCasingTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Character\/UnicodeSpec.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Integer.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Integer.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Integer.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Integer.toString(value));\n","filename":"test\/jdk\/java\/lang\/Integer\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Long.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Long.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Long.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Long.toString(value));\n","filename":"test\/jdk\/java\/lang\/Long\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Package\/annotation\/jdk.xml.dom\/org\/w3c\/dom\/css\/FakePackage.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/Package\/annotation\/src\/p\/Duplicate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8157464\n+ * @bug 8157464 8210375\n@@ -32,0 +32,1 @@\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames csm\/jdk.test.CallerSensitiveTest\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/Main.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private static final String REFLECTIVE_GET_CALLER_METHOD = \"getCallerClassReflectively\";\n@@ -71,0 +72,2 @@\n+        \/\/ test reflective call to StackWalker::getCallerClass\n+        cstest.invokeMethod();\n@@ -98,1 +101,10 @@\n-        Result result = (Result) method2.invoke(null);\n+        Result result2 = (Result) method2.invoke(null);\n+        checkNonCSMCaller(CallerSensitiveTest.class, result2);\n+\n+        Method method3 = java.util.CSM.class.getMethod(REFLECTIVE_GET_CALLER_METHOD);\n+        Result result3 = (Result) method3.invoke(null);\n+        checkNonCSMCaller(CallerSensitiveTest.class, result3);\n+    }\n+\n+    void invokeMethod() throws Throwable {\n+        Result result = java.util.CSM.getCallerClassReflectively();\n@@ -104,1 +116,1 @@\n-            MethodType.methodType(Class.class));\n+                                             MethodType.methodType(Class.class));\n@@ -108,3 +120,8 @@\n-            MethodType.methodType(Result.class));\n-        Result result = (Result)mh2.invokeExact();\n-        checkNonCSMCaller(CallerSensitiveTest.class, result);\n+                                             MethodType.methodType(Result.class));\n+        Result result2 = (Result)mh2.invokeExact();\n+        checkNonCSMCaller(CallerSensitiveTest.class, result2);\n+\n+        MethodHandle mh3 = lookup.findStatic(java.util.CSM.class, REFLECTIVE_GET_CALLER_METHOD,\n+                                             MethodType.methodType(Result.class));\n+        Result result3 = (Result)mh3.invokeExact();\n+        checkNonCSMCaller(CallerSensitiveTest.class, result3);\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/csm\/jdk\/test\/CallerSensitiveTest.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.reflect.Method;\n@@ -36,0 +37,1 @@\n+                                           DROP_METHOD_INFO,\n@@ -61,1 +63,1 @@\n-            throw new RuntimeException(\"Exception not thrown by StackWalker::getCallerClass\");\n+            throw new RuntimeException(\"Exception not thrown by StackWalker::getCallerClass. Returned \" + c2.getName());\n@@ -67,1 +69,2 @@\n-     * Returns the caller of this non-caller-sensitive method.\n+     * Returns the caller of this non-caller-sensitive method returned\n+     * by StackWalker::getCallerClass\n@@ -74,0 +77,20 @@\n+    private static final Method GET_CALLER_CLASS;\n+    static {\n+        Method m = null;\n+        try {\n+            m = StackWalker.class.getMethod(\"getCallerClass\");\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+        GET_CALLER_CLASS = m;\n+    }\n+\n+    \/**\n+     * Returns the caller of this non-caller-sensitive method returned\n+     * by StackWalker::getCallerClass invoked via core reflection\n+     *\/\n+    public static Result getCallerClassReflectively() throws ReflectiveOperationException {\n+        Class<?> caller = (Class<?>)GET_CALLER_CLASS.invoke(walker);\n+        return new Result(List.of(caller), dump());\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/src\/java.base\/java\/util\/CSM.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8140450 8152893 8189291\n+ * @bug 8140450 8152893 8189291 8210375\n@@ -29,0 +29,1 @@\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames GetCallerClassTest\n@@ -121,0 +122,1 @@\n+            \/\/ Use reflection to call Method::invoke that invokes StackWalker::getCallerClass\n@@ -122,1 +124,2 @@\n-            Class<?> c = (Class<?>) m.invoke(stackWalker);\n+            Method invoke = Method.class.getMethod(\"invoke\", Object.class, Object[].class);\n+            Class<?> c = (Class<?>) invoke.invoke(m, new Object[] { stackWalker, null });\n","filename":"test\/jdk\/java\/lang\/StackWalker\/GetCallerClassTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8140450\n+ * @bug 8140450 8268829\n@@ -28,1 +28,1 @@\n- * @run testng SanityTest\n+ * @run junit SanityTest\n@@ -31,1 +31,0 @@\n-\n@@ -34,0 +33,2 @@\n+import java.util.stream.Stream;\n+import static java.lang.StackWalker.Option.*;\n@@ -35,1 +36,4 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -39,5 +43,6 @@\n-    public static void testNPE() {\n-        try {\n-            StackWalker sw = StackWalker.getInstance((Set<StackWalker.Option>) null);\n-            throw new RuntimeException(\"NPE expected\");\n-        } catch (NullPointerException e) {}\n+    public void testNPE() {\n+        assertThrows(NullPointerException.class, () ->\n+                StackWalker.getInstance((Set<StackWalker.Option>) null));\n+        assertThrows(NullPointerException.class, () ->\n+                StackWalker.getInstance((StackWalker.Option) null));\n+    }\n@@ -45,4 +50,2 @@\n-        try {\n-            StackWalker sw = StackWalker.getInstance((StackWalker.Option) null);\n-            throw new RuntimeException(\"NPE expected\");\n-        } catch (NullPointerException e) {}\n+    private static Stream<StackWalker> noRetainClassRef() {\n+        return Stream.of(StackWalker.getInstance(), StackWalker.getInstance(DROP_METHOD_INFO));\n@@ -51,6 +54,4 @@\n-    @Test\n-    public static void testUOE() {\n-        try {\n-            StackWalker.getInstance().getCallerClass();\n-            throw new RuntimeException(\"UOE expected\");\n-        } catch (UnsupportedOperationException expected) {}\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOE(StackWalker sw) {\n+        assertThrows(UnsupportedOperationException.class, () -> sw.getCallerClass());\n@@ -60,5 +61,3 @@\n-    public static void testInvalidEstimateDepth() {\n-        try {\n-            StackWalker sw = StackWalker.getInstance(Collections.emptySet(), 0);\n-            throw new RuntimeException(\"Illegal estimateDepth should throw IAE\");\n-        } catch (IllegalArgumentException e) {}\n+    public void testInvalidEstimateDepth() {\n+        assertThrows(IllegalArgumentException.class, () ->\n+                StackWalker.getInstance(Collections.emptySet(), 0));\n@@ -68,5 +67,3 @@\n-    public static void testNullFuncation() {\n-        try {\n-            StackWalker.getInstance().walk(null);\n-            throw new RuntimeException(\"NPE expected\");\n-        } catch (NullPointerException e) {}\n+    public void testNullFunction() {\n+        assertThrows(NullPointerException.class, () ->\n+                StackWalker.getInstance().walk(null));\n@@ -76,5 +73,10 @@\n-    public static void testNullConsumer() {\n-        try {\n-            StackWalker.getInstance().forEach(null);\n-            throw new RuntimeException(\"NPE expected\");\n-        } catch (NullPointerException e) {}\n+    public void testNullConsumer() {\n+        assertThrows(NullPointerException.class, () ->\n+                StackWalker.getInstance().forEach(null));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOEFromGetDeclaringClass(StackWalker sw) {\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getDeclaringClass));\n@@ -83,0 +85,6 @@\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOEFromGetMethodType(StackWalker sw) {\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getMethodType));\n+    }\n@@ -84,8 +92,3 @@\n-    @Test\n-    public static void testUOEFromGetDeclaringClass() {\n-        try {\n-            StackWalker sw = StackWalker.getInstance();\n-            sw.forEach(StackWalker.StackFrame::getDeclaringClass);\n-            throw new RuntimeException(\"UOE expected\");\n-        } catch (UnsupportedOperationException expected) {\n-        }\n+    private static Stream<StackWalker> noMethodInfo() {\n+        return Stream.of(StackWalker.getInstance(DROP_METHOD_INFO),\n+                         StackWalker.getInstance(Set.of(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE)));\n@@ -94,7 +97,17 @@\n-    @Test\n-    public static void testUOEFromGetMethodType() {\n-        try {\n-            StackWalker sw = StackWalker.getInstance();\n-            sw.forEach(StackWalker.StackFrame::getMethodType);\n-            throw new RuntimeException(\"UOE expected\");\n-        } catch (UnsupportedOperationException expected) {}\n+    @ParameterizedTest\n+    @MethodSource(\"noMethodInfo\")\n+    public void testNoMethodInfo(StackWalker sw) {\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getMethodName));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getMethodType));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getDescriptor));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getByteCodeIndex));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::getFileName));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::isNativeMethod));\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sw.forEach(StackWalker.StackFrame::toStackTraceElement));\n","filename":"test\/jdk\/java\/lang\/StackWalker\/SanityTest.java","additions":63,"deletions":50,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-                  sf.getDeclaringClass().toString());\n+                  sf.getDeclaringClass().toString() + \", index: \" + index);\n@@ -87,1 +87,1 @@\n-                    \", but got: \" + sf.getClassName());\n+                    \", but got: \" + sf.getClassName() + \", index: \" + index);\n@@ -91,1 +91,1 @@\n-                    \", but got: \" + sf.getMethodName());\n+                    \", but got: \" + sf.getMethodName()  + \", index: \" + index);\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackRecorderUtil.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import static java.lang.StackWalker.Option.*;\n@@ -29,0 +28,1 @@\n+import java.util.Set;\n@@ -32,0 +32,2 @@\n+import static java.lang.StackWalker.Option.*;\n+\n@@ -34,1 +36,1 @@\n- * @bug 8140450\n+ * @bug 8140450 8210375\n@@ -160,0 +162,13 @@\n+\n+            System.out.println(\"Collect classes\");\n+            List<Class<?>> classes = StackWalker.getInstance(Set.of(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE))\n+                    .walk(s -> {\n+                        return s.map(StackFrame::getDeclaringClass).collect(Collectors.toList());\n+                    });\n+            for (i=0; i < GOLDEN_CLASS_NAMES.size(); i++) {\n+                Class<?> c = classes.get(i);\n+                if (!GOLDEN_CLASS_NAMES.get(i).equals(c.getName())) {\n+                    throw new RuntimeException(\"unexpected class at \" + i + \" \" + c.getName() +\n+                            \" expected \" + GOLDEN_CLASS_NAMES.get(i));\n+                }\n+            }\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackStreamTest.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+            \"jdk.internal.reflect.DirectMethodHandleAccessor\",\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackWalkTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-                EnumSet.allOf(StackWalker.Option.class));\n+                EnumSet.of(RETAIN_CLASS_REFERENCE, SHOW_HIDDEN_FRAMES, SHOW_REFLECT_FRAMES));\n","filename":"test\/jdk\/java\/lang\/StackWalker\/VerifyStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/StrictMath\/FdlibmTranslit.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/String\/SpecialCasingTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/String\/UnicodeCasingTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @modules java.base\/sun.util.logging\n- * @library \/test\/lib\n+ * @modules java.base\/sun.util.logging java.base\/jdk.internal.logger:+open\n+ * @library ..\/lib\n@@ -35,1 +35,0 @@\n-\n@@ -53,0 +52,2 @@\n+        \/\/ allow time to let bootstrap logger flush data\n+        BootstrapLoggerUtils.awaitPending();\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/RecursiveLoading\/PlatformRecursiveLoadingTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @modules java.base\/jdk.internal.logger:+open\n+ * @library ..\/lib\n@@ -48,0 +50,2 @@\n+        \/\/ allow time to let bootstrap logger flush data\n+        BootstrapLoggerUtils.awaitPending();\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/RecursiveLoading\/RecursiveLoadingTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib ..\/lib\n+ * @compile\/module=java.base share\/classes\/jdk\/internal\/event\/EventHelper.java\n+ * @modules java.base\/jdk.internal.logger:+open\n@@ -149,0 +151,2 @@\n+            \/\/ allow time to let bootstrap logger flush data\n+            BootstrapLoggerUtils.awaitPending();\n@@ -167,0 +171,2 @@\n+\n+        Path patches = Paths.get(System.getProperty(\"test.classes\"), \"patches\", \"java.base\");\n@@ -168,0 +174,4 @@\n+            \/\/ patch of EventHelper to log at INFO level (for bootstrap logger)\n+            \"--patch-module\", \"java.base=\" + patches.toString(),\n+            \/\/ allow test to access internal bootstrap logger functionality\n+            \"--add-opens=java.base\/jdk.internal.logger=ALL-UNNAMED\",\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/SignedLoggerFinderTest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+import jdk.internal.access.JavaUtilJarAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+\/**\n+ * A helper class to have events logged to a JDK Event Logger.\n+ *\/\n+\n+public final class EventHelper {\n+\n+    private static final JavaUtilJarAccess JUJA = SharedSecrets.javaUtilJarAccess();\n+    private static volatile boolean loggingSecurity;\n+    private static volatile System.Logger securityLogger;\n+    private static final VarHandle LOGGER_HANDLE;\n+    static {\n+        System.err.println(\"Patch version of EventHelper loaded\");\n+        try {\n+            LOGGER_HANDLE =\n+                    MethodHandles.lookup().findStaticVarHandle(\n+                            EventHelper.class, \"securityLogger\", System.Logger.class);\n+        } catch (ReflectiveOperationException e) {\n+            throw new Error(e);\n+        }\n+    }\n+    \/\/ a patch module to help this test ensure events are logged when\n+    \/\/ bootstrap logger is in use\n+    private static final System.Logger.Level LOG_LEVEL = System.Logger.Level.INFO;\n+\n+    \/\/ helper class used for logging security related events for now\n+    private static final String SECURITY_LOGGER_NAME = \"jdk.event.security\";\n+\n+\n+    public static void logTLSHandshakeEvent(Instant start,\n+                                            String peerHost,\n+                                            int peerPort,\n+                                            String cipherSuite,\n+                                            String protocolVersion,\n+                                            long peerCertId) {\n+        assert securityLogger != null;\n+        String prepend = getDurationString(start);\n+        securityLogger.log(LOG_LEVEL, prepend +\n+        \" TLSHandshake: {0}:{1,number,#}, {2}, {3}, {4,number,#}\",\n+        peerHost, peerPort, protocolVersion, cipherSuite, peerCertId);\n+    }\n+\n+    public static void logSecurityPropertyEvent(String key,\n+                                                String value) {\n+\n+        assert securityLogger != null;\n+        securityLogger.log(LOG_LEVEL,\n+            \"SecurityPropertyModification: key:{0}, value:{1}\", key, value);\n+    }\n+\n+    public static void logX509ValidationEvent(long anchorCertId,\n+                                         long[] certIds) {\n+        assert securityLogger != null;\n+        String codes = LongStream.of(certIds)\n+                .mapToObj(Long::toString)\n+                .collect(Collectors.joining(\", \"));\n+        securityLogger.log(LOG_LEVEL,\n+                \"ValidationChain: {0,number,#}, {1}\", anchorCertId, codes);\n+    }\n+\n+    public static void logX509CertificateEvent(String algId,\n+                                               String serialNum,\n+                                               String subject,\n+                                               String issuer,\n+                                               String keyType,\n+                                               int length,\n+                                               long certId,\n+                                               long beginDate,\n+                                               long endDate) {\n+        assert securityLogger != null;\n+        securityLogger.log(LOG_LEVEL, \"X509Certificate: Alg:{0}, Serial:{1}\" +\n+            \", Subject:{2}, Issuer:{3}, Key type:{4}, Length:{5,number,#}\" +\n+            \", Cert Id:{6,number,#}, Valid from:{7}, Valid until:{8}\",\n+            algId, serialNum, subject, issuer, keyType, length,\n+            certId, new Date(beginDate), new Date(endDate));\n+    }\n+\n+    \/**\n+     * Method to calculate a duration timestamp for events which measure\n+     * the start and end times of certain operations.\n+     * @param start Instant indicating when event started recording\n+     * @return A string representing duraction from start time to\n+     * time of this method call. Empty string is start is null.\n+     *\/\n+    private static String getDurationString(Instant start) {\n+        if (start != null) {\n+            if (start.equals(Instant.MIN)) {\n+                return \"N\/A\";\n+            }\n+            Duration duration = Duration.between(start, Instant.now());\n+            long micros = duration.toNanos() \/ 1_000;\n+            if (micros < 1_000_000) {\n+                return \"duration = \" + (micros \/ 1_000.0) + \" ms:\";\n+            } else {\n+                return \"duration = \" + ((micros \/ 1_000) \/ 1_000.0) + \" s:\";\n+            }\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    \/**\n+     * Helper to determine if security events are being logged\n+     * at a preconfigured logging level. The configuration value\n+     * is read once at class initialization.\n+     *\n+     * @return boolean indicating whether an event should be logged\n+     *\/\n+    public static boolean isLoggingSecurity() {\n+        \/\/ Avoid a bootstrap issue where the commitEvent attempts to\n+        \/\/ trigger early loading of System Logger but where\n+        \/\/ the verification process still has JarFiles locked\n+        if (securityLogger == null && !JUJA.isInitializing()) {\n+            LOGGER_HANDLE.compareAndSet( null, System.getLogger(SECURITY_LOGGER_NAME));\n+            loggingSecurity = securityLogger.isLoggable(LOG_LEVEL);\n+        }\n+        return loggingSecurity;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/java.base\/share\/classes\/jdk\/internal\/event\/EventHelper.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import java.util.Set;\n+\n@@ -41,0 +41,1 @@\n+ * @library ..\/..\/lib\n@@ -43,1 +44,1 @@\n- * @build BootstrapLoggerUtils LogStream\n+ * @build LogStream\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BootstrapLogger\/BootstrapLoggerAPIsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+ * @library ..\/..\/lib\n@@ -58,1 +59,1 @@\n- * @build BootstrapLoggerUtils LogStream\n+ * @build LogStream\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BootstrapLogger\/BootstrapLoggerTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.function.BooleanSupplier;\n-\n-import jdk.internal.logger.BootstrapLogger;\n-\n-class BootstrapLoggerUtils {\n-\n-    private static final Field IS_BOOTED;\n-    private static final Method AWAIT_PENDING;\n-\n-    static {\n-        try {\n-            IS_BOOTED = BootstrapLogger.class.getDeclaredField(\"isBooted\");\n-            IS_BOOTED.setAccessible(true);\n-            \/\/ private reflection hook that allows us to test wait until all\n-            \/\/ the tasks pending in the BootstrapExecutor are finished.\n-            AWAIT_PENDING = BootstrapLogger.class.getDeclaredMethod(\"awaitPendingTasks\");\n-            AWAIT_PENDING.setAccessible(true);\n-        } catch (Exception ex) {\n-            throw new ExceptionInInitializerError(ex);\n-        }\n-    }\n-\n-    static void setBootedHook(BooleanSupplier supplier) throws IllegalAccessException {\n-        IS_BOOTED.set(null, supplier);\n-    }\n-\n-    static void awaitPending() {\n-        try {\n-            AWAIT_PENDING.invoke(null);\n-        } catch (IllegalAccessException | IllegalArgumentException\n-                | InvocationTargetException ex) {\n-            ex.printStackTrace();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BootstrapLogger\/BootstrapLoggerUtils.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import jdk.internal.logger.BootstrapLogger;\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BootstrapLogger\/LogStream.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.function.BooleanSupplier;\n+\n+import jdk.internal.logger.BootstrapLogger;\n+\n+public final class BootstrapLoggerUtils {\n+\n+    private static final Field IS_BOOTED;\n+    private static final Method AWAIT_PENDING;\n+\n+    static {\n+        try {\n+            IS_BOOTED = BootstrapLogger.class.getDeclaredField(\"isBooted\");\n+            IS_BOOTED.setAccessible(true);\n+            \/\/ private reflection hook that allows us to test wait until all\n+            \/\/ the tasks pending in the BootstrapExecutor are finished.\n+            AWAIT_PENDING = BootstrapLogger.class.getDeclaredMethod(\"awaitPendingTasks\");\n+            AWAIT_PENDING.setAccessible(true);\n+        } catch (Exception ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    public static void setBootedHook(BooleanSupplier supplier) throws IllegalAccessException {\n+        IS_BOOTED.set(null, supplier);\n+    }\n+\n+    public static void awaitPending() {\n+        try {\n+            AWAIT_PENDING.invoke(null);\n+        } catch (IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/lib\/BootstrapLoggerUtils.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationVerifier.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationWithLambda.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/annotation\/ClassFileGenerator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/annotation\/GoodAnnotation.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/constant\/ModuleDescTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/constant\/PackageDescTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/8076596\/Test8076596.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/8147078\/Test8147078.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/ArrayConstructorTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/ArrayLengthTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/ConstantIdentityMHTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/CountedLoopIterationCountsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/DropArgumentsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/FindAccessTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/FindClassSecurityManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/FoldTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/InvokeMethodHandleWithBadArgument.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/LoopCombinatorLongSignatureTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/LoopCombinatorTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/TestCatchException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodTypeSecurityManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/SpreadCollectTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/TryFinallyTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarArgsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/TestAccessClass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/TestCls.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/TestFindClass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/TestLookup.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/p\/Foo.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/accessClassAndFindClass\/q\/Bar.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/indify\/Indify.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/ChainedLookupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/ReflectiveLookupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/java.base\/java\/lang\/LookupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TestGenericReturnTypeToString.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/net\/httpclient\/ExpectContinueTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                LOGGER.info(\"Got ServiceConfigurationError: \" + sce);\n+                System.err.println(\"Got ServiceConfigurationError: \" + sce);\n@@ -81,2 +81,2 @@\n-            LOGGER.info(\"inetAddressResolverProvider permission is \" +\n-                        (permitInetAddressResolver ? \"granted\" : \"not granted\"));\n+            System.err.println(\"inetAddressResolverProvider permission is \" +\n+                               (permitInetAddressResolver ? \"granted\" : \"not granted\"));\n@@ -88,1 +88,0 @@\n-                LOGGER.info(\"Checking RuntimePermission: \" + permission);\n@@ -90,1 +89,1 @@\n-                    LOGGER.info(\"Denying '\" + RUNTIME_PERMISSION_NAME + \"' permission\");\n+                    System.err.println(\"Denying '\" + RUNTIME_PERMISSION_NAME + \"' permission\");\n@@ -92,1 +91,5 @@\n-                }\n+                } else {\n+                   \/\/ Do not do anything for non-matching Permission. Otherwise the test\n+                   \/\/ has a chance to re-enter here recursively, e.g. due to permission\n+                   \/\/ checks during class load. This would eventually overflow the stack.\n+               }\n@@ -98,1 +101,0 @@\n-    private static final Logger LOGGER = Logger.getLogger(RuntimePermissionTest.class.getName());\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/RuntimePermissionTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/lib\/test.library\/testlib\/ResolutionRegistry.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivAccomplice.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivAccompliceTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/CheckDefaults.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/EntryProtectionTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/KeytoolWriteP12Test.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataEmptyTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataStoreLoadTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertAPITest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertKeytool.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/Utils.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/selfIssued\/openssl.cnf","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/indirectCRL\/openssl.cnf","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/nameConstraints\/openssl.cnf","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/testlibrary\/CertificateBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/security\/testlibrary\/SimpleOCSPServer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestMutatingInstance.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/serialization\/TestDeserializeCNF.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/MantissaDigits.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,299 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8041488\n+ * @summary Tests for ListFormat class\n+ * @run junit TestListFormat\n+ *\/\n+\n+import java.text.DateFormat;\n+import java.text.FieldPosition;\n+import java.text.ListFormat;\n+import java.text.ParseException;\n+import java.text.ParsePosition;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class TestListFormat {\n+    private static final List<String> SAMPLE1 = List.of(\"foo\");\n+    private static final List<String> SAMPLE2 = List.of(\"foo\", \"bar\");\n+    private static final List<String> SAMPLE3 = List.of(\"foo\", \"bar\", \"baz\");\n+    private static final List<String> SAMPLE4 = List.of(\"foo\", \"bar\", \"baz\", \"qux\");\n+    private static final String[] CUSTOM_PATTERNS_FULL = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"twobef {0} two {1} twoaft\",\n+            \"threebef {0} three {1} three {2} threeaft\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_MINIMAL = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_START = {\n+            \"{0}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_MIDDLE = {\n+            \"{0} sbet {1}\",\n+            \"{0} {1} {2}\",\n+            \"{0} ebet {1} eaft\",\n+            \"\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_END = {\n+            \"{0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"error {0} ebet {1}\",\n+            \"\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_TWO = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"{1}error{0}\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_THREE = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"\",\n+            \"{0}error{1}\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_NULL = {\n+            null,\n+            null,\n+            null,\n+            null,\n+            null,\n+    };\n+\n+\n+    @Test\n+    void getAvailableLocales() {\n+        assertArrayEquals(DateFormat.getAvailableLocales(), ListFormat.getAvailableLocales());\n+    }\n+\n+    @Test\n+    void getInstance_noArg() {\n+        assertEquals(ListFormat.getInstance(), ListFormat.getInstance(Locale.getDefault(Locale.Category.FORMAT), ListFormat.Type.STANDARD, ListFormat.Style.FULL));\n+    }\n+\n+    static Arguments[] getInstance_1Arg() {\n+        return new Arguments[] {\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE1, \"foo\"),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE2, \"twobef foo two bar twoaft\"),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE3, \"threebef foo three bar three baz threeaft\"),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE4, \"sbef foo sbet bar mid baz ebet qux eaft\"),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE1, \"foo\"),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE2, \"sbef foo ebet bar eaft\"),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE3, \"sbef foo sbet bar ebet baz eaft\"),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE4, \"sbef foo sbet bar mid baz ebet qux eaft\"),\n+        };\n+    }\n+\n+    static Arguments[] getInstance_1Arg_IAE() {\n+        return new Arguments[] {\n+                arguments(new String[1], \"Pattern array length should be 5\"),\n+                arguments(new String[6], \"Pattern array length should be 5\"),\n+                arguments(CUSTOM_PATTERNS_IAE_START, \"start pattern is incorrect: {0}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_MIDDLE, \"middle pattern is incorrect: {0} {1} {2}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_END, \"end pattern is incorrect: error {0} ebet {1}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_TWO, \"pattern for two is incorrect: {1}error{0}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_THREE, \"pattern for three is incorrect: {0}error{1}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_NULL, \"patterns array contains one or more null elements\"),\n+        };\n+    }\n+\n+    static Arguments[] getInstance_3Arg() {\n+        return new Arguments[] {\n+                arguments(Locale.US, ListFormat.Type.STANDARD, ListFormat.Style.FULL,\n+                        \"foo, bar, and baz\", true),\n+                arguments(Locale.US, ListFormat.Type.OR, ListFormat.Style.FULL,\n+                        \"foo, bar, or baz\", true),\n+                arguments(Locale.US, ListFormat.Type.UNIT, ListFormat.Style.FULL,\n+                        \"foo, bar, baz\", true),\n+                arguments(Locale.US, ListFormat.Type.STANDARD, ListFormat.Style.SHORT,\n+                        \"foo, bar, & baz\", true),\n+                arguments(Locale.US, ListFormat.Type.OR, ListFormat.Style.SHORT,\n+                        \"foo, bar, or baz\", true),\n+                arguments(Locale.US, ListFormat.Type.UNIT, ListFormat.Style.SHORT,\n+                        \"foo, bar, baz\", true),\n+                arguments(Locale.US, ListFormat.Type.STANDARD, ListFormat.Style.NARROW,\n+                        \"foo, bar, baz\", true),\n+                arguments(Locale.US, ListFormat.Type.OR, ListFormat.Style.NARROW,\n+                        \"foo, bar, or baz\", true),\n+                arguments(Locale.US, ListFormat.Type.UNIT, ListFormat.Style.NARROW,\n+                        \"foo bar baz\", true),\n+\n+                arguments(Locale.JAPAN, ListFormat.Type.STANDARD, ListFormat.Style.FULL,\n+                        \"foo\\u3001bar\\u3001baz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.OR, ListFormat.Style.FULL,\n+                        \"foo\\u3001bar\\u3001\\u307e\\u305f\\u306fbaz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.UNIT, ListFormat.Style.FULL,\n+                        \"foo bar baz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.STANDARD, ListFormat.Style.SHORT,\n+                        \"foo\\u3001bar\\u3001baz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.OR, ListFormat.Style.SHORT,\n+                        \"foo\\u3001bar\\u3001\\u307e\\u305f\\u306fbaz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.UNIT, ListFormat.Style.SHORT,\n+                        \"foo bar baz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.STANDARD, ListFormat.Style.NARROW,\n+                        \"foo\\u3001bar\\u3001baz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.OR, ListFormat.Style.NARROW,\n+                        \"foo\\u3001bar\\u3001\\u307e\\u305f\\u306fbaz\", true),\n+                arguments(Locale.JAPAN, ListFormat.Type.UNIT, ListFormat.Style.NARROW,\n+                        \"foobarbaz\", false), \/\/ no delimiter, impossible to parse\/roundtrip\n+        };\n+    }\n+\n+    static Arguments[] parseObject_parsePos() {\n+        return new Arguments[] {\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE1),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE2),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE3),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE4),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE1),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE2),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE3),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE4),\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void getInstance_1Arg(String[] patterns, List<String> input, String expected) throws ParseException {\n+        var f = ListFormat.getInstance(patterns);\n+        compareResult(f, input, expected, true);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void getInstance_1Arg_IAE(String[] invalidPatterns, String errorMsg) {\n+        var ex = assertThrows(IllegalArgumentException.class,\n+                () -> ListFormat.getInstance(invalidPatterns));\n+        assertEquals(errorMsg, ex.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void getInstance_3Arg(Locale l, ListFormat.Type type, ListFormat.Style style, String expected, boolean roundTrip) throws ParseException {\n+        var f = ListFormat.getInstance(l, type, style);\n+        compareResult(f, SAMPLE3, expected, roundTrip);\n+    }\n+\n+    @Test\n+    void format_3Arg() {\n+        var f = ListFormat.getInstance();\n+        \/\/ Ensures it accepts both List and []\n+        assertEquals(f.format(SAMPLE4, new StringBuffer(), null).toString(),\n+                f.format(SAMPLE4.toArray(), new StringBuffer(), null).toString());\n+\n+        \/\/ Tests NPE\n+        assertThrows(NullPointerException.class,\n+                () -> f.format(null, new StringBuffer(), new FieldPosition(0)));\n+        assertThrows(NullPointerException.class,\n+                () -> f.format(new Object(), null, new FieldPosition(0)));\n+\n+        \/\/ Tests IAE\n+        var ex = assertThrows(IllegalArgumentException.class,\n+                () -> f.format(new Object(), new StringBuffer(), null));\n+        assertEquals(\"The object to format should be a List<Object> or an Object[]\", ex.getMessage());\n+    }\n+\n+    @Test\n+    void formatToCharacterIterator() {\n+        var f = ListFormat.getInstance();\n+        \/\/ Ensures it accepts both List and []\n+        assertEquals(f.formatToCharacterIterator(SAMPLE4).toString(),\n+                f.formatToCharacterIterator(SAMPLE4.toArray()).toString());\n+\n+        \/\/ Tests NPE\n+        assertThrows(NullPointerException.class,\n+                () -> f.formatToCharacterIterator(null));\n+\n+        \/\/ Tests IAE\n+        var ex = assertThrows(IllegalArgumentException.class,\n+                () -> f.formatToCharacterIterator(new Object()));\n+        assertEquals(\"The arguments should be a List<Object> or an Object[]\", ex.getMessage());\n+    }\n+\n+    @Test\n+    void format_emptyInput() {\n+        var ex = assertThrows(IllegalArgumentException.class,\n+                () -> ListFormat.getInstance().format(List.of()));\n+        assertEquals(\"There should at least be one input string\", ex.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void parseObject_parsePos(String[] patterns, List<String> input) {\n+        var prefix = \"prefix\";\n+        var f = ListFormat.getInstance(patterns);\n+        var testStr = prefix + f.format(input);\n+\n+        var pp = new ParsePosition(prefix.length());\n+        var parsed = f.parseObject(testStr, pp);\n+        assertEquals(input, parsed, pp.toString());\n+        assertEquals(new ParsePosition(testStr.length()), pp);\n+\n+        pp.setIndex(0);\n+        parsed = f.parseObject(testStr, pp);\n+        assertNotEquals(input, parsed);\n+        assertEquals(-1, pp.getErrorIndex());\n+\n+        pp.setIndex(prefix.length() + 1);\n+        parsed = f.parseObject(testStr, pp);\n+        assertNotEquals(input, parsed);\n+        assertEquals(-1, pp.getErrorIndex());\n+    }\n+\n+    private static void compareResult(ListFormat f, List<String> input, String expected, boolean roundTrip) throws ParseException {\n+        var result = f.format(input);\n+        assertEquals(expected, result);\n+        if (roundTrip) {\n+            assertEquals(input, f.parse(result));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/ListFormat\/TestListFormat.java","additions":299,"deletions":0,"binary":false,"changes":299,"status":"added"},{"patch":"@@ -37,1 +37,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/HijrahConfigTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/AbstractTCKTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/CopticChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/CopticDate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/CopticEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronoLocalDate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronoLocalDateTime.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronoPeriod.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronoZonedDateTime.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKHijrahChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKHijrahEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKIsoChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKIsoEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKJapaneseChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKJapaneseEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKMinguoChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKMinguoEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKThaiBuddhistChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKThaiBuddhistEra.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/serial\/TCKChronoLocalDateSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/serial\/TCKChronoLocalDateTimeSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/serial\/TCKChronoZonedDateTimeSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/serial\/TCKChronologySerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKFormatStyle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKResolverStyle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKSignStyle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/TCKChronoField.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/TCKChronoUnit.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/TCKIsoFields.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/TCKWeekFields.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/serial\/TCKChronoFieldSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/serial\/TCKChronoUnitSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/serial\/TCKWeekFieldsSerialization.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestChronoLocalDate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestChronologyPerf.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestEraDisplayName.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestExampleCode.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestIsoChronoImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestJapaneseChronoImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestJapaneseChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestThaiBuddhistChronoImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestUmmAlQuraChronology.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestChronoField.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestChronoUnit.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestIsoFields.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestIsoWeekFields.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/util\/Arrays\/java.base\/java\/util\/SortingHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/util\/Map\/FunctionalCMEs.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @summary test bit sequences produced by clases that implement interface RandomGenerator\n+ * @summary test bit sequences produced by classes that implement interface RandomGenerator\n@@ -48,1 +48,1 @@\n- * @run main RandomTestBsi1999\n+ * @run main\/othervm\/timeout=400 RandomTestBsi1999\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestBsi1999.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/java\/util\/stream\/CustomFJPoolTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/CryptoPolicyFallback.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/TestExemption.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/TestUnlimited.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/evilprov\/com\/evilprovider\/EvilHmacSHA1.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/evilprov\/com\/evilprovider\/EvilProvider.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/evilprov\/module-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/ServerName\/SSLSocketSNISensitive.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/ConcurrentClientAccessTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/TLSTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/TestSessionLocalPrincipal.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/EmptyCertificateAuthorities.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/ExportableBlockCipher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/ExportableStreamCipher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/GenericBlockCipher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/GenericStreamCipher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/DisabledShortDSAKeys.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/DisabledShortRSAKeys.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/ShortRSAKey512.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/ShortRSAKeyGCM.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/SignatureAlgorithms.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/ciphersuites\/ECCurvesconstraints.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLCapabilities.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLExplorer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/print\/PrintSEUmlauts\/PrintSEUmlauts.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/CurrentSubject.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/sound\/sampled\/Lines\/ToString.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+import java.io.File;\n+\n+\/*\n+ * @test\n+ * @bug 8312075\n+ * @summary Test to check if created newFolder is updated with\n+ *          changing Locale.\n+ * @run main\/othervm -Duser.language=en -Duser.country=US FileChooserNewFolderLocaleTest\n+ *\/\n+public class FileChooserNewFolderLocaleTest {\n+    static final String FRENCH_NEW_FOLDER = \"Nouveau dossier\";\n+\n+    public static void main(String[] args) throws Exception {\n+        File newFolderEnglish = null;\n+        File newFolderFrench = null;\n+        String newFolderKey;\n+\n+        boolean isWindows =\n+                System.getProperty(\"os.name\").toLowerCase().contains(\"windows\");\n+        if (isWindows) {\n+            newFolderKey = \"FileChooser.win32.newFolder\";\n+        } else {\n+            newFolderKey = \"FileChooser.other.newFolder\";\n+        }\n+\n+        String englishNewFolder = UIManager.getString(newFolderKey);\n+        try {\n+            JFileChooser fileChooser = new JFileChooser();\n+            File currentDir = new File(\".\");\n+\n+            newFolderEnglish =\n+                    fileChooser.getFileSystemView().createNewFolder(currentDir);\n+            if (!newFolderEnglish.getName().contains(englishNewFolder)) {\n+                throw new RuntimeException(\"English Locale verification Failed\");\n+            }\n+\n+            UIManager.put(newFolderKey, FRENCH_NEW_FOLDER);\n+\n+            newFolderFrench =\n+                    fileChooser.getFileSystemView().createNewFolder(currentDir);\n+            if (!newFolderFrench.getName().contains(FRENCH_NEW_FOLDER)) {\n+                throw new RuntimeException(\"Failed to update to French Locale\");\n+            }\n+        } finally {\n+            deleteFolder(newFolderEnglish);\n+            deleteFolder(newFolderFrench);\n+        }\n+        System.out.println(\"Test Passed!\");\n+    }\n+\n+    public static void deleteFolder(File file) {\n+        if (file != null && !(file.delete())) {\n+            System.out.println(\"Failed to delete file : \" + file.getName());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileChooserNewFolderLocaleTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4624353\n+ * @summary Tests that Motif FileChooser is not able to show control buttons\n+ * @key headful\n+ * @run main bug4624353\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug4624353 {\n+    static volatile boolean passed = true;\n+    static JFrame fr;\n+    static JFileChooser fc;\n+\n+    public static void main(String args[]) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4624353\");\n+                fc = new JFileChooser();\n+                fc.setControlButtonsAreShown(false);\n+                fr.getContentPane().add(fc);\n+                fr.pack();\n+                fr.setVisible(true);\n+\n+                passAround(fc);\n+            });\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void passAround(Container c) {\n+        Component[] list = c.getComponents();\n+        if (list.length == 0) {\n+            return;\n+        }\n+        for (int i = 0; i < list.length; i++) {\n+            if (list[i] != null) {\n+                if ((list[i] instanceof JButton) &&\n+                        \"OK\".equals(((JButton)list[i]).getText())) {\n+                    passed = false;\n+                    return;\n+                }\n+                passAround((Container)list[i]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4624353.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4673161\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests if JFileChooser preferred size depends on selected files\n+ * @run main bug4673161\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.io.File;\n+import javax.swing.JFileChooser;\n+import javax.swing.UIManager;\n+\n+public class bug4673161 {\n+\n+  public static void main(String[] args) throws Exception {\n+    JFileChooser fc = new JFileChooser();\n+    Dimension d = fc.getPreferredSize();\n+    JFileChooser fc2 = new JFileChooser();\n+    File[] files = new File[50];\n+    for (int i = 0; i < 50; i++) {\n+      files[i] = new File(\"file\" + i);\n+    }\n+    fc2.setSelectedFiles(files);\n+    Dimension d2 = fc2.getPreferredSize();\n+    if (!d.equals(d2)) {\n+      throw new RuntimeException(\"Test failed: JFileChooser preferred \" +\n+              \"size depends on selected files\");\n+    }\n+\n+    UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+\n+    JFileChooser fc3 = new JFileChooser();\n+    d = fc3.getPreferredSize();\n+    fc2 = new JFileChooser();\n+    files = new File[50];\n+    for (int i = 0; i < 50; i++) {\n+      files[i] = new File(\"file\" + i);\n+    }\n+    fc2.setSelectedFiles(files);\n+    d2 = fc2.getPreferredSize();\n+    if (!d.equals(d2)) {\n+      throw new RuntimeException(\"Test failed: JFileChooser preferred \" +\n+              \"size depends on selected files\");\n+    }\n+  }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4673161.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4782168\n+ * @summary Tests if DefaultShellFolder.isHidden() crashes for the\n+           root folder on Solaris\n+ * @modules java.desktop\/sun.awt.shell\n+ * @run main bug4782168\n+ *\/\n+\n+public class bug4782168 {\n+\n+    public static void main(String args[]) throws Exception {\n+        sun.awt.shell.ShellFolder sf = sun.awt.shell.ShellFolder.\n+                getShellFolder(new java.io.File(\"\/\"));\n+        sf.isHidden();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/bug4782168.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4822331\n+ * @summary setLaberFor does not transfer focus to the JSpinner editor\n+ * @library \/test\/lib\n+ * @key headful\n+ * @run main bug4822331\n+ *\/\n+\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+import javax.swing.JButton;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JSpinner;\n+import javax.swing.SwingUtilities;\n+import jdk.test.lib.Platform;\n+\n+public class bug4822331 {\n+\n+    static JFrame fr;\n+    static JButton button;\n+    static JSpinner spinner;\n+    static volatile boolean tfFocused = false;\n+    static volatile boolean passed = false;\n+\n+    public static void main(String []args) throws Exception {\n+        bug4822331 test = new bug4822331();\n+        test.init();\n+    }\n+\n+    public void init() throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+                fr.getContentPane().setLayout(new FlowLayout());\n+\n+                button = new JButton(\"Button\");\n+                fr.getContentPane().add(button);\n+\n+                spinner = new JSpinner();\n+                JLabel spinnerLabel = new JLabel(\"spinner\");\n+                spinnerLabel.setDisplayedMnemonic(KeyEvent.VK_S);\n+                spinnerLabel.setLabelFor(spinner);\n+                fr.getContentPane().add(spinnerLabel);\n+                fr.getContentPane().add(spinner);\n+\n+                JSpinner.DefaultEditor editor =\n+                        (JSpinner.DefaultEditor) spinner.getEditor();\n+                JFormattedTextField ftf = editor.getTextField();\n+                ftf.addFocusListener(new FocusAdapter() {\n+                    public void focusGained(FocusEvent e) {\n+                        passed = true;\n+                    }\n+                });\n+                fr.pack();\n+                fr.setVisible(true);\n+            });\n+            start();\n+            if ( !passed ) {\n+                throw new RuntimeException(\"The activation of spinner's \" +\n+                        \"mnemonic didn't focus the editor component.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(1000);\n+        robot.waitForIdle();\n+        button.requestFocus();\n+        if (Platform.isOSX()) {\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+        } else {\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/bug4822331.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4300224\n+ * @summary BasicListUI.ListDataHandler improperly updates list selection on insertion\n+ * @run main bug4300224\n+ *\/\n+\n+import javax.swing.JList;\n+import javax.swing.DefaultListModel;\n+\n+public class bug4300224 {\n+\n+    public static void main(String[] args) throws Exception {\n+        DefaultListModel<String> model = new DefaultListModel<>();\n+        JList<String> list = new JList<>(model);\n+\n+        model.addElement(\"List Item 1\");\n+        model.addElement(\"List Item 2\");\n+        model.addElement(\"List Item 3\");\n+        model.addElement(\"List Item 4\");\n+        list.setSelectedIndex(2);\n+        model.insertElementAt(\"Inserted Item\", 0);\n+        if (list.getSelectedIndex() != 3) {\n+            throw new RuntimeException(\"Inserted element improperly updates list selection\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4300224.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4487689\n+ * @summary JList.setSelectedValue() throws ArrayIndexOutOfBoundsException on empty list.\n+ * @run main bug4487689\n+ *\/\n+\n+import java.util.Vector;\n+import javax.swing.JList;\n+\n+public class bug4487689 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JList<String> list = new JList<>(new Vector<String>());\n+\n+        list.setSelectedIndex(0);\n+        list.getSelectedValue();\n+\n+        int[] indices = {0,1};\n+        list.setSelectedIndices(indices);\n+        list.getSelectedValues();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4487689.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4832765\n+ * @summary JList vertical scrolling doesn't work properly.\n+ * @run main bug4832765\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Rectangle;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4832765 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            String[] data = {\"One\", \"Two\", \"Three\", \"Four\",\n+                    \"Five\", \"Six \", \"Seven\", \"Eight\",\n+                    \"Nine\", \"Ten\", \"Eleven\", \"Twelv\"};\n+            JList<String> list = new JList<>(data);\n+            list.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n+\n+            JScrollPane jsp = new JScrollPane(list);\n+            Rectangle rect = list.getCellBounds(5, 5);\n+            Dimension d = new Dimension(200, rect.height);\n+            jsp.setPreferredSize(d);\n+            jsp.setMinimumSize(d);\n+\n+            list.scrollRectToVisible(rect);\n+\n+            int unit = list.getScrollableUnitIncrement(rect,\n+                    SwingConstants.VERTICAL,\n+                    -1);\n+            if (unit <= 0) {\n+                throw new RuntimeException(\"JList scrollable unit increment\" +\n+                        \" should be greate than 0.\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4832765.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4143592\n+ * @summary Tests the method add(Component, int) of JMenu for insertion\n+            the given component to a specified position of menu\n+ * @run main bug4143592\n+ *\/\n+\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+\n+public class bug4143592 {\n+\n+    public static void main(String[] argv) {\n+        JMenuBar mb = new JMenuBar();\n+        JMenu m = mb.add(new JMenu(\"Order\"));\n+        m.add(\"beginning\");\n+        m.add(\"middle\");\n+        m.add(\"end\");\n+        m.add(new JMenuItem(\"in between\"), 1);\n+        if (!m.getItem(1).getText().equals(\"in between\")) {\n+            throw new RuntimeException(\"Item was inserted incorrectly.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4143592.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4148154\n+ * @summary Tests that menu items created by JMenu.add(Action) method\n+           have right HorizontalTextPosition.\n+ * @run main bug4148154\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+import javax.swing.AbstractAction;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+\n+public class bug4148154\n+{\n+    public static void main(String[] args) {\n+        JMenu menu = new JMenu();\n+        JMenuItem mi = menu.add(new AbstractAction() {\n+                public void actionPerformed(ActionEvent ev) {}\n+            });\n+        if (mi.getHorizontalTextPosition() != JMenu.LEADING &&\n+            mi.getHorizontalTextPosition() != JMenu.TRAILING) {\n+\n+            throw new RuntimeException(\"Failed:\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4148154.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4156316\n+ * @summary checks if JMenu.add(Component) throws NullPointerException\n+ * @run main bug4156316\n+ *\/\n+\n+import javax.swing.JComponent;\n+import javax.swing.JMenu;\n+\n+public class bug4156316 {\n+\n+    public static void main(String[] args) {\n+        JMenu m = new JMenu(\"test\");\n+        m.add(new XComponent());\n+    }\n+\n+    static class XComponent extends JComponent {\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4156316.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4161866\n+ * @summary Method AccessibleJMenu.removeAccessibleSelection does not\n+            remove selections correctly\n+ * @run main bug4161866\n+ *\/\n+\n+import javax.accessibility.AccessibleSelection;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+\n+public class bug4161866 {\n+\n+  public static void main(String[] argv) {\n+      JMenuBar mb = new JMenuBar();\n+      JMenu mnu = new JMenu();\n+      AccessibleSelection acs = mnu.getAccessibleContext().\n+              getAccessibleSelection();\n+      mb.add(mnu);\n+      JMenu jm = new JMenu();\n+      mnu.add(jm);\n+      jm.setSelected(true);\n+      acs.addAccessibleSelection(0);\n+      if (!jm.isSelected()) {\n+          throw new RuntimeException(\"Selection should be non-empty...\");\n+      }\n+\n+      acs.removeAccessibleSelection(0);\n+      if (jm.isSelected()) {\n+          throw new RuntimeException(\"Selection still non-empty after \" +\n+                  \"it was removed\");\n+      }\n+  }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4161866.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4244796\n+ * @summary Tests that JMenu has JMenu(Action) constructor\n+ * @run main bug4244796\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+import java.beans.PropertyChangeListener;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+\n+public class bug4244796 {\n+\n+    \/**\n+      * Auxilliary class implementing Action\n+     *\/\n+    static class NullAction implements Action {\n+        public void addPropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void removePropertyChangeListener(\n+                       PropertyChangeListener listener) {}\n+        public void putValue(String key, Object value) {}\n+        public void setEnabled(boolean b) {}\n+        public void actionPerformed(ActionEvent e) {}\n+\n+        public Object getValue(String key) { return null; }\n+        public boolean isEnabled() { return false; }\n+    }\n+\n+    public static void main(String[] argv) {\n+        Action action = new NullAction();\n+        JMenu menu = new JMenu(action);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4244796.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4767393\n+ * @summary Disabled JMenu is selectable via mnemonic\n+ * @key headful\n+ * @run main bug4767393\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4767393 {\n+\n+    public static JFrame mainFrame;\n+    public static JMenuBar menuBar;\n+    public static JMenu menu;\n+    public static JMenu disabled;\n+    public static volatile boolean disabledMenuSelected = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robo = new Robot();\n+            robo.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                mainFrame = new JFrame(\"Bug4767393\");\n+                menuBar = new JMenuBar();\n+                menu = new JMenu(\"File\");\n+                disabled = new JMenu(\"Disabled\");\n+                menuBar.add(menu);\n+                menu.add(\"Menu Item 1\");\n+                menu.add(\"Menu Item 2\");\n+                disabled.setEnabled(false);\n+                disabled.setMnemonic('D');\n+                disabled.add(\"Dummy menu item\");\n+                menu.add(disabled);\n+                menu.add(\"Menu Item 3\");\n+                menu.add(\"Menu Item 4\");\n+                mainFrame.setJMenuBar(menuBar);\n+\n+                mainFrame.setSize(200, 200);\n+                mainFrame.setLocationRelativeTo(null);\n+                mainFrame.setVisible(true);\n+            });\n+            robo.waitForIdle();\n+            robo.delay(500);\n+\n+            robo.keyPress(KeyEvent.VK_F10);\n+            robo.keyRelease(KeyEvent.VK_F10);\n+            robo.keyPress(KeyEvent.VK_DOWN);\n+            robo.keyRelease(KeyEvent.VK_DOWN);\n+            robo.delay(500);\n+            robo.keyPress(KeyEvent.VK_D);\n+            robo.keyRelease(KeyEvent.VK_D);\n+            robo.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                disabledMenuSelected = disabled.isSelected();\n+            });\n+\n+            if (disabledMenuSelected) {\n+                throw new RuntimeException(\"Disabled JMenu is selected\" +\n+                        \" by the mnemonic. Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4767393.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4802656\n+ * @summary Problem with keyboard navigation in JMenus JMenuItems if setVisible(false)\n+ * @key headful\n+ * @run main bug4802656\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4802656 {\n+\n+    public static JFrame mainFrame;\n+    public static JMenu menu2;\n+    public static volatile boolean menu2Selected = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robo = new Robot();\n+        robo.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                mainFrame = new JFrame(\"Bug4802656\");\n+                JMenuBar menuBar = new JMenuBar();\n+                JMenu menu1 = new JMenu(\"File\");\n+                menu2 = new JMenu(\"Hidden\");\n+                JMenu menu3 = new JMenu(\"Help\");\n+                menuBar.add(menu1);\n+                menuBar.add(menu2);\n+                menuBar.add(menu3);\n+                menu2.setVisible(false);\n+                mainFrame.setJMenuBar(menuBar);\n+                mainFrame.setSize(200, 200);\n+                mainFrame.setLocationRelativeTo(null);\n+                mainFrame.setVisible(true);\n+            });\n+            robo.waitForIdle();\n+            robo.delay(1000);\n+            robo.keyPress(KeyEvent.VK_F10);\n+            robo.keyRelease(KeyEvent.VK_F10);\n+            robo.keyPress(KeyEvent.VK_RIGHT);\n+            robo.keyRelease(KeyEvent.VK_RIGHT);\n+            robo.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                menu2Selected = menu2.isSelected();\n+            });\n+\n+            if (menu2Selected) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/bug4802656.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4191835\n+ * @summary JOptionPane should allow Dialog as window owner.\n+ * @key headful\n+ * @run main bug4191835\n+ *\/\n+\n+import java.awt.Dialog;\n+import javax.swing.JDialog;\n+import javax.swing.JOptionPane;\n+\n+public class bug4191835 {\n+\n+  public static void main(String[] args) {\n+    JOptionPane op = new JOptionPane();\n+    Dialog dlg = new Dialog(new JDialog());\n+    JDialog jd = op.createDialog(dlg, \"Dialog\");\n+  }\n+}\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/bug4191835.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4267840\n+   @summary Tests how HTMLEditorKit.write() works on small documents\n+   @run main bug4267840\n+*\/\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.EditorKit;\n+import javax.swing.SwingUtilities;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+\n+public class bug4267840 {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            final JTextPane textpane = new JTextPane();\n+            textpane.setContentType(\"text\/html\");\n+            final EditorKit kit = textpane.getEditorKit();\n+\n+            textpane.setText(\"A word\");\n+            File file = new File(\"bug4267840.out\");\n+            try {\n+                FileOutputStream out = new FileOutputStream(file);\n+                kit.write(out, textpane.getDocument(), 0,\n+                          textpane.getDocument().getLength());\n+                out.close();\n+            } catch (Exception e) {}\n+            try {\n+                if (file.length() < 6) {  \/\/ simply can't be\n+                    throw new RuntimeException(\"Failed: \" +\n+                                          \" HTMLEditorKit.write() is broken\");\n+                }\n+            } finally {\n+                file.delete();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLEditorKit\/bug4267840.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4357975\n+ * @summary  Tests if InsertUnorderedListItem generates the proper tag sequence\n+ * @run main bug4357975\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.Action;\n+import javax.swing.JEditorPane;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.Element;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.HTMLEditorKit;\n+import javax.swing.text.html.HTMLDocument;\n+\n+public class bug4357975 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JEditorPane jep = new JEditorPane();\n+        HTMLEditorKit kit = new HTMLEditorKit();\n+        jep.setEditorKit(kit);\n+        jep.setDocument(kit.createDefaultDocument());\n+\n+        HTMLDocument doc = (HTMLDocument) jep.getDocument();\n+\n+        DocumentListener l = new DocumentListener() {\n+            @Override\n+            public void insertUpdate(DocumentEvent e) {\n+                int offset = e.getOffset();\n+                HTMLDocument doc = (HTMLDocument)e.getDocument();\n+\n+                Element el = doc.getCharacterElement(offset + 1);\n+                AttributeSet attrs = el.getAttributes();\n+                Object name = attrs.getAttribute(StyleConstants.NameAttribute);\n+                boolean passed = (name == HTML.Tag.CONTENT);\n+\n+                el = el.getParentElement();\n+                attrs = el.getAttributes();\n+                name = attrs.getAttribute(StyleConstants.NameAttribute);\n+                passed = (passed && (name == HTML.Tag.IMPLIED));\n+\n+                el = el.getParentElement();\n+                attrs = el.getAttributes();\n+                name = attrs.getAttribute(StyleConstants.NameAttribute);\n+                passed = (passed && (name == HTML.Tag.LI));\n+\n+                el = el.getParentElement();\n+                attrs = el.getAttributes();\n+                name = attrs.getAttribute(StyleConstants.NameAttribute);\n+                passed = (passed && (name == HTML.Tag.UL));\n+                if (!passed) {\n+                    throw new RuntimeException(\"Test failed\");\n+                }\n+            }\n+\n+            @Override\n+            public void changedUpdate(DocumentEvent e) {}\n+            @Override\n+            public void removeUpdate(DocumentEvent e) {}\n+        };\n+        doc.addDocumentListener(l);\n+\n+        Action[] actions = kit.getActions();\n+        for (int i = 0; i < actions.length; i++){\n+            Action a = actions[i];\n+            if (a.getValue(Action.NAME) == \"InsertUnorderedListItem\") {\n+                a.actionPerformed(new ActionEvent(jep,\n+                                                  ActionEvent.ACTION_PERFORMED,\n+                                                  (String) a.getValue(Action.ACTION_COMMAND_KEY)));\n+                break;\n+            }\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLEditorKit\/bug4357975.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4841760\n+ * @summary  Tests if HTML tags are correctly shown for\n+             StyleEditorKit.ForegroundAction() in JTextPane output.\n+ * @run main bug4841760\n+ *\/\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+public class bug4841760 {\n+\n+    public static void main(String[] args) throws Exception {\n+        JTextPane jep = new JTextPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setText(\"<html><head><\/head><body><font size=3>hellojavaworld<\/font><\/body><\/html>\");\n+\n+        SimpleAttributeSet set = new SimpleAttributeSet();\n+        StyleConstants.setForeground(set, java.awt.Color.BLUE);\n+        jep.getStyledDocument().setCharacterAttributes(3, 5, set, false);\n+\n+        String gotText = jep.getText();\n+        System.out.println(\"gotText: \" + gotText);\n+        \/\/ there should be color attribute set\n+        \/\/ and 3 font tags\n+        int i = gotText.indexOf(\"color\");\n+        if (i > 0) {\n+            i = gotText.indexOf(\"<font\");\n+            if (i > 0) {\n+                i = gotText.indexOf(\"<font\", i + 1);\n+                if (i > 0) {\n+                    i = gotText.indexOf(\"<font\", i + 1);\n+                    if (i <= 0) {\n+                        throw new RuntimeException(\"Test failed.\");\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLWriter\/bug4841760.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4329185\n+ * @summary  Tests if vertical image alignment is working\n+ * @key headful\n+ * @run main bug4329185\n+ *\/\n+\n+import java.awt.Robot;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.Element;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.View;\n+import javax.swing.text.ViewFactory;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+public class bug4329185 {\n+\n+    private static final View[] views = new View[3];\n+    private static JFrame f;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                 bug4329185 test = new bug4329185();\n+                 test.start();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            boolean passed = ((views[0].getAlignment(View.Y_AXIS) == 0.0)\n+                             && (views[1].getAlignment(View.Y_AXIS) == 0.5)\n+                             && (views[2].getAlignment(View.Y_AXIS) == 1.0));\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void start() {\n+        String text = \"aaa<IMG align=top><IMG align=middle><IMG align=bottom>\";\n+        f = new JFrame(\"bug4329185\");\n+        JEditorPane jep = new JEditorPane();\n+        jep.setEditorKit(new MyHTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500, 500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+\n+    static class MyHTMLEditorKit extends HTMLEditorKit {\n+\n+        private final ViewFactory defaultFactory = new MyHTMLFactory();\n+\n+        @Override\n+        public ViewFactory getViewFactory() {\n+            return defaultFactory;\n+        }\n+\n+        static class MyHTMLFactory extends HTMLEditorKit.HTMLFactory {\n+            private int i = 0;\n+\n+            @Override\n+            public View create(Element elem) {\n+                Object o = elem.getAttributes()\n+                               .getAttribute(StyleConstants.NameAttribute);\n+                if (o instanceof HTML.Tag kind) {\n+                    if (kind == HTML.Tag.IMG) {\n+                        View v = super.create(elem);\n+                        views[i++] = v;\n+                        return v;\n+                    }\n+                }\n+                return super.create(elem);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/ImageView\/bug4329185.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4623342\n+ * @summary  Tests if InlineView causes extra spacing around images in JTable\n+ * @key headful\n+ * @run main bug4623342\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+public class bug4623342 {\n+\n+    private static volatile boolean passed;\n+\n+    private JEditorPane jep;\n+    private static JFrame f;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            bug4623342 test = new bug4623342();\n+            SwingUtilities.invokeAndWait(test::init);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            SwingUtilities.invokeAndWait(test::start);\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+\n+        String text =\n+            \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\" +\n+             \"<tr><td width=\\\"10\\\" height=\\\"23\\\">\" +\n+               \"<img src=\\\"file:\/a.jpg\\\" width=65 height=23 border=\\\"0\\\"><\/td><\/tr>\" +\n+             \"<tr><td width=\\\"10\\\" height=\\\"23\\\">\" +\n+               \"<img src=\\\"file:\/a.jpg\\\" width=65 height=23 border=\\\"0\\\"><\/td><\/tr><\/table>\";\n+\n+        f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500, 500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+    private void start() {\n+        Shape r = jep.getBounds();\n+        View v = jep.getUI().getRootView(jep);\n+        int tableHeight = 0;\n+        while (!(v instanceof javax.swing.text.html.ParagraphView)) {\n+            int n = v.getViewCount();\n+            Shape sh = v.getChildAllocation(n - 1, r);\n+            String viewName = v.getClass().getName();\n+            if (viewName.endsWith(\"TableView\")) {\n+                tableHeight = r.getBounds().height;\n+            }\n+            v = v.getView(n - 1);\n+            if (sh != null) {\n+                r = sh;\n+            }\n+        }\n+        \/\/ tableHeight should be the sum of TD's heights (46)\n+        passed = (tableHeight == 46);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/InlineView\/bug4623342.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4322891\n+ * @summary  Tests if image map receives correct coordinates.\n+ * @key headful\n+ * @run main bug4322891\n+*\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.HyperlinkEvent;\n+import javax.swing.event.HyperlinkListener;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+public class bug4322891 {\n+\n+    private boolean finished = false;\n+    private static boolean passed = false;\n+    private static Robot robot;\n+    private static JFrame f;\n+    private static JEditorPane jep;\n+    private static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            bug4322891 test = new bug4322891();\n+            SwingUtilities.invokeAndWait(test::init);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = jep.getLocationOnScreen();\n+            });\n+            robot.mouseMove(p.x, p.y);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            for (int i = 1; i < 30; i++) {\n+                robot.mouseMove(p.x + i, p.y + i);\n+                robot.waitForIdle();\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        String text = \"<img src=\\\"aaa\\\" height=100 width=100 usemap=\\\"#mymap\\\">\" +\n+                      \"<map name=\\\"mymap\\\">\" +\n+                      \"<area href=\\\"aaa\\\" shape=rect coords=\\\"0,0,100,100\\\">\" +\n+                      \"<\/map>\";\n+\n+        f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        jep.addHyperlinkListener(new HyperlinkListener() {\n+                                    public void hyperlinkUpdate(HyperlinkEvent e) {\n+                                        passed = true;\n+                                    }\n+                                });\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/Map\/bug4322891.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4218254\n+   @summary Serialization Bug on StyleSheet.\n+   @run main bug4218254\n+*\/\n+\n+import javax.swing.text.html.StyleSheet;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+\n+public class bug4218254 {\n+\n+    public static void main(String[] args) throws Exception {\n+        StyleSheet ssw = new StyleSheet();\n+        StyleSheet ssr = null;\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(ssw);\n+        byte[] buf = baos.toByteArray();\n+        oos.close();\n+        ByteArrayInputStream bais = new ByteArrayInputStream(buf);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        ssr = (StyleSheet)ois.readObject();\n+        ois.close();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/bug4218254.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4243463\n+   @summary Tests that StyleSheet has following methods:\n+            public void addStyleSheet(StyleSheet ss);\n+            public void removeStyleSheet(StyleSheet ss);\n+            public Enumeration getStyleSheets()\n+   @run main bug4243463\n+*\/\n+\n+import javax.swing.text.html.StyleSheet;\n+\n+public class bug4243463 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        StyleSheet main = new StyleSheet();\n+        StyleSheet ss = new StyleSheet();\n+        ss.addRule(\"p {color:red;}\");\n+\n+        main.addStyleSheet(ss);\n+        StyleSheet[] sheets = main.getStyleSheets();\n+        if (sheets.length != 1 || sheets[0] != ss) {\n+            throw new RuntimeException(\"getStyleSheets failed\");\n+        }\n+\n+        main.removeStyleSheet(ss);\n+        sheets = main.getStyleSheets();\n+        if (sheets != null) {\n+            throw new RuntimeException(\"StyleSheet is not removed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/bug4243463.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4476002\n+ * @summary  Verifies JEditorPane: <ol> list numbers do not pick up color of the list text\n+ * @key headful\n+ * @run main bug4476002\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4476002 {\n+\n+    private static boolean passed = true;\n+    private static JLabel htmlComponent;\n+\n+    private static Robot robot;\n+    private static JFrame mainFrame;\n+    private static volatile Point p;\n+    private static volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                String htmlText =\n+                    \"<html><head><style>\" +\n+                    \"OL { list-style-type: disc; color: red }\" +\n+                    \"<\/style><\/head>\" +\n+                    \"<body><ol><li>wwwww<\/li><\/ol><\/body><\/html>\";\n+\n+                mainFrame = new JFrame(\"bug4476002\");\n+\n+                htmlComponent = new JLabel(htmlText);\n+                mainFrame.getContentPane().add(htmlComponent);\n+\n+                mainFrame.pack();\n+                mainFrame.setLocationRelativeTo(null);\n+                mainFrame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = htmlComponent.getLocationOnScreen();\n+                d = htmlComponent.getSize();\n+            });\n+            int x0 = p.x;\n+            int y = p.y + d.height\/2;\n+\n+            for (int x = x0; x < x0 + d.width; x++) {\n+                if (robot.getPixelColor(x, y).equals(Color.black)) {\n+                    passed = false;\n+                    break;\n+                }\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/bug4476002.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4412522\n+ * @summary  Tests if HTML that has comments inside of tables is rendered correctly\n+ * @key headful\n+ * @run main bug4412522\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4412522 {\n+\n+    private static boolean passed = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+    private static Robot robot;\n+\n+    public void init() {\n+\n+        String text =\n+                \"<html><head><table border>\" +\n+                \"<tr><td>first cell<\/td><td>second cell<\/td><\/tr>\" +\n+                \"<tr><!-- this is a comment --><td>row heading<\/td><\/tr>\" +\n+                \"<\/table><\/body><\/html>\";\n+\n+        JFrame f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+\n+    public static void main(String args[]) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4412522 test = new bug4412522();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            int tableWidth = 0;\n+            int cellsWidth = 0;\n+\n+            while (!(v instanceof javax.swing.text.html.ParagraphView)) {\n+\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                String viewName = v.getClass().getName();\n+                if (viewName.endsWith(\"TableView\")) {\n+                    tableWidth = r.getBounds().width;\n+                }\n+\n+                if (viewName.endsWith(\"CellView\")) {\n+                    cellsWidth = r.getBounds().x + r.getBounds().width;\n+                }\n+\n+                v = v.getView(n - 1);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+            }\n+\n+            passed = ((tableWidth - cellsWidth) > 10);\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4412522.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4690812\n+ * @summary  Tests if tables are correctly formatted in some cases\n+ * @key headful\n+ * @run main bug4690812\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4690812 {\n+\n+    private static boolean passed = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+\n+    public void init() {\n+\n+        String text =\n+            \"<table cellpadding=0 cellspacing=0 border=0 width=100%>\" +\n+            \"<tr><td width=100%>a<\/td><td><\/td><\/tr>\" +\n+            \"<tr><td width=100%>something<\/td>\" +\n+            \"<td width=1><img src=\\\"file:\/a.jpg\\\" width=1 height=1><\/td><\/tr>\" +\n+            \"<\/table>\";\n+\n+        JFrame f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(500,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        Robot robot = new Robot();\n+        bug4690812 test = new bug4690812();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            int tableHeight = 0;\n+            while (!(v instanceof javax.swing.text.html.ParagraphView)) {\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                v = v.getView(n - 1);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+            }\n+            \/\/ left column in the second table row should have width == 1\n+            passed = (r.getBounds().width == 1) ? true : false;\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4690812.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4813831\n+ * @summary Verifies contents of table cells in HTML in JEditorPane wraps correctly\n+ * @key headful\n+ * @run main bug4813831\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.ParagraphView;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4813831 {\n+\n+    private static boolean passed = false;\n+    private boolean finished = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+\n+    public void init() {\n+\n+        String text =\n+            \"<html><body>\" +\n+            \"<table border><tr>\" +\n+            \"<td align=center>XXXXXXXXXXXXXX<BR>X<BR>X<\/td>\" +\n+            \"<\/tr><\/table>\" +\n+            \"<\/body><\/html>\";\n+\n+        f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(20,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+\n+    public static void main(String args[]) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4813831 test = new bug4813831();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            do {\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+                v = v.getView(n - 1);\n+            } while (!(v instanceof ParagraphView));\n+\n+            int n = v.getViewCount();\n+            \/\/ there should be 3 lines or more (if the first long line was wrapped) in a cell\n+            passed = n >= 3;\n+\n+            if (passed) {\n+                Shape sh = v.getChildAllocation(n - 2, r);\n+                int x1 = sh.getBounds().x;\n+                sh = v.getChildAllocation(n - 1, r);\n+                int x2 = sh.getBounds().x;\n+                System.out.println(\"x1: \" + x1 + \" x2: \" + x2);\n+                \/\/ lines should be equally aligned\n+                passed = (x1 == x2);\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4813831.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4178276\n+ * @key headful\n+ * @summary  RTFEditorkit.write(...) doesn't throw NPE when used in SecurityManager\n+ * @run main\/othervm\/secure=allow bug4178276\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import javax.swing.text.Document;\n+import javax.swing.text.rtf.RTFEditorKit;\n+\n+public class bug4178276 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        System.setSecurityManager(new SecurityManager());\n+\n+        String test=\"{\\\\rtf1\\\\ansi\\\\deff0\\\\deftab720{\\\\fonttbl{\\\\f0\\\\f swiss MS Sans Serif;}}{\\\\colortbl\\\\red0\\\\green0\\\\blue0;}\\\\qc\\\\plain\\\\f0 Test 1 \\\\par \\\\ql\\\\plain\\\\f0 Test 2 \\\\par \\\\qr\\\\plain\\\\f0 Test 3 \\\\par \\\\qj\\\\plain\\\\f0 Test 4}\";\n+        RTFEditorKit c = new RTFEditorKit();\n+        Document doc = c.createDefaultDocument();\n+        try {\n+            c.read(new ByteArrayInputStream(test.getBytes(\n+                                        StandardCharsets.ISO_8859_1)), doc, 0);\n+            ByteArrayOutputStream sw = new ByteArrayOutputStream();\n+            c.write(sw, doc, 0, 0);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unexpected NPE exception...\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/rtf\/bug4178276.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4480602\n+ * @summary Verifies if DefaultTreeCellEditor.inHitRegion() incorrectly\n+ *          handles row bounds\n+ * @key headful\n+ * @run main bug4480602\n+*\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeCellEditor;\n+import javax.swing.tree.DefaultTreeCellRenderer;\n+import javax.swing.SwingUtilities;\n+\n+import java.util.Date;\n+\n+public class bug4480602 {\n+\n+    static JTree tree;\n+    static JFrame fr;\n+    static MyTreeCellEditor editor;\n+\n+    static Robot robot;\n+    boolean passed = false;\n+    boolean do_test = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+\n+                String s = \"0\\u05D01\\u05D02\\u05D03\\u05D04\\u05D05\";\n+                DefaultMutableTreeNode root = new DefaultMutableTreeNode(s);\n+                root.add(new DefaultMutableTreeNode(s));\n+                root.add(new DefaultMutableTreeNode(s));\n+\n+                tree = new JTree(root);\n+                editor = new MyTreeCellEditor(tree, new DefaultTreeCellRenderer());\n+                tree.setCellEditor(editor);\n+                tree.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                tree.setEditable(true);\n+                JScrollPane sp = new JScrollPane(tree);\n+                fr.getContentPane().add(sp);\n+\n+                fr.setSize(250,200);\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                Rectangle rect = tree.getRowBounds(1);\n+                editor.testTreeCellEditor(rect);\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class MyTreeCellEditor extends DefaultTreeCellEditor {\n+\n+        public MyTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer) {\n+            super(tree, renderer);\n+        }\n+\n+        public void testTreeCellEditor(Rectangle rect) {\n+            int x = rect.x + 10;\n+            int y = rect.y + rect.height \/ 2;\n+            MouseEvent me = new MouseEvent(tree,\n+                                           MouseEvent.MOUSE_PRESSED,\n+                                           (new Date()).getTime(),\n+                                           MouseEvent.BUTTON1_DOWN_MASK,\n+                                           rect.x + 10, rect.y + 10,\n+                                           1, true);\n+            isCellEditable(me);\n+\n+            if (tree == null) {\n+                throw new RuntimeException(\"isCellEditable() should set the tree\");\n+            }\n+            if (lastRow != 1) {\n+                throw new RuntimeException(\"isCellEditable() should set the lastRow\");\n+            }\n+            if (offset == 0) {\n+                throw new RuntimeException(\"isCellEditable() should determine offset\");\n+            }\n+\n+            if (!inHitRegion(x,y)) {\n+                throw new RuntimeException(\"Hit region should contain point (\"+x+\", \"+y+\")\");\n+            }\n+            x = rect.x + rect.width - 10;\n+            if (inHitRegion(x,y)) {\n+                throw new RuntimeException(\"Hit region shouldn't contain point (\"+x+\", \"+y+\")\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/DefaultTreeCellEditor\/bug4480602.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4180224\n+ * @summary DefaultTreeCellRenderer.hasFocus protected (not private) now.\n+ * @key headful\n+ * @run main bug4180224\n+*\/\n+\n+import javax.swing.tree.DefaultTreeCellRenderer;\n+\n+public class bug4180224 {\n+\n+    static class MyDTCR extends DefaultTreeCellRenderer {\n+        void test() {\n+            hasFocus = false;\n+        }\n+    }\n+\n+    public static void main(String[] argv) {\n+        MyDTCR m = new MyDTCR();\n+        m.test();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/DefaultTreeCellRenderer\/bug4180224.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4485322\n+   @summary DefaultTreeSelectionModel.insureRowContinuity is broken for CONTIGUOUS_TREE_SELECTION\n+   @run main bug4485322\n+*\/\n+\n+import javax.swing.SwingUtilities;\n+import javax.swing.tree.DefaultTreeSelectionModel;\n+import javax.swing.tree.TreeSelectionModel;\n+import javax.swing.tree.RowMapper;\n+import javax.swing.tree.TreePath;\n+\n+import java.util.Arrays;\n+\n+public class bug4485322 {\n+\n+    Object obj1[] = {\"9\", \"2\", \"5\", \"3\", \"1\"};\n+    Object obj2[] = {\"1\", \"2\", \"3\"};\n+\n+    public void init() {\n+        DummyDefaultTreeSelectionModel model = new DummyDefaultTreeSelectionModel();\n+\n+        TreePath sPaths[] = new TreePath[obj1.length];\n+        for (int i=0; i<obj1.length; i++) {\n+            sPaths[i] = new TreePath(obj1[i]);\n+        };\n+        model.setSelectionPaths(sPaths);\n+\n+        model.setRowMapper(new DummyRowMapper());\n+        model.setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);\n+        model.insureRowContinuity();\n+\n+        TreePath real[] = model.getSelectionPaths();\n+        TreePath expected[] = new TreePath[obj2.length];\n+        for (int i=0; i<obj2.length; i++) {\n+            expected[i] = new TreePath(obj2[i]);\n+        };\n+\n+        if ( !Arrays.equals(real, expected) ) {\n+            throw new RuntimeException(\"The tree selection path is wrong.\");\n+        }\n+    }\n+\n+    public static class DummyDefaultTreeSelectionModel extends DefaultTreeSelectionModel {\n+        public void insureRowContinuity() {\n+            super.insureRowContinuity();\n+        }\n+    }\n+\n+    public static class DummyRowMapper implements RowMapper {\n+        public int[] getRowsForPaths(TreePath[] path) {\n+            int rows[] = new int[path.length];\n+            for (int i = 0;i < path.length; i++) {\n+                String userObject = path[i].getPathComponent(0).toString();\n+                rows[i] = Integer.valueOf(userObject);\n+            }\n+            return rows;\n+        }\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        bug4485322 b = new bug4485322();\n+        SwingUtilities.invokeAndWait(() -> b.init());\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/DefaultTreeSelectionModel\/bug4485322.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210354\n+ * @summary Tests whether method FixedHeightLayoutCache.getBounds returns bad Rectangle\n+ * @run main bug4210354\n+ *\/\n+\n+import java.awt.Rectangle;\n+\n+import javax.swing.tree.AbstractLayoutCache;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.FixedHeightLayoutCache;\n+import javax.swing.tree.TreePath;\n+\n+public class bug4210354 {\n+    static class DummyNodeDimensions extends AbstractLayoutCache.NodeDimensions {\n+        private final Rectangle rectangle;\n+\n+        public DummyNodeDimensions(Rectangle r) {\n+            rectangle = r;\n+        }\n+        public Rectangle getNodeDimensions(Object value, int row, int depth,\n+                                           boolean expanded, Rectangle bounds) {\n+            return rectangle;\n+        }\n+\n+        \/* create the TreeModel of depth 1 with specified num of children *\/\n+        public DefaultTreeModel getTreeModelILike(int childrenCount) {\n+            DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"root\");\n+            for (int i = 0; i < childrenCount; i++) {\n+                DefaultMutableTreeNode child =\n+                        new DefaultMutableTreeNode(\"root.child\" + i);\n+                root.insert(child, i);\n+            }\n+            return new DefaultTreeModel(root);\n+        }\n+    }\n+\n+    public void init() {\n+        int x = 1, y = 2, dx = 3, dy = 4, h = 3;\n+        DummyNodeDimensions dim = new DummyNodeDimensions(new Rectangle(x, y, dx, dy));\n+        FixedHeightLayoutCache fhlc = new FixedHeightLayoutCache();\n+        fhlc.setModel(dim.getTreeModelILike(3));\n+        fhlc.setRootVisible(true);\n+        fhlc.setNodeDimensions(dim);\n+        fhlc.setRowHeight(h);\n+        int row = 0;\n+        TreePath path = fhlc.getPathForRow(row);\n+        Rectangle r = fhlc.getBounds(path, new Rectangle());\n+        Rectangle r2 = new Rectangle(x, row * h, dx, h);\n+        if (r.width != r2.width) {\n+            throw new RuntimeException(\"FixedHeightLayoutCache.getBounds returns bad Rectangle\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        bug4210354 b = new bug4210354();\n+        b.init();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/FixedHeightLayoutCache\/bug4210354.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4745001\n+ * @summary JTree with setLargeModel(true) not display correctly\n+ *          when we expand\/collapse nodes\n+ * @key headful\n+ * @run main bug4745001\n+*\/\n+\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.TreePath;\n+import javax.swing.event.TreeExpansionEvent;\n+import javax.swing.event.TreeExpansionListener;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4745001 {\n+\n+    static JTree tree;\n+    static JFrame fr;\n+    boolean stateChanged;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4745001 test = new bug4745001();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test.start();\n+            robot.delay(1000);\n+            test.destroy();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        fr = new JFrame(\"Test\");\n+        fr.getContentPane().setLayout(new FlowLayout());\n+\n+        tree = new JTree();\n+        tree.setRowHeight(20);\n+        tree.setLargeModel(true);\n+        tree.setPreferredSize(new Dimension(100, 400));\n+        tree.setRootVisible(false);\n+        tree.setShowsRootHandles(true);\n+\n+        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"\");\n+        DefaultMutableTreeNode a = new DefaultMutableTreeNode(\"a\");\n+        DefaultMutableTreeNode b = new DefaultMutableTreeNode(\"b\");\n+        DefaultMutableTreeNode c = new DefaultMutableTreeNode(\"c\");\n+        root.add(a);\n+        root.add(b);\n+        root.add(c);\n+        b.add(new DefaultMutableTreeNode(\"b1\"));\n+        c.add(new DefaultMutableTreeNode(\"c2\"));\n+        tree.setModel(new DefaultTreeModel(root));\n+\n+        fr.getContentPane().add(tree);\n+\n+        tree.addTreeExpansionListener(new TreeExpansionListener() {\n+            public void treeExpanded(TreeExpansionEvent e) {\n+                TreePath path = e.getPath();\n+                if (path != null) {\n+                    DefaultMutableTreeNode node =\n+                        (DefaultMutableTreeNode)path.getLastPathComponent();\n+                    node.removeAllChildren();\n+                    String s = (String)node.getUserObject();\n+                    node.add(new DefaultMutableTreeNode(s + \"1\"));\n+                    node.add(new DefaultMutableTreeNode(s + \"2\"));\n+                    node.add(new DefaultMutableTreeNode(s + \"3\"));\n+                    DefaultTreeModel model = (DefaultTreeModel)tree.getModel();\n+                    model.nodeStructureChanged(node);\n+                    synchronized (bug4745001.this) {\n+                        stateChanged = true;\n+                        bug4745001.this.notifyAll();\n+                    }\n+                }\n+            }\n+\n+            public void treeCollapsed(TreeExpansionEvent e) {\n+                synchronized (bug4745001.this) {\n+                    stateChanged = true;\n+                    bug4745001.this.notifyAll();\n+                }\n+            }\n+        });\n+\n+        fr.pack();\n+        fr.setVisible(true);\n+    }\n+\n+    void changeNodeStateForRow(final int row, final boolean expand) throws Exception {\n+        try {\n+            stateChanged = false;\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    try {\n+                        if (expand) {\n+                            tree.expandRow(row);\n+                        } else {\n+                            tree.collapseRow(row);\n+                        }\n+                    } catch (Exception ex) {\n+                        ex.printStackTrace();\n+                    }\n+                 }\n+            });\n+            synchronized (this) {\n+                while (!stateChanged) {\n+                    bug4745001.this.wait();\n+                }\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        \/\/ expand node \"c\"\n+        changeNodeStateForRow(2, true);\n+        \/\/ expand node \"b\"\n+        changeNodeStateForRow(1, true);\n+        \/\/ collapse node \"c\"\n+        changeNodeStateForRow(1, false);\n+    }\n+\n+    String[] expected = new String[] {\"a\", \"b\", \"c\", \"c1\", \"c2\", \"c3\"};\n+\n+    public void destroy() {\n+        for (int i = 0; i < expected.length; i++) {\n+            Object obj = tree.getPathForRow(i).getLastPathComponent();\n+            if (!obj.toString().equals(expected[i])) {\n+                throw new RuntimeException(\"Unexpected node at row \"+i);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/FixedHeightLayoutCache\/bug4745001.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4706533\n+ * @summary UndoManager.setLimit(0) doesn't correctly trim the UndoManager size\n+ * @run main bug4706533\n+ *\/\n+\n+import javax.swing.undo.AbstractUndoableEdit;\n+import javax.swing.undo.CannotUndoException;\n+import javax.swing.undo.CannotRedoException;\n+import javax.swing.undo.UndoManager;\n+\n+public class bug4706533 {\n+\n+    public static void main(String[] args) throws Exception {\n+        UndoManager manager = new UndoManager();\n+        manager.setLimit(1);\n+        AbstractUndoableEdit edit = new MyUndoableEdit();\n+        manager.addEdit(edit);\n+        manager.setLimit(0);\n+        try {\n+            manager.undo();\n+            throw new RuntimeException(\"The limit should be zero\");\n+        } catch (CannotUndoException e) {\n+            \/\/Expected to be thrown\n+        }\n+    }\n+\n+    static class MyUndoableEdit extends AbstractUndoableEdit {\n+        @Override\n+        public void undo() throws CannotUndoException {}\n+        @Override\n+        public void redo() throws CannotRedoException {}\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/undo\/UndoManager\/bug4706533.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4992178\n+ * @summary REGRESSION: Allow unlimited number of edits in an UndoManager\n+ * @run main bug4992178\n+ *\/\n+\n+import javax.swing.undo.AbstractUndoableEdit;\n+import javax.swing.undo.CannotRedoException;\n+import javax.swing.undo.CannotUndoException;\n+import javax.swing.undo.UndoManager;\n+\n+public class bug4992178 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        TestUndoManager manager = new TestUndoManager();\n+        manager.setLimit(1);\n+        AbstractUndoableEdit edit = new MyUndoableEdit();\n+        manager.addEdit(edit);\n+\n+        manager.setLimit(-1);\n+\n+        manager.discardAllEdits();\n+\n+        if (manager.getVectorSize() != 0) {\n+            throw new RuntimeException(\n+                \"UndoManager's vector size should be 0 after discarding all changes\");\n+        }\n+    }\n+\n+    static class TestUndoManager extends UndoManager {\n+        public int getVectorSize() {\n+            return edits.size();\n+        }\n+    }\n+\n+    static class MyUndoableEdit extends AbstractUndoableEdit {\n+        @Override\n+        public void undo() throws CannotUndoException {}\n+        @Override\n+        public void redo() throws CannotRedoException {}\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/undo\/bug4992178.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/ErrorHandlerPermissions.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/AccessFlagsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationModelTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ArrayTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/BSMTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/BasicBlockTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/BuilderParamTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ClassBuildingTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ConstantPoolCopyTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LDCTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LowJCovAttributeTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LowModuleTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyCodeTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyPrimitiveMatchCodeTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ModuleBuilderTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/OneToOneTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/OpcodesValidationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/PreviewMinorVersionTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/PrimitiveClassConstantTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/SignaturesTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/StreamedVsListTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/TempConstantPoolBuilderTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/TestRecordComponent.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/UtilTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/WriteTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/AnnotationsExamples.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExampleGallery.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExperimentalTransformExamples.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ModuleExamples.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/TransformExamples.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ByteArrayClassLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/InstructionModelToCodeBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/TestConstants.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/TestUtil.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Lvt.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern1.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern10.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern2.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern3.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern4.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern5.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern6.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern7.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern8.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/Pattern9.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/classfile\/testdata\/TypeAnnotationPattern.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/BeanLinkerTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/BeansLinkerTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/CallSiteTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/CallerSensitiveTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/ClassLoaderAware.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/LinkedCallSiteLocationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/LookupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/TestGuardingDynamicLinkerExporter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/TrustedDynamicLinkerFactoryTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/dynalink\/UntrustedDynamicLinkerFactoryTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/clean.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-tests.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/internal\/math\/ToDecimal\/MathUtilsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+import static jdk.internal.util.Architecture.LOONGARCH64;\n+import static jdk.internal.util.Architecture.MIPSEL;\n+import static jdk.internal.util.Architecture.MIPS64EL;\n+import static jdk.internal.util.Architecture.PPC;\n@@ -36,1 +40,0 @@\n-import static jdk.internal.util.Architecture.LOONGARCH64;\n@@ -38,0 +41,1 @@\n+import static jdk.internal.util.Architecture.SPARCV9;\n@@ -40,3 +44,0 @@\n-import static jdk.internal.util.Architecture.MIPSEL;\n-import static jdk.internal.util.Architecture.MIPS64EL;\n-import static jdk.internal.util.Architecture.SPARCV9;\n@@ -84,0 +85,1 @@\n+                Arguments.of(\"ppc\", PPC, 32, ByteOrder.BIG_ENDIAN, Architecture.isPPC()),\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        return StackWalker.getInstance(scope);\n+        return StackWalker.newInstance(Set.of(), scope);\n@@ -47,1 +47,1 @@\n-    public static StackFrame[] getStackFrames(ContinuationScope scope)     { return getStackFrames(StackWalker.getInstance(OPTS, scope)); }\n+    public static StackFrame[] getStackFrames(ContinuationScope scope)     { return getStackFrames(StackWalker.newInstance(OPTS, scope)); }\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/java.base\/java\/lang\/StackWalkerHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestSystemGC.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/gc-testsettings.jfc","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/concurrentmodefailure-testsettings.jfc","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/promotionfailed-testsettings.jfc","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/E.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/lib\/client\/ExtendedRobot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/lib\/testlibrary\/bootlib\/java.base\/java\/util\/stream\/DefaultMethodStreams.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Action.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ActionProducer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Bundle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/BundleManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/CharBindingMap.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ClassReference.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ComponentChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ComponentIsNotFocusedException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ComponentIsNotVisibleException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ComponentSearcher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/DefaultCharBindingMap.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/DialogWaiter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/EventDispatcher.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/EventTool.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/FrameWaiter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/JemmyException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/JemmyInputException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/JemmyProperties.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/NoComponentUnderMouseException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/ObjectBrowser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Outputable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/QueueTool.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Scenario.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Test.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/TestCompletedException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/TestOut.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Timeout.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/TimeoutExpiredException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Timeoutable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Timeouts.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Waitable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/Waiter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/WindowWaiter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/accessibility\/AccessibilityChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/accessibility\/AccessibleDescriptionChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/accessibility\/AccessibleNameChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/APIDriverInstaller.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/ArrayDriverInstaller.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/ButtonDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/DefaultDriverInstaller.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/DescriptablePathChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/Driver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/DriverInstaller.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/DriverManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/EditorDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/FocusDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/FrameDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/InputDriverInstaller.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/InternalFrameDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/KeyDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/LightDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/LightSupportiveDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/ListDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/MenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/MouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/MultiSelListDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/OrderedListDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/PathChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/ScrollDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/SupportiveDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/TableDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/TextDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/TreeDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/UnsupportedOperatorException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/WindowDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/buttons\/ButtonMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/buttons\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/focus\/APIFocusDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/focus\/MouseFocusDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/focus\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/EventDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/KeyEventDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/KeyRobotDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/MouseEventDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/MouseRobotDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/RobotDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/input\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/ChoiceDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/JComboMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/JListMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/JTabAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/JTabMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/JTableHeaderDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/ListAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/ListKeyboardDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/lists\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/menus\/APIJMenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/menus\/AppleMenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/menus\/DefaultJMenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/menus\/QueueJMenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/menus\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/AWTScrollDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/AbstractScrollDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JScrollBarAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JScrollBarDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JSliderAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JSliderDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JSpinnerDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/JSplitPaneDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/KeyboardJSliderScrollDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/ScrollAdjuster.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/ScrollPaneDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/ScrollbarDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/scrolling\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/tables\/JTableMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/tables\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/AWTTextAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/AWTTextKeyboardDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/DownKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/EndKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/GoAndBackKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/HomeKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/NavigationKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/OffsetKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/SwingTextAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/SwingTextKeyboardDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/TextAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/TextKeyboardDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/UpKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/text\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/trees\/JTreeAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/trees\/JTreeMouseDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/trees\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/DefaultFrameDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/DefaultInternalFrameDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/DefaultWindowDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/InternalFrameAPIDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/InternalFramePopupMenuDriver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/drivers\/windows\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/explorer\/GUIBrowser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/explorer\/TrialListenerManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/explorer\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ColorImageComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/FileImageComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ImageComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ImageFinder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ImageLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ImageSaver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/ImageTool.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/PNGImageLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/PNGImageSaver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/RoughImageComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/RoughImageFinder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/StrictImageComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/StrictImageFinder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/image\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/AbstractButtonOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ButtonOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/CheckboxOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ChoiceOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ComponentOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ContainerOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/DialogOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/FrameOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JButtonOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JCheckBoxMenuItemOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JCheckBoxOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JColorChooserOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JComboBoxOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JComponentOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JDialogOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JEditorPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JFileChooserOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JFrameOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JInternalFrameOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JLabelOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JListOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JMenuBarOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JMenuItemOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JMenuOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JPasswordFieldOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JPopupMenuOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JProgressBarOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JRadioButtonMenuItemOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JRadioButtonOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JScrollBarOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JScrollPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JSliderOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JSpinnerOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JSplitPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTabbedPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTableHeaderOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTableOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTextAreaOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTextComponentOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTextFieldOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTextPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JToggleButtonOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JToolTipOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/JTreeOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/LabelOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ListOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/Operator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ScrollPaneOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/ScrollbarOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/TextAreaOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/TextComponentOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/TextFieldOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/WindowOperator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/operators\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/AbstractTextStyleChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/DefaultVisualizer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/DumpController.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/Dumper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/EmptyVisualizer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/LookAndFeel.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/MouseVisualizer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/NameComponentChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/PNGDecoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/PNGEncoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/Platform.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/PropChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/RegExComparator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/StringPropChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/TextStyleChooser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/WindowJob.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/WindowManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sanity\/client\/lib\/jemmy\/src\/org\/netbeans\/jemmy\/util\/package-info.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/start-Xvfb.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4366799\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary verifies that Windows applications react to palette\n+ * changes in 8-bit mode correctly.\n+ * @run main\/manual PaletteTester\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Frame;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.VolatileImage;\n+import javax.swing.ImageIcon;\n+import javax.swing.JPanel;\n+import java.io.File;\n+\n+public class PaletteTester {\n+\n+    static VImageColors demo;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test should be run on any Windows platform in 8-bit\n+        (256 color) display mode only. To check for errors, run a browser\n+        application (Firefox or Internet Explorer) at the same time\n+        and switch between this test and the browser (by clicking on the\n+        title bars).\n+\n+        The three panels in this test should look roughly the same (there\n+        may be some dithering differences if you switch display modes\n+        during the test, but the overall look should be the same.  If\n+        completely different colors are being used (either for the orange\n+        background fill, the text, the image, or the rectangles), then the\n+        test has failed.\n+        \"\"\";\n+\n+    private static void init() {\n+\n+        int width = 300, height = 300;\n+\n+        demo = new VImageColors();\n+        Frame f = new Frame(\"PaletteTester\");\n+        f.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {}\n+            public void windowDeiconified(WindowEvent e) { demo.start(); }\n+            public void windowIconified(WindowEvent e) { demo.stop(); }\n+        });\n+        f.add(demo);\n+        f.setSize(new Dimension(width, height));\n+        f.setLocationRelativeTo(null);\n+\n+        PassFailJFrame.addTestWindow(f);\n+        PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n+        f.setVisible(true);\n+\n+        demo.start();\n+\n+    }\/\/End  init()\n+\n+    public static void main( String args[] ) throws Exception {\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                                        .title(\"PaletteTester Instructions\")\n+                                        .instructions(INSTRUCTIONS)\n+                                        .testTimeOut(5)\n+                                        .rows(15)\n+                                        .columns(40)\n+                                        .screenCapture()\n+                                        .build();\n+\n+        EventQueue.invokeAndWait(PaletteTester::init);\n+\n+\n+        try {\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            demo.stop();\n+        }\n+    }\/\/main\n+}\n+\n+\/\/************ Begin classes defined for the test ****************\n+\n+class VImageColors extends JPanel implements Runnable {\n+\n+    VolatileImage vImage;\n+    Image bImage;\n+    private static int width = 300, height = 300;\n+    private Thread thread;\n+    Color fillColor = new Color(240, 188, 136);\n+    Color textColor = new Color(40, 18, 97);\n+    Color rectColor = new Color(0, 150, 0);\n+    File f = new File(System.getProperty(\"test.src\", \".\"), \"duke.gif\");\n+    Image duke = new ImageIcon(f.toString()).getImage();\n+\n+    public void initOffscreen() {\n+        vImage = this.createVolatileImage(getWidth()\/3, getHeight());\n+        bImage = this.createImage(getWidth()\/3, getHeight());\n+    }\n+\n+    public void paint(Graphics g) {\n+        int width = getWidth();\n+        int height = getHeight();\n+\n+        if (vImage == null) {\n+            initOffscreen();\n+        }\n+\n+        \/\/ Render the left panel via VolatileImage\n+        do {\n+            if (\n+                vImage.validate(getGraphicsConfiguration()) ==\n+                VolatileImage.IMAGE_INCOMPATIBLE)\n+            {\n+                vImage = createVolatileImage(width\/3, height);\n+            }\n+            Graphics vg = vImage.createGraphics();\n+            vg.setColor(fillColor);\n+            vg.fillRect(0, 0, width\/3, height);\n+            vg.drawImage(duke, 0, 0, null);\n+            vg.setColor(textColor);\n+            vg.drawString(\"Vol Image\", 5, height-1);\n+            vg.setColor(rectColor);\n+            vg.drawRect(0, 0, width\/3-1, height-1);\n+            vg.dispose();\n+            g.drawImage(vImage, 0, 0, width\/3, height, null);\n+        } while (vImage.contentsLost());\n+\n+        \/\/ Render the middle panel via BufferedImage\n+        Graphics bg = bImage.getGraphics();\n+        bg.setColor(fillColor);\n+        bg.fillRect(0, 0, width\/3, height);\n+        bg.drawImage(duke, 0, 0, null);\n+        bg.setColor(textColor);\n+        bg.drawString(\"Buff Image\", 5, height-1);\n+        bg.setColor(rectColor);\n+        bg.drawRect(0, 0, width\/3-1, height-1);\n+        bg.dispose();\n+        g.drawImage(bImage, width\/3, 0, width\/3, height, null);\n+\n+        \/\/ Render the right panel directly to the screen\n+        g.setColor(fillColor);\n+        g.fillRect(2*(width\/3), 0, width\/3, height);\n+        g.drawImage(duke, 2*(width\/3), 0, null);\n+        g.setColor(textColor);\n+        g.drawString(\"Screen\", 2*(width\/3) + 5, height-1);\n+        g.setColor(rectColor);\n+        g.drawRect(2*(width\/3), 0, width\/3-1, height-1);\n+\n+    }\n+\n+    public void start() {\n+        thread = new Thread(this);\n+        thread.setPriority(Thread.MIN_PRIORITY);\n+        thread.start();\n+    }\n+\n+    public synchronized void stop() {\n+        thread = null;\n+    }\n+\n+    public void run() {\n+        Thread me = Thread.currentThread();\n+        while (thread == me) {\n+            try {\n+                thread.sleep(100);\n+            } catch (InterruptedException e) { break; }\n+        }\n+        thread = null;\n+    }\n+}\n+\n+\/\/************** End classes defined for the test *******************\n","filename":"test\/jdk\/sun\/awt\/PaletteTester.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"","filename":"test\/jdk\/sun\/awt\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/duke.gif","status":"copied"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/java2d\/loops\/GraphicsPrimitiveMgrTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/misc\/SunMiscSignalTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCSDecoderMapping.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCS_IBM_ASCII_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCS_IBM_ASCII_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCS_IBM_EBCDIC_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCS_IBM_EBCDIC_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DBCS_ONLY_IBM_EBCDIC_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DoubleByteDecoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/DoubleByteEncoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/EUC_CN_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/EUC_JP_LINUX_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/EUC_JP_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/EUC_JP_Open_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/EUC_KR_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/GBK_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM1381_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM1383_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM930_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM933_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM935_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM937_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM939_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM942C_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM942_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM943C_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM943_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM948_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM949C_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM949_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM950_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/IBM970_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0201_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0208_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0208_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0208_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0208_Solaris_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0208_Solaris_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0212_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0212_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0212_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0212_Solaris_Decoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/JIS_X_0212_Solaris_Encoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/Johab_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/MS932DB.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/MS932_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/MS936_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,3 +8,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/MS949_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/MS950_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/PCK_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/SJIS_OLD.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/SimpleEUCDecoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/SingleByteDecoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/OLD\/SingleByteEncoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/nio\/cs\/TestUnmappable.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/native\/libTestDynamicStore.m","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/generate.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/openssl.cnf","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/MD2InTrustAnchor.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/MultipleChooseAlias.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/TrustTrustedCert.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/NoInvalidateSocketException.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/CustomizedClientSchemes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/CustomizedServerSchemes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigSchemePropOrdering.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/Tls13NamedGroups.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/util\/math\/BigIntegerModuloP.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/sun\/security\/x509\/URICertStore\/ExtensionsWithLDAP.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jimage\/JImageNonAsciiNameTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jimage\/JImageTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/DefaultProviderTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/ExplodedModuleNameTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLink2Test.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkNegativeTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkOptionsTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkPluginsTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/ModuleNamesOrderTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/NativeTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/AddOptionsPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/tools\/jlink\/plugins\/DefaultStripDebugPluginTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/GenerateJLIClassesPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/IncludeLocalesPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SaveJlinkArgfilesPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StringSharingPluginTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -45,5 +49,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n+import java.util.*;\n@@ -52,6 +52,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n@@ -144,15 +140,16 @@\n-    private void checkDebugAttributes(byte[] strippedClassFile) throws IOException, ConstantPoolException {\n-        ClassFile classFile = ClassFile.read(new ByteArrayInputStream(strippedClassFile));\n-        String[] debugAttributes = new String[]{\n-                Attribute.LineNumberTable,\n-                Attribute.LocalVariableTable,\n-                Attribute.LocalVariableTypeTable\n-        };\n-        for (Method method : classFile.methods) {\n-            String methodName = method.getName(classFile.constant_pool);\n-            Code_attribute code = (Code_attribute) method.attributes.get(Attribute.Code);\n-            for (String attr : debugAttributes) {\n-                if (code.attributes.get(attr) != null) {\n-                    throw new AssertionError(\"Debug attribute was not removed: \" + attr +\n-                            \" from method \" + classFile.getName() + \"#\" + methodName);\n-                }\n+    private <T extends Attribute<T>> void checkDebugAttributes(byte[] strippedClassFile) {\n+        ClassModel classFile = Classfile.of().parse(strippedClassFile);\n+        for (MethodModel method : classFile.methods()) {\n+            String methodName = method.methodName().stringValue();\n+            CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+            if (code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null) != null) {\n+                throw new AssertionError(\"Debug attribute was not removed: \" + \"LINE_NUMBER_TABLE\" +\n+                        \" from method \" + classFile.thisClass().asInternalName() + \"#\" + methodName);\n+            }\n+            if (code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null) != null) {\n+                throw new AssertionError(\"Debug attribute was not removed: \" + \"LOCAL_VARIABLE_TABLE\" +\n+                        \" from method \" + classFile.thisClass().asInternalName() + \"#\" + methodName);\n+            }\n+            if (code.findAttribute(Attributes.LOCAL_VARIABLE_TYPE_TABLE).orElse(null) != null) {\n+                throw new AssertionError(\"Debug attribute was not removed: \" + \"LOCAL_VARIABLE_TYPE_TABLE\" +\n+                        \" from method \" + classFile.thisClass().asInternalName() + \"#\" + methodName);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StripJavaDebugAttributesPluginTest.java","additions":24,"deletions":27,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StripNativeDebugSymbolsPlugin\/FakeObjCopy.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StripNativeDebugSymbolsPlugin\/StripNativeDebugSymbolsPluginTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,5 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/VendorInfoPluginsTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8175000\n+ * @bug 8175000 8314491\n@@ -28,0 +28,1 @@\n+ * @requires os.family == \"linux\"\n@@ -34,0 +35,1 @@\n+import java.nio.file.Path;\n@@ -57,6 +59,0 @@\n-        \/\/ linux is the only supported platform, give the others a pass\n-        if (!isLinux) {\n-            System.err.println(\"Warning: unsupported platform test passes vacuously\");\n-            return;\n-        }\n-        \/\/ ok to run the test now\n@@ -67,4 +63,2 @@\n-    @Test\n-    void jexec() throws Exception {\n-        TestResult tr = doExec(jexecCmd.getAbsolutePath(),\n-                testJar.getAbsolutePath(), message);\n+    private void runTest(String... cmds) throws Exception {\n+        TestResult tr = doExec(cmds);\n@@ -80,0 +74,13 @@\n+\n+    @Test\n+    void jexec() throws Exception {\n+        runTest(jexecCmd.getAbsolutePath(),\n+                testJar.getAbsolutePath(), message);\n+    }\n+\n+    @Test\n+    void jexecInPath() throws Exception {\n+        Path jexec = Path.of(jexecCmd.getAbsolutePath());\n+        runTest(\"\/bin\/sh\", \"-c\",\n+                String.format(\"PATH=%s ; jexec %s '%s'\",jexec.getParent(), testJar.getAbsolutePath(), message));\n+    }\n","filename":"test\/jdk\/tools\/launcher\/Jexec.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/jdk\/tools\/launcher\/exeJliLaunchTest.c","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -29,1 +28,0 @@\n-import java.io.InputStream;\n@@ -36,2 +34,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.Classfile;\n@@ -227,5 +224,7 @@\n-    public static void readClass(byte[] clazz) throws IOException {\n-        try (InputStream stream = new ByteArrayInputStream(clazz)) {\n-            ClassFile.read(stream);\n-        } catch (ConstantPoolException e) {\n-            throw new IOException(e);\n+    public static void readClass(byte[] clazz) throws IOException{\n+        var errors = Classfile.of().parse(clazz).verify(null);\n+        if (!errors.isEmpty()) {\n+            var itr = errors.iterator();\n+            var thrown = itr.next();\n+            itr.forEachRemaining(thrown::addSuppressed);\n+            throw new IOException(thrown);\n","filename":"test\/jdk\/tools\/lib\/tests\/JImageValidator.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -31,3 +36,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.SourceFile_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.attribute.*;\n@@ -110,3 +115,3 @@\n-            ClassFile cf = ClassFile.read(f);\n-            SourceFile_attribute sfa = (SourceFile_attribute) cf.getAttribute(Attribute.SourceFile);\n-            String found = sfa.getSourceFile(cf.constant_pool);\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            SourceFileAttribute sfa = cf.findAttribute(Attributes.SOURCE_FILE).orElseThrow();\n+            String found = sfa.sourceFile().stringValue();\n","filename":"test\/langtools\/tools\/javac\/4241573\/T4241573.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,4 +39,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.InnerClasses_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -162,1 +165,1 @@\n-                ClassFile cf = ClassFile.read(compiledTest);\n+                ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n@@ -167,1 +170,1 @@\n-                InnerClasses_attribute innerClasses = (InnerClasses_attribute)cf.getAttribute(Attribute.InnerClasses);\n+                InnerClassesAttribute innerClasses = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -171,2 +174,2 @@\n-                    for (InnerClasses_attribute.Info info : innerClasses.classes) {\n-                        String foundSig = info.getInnerClassInfo(cf.constant_pool).getName();\n+                    for (InnerClassInfo info : innerClasses.classes()) {\n+                        String foundSig = info.innerClass().asInternalName();\n@@ -190,1 +193,1 @@\n-                                    \"found \" + innerClasses.number_of_classes + \"\\n\" +\n+                                    \"found \" + (innerClasses == null? 0: innerClasses.classes().size()) + \"\\n\" +\n","filename":"test\/langtools\/tools\/javac\/7003595\/T7003595.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,4 +38,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -69,1 +73,1 @@\n-    void checkReferences() throws IOException, ConstantPoolException {\n+    void checkReferences() throws IOException {\n@@ -73,1 +77,1 @@\n-        ClassFile classFile = ClassFile.read(file);\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n@@ -75,5 +79,5 @@\n-        CPInfo cpInfo;\n-        while (i < classFile.constant_pool.size()) {\n-            cpInfo = classFile.constant_pool.get(i);\n-            if (cpInfo instanceof CONSTANT_Class_info) {\n-                checkClassName(((CONSTANT_Class_info)cpInfo).getName());\n+        PoolEntry cpInfo;\n+        while (i < classFile.constantPool().entryCount()) {\n+            cpInfo = classFile.constantPool().entryByIndex(i);\n+            if (cpInfo instanceof ClassEntry classEntry) {\n+                checkClassName(classEntry.asInternalName());\n@@ -81,1 +85,1 @@\n-            i += cpInfo.size();\n+            i += cpInfo.width();\n","filename":"test\/langtools\/tools\/javac\/7153958\/CPoolRefClassContainingInlinedCts.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,7 +42,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Method;\n-\n-import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n+import jdk.internal.classfile.*;\n@@ -68,2 +67,1 @@\n-    public static void main(String[] args)\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    public static void main(String[] args) throws IOException {\n@@ -73,2 +71,1 @@\n-    private void run()\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    private void run() throws IOException {\n@@ -89,5 +86,1 @@\n-    void check(String dir, String... fileNames)\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            Descriptor.InvalidDescriptor {\n+    void check(String dir, String... fileNames) throws IOException{\n@@ -95,1 +88,1 @@\n-            ClassFile classFileToCheck = ClassFile.read(new File(dir, fileName));\n+            ClassModel classFileToCheck = Classfile.of().parse(new File(dir, fileName).toPath());\n@@ -97,2 +90,2 @@\n-            for (Method method : classFileToCheck.methods) {\n-                if ((method.access_flags.flags & ACC_STRICT) == 0) {\n+            for (MethodModel method : classFileToCheck.methods()) {\n+                if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n@@ -100,2 +93,2 @@\n-                            method.getName(classFileToCheck.constant_pool),\n-                            classFileToCheck.getName()));\n+                            method.methodName().stringValue(),\n+                            classFileToCheck.thisClass().asInternalName()));\n","filename":"test\/langtools\/tools\/javac\/7166455\/CheckACC_STRICTFlagOnclinitTest.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,2 +45,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n@@ -88,1 +92,1 @@\n-    private void check(CompilationKind ck) throws IOException, ConstantPoolException {\n+    private void check(CompilationKind ck) throws IOException {\n@@ -91,1 +95,1 @@\n-            ClassFile classFile = ClassFile.read(file);\n+            ClassModel classFile = Classfile.of().parse(file.toPath());\n@@ -96,3 +100,3 @@\n-                    classFile.getSuperclassName().equals(\"java\/lang\/Object\");\n-            boolean implementsNoInterface = classFile.interfaces.length == 0;\n-            boolean noMethods = classFile.methods.length == 0;\n+                    classFile.superclass().orElseThrow().asInternalName().equals(\"java\/lang\/Object\");\n+            boolean implementsNoInterface = classFile.interfaces().size() == 0;\n+            boolean noMethods = classFile.methods().size() == 0;\n","filename":"test\/langtools\/tools\/javac\/7199823\/InnerClassCannotBeVerified.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,2 +39,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -90,1 +95,1 @@\n-    void checkReference() throws IOException, ConstantPoolException {\n+    void checkReference() throws IOException {\n@@ -92,1 +97,2 @@\n-        ClassFile classFile = ClassFile.read(file);\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ConstantPool constantPool = classFile.constantPool();\n@@ -94,7 +100,7 @@\n-                i < classFile.constant_pool.size() - 1;\n-                i += classFile.constant_pool.get(i).size()) {\n-            for (int j = i + classFile.constant_pool.get(i).size();\n-                    j < classFile.constant_pool.size();\n-                    j += classFile.constant_pool.get(j).size()) {\n-                if (classFile.constant_pool.get(i).toString().\n-                        equals(classFile.constant_pool.get(j).toString())) {\n+                i < constantPool.entryCount() - 1;\n+                i += constantPool.entryByIndex(i).width()) {\n+            for (int j = i + constantPool.entryByIndex(i).width();\n+                    j < constantPool.entryCount();\n+                    j += constantPool.entryByIndex(j).width()) {\n+                if (constantPool.entryByIndex(i).toString().\n+                        equals(constantPool.entryByIndex(j).toString())) {\n","filename":"test\/langtools\/tools\/javac\/8000518\/DuplicateConstantPoolEntry.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,7 +48,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Method;\n-\n-import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n+import jdk.internal.classfile.*;\n@@ -65,2 +64,1 @@\n-    public static void main(String[] args)\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    public static void main(String[] args) throws IOException {\n@@ -71,2 +69,1 @@\n-    private void run(JavaCompiler comp)\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    private void run(JavaCompiler comp) throws IOException {\n@@ -98,6 +95,2 @@\n-    void check()\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            Descriptor.InvalidDescriptor {\n-        ClassFile classFileToCheck = ClassFile.read(new File(\"Test.class\"));\n+    void check() throws IOException {\n+        ClassModel classFileToCheck = Classfile.of().parse(new File(\"Test.class\").toPath());\n@@ -105,2 +98,2 @@\n-        for (Method method : classFileToCheck.methods) {\n-            if ((method.access_flags.flags & ACC_STRICT) == 0) {\n+        for (MethodModel method : classFileToCheck.methods()) {\n+            if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n@@ -108,2 +101,2 @@\n-                        method.getName(classFileToCheck.constant_pool),\n-                        classFileToCheck.getName()));\n+                        method.methodName().stringValue(),\n+                        classFileToCheck.thisClass().asInternalName()));\n","filename":"test\/langtools\/tools\/javac\/8005931\/CheckACC_STRICTFlagOnPkgAccessClassTest.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,2 +41,3 @@\n-import com.sun.tools.classfile.*;\n-import static com.sun.tools.classfile.AccessFlags.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.InnerClassInfo;\n+import jdk.internal.classfile.attribute.InnerClassesAttribute;\n@@ -50,1 +56,1 @@\n-        { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+        { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -55,1 +61,1 @@\n-            { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -63,1 +69,1 @@\n-            { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -68,1 +74,1 @@\n-        { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+        { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -73,1 +79,1 @@\n-            { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -81,1 +87,1 @@\n-            { anonClasses.put(getClass().getName(), ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), Classfile.ACC_IDENTITY); }\n@@ -92,1 +98,1 @@\n-        ClassFile outerClass = ClassFile.read(outerFile);\n+        ClassModel outerClass = Classfile.of().parse(outerFile);\n@@ -95,1 +101,1 @@\n-            ClassFile innerClass = ClassFile.read(innerFile);\n+            ClassModel innerClass = Classfile.of().parse(innerFile);\n@@ -104,3 +110,3 @@\n-    static void assertClassFlags(ClassFile classFile, String name, int expected) {\n-        int mask = ACC_PUBLIC | ACC_FINAL | ACC_INTERFACE | ACC_ABSTRACT |\n-                   ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM | ACC_IDENTITY;\n+    static void assertClassFlags(ClassModel classFile, String name, int expected) {\n+        int mask = Classfile.ACC_PUBLIC | Classfile.ACC_FINAL | Classfile.ACC_INTERFACE | Classfile.ACC_ABSTRACT |\n+                   Classfile.ACC_SYNTHETIC | Classfile.ACC_ANNOTATION | Classfile.ACC_ENUM | Classfile.ACC_IDENTITY;\n@@ -108,1 +114,1 @@\n-        int classActual = classFile.access_flags.flags;\n+        int classActual = classFile.flags().flagsMask();\n@@ -116,2 +122,2 @@\n-    static void assertInnerFlags(ClassFile classFile, String name, int expected) throws ConstantPoolException {\n-        int innerActual = lookupInnerFlags(classFile, name).flags;\n+    static void assertInnerFlags(ClassModel classFile, String name, int expected) {\n+        int innerActual = lookupInnerFlags(classFile, name);\n@@ -120,1 +126,1 @@\n-                                     \" in class \" + classFile.getName() +\n+                                     \" in class \" + classFile.thisClass().asInternalName() +\n@@ -125,2 +131,2 @@\n-    private static AccessFlags lookupInnerFlags(ClassFile classFile, String innerName) throws ConstantPoolException {\n-        InnerClasses_attribute inners = (InnerClasses_attribute) classFile.getAttribute(\"InnerClasses\");\n+    private static int lookupInnerFlags(ClassModel classFile, String innerName) {\n+        InnerClassesAttribute inners = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -128,1 +134,1 @@\n-            throw new AssertionError(\"InnerClasses attribute missing in class \" + classFile.getName());\n+            throw new AssertionError(\"InnerClasses attribute missing in class \" + classFile.thisClass().asInternalName());\n@@ -130,2 +136,2 @@\n-        for (InnerClasses_attribute.Info info : inners.classes) {\n-            String entryName = info.getInnerClassInfo(classFile.constant_pool).getName();\n+        for (InnerClassInfo info: inners.classes()) {\n+            String entryName = info.innerClass().asInternalName();\n@@ -133,1 +139,1 @@\n-                return info.inner_class_access_flags;\n+                return info.flagsMask();\n@@ -136,1 +142,1 @@\n-        throw new AssertionError(\"No InnerClasses entry in class \" + classFile.getName() + \" for class \" + innerName);\n+        throw new AssertionError(\"No InnerClasses entry in class \" + classFile.thisClass().asInternalName() + \" for class \" + innerName);\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnonymousClass.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-\/**\n- * Trivial {@code Attribute.Visitor} implementation, to make it easy to\n- * write visitors for specific attributes.\n- *\/\n-class AttributeVisitor<R, P> implements Attribute.Visitor<R, P> {\n-    public R visitBootstrapMethods(BootstrapMethods_attribute attr, P p) { return null; }\n-    public R visitDefault(DefaultAttribute attr, P p) { return null; }\n-    public R visitAnnotationDefault(AnnotationDefault_attribute attr, P p) { return null; }\n-    public R visitCharacterRangeTable(CharacterRangeTable_attribute attr, P p) { return null; }\n-    public R visitCode(Code_attribute attr, P p) { return null; }\n-    public R visitCompilationID(CompilationID_attribute attr, P p) { return null; }\n-    public R visitConstantValue(ConstantValue_attribute attr, P p) { return null; }\n-    public R visitDeprecated(Deprecated_attribute attr, P p) { return null; }\n-    public R visitEnclosingMethod(EnclosingMethod_attribute attr, P p) { return null; }\n-    public R visitExceptions(Exceptions_attribute attr, P p) { return null; }\n-    public R visitInnerClasses(InnerClasses_attribute attr, P p) { return null; }\n-    public R visitLineNumberTable(LineNumberTable_attribute attr, P p) { return null; }\n-    public R visitLocalVariableTable(LocalVariableTable_attribute attr, P p) { return null; }\n-    public R visitLocalVariableTypeTable(LocalVariableTypeTable_attribute attr, P p) { return null; }\n-    public R visitNestHost(NestHost_attribute attr, P p) { return null; }\n-    public R visitMethodParameters(MethodParameters_attribute attr, P p) { return null; }\n-    public R visitModule(Module_attribute attr, P p) { return null; }\n-    public R visitModuleHashes(ModuleHashes_attribute attr, P p) { return null; }\n-    public R visitModuleMainClass(ModuleMainClass_attribute attr, P p) { return null; }\n-    public R visitModulePackages(ModulePackages_attribute attr, P p) { return null; }\n-    public R visitModuleResolution(ModuleResolution_attribute attr, P p) { return null; }\n-    public R visitModuleTarget(ModuleTarget_attribute attr, P p) { return null; }\n-    public R visitNestMembers(NestMembers_attribute attr, P p) { return null; }\n-    public R visitRuntimeVisibleAnnotations(RuntimeVisibleAnnotations_attribute attr, P p) { return null; }\n-    public R visitRuntimeInvisibleAnnotations(RuntimeInvisibleAnnotations_attribute attr, P p) { return null; }\n-    public R visitRuntimeVisibleParameterAnnotations(RuntimeVisibleParameterAnnotations_attribute attr, P p) { return null; }\n-    public R visitRuntimeInvisibleParameterAnnotations(RuntimeInvisibleParameterAnnotations_attribute attr, P p) { return null; }\n-    public R visitRuntimeVisibleTypeAnnotations(RuntimeVisibleTypeAnnotations_attribute attr, P p) { return null; }\n-    public R visitRuntimeInvisibleTypeAnnotations(RuntimeInvisibleTypeAnnotations_attribute attr, P p) { return null; }\n-    public R visitSignature(Signature_attribute attr, P p) { return null; }\n-    public R visitSourceDebugExtension(SourceDebugExtension_attribute attr, P p) { return null; }\n-    public R visitSourceFile(SourceFile_attribute attr, P p) { return null; }\n-    public R visitSourceID(SourceID_attribute attr, P p) { return null; }\n-    public R visitStackMap(StackMap_attribute attr, P p) { return null; }\n-    public R visitStackMapTable(StackMapTable_attribute attr, P p) { return null; }\n-    public R visitSynthetic(Synthetic_attribute attr, P p) { return null; }\n-    public R visitPermittedSubclasses(PermittedSubclasses_attribute attr, P p) { return null; }\n-    public R visitRecord(Record_attribute attr, P p) { return null; }\n-    public R visitPreload(Preload_attribute attr, P p) { return null; }\n-}\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AttributeVisitor.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -24,0 +24,3 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -25,1 +28,1 @@\n-import com.sun.tools.classfile.*;\n+import java.lang.constant.MethodTypeDesc;\n@@ -29,1 +32,1 @@\n- * {@code com.sun.tools.classfile} library. It iterates over the methods\n+ * {@code jdk.internal.classfile} library. It iterates over the methods\n@@ -66,1 +69,1 @@\n-    public ClassFile classFile;\n+    public ClassModel classFile;\n@@ -87,4 +90,4 @@\n-        classFile = ClassFile.read(cfile);\n-        isEnum = classFile.access_flags.is(AccessFlags.ACC_ENUM);\n-        isInterface = classFile.access_flags.is(AccessFlags.ACC_INTERFACE);\n-        isPublic = classFile.access_flags.is(AccessFlags.ACC_PUBLIC);\n+        classFile = Classfile.of().parse(cfile.toPath());\n+        isEnum = (classFile.flags().flagsMask() & Classfile.ACC_ENUM) != 0;\n+        isInterface = (classFile.flags().flagsMask() & Classfile.ACC_INTERFACE) != 0;\n+        isPublic = (classFile.flags().flagsMask() & Classfile.ACC_PUBLIC) != 0;\n@@ -95,2 +98,1 @@\n-        Attribute attr = classFile.getAttribute(\"InnerClasses\");\n-        if (attr != null) attr.accept(new InnerClassVisitor(), null);\n+        classFile.findAttribute(Attributes.INNER_CLASSES).ifPresent(this::visitInnerClasses);\n@@ -108,1 +110,1 @@\n-        for (Method method : classFile.methods) {\n+        for (MethodModel method : classFile.methods()) {\n@@ -114,1 +116,1 @@\n-     * Used to visit InnerClasses_attribute of a class,\n+     * Used to visit InnerClassesAttribute of a class,\n@@ -120,14 +122,10 @@\n-    class InnerClassVisitor extends AttributeVisitor<Void, Void> {\n-        public Void visitInnerClasses(InnerClasses_attribute iattr, Void v) {\n-            try{\n-                for (InnerClasses_attribute.Info info : iattr.classes) {\n-                    if (info.getInnerClassInfo(classFile.constant_pool) == null) continue;\n-                    String in = info.getInnerClassInfo(classFile.constant_pool).getName();\n-                    if (in == null || !cname.equals(in)) continue;\n-                    isInner = true;\n-                    isAnon = null == info.getInnerName(classFile.constant_pool);\n-                    isStatic = info.inner_class_access_flags.is(AccessFlags.ACC_STATIC);\n-                    break;\n-                }\n-            } catch(Exception e) {\n-                throw new IllegalStateException(e);\n+    void visitInnerClasses(InnerClassesAttribute iattr) {\n+        try{\n+            for (InnerClassInfo info : iattr.classes()) {\n+                if (info.innerClass() == null) continue;\n+                String in = info.innerClass().name().stringValue();\n+                if (!cname.equals(in)) continue;\n+                isInner = true;\n+                isAnon = null == info.innerName().orElse(null);\n+                isStatic = (info.flagsMask() & Classfile.ACC_STATIC) != 0;\n+                break;\n@@ -135,1 +133,2 @@\n-            return null;\n+        } catch(Exception e) {\n+            throw new IllegalStateException(e);\n@@ -142,1 +141,1 @@\n-    class MethodVisitor extends AttributeVisitor<Void, StringBuilder> {\n+    class MethodVisitor {\n@@ -145,1 +144,1 @@\n-        public Descriptor mDesc;\n+        public MethodTypeDesc mDesc;\n@@ -156,1 +155,1 @@\n-        void visitMethod(Method method, StringBuilder sb) throws Exception {\n+        void visitMethod(MethodModel method, StringBuilder sb) {\n@@ -158,4 +157,4 @@\n-            mName = method.getName(classFile.constant_pool);\n-            mDesc = method.descriptor;\n-            mParams =  mDesc.getParameterCount(classFile.constant_pool);\n-            mAttrs = method.attributes.attrs.length;\n+            mName = method.methodName().stringValue();\n+            mDesc = method.methodTypeSymbol();\n+            mParams =  mDesc.parameterCount();\n+            mAttrs = method.attributes().size();\n@@ -163,1 +162,1 @@\n-            mSynthetic = method.access_flags.is(AccessFlags.ACC_SYNTHETIC);\n+            mSynthetic = (method.flags().flagsMask() & Classfile.ACC_SYNTHETIC) != 0;\n@@ -167,1 +166,1 @@\n-            mIsBridge = method.access_flags.is(AccessFlags.ACC_BRIDGE);\n+            mIsBridge = (method.flags().flagsMask() & Classfile.ACC_BRIDGE) != 0;\n@@ -174,2 +173,3 @@\n-            for (Attribute a : method.attributes) {\n-                a.accept(this, sb);\n+            for (Attribute<?> a : method.attributes()) {\n+                if (a instanceof MethodParametersAttribute pa)\n+                    visitMethodParameters(pa, sb);\n@@ -202,1 +202,1 @@\n-        public Void visitMethodParameters(MethodParameters_attribute mp,\n+        public void visitMethodParameters(MethodParametersAttribute mp,\n@@ -208,1 +208,1 @@\n-                return null;\n+                return;\n@@ -211,1 +211,1 @@\n-            mNumParams = mp.method_parameter_table_length;\n+            mNumParams = mp.parameters().size();\n@@ -216,1 +216,1 @@\n-                return null;\n+                return;\n@@ -223,1 +223,1 @@\n-                return null;\n+                return;\n@@ -235,1 +235,1 @@\n-                isFinal = (mp.method_parameter_table[x].flags & AccessFlags.ACC_FINAL) != 0;\n+                isFinal = (mp.parameters().get(x).flagsMask() & Classfile.ACC_FINAL) != 0;\n@@ -237,2 +237,2 @@\n-                int cpi = mp.method_parameter_table[x].name_index;\n-                if (cpi == 0) {\n+                Utf8Entry paramEntry = mp.parameters().get(x).name().orElse(null);\n+                if (paramEntry == null) {\n@@ -240,15 +240,1 @@\n-                    return null;\n-                }\n-\n-                \/\/ SPEC: a non 0 index, must be valid!\n-                String param = null;\n-                try {\n-                    param = classFile.constant_pool.getUTF8Value(cpi);\n-                    if (isFinal)\n-                        param = \"final \" + param;\n-                    sb.append(sep).append(param);\n-                    sep = \", \";\n-                } catch(ConstantPoolException e) {\n-                    error(prefix + \"invalid index \" + cpi + \" for param[\"\n-                          + x + \"]\");\n-                    return null;\n+                    return;\n@@ -256,1 +242,5 @@\n-\n+                String param = paramEntry.stringValue();\n+                if (isFinal)\n+                    param = \"final \" + paramEntry.stringValue();\n+                sb.append(sep).append(param);\n+                sep = \", \";\n@@ -261,1 +251,1 @@\n-                    return null;\n+                    return;\n@@ -285,1 +275,1 @@\n-                    return null;\n+                    return;\n@@ -293,1 +283,0 @@\n-            return null;\n@@ -303,1 +292,1 @@\n-        int checkParam(MethodParameters_attribute mp, String param, int index,\n+        int checkParam(MethodParametersAttribute mp, String param, int index,\n@@ -306,4 +295,4 @@\n-            boolean synthetic = (mp.method_parameter_table[index].flags\n-                                 & AccessFlags.ACC_SYNTHETIC) != 0;\n-            boolean mandated = (mp.method_parameter_table[index].flags\n-                                & AccessFlags.ACC_MANDATED) != 0;\n+            boolean synthetic = (mp.parameters().get(index).flagsMask()\n+                                 & Classfile.ACC_SYNTHETIC) != 0;\n+            boolean mandated = (mp.parameters().get(index).flagsMask()\n+                                & Classfile.ACC_MANDATED) != 0;\n@@ -365,1 +354,1 @@\n-                \/*  you can't expect an special name for bridges' parameters.\n+                \/*  you can't expect a special name for bridges' parameters.\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/ClassFileVisitor.java","additions":59,"deletions":70,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/Constructors.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/EnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/InstanceMethods.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LambdaTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,4 +38,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.MethodParameters_attribute;\n-import com.sun.tools.classfile.MethodParameters_attribute.Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.MethodParameterInfo;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n@@ -43,0 +47,1 @@\n+import java.util.Objects;\n@@ -93,4 +98,3 @@\n-        ClassFile classFile = ClassFile.read(Paths.get(\"Test.class\"));\n-        Method method = getMethod(classFile, \"f\");\n-        MethodParameters_attribute attribute =\n-                (MethodParameters_attribute) method.attributes.get(\"MethodParameters\");\n+        ClassModel classFile = Classfile.of().parse(Paths.get(\"Test.class\"));\n+        MethodModel method = getMethod(classFile, \"f\");\n+        MethodParametersAttribute attribute = method.findAttribute(Attributes.METHOD_PARAMETERS).orElse(null);\n@@ -101,2 +105,2 @@\n-        for (Entry e : attribute.method_parameter_table) {\n-            parameterNames.add(classFile.constant_pool.getUTF8Value(e.name_index));\n+        for (MethodParameterInfo e : attribute.parameters()) {\n+            parameterNames.add(e.name().orElseThrow().stringValue());\n@@ -107,3 +111,3 @@\n-    private static Method getMethod(ClassFile classFile, String name) throws Exception {\n-        for (Method method : classFile.methods) {\n-            if (classFile.constant_pool.getUTF8Value(method.name_index).equals(name)) {\n+    private static MethodModel getMethod(ClassModel classFile, String name) throws Exception {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(name)) {\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LegacyOutputTest\/LegacyOutputTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LocalClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/MemberClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/StaticMethods.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/UncommonParamNames.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,1 +42,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -46,0 +52,1 @@\n+import java.nio.file.Files;\n@@ -150,2 +157,1 @@\n-            if (e instanceof ExecutableElement) {\n-                final ExecutableElement ee = (ExecutableElement) e;\n+            if (e instanceof ExecutableElement ee) {\n@@ -168,6 +174,1 @@\n-        final ClassFile baz = ClassFile.read(Baz_class);\n-        final int ind = baz.constant_pool.getUTF8Index(\"baz\");\n-        MethodParameters_attribute mpattr = null;\n-        int mpind = 0;\n-        Code_attribute cattr = null;\n-        int cind = 0;\n+        final ClassModel baz = Classfile.of().parse(Baz_class.toPath());\n@@ -175,2 +176,2 @@\n-        \/\/ Find the indexes of the MethodParameters and the Code attributes\n-        if (baz.methods.length != 1)\n+        \/\/ Find MethodParameters and the Code attributes\n+        if (baz.methods().size() != 1)\n@@ -178,1 +179,1 @@\n-        if (!baz.methods[0].getName(baz.constant_pool).equals(\"<init>\"))\n+        if (!baz.methods().get(0).methodName().equalsString(\"<init>\"))\n@@ -180,13 +181,3 @@\n-                                baz.methods[0].getName(baz.constant_pool));\n-        for (int i = 0; i < baz.methods[0].attributes.attrs.length; i++) {\n-            if (baz.methods[0].attributes.attrs[i] instanceof\n-                MethodParameters_attribute) {\n-                mpattr = (MethodParameters_attribute)\n-                    baz.methods[0].attributes.attrs[i];\n-                mpind = i;\n-            } else if (baz.methods[0].attributes.attrs[i] instanceof\n-                       Code_attribute) {\n-                cattr = (Code_attribute) baz.methods[0].attributes.attrs[i];\n-                cind = i;\n-            }\n-        }\n+                                baz.methods().get(0).methodName().stringValue());\n+        MethodParametersAttribute mpattr = baz.methods().get(0).findAttribute(Attributes.METHOD_PARAMETERS).orElse(null);\n+        CodeAttribute cattr = baz.methods().get(0).findAttribute(Attributes.CODE).orElse(null);;\n@@ -198,2 +189,0 @@\n-        int flags = mpattr.method_parameter_table[0].flags;\n-\n@@ -201,32 +190,6 @@\n-        \/\/ the parameter from i to baz.  This requires Black Magic...\n-        \/\/\n-        \/\/ The (well-designed) classfile library (correctly) does not\n-        \/\/ allow us to mess around with the attribute data structures,\n-        \/\/ or arbitrarily generate new ones.\n-        \/\/\n-        \/\/ Instead, we install a new subclass of Attribute that\n-        \/\/ hijacks the Visitor pattern and outputs the sequence of\n-        \/\/ bytes that we want.  This only works in this particular\n-        \/\/ instance, because we know we'll only every see one kind of\n-        \/\/ visitor.\n-        \/\/\n-        \/\/ If anyone ever changes the makeup of the Baz class, or\n-        \/\/ tries to install some kind of visitor that gets run prior\n-        \/\/ to serialization, this will break.\n-        baz.methods[0].attributes.attrs[mpind] =\n-            new Attribute(mpattr.attribute_name_index,\n-                          mpattr.attribute_length) {\n-                public <R, D> R accept(Visitor<R, D> visitor, D data) {\n-                    if (data instanceof ByteArrayOutputStream) {\n-                        ByteArrayOutputStream out =\n-                            (ByteArrayOutputStream) data;\n-                        out.write(1);\n-                        out.write((ind >> 8) & 0xff);\n-                        out.write(ind & 0xff);\n-                        out.write((flags >> 24) & 0xff);\n-                        out.write((flags >> 16) & 0xff);\n-                        out.write((flags >> 8) & 0xff);\n-                        out.write(flags & 0xff);\n-                    } else\n-                        throw new RuntimeException(\"Output stream is of type \" + data.getClass() + \", which is not handled by this test.  Update the test and it should work.\");\n-                    return null;\n+        \/\/ the parameter from i to baz.\n+        byte[] bazBytes = Classfile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+            if (methodElement instanceof MethodParametersAttribute a) {\n+                List<MethodParameterInfo> newParameterInfos = new ArrayList<>();\n+                for (MethodParameterInfo info : a.parameters()) {\n+                    newParameterInfos.add(MethodParameterInfo.ofParameter(\"baz\".describeConstable(), info.flagsMask()));\n@@ -234,1 +197,6 @@\n-            };\n+                a = MethodParametersAttribute.of(newParameterInfos);\n+                methodBuilder.with(a);\n+            } else {\n+                methodBuilder.with(methodElement);\n+            }\n+        }));\n@@ -236,1 +204,1 @@\n-        \/\/ Flip the code and method attributes.  This is for checking\n+        \/\/ Flip the code and method attributes().  This is for checking\n@@ -239,2 +207,9 @@\n-            baz.methods[0].attributes.attrs[mpind] = cattr;\n-            baz.methods[0].attributes.attrs[cind] = mpattr;\n+            bazBytes = Classfile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+                if (methodElement instanceof MethodParametersAttribute) {\n+                    methodBuilder.with(cattr);\n+                } else if (methodElement instanceof CodeAttribute){\n+                    methodBuilder.with(mpattr);\n+                } else {\n+                    methodBuilder.with(methodElement);\n+                }\n+            }));\n@@ -242,2 +217,1 @@\n-\n-        new ClassWriter().write(baz, Baz_class);\n+        Files.write(Baz_class.toPath(), bazBytes);\n@@ -249,10 +223,6 @@\n-        final ClassFile foo = ClassFile.read(Foo_class);\n-        for (int i = 0; i < foo.methods.length; i++) {\n-            System.err.println(\"Examine method Foo.\" + foo.methods[i].getName(foo.constant_pool));\n-            if (foo.methods[i].getName(foo.constant_pool).equals(\"foo2\")) {\n-                for (int j = 0; j < foo.methods[i].attributes.attrs.length; j++)\n-                    if (foo.methods[i].attributes.attrs[j] instanceof\n-                        MethodParameters_attribute) {\n-                        MethodParameters_attribute mp =\n-                            (MethodParameters_attribute)\n-                            foo.methods[i].attributes.attrs[j];\n+        final ClassModel foo = Classfile.of().parse(Foo_class.toPath());\n+        for (int i = 0; i < foo.methods().size(); i++) {\n+            System.err.println(\"Examine method Foo.\" + foo.methods().get(i).methodName());\n+            if (foo.methods().get(i).methodName().equalsString(\"foo2\")) {\n+                for (int j = 0; j < foo.methods().get(i).attributes().size(); j++)\n+                    if (foo.methods().get(i).attributes().get(j) instanceof  MethodParametersAttribute mp) {\n@@ -260,1 +230,1 @@\n-                        if (2 != mp.method_parameter_table_length)\n+                        if (2 != mp.parameters().size())\n@@ -262,2 +232,2 @@\n-                                  mp.method_parameter_table_length);\n-                        else if (!foo.constant_pool.getUTF8Value(mp.method_parameter_table[0].name_index).equals(\"j\"))\n+                                  mp.parameters().size());\n+                        else if (!mp.parameters().get(0).name().orElseThrow().equalsString(\"j\"))\n@@ -265,1 +235,1 @@\n-                                  foo.constant_pool.getUTF8Value(mp.method_parameter_table[0].name_index) +\n+                                  mp.parameters().get(0).name().orElseThrow().stringValue() +\n@@ -267,1 +237,1 @@\n-                        else if  (!foo.constant_pool.getUTF8Value(mp.method_parameter_table[1].name_index).equals(\"k\"))\n+                        else if  (!mp.parameters().get(1).name().orElseThrow().equalsString(\"k\"))\n@@ -269,1 +239,1 @@\n-                                  foo.constant_pool.getUTF8Value(mp.method_parameter_table[1].name_index) +\n+                                 mp.parameters().get(1).name().orElseThrow() +\n@@ -273,4 +243,4 @@\n-            else if (foo.methods[i].getName(foo.constant_pool).equals(\"<init>\")) {\n-                for (int j = 0; j < foo.methods[i].attributes.attrs.length; j++) {\n-                    if (foo.methods[i].attributes.attrs[j] instanceof\n-                        MethodParameters_attribute)\n+            else if (foo.methods().get(i).methodName().equalsString(\"<init>\")) {\n+                for (int j = 0; j < foo.methods().get(i).attributes().size(); j++) {\n+                    if (foo.methods().get(i).attributes().get(j) instanceof\n+                        MethodParametersAttribute)\n@@ -280,4 +250,4 @@\n-            else if (foo.methods[i].getName(foo.constant_pool).equals(\"foo0\")) {\n-                for (int j = 0; j < foo.methods[i].attributes.attrs.length; j++)\n-                    if (foo.methods[i].attributes.attrs[j] instanceof\n-                        MethodParameters_attribute)\n+            else if (foo.methods().get(i).methodName().equalsString(\"foo0\")) {\n+                for (int j = 0; j < foo.methods().get(i).attributes().size(); j++)\n+                    if (foo.methods().get(i).attributes().get(j) instanceof\n+                        MethodParametersAttribute)\n@@ -287,1 +257,1 @@\n-                error(\"Unknown method \" + foo.methods[i].getName(foo.constant_pool) + \" showed up in class Foo\");\n+                error(\"Unknown method \" + foo.methods().get(i).methodName() + \" showed up in class Foo\");\n@@ -294,10 +264,7 @@\n-        final ClassFile bar = ClassFile.read(Bar_class);\n-        for (int i = 0; i < bar.methods.length; i++) {\n-            System.err.println(\"Examine method Bar.\" + bar.methods[i].getName(bar.constant_pool));\n-            if (bar.methods[i].getName(bar.constant_pool).equals(\"<init>\")) {\n-                for (int j = 0; j < bar.methods[i].attributes.attrs.length; j++)\n-                    if (bar.methods[i].attributes.attrs[j] instanceof\n-                        MethodParameters_attribute) {\n-                        MethodParameters_attribute mp =\n-                            (MethodParameters_attribute)\n-                            bar.methods[i].attributes.attrs[j];\n+        final ClassModel bar = Classfile.of().parse(Bar_class.toPath());\n+        for (int i = 0; i < bar.methods().size(); i++) {\n+            System.err.println(\"Examine method Bar.\" + bar.methods().get(i).methodName());\n+            if (bar.methods().get(i).methodName().equalsString(\"<init>\")) {\n+                for (int j = 0; j < bar.methods().get(i).attributes().size(); j++)\n+                    if (bar.methods().get(i).attributes().get(j) instanceof\n+                        MethodParametersAttribute mp) {\n@@ -305,1 +272,1 @@\n-                        if (1 != mp.method_parameter_table_length)\n+                        if (1 != mp.parameters().size())\n@@ -307,2 +274,2 @@\n-                                  mp.method_parameter_table_length);\n-                        else if (!bar.constant_pool.getUTF8Value(mp.method_parameter_table[0].name_index).equals(\"i\"))\n+                                  mp.parameters().size());\n+                        else if (!mp.parameters().get(0).name().orElseThrow().equalsString(\"i\"))\n@@ -310,1 +277,1 @@\n-                                  bar.constant_pool.getUTF8Value(mp.method_parameter_table[0].name_index) +\n+                                  mp.parameters().get(0).name().orElseThrow() +\n@@ -314,4 +281,4 @@\n-            else if (bar.methods[i].getName(bar.constant_pool).equals(\"foo\")) {\n-                for (int j = 0; j < bar.methods[i].attributes.attrs.length; j++) {\n-                    if (bar.methods[i].attributes.attrs[j] instanceof\n-                        MethodParameters_attribute)\n+            else if (bar.methods().get(i).methodName().equalsString(\"foo\")) {\n+                for (int j = 0; j < bar.methods().get(i).attributes().size(); j++) {\n+                    if (bar.methods().get(i).attributes().get(j) instanceof\n+                        MethodParametersAttribute)\n","filename":"test\/langtools\/tools\/javac\/MethodParametersTest.java","additions":76,"deletions":109,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,2 +39,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -65,1 +70,1 @@\n-                \"com.sun.tools.classfile\",\n+                \"jdk.internal.classfile\",\n@@ -106,5 +111,5 @@\n-            ClassFile cf = ClassFile.read(in);\n-            for (ConstantPool.CPInfo cpinfo: cf.constant_pool.entries()) {\n-                if (cpinfo.getTag() == ConstantPool.CONSTANT_Methodref) {\n-                    CONSTANT_Methodref_info ref = (CONSTANT_Methodref_info) cpinfo;\n-                    String methodDesc = ref.getClassInfo().getName() + \".\" + ref.getNameAndTypeInfo().getName() + \":\" + ref.getNameAndTypeInfo().getType();\n+            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            ConstantPool cp = cf.constantPool();\n+            for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n+                if (cp.entryByIndex(i) instanceof MethodRefEntry ref) {\n+                    String methodDesc = ref.owner().name().stringValue() + \".\" + ref.name().stringValue() + \":\" + ref.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/NoStringToLower.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,3 +41,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.MethodParameters_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.MethodParameterInfo;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n@@ -53,0 +58,1 @@\n+import java.util.List;\n@@ -55,1 +61,1 @@\n-    private static final int CHECKED_FLAGS = Flags.MANDATED | Flags.SYNTHETIC;\n+    private static final int CHECKED_FLAGS = Classfile.ACC_MANDATED | Classfile.ACC_SYNTHETIC;\n@@ -124,1 +130,1 @@\n-    private ClassFile readClassFile(Path classes, Method method) {\n+    private ClassModel readClassFile(Path classes, Method method) {\n@@ -127,2 +133,2 @@\n-            return ClassFile.read(classes.resolve(\"Outer$\" + className + \".class\"));\n-        } catch (IOException | ConstantPoolException e) {\n+            return Classfile.of().parse(classes.resolve(\"Outer$\" + className + \".class\"));\n+        } catch (IOException e) {\n@@ -140,2 +146,2 @@\n-    public void testInnerClassConstructor(ClassFile classFile) {\n-        checkParameters(classFile.methods[0], Flags.MANDATED, 0);\n+    public void testInnerClassConstructor(ClassModel classFile) {\n+        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, 0);\n@@ -146,4 +152,4 @@\n-    public void testLocalClassConstructor(ClassFile classFile) throws ConstantPoolException {\n-        for (com.sun.tools.classfile.Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(ConstantDescs.INIT_NAME)) {\n-                checkParameters(method, Flags.MANDATED, NO_FLAGS, Flags.SYNTHETIC);\n+    public void testLocalClassConstructor(ClassModel classFile) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(ConstantDescs.INIT_NAME)) {\n+                checkParameters(method, Classfile.ACC_MANDATED, NO_FLAGS, Classfile.ACC_SYNTHETIC);\n@@ -157,2 +163,2 @@\n-    public void testAnonymousClassExtendingInnerClassConstructor(ClassFile classFile) {\n-        checkParameters(classFile.methods[0], Flags.MANDATED, NO_FLAGS, NO_FLAGS);\n+    public void testAnonymousClassExtendingInnerClassConstructor(ClassModel classFile) {\n+        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, NO_FLAGS, NO_FLAGS);\n@@ -163,2 +169,2 @@\n-    public void testAnonymousClassConstructor(ClassFile classFile) {\n-        checkParameters(classFile.methods[0], Flags.MANDATED);\n+    public void testAnonymousClassConstructor(ClassModel classFile) {\n+        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED);\n@@ -169,4 +175,4 @@\n-    public void testValueOfInEnum(ClassFile classFile) throws ConstantPoolException {\n-        for (com.sun.tools.classfile.Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(\"valueOf\")) {\n-                checkParameters(method, Flags.MANDATED);\n+    public void testValueOfInEnum(ClassModel classFile) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(\"valueOf\")) {\n+                checkParameters(method, Classfile.ACC_MANDATED);\n@@ -180,4 +186,4 @@\n-    public void testEnumClassConstructor(ClassFile classFile) throws ConstantPoolException {\n-        for (com.sun.tools.classfile.Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(ConstantDescs.INIT_NAME)) {\n-                checkParameters(method, Flags.SYNTHETIC, Flags.SYNTHETIC, NO_FLAGS, NO_FLAGS);\n+    public void testEnumClassConstructor(ClassModel classFile) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(ConstantDescs.INIT_NAME)) {\n+                checkParameters(method, Classfile.ACC_SYNTHETIC, Classfile.ACC_SYNTHETIC, NO_FLAGS, NO_FLAGS);\n@@ -191,2 +197,2 @@\n-    public void testCompactConstructor(ClassFile classFile) {\n-        checkParameters(classFile.methods[0], Flags.MANDATED, Flags.MANDATED);\n+    public void testCompactConstructor(ClassModel classFile) {\n+        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, Classfile.ACC_MANDATED);\n@@ -195,2 +201,2 @@\n-    private void checkParameters(com.sun.tools.classfile.Method method, int... parametersFlags) {\n-        MethodParameters_attribute methodParameters = (MethodParameters_attribute) method.attributes.get(\"MethodParameters\");\n+    private void checkParameters(MethodModel method, int... parametersFlags) {\n+        MethodParametersAttribute methodParameters = method.findAttribute(Attributes.METHOD_PARAMETERS).orElseThrow();\n@@ -198,5 +204,5 @@\n-        MethodParameters_attribute.Entry[] table = methodParameters.method_parameter_table;\n-        Assert.check(table.length == parametersFlags.length, () -> \"Expected \" + parametersFlags.length\n-                + \" MethodParameters entries, found \" + table.length);\n-        for (int i = 0; i < methodParameters.method_parameter_table_length; i++) {\n-            int foundFlags = table[i].flags & CHECKED_FLAGS;\n+        List<MethodParameterInfo> table = methodParameters.parameters();\n+        Assert.check(table.size() == parametersFlags.length, () -> \"Expected \" + parametersFlags.length\n+                + \" MethodParameters entries, found \" + table.size());\n+        for (int i = 0; i < methodParameters.parameters().size(); i++) {\n+            int foundFlags = table.get(i).flagsMask() & CHECKED_FLAGS;\n@@ -210,1 +216,1 @@\n-        return ((flags & Flags.MANDATED) == Flags.MANDATED) + \" and \" + ((flags & Flags.SYNTHETIC) == Flags.SYNTHETIC);\n+        return ((flags & Classfile.ACC_MANDATED) == Classfile.ACC_MANDATED) + \" and \" + ((flags & Classfile.ACC_SYNTHETIC) == Classfile.ACC_SYNTHETIC);\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":42,"deletions":36,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -24,4 +24,5 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.BootstrapMethods_attribute.BootstrapMethodSpecifier;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_InvokeDynamic_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_MethodHandle_info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -35,1 +36,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -62,1 +68,1 @@\n-        boolean expected = Boolean.valueOf(args[0]);\n+        boolean expected = Boolean.parseBoolean(args[0]);\n@@ -70,3 +76,2 @@\n-        ClassFile classFile = ClassFile.read(new File(System.getProperty(\"test.classes\", \".\"),\n-                TestIndyStringConcat.class.getName() + \".class\"));\n-        ConstantPool constantPool = classFile.constant_pool;\n+        ClassModel classFile = Classfile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n+                TestIndyStringConcat.class.getName() + \".class\").toPath());\n@@ -74,20 +79,9 @@\n-        BootstrapMethods_attribute bsm_attr =\n-                (BootstrapMethods_attribute)classFile\n-                        .getAttribute(Attribute.BootstrapMethods);\n-\n-        for (Method method : classFile.methods) {\n-            if (method.getName(constantPool).equals(methodName)) {\n-                Code_attribute code = (Code_attribute) method.attributes\n-                        .get(Attribute.Code);\n-                for (Instruction i : code.getInstructions()) {\n-                    if (i.getOpcode() == Opcode.INVOKEDYNAMIC) {\n-                        CONSTANT_InvokeDynamic_info indyInfo =\n-                                (CONSTANT_InvokeDynamic_info) constantPool.get(i.getUnsignedShort(1));\n-\n-                        BootstrapMethodSpecifier bsmSpec =\n-                                bsm_attr.bootstrap_method_specifiers[indyInfo.bootstrap_method_attr_index];\n-\n-                        CONSTANT_MethodHandle_info bsmInfo =\n-                                (CONSTANT_MethodHandle_info) constantPool.get(bsmSpec.bootstrap_method_ref);\n-\n-                        if (bsmInfo.getCPRefInfo().getClassName().equals(\"java\/lang\/invoke\/StringConcatFactory\")) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(methodName)) {\n+                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement i : code.elementList()) {\n+                    if (i instanceof InvokeDynamicInstruction) {\n+                        InvokeDynamicInstruction indy = (InvokeDynamicInstruction) i;\n+                        BootstrapMethodEntry bsmSpec = indy.invokedynamic().bootstrap();\n+                        MethodHandleEntry bsmInfo = bsmSpec.bootstrapMethod();\n+                        if (bsmInfo.reference().owner().asInternalName().equals(\"java\/lang\/invoke\/StringConcatFactory\")) {\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/TestIndyStringConcat.java","additions":23,"deletions":29,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -24,2 +24,4 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -35,1 +37,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -97,2 +104,1 @@\n-        ClassFile classFile =\n-                ClassFile.read(\n+        ClassModel classFile = Classfile.of().parse(\n@@ -101,2 +107,1 @@\n-                                WellKnownTypeSignatures.class.getName() + \".class\"));\n-        ConstantPool constantPool = classFile.constant_pool;\n+                                WellKnownTypeSignatures.class.getName() + \".class\").toPath());\n@@ -104,10 +109,8 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(constantPool).equals(\"main\")) {\n-                Code_attribute code = (Code_attribute) method.attributes.get(Attribute.Code);\n-                for (Instruction i : code.getInstructions()) {\n-                    if (i.getOpcode() == Opcode.INVOKEDYNAMIC) {\n-                        CONSTANT_InvokeDynamic_info indyInfo =\n-                                (CONSTANT_InvokeDynamic_info)\n-                                        constantPool.get(i.getUnsignedShort(1));\n-                        CONSTANT_NameAndType_info natInfo = indyInfo.getNameAndTypeInfo();\n-                        actualTypes.add(natInfo.getType());\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(\"main\")) {\n+                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement i : code.elementList()) {\n+                    if (i instanceof InvokeDynamicInstruction) {\n+                        InvokeDynamicInstruction indy = (InvokeDynamicInstruction) i;\n+                        NameAndTypeEntry natInfo = indy.invokedynamic().nameAndType();\n+                        actualTypes.add(natInfo.type().stringValue());\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypeSignatures.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -24,2 +24,4 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -35,1 +37,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -178,13 +184,11 @@\n-        ClassFile classFile = ClassFile.read(new File(System.getProperty(\"test.classes\", \".\"),\n-                    Test.class.getName() + \".class\"));\n-        ConstantPool constantPool = classFile.constant_pool;\n-\n-        for (Method method : classFile.methods) {\n-            if (method.getName(constantPool).equals(\"main\")) {\n-                Code_attribute code = (Code_attribute) method.attributes\n-                        .get(Attribute.Code);\n-                for (Instruction i : code.getInstructions()) {\n-                    if (i.getOpcode() == Opcode.INVOKEDYNAMIC) {\n-                        CONSTANT_InvokeDynamic_info indyInfo = (CONSTANT_InvokeDynamic_info) constantPool.get(i.getUnsignedShort(1));\n-                        CONSTANT_NameAndType_info natInfo = indyInfo.getNameAndTypeInfo();\n-                        actualTypes.add(natInfo.getType());\n+        ClassModel classFile = Classfile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n+                    Test.class.getName() + \".class\").toPath());\n+\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(\"main\")) {\n+                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement i : code.elementList()) {\n+                    if (i instanceof InvokeDynamicInstruction) {\n+                        InvokeDynamicEntry indyInfo = ((InvokeDynamicInstruction) i).invokedynamic();\n+                        NameAndTypeEntry natInfo = indyInfo.nameAndType();\n+                        actualTypes.add(natInfo.type().stringValue());\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/access\/Test.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,5 +48,2 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -64,9 +66,8 @@\n-    void checkClassFile(final Path cfilePath) throws Exception {\n-        ClassFile classFile = ClassFile.read(\n-                new BufferedInputStream(Files.newInputStream(cfilePath)));\n-        for (Method method : classFile.methods) {\n-            if (method.access_flags.is(AccessFlags.ACC_BRIDGE)) {\n-                checkForAttr(method.attributes,\n-                        \"Annotations hasn't been copied to bridge method\",\n-                        Attribute.RuntimeVisibleAnnotations,\n-                        Attribute.RuntimeVisibleParameterAnnotations);\n+    <A extends Attribute<A>> void checkClassFile(final Path cfilePath) throws Exception {\n+        ClassModel classFile = Classfile.of().parse(cfilePath);\n+        for (MethodModel method : classFile.methods()) {\n+            if ((method.flags().flagsMask() & Classfile.ACC_BRIDGE) != 0) {\n+                Assert.checkNonNull(method.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS),\n+                        \"Annotations hasn't been copied to bridge method\");\n+                Assert.checkNonNull(method.findAttribute(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),\n+                        \"Annotations hasn't been copied to bridge method\");\n@@ -77,6 +78,0 @@\n-    void checkForAttr(Attributes attrs, String errorMsg, String... attrNames) {\n-        for (String attrName : attrNames) {\n-            Assert.checkNonNull(attrs.get(attrName), errorMsg);\n-        }\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/T6695379\/AnnotationsAreNotCopiedToBridgeMethodsTest.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -41,4 +46,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -93,1 +96,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -95,2 +98,2 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(methodToFind)) {\n+        for (MethodModel m : classFile.methods()) {\n+            if (m.methodName().equalsString(methodToFind)) {\n@@ -98,4 +101,3 @@\n-                Code_attribute code = (Code_attribute) method.attributes.get(\"Code\");\n-                LineNumberTable_attribute lnt =\n-                        (LineNumberTable_attribute) code.attributes.get(\"LineNumberTable\");\n-                Assert.check(lnt.line_number_table_length == expectedLNT.length,\n+                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                Assert.check(lnt.lineNumbers().size() == expectedLNT.length,\n@@ -104,3 +106,3 @@\n-                for (LineNumberTable_attribute.Entry entry: lnt.line_number_table) {\n-                    Assert.check(entry.line_number == expectedLNT[i][0] &&\n-                            entry.start_pc == expectedLNT[i][1],\n+                for (LineNumberInfo entry: lnt.lineNumbers()) {\n+                    Assert.check(entry.lineNumber() == expectedLNT[i][0] &&\n+                            entry.startPc() == expectedLNT[i][1],\n@@ -108,1 +110,1 @@\n-                            \"Found \" + entry.line_number + \":\" + entry.start_pc +\n+                            \"Found \" + entry.lineNumber() + \":\" + entry.startPc() +\n","filename":"test\/langtools\/tools\/javac\/T6970173\/DebugPointerAtBadPositionTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -41,4 +46,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -100,1 +103,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -102,2 +105,2 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(methodToFind)) {\n+        for (MethodModel m : classFile.methods()) {\n+            if (m.methodName().equalsString(methodToFind)) {\n@@ -105,4 +108,3 @@\n-                Code_attribute code = (Code_attribute) method.attributes.get(\"Code\");\n-                LineNumberTable_attribute lnt =\n-                        (LineNumberTable_attribute) code.attributes.get(\"LineNumberTable\");\n-                Assert.check(lnt.line_number_table_length == expectedLNT.length,\n+                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                Assert.check(lnt.lineNumbers().size() == expectedLNT.length,\n@@ -111,3 +113,3 @@\n-                for (LineNumberTable_attribute.Entry entry: lnt.line_number_table) {\n-                    Assert.check(entry.line_number == expectedLNT[i][0] &&\n-                            entry.start_pc == expectedLNT[i][1],\n+                for (LineNumberInfo entry: lnt.lineNumbers()) {\n+                    Assert.check(entry.lineNumber() == expectedLNT[i][0] &&\n+                            entry.startPc() == expectedLNT[i][1],\n@@ -115,1 +117,1 @@\n-                            \"Found \" + entry.line_number + \":\" + entry.start_pc +\n+                            \"Found \" + entry.lineNumber() + \":\" + entry.startPc() +\n","filename":"test\/langtools\/tools\/javac\/T7008643\/InlinedFinallyConfuseDebuggersTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -35,1 +40,5 @@\n-import com.sun.tools.classfile.*;\n+import java.util.Objects;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.instruction.TypeCheckInstruction;\n@@ -58,2 +67,2 @@\n-        ClassFile cls = ClassFile.read(DoubleCastTest.class.getResourceAsStream(\"DoubleCastTest$C.class\"));\n-        for (Method m: cls.methods)\n+        ClassModel cls = Classfile.of().parse(Objects.requireNonNull(DoubleCastTest.class.getResourceAsStream(\"DoubleCastTest$C.class\")).readAllBytes());\n+        for (MethodModel m: cls.methods())\n@@ -63,1 +72,1 @@\n-    static void check(Method m) throws Exception {\n+    static void check(MethodModel m) throws Exception {\n@@ -65,4 +74,5 @@\n-        int last_ref = 0;\n-        Code_attribute ea = (Code_attribute)m.attributes.get(Attribute.Code);\n-        for (Instruction i : ea.getInstructions()) {\n-            if (i.getOpcode() == Opcode.CHECKCAST) {\n+        ClassEntry last_ref = null;\n+        CodeAttribute ea = m.findAttribute(Attributes.CODE).orElseThrow();\n+        for (int i = 0; i < ea.elementList().size(); ++i) {\n+            CodeElement ce = ea.elementList().get(i);\n+            if (ce instanceof TypeCheckInstruction ins && ins.opcode() == Opcode.CHECKCAST) {\n@@ -70,1 +80,1 @@\n-                    (!(last_is_cast && last_ref == i.getUnsignedShort(1)),\n+                    (!(last_is_cast && last_ref == ins.type()),\n@@ -73,1 +83,1 @@\n-                last_ref = i.getUnsignedShort(1);\n+                last_ref = ins.type();\n","filename":"test\/langtools\/tools\/javac\/T7053059\/DoubleCastTest.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -41,5 +46,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n@@ -152,1 +155,1 @@\n-            ClassFile cf = ClassFile.read(is);\n+            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n@@ -158,3 +161,3 @@\n-            Method test_method = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            MethodModel test_method = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -171,7 +174,1 @@\n-            Code_attribute code = null;\n-            for (Attribute a : test_method.attributes) {\n-                if (a.getName(cf.constant_pool).equals(Attribute.Code)) {\n-                    code = (Code_attribute)a;\n-                    break;\n-                }\n-            }\n+            CodeAttribute code = test_method.findAttribute(Attributes.CODE).orElse(null);\n@@ -185,3 +182,3 @@\n-            for (int i = 0; i < code.exception_table_length ; i++) {\n-                int catchType = code.exception_table[i].catch_type;\n-                if (catchType == 0) { \/\/any\n+            for (int i = 0; i < code.exceptionHandlers().size() ; i++) {\n+                ClassEntry catchType = code.exceptionHandlers().get(i).catchType().orElse(null);\n+                if (catchType == null) { \/\/any\n@@ -197,1 +194,0 @@\n-                return;\n@@ -199,1 +195,1 @@\n-        } catch (IOException | ConstantPoolException e) {\n+        } catch (IOException e) {\n","filename":"test\/langtools\/tools\/javac\/T7093325.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,0 +38,1 @@\n+import jdk.internal.classfile.*;\n@@ -53,5 +59,0 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Field;\n@@ -61,3 +62,0 @@\n-import static com.sun.tools.classfile.AccessFlags.ACC_ENUM;\n-import static com.sun.tools.classfile.AccessFlags.ACC_FINAL;\n-import static com.sun.tools.classfile.AccessFlags.ACC_STATIC;\n@@ -78,1 +76,6 @@\n-        \"com.sun.tools.classfile\",\n+        \"jdk.internal.classfile\",\n+        \"jdk.internal.classfile.attribute\",\n+        \"jdk.internal.classfile.constantpool\",\n+        \"jdk.internal.classfile.instruction\",\n+        \"jdk.internal.classfile.components\",\n+        \"jdk.internal.classfile.impl\",\n@@ -93,1 +96,0 @@\n-        ignore(\"com\/sun\/tools\/classfile\/Dependencies$DefaultFilter\", \"instance\");\n@@ -135,6 +137,1 @@\n-    private void run()\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            InvalidDescriptor,\n-            URISyntaxException {\n+    private void run() throws IOException {\n@@ -167,5 +164,1 @@\n-    void analyzeModule(StandardJavaFileManager fm, String moduleName)\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            InvalidDescriptor {\n+    void analyzeModule(StandardJavaFileManager fm, String moduleName) throws IOException {\n@@ -182,1 +175,1 @@\n-                ClassFile classFile;\n+                ClassModel classFile;\n@@ -184,1 +177,1 @@\n-                    classFile = ClassFile.read(input);\n+                    classFile = Classfile.of().parse(input.readAllBytes());\n@@ -204,5 +197,1 @@\n-    void analyzeClassFile(ClassFile classFileToCheck)\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            Descriptor.InvalidDescriptor {\n+    void analyzeClassFile(ClassModel classFileToCheck) {\n@@ -210,1 +199,1 @@\n-                (classFileToCheck.access_flags.flags & ACC_ENUM) != 0;\n+                (classFileToCheck.flags().flagsMask() & Classfile.ACC_ENUM) != 0;\n@@ -215,1 +204,1 @@\n-                classFieldsToIgnoreMap.get(classFileToCheck.getName());\n+                classFieldsToIgnoreMap.get(classFileToCheck.thisClass().asInternalName());\n@@ -217,2 +206,2 @@\n-        for (Field field : classFileToCheck.fields) {\n-            if (ignoreField(field.getName(classFileToCheck.constant_pool))) {\n+        for (FieldModel field : classFileToCheck.fields()) {\n+            if (ignoreField(field.fieldName().stringValue())) {\n@@ -222,1 +211,1 @@\n-                    (field.access_flags.flags & (ACC_ENUM | ACC_FINAL)) == 0;\n+                    (field.flags().flagsMask() & (Classfile.ACC_ENUM | Classfile.ACC_FINAL)) == 0;\n@@ -224,2 +213,2 @@\n-                    (field.access_flags.flags & ACC_STATIC) != 0 &&\n-                    (field.access_flags.flags & ACC_FINAL) == 0;\n+                    (field.flags().flagsMask() & Classfile.ACC_STATIC) != 0 &&\n+                    (field.flags().flagsMask() & Classfile.ACC_FINAL) == 0;\n@@ -228,1 +217,1 @@\n-                        field.getName(classFileToCheck.constant_pool) +\n+                        field.fieldName().stringValue() +\n@@ -230,1 +219,1 @@\n-                        classFileToCheck.getName());\n+                        classFileToCheck.thisClass().asInternalName());\n","filename":"test\/langtools\/tools\/javac\/T8003967\/DetectMutableStaticFields.java","additions":27,"deletions":38,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -54,2 +59,0 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n@@ -66,0 +69,1 @@\n+import jdk.internal.classfile.*;\n@@ -115,1 +119,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -117,2 +121,2 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(\"<init>\")) {\n@@ -146,2 +150,6 @@\n-                \"--add-modules\", \"jdk.jdeps\",\n-                \"--add-exports\", \"jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n+                \"--add-exports\", \"java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\",\n","filename":"test\/langtools\/tools\/javac\/T8010737\/ParameterNamesAreNotCopiedToAnonymousInitTest.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,4 +45,0 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.Method;\n@@ -46,0 +47,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -162,1 +165,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -164,2 +167,2 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(methodToFind)) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(methodToFind)) {\n@@ -167,4 +170,3 @@\n-                Code_attribute code = (Code_attribute) method.attributes.get(\"Code\");\n-                LineNumberTable_attribute lnt =\n-                        (LineNumberTable_attribute) code.attributes.get(\"LineNumberTable\");\n-                Assert.check(lnt.line_number_table_length == expectedLNT.length,\n+                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n+                Assert.check(lnt.lineNumbers().size() == expectedLNT.length,\n@@ -173,3 +175,3 @@\n-                for (LineNumberTable_attribute.Entry entry: lnt.line_number_table) {\n-                    Assert.check(entry.line_number == expectedLNT[i][0] &&\n-                            entry.start_pc == expectedLNT[i][1],\n+                for (LineNumberInfo entry: lnt.lineNumbers()) {\n+                    Assert.check(entry.lineNumber() == expectedLNT[i][0] &&\n+                            entry.startPc() == expectedLNT[i][1],\n@@ -177,1 +179,1 @@\n-                            \"Found \" + entry.line_number + \":\" + entry.start_pc +\n+                            \"Found \" + entry.lineNumber() + \":\" + entry.startPc() +\n","filename":"test\/langtools\/tools\/javac\/T8019486\/WrongLNTForLambdaTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -32,11 +37,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_String_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.ConstantPool.InvalidIndex;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Instruction.KindVisitor;\n-import com.sun.tools.classfile.Instruction.TypeKind;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -68,10 +66,9 @@\n-        ClassFile classFile = ClassFile.read(\n-                new BufferedInputStream(Files.newInputStream(path)));\n-        constantPool = classFile.constant_pool;\n-        utf8Index = constantPool.getUTF8Index(\"STR_TO_LOOK_FOR\");\n-        for (Method method: classFile.methods) {\n-            if (method.getName(constantPool).equals(\"methodToLookFor\")) {\n-                Code_attribute codeAtt = (Code_attribute)method.attributes.get(Attribute.Code);\n-                for (Instruction inst: codeAtt.getInstructions()) {\n-                    inst.accept(codeVisitor, null);\n-                }\n+        ClassModel classFile = Classfile.of().parse(\n+                new BufferedInputStream(Files.newInputStream(path)).readAllBytes());\n+        constantPool = classFile.constantPool();\n+        for (MethodModel method: classFile.methods()) {\n+            if (method.methodName().equalsString(\"methodToLookFor\")) {\n+                CodeAttribute codeAtt = method.findAttribute(Attributes.CODE).orElseThrow();\n+                codeAtt.elementList().stream()\n+                        .filter(ce -> ce instanceof Instruction)\n+                        .forEach(ins -> checkIndirectRefToString((Instruction) ins));\n@@ -83,16 +80,5 @@\n-\n-    CodeVisitor codeVisitor = new CodeVisitor();\n-\n-    class CodeVisitor implements KindVisitor<Void, Void> {\n-\n-        void checkIndirectRefToString(int cp_index) {\n-            try {\n-                CPInfo cInfo = constantPool.get(cp_index);\n-                if (cInfo instanceof CONSTANT_String_info) {\n-                    CONSTANT_String_info strInfo = (CONSTANT_String_info)cInfo;\n-                    if (strInfo.string_index == utf8Index) {\n-                        numberOfRefToStr++;\n-                    }\n-                }\n-            } catch (InvalidIndex ex) {\n-                throw new AssertionError(\"invalid constant pool index at \" + cp_index);\n+    void checkIndirectRefToString(Instruction instruction) {\n+        if (instruction instanceof InvokeInstruction invokeInstruction) {\n+            MemberRefEntry refEntry = invokeInstruction.method();\n+            if (constantPool.entryByIndex(refEntry.type().index()) instanceof Utf8Entry) {\n+                numberOfRefToStr++;\n@@ -101,58 +87,0 @@\n-\n-        @Override\n-        public Void visitNoOperands(Instruction instr, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitArrayType(Instruction instr, TypeKind kind, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitBranch(Instruction instr, int offset, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitConstantPoolRef(Instruction instr, int index, Void p) {\n-            checkIndirectRefToString(index);\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitConstantPoolRefAndValue(Instruction instr, int index, int value, Void p) {\n-            checkIndirectRefToString(index);\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLocal(Instruction instr, int index, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLocalAndValue(Instruction instr, int index, int value, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLookupSwitch(Instruction instr, int default_, int npairs, int[] matches, int[] offsets, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitTableSwitch(Instruction instr, int default_, int low, int high, int[] offsets, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitValue(Instruction instr, int value, Void p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitUnknown(Instruction instr, Void p) {\n-            return null;\n-        }\n-\n","filename":"test\/langtools\/tools\/javac\/T8022186\/DeadCodeGeneratedForEmptyTryTest.java","additions":24,"deletions":96,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,4 +45,0 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Code_attribute.Exception_data;\n-import com.sun.tools.classfile.Method;\n@@ -46,0 +47,3 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n@@ -103,1 +107,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -106,2 +110,2 @@\n-            for (Method method : classFile.methods) {\n-                if (method.getName(classFile.constant_pool).equals(methodToFind)) {\n+            for (MethodModel m : classFile.methods()) {\n+                if (m.methodName().equalsString(methodToFind)) {\n@@ -109,2 +113,2 @@\n-                    Code_attribute code = (Code_attribute) method.attributes.get(\"Code\");\n-                    Assert.check(code.exception_table_length == expectedExceptionTable.length,\n+                    CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                    Assert.check(code.exceptionHandlers().size() == expectedExceptionTable.length,\n@@ -113,5 +117,5 @@\n-                    for (Exception_data entry: code.exception_table) {\n-                        Assert.check(entry.start_pc == expectedExceptionTable[i][0] &&\n-                                entry.end_pc == expectedExceptionTable[i][1] &&\n-                                entry.handler_pc == expectedExceptionTable[i][2] &&\n-                                entry.catch_type == expectedExceptionTable[i][3],\n+                    for (ExceptionCatch entry: code.exceptionHandlers()) {\n+                        Assert.check(code.labelToBci(entry.tryStart()) == expectedExceptionTable[i][0] &&\n+                                     code.labelToBci(entry.tryEnd()) == expectedExceptionTable[i][1] &&\n+                                     code.labelToBci(entry.handler()) == expectedExceptionTable[i][2] &&\n+                                     (entry.catchType().isPresent()? entry.catchType().get().index(): 0)== expectedExceptionTable[i][3],\n","filename":"test\/langtools\/tools\/javac\/T8024039\/NoDeadCodeGenerationOnTrySmtTest.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,1 +50,0 @@\n-import com.sun.tools.classfile.*;\n@@ -55,0 +59,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -90,5 +96,5 @@\n-        ClassFile classFile = ClassFile.read(file);\n-        for (Method m : classFile.methods) {\n-            if (classFile.constant_pool.getUTF8Value(m.name_index).equals(\"foo\")) {\n-                Code_attribute code = (Code_attribute)m.attributes.get(Attribute.Code);\n-                LineNumberTable_attribute lnt = (LineNumberTable_attribute)code.attributes.get(Attribute.LineNumberTable);\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        for (MethodModel m : classFile.methods()) {\n+            if (m.methodName().equalsString(\"foo\")) {\n+                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n@@ -100,3 +106,3 @@\n-    void checkLNT(LineNumberTable_attribute lnt, int lineToCheckFor) {\n-        for (LineNumberTable_attribute.Entry e: lnt.line_number_table) {\n-            if (e.line_number == lineToCheckFor) {\n+    void checkLNT(LineNumberTableAttribute lnt, int lineToCheckFor) {\n+        for (LineNumberInfo e: lnt.lineNumbers()) {\n+            if (e.lineNumber() == lineToCheckFor) {\n","filename":"test\/langtools\/tools\/javac\/T8180141\/MissingLNTEntryForBreakContinueTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,1 +50,0 @@\n-import com.sun.tools.classfile.*;\n@@ -56,0 +60,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -86,5 +92,5 @@\n-        ClassFile classFile = ClassFile.read(file);\n-        for (Method m : classFile.methods) {\n-            if (classFile.constant_pool.getUTF8Value(m.name_index).equals(\"foo\")) {\n-                Code_attribute code = (Code_attribute)m.attributes.get(Attribute.Code);\n-                LineNumberTable_attribute lnt = (LineNumberTable_attribute)code.attributes.get(Attribute.LineNumberTable);\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        for (MethodModel m : classFile.methods()) {\n+            if (m.methodName().equalsString(\"foo\")) {\n+                CodeAttribute code = m.findAttribute(Attributes.CODE).orElseThrow();\n+                LineNumberTableAttribute lnt = code.findAttribute(Attributes.LINE_NUMBER_TABLE).orElseThrow();\n@@ -96,3 +102,3 @@\n-    void checkLNT(LineNumberTable_attribute lnt, int lineToCheckFor) {\n-        for (LineNumberTable_attribute.Entry e: lnt.line_number_table) {\n-            if (e.line_number == lineToCheckFor) {\n+    void checkLNT(LineNumberTableAttribute lnt, int lineToCheckFor) {\n+        for (LineNumberInfo e: lnt.lineNumbers()) {\n+            if (e.lineNumber() == lineToCheckFor) {\n","filename":"test\/langtools\/tools\/javac\/T8180660\/MissingLNTEntryForFinalizerTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,1 +27,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -32,2 +37,0 @@\n-import com.sun.tools.classfile.*;\n-\n@@ -40,4 +43,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute;\n-import com.sun.tools.classfile.TypeAnnotation;\n-import com.sun.tools.classfile.TypeAnnotation.Position;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n@@ -72,8 +74,7 @@\n-        ClassFile classFile = ClassFile.read(file);\n-        for (Method m : classFile.methods) {\n-            if (m.getName(classFile.constant_pool).equals(\"something\")) {\n-                for (Attribute a : m.attributes) {\n-                    if (a.getName(classFile.constant_pool).equals(\"Code\")) {\n-                        Code_attribute code = (Code_attribute)a;\n-                        for (Attribute codeAttrs : code.attributes) {\n-                            if (codeAttrs.getName(classFile.constant_pool).equals(\"RuntimeVisibleTypeAnnotations\")) {\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        for (MethodModel m : classFile.methods()) {\n+            if (m.methodName().equalsString(\"something\")) {\n+                for (Attribute<?> a : m.attributes()) {\n+                    if (a instanceof CodeAttribute code) {\n+                        for (Attribute<?> codeAttrs : code.attributes()) {\n+                            if (codeAttrs instanceof RuntimeVisibleTypeAnnotationsAttribute) {\n","filename":"test\/langtools\/tools\/javac\/T8187805\/BogusRTTAForUnusedVarTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,5 +45,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute.BootstrapMethodSpecifier;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -83,10 +86,9 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n-        for (Attribute attr : classFile.attributes) {\n-            if (attr.getName(classFile.constant_pool).equals(\"BootstrapMethods\")) {\n-                BootstrapMethods_attribute bsmAttr = (BootstrapMethods_attribute)attr;\n-                BootstrapMethodSpecifier bsmSpecifier = bsmAttr.bootstrap_method_specifiers[0];\n-                Assert.check(classFile.constant_pool.get(bsmSpecifier.bootstrap_arguments[0]) instanceof CONSTANT_MethodType_info);\n-                Assert.check(classFile.constant_pool.get(bsmSpecifier.bootstrap_arguments[1]) instanceof CONSTANT_MethodHandle_info);\n-                Assert.check(classFile.constant_pool.get(bsmSpecifier.bootstrap_arguments[2]) instanceof CONSTANT_MethodType_info);\n-                Assert.check(classFile.constant_pool.get(bsmSpecifier.bootstrap_arguments[3]) instanceof CONSTANT_Integer_info);\n-                Assert.check(classFile.constant_pool.get(bsmSpecifier.bootstrap_arguments[4]) instanceof CONSTANT_Integer_info);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        for (Attribute<?> attr : classFile.attributes()) {\n+            if (attr instanceof BootstrapMethodsAttribute bsmAttr) {\n+                BootstrapMethodEntry bsmSpecifier = bsmAttr.bootstrapMethods().getFirst();\n+                Assert.check(bsmSpecifier.arguments().get(0) instanceof MethodTypeEntry);\n+                Assert.check(bsmSpecifier.arguments().get(1) instanceof MethodHandleEntry);\n+                Assert.check(bsmSpecifier.arguments().get(2) instanceof MethodTypeEntry);\n+                Assert.check(bsmSpecifier.arguments().get(3) instanceof IntegerEntry);\n+                Assert.check(bsmSpecifier.arguments().get(4) instanceof IntegerEntry);\n","filename":"test\/langtools\/tools\/javac\/T8203892\/CheckTargetIsNotAddedAsMarkerInterfaceTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/T8209173\/CodeCompletionExceptTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,0 +48,1 @@\n+import javax.lang.model.type.TypeKind;\n@@ -50,8 +56,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.ConstantInstruction;\n@@ -77,0 +79,2 @@\n+import static java.lang.invoke.MethodHandleInfo.REF_invokeStatic;\n+\n@@ -175,4 +179,4 @@\n-            ClassFile cf = ClassFile.read(is);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -187,3 +191,2 @@\n-            Code_attribute ea =\n-                    (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -194,1 +197,1 @@\n-            int bsmIdx = -1;\n+            BootstrapMethodEntry bootstrapMethodEntry = null;\n@@ -196,7 +199,7 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"ldc\")) {\n-                    CONSTANT_Dynamic_info condyInfo = (CONSTANT_Dynamic_info)cf.constant_pool.get(i.getByte(1));\n-                    bsmIdx = condyInfo.bootstrap_method_attr_index;\n-                    System.out.println(\"condyInfo.getNameAndTypeInfo().getType() \" + condyInfo.getNameAndTypeInfo().getType());\n-                    if (!condyInfo.getNameAndTypeInfo().getType().equals(type.bytecodeTypeStr)) {\n-                        fail(\"type mismatch for CONSTANT_Dynamic_info\");\n+            for (CodeElement i : ea.elementList()) {\n+                if (i instanceof ConstantInstruction.LoadConstantInstruction lci) {\n+                    ConstantDynamicEntry condyInfo = (ConstantDynamicEntry)lci.constantEntry();\n+                    bootstrapMethodEntry = condyInfo.bootstrap();\n+                    System.out.println(\"condyInfo.getNameAndTypeInfo().getType() \" + condyInfo.type().stringValue());\n+                    if (!condyInfo.type().equalsString(type.bytecodeTypeStr)) {\n+                        fail(\"type mismatch for ConstantDynamicEntry\");\n@@ -209,1 +212,1 @@\n-            if (bsmIdx == -1) {\n+            if (bootstrapMethodEntry == null) {\n@@ -214,4 +217,2 @@\n-            BootstrapMethods_attribute bsm_attr =\n-                    (BootstrapMethods_attribute)cf\n-                    .getAttribute(Attribute.BootstrapMethods);\n-            if (bsm_attr.bootstrap_method_specifiers.length != 1) {\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            if (bsm_attr.bootstrapMethods().size() != 1) {\n@@ -222,2 +223,2 @@\n-            BootstrapMethods_attribute.BootstrapMethodSpecifier bsm_spec =\n-                    bsm_attr.bootstrap_method_specifiers[0];\n+            BootstrapMethodEntry bsm_spec =\n+                    bsm_attr.bootstrapMethods().getFirst();\n@@ -225,3 +226,1 @@\n-            CONSTANT_MethodHandle_info bsm_handle =\n-                    (CONSTANT_MethodHandle_info)cf.constant_pool\n-                    .get(bsm_spec.bootstrap_method_ref);\n+            MethodHandleEntry bsm_handle = bsm_spec.bootstrapMethod();\n@@ -229,1 +228,1 @@\n-            if (bsm_handle.reference_kind != RefKind.REF_invokeStatic) {\n+            if (bsm_handle.kind() != REF_invokeStatic) {\n@@ -234,3 +233,1 @@\n-            CONSTANT_Methodref_info bsm_ref =\n-                    (CONSTANT_Methodref_info)cf.constant_pool\n-                    .get(bsm_handle.reference_index);\n+            MemberRefEntry bsm_ref = bsm_handle.reference();\n@@ -238,1 +235,1 @@\n-            if (!bsm_ref.getClassInfo().getName().equals(\"Test\")) {\n+            if (!bsm_ref.owner().name().equalsString(\"Test\")) {\n@@ -243,1 +240,1 @@\n-            if (!bsm_ref.getNameAndTypeInfo().getName().equals(\"bsm\")) {\n+            if (!bsm_ref.name().equalsString(\"bsm\")) {\n@@ -248,2 +245,1 @@\n-            if (!bsm_ref.getNameAndTypeInfo()\n-                    .getType().equals(asBSMSignatureString())) {\n+            if (!bsm_ref.type().equalsString(asBSMSignatureString())) {\n@@ -251,1 +247,1 @@\n-                        bsm_ref.getNameAndTypeInfo().getType() + \" \" +\n+                        bsm_ref.type() + \" \" +\n@@ -256,2 +252,1 @@\n-            LineNumberTable_attribute lnt =\n-                    (LineNumberTable_attribute)ea.attributes.get(Attribute.LineNumberTable);\n+            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n@@ -263,1 +258,1 @@\n-            if (lnt.line_number_table_length != 2) {\n+            if (lnt.lineNumbers().size() != 2) {\n@@ -265,1 +260,0 @@\n-                return;\n@@ -270,1 +264,0 @@\n-            return;\n","filename":"test\/langtools\/tools\/javac\/T8222949\/TestConstantDynamic.java","additions":41,"deletions":48,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -55,8 +60,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_NameAndType_info;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Opcode;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -104,11 +105,8 @@\n-            ClassFile cf = ClassFile.read(new ByteArrayInputStream(data));\n-\n-            for (Method m : cf.methods) {\n-                Code_attribute codeAttr = (Code_attribute) m.attributes.map.get(Attribute.Code);\n-                for (Instruction i : codeAttr.getInstructions()) {\n-                    if (i.getOpcode() == Opcode.INVOKEVIRTUAL) {\n-                        CONSTANT_Methodref_info method =\n-                                (CONSTANT_Methodref_info) cf.constant_pool.get(i.getShort(1));\n-                        CONSTANT_NameAndType_info nameAndType =\n-                                cf.constant_pool.getNameAndTypeInfo(method.name_and_type_index);\n-                        if (\"close\".equals(nameAndType.getName())) {\n+            ClassModel cf = Classfile.of().parse(new ByteArrayInputStream(data).readAllBytes());\n+\n+            for (MethodModel m : cf.methods()) {\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement ce : codeAttr.elementList()) {\n+                    if (ce instanceof InvokeInstruction ins && ins.opcode() == Opcode.INVOKEVIRTUAL) {\n+                        MemberRefEntry method = ins.method();\n+                        if (method.name().equalsString(\"close\")) {\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrSimpleClose.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -37,0 +42,1 @@\n+import java.util.Objects;\n@@ -57,4 +63,4 @@\n-            ClassFile cf = ClassFile.read(in);\n-            Assert.check(cf.methods.length > 5);\n-            for (Method m : cf.methods) {\n-                String methodName = m.getName(cf.constant_pool);\n+            ClassModel cm = Classfile.of().parse(Objects.requireNonNull(in).readAllBytes());\n+            Assert.check(cm.methods().size() > 5);\n+            for (MethodModel mm : cm.methods()) {\n+                String methodName = mm.methodName().stringValue();\n@@ -64,2 +70,2 @@\n-                    var paAnnos = ((RuntimeVisibleParameterAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleParameterAnnotations)).parameter_annotations;\n-                    Assert.check(paAnnos.length > 0);\n+                    var paAnnos = mm.findAttribute(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS).orElseThrow().parameterAnnotations();\n+                    Assert.check(paAnnos.size() > 0);\n@@ -67,2 +73,2 @@\n-                        Assert.check(pa.length == 1);\n-                        Assert.check(cf.constant_pool.getUTF8Value(pa[0].type_index).equals(\"LParameterAnnotation;\"));\n+                        Assert.check(pa.size() == 1);\n+                        Assert.check(Objects.equals(pa.get(0).classSymbol().descriptorString(), \"LParameterAnnotation;\"));\n@@ -71,3 +77,3 @@\n-                    var annos = ((RuntimeAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n-                    Assert.check(annos.length == 1);\n-                    Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LMethodAnnotation;\"));\n+                    var annos = mm.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow().annotations();\n+                    Assert.check(annos.size() == 1);\n+                    Assert.check(Objects.equals(annos.get(0).classSymbol().descriptorString(), \"LMethodAnnotation;\"));\n@@ -76,5 +82,5 @@\n-            Assert.check(cf.fields.length > 0);\n-            for (Field field : cf.fields) {\n-                var annos = ((RuntimeAnnotations_attribute) field.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n-                Assert.check(annos.length == 1);\n-                Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LFieldAnnotation;\"));\n+            Assert.check(cm.fields().size() > 0);\n+            for (FieldModel fm : cm.fields()) {\n+                var annos = fm.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow().annotations();\n+                Assert.check(annos.size() == 1);\n+                Assert.check(Objects.equals(annos.getFirst().classSymbol().descriptorString(), \"LFieldAnnotation;\"));\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -48,1 +53,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -112,1 +118,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -115,2 +121,2 @@\n-        for (Method method : classFile.methods) {\n-            String methodName = method.getName(classFile.constant_pool);\n+        for (MethodModel method : classFile.methods()) {\n+            String methodName = method.methodName().stringValue();\n@@ -141,1 +147,1 @@\n-    void checkConstructor(ClassFile classFile, Method method, int... positions) throws Exception {\n+    void checkConstructor(ClassModel classFile, MethodModel method, int... positions) throws Exception {\n@@ -148,2 +154,3 @@\n-            Assert.check(ta.position.type.toString().equals(\"METHOD_FORMAL_PARAMETER\"));\n-            Assert.check(ta.position.parameter_index == pos);\n+            Assert.check(ta.targetInfo().targetType().name().equals(\"METHOD_FORMAL_PARAMETER\"));\n+            assert ta.targetInfo() instanceof TypeAnnotation.FormalParameterTarget;\n+            Assert.check(((TypeAnnotation.FormalParameterTarget)ta.targetInfo()).formalParameterIndex() == pos);\n@@ -158,1 +165,1 @@\n-    void checkAccessor(ClassFile classFile, Method method) {\n+    void checkAccessor(ClassModel classFile, MethodModel method) {\n@@ -163,1 +170,1 @@\n-        Assert.check(ta.position.type.toString().equals(\"METHOD_RETURN\"));\n+        Assert.check(ta.targetInfo().targetType().name().equals(\"METHOD_RETURN\"));\n@@ -170,1 +177,1 @@\n-    void checkFields(ClassFile classFile, int... positions) {\n+    void checkFields(ClassModel classFile, int... positions) {\n@@ -176,1 +183,1 @@\n-            for (Field field : classFile.fields) {\n+            for (FieldModel field : classFile.fields()) {\n@@ -184,1 +191,1 @@\n-                    Assert.check(ta.position.type.toString().equals(\"FIELD\"));\n+                    Assert.check(ta.targetInfo().targetType().name().equals(\"FIELD\"));\n@@ -196,3 +203,3 @@\n-    void findAnnotations(ClassFile cf, Method m, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, m, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n+    void findAnnotations(ClassModel cm, AttributedElement m, List<TypeAnnotation> annos) {\n+        findAnnotations(cm, m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cm, m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n@@ -201,25 +208,8 @@\n-    void findAnnotations(ClassFile cf, Field m, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, m, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n-    }\n-\n-    void findAnnotations(ClassFile cf, Method m, String name, List<TypeAnnotation> annos) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n-        }\n-\n-        int cindex = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-        if (cindex != -1) {\n-            Attribute cattr = m.attributes.get(cindex);\n-            assert cattr instanceof Code_attribute;\n-            Code_attribute cAttr = (Code_attribute)cattr;\n-            index = cAttr.attributes.getIndex(cf.constant_pool, name);\n-            if (index != -1) {\n-                Attribute attr = cAttr.attributes.get(index);\n-                assert attr instanceof RuntimeTypeAnnotations_attribute;\n-                RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-                annos.addAll(Arrays.asList(tAttr.annotations));\n+    <T extends Attribute<T>> void findAnnotations(ClassModel cf, AttributedElement m, AttributeMapper<T> attrName, List<TypeAnnotation> annos) {\n+        Attribute<T> attr = m.findAttribute(attrName).orElse(null);\n+        addAnnos(annos, attr);\n+        if (m instanceof MethodModel) {\n+            CodeAttribute cattr = m.findAttribute(Attributes.CODE).orElse(null);\n+            if (cattr != null) {\n+                attr = cattr.findAttribute(attrName).orElse(null);\n+                addAnnos(annos, attr);\n@@ -230,7 +220,13 @@\n-    void findAnnotations(ClassFile cf, Field m, String name, List<TypeAnnotation> annos) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n+    private <T extends Attribute<T>> void addAnnos(List<TypeAnnotation> annos, Attribute<T> attr) {\n+        if (attr != null) {\n+            switch (attr) {\n+                case RuntimeVisibleTypeAnnotationsAttribute vanno -> {\n+                    annos.addAll(vanno.annotations());\n+                }\n+                case RuntimeInvisibleTypeAnnotationsAttribute ivanno -> {\n+                    annos.addAll(ivanno.annotations());\n+                }\n+                default -> {\n+                    throw new AssertionError();\n+                }\n+            }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":45,"deletions":49,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -48,1 +53,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -100,1 +106,1 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n@@ -102,1 +108,1 @@\n-        for (Method method : classFile.methods) {\n+        for (MethodModel method : classFile.methods()) {\n@@ -104,1 +110,1 @@\n-            String methodName = method.getName(classFile.constant_pool);\n+            String methodName = method.methodName().stringValue();\n@@ -110,3 +116,3 @@\n-    void findAnnotations(ClassFile cf, Method m, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, m, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n+    void findAnnotations(ClassModel cf, MethodModel m, List<TypeAnnotation> annos) {\n+        findAnnotations(cf, m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cf, m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n@@ -115,7 +121,9 @@\n-    void findAnnotations(ClassFile cf, Method m, String name, List<TypeAnnotation> annos) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n+    <T extends Attribute<T>> void findAnnotations(ClassModel cf, AttributedElement m, AttributeMapper<T> attrName, List<TypeAnnotation> annos) {\n+        Attribute<T> attr = m.findAttribute(attrName).orElse(null);\n+        addAnnos(annos, attr);\n+        if (m instanceof MethodModel) {\n+            CodeAttribute cattr = m.findAttribute(Attributes.CODE).orElse(null);\n+            if (cattr != null) {\n+                attr = cattr.findAttribute(attrName).orElse(null);\n+                addAnnos(annos, attr);\n+            }\n@@ -123,0 +131,1 @@\n+    }\n@@ -124,11 +133,12 @@\n-        int cindex = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-        if (cindex != -1) {\n-            Attribute cattr = m.attributes.get(cindex);\n-            assert cattr instanceof Code_attribute;\n-            Code_attribute cAttr = (Code_attribute)cattr;\n-            index = cAttr.attributes.getIndex(cf.constant_pool, name);\n-            if (index != -1) {\n-                Attribute attr = cAttr.attributes.get(index);\n-                assert attr instanceof RuntimeTypeAnnotations_attribute;\n-                RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-                annos.addAll(Arrays.asList(tAttr.annotations));\n+    private <T extends Attribute<T>> void addAnnos(List<TypeAnnotation> annos, Attribute<T> attr) {\n+        if (attr != null) {\n+            switch (attr) {\n+                case RuntimeVisibleTypeAnnotationsAttribute vanno -> {\n+                    annos.addAll(vanno.annotations());\n+                }\n+                case RuntimeInvisibleTypeAnnotationsAttribute ivanno -> {\n+                    annos.addAll(ivanno.annotations());\n+                }\n+                default -> {\n+                    throw new AssertionError();\n+                }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/VariablesDeclaredWithVarTest.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassExtends.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassTypeParam.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ConstructorInvocationTypeArgument.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Constructors.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.internal.classfile.*;\n@@ -32,10 +33,2 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.TypeAnnotation;\n-import com.sun.tools.classfile.TypeAnnotation.TargetType;\n+import java.util.*;\n+import java.util.stream.Collectors;\n@@ -56,1 +49,1 @@\n-        if (args.length == 0 || args.length > 1)\n+        if (args.length != 1)\n@@ -77,1 +70,1 @@\n-                Map<String, TypeAnnotation.Position> expected = expectedOf(method);\n+                Map<String, ReferenceInfoUtil.TAD> expected = expectedOf(method);\n@@ -87,1 +80,1 @@\n-                    String fullFile = wrap(compact, new HashMap<String, String>() {{\n+                    String fullFile = wrap(compact, new HashMap<>() {{\n@@ -93,3 +86,3 @@\n-                            ClassFile cf = compileAndReturn(fullFile, testClass, extraParams);\n-                            List<TypeAnnotation> actual = ReferenceInfoUtil.extendedAnnotationsOf(cf);\n-                            ReferenceInfoUtil.compare(expected, actual, cf);\n+                            ClassModel cm = compileAndReturn(fullFile, testClass, extraParams);\n+                            List<ReferenceInfoUtil.TAD> actual = ReferenceInfoUtil.extendedAnnotationsOf(cm);\n+                            ReferenceInfoUtil.compare(expected, actual);\n@@ -109,1 +102,1 @@\n-                out.println(\"    \" + e.toString());\n+                out.println(\"    \" + e);\n@@ -125,1 +118,1 @@\n-    private Map<String, TypeAnnotation.Position> expectedOf(Method m) {\n+    private Map<String, ReferenceInfoUtil.TAD> expectedOf(Method m) {\n@@ -132,1 +125,1 @@\n-        Map<String, TypeAnnotation.Position> result =\n+        Map<String, ReferenceInfoUtil.TAD> result =\n@@ -136,1 +129,1 @@\n-            result.putAll(expectedOf(ta));\n+            result.put(ta.annotation(), wrapTADescription(ta));\n@@ -140,1 +133,1 @@\n-                result.putAll(expectedOf(a));\n+                result.put(a.annotation(), wrapTADescription(a));\n@@ -146,34 +139,8 @@\n-\n-    private Map<String, TypeAnnotation.Position> expectedOf(TADescription d) {\n-        String annoName = d.annotation();\n-\n-        TypeAnnotation.Position p = new TypeAnnotation.Position();\n-        p.type = d.type();\n-        if (d.offset() != NOT_SET)\n-            p.offset = d.offset();\n-        if (d.lvarOffset().length != 0)\n-            p.lvarOffset = d.lvarOffset();\n-        if (d.lvarLength().length != 0)\n-            p.lvarLength = d.lvarLength();\n-        if (d.lvarIndex().length != 0)\n-            p.lvarIndex = d.lvarIndex();\n-        if (d.boundIndex() != NOT_SET)\n-            p.bound_index = d.boundIndex();\n-        if (d.paramIndex() != NOT_SET)\n-            p.parameter_index = d.paramIndex();\n-        if (d.typeIndex() != NOT_SET)\n-            p.type_index = d.typeIndex();\n-        if (d.exceptionIndex() != NOT_SET)\n-            p.exception_index = d.exceptionIndex();\n-        if (d.genericLocation().length != 0) {\n-            p.location = TypeAnnotation.Position.getTypePathFromBinary(wrapIntArray(d.genericLocation()));\n-        }\n-\n-        return Collections.singletonMap(annoName, p);\n-    }\n-\n-    private List<Integer> wrapIntArray(int[] ints) {\n-        List<Integer> list = new ArrayList<>(ints.length);\n-        for (int i : ints)\n-            list.add(i);\n-        return list;\n+    private ReferenceInfoUtil.TAD wrapTADescription(TADescription taD) {\n+        List<Integer> genericLocation = Arrays.stream(taD.genericLocation()).boxed().collect(Collectors.toList());\n+        List<Integer> lvarIndex = Arrays.stream(taD.lvarIndex()).boxed().collect(Collectors.toList());\n+        List<Integer> lvarLength = Arrays.stream(taD.lvarLength()).boxed().collect(Collectors.toList());\n+        List<Integer> lvarOffset = Arrays.stream(taD.lvarOffset()).boxed().collect(Collectors.toList());\n+        return new ReferenceInfoUtil.TAD(taD.annotation(), taD.type(), taD.typeIndex(),\n+                taD.paramIndex(), taD.boundIndex(), taD.exceptionIndex(), taD.offset(),\n+                lvarOffset, lvarLength, lvarIndex, genericLocation);\n@@ -196,1 +163,1 @@\n-    private ClassFile compileAndReturn(String fullFile, String testClass, String... extraParams) throws Exception {\n+    private ClassModel compileAndReturn(String fullFile, String testClass, String... extraParams) throws Exception {\n@@ -199,1 +166,1 @@\n-        return ClassFile.read(clazzFile);\n+        return Classfile.of().parse(clazzFile.toPath());\n@@ -211,1 +178,1 @@\n-        return System.getProperty(\"test.classes\", Driver.class.getResource(\".\").getPath());\n+        return System.getProperty(\"test.classes\", Objects.requireNonNull(Driver.class.getResource(\".\")).getPath());\n@@ -215,2 +182,1 @@\n-        List<String> options = new ArrayList<>();\n-        options.addAll(Arrays.asList(extraParams));\n+        List<String> options = new ArrayList<>(Arrays.asList(extraParams));\n@@ -218,1 +184,1 @@\n-        int rc = com.sun.tools.javac.Main.compile(options.toArray(new String[options.size()]));\n+        int rc = com.sun.tools.javac.Main.compile(options.toArray(new String[0]));\n@@ -355,1 +321,1 @@\n-    public static final int NOT_SET = -888;\n+    public static final int NOT_SET = Integer.MIN_VALUE;\n@@ -365,1 +331,1 @@\n-    TargetType type();\n+    TypeAnnotation.TargetType type();\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Driver.java","additions":29,"deletions":63,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ExceptionParameters.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Fields.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/FromSpecification.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Initializers.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,1 +41,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Lambda.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.METHOD_INVOCATION_TYPE_ARGUMENT;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.METHOD_INVOCATION_TYPE_ARGUMENT;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodInvocationTypeArgument.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodParameters.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReceivers.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReturns.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodThrows.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodTypeParam.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MultiCatch.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NestedTypes.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,14 +24,3 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.TypeAnnotation;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.RuntimeTypeAnnotations_attribute;\n-import com.sun.tools.classfile.ConstantPool.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool.UnexpectedEntry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import java.util.*;\n@@ -41,1 +30,1 @@\n-    public static final int IGNORE_VALUE = -321;\n+    public static final int IGNORE_VALUE = Integer.MIN_VALUE;\n@@ -43,3 +32,3 @@\n-    public static List<TypeAnnotation> extendedAnnotationsOf(ClassFile cf) {\n-        List<TypeAnnotation> annos = new ArrayList<>();\n-        findAnnotations(cf, annos);\n+    public static List<TAD> extendedAnnotationsOf(ClassModel cm) {\n+        List<TAD> annos = new ArrayList<>();\n+        findAnnotations(cm, annos);\n@@ -50,3 +39,3 @@\n-    private static void findAnnotations(ClassFile cf, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n+    private static void findAnnotations(ClassModel cm, List<TAD> annos) {\n+        findAnnotations(cm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(cm, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n@@ -54,2 +43,2 @@\n-        for (Field f : cf.fields) {\n-            findAnnotations(cf, f, annos);\n+        for (FieldModel f : cm.fields()) {\n+            findAnnotations(f, annos);\n@@ -57,2 +46,2 @@\n-        for (Method m: cf.methods) {\n-            findAnnotations(cf, m, annos);\n+        for (MethodModel m: cm.methods()) {\n+            findAnnotations(m, annos);\n@@ -62,8 +51,3 @@\n-    private static void findAnnotations(ClassFile cf, Method m, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, m, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n-    }\n-\n-    private static void findAnnotations(ClassFile cf, Field m, List<TypeAnnotation> annos) {\n-        findAnnotations(cf, m, Attribute.RuntimeVisibleTypeAnnotations, annos);\n-        findAnnotations(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, annos);\n+    private static void findAnnotations(AttributedElement ae, List<TAD> annos) {\n+        findAnnotations(ae, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, annos);\n+        findAnnotations(ae, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, annos);\n@@ -74,7 +58,8 @@\n-    private static void findAnnotations(ClassFile cf, String name, List<TypeAnnotation> annos) {\n-        int index = cf.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = cf.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n+    private static <T extends Attribute<T>> void findAnnotations(ClassModel cm, AttributeMapper<T> attrName, List<TAD> annos) {\n+        Attribute<T> attr = cm.findAttribute(attrName).orElse(null);\n+        if (attr != null) {\n+            if (attr instanceof RuntimeVisibleTypeAnnotationsAttribute tAttr) {\n+                annos.addAll(Objects.requireNonNull(generateTADList(tAttr.annotations(), null)));\n+            } else if (attr instanceof RuntimeInvisibleTypeAnnotationsAttribute tAttr) {\n+                annos.addAll(Objects.requireNonNull(generateTADList(tAttr.annotations(), null)));\n+            } else throw new AssertionError();\n@@ -86,7 +71,8 @@\n-    private static void findAnnotations(ClassFile cf, Method m, String name, List<TypeAnnotation> annos) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n+    private static <T extends Attribute<T>> void findAnnotations(AttributedElement m, AttributeMapper<T> attrName, List<TAD> annos) {\n+        Attribute<T> attr = m.findAttribute(attrName).orElse(null);\n+        if (attr != null) {\n+            if (attr instanceof RuntimeVisibleTypeAnnotationsAttribute tAttr) {\n+                annos.addAll(Objects.requireNonNull(generateTADList(tAttr.annotations(), null)));\n+            } else if (attr instanceof RuntimeInvisibleTypeAnnotationsAttribute tAttr) {\n+                annos.addAll(Objects.requireNonNull(generateTADList(tAttr.annotations(), null)));\n+            } else throw new AssertionError();\n@@ -94,12 +80,11 @@\n-\n-        int cindex = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-        if (cindex != -1) {\n-            Attribute cattr = m.attributes.get(cindex);\n-            assert cattr instanceof Code_attribute;\n-            Code_attribute cAttr = (Code_attribute)cattr;\n-            index = cAttr.attributes.getIndex(cf.constant_pool, name);\n-            if (index != -1) {\n-                Attribute attr = cAttr.attributes.get(index);\n-                assert attr instanceof RuntimeTypeAnnotations_attribute;\n-                RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-                annos.addAll(Arrays.asList(tAttr.annotations));\n+        if (m instanceof MethodModel mm) {\n+            CodeAttribute cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+            if (cAttr != null) {\n+                Attribute<T> attr2 = cAttr.findAttribute(attrName).orElse(null);;\n+                if (attr2 != null) {\n+                    if (attr2 instanceof RuntimeVisibleTypeAnnotationsAttribute tAttr2) {\n+                        annos.addAll(Objects.requireNonNull(generateTADList(tAttr2.annotations(), cAttr)));\n+                    } else if (attr2 instanceof RuntimeInvisibleTypeAnnotationsAttribute tAttr2) {\n+                        annos.addAll(Objects.requireNonNull(generateTADList(tAttr2.annotations(), cAttr)));\n+                    } else throw new AssertionError();\n+                }\n@@ -110,9 +95,47 @@\n-    \/\/ test the result of Attributes.getIndex according to expectations\n-    \/\/ encoded in the method's name\n-    private static void findAnnotations(ClassFile cf, Field m, String name, List<TypeAnnotation> annos) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            annos.addAll(Arrays.asList(tAttr.annotations));\n+    \/\/ get each target information and wrap with TAD (corresponding with TADescription in driver class)\n+    private static List<TAD> generateTADList(List<TypeAnnotation> annos, CodeAttribute cAttr) {\n+        List<TAD> result = new ArrayList<>();\n+        for (TypeAnnotation anno: annos) {\n+            TAD tad = new TAD();\n+            tad.annotation = anno.className().stringValue();\n+            tad.type = anno.targetInfo().targetType();\n+            switch (anno.targetInfo().targetType()) {\n+                case CAST, CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, METHOD_INVOCATION_TYPE_ARGUMENT -> {\n+                    if (cAttr == null) throw new AssertionError(\"Invalid Annotation\");\n+                    tad.typeIndex = ((TypeAnnotation.TypeArgumentTarget) anno.targetInfo()).typeArgumentIndex();\n+                    tad.offset = cAttr.labelToBci(((TypeAnnotation.TypeArgumentTarget) anno.targetInfo()).target());\n+                }\n+                case CLASS_EXTENDS -> tad.typeIndex = ((TypeAnnotation.SupertypeTarget) anno.targetInfo()).supertypeIndex();\n+                case CLASS_TYPE_PARAMETER, METHOD_TYPE_PARAMETER -> tad.paramIndex = ((TypeAnnotation.TypeParameterTarget) anno.targetInfo()).typeParameterIndex();\n+                case CLASS_TYPE_PARAMETER_BOUND, METHOD_TYPE_PARAMETER_BOUND -> {\n+                    tad.paramIndex = ((TypeAnnotation.TypeParameterBoundTarget) anno.targetInfo()).typeParameterIndex();\n+                    tad.boundIndex = ((TypeAnnotation.TypeParameterBoundTarget) anno.targetInfo()).boundIndex();\n+                }\n+                case EXCEPTION_PARAMETER -> tad.exceptionIndex = ((TypeAnnotation.CatchTarget) anno.targetInfo()).exceptionTableIndex();\n+                case INSTANCEOF, NEW -> {\n+                    if (cAttr == null) throw new AssertionError(\"Invalid Annotation\");\n+                    tad.offset = cAttr.labelToBci(((TypeAnnotation.OffsetTarget) anno.targetInfo()).target());\n+                }\n+                case LOCAL_VARIABLE, RESOURCE_VARIABLE -> {\n+                    if (cAttr == null) throw new AssertionError(\"Invalid Annotation\");\n+                    TypeAnnotation.LocalVarTarget localTarget = (TypeAnnotation.LocalVarTarget) anno.targetInfo();\n+                    for (TypeAnnotation.LocalVarTargetInfo localInfo : localTarget.table()) {\n+                        tad.lvarIndex.add(localInfo.index());\n+                        tad.lvarOffset.add(cAttr.labelToBci(localInfo.startLabel()));\n+                        tad.lvarLength.add(cAttr.labelToBci(localInfo.endLabel()) - cAttr.labelToBci(localInfo.startLabel()));\n+                    }\n+                }\n+                case METHOD_FORMAL_PARAMETER -> tad.paramIndex = ((TypeAnnotation.FormalParameterTarget) anno.targetInfo()).formalParameterIndex();\n+                case THROWS -> tad.typeIndex = ((TypeAnnotation.ThrowsTarget) anno.targetInfo()).throwsTargetIndex();\n+                default -> {}\n+            }\n+            for (TypeAnnotation.TypePathComponent pathComponent : anno.targetPath()) {\n+                switch (pathComponent.typePathKind()) {\n+                    case ARRAY -> tad.genericLocation.add(0);\n+                    case INNER_TYPE -> tad.genericLocation.add(1);\n+                    case WILDCARD -> tad.genericLocation.add(2);\n+                    case TYPE_ARGUMENT -> tad.genericLocation.add(3);\n+                }\n+                tad.genericLocation.add(pathComponent.typeArgumentIndex());\n+            }\n+            result.add(tad);\n@@ -120,0 +143,1 @@\n+        return result;\n@@ -127,1 +151,1 @@\n-    private static boolean areEquals(int[] a, int[] a2) {\n+    private static boolean areEquals(List<Integer> a, List<Integer> a2) {\n@@ -133,2 +157,2 @@\n-        int length = a.length;\n-        if (a2.length != length)\n+        int length = a.size();\n+        if (a2.size() != length)\n@@ -138,1 +162,1 @@\n-            if (a[i] != a2[i] && a[i] != IGNORE_VALUE && a2[i] != IGNORE_VALUE)\n+            if (!Objects.equals(a.get(i), a2.get(i)) && a.get(i) != IGNORE_VALUE && a2.get(i) != IGNORE_VALUE)\n@@ -144,1 +168,1 @@\n-    public static boolean areEquals(TypeAnnotation.Position p1, TypeAnnotation.Position p2) {\n+    public static boolean areEquals(TAD p1, TAD p2) {\n@@ -147,1 +171,1 @@\n-                (p1.location.equals(p2.location)) &&\n+                areEquals(p1.genericLocation, p2.genericLocation) &&\n@@ -152,4 +176,4 @@\n-                areEquals(p1.bound_index, p2.bound_index) &&\n-                areEquals(p1.parameter_index, p2.parameter_index) &&\n-                areEquals(p1.type_index, p2.type_index) &&\n-                areEquals(p1.exception_index, p2.exception_index);\n+                areEquals(p1.boundIndex, p2.boundIndex) &&\n+                areEquals(p1.paramIndex, p2.paramIndex) &&\n+                areEquals(p1.typeIndex, p2.typeIndex) &&\n+                areEquals(p1.exceptionIndex, p2.exceptionIndex);\n@@ -159,1 +183,1 @@\n-    private static TypeAnnotation findAnnotation(String name, List<TypeAnnotation> annotations, ClassFile cf) throws InvalidIndex, UnexpectedEntry {\n+    private static TAD findAnnotation(String name, List<TAD> annotations) {\n@@ -161,2 +185,2 @@\n-        for (TypeAnnotation anno : annotations) {\n-            String actualName = cf.constant_pool.getUTF8Value(anno.annotation.type_index);\n+        for (TAD anno : annotations) {\n+            String actualName = anno.annotation;\n@@ -169,2 +193,2 @@\n-    public static boolean compare(Map<String, TypeAnnotation.Position> expectedAnnos,\n-            List<TypeAnnotation> actualAnnos, ClassFile cf) throws InvalidIndex, UnexpectedEntry {\n+    public static boolean compare(Map<String, TAD> expectedAnnos,\n+            List<TAD> actualAnnos) {\n@@ -177,5 +201,5 @@\n-        for (Map.Entry<String, TypeAnnotation.Position> e : expectedAnnos.entrySet()) {\n-            String aName = e.getKey();\n-            TypeAnnotation.Position expected = e.getValue();\n-            TypeAnnotation actual = findAnnotation(aName, actualAnnos, cf);\n-            if (actual == null)\n+        for (Map.Entry<String, TAD> expectedAno : expectedAnnos.entrySet()) {\n+            String aName = expectedAno.getKey();\n+            TAD expectedTAD = expectedAno.getValue();\n+            TAD actualTAD = findAnnotation(aName, actualAnnos);\n+            if (actualTAD == null)\n@@ -184,1 +208,1 @@\n-            if (!areEquals(expected, actual.position)) {\n+            if (!areEquals(expectedTAD, actualTAD)) {\n@@ -186,2 +210,2 @@\n-                        \"\\n  Expected: \" + expected.toString() +\n-                        \"\\n  Found: \" + actual.position.toString());\n+                        \"\\n  Expected: \" + expectedTAD +\n+                        \"\\n  Found: \" + actualTAD);\n@@ -192,0 +216,14 @@\n+    public static class TAD {\n+        String annotation;\n+        TypeAnnotation.TargetType type;\n+        int typeIndex = IGNORE_VALUE, paramIndex = IGNORE_VALUE, boundIndex = IGNORE_VALUE, exceptionIndex = IGNORE_VALUE, offset = IGNORE_VALUE;\n+        List<Integer> lvarOffset = new ArrayList<>(), lvarLength = new ArrayList<>(), lvarIndex = new ArrayList<>(), genericLocation = new ArrayList<>();\n+        public TAD(String a, TypeAnnotation.TargetType t, int tIdx, int pIndx, int bIdx, int eIdx,\n+                   int ofs, List<Integer> lvarOfs, List<Integer> lvarLen, List<Integer> lvarIdx, List<Integer> genericLoc) {\n+            annotation = a; type = t; typeIndex = tIdx;\n+            paramIndex = pIndx; boundIndex = bIdx; exceptionIndex = eIdx;\n+            offset = ofs; lvarOffset = lvarOfs; lvarLength = lvarLen; lvarIndex = lvarIdx;\n+            genericLocation = genericLoc;\n+        }\n+        public TAD() {}\n+    }\n@@ -197,2 +235,2 @@\n-    public final Map<String, TypeAnnotation.Position> expected;\n-    public final List<TypeAnnotation> found;\n+    public final Map<String, ReferenceInfoUtil.TAD> expected;\n+    public final List<ReferenceInfoUtil.TAD> found;\n@@ -204,1 +242,1 @@\n-    public ComparisionException(String message, Map<String, TypeAnnotation.Position> expected, List<TypeAnnotation> found) {\n+    public ComparisionException(String message, Map<String, ReferenceInfoUtil.TAD> expected, List<ReferenceInfoUtil.TAD> found) {\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ReferenceInfoUtil.java","additions":132,"deletions":94,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/RepeatingTypeAnnotations.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,1 +38,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.RESOURCE_VARIABLE;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.RESOURCE_VARIABLE;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ResourceVariable.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeCasts.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeTests.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,6 +45,4 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.instruction.*;\n@@ -53,1 +56,1 @@\n-    ClassFile cf;\n+    ClassModel cf;\n@@ -100,1 +103,1 @@\n-        cf = ClassFile.read(curPath.resolve(\"IntersectionTypeTest.class\"));\n+        cf = Classfile.of().parse(curPath.resolve(\"IntersectionTypeTest.class\"));\n@@ -102,5 +105,5 @@\n-        for (Method method : cf.methods) {\n-            if (\"test\".equals(method.getName(cf.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute) method.attributes.get(Attribute.Code);\n-                for (Instruction instruction : code_attribute.getInstructions()) {\n-                    if (\"checkcast\".equals(instruction.getMnemonic())) {\n+        for (MethodModel method : cf.methods()) {\n+            if (method.methodName().equalsString(\"test\")) {\n+                CodeAttribute code_attribute = method.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement ce : code_attribute.elementList()) {\n+                    if (ce instanceof Instruction instruction && Opcode.CHECKCAST == instruction.opcode()) {\n@@ -120,4 +123,6 @@\n-    public void checkClassName(Instruction ins, String expected) throws Exception {\n-        int classIndex = ins.getUnsignedShort(1);\n-        CONSTANT_Class_info classInfo = cf.constant_pool.getClassInfo(classIndex);\n-        String className = classInfo.getName();\n+    public void checkClassName(Instruction ins, String expected) {\n+        String className = \"\";\n+        if (ins instanceof TypeCheckInstruction typeCheckInstruction) {\n+            ClassEntry classInfo = typeCheckInstruction.type();\n+            className = classInfo.asInternalName();\n+        }\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- *  @modules jdk.jdeps\/com.sun.tools.classfile\n+ *  @modules java.base\/jdk.internal.classfile\n+ *           java.base\/jdk.internal.classfile.attribute\n+ *           java.base\/jdk.internal.classfile.constantpool\n+ *           java.base\/jdk.internal.classfile.instruction\n+ *           java.base\/jdk.internal.classfile.components\n+ *           java.base\/jdk.internal.classfile.impl\n@@ -35,1 +40,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -39,1 +45,1 @@\n-    public static void main(String[] args) throws IOException, ConstantPoolException {\n+    public static void main(String[] args) throws IOException {\n@@ -43,1 +49,1 @@\n-    private void run() throws IOException, ConstantPoolException {\n+    private void run() throws IOException {\n@@ -45,5 +51,5 @@\n-        for (File classFile : testClasses.listFiles(f -> f.getName().endsWith(\".class\"))) {\n-            ClassFile cf = ClassFile.read(classFile);\n-            if ((cf.access_flags.flags & (AccessFlags.ACC_SYNTHETIC | AccessFlags.ACC_VALUE | AccessFlags.ACC_ABSTRACT)) == AccessFlags.ACC_SYNTHETIC) {\n-                if ((cf.access_flags.flags & AccessFlags.ACC_IDENTITY) == 0) {\n-                    throw new IllegalStateException(\"Missing ACC_IDENTITY on synthetic concrete identity class: \" + cf.getName());\n+        for (File classFile : Objects.requireNonNull(testClasses.listFiles(f -> f.getName().endsWith(\".class\")))) {\n+            ClassModel cf = Classfile.of().parse(classFile.toPath());\n+            if ((cf.flags().flagsMask() & (Classfile.ACC_SYNTHETIC | Classfile.ACC_VALUE | Classfile.ACC_ABSTRACT)) == Classfile.ACC_SYNTHETIC) {\n+                if ((cf.flags().flagsMask() & Classfile.ACC_IDENTITY) == 0) {\n+                    throw new IllegalStateException(\"Missing ACC_IDENTITY on synthetic concrete identity class: \" + cf.thisClass().asInternalName());\n@@ -52,3 +58,2 @@\n-            if (cf.getName().matches(\".*\\\\$[0-9]+\")) {\n-                EnclosingMethod_attribute encl =\n-                        (EnclosingMethod_attribute) cf.getAttribute(Attribute.EnclosingMethod);\n+            if (cf.thisClass().asInternalName().matches(\".*\\\\$[0-9]+\")) {\n+                EnclosingMethodAttribute encl = cf.findAttribute(Attributes.ENCLOSING_METHOD).orElse(null);\n@@ -56,3 +61,3 @@\n-                    if (encl.method_index != 0)\n-                        throw new IllegalStateException(\"Invalid EnclosingMethod.method_index: \" +\n-                                                        encl.method_index + \".\");\n+                    if (encl.enclosingMethodName().isPresent())\n+                        throw new IllegalStateException(\"Invalid EnclosingMethod.method: \" +\n+                                                        encl.enclosingMethodName().get().stringValue() + \".\");\n@@ -61,2 +66,1 @@\n-            InnerClasses_attribute attr =\n-                    (InnerClasses_attribute) cf.getAttribute(Attribute.InnerClasses);\n+            InnerClassesAttribute attr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -64,2 +68,2 @@\n-                for (InnerClasses_attribute.Info info : attr.classes) {\n-                    if (cf.major_version < 51)\n+                for (InnerClassInfo info : attr.classes()) {\n+                    if (cf.majorVersion() < 51)\n@@ -67,5 +71,4 @@\n-                    if (info.inner_name_index == 0 && info.outer_class_info_index != 0)\n-                        throw new IllegalStateException(\"Invalid outer_class_info_index=\" +\n-                                                        info.outer_class_info_index +\n-                                                        \"; inner_name_index=\" +\n-                                                        info.inner_name_index + \".\");\n+                    if (info.innerName().isEmpty() && info.outerClass().isPresent() )\n+                        throw new IllegalStateException(\"Invalid outer_class_info: \" +\n+                                                        info.outerClass().get().asInternalName() +\n+                                                        \"; inner_name is empty\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,3 +43,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -78,2 +82,2 @@\n-        ClassFile cf = ClassFile.read(curPath.resolve(\"Test.class\"));\n-        ConstantPool cp = cf.constant_pool;\n+        ClassModel cf = Classfile.of().parse(curPath.resolve(\"Test.class\"));\n+        ConstantPool cp = cf.constantPool();\n@@ -81,13 +85,8 @@\n-        for (CPInfo cpInfo : cp.entries()) {\n-            if (cpInfo instanceof CONSTANT_Methodref_info) {\n-                int class_index = ((CONSTANT_Methodref_info) cpInfo).class_index;\n-                int name_and_type_index = ((CONSTANT_Methodref_info) cpInfo).name_and_type_index;\n-                int class_name_index = ((CONSTANT_Class_info)\n-                        cp.getClassInfo(class_index)).name_index;\n-                int method_name_index = ((CONSTANT_NameAndType_info)\n-                        cp.getNameAndTypeInfo(name_and_type_index)).name_index;\n-                int method_type_name_index = ((CONSTANT_NameAndType_info)\n-                        cp.getNameAndTypeInfo(name_and_type_index)).type_index;\n-                if (\"[Ljava\/lang\/Object;\".equals(cp.getUTF8Value(class_name_index)) &&\n-                        \"clone\".equals(cp.getUTF8Value(method_name_index)) &&\n-                        \"()Ljava\/lang\/Object;\".equals(cp.getUTF8Value(method_type_name_index))) {\n+        for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n+            if (cp.entryByIndex(i) instanceof MethodRefEntry methodRefEntry) {\n+                String class_name = methodRefEntry.owner().asInternalName();\n+                String method_name = methodRefEntry.name().stringValue();\n+                String method_type = methodRefEntry.type().stringValue();\n+                if (\"[Ljava\/lang\/Object;\".equals(class_name) &&\n+                        \"clone\".equals(method_name) &&\n+                        \"()Ljava\/lang\/Object;\".equals(method_type)) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,3 +43,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.Field;\n+import jdk.internal.classfile.*;\n@@ -48,5 +51,2 @@\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n+import java.io.*;\n+import java.nio.file.Files;\n@@ -188,10 +188,11 @@\n-        ClassFile cf = ClassFile.read(file);\n-        Field a = cf.fields[0];\n-        Field b = cf.fields[1];\n-        Field[] fields = {\n-            new Field(b.access_flags, b.name_index, b.descriptor, a.attributes),\n-        };\n-        cf = new ClassFile(cf.magic, Target.JDK1_7.minorVersion, Target.JDK1_7.majorVersion,\n-                cf.constant_pool, cf.access_flags, cf.this_class, cf.super_class, cf.interfaces,\n-                fields, cf.methods, cf.attributes);\n-        new ClassWriter().write(cf, file);\n+        ClassModel cf = Classfile.of().parse(file.toPath());\n+        FieldModel a = cf.fields().getFirst();\n+        FieldModel b = cf.fields().get(1);\n+        byte[] Bytes = Classfile.of().transform(cf, ClassTransform\n+                .dropping(ce -> ce instanceof ClassfileVersion || ce instanceof FieldModel)\n+                .andThen(ClassTransform.endHandler(classBuilder -> classBuilder\n+                        .withField(b.fieldName(), b.fieldType(), fieldBuilder -> {\n+                            fieldBuilder.withFlags(b.flags().flagsMask());\n+                            a.attributes().forEach(e -> fieldBuilder.with((FieldElement) e));})\n+                        .withVersion(Target.JDK1_7.majorVersion, Target.JDK1_7.minorVersion))));\n+        Files.write(file.toPath(), Bytes);\n","filename":"test\/langtools\/tools\/javac\/classreader\/8171132\/BadConstantValue.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -37,1 +37,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -57,7 +62,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_InvokeDynamic_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_NameAndType_info;\n-import com.sun.tools.classfile.Instruction;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.*;\n@@ -169,4 +171,3 @@\n-        ClassFile cf = ClassFile.read(testClass);\n-        BootstrapMethods_attribute bootAttr =\n-                (BootstrapMethods_attribute) cf.attributes.get(Attribute.BootstrapMethods);\n-        if (bootAttr.bootstrap_method_specifiers.length != 1) {\n+        ClassModel cf = Classfile.of().parse(testClass);\n+        BootstrapMethodsAttribute bootAttr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+        if (bootAttr.bootstrapMethodsSize() != 1) {\n@@ -174,1 +175,1 @@\n-                                     bootAttr.bootstrap_method_specifiers.length);\n+                                     bootAttr.bootstrapMethodsSize());\n@@ -176,4 +177,3 @@\n-        Code_attribute codeAttr =\n-                (Code_attribute) cf.methods[1].attributes.get(Attribute.Code);\n-        Set<Integer> seenBootstraps = new HashSet<>();\n-        Set<Integer> seenNameAndTypes = new HashSet<>();\n+        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.CODE).orElseThrow();\n+        Set<BootstrapMethodEntry> seenBootstraps = new HashSet<>();\n+        Set<NameAndTypeEntry> seenNameAndTypes = new HashSet<>();\n@@ -181,11 +181,13 @@\n-        for (Instruction i : codeAttr.getInstructions()) {\n-            switch (i.getOpcode()) {\n-                case INVOKEDYNAMIC -> {\n-                    int idx = i.getUnsignedShort(1);\n-                    CONSTANT_InvokeDynamic_info dynamicInfo =\n-                            (CONSTANT_InvokeDynamic_info) cf.constant_pool.get(idx);\n-                    seenBootstraps.add(dynamicInfo.bootstrap_method_attr_index);\n-                    seenNameAndTypes.add(dynamicInfo.name_and_type_index);\n-                    CONSTANT_NameAndType_info nameAndTypeInfo =\n-                            cf.constant_pool.getNameAndTypeInfo(dynamicInfo.name_and_type_index);\n-                    seenNames.add(nameAndTypeInfo.getName());\n+        for (CodeElement i : codeAttr.elementList()) {\n+            if (i instanceof Instruction instruction) {\n+                switch (instruction ) {\n+                    case InvokeDynamicInstruction indy -> {\n+                        InvokeDynamicEntry dynamicInfo = indy.invokedynamic();\n+                        seenBootstraps.add(dynamicInfo.bootstrap());\n+                        seenNameAndTypes.add(dynamicInfo.nameAndType());\n+                        NameAndTypeEntry nameAndTypeInfo = dynamicInfo.nameAndType();\n+                        seenNames.add(nameAndTypeInfo.name().stringValue());\n+                    }\n+                    case ReturnInstruction returnInstruction -> {\n+                    }\n+                    default -> throw new AssertionError(\"Unexpected instruction: \" + instruction.opcode());\n@@ -193,3 +195,0 @@\n-                case RETURN -> {}\n-                default -> throw new AssertionError(\"Unexpected instruction: \" + i.getOpcode());\n-            }\n@@ -197,0 +196,1 @@\n+        }\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -37,1 +37,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -56,5 +61,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Opcode;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n@@ -137,3 +139,2 @@\n-        ClassFile cf = ClassFile.read(testClass);\n-        Code_attribute codeAttr =\n-                (Code_attribute) cf.methods[1].attributes.get(Attribute.Code);\n+        ClassModel cf = Classfile.of().parse(testClass);\n+        CodeAttribute codeAttr = cf.methods().get(1).findAttribute(Attributes.CODE).orElseThrow();\n@@ -141,2 +142,2 @@\n-        for (Instruction i : codeAttr.getInstructions()) {\n-            if (i.getOpcode() == Opcode.I2C) {\n+        for (CodeElement i : codeAttr.elementList()) {\n+            if (i instanceof Instruction ins && ins.opcode() == Opcode.I2C) {\n","filename":"test\/langtools\/tools\/javac\/code\/CharImmediateValue.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,1 +45,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -62,9 +67,3 @@\n-        ClassFile cf = ClassFile.read(classfile);\n-\n-        cf = new ClassFile(cf.magic, Target.JDK1_7.minorVersion,\n-                 Target.JDK1_7.majorVersion, cf.constant_pool, cf.access_flags,\n-                cf.this_class, cf.super_class, cf.interfaces, cf.fields,\n-                cf.methods, cf.attributes);\n-\n-        new ClassWriter().write(cf, classfile);\n-\n+        ClassModel cf = Classfile.of().parse(classfile.toPath());\n+        Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ClassfileVersion)\n+                .andThen(ClassTransform.endHandler(classBuilder -> classBuilder.withVersion(Target.JDK1_7.majorVersion, Target.JDK1_7.minorVersion))));\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/BadClassfile.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,2 +38,1 @@\n-import java.util.ArrayList;\n-import java.util.List;\n+import jdk.internal.classfile.*;\n@@ -37,8 +41,2 @@\n-\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Method;\n-\n-import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -55,2 +53,1 @@\n-    public static void main(String[] args)\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    public static void main(String[] args) throws IOException {\n@@ -60,2 +57,1 @@\n-    private void run()\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n+    private void run() throws IOException {\n@@ -73,5 +69,1 @@\n-    void check(String dir, String... fileNames)\n-        throws\n-            IOException,\n-            ConstantPoolException,\n-            Descriptor.InvalidDescriptor {\n+    void check(String dir, String... fileNames) throws IOException {\n@@ -79,1 +71,1 @@\n-            ClassFile classFileToCheck = ClassFile.read(new File(dir, fileName));\n+            ClassModel classFileToCheck = Classfile.of().parse(new File(dir, fileName).toPath());\n@@ -81,2 +73,2 @@\n-            for (Method method : classFileToCheck.methods) {\n-                if ((method.access_flags.flags & ACC_STRICT) == 0) {\n+            for (MethodModel method : classFileToCheck.methods()) {\n+                if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n@@ -84,2 +76,2 @@\n-                            method.getName(classFileToCheck.constant_pool),\n-                            classFileToCheck.getName()));\n+                            method.methodName().stringValue(),\n+                            classFileToCheck.thisClass().asInternalName()));\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/CheckACC_STRICTFlagOnDefaultMethodTest.java","additions":17,"deletions":25,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -31,9 +36,4 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-\n-import com.sun.tools.classfile.Opcode;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -70,6 +70,6 @@\n-            ClassFile cf = ClassFile.read(f);\n-            Method testMethod = null;\n-            Code_attribute codeAttr = null;\n-            for (Method m : cf.methods) {\n-                codeAttr = (Code_attribute)m.attributes.get(Attribute.Code);\n-                String mname = m.getName(cf.constant_pool);\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            MethodModel testMethod = null;\n+            CodeAttribute codeAttr = null;\n+            for (MethodModel m : cf.methods()) {\n+                codeAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+                String mname = m.methodName().stringValue();\n@@ -86,1 +86,1 @@\n-            if (testMethod.access_flags.is(AccessFlags.ACC_ABSTRACT)) {\n+            if ((testMethod.flags().flagsMask() & Classfile.ACC_ABSTRACT) != 0) {\n@@ -94,2 +94,2 @@\n-            for (Instruction instr : codeAttr.getInstructions()) {\n-                if (instr.getOpcode() == Opcode.INVOKESTATIC) {\n+            for (CodeElement instr : codeAttr.elementList()) {\n+                if (instr instanceof InvokeInstruction ins && ins.opcode() == Opcode.INVOKESTATIC) {\n@@ -97,5 +97,4 @@\n-                    int pc_index = instr.getShort(1);\n-                    CONSTANT_Methodref_info mref = (CONSTANT_Methodref_info)cf.constant_pool.get(pc_index);\n-                    String className = mref.getClassName();\n-                    String targetName = mref.getNameAndTypeInfo().getName();\n-                    String targetType = mref.getNameAndTypeInfo().getType();\n+                    MemberRefEntry mref = ins.method();\n+                    String className = mref.owner().asInternalName();\n+                    String targetName = mref.name().stringValue();\n+                    String targetType = mref.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestDefaultBody.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -31,3 +36,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n@@ -74,3 +77,3 @@\n-            ClassFile cf = ClassFile.read(f);\n-            for (Method m : cf.methods) {\n-                String mname = m.getName(cf.constant_pool);\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            for (MethodModel m : cf.methods()) {\n+                String mname = m.methodName().stringValue();\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestNoBridgeOnDefaults.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,7 +39,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.CPRefInfo;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Opcode;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -89,8 +91,7 @@\n-            final ClassFile cf = ClassFile.read(file);\n-            for (Method m : cf.methods) {\n-                Code_attribute codeAttr = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Instruction instr : codeAttr.getInstructions()) {\n-                    if (instr.getOpcode() == Opcode.INVOKESPECIAL) {\n-                        int pc_index = instr.getShort(1);\n-                        CPRefInfo ref = (CPRefInfo)cf.constant_pool.get(pc_index);\n-                        String className = ref.getClassName();\n+            final ClassModel cf = Classfile.of().parse(file.toPath());\n+            for (MethodModel m : cf.methods()) {\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement ce : codeAttr.elementList()) {\n+                    if (ce instanceof InvokeInstruction instr && instr.opcode() == Opcode.INVOKESPECIAL) {\n+                        MemberRefEntry ref = instr.method();\n+                        String className = ref.owner().asInternalName();\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/super\/TestDirectSuperInterfaceInvoke.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,1 +42,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -493,4 +499,4 @@\n-            ClassFile cf = ClassFile.read(in);\n-            for (ConstantPool.CPInfo cpinfo: cf.constant_pool.entries()) {\n-                if (cpinfo.getTag() == ConstantPool.CONSTANT_Utf8) {\n-                    String v = ((ConstantPool.CONSTANT_Utf8_info) cpinfo).value;\n+            ClassModel cm = Classfile.of().parse(in.readAllBytes());\n+            for (int i = 1; i < cm.constantPool().entryCount(); ++i) {\n+                if (cm.constantPool().entryByIndex(i) instanceof Utf8Entry entry) {\n+                    String v = entry.stringValue();\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -300,2 +300,6 @@\n-                    pOpts.add(\"--add-modules=jdk.jdeps\");\n-                    pOpts.add(\"--add-exports=jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.components=ALL-UNNAMED\");\n+                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\");\n","filename":"test\/langtools\/tools\/javac\/diags\/Example.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\n+\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadConstantValueType\/BadConstantValueType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n@@ -30,0 +34,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -31,4 +36,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.ConstantValueAttribute;\n@@ -43,9 +46,10 @@\n-            ConstantPool cp = new ConstantPool(new CPInfo[] {\n-                new CONSTANT_Utf8_info(\"\"),                     \/\/0\n-                new CONSTANT_Utf8_info(\"Test\"),                 \/\/1\n-                new CONSTANT_Class_info(null, 1),               \/\/2\n-                new CONSTANT_Utf8_info(\"java\/lang\/Object\"),     \/\/3\n-                new CONSTANT_Class_info(null, 3),               \/\/4\n-                new CONSTANT_Utf8_info(\"test\"),                 \/\/5\n-                new CONSTANT_Utf8_info(\"Ljava\/lang\/Object;\"),   \/\/6\n-                new CONSTANT_Utf8_info(\"ConstantValue\"),        \/\/7\n+            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), cb -> {\n+                cb.withSuperclass(ConstantDescs.CD_Object);\n+                cb.withVersion(51, 0);\n+                cb.withFlags(AccessFlag.ABSTRACT ,\n+                        AccessFlag.INTERFACE ,\n+                        AccessFlag.PUBLIC);\n+                cb.withField(\"test\", ConstantDescs.CD_Object, fieldBuilder -> {\n+                    fieldBuilder.withFlags(AccessFlag.PUBLIC, AccessFlag.STATIC, AccessFlag.FINAL);\n+                    fieldBuilder.with(ConstantValueAttribute.of(\"ConstantValue\"));\n+                });\n@@ -53,22 +57,0 @@\n-            ClassFile cf = new ClassFile(0xCAFEBABE,\n-                          0,\n-                          51,\n-                          cp,\n-                          new AccessFlags(AccessFlags.ACC_ABSTRACT |\n-                                          AccessFlags.ACC_INTERFACE |\n-                                          AccessFlags.ACC_PUBLIC),\n-                          2,\n-                          4,\n-                          new int[0],\n-                          new Field[] {\n-                              new Field(new AccessFlags(AccessFlags.ACC_PUBLIC |\n-                                                        AccessFlags.ACC_STATIC |\n-                                                        AccessFlags.ACC_FINAL),\n-                                        5,\n-                                      new Descriptor(6),\n-                                      new Attributes(cp, new Attribute[] {\n-                                          new ConstantValue_attribute(7, 6)\n-                                      }))\n-                          },\n-                          new Method[0],\n-                          new Attributes(cp, new Attribute[0]));\n@@ -78,1 +60,1 @@\n-                    new ClassWriter().write(cf, out);\n+                    out.write(bytes);\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadConstantValueType\/processors\/CreateBadClassFile.java","additions":18,"deletions":36,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\n+\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidDefaultInterface\/InvalidDefaultInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n@@ -30,0 +33,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -31,4 +35,1 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n+import jdk.internal.classfile.Classfile;\n@@ -41,28 +42,8 @@\n-            ConstantPool cp = new ConstantPool(new CPInfo[] {\n-                new CONSTANT_Utf8_info(\"\"),                     \/\/0\n-                new CONSTANT_Utf8_info(\"Test\"),                 \/\/1\n-                new CONSTANT_Class_info(null, 1),               \/\/2\n-                new CONSTANT_Utf8_info(\"java\/lang\/Object\"),     \/\/3\n-                new CONSTANT_Class_info(null, 3),               \/\/4\n-                new CONSTANT_Utf8_info(\"test\"),                 \/\/5\n-                new CONSTANT_Utf8_info(\"()V\"),                  \/\/6\n-            });\n-            ClassFile cf = new ClassFile(0xCAFEBABE,\n-                          0,\n-                          51,\n-                          cp,\n-                          new AccessFlags(AccessFlags.ACC_ABSTRACT |\n-                                          AccessFlags.ACC_INTERFACE |\n-                                          AccessFlags.ACC_PUBLIC),\n-                          2,\n-                          4,\n-                          new int[0],\n-                          new Field[0],\n-                          new Method[] {\n-                              \/\/creating non-abstract method in 51.0 classfile:\n-                              new Method(new AccessFlags(AccessFlags.ACC_PUBLIC),\n-                                         5,\n-                                         new Descriptor(6),\n-                                         new Attributes(cp, new Attribute[0]))\n-                          },\n-                          new Attributes(cp, new Attribute[0]));\n+            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n+                classBuilder.withVersion(51, 0);\n+                classBuilder.withFlags(AccessFlag.ABSTRACT ,\n+                                          AccessFlag.INTERFACE ,\n+                                          AccessFlag.PUBLIC);\n+                classBuilder.withMethod(\"test\", MethodTypeDesc.of(ConstantDescs.CD_void), Classfile.ACC_PUBLIC, methodBuilder -> {\n+                    methodBuilder.withFlags(AccessFlag.PUBLIC);});\n+                });\n@@ -72,1 +53,1 @@\n-                    new ClassWriter().write(cf, out);\n+                    out.write(bytes);\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidDefaultInterface\/processors\/CreateBadClassFile.java","additions":14,"deletions":33,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\n+\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidStaticInterface\/InvalidStaticInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n@@ -31,4 +34,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n+import java.lang.reflect.AccessFlag;\n+import jdk.internal.classfile.Classfile;\n@@ -41,8 +42,12 @@\n-            ConstantPool cp = new ConstantPool(new CPInfo[] {\n-                new CONSTANT_Utf8_info(\"\"),                     \/\/0\n-                new CONSTANT_Utf8_info(\"Test\"),                 \/\/1\n-                new CONSTANT_Class_info(null, 1),               \/\/2\n-                new CONSTANT_Utf8_info(\"java\/lang\/Object\"),     \/\/3\n-                new CONSTANT_Class_info(null, 3),               \/\/4\n-                new CONSTANT_Utf8_info(\"test\"),                 \/\/5\n-                new CONSTANT_Utf8_info(\"()V\"),                  \/\/6\n+            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n+                classBuilder.withVersion(51, 0);\n+                classBuilder.withFlags(AccessFlag.ABSTRACT,\n+                            AccessFlag.INTERFACE,\n+                            AccessFlag.PUBLIC);\n+                classBuilder.withSuperclass(ConstantDescs.CD_Object);\n+                classBuilder.withMethod(\"test\", ConstantDescs.MTD_void,\n+                        Classfile.ACC_PUBLIC | Classfile.ACC_STATIC, methodBuilder -> {\n+                            methodBuilder.withCode(xb -> {\n+                                xb.return_();\n+                            });\n+                });\n@@ -50,20 +55,0 @@\n-            ClassFile cf = new ClassFile(0xCAFEBABE,\n-                          0,\n-                          51,\n-                          cp,\n-                          new AccessFlags(AccessFlags.ACC_ABSTRACT |\n-                                          AccessFlags.ACC_INTERFACE |\n-                                          AccessFlags.ACC_PUBLIC),\n-                          2,\n-                          4,\n-                          new int[0],\n-                          new Field[0],\n-                          new Method[] {\n-                              \/\/creating static method in 51.0 classfile:\n-                              new Method(new AccessFlags(AccessFlags.ACC_PUBLIC |\n-                                                         AccessFlags.ACC_STATIC),\n-                                         5,\n-                                         new Descriptor(6),\n-                                         new Attributes(cp, new Attribute[0]))\n-                          },\n-                          new Attributes(cp, new Attribute[0]));\n@@ -73,1 +58,1 @@\n-                    new ClassWriter().write(cf, out);\n+                    out.write(bytes);\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidStaticInterface\/processors\/CreateBadClassFile.java","additions":18,"deletions":33,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,7 +43,5 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.CPRefInfo;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Opcode;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -63,10 +66,9 @@\n-            final ClassFile cf = ClassFile.read(clazz);\n-            for (Method m : cf.methods) {\n-                Code_attribute codeAttr = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Instruction instr : codeAttr.getInstructions()) {\n-                    if (instr.getOpcode() == Opcode.INVOKESPECIAL ||\n-                        instr.getOpcode() == Opcode.INVOKEVIRTUAL) {\n-                        int pc_index = instr.getShort(1);\n-                        CPRefInfo ref = (CPRefInfo)cf.constant_pool.get(pc_index);\n-                        String className = ref.getClassName();\n-                        String methodName = ref.getNameAndTypeInfo().getName();\n+            final ClassModel cf = Classfile.of().parse(clazz.toPath());\n+            for (MethodModel m : cf.methods()) {\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (CodeElement ce : codeAttr.elementList()) {\n+                    if (ce instanceof InvokeInstruction instr && (instr.opcode() == Opcode.INVOKESPECIAL ||\n+                        instr.opcode() == Opcode.INVOKEVIRTUAL)) {\n+                        MemberRefEntry ref = instr.method();\n+                        String className = ref.owner().asInternalName();\n+                        String methodName = ref.name().stringValue();\n@@ -84,6 +86,4 @@\n-                    if (instr.getOpcode() == Opcode.GETFIELD ||\n-                        instr.getOpcode() == Opcode.PUTFIELD) {\n-                        int pc_index = instr.getShort(1);\n-                        CPRefInfo ref = (CPRefInfo)cf.constant_pool.get(pc_index);\n-                        String className = ref.getClassName();\n-                        String fieldName = ref.getNameAndTypeInfo().getName();\n+                    if (ce instanceof FieldInstruction instr && (instr.opcode() == Opcode.GETFIELD ||\n+                        instr.opcode() == Opcode.PUTFIELD)) {\n+                        String className = instr.owner().asInternalName();\n+                        String fieldName = instr.field().name().stringValue();\n","filename":"test\/langtools\/tools\/javac\/expression\/_super\/NonDirectSuper\/NonDirectSuper.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkArchiveTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkShortNameTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,3 +48,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.SourceFile_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n@@ -97,3 +101,3 @@\n-        ClassFile cf = ClassFile.read(classes.resolve(\"HelloWorld.class\"));\n-        SourceFile_attribute sf = (SourceFile_attribute) cf.attributes.get(Attribute.SourceFile);\n-        String sourceFile = sf.getSourceFile(cf.constant_pool);\n+        ClassModel cf = Classfile.of().parse(classes.resolve(\"HelloWorld.class\"));\n+        SourceFileAttribute sf = cf.findAttribute(Attributes.SOURCE_FILE).orElseThrow();\n+        String sourceFile = sf.sourceFile().stringValue();\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -57,10 +62,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool.UnexpectedEntry;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.LocalVariableTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -69,1 +66,0 @@\n-import static com.sun.tools.classfile.LocalVariableTable_attribute.Entry;\n@@ -82,1 +78,1 @@\n-            fm.setLocation(SOURCE_PATH, Arrays.asList(new File(testDir, \"tests\")));\n+            fm.setLocation(SOURCE_PATH, List.of(new File(testDir, \"tests\")));\n@@ -85,1 +81,1 @@\n-            fm.setLocation(CLASS_OUTPUT, Arrays.asList(new File(\".\")));\n+            fm.setLocation(CLASS_OUTPUT, List.of(new File(\".\")));\n@@ -132,4 +128,2 @@\n-    void checkClassFile(File file)\n-            throws IOException, ConstantPoolException, InvalidDescriptor {\n-        ClassFile classFile = ClassFile.read(file);\n-        ConstantPool constantPool = classFile.constant_pool;\n+    void checkClassFile(File file) throws IOException {\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n@@ -138,1 +132,1 @@\n-        for (Method method : classFile.methods) {\n+        for (MethodModel method : classFile.methods()) {\n@@ -140,2 +134,2 @@\n-                String methodDesc = method.getName(constantPool) +\n-                        method.descriptor.getParameterTypes(constantPool).replace(\" \", \"\");\n+                String methodDesc = method.methodName().stringValue() +\n+                        parse(method.methodTypeSymbol().descriptorString()).replace(\" \", \"\");\n@@ -143,1 +137,1 @@\n-                    checkMethod(constantPool, method, aliveRangeMap.get(elementKey));\n+                    checkMethod(method, aliveRangeMap.get(elementKey));\n@@ -150,5 +144,3 @@\n-    void checkMethod(ConstantPool constantPool, Method method, AliveRanges ranges)\n-            throws InvalidIndex, UnexpectedEntry, ConstantPoolException {\n-        Code_attribute code = (Code_attribute) method.attributes.get(Attribute.Code);\n-        LocalVariableTable_attribute lvt =\n-            (LocalVariableTable_attribute) (code.attributes.get(Attribute.LocalVariableTable));\n+    void checkMethod(MethodModel method, AliveRanges ranges) {\n+        CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElseThrow();\n@@ -156,1 +148,1 @@\n-        List<String> infoFromLVT = convertToStringList(constantPool, lvt);\n+        List<String> infoFromLVT = convertToStringList(lvt);\n@@ -173,1 +165,1 @@\n-            error(infoFromLVT, infoFromRanges, method.getName(constantPool).toString());\n+            error(infoFromLVT, infoFromRanges, method.methodName().stringValue());\n@@ -189,2 +181,1 @@\n-    List<String> convertToStringList(ConstantPool constantPool,\n-            LocalVariableTable_attribute lvt) throws InvalidIndex, UnexpectedEntry {\n+    List<String> convertToStringList(LocalVariableTableAttribute lvt) {\n@@ -192,3 +183,3 @@\n-        for (Entry entry : lvt.local_variable_table) {\n-            String str = formatLocalVariableData(constantPool.getUTF8Value(entry.name_index),\n-                    entry.start_pc, entry.length);\n+        for (LocalVariableInfo entry : lvt.localVariables()) {\n+            String str = formatLocalVariableData(entry.name().stringValue(),\n+                    entry.startPc(), entry.length());\n@@ -295,0 +286,52 @@\n+    private String parse(String desc) {\n+        int end = desc.indexOf(\")\");\n+        if (end == -1)\n+            throw new AssertionError();\n+        end ++;\n+        int p = 0;\n+        StringBuilder sb = new StringBuilder();\n+        int dims = 0;\n+\n+        while (p < end) {\n+            String type;\n+            switch (desc.charAt(p++)) {\n+                case '(' -> {\n+                    sb.append('(');\n+                    continue;\n+                }\n+                case ')' -> {\n+                    sb.append(')');\n+                    continue;\n+                }\n+                case '[' -> {\n+                    dims++;\n+                    continue;\n+                }\n+                case 'B' -> type = \"byte\";\n+                case 'C' -> type = \"char\";\n+                case 'D' -> type = \"double\";\n+                case 'F' -> type = \"float\";\n+                case 'I' -> type = \"int\";\n+                case 'J' -> type = \"long\";\n+                case 'L' -> {\n+                    int sep = desc.indexOf(';', p);\n+                    if (sep == -1)\n+                        throw new AssertionError();\n+                    type = desc.substring(p, sep).replace('\/', '.');\n+                    p = sep + 1;\n+                }\n+                case 'S' -> type = \"short\";\n+                case 'Z' -> type = \"boolean\";\n+                case 'V' -> type = \"void\";\n+                default -> throw new AssertionError();\n+            }\n+\n+            if (sb.length() > 1 && sb.charAt(0) == '(')\n+                sb.append(\", \");\n+            sb.append(type);\n+            for ( ; dims > 0; dims-- )\n+                sb.append(\"[]\");\n+        }\n+        return sb.toString();\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/flow\/LVTHarness.java","additions":77,"deletions":34,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,5 +42,1 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n@@ -114,2 +115,2 @@\n-    static String descriptor(Method m, ConstantPool cp) throws ConstantPoolException {\n-        return m.getName(cp) + m.descriptor.getValue(cp);\n+    static String descriptor(MethodModel m) {\n+        return m.methodName() + m.methodTypeSymbol().descriptorString();\n@@ -149,2 +150,2 @@\n-            ClassFile cf = ClassFile.read(is);\n-            System.err.println(\"checking: \" + cf.getName());\n+            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            System.err.println(\"checking: \" + cf.thisClass().asInternalName());\n@@ -152,1 +153,1 @@\n-            List<Bridge> bridgeList = bridgesMap.get(cf.getName());\n+            List<Bridge> bridgeList = bridgesMap.get(cf.thisClass().asInternalName());\n@@ -158,2 +159,2 @@\n-            for (Method m : cf.methods) {\n-                if (m.access_flags.is(AccessFlags.ACC_SYNTHETIC | AccessFlags.ACC_BRIDGE)) {\n+            for (MethodModel m : cf.methods()) {\n+                if ((m.flags().flagsMask() & (Classfile.ACC_SYNTHETIC | Classfile.ACC_BRIDGE)) != 0) {\n@@ -163,1 +164,1 @@\n-                        if (b.value().equals(descriptor(m, cf.constant_pool))) {\n+                        if (b.value().equals(descriptor(m))) {\n@@ -169,1 +170,1 @@\n-                        error(\"No annotation for bridge method: \" + descriptor(m, cf.constant_pool));\n+                        error(\"No annotation for bridge method: \" + descriptor(m));\n","filename":"test\/langtools\/tools\/javac\/generics\/bridges\/BridgeHarness.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -41,0 +46,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -58,11 +64,1 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n@@ -109,6 +105,4 @@\n-        ConstantPool cp = new ConstantPool(new CPInfo[] {\n-            new CONSTANT_Utf8_info(\"\"),                     \/\/0\n-            new CONSTANT_Utf8_info(name.replace(\".\", \"\/\")), \/\/1\n-            new CONSTANT_Class_info(null, 1),               \/\/2\n-            new CONSTANT_Utf8_info(\"java\/lang\/Object\"),     \/\/3\n-            new CONSTANT_Class_info(null, 3),               \/\/4\n+        byte[] bytes = Classfile.of().build(ClassDesc.of(name), classBuilder -> {\n+            classBuilder.withSuperclass(ClassDesc.ofInternalName(\"java\/lang\/Object\"))\n+                    .withVersion(51, 0)\n+                    .withFlags(Classfile.ACC_ABSTRACT | Classfile.ACC_INTERFACE | Classfile.ACC_PUBLIC);\n@@ -116,13 +110,0 @@\n-        ClassFile cf = new ClassFile(0xCAFEBABE,\n-                      0,\n-                      51,\n-                      cp,\n-                      new AccessFlags(AccessFlags.ACC_ABSTRACT |\n-                                      AccessFlags.ACC_INTERFACE |\n-                                      AccessFlags.ACC_PUBLIC),\n-                      2,\n-                      4,\n-                      new int[0],\n-                      new Field[0],\n-                      new Method[0],\n-                      new Attributes(cp, new Attribute[0]));\n@@ -130,1 +111,1 @@\n-        new ClassWriter().write(cf, baos);\n+        baos.write(bytes);\n","filename":"test\/langtools\/tools\/javac\/importscope\/T8193717.java","additions":13,"deletions":32,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -35,2 +39,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -40,3 +44,3 @@\n-        ClassFile cls = ClassFile.read(ClassRefDupInConstantPoolTest.class.\n-                                       getResourceAsStream(\"ClassRefDupInConstantPoolTest$Duplicates.class\"));\n-        ConstantPool pool = cls.constant_pool;\n+        ClassModel cls = Classfile.of().parse(ClassRefDupInConstantPoolTest.class.\n+                                       getResourceAsStream(\"ClassRefDupInConstantPoolTest$Duplicates.class\").readAllBytes());\n+        ConstantPool pool = cls.constantPool();\n@@ -45,5 +49,4 @@\n-        TreeSet<Integer> set = new TreeSet<>();\n-        for (CPInfo i : pool.entries()) {\n-            if (i.getTag() == ConstantPool.CONSTANT_Class) {\n-                CONSTANT_Class_info ci = (CONSTANT_Class_info)i;\n-                if (!set.add(ci.name_index)) {\n+        TreeSet<String> set = new TreeSet<>();\n+        for (int i = 1; i < pool.entryCount(); i += pool.entryByIndex(i).width()) {\n+            if (pool.entryByIndex(i) instanceof ClassEntry ce) {\n+                if (!set.add(ce.asInternalName())) {\n@@ -51,1 +54,1 @@\n-                    System.out.println(\"DUPLICATE CLASS REF \" + ci.getName());\n+                    System.out.println(\"DUPLICATE CLASS REF \" + ce.asInternalName());\n","filename":"test\/langtools\/tools\/javac\/jvm\/ClassRefDupInConstantPoolTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,6 +38,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.ConstantPool.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.constantpool.*;\n@@ -45,0 +47,1 @@\n+import java.lang.invoke.MethodHandleInfo;\n@@ -76,1 +79,1 @@\n-        ClassFile c = null;\n+        ClassModel c = null;\n@@ -78,2 +81,2 @@\n-            c = ClassFile.read(classFile);\n-        } catch (IOException | ConstantPoolException e) {\n+            c = Classfile.of().parse(classFile.toPath());\n+        } catch (IOException e) {\n@@ -82,1 +85,2 @@\n-        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constant_pool.size());\n+        assert c != null;\n+        ConstantPoolVisitor cpv = new ConstantPoolVisitor(c, c.constantPool().entryCount());\n@@ -381,1 +385,1 @@\n-    static class ConstantPoolVisitor implements ConstantPool.Visitor<String, Integer> {\n+    static class ConstantPoolVisitor {\n@@ -383,1 +387,1 @@\n-        final ClassFile cf;\n+        final ClassModel cf;\n@@ -388,1 +392,1 @@\n-        public ConstantPoolVisitor(ClassFile cf, int size) {\n+        public ConstantPoolVisitor(ClassModel cf, int size) {\n@@ -394,1 +398,1 @@\n-            this.cfpool = cf.constant_pool;\n+            this.cfpool = cf.constantPool();\n@@ -402,2 +406,21 @@\n-        public String visit(CPInfo c, int index) {\n-            return c.accept(this, index);\n+        public String visit(PoolEntry c, int index) {\n+            return switch (c) {\n+                case ClassEntry entry -> visitClass(entry, index);\n+                case DoubleEntry entry -> visitDouble(entry, index);\n+                case FieldRefEntry entry -> visitFieldref(entry, index);\n+                case FloatEntry entry -> visitFloat(entry, index);\n+                case IntegerEntry entry -> visitInteger(entry, index);\n+                case InterfaceMethodRefEntry entry -> visitInterfaceMethodref(entry, index);\n+                case InvokeDynamicEntry entry -> visitInvokeDynamic(entry, index);\n+                case ConstantDynamicEntry entry -> visitDynamicConstant(entry, index);\n+                case LongEntry entry -> visitLong(entry, index);\n+                case NameAndTypeEntry entry -> visitNameAndType(entry, index);\n+                case MethodRefEntry entry -> visitMethodref(entry, index);\n+                case MethodHandleEntry entry -> visitMethodHandle(entry, index);\n+                case MethodTypeEntry entry -> visitMethodType(entry, index);\n+                case ModuleEntry entry -> visitModule(entry, index);\n+                case PackageEntry entry -> visitPackage(entry, index);\n+                case StringEntry entry -> visitString(entry, index);\n+                case Utf8Entry entry -> visitUtf8(entry, index);\n+                default -> throw new AssertionError();\n+            };\n@@ -407,2 +430,1 @@\n-            BootstrapMethods_attribute bsmAttr =\n-                    (BootstrapMethods_attribute) cf.getAttribute(Attribute.BootstrapMethods);\n+            BootstrapMethodsAttribute bsmAttr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElse(null);\n@@ -411,4 +433,3 @@\n-                        new HashMap<>(bsmAttr.bootstrap_method_specifiers.length);\n-                for (BootstrapMethods_attribute.BootstrapMethodSpecifier bsms :\n-                        bsmAttr.bootstrap_method_specifiers) {\n-                    int index = bsms.bootstrap_method_ref;\n+                        new HashMap<>(bsmAttr.bootstrapMethodsSize());\n+                for (BootstrapMethodEntry bsms : bsmAttr.bootstrapMethods()) {\n+                    int index = bsms.bootstrapMethod().index();\n@@ -418,1 +439,1 @@\n-                            value = visit(cfpool.get(index), index);\n+                            value = visit(cfpool.entryByIndex(index), index);\n@@ -424,1 +445,2 @@\n-                        for (int idx : bsms.bootstrap_arguments) {\n+                        for (LoadableConstantEntry ce : bsms.arguments()) {\n+                            int idx = ce.index();\n@@ -427,1 +449,1 @@\n-                                value = visit(cfpool.get(idx), idx);\n+                                value = visit(cfpool.entryByIndex(idx), idx);\n@@ -434,1 +456,1 @@\n-                    } catch (InvalidIndex ex) {\n+                    } catch (ConstantPoolException ex) {\n@@ -443,2 +465,1 @@\n-        @Override\n-        public String visitClass(CONSTANT_Class_info c, Integer p) {\n+        public String visitClass(ClassEntry c, Integer p) {\n@@ -449,1 +470,1 @@\n-                    value = visit(cfpool.get(c.name_index), c.name_index);\n+                    value = visit(cfpool.entryByIndex(c.name().index()), c.index());\n@@ -458,2 +479,1 @@\n-        @Override\n-        public String visitDouble(CONSTANT_Double_info c, Integer p) {\n+        public String visitDouble(DoubleEntry c, Integer p) {\n@@ -463,1 +483,1 @@\n-                value = Double.toString(c.value);\n+                value = Double.toString(c.doubleValue());\n@@ -469,2 +489,1 @@\n-        @Override\n-        public String visitFieldref(CONSTANT_Fieldref_info c, Integer p) {\n+        public String visitFieldref(FieldRefEntry c, Integer p) {\n@@ -475,3 +494,3 @@\n-                    value = visit(cfpool.get(c.class_index), c.class_index);\n-                    value = value.concat(\" \" + visit(cfpool.get(c.name_and_type_index),\n-                                         c.name_and_type_index));\n+                    value = visit(cfpool.entryByIndex(c.owner().index()), c.owner().index());\n+                    value = value.concat(\" \" + visit(cfpool.entryByIndex(c.nameAndType().index()),\n+                                         c.nameAndType().index()));\n@@ -486,2 +505,1 @@\n-        @Override\n-        public String visitFloat(CONSTANT_Float_info c, Integer p) {\n+        public String visitFloat(FloatEntry c, Integer p) {\n@@ -491,1 +509,1 @@\n-                value = Float.toString(c.value);\n+                value = Float.toString(c.floatValue());\n@@ -497,2 +515,1 @@\n-        @Override\n-        public String visitInteger(CONSTANT_Integer_info cnstnt, Integer p) {\n+        public String visitInteger(IntegerEntry cnstnt, Integer p) {\n@@ -502,1 +519,1 @@\n-                value = Integer.toString(cnstnt.value);\n+                value = Integer.toString(cnstnt.intValue());\n@@ -508,2 +525,1 @@\n-        @Override\n-        public String visitInterfaceMethodref(CONSTANT_InterfaceMethodref_info c,\n+        public String visitInterfaceMethodref(InterfaceMethodRefEntry c,\n@@ -515,1 +531,1 @@\n-                    value = visit(cfpool.get(c.class_index), c.class_index);\n+                    value = visit(cfpool.entryByIndex(c.owner().index()), c.owner().index());\n@@ -517,2 +533,2 @@\n-                                         visit(cfpool.get(c.name_and_type_index),\n-                                         c.name_and_type_index));\n+                                         visit(cfpool.entryByIndex(c.nameAndType().index()),\n+                                         c.nameAndType().index()));\n@@ -527,2 +543,1 @@\n-        @Override\n-        public String visitInvokeDynamic(CONSTANT_InvokeDynamic_info c, Integer p) {\n+        public String visitInvokeDynamic(InvokeDynamicEntry c, Integer p) {\n@@ -533,2 +548,2 @@\n-                    value = bsmMap.get(c.bootstrap_method_attr_index) + \" \"\n-                            + visit(cfpool.get(c.name_and_type_index), c.name_and_type_index);\n+                    value = bsmMap.get(c.bootstrap().bsmIndex()) + \" \"\n+                            + visit(cfpool.entryByIndex(c.nameAndType().index()), c.nameAndType().index());\n@@ -543,2 +558,1 @@\n-        @Override\n-        public String visitDynamicConstant(CONSTANT_Dynamic_info c, Integer p) {\n+        public String visitDynamicConstant(ConstantDynamicEntry c, Integer p) {\n@@ -549,2 +563,2 @@\n-                    value = bsmMap.get(c.bootstrap_method_attr_index) + \" \"\n-                            + visit(cfpool.get(c.name_and_type_index), c.name_and_type_index);\n+                    value = bsmMap.get(c.bootstrap().bsmIndex()) + \" \"\n+                            + visit(cfpool.entryByIndex(c.nameAndType().index()), c.nameAndType().index());\n@@ -559,2 +573,1 @@\n-        @Override\n-        public String visitLong(CONSTANT_Long_info c, Integer p) {\n+        public String visitLong(LongEntry c, Integer p) {\n@@ -564,1 +577,1 @@\n-                value = Long.toString(c.value);\n+                value = Long.toString(c.longValue());\n@@ -570,2 +583,1 @@\n-        @Override\n-        public String visitNameAndType(CONSTANT_NameAndType_info c, Integer p) {\n+        public String visitNameAndType(NameAndTypeEntry c, Integer p) {\n@@ -576,1 +588,1 @@\n-                    value = visit(cfpool.get(c.name_index), c.name_index);\n+                    value = visit(cfpool.entryByIndex(c.name().index()), c.name().index());\n@@ -578,1 +590,1 @@\n-                            visit(cfpool.get(c.type_index), c.type_index));\n+                            visit(cfpool.entryByIndex(c.type().index()), c.type().index()));\n@@ -580,1 +592,1 @@\n-                } catch (InvalidIndex ex) {\n+                } catch (ConstantPoolException ex) {\n@@ -587,2 +599,1 @@\n-        @Override\n-        public String visitMethodref(CONSTANT_Methodref_info c, Integer p) {\n+        public String visitMethodref(MethodRefEntry c, Integer p) {\n@@ -593,1 +604,1 @@\n-                    value = visit(cfpool.get(c.class_index), c.class_index);\n+                    value = visit(cfpool.entryByIndex(c.owner().index()), c.owner().index());\n@@ -595,2 +606,2 @@\n-                                         visit(cfpool.get(c.name_and_type_index),\n-                                         c.name_and_type_index));\n+                                         visit(cfpool.entryByIndex(c.nameAndType().index()),\n+                                         c.nameAndType().index()));\n@@ -605,2 +616,1 @@\n-        @Override\n-        public String visitMethodHandle(CONSTANT_MethodHandle_info c, Integer p) {\n+        public String visitMethodHandle(MethodHandleEntry c, Integer p) {\n@@ -611,1 +621,1 @@\n-                    value = c.reference_kind.name();\n+                    value = MethodHandleInfo.referenceKindToString(c.kind());\n@@ -613,1 +623,1 @@\n-                            + visit(cfpool.get(c.reference_index), c.reference_index));\n+                            + visit(cfpool.entryByIndex(c.reference().index()), c.reference().index()));\n@@ -622,2 +632,1 @@\n-        @Override\n-        public String visitMethodType(CONSTANT_MethodType_info c, Integer p) {\n+        public String visitMethodType(MethodTypeEntry c, Integer p) {\n@@ -628,1 +637,1 @@\n-                    value = visit(cfpool.get(c.descriptor_index), c.descriptor_index);\n+                    value = visit(cfpool.entryByIndex(c.descriptor().index()), c.descriptor().index());\n@@ -637,2 +646,1 @@\n-        @Override\n-        public String visitModule(CONSTANT_Module_info c, Integer p) {\n+        public String visitModule(ModuleEntry c, Integer p) {\n@@ -643,1 +651,1 @@\n-                    value = visit(cfpool.get(c.name_index), c.name_index);\n+                    value = visit(cfpool.entryByIndex(c.name().index()), c.name().index());\n@@ -652,2 +660,1 @@\n-        @Override\n-        public String visitPackage(CONSTANT_Package_info c, Integer p) {\n+        public String visitPackage(PackageEntry c, Integer p) {\n@@ -658,1 +665,1 @@\n-                    value = visit(cfpool.get(c.name_index), c.name_index);\n+                    value = visit(cfpool.entryByIndex(c.name().index()), c.name().index());\n@@ -667,2 +674,1 @@\n-        @Override\n-        public String visitString(CONSTANT_String_info c, Integer p) {\n+        public String visitString(StringEntry c, Integer p) {\n@@ -673,1 +679,1 @@\n-                    value = c.getString();\n+                    value = c.stringValue();\n@@ -682,2 +688,1 @@\n-        @Override\n-        public String  visitUtf8(CONSTANT_Utf8_info cnstnt, Integer p) {\n+        public String  visitUtf8(Utf8Entry cnstnt, Integer p) {\n@@ -687,1 +692,1 @@\n-                value = cnstnt.value;\n+                value = cnstnt.stringValue();\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":94,"deletions":89,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,1 +41,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -45,1 +51,1 @@\n- * LocalVariableTable entry: it is assumed that if a entry is present, it\n+ * LocalVariableTable entry: it is assumed that if an entry is present, it\n@@ -50,1 +56,1 @@\n- * that will mapped into a lambda method, and because the test is compiled\n+ * that will map into a lambda method, and because the test is compiled\n@@ -84,2 +90,2 @@\n-        ClassFile cf = ClassFile.read(getClass().getResource(c.getName() + \".class\").openStream());\n-        Method m = getLambdaMethod(cf);\n+        ClassModel cm = Classfile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\")).openStream().readAllBytes());\n+        MethodModel m = getLambdaMethod(cm);\n@@ -91,1 +97,1 @@\n-        Code_attribute code = (Code_attribute) m.attributes.get(Attribute.Code);\n+        CodeAttribute code = m.findAttribute(Attributes.CODE).orElse(null);\n@@ -97,2 +103,1 @@\n-        LocalVariableTable_attribute lvt =\n-                (LocalVariableTable_attribute) code.attributes.get(Attribute.LocalVariableTable);\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null);\n@@ -105,2 +110,2 @@\n-        for (LocalVariableTable_attribute.Entry e: lvt.local_variable_table) {\n-            foundNames.add(cf.constant_pool.getUTF8Value(e.name_index));\n+        for (LocalVariableInfo e: lvt.localVariables()) {\n+            foundNames.add(e.name().stringValue());\n@@ -123,3 +128,3 @@\n-    Method getLambdaMethod(ClassFile cf) throws ConstantPoolException {\n-        for (Method m: cf.methods) {\n-            if (m.getName(cf.constant_pool).startsWith(\"lambda$\"))\n+    MethodModel getLambdaMethod(ClassModel cf) {\n+        for (MethodModel m: cf.methods()) {\n+            if (m.methodName().stringValue().startsWith(\"lambda$\"))\n","filename":"test\/langtools\/tools\/javac\/lambda\/LocalVariableTable.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -55,3 +60,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n@@ -114,5 +118,3 @@\n-            ClassFile cf = ClassFile.read(compiledTest);\n-            BootstrapMethods_attribute bsm_attr =\n-                    (BootstrapMethods_attribute)cf\n-                            .getAttribute(Attribute.BootstrapMethods);\n-            int length = bsm_attr.bootstrap_method_specifiers.length;\n+            ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            int length = bsm_attr.bootstrapMethodsSize();\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestBootstrapMethodsCount.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -44,0 +49,1 @@\n+import java.lang.invoke.MethodHandleInfo;\n@@ -53,8 +59,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -84,3 +86,3 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_String_info) &&\n-                        ((CONSTANT_String_info)cpInfo).getString()\n+            boolean check(PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof StringEntry) &&\n+                        ((StringEntry)poolEntry).stringValue()\n@@ -92,4 +94,4 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_Class_info) &&\n-                        ((CONSTANT_Class_info)cpInfo).getName()\n-                        .equals(\"java\/lang\/String\");\n+            boolean check(PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof ClassEntry) &&\n+                        ((ClassEntry)poolEntry).name()\n+                        .equalsString(\"java\/lang\/String\");\n@@ -100,4 +102,4 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_Integer_info) &&\n-                        ((CONSTANT_Integer_info)cpInfo).value ==\n-                        ((Integer)value).intValue();\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof IntegerEntry) &&\n+                        ((IntegerEntry)poolEntry).intValue() ==\n+                                (Integer) value;\n@@ -108,4 +110,4 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_Long_info) &&\n-                        ((CONSTANT_Long_info)cpInfo).value ==\n-                        ((Long)value).longValue();\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof LongEntry) &&\n+                        ((LongEntry)poolEntry).longValue() ==\n+                                (Long) value;\n@@ -116,4 +118,4 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_Float_info) &&\n-                        ((CONSTANT_Float_info)cpInfo).value ==\n-                        ((Float)value).floatValue();\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof FloatEntry) &&\n+                        ((FloatEntry)poolEntry).floatValue() ==\n+                                (Float) value;\n@@ -124,4 +126,4 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_Double_info) &&\n-                        ((CONSTANT_Double_info)cpInfo).value ==\n-                        ((Double)value).doubleValue();\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof DoubleEntry) &&\n+                        ((DoubleEntry)poolEntry).doubleValue() ==\n+                                (Double) value;\n@@ -132,2 +134,2 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                if (!(cpInfo instanceof CONSTANT_MethodHandle_info))\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                if (!(poolEntry instanceof MethodHandleEntry handleInfo))\n@@ -135,8 +137,4 @@\n-                CONSTANT_MethodHandle_info handleInfo =\n-                        (CONSTANT_MethodHandle_info)cpInfo;\n-                return handleInfo.getCPRefInfo().getClassName().equals(\"Array\") &&\n-                        handleInfo.reference_kind == RefKind.REF_invokeVirtual &&\n-                        handleInfo.getCPRefInfo()\n-                        .getNameAndTypeInfo().getName().equals(\"clone\") &&\n-                        handleInfo.getCPRefInfo()\n-                        .getNameAndTypeInfo().getType().equals(\"()Ljava\/lang\/Object;\");\n+                return handleInfo.reference().owner().name().equalsString(\"Array\") &&\n+                        handleInfo.kind() == MethodHandleInfo.REF_invokeVirtual &&\n+                        handleInfo.reference().name().equalsString(\"clone\") &&\n+                        handleInfo.reference().type().equalsString(\"()Ljava\/lang\/Object;\");\n@@ -147,4 +145,3 @@\n-            boolean check(CPInfo cpInfo) throws Exception {\n-                return (cpInfo instanceof CONSTANT_MethodType_info) &&\n-                        ((CONSTANT_MethodType_info)cpInfo).getType()\n-                        .equals(\"()Ljava\/lang\/Object;\");\n+            boolean check( PoolEntry poolEntry) throws Exception {\n+                return (poolEntry instanceof MethodTypeEntry methodTypeEntry) &&\n+                        methodTypeEntry.asSymbol().descriptorString().equals(\"()Ljava\/lang\/Object;\");\n@@ -165,1 +162,1 @@\n-        abstract boolean check(CPInfo cpInfo) throws Exception;\n+        abstract boolean check( PoolEntry poolEntry) throws Exception;\n@@ -168,20 +165,11 @@\n-            switch (this) {\n-                case STRING:\n-                    return LoadableConstant.String((String)value);\n-                case INTEGER:\n-                    return LoadableConstant.Int((Integer)value);\n-                case LONG:\n-                    return LoadableConstant.Long((Long)value);\n-                case FLOAT:\n-                    return LoadableConstant.Float((Float)value);\n-                case DOUBLE:\n-                    return LoadableConstant.Double((Double)value);\n-                case CLASS:\n-                    return (ClassType)syms.stringType;\n-                case METHOD_HANDLE:\n-                    return syms.arrayCloneMethod.asHandle();\n-                case METHOD_TYPE:\n-                    return ((MethodType)syms.arrayCloneMethod.type);\n-                default:\n-                    throw new AssertionError();\n-            }\n+            return switch (this) {\n+                case STRING -> LoadableConstant.String((String) value);\n+                case INTEGER -> LoadableConstant.Int((Integer) value);\n+                case LONG -> LoadableConstant.Long((Long) value);\n+                case FLOAT -> LoadableConstant.Float((Float) value);\n+                case DOUBLE -> LoadableConstant.Double((Double) value);\n+                case CLASS -> (ClassType) syms.stringType;\n+                case METHOD_HANDLE -> syms.arrayCloneMethod.asHandle();\n+                case METHOD_TYPE -> ((MethodType) syms.arrayCloneMethod.type);\n+                default -> throw new AssertionError();\n+            };\n@@ -272,4 +260,4 @@\n-            ClassFile cf = ClassFile.read(is);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cm = Classfile.of().parse(is.readAllBytes());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cm.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -284,3 +272,2 @@\n-            Code_attribute ea =\n-                    (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -293,7 +280,5 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokedynamic\")) {\n-                    CONSTANT_InvokeDynamic_info indyInfo =\n-                         (CONSTANT_InvokeDynamic_info)cf\n-                            .constant_pool.get(i.getShort(1));\n-                    bsmIdx = indyInfo.bootstrap_method_attr_index;\n-                    if (!indyInfo.getNameAndTypeInfo().getType().equals(\"()V\")) {\n+            for (CodeElement ce : ea.elementList()) {\n+                if (ce instanceof InvokeDynamicInstruction indy) {\n+                    InvokeDynamicEntry indyEntry = indy.invokedynamic();\n+                    bsmIdx = indyEntry.bootstrap().bsmIndex();\n+                    if (!indyEntry.type().equalsString(\"()V\")) {\n@@ -310,4 +295,3 @@\n-            BootstrapMethods_attribute bsm_attr =\n-                    (BootstrapMethods_attribute)cf\n-                    .getAttribute(Attribute.BootstrapMethods);\n-            if (bsm_attr.bootstrap_method_specifiers.length != 1) {\n+            BootstrapMethodsAttribute bsm_attr = cm\n+                    .findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            if (bsm_attr.bootstrapMethodsSize() != 1) {\n@@ -318,2 +302,2 @@\n-            BootstrapMethods_attribute.BootstrapMethodSpecifier bsm_spec =\n-                    bsm_attr.bootstrap_method_specifiers[0];\n+            BootstrapMethodEntry bsm_spec =\n+                    bsm_attr.bootstrapMethods().getFirst();\n@@ -321,1 +305,1 @@\n-            if (bsm_spec.bootstrap_arguments.length != arity.arity) {\n+            if (bsm_spec.arguments().size() != arity.arity) {\n@@ -328,2 +312,1 @@\n-                if (!saks[i].check(cf.constant_pool\n-                        .get(bsm_spec.bootstrap_arguments[i]))) {\n+                if (!saks[i].check(bsm_spec.arguments().get(i))) {\n@@ -335,3 +318,1 @@\n-            CONSTANT_MethodHandle_info bsm_handle =\n-                    (CONSTANT_MethodHandle_info)cf.constant_pool\n-                    .get(bsm_spec.bootstrap_method_ref);\n+            MethodHandleEntry bsm_handle = bsm_spec.bootstrapMethod();\n@@ -339,1 +320,1 @@\n-            if (bsm_handle.reference_kind != RefKind.REF_invokeStatic) {\n+            if (bsm_handle.kind() != MethodHandleInfo.REF_invokeStatic) {\n@@ -344,3 +325,1 @@\n-            CONSTANT_Methodref_info bsm_ref =\n-                    (CONSTANT_Methodref_info)cf.constant_pool\n-                    .get(bsm_handle.reference_index);\n+            MemberRefEntry bsm_ref =bsm_handle.reference();\n@@ -348,1 +327,1 @@\n-            if (!bsm_ref.getClassInfo().getName().equals(\"Bootstrap\")) {\n+            if (!bsm_ref.owner().name().equalsString(\"Bootstrap\")) {\n@@ -353,1 +332,1 @@\n-            if (!bsm_ref.getNameAndTypeInfo().getName().equals(\"bsm\")) {\n+            if (!bsm_ref.name().equalsString(\"bsm\")) {\n@@ -358,2 +337,1 @@\n-            if (!bsm_ref.getNameAndTypeInfo()\n-                    .getType().equals(asBSMSignatureString())) {\n+            if (!bsm_ref.type().equalsString(asBSMSignatureString())) {\n@@ -361,1 +339,1 @@\n-                        bsm_ref.getNameAndTypeInfo().getType() + \" \" +\n+                        bsm_ref.type().stringValue() + \" \" +\n@@ -366,2 +344,1 @@\n-            LineNumberTable_attribute lnt =\n-                    (LineNumberTable_attribute)ea.attributes.get(Attribute.LineNumberTable);\n+            LineNumberTableAttribute lnt = ea.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n@@ -373,1 +350,1 @@\n-            if (lnt.line_number_table_length != 3) {\n+            if (lnt.lineNumbers().size() != 3) {\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestInvokeDynamic.java","additions":82,"deletions":105,"binary":false,"changes":187,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,7 +43,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -48,0 +50,1 @@\n+import java.lang.invoke.MethodHandleInfo;\n@@ -210,4 +213,4 @@\n-            ClassFile cf = ClassFile.read(is);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -222,3 +225,2 @@\n-            Code_attribute ea =\n-                    (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -231,7 +233,5 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokedynamic\")) {\n-                    CONSTANT_InvokeDynamic_info indyInfo =\n-                         (CONSTANT_InvokeDynamic_info)cf\n-                            .constant_pool.get(i.getShort(1));\n-                    bsmIdx = indyInfo.bootstrap_method_attr_index;\n-                    if (!indyInfo.getNameAndTypeInfo().getType().equals(makeIndyType())) {\n+            for (CodeElement ce : ea.elementList()) {\n+                if (ce instanceof InvokeDynamicInstruction indy) {\n+                    InvokeDynamicEntry indyInfo = indy.invokedynamic();\n+                    bsmIdx = indyInfo.bootstrap().bsmIndex();\n+                    if (!indyInfo.type().equalsString(makeIndyType())) {\n@@ -239,1 +239,1 @@\n-                                res.compilationInfo() + \"\\n\" + indyInfo.getNameAndTypeInfo().getType() +\n+                                res.compilationInfo() + \"\\n\" + indyInfo.type().stringValue() +\n@@ -250,4 +250,2 @@\n-            BootstrapMethods_attribute bsm_attr =\n-                    (BootstrapMethods_attribute)cf\n-                    .getAttribute(Attribute.BootstrapMethods);\n-            if (bsm_attr.bootstrap_method_specifiers.length != 1) {\n+            BootstrapMethodsAttribute bsm_attr = cf.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            if (bsm_attr.bootstrapMethodsSize() != 1) {\n@@ -258,2 +256,1 @@\n-            BootstrapMethods_attribute.BootstrapMethodSpecifier bsm_spec =\n-                    bsm_attr.bootstrap_method_specifiers[0];\n+            BootstrapMethodEntry bsm_spec = bsm_attr.bootstrapMethods().get(0);\n@@ -261,1 +258,1 @@\n-            if (bsm_spec.bootstrap_arguments.length != MF_ARITY) {\n+            if (bsm_spec.arguments().size() != MF_ARITY) {\n@@ -267,2 +264,1 @@\n-            CONSTANT_MethodHandle_info mh =\n-                    (CONSTANT_MethodHandle_info)cf.constant_pool.get(bsm_spec.bootstrap_arguments[1]);\n+            MethodHandleEntry mh = (MethodHandleEntry) bsm_spec.arguments().get(1);\n@@ -270,8 +266,6 @@\n-            boolean kindOK;\n-            switch (mh.reference_kind) {\n-                case REF_invokeStatic: kindOK = mk2.isStatic(); break;\n-                case REF_invokeVirtual: kindOK = !mk2.isStatic() && !mk2.inInterface(); break;\n-                case REF_invokeInterface: kindOK = mk2.inInterface(); break;\n-                default:\n-                    kindOK = false;\n-            }\n+            boolean kindOK = switch (mh.kind()) {\n+                case MethodHandleInfo.REF_invokeStatic -> mk2.isStatic();\n+                case MethodHandleInfo.REF_invokeVirtual -> !mk2.isStatic() && !mk2.inInterface();\n+                case MethodHandleInfo.REF_invokeInterface -> mk2.inInterface();\n+                default -> false;\n+            };\n@@ -280,1 +274,1 @@\n-                fail(\"Bad invoke kind in implementation method handle: \" + mh.reference_kind);\n+                fail(\"Bad invoke kind in implementation method handle: \" + mh.kind());\n@@ -284,1 +278,1 @@\n-            if (!mh.getCPRefInfo().getNameAndTypeInfo().getType().toString().equals(MH_SIG)) {\n+            if (!mh.reference().type().equalsString(MH_SIG)) {\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecode.java","additions":36,"deletions":42,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,7 +43,5 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n@@ -54,0 +57,1 @@\n+import java.lang.invoke.MethodHandleInfo;\n@@ -211,4 +215,4 @@\n-            ClassFile cf = ClassFile.read(is);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cm = Classfile.of().parse(is.readAllBytes());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cm.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -223,3 +227,2 @@\n-            Code_attribute ea =\n-                    (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -232,7 +235,5 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokedynamic\")) {\n-                    CONSTANT_InvokeDynamic_info indyInfo =\n-                         (CONSTANT_InvokeDynamic_info)cf\n-                            .constant_pool.get(i.getShort(1));\n-                    bsmIdx = indyInfo.bootstrap_method_attr_index;\n-                    if (!indyInfo.getNameAndTypeInfo().getType().equals(makeIndyType())) {\n+            for (CodeElement ce : ea.elementList()) {\n+                if (ce instanceof InvokeDynamicInstruction indy) {\n+                    InvokeDynamicEntry indyInfo = indy.invokedynamic();\n+                    bsmIdx = indyInfo.bootstrap().bsmIndex();\n+                    if (!indyInfo.type().equalsString(makeIndyType())) {\n@@ -240,1 +241,1 @@\n-                                res.compilationInfo() + \"\\n\" + indyInfo.getNameAndTypeInfo().getType() +\n+                                res.compilationInfo() + \"\\n\" + indyInfo.type().stringValue() +\n@@ -251,4 +252,2 @@\n-            BootstrapMethods_attribute bsm_attr =\n-                    (BootstrapMethods_attribute)cf\n-                    .getAttribute(Attribute.BootstrapMethods);\n-            if (bsm_attr.bootstrap_method_specifiers.length != 1) {\n+            BootstrapMethodsAttribute bsm_attr = cm.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            if (bsm_attr.bootstrapMethodsSize() != 1) {\n@@ -259,2 +258,1 @@\n-            BootstrapMethods_attribute.BootstrapMethodSpecifier bsm_spec =\n-                    bsm_attr.bootstrap_method_specifiers[0];\n+            BootstrapMethodEntry bsm_spec = bsm_attr.bootstrapMethods().get(0);\n@@ -262,1 +260,1 @@\n-            if (bsm_spec.bootstrap_arguments.length != MF_ARITY) {\n+            if (bsm_spec.arguments().size() != MF_ARITY) {\n@@ -268,2 +266,1 @@\n-            CONSTANT_MethodHandle_info mh =\n-                    (CONSTANT_MethodHandle_info)cf.constant_pool.get(bsm_spec.bootstrap_arguments[1]);\n+            MethodHandleEntry mh = (MethodHandleEntry) bsm_spec.arguments().get(1);\n@@ -271,8 +268,6 @@\n-            boolean kindOK;\n-            switch (mh.reference_kind) {\n-                case REF_invokeStatic: kindOK = mk2.isStatic(); break;\n-                case REF_invokeSpecial: kindOK = !mk2.isStatic(); break;\n-                case REF_invokeInterface: kindOK = mk2.inInterface(); break;\n-                default:\n-                    kindOK = false;\n-            }\n+            boolean kindOK = switch (mh.kind()) {\n+                case MethodHandleInfo.REF_invokeStatic -> mk2.isStatic();\n+                case MethodHandleInfo.REF_invokeSpecial -> !mk2.isStatic();\n+                case MethodHandleInfo.REF_invokeInterface -> mk2.inInterface();\n+                default -> false;\n+            };\n@@ -285,1 +280,1 @@\n-            if (!mh.getCPRefInfo().getNameAndTypeInfo().getType().toString().equals(MH_SIG)) {\n+            if (!mh.reference().type().equalsString(MH_SIG)) {\n@@ -287,1 +282,0 @@\n-                return;\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecodeTargetRelease14.java","additions":36,"deletions":42,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -27,1 +27,7 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile jdk.compiler\/com.sun.tools.javac.api\n+ * @modules java.base\/jdk.internal.classfile\n+ *     java.base\/jdk.internal.classfile.attribute\n+ *     java.base\/jdk.internal.classfile.constantpool\n+ *     java.base\/jdk.internal.classfile.instruction\n+ *     java.base\/jdk.internal.classfile.components\n+ *     java.base\/jdk.internal.classfile.impl\n+ *     jdk.compiler\/com.sun.tools.javac.api\n@@ -43,5 +49,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute;\n-import com.sun.tools.classfile.BootstrapMethods_attribute.BootstrapMethodSpecifier;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_MethodHandle_info;\n+import jdk.internal.classfile.BootstrapMethodEntry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import jdk.internal.classfile.constantpool.MethodHandleEntry;\n@@ -139,1 +144,1 @@\n-            ClassFile cf;\n+            ClassModel cm;\n@@ -141,1 +146,1 @@\n-                cf = ClassFile.read(input);\n+                cm = Classfile.of().parse(input.readAllBytes());\n@@ -143,1 +148,1 @@\n-            if (cf.getName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\")) {\n+            if (cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\")) {\n@@ -146,3 +151,2 @@\n-            BootstrapMethods_attribute bsm =\n-                    (BootstrapMethods_attribute) cf.getAttribute(Attribute.BootstrapMethods);\n-            for (BootstrapMethodSpecifier b : bsm.bootstrap_method_specifiers) {\n+            BootstrapMethodsAttribute bsm = cm.findAttribute(Attributes.BOOTSTRAP_METHODS).orElseThrow();\n+            for (BootstrapMethodEntry b : bsm.bootstrapMethods()) {\n@@ -150,5 +154,3 @@\n-                        ((CONSTANT_MethodHandle_info)\n-                                        cf.constant_pool.get(b.bootstrap_arguments[1]))\n-                                .getCPRefInfo()\n-                                .getNameAndTypeInfo()\n-                                .getName());\n+                        ((MethodHandleEntry)b.arguments().get(1))\n+                                .reference()\n+                                .name().stringValue());\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,2 +48,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n@@ -86,1 +90,1 @@\n-                    ClassFile cf = ClassFile.read(in);\n+                    ClassModel cf = Classfile.of().parse(in.readAllBytes());\n@@ -89,2 +93,2 @@\n-                    for (Method m : cf.methods) {\n-                        String methodName = m.getName(cf.constant_pool);\n+                    for (MethodModel m : cf.methods()) {\n+                        String methodName = m.methodName().stringValue();\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaNaming\/TestNonSerializableLambdaNameStability.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.compiler jdk.jdeps\n+ * @modules jdk.compiler\n@@ -56,2 +56,2 @@\n-            .vmOptions(\"--add-modules\", \"jdk.jdeps\",\n-                       \"--add-exports\", \"jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\")\n+            .vmOptions(\"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n+                    \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\")\n","filename":"test\/langtools\/tools\/javac\/launcher\/GetResourceTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,7 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n+ *          java.base\/jdk.internal.module\n@@ -37,7 +43,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.ModuleResolution_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n@@ -73,0 +74,2 @@\n+import static jdk.internal.module.ClassFileConstants.WARN_INCUBATING;\n+\n@@ -720,21 +723,4 @@\n-            ClassFile cf = ClassFile.read(moduleInfoFile);\n-            List<CPInfo> newPool = new ArrayList<>();\n-            newPool.add(null);\n-            cf.constant_pool.entries().forEach(newPool::add);\n-            int moduleResolutionIndex = newPool.size();\n-            newPool.add(new ConstantPool.CONSTANT_Utf8_info(Attribute.ModuleResolution));\n-            Map<String, Attribute> newAttributes = new HashMap<>(cf.attributes.map);\n-            newAttributes.put(Attribute.ModuleResolution,\n-                              new ModuleResolution_attribute(moduleResolutionIndex,\n-                                                             ModuleResolution_attribute.WARN_INCUBATING));\n-            ClassFile newClassFile = new ClassFile(cf.magic,\n-                                                   cf.minor_version,\n-                                                   cf.major_version,\n-                                                   new ConstantPool(newPool.toArray(new CPInfo[0])),\n-                                                   cf.access_flags,\n-                                                   cf.this_class,\n-                                                   cf.super_class,\n-                                                   cf.interfaces,\n-                                                   cf.fields,\n-                                                   cf.methods,\n-                                                   new Attributes(newAttributes));\n+            ClassModel cf = Classfile.of().parse(moduleInfoFile);\n+            ModuleResolutionAttribute newAttr = ModuleResolutionAttribute.of(WARN_INCUBATING);\n+            byte[] newBytes = Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof Attributes)\n+                    .andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(newAttr))));\n@@ -742,1 +728,1 @@\n-                new ClassWriter().write(newClassFile, out);\n+                out.write(newBytes);\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n- *      --add-modules jdk.jdeps \\\n- *      --add-exports jdk.jdeps\/com.sun.tools.classfile=ALL-UNNAMED\n+ *      --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED\n@@ -43,1 +42,2 @@\n-import com.sun.tools.classfile.ClassFile;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n@@ -155,4 +155,4 @@\n-        ClassFile cf = ClassFile.read(in);\n-        System.err.println(\"    class \" + cf.getName());\n-        if (!name.equals(cf.getName() + \".class\")) {\n-            error(\"unexpected class found: \" + cf.getName());\n+        ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+        System.err.println(\"    class \" + cf.thisClass().asInternalName());\n+        if (!name.equals(cf.thisClass().asInternalName() + \".class\")) {\n+            error(\"unexpected class found: \" + cf.thisClass().asInternalName());\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/CLTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -31,7 +35,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute.Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -40,0 +39,1 @@\n+import java.util.List;\n@@ -44,1 +44,1 @@\n-        Entry[] lines = findEntries();\n+        List<LineNumberInfo> lines = findEntries();\n@@ -48,1 +48,1 @@\n-        if (lines.length != 5) {\n+        if (lines.size() != 5) {\n@@ -51,2 +51,2 @@\n-            for (Entry e : lines) {\n-                System.err.println(e.line_number);\n+            for (LineNumberInfo e : lines) {\n+                System.err.println(e.lineNumber());\n@@ -54,1 +54,1 @@\n-            throw new Exception(\"finally line number table incorrect: length=\" + lines.length + \" expected length=5\");\n+            throw new Exception(\"finally line number table incorrect: length=\" + lines.size() + \" expected length=5\");\n@@ -58,1 +58,1 @@\n-        int current = lines[0].line_number;\n+        int current = lines.get(0).lineNumber();\n@@ -62,1 +62,1 @@\n-        current = lines[1].line_number;\n+        current = lines.get(1).lineNumber();\n@@ -68,1 +68,1 @@\n-        current = lines[2].line_number;\n+        current = lines.get(2).lineNumber();\n@@ -74,1 +74,1 @@\n-        current = lines[3].line_number;\n+        current = lines.get(3).lineNumber();\n@@ -80,1 +80,1 @@\n-        current = lines[4].line_number;\n+        current = lines.get(4).lineNumber();\n@@ -86,8 +86,8 @@\n-    static Entry[] findEntries() throws IOException, ConstantPoolException {\n-        ClassFile self = ClassFile.read(FinallyLineNumberTest.class.getResourceAsStream(\"FinallyLineNumberTest.class\"));\n-        for (Method m : self.methods) {\n-            if (\"method\".equals(m.getName(self.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Attribute at : code_attribute.attributes) {\n-                    if (Attribute.LineNumberTable.equals(at.getName(self.constant_pool))) {\n-                        return ((LineNumberTable_attribute)at).line_number_table;\n+    static List<LineNumberInfo> findEntries() throws IOException {\n+        ClassModel self = Classfile.of().parse(FinallyLineNumberTest.class.getResourceAsStream(\"FinallyLineNumberTest.class\").readAllBytes());\n+        for (MethodModel m : self.methods()) {\n+            if (m.methodName().equalsString(\"method\")) {\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (Attribute<?> at : code_attribute.attributes()) {\n+                    if (at instanceof LineNumberTableAttribute lineAt) {\n+                        return lineAt.lineNumbers();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/FinallyLineNumberTest.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -5,1 +5,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -8,7 +12,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute.Entry;\n+import java.util.List;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -21,3 +21,3 @@\n-        Entry[] lines = findEntries();\n-        if (lines == null || lines.length != 1) {\n-            int found = lines == null ? 0 : lines.length;\n+        List<LineNumberInfo> lines = findEntries();\n+        if (lines == null || lines.size() != 1) {\n+            int found = lines == null ? 0 : lines.size();\n@@ -27,1 +27,1 @@\n-        int line = lines[0].line_number;\n+        int line = lines.get(0).lineNumber();\n@@ -33,8 +33,8 @@\n-    static Entry[] findEntries() throws IOException, ConstantPoolException {\n-        ClassFile self = ClassFile.read(NestedLineNumberTest.Test.class.getResourceAsStream(\"NestedLineNumberTest$Test.class\"));\n-        for (Method m : self.methods) {\n-            if (\"<init>\".equals(m.getName(self.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Attribute at : code_attribute.attributes) {\n-                    if (Attribute.LineNumberTable.equals(at.getName(self.constant_pool))) {\n-                        return ((LineNumberTable_attribute)at).line_number_table;\n+    static List<LineNumberInfo> findEntries() throws IOException {\n+        ClassModel self = Classfile.of().parse(NestedLineNumberTest.Test.class.getResourceAsStream(\"NestedLineNumberTest$Test.class\").readAllBytes());\n+        for (MethodModel m : self.methods()) {\n+            if (\"<init>\".equals(m.methodName().stringValue())) {\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (Attribute<?> at : code_attribute.attributes()) {\n+                    if (at instanceof LineNumberTableAttribute lineAt) {\n+                        return lineAt.lineNumbers();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NestedLineNumberTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -5,1 +5,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -8,6 +12,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -66,9 +66,9 @@\n-    static List<Entry> findEntries() throws IOException, ConstantPoolException {\n-        ClassFile self = ClassFile.read(NullCheckLineNumberTest.Test.class.getResourceAsStream(\"NullCheckLineNumberTest$Test.class\"));\n-        for (Method m : self.methods) {\n-            if (\"<init>\".equals(m.getName(self.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Attribute at : code_attribute.attributes) {\n-                    if (Attribute.LineNumberTable.equals(at.getName(self.constant_pool))) {\n-                        return Arrays.stream(((LineNumberTable_attribute)at).line_number_table)\n-                                     .map(e -> new SimpleEntry<> (e.line_number, e.start_pc))\n+    static List<Entry> findEntries() throws IOException {\n+        ClassModel self = Classfile.of().parse(Objects.requireNonNull(Test.class.getResourceAsStream(\"NullCheckLineNumberTest$Test.class\")).readAllBytes());\n+        for (MethodModel m : self.methods()) {\n+            if (\"<init>\".equals(m.methodName().stringValue())) {\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElseThrow();\n+                for (Attribute<?> at : code_attribute.attributes()) {\n+                    if (at instanceof LineNumberTableAttribute lineAt) {\n+                        return lineAt.lineNumbers().stream()\n+                                     .map(e -> new SimpleEntry<> (e.lineNumber(), e.startPc()))\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NullCheckLineNumberTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -32,6 +37,4 @@\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -128,4 +131,4 @@\n-            ClassFile cf = ClassFile.read(f);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(TEST_METHOD_NAME)) {\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(TEST_METHOD_NAME)) {\n@@ -139,2 +142,2 @@\n-            Code_attribute ea = (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -144,1 +147,1 @@\n-            int cp_entry = -1;\n+            MemberRefEntry methRef = null;\n@@ -146,2 +149,2 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokevirtual\")) {\n+            for (CodeElement ce : ea.elementList()) {\n+                if (ce instanceof InvokeInstruction ins && ins.opcode() == Opcode.INVOKEVIRTUAL) {\n@@ -149,3 +152,3 @@\n-                    if (cp_entry == -1) {\n-                        cp_entry = i.getUnsignedShort(1);\n-                    } else if (cp_entry != i.getUnsignedShort(1)) {\n+                    if (methRef == null) {\n+                        methRef = ins.method();\n+                    } else if (methRef != ins.method()) {\n@@ -154,3 +157,1 @@\n-                    CONSTANT_Methodref_info methRef =\n-                            (CONSTANT_Methodref_info)cf.constant_pool.get(cp_entry);\n-                    String type = methRef.getNameAndTypeInfo().getType();\n+                    String type = methRef.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/meth\/TestCP.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -54,5 +59,3 @@\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.RuntimeInvisibleAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeVisibleAnnotations_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.attribute.*;\n@@ -89,2 +92,2 @@\n-        ClassFile cf = ClassFile.read(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n-        RuntimeVisibleAnnotations_attribute annotations = (RuntimeVisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeVisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n@@ -92,1 +95,1 @@\n-        if (annotations == null || annotations.annotations.length != 1) {\n+        if (annotations == null || annotations.annotations().size() != 1) {\n@@ -143,2 +146,2 @@\n-        ClassFile cf = ClassFile.read(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n-        RuntimeVisibleAnnotations_attribute annotations = (RuntimeVisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeVisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n@@ -146,1 +149,1 @@\n-        if (annotations != null && annotations.annotations.length > 0) {\n+        if (annotations != null && annotations.annotations().size() > 0) {\n@@ -150,1 +153,1 @@\n-        if (cf.attributes.map.get(Attribute.Deprecated) != null) {\n+        if (cf.findAttribute(Attributes.DEPRECATED).isPresent()) {\n@@ -194,2 +197,2 @@\n-        ClassFile cf = ClassFile.read(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n-        RuntimeVisibleAnnotations_attribute annotations = (RuntimeVisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeVisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n+        RuntimeVisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElse(null);\n@@ -200,1 +203,1 @@\n-        int length = annotations.annotations.length;\n+        int length = annotations.annotations().size();\n@@ -204,1 +207,1 @@\n-        int pairsCount = annotations.annotations[0].num_element_value_pairs;\n+        int pairsCount = annotations.annotations().get(0).elements().size();\n@@ -317,2 +320,2 @@\n-        ClassFile cf = ClassFile.read(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n-        RuntimeInvisibleAnnotations_attribute annotations = (RuntimeInvisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeInvisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n@@ -320,1 +323,1 @@\n-        if (annotations == null || annotations.annotations.length != 1) {\n+        if (annotations == null || annotations.annotations().size() != 1) {\n@@ -359,2 +362,2 @@\n-        ClassFile cf = ClassFile.read(modulePath.resolve(\"B\").resolve(\"module-info.class\"));\n-        RuntimeInvisibleAnnotations_attribute annotations = (RuntimeInvisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeInvisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"B\").resolve(\"module-info.class\"));\n+        RuntimeInvisibleAnnotationsAttribute annotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n@@ -365,1 +368,1 @@\n-        int length = annotations.annotations.length;\n+        int length = annotations.annotations().size();\n@@ -434,2 +437,2 @@\n-        ClassFile cf = ClassFile.read(classes.resolve(\"m1x\").resolve(\"module-info.class\"));\n-        var invisibleAnnotations = (RuntimeInvisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeInvisibleAnnotations);\n+        ClassModel cf = Classfile.of().parse(classes.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        RuntimeInvisibleAnnotationsAttribute invisibleAnnotations = cf.findAttribute(Attributes.RUNTIME_INVISIBLE_ANNOTATIONS).orElse(null);\n@@ -440,1 +443,1 @@\n-        int length = invisibleAnnotations.annotations.length;\n+        int length = invisibleAnnotations.annotations().size();\n@@ -444,2 +447,2 @@\n-        Annotation annotation = invisibleAnnotations.annotations[0];\n-        String annotationName = cf.constant_pool.getUTF8Value(annotation.type_index).toString();\n+        Annotation annotation = invisibleAnnotations.annotations().get(0);\n+        String annotationName = annotation.classSymbol().descriptorString();\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -31,1 +31,7 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n+ *          java.base\/jdk.internal.module\n@@ -50,8 +56,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.ModuleResolution_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import jdk.internal.classfile.constantpool.*;\n@@ -61,0 +62,2 @@\n+import static jdk.internal.module.ClassFileConstants.DO_NOT_RESOLVE_BY_DEFAULT;\n+import static jdk.internal.module.ClassFileConstants.WARN_INCUBATING;\n@@ -88,1 +91,1 @@\n-        addModuleResolutionAttribute(jdkIModuleInfo, ModuleResolution_attribute.DO_NOT_RESOLVE_BY_DEFAULT);\n+        addModuleResolutionAttribute(jdkIModuleInfo, DO_NOT_RESOLVE_BY_DEFAULT);\n@@ -178,1 +181,1 @@\n-        addModuleResolutionAttribute(jdkIModuleInfo, ModuleResolution_attribute.WARN_INCUBATING);\n+        addModuleResolutionAttribute(jdkIModuleInfo, WARN_INCUBATING);\n@@ -258,26 +261,4 @@\n-        ClassFile cf = ClassFile.read(classfile);\n-        Attributes attrs = cf.attributes;\n-        List<CPInfo> cpData = new ArrayList<>();\n-        cpData.add(null);\n-        for (CPInfo info : cf.constant_pool.entries()) {\n-            cpData.add(info);\n-            if (info.size() == 2)\n-                cpData.add(null);\n-        }\n-        cpData.add(new CONSTANT_Utf8_info(Attribute.ModuleResolution));\n-        ConstantPool newCP = new ConstantPool(cpData.toArray(new CPInfo[0]));\n-        ModuleResolution_attribute res = new ModuleResolution_attribute(newCP, resolution_flags);\n-        Map<String, Attribute> newAttributeMap = new HashMap<>(attrs.map);\n-        newAttributeMap.put(Attribute.ModuleResolution, res);\n-        Attributes newAttrs = new Attributes(newAttributeMap);\n-        ClassFile newCF = new ClassFile(cf.magic,\n-                                        cf.minor_version,\n-                                        cf.major_version,\n-                                        newCP,\n-                                        cf.access_flags,\n-                                        cf.this_class,\n-                                        cf.super_class,\n-                                        cf.interfaces,\n-                                        cf.fields,\n-                                        cf.methods,\n-                                        newAttrs);\n+        ClassModel cm = Classfile.of().parse(classfile);\n+        ModuleResolutionAttribute modRAttr = ModuleResolutionAttribute.of(resolution_flags);\n+        byte[] newBytes = Classfile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleResolutionAttribute).\n+                andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(modRAttr))));\n@@ -285,1 +266,1 @@\n-            new ClassWriter().write(newCF, out);\n+            out.write(newBytes);\n","filename":"test\/langtools\/tools\/javac\/modules\/IncubatingTest.java","additions":19,"deletions":38,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -34,1 +34,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -39,0 +44,1 @@\n+import java.io.OutputStream;\n@@ -42,5 +48,1 @@\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n@@ -49,5 +51,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.Module_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -112,6 +111,2 @@\n-                case SOURCE:\n-                    testSource(base, mods, target);\n-                    break;\n-                case CLASS:\n-                    testClass(base, mods, target);\n-                    break;\n+                case SOURCE -> testSource(base, mods, target);\n+                case CLASS -> testClass(base, mods, target);\n@@ -216,1 +211,1 @@\n-        ClassFile cf1 = ClassFile.read(modules1.resolve(\"module-info.class\"));\n+        ClassModel cm1 = Classfile.of().parse(modules1.resolve(\"module-info.class\"));\n@@ -218,9 +213,7 @@\n-        Map<String,Attribute> attrMap = new LinkedHashMap<>(cf1.attributes.map);\n-        Module_attribute modAttr1 = (Module_attribute) attrMap.get(\"Module\");\n-        Module_attribute.RequiresEntry[] requires =\n-                new Module_attribute.RequiresEntry[modAttr1.requires_count];\n-        for (int i = 0; i < modAttr1.requires_count; i++) {\n-            Module_attribute.RequiresEntry e1 = modAttr1.requires[i];\n-            int flags = e1.requires_flags;\n-            Module_attribute.RequiresEntry e2;\n-            if (e1.getRequires(cf1.constant_pool).equals(\"java.base\")) {\n+        ModuleAttribute modAttr1 = cm1.findAttribute(Attributes.MODULE).orElseThrow();\n+        List<ModuleRequireInfo> requires = Arrays.asList(new ModuleRequireInfo[modAttr1.requires().size()]);\n+        for (int i = 0; i < modAttr1.requires().size(); ++i) {\n+            ModuleRequireInfo e1 = modAttr1.requires().get(i);\n+            int flags = e1.requiresFlagsMask();\n+            ModuleRequireInfo e2;\n+            if (e1.requires().name().equalsString(\"java.base\")) {\n@@ -229,6 +222,2 @@\n-                        case \"static\":\n-                            flags |= Module_attribute.ACC_STATIC_PHASE;\n-                            break;\n-                        case \"transitive\":\n-                            flags |= Module_attribute.ACC_TRANSITIVE;\n-                            break;\n+                        case \"static\" -> flags |= Classfile.ACC_STATIC_PHASE;\n+                        case \"transitive\" -> flags |= Classfile.ACC_TRANSITIVE;\n@@ -237,4 +226,1 @@\n-                e2 = new Module_attribute.RequiresEntry(\n-                        e1.requires_index,\n-                        flags,\n-                        e1.requires_version_index);\n+                e2 = ModuleRequireInfo.of(e1.requires(), flags, e1.requiresVersion().orElse(null));\n@@ -244,1 +230,1 @@\n-            requires[i] = e2;\n+            requires.set(i, e2);\n@@ -246,12 +232,0 @@\n-        Module_attribute modAttr2 = new Module_attribute(\n-                modAttr1.attribute_name_index,\n-                modAttr1.module_name,\n-                modAttr1.module_flags,\n-                modAttr1.module_version_index,\n-                requires,\n-                modAttr1.exports,\n-                modAttr1.opens,\n-                modAttr1.uses_index,\n-                modAttr1.provides);\n-        attrMap.put(\"Module\", modAttr2);\n-        Attributes attributes = new Attributes(attrMap);\n@@ -259,5 +233,9 @@\n-        ClassFile cf2 = new ClassFile(\n-                cf1.magic, cf1.minor_version, cf1.major_version,\n-                cf1.constant_pool, cf1.access_flags,\n-                cf1.this_class, cf1.super_class, cf1.interfaces,\n-                cf1.fields, cf1.methods, attributes);\n+        ModuleAttribute modAttr2 = ModuleAttribute.of(\n+                modAttr1.moduleName(),\n+                modAttr1.moduleFlagsMask(),\n+                modAttr1.moduleVersion().orElse(null),\n+                requires,\n+                modAttr1.exports(),\n+                modAttr1.opens(),\n+                modAttr1.uses(),\n+                modAttr1.provides());\n@@ -266,1 +244,5 @@\n-        new ClassWriter().write(cf2, modInfo.toFile());\n+        byte[] newBytes = Classfile.of().transform(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+                andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(modAttr2))));\n+        try (OutputStream out = Files.newOutputStream(modInfo)) {\n+            out.write(newBytes);\n+        }\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":38,"deletions":56,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -39,4 +44,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Module_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n@@ -115,2 +118,2 @@\n-    private void checkModuleVersion(Path classfile, String version) throws IOException, ConstantPoolException {\n-        ClassFile cf = ClassFile.read(classfile);\n+    private void checkModuleVersion(Path classfile, String version) throws IOException {\n+        ClassModel cm = Classfile.of().parse(classfile);\n@@ -118,1 +121,1 @@\n-        Module_attribute moduleAttribute = (Module_attribute) cf.attributes.get(Attribute.Module);\n+        ModuleAttribute moduleAttribute = cm.findAttribute(Attributes.MODULE).orElse(null);\n@@ -124,1 +127,1 @@\n-        String actualVersion = cf.constant_pool.getUTF8Value(moduleAttribute.module_version_index);\n+        String actualVersion = moduleAttribute.moduleVersion().orElseThrow().stringValue();\n","filename":"test\/langtools\/tools\/javac\/modules\/ModuleVersion.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,5 +50,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.Module_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.ModuleAttribute;\n@@ -237,28 +239,13 @@\n-        ClassFile cf = ClassFile.read(miClass);\n-        Module_attribute module = (Module_attribute) cf.attributes.map.get(Attribute.Module);\n-        Module_attribute newModule = new Module_attribute(module.attribute_name_index,\n-                                                          module.module_name,\n-                                                          module.module_flags | Module_attribute.ACC_OPEN,\n-                                                          module.module_version_index,\n-                                                          module.requires,\n-                                                          module.exports,\n-                                                          module.opens,\n-                                                          module.uses_index,\n-                                                          module.provides);\n-        Map<String, Attribute> attrs = new HashMap<>(cf.attributes.map);\n-\n-        attrs.put(Attribute.Module, newModule);\n-\n-        Attributes newAttributes = new Attributes(attrs);\n-        ClassFile newClassFile = new ClassFile(cf.magic,\n-                                               cf.minor_version,\n-                                               cf.major_version,\n-                                               cf.constant_pool,\n-                                               cf.access_flags,\n-                                               cf.this_class,\n-                                               cf.super_class,\n-                                               cf.interfaces,\n-                                               cf.fields,\n-                                               cf.methods,\n-                                               newAttributes);\n-\n+        ClassModel cm = Classfile.of().parse(miClass);\n+        ModuleAttribute module = cm.findAttribute(Attributes.MODULE).orElseThrow();\n+        ModuleAttribute newModule = ModuleAttribute.of(module.moduleName(),\n+                                                          module.moduleFlagsMask() | Classfile.ACC_OPEN,\n+                                                          module.moduleVersion().orElse(null),\n+                                                          module.requires(),\n+                                                          module.exports(),\n+                                                          module.opens(),\n+                                                          module.uses(),\n+                                                          module.provides());\n+\n+        byte[] newBytes = Classfile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+                andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(newModule))));\n@@ -266,1 +253,1 @@\n-            new ClassWriter().write(newClassFile, out);\n+            out.write(newBytes);\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":22,"deletions":35,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,5 +38,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LocalVariableTypeTable_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n@@ -63,4 +66,4 @@\n-            ClassFile cf = ClassFile.read(f);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(TEST_METHOD_NAME)) {\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(TEST_METHOD_NAME)) {\n@@ -74,1 +77,1 @@\n-            Code_attribute code = (Code_attribute)testMethod.attributes.get(Attribute.Code);\n+            CodeAttribute code = testMethod.findAttribute(Attributes.CODE).orElse(null);\n@@ -78,2 +81,1 @@\n-            LocalVariableTypeTable_attribute lvt_table =\n-                    (LocalVariableTypeTable_attribute)code.attributes.get(Attribute.LocalVariableTypeTable);\n+            LocalVariableTypeTableAttribute lvt_table = code.findAttribute(Attributes.LOCAL_VARIABLE_TYPE_TABLE).orElse(null);\n@@ -83,1 +85,1 @@\n-            if (lvt_table.local_variable_table_length != LVT_LENGTH) {\n+            if (lvt_table.localVariableTypes().size() != LVT_LENGTH) {\n@@ -85,1 +87,1 @@\n-                        \"\\nfound: \" + lvt_table.local_variable_table_length +\n+                        \"\\nfound: \" + lvt_table.localVariableTypes().size() +\n@@ -88,2 +90,1 @@\n-            String sig =\n-                    cf.constant_pool.getUTF8Value(lvt_table.local_variable_table[0].signature_index);\n+            String sig = lvt_table.localVariableTypes().get(0).signature().stringValue();\n","filename":"test\/langtools\/tools\/javac\/multicatch\/7005371\/T7005371.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -32,5 +37,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Code_attribute.Exception_data;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.instruction.ExceptionCatch;\n@@ -83,4 +86,4 @@\n-            ClassFile cf = ClassFile.read(f);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(TEST_METHOD_NAME)) {\n+            ClassModel cf = Classfile.of().parse(f.toPath());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(TEST_METHOD_NAME)) {\n@@ -94,2 +97,2 @@\n-            Code_attribute ea = (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -98,2 +101,2 @@\n-            Exception_data firstExceptionTable = null;\n-            for (int i = 0 ; i < ea.exception_table_length; i++) {\n+            ExceptionCatch firstExceptionTable = null;\n+            for (int i = 0 ; i < ea.exceptionHandlers().size(); i++) {\n@@ -101,1 +104,1 @@\n-                    firstExceptionTable = ea.exception_table[i];\n+                    firstExceptionTable = ea.exceptionHandlers().get(i);\n@@ -103,3 +106,3 @@\n-                if (ea.exception_table[i].handler_pc != firstExceptionTable.handler_pc ||\n-                        ea.exception_table[i].start_pc != firstExceptionTable.start_pc ||\n-                        ea.exception_table[i].end_pc != firstExceptionTable.end_pc) {\n+                if (ea.exceptionHandlers().get(i).handler() != firstExceptionTable.handler() ||\n+                        ea.exceptionHandlers().get(i).tryStart() != firstExceptionTable.tryStart() ||\n+                        ea.exceptionHandlers().get(i).tryEnd() != firstExceptionTable.tryEnd()) {\n","filename":"test\/langtools\/tools\/javac\/multicatch\/Pos05.java","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n","filename":"test\/langtools\/tools\/javac\/options\/release\/ReleaseOption9.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n","filename":"test\/langtools\/tools\/javac\/options\/release\/ReleaseOptionUnsupported.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -52,1 +57,3 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n@@ -54,1 +61,0 @@\n-import java.util.Arrays;\n@@ -64,13 +70,16 @@\n-        ClassFile cf = ClassFile.read(annotationsClass);\n-        for (Method m : cf.methods) {\n-            if (\"test\".equals(cf.constant_pool.getUTF8Value(m.name_index))) {\n-                Code_attribute codeAttr =\n-                        (Code_attribute) m.attributes.map.get(Attribute.Code);\n-                Attribute annoAttr =\n-                        codeAttr.attributes.map.get(Attribute.RuntimeInvisibleTypeAnnotations);\n-                RuntimeInvisibleTypeAnnotations_attribute annotations =\n-                        (RuntimeInvisibleTypeAnnotations_attribute) annoAttr;\n-                String expected = \"[@Annotations$DTA; pos: [LOCAL_VARIABLE, {start_pc = 31, length = 7, index = 1}, pos = -1], \" +\n-                                  \"@Annotations$TA; pos: [LOCAL_VARIABLE, {start_pc = 50, length = 7, index = 1}, pos = -1]]\";\n-                String actual = Arrays.toString(annotations.annotations);\n-                if (!expected.equals(actual)) {\n+        assert annotationsClass != null;\n+        ClassModel cf = Classfile.of().parse(annotationsClass.readAllBytes());\n+        for (MethodModel m : cf.methods()) {\n+            if (m.methodName().equalsString(\"test\")) {\n+                CodeAttribute codeAttr = m.findAttribute(Attributes.CODE).orElseThrow();\n+                RuntimeInvisibleTypeAnnotationsAttribute annotations = codeAttr.findAttribute(Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS).orElseThrow();\n+                String expected = \"LAnnotations$DTA; pos: [LOCAL_VARIABLE, {start_pc=31, end_pc=38, index=1}], \" +\n+                                  \"LAnnotations$TA; pos: [LOCAL_VARIABLE, {start_pc=50, end_pc=57, index=1}], \";\n+                StringBuilder actual = new StringBuilder();\n+                for (TypeAnnotation ta: annotations.annotations()) {\n+                    TypeAnnotation.LocalVarTargetInfo info = ((TypeAnnotation.LocalVarTarget) ta.targetInfo()).table().getFirst();\n+                    actual.append(ta.className().stringValue() + \" pos: [\" + ta.targetInfo().targetType());\n+                    actual.append(\", {start_pc=\" + codeAttr.labelToBci(info.startLabel()) + \", end_pc=\" + codeAttr.labelToBci(info.endLabel()));\n+                    actual.append(\", index=\" + info.index()+ \"}], \");\n+                }\n+                if (!expected.contentEquals(actual)) {\n","filename":"test\/langtools\/tools\/javac\/patterns\/Annotations.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,0 +38,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -36,1 +43,0 @@\n-import com.sun.tools.classfile.*;\n@@ -80,2 +86,3 @@\n-        ClassFile cf = ClassFile.read(getClass().getResource(c.getName() + \".class\").openStream());\n-        Method m = getMethodByName(cf, c.getSimpleName().contains(\"Lambda\") ? \"lambda$\" : \"test\");\n+        ClassModel cf = Classfile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\"))\n+                        .openStream().readAllBytes());\n+        MethodModel m = getMethodByName(cf, c.getSimpleName().contains(\"Lambda\") ? \"lambda$\" : \"test\");\n@@ -87,1 +94,1 @@\n-        Code_attribute code = (Code_attribute) m.attributes.get(Attribute.Code);\n+        CodeAttribute code = m.findAttribute(Attributes.CODE).orElse(null);\n@@ -93,2 +100,1 @@\n-        LocalVariableTable_attribute lvt =\n-                (LocalVariableTable_attribute) code.attributes.get(Attribute.LocalVariableTable);\n+        LocalVariableTableAttribute lvt = code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null);\n@@ -101,2 +107,2 @@\n-        for (LocalVariableTable_attribute.Entry e: lvt.local_variable_table) {\n-            foundNames.add(cf.constant_pool.getUTF8Value(e.name_index));\n+        for (LocalVariableInfo e: lvt.localVariables()) {\n+            foundNames.add(e.name().stringValue());\n@@ -118,3 +124,3 @@\n-    Method getMethodByName(ClassFile cf, String name) throws ConstantPoolException {\n-        for (Method m: cf.methods) {\n-            if (m.getName(cf.constant_pool).startsWith(name))\n+    MethodModel getMethodByName(ClassModel cf, String name) {\n+        for (MethodModel m: cf.methods()) {\n+            if (m.methodName().stringValue().startsWith(name))\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableTable.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,4 +43,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -53,1 +57,1 @@\n-    ClassFile cf;\n+    ClassModel cf;\n@@ -114,1 +118,1 @@\n-                cf = ClassFile.read(curPath.resolve(\"Test.class\"));\n+                cf = Classfile.of().parse(curPath.resolve(\"Test.class\"));\n@@ -117,6 +121,6 @@\n-                for (CPInfo entry : cf.constant_pool.entries()) {\n-                    if (entry.getTag() == ConstantPool.CONSTANT_Class) {\n-                        CONSTANT_Class_info clazz = (CONSTANT_Class_info) entry;\n-                        incompatibleClassChangeErrror |=\n-                                \"java\/lang\/IncompatibleClassChangeError\".equals(clazz.getName());\n-                        matchException |= \"java\/lang\/MatchException\".equals(clazz.getName());\n+                ConstantPool cp = cf.constantPool();\n+                for (int i = 1; i < cp.entryCount(); i += cp.entryByIndex(i).width()) {\n+                    if (cp.entryByIndex(i) instanceof ClassEntry clazz) {\n+                        incompatibleClassChangeErrror |= clazz.name().equalsString(\n+                                \"java\/lang\/IncompatibleClassChangeError\");\n+                        matchException |= clazz.name().equalsString(\"java\/lang\/MatchException\");\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -41,6 +46,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Instruction;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n@@ -57,1 +58,1 @@\n-    ClassFile cf;\n+    ClassModel cf;\n@@ -86,3 +87,3 @@\n-        cf = ClassFile.read(curPath.resolve(\"NestedPatterVariablesTest.class\"));\n-        Method testMethod = Arrays.stream(cf.methods)\n-                                  .filter(m -> isTestMethod(m))\n+        cf = Classfile.of().parse(curPath.resolve(\"NestedPatterVariablesTest.class\"));\n+        MethodModel testMethod = cf.methods().stream()\n+                                  .filter(this::isTestMethod)\n@@ -90,2 +91,2 @@\n-                                  .get();\n-        Code_attribute code_attribute = (Code_attribute) testMethod.attributes.get(Attribute.Code);\n+                                  .orElseThrow();\n+        CodeAttribute code_attribute = testMethod.findAttribute(Attributes.CODE).orElseThrow();\n@@ -95,2 +96,2 @@\n-                \"aload_1\", \"instanceof\", \"ifeq\", \"aload_1\", \"checkcast\", \"astore_2\", \"aload_2\", \"instanceof\",\n-                \"ifeq\", \"aload_2\", \"checkcast\", \"astore_3\", \"aload_3\", \"areturn\", \"aconst_null\", \"areturn\");\n+                \"ALOAD_1\", \"INSTANCEOF\", \"IFEQ\", \"ALOAD_1\", \"CHECKCAST\", \"ASTORE_2\", \"ALOAD_2\", \"INSTANCEOF\",\n+                \"IFEQ\", \"ALOAD_2\", \"CHECKCAST\", \"ASTORE_3\", \"ALOAD_3\", \"ARETURN\", \"ACONST_NULL\", \"ARETURN\");\n@@ -100,6 +101,2 @@\n-    boolean isTestMethod(Method m) {\n-        try {\n-            return TEST_METHOD.equals(m.getName(cf.constant_pool));\n-        } catch (ConstantPoolException e) {\n-            throw new IllegalStateException(e);\n-        }\n+    boolean isTestMethod(MethodModel m) {\n+        return m.methodName().equalsString(TEST_METHOD);\n@@ -108,3 +105,4 @@\n-    List<String> getCodeInstructions(Code_attribute code) {\n-        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n-                .map(Instruction::getMnemonic)\n+    List<String> getCodeInstructions(CodeAttribute code) {\n+        return code.elementList().stream()\n+                .filter(ce -> ce instanceof Instruction)\n+                .map(ins -> ((Instruction) ins).opcode().name())\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPatternVariablesBytecode.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,0 +39,3 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -37,9 +45,0 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n@@ -51,2 +50,1 @@\n-    public static void main(String[] args)\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+    public static void main(String[] args) throws IOException {\n@@ -58,4 +56,2 @@\n-    void checkClassFile(File file)\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n-        ClassFile classFile = ClassFile.read(file);\n-        ConstantPool constantPool = classFile.constant_pool;\n+    void checkClassFile(File file) throws IOException {\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n@@ -63,3 +59,2 @@\n-        Method method = Arrays.stream(classFile.methods)\n-                              .filter(m -> getName(m, constantPool)\n-                                               .equals(\"test\"))\n+        MethodModel method = classFile.methods().stream()\n+                              .filter(m -> getName(m).equals(\"test\"))\n@@ -69,13 +64,13 @@\n-                                      aload_1\n-                                      instanceof\n-                                      ifeq\n-                                      aload_1\n-                                      checkcast\n-                                      astore_2\n-                                      aload_2\n-                                      invokevirtual\n-                                      ifeq\n-                                      iconst_1\n-                                      goto\n-                                      iconst_0\n-                                      ireturn\n+                                      ALOAD_1\n+                                      INSTANCEOF\n+                                      IFEQ\n+                                      ALOAD_1\n+                                      CHECKCAST\n+                                      ASTORE_2\n+                                      ALOAD_2\n+                                      INVOKEVIRTUAL\n+                                      IFEQ\n+                                      ICONST_1\n+                                      GOTO\n+                                      ICONST_0\n+                                      IRETURN\n@@ -83,2 +78,1 @@\n-        Code_attribute code = (Code_attribute) method.attributes\n-                .get(Attribute.Code);\n+        CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n@@ -92,3 +86,4 @@\n-    String printCode(Code_attribute code) {\n-        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n-                            .map(Instruction::getMnemonic)\n+    String printCode(CodeAttribute code) {\n+        return code.elementList().stream()\n+                            .filter(e -> e instanceof Instruction)\n+                            .map(ins -> ((Instruction) ins).opcode().name())\n@@ -98,6 +93,2 @@\n-    String getName(Method m, ConstantPool constantPool) {\n-        try {\n-            return m.getName(constantPool);\n-        } catch (ConstantPoolException ex) {\n-            throw new IllegalStateException(ex);\n-        }\n+    String getName(MethodModel m) {\n+        return m.methodName().stringValue();\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoUnnecessaryCast.java","additions":34,"deletions":43,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8314226\n+ * @summary Series of colon-style fallthrough switch cases with guards compiled incorrectly\n+ * @enablePreview\n+ * @compile T8314226.java\n+ * @run main T8314226\n+ *\/\n+\n+public class T8314226 {\n+    int multipleGuardedCases(Object obj) {\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _  when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int multipleGuardedCases2a(Object obj) {\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case Float _   when ((Float) obj) > 0.0f:\n+            case String _  when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int multipleGuardedCases2b(Object obj) {\n+        switch (obj) {\n+            case Float _   when ((Float) obj) > 0.0f: \/\/ reversing the order\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _  when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int multipleGuardedCasesMultiplePatterns(Object obj) {\n+        switch (obj) {\n+            case String _          when !((String) obj).isEmpty():\n+            case Integer _, Byte _ when ((Number) obj).intValue() > 0:\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int singleGuardedCase(Object obj) {\n+        switch (obj) {\n+            case String _ when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int multipleCasesWithReturn(Object obj) {\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _ when !((String) obj).isEmpty():\n+                return 1;\n+            case null:\n+                return 2;\n+            default:\n+                return 3;\n+        }\n+    }\n+\n+    int multipleCasesWithEffectNoReturn(Object obj) {\n+        int i = 0;\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _ when !((String) obj).isEmpty():\n+                i = i + 1;\n+            case null:\n+                i = i + 10;\n+            default:\n+                i = i + 100;\n+        }\n+        return i;\n+    }\n+\n+    int multipleCasesWithLoop(Object obj) {\n+        int i = 0;\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _ when !((String) obj).isEmpty():\n+                i = i + 1;\n+            case null:\n+                while (true) {\n+                    i = i + 10;\n+                    break;\n+                }\n+            default:\n+                i = i + 100;\n+        }\n+\n+        return i;\n+    }\n+\n+    public static void main(String[] args) {\n+        new T8314226().run();\n+    }\n+\n+    private void run() {\n+        assertEquals(1, multipleGuardedCases(42));\n+        assertEquals(1, multipleGuardedCases(\"test\"));\n+        assertEquals(-1, multipleGuardedCases(\"\"));\n+        assertEquals(1, multipleGuardedCases2a(42.0f));\n+        assertEquals(1, multipleGuardedCases2a(\"test\"));\n+        assertEquals(-1, multipleGuardedCases2a(\"\"));\n+        assertEquals(1, multipleGuardedCases2b(42.0f));\n+        assertEquals(1, multipleGuardedCases2b(\"test\"));\n+        assertEquals(-1, multipleGuardedCases2b(\"\"));\n+        assertEquals(1, multipleGuardedCasesMultiplePatterns((byte) 42));\n+        assertEquals(1, multipleGuardedCasesMultiplePatterns(\"test\"));\n+        assertEquals(-1, multipleGuardedCasesMultiplePatterns(\"\"));\n+        assertEquals(-1, singleGuardedCase(42));\n+        assertEquals(1, singleGuardedCase(\"test\"));\n+        assertEquals(-1, singleGuardedCase(\"\"));\n+        assertEquals(1, multipleCasesWithReturn(42));\n+        assertEquals(1, multipleCasesWithReturn(\"test\"));\n+        assertEquals(2, multipleCasesWithReturn(null));\n+        assertEquals(3, multipleCasesWithReturn(\"\"));\n+        assertEquals(111, multipleCasesWithEffectNoReturn(42));\n+        assertEquals(111, multipleCasesWithEffectNoReturn(\"test\"));\n+        assertEquals(110, multipleCasesWithEffectNoReturn(null));\n+        assertEquals(100, multipleCasesWithEffectNoReturn(\"\"));\n+        assertEquals(111, multipleCasesWithLoop(42));\n+        assertEquals(111, multipleCasesWithLoop(\"test\"));\n+        assertEquals(110, multipleCasesWithLoop(null));\n+        assertEquals(100, multipleCasesWithLoop(\"\"));\n+    }\n+\n+    void assertEquals(Object expected, Object actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8314226.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8314632\n+ * @summary Intra-case dominance check fails in the presence of a guard\n+ * @enablePreview\n+ * @compile\/fail\/ref=T8314632.out -XDrawDiagnostics T8314632.java\n+ *\/\n+public class T8314632 {\n+    void test1(Object obj) {\n+        switch (obj) {\n+            case Float _ -> {}\n+            case Integer _, CharSequence _, String _ when obj.hashCode() > 0 -> { } \/\/ error\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + obj);\n+        }\n+    }\n+\n+    void test2(Object obj) {\n+        switch (obj) {\n+            case Float _ -> {}\n+            case Integer _, CharSequence _, String _ -> { }\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + obj); \/\/ error\n+        }\n+    }\n+\n+    void test3(Object obj) {\n+        switch (obj) {\n+            case Float _, CharSequence _ when obj.hashCode() > 0 -> { } \/\/ OK\n+            case Integer _, String _     when obj.hashCode() > 0 -> { } \/\/ OK, since the previous case is guarded\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + obj);\n+        }\n+    }\n+\n+    void test4(Object obj) {\n+        switch (obj) {\n+            case Float _, CharSequence _ -> { } \/\/ OK\n+            case Integer _, String _     when obj.hashCode() > 0 -> { } \/\/ error, since the previous case is unguarded\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + obj);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8314632.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+T8314632.java:12:45: compiler.err.pattern.dominated\n+T8314632.java:20:45: compiler.err.pattern.dominated\n+T8314632.java:36:29: compiler.err.pattern.dominated\n+- compiler.note.preview.filename: T8314632.java, DEFAULT\n+- compiler.note.preview.recompile\n+3 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8314632.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -31,1 +31,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -35,1 +40,1 @@\n-import com.sun.tools.classfile.ClassFile;\n+import jdk.internal.classfile.*;\n@@ -209,5 +214,5 @@\n-            ClassFile cf = ClassFile.read(in);\n-            if (preview && cf.minor_version != 65535) {\n-                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version);\n-            } else if (!preview && cf.minor_version != 0) {\n-                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version);\n+            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            if (preview && cf.minorVersion() != 65535) {\n+                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minorVersion());\n+            } else if (!preview && cf.minorVersion() != 0) {\n+                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minorVersion());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,1 +35,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -58,2 +63,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n@@ -397,1 +402,1 @@\n-                    ClassFile cf;\n+                    ClassModel cf;\n@@ -409,1 +414,1 @@\n-                            cf = ClassFile.read(input);\n+                            cf = Classfile.of().parse(input.readAllBytes());\n@@ -411,1 +416,1 @@\n-                    } catch (IOException | ConstantPoolException ex) {\n+                    } catch (IOException ex) {\n@@ -414,4 +419,4 @@\n-                    if (previewClass && cf.minor_version != 65535) {\n-                        throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version);\n-                    } else if (!previewClass && cf.minor_version != 0) {\n-                        throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version);\n+                    if (previewClass && cf.minorVersion() != 65535) {\n+                        throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minorVersion());\n+                    } else if (!previewClass && cf.minorVersion() != 0) {\n+                        throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minorVersion());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewErrors.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -35,1 +40,2 @@\n-import com.sun.tools.classfile.ClassFile;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n@@ -478,5 +484,5 @@\n-            ClassFile cf = ClassFile.read(in);\n-            if (preview && cf.minor_version != 65535) {\n-                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version + \" for: \" + p.toString());\n-            } else if (!preview && cf.minor_version != 0) {\n-                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version + \" for: \" + p.toString());\n+            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            if (preview && cf.minorVersion() != 65535) {\n+                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minorVersion() + \" for: \" + p.toString());\n+            } else if (!preview && cf.minorVersion() != 0) {\n+                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minorVersion() + \" for: \" + p.toString());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestFileObjectOf.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,0 +43,1 @@\n+import java.lang.instrument.ClassFileTransformer;\n@@ -58,8 +64,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n-import com.sun.tools.classfile.Module_attribute;\n-import com.sun.tools.classfile.Module_attribute.ExportsEntry;\n-import com.sun.tools.classfile.Module_attribute.OpensEntry;\n-import com.sun.tools.classfile.Module_attribute.RequiresEntry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -143,2 +143,1 @@\n-            Collections.sort(members,\n-                             (e1, e2) -> e1.getSimpleName().toString().compareTo(e2.getSimpleName().toString()));\n+            members.sort((e1, e2) -> e1.getSimpleName().toString().compareTo(e2.getSimpleName().toString()));\n@@ -187,1 +186,1 @@\n-        expected = Arrays.asList(\"test.Container:MANDATED\");\n+        expected = List.of(\"test.Container:MANDATED\");\n@@ -203,1 +202,1 @@\n-        expected = Arrays.asList(\"test.Container:EXPLICIT\");\n+        expected = List.of(\"test.Container:EXPLICIT\");\n@@ -258,1 +257,1 @@\n-        expected = Arrays.asList(\"REQUIRES:java.base:MANDATED\");\n+        expected = List.of(\"REQUIRES:java.base:MANDATED\");\n@@ -283,34 +282,22 @@\n-        ClassFile cf = ClassFile.read(moduleInfo);\n-        Module_attribute module = (Module_attribute) cf.getAttribute(Attribute.Module);\n-\n-        RequiresEntry[] newRequires = new RequiresEntry[3];\n-        newRequires[0] = new RequiresEntry(module.requires[0].requires_index,\n-                                           Module_attribute.ACC_MANDATED,\n-                                           module.requires[0].requires_version_index);\n-        newRequires[1] = new RequiresEntry(module.requires[1].requires_index,\n-                                           Module_attribute.ACC_SYNTHETIC,\n-                                           module.requires[1].requires_version_index);\n-        newRequires[2] = module.requires[2];\n-\n-        ExportsEntry[] newExports = new ExportsEntry[3];\n-        newExports[0] = new ExportsEntry(module.exports[0].exports_index,\n-                                         Module_attribute.ACC_MANDATED,\n-                                         module.exports[0].exports_to_index);\n-        newExports[1] = new ExportsEntry(module.exports[1].exports_index,\n-                                         Module_attribute.ACC_SYNTHETIC,\n-                                         module.exports[1].exports_to_index);\n-        newExports[2] = module.exports[2];\n-\n-        OpensEntry[] newOpens = new OpensEntry[3];\n-        newOpens[0] = new OpensEntry(module.opens[0].opens_index,\n-                                     Module_attribute.ACC_MANDATED,\n-                                     module.opens[0].opens_to_index);\n-        newOpens[1] = new OpensEntry(module.opens[1].opens_index,\n-                                     Module_attribute.ACC_SYNTHETIC,\n-                                     module.opens[1].opens_to_index);\n-        newOpens[2] = module.opens[2];\n-\n-        Module_attribute newModule = new Module_attribute(module.attribute_name_index,\n-                                                          module.module_name,\n-                                                          module.module_flags,\n-                                                          module.module_version_index,\n+        ClassModel cf = Classfile.of().parse(moduleInfo);\n+        ModuleAttribute module = cf.findAttribute(Attributes.MODULE).orElseThrow();\n+\n+        List<ModuleRequireInfo> newRequires = new ArrayList<>(3);\n+        newRequires.add(ModuleRequireInfo.of(module.requires().get(0).requires(), Classfile.ACC_MANDATED, module.requires().get(0).requiresVersion().orElse(null)));\n+        newRequires.add(ModuleRequireInfo.of(module.requires().get(1).requires(), Classfile.ACC_SYNTHETIC, module.requires().get(1).requiresVersion().orElse(null)));\n+        newRequires.add(module.requires().get(2));\n+\n+        List<ModuleExportInfo> newExports = new ArrayList<>(3);\n+        newExports.add(ModuleExportInfo.of(module.exports().get(0).exportedPackage(), Classfile.ACC_MANDATED, module.exports().get(0).exportsTo()));\n+        newExports.add(ModuleExportInfo.of(module.exports().get(1).exportedPackage(), Classfile.ACC_SYNTHETIC, module.exports().get(1).exportsTo()));\n+        newExports.add(module.exports().get(2));\n+\n+        List<ModuleOpenInfo> newOpens = new ArrayList<>(3);\n+        newOpens.add(ModuleOpenInfo.of(module.opens().get(0).openedPackage(), Classfile.ACC_MANDATED, module.opens().get(0).opensTo()));\n+        newOpens.add(ModuleOpenInfo.of(module.opens().get(1).openedPackage(), Classfile.ACC_SYNTHETIC, module.opens().get(1).opensTo()));\n+        newOpens.add(module.opens().get(2));\n+\n+\n+        ModuleAttribute newModule = ModuleAttribute.of(module.moduleName(),\n+                                                          module.moduleFlagsMask(),\n+                                                          module.moduleVersion().orElse(null),\n@@ -320,19 +307,4 @@\n-                                                          module.uses_index,\n-                                                          module.provides);\n-        Map<String, Attribute> newAttributesMap = new HashMap<>(cf.attributes.map);\n-\n-        newAttributesMap.put(Attribute.Module, newModule);\n-\n-        Attributes newAttributes = new Attributes(newAttributesMap);\n-        ClassFile newClassFile = new ClassFile(cf.magic,\n-                                               cf.minor_version,\n-                                               cf.major_version,\n-                                               cf.constant_pool,\n-                                               cf.access_flags,\n-                                               cf.this_class,\n-                                               cf.super_class,\n-                                               cf.interfaces,\n-                                               cf.fields,\n-                                               cf.methods,\n-                                               newAttributes);\n-\n+                                                          module.uses(),\n+                                                          module.provides());\n+        byte[] newClassFileBytes = Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute)\n+                                                 .andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(newModule))));\n@@ -340,1 +312,1 @@\n-            new ClassWriter().write(newClassFile, out);\n+            out.write(newClassFileBytes);\n@@ -380,1 +352,1 @@\n-                    case REQUIRES:\n+                    case REQUIRES -> {\n@@ -383,4 +355,4 @@\n-                                           rd.getDependency().getQualifiedName() + \":\" +\n-                                           elements.getOrigin(m, rd));\n-                        break;\n-                    case EXPORTS:\n+                                rd.getDependency().getQualifiedName() + \":\" +\n+                                elements.getOrigin(m, rd));\n+                    }\n+                    case EXPORTS -> {\n@@ -389,4 +361,4 @@\n-                                           ed.getPackage() + \":\" +\n-                                           elements.getOrigin(m, ed));\n-                        break;\n-                    case OPENS:\n+                                ed.getPackage() + \":\" +\n+                                elements.getOrigin(m, ed));\n+                    }\n+                    case OPENS -> {\n@@ -395,3 +367,3 @@\n-                                           od.getPackage() + \":\" +\n-                                           elements.getOrigin(m, od));\n-                        break;\n+                                od.getPackage() + \":\" +\n+                                elements.getOrigin(m, od));\n+                    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestOrigin.java","additions":52,"deletions":80,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -0,0 +1,266 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312418\n+ * @summary Test Elements.getEnumConstantBody\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestGetEnumConstantBody\n+ * @compile -processor TestGetEnumConstantBody -XDshould.stop-at=FLOW TestGetEnumConstantBody.java\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.*;\n+import java.util.function.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+import javax.lang.model.type.*;\n+\n+\/**\n+ * Test basic workings of Elements.getEnumConstantBody\n+ *\/\n+public class TestGetEnumConstantBody extends JavacTestingAbstractProcessor {\n+    private Elements vacuousElements = new VacuousElements();\n+    private Set<Element> allElements = new HashSet<>();\n+    private int round;\n+\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+\n+        allElements.addAll(roundEnv.getRootElements());\n+\n+        \/\/ In the innermost loop, examine the fields defined by the the nested classes\n+        for (TypeElement typeRoot : ElementFilter.typesIn(allElements) ) {\n+            if (typeRoot.getQualifiedName().contentEquals(\"Gen\")) {\n+                continue;\n+            }\n+\n+            boolean elementSeen = false;\n+\n+            for (TypeElement typeElt : ElementFilter.typesIn(typeRoot.getEnclosedElements()) ) {\n+                System.out.println(\"Testing type \" + typeElt);\n+\n+                for (VariableElement field : ElementFilter.fieldsIn(typeElt.getEnclosedElements()) ) {\n+                    elementSeen = true;\n+                    System.out.println(field);\n+                    switch (field.getKind()) {\n+                    case FIELD         -> expectIAE(field);\n+                    case ENUM_CONSTANT -> testEnumConstant(field, typeElt);\n+                    default            -> throw new RuntimeException(\"Unexpected field kind seen\");\n+                    }\n+                }\n+            }\n+\n+            if (!elementSeen) {\n+                throw new RuntimeException(\"No elements seen.\");\n+            }\n+        }\n+        switch (round++) {\n+            case 0:\n+                try (Writer w = processingEnv.getFiler().createSourceFile(\"Cleaned\").openWriter()) {\n+                    w.write(\"\"\"\n+                            class Enclosing {\n+                                enum Cleaned {\n+                                    @TestGetEnumConstantBody.ExpectedBinaryName(\"Enclosing$Cleaned$2\")\n+                                    A(new Object() {}) {\n+                                        void test(Gen g) {\n+                                            g.run();\n+                                        }\n+                                    },\n+                                    B,\n+                                    @TestGetEnumConstantBody.ExpectedBinaryName(\"Enclosing$Cleaned$4\")\n+                                    C(new Object() {}) {\n+                                    };\n+\n+                                    private Cleaned() {}\n+\n+                                    private Cleaned(Object o) {}\n+                                }\n+                            }\n+                            \"\"\");\n+                } catch (IOException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n+                break;\n+            case 1:\n+                try (Writer w = processingEnv.getFiler().createSourceFile(\"Gen\").openWriter()) {\n+                    w.write(\"\"\"\n+                            public class Gen {\n+                                public void run() {}\n+                            }\n+                            \"\"\");\n+                } catch (IOException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n+                break;\n+        }\n+        return true;\n+    }\n+\n+    private String computeExpectedBinaryName(VariableElement e) {\n+        ExpectedBinaryName ebn = e.getAnnotation(ExpectedBinaryName.class);\n+        return (ebn == null) ? null : ebn.value();\n+    }\n+\n+    private void expectIAE(VariableElement variable) {\n+        expectException0(() ->  elements.getEnumConstantBody(variable),\n+                         \"Expected exception not thrown\");\n+\n+        expectException0(() ->  vacuousElements.getEnumConstantBody(variable),\n+                         \"Expected vacuous exception not thrown\");\n+    }\n+\n+    private void expectException0(Supplier<TypeElement> supplier, String message) {\n+        try {\n+            var typeElement = supplier.get();\n+            messager.printError(message, typeElement);\n+        } catch (IllegalArgumentException iae) {\n+            ; \/\/ Expected\n+        }\n+    }\n+\n+    void expectUOE(VariableElement field) {\n+        try {\n+            var result = vacuousElements.getEnumConstantBody(field);\n+            messager.printError(\"Unexpected non-exceptional result returned\", field);\n+\n+        } catch(UnsupportedOperationException uoe) {\n+            ; \/\/ Expected\n+        }\n+    }\n+\n+    private void testEnumConstant(VariableElement field,\n+                                  TypeElement enclosingClass) {\n+        String expectedBinaryName = computeExpectedBinaryName(field);\n+        boolean expectEnumConstantBody = expectedBinaryName != null;\n+\n+        System.out.println(\"\\tTesting enum constant \" + field + \" expected \" + expectEnumConstantBody);\n+        expectUOE(field);\n+\n+        TypeElement enumConstantBody = elements.getEnumConstantBody(field);\n+\n+        if (Objects.nonNull(enumConstantBody) != expectEnumConstantBody) {\n+            messager.printError(\"Unexpected body value\", field);\n+        }\n+\n+        if (enumConstantBody != null) {\n+            testEnumConstantBody(enumConstantBody, expectedBinaryName, enclosingClass);\n+        }\n+\n+        System.out.println(\"\\t constant body \" + enumConstantBody);\n+    }\n+\n+    \/*\n+     * From JLS 8.9.1:\n+     *\n+     * \"The optional class body of an enum constant implicitly\n+     * declares an anonymous class (15.9.5) that (i) is a direct\n+     * subclass of the immediately enclosing enum class (8.1.4), and\n+     * (ii) is final (8.1.1.2). The class body is governed by the\n+     * usual rules of anonymous classes; in particular it cannot\n+     * contain any constructors. Instance methods declared in these\n+     * class bodies may be invoked outside the enclosing enum class\n+     * only if they override accessible methods in the enclosing enum\n+     * class (8.4.8).\"\n+     *\/\n+    private void testEnumConstantBody(TypeElement enumConstBody, String expectedBinaryName, TypeElement enumClass) {\n+        if (enumConstBody.getNestingKind() != NestingKind.ANONYMOUS) {\n+            messager.printError(\"Class body not an anonymous class\", enumConstBody);\n+        }\n+\n+        \/\/ Get the TypeElement for the direct superclass.\n+        TypeElement superClass =\n+            (TypeElement)(((DeclaredType)enumConstBody.getSuperclass()).asElement());\n+\n+        if (!superClass.equals(enumClass)) {\n+            messager.printError(\"Class body is not a direct subclass of the enum\", enumConstBody);\n+        }\n+\n+        if (!enumConstBody.getModifiers().contains(Modifier.FINAL)) {\n+            messager.printError(\"Modifier final missing on class body\", enumConstBody);\n+        }\n+\n+        if (!elements.getBinaryName(enumConstBody).contentEquals(expectedBinaryName)) {\n+            messager.printError(\"Unexpected binary name, expected: \" + expectedBinaryName +\n+                                                       \", but was: \" + elements.getBinaryName(enumConstBody), enumConstBody);\n+        }\n+\n+        return;\n+    }\n+\n+\n+    @interface ExpectedBinaryName {\n+        String value();\n+    }\n+\n+    \/\/ Nested classes hosting a variety of different kinds of fields.\n+\n+    private static enum Body {\n+        @ExpectedBinaryName(\"TestGetEnumConstantBody$Body$1\")\n+        GOLGI(true) {\n+            public boolean isOrganelle() {return true;}\n+        },\n+\n+        @ExpectedBinaryName(\"TestGetEnumConstantBody$Body$2\")\n+        HEAVENLY(true) {\n+            public boolean isCelestial() {return true;}\n+        };\n+\n+        private Body(boolean predicate) {\n+            this.predicate = predicate;\n+        }\n+\n+        private boolean predicate;\n+\n+        public static int field = 42;\n+\n+        public void method() {return;}\n+    }\n+\n+    private static enum MetaSyntaxVar {\n+        FOO(\"foo\"),\n+        BAR(\"bar\");\n+\n+        private String lower;\n+        private MetaSyntaxVar(String lower) {\n+            this.lower = lower;\n+        }\n+\n+        int   BAZ  = 0;\n+        float QUUX = 0.1f;\n+    }\n+\n+    \/\/ Instance and static fields.\n+    public static class FieldHolder {\n+        public static final int f1 = 1;\n+        public static final String s = \"s\";\n+\n+        private Object data;\n+        public FieldHolder(Object data) {\n+            this.data = data;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestGetEnumConstantBody.java","additions":266,"deletions":0,"binary":false,"changes":266,"status":"added"},{"patch":"@@ -35,1 +35,6 @@\n- *      jdk.jdeps\/com.sun.tools.classfile\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ *      java.base\/jdk.internal.classfile.constantpool\n+ *      java.base\/jdk.internal.classfile.instruction\n+ *      java.base\/jdk.internal.classfile.components\n+ *      java.base\/jdk.internal.classfile.impl\n@@ -44,7 +49,1 @@\n-import java.util.Arrays;\n-import java.util.EnumMap;\n-import java.util.EnumSet;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n@@ -73,20 +72,5 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Fieldref_info;\n-import com.sun.tools.classfile.ConstantPool.CPInfo;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Record_attribute;\n-import com.sun.tools.classfile.Record_attribute.ComponentInfo;\n-import com.sun.tools.classfile.RuntimeAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeTypeAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeVisibleAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeVisibleParameterAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute;\n-import com.sun.tools.classfile.TypeAnnotation;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.Opcode;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.instruction.FieldInstruction;\n@@ -1292,1 +1276,1 @@\n-            for (final File fileEntry : dir.listFiles()) {\n+            for (final File fileEntry : Objects.requireNonNull(dir.listFiles())) {\n@@ -1294,3 +1278,3 @@\n-                    ClassFile classFile = ClassFile.read(fileEntry);\n-                    for (CPInfo cpInfo : classFile.constant_pool.entries()) {\n-                        if (cpInfo instanceof ConstantPool.CONSTANT_Fieldref_info) {\n+                    ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                    for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n+                        if (classFile.constantPool().entryByIndex(i) instanceof FieldRefEntry fieldRefEntry) {\n@@ -1298,4 +1282,3 @@\n-                            ConstantPool.CONSTANT_NameAndType_info nameAndType =\n-                                    (ConstantPool.CONSTANT_NameAndType_info)classFile.constant_pool\n-                                            .get(((ConstantPool.CONSTANT_Fieldref_info)cpInfo).name_and_type_index);\n-                            Assert.check(nameAndType.getName().equals(\"recordComponent\"));\n+                            NameAndTypeEntry nameAndType = (NameAndTypeEntry) classFile.constantPool()\n+                                            .entryByIndex(fieldRefEntry.nameAndType().index());\n+                            Assert.check(nameAndType.name().equalsString(\"recordComponent\"));\n@@ -1313,2 +1296,2 @@\n-        int putField1 = -1;\n-        int putField2 = -1;\n+        FieldInstruction putField1 = null;\n+        FieldInstruction putField2 = null;\n@@ -1316,1 +1299,1 @@\n-        for (final File fileEntry : dir.listFiles()) {\n+        for (final File fileEntry : Objects.requireNonNull(dir.listFiles())) {\n@@ -1318,7 +1301,7 @@\n-                ClassFile classFile = ClassFile.read(fileEntry);\n-                for (Method method : classFile.methods) {\n-                    if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n-                        Code_attribute code_attribute = (Code_attribute) method.attributes.get(\"Code\");\n-                        for (Instruction instruction : code_attribute.getInstructions()) {\n-                            if (instruction.getMnemonic().equals(\"putfield\")) {\n-                                if (putField1 != -1 && putField2 != -1) {\n+                ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                for (MethodModel method : classFile.methods()) {\n+                    if (method.methodName().equalsString(\"<init>\")) {\n+                        CodeAttribute code_attribute = method.findAttribute(Attributes.CODE).orElseThrow();\n+                        for (CodeElement ce : code_attribute.elementList()) {\n+                            if (ce instanceof Instruction instruction && instruction.opcode() == Opcode.PUTFIELD) {\n+                                if (putField1 != null && putField2 != null) {\n@@ -1327,4 +1310,4 @@\n-                                if (putField1 == -1) {\n-                                    putField1 = instruction.getShort(1);\n-                                } else if (putField2 == -1) {\n-                                    putField2 = instruction.getShort(1);\n+                                if (putField1 == null) {\n+                                    putField1 = (FieldInstruction) instruction;\n+                                } else {\n+                                    putField2 = (FieldInstruction) instruction;\n@@ -1335,2 +1318,3 @@\n-                        CONSTANT_Fieldref_info fieldref_info1 = (CONSTANT_Fieldref_info)classFile.constant_pool.get(putField1);\n-                        if (!fieldref_info1.getNameAndTypeInfo().getName().equals(\"i\")) {\n+                        assert putField1 != null;\n+                        FieldRefEntry fieldref_info1 = putField1.field();\n+                        if (!fieldref_info1.name().equalsString(\"i\")) {\n@@ -1339,3 +1323,3 @@\n-\n-                        CONSTANT_Fieldref_info fieldref_info2 = (CONSTANT_Fieldref_info)classFile.constant_pool.get(putField2);\n-                        if (!fieldref_info2.getNameAndTypeInfo().getName().equals(\"s\")) {\n+                        assert putField2 != null;\n+                        FieldRefEntry fieldref_info2 = putField2.field();\n+                        if (!fieldref_info2.name().equalsString(\"s\")) {\n@@ -1462,1 +1446,1 @@\n-                ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"R.class\"));\n+                ClassModel classFile = Classfile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n@@ -1465,2 +1449,2 @@\n-                Assert.check(classFile.fields.length == 1);\n-                Field field = classFile.fields[0];\n+                Assert.check(classFile.fields().size() == 1);\n+                FieldModel field = classFile.fields().get(0);\n@@ -1470,4 +1454,1 @@\n-                    checkAnno(classFile,\n-                            (RuntimeAnnotations_attribute) findAttributeOrFail(\n-                                    field.attributes,\n-                                    RuntimeVisibleAnnotations_attribute.class),\n+                    checkAnno(findAttributeOrFail(field.attributes(), RuntimeVisibleAnnotationsAttribute.class),\n@@ -1476,1 +1457,1 @@\n-                    assertAttributeNotPresent(field.attributes, RuntimeVisibleAnnotations_attribute.class);\n+                    assertAttributeNotPresent(field.attributes(), RuntimeVisibleAnnotationsAttribute.class);\n@@ -1481,5 +1462,2 @@\n-                    checkTypeAnno(\n-                            classFile,\n-                            (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n-                            \"FIELD\",\n-                            \"Anno\");\n+                    checkTypeAnno(findAttributeOrFail(field.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n+                            \"FIELD\", \"Anno\");\n@@ -1487,1 +1465,1 @@\n-                    assertAttributeNotPresent(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class);\n+                    assertAttributeNotPresent(field.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class);\n@@ -1491,1 +1469,1 @@\n-                Method init = findMethodOrFail(classFile, \"<init>\");\n+                MethodModel init = findMethodOrFail(classFile, \"<init>\");\n@@ -1495,4 +1473,4 @@\n-                    checkParameterAnno(classFile,\n-                            (RuntimeVisibleParameterAnnotations_attribute) findAttributeOrFail(\n-                                    init.attributes,\n-                                    RuntimeVisibleParameterAnnotations_attribute.class),\n+                    checkParameterAnno(\n+                            (RuntimeVisibleParameterAnnotationsAttribute) findAttributeOrFail(\n+                                    init.attributes(),\n+                                    RuntimeVisibleParameterAnnotationsAttribute.class),\n@@ -1501,1 +1479,1 @@\n-                    assertAttributeNotPresent(init.attributes, RuntimeVisibleAnnotations_attribute.class);\n+                    assertAttributeNotPresent(init.attributes(), RuntimeVisibleAnnotationsAttribute.class);\n@@ -1505,3 +1483,1 @@\n-                    checkTypeAnno(\n-                            classFile,\n-                            (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                    checkTypeAnno(findAttributeOrFail(init.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1510,1 +1486,1 @@\n-                    assertAttributeNotPresent(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class);\n+                    assertAttributeNotPresent(init.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class);\n@@ -1514,1 +1490,1 @@\n-                Method accessor = findMethodOrFail(classFile, \"s\");\n+                MethodModel accessor = findMethodOrFail(classFile, \"s\");\n@@ -1518,4 +1494,1 @@\n-                    checkAnno(classFile,\n-                            (RuntimeAnnotations_attribute) findAttributeOrFail(\n-                                    accessor.attributes,\n-                                    RuntimeVisibleAnnotations_attribute.class),\n+                    checkAnno(findAttributeOrFail(accessor.attributes(), RuntimeVisibleAnnotationsAttribute.class),\n@@ -1524,1 +1497,1 @@\n-                    assertAttributeNotPresent(accessor.attributes, RuntimeVisibleAnnotations_attribute.class);\n+                    assertAttributeNotPresent(accessor.attributes(), RuntimeVisibleAnnotationsAttribute.class);\n@@ -1528,3 +1501,1 @@\n-                    checkTypeAnno(\n-                            classFile,\n-                            (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+                    checkTypeAnno(findAttributeOrFail(accessor.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1533,1 +1504,1 @@\n-                    assertAttributeNotPresent(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class);\n+                    assertAttributeNotPresent(accessor.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class);\n@@ -1537,2 +1508,2 @@\n-                Record_attribute record = (Record_attribute) findAttributeOrFail(classFile.attributes, Record_attribute.class);\n-                Assert.check(record.component_count == 1);\n+                RecordAttribute record = (RecordAttribute) findAttributeOrFail(classFile.attributes(), RecordAttribute.class);\n+                Assert.check(record.components().size() == 1);\n@@ -1542,4 +1513,1 @@\n-                    checkAnno(classFile,\n-                            (RuntimeAnnotations_attribute) findAttributeOrFail(\n-                                    record.component_info_arr[0].attributes,\n-                                    RuntimeVisibleAnnotations_attribute.class),\n+                    checkAnno(findAttributeOrFail(record.components().get(0).attributes(), RuntimeVisibleAnnotationsAttribute.class),\n@@ -1548,1 +1516,1 @@\n-                    assertAttributeNotPresent(record.component_info_arr[0].attributes, RuntimeVisibleAnnotations_attribute.class);\n+                    assertAttributeNotPresent(record.components().get(0).attributes(), RuntimeVisibleAnnotationsAttribute.class);\n@@ -1552,5 +1520,1 @@\n-                    checkTypeAnno(\n-                            classFile,\n-                            (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(\n-                                    record.component_info_arr[0].attributes,\n-                                    RuntimeVisibleTypeAnnotations_attribute.class),\n+                    checkTypeAnno(findAttributeOrFail(record.components().get(0).attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1559,1 +1523,1 @@\n-                    assertAttributeNotPresent(record.component_info_arr[0].attributes, RuntimeVisibleTypeAnnotations_attribute.class);\n+                    assertAttributeNotPresent(record.components().get(0).attributes(), RuntimeVisibleTypeAnnotationsAttribute.class);\n@@ -1584,1 +1548,1 @@\n-        ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"R.class\"));\n+        ClassModel classFile = Classfile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n@@ -1587,5 +1551,3 @@\n-        Assert.check(classFile.fields.length == 1);\n-        Field field = classFile.fields[0];\n-        checkTypeAnno(\n-                classFile,\n-                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(field.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+        Assert.check(classFile.fields().size() == 1);\n+        FieldModel field = classFile.fields().get(0);\n+        checkTypeAnno(findAttributeOrFail(field.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1596,4 +1558,2 @@\n-        Method init = findMethodOrFail(classFile, \"<init>\");\n-        checkTypeAnno(\n-                classFile,\n-                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(init.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+        MethodModel init = findMethodOrFail(classFile, \"<init>\");\n+        checkTypeAnno(findAttributeOrFail(init.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1603,4 +1563,2 @@\n-        Method accessor = findMethodOrFail(classFile, \"s\");\n-        checkTypeAnno(\n-                classFile,\n-                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(accessor.attributes, RuntimeVisibleTypeAnnotations_attribute.class),\n+        MethodModel accessor = findMethodOrFail(classFile, \"s\");\n+        checkTypeAnno(findAttributeOrFail(accessor.attributes(), RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1610,7 +1568,4 @@\n-        Record_attribute record = (Record_attribute) findAttributeOrFail(classFile.attributes, Record_attribute.class);\n-        Assert.check(record.component_count == 1);\n-        checkTypeAnno(\n-                classFile,\n-                (RuntimeVisibleTypeAnnotations_attribute) findAttributeOrFail(\n-                            record.component_info_arr[0].attributes,\n-                                RuntimeVisibleTypeAnnotations_attribute.class),\n+        RecordAttribute record = (RecordAttribute) findAttributeOrFail(classFile.attributes(), RecordAttribute.class);\n+        Assert.check(record.components().size() == 1);\n+        checkTypeAnno(findAttributeOrFail(record.components().get(0).attributes(),\n+                                RuntimeVisibleTypeAnnotationsAttribute.class),\n@@ -1620,2 +1575,1 @@\n-    private void checkTypeAnno(ClassFile classFile,\n-                               RuntimeTypeAnnotations_attribute rtAnnos,\n+    private void checkTypeAnno(Attribute<?> rtAnnos,\n@@ -1623,1 +1577,1 @@\n-                               String annoName) throws Exception {\n+                               String annoName) {\n@@ -1625,4 +1579,15 @@\n-        Assert.check(rtAnnos.annotations.length == 1);\n-        TypeAnnotation tAnno = (TypeAnnotation)rtAnnos.annotations[0];\n-        Assert.check(tAnno.position.type.toString().equals(positionType));\n-        String annotationName = classFile.constant_pool.getUTF8Value(tAnno.annotation.type_index).toString().substring(1);\n+        TypeAnnotation tAnno;\n+        switch (rtAnnos) {\n+            case RuntimeVisibleTypeAnnotationsAttribute rtVAnnos -> {\n+                Assert.check(rtVAnnos.annotations().size() == 1);\n+                tAnno = rtVAnnos.annotations().get(0);\n+            }\n+            case RuntimeInvisibleTypeAnnotationsAttribute rtIAnnos -> {\n+                Assert.check(rtIAnnos.annotations().size() == 1);\n+                tAnno = rtIAnnos.annotations().get(0);\n+            }\n+            default -> throw new AssertionError();\n+        }\n+        assert tAnno != null;\n+        Assert.check(tAnno.targetInfo().targetType().name().equals(positionType));\n+        String annotationName = tAnno.classSymbol().displayName();\n@@ -1631,4 +1596,2 @@\n-\n-    private void checkAnno(ClassFile classFile,\n-                           RuntimeAnnotations_attribute rAnnos,\n-                           String annoName) throws Exception {\n+    private void checkAnno(Attribute<?> rAnnos,\n+                           String annoName) {\n@@ -1636,3 +1599,14 @@\n-        Assert.check(rAnnos.annotations.length == 1);\n-        Annotation anno = (Annotation)rAnnos.annotations[0];\n-        String annotationName = classFile.constant_pool.getUTF8Value(anno.type_index).toString().substring(1);\n+        Annotation anno;\n+        switch (rAnnos) {\n+            case RuntimeVisibleAnnotationsAttribute rVAnnos -> {\n+                Assert.check(rVAnnos.annotations().size() == 1);\n+                anno = rVAnnos.annotations().get(0);\n+            }\n+            case RuntimeInvisibleAnnotationsAttribute rIAnnos -> {\n+                Assert.check(rIAnnos.annotations().size() == 1);\n+                anno = rIAnnos.annotations().get(0);\n+            }\n+            default -> throw new AssertionError();\n+        }\n+        assert anno != null;\n+        String annotationName = anno.classSymbol().displayName();\n@@ -1643,3 +1617,2 @@\n-    private void checkParameterAnno(ClassFile classFile,\n-                           RuntimeVisibleParameterAnnotations_attribute rAnnos,\n-                           String annoName) throws Exception {\n+    private void checkParameterAnno(RuntimeVisibleParameterAnnotationsAttribute rAnnos,\n+                           String annoName) {\n@@ -1647,4 +1620,4 @@\n-        Assert.check(rAnnos.parameter_annotations.length == 1);\n-        Assert.check(rAnnos.parameter_annotations[0].length == 1);\n-        Annotation anno = (Annotation)rAnnos.parameter_annotations[0][0];\n-        String annotationName = classFile.constant_pool.getUTF8Value(anno.type_index).toString().substring(1);\n+        Assert.check(rAnnos.parameterAnnotations().size() == 1);\n+        Assert.check(rAnnos.parameterAnnotations().get(0).size() == 1);\n+        Annotation anno = rAnnos.parameterAnnotations().get(0).get(0);\n+        String annotationName = anno.classSymbol().displayName();\n@@ -1656,1 +1629,1 @@\n-            if (fileEntry.getName().equals(\"R.class\")) {\n+            if (fileEntry.getName().equals(name)) {\n@@ -1663,3 +1636,3 @@\n-    private Method findMethodOrFail(ClassFile classFile, String name) throws Exception {\n-        for (Method method : classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(name)) {\n+    private MethodModel findMethodOrFail(ClassModel classFile, String name) {\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(name)) {\n@@ -1672,3 +1645,3 @@\n-    private Attribute findAttributeOrFail(Attributes attributes, Class<? extends Attribute> attrClass) {\n-        for (Attribute attribute : attributes) {\n-            if (attribute.getClass() == attrClass) {\n+    private Attribute<?> findAttributeOrFail(List<Attribute<?>> attributes, Class<? extends Attribute<?>> attrClass) {\n+        for (Attribute<?> attribute : attributes) {\n+            if (attrClass.isAssignableFrom(attribute.getClass())) {\n@@ -1678,1 +1651,1 @@\n-        throw new AssertionError(\"attribute not found\");\n+        throw new AssertionError(\"attribute not found\" + attrClass.toString() + \"!!!!\" + attributes.getFirst().getClass().toString());\n@@ -1681,2 +1654,2 @@\n-    private void assertAttributeNotPresent(Attributes attributes, Class<? extends Attribute> attrClass) {\n-        for (Attribute attribute : attributes) {\n+    private void assertAttributeNotPresent(List<Attribute<?>> attributes, Class<? extends Attribute<?>> attrClass) {\n+        for (Attribute<?> attribute : attributes) {\n@@ -1720,1 +1693,1 @@\n-                    case FIELD:\n+                    case FIELD -> {\n@@ -1723,2 +1696,2 @@\n-                        break;\n-                    case METHOD:\n+                    }\n+                    case METHOD -> {\n@@ -1727,2 +1700,2 @@\n-                        break;\n-                    case PARAMETER:\n+                    }\n+                    case PARAMETER -> {\n@@ -1731,2 +1704,2 @@\n-                        break;\n-                    case RECORD_COMPONENT:\n+                    }\n+                    case RECORD_COMPONENT -> {\n@@ -1735,3 +1708,2 @@\n-                        break;\n-                    default:\n-                        throw new AssertionError(\"unexpected element kind\");\n+                    }\n+                    default -> throw new AssertionError(\"unexpected element kind\");\n@@ -1789,1 +1761,1 @@\n-        for (final File fileEntry : dir.listFiles()) {\n+        for (final File fileEntry : Objects.requireNonNull(dir.listFiles())) {\n@@ -1791,3 +1763,3 @@\n-                ClassFile classFile = ClassFile.read(fileEntry);\n-                for (Method method : classFile.methods)\n-                    switch (method.getName(classFile.constant_pool)) {\n+                ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                for (MethodModel method : classFile.methods())\n+                    switch (method.methodName().stringValue()) {\n@@ -1795,1 +1767,1 @@\n-                            Assert.check(method.access_flags.is(AccessFlags.ACC_PUBLIC) && method.access_flags.is(AccessFlags.ACC_FINAL));\n+                            Assert.check(((method.flags().flagsMask() & Classfile.ACC_PUBLIC) != 0) && ((method.flags().flagsMask() & Classfile.ACC_FINAL) != 0));\n@@ -1821,1 +1793,1 @@\n-            for (final File fileEntry : dir.listFiles()) {\n+            for (final File fileEntry : Objects.requireNonNull(dir.listFiles())) {\n@@ -1823,5 +1795,5 @@\n-                    ClassFile classFile = ClassFile.read(fileEntry);\n-                    for (Method method : classFile.methods)\n-                        if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n-                            Assert.check(method.access_flags.flags == accessFlag(a),\n-                                    \"was expecting access flag \" + accessFlag(a) + \" but found \" + method.access_flags.flags);\n+                    ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                    for (MethodModel method : classFile.methods())\n+                        if (method.methodName().equalsString(\"<init>\")) {\n+                            Assert.check(method.flags().flagsMask() == accessFlag(a),\n+                                    \"was expecting access flag \" + accessFlag(a) + \" but found \" + method.flags().flagsMask());\n@@ -1835,8 +1807,7 @@\n-        switch (access) {\n-            case \"private\": return 3;\n-            case \"protected\": return 1;\n-            case \"public\": return 0;\n-            case \"\": return 2;\n-            default:\n-                throw new AssertionError();\n-        }\n+        return switch (access) {\n+            case \"private\" -> 3;\n+            case \"protected\" -> 1;\n+            case \"public\" -> 0;\n+            case \"\" -> 2;\n+            default -> throw new AssertionError();\n+        };\n@@ -1846,8 +1817,7 @@\n-        switch (access) {\n-            case \"private\": return AccessFlags.ACC_PRIVATE;\n-            case \"protected\": return AccessFlags.ACC_PROTECTED;\n-            case \"public\": return AccessFlags.ACC_PUBLIC;\n-            case \"\": return 0;\n-            default:\n-                throw new AssertionError();\n-        }\n+        return switch (access) {\n+            case \"private\" -> Classfile.ACC_PRIVATE;\n+            case \"protected\" -> Classfile.ACC_PROTECTED;\n+            case \"public\" -> Classfile.ACC_PUBLIC;\n+            case \"\" -> 0;\n+            default -> throw new AssertionError();\n+        };\n@@ -2104,1 +2074,1 @@\n-            \/\/ dont execute this test when the default annotation processor is on as it will fail due to\n+            \/\/ don't execute this test when the default annotation processor is on as it will fail due to\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":162,"deletions":192,"binary":false,"changes":354,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,1 +50,0 @@\n-import com.sun.tools.classfile.*;\n","filename":"test\/langtools\/tools\/javac\/records\/RecordsBinaryCompatibilityTests.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,1 +41,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -50,1 +56,1 @@\n-    ClassFile cf;\n+    ClassModel cf;\n@@ -140,1 +146,1 @@\n-        cf = ClassFile.read(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n+        cf = Classfile.of().parse(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n@@ -142,3 +148,3 @@\n-        for (Field field : cf.fields) {\n-            if (\"generatedType\".equals(field.getName(cf.constant_pool))) {\n-                checkRuntimeVisibleAnnotation(field.attributes);\n+        for (FieldModel field : cf.fields()) {\n+            if (field.fieldName().equalsString(\"generatedType\")){\n+                checkRuntimeVisibleAnnotation(field);\n@@ -148,3 +154,3 @@\n-        for (Method method : cf.methods) {\n-            if (\"generatedType\".equals(method.getName(cf.constant_pool))) {\n-                checkRuntimeVisibleAnnotation(method.attributes);\n+        for (MethodModel method : cf.methods()) {\n+            if (method.methodName().equalsString(\"generatedType\")) {\n+                checkRuntimeVisibleAnnotation(method);\n@@ -155,3 +161,2 @@\n-    private void checkRuntimeVisibleAnnotation(Attributes attributes) throws Exception {\n-        RuntimeVisibleAnnotations_attribute annotations =\n-                (RuntimeVisibleAnnotations_attribute) attributes.get(Attribute.RuntimeVisibleAnnotations);\n+    private void checkRuntimeVisibleAnnotation(AttributedElement attributedElement) throws Exception {\n+        RuntimeVisibleAnnotationsAttribute annotations = attributedElement.findAttribute(Attributes.RUNTIME_VISIBLE_ANNOTATIONS).orElseThrow();\n@@ -159,2 +164,2 @@\n-        for (Annotation annotation : annotations.annotations) {\n-            if (\"LTestAnnotation;\".equals(cf.constant_pool.getUTF8Value(annotation.type_index))) {\n+        for (Annotation annotation : annotations.annotations()) {\n+            if (annotation.classSymbol().descriptorString().equals(\"LTestAnnotation;\")) {\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/AnnotationRecovery.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/LambdaRecovery.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/MethodModifiers.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,1 +50,0 @@\n-import com.sun.tools.classfile.*;\n@@ -55,2 +59,0 @@\n-import static com.sun.tools.classfile.ConstantPool.*;\n-\n","filename":"test\/langtools\/tools\/javac\/sealed\/BinaryCompatibilityTests.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -45,1 +50,4 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.constantpool.ConstantPoolException;\n@@ -54,2 +62,0 @@\n-import static com.sun.tools.classfile.ConstantPool.*;\n-\n@@ -132,4 +138,4 @@\n-        ClassFile sealedCF = ClassFile.read(out.resolve(cfName));\n-        Assert.check((sealedCF.access_flags.flags & Flags.FINAL) == 0, String.format(\"class at file %s must not be final\", cfName));\n-        PermittedSubclasses_attribute permittedSubclasses = (PermittedSubclasses_attribute)sealedCF.attributes.get(\"PermittedSubclasses\");\n-        Assert.check(permittedSubclasses.subtypes.length == expectedSubTypeNames.size());\n+        ClassModel sealedCF = Classfile.of().parse(out.resolve(cfName));\n+        Assert.check((sealedCF.flags().flagsMask() & Classfile.ACC_FINAL) == 0, String.format(\"class at file %s must not be final\", cfName));\n+        PermittedSubclassesAttribute permittedSubclasses = sealedCF.findAttribute(Attributes.PERMITTED_SUBCLASSES).orElseThrow();\n+        Assert.check(permittedSubclasses.permittedSubclasses().size() == expectedSubTypeNames.size());\n@@ -137,1 +143,1 @@\n-        IntStream.of(permittedSubclasses.subtypes).forEach(i -> {\n+        permittedSubclasses.permittedSubclasses().forEach(i -> {\n@@ -139,1 +145,1 @@\n-                subtypeNames.add(((CONSTANT_Class_info)sealedCF.constant_pool.get(i)).getName());\n+                subtypeNames.add(i.name().stringValue());\n@@ -150,1 +156,1 @@\n-        ClassFile subCF1 = ClassFile.read(out.resolve(cfName));\n+        ClassModel subCF1 = Classfile.of().parse(out.resolve(cfName));\n@@ -152,1 +158,1 @@\n-            Assert.check((subCF1.access_flags.flags & Flags.FINAL) != 0, String.format(\"class at file %s must be final\", cfName));\n+            Assert.check((subCF1.flags().flagsMask() & Classfile.ACC_FINAL) != 0, String.format(\"class at file %s must be final\", cfName));\n@@ -154,2 +160,2 @@\n-        Assert.checkNull((PermittedSubclasses_attribute)subCF1.attributes.get(\"PermittedSubclasses\"));\n-        Assert.check(((CONSTANT_Class_info)subCF1.constant_pool.get(subCF1.super_class)).getName().equals(superClassName));\n+        Assert.checkNull(subCF1.findAttribute(Attributes.PERMITTED_SUBCLASSES).orElse(null));\n+        Assert.check(subCF1.superclass().orElseThrow().name().equalsString(superClassName));\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8315735\n+ * @summary Verify valid classfile is produced when synchronized block is used\n+ *          inside a switch expression.\n+ * @compile ExpressionSwitchSynchronized.java\n+ * @run main ExpressionSwitchSynchronized\n+ *\/\n+public class ExpressionSwitchSynchronized {\n+\n+    public static void main(String... args) {\n+        int i1 = 2 + switch (args.length) {\n+            default -> {\n+                synchronized (args) {\n+                    yield 1;\n+                }\n+            }\n+        };\n+        if (i1 != 3) {\n+            throw new AssertionError(\"Incorrect value, got: \" + i1 +\n+                                     \", expected: \" + 3);\n+        }\n+        int i2 = 2 + switch (args) {\n+            case String[] a -> {\n+                synchronized (args) {\n+                    yield a.length + 1;\n+                }\n+            }\n+        };\n+        if (i2 != 3) {\n+            throw new AssertionError(\"Incorrect value, got: \" + i2 +\n+                                     \", expected: \" + 3);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchSynchronized.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -34,1 +34,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -96,2 +101,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.Classfile;\n@@ -216,8 +220,5 @@\n-                        case '+':\n-                            targetPattern = acceptPattern;\n-                            break;\n-                        case '-':\n-                            targetPattern = rejectPattern;\n-                            break;\n-                        default:\n-                            return ;\n+                        case '+' -> targetPattern = acceptPattern;\n+                        case '-' -> targetPattern = rejectPattern;\n+                        default -> {\n+                            return;\n+                        }\n@@ -259,1 +260,1 @@\n-        List<ToolBox.JavaSource> files = Arrays.asList(new ToolBox.JavaSource(\"Test\", \"\"));\n+        List<ToolBox.JavaSource> files = List.of(new ToolBox.JavaSource(\"Test\", \"\"));\n@@ -291,1 +292,1 @@\n-                    String name = ClassFile.read(in).getName().replace(\"\/\", \".\");\n+                    String name = Classfile.of().parse(in.readAllBytes()).thisClass().name().stringValue();\n@@ -294,1 +295,1 @@\n-                } catch (IOException | ConstantPoolException ex) {\n+                } catch (IOException ex) {\n","filename":"test\/langtools\/tools\/javac\/sym\/ElementStructureTest.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,6 +43,4 @@\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -219,4 +222,4 @@\n-            ClassFile cf = ClassFile.read(compiledTest);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -230,2 +233,2 @@\n-            Code_attribute ea = (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -235,6 +238,4 @@\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokevirtual\")) {\n-                    int cp_entry = i.getUnsignedShort(1);\n-                    CONSTANT_Methodref_info methRef =\n-                            (CONSTANT_Methodref_info)cf.constant_pool.get(cp_entry);\n-                    String type = methRef.getNameAndTypeInfo().getType();\n+            for (CodeElement i : ea.elementList()) {\n+                if (i instanceof InvokeInstruction ins && ins.opcode() == Opcode.INVOKEVIRTUAL) {\n+                    MemberRefEntry methRef = ins.method();\n+                    String type = methRef.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/varargs\/6199075\/T6199075.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -42,6 +47,5 @@\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.*;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n+import jdk.internal.classfile.constantpool.MethodRefEntry;\n+import jdk.internal.classfile.instruction.InvokeInstruction;\n@@ -273,4 +277,4 @@\n-            ClassFile cf = ClassFile.read(is);\n-            Method testMethod = null;\n-            for (Method m : cf.methods) {\n-                if (m.getName(cf.constant_pool).equals(\"test\")) {\n+            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            MethodModel testMethod = null;\n+            for (MethodModel m : cf.methods()) {\n+                if (m.methodName().equalsString(\"test\")) {\n@@ -285,3 +289,2 @@\n-            Code_attribute ea =\n-                (Code_attribute)testMethod.attributes.get(Attribute.Code);\n-            if (testMethod == null) {\n+            CodeAttribute ea = testMethod.findAttribute(Attributes.CODE).orElse(null);\n+            if (ea == null) {\n@@ -291,7 +294,4 @@\n-\n-            for (Instruction i : ea.getInstructions()) {\n-                if (i.getMnemonic().equals(\"invokevirtual\")) {\n-                    int cp_entry = i.getUnsignedShort(1);\n-                    CONSTANT_Methodref_info methRef =\n-                        (CONSTANT_Methodref_info)cf.constant_pool.get(cp_entry);\n-                    String type = methRef.getNameAndTypeInfo().getType();\n+            for (CodeElement i : ea.elementList()) {\n+                if (i instanceof InvokeInstruction ins && ins.opcode() == Opcode.INVOKEVIRTUAL) {\n+                    MemberRefEntry methRef = ins.method();\n+                    String type = methRef.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/varargs\/7042566\/T7042566.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,11 +179,0 @@\n-            \/\/ On AIX there is a bug:\n-            \/\/ When IPv6 is enabled on the system, the JDK opens sockets as AF_INET6.\n-            \/\/ If there's an interface configured with IPv4 addresses only, it should\n-            \/\/ be able to become the network interface for a multicast socket (that\n-            \/\/ could be in both, IPv4 or IPv6 space). But both possible setsockopt\n-            \/\/ calls for either IPV6_MULTICAST_IF or IP_MULTICAST_IF return\n-            \/\/ EADDRNOTAVAIL. So we must skip such interfaces here.\n-            if (Platform.isAix() && isIPv6Available() && !hasIp6Addresses(nif)) {\n-                return false;\n-            }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/OSVersion.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/AbstractJavaHeapObjectVisitor.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ArrayTypeCodes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/HackJavaValue.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaBoolean.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaByte.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaChar.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaClass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaDouble.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaField.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaFloat.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaHeapObject.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaHeapObjectVisitor.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaInt.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaLazyReadObject.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaLong.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaObject.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaObjectArray.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaObjectRef.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaShort.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaStatic.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaThing.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaValue.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaValueArray.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReachableExcludes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReachableExcludesImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReachableObjects.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReferenceChain.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Root.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackFrame.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackTrace.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/FileReadBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/HprofReader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/MappedReadBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/PositionDataInputStream.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/PositionInputStream.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/ReadBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/Reader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/util\/ArraySorter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/util\/Comparer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/util\/CompositeEnumeration.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/util\/Misc.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/util\/VectorSorter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/AppExecutorHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/CommonHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventField.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventTypePrototype.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventVerifier.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Events.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/FileHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/GCHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/RecurseThread.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/SimpleEvent.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/SimpleEventHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/SimpleSetting.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/StreamingUtils.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Stressor.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/TestClassLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/VoidFunction.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,0 +131,7 @@\n+static void\n+check_jvmti_error(jvmtiError err, const char* msg) {\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"check_jvmti_error: JVMTI function returned error: %s: %s(%d)\\n\", msg, TranslateError(err), err);\n+    abort();\n+  }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestCompileCommands.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestCopyFiles.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestFixDepsFile.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestIdea.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestJavaCompilation.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestMake.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/TestMakeBase.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/UtilsForTests.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n+# published by the Free Software Foundation.\n","filename":"test\/make\/autoconf\/test.m4","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3, jvmArgsAppend = {\"-Xmx1g\", \"-Xms1g\"})\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+public class CallerClassBench {\n+    static final StackWalker INST = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+\n+    @Benchmark\n+    public Class<?> getCallerClass() {\n+        return INST.getCallerClass();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/CallerClassBench.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Characters.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.Set;\n+\n@@ -39,0 +41,2 @@\n+import static java.lang.StackWalker.Option.*;\n+\n@@ -49,1 +53,4 @@\n-    private static final StackWalker WALKER_DEFAULT = StackWalker.getInstance();\n+    private static final StackWalker WALKER =\n+            StackWalker.getInstance(RETAIN_CLASS_REFERENCE);\n+    private static final StackWalker WALKER_CLASS_ONLY =\n+            StackWalker.getInstance(Set.of(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE));\n@@ -51,2 +58,7 @@\n-    private static final StackWalker WALKER_CLASS =\n-        StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+    static StackWalker walker(String name) {\n+        return switch (name) {\n+            case \"class+method\" -> WALKER;\n+            case \"class_only\" -> WALKER_CLASS_ONLY;\n+            default -> throw new IllegalArgumentException(name);\n+        };\n+    }\n@@ -66,0 +78,3 @@\n+    @Param({\"class+method\", \"class_only\"})\n+    public String walker;\n+\n@@ -178,1 +193,1 @@\n-                WALKER_DEFAULT.forEach(localBH::consume);\n+                walker(walker).forEach(localBH::consume);\n@@ -196,1 +211,1 @@\n-                WALKER_DEFAULT.walk(s -> {\n+                walker(walker).walk(s -> {\n@@ -215,0 +230,2 @@\n+        final StackWalker sw = walker(walker);\n+        if (sw == WALKER_CLASS_ONLY) return;\n@@ -217,1 +234,1 @@\n-                WALKER_DEFAULT.walk( s -> {\n+                sw.walk( s -> {\n@@ -236,0 +253,1 @@\n+        final StackWalker sw = walker(walker);\n@@ -238,1 +256,1 @@\n-                WALKER_CLASS.walk(s -> {\n+                sw.walk(s -> {\n@@ -250,0 +268,21 @@\n+    \/**\n+     * Use Stackwalker.walk() to fetch all instances\n+     *\/\n+    @Benchmark\n+    public void walk_StackFrame(Blackhole bh) {\n+        final Blackhole localBH = bh;\n+        final boolean[] done = {false};\n+        new TestStack(depth, new Runnable() {\n+            public void run() {\n+                walker(walker).walk(s -> {\n+                    s.forEach(localBH::consume);\n+                    return null;\n+                });\n+                done[0] = true;\n+            }\n+        }).start();\n+        if (!done[0]) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n@@ -257,0 +296,3 @@\n+        final StackWalker sw = walker(walker);\n+        if (sw == WALKER_CLASS_ONLY) return;\n+\n@@ -259,1 +301,1 @@\n-                WALKER_DEFAULT.walk(s -> {\n+                sw.walk(s -> {\n@@ -272,1 +314,2 @@\n-     * StackWalker.getCallerClass()\n+     * StackWalker.getCallerClass() with generated call stack of\n+     * the given depth.\n@@ -275,1 +318,1 @@\n-    public void getCallerClass(Blackhole bh) {\n+    public void getCallerClass_withTestStack(Blackhole bh) {\n@@ -278,0 +321,1 @@\n+        final StackWalker sw = walker(walker);\n@@ -280,1 +324,1 @@\n-                localBH.consume(WALKER_CLASS.getCallerClass());\n+                localBH.consume(sw.getCallerClass());\n@@ -289,0 +333,18 @@\n+    \/**\n+     * Baseline for generating a call stack of the given depth.\n+     * (No StackWalk operations are executed)\n+     *\/\n+     @Benchmark\n+     public void makeCallStack(Blackhole bh) {\n+         final Blackhole localBH = bh;\n+         final boolean[] done = {false};\n+         new TestStack(depth, new Runnable() {\n+             public void run() {\n+                 done[0] = true;\n+             }\n+         }).start();\n+         if (!done[0]) {\n+             throw new RuntimeException();\n+         }\n+     }\n+\n@@ -298,1 +360,1 @@\n-\n+        final StackWalker sw = walker(walker);\n@@ -302,1 +364,1 @@\n-                WALKER_CLASS.walk(s -> {\n+                sw.walk(s -> {\n@@ -324,1 +386,1 @@\n-\n+        final StackWalker sw = walker(walker);\n@@ -328,1 +390,1 @@\n-                WALKER_CLASS.walk(s -> {\n+                sw.walk(s -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StackWalkBench.java","additions":78,"deletions":16,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentVsBits.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/libPtr.c","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/libStrLen.c","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/X-Buffers-bin.java.template","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/X-ByteBuffers-bin.java.template","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/GetContext.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,3 +6,1 @@\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n+published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/README","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESGCMByteBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AbstractCorpusBenchmark.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdHocAdapt.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdaptInjectNoop.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdaptMetadata.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdaptNull.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ClassfileBenchmark.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/GenerateStackMaps.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ParseOptions.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadDeep.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadMetadata.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RepeatedModelTraversal.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/TestConstants.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/Multiple.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/MultipleWithLoads.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/MultipleWithStores.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/SafePublishing.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/Single.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}