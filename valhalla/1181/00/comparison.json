{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6529795\n+ * @bug 6529795 8336669\n@@ -102,1 +102,1 @@\n-                m.put(i, i);\n+                m.put(\"BASE-\" + i, i);\n","filename":"test\/jdk\/java\/util\/Collection\/IteratorAtEnd.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6585904\n+ * @bug 6585904 8336669\n@@ -44,9 +44,9 @@\n-        Map<Integer, Integer> m1 = checkedMap(\n-            new IdentityHashMap<Integer, Integer>(),\n-            Integer.class, Integer.class);\n-        Map<Integer, Integer> m2 = checkedMap(\n-            new IdentityHashMap<Integer, Integer>(),\n-            Integer.class, Integer.class);\n-        \/\/ NB: these are unique instances. Compare vs. Integer.valueOf(1)\n-        m1.put(new Integer(1), new Integer(1));\n-        m2.put(new Integer(1), new Integer(1));\n+        Map<String, String> m1 = checkedMap(\n+            new IdentityHashMap<>(),\n+            String.class, String.class);\n+        Map<String, String> m2 = checkedMap(\n+            new IdentityHashMap<>(),\n+            String.class, String.class);\n+        \/\/ NB: these are unique instances. Compare vs. \"A\"\n+        m1.put(new String(\"A\"), new String(\"A\"));\n+        m2.put(new String(\"A\"), new String(\"A\"));\n@@ -54,2 +54,2 @@\n-        Map.Entry<Integer, Integer> e1 = m1.entrySet().iterator().next();\n-        Map.Entry<Integer, Integer> e2 = m2.entrySet().iterator().next();\n+        Map.Entry<String, String> e1 = m1.entrySet().iterator().next();\n+        Map.Entry<String, String> e2 = m2.entrySet().iterator().next();\n","filename":"test\/jdk\/java\/util\/Collections\/CheckedIdentityMap.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug     4904067\n+ * @bug     4904067 8336669\n@@ -112,1 +112,1 @@\n-            s.add(new Integer(i));\n+            s.add(i);\n@@ -150,1 +150,1 @@\n-            itAll.set(new Integer(i.intValue()));\n+            itAll.set(i);\n@@ -152,5 +152,0 @@\n-        itAll = all.listIterator();\n-        it = s.iterator();\n-        while (it.hasNext())\n-            if (it.next()==itAll.next())\n-                fail(\"Iterator.set failed to change value.\");\n@@ -184,1 +179,1 @@\n-        ia[listSize] = new Integer(69);\n+        ia[listSize] = 69;\n","filename":"test\/jdk\/java\/util\/Collections\/CheckedListBash.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+ * @bug 8336669\n@@ -41,0 +42,11 @@\n+    \/\/ An interned identity class holding an int (like non-Preview Integer)\n+    record Int(int intValue) implements Comparable<Int> {\n+        @Override\n+        public int compareTo(Int o) {\n+            if (!(o instanceof Int other)) {\n+                throw new IllegalArgumentException(\"Incomparable type: \" + o.getClass().getName());\n+            }\n+            return Integer.compare(intValue, other.intValue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/util\/HashMap\/ToArray.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6306829\n+ * @bug 6306829 8336669\n@@ -46,0 +46,11 @@\n+    \/\/ An identity class holding an char (like non-Preview Character)\n+    record Char(char c) implements Comparable<Char> {\n+        @Override\n+        public int compareTo(Char ch) {\n+            if (!(ch instanceof Char other)) {\n+                throw new IllegalArgumentException(\"Incomparable type: \" + ch.getClass().getName());\n+            }\n+            return Character.compare(c, other.c);\n+        }\n+    }\n+\n@@ -47,8 +58,8 @@\n-        testMap(new Hashtable<Character,Boolean>());\n-        testMap(new HashMap<Character,Boolean>());\n-        testMap(new IdentityHashMap<Character,Boolean>());\n-        testMap(new LinkedHashMap<Character,Boolean>());\n-        testMap(new ConcurrentHashMap<Character,Boolean>());\n-        testMap(new WeakHashMap<Character,Boolean>());\n-        testMap(new TreeMap<Character,Boolean>());\n-        testMap(new ConcurrentSkipListMap<Character,Boolean>());\n+        testMap(new Hashtable<Char,Boolean>());\n+        testMap(new HashMap<Char,Boolean>());\n+        testMap(new IdentityHashMap<Char,Boolean>());\n+        testMap(new LinkedHashMap<Char,Boolean>());\n+        testMap(new ConcurrentHashMap<Char,Boolean>());\n+        testMap(new WeakHashMap<Char,Boolean>());\n+        testMap(new TreeMap<Char,Boolean>());\n+        testMap(new ConcurrentSkipListMap<Char,Boolean>());\n@@ -57,2 +68,2 @@\n-    private static void put(Map<Character,Boolean> m,\n-                            Character key, Boolean value,\n+    private static void put(Map<Char,Boolean> m,\n+                            Char key, Boolean value,\n@@ -73,1 +84,1 @@\n-    private static void testMap(Map<Character,Boolean> m) {\n+    private static void testMap(Map<Char,Boolean> m) {\n@@ -83,4 +94,5 @@\n-        put(m, 'A', true,  null);\n-        put(m, 'A', false, true);       \/\/ Guaranteed identical by JLS\n-        put(m, 'B', true,  null);\n-        put(m, new Character('A'), false, usesIdentity ? null : false);\n+        Char aCh = new Char('A');\n+        put(m, aCh, true,  null);\n+        put(m, aCh, false, true);\n+        put(m, new Char('B'), true,  null);\n+        put(m, new Char('A'), false, usesIdentity ? null : false);\n@@ -104,3 +116,4 @@\n-                put(m, 'C', null, null);\n-                put(m, 'C', true, null);\n-                put(m, 'C', null, true);\n+                Char cCh = new Char('C');\n+                put(m, cCh, null, null);\n+                put(m, cCh, true, null);\n+                put(m, cCh, null, true);\n@@ -110,1 +123,1 @@\n-            try { m.put('A', null); fail(m.getClass().getName() + \" did not reject null key\"); }\n+            try { m.put(new Char('A'), null); fail(m.getClass().getName() + \" did not reject null key\"); }\n@@ -114,1 +127,1 @@\n-            try { m.put('C', null); fail(m.getClass().getName() + \" did not reject null key\"); }\n+            try { m.put(new Char('C'), null); fail(m.getClass().getName() + \" did not reject null key\"); }\n","filename":"test\/jdk\/java\/util\/Map\/Get.java","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6612102\n+ * @bug 6612102 8336669\n@@ -52,0 +52,20 @@\n+    \/\/ An interned identity class holding an int (like non-Preview Integer)\n+    \/\/ interned for IdentityHashMap\n+    \/\/ identity for WeakHashMap\n+    private record Int(int intValue) implements Comparable<Int> {\n+        private static Map<Integer, Int> interned = new HashMap<>(100);\n+\n+        \/\/ Return a unique Ini for each int.\n+        static Int intern(int intValue) {\n+            return interned.computeIfAbsent(intValue, (i) -> new Int(i));\n+        }\n+\n+        @Override\n+        public int compareTo(Int o) {\n+            if (!(o instanceof Int other)) {\n+                throw new IllegalArgumentException(\"Incomparable type: \" + o.getClass().getName());\n+            }\n+            return Integer.compare(intValue, other.intValue);\n+        }\n+    }\n+\n@@ -115,3 +135,3 @@\n-                Collections.checkedMap(new HashMap(16), Integer.class, Integer.class),\n-                Collections.checkedSortedMap(new TreeMap(), Integer.class, Integer.class),\n-                Collections.checkedNavigableMap(new TreeMap(), Integer.class, Integer.class),\n+                Collections.checkedMap(new HashMap(16), Int.class, Integer.class),\n+                Collections.checkedSortedMap(new TreeMap(), Int.class, Integer.class),\n+                Collections.checkedNavigableMap(new TreeMap(), Int.class, Integer.class),\n@@ -123,1 +143,1 @@\n-                put(maps, r.nextInt(100), r.nextInt(100));\n+                put(maps, Int.intern(r.nextInt(100)), r.nextInt(100));\n","filename":"test\/jdk\/java\/util\/Map\/LockStep.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8008785\n+ * @bug 8008785 8336669\n@@ -41,0 +41,4 @@\n+    static String genString(int i) {\n+        return \"BASE-\" + HexFormat.of().toHexDigits(i);\n+    }\n+\n@@ -42,1 +46,1 @@\n-        Map<Integer, Long>[] maps = (Map<Integer, Long>[]) new Map[]{\n+        Map<String, Long>[] maps = (Map<String, Long>[]) new Map[]{\n@@ -54,1 +58,1 @@\n-        for (Map<Integer, Long> map : maps) {\n+        for (Map<String, Long> map : maps) {\n@@ -63,1 +67,1 @@\n-    private static final Integer[] KEYS = new Integer[TEST_SIZE];\n+    private static final String[] KEYS = new String[TEST_SIZE];\n@@ -69,1 +73,2 @@\n-            KEYS[each]   = Integer.valueOf(each);\n+            \/\/ BUG: WeakHashMap of value object!\n+            KEYS[each]   = genString(each);\n@@ -75,1 +80,1 @@\n-    private static void testMap(Map<Integer, Long> map) {\n+    private static void testMap(Map<String, Long> map) {\n@@ -101,3 +106,3 @@\n-        Map.Entry<Integer,Long>[] entries = map.entrySet().toArray(new Map.Entry[TEST_SIZE]);\n-        Arrays.sort( entries,new Comparator<Map.Entry<Integer,Long>>() {\n-                public int compare(Map.Entry<Integer,Long> o1, Map.Entry<Integer,Long> o2) {\n+        Map.Entry<String,Long>[] entries = map.entrySet().toArray(new Map.Entry[TEST_SIZE]);\n+        Arrays.sort( entries,new Comparator<Map.Entry<String,Long>>() {\n+                public int compare(Map.Entry<String,Long> o1, Map.Entry<String,Long> o2) {\n","filename":"test\/jdk\/java\/util\/Map\/ToArray.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}