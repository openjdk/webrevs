{"files":[{"patch":"@@ -46,4 +46,1 @@\n-            if (!(o instanceof Int other)) {\n-                throw new IllegalArgumentException(\"Incomparable type: \" + o.getClass().getName());\n-            }\n-            return Integer.compare(intValue, other.intValue);\n+            return Integer.compare(intValue, o.intValue);\n","filename":"test\/jdk\/java\/util\/HashMap\/ToArray.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,4 +50,1 @@\n-            if (!(ch instanceof Char other)) {\n-                throw new IllegalArgumentException(\"Incomparable type: \" + ch.getClass().getName());\n-            }\n-            return Character.compare(c, other.c);\n+            return Character.compare(c, ch.c);\n","filename":"test\/jdk\/java\/util\/Map\/Get.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        private static Map<Integer, Int> interned = new HashMap<>(100);\n+        private static final Map<Integer, Int> interned = new HashMap<>(100);\n@@ -65,4 +65,1 @@\n-            if (!(o instanceof Int other)) {\n-                throw new IllegalArgumentException(\"Incomparable type: \" + o.getClass().getName());\n-            }\n-            return Integer.compare(intValue, other.intValue);\n+            return Integer.compare(intValue, o.intValue);\n","filename":"test\/jdk\/java\/util\/Map\/LockStep.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        Map<String, Long>[] maps = (Map<String, Long>[]) new Map[]{\n+        Map<String, Long>[] maps = (Map<String, Long>[]) new Map<?,?>[]{\n","filename":"test\/jdk\/java\/util\/Map\/ToArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}