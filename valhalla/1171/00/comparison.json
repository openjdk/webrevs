{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4243978\n+ * @bug 4243978 8336671\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -31,1 +32,4 @@\n-    static class NumberedWeakReference extends WeakReference<Integer> {\n+\n+    record Numbered(int number) {}\n+\n+    static class NumberedWeakReference extends WeakReference<Numbered> {\n@@ -35,1 +39,1 @@\n-        NumberedWeakReference(Integer referent, ReferenceQueue<Integer> q, int i) {\n+        NumberedWeakReference(Numbered referent, ReferenceQueue<Numbered> q, int i) {\n@@ -56,1 +60,1 @@\n-        ReferenceQueue<Integer> refQueue = new ReferenceQueue<>();\n+        ReferenceQueue<Numbered> refQueue = new ReferenceQueue<>();\n@@ -62,2 +66,2 @@\n-        \/\/ To this end, we create many Reference objects, each with a\n-        \/\/ a unique integer object as its referant.\n+        \/\/ To this end, we create many Reference objects, each with\n+        \/\/ a unique Numbered object as its referant.\n@@ -67,2 +71,2 @@\n-        \/\/ Finally we check that all of the Reference objects\n-        \/\/ end up on the their queue. The test was originally\n+        \/\/ Finally, we check that all of the Reference objects\n+        \/\/ end up on their queue. The test was originally\n@@ -74,1 +78,1 @@\n-        Integer obj = new Integer(0);\n+        Numbered obj = new Numbered(0);\n@@ -77,3 +81,3 @@\n-            \/\/ Create a new object, dropping the onlY strong reference to\n-            \/\/ the previous Integer object.\n-            obj = new Integer(i);\n+            \/\/ Create a new object, dropping the only strong reference to\n+            \/\/ the previous Numbered object.\n+            obj = new Numbered(i);\n@@ -90,1 +94,1 @@\n-            \/\/ Get a new weaky for the Integer object just\n+            \/\/ Get a new weaky for the Numbered object just\n@@ -115,1 +119,1 @@\n-    private static NumberedWeakReference waitForReference(ReferenceQueue<Integer> queue) {\n+    private static NumberedWeakReference waitForReference(ReferenceQueue<Numbered> queue) {\n@@ -123,1 +127,1 @@\n-    private static void checkResult(ReferenceQueue<Integer> queue,\n+    private static void checkResult(ReferenceQueue<Numbered> queue,\n@@ -152,1 +156,1 @@\n-        sort(length);\n+        Arrays.sort(a, 0, length);\n@@ -194,17 +198,0 @@\n-    \/\/ Bubble sort the first \"length\" elements in array \"a\".\n-    private static void sort(int length) {\n-        int hold;\n-        if (debug) {\n-            System.out.println(\"Sorting. Length=\" + length);\n-        }\n-        for (int pass = 1; pass < length; pass++) {    \/\/ passes over the array\n-            for (int i = 0; i < length - pass; i++) {  \/\/  a single pass\n-                if (a[i] > a[i + 1]) {  \/\/ then swap\n-                    hold = a[i];\n-                    a[i] = a[i + 1];\n-                    a[i + 1] = hold;\n-                }\n-            }  \/\/ End of i loop\n-        } \/\/ End of pass loop\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/ref\/ReferenceEnqueuePending.java","additions":21,"deletions":34,"binary":false,"changes":55,"status":"modified"}]}