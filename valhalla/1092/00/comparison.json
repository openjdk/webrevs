{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ByteVector;\n@@ -45,1 +42,0 @@\n-import java.util.HashSet;\n@@ -50,1 +46,0 @@\n-import java.util.Set;\n@@ -461,0 +456,6 @@\n+     *\n+     * If a proxy interface references any value classes, the value classes\n+     * are listed in the preload attribute of the interface class.  The\n+     * classes that are referenced by the proxy interface have already\n+     * been loaded before the proxy class.  Hence the proxy class is\n+     * generated with no preload attributes as it essentially has no effect.\n@@ -463,2 +464,1 @@\n-        int version = CLASSFILE_VERSION | (PreviewFeatures.isEnabled() ? Opcodes.V_PREVIEW : 0);\n-        visit(version, accessFlags, dotToSlash(className), null,\n+        visit(CLASSFILE_VERSION, accessFlags, dotToSlash(className), null,\n@@ -492,2 +492,0 @@\n-         *\n-         * Determine if any value classes to be preloaded.\n@@ -495,1 +493,0 @@\n-        Set<Class<?>> preloadClasses = new HashSet<>();\n@@ -498,3 +495,0 @@\n-            for (ProxyMethod pm : sigmethods) {\n-                preloadClasses.addAll(pm.preloadClasses());\n-            }\n@@ -515,3 +509,0 @@\n-        if (preloadClasses.size() > 0) {\n-            generatePreloadAttribute(preloadClasses);\n-        }\n@@ -699,18 +690,0 @@\n-    private void generatePreloadAttribute(Set<Class<?>> preloadClasses) {\n-        Attribute attr = new Attribute(\"Preload\") {\n-            @Override\n-            protected ByteVector write(ClassWriter cw,\n-                                       byte[] code,\n-                                       int len,\n-                                       int maxStack,\n-                                       int maxLocals) {\n-                ByteVector attr = new ByteVector();\n-                attr.putShort(preloadClasses.size());\n-                for (Class<?> c : preloadClasses) {\n-                    attr.putShort(cw.newClass(Type.getInternalName(c)));\n-                }\n-                return attr;\n-            }\n-        };\n-        visitAttribute(attr);\n-    }\n@@ -846,21 +819,0 @@\n-        Set<Class<?>> preloadClasses() {\n-            Set<Class<?>> preloadClasses = new HashSet<>();\n-            for (Class<?> type : parameterTypes) {\n-                if (requiresPreload(type)) {\n-                    preloadClasses.add(type);\n-                }\n-            }\n-            if (requiresPreload(returnType)) {\n-                preloadClasses.add(returnType);\n-            }\n-            return preloadClasses;\n-        }\n-\n-        boolean requiresPreload(Class<?> cls) {\n-            Class<?> c = cls;\n-            while (c.isArray()) {\n-                c = c.getComponentType();\n-            }\n-            return c.isValue();\n-        }\n-\n@@ -955,1 +907,1 @@\n-         * may caused the checked ClassNotFoundException to be thrown. A class\n+         * may cause the checked ClassNotFoundException to be thrown. A class\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":8,"deletions":56,"binary":false,"changes":64,"status":"modified"}]}