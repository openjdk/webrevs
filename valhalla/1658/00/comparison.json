{"files":[{"patch":"@@ -64,6 +64,0 @@\n-\n-\n-tools\/javac\/SuperInit\/EarlyAssignments.java                                     8369090 generic-all\n-tools\/javac\/SuperInit\/SuperInitFails.java                                       8369090 generic-all\n-tools\/javac\/SuperInit\/SuperInitGood.java                                        8369090 generic-all\n-tools\/javac\/processing\/model\/element\/TestValueClasses.java                      8369090 generic-all\n","filename":"test\/langtools\/ProblemList.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * @run main InitializationWarningTester EarlyAssignments\n+ * @run main InitializationWarningTester EarlyAssignments EarlyAssignmentsWarnings.out\n@@ -157,1 +157,1 @@\n-        @IgnoreMethod\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+EarlyAssignments.java:159:13: compiler.err.cant.assign.val.to.var: final, x\n+EarlyAssignments.java:33:26: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:34:21: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:35:26: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:36:34: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:38:36: compiler.warn.would.not.be.allowed.in.prologue: this\n+EarlyAssignments.java:42:17: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:46:21: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:50:22: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:68:13: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:69:17: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:70:25: compiler.warn.would.not.be.allowed.in.prologue: this\n+EarlyAssignments.java:71:31: compiler.warn.would.not.be.allowed.in.prologue: this\n+EarlyAssignments.java:121:17: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:126:22: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:131:29: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:136:22: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:141:28: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:150:13: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:159:13: compiler.warn.would.not.be.allowed.in.prologue: x\n+EarlyAssignments.java:170:13: compiler.warn.would.not.be.allowed.in.prologue: this\n+EarlyAssignments.java:170:18: compiler.warn.would.not.be.allowed.in.prologue: EarlyAssignments.Inner8\n+EarlyAssignments.java:179:17: compiler.warn.would.not.be.allowed.in.prologue: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentsWarnings.out","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -7,1 +7,1 @@\n- * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest\n+ * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest EarlyInnerAccessErrorMessageTestWarnings.out\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+EarlyInnerAccessErrorMessageTest.java:13:34: compiler.warn.would.not.be.allowed.in.prologue: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTestWarnings.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -7,1 +7,1 @@\n- * @run main InitializationWarningTester EarlyLocalClass\n+ * @run main InitializationWarningTester EarlyLocalClass EarlyLocalClassWarnings.out\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+EarlyLocalClass.java:13:37: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClassWarnings.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface ErrorExpected {}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ErrorExpected.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface IgnoreMethod {}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/IgnoreMethod.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Arrays;\n@@ -83,1 +84,4 @@\n-        tester.test(baseDir, args[0]);\n+        Assert.check(args.length <= 2, \"unexpected number of arguments\");\n+        String className = args[0];\n+        String warningsGoldenFileName = args.length > 1 ? args[1] : null;\n+        tester.test(baseDir, className, warningsGoldenFileName);\n@@ -92,14 +96,6 @@\n-                if (!ignoreDiagnostics &&\n-                    (message.getCode().contains(warningKey) ||\n-                     message.getCode().contains(errorKey1) ||\n-                     message.getCode().contains(errorKey2))) {\n-                    if ((message.getCode().contains(errorKey1) ||\n-                            message.getCode().contains(errorKey2)) &&\n-                            !errorExpected) {\n-                        throw new AssertionError(\"error key not expected \" + message);\n-                    }\n-                    JCDiagnostic diagnostic = (JCDiagnostic) message;\n-                    String msgData = ((PathFileObject)diagnostic.getDiagnosticSource().getFile()).getShortName() +\n-                            \":\" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \": \" + diagnostic.getCode() + \": \" +\n-                            diagnostic.getArgs()[0];\n-                    compilationOutput.add(msgData);\n+                JCDiagnostic diagnostic = (JCDiagnostic) message;\n+                String msgData = ((PathFileObject)diagnostic.getDiagnosticSource().getFile()).getShortName() +\n+                        \":\" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \": \" + diagnostic.getCode();\n+                if (diagnostic.getArgs() != null && diagnostic.getArgs().length > 0) {\n+                    msgData += \": \" + Arrays.stream(diagnostic.getArgs()).map(o -> o.toString())\n+                            .collect(Collectors.joining(\", \"));\n@@ -107,0 +103,1 @@\n+                compilationOutput.add(msgData);\n@@ -120,5 +117,1 @@\n-    static final String errorKey1 = \"compiler.err.cant.ref.before.ctor.called\";\n-    static final String errorKey2 = \"compiler.err.cant.assign.initialized.before.ctor.called\";\n-    static final String warningKey = \"compiler.warn.would.not.be.allowed.in.prologue\";\n-\n-    void test(Path baseDir, String className) throws Throwable {\n+    void test(Path baseDir, String className, String warningsGoldenFileName) throws Throwable {\n@@ -126,1 +119,1 @@\n-        Path goldenFile = Files.exists(baseDir.resolve(className + \".out\")) ? baseDir.resolve(className + \".out\") : null;\n+        Path goldenFile = warningsGoldenFileName != null ? baseDir.resolve(warningsGoldenFileName) : null;\n@@ -132,4 +125,12 @@\n-            goldenFileContent = goldenFileContent.stream()\n-                    .filter(s -> s.contains(errorKey1) || s.contains(errorKey2))\n-                    .collect(Collectors.toList());\n-            Assert.check(goldenFileContent.size() == compilationOutput.size(), \"compilation output length mismatch\");\n+            if (goldenFileContent.size() != compilationOutput.size()) {\n+                System.err.println(\"compilation output length mismatch\");\n+                System.err.println(\"    golden file content:\");\n+                for (String s : goldenFileContent) {\n+                    System.err.println(\"        \" + s);\n+                }\n+                System.err.println(\"    warning compilation result:\");\n+                for (String s : compilationOutput) {\n+                    System.err.println(\"        \" + s);\n+                }\n+                throw new AssertionError(\"compilation output length mismatch\");\n+            }\n@@ -139,5 +140,1 @@\n-                if (warningLine.contains(warningKey)) {\n-                    goldenLine = goldenLine.replace(errorKey1, warningKey);\n-                    goldenLine = goldenLine.replace(errorKey2, warningKey);\n-                }\n-                Assert.check(warningLine.equals(goldenLine), \"error for line \" + warningLine);\n+                Assert.check(warningLine.equals(goldenLine), \"error, found:\\n\" + warningLine + \"\\nexpected:\\n\" + goldenLine);\n@@ -146,1 +143,7 @@\n-            Assert.check(compilationOutput.size() == 0);\n+            if (compilationOutput.size() != 0) {\n+                System.err.println(\"    expecting empty compilation output, got:\");\n+                for (String s : compilationOutput) {\n+                    System.err.println(\"        \" + s);\n+                }\n+                throw new AssertionError(\"expected empty compilation output\");\n+            }\n@@ -158,5 +161,0 @@\n-    \/\/ ignore diagnostics\n-    boolean ignoreDiagnostics = false;\n-    \/\/ even when compiling with warnings on, an error will be produced\n-    boolean errorExpected = false;\n-\n@@ -176,21 +174,13 @@\n-            boolean previousIgnoreDiags = tester.ignoreDiagnostics;\n-            boolean previousErrExpected = tester.errorExpected;\n-            try {\n-                if (TreeInfo.isConstructor(tree)) {\n-                    \/\/ remove the super constructor call if it is a no arguments invocation\n-                    List<Attribute.Compound> attributes = tree.sym.getDeclarationAttributes();\n-                    for (Attribute.Compound attribute : attributes) {\n-                        if (attribute.toString().equals(\"@IgnoreMethod\")) {\n-                            tester.ignoreDiagnostics = true;\n-                        } else if (attribute.toString().equals(\"@ErrorExpected\")) {\n-                            tester.errorExpected = true;\n-                        }\n-                    }\n-                    if (TreeInfo.hasAnyConstructorCall(tree) && !tester.errorExpected) {\n-                        ListBuffer<JCStatement> newStats = new ListBuffer<>();\n-                        for (JCStatement statement : tree.body.stats) {\n-                            if (statement instanceof JCExpressionStatement expressionStatement &&\n-                                    expressionStatement.expr instanceof JCMethodInvocation methodInvocation) {\n-                                if (TreeInfo.isConstructorCall(methodInvocation) && methodInvocation.args.isEmpty()) {\n-                                    continue;\n-                                }\n+            if (TreeInfo.isConstructor(tree)) {\n+                \/* remove the super constructor call if it has no arguments, that way the Attr super class\n+                 * will add a super() as the first statement in the constructor and will analyze the rest\n+                 * of the code in warnings only mode\n+                 *\/\n+                if (TreeInfo.hasAnyConstructorCall(tree)) {\n+                    ListBuffer<JCStatement> newStats = new ListBuffer<>();\n+                    for (JCStatement statement : tree.body.stats) {\n+                        if (statement instanceof JCExpressionStatement expressionStatement &&\n+                                expressionStatement.expr instanceof JCMethodInvocation methodInvocation) {\n+                            if (TreeInfo.isConstructorCall(methodInvocation) &&\n+                                methodInvocation.args.isEmpty()) {\n+                                continue;\n@@ -198,1 +188,0 @@\n-                            newStats.add(statement);\n@@ -200,1 +189,1 @@\n-                        tree.body.stats = newStats.toList();\n+                        newStats.add(statement);\n@@ -202,0 +191,1 @@\n+                    tree.body.stats = newStats.toList();\n@@ -203,4 +193,0 @@\n-                super.visitMethodDef(tree);\n-            } finally {\n-                tester.ignoreDiagnostics = previousIgnoreDiags;\n-                tester.errorExpected = previousErrExpected;\n@@ -208,0 +194,1 @@\n+            super.visitMethodDef(tree);\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTester.java","additions":50,"deletions":63,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -7,2 +7,2 @@\n- * @build ErrorExpected InitializationWarningTester\n- * @run main InitializationWarningTester SuperInitFails\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester SuperInitFails SuperInitFailsWarnings.out\n@@ -104,1 +104,1 @@\n-    @ErrorExpected\n+\n@@ -155,1 +155,1 @@\n-    @ErrorExpected\n+\n@@ -159,1 +159,1 @@\n-    @ErrorExpected\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+SuperInitFails.java:106:14: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:110:20: compiler.err.not.encl.class: java.lang.Object\n+SuperInitFails.java:121:22: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:135:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n+SuperInitFails.java:140:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n+SuperInitFails.java:157:50: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:161:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:213:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:35:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:39:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:43:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:47:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:51:33: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:55:32: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:85:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:152:18: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:59:9: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+SuperInitFails.java:64:13: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+SuperInitFails.java:69:14: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+SuperInitFails.java:74:28: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+SuperInitFails.java:79:29: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+SuperInitFails.java:101:33: compiler.warn.would.not.be.allowed.in.prologue: this\n+SuperInitFails.java:114:23: compiler.warn.would.not.be.allowed.in.prologue: spliterator()\n+SuperInitFails.java:127:9: compiler.warn.would.not.be.allowed.in.prologue: SuperInitFails\n+SuperInitFails.java:170:13: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:174:17: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:178:24: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:182:18: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:188:32: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:231:41: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:232:16: compiler.warn.would.not.be.allowed.in.prologue: x\n+SuperInitFails.java:241:35: compiler.warn.would.not.be.allowed.in.prologue: this\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFailsWarnings.out","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -28,2 +28,2 @@\n- * @build InitializationWarningTester IgnoreMethod\n- * @run main InitializationWarningTester SuperInitGood\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester SuperInitGood SuperInitGoodWarnings.out\n@@ -50,1 +50,1 @@\n-        @IgnoreMethod\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+SuperInitGood.java:52:17: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGoodWarnings.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -120,1 +120,1 @@\n-                \"- compiler.note.preview.filename: DEFAULT\",\n+                \"- compiler.note.preview.filename: Interface.java, DEFAULT\",\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}