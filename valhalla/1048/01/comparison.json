{"files":[{"patch":"@@ -193,0 +193,4 @@\n+    \/** A hash table mapping local classes to a set of outer this fields\n+     *\/\n+    public Map<ClassSymbol, Set<JCExpression>> initializerOuterThis = new WeakHashMap<>();\n+\n@@ -2961,0 +2965,11 @@\n+                if (currentMethodSym != null &&\n+                        ((currentMethodSym.flags_field & (STATIC | BLOCK)) == BLOCK) &&\n+                        currentMethodSym.owner.isValueClass()) {\n+                    \/\/ instance initializer in a value class\n+                    Set<JCExpression> outerThisSet = initializerOuterThis.get(currentClass);\n+                    if (outerThisSet == null) {\n+                        outerThisSet = new HashSet<>();\n+                    }\n+                    outerThisSet.add(thisArg);\n+                    initializerOuterThis.put(currentClass, outerThisSet);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -561,0 +561,1 @@\n+                rewriteInitializersIfNeeded(md, initCode);\n@@ -571,0 +572,34 @@\n+    }\n+\n+    void rewriteInitializersIfNeeded(JCMethodDecl md, List<JCStatement> initCode) {\n+        if (lower.initializerOuterThis.containsKey(md.sym.owner)) {\n+            InitializerVisitor initializerVisitor = new InitializerVisitor(md, lower.initializerOuterThis.get(md.sym.owner));\n+            for (JCStatement init : initCode) {\n+                initializerVisitor.scan(init);\n+            }\n+        }\n+    }\n+\n+    class InitializerVisitor extends TreeScanner {\n+        JCMethodDecl md;\n+        Set<JCExpression> exprSet;\n+\n+        InitializerVisitor(JCMethodDecl md, Set<JCExpression> exprSet) {\n+            this.md = md;\n+            this.exprSet = exprSet;\n+        }\n+\n+        @Override\n+        public void visitTree(JCTree tree) {}\n+\n+        @Override\n+        public void visitIdent(JCIdent tree) {\n+            if (exprSet.contains(tree)) {\n+                for (JCVariableDecl param: md.params) {\n+                    if (param.name == tree.name &&\n+                            ((param.sym.flags_field & (MANDATED | NOOUTERTHIS)) == (MANDATED | NOOUTERTHIS))) {\n+                        tree.sym = param.sym;\n+                    }\n+                }\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -52,1 +52,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -67,1 +67,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -83,1 +83,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -97,1 +97,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -111,1 +111,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @bug 8327695\n@@ -46,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}