{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,1 @@\n+# Param3 - _valhalla, or empty\n@@ -135,2 +136,2 @@\n-  $1_$2_DUMP_EXTRA_ARG := $(if $(filter _nocoops, $2),-XX:-UseCompressedOops,)\n-  $1_$2_DUMP_TYPE      := $(if $(filter _nocoops, $2),-NOCOOPS,)\n+  $1_$2_$3_DUMP_EXTRA_ARG := $(if $(filter _nocoops, $2),-XX:-UseCompressedOops,) $(if $(filter _valhalla, $3),--enable-preview,)\n+  $1_$2_$3_DUMP_TYPE      := $(if $(filter _nocoops, $2),-NOCOOPS,)$(if $(filter _valhalla, $3),-VALHALLA,)\n@@ -139,1 +140,1 @@\n-  $1_$2_CDS_DUMP_FLAGS := $(CDS_DUMP_FLAGS) $(if $(filter g1gc, $(JVM_FEATURES_$1)),-XX:+UseG1GC)\n+  $1_$2_$3_CDS_DUMP_FLAGS := $(CDS_DUMP_FLAGS) $(if $(filter g1gc, $(JVM_FEATURES_$1)),-XX:+UseG1GC)\n@@ -142,1 +143,1 @@\n-    $1_$2_CDS_ARCHIVE := bin\/$1\/classes$2.jsa\n+    $1_$2_$3_CDS_ARCHIVE := bin\/$1\/classes$2$3.jsa\n@@ -144,1 +145,1 @@\n-    $1_$2_CDS_ARCHIVE := lib\/$1\/classes$2.jsa\n+    $1_$2_$3_CDS_ARCHIVE := lib\/$1\/classes$2$3.jsa\n@@ -147,3 +148,3 @@\n-  $$(eval $$(call SetupExecute, $1_$2_gen_cds_archive_jdk, \\\n-      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jdk image for $1, \\\n-      INFO := Using CDS flags for $1: $$($1_$2_CDS_DUMP_FLAGS), \\\n+  $$(eval $$(call SetupExecute, $1_$2_$3_gen_cds_archive_jdk, \\\n+      WARN := Creating CDS$$($1_$2_$3_DUMP_TYPE) archive for jdk image for $1, \\\n+      INFO := Using CDS flags for $1: $$($1_$2_$3_CDS_DUMP_FLAGS), \\\n@@ -151,1 +152,1 @@\n-      OUTPUT_FILE := $$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE), \\\n+      OUTPUT_FILE := $$(JDK_IMAGE_DIR)\/$$($1_$2_$3_CDS_ARCHIVE), \\\n@@ -154,2 +155,2 @@\n-          -XX:SharedArchiveFile=$$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE) \\\n-          -$1 $$($1_$2_DUMP_EXTRA_ARG) $$($1_$2_CDS_DUMP_FLAGS) $$(LOG_INFO), \\\n+          -XX:SharedArchiveFile=$$(JDK_IMAGE_DIR)\/$$($1_$2_$3_CDS_ARCHIVE) \\\n+          -$1 $$($1_$2_$3_DUMP_EXTRA_ARG) $$($1_$2_$3_CDS_DUMP_FLAGS) $$(LOG_INFO), \\\n@@ -158,1 +159,1 @@\n-  JDK_TARGETS += $$($1_$2_gen_cds_archive_jdk)\n+  JDK_TARGETS += $$($1_$2_$3_gen_cds_archive_jdk)\n@@ -160,3 +161,3 @@\n-  $$(eval $$(call SetupExecute, $1_$2_gen_cds_archive_jre, \\\n-      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jre image for $1, \\\n-      INFO := Using CDS flags for $1: $$($1_$2_CDS_DUMP_FLAGS), \\\n+  $$(eval $$(call SetupExecute, $1_$2_$3_gen_cds_archive_jre, \\\n+      WARN := Creating CDS$$($1_$2_$3_DUMP_TYPE) archive for jre image for $1, \\\n+      INFO := Using CDS flags for $1: $$($1_$2_$3_CDS_DUMP_FLAGS), \\\n@@ -164,1 +165,1 @@\n-      OUTPUT_FILE := $$(JRE_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE), \\\n+      OUTPUT_FILE := $$(JRE_IMAGE_DIR)\/$$($1_$2_$3_CDS_ARCHIVE), \\\n@@ -167,2 +168,2 @@\n-          -XX:SharedArchiveFile=$$(JRE_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE) \\\n-          -$1 $$($1_$2_DUMP_EXTRA_ARG) $$($1_$2_CDS_DUMP_FLAGS) $$(LOG_INFO), \\\n+          -XX:SharedArchiveFile=$$(JRE_IMAGE_DIR)\/$$($1_$2_$3_CDS_ARCHIVE) \\\n+          -$1 $$($1_$2_$3_DUMP_EXTRA_ARG) $$($1_$2_$3_CDS_DUMP_FLAGS) $$(LOG_INFO), \\\n@@ -171,1 +172,1 @@\n-  JRE_TARGETS += $$($1_$2_gen_cds_archive_jre)\n+  JRE_TARGETS += $$($1_$2_$3_gen_cds_archive_jre)\n@@ -174,0 +175,4 @@\n+# TODO: add these to below when CDS & --enable-preview is well tested.\n+#     $(eval $(call CreateCDSArchive,$v,,_valhalla))\n+#     $(eval $(call CreateCDSArchive,$v,_nocoops,_valhalla))\n+\n@@ -176,1 +181,1 @@\n-    $(eval $(call CreateCDSArchive,$v,)) \\\n+    $(eval $(call CreateCDSArchive,$v,,)) \\\n@@ -181,1 +186,1 @@\n-      $(eval $(call CreateCDSArchive,$v,_nocoops)) \\\n+      $(eval $(call CreateCDSArchive,$v,_nocoops,)) \\\n","filename":"make\/Images.gmk","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+#include \"runtime\/arguments.hpp\"\n+#include \"runtime\/globals.hpp\"\n@@ -41,0 +43,5 @@\n+bool CDSConfig::is_valhalla_preview() {\n+  return Arguments::enable_preview() && EnableValhalla;\n+}\n+\n+\n@@ -43,0 +50,4 @@\n+  if (is_valhalla_preview()) {\n+    \/\/ Not working yet -- e.g., HeapShared::oop_hash() needs to be implemented for value oops\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+  static bool      is_valhalla_preview();\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,1 +282,1 @@\n-\n+  _has_valhalla_patched_classes = CDSConfig::is_valhalla_preview();\n@@ -361,0 +361,1 @@\n+  st->print_cr(\"- has_valhalla_patched_classes    %d\", _has_valhalla_patched_classes);\n@@ -2456,0 +2457,18 @@\n+  if (is_static()) {\n+    const char* err = nullptr;\n+    if (CDSConfig::is_valhalla_preview()) {\n+      if (!_has_valhalla_patched_classes) {\n+        err = \"not created\";\n+      }\n+    } else {\n+      if (_has_valhalla_patched_classes) {\n+        err = \"created\";\n+      }\n+    }\n+    if (err != nullptr) {\n+      log_warning(cds)(\"This archive was %s with --enable-preview -XX:+EnableValhalla. It is \"\n+                         \"incompatible with the current JVM setting\", err);\n+      return false;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,0 +256,1 @@\n+  bool   _has_valhalla_patched_classes; \/\/ Is this archived dumped with --enable-preview -XX:+EnableValhalla?\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1608,0 +1608,7 @@\n+\n+    if (CDSConfig::is_valhalla_preview() && strcmp(klass_name, \"jdk\/internal\/module\/ArchivedModuleGraph\") == 0) {\n+      \/\/ FIXME -- ArchivedModuleGraph doesn't work when java.base is patched with valhalla classes.\n+      i++;\n+      continue;\n+    }\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -836,0 +836,4 @@\n+  if (CDSConfig::is_valhalla_preview()) {\n+    log_info(cds)(\"Archived java heap is not yet supported with Valhalla preview\");\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1104,0 +1104,1 @@\n+  bool is_patched = false;\n@@ -1128,5 +1129,6 @@\n-    \/\/\n-    \/\/ Dynamic dumping requires UseSharedSpaces to be enabled. Since --patch-module\n-    \/\/ is not supported with UseSharedSpaces, we can never come here during dynamic dumping.\n-    assert(!CDSConfig::is_dumping_dynamic_archive(), \"sanity\");\n-    if (!CDSConfig::is_dumping_static_archive()) {\n+    if (!CDSConfig::is_valhalla_preview()) {\n+      \/\/ Dynamic dumping requires UseSharedSpaces to be enabled. Since --patch-module\n+      \/\/ is not supported with UseSharedSpaces, we can never come here during dynamic dumping.\n+      assert(!CDSConfig::is_dumping_dynamic_archive(), \"sanity\");\n+    }\n+    if (CDSConfig::is_valhalla_preview() || !CDSConfig::is_dumping_static_archive()) {\n@@ -1134,0 +1136,3 @@\n+      if (stream != nullptr) {\n+        is_patched = true;\n+      }\n@@ -1184,0 +1189,4 @@\n+  if (is_patched) {\n+    result->set_shared_classpath_index(0);\n+    result->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n+  }\n@@ -1219,0 +1228,4 @@\n+  if (ik->shared_classpath_index() == 0 && ik->is_shared_boot_class()) {\n+    return;\n+  }\n+\n@@ -1306,1 +1319,3 @@\n-    assert(stream->from_boot_loader_modules_image(), \"stream must be loaded by boot loader from modules image\");\n+    if (!CDSConfig::is_valhalla_preview()) {\n+      assert(stream->from_boot_loader_modules_image(), \"stream must be loaded by boot loader from modules image\");\n+    }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -943,2 +943,1 @@\n-  assert(!ModuleEntryTable::javabase_moduleEntry()->is_patched(),\n-         \"Cannot use sharing if java.base is patched\");\n+  assert(!Arguments::module_patching_disables_cds(), \"Cannot use CDS\");\n@@ -1020,1 +1019,1 @@\n-        assert(!mod_entry->is_patched(), \"cannot load archived classes for patched module\");\n+        assert(!Arguments::module_patching_disables_cds(), \"Cannot use CDS\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -60,0 +61,4 @@\n+InlineKlass::InlineKlass() {\n+  assert(CDSConfig::is_dumping_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"cds\/cdsConfig.hpp\"\n@@ -47,1 +46,1 @@\n-  InlineKlass() { assert(CDSConfig::is_dumping_archive() || UseSharedSpaces, \"only for CDS\"); }\n+  InlineKlass();\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1009,0 +1009,1 @@\n+      HandleMark hm(THREAD);\n@@ -2836,3 +2837,1 @@\n-  if (has_inline_type_fields()) {\n-    it->push(&_inline_type_field_klasses);\n-  }\n+  it->push(&_inline_type_field_klasses, MetaspaceClosure::_writable);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -399,1 +399,1 @@\n-  if (!method_holder()->is_rewritten()) {\n+  if (!method_holder()->is_rewritten() || CDSConfig::is_valhalla_preview()) {\n@@ -1265,1 +1265,0 @@\n-    assert(!constMethod()->is_shared(), \"Cannot update shared const objects\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,1 @@\n+bool   Arguments::_module_patching_disables_cds = false;\n@@ -1334,2 +1335,1 @@\n-                                         \"jdk.module.upgrade.path\",\n-                                         \"jdk.module.patch.0\" };\n+                                         \"jdk.module.upgrade.path\"};\n@@ -1337,3 +1337,1 @@\n-                                      \"--upgrade-module-path\",\n-                                      \"--patch-module\"\n-                                    };\n+                                      \"--upgrade-module-path\"};\n@@ -1356,0 +1354,5 @@\n+  if (_module_patching_disables_cds) {\n+    vm_exit_during_initialization(\n+            \"Cannot use the following option when dumping the shared archive\", \"--patch-module\");\n+  }\n+\n@@ -1382,0 +1385,10 @@\n+\n+  if (_module_patching_disables_cds) {\n+    if (RequireSharedSpaces) {\n+      warning(\"CDS is disabled when the %s option is specified.\", \"--patch-module\");\n+    } else {\n+      log_info(cds)(\"CDS is disabled when the %s option is specified.\", \"--patch-module\");\n+    }\n+    return true;\n+  }\n+\n@@ -2180,1 +2193,1 @@\n-      add_patch_mod_prefix(module_name, module_equal + 1, false \/* no append *\/);\n+      add_patch_mod_prefix(module_name, module_equal + 1, false \/* no append *\/, false \/* no cds *\/);\n@@ -2222,1 +2235,1 @@\n-        add_patch_mod_prefix(module_name, path, true \/* append *\/);\n+        add_patch_mod_prefix(module_name, path, true \/* append *\/, true \/* cds OK*\/);\n@@ -2985,0 +2998,1 @@\n+static bool _java_base_module_patching_disables_cds = false;\n@@ -2986,1 +3000,1 @@\n-    return _patch_mod_prefix != nullptr && _patch_mod_prefix->find((void*)JAVA_BASE_NAME, match_module) >= 0;\n+  return _java_base_module_patching_disables_cds;\n@@ -2989,1 +3003,8 @@\n-void Arguments::add_patch_mod_prefix(const char* module_name, const char* path, bool allow_append) {\n+void Arguments::add_patch_mod_prefix(const char* module_name, const char* path, bool allow_append, bool allow_cds) {\n+  if (!allow_cds) {\n+    _module_patching_disables_cds = true;\n+    if (strcmp(module_name, JAVA_BASE_NAME) == 0) {\n+      _java_base_module_patching_disables_cds = true;\n+    }\n+  }\n+\n@@ -3177,1 +3198,1 @@\n-  if (UseSharedSpaces && patch_mod_javabase()) {\n+  if (UseSharedSpaces && patch_mod_javabase() && _module_patching_disables_cds) {\n@@ -3489,1 +3510,1 @@\n-    const size_t len = jvm_path_len + file_sep_len + 20;\n+    const size_t len = jvm_path_len + file_sep_len + strlen(\"classes_nocoops_valhalla.jsa\") + 1;\n@@ -3491,3 +3512,7 @@\n-    jio_snprintf(_default_shared_archive_path, len,\n-                LP64_ONLY(!UseCompressedOops ? \"%s%sclasses_nocoops.jsa\":) \"%s%sclasses.jsa\",\n-                jvm_path, os::file_separator());\n+    LP64_ONLY(bool nocoops = !UseCompressedOops);\n+    NOT_LP64(bool nocoops = false);\n+    bool valhalla = CDSConfig::is_valhalla_preview();\n+    jio_snprintf(_default_shared_archive_path, len, \"%s%sclasses%s%s.jsa\",\n+                jvm_path, os::file_separator(),\n+                 nocoops ? \"_nocoops\" : \"\",\n+                 valhalla ? \"_valhalla\" : \"\");\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":40,"deletions":15,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,0 +257,2 @@\n+  static bool _module_patching_disables_cds;\n+\n@@ -484,1 +486,1 @@\n-  static void add_patch_mod_prefix(const char *module_name, const char *path, bool allow_append);\n+  static void add_patch_mod_prefix(const char *module_name, const char *path, bool allow_append, bool allow_cds);\n@@ -486,0 +488,1 @@\n+  static bool module_patching_disables_cds() { return _module_patching_disables_cds; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3176,1 +3176,0 @@\n-      assert(!method()->constMethod()->is_shared(), \"Cannot update shared const object\");\n@@ -3183,1 +3182,0 @@\n-      assert(!method->constMethod()->is_shared(), \"Cannot update a shared const object\");\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,5 +125,0 @@\n-runtime\/cds\/appcds\/HelloInlineClassTest.java 8328683 generic-all\n-runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java 8328683 generic-all\n-runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java 8328683 generic-all\n-runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java 8328683 generic-all\n-runtime\/cds\/DeterministicDump.java 8328683 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -32,1 +34,3 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Rectangle\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_inline.jar\n+ *          HelloInlineClassApp HelloInlineClassApp$Point\n+ *          HelloInlineClassApp$Rectangle HelloInlineClassApp$ValueRecord\n@@ -45,1 +49,2 @@\n-                                                    \"HelloInlineClassApp$Rectangle\"));\n+                                                    \"HelloInlineClassApp$Rectangle\"),\n+                            \"--enable-preview\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/HelloInlineClassTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -51,1 +53,2 @@\n-                    use_whitebox_jar);\n+                    use_whitebox_jar,\n+                    \"--enable-preview\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -36,1 +38,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Rectangle\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Rectangle  HelloInlineClassApp$ValueRecord\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -33,1 +35,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Rectangle\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Rectangle HelloInlineClassApp$ValueRecord\n@@ -42,2 +44,1 @@\n-        runTest(HelloDynamicInlineClass::testDefaultBase);\n-        runTest(HelloDynamicInlineClass::testCustomBase);\n+        runTest(HelloDynamicInlineClass::test);\n@@ -46,2 +47,1 @@\n-    \/\/ (1) Test with default base archive + top archive\n-    static void testDefaultBase() throws Exception {\n+    static void test() throws Exception {\n@@ -49,6 +49,0 @@\n-        doTest(null, topArchiveName);\n-    }\n-\n-    \/\/ (2) Test with custom base archive + top archive\n-    static void testCustomBase() throws Exception {\n-        String topArchiveName = getNewArchiveName(\"top2\");\n@@ -56,1 +50,1 @@\n-        TestCommon.dumpBaseArchive(baseArchiveName);\n+        TestCommon.dumpBaseArchive(baseArchiveName, \"--enable-preview\", \"-Xlog:cds\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+        final String noOptimizedModuleHandling = \"optimized module handling: disabled because archive was created without optimized module handling\";\n@@ -61,2 +62,4 @@\n-          .shouldMatch(versionPattern)\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(versionPattern);\n+        if (!oa.contains(noOptimizedModuleHandling)) {\n+            oa.shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+        }\n@@ -70,2 +73,4 @@\n-          .shouldContain(\"Mismatched modules: runtime jdk.compiler dump time jdk.httpserver\")\n-          .shouldContain(subgraphCannotBeUsed);\n+          .shouldContain(\"Mismatched modules: runtime jdk.compiler dump time jdk.httpserver\");\n+        if (!oa.contains(noOptimizedModuleHandling)) {\n+            oa.shouldContain(subgraphCannotBeUsed);\n+        }\n@@ -78,2 +83,4 @@\n-          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n-          .shouldContain(subgraphCannotBeUsed);\n+          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\");\n+        if (!oa.contains(noOptimizedModuleHandling)) {\n+            oa.shouldContain(subgraphCannotBeUsed);\n+        }\n@@ -98,2 +105,4 @@\n-          .shouldMatch(versionPattern)\n-          .shouldContain(subgraphCannotBeUsed);\n+          .shouldMatch(versionPattern);\n+        if (!oa.contains(noOptimizedModuleHandling)) {\n+            oa.shouldContain(subgraphCannotBeUsed);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n@@ -26,0 +30,3 @@\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n@@ -51,0 +58,2 @@\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n@@ -52,0 +61,1 @@\n+        @NullRestricted\n@@ -53,0 +63,1 @@\n+        @NullRestricted\n@@ -56,0 +67,1 @@\n+    @NullRestricted\n@@ -57,0 +69,2 @@\n+\n+    @NullRestricted\n@@ -59,0 +73,2 @@\n+    static value record ValueRecord(int i, String name) {}\n+\n@@ -106,0 +122,4 @@\n+        ValueRecord valueRec = new ValueRecord(30, \"thirty\");\n+        if (!valueRec.toString().equals(\"ValueRecord[i=30, name=thirty]\")) {\n+            throw new RuntimeException(\"ValueRecord toString unexpected value: \" + valueRec.toString());\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/HelloInlineClassApp.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,5 @@\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+\n+@ImplicitlyConstructible\n+@LooselyConsistentValue\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/Point.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n@@ -26,0 +28,1 @@\n+  @NullRestricted\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/WithInlinedField.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}