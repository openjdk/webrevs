{"files":[{"patch":"@@ -5265,0 +5265,4 @@\n+            assembleSig(type, false);\n+        }\n+\n+        public void assembleSig(Type type, boolean includeNullMarkers) {\n@@ -5297,4 +5301,0 @@\n-                    NullMarker nullMarker = type.getNullMarker();\n-                    if (nullMarker != NullMarker.UNSPECIFIED) {\n-                        append(nullMarker.typeSuffix().charAt(0));\n-                    }\n@@ -5302,1 +5302,7 @@\n-                    assembleClassSig(type);\n+                    assembleClassSig(type, includeNullMarkers);\n+                    if (includeNullMarkers) {\n+                        NullMarker nullMarker = type.getNullMarker();\n+                        if (nullMarker != NullMarker.UNSPECIFIED) {\n+                            append(nullMarker.typeSuffix().charAt(0));\n+                        }\n+                    }\n@@ -5307,4 +5313,0 @@\n-                    NullMarker nmArray = at.getNullMarker();\n-                    if (nmArray != NullMarker.UNSPECIFIED) {\n-                        append(nmArray.typeSuffix().charAt(0));\n-                    }\n@@ -5312,1 +5314,7 @@\n-                    assembleSig(at.elemtype);\n+                    assembleSig(at.elemtype, includeNullMarkers);\n+                    \/*if (includeNullMarkers) {   \/\/ there is no type in the VM for null-restricted arrays, for now\n+                        NullMarker nmArray = at.getNullMarker();\n+                        if (nmArray != NullMarker.UNSPECIFIED) {\n+                            append(nmArray.typeSuffix().charAt(0));\n+                        }\n+                    }*\/\n@@ -5332,1 +5340,1 @@\n-                            assembleSig(ta.type);\n+                            assembleSig(ta.type, includeNullMarkers);\n@@ -5336,1 +5344,1 @@\n-                            assembleSig(ta.type);\n+                            assembleSig(ta.type, includeNullMarkers);\n@@ -5350,8 +5358,0 @@\n-                    if (Types.this.isDeclaredParametric(type)) {\n-                        append('=');\/\/ '*' is already used for wildcards\n-                    } else {\n-                        NullMarker nmTV = type.getNullMarker();\n-                        if (nmTV != NullMarker.UNSPECIFIED) {\n-                            append(nmTV.typeSuffix().charAt(0));\n-                        }\n-                    }\n@@ -5360,0 +5360,10 @@\n+                    if (includeNullMarkers) {\n+                        if (Types.this.isDeclaredParametric(type)) {\n+                            append('=');\/\/ '*' is already used for wildcards\n+                        } else {\n+                            NullMarker nmTV = type.getNullMarker();\n+                            if (nmTV != NullMarker.UNSPECIFIED) {\n+                                append(nmTV.typeSuffix().charAt(0));\n+                            }\n+                        }\n+                    }\n@@ -5383,0 +5393,4 @@\n+            assembleClassSig(type, false);\n+        }\n+\n+        public void assembleClassSig(Type type, boolean includeNullMarkers) {\n@@ -5393,1 +5407,1 @@\n-                        : outer);\n+                        : outer, includeNullMarkers);\n@@ -5404,1 +5418,1 @@\n-                assembleSig(ct.getTypeArguments());\n+                assembleSig(ct.getTypeArguments(), includeNullMarkers);\n@@ -5410,0 +5424,4 @@\n+            assembleParamsSig(typarams, false);\n+        }\n+\n+        public void assembleParamsSig(List<Type> typarams, boolean includeNullMarkers) {\n@@ -5420,1 +5438,1 @@\n-                    assembleSig(l.head);\n+                    assembleSig(l.head, includeNullMarkers);\n@@ -5427,0 +5445,4 @@\n+            assembleSig(types, false);\n+        }\n+\n+        public void assembleSig(List<Type> types, boolean includeNullMarkers) {\n@@ -5428,1 +5450,1 @@\n-                assembleSig(ts.head);\n+                assembleSig(ts.head, includeNullMarkers);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":46,"deletions":24,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -573,5 +573,0 @@\n-        case '?': case '!' : case '=':\n-            char nmChar = (char)signature[sigp];\n-            sigp++;\n-            Type t = sigToType();\n-            return t == Type.noType ? t : t.asNullMarked(nmChar == '=' ? NullMarker.PARAMETRIC : NullMarker.of(String.valueOf(nmChar)));\n@@ -593,0 +588,1 @@\n+        NullMarker nm = NullMarker.UNSPECIFIED;\n@@ -602,0 +598,1 @@\n+                Type result;\n@@ -605,1 +602,7 @@\n-                        return new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata());\n+                        result = new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata());\n+                    } else {\n+                        result = new ClassType(outer, List.nil(), t, List.nil());\n+                    }\n+                    if (nm != NullMarker.UNSPECIFIED) {\n+                        result = result.asNullMarked(nm);\n+                        nm = NullMarker.UNSPECIFIED;\n@@ -607,1 +610,1 @@\n-                    return new ClassType(outer, List.nil(), t, List.nil());\n+                    return result;\n@@ -612,1 +615,5 @@\n-\n+            case '?': case '!' : case '=': {\n+                char nmChar = (char) c;\n+                nm = (nmChar == '=' ? NullMarker.PARAMETRIC : NullMarker.of(String.valueOf(nmChar)));\n+                continue;\n+            }\n@@ -682,0 +689,6 @@\n+                char currentCh = (char)signature[sigp];\n+                if (currentCh == '?' || currentCh == '!' || currentCh == '=' ) {\n+                    nm = (currentCh == '=' ? NullMarker.PARAMETRIC : NullMarker.of(String.valueOf(currentCh)));\n+                    outer = outer.asNullMarked(nm);\n+                    sigp++;\n+                }\n@@ -703,1 +716,1 @@\n-                    throw new AssertionError(signature[sigp-1]);\n+                    throw new AssertionError((char)signature[sigp-1]);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-            return putName(typeSig(s.type));\n+            return putName(typeSig(s.type, true));\n@@ -305,0 +305,9 @@\n+            assembleSig(type, false);\n+        }\n+\n+        \/**\n+         * Assemble signature of given type in string buffer.\n+         * Check for uninitialized types before calling the general case.\n+         *\/\n+        @Override\n+        public void assembleSig(Type type, boolean includeNullMarkers) {\n@@ -310,1 +319,1 @@\n-                    assembleSig(types.erasure(((UninitializedType)type).qtype));\n+                    assembleSig(types.erasure(((UninitializedType)type).qtype), includeNullMarkers);\n@@ -313,1 +322,1 @@\n-                    super.assembleSig(type);\n+                    super.assembleSig(type, includeNullMarkers);\n@@ -510,0 +519,4 @@\n+        return typeSig(type, false);\n+    }\n+\n+    private Name typeSig(Type type, boolean includeNullMarkers) {\n@@ -511,1 +524,1 @@\n-        signatureGen.assembleSig(type);\n+        signatureGen.assembleSig(type, includeNullMarkers);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2934,1 +2934,1 @@\n-                    default -> throw new AssertionError(\"invalid type suffix\");\n+                    default -> throw new AssertionError(\"invalid type suffix \" + typeSuffix);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8338910\n+ * @bug 8338910 8347754\n@@ -85,1 +85,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 0\n@@ -91,1 +91,1 @@\n-                    \"!LTest;\"\n+                    \"LTest!;\"\n@@ -93,1 +93,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 1\n@@ -99,1 +99,1 @@\n-                    \"?LTest;\"\n+                    \"LTest?;\"\n@@ -101,1 +101,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 2\n@@ -108,1 +108,1 @@\n-                    \"Ljava\/util\/List<!LTest;>;\"\n+                    \"Ljava\/util\/List<LTest!;>;\"\n@@ -110,1 +110,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 3\n@@ -117,1 +117,1 @@\n-                    \"Ljava\/util\/List<?LTest;>;\"\n+                    \"Ljava\/util\/List<LTest?;>;\"\n@@ -119,1 +119,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 4\n@@ -126,1 +126,1 @@\n-                    \"!Ljava\/util\/List<!LTest;>;\"\n+                    \"Ljava\/util\/List<LTest!;>!;\"\n@@ -128,1 +128,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 5\n@@ -135,1 +135,1 @@\n-                    \"?Ljava\/util\/List<?LTest;>;\"\n+                    \"Ljava\/util\/List<LTest?;>?;\"\n@@ -137,1 +137,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 6\n@@ -143,1 +143,1 @@\n-                    \"!TT;\"\n+                    \"TT!;\"\n@@ -145,1 +145,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 7\n@@ -151,1 +151,1 @@\n-                    \"?TT;\"\n+                    \"TT?;\"\n@@ -153,1 +153,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 8\n@@ -159,1 +159,1 @@\n-                    \"?[Ljava\/lang\/String;\"\n+                    \"[Ljava\/lang\/String;\"\n@@ -161,1 +161,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 9\n@@ -167,1 +167,1 @@\n-                    \"![Ljava\/lang\/String;\"\n+                    \"[Ljava\/lang\/String;\"\n@@ -169,1 +169,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 10\n@@ -175,1 +175,1 @@\n-                    \"?[!Ljava\/lang\/String;\"\n+                    \"[Ljava\/lang\/String!;\"\n@@ -177,1 +177,1 @@\n-            new SignatureData(\n+            new SignatureData( \/\/ case 11\n@@ -183,1 +183,1 @@\n-                    \"![?[?Ljava\/lang\/String;\"\n+                    \"[[Ljava\/lang\/String?;\"\n@@ -189,0 +189,1 @@\n+        int testNo = 0;\n@@ -190,0 +191,1 @@\n+            System.err.println(\"executing test at index \" + testNo++);\n@@ -203,1 +205,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData(  \/\/ case 0\n@@ -223,1 +225,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData(  \/\/ case 1\n@@ -239,1 +241,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData(  \/\/ case 2\n@@ -255,1 +257,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 3\n@@ -273,1 +275,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 4\n@@ -295,1 +297,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 5\n@@ -313,1 +315,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 6\n@@ -334,1 +336,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 7\n@@ -349,4 +351,2 @@\n-                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n-                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n-                            \"- compiler.note.preview.recompile\",\n-                            \"1 warning\")\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",  \/\/ some information is lost\n+                            \"- compiler.note.preview.recompile\")\n@@ -354,1 +354,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 8\n@@ -374,1 +374,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 9\n@@ -389,4 +389,2 @@\n-                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n-                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n-                            \"- compiler.note.preview.recompile\",\n-                            \"1 warning\")\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n@@ -394,1 +392,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 10\n@@ -410,1 +408,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 11\n@@ -432,1 +430,1 @@\n-            new SepCompilationData(\n+            new SepCompilationData( \/\/ case 12\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilitySignatureAttrTests.java","additions":45,"deletions":47,"binary":false,"changes":92,"status":"modified"}]}