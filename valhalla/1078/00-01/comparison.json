{"files":[{"patch":"@@ -318,1 +318,1 @@\n-\/\/ The protocole to read a nullable flat field is:\n+\/\/ The protocol to read a nullable flat field is:\n@@ -340,1 +340,1 @@\n-\/\/ The protocole to write a nullable flat field is:\n+\/\/ The protocol to write a nullable flat field is:\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -809,1 +809,1 @@\n-  notproduct(bool, PrintFieldLayout, false,                                 \\\n+  product(bool, PrintFieldLayout, false, DIAGNOSTIC,                        \\\n@@ -812,2 +812,2 @@\n-  notproduct(bool, PrintInlineLayout, false,                                \\\n-          \"Print field layout for each inline type\")                        \\\n+  product(bool, PrintInlineLayout, false, DIAGNOSTIC,                       \\\n+          \"Print field layout for each inline type or class with inline fields\") \\\n@@ -824,1 +824,1 @@\n-  product(bool, EnableNullableFieldFlattening, false,                       \\\n+  develop(bool, EnableNullableFieldFlattening, false,                       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:+EnableNullableFieldFlattening -XX:+PrintInlineLayout NullableFlatFieldTest\n+ * @run main\/othervm -Xint -XX:+EnableNullableFieldFlattening -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlineLayout NullableFlatFieldTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/NullableFlatFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,23 @@\n- \/*\n- * @test FieldAlignmentTest\n+\/*\n+ * @test id=Oops32\n+ * @requires vm.bits == 32\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java FieldAlignmentTest.java\n+ * @run main\/othervm FieldAlignmentTest 0\n+ *\/\n+\n+  \/*\n+ * @test id=CompressedOops\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java FieldAlignmentTest.java\n+ * @run main\/othervm FieldAlignmentTest 1\n+ *\/\n+\n+  \/*\n+ * @test id=NoCompressedOops\n+ * @requires vm.bits == 64\n@@ -30,1 +51,1 @@\n- * @run main\/othervm FieldAlignmentTest\n+ * @run main\/othervm FieldAlignmentTest 2\n@@ -122,1 +143,1 @@\n-  static ProcessBuilder exec(String... args) throws Exception {\n+  static ProcessBuilder exec(String compressedOopsArg, String... args) throws Exception {\n@@ -125,0 +146,1 @@\n+    Collections.addAll(argsList, \"-XX:+UnlockDiagnosticVMOptions\");\n@@ -126,0 +148,4 @@\n+    if (compressedOopsArg != null) {\n+      Collections.addAll(argsList, compressedOopsArg);\n+    }\n+    Collections.addAll(argsList, \"-Xmx256m\");\n@@ -132,0 +158,16 @@\n+    boolean useCompressedOops;\n+    String compressedOopsArg;\n+\n+    switch(args[0]) {\n+      case \"0\": useCompressedOops = false;\n+                compressedOopsArg = null;\n+                break;\n+      case \"1\": useCompressedOops = true;\n+                compressedOopsArg = \"-XX:+UseCompressedOops\";\n+                break;\n+      case \"2\": useCompressedOops = false;\n+                compressedOopsArg = \"-XX:-UseCompressedOops\";\n+                break;\n+      default: throw new RuntimeException(\"Unrecognized configuration\");\n+    }\n+\n@@ -138,1 +180,1 @@\n-    ProcessBuilder pb = exec(\"TestRunner\");\n+    ProcessBuilder pb = exec(compressedOopsArg, \"TestRunner\");\n@@ -144,1 +186,2 @@\n-    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, true);\n+\n+    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, useCompressedOops);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldAlignmentTest.java","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -326,0 +326,1 @@\n+    System.out.println(\"Checking for overlap\");\n@@ -327,0 +328,1 @@\n+      System.out.println(\"\\t\" + layout.name);\n@@ -388,0 +390,1 @@\n+    System.out.println(\"Checking size and alignment\");\n@@ -389,0 +392,1 @@\n+      System.out.println(\"\\t\" + layout.name);\n@@ -400,0 +404,1 @@\n+    System.out.println(\"Checking Inherited Fields\");\n@@ -401,0 +406,1 @@\n+      System.out.println(\"\\t\" + layout.name);\n@@ -439,0 +445,1 @@\n+    System.out.println(\"Checking sub-classes\");\n@@ -467,0 +474,1 @@\n+      System.out.println(\"\\t\" + layout.name);\n@@ -492,0 +500,1 @@\n+    System.out.println(\"Checking null markers\");\n@@ -493,0 +502,1 @@\n+      System.out.println(\"\\t\" + layout.name);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldLayoutAnalyzer.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n- * @test NullMarkersTest\n+ * @test id=NullMarker32\n+ * @requires vm.bits == 32\n@@ -30,1 +31,21 @@\n- * @run main\/othervm NullMarkersTest\n+ * @run main\/othervm NullMarkersTest 0\n+ *\/\n+\n+\/*\n+ * @test id=NullMarker64CompressedOops\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java NullMarkersTest.java\n+ * @run main\/othervm NullMarkersTest 1\n+ *\/\n+\n+\/*\n+ * @test id=NullMarker64NoCompressedOops\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java NullMarkersTest.java\n+ * @run main\/othervm NullMarkersTest 2\n@@ -257,1 +278,1 @@\n-  static ProcessBuilder exec(String... args) throws Exception {\n+  static ProcessBuilder exec(String compressedOopsArg, String... args) throws Exception {\n@@ -260,0 +281,2 @@\n+    Collections.addAll(argsList, \"-Xint\");\n+    Collections.addAll(argsList, \"-XX:+UnlockDiagnosticVMOptions\");\n@@ -261,0 +284,4 @@\n+    if (compressedOopsArg != null) {\n+      Collections.addAll(argsList, compressedOopsArg);\n+    }\n+    Collections.addAll(argsList, \"-Xmx256m\");\n@@ -268,0 +295,16 @@\n+    boolean useCompressedOops;\n+    String compressedOopsArg;\n+\n+    switch(args[0]) {\n+      case \"0\": useCompressedOops = false;\n+                compressedOopsArg = null;\n+                break;\n+      case \"1\": useCompressedOops = true;\n+                compressedOopsArg = \"-XX:+UseCompressedOops\";\n+                break;\n+      case \"2\": useCompressedOops = false;\n+                compressedOopsArg = \"-XX:-UseCompressedOops\";\n+                break;\n+      default: throw new RuntimeException(\"Unrecognized configuration\");\n+    }\n+\n@@ -271,1 +314,0 @@\n-\n@@ -273,1 +315,1 @@\n-    ProcessBuilder pb = exec(\"NullMarkersTest$TestRunner\");\n+    ProcessBuilder pb = exec(compressedOopsArg, \"NullMarkersTest$TestRunner\");\n@@ -281,1 +323,1 @@\n-    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, true);\n+    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, useCompressedOops);\n@@ -284,1 +326,1 @@\n-    Class testClass =NullMarkersTest.class;\n+    Class testClass = NullMarkersTest.class;\n@@ -290,1 +332,0 @@\n-          System.out.println(\"Running \" + test.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/NullMarkersTest.java","additions":49,"deletions":8,"binary":false,"changes":57,"status":"modified"}]}