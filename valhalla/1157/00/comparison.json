{"files":[{"patch":"@@ -759,2 +759,2 @@\n-            out.writeShort(attr.descriptor_info_index.length);\n-            for (int index: attr.descriptor_info_index)\n+            out.writeShort(attr.descriptors.length);\n+            for (int index: attr.descriptors)\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        descriptor_info_index = new int[number_of_descriptors];\n+        descriptors = new int[number_of_descriptors];\n@@ -42,1 +42,1 @@\n-            descriptor_info_index[i] = cr.readUnsignedShort();\n+            descriptors[i] = cr.readUnsignedShort();\n@@ -50,2 +50,2 @@\n-    public final int descriptor_info_index[];\n-}\n\\ No newline at end of file\n+    public final int descriptors[];\n+}\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/LoadableDescriptors_attribute.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test 8335770\n+ * @summary improve javap code coverage for value classes\n+ * @enablePreview\n+ * @library \/tools\/lib\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ * @build toolbox.ToolBox toolbox.JavapTask\n+ * @run main ValueClassesJavapTest\n+ *\/\n+\n+import java.nio.file.*;\n+import java.util.*;\n+\n+import toolbox.JavapTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.Task;\n+\n+public class ValueClassesJavapTest extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    abstract value class AbstractValueClass {}\n+    value class ValueClass {}\n+    class IdentityClass {\n+        ValueClass val;\n+    }\n+    class IdentityClass2 {\n+        void m(ValueClass param) {}\n+    }\n+\n+    private static final List<String> expectedOutput1 = List.of(\n+            \"Compiled from \\\"ValueClassesJavapTest.java\\\"\",\n+            \"final value class ValueClassesJavapTest$ValueClass {\",\n+            \"  ValueClassesJavapTest$ValueClass(ValueClassesJavapTest);\",\n+            \"}\");\n+    private static final List<String> expectedOutput2 = List.of(\n+            \"Compiled from \\\"ValueClassesJavapTest.java\\\"\",\n+            \"abstract value class ValueClassesJavapTest$AbstractValueClass {\",\n+            \"  ValueClassesJavapTest$AbstractValueClass(ValueClassesJavapTest);\",\n+            \"}\");\n+    private static final List<String> expectedOutput3 = List.of(\n+            \"LoadableDescriptors:\",\n+            \"  LValueClassesJavapTest$ValueClass;\"\n+    );\n+\n+    ValueClassesJavapTest() throws Exception {\n+        super(System.err);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        ValueClassesJavapTest tester = new ValueClassesJavapTest();\n+        tester.runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testMain(Path base) throws Exception {\n+        Path testClassesPath = Paths.get(System.getProperty(\"test.classes\"));\n+        List<String> output = new JavapTask(tb)\n+                .options(\"-p\", testClassesPath.resolve(this.getClass().getSimpleName() + \"$ValueClass.class\").toString())\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        System.out.println(output);\n+        if (!output.equals(expectedOutput1)) {\n+            throw new AssertionError(String.format(\"unexpected output:\\n %s\", output));\n+        }\n+\n+        output = new JavapTask(tb)\n+                .options(\"-p\", testClassesPath.resolve(this.getClass().getSimpleName() + \"$AbstractValueClass.class\").toString())\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        System.out.println(output);\n+        if (!output.equals(expectedOutput2)) {\n+            throw new AssertionError(String.format(\"unexpected output:\\n %s\", output));\n+        }\n+\n+        output = new JavapTask(tb)\n+                .options(\"-p\", \"-v\", testClassesPath.resolve(this.getClass().getSimpleName() + \"$IdentityClass.class\").toString())\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        System.out.println(output);\n+        if (!output.containsAll(expectedOutput3)) {\n+            throw new AssertionError(String.format(\"unexpected output:\\n %s\", output));\n+        }\n+\n+        output = new JavapTask(tb)\n+                .options(\"-p\", \"-v\", testClassesPath.resolve(this.getClass().getSimpleName() + \"$IdentityClass2.class\").toString())\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        System.out.println(output);\n+        if (!output.containsAll(expectedOutput3)) {\n+            throw new AssertionError(String.format(\"unexpected output:\\n %s\", output));\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javap\/value_classes\/ValueClassesJavapTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}