{"files":[{"patch":"@@ -1128,1 +1128,2 @@\n-    if (remove_useless_allocation(phase, in(0), in(TypeFunc::Memory), in(TypeFunc::Parms))) {\n+    PhaseIterGVN* igvn = phase->is_IterGVN();\n+    if (remove_unknown_flat_array_load(igvn, in(0), in(TypeFunc::Memory), in(TypeFunc::Parms))) {\n@@ -1130,1 +1131,0 @@\n-        PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1189,6 +1189,4 @@\n-bool CallStaticJavaNode::remove_useless_allocation(PhaseGVN *phase, Node* ctl, Node* mem, Node* unc_arg) {\n-  \/\/ Split if can cause the flat array branch of an array load to\n-  \/\/ end in an uncommon trap. In that case, the allocation of the\n-  \/\/ loaded value and its initialization is useless. Eliminate it. use\n-  \/\/ the jvm state of the allocation to create a new uncommon trap\n-  \/\/ call at the load.\n+\/\/ Split if can cause the flat array branch of an array load with unknown type (see\n+\/\/ Parse::array_load) to end in an uncommon trap. In that case, the call to\n+\/\/ 'load_unknown_inline' is useless. Replace it with an uncommon trap with the same JVMState.\n+bool CallStaticJavaNode::remove_unknown_flat_array_load(PhaseIterGVN* igvn, Node* ctl, Node* mem, Node* unc_arg) {\n@@ -1198,1 +1196,0 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1209,1 +1206,1 @@\n-      if (remove_useless_allocation(phase, ctl->in(i), mm, unc_arg)) {\n+      if (remove_unknown_flat_array_load(igvn, ctl->in(i), mm, unc_arg)) {\n@@ -1212,1 +1209,1 @@\n-          igvn->replace_input_of(ctl, i, phase->C->top());\n+          igvn->replace_input_of(ctl, i, igvn->C->top());\n@@ -1219,1 +1216,1 @@\n-  \/\/ verify the control flow is ok\n+  \/\/ Verify the control flow is ok\n@@ -1228,1 +1225,1 @@\n-    } else if (call->Opcode() == Op_CallStaticJava &&\n+    } else if (call->Opcode() == Op_CallStaticJava && !call->in(0)->is_top() &&\n@@ -1239,1 +1236,1 @@\n-  if (phase->C->too_many_traps(jvms->method(), jvms->bci(), Deoptimization::trap_request_reason(uncommon_trap_request()))) {\n+  if (igvn->C->too_many_traps(jvms->method(), jvms->bci(), Deoptimization::trap_request_reason(uncommon_trap_request()))) {\n@@ -1243,2 +1240,2 @@\n-  Node* alloc_mem = call->in(TypeFunc::Memory);\n-  if (alloc_mem == nullptr || alloc_mem->is_top()) {\n+  Node* call_mem = call->in(TypeFunc::Memory);\n+  if (call_mem == nullptr || call_mem->is_top()) {\n@@ -1247,3 +1244,3 @@\n-  if (!alloc_mem->is_MergeMem()) {\n-    alloc_mem = MergeMemNode::make(alloc_mem);\n-    igvn->register_new_node_with_optimizer(alloc_mem);\n+  if (!call_mem->is_MergeMem()) {\n+    call_mem = MergeMemNode::make(call_mem);\n+    igvn->register_new_node_with_optimizer(call_mem);\n@@ -1252,2 +1249,2 @@\n-  \/\/ and that there's no unexpected side effect\n-  for (MergeMemStream mms2(mem->as_MergeMem(), alloc_mem->as_MergeMem()); mms2.next_non_empty2(); ) {\n+  \/\/ Verify that there's no unexpected side effect\n+  for (MergeMemStream mms2(mem->as_MergeMem(), call_mem->as_MergeMem()); mms2.next_non_empty2(); ) {\n@@ -1283,2 +1280,2 @@\n-  if (alloc_mem->outcnt() == 0) {\n-    igvn->remove_dead_node(alloc_mem);\n+  if (call_mem->outcnt() == 0) {\n+    igvn->remove_dead_node(call_mem);\n@@ -1301,1 +1298,2 @@\n-  igvn->replace_input_of(call, 0, phase->C->top());\n+  \/\/ Replace the call with an uncommon trap\n+  igvn->replace_input_of(call, 0, igvn->C->top());\n@@ -1305,3 +1303,3 @@\n-  Node* ctrl = phase->transform(new ProjNode(unc, TypeFunc::Control));\n-  Node* halt = phase->transform(new HaltNode(ctrl, call->in(TypeFunc::FramePtr), \"uncommon trap returned which should never happen\"));\n-  igvn->add_input_to(phase->C->root(), halt);\n+  Node* ctrl = igvn->transform(new ProjNode(unc, TypeFunc::Control));\n+  Node* halt = igvn->transform(new HaltNode(ctrl, call->in(TypeFunc::FramePtr), \"uncommon trap returned which should never happen\"));\n+  igvn->add_input_to(igvn->C->root(), halt);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -822,1 +822,1 @@\n-  bool remove_useless_allocation(PhaseGVN *phase, Node* ctl, Node* mem, Node* unc_arg);\n+  bool remove_unknown_flat_array_load(PhaseIterGVN* igvn, Node* ctl, Node* mem, Node* unc_arg);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}