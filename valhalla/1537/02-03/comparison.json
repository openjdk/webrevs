{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.tools.jlink.internal.ImageResourcesTree.ResourceNode;\n@@ -34,0 +35,2 @@\n+import java.util.Set;\n+import java.util.stream.Collectors;\n@@ -43,1 +46,2 @@\n-    private static final String PACKAGE_PREFIX = \"\/packages\/\";\n+    private static final String MODULES_PREFIX = \"\/modules\/\";\n+    private static final String PACKAGES_PREFIX = \"\/packages\/\";\n@@ -45,1 +49,1 @@\n-    \/\/ Copied from ImageResourcesTree.\n+    \/\/ Package entry flags copied from ImageResourcesTree.\n@@ -50,0 +54,56 @@\n+    @Test\n+    public void directoryNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        \/\/ All paths from the root (but not the root itself).\n+        assertTrue(nodes.containsKey(\"\/modules\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\/util\"));\n+        assertFalse(nodes.containsKey(\"\/\"));\n+\n+        \/\/ Check for mismatched modules.\n+        assertTrue(nodes.containsKey(\"\/modules\/java.logging\/java\/util\/logging\"));\n+        assertFalse(nodes.containsKey(\"\/modules\/java.base\/java\/util\/logging\"));\n+\n+        Set<String> dirPaths = nodes.keySet().stream()\n+                .filter(p -> p.startsWith(MODULES_PREFIX))\n+                .collect(Collectors.toSet());\n+        for (String path : dirPaths) {\n+            Node dir = nodes.get(path);\n+            assertFalse(dir instanceof ResourceNode, \"Unexpected resource: \" + dir);\n+            assertEquals(path, dir.getPath());\n+            assertTrue(path.endsWith(\"\/\" + dir.getName()), \"Unexpected directory name: \" + dir);\n+        }\n+    }\n+\n+    @Test\n+    public void resourceNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        \/\/ This map *does not* contain the resources, only the \"directory\" nodes.\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.base\/java\/util\"),\n+                \"SomeClass.class\", \"SomeOtherClass.class\", \"resource.txt\");\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.logging\/java\/util\/logging\"),\n+                \"LoggingClass.class\", \"OtherLoggingClass.class\");\n+    }\n+\n@@ -61,2 +121,2 @@\n-                .filter(p -> p.startsWith(PACKAGE_PREFIX))\n-                .map(p -> p.substring(PACKAGE_PREFIX.length()))\n+                .filter(p -> p.startsWith(PACKAGES_PREFIX))\n+                .map(p -> p.substring(PACKAGES_PREFIX.length()))\n@@ -69,1 +129,1 @@\n-            assertSame(nodes.get(PACKAGE_PREFIX + pkgNode.getName()), pkgNode);\n+            assertSame(nodes.get(PACKAGES_PREFIX + pkgNode.getName()), pkgNode);\n@@ -139,3 +199,6 @@\n-        \/\/ Many modules define the same package, all but one are empty.\n-        \/\/ Order shuffled to show reordering in entry list.\n-        \/\/ Expect: content -> empty{1..6} -> preview{1..2}\n+        \/\/ Resource in many modules define the same package (java.shared).\n+        \/\/ However, the package \"java.shared\" only has content in one module.\n+        \/\/ Order of test data is shuffled to show reordering in entry list.\n+        \/\/ \"java.preview\" would sort before after \"java.resource\" if it were\n+        \/\/ only sorted by name, but the preview flag has precedence.\n+        \/\/ Expect: content -> resource{1..6} -> preview{7..8}\n@@ -143,6 +206,6 @@\n-                \"\/java.empty1\/java\/shared\/one\/SomeClass.class\",\n-                \"\/java.preview1\/META-INF\/preview\/java\/shared\/foo\/SomeClass.class\",\n-                \"\/java.empty3\/java\/shared\/three\/SomeClass.class\",\n-                \"\/java.empty6\/java\/shared\/six\/SomeClass.class\",\n-                \"\/java.preview2\/META-INF\/preview\/java\/shared\/bar\/SomeClass.class\",\n-                \"\/java.empty5\/java\/shared\/five\/SomeClass.class\",\n+                \"\/java.resource1\/java\/shared\/one\/SomeClass.class\",\n+                \"\/java.preview7\/META-INF\/preview\/java\/shared\/foo\/SomeClass.class\",\n+                \"\/java.resource3\/java\/shared\/three\/SomeClass.class\",\n+                \"\/java.resource6\/java\/shared\/six\/SomeClass.class\",\n+                \"\/java.preview8\/META-INF\/preview\/java\/shared\/bar\/SomeClass.class\",\n+                \"\/java.resource5\/java\/shared\/five\/SomeClass.class\",\n@@ -150,2 +213,2 @@\n-                \"\/java.empty2\/java\/shared\/two\/SomeClass.class\",\n-                \"\/java.empty4\/java\/shared\/four\/SomeClass.class\");\n+                \"\/java.resource2\/java\/shared\/two\/SomeClass.class\",\n+                \"\/java.resource4\/java\/shared\/four\/SomeClass.class\");\n@@ -167,1 +230,1 @@\n-            assertEmptyRef(emptyRef, \"java.empty\" + idx++);\n+            assertEmptyRef(emptyRef, \"java.resource\" + idx++);\n@@ -170,1 +233,0 @@\n-\n@@ -172,1 +234,0 @@\n-        idx = 1;\n@@ -180,1 +241,9 @@\n-        return assertInstanceOf(PackageNode.class, nodes.get(PACKAGE_PREFIX + pkgName));\n+        return assertInstanceOf(PackageNode.class, nodes.get(PACKAGES_PREFIX + pkgName));\n+    }\n+\n+    static void assertContainsResources(Node dirNode, String... resourceNames) {\n+        for (String name : resourceNames) {\n+            Node node = assertInstanceOf(ResourceNode.class, dirNode.getChildren(name));\n+            assertEquals(name, node.getName());\n+            assertEquals(dirNode.getPath() + \"\/\" + name, node.getPath());\n+        }\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/jdk.jlink\/jdk\/tools\/jlink\/internal\/ImageResourcesTreeTest.java","additions":89,"deletions":20,"binary":false,"changes":109,"status":"modified"}]}