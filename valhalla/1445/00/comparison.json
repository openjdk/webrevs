{"files":[{"patch":"@@ -413,0 +413,1 @@\n+    InstanceKlass* field_holder = fs.field_descriptor().field_holder();\n@@ -420,1 +421,1 @@\n-      Klass* vk = get_inline_type_field_klass(fs.index());\n+      Klass* vk = field_holder->get_inline_type_field_klass(fs.index());\n@@ -427,1 +428,1 @@\n-    if (fs.field_descriptor().field_holder() != this) {\n+    if (field_holder != this) {\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1339,1 +1339,1 @@\n-    public void test57_verifier(RunInfo info) throws Throwable {\n+    public void test57_verifier() {\n@@ -1342,0 +1342,48 @@\n+\n+    \/\/ Test abstract value class with flat fields\n+    @LooselyConsistentValue\n+    abstract value class MyAbstract58 {\n+        @Strict\n+        @NullRestricted\n+        MyValue58Inline nullfree = new MyValue58Inline();\n+\n+        MyValue58Inline nullable = new MyValue58Inline();\n+    }\n+\n+    @LooselyConsistentValue\n+    value class MyValue58Inline {\n+        int x = rI;\n+    }\n+\n+    @LooselyConsistentValue\n+    value class MyValue58_1 extends MyAbstract58 {\n+    }\n+\n+    @LooselyConsistentValue\n+    value class MyValue58_2 extends MyAbstract58 {\n+        int x = rI;\n+    }\n+\n+    @LooselyConsistentValue\n+    value class MyValue58_3 extends MyAbstract58 {\n+        int x = rI;\n+\n+        @Strict\n+        @NullRestricted\n+        MyValue1 nullfree = MyValue1.DEFAULT;\n+\n+        MyValue1 nullable = null;\n+    }\n+\n+    @Test\n+    public MyValue58_3 test58(MyValue58_1 arg1, MyValue58_2 arg2, MyValue58_3 arg3) {\n+        Asserts.assertEQ(arg1, new MyValue58_1());\n+        Asserts.assertEQ(arg2, new MyValue58_2());\n+        Asserts.assertEQ(arg3, new MyValue58_3());\n+        return arg3;\n+    }\n+\n+    @Run(test = \"test58\")\n+    public void test58_verifier() {\n+        Asserts.assertEQ(test58(new MyValue58_1(), new MyValue58_2(), new MyValue58_3()), new MyValue58_3());\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"}]}