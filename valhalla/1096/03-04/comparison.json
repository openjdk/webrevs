{"files":[{"patch":"@@ -3332,0 +3332,1 @@\n+  int opc = n->Opcode();\n@@ -3339,1 +3340,1 @@\n-    if (n->Opcode() == Op_LoadUB) {\n+    if (opc == Op_LoadUB) {\n@@ -3354,1 +3355,1 @@\n-  if (VectorNode::is_float16_node(n->Opcode())) {\n+  if (opc == Op_ReinterpretHF2S || VectorNode::is_float16_node(opc)) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -595,1 +595,0 @@\n-  case Op_ReinterpretHF2S:\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -475,0 +475,5 @@\n+    public static final String CONV_HF2F = PREFIX + \"CONV_HF2F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CONV_HF2F, \"ConvHF2F\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test auto-vectorization for \"dst (ConvHF2F (ReinterpretHF2S src))\" sequence\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @run driver compiler.vectorization.TestFP16VectorReinterpretConv\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import static java.lang.Float16.*;\n+\n+public class TestFP16VectorReinterpretConv {\n+    private Float16[] fin;\n+    private float[] flout;\n+    private static final int LEN = 2048;\n+    private Random rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.runWithFlags(\"--enable-preview\", \"-XX:-TieredCompilation\", \"-Xbatch\");\n+    }\n+\n+    public TestFP16VectorReinterpretConv() {\n+        fin  = new Float16[LEN];\n+        flout = new float[LEN];\n+        rng = new Random(25);\n+        for (int i = 0; i < LEN; i++) {\n+            fin[i] = shortBitsToFloat16(Float.floatToFloat16(rng.nextFloat()));\n+        }\n+    }\n+\n+    \/\/ When auto-vectorizing a sequence like - \"dst (ConvHF2F (ReinterpretHF2S src))\", the compilation\n+    \/\/ fails due to an assertion error when testing for the source type in vectorCastNode::opcode() for\n+    \/\/ Op_ConvHF2F. The input passed to ConvHF2F is of type T_INT but is supposed to be of type T_SHORT. It is\n+    \/\/ because the container type for ReinterpretHF2S is computed as T_INT instead of T_SHORT. Fix for this\n+    \/\/ is part of JDK-8330021 and this test makes sure the compilation does not fail and vectorization of both\n+    \/\/ ConvHF2F and ReinterpretHF2S takes place.\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \" >= 1\", IRNode.VECTOR_REINTERPRET, \" >= 1\"},\n+        applyIfCPUFeatureOr = {\"avx512_fp16\" , \"true\", \"sve\", \"true\"})\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \" >= 1\", IRNode.VECTOR_REINTERPRET, \" >= 1\"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    public void test() {\n+        for (int i = 0; i < LEN; i++) {\n+            flout[i] = Float16.sum(fin[i], fin[i]).floatValue();\n+        }\n+        checkResult();\n+    }\n+\n+    public void checkResult() {\n+        for (int i = 0; i < LEN; i++) {\n+            float expected = fin[i].floatValue() + fin[i].floatValue();\n+            if (flout[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: flout[\" + i + \"] = \" + flout[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFP16VectorReinterpretConv.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}