{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,2 @@\n+  \/\/ TODO: Add special handling for the secondary_fields of multifields. This is\n+  \/\/ needed once this method is used by other compilers besides C2.\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -429,0 +429,11 @@\n+\n+      if (field->secondary_fields_count() > 1) {\n+        for (int j = 0; j < field->secondary_fields_count() - 1; j++) {\n+          ciField* sec_field = static_cast<ciMultiField*>(field)->secondary_fields()->at(j);\n+          int sec_field_offset = sec_field->offset_in_bytes();\n+          if (sec_field_offset == field_offset)\n+            return sec_field;\n+          if (sec_field_offset > field_offset)\n+            return nullptr;\n+        }\n+      }\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -519,0 +519,1 @@\n+        Node* fld_node = mcall->in(first_ind);\n@@ -520,6 +521,13 @@\n-        uint sec_fields_count = 0;\n-        for (uint j = 0; j < nf; j++) {\n-          Node* fld_node = mcall->in(first_ind + j);\n-          if (iklass != NULL) {\n-            st->print(\" [\");\n-            cifield = iklass->nonstatic_field_at(j - sec_fields_count);\n+        if (iklass != nullptr) {\n+          st->print(\" [\");\n+          cifield = iklass->nonstatic_field_at(0);\n+          cifield->print_name_on(st);\n+          format_helper(regalloc, st, fld_node, \":\", 0, &scobjs);\n+        } else {\n+          format_helper(regalloc, st, fld_node, \"[\", 0, &scobjs);\n+        }\n+        for (uint j = 1; j < nf; j++) {\n+          fld_node = mcall->in(first_ind+j);\n+          if (iklass != nullptr) {\n+            st->print(\", [\");\n+            cifield = iklass->nonstatic_field_at(j);\n@@ -528,15 +536,0 @@\n-            sec_fields_count = 0;\n-            if (cifield->is_multifield_base() && !fld_node->bottom_type()->isa_vect()) {\n-              sec_fields_count = cifield->secondary_fields_count() - 1;\n-              for (uint f = 0; f < sec_fields_count; f++) {\n-                st->print(\" [\");\n-                fld_node = mcall->in(first_ind + j + f + 1);\n-                ciField* sec_field = static_cast<ciMultiField*>(cifield)->secondary_field_at(f);\n-                sec_field->print_name_on(st);\n-                format_helper(regalloc, st, fld_node, \":\", j + f + 1, &scobjs);\n-                if (f < sec_fields_count - 1) {\n-                  st->print(\",\");\n-                }\n-              }\n-              j += sec_fields_count;\n-            }\n@@ -544,5 +537,1 @@\n-            format_helper(regalloc, st, fld_node, \" [\", j, &scobjs);\n-          }\n-\n-          if (j < nf - 1) {\n-            st->print(\",\");\n+            format_helper(regalloc, st, fld_node, \", [\", j, &scobjs);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":15,"deletions":26,"binary":false,"changes":41,"status":"modified"}]}