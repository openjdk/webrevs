{"files":[{"patch":"@@ -183,2 +183,1 @@\n-public final\n-class Character implements java.io.Serializable, Comparable<Character>, Constable {\n+public final class Character implements java.io.Serializable, Comparable<Character>, Constable {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -666,0 +666,3 @@\n+        if (!PreviewFeatures.isEnabled()) {\n+            return false;\n+        }\n@@ -1499,1 +1502,1 @@\n-            \/\/ Ignore unspecified (0x800) access flag for current version\n+            \/\/ Ignore unspecified (0x0800) access flag for current version\n@@ -1502,0 +1505,3 @@\n+        if (!PreviewFeatures.isEnabled() && location == AccessFlag.Location.INNER_CLASS) {\n+            accessFlags &= ~Modifier.IDENTITY; \/\/ drop ACC_IDENTITY bit in inner class if not in preview\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -374,1 +374,1 @@\n-            clb.withFlags((ValhallaFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n+            clb.withFlags((PreviewFeatures.isEnabled() ? ACC_IDENTITY  : 0) | ACC_FINAL | ACC_SYNTHETIC);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -190,2 +191,1 @@\n-     * For class file versions up to Valhalla or if Valhalla is not enabled,\n-     * {@code 0x0020} access flag bit is {@linkplain #SUPER SUPER access flag}; otherwise,\n+     * If preview feature is enabled, \n@@ -195,1 +195,1 @@\n-            ValhallaFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS,\n+            PreviewFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS,\n@@ -199,2 +199,3 @@\n-                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n-                        ValhallaFeatures.isEnabled()) ? Location.EMPTY_SET : Location.SET_CLASS;}\n+                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0) &&\n+                        PreviewFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS;\n+            }\n@@ -209,0 +210,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n@@ -210,1 +212,1 @@\n-            ValhallaFeatures.isEnabled() ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET,\n+            PreviewFeatures.isEnabled() ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET,\n@@ -214,2 +216,4 @@\n-                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n-                            ValhallaFeatures.isEnabled()) ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET;}\n+                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0\n+                            && PreviewFeatures.isEnabled())\n+                            ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET;\n+                }\n@@ -355,1 +359,1 @@\n-    STRICT(0x0000_0800, true, !ValhallaFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_FIELD,\n+    STRICT(Modifier.STRICT, true, Location.EMPTY_SET,\n@@ -359,9 +363,4 @@\n-                   if (ValhallaFeatures.isEnabled() && cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0) {\n-                       return Location.SET_FIELD;\n-                   } else if (cffv.compareTo(ClassFileFormatVersion.RELEASE_2) >= 0 &&\n-                              cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) {\n-                       return Location.SET_METHOD;\n-                   } else {\n-                       return Location.EMPTY_SET;\n-                   }\n-               }\n+                   return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2)  >= 0 &&\n+                           cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n+                       Location.SET_METHOD:\n+                       Location.EMPTY_SET;}\n@@ -697,1 +696,1 @@\n-                                Set.of(PUBLIC, FINAL, IDENTITY,\n+                                Set.of(PUBLIC, FINAL, (PreviewFeatures.isEnabled() ? IDENTITY : SUPER),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -321,0 +323,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+        jdk.jfr,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -35,1 +37,0 @@\n-import static java.lang.reflect.Modifier.IDENTITY;\n@@ -57,1 +58,2 @@\n-        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC | IDENTITY;\n+        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC |\n+                (PreviewFeatures.isEnabled() ? 0x0020 : 0); \/\/ ACC_IDENTITY temp constant to avoid preview dependency\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotModifiers.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -114,1 +114,1 @@\n-        builder.withFlags(AccessFlag.FINAL, AccessFlag.PUBLIC, ValhallaFeatures.isEnabled() ? AccessFlag.IDENTITY : AccessFlag.SUPER);\n+        builder.withFlags(AccessFlag.FINAL, AccessFlag.PUBLIC, (PreviewFeatures.isEnabled() ? AccessFlag.IDENTITY : AccessFlag.SUPER));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventClassBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -93,1 +93,1 @@\n-            clb.withFlags((ValhallaFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n+            clb.withFlags((PreviewFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm --enable-preview BasicAccessFlagTest\n+ * @run main BasicAccessFlagTest\n@@ -34,1 +37,0 @@\n-import java.util.List;\n@@ -40,0 +42,3 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @run main\/othervm --enable-preview ClassAccessFlagTest\n+ * @run main ClassAccessFlagTest\n@@ -34,0 +38,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -50,1 +56,2 @@\n-@ExpectedClassFlags(\"[PUBLIC, FINAL, IDENTITY]\")\n+@ExpectedClassFlags(value = \"[PUBLIC, FINAL, SUPER]\",\n+        preview = \"[PUBLIC, FINAL, IDENTITY]\")\n@@ -59,1 +66,3 @@\n-            Foo.class,\n+            TestAbstractValueClass.class,\n+            TestPrivateAbstractClass.class,\n+            TestPrivateAbstractValueClass.class,\n@@ -85,1 +94,3 @@\n-            if (!expected.value().equals(actual)) {\n+            String expectedFlags = (PreviewFeatures.isEnabled() && !expected.preview().isEmpty())\n+                    ? expected.preview() : expected.value();\n+            if (!expectedFlags.equals(actual)) {\n@@ -87,1 +98,1 @@\n-                                           \" expected \" + expected.value() +\n+                                           \" expected \" + expected +\n@@ -191,1 +202,2 @@\n-    @ExpectedClassFlags(\"[FINAL, IDENTITY]\")\n+    @ExpectedClassFlags(value = \"[FINAL]\",\n+            preview = \"[FINAL, IDENTITY]\")\n@@ -194,1 +206,2 @@\n-    @ExpectedClassFlags(\"[IDENTITY, ABSTRACT]\")\n+    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n+            preview = \"[IDENTITY, ABSTRACT]\")\n@@ -197,0 +210,4 @@\n+    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n+            preview = \"[ABSTRACT]\")\n+    \/*package*\/ abstract value class TestAbstractValueClass {}\n+\n@@ -200,1 +217,2 @@\n-    @ExpectedClassFlags(\"[PUBLIC, STATIC, FINAL, IDENTITY, ENUM]\")\n+    @ExpectedClassFlags(value = \"[PUBLIC, STATIC, FINAL, ENUM]\",\n+            preview = \"[PUBLIC, STATIC, FINAL, IDENTITY, ENUM]\")\n@@ -207,1 +225,2 @@\n-    @ExpectedClassFlags(\"[PROTECTED, STATIC, IDENTITY, ABSTRACT, ENUM]\")\n+    @ExpectedClassFlags(value = \"[PROTECTED, STATIC, ABSTRACT, ENUM]\",\n+            preview = \"[PROTECTED, STATIC, IDENTITY, ABSTRACT, ENUM]\")\n@@ -216,2 +235,7 @@\n-    @ExpectedClassFlags(\"[PRIVATE, IDENTITY, ABSTRACT]\")\n-    private abstract class Foo {}\n+    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n+            preview = \"[PRIVATE, IDENTITY, ABSTRACT]\")\n+    private abstract class TestPrivateAbstractClass {}\n+\n+    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n+            preview = \"[PRIVATE, ABSTRACT]\")\n+    private abstract value class TestPrivateAbstractValueClass {}\n@@ -227,0 +251,1 @@\n+    String preview() default \"\";\n@@ -233,1 +258,2 @@\n-@ExpectedClassFlags(\"[FINAL, IDENTITY, ENUM]\")\n+@ExpectedClassFlags(value=\"[FINAL, SUPER, ENUM]\",\n+        preview=\"[FINAL, IDENTITY, ENUM]\")\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":37,"deletions":11,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                               ClassFileFormatVersion.RELEASE_21),\n+                               ClassFileFormatVersion.RELEASE_22),\n@@ -273,2 +273,1 @@\n-                        (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0)\n-                                ? Set.of(Location.FIELD) : Set.of();\n+                Set.of();\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.misc.ValhallaFeatures;\n@@ -34,1 +33,0 @@\n-import java.util.List;\n@@ -67,0 +65,10 @@\n+                Byte.class,\n+                Short.class,\n+                Integer.class,\n+                Long.class,\n+                Float.class,\n+                Double.class,\n+                Boolean.class,\n+                Character.class,\n+                Number.class,\n+                Record.class,\n@@ -83,1 +91,0 @@\n-                Record.class,\n@@ -89,1 +96,1 @@\n-     * Verify that the class is a value class if --enable-preview true\n+     * Verify that the class is a value class if --enable-preview is true\n@@ -95,4 +102,2 @@\n-        System.out.printf(\"isPreview: %s, Valhalla.isEnabled: %s%n\",\n-                PreviewFeatures.isEnabled(), ValhallaFeatures.isEnabled());\n-        assertEquals(PreviewFeatures.isEnabled() && ValhallaFeatures.isEnabled(),\n-                clazz.isValue(), clazz.getName());\n+        System.out.printf(\"isPreview: %s%n\", PreviewFeatures.isEnabled());\n+        assertEquals(PreviewFeatures.isEnabled(), clazz.isValue(), clazz.getName());\n","filename":"test\/jdk\/valhalla\/valuetypes\/UseValueClassTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,0 +36,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -49,1 +51,3 @@\n-               \"flags: (0x4030) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\",\n+               PreviewFeatures.isEnabled()\n+                       ? \"flags: (0x4030) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                       : \"flags: (0x4030) ACC_FINAL, ACC_SUPER, ACC_ENUM\",\n","filename":"test\/langtools\/tools\/javap\/4870651\/T4870651.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm --enable-preview T4975569\n+ * @run main T4975569\n@@ -36,0 +39,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -46,1 +51,6 @@\n-        verify(E.class.getName(),    \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\");\n+        verify(E.class.getName(), PreviewFeatures.isEnabled()\n+                ? \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                : \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_SUPER, ACC_ENUM\");\n+        verify(E.class.getName(),    PreviewFeatures.isEnabled()\n+                ? \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                : \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_SUPER, ACC_ENUM\");\n@@ -108,1 +118,0 @@\n-\n","filename":"test\/langtools\/tools\/javap\/T4975569.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}