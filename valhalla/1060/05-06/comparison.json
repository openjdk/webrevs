{"files":[{"patch":"@@ -6,2 +6,1 @@\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n+ * under the terms of the GNU General Public License version 2 only, as * published by the Free Software Foundation.\n@@ -30,2 +29,1 @@\n- * @run main\/othervm --enable-preview ClassAccessFlagTest\n- * @run main ClassAccessFlagTest\n+ * @run main ClassAccessFlagPreviewTest\n@@ -58,1 +56,1 @@\n-public final class ClassAccessFlagTest {\n+public final class ClassAccessFlagPreviewTest {\n@@ -62,1 +60,1 @@\n-            ClassAccessFlagTest.class,\n+            ClassAccessFlagPreviewTest.class,\n@@ -76,2 +74,2 @@\n-        \/\/ Nested classes of ClassAccessFlagTest\n-        checkClasses(ClassAccessFlagTest.class.getDeclaredClasses());\n+        \/\/ Nested classes of ClassAccessFlagPreviewTest\n+        checkClasses(ClassAccessFlagPreviewTest.class.getDeclaredClasses());\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagPreviewTest.java","additions":6,"deletions":8,"binary":false,"changes":14,"previous_filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib ..\n@@ -30,2 +31,0 @@\n- * @run main\/othervm --enable-preview ClassAccessFlagTest\n- * @run main ClassAccessFlagTest\n@@ -34,0 +33,3 @@\n+\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -38,1 +40,2 @@\n-import jdk.internal.misc.PreviewFeatures;\n+import jtreg.SkippedException;\n+\n@@ -56,2 +59,1 @@\n-@ExpectedClassFlags(value = \"[PUBLIC, FINAL, SUPER]\",\n-        preview = \"[PUBLIC, FINAL, IDENTITY]\")\n+@ExpectedClassFlags(\"[PUBLIC, FINAL, SUPER]\")\n@@ -60,0 +62,3 @@\n+        if (PreviewFeatures.isEnabled()) {\n+            throw new SkippedException(\"Preview mode not supported\");\n+        }\n@@ -64,7 +69,0 @@\n-            TestFinalClass.class,\n-            TestAbstractClass.class,\n-            TestAbstractValueClass.class,\n-            TestPrivateAbstractClass.class,\n-            TestPrivateAbstractValueClass.class,\n-            StaticTestInterface.class,\n-            TestMarkerAnnotation.class,\n@@ -94,3 +92,1 @@\n-            String expectedFlags = (PreviewFeatures.isEnabled() && !expected.preview().isEmpty())\n-                    ? expected.preview() : expected.value();\n-            if (!expectedFlags.equals(actual)) {\n+            if (!expected.value().equals(actual)) {\n@@ -98,1 +94,1 @@\n-                                           \" expected \" + expected +\n+                                           \" expected \" + expected.value() +\n@@ -171,12 +167,0 @@\n-            \/\/ Verify IDENTITY, ABSTRACT, FINAL, and access mode\n-            Set<AccessFlag> expected = new HashSet<>(4);\n-            expected.add(AccessFlag.ABSTRACT);\n-            expected.add(AccessFlag.FINAL);\n-\/\/            expected.add(AccessFlag.IDENTITY);  \/\/ NYI Pending: JDK-8294866\n-            if (accessLevel != null)\n-                expected.add(accessLevel);\n-            if (!expected.equals(arrayClass.accessFlags())) {\n-                throw new RuntimeException(\"Unexpected access flags for array: \" + accessClass +\n-                        \": actual: \" + arrayClass.accessFlags() +\n-                        \", expected: \" + expected);\n-            }\n@@ -191,1 +175,0 @@\n-    \/\/ Include cases for classes with identity, value modifier, or no modifier.\n@@ -202,2 +185,1 @@\n-    @ExpectedClassFlags(value = \"[FINAL]\",\n-            preview = \"[FINAL, IDENTITY]\")\n+    @ExpectedClassFlags(\"[FINAL]\")\n@@ -206,2 +188,1 @@\n-    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n-            preview = \"[IDENTITY, ABSTRACT]\")\n+    @ExpectedClassFlags(\"[ABSTRACT]\")\n@@ -210,4 +191,0 @@\n-    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n-            preview = \"[ABSTRACT]\")\n-    \/*package*\/ abstract value class TestAbstractValueClass {}\n-\n@@ -217,2 +194,1 @@\n-    @ExpectedClassFlags(value = \"[PUBLIC, STATIC, FINAL, ENUM]\",\n-            preview = \"[PUBLIC, STATIC, FINAL, IDENTITY, ENUM]\")\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, FINAL, ENUM]\")\n@@ -225,2 +201,1 @@\n-    @ExpectedClassFlags(value = \"[PROTECTED, STATIC, ABSTRACT, ENUM]\",\n-            preview = \"[PROTECTED, STATIC, IDENTITY, ABSTRACT, ENUM]\")\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, ABSTRACT, ENUM]\")\n@@ -235,7 +210,2 @@\n-    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n-            preview = \"[PRIVATE, IDENTITY, ABSTRACT]\")\n-    private abstract class TestPrivateAbstractClass {}\n-\n-    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n-            preview = \"[PRIVATE, ABSTRACT]\")\n-    private abstract value class TestPrivateAbstractValueClass {}\n+    @ExpectedClassFlags(\"[PRIVATE, ABSTRACT]\")\n+    private abstract class Foo {}\n@@ -251,1 +221,0 @@\n-    String preview() default \"\";\n@@ -258,2 +227,1 @@\n-@ExpectedClassFlags(value=\"[FINAL, SUPER, ENUM]\",\n-        preview=\"[FINAL, IDENTITY, ENUM]\")\n+@ExpectedClassFlags(\"[FINAL, SUPER, ENUM]\")\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":20,"deletions":52,"binary":false,"changes":72,"status":"modified"}]}