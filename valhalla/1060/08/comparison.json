{"files":[{"patch":"@@ -183,2 +183,1 @@\n-public final\n-class Character implements java.io.Serializable, Comparable<Character>, Constable {\n+public final class Character implements java.io.Serializable, Comparable<Character>, Constable {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -666,0 +666,3 @@\n+        if (!PreviewFeatures.isEnabled()) {\n+            return false;\n+        }\n@@ -1499,1 +1502,1 @@\n-            \/\/ Ignore unspecified (0x800) access flag for current version\n+            \/\/ Ignore unspecified (0x0800) access flag for current version\n@@ -1502,0 +1505,3 @@\n+        if (!PreviewFeatures.isEnabled() && location == AccessFlag.Location.INNER_CLASS) {\n+            accessFlags &= ~Modifier.IDENTITY; \/\/ drop ACC_IDENTITY bit in inner class if not in preview\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -374,1 +374,1 @@\n-            clb.withFlags((ValhallaFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n+            clb.withFlags((PreviewFeatures.isEnabled() ? ACC_IDENTITY  : 0) | ACC_FINAL | ACC_SYNTHETIC);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -190,2 +191,1 @@\n-     * For class file versions up to Valhalla or if Valhalla is not enabled,\n-     * {@code 0x0020} access flag bit is {@linkplain #SUPER SUPER access flag}; otherwise,\n+     * If preview feature is enabled,\n@@ -195,1 +195,1 @@\n-            ValhallaFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS,\n+            PreviewFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS,\n@@ -199,2 +199,3 @@\n-                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n-                        ValhallaFeatures.isEnabled()) ? Location.EMPTY_SET : Location.SET_CLASS;}\n+                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0) &&\n+                        PreviewFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS;\n+            }\n@@ -209,0 +210,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n@@ -210,1 +212,1 @@\n-            ValhallaFeatures.isEnabled() ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET,\n+            PreviewFeatures.isEnabled() ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET,\n@@ -214,2 +216,4 @@\n-                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n-                            ValhallaFeatures.isEnabled()) ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET;}\n+                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0\n+                            && PreviewFeatures.isEnabled())\n+                            ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET;\n+                }\n@@ -355,1 +359,1 @@\n-    STRICT(0x0000_0800, true, !ValhallaFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_FIELD,\n+    STRICT(Modifier.STRICT, true, Location.EMPTY_SET,\n@@ -359,9 +363,4 @@\n-                   if (ValhallaFeatures.isEnabled() && cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0) {\n-                       return Location.SET_FIELD;\n-                   } else if (cffv.compareTo(ClassFileFormatVersion.RELEASE_2) >= 0 &&\n-                              cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) {\n-                       return Location.SET_METHOD;\n-                   } else {\n-                       return Location.EMPTY_SET;\n-                   }\n-               }\n+                   return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2)  >= 0 &&\n+                           cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n+                       Location.SET_METHOD:\n+                       Location.EMPTY_SET;}\n@@ -697,1 +696,1 @@\n-                                Set.of(PUBLIC, FINAL, IDENTITY,\n+                                Set.of(PUBLIC, FINAL, (PreviewFeatures.isEnabled() ? IDENTITY : SUPER),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -321,0 +323,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+        jdk.jfr,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -35,1 +37,0 @@\n-import static java.lang.reflect.Modifier.IDENTITY;\n@@ -57,1 +58,2 @@\n-        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC | IDENTITY;\n+        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC |\n+                (PreviewFeatures.isEnabled() ? 0x0020 : 0); \/\/ ACC_IDENTITY temp constant to avoid preview dependency\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotModifiers.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -114,1 +114,1 @@\n-        builder.withFlags(AccessFlag.FINAL, AccessFlag.PUBLIC, ValhallaFeatures.isEnabled() ? AccessFlag.IDENTITY : AccessFlag.SUPER);\n+        builder.withFlags(AccessFlag.FINAL, AccessFlag.PUBLIC, (PreviewFeatures.isEnabled() ? AccessFlag.IDENTITY : AccessFlag.SUPER));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventClassBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import jdk.internal.misc.ValhallaFeatures;\n+import jdk.internal.misc.PreviewFeatures;\n@@ -93,1 +93,1 @@\n-            clb.withFlags((ValhallaFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n+            clb.withFlags((PreviewFeatures.isEnabled() ? ACC_IDENTITY : 0) | ACC_FINAL | ACC_SYNTHETIC);\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm --enable-preview BasicAccessFlagTest\n+ * @run main BasicAccessFlagTest\n@@ -34,1 +37,0 @@\n-import java.util.List;\n@@ -40,0 +42,3 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670 8291734 8296743\n+ * @summary Test expected AccessFlag's on classes.\n+ * @modules java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @run main ClassAccessFlagPreviewTest\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+import jdk.internal.misc.PreviewFeatures;\n+\n+\/*\n+ * Class access flags that can directly or indirectly declared in\n+ * source include:\n+ * public, private, protected, static, final, interface, abstract,\n+ * annotation, enum.\n+ *\n+ * Additionally, the access flags super and synthetic cannot be\n+ * explicitly applied.\n+ *\n+ * This test is written on top of the facilities of core reflection.\n+ *\n+ * Note that core reflection does not offer a supported mechanism to\n+ * return the Class object created from a module-info.class\n+ * file. Therefore, this test does not attempt to probe the setting of\n+ * that access flag.\n+ *\/\n+@ExpectedClassFlags(value = \"[PUBLIC, FINAL, SUPER]\",\n+        preview = \"[PUBLIC, FINAL, IDENTITY]\")\n+public final class ClassAccessFlagPreviewTest {\n+    public static void main(String... args) {\n+        \/\/ Top-level and auxiliary classes; i.e. non-inner classes\n+        Class<?>[] testClasses = {\n+            ClassAccessFlagPreviewTest.class,\n+            TestInterface.class,\n+            TestFinalClass.class,\n+            TestAbstractClass.class,\n+            TestAbstractValueClass.class,\n+            TestPrivateAbstractClass.class,\n+            TestPrivateAbstractValueClass.class,\n+            StaticTestInterface.class,\n+            TestMarkerAnnotation.class,\n+            ExpectedClassFlags.class,\n+            TestOuterEnum.class\n+        };\n+        checkClasses(testClasses);\n+\n+        \/\/ Nested classes of ClassAccessFlagPreviewTest\n+        checkClasses(ClassAccessFlagPreviewTest.class.getDeclaredClasses());\n+\n+        checkPrimitives();\n+        checkArrays();\n+    }\n+\n+    private static void checkClasses(Class<?>[] classes) {\n+        for (var clazz : classes) {\n+            checkClass(clazz);\n+        }\n+    }\n+\n+    private static void checkClass(Class<?> clazz) {\n+        ExpectedClassFlags expected =\n+            clazz.getAnnotation(ExpectedClassFlags.class);\n+        if (expected != null) {\n+            String actual = clazz.accessFlags().toString();\n+            String expectedFlags = (PreviewFeatures.isEnabled() && !expected.preview().isEmpty())\n+                    ? expected.preview() : expected.value();\n+            if (!expectedFlags.equals(actual)) {\n+                throw new RuntimeException(\"On \" + clazz +\n+                                           \" expected \" + expected +\n+                                           \" got \" + actual);\n+            }\n+        }\n+    }\n+\n+    private static void checkPrimitives() {\n+        final Class<?>[] primitives = {\n+            byte.class,\n+            int.class,\n+            long.class,\n+            short.class,\n+            char.class,\n+            float.class,\n+            double.class,\n+            boolean.class,\n+            void.class \/\/ same access flag rules\n+        };\n+\n+        var expected = Set.of(AccessFlag.PUBLIC,\n+                              AccessFlag.FINAL,\n+                              AccessFlag.ABSTRACT);\n+\n+        for(var primClass : primitives) {\n+            var accessFlags = primClass.accessFlags();\n+            if (!accessFlags.equals(expected)) {\n+                throw new RuntimeException(\"Unexpected flags on \" +\n+                                           primClass);\n+            }\n+        }\n+    }\n+\n+    private static boolean containsAny(Set<AccessFlag> input,\n+                                       Set<AccessFlag> test) {\n+        var copy = new HashSet<>(input);\n+        return copy.removeAll(test);\n+    }\n+\n+    private static void checkArrays() {\n+        Class<?>[] accessClasses = {\n+            PublicInterface.class,\n+            ProtectedInterface.class,\n+            PrivateInterface.class,\n+        };\n+\n+        for (var accessClass : accessClasses) {\n+            AccessFlag accessLevel;\n+            var flags = accessClass.accessFlags();\n+            if (flags.contains(AccessFlag.PUBLIC))\n+                accessLevel = AccessFlag.PUBLIC;\n+            else if (flags.contains(AccessFlag.PROTECTED))\n+                accessLevel = AccessFlag.PROTECTED;\n+            else if (flags.contains(AccessFlag.PRIVATE))\n+                accessLevel = AccessFlag.PRIVATE;\n+            else\n+                accessLevel = null;\n+\n+            var arrayClass = accessClass.arrayType();\n+            \/\/ Access modifier must match on the array type\n+            if (accessLevel != null) {\n+                if (!arrayClass.accessFlags().contains(accessLevel)) {\n+                    throw new RuntimeException(\"Mismatched access flags on \" +\n+                                               arrayClass);\n+                }\n+            } else {\n+                if (containsAny(arrayClass.accessFlags(),\n+                                Set.of(AccessFlag.PUBLIC,\n+                                       AccessFlag.PROTECTED,\n+                                       AccessFlag.PRIVATE))) {\n+                    throw new RuntimeException(\"Unexpected access flags on \" +\n+                                               arrayClass);\n+                }\n+            }\n+            \/\/ Verify IDENTITY, ABSTRACT, FINAL, and access mode\n+            Set<AccessFlag> expected = new HashSet<>(4);\n+            expected.add(AccessFlag.ABSTRACT);\n+            expected.add(AccessFlag.FINAL);\n+\/\/            expected.add(AccessFlag.IDENTITY);  \/\/ NYI Pending: JDK-8294866\n+            if (accessLevel != null)\n+                expected.add(accessLevel);\n+            if (!expected.equals(arrayClass.accessFlags())) {\n+                throw new RuntimeException(\"Unexpected access flags for array: \" + accessClass +\n+                        \": actual: \" + arrayClass.accessFlags() +\n+                        \", expected: \" + expected);\n+            }\n+        }\n+\n+    }\n+\n+    \/\/ inner classes and interfaces; possible flags on INNER_CLASS\n+    \/\/ locations:\n+    \/\/ PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, INTERFACE, ABSTRACT,\n+    \/\/ SYNTHETIC, ANNOTATION, ENUM.\n+    \/\/ Include cases for classes with identity, value modifier, or no modifier.\n+\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, INTERFACE, ABSTRACT]\")\n+    public      interface PublicInterface {}\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, INTERFACE, ABSTRACT]\")\n+    protected   interface ProtectedInterface {}\n+    @ExpectedClassFlags(\"[PRIVATE, STATIC, INTERFACE, ABSTRACT]\")\n+    private     interface PrivateInterface {}\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT]\")\n+    \/*package*\/ interface PackageInterface {}\n+\n+    @ExpectedClassFlags(value = \"[FINAL]\",\n+            preview = \"[FINAL, IDENTITY]\")\n+    \/*package*\/ final class TestFinalClass {}\n+\n+    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n+            preview = \"[IDENTITY, ABSTRACT]\")\n+    \/*package*\/ abstract class TestAbstractClass {}\n+\n+    @ExpectedClassFlags(value = \"[ABSTRACT]\",\n+            preview = \"[ABSTRACT]\")\n+    \/*package*\/ abstract value class TestAbstractValueClass {}\n+\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT, ANNOTATION]\")\n+    \/*package*\/ @interface TestMarkerAnnotation {}\n+\n+    @ExpectedClassFlags(value = \"[PUBLIC, STATIC, FINAL, ENUM]\",\n+            preview = \"[PUBLIC, STATIC, FINAL, IDENTITY, ENUM]\")\n+    public enum MetaSynVar {\n+        QUUX;\n+    }\n+\n+    \/\/ Is there is at least one special enum constant, the enum class\n+    \/\/ itself is implicitly abstract rather than final.\n+    @ExpectedClassFlags(value = \"[PROTECTED, STATIC, ABSTRACT, ENUM]\",\n+            preview = \"[PROTECTED, STATIC, IDENTITY, ABSTRACT, ENUM]\")\n+    protected enum MetaSynVar2 {\n+        WOMBAT{\n+            @Override\n+            public int foo() {return 42;}\n+        };\n+        public abstract int foo();\n+    }\n+\n+    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n+            preview = \"[PRIVATE, IDENTITY, ABSTRACT]\")\n+    private abstract class TestPrivateAbstractClass {}\n+\n+    @ExpectedClassFlags(value = \"[PRIVATE, ABSTRACT]\",\n+            preview = \"[PRIVATE, ABSTRACT]\")\n+    private abstract value class TestPrivateAbstractValueClass {}\n+\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT]\")\n+    interface StaticTestInterface {}\n+}\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExpectedClassFlags(\"[INTERFACE, ABSTRACT, ANNOTATION]\")\n+@interface ExpectedClassFlags {\n+    String value();\n+    String preview() default \"\";\n+}\n+\n+@ExpectedClassFlags(\"[INTERFACE, ABSTRACT]\")\n+interface TestInterface {}\n+\n+\n+@ExpectedClassFlags(value=\"[FINAL, SUPER, ENUM]\",\n+        preview=\"[FINAL, IDENTITY, ENUM]\")\n+enum TestOuterEnum {\n+    INSTANCE;\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagPreviewTest.java","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib ..\n+ * @enablePreview\n@@ -30,0 +33,3 @@\n+\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -34,0 +40,3 @@\n+import jtreg.SkippedException;\n+\n+\n@@ -50,1 +59,1 @@\n-@ExpectedClassFlags(\"[PUBLIC, FINAL, IDENTITY]\")\n+@ExpectedClassFlags(\"[PUBLIC, FINAL, SUPER]\")\n@@ -53,0 +62,3 @@\n+        if (PreviewFeatures.isEnabled()) {\n+            throw new SkippedException(\"Preview mode not supported\");\n+        }\n@@ -57,5 +69,0 @@\n-            TestFinalClass.class,\n-            TestAbstractClass.class,\n-            Foo.class,\n-            StaticTestInterface.class,\n-            TestMarkerAnnotation.class,\n@@ -160,12 +167,0 @@\n-            \/\/ Verify IDENTITY, ABSTRACT, FINAL, and access mode\n-            Set<AccessFlag> expected = new HashSet<>(4);\n-            expected.add(AccessFlag.ABSTRACT);\n-            expected.add(AccessFlag.FINAL);\n-\/\/            expected.add(AccessFlag.IDENTITY);  \/\/ NYI Pending: JDK-8294866\n-            if (accessLevel != null)\n-                expected.add(accessLevel);\n-            if (!expected.equals(arrayClass.accessFlags())) {\n-                throw new RuntimeException(\"Unexpected access flags for array: \" + accessClass +\n-                        \": actual: \" + arrayClass.accessFlags() +\n-                        \", expected: \" + expected);\n-            }\n@@ -180,1 +175,0 @@\n-    \/\/ Include cases for classes with identity, value modifier, or no modifier.\n@@ -191,1 +185,1 @@\n-    @ExpectedClassFlags(\"[FINAL, IDENTITY]\")\n+    @ExpectedClassFlags(\"[FINAL]\")\n@@ -194,1 +188,1 @@\n-    @ExpectedClassFlags(\"[IDENTITY, ABSTRACT]\")\n+    @ExpectedClassFlags(\"[ABSTRACT]\")\n@@ -200,1 +194,1 @@\n-    @ExpectedClassFlags(\"[PUBLIC, STATIC, FINAL, IDENTITY, ENUM]\")\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, FINAL, ENUM]\")\n@@ -207,1 +201,1 @@\n-    @ExpectedClassFlags(\"[PROTECTED, STATIC, IDENTITY, ABSTRACT, ENUM]\")\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, ABSTRACT, ENUM]\")\n@@ -216,1 +210,1 @@\n-    @ExpectedClassFlags(\"[PRIVATE, IDENTITY, ABSTRACT]\")\n+    @ExpectedClassFlags(\"[PRIVATE, ABSTRACT]\")\n@@ -233,1 +227,1 @@\n-@ExpectedClassFlags(\"[FINAL, IDENTITY, ENUM]\")\n+@ExpectedClassFlags(\"[FINAL, SUPER, ENUM]\")\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                               ClassFileFormatVersion.RELEASE_21),\n+                               ClassFileFormatVersion.RELEASE_22),\n@@ -273,2 +273,1 @@\n-                        (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0)\n-                                ? Set.of(Location.FIELD) : Set.of();\n+                Set.of();\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.misc.ValhallaFeatures;\n@@ -34,1 +33,0 @@\n-import java.util.List;\n@@ -67,0 +65,10 @@\n+                Byte.class,\n+                Short.class,\n+                Integer.class,\n+                Long.class,\n+                Float.class,\n+                Double.class,\n+                Boolean.class,\n+                Character.class,\n+                Number.class,\n+                Record.class,\n@@ -83,1 +91,0 @@\n-                Record.class,\n@@ -89,1 +96,1 @@\n-     * Verify that the class is a value class if --enable-preview true\n+     * Verify that the class is a value class if --enable-preview is true\n@@ -95,4 +102,2 @@\n-        System.out.printf(\"isPreview: %s, Valhalla.isEnabled: %s%n\",\n-                PreviewFeatures.isEnabled(), ValhallaFeatures.isEnabled());\n-        assertEquals(PreviewFeatures.isEnabled() && ValhallaFeatures.isEnabled(),\n-                clazz.isValue(), clazz.getName());\n+        System.out.printf(\"isPreview: %s%n\", PreviewFeatures.isEnabled());\n+        assertEquals(PreviewFeatures.isEnabled(), clazz.isValue(), clazz.getName());\n","filename":"test\/jdk\/valhalla\/valuetypes\/UseValueClassTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,0 +36,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -49,1 +51,3 @@\n-               \"flags: (0x4030) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\",\n+               PreviewFeatures.isEnabled()\n+                       ? \"flags: (0x4030) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                       : \"flags: (0x4030) ACC_FINAL, ACC_SUPER, ACC_ENUM\",\n","filename":"test\/langtools\/tools\/javap\/4870651\/T4870651.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm --enable-preview T4975569\n+ * @run main T4975569\n@@ -36,0 +39,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -46,1 +51,6 @@\n-        verify(E.class.getName(),    \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\");\n+        verify(E.class.getName(), PreviewFeatures.isEnabled()\n+                ? \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                : \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_SUPER, ACC_ENUM\");\n+        verify(E.class.getName(),    PreviewFeatures.isEnabled()\n+                ? \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_IDENTITY, ACC_ENUM\"\n+                : \"flags: \\\\(0x4030\\\\) ACC_FINAL, ACC_SUPER, ACC_ENUM\");\n@@ -108,1 +118,0 @@\n-\n","filename":"test\/langtools\/tools\/javap\/T4975569.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}