{"files":[{"patch":"@@ -1690,3 +1690,0 @@\n-                if (isSubtype(erasure(ts.type), erasure(ss.type))) {\n-                    return false;\n-                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1349,2 +1349,1 @@\n-        \/\/ isValueObject is not included in Object yet so we need a work around\n-        return name == names.isValueObject;\n+        return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1358,3 +1358,0 @@\n-\n-            \/\/ TYPs can't be declared synchronized\n-            mask &= ~SYNCHRONIZED;\n@@ -1391,4 +1388,0 @@\n-                 checkDisjoint(pos, flags,\n-                        INTERFACE,\n-                        VALUE_CLASS)\n-                 &&\n@@ -1403,1 +1396,1 @@\n-                 checkDisjoint(pos, (flags | implicit), \/\/ complain against volatile & implcitly final entities too.\n+                 checkDisjoint(pos, flags,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2385,1 +2385,1 @@\n-                    \/\/ verify all static final fields got initailized\n+                    \/\/ verify all static final fields got initialized\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+    private final boolean allowValueClasses;\n@@ -138,0 +139,2 @@\n+        this.allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -915,0 +918,1 @@\n+            \/\/ IDENTITY_TYPE will be interpreted as ACC_SUPER for older class files so we are fine\n@@ -1399,0 +1403,1 @@\n+                \/\/ IDENTITY_TYPE will be interpreted as ACC_SUPER for older class files so we are fine\n@@ -1640,1 +1645,1 @@\n-        VarSymbol outerThis = makeOuterThisVarSymbol(owner, FINAL | SYNTHETIC | (owner.isValueClass() ? STRICT : 0));\n+        VarSymbol outerThis = makeOuterThisVarSymbol(owner, FINAL | SYNTHETIC | (allowValueClasses && owner.isValueClass() ? STRICT : 0));\n@@ -1847,1 +1852,0 @@\n-            Assert.error();\n@@ -1973,0 +1977,1 @@\n+        \/\/ IDENTITY_TYPE will be interpreted as ACC_SUPER for older class files so we are fine\n@@ -2025,0 +2030,1 @@\n+        \/\/ IDENTITY_TYPE will be interpreted as ACC_SUPER for older class files so we are fine\n@@ -2313,1 +2319,1 @@\n-            tree.pos, freevars(currentClass), currentClass, currentClass.isValueClass() ? STRICT : 0);\n+            tree.pos, freevars(currentClass), currentClass, allowValueClasses && currentClass.isValueClass() ? STRICT : 0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -578,1 +578,0 @@\n-        Name name;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-        return compareTo(JDK1_19) >= 0;\n+        return compareTo(JDK1_23) >= 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,2 @@\n-        this.allowValueClasses = parser.allowValueClasses;\n+        this.allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -3831,1 +3832,1 @@\n-                return Source.JDK22;\n+                return Source.JDK23;\n@@ -3833,1 +3834,1 @@\n-                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK22));\n+                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK23));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-    public final Name isValueObject;\n@@ -312,1 +311,0 @@\n-        isValueObject = fromString(\"isValueObject\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-            \"clone\", \"finalize\", \"getClass\", \"hashCode\", \"isValueObject\",\n+            \"clone\", \"finalize\", \"getClass\", \"hashCode\",\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}