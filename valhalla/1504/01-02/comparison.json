{"files":[{"patch":"@@ -44,1 +44,0 @@\n-import java.lang.constant.ConstantDescs;\n@@ -46,1 +45,0 @@\n-import java.lang.reflect.AccessFlag;\n@@ -600,1 +598,1 @@\n-            return ValueClass.isValueObjectInstance(cls);\n+            return ValueClass.isConcreteValueClass(cls);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                    .filter(ValueClass::isValueObjectInstance)\n+                    .filter(ValueClass::isConcreteValueClass)\n@@ -173,1 +173,1 @@\n-            assert ValueClass.isValueObjectInstance(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -201,1 +201,1 @@\n-            assert ValueClass.isValueObjectInstance(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -370,1 +370,1 @@\n-            assert ValueClass.isValueObjectInstance(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -419,1 +419,1 @@\n-            assert ValueClass.isValueObjectInstance(type) : type;\n+            assert ValueClass.isConcreteValueClass(type) : type;\n@@ -1173,1 +1173,1 @@\n-        if (ValueClass.isValueObjectInstance(type)) {\n+        if (ValueClass.isConcreteValueClass(type)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3510,1 +3510,1 @@\n-        if (original.getClass() == newType && ValueClass.isValueObjectInstance(componentType)) {\n+        if (original.getClass() == newType && ValueClass.isConcreteValueClass(componentType)) {\n@@ -3816,1 +3816,1 @@\n-        if (original.getClass() == newType && ValueClass.isValueObjectInstance(componentType)) {\n+        if (original.getClass() == newType && ValueClass.isConcreteValueClass(componentType)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        if (!ValueClass.isValueObjectInstance(flatType))\n+        if (!ValueClass.isConcreteValueClass(flatType))\n@@ -92,1 +92,1 @@\n-        assert ValueClass.isValueObjectInstance(currentClass) : currentClass + \" cannot be flat\";\n+        assert ValueClass.isConcreteValueClass(currentClass) : currentClass + \" cannot be flat\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/LayoutIteration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-        return PreviewFeatures.isEnabled() && !fieldType.isPrimitive() && (!fieldType.isIdentity() || fieldType == Object.class);\n+        return PreviewFeatures.isEnabled()\n+                && !fieldType.isPrimitive() \/\/ non-primitive\n+                && (!fieldType.isIdentity() || fieldType == Object.class); \/\/ AVC or Object\n@@ -50,1 +52,1 @@\n-    public static boolean isValueObjectInstance(Class<?> clazz) {\n+    public static boolean isConcreteValueClass(Class<?> clazz) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/ValueClass.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -38,2 +39,0 @@\n-import static jdk.internal.value.ValueClass.isValueObjectCompatible;\n-import static jdk.internal.value.ValueClass.isValueObjectInstance;\n@@ -45,16 +44,22 @@\n-        assertFalse(isValueObjectCompatible(int.class), \"primitive\");\n-        assertEquals(PreviewFeatures.isEnabled(), isValueObjectCompatible(Object.class), \"Object\");\n-        assertEquals(PreviewFeatures.isEnabled(), isValueObjectCompatible(Number.class), \"abstract value class\");\n-        assertEquals(PreviewFeatures.isEnabled(), isValueObjectCompatible(Integer.class), \"final value class\");\n-        assertFalse(isValueObjectCompatible(ClassValue.class), \"abstract identity class\");\n-        assertFalse(isValueObjectCompatible(ArrayList.class), \"identity class\");\n-        assertFalse(isValueObjectCompatible(String.class), \"final identity class\");\n-        assertEquals(PreviewFeatures.isEnabled(), isValueObjectCompatible(Comparable.class), \"interface\");\n-        assertFalse(isValueObjectCompatible(int[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(Object[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(Number[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(Integer[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(ClassValue[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(ArrayList[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(String[].class), \"array class\");\n-        assertFalse(isValueObjectCompatible(Comparable[].class), \"array class\");\n+        isValueObjectCompatibleCase(false, int.class, \"primitive\");\n+        isValueObjectCompatibleCase(true, Object.class, \"Object\");\n+        isValueObjectCompatibleCase(true, Number.class, \"abstract value class\");\n+        isValueObjectCompatibleCase(true, Integer.class, \"final value class\");\n+        isValueObjectCompatibleCase(false, ClassValue.class, \"abstract identity class\");\n+        isValueObjectCompatibleCase(false, ArrayList.class, \"identity class\");\n+        isValueObjectCompatibleCase(false, String.class, \"final identity class\");\n+        isValueObjectCompatibleCase(true, Comparable.class, \"interface\");\n+        isValueObjectCompatibleCase(false, int[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Object[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Number[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Integer[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, ClassValue[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, ArrayList[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, String[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Comparable[].class, \"array class\");\n+    }\n+\n+    private static void isValueObjectCompatibleCase(boolean expected, Class<?> arg, String classification) {\n+        assertEquals(PreviewFeatures.isEnabled() && expected,\n+                     ValueClass.isValueObjectCompatible(arg),\n+                     () -> classification + \": \" + arg.getTypeName());\n@@ -64,17 +69,23 @@\n-    void testIsValueObjectInstance() {\n-        assertFalse(isValueObjectInstance(int.class), \"primitive\");\n-        assertFalse(isValueObjectInstance(Object.class), \"Object\");\n-        assertFalse(isValueObjectInstance(Number.class), \"abstract value class\");\n-        assertEquals(PreviewFeatures.isEnabled(), isValueObjectInstance(Integer.class), \"final value class\");\n-        assertFalse(isValueObjectInstance(ClassValue.class), \"abstract identity class\");\n-        assertFalse(isValueObjectInstance(ArrayList.class), \"identity class\");\n-        assertFalse(isValueObjectInstance(String.class), \"final identity class\");\n-        assertFalse(isValueObjectInstance(Comparable.class), \"interface\");\n-        assertFalse(isValueObjectInstance(int[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(Object[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(Number[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(Integer[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(ClassValue[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(ArrayList[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(String[].class), \"array class\");\n-        assertFalse(isValueObjectInstance(Comparable[].class), \"array class\");\n+    void testIsConcreteValueClass() {\n+        isConcreteValueClassCase(false, int.class, \"primitive\");\n+        isConcreteValueClassCase(false, Object.class, \"Object\");\n+        isConcreteValueClassCase(false, Number.class, \"abstract value class\");\n+        isConcreteValueClassCase(true, Integer.class, \"final value class\");\n+        isConcreteValueClassCase(false, ClassValue.class, \"abstract identity class\");\n+        isConcreteValueClassCase(false, ArrayList.class, \"identity class\");\n+        isConcreteValueClassCase(false, String.class, \"final identity class\");\n+        isConcreteValueClassCase(false, Comparable.class, \"interface\");\n+        isConcreteValueClassCase(false, int[].class, \"array class\");\n+        isConcreteValueClassCase(false, Object[].class, \"array class\");\n+        isConcreteValueClassCase(false, Number[].class, \"array class\");\n+        isConcreteValueClassCase(false, Integer[].class, \"array class\");\n+        isConcreteValueClassCase(false, ClassValue[].class, \"array class\");\n+        isConcreteValueClassCase(false, ArrayList[].class, \"array class\");\n+        isConcreteValueClassCase(false, String[].class, \"array class\");\n+        isConcreteValueClassCase(false, Comparable[].class, \"array class\");\n+    }\n+\n+    private static void isConcreteValueClassCase(boolean expected, Class<?> arg, String classification) {\n+        assertEquals(PreviewFeatures.isEnabled() && expected,\n+                     ValueClass.isConcreteValueClass(arg),\n+                     () -> classification + \": \" + arg.getTypeName());\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueClassTest.java","additions":46,"deletions":35,"binary":false,"changes":81,"status":"modified"}]}