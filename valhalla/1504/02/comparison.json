{"files":[{"patch":"@@ -336,3 +336,0 @@\n-                if (isValue()) {\n-                    sb.append(\"value \");\n-                }\n@@ -344,4 +341,9 @@\n-                    else if (isRecord())\n-                        sb.append(\"record\");\n-                    else\n-                        sb.append(\"class\");\n+                    else {\n+                        if (isValue()) {\n+                            sb.append(\"value \");\n+                        }\n+                        if (isRecord())\n+                            sb.append(\"record\");\n+                        else\n+                            sb.append(\"class\");\n+                    }\n@@ -641,3 +643,1 @@\n-         if (isPrimitive() || isArray() || isInterface())\n-             return false;\n-        return ((getModifiers() & Modifier.IDENTITY) == 0);\n+        return !isIdentity();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -43,1 +44,0 @@\n-import java.lang.constant.ConstantDescs;\n@@ -45,1 +45,0 @@\n-import java.lang.reflect.AccessFlag;\n@@ -599,1 +598,1 @@\n-            return cls.isValue() && cls.accessFlags().contains(AccessFlag.FINAL);\n+            return ValueClass.isConcreteValueClass(cls);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -138,1 +139,1 @@\n-                    .filter(cl -> !cl.isPrimitive() && cl.isValue())\n+                    .filter(ValueClass::isConcreteValueClass)\n@@ -172,1 +173,1 @@\n-            assert LayoutIteration.isFinalValueClass(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -200,1 +201,1 @@\n-            assert LayoutIteration.isFinalValueClass(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -369,1 +370,1 @@\n-            assert LayoutIteration.isFinalValueClass(type);\n+            assert ValueClass.isConcreteValueClass(type);\n@@ -418,1 +419,1 @@\n-            assert LayoutIteration.isFinalValueClass(type) : type;\n+            assert ValueClass.isConcreteValueClass(type) : type;\n@@ -1172,1 +1173,1 @@\n-        if (type.isValue()) {\n+        if (ValueClass.isConcreteValueClass(type)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3510,1 +3510,1 @@\n-        if (original.getClass() == newType && componentType.isValue()) {\n+        if (original.getClass() == newType && ValueClass.isConcreteValueClass(componentType)) {\n@@ -3816,1 +3816,1 @@\n-        if (original.getClass() == newType && componentType.isValue()) {\n+        if (original.getClass() == newType && ValueClass.isConcreteValueClass(componentType)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        if (!isFinalValueClass(flatType))\n+        if (!ValueClass.isConcreteValueClass(flatType))\n@@ -73,5 +73,0 @@\n-    \/\/ Ensures the given class has a potential a flat layout\n-    public static boolean isFinalValueClass(Class<?> flatType) {\n-        return !flatType.isPrimitive() && flatType.isValue() && Modifier.isFinal(flatType.getModifiers());\n-    }\n-\n@@ -97,1 +92,1 @@\n-        assert isFinalValueClass(currentClass) : currentClass + \" cannot be flat\";\n+        assert ValueClass.isConcreteValueClass(currentClass) : currentClass + \" cannot be flat\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/LayoutIteration.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -32,1 +33,0 @@\n-import java.lang.reflect.Array;\n@@ -34,0 +34,1 @@\n+import java.lang.reflect.Modifier;\n@@ -38,1 +39,1 @@\n-public class ValueClass {\n+public final class ValueClass {\n@@ -41,0 +42,14 @@\n+    \/\/\/ {@return whether this field type may store value objects}\n+    \/\/\/ This excludes primitives and includes Object.\n+    public static boolean isValueObjectCompatible(Class<?> fieldType) {\n+        return PreviewFeatures.isEnabled()\n+                && !fieldType.isPrimitive() \/\/ non-primitive\n+                && (!fieldType.isIdentity() || fieldType == Object.class); \/\/ AVC or Object\n+    }\n+\n+    \/\/\/ {@return whether an object of this exact class is a value object}\n+    \/\/\/ This excludes abstract value classes and primitives.\n+    public static boolean isConcreteValueClass(Class<?> clazz) {\n+        return clazz.isValue() && !Modifier.isAbstract(clazz.getModifiers());\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/ValueClass.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test jdk.internal.value.ValueClass\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ * @run junit ValueClassTest\n+ * @run junit\/othervm --enable-preview ValueClassTest\n+ *\/\n+\n+import java.util.ArrayList;\n+\n+import jdk.internal.misc.PreviewFeatures;\n+import jdk.internal.value.ValueClass;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ValueClassTest {\n+    @Test\n+    void testIsValueObjectCompatible() {\n+        isValueObjectCompatibleCase(false, int.class, \"primitive\");\n+        isValueObjectCompatibleCase(true, Object.class, \"Object\");\n+        isValueObjectCompatibleCase(true, Number.class, \"abstract value class\");\n+        isValueObjectCompatibleCase(true, Integer.class, \"final value class\");\n+        isValueObjectCompatibleCase(false, ClassValue.class, \"abstract identity class\");\n+        isValueObjectCompatibleCase(false, ArrayList.class, \"identity class\");\n+        isValueObjectCompatibleCase(false, String.class, \"final identity class\");\n+        isValueObjectCompatibleCase(true, Comparable.class, \"interface\");\n+        isValueObjectCompatibleCase(false, int[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Object[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Number[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Integer[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, ClassValue[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, ArrayList[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, String[].class, \"array class\");\n+        isValueObjectCompatibleCase(false, Comparable[].class, \"array class\");\n+    }\n+\n+    private static void isValueObjectCompatibleCase(boolean expected, Class<?> arg, String classification) {\n+        assertEquals(PreviewFeatures.isEnabled() && expected,\n+                     ValueClass.isValueObjectCompatible(arg),\n+                     () -> classification + \": \" + arg.getTypeName());\n+    }\n+\n+    @Test\n+    void testIsConcreteValueClass() {\n+        isConcreteValueClassCase(false, int.class, \"primitive\");\n+        isConcreteValueClassCase(false, Object.class, \"Object\");\n+        isConcreteValueClassCase(false, Number.class, \"abstract value class\");\n+        isConcreteValueClassCase(true, Integer.class, \"final value class\");\n+        isConcreteValueClassCase(false, ClassValue.class, \"abstract identity class\");\n+        isConcreteValueClassCase(false, ArrayList.class, \"identity class\");\n+        isConcreteValueClassCase(false, String.class, \"final identity class\");\n+        isConcreteValueClassCase(false, Comparable.class, \"interface\");\n+        isConcreteValueClassCase(false, int[].class, \"array class\");\n+        isConcreteValueClassCase(false, Object[].class, \"array class\");\n+        isConcreteValueClassCase(false, Number[].class, \"array class\");\n+        isConcreteValueClassCase(false, Integer[].class, \"array class\");\n+        isConcreteValueClassCase(false, ClassValue[].class, \"array class\");\n+        isConcreteValueClassCase(false, ArrayList[].class, \"array class\");\n+        isConcreteValueClassCase(false, String[].class, \"array class\");\n+        isConcreteValueClassCase(false, Comparable[].class, \"array class\");\n+    }\n+\n+    private static void isConcreteValueClassCase(boolean expected, Class<?> arg, String classification) {\n+        assertEquals(PreviewFeatures.isEnabled() && expected,\n+                     ValueClass.isConcreteValueClass(arg),\n+                     () -> classification + \": \" + arg.getTypeName());\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueClassTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}