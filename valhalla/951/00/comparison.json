{"files":[{"patch":"@@ -144,1 +144,1 @@\n-        if (element_klass->can_be_inline_klass() && (!element_klass->is_inlinetype() || element_klass->as_inline_klass()->flat_array())) {\n+        if (element_klass->can_be_inline_klass() && (!element_klass->is_inlinetype() || element_klass->as_inline_klass()->flat_in_array())) {\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1870,1 +1870,1 @@\n-      if (!klass->can_be_inline_klass() || (klass->is_inlinetype() && !klass->as_inline_klass()->flat_array())) {\n+      if (!klass->can_be_inline_klass() || (klass->is_inlinetype() && !klass->as_inline_klass()->flat_in_array())) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-bool ciInlineKlass::flat_array() const {\n+bool ciInlineKlass::flat_in_array() const {\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  bool flat_array() const;\n+  bool flat_in_array() const;\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  virtual bool flat_array() const           { return false; }\n+  virtual bool flat_in_array() const        { return false; }\n","filename":"src\/hotspot\/share\/ci\/ciMetadata.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3569,2 +3569,2 @@\n-  bool not_flat = !UseFlatArray || not_inline || (toop->is_inlinetypeptr() && !toop->inline_klass()->flat_array());\n-  if (EnableValhalla && not_flat) {\n+  bool not_flat_in_array = !UseFlatArray || not_inline || (toop->is_inlinetypeptr() && !toop->inline_klass()->flat_in_array());\n+  if (EnableValhalla && not_flat_in_array) {\n@@ -3591,1 +3591,1 @@\n-      if (ary_t != nullptr) {\n+      if (ary_t != nullptr && !ary_t->is_flat()) {\n@@ -3872,1 +3872,1 @@\n-      can_be_flat = ary_type->can_be_inline_array() && (!elem->is_inlinetypeptr() || elem->inline_klass()->flat_array());\n+      can_be_flat = ary_type->can_be_inline_array() && (!elem->is_inlinetypeptr() || elem->inline_klass()->flat_in_array());\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -895,1 +895,1 @@\n-      assert(vk->flat_array(), \"must be flat\");\n+      assert(vk->flat_in_array(), \"must be flat in array\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-           (!elemptr->is_inlinetypeptr() || elemptr->inline_klass()->flat_array()), \"array can't be flat\");\n+           (!elemptr->is_inlinetypeptr() || elemptr->inline_klass()->flat_in_array()), \"array can't be flat\");\n@@ -119,1 +119,1 @@\n-        assert(vk->flat_array() && elemptr->maybe_null(), \"never\/always flat - should be optimized\");\n+        assert(vk->flat_in_array() && elemptr->maybe_null(), \"never\/always flat - should be optimized\");\n@@ -158,1 +158,1 @@\n-        const Type* unknown_value = elemptr->is_instptr()->cast_to_flat_array();\n+        const Type* unknown_value = elemptr->is_instptr()->cast_to_flat_in_array();\n@@ -214,1 +214,1 @@\n-    bool not_flat = not_null_free || (tval->is_inlinetypeptr() && !tval->inline_klass()->flat_array());\n+    bool not_flat = not_null_free || (tval->is_inlinetypeptr() && !tval->inline_klass()->flat_in_array());\n@@ -281,1 +281,1 @@\n-          assert(vk->flat_array() && elemtype->maybe_null(), \"never\/always flat - should be optimized\");\n+          assert(vk->flat_in_array() && elemtype->maybe_null(), \"never\/always flat - should be optimized\");\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1048,2 +1048,2 @@\n-      if ((r0->flat_array() && r1->not_flat_array()) ||\n-          (r1->flat_array() && r0->not_flat_array())) {\n+      if ((r0->flat_in_array() && r1->not_flat_in_array()) ||\n+          (r1->flat_in_array() && r0->not_flat_in_array())) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  if (subk->flat_array() && superk->not_flat_array()) {\n+  if (subk->flat_in_array() && superk->not_flat_in_array()) {\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3860,1 +3860,1 @@\n-    bool not_flat = !UseFlatArray || not_null_free || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_array());\n+    bool not_flat = !UseFlatArray || not_null_free || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_in_array());\n@@ -4160,1 +4160,1 @@\n-                         bool flat_array, int instance_id, const TypePtr* speculative, int inline_depth)\n+                         bool flat_in_array, int instance_id, const TypePtr* speculative, int inline_depth)\n@@ -4162,1 +4162,1 @@\n-    _flat_array(flat_array) {\n+    _flat_in_array(flat_in_array) {\n@@ -4167,2 +4167,2 @@\n-  assert(!klass()->flat_array() || flat_array, \"Should be flat in array\");\n-  assert(!flat_array || can_be_inline_type(), \"Only inline types can be flat in array\");\n+  assert(!klass()->flat_in_array() || flat_in_array, \"Should be flat in array\");\n+  assert(!flat_in_array || can_be_inline_type(), \"Only inline types can be flat in array\");\n@@ -4178,1 +4178,1 @@\n-                                     bool flat_array,\n+                                     bool flat_in_array,\n@@ -4201,1 +4201,1 @@\n-  flat_array = flat_array || k->flat_array();\n+  flat_in_array = flat_in_array || k->flat_in_array();\n@@ -4205,1 +4205,1 @@\n-    (TypeInstPtr*)(new TypeInstPtr(ptr, k, interfaces, xk, o, offset, flat_array, instance_id, speculative, inline_depth))->hashcons();\n+    (TypeInstPtr*)(new TypeInstPtr(ptr, k, interfaces, xk, o, offset, flat_in_array, instance_id, speculative, inline_depth))->hashcons();\n@@ -4271,1 +4271,1 @@\n-  return make(ptr, klass(), _interfaces, klass_is_exact(), ptr == Constant ? const_oop() : nullptr, _offset, _flat_array, _instance_id, _speculative, _inline_depth);\n+  return make(ptr, klass(), _interfaces, klass_is_exact(), ptr == Constant ? const_oop() : nullptr, _offset, _flat_in_array, _instance_id, _speculative, _inline_depth);\n@@ -4282,1 +4282,1 @@\n-  return make(ptr(), klass(), _interfaces, klass_is_exact, const_oop(), _offset, _flat_array, _instance_id, _speculative, _inline_depth);\n+  return make(ptr(), klass(), _interfaces, klass_is_exact, const_oop(), _offset, _flat_in_array, _instance_id, _speculative, _inline_depth);\n@@ -4288,1 +4288,1 @@\n-  return make(_ptr, klass(), _interfaces, _klass_is_exact, const_oop(), _offset, _flat_array, instance_id, _speculative, _inline_depth);\n+  return make(_ptr, klass(), _interfaces, _klass_is_exact, const_oop(), _offset, _flat_in_array, instance_id, _speculative, _inline_depth);\n@@ -4390,1 +4390,1 @@\n-                  (ptr == Constant ? const_oop() : nullptr), offset, flat_array(), instance_id, speculative, depth);\n+                  (ptr == Constant ? const_oop() : nullptr), offset, flat_in_array(), instance_id, speculative, depth);\n@@ -4418,1 +4418,1 @@\n-                  (ptr == Constant ? const_oop() : nullptr), offset, flat_array(), instance_id, speculative, depth);\n+                  (ptr == Constant ? const_oop() : nullptr), offset, flat_in_array(), instance_id, speculative, depth);\n@@ -4458,1 +4458,1 @@\n-    bool res_flat_array = false;\n+    bool res_flat_in_array = false;\n@@ -4460,1 +4460,1 @@\n-    MeetResult kind = meet_instptr(ptr, interfaces, this, tinst, res_klass, res_xk, res_flat_array);\n+    MeetResult kind = meet_instptr(ptr, interfaces, this, tinst, res_klass, res_xk, res_flat_in_array);\n@@ -4501,1 +4501,1 @@\n-      res = make(ptr, res_klass, interfaces, res_xk, o, off, res_flat_array, instance_id, speculative, depth);\n+      res = make(ptr, res_klass, interfaces, res_xk, o, off, res_flat_in_array, instance_id, speculative, depth);\n@@ -4513,1 +4513,1 @@\n-                                                            ciKlass*& res_klass, bool& res_xk, bool& res_flat_array) {\n+                                                            ciKlass*& res_klass, bool& res_xk, bool& res_flat_in_array) {\n@@ -4516,4 +4516,4 @@\n-  bool this_flat_array = this_type->flat_array();\n-  bool other_flat_array = other_type->flat_array();\n-  bool this_flat_array_orig = this_flat_array;\n-  bool other_flat_array_orig = other_flat_array;\n+  bool this_flat_in_array = this_type->flat_in_array();\n+  bool other_flat_in_array = other_type->flat_in_array();\n+  bool this_flat_in_array_orig = this_flat_in_array;\n+  bool other_flat_in_array_orig = other_flat_in_array;\n@@ -4530,1 +4530,1 @@\n-  if (ptr != Constant && this_klass->equals(other_klass) && this_xk == other_xk && this_flat_array == other_flat_array) {\n+  if (ptr != Constant && this_klass->equals(other_klass) && this_xk == other_xk && this_flat_in_array == other_flat_in_array) {\n@@ -4533,1 +4533,1 @@\n-    res_flat_array = this_flat_array;\n+    res_flat_in_array = this_flat_in_array;\n@@ -4573,2 +4573,2 @@\n-    flat_array = below_centerline(ptr) ? (this_flat_array && other_flat_array) : (this_flat_array || other_flat_array);\n-  } else if (!other_xk && this_type->is_meet_subtype_of(other_type) && (!other_flat_array || this_flat_array)) {\n+    flat_array = below_centerline(ptr) ? (this_flat_in_array && other_flat_in_array) : (this_flat_in_array || other_flat_in_array);\n+  } else if (!other_xk && this_type->is_meet_subtype_of(other_type) && (!other_flat_in_array || this_flat_in_array)) {\n@@ -4577,2 +4577,2 @@\n-    flat_array = this_flat_array;\n-  } else if (!this_xk && other_type->is_meet_subtype_of(this_type) && (!this_flat_array || other_flat_array)) {\n+    flat_array = this_flat_in_array;\n+  } else if (!this_xk && other_type->is_meet_subtype_of(this_type) && (!this_flat_in_array || other_flat_in_array)) {\n@@ -4581,1 +4581,1 @@\n-    flat_array = other_flat_array;\n+    flat_array = other_flat_in_array;\n@@ -4588,1 +4588,1 @@\n-      this_flat_array = other_flat_array = flat_array;\n+      this_flat_in_array = other_flat_in_array = flat_array;\n@@ -4592,1 +4592,1 @@\n-      this_flat_array = other_flat_array;\n+      this_flat_in_array = other_flat_in_array;\n@@ -4596,1 +4596,1 @@\n-      other_flat_array = this_flat_array;\n+      other_flat_in_array = this_flat_in_array;\n@@ -4599,1 +4599,1 @@\n-      this_flat_array = flat_array;\n+      this_flat_in_array = flat_array;\n@@ -4610,1 +4610,1 @@\n-    res_flat_array = this_flat_array;\n+    res_flat_in_array = this_flat_in_array;\n@@ -4627,1 +4627,1 @@\n-  res_flat_array = this_flat_array_orig && other_flat_array_orig;\n+  res_flat_in_array = this_flat_in_array_orig && other_flat_in_array_orig;\n@@ -4647,1 +4647,1 @@\n-  return new TypeInstPtr(dual_ptr(), klass(), _interfaces, klass_is_exact(), const_oop(), dual_offset(), flat_array(), dual_instance_id(), dual_speculative(), dual_inline_depth());\n+  return new TypeInstPtr(dual_ptr(), klass(), _interfaces, klass_is_exact(), const_oop(), dual_offset(), flat_in_array(), dual_instance_id(), dual_speculative(), dual_inline_depth());\n@@ -4656,1 +4656,1 @@\n-    flat_array() == p->flat_array() &&\n+    flat_in_array() == p->flat_in_array() &&\n@@ -4664,1 +4664,1 @@\n-  return klass()->hash() + TypeOopPtr::hash() + _interfaces.hash() + (uint)flat_array();\n+  return klass()->hash() + TypeOopPtr::hash() + _interfaces.hash() + (uint)flat_in_array();\n@@ -4722,2 +4722,2 @@\n-  if (flat_array() && !klass()->is_inlinetype()) {\n-    st->print(\" (flat array)\");\n+  if (flat_in_array() && !klass()->is_inlinetype()) {\n+    st->print(\" (flat in array)\");\n@@ -4738,1 +4738,1 @@\n-  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), xadd_offset(offset), flat_array(),\n+  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), xadd_offset(offset), flat_in_array(),\n@@ -4743,1 +4743,1 @@\n-  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), Offset(offset), flat_array(),\n+  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), Offset(offset), flat_in_array(),\n@@ -4752,1 +4752,1 @@\n-  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_array(),\n+  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_in_array(),\n@@ -4760,1 +4760,1 @@\n-  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_array(), _instance_id, _speculative, depth);\n+  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_in_array(), _instance_id, _speculative, depth);\n@@ -4765,1 +4765,1 @@\n-  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_array(), instance_id, _speculative, _inline_depth);\n+  return make(_ptr, klass(), _interfaces, klass_is_exact(), const_oop(), _offset, flat_in_array(), instance_id, _speculative, _inline_depth);\n@@ -4768,1 +4768,1 @@\n-const TypeInstPtr *TypeInstPtr::cast_to_flat_array() const {\n+const TypeInstPtr *TypeInstPtr::cast_to_flat_in_array() const {\n@@ -4783,1 +4783,1 @@\n-  return TypeInstKlassPtr::make(xk ? TypePtr::Constant : TypePtr::NotNull, klass(), _interfaces, Offset(0), flat_array());\n+  return TypeInstKlassPtr::make(xk ? TypePtr::Constant : TypePtr::NotNull, klass(), _interfaces, Offset(0), flat_in_array());\n@@ -5251,1 +5251,1 @@\n-      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact() && !tp->flat_array()) {\n+      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact() && !tp->flat_in_array()) {\n@@ -5270,1 +5270,1 @@\n-        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact() && !tp->flat_array()) {\n+        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact() && !tp->flat_in_array()) {\n@@ -6079,1 +6079,1 @@\n-    if (isa_instklassptr() && is_instklassptr()->flat_array()) st->print(\":flat array\");\n+    if (isa_instklassptr() && is_instklassptr()->flat_in_array()) st->print(\":flat in array\");\n@@ -6097,1 +6097,1 @@\n-    flat_array() == p->flat_array() &&\n+    flat_in_array() == p->flat_in_array() &&\n@@ -6102,1 +6102,1 @@\n-  return klass()->hash() + TypeKlassPtr::hash() + (uint)flat_array();\n+  return klass()->hash() + TypeKlassPtr::hash() + (uint)flat_in_array();\n@@ -6105,2 +6105,2 @@\n-const TypeInstKlassPtr *TypeInstKlassPtr::make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, Offset offset, bool flat_array) {\n-  flat_array = flat_array || k->flat_array();\n+const TypeInstKlassPtr *TypeInstKlassPtr::make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, Offset offset, bool flat_in_array) {\n+  flat_in_array = flat_in_array || k->flat_in_array();\n@@ -6109,1 +6109,1 @@\n-    (TypeInstKlassPtr*)(new TypeInstKlassPtr(ptr, k, interfaces, offset, flat_array))->hashcons();\n+    (TypeInstKlassPtr*)(new TypeInstKlassPtr(ptr, k, interfaces, offset, flat_in_array))->hashcons();\n@@ -6117,1 +6117,1 @@\n-  return make(_ptr, klass(), _interfaces, xadd_offset(offset), flat_array());\n+  return make(_ptr, klass(), _interfaces, xadd_offset(offset), flat_in_array());\n@@ -6121,1 +6121,1 @@\n-  return make(_ptr, klass(), _interfaces, Offset(offset), flat_array());\n+  return make(_ptr, klass(), _interfaces, Offset(offset), flat_in_array());\n@@ -6128,1 +6128,1 @@\n-  return make(ptr, _klass, _interfaces, _offset, flat_array());\n+  return make(ptr, _klass, _interfaces, _offset, flat_in_array());\n@@ -6144,1 +6144,1 @@\n-  return make(klass_is_exact ? Constant : NotNull, k, _interfaces, _offset, flat_array());\n+  return make(klass_is_exact ? Constant : NotNull, k, _interfaces, _offset, flat_in_array());\n@@ -6176,1 +6176,1 @@\n-  return TypeInstPtr::make(TypePtr::BotPTR, k, interfaces, xk, nullptr, Offset(0), flat_array() && !klass()->is_inlinetype());\n+  return TypeInstPtr::make(TypePtr::BotPTR, k, interfaces, xk, nullptr, Offset(0), flat_in_array() && !klass()->is_inlinetype());\n@@ -6217,1 +6217,1 @@\n-      return make(ptr, klass(), _interfaces, offset, flat_array());\n+      return make(ptr, klass(), _interfaces, offset, flat_in_array());\n@@ -6256,2 +6256,2 @@\n-    bool res_flat_array = false;\n-    switch(meet_instptr(ptr, interfaces, this, tkls, res_klass, res_xk, res_flat_array)) {\n+    bool res_flat_in_array = false;\n+    switch(meet_instptr(ptr, interfaces, this, tkls, res_klass, res_xk, res_flat_in_array)) {\n@@ -6265,1 +6265,1 @@\n-        const Type* res = make(ptr, res_klass, interfaces, off, res_flat_array);\n+        const Type* res = make(ptr, res_klass, interfaces, off, res_flat_in_array);\n@@ -6326,1 +6326,1 @@\n-  return new TypeInstKlassPtr(dual_ptr(), klass(), _interfaces, dual_offset(), flat_array());\n+  return new TypeInstKlassPtr(dual_ptr(), klass(), _interfaces, dual_offset(), flat_in_array());\n@@ -6477,1 +6477,1 @@\n-                                                     !k->as_array_klass()->element_klass()->flat_array());\n+                                                     !k->as_array_klass()->element_klass()->flat_in_array());\n@@ -6665,1 +6665,1 @@\n-      not_flat = !UseFlatArray || not_null_free || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_array());\n+      not_flat = !UseFlatArray || not_null_free || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_in_array());\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -1091,2 +1091,2 @@\n-  virtual bool flat_array()         const { return false; }\n-  virtual bool not_flat_array()     const { return false; }\n+  virtual bool flat_in_array()      const { return false; }\n+  virtual bool not_flat_in_array()  const { return false; }\n@@ -1325,1 +1325,1 @@\n-              bool flat_array, int instance_id, const TypePtr* speculative,\n+              bool flat_in_array, int instance_id, const TypePtr* speculative,\n@@ -1329,2 +1329,1 @@\n-\n-  bool _flat_array;     \/\/ Type is flat in arrays\n+  bool _flat_in_array; \/\/ Type is flat in arrays\n@@ -1378,1 +1377,1 @@\n-                                 bool flat_array = false,\n+                                 bool flat_in_array = false,\n@@ -1410,3 +1409,3 @@\n-  virtual const TypeInstPtr* cast_to_flat_array() const;\n-  virtual bool flat_array() const { return _flat_array; }\n-  virtual bool not_flat_array() const { return !can_be_inline_type() || (_klass->is_inlinetype() && !flat_array()); }\n+  virtual const TypeInstPtr* cast_to_flat_in_array() const;\n+  virtual bool flat_in_array() const { return _flat_in_array; }\n+  virtual bool not_flat_in_array() const { return !can_be_inline_type() || (_klass->is_inlinetype() && !flat_in_array()); }\n@@ -1741,2 +1740,2 @@\n-  TypeInstKlassPtr(PTR ptr, ciKlass* klass, const InterfaceSet& interfaces, Offset offset, bool flat_array)\n-    : TypeKlassPtr(InstKlassPtr, ptr, klass, interfaces, offset), _flat_array(flat_array) {\n+  TypeInstKlassPtr(PTR ptr, ciKlass* klass, const InterfaceSet& interfaces, Offset offset, bool flat_in_array)\n+    : TypeKlassPtr(InstKlassPtr, ptr, klass, interfaces, offset), _flat_in_array(flat_in_array) {\n@@ -1748,1 +1747,1 @@\n-  const bool _flat_array; \/\/ Type is flat in arrays\n+  const bool _flat_in_array; \/\/ Type is flat in arrays\n@@ -1767,1 +1766,1 @@\n-  static const TypeInstKlassPtr* make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, Offset offset, bool flat_array = false);\n+  static const TypeInstKlassPtr* make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, Offset offset, bool flat_in_array = false);\n@@ -1790,2 +1789,2 @@\n-  virtual bool flat_array() const { return _flat_array; }\n-  virtual bool not_flat_array() const { return !_klass->can_be_inline_klass() || (_klass->is_inlinetype() && !flat_array()); }\n+  virtual bool flat_in_array() const { return _flat_in_array; }\n+  virtual bool not_flat_in_array() const { return !_klass->can_be_inline_klass() || (_klass->is_inlinetype() && !flat_in_array()); }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3561,0 +3561,11 @@\n+\n+    static primitive class Test150Value {\n+        Object s = \"test\";\n+    }\n+\n+    \/\/ Test that optimizing a checkcast of a load from a flat array works as expected\n+    @Test\n+    static String test150() {\n+        Test150Value[] array = { new Test150Value() };\n+        return (String)array[0].s;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}