{"files":[{"patch":"@@ -36,1 +36,1 @@\n- * The referent must be an {@linkplain Objects#isIdentityObject(Object) identity object}.\n+ * The referent must be an {@linkplain Objects#hasIdentity(Object) identity object}.\n@@ -94,1 +94,1 @@\n-     *         {@link java.util.Objects#isIdentityObject(Object) identity object}\n+     *         {@link java.util.Objects#hasIdentity(Object) identity object}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,3 +43,2 @@\n- * The referent must be an {@linkplain Objects#isIdentityObject(Object) identity object}.\n- * Attempts to create a reference to a {@linkplain Objects#isValueObject value object}\n- * results in an {@link IdentityException}.\n+ * The referent must be an {@linkplain Objects#hasIdentity(Object) identity object}.\n+ * Attempts to create a reference to a value object result in an {@link IdentityException}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * The referent must be an {@linkplain Objects#isIdentityObject(Object) identity object}.\n+ * The referent must be an {@linkplain Objects#hasIdentity(Object) identity object}.\n@@ -89,1 +89,1 @@\n-     *         {@link java.util.Objects#isIdentityObject(Object) identity object}\n+     *         {@link java.util.Objects#hasIdentity(Object) identity object}\n@@ -104,1 +104,1 @@\n-     *         {@link java.util.Objects#isIdentityObject(Object) identity object}\n+     *         {@link java.util.Objects#hasIdentity(Object) identity object}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/SoftReference.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * The referent must be an {@linkplain Objects#isIdentityObject(Object) identity object}.\n+ * The referent must be an {@linkplain Objects#hasIdentity(Object) identity object}.\n@@ -61,1 +61,1 @@\n-     *         {@link java.util.Objects#isIdentityObject(Object) identity object}\n+     *         {@link java.util.Objects#hasIdentity(Object) identity object}\n@@ -75,1 +75,1 @@\n-     *         {@link java.util.Objects#isIdentityObject(Object) identity object}\n+     *         {@link java.util.Objects#hasIdentity(Object) identity object}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/WeakReference.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-    public static boolean isIdentityObject(Object obj) {\n+    public static boolean hasIdentity(Object obj) {\n@@ -211,1 +211,1 @@\n-        if (!isIdentityObject(obj))\n+        if (!hasIdentity(obj))\n@@ -232,1 +232,1 @@\n-        if (!isIdentityObject(obj))\n+        if (!hasIdentity(obj))\n@@ -253,1 +253,1 @@\n-        if (!isIdentityObject(obj))\n+        if (!hasIdentity(obj))\n@@ -259,14 +259,0 @@\n-   \/**\n-    * {@return {@code true} if the specified object is a {@linkplain Class#isValue value object},\n-    * otherwise {@code false}}\n-    *\n-    * @param obj an object\n-    * @throws NullPointerException if {@code obj} is {@code null}\n-    *\/\n-   @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n-\/\/    @IntrinsicCandidate\n-    public static boolean isValueObject(Object obj) {\n-        requireNonNull(obj, \"obj\");\n-        return obj.getClass().isValue();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        if (Objects.isIdentityObject(key) && e.refersTo(key)) return true;\n+        if (Objects.hasIdentity(key) && e.refersTo(key)) return true;\n@@ -534,2 +534,2 @@\n-        final boolean isValue = Objects.isValueObject(k);\n-        if (isValue && valuePolicy == ValuePolicy.DISCARD) {\n+        final boolean hasIdentity = Objects.hasIdentity(k);\n+        if (!hasIdentity && valuePolicy == ValuePolicy.DISCARD) {\n@@ -553,1 +553,1 @@\n-        e = (isValue) ? newValueEntry(k, value, queue, h, e) : new Entry<>(k, value, queue, h, e);\n+        e = hasIdentity ? new Entry<>(k, value, queue, h, e) : newValueEntry(k, value, queue, h, e);\n@@ -1636,1 +1636,1 @@\n-         * otherwise return {@link ValuePolicy#SOFT}.\n+         * otherwise return {@link ValuePolicy#THROW}.\n@@ -1648,1 +1648,1 @@\n-            return SOFT;  \/\/ hardcoded default if property not set\n+            return THROW;  \/\/ hardcoded default if property not set\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-            assertTrue(Objects.isIdentityObject(obj), \"Objects.isIdentityObject()\");\n+            assertTrue(Objects.hasIdentity(obj), \"Objects.hasIdentity()\");\n@@ -139,1 +139,1 @@\n-            assertEquals(identityClass, Objects.isIdentityObject(obj), \"Objects.isIdentityObject()\");\n+            assertEquals(identityClass, Objects.hasIdentity(obj), \"Objects.hasIdentity()\");\n@@ -142,2 +142,0 @@\n-        assertEquals(valueClass, Objects.isValueObject(obj), \"Objects.isValueObject()\");\n-\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}