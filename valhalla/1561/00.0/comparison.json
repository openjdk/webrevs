{"files":[{"patch":"@@ -4,1 +4,1 @@\n-version=25\n+version=26\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-DEFAULT_VERSION_FEATURE=25\n+DEFAULT_VERSION_FEATURE=26\n@@ -36,2 +36,2 @@\n-DEFAULT_VERSION_DATE=2025-09-16\n-DEFAULT_VERSION_CLASSFILE_MAJOR=69  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n+DEFAULT_VERSION_DATE=2026-03-17\n+DEFAULT_VERSION_CLASSFILE_MAJOR=70  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n@@ -40,3 +40,3 @@\n-DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"24 25\"\n-DEFAULT_JDK_SOURCE_TARGET_VERSION=25\n-DEFAULT_PROMOTED_VERSION_PRE=lworld5ea\n+DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"24 25 26\"\n+DEFAULT_JDK_SOURCE_TARGET_VERSION=26\n+DEFAULT_PROMOTED_VERSION_PRE=lworldea2\n","filename":"make\/conf\/version-numbers.conf","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -966,1 +966,1 @@\n-    if (nm->make_not_entrant(\"C1 deoptimize\")) {\n+    if (nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize)) {\n@@ -1293,1 +1293,1 @@\n-      nm->make_not_entrant(\"C1 code patch\");\n+      nm->make_not_entrant(nmethod::ChangeReason::C1_codepatch);\n@@ -1541,1 +1541,1 @@\n-      nm->make_not_entrant(\"C1 deoptimize for patching\");\n+      nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize_for_patching);\n@@ -1669,1 +1669,1 @@\n-  nm->make_not_entrant(\"C1 predicate failed trap\");\n+  nm->make_not_entrant(nmethod::ChangeReason::C1_predicate_failed_trap);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -806,1 +806,1 @@\n-      nm->make_not_entrant(\"CI replay\");\n+      nm->make_not_entrant(nmethod::ChangeReason::CI_replay);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,2 +157,0 @@\n-#define CONSTANT_CLASS_DESCRIPTORS        69\n-\n@@ -163,0 +161,4 @@\n+#define JAVA_26_VERSION                   70\n+\n+#define CONSTANT_CLASS_DESCRIPTORS        70\n+\n@@ -4138,3 +4140,3 @@\n-  \/\/ Inline types are only supported by class file version 69.65535 and later\n-  return _major_version > JAVA_25_VERSION ||\n-         (_major_version == JAVA_25_VERSION && _minor_version == JAVA_PREVIEW_MINOR_VERSION);\n+  \/\/ Inline types are only supported by class file version 70.65535 and later\n+  return _major_version > JAVA_26_VERSION ||\n+         (_major_version == JAVA_26_VERSION && _minor_version == JAVA_PREVIEW_MINOR_VERSION);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    VALUE_TYPES_MAJOR_VERSION           = 67,\n+    VALUE_TYPES_MAJOR_VERSION           = 70,\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1997,3 +1997,1 @@\n-void nmethod::log_state_change(const char* reason) const {\n-  assert(reason != nullptr, \"Must provide a reason\");\n-\n+void nmethod::log_state_change(ChangeReason change_reason) const {\n@@ -2004,1 +2002,1 @@\n-                       os::current_thread_id(), reason);\n+                       os::current_thread_id(), change_reason_to_string(change_reason));\n@@ -2013,1 +2011,1 @@\n-  ss.print(\"made not entrant: %s\", reason);\n+  ss.print(\"made not entrant: %s\", change_reason_to_string(change_reason));\n@@ -2028,3 +2026,1 @@\n-bool nmethod::make_not_entrant(const char* reason) {\n-  assert(reason != nullptr, \"Must provide a reason\");\n-\n+bool nmethod::make_not_entrant(ChangeReason change_reason) {\n@@ -2099,1 +2095,1 @@\n-    log_state_change(reason);\n+    log_state_change(change_reason);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -479,0 +479,79 @@\n+  enum class ChangeReason : u1 {\n+    C1_codepatch,\n+    C1_deoptimize,\n+    C1_deoptimize_for_patching,\n+    C1_predicate_failed_trap,\n+    CI_replay,\n+    JVMCI_invalidate_nmethod,\n+    JVMCI_invalidate_nmethod_mirror,\n+    JVMCI_materialize_virtual_object,\n+    JVMCI_new_installation,\n+    JVMCI_register_method,\n+    JVMCI_replacing_with_new_code,\n+    JVMCI_reprofile,\n+    marked_for_deoptimization,\n+    missing_exception_handler,\n+    not_used,\n+    OSR_invalidation_back_branch,\n+    OSR_invalidation_for_compiling_with_C1,\n+    OSR_invalidation_of_lower_level,\n+    set_native_function,\n+    uncommon_trap,\n+    whitebox_deoptimization,\n+    zombie,\n+  };\n+\n+\n+  static const char* change_reason_to_string(ChangeReason change_reason) {\n+    switch (change_reason) {\n+      case ChangeReason::C1_codepatch:\n+        return \"C1 code patch\";\n+      case ChangeReason::C1_deoptimize:\n+        return \"C1 deoptimized\";\n+      case ChangeReason::C1_deoptimize_for_patching:\n+        return \"C1 deoptimize for patching\";\n+      case ChangeReason::C1_predicate_failed_trap:\n+        return \"C1 predicate failed trap\";\n+      case ChangeReason::CI_replay:\n+        return \"CI replay\";\n+      case ChangeReason::JVMCI_invalidate_nmethod:\n+        return \"JVMCI invalidate nmethod\";\n+      case ChangeReason::JVMCI_invalidate_nmethod_mirror:\n+        return \"JVMCI invalidate nmethod mirror\";\n+      case ChangeReason::JVMCI_materialize_virtual_object:\n+        return \"JVMCI materialize virtual object\";\n+      case ChangeReason::JVMCI_new_installation:\n+        return \"JVMCI new installation\";\n+      case ChangeReason::JVMCI_register_method:\n+        return \"JVMCI register method\";\n+      case ChangeReason::JVMCI_replacing_with_new_code:\n+        return \"JVMCI replacing with new code\";\n+      case ChangeReason::JVMCI_reprofile:\n+        return \"JVMCI reprofile\";\n+      case ChangeReason::marked_for_deoptimization:\n+        return \"marked for deoptimization\";\n+      case ChangeReason::missing_exception_handler:\n+        return \"missing exception handler\";\n+      case ChangeReason::not_used:\n+        return \"not used\";\n+      case ChangeReason::OSR_invalidation_back_branch:\n+        return \"OSR invalidation back branch\";\n+      case ChangeReason::OSR_invalidation_for_compiling_with_C1:\n+        return \"OSR invalidation for compiling with C1\";\n+      case ChangeReason::OSR_invalidation_of_lower_level:\n+        return \"OSR invalidation of lower level\";\n+      case ChangeReason::set_native_function:\n+        return \"set native function\";\n+      case ChangeReason::uncommon_trap:\n+        return \"uncommon trap\";\n+      case ChangeReason::whitebox_deoptimization:\n+        return \"whitebox deoptimization\";\n+      case ChangeReason::zombie:\n+        return \"zombie\";\n+      default: {\n+        assert(false, \"Unhandled reason\");\n+        return \"Unknown\";\n+      }\n+    }\n+  }\n+\n@@ -644,2 +723,2 @@\n-  bool  make_not_entrant(const char* reason);\n-  bool  make_not_used()    { return make_not_entrant(\"not used\"); }\n+  bool  make_not_entrant(ChangeReason change_reason);\n+  bool  make_not_used() { return make_not_entrant(ChangeReason::not_used); }\n@@ -968,1 +1047,1 @@\n-  void log_state_change(const char* reason) const;\n+  void log_state_change(ChangeReason change_reason) const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":82,"deletions":3,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"code\/nmethod.hpp\"\n@@ -1209,1 +1210,1 @@\n-        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, JVMCI_CHECK_0);\n+        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::ChangeReason::JVMCI_replacing_with_new_code, JVMCI_CHECK_0);\n@@ -1385,1 +1386,1 @@\n-    code->make_not_entrant(\"JVMCI reprofile\");\n+    code->make_not_entrant(nmethod::ChangeReason::JVMCI_reprofile);\n@@ -1400,1 +1401,1 @@\n-  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, JVMCI_CHECK);\n+  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, nmethod::ChangeReason::JVMCI_invalidate_nmethod, JVMCI_CHECK);\n@@ -1825,1 +1826,1 @@\n-    fst.current()->cb()->as_nmethod()->make_not_entrant(\"JVMCI materialize virtual objects\");\n+    fst.current()->cb()->as_nmethod()->make_not_entrant(nmethod::ChangeReason::JVMCI_materialize_virtual_object);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1752,1 +1752,1 @@\n-void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, JVMCI_TRAPS) {\n+void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, nmethod::ChangeReason change_reason, JVMCI_TRAPS) {\n@@ -1775,1 +1775,1 @@\n-    nm->make_not_entrant(\"JVMCI invalidate nmethod mirror\");\n+    nm->make_not_entrant(change_reason);\n@@ -1784,1 +1784,1 @@\n-    nm->make_not_entrant(\"JVMCI invalidate nmethod mirror\");\n+    nm->make_not_entrant(change_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3827,1 +3827,1 @@\n-      inv->make_not_entrant(\"OSR invalidation of lower levels\");\n+      inv->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_of_lower_level);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n-    nm->make_not_entrant(\"set native function\");\n+    nm->make_not_entrant(nmethod::ChangeReason::set_native_function);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -802,1 +802,1 @@\n-                nm->make_not_entrant(\"Whitebox deoptimization\");\n+                nm->make_not_entrant(nmethod::ChangeReason::whitebox_deoptimization);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1954,1 +1954,1 @@\n-  nm->make_not_entrant(\"missing exception handler\");\n+  nm->make_not_entrant(nmethod::ChangeReason::missing_exception_handler);\n@@ -2583,1 +2583,1 @@\n-      if (!nm->make_not_entrant(\"uncommon trap\")) {\n+      if (!nm->make_not_entrant(nmethod::ChangeReason::uncommon_trap)) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1341,1 +1341,1 @@\n-      nm->make_not_entrant(\"zombie\");\n+      nm->make_not_entrant(nmethod::ChangeReason::zombie);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1039,0 +1039,8 @@\n+    \/**\n+     * The class major version introduced by Java SE 26, {@value}.\n+     *\n+     * @see ClassFileFormatVersion#RELEASE_26\n+     * @since 26\n+     *\/\n+    int JAVA_26_VERSION = 70;\n+\n@@ -1050,1 +1058,1 @@\n-        return JAVA_25_VERSION;\n+        return JAVA_26_VERSION;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -377,0 +377,14 @@\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 26.\n+     *\n+     * @since 26\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se26\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 26 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_26(70),\n+\n+    \/\/ Reduce code churn when appending new constants\n+\n@@ -394,1 +408,1 @@\n-        return RELEASE_25;\n+        return RELEASE_26;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -156,0 +156,5 @@\n+\n+    \/**\n+      * 26, tbd\n+      *\/\n+    JDK26(\"26\"),\n@@ -221,0 +226,1 @@\n+        case JDK26  -> Target.JDK1_26;\n@@ -375,0 +381,1 @@\n+        case JDK26  -> RELEASE_26;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -113,0 +113,3 @@\n+\n+    \/** JDK 26. *\/\n+    JDK1_26(\"26\", 70, 0),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-@SupportedSourceVersion(SourceVersion.RELEASE_25)\n+@SupportedSourceVersion(SourceVersion.RELEASE_26)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -253,0 +253,5 @@\n+serviceability\/sa\/JhsdbThreadInfoTest.java              8344261 generic-all\n+serviceability\/sa\/TestJhsdbJstackLock.java              8344261 generic-all\n+serviceability\/sa\/sadebugd\/DebugdConnectTest.java       8344261 generic-all\n+serviceability\/attach\/RemovingUnixDomainSocketTest.java 8344261 generic-all\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -247,1 +247,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -408,1 +408,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -510,1 +510,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -632,1 +632,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -149,1 +149,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -267,1 +267,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -385,1 +385,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -530,1 +530,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -678,1 +678,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -826,1 +826,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -944,1 +944,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -986,1 +986,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1080,1 +1080,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1122,1 +1122,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1167,1 +1167,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1264,1 +1264,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1364,1 +1364,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1458,1 +1458,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1552,1 +1552,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1649,1 +1649,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1746,1 +1746,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1840,1 +1840,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1934,1 +1934,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2031,1 +2031,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2645,1 +2645,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2739,1 +2739,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2833,1 +2833,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2875,1 +2875,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -2920,1 +2920,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3017,1 +3017,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3117,1 +3117,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3214,1 +3214,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3256,1 +3256,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3382,1 +3382,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3486,1 +3486,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3590,1 +3590,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -3650,1 +3650,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @compile --source 25 DirectMethodTest.java\n+ * @compile --source 26 DirectMethodTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/DirectMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * @compile --source 25 FlatArraysTest.java\n+ * @compile --source 26 FlatArraysTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlatArraysTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @compile --source 25 Ifacmp.java\n+ * @compile --source 26 Ifacmp.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @compile --source 25 InlineTypeArray.java Point.java Long8Inline.java Person.java\n+ * @compile --source 26 InlineTypeArray.java Point.java Long8Inline.java Person.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadClient1.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -97,1 +97,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -161,1 +161,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -225,1 +225,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -289,1 +289,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -353,1 +353,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -417,1 +417,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -481,1 +481,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -545,1 +545,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -609,1 +609,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -674,1 +674,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -793,1 +793,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -883,1 +883,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -973,1 +973,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1063,1 +1063,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1159,1 +1159,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpValueClassValidation.jcod","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -163,1 +163,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -284,1 +284,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -404,1 +404,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -524,1 +524,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/fieldModifiersTest.jcod","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-identity class BadChild extends Parent version 69:65535\n+identity class BadChild extends Parent version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/BadChild.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-identity class BadChild1 extends Parent version 69:65535\n+identity class BadChild1 extends Parent version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/BadChild1.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-identity class Bnoinit_BAD version 69:65535\n+identity class Bnoinit_BAD version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Bnoinit_BAD.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-identity class Brbefore_BAD version 69:65535\n+identity class Brbefore_BAD version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Brbefore_BAD.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-identity class ControlFlowChildBad extends Parent version 69:65535\n+identity class ControlFlowChildBad extends Parent version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/ControlFlowChildBad.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-identity class Creflbefore_BAD version 69:65535\n+identity class Creflbefore_BAD version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Creflbefore_BAD.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-identity class Cwreflective_OK version 69:65535\n+identity class Cwreflective_OK version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Cwreflective_OK.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  69;                                      \/\/ version\n+  70;                                      \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/EndsInEarlyLarval.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  69;                                      \/\/ version\n+  70;                                      \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/InvalidIndexInEarlyLarval.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-  69;                                      \/\/ version\n+  70;                                      \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/NestedEarlyLarval.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  69;                                      \/\/ version\n+  70;                                      \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFieldsNotSubset.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-identity class TryCatchChildBad extends Parent version 69:65535\n+identity class TryCatchChildBad extends Parent version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/TryCatchChildBad.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-super class WriteAfterReadRefl version 69:65535\n+super class WriteAfterReadRefl version 70:65535\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/WriteAfterReadRefl.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-public abstract class StrictBase version 69:65535 {\n+public abstract class StrictBase version 70:65535 {\n@@ -62,1 +62,1 @@\n-public final class PostInitStrict version 69:65535 {\n+public final class PostInitStrict version 70:65535 {\n@@ -77,1 +77,1 @@\n-public final class BadStrictSubPreInit extends StrictBase version 69:65535 {\n+public final class BadStrictSubPreInit extends StrictBase version 70:65535 {\n@@ -91,1 +91,1 @@\n-public final class BadStrictSubPostInit extends StrictBase version 69:65535 {\n+public final class BadStrictSubPostInit extends StrictBase version 70:65535 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/strictFields.jasm","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -265,1 +265,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -366,1 +366,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -457,1 +457,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -547,1 +547,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -739,1 +739,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -830,1 +830,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1054,1 +1054,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n@@ -1236,1 +1236,1 @@\n-  69; \/\/ version\n+  70; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -318,0 +318,1 @@\n+    int V26 = 0 << 16 | 70;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -850,0 +850,9 @@\n+\n+############################################################################\n+\n+# jdk_since_checks\n+\n+tools\/sincechecker\/modules\/java.base\/JavaBaseCheckSince.java 8358627 generic-all\n+\n+############################################################################\n+\n","filename":"test\/jdk\/ProblemList.txt","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -129,1 +129,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -140,1 +140,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -151,1 +151,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -173,1 +173,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -193,1 +193,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -215,1 +215,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -237,1 +237,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n@@ -259,1 +259,1 @@\n-    @SupportedSourceVersion(RELEASE_25)\n+    @SupportedSourceVersion(RELEASE_26)\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}