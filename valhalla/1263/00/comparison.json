{"files":[{"patch":"@@ -304,1 +304,3 @@\n-                v.setLazyConstValue(initEnv(tree, initEnv), attr, tree);\n+                initEnv = initEnv(tree, initEnv);\n+                initEnv.info.ctorPrologue = (v.owner.kind == TYP && v.owner.isValueClass() && !v.isStatic());\n+                v.setLazyConstValue(initEnv, attr, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,40 +51,0 @@\n-\n-    \/\/ value classes\n-    value class V1 {\n-        int x;\n-        int y = x + 1; \/\/ allowed\n-        V1() {\n-            x = 12;\n-            \/\/ super();\n-        }\n-    }\n-\n-    value class V2 {\n-        int x;\n-        V2() { this(x = 3); } \/\/ error\n-        V2(int i) { x = 4; }\n-    }\n-\n-    abstract value class AV1 {\n-        AV1(int i) {}\n-    }\n-\n-    value class V3 extends AV1 {\n-        int x;\n-        V3() {\n-            super(x = 3); \/\/ ok\n-        }\n-    }\n-\n-    value class V4 { \/\/ OK\n-        int x;\n-        int y = x + 1;\n-\n-        V4() {\n-            x = 12;\n-        }\n-\n-        V4(int i) {\n-            x = i;\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-DA_DUConstructors.java:64:20: compiler.err.var.might.already.be.assigned: x\n@@ -6,1 +5,1 @@\n-3 errors\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *      8329345 8341061\n+ *      8329345 8341061 8340984\n@@ -888,0 +888,48 @@\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n+                \"\"\"\n+                value class V {\n+                    int x;\n+                    int y = x + 1; \/\/ allowed\n+                    V1() {\n+                        x = 12;\n+                        \/\/ super();\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.var.might.already.be.assigned\",\n+                \"\"\"\n+                value class V2 {\n+                    int x;\n+                    V2() { this(x = 3); } \/\/ error\n+                    V2(int i) { x = 4; }\n+                }\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                abstract value class AV1 {\n+                    AV1(int i) {}\n+                }\n+                value class V3 extends AV1 {\n+                    int x;\n+                    V3() {\n+                        super(x = 3); \/\/ ok\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.cant.ref.before.ctor.called\",\n+                \"\"\"\n+                value class V4 {\n+                    int x;\n+                    int y = x + 1;\n+                    V4() {\n+                        x = 12;\n+                    }\n+                    V4(int i) {\n+                        x = i;\n+                    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"}]}