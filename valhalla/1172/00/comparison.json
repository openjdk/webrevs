{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -476,0 +476,20 @@\n+\/\/ LoadableDescriptors {\n+\/\/   u2 attribute_name_index;\n+\/\/   u4 attribute_length;\n+\/\/   u2 number_of_descriptors;\n+\/\/   u2 descriptors[number_of_descriptors];\n+\/\/ }\n+void JvmtiClassFileReconstituter::write_loadable_descriptors_attribute() {\n+  Array<u2>* loadable_descriptors = ik()->loadable_descriptors();\n+  int number_of_descriptors = loadable_descriptors->length();\n+  int length = sizeof(u2) * (1 + number_of_descriptors); \/\/ '1 +' is for number_of_descriptors field\n+\n+  write_attribute_name_index(\"LoadableDescriptors\");\n+  write_u4(length);\n+  write_u2(checked_cast<u2>(number_of_descriptors));\n+  for (int i = 0; i < number_of_descriptors; i++) {\n+    u2 utf8_index = loadable_descriptors->at(i);\n+    write_u2(utf8_index);\n+  }\n+}\n+\n@@ -812,0 +832,3 @@\n+  if (ik()->loadable_descriptors() != Universe::the_empty_short_array()) {\n+    ++attr_count;\n+  }\n@@ -842,0 +865,3 @@\n+  if (ik()->loadable_descriptors() != Universe::the_empty_short_array()) {\n+    write_loadable_descriptors_attribute();\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,1 @@\n+  void write_loadable_descriptors_attribute();\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -765,1 +765,1 @@\n-           Array<u2>* the_array, Array<u2>* scr_array) {\n+           Array<u2>* the_array, Array<u2>* scr_array, bool is_klass = true) {\n@@ -793,2 +793,7 @@\n-      the_syms[i] = the_class->constants()->klass_name_at(the_cp_index);\n-      scr_syms[i] = scratch_class->constants()->klass_name_at(scr_cp_index);\n+      if (is_klass) {\n+        the_syms[i] = the_class->constants()->klass_name_at(the_cp_index);\n+        scr_syms[i] = scratch_class->constants()->klass_name_at(scr_cp_index);\n+      } else {\n+        the_syms[i] = the_class->constants()->symbol_at(the_cp_index);\n+        scr_syms[i] = scratch_class->constants()->symbol_at(scr_cp_index);\n+      }\n@@ -926,2 +931,2 @@\n-static jvmtiError check_preload_attribute(InstanceKlass* the_class,\n-                                          InstanceKlass* scratch_class) {\n+static jvmtiError check_loadable_descriptors_attribute(InstanceKlass* the_class,\n+                                                       InstanceKlass* scratch_class) {\n@@ -931,2 +936,2 @@\n-  \/\/ Check whether the class Preload attribute has been changed.\n-  return check_attribute_arrays(\"Preload\",\n+  \/\/ Check whether the class LoadableDescriptors attribute has been changed.\n+  return check_attribute_arrays(\"LoadableDescriptors\",\n@@ -935,1 +940,1 @@\n-                                scratch_class->loadable_descriptors());\n+                                scratch_class->loadable_descriptors(), \/*is_klass*\/ false);\n@@ -1018,1 +1023,1 @@\n-  err = check_preload_attribute(the_class, scratch_class);\n+  err = check_loadable_descriptors_attribute(the_class, scratch_class);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -219,1 +219,1 @@\n-                message = \"class redefinition failed: attempted to change the class NestHost, NestMembers, Record, or PermittedSubclasses attribute\";\n+                message = \"class redefinition failed: attempted to change the class NestHost, NestMembers, Record, PermittedSubclasses or LoadableDescrriptors attribute\";\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/JavaExceptions.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}