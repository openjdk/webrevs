{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -476,0 +476,20 @@\n+\/\/ LoadableDescriptors {\n+\/\/   u2 attribute_name_index;\n+\/\/   u4 attribute_length;\n+\/\/   u2 number_of_descriptors;\n+\/\/   u2 descriptors[number_of_descriptors];\n+\/\/ }\n+void JvmtiClassFileReconstituter::write_loadable_descriptors_attribute() {\n+  Array<u2>* loadable_descriptors = ik()->loadable_descriptors();\n+  int number_of_descriptors = loadable_descriptors->length();\n+  int length = sizeof(u2) * (1 + number_of_descriptors); \/\/ '1 +' is for number_of_descriptors field\n+\n+  write_attribute_name_index(\"LoadableDescriptors\");\n+  write_u4(length);\n+  write_u2(checked_cast<u2>(number_of_descriptors));\n+  for (int i = 0; i < number_of_descriptors; i++) {\n+    u2 utf8_index = loadable_descriptors->at(i);\n+    write_u2(utf8_index);\n+  }\n+}\n+\n@@ -812,0 +832,3 @@\n+  if (ik()->loadable_descriptors() != Universe::the_empty_short_array()) {\n+    ++attr_count;\n+  }\n@@ -842,0 +865,3 @@\n+  if (ik()->loadable_descriptors() != Universe::the_empty_short_array()) {\n+    write_loadable_descriptors_attribute();\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,1 @@\n+  void write_loadable_descriptors_attribute();\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -926,12 +926,0 @@\n-static jvmtiError check_preload_attribute(InstanceKlass* the_class,\n-                                          InstanceKlass* scratch_class) {\n-  Thread* thread = Thread::current();\n-  ResourceMark rm(thread);\n-\n-  \/\/ Check whether the class Preload attribute has been changed.\n-  return check_attribute_arrays(\"Preload\",\n-                                the_class, scratch_class,\n-                                the_class->loadable_descriptors(),\n-                                scratch_class->loadable_descriptors());\n-}\n-\n@@ -1017,6 +1005,0 @@\n-  \/\/ Check whether the Preload attribute has been changed.\n-  err = check_preload_attribute(the_class, scratch_class);\n-  if (err != JVMTI_ERROR_NONE) {\n-    return err;\n-  }\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}