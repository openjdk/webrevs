{"files":[{"patch":"@@ -38,0 +38,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -39,2 +40,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED AnnotationsTests.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XX:+EnableValhalla AnnotationsTests\n+ * @compile AnnotationsTests.java\n+ * @run main\/othervm -XX:+EnableValhalla AnnotationsTests\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AnnotationsTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED CircularityTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.CircularityTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile CircularityTest.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.CircularityTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CircularityTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,2 +37,3 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED ClassPrintLayoutDcmd.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile ClassPrintLayoutDcmd.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.value.ValueClass;\n@@ -39,2 +39,4 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED EmptyInlineTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.EmptyInlineTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @compile EmptyInlineTest.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.EmptyInlineTest\n@@ -97,1 +99,1 @@\n-        EmptyInline[] emptyArray = (EmptyInline[])VM.newNullRestrictedArray(EmptyInline.class, 100);\n+        EmptyInline[] emptyArray = (EmptyInline[])ValueClass.newNullRestrictedArray(EmptyInline.class, 100);\n@@ -104,1 +106,1 @@\n-        EmptyInline[] array2 = (EmptyInline[])VM.newNullRestrictedArray(EmptyInline.class, 100);\n+        EmptyInline[] array2 = (EmptyInline[])ValueClass.newNullRestrictedArray(EmptyInline.class, 100);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/EmptyInlineTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,3 +35,4 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED FlattenableSemanticTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=64 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.FlattenableSemanticTest\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.FlattenableSemanticTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile FlattenableSemanticTest.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.FlattenableSemanticTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlattenableSemanticTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,2 +35,3 @@\n- * @compile --source 22 --enable-preview --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Ifacmp.java\n- * @run main\/othervm --enable-preview --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @compile --source 22 --enable-preview Ifacmp.java\n+ * @run main\/othervm --enable-preview\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.value.ValueClass;\n@@ -46,0 +46,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -48,1 +49,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Person.java InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -51,2 +52,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -63,0 +63,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -65,1 +66,1 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Person.java InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -68,2 +69,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -80,0 +80,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -82,1 +83,1 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Person.java InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -85,2 +86,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -97,0 +97,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -99,1 +100,1 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Person.java InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -102,2 +103,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -115,0 +115,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -117,1 +118,1 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Person.java InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -120,2 +121,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -206,1 +206,1 @@\n-        Person[] array = (Person[])VM.newNullRestrictedArray(Person.class, NOF_PEOPLE);\n+        Person[] array = (Person[])ValueClass.newNullRestrictedArray(Person.class, NOF_PEOPLE);\n@@ -502,1 +502,1 @@\n-        return (Person)VM.newNullRestrictedArray(Person.class, 1)[0];\n+        return (Person)ValueClass.newNullRestrictedArray(Person.class, 1)[0];\n@@ -644,1 +644,1 @@\n-            FooValue[] fa = (FooValue[])VM.newNullRestrictedArray(FooValue.class, 1);\n+            FooValue[] fa = (FooValue[])ValueClass.newNullRestrictedArray(FooValue.class, 1);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.value.ValueClass;\n@@ -42,0 +42,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -43,4 +44,4 @@\n- * @compile --source 22 --enable-preview --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED InlineTypeArray.java Point.java Long8Inline.java Person.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=-1 --enable-preview --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.InlineTypeArray\n- * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=0 --enable-preview --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.InlineTypeArray\n- * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions --enable-preview -XX:ForceNonTearable=* --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @compile --source 22 --enable-preview InlineTypeArray.java Point.java Long8Inline.java Person.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=-1 --enable-preview runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=0 --enable-preview runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions --enable-preview -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.InlineTypeArray\n@@ -88,1 +89,1 @@\n-        Point[] defaultPoint = (Point[])VM.newNullRestrictedArray(Point.class, 1);\n+        Point[] defaultPoint = (Point[])ValueClass.newNullRestrictedArray(Point.class, 1);\n@@ -109,1 +110,1 @@\n-        Point[] pointsCopy = (Point[])VM.newNullRestrictedArray(Point.class, points.length);\n+        Point[] pointsCopy = (Point[])ValueClass.newNullRestrictedArray(Point.class, points.length);\n@@ -127,1 +128,1 @@\n-        Point[] pointsCopy = (Point[])VM.newNullRestrictedArray(Point.class, points.length);\n+        Point[] pointsCopy = (Point[])ValueClass.newNullRestrictedArray(Point.class, points.length);\n@@ -142,1 +143,1 @@\n-        Point[] ps = (Point[])VM.newNullRestrictedArray(Point.class, 4);\n+        Point[] ps = (Point[])ValueClass.newNullRestrictedArray(Point.class, 4);\n@@ -169,1 +170,1 @@\n-        Long8Inline[] values = (Long8Inline[])VM.newNullRestrictedArray(Long8Inline.class, 3);\n+        Long8Inline[] values = (Long8Inline[])ValueClass.newNullRestrictedArray(Long8Inline.class, 3);\n@@ -179,1 +180,1 @@\n-        Long8Inline[] copy = (Long8Inline[])VM.newNullRestrictedArray(Long8Inline.class, values.length);\n+        Long8Inline[] copy = (Long8Inline[])ValueClass.newNullRestrictedArray(Long8Inline.class, values.length);\n@@ -186,1 +187,1 @@\n-        Person[] people = (Person[])VM.newNullRestrictedArray(Person.class, 3);\n+        Person[] people = (Person[])ValueClass.newNullRestrictedArray(Person.class, 3);\n@@ -196,1 +197,1 @@\n-        Person[] peopleCopy = (Person[])VM.newNullRestrictedArray(Person.class, people.length);\n+        Person[] peopleCopy = (Person[])ValueClass.newNullRestrictedArray(Person.class, people.length);\n@@ -271,1 +272,1 @@\n-        staticMyIntArray = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 1);\n+        staticMyIntArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 1);\n@@ -288,1 +289,1 @@\n-        MyInt[] myInts = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 1);\n+        MyInt[] myInts = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 1);\n@@ -335,1 +336,1 @@\n-        MyInt[] myInts = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 2);\n+        MyInt[] myInts = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 2);\n@@ -340,1 +341,1 @@\n-        MyInt[] expected = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 3);\n+        MyInt[] expected = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n@@ -347,1 +348,1 @@\n-        expected = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 3);\n+        expected = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n@@ -355,1 +356,1 @@\n-        MyInt[] dest = (MyInt[])VM.newNullRestrictedArray(MyInt.class, copyMyInts.length);\n+        MyInt[] dest = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, copyMyInts.length);\n@@ -447,1 +448,1 @@\n-        valArray = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 3);\n+        valArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n@@ -454,1 +455,1 @@\n-        valArray = (MyInt[])VM.newNullRestrictedArray(MyInt.class, 3);\n+        valArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n@@ -518,1 +519,1 @@\n-        MyPoint[] pts = (MyPoint[])VM.newNullRestrictedArray(MyPoint.class, 3);\n+        MyPoint[] pts = (MyPoint[])ValueClass.newNullRestrictedArray(MyPoint.class, 3);\n@@ -522,1 +523,1 @@\n-        pts = (MyPoint[])VM.newNullRestrictedArray(MyPoint.class, 3);\n+        pts = (MyPoint[])ValueClass.newNullRestrictedArray(MyPoint.class, 3);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED InlineTypeCreation.java Point.java Long8Inline.java Person.java\n- * @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.InlineTypeCreation\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile InlineTypeCreation.java Point.java Long8Inline.java Person.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.InlineTypeCreation\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeCreation.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.value.ValueClass;\n@@ -41,1 +41,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED InlineTypeDensity.java\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @compile InlineTypeDensity.java\n@@ -43,2 +45,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -48,2 +49,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -53,2 +53,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -58,2 +57,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -262,1 +260,1 @@\n-            MyByte[] mba = (MyByte[])VM.newNullRestrictedArray(MyByte.class, testSize);\n+            MyByte[] mba = (MyByte[])ValueClass.newNullRestrictedArray(MyByte.class, testSize);\n@@ -270,1 +268,1 @@\n-            MyShort[] msa = (MyShort[])VM.newNullRestrictedArray(MyShort.class, testSize);\n+            MyShort[] msa = (MyShort[])ValueClass.newNullRestrictedArray(MyShort.class, testSize);\n@@ -278,1 +276,1 @@\n-            MyInt[] mia = (MyInt[])VM.newNullRestrictedArray(MyInt.class, testSize);\n+            MyInt[] mia = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, testSize);\n@@ -286,1 +284,1 @@\n-            MyLong[] mla = (MyLong[])VM.newNullRestrictedArray(MyLong.class, testSize);\n+            MyLong[] mla = (MyLong[])ValueClass.newNullRestrictedArray(MyLong.class, testSize);\n@@ -318,5 +316,5 @@\n-        assertArraySameSize(new short[testSize], VM.newNullRestrictedArray(bbValue.class, testSize), testSize);\n-        assertArraySameSize(new long[testSize], VM.newNullRestrictedArray(siValue.class, testSize), testSize);\n-        assertArraySameSize(new long[testSize], VM.newNullRestrictedArray(ssiValue.class, testSize), testSize);\n-        assertArraySameSize(new long[testSize*2], VM.newNullRestrictedArray(blValue.class, testSize), testSize);\n-        assertArraySameSize(new int[testSize], VM.newNullRestrictedArray(bsValue.class, testSize), testSize);\n+        assertArraySameSize(new short[testSize], ValueClass.newNullRestrictedArray(bbValue.class, testSize), testSize);\n+        assertArraySameSize(new long[testSize], ValueClass.newNullRestrictedArray(siValue.class, testSize), testSize);\n+        assertArraySameSize(new long[testSize], ValueClass.newNullRestrictedArray(ssiValue.class, testSize), testSize);\n+        assertArraySameSize(new long[testSize*2], ValueClass.newNullRestrictedArray(blValue.class, testSize), testSize);\n+        assertArraySameSize(new int[testSize], ValueClass.newNullRestrictedArray(bsValue.class, testSize), testSize);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -32,2 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED  Point.java InlineTypeGetField.java\n- * @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.InlineTypeGetField\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile Point.java InlineTypeGetField.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.InlineTypeGetField\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeGetField.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+ * @modules java.base\/jdk.internal.vm.annotation\n@@ -58,3 +59,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED InlineTypesTest.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @compile InlineTypesTest.java\n+ * @run main\/othervm -XX:+EnableValhalla\n@@ -65,2 +65,1 @@\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   -XX:+EnableValhalla\n+ * @run main\/othervm -XX:+EnableValhalla\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,2 +35,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED QuickeningTest.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED -XX:+EnableValhalla runtime.valhalla.inlinetypes.QuickeningTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile QuickeningTest.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.QuickeningTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED StaticFieldsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.StaticFieldsTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile StaticFieldsTest.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.StaticFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/StaticFieldsTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.value.ValueClass;\n@@ -34,2 +34,4 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Test8186715.java\n- * @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.Test8186715\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @compile Test8186715.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.Test8186715\n@@ -61,1 +63,1 @@\n-        MyValueType[] array = (MyValueType[])VM.newNullRestrictedArray(MyValueType.class, 1);\n+        MyValueType[] array = (MyValueType[])ValueClass.newNullRestrictedArray(MyValueType.class, 1);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @modules java.base\/jdk.internal.vm.annotation\n@@ -29,2 +30,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED  TestFieldNullability.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED -XX:+EnableValhalla  -Xmx128m -XX:InlineFieldMaxFlatSize=32\n+ * @compile TestFieldNullability.java\n+ * @run main\/othervm -XX:+EnableValhalla  -Xmx128m -XX:InlineFieldMaxFlatSize=32\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED Point.java TestInheritedInlineTypeFields.java\n- * @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile Point.java TestInheritedInlineTypeFields.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestInheritedInlineTypeFields.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @modules java.base\/jdk.internal.vm.annotation\n@@ -36,2 +37,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED TestJNIIsSameObject.java\n- * @run main\/othervm\/native -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED TestJNIIsSameObject\n+ * @compile TestJNIIsSameObject.java\n+ * @run main\/othervm\/native -XX:+EnableValhalla TestJNIIsSameObject\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIIsSameObject.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,2 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED Point.java JumboInline.java UninitializedInlineFieldsTest.java\n- * @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile Point.java JumboInline.java UninitializedInlineFieldsTest.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UninitializedInlineFieldsTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,3 @@\n- * @compile  --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED Point.java UnsafeTest.java\n- * @run main\/othervm -XX:+EnableValhalla  -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.UnsafeTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile Point.java UnsafeTest.java\n+ * @run main\/othervm -XX:+EnableValhalla  -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 runtime.valhalla.inlinetypes.UnsafeTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.misc.VM;\n@@ -40,2 +39,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED VarArgsArray.java\n- * @run main\/othervm -XX:+EnableValhalla  --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.VarArgsArray\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @compile VarArgsArray.java\n+ * @run main\/othervm -XX:+EnableValhalla runtime.valhalla.inlinetypes.VarArgsArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -31,2 +32,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED VolatileTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.VolatileTest\n+ * @compile VolatileTest.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.VolatileTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}