{"files":[{"patch":"@@ -331,1 +331,1 @@\n-                v.owner.isValueClass() &&\n+                v.isStrict() &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2218,1 +2218,1 @@\n-                isFinalUninitializedField(sym)));\n+                isFinalOrStrictUninitializedField(sym)));\n@@ -2221,1 +2221,1 @@\n-        boolean isFinalUninitializedField(VarSymbol sym) {\n+        boolean isFinalOrStrictUninitializedField(VarSymbol sym) {\n@@ -2223,1 +2223,2 @@\n-                   ((sym.flags() & (FINAL | HASINIT | PARAMETER)) == FINAL &&\n+                   (((sym.flags() & (FINAL | HASINIT | PARAMETER)) == FINAL ||\n+                     (sym.flags() & (STRICT | HASINIT | PARAMETER)) == STRICT) &&\n@@ -3104,1 +3105,1 @@\n-                        if (isFinalUninitializedField(sym) && !sym.isStatic())\n+                        if (isFinalOrStrictUninitializedField(sym) && !sym.isStatic())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+        \/*\n+        \/\/ javac is flagging the error at compile time\n@@ -62,0 +64,1 @@\n+        *\/\n@@ -129,1 +132,0 @@\n-        super();\n@@ -131,0 +133,2 @@\n+        super();\n+        \/\/ was y = 1;\n@@ -152,1 +156,0 @@\n-        super();\n@@ -154,0 +157,2 @@\n+        super();\n+        \/\/ was x = 1;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFinalInstanceFieldsTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -762,1 +762,1 @@\n-                        @Strict int i;\n+                        @Strict int i = 0;\n@@ -1098,0 +1098,20 @@\n+            assertFail(\"compiler.err.var.not.initialized.in.default.constructor\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        @Strict int i;\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.cant.ref.after.ctor.called\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        @Strict int i;\n+                        Test() {\n+                            super();\n+                            i = 0;\n+                        }\n+                    }\n+                    \"\"\"\n+            );\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}