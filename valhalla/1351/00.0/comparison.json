{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/CompileJavaModules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+include DebugInfoUtils.gmk\n","filename":"make\/Images.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/hotspot.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    AC_MSG_RESULT([no, cannot generate full docs])\n+    AC_MSG_RESULT([no, cannot generate full docs or man pages])\n@@ -132,1 +132,1 @@\n-    AC_MSG_RESULT([no, cannot generate full docs])\n+    AC_MSG_RESULT([no, cannot generate full docs or man pages])\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/Modules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1204,3 +1204,5 @@\n-            organization: common.organization,\n-            revision: \"3.0-17-jdk-asm+1.0\",\n-            ext: \"zip\",\n+            server: \"jpg\",\n+            product: \"jcov\",\n+            version: \"3.0\",\n+            build_number: \"1\",\n+            file: \"bundles\/jcov-3.0+1.zip\",\n","filename":"make\/conf\/jib-profiles.js","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5467,1 +5467,3 @@\n-  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n+  assert(_klass_decode_mode != KlassDecodeNone, \"should be initialized\");\n+  return _klass_decode_mode;\n+}\n@@ -5470,3 +5472,5 @@\n-  if (_klass_decode_mode != KlassDecodeNone) {\n-    return _klass_decode_mode;\n-  }\n+MacroAssembler::KlassDecodeMode  MacroAssembler::klass_decode_mode(address base, int shift, const size_t range) {\n+  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n+\n+  \/\/ KlassDecodeMode shouldn't be set already.\n+  assert(_klass_decode_mode == KlassDecodeNone, \"set once\");\n@@ -5474,2 +5478,2 @@\n-  if (CompressedKlassPointers::base() == nullptr) {\n-    return (_klass_decode_mode = KlassDecodeZero);\n+  if (base == nullptr) {\n+    return KlassDecodeZero;\n@@ -5479,2 +5483,1 @@\n-        \/*is32*\/false, (uint64_t)CompressedKlassPointers::base())) {\n-    const size_t range = CompressedKlassPointers::klass_range_end() - CompressedKlassPointers::base();\n+        \/*is32*\/false, (uint64_t)base)) {\n@@ -5482,2 +5485,2 @@\n-    if (((uint64_t)CompressedKlassPointers::base() & range_mask) == 0) {\n-      return (_klass_decode_mode = KlassDecodeXor);\n+    if (((uint64_t)base & range_mask) == 0) {\n+      return KlassDecodeXor;\n@@ -5488,3 +5491,13 @@\n-    (uint64_t)CompressedKlassPointers::base() >> CompressedKlassPointers::shift();\n-  guarantee((shifted_base & 0xffff0000ffffffff) == 0,\n-            \"compressed class base bad alignment\");\n+    (uint64_t)base >> shift;\n+  if ((shifted_base & 0xffff0000ffffffff) == 0) {\n+    return KlassDecodeMovk;\n+  }\n+\n+  \/\/ No valid encoding.\n+  return KlassDecodeNone;\n+}\n+\n+\/\/ Check if one of the above decoding modes will work for given base, shift and range.\n+bool MacroAssembler::check_klass_decode_mode(address base, int shift, const size_t range) {\n+  return klass_decode_mode(base, shift, range) != KlassDecodeNone;\n+}\n@@ -5492,1 +5505,3 @@\n-  return (_klass_decode_mode = KlassDecodeMovk);\n+bool MacroAssembler::set_klass_decode_mode(address base, int shift, const size_t range) {\n+  _klass_decode_mode = klass_decode_mode(base, shift, range);\n+  return _klass_decode_mode != KlassDecodeNone;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-  KlassDecodeMode klass_decode_mode();\n+  \/\/ Calculate decoding mode based on given parameters, used for checking then ultimately setting.\n+  static KlassDecodeMode klass_decode_mode(address base, int shift, const size_t range);\n@@ -107,0 +108,10 @@\n+  \/\/ Returns above setting with asserts\n+  static KlassDecodeMode klass_decode_mode();\n+\n+ public:\n+  \/\/ Checks the decode mode and returns false if not compatible with preferred decoding mode.\n+  static bool check_klass_decode_mode(address base, int shift, const size_t range);\n+\n+  \/\/ Sets the decode mode and returns false if cannot be set.\n+  static bool set_klass_decode_mode(address base, int shift, const size_t range);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1757,1 +1757,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1946,2 +1945,0 @@\n-  VMRegPair tmp_vmreg;\n-  tmp_vmreg.set2(r19->as_VMReg());\n@@ -1954,1 +1951,0 @@\n-  int temploc = -1;\n@@ -2174,1 +2170,0 @@\n-  Label after_transition;\n@@ -2207,1 +2202,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1792,8 +1792,19 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, Address src, int vlen_in_bytes) {\n-  switch (vlen_in_bytes) {\n-    case 4:  movdl(dst, src);   break;\n-    case 8:  movq(dst, src);    break;\n-    case 16: movdqu(dst, src);  break;\n-    case 32: vmovdqu(dst, src); break;\n-    case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n-    default: ShouldNotReachHere();\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes) {\n+  if (is_integral_type(bt)) {\n+    switch (vlen_in_bytes) {\n+      case 4:  movdl(dst, src);   break;\n+      case 8:  movq(dst, src);    break;\n+      case 16: movdqu(dst, src);  break;\n+      case 32: vmovdqu(dst, src); break;\n+      case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (vlen_in_bytes) {\n+      case 4:  movflt(dst, src); break;\n+      case 8:  movdbl(dst, src); break;\n+      case 16: movups(dst, src); break;\n+      case 32: vmovups(dst, src, Assembler::AVX_256bit); break;\n+      case 64: vmovups(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n@@ -1803,1 +1814,1 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n@@ -1807,1 +1818,1 @@\n-    load_vector(dst, as_Address(src), vlen_in_bytes);\n+    load_vector(bt, dst, as_Address(src), vlen_in_bytes);\n@@ -1810,1 +1821,1 @@\n-    load_vector(dst, Address(rscratch, 0), vlen_in_bytes);\n+    load_vector(bt, dst, Address(rscratch, 0), vlen_in_bytes);\n@@ -1839,4 +1850,1 @@\n-    movq(dst, src);\n-    if (vlen == 16) {\n-      punpcklqdq(dst, dst);\n-    }\n+    load_vector(bt, dst, src, vlen);\n@@ -1853,1 +1861,1 @@\n-  load_vector(dst, addr, vlen_in_bytes);\n+  load_vector(T_BYTE, dst, addr, vlen_in_bytes);\n@@ -3546,1 +3554,1 @@\n-  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n+  load_vector(eltype, dst, src, arrays_hashcode_elsize(eltype) * 8);\n@@ -3550,1 +3558,1 @@\n-  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n+  load_vector(eltype, dst, src, arrays_hashcode_elsize(eltype) * 8);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":26,"deletions":18,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -143,2 +143,2 @@\n-  void load_vector(XMMRegister dst, Address        src, int vlen_in_bytes);\n-  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n+  void load_vector(BasicType bt, XMMRegister dst, Address        src, int vlen_in_bytes);\n+  void load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1366,1 +1366,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1760,2 +1759,0 @@\n-  Label after_transition;\n-\n@@ -1812,1 +1809,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2174,1 +2174,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -2372,3 +2371,0 @@\n-  VMRegPair tmp_vmreg;\n-  tmp_vmreg.set2(rbx->as_VMReg());\n-\n@@ -2380,1 +2376,0 @@\n-  int temploc = -1;\n@@ -2603,2 +2598,0 @@\n-  Label after_transition;\n-\n@@ -2654,1 +2647,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2214,0 +2214,13 @@\n+\/\/ Return true if Vector::rearrange needs preparation of the shuffle argument\n+bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+  switch (elem_bt) {\n+    case T_BYTE:  return false;\n+    case T_SHORT: return !VM_Version::supports_avx512bw();\n+    case T_INT:   return !VM_Version::supports_avx();\n+    case T_LONG:  return vlen < 8 && !VM_Version::supports_avx512vl();\n+    default:\n+      ShouldNotReachHere();\n+      return false;\n+  }\n+}\n+\n@@ -2765,12 +2778,3 @@\n-static inline GrowableArray<jvalue>* vreplicate_imm(BasicType bt, T con, int len) {\n-  GrowableArray<jvalue>* val = new GrowableArray<jvalue>(len);\n-  jvalue ele;\n-  switch (bt) {\n-    case T_BYTE:   ele.b = con; break;\n-    case T_SHORT:  ele.s = con; break;\n-    case T_INT:    ele.i = con; break;\n-    case T_LONG:   ele.j = con; break;\n-    case T_FLOAT:  ele.f = con; break;\n-    case T_DOUBLE: ele.d = con; break;\n-    default: ShouldNotReachHere();\n-  }\n+static inline GrowableArray<jbyte>* vreplicate_imm(BasicType bt, T con, int len) {\n+  int size = type2aelembytes(bt) * len;\n+  GrowableArray<jbyte>* val = new GrowableArray<jbyte>(size, size, 0);\n@@ -2778,1 +2782,30 @@\n-    val->append(ele);\n+    int offset = i * type2aelembytes(bt);\n+    switch (bt) {\n+      case T_BYTE: val->at(i) = con; break;\n+      case T_SHORT: {\n+        jshort c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jshort));\n+        break;\n+      }\n+      case T_INT: {\n+        jint c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jint));\n+        break;\n+      }\n+      case T_LONG: {\n+        jlong c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jlong));\n+        break;\n+      }\n+      case T_FLOAT: {\n+        jfloat c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jfloat));\n+        break;\n+      }\n+      case T_DOUBLE: {\n+        jdouble c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jdouble));\n+        break;\n+      }\n+      default: assert(false, \"%s\", type2name(bt));\n+    }\n@@ -4096,1 +4129,2 @@\n-    __ load_vector($dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ load_vector(bt, $dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n@@ -4579,4 +4613,3 @@\n-    InternalAddress addr = $constantaddress(Matcher::vector_element_basic_type(this),\n-        vreplicate_imm(Matcher::vector_element_basic_type(this), $con$$constant,\n-            (VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 4 : 8) : 8) \/\n-                type2aelembytes(Matcher::vector_element_basic_type(this))));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(Matcher::vector_element_basic_type(this), $con$$constant,\n+                                                           (VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 4 : 8) : 16) \/\n+                                                                   type2aelembytes(Matcher::vector_element_basic_type(this))));\n@@ -4720,1 +4753,1 @@\n-    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, $con$$constant, 1));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_LONG, $con$$constant, VM_Version::supports_sse3() ? 1 : 2));\n@@ -4802,2 +4835,2 @@\n-    InternalAddress addr = $constantaddress(T_FLOAT, vreplicate_imm(T_FLOAT, $con$$constant,\n-        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 2));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_FLOAT, $con$$constant,\n+                                                           VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 4));\n@@ -4879,1 +4912,1 @@\n-    InternalAddress addr = $constantaddress(T_DOUBLE, vreplicate_imm(T_DOUBLE, $con$$constant, 1));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_DOUBLE, $con$$constant, VM_Version::supports_sse3() ? 1 : 2));\n@@ -8876,11 +8909,0 @@\n-\n-instruct loadShuffleB(vec dst) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n-  match(Set dst (VectorLoadShuffle dst));\n-  format %{ \"vector_load_shuffle $dst, $dst\" %}\n-  ins_encode %{\n-    \/\/ empty\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -8953,1 +8975,1 @@\n-            Matcher::vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n+            !VM_Version::supports_avx512bw());\n@@ -8964,1 +8986,1 @@\n-      __ pmovzxbw($vtmp$$XMMRegister, $src$$XMMRegister);\n+      __ movdqu($vtmp$$XMMRegister, $src$$XMMRegister);\n@@ -8979,2 +9001,1 @@\n-      __ vpmovzxbw($vtmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-      __ vpsllw($vtmp$$XMMRegister, $vtmp$$XMMRegister, 1, vlen_enc);\n+      __ vpsllw($vtmp$$XMMRegister, $src$$XMMRegister, 1, vlen_enc);\n@@ -9027,15 +9048,0 @@\n-instruct loadShuffleS_evex(vec dst, vec src) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n-            VM_Version::supports_avx512bw());\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    if (!VM_Version::supports_avx512vl()) {\n-      vlen_enc = Assembler::AVX_512bit;\n-    }\n-    __ vpmovzxbw($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9072,1 +9078,1 @@\n-    __ pmovzxbd($vtmp$$XMMRegister, $src$$XMMRegister);\n+    __ movdqu($vtmp$$XMMRegister, $src$$XMMRegister);\n@@ -9101,12 +9107,0 @@\n-instruct loadShuffleI_avx(vec dst, vec src) %{\n-  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n-            UseAVX > 0);\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    __ vpmovzxbd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9142,2 +9136,1 @@\n-    __ vpmovzxbq($vtmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-    __ vpsllq($vtmp$$XMMRegister, $vtmp$$XMMRegister, 1, vlen_enc);\n+    __ vpsllq($vtmp$$XMMRegister, $src$$XMMRegister, 1, vlen_enc);\n@@ -9169,14 +9162,0 @@\n-instruct loadShuffleL_evex(vec dst, vec src) %{\n-  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    assert(UseAVX > 2, \"required\");\n-\n-    int vlen_enc = vector_length_encoding(this);\n-    __ vpmovzxbq($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9791,1 +9770,1 @@\n-    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, 0x8040201008040201L, 1));\n+    InternalAddress addr = $constantaddress(jlong(0x8040201008040201));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":61,"deletions":82,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-  \/\/ We check user input for SharedBaseAddress at dump time. We must weed out values\n-  \/\/ we already know to be invalid later.\n+  \/\/ We check user input for SharedBaseAddress at dump time.\n@@ -158,1 +157,3 @@\n-  \/\/ Therefore, \"shared_base\" must be later usable as encoding base.\n+  \/\/ On AARCH64, The \"shared_base\" may not be later usable as encoding base, depending on the\n+  \/\/ total size of the reserved area and the precomputed_narrow_klass_shift. This is checked\n+  \/\/ before reserving memory.  Here we weed out values already known to be invalid later.\n@@ -1495,0 +1496,9 @@\n+  \/\/ Test that class space base address plus shift can be decoded by aarch64, when restored.\n+  const int precomputed_narrow_klass_shift = ArchiveBuilder::precomputed_narrow_klass_shift();\n+  if (!CompressedKlassPointers::check_klass_decode_mode(base_address, precomputed_narrow_klass_shift,\n+                                                        total_range_size)) {\n+    log_info(cds)(\"CDS initialization: Cannot use SharedBaseAddress \" PTR_FORMAT \" with precomputed shift %d.\",\n+                  p2i(base_address), precomputed_narrow_klass_shift);\n+    use_archive_base_addr = false;\n+  }\n+\n@@ -1534,1 +1544,1 @@\n-    assert(base_address == nullptr || (address)total_space_rs.base() == base_address,\n+    assert(!use_archive_base_addr || (address)total_space_rs.base() == base_address,\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1020,27 +1020,0 @@\n-  do_intrinsic(_VectorShuffleIota, jdk_internal_vm_vector_VectorSupport, vector_shuffle_step_iota_name, vector_shuffle_step_iota_sig, F_S)     \\\n-   do_signature(vector_shuffle_step_iota_sig, \"(Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"                                          \\\n-                                               \"IIII\"                                                                                          \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)\"                                  \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\")                                         \\\n-   do_name(vector_shuffle_step_iota_name, \"shuffleIota\")                                                                                       \\\n-                                                                                                                                               \\\n-  do_intrinsic(_VectorShuffleToVector, jdk_internal_vm_vector_VectorSupport, vector_shuffle_to_vector_name, vector_shuffle_to_vector_sig, F_S) \\\n-   do_signature(vector_shuffle_to_vector_sig, \"(Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"                                          \\\n-                                               \"ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)\"                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                \\\n-   do_name(vector_shuffle_to_vector_name, \"shuffleToVector\")                                                                                   \\\n-                                                                                                                                               \\\n-  do_intrinsic(_VectorWrapShuffleIndexes, jdk_internal_vm_vector_VectorSupport, vector_wrap_shuffle_indexes_name,                              \\\n-                                                                                                         vector_wrap_shuffle_indexes_sig, F_S) \\\n-   do_signature(vector_wrap_shuffle_indexes_sig, \"(Ljava\/lang\/Class;\"                                                                          \\\n-                                                  \"Ljava\/lang\/Class;\"                                                                          \\\n-                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"                                       \\\n-                                                  \"ILjdk\/internal\/vm\/vector\/VectorSupport$WrapShuffleIndexesOperation;)\"                       \\\n-                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\")                                      \\\n-   do_name(vector_wrap_shuffle_indexes_name, \"wrapShuffleIndexes\")                                                                             \\\n-                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2141,2 +2141,1 @@\n-    \/\/ The next source region is in the current space.  Update src_region_idx\n-    \/\/ and the source address to match src_region_ptr.\n+    \/\/ Found the first non-empty region in the same space.\n@@ -2144,4 +2143,1 @@\n-    HeapWord* const src_region_addr = sd.region_to_addr(src_region_idx);\n-    if (src_region_addr > closure.source()) {\n-      closure.set_source(src_region_addr);\n-    }\n+    closure.set_source(sd.region_to_addr(src_region_idx));\n@@ -2171,3 +2167,0 @@\n-        HeapWord* region_end_addr = region_start_addr + ParallelCompactData::RegionSize;\n-        HeapWord* first_live_word = mark_bitmap()->find_obj_beg(region_start_addr, region_end_addr);\n-        assert(first_live_word < region_end_addr, \"inv\");\n@@ -2177,1 +2170,1 @@\n-        closure.set_source(first_live_word);\n+        closure.set_source(region_start_addr);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-    \/\/ must be either an oop or NULL\n+    \/\/ must be either an oop or null\n@@ -468,5 +468,11 @@\n-    \/\/ We can skip marks on a freshly-allocated object in Eden.\n-    \/\/ Keep this code in sync with new_deferred_store_barrier() in runtime.cpp.\n-    \/\/ That routine informs GC to take appropriate compensating steps,\n-    \/\/ upon a slow-path allocation, so as to make this card-mark\n-    \/\/ elision safe.\n+    \/\/ We use card marks to track old to young references in Generational Shenandoah;\n+    \/\/ see flag ShenandoahCardBarrier above.\n+    \/\/ Objects are always allocated in the young generation and initialized\n+    \/\/ before they are promoted. There's always a safepoint (e.g. at final mark)\n+    \/\/ before an object is promoted from young to old. Promotion entails dirtying of\n+    \/\/ the cards backing promoted objects, so they will be guaranteed to be scanned\n+    \/\/ at the next remembered set scan of the old generation.\n+    \/\/ Thus, we can safely skip card-marking of initializing stores on a\n+    \/\/ freshly-allocated object. If any of the assumptions above change in\n+    \/\/ the future, this code will need to be re-examined; see check in\n+    \/\/ ShenandoahCardBarrier::on_slowpath_allocation_exit().\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -889,1 +889,1 @@\n-  phase->set_ctrl(gc_state_offset, phase->C->root());\n+  phase->set_root_as_ctrl(gc_state_offset);\n@@ -947,1 +947,1 @@\n-  phase->set_ctrl(cset_addr_ptr, phase->C->root());\n+  phase->set_root_as_ctrl(cset_addr_ptr);\n@@ -1151,0 +1151,1 @@\n+    \/\/ Load barrier on the control output of a call\n@@ -1152,1 +1153,1 @@\n-      CallNode* call = ctrl->is_Proj() ? ctrl->in(0)->as_CallJava() : ctrl->as_CallJava();\n+      CallJavaNode* call = ctrl->is_Proj() ? ctrl->in(0)->as_CallJava() : ctrl->as_CallJava();\n@@ -1186,0 +1187,9 @@\n+\n+      \/\/ If this is a runtime call, it doesn't have an exception handling path\n+      if (projs->fallthrough_catchproj == nullptr) {\n+        assert(call->method() == nullptr, \"should be runtime call\");\n+        assert(projs->catchall_catchproj == nullptr, \"runtime call should not have catch all projection\");\n+        continue;\n+      }\n+\n+      \/\/ Otherwise, clone the barrier so there's one for the fallthrough and one for the exception handling path\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  void print_on(outputStream* st) const;\n+  void print_on(outputStream* st) const override;\n@@ -87,4 +87,8 @@\n-  virtual void on_thread_create(Thread* thread);\n-  virtual void on_thread_destroy(Thread* thread);\n-  virtual void on_thread_attach(Thread* thread);\n-  virtual void on_thread_detach(Thread* thread);\n+  \/\/ Support for optimizing compilers to call the barrier set on slow path allocations\n+  \/\/ that did not enter a TLAB. Used for e.g. ReduceInitialCardMarks to take any\n+  \/\/ compensating actions to restore card-marks that might otherwise be incorrectly elided.\n+  void on_slowpath_allocation_exit(JavaThread* thread, oop new_obj) override;\n+  void on_thread_create(Thread* thread) override;\n+  void on_thread_destroy(Thread* thread) override;\n+  void on_thread_attach(Thread* thread) override;\n+  void on_thread_detach(Thread* thread) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/constMethodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1428,0 +1428,14 @@\n+Node* MaxINode::Identity(PhaseGVN* phase) {\n+  const TypeInt* t1 = phase->type(in(1))->is_int();\n+  const TypeInt* t2 = phase->type(in(2))->is_int();\n+\n+  \/\/ Can we determine the maximum statically?\n+  if (t1->_lo >= t2->_hi) {\n+    return in(1);\n+  } else if (t2->_lo >= t1->_hi) {\n+    return in(2);\n+  }\n+\n+  return MaxNode::Identity(phase);\n+}\n+\n@@ -1447,0 +1461,14 @@\n+Node* MinINode::Identity(PhaseGVN* phase) {\n+  const TypeInt* t1 = phase->type(in(1))->is_int();\n+  const TypeInt* t2 = phase->type(in(2))->is_int();\n+\n+  \/\/ Can we determine the minimum statically?\n+  if (t1->_lo >= t2->_hi) {\n+    return in(2);\n+  } else if (t2->_lo >= t1->_hi) {\n+    return in(1);\n+  }\n+\n+  return MaxNode::Identity(phase);\n+}\n+\n@@ -1589,0 +1617,35 @@\n+int MaxNode::opposite_opcode() const {\n+  if (Opcode() == max_opcode()) {\n+    return min_opcode();\n+  } else {\n+    assert(Opcode() == min_opcode(), \"Caller should be either %s or %s, but is %s\", NodeClassNames[max_opcode()], NodeClassNames[min_opcode()], NodeClassNames[Opcode()]);\n+    return max_opcode();\n+  }\n+}\n+\n+\/\/ Given a redundant structure such as Max\/Min(A, Max\/Min(B, C)) where A == B or A == C, return the useful part of the structure.\n+\/\/ 'operation' is the node expected to be the inner 'Max\/Min(B, C)', and 'operand' is the node expected to be the 'A' operand of the outer node.\n+Node* MaxNode::find_identity_operation(Node* operation, Node* operand) {\n+  if (operation->Opcode() == Opcode() || operation->Opcode() == opposite_opcode()) {\n+    Node* n1 = operation->in(1);\n+    Node* n2 = operation->in(2);\n+\n+    \/\/ Given Op(A, Op(B, C)), see if either A == B or A == C is true.\n+    if (n1 == operand || n2 == operand) {\n+      \/\/ If the operations are the same return the inner operation, as Max(A, Max(A, B)) == Max(A, B).\n+      if (operation->Opcode() == Opcode()) {\n+        return operation;\n+      }\n+\n+      \/\/ If the operations are different return the operand 'A', as Max(A, Min(A, B)) == A if the value isn't floating point.\n+      \/\/ With floating point values, the identity doesn't hold if B == NaN.\n+      const Type* type = bottom_type();\n+      if (type->isa_int() || type->isa_long()) {\n+        return operand;\n+      }\n+    }\n+  }\n+\n+  return nullptr;\n+}\n+\n@@ -1594,0 +1657,10 @@\n+  Node* identity_1 = MaxNode::find_identity_operation(in(2), in(1));\n+  if (identity_1 != nullptr) {\n+    return identity_1;\n+  }\n+\n+  Node* identity_2 = MaxNode::find_identity_operation(in(1), in(2));\n+  if (identity_2 != nullptr) {\n+    return identity_2;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -821,3 +821,0 @@\n-  case vmIntrinsics::_VectorShuffleIota:\n-  case vmIntrinsics::_VectorShuffleToVector:\n-  case vmIntrinsics::_VectorWrapShuffleIndexes:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2566,0 +2566,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3454,0 +3454,3 @@\n+    if (failing()) {\n+      return;\n+    }\n@@ -5561,1 +5564,0 @@\n-  assert(failing_internal(), \"should be failing\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -450,0 +450,41 @@\n+template <typename TypeClass, typename Unsigned>\n+Node* unsigned_div_ideal(PhaseGVN* phase, bool can_reshape, Node* div) {\n+  \/\/ Check for dead control input\n+  if (div->in(0) != nullptr && div->remove_dead_region(phase, can_reshape)) {\n+    return div;\n+  }\n+  \/\/ Don't bother trying to transform a dead node\n+  if (div->in(0) != nullptr && div->in(0)->is_top()) {\n+    return nullptr;\n+  }\n+\n+  const Type* t = phase->type(div->in(2));\n+  if (t == Type::TOP) {\n+    return nullptr;\n+  }\n+  const TypeClass* type_divisor = t->cast<TypeClass>();\n+\n+  \/\/ Check for useless control input\n+  \/\/ Check for excluding div-zero case\n+  if (div->in(0) != nullptr && (type_divisor->_hi < 0 || type_divisor->_lo > 0)) {\n+    div->set_req(0, nullptr); \/\/ Yank control input\n+    return div;\n+  }\n+\n+  if (!type_divisor->is_con()) {\n+    return nullptr;\n+  }\n+  Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con()); \/\/ Get divisor\n+\n+  if (divisor == 0 || divisor == 1) {\n+    return nullptr; \/\/ Dividing by zero constant does not idealize\n+  }\n+\n+  if (is_power_of_2(divisor)) {\n+    return make_urshift<TypeClass>(div->in(1), phase->intcon(log2i_graceful(divisor)));\n+  }\n+\n+  return nullptr;\n+}\n+\n+\n@@ -876,3 +917,1 @@\n-  \/\/ Check for dead control input\n-  if (in(0) && remove_dead_region(phase, can_reshape))  return this;\n-  return nullptr;\n+  return unsigned_div_ideal<TypeInt, juint>(phase, can_reshape, this);\n@@ -881,1 +920,0 @@\n-\n@@ -915,3 +953,1 @@\n-  \/\/ Check for dead control input\n-  if (in(0) && remove_dead_region(phase, can_reshape))  return this;\n-  return nullptr;\n+  return unsigned_div_ideal<TypeLong, julong>(phase, can_reshape, this);\n@@ -920,1 +956,0 @@\n-\n@@ -1087,1 +1122,3 @@\n-Node *UModINode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+\n+template <typename TypeClass, typename Unsigned>\n+static Node* unsigned_mod_ideal(PhaseGVN* phase, bool can_reshape, Node* mod) {\n@@ -1089,1 +1126,35 @@\n-  if( in(0) && remove_dead_region(phase, can_reshape) )  return this;\n+  if (mod->in(0) != nullptr && mod->remove_dead_region(phase, can_reshape)) {\n+    return mod;\n+  }\n+  \/\/ Don't bother trying to transform a dead node\n+  if (mod->in(0) != nullptr && mod->in(0)->is_top()) {\n+    return nullptr;\n+  }\n+\n+  \/\/ Get the modulus\n+  const Type* t = phase->type(mod->in(2));\n+  if (t == Type::TOP) {\n+    return nullptr;\n+  }\n+  const TypeClass* type_divisor = t->cast<TypeClass>();\n+\n+  \/\/ Check for useless control input\n+  \/\/ Check for excluding mod-zero case\n+  if (mod->in(0) != nullptr && (type_divisor->_hi < 0 || type_divisor->_lo > 0)) {\n+    mod->set_req(0, nullptr); \/\/ Yank control input\n+    return mod;\n+  }\n+\n+  if (!type_divisor->is_con()) {\n+    return nullptr;\n+  }\n+  Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con());\n+\n+  if (divisor == 0) {\n+    return nullptr;\n+  }\n+\n+  if (is_power_of_2(divisor)) {\n+    return make_and<TypeClass>(mod->in(1), phase->makecon(TypeClass::make(divisor - 1)));\n+  }\n+\n@@ -1093,0 +1164,50 @@\n+template <typename TypeClass, typename Unsigned, typename Signed>\n+static const Type* unsigned_mod_value(PhaseGVN* phase, const Node* mod) {\n+  const Type* t1 = phase->type(mod->in(1));\n+  const Type* t2 = phase->type(mod->in(2));\n+  if (t1 == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  if (t2 == Type::TOP) {\n+    return Type::TOP;\n+  }\n+\n+  \/\/ 0 MOD X is 0\n+  if (t1 == TypeClass::ZERO) {\n+    return TypeClass::ZERO;\n+  }\n+  \/\/ X MOD X is 0\n+  if (mod->in(1) == mod->in(2)) {\n+    return TypeClass::ZERO;\n+  }\n+\n+  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n+  const Type* bot = mod->bottom_type();\n+  if ((t1 == bot) || (t2 == bot) ||\n+      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM)) {\n+    return bot;\n+  }\n+\n+  const TypeClass* type_divisor = t2->cast<TypeClass>();\n+  if (type_divisor->is_con() && type_divisor->get_con() == 1) {\n+    return TypeClass::ZERO;\n+  }\n+\n+  const TypeClass* type_dividend = t1->cast<TypeClass>();\n+  if (type_dividend->is_con() && type_divisor->is_con()) {\n+    Unsigned dividend = static_cast<Unsigned>(type_dividend->get_con());\n+    Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con());\n+    return TypeClass::make(static_cast<Signed>(dividend % divisor));\n+  }\n+\n+  return bot;\n+}\n+\n+Node* UModINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return unsigned_mod_ideal<TypeInt, juint>(phase, can_reshape, this);\n+}\n+\n+const Type* UModINode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeInt, juint, jint>(phase, this);\n+}\n+\n@@ -1306,3 +1427,1 @@\n-  \/\/ Check for dead control input\n-  if( in(0) && remove_dead_region(phase, can_reshape) )  return this;\n-  return nullptr;\n+  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n@@ -1311,0 +1430,3 @@\n+const Type* UModLNode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n+}\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":136,"deletions":14,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,0 +174,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n@@ -185,0 +186,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n","filename":"src\/hotspot\/share\/opto\/divnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,0 @@\n-#ifdef ASSERT\n@@ -258,0 +257,1 @@\n+#ifdef ASSERT\n@@ -270,1 +270,3 @@\n-    assert(false, \"unscheduable graph\");\n+    assert(false, \"unschedulable graph\");\n+#endif\n+    cfg->C->record_failure(\"unschedulable graph\");\n@@ -273,1 +275,0 @@\n-#endif\n@@ -288,1 +289,4 @@\n-      DEBUG_ONLY(assert_dom(deepb, inb, n, cfg));\n+      assert_dom(deepb, inb, n, cfg);\n+      if (cfg->C->failing()) {\n+        return nullptr;\n+      }\n@@ -375,0 +379,3 @@\n+          if (C->failing()) {\n+            return false;\n+          }\n@@ -526,1 +533,4 @@\n-        DEBUG_ONLY(assert_dom(deepb, inb, load, cfg));\n+        assert_dom(deepb, inb, load, cfg);\n+        if (cfg->C->failing()) {\n+          return nullptr;\n+        }\n@@ -718,0 +728,3 @@\n+    if (C->failing()) {\n+      return nullptr;\n+    }\n@@ -1525,0 +1538,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1617,2 +1633,2 @@\n-    assert(false, \"early schedule failed\");\n-    C->record_method_not_compilable(\"early schedule failed\");\n+    assert(C->failure_is_artificial(), \"early schedule failed\");\n+    C->record_method_not_compilable(\"early schedule failed\" DEBUG_ONLY(COMMA true));\n@@ -1663,0 +1679,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1732,0 +1751,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -896,1 +896,1 @@\n-  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem, bool shuffle_to_vector = false);\n+  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/idealKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -522,0 +522,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n@@ -1392,0 +1395,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -722,2 +722,0 @@\n-  case vmIntrinsics::_VectorShuffleIota:\n-    return inline_vector_shuffle_iota();\n@@ -726,4 +724,0 @@\n-  case vmIntrinsics::_VectorShuffleToVector:\n-    return inline_vector_shuffle_to_vector();\n-  case vmIntrinsics::_VectorWrapShuffleIndexes:\n-    return inline_vector_wrap_shuffle_indexes();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -381,4 +381,0 @@\n-  bool inline_vector_shuffle_to_vector();\n-  bool inline_vector_wrap_shuffle_indexes();\n-  bool inline_vector_shuffle_iota();\n-  Node* partially_wrap_indexes(Node* index_vec, int num_elem, BasicType type_bt);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -988,0 +988,4 @@\n+  void set_root_as_ctrl(Node* n) {\n+    assert(!has_node(n) || has_ctrl(n), \"\");\n+    _loop_or_ctrl.map(n->_idx, (Node*)((intptr_t)C->root() + 1));\n+  }\n@@ -1424,1 +1428,1 @@\n-  void do_range_check(IdealLoopTree *loop, Node_List &old_new);\n+  void do_range_check(IdealLoopTree* loop);\n@@ -1798,0 +1802,10 @@\n+\n+  ConINode* intcon(jint i);\n+\n+  ConLNode* longcon(jlong i);\n+\n+  ConNode* makecon(const Type* t);\n+\n+  ConNode* integercon(jlong l, BasicType bt);\n+\n+  ConNode* zerocon(BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-      x = ((PhaseGVN&)_igvn).makecon(t);\n+      x = makecon(t);\n@@ -199,2 +199,1 @@\n-      \/\/ Constant's control is always root.\n-      set_ctrl(x, C->root());\n+      assert(get_ctrl(x) == C->root(), \"constant control is not root\");\n@@ -289,0 +288,2 @@\n+    case Op_UDivI:\n+    case Op_UModI:\n@@ -293,0 +294,2 @@\n+    case Op_UDivL:\n+    case Op_UModL:\n@@ -341,2 +344,1 @@\n-  Node *con = _igvn.makecon(pop == Op_IfTrue ? TypeInt::ONE : TypeInt::ZERO);\n-  set_ctrl(con, C->root()); \/\/ Constant gets a new use\n+  Node* con = makecon(pop == Op_IfTrue ? TypeInt::ONE : TypeInt::ZERO);\n@@ -482,2 +484,1 @@\n-      Node* zero = _igvn.integercon(0, bt);\n-      set_ctrl(zero, C->root());\n+      Node* zero = integercon(0, bt);\n@@ -1718,0 +1719,3 @@\n+  if (C->failing()) {\n+    return;\n+  }\n@@ -1910,1 +1914,5 @@\n-        assert(!n->is_Store() && !n->is_LoadStore(), \"no node with a side effect\");\n+        if (n->is_Store() || n->is_LoadStore()) {\n+            assert(false, \"no node with a side effect\");\n+            C->record_failure(\"no node with a side effect\");\n+            return;\n+        }\n@@ -2158,0 +2166,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n@@ -3088,2 +3099,1 @@\n-  Node *con = _igvn.intcon(proj_con);\n-  set_ctrl(con, C->root());\n+  Node* con = intcon(proj_con);\n@@ -3398,2 +3408,1 @@\n-    rhs_cmpi = _igvn.makecon(TypeInt::ZERO); \/\/ For i < 0\n-    set_ctrl(rhs_cmpi, C->root());\n+    rhs_cmpi = makecon(TypeInt::ZERO); \/\/ For i < 0\n@@ -3428,2 +3437,1 @@\n-  Node *con = _igvn.makecon(lp_proj->is_IfTrue() ? TypeInt::ONE : TypeInt::ZERO);\n-  set_ctrl(con, C->root());\n+  Node* con = makecon(lp_proj->is_IfTrue() ? TypeInt::ONE : TypeInt::ZERO);\n@@ -4811,1 +4819,1 @@\n-    set_ctrl(identity_scalar, C->root());\n+    set_root_as_ctrl(identity_scalar);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1797,1 +1797,0 @@\n-#ifdef ASSERT\n@@ -1804,0 +1803,1 @@\n+#ifdef ASSERT\n@@ -1806,0 +1806,1 @@\n+#endif\n@@ -1807,0 +1808,1 @@\n+    C->record_failure(\"bad AD file\");\n@@ -1808,1 +1810,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -346,0 +346,2 @@\n+  static bool vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1143,1 +1143,0 @@\n-protected:\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1422,1 +1422,1 @@\n-    const_req = constant_table().size() + add_size;\n+    const_req = constant_table().alignment() + constant_table().size() + add_size;\n@@ -1462,0 +1462,1 @@\n+  cb->set_const_section_alignment(constant_table().alignment());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1784,1 +1784,3 @@\n-    case Op_ModI: {\n+    case Op_ModI:\n+    case Op_UDivI:\n+    case Op_UModI: {\n@@ -1794,1 +1796,3 @@\n-    case Op_ModL: {\n+    case Op_ModL:\n+    case Op_UDivL:\n+    case Op_UModL: {\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,0 +343,3 @@\n+  template <typename TypeClass>\n+  const TypeClass* cast() const;\n+\n@@ -2320,0 +2323,9 @@\n+template <>\n+inline const TypeInt* Type::cast<TypeInt>() const {\n+  return is_int();\n+}\n+\n+template <>\n+inline const TypeLong* Type::cast<TypeLong>() const {\n+  return is_long();\n+}\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-static bool is_vector_shuffle(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-}\n-\n-\n@@ -463,2 +458,0 @@\n-    } else if (is_vector_shuffle(from_kls)) {\n-      bt = T_BYTE;\n@@ -509,3 +502,0 @@\n-    } else if (is_vector_shuffle(from_kls) && !vec_unbox->is_shuffle_to_vector()) {\n-      assert(vec_unbox->bottom_type()->is_vect()->element_basic_type() == masktype, \"expect shuffle type consistency\");\n-      vec_val_load = gvn.transform(new VectorLoadShuffleNode(vec_val_load, TypeVect::make(masktype, num_elem)));\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3466,1 +3466,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, JVM_IsStaticallyLinked(void))\n+JVM_LEAF(jboolean, JVM_IsStaticallyLinked(void))\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-#include \"nmt\/memTracker.hpp\"\n@@ -728,1 +727,0 @@\n-  MemTracker::record_virtual_memory_tag((address)(uintptr_t)addr, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -526,1 +526,0 @@\n-  { \"DontYieldALot\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n@@ -529,0 +528,1 @@\n+  { \"UseOprofile\",                  JDK_Version::jdk(25), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n@@ -538,14 +538,1 @@\n-  { \"UseNotificationThread\",        JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"PreserveAllAnnotations\",       JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseEmptySlotsInSupers\",        JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"OldSize\",                      JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-#if defined(X86)\n-  { \"UseRTMLocking\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseRTMDeopt\",                  JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"RTMRetryCount\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-#endif \/\/ X86\n-\n-\n-  { \"BaseFootPrintEstimate\",           JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"HeapFirstMaximumCompactionCount\", JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseVtableBasedCHA\",               JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/copy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Serializable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n@@ -233,1 +235,1 @@\n-     * Default is {@code FIX_SHORT_JUMPS} to automatically rewrite jump\n+     * Default is {@link #FIX_SHORT_JUMPS} to automatically rewrite jump\n@@ -235,0 +237,6 @@\n+     * <p>\n+     * Due to physical restrictions, some types of instructions cannot encode\n+     * certain jump targets with bci offsets less than -32768 or greater than\n+     * 32767, as they use a {@code s2} to encode such an offset.  (The maximum\n+     * length of the {@code code} array is 65535.)  These types of instructions\n+     * are called \"short jumps\".\n@@ -236,0 +244,2 @@\n+     * @see BranchInstruction\n+     * @see DiscontinuedInstruction.JsrInstruction\n@@ -240,1 +250,6 @@\n-        \/** Automatically convert short jumps to long when necessary *\/\n+        \/**\n+         * Automatically convert short jumps to long when necessary.\n+         * <p>\n+         * For an invalid instruction model, a {@link CodeBuilder} may generate\n+         * another or a few other instructions to accomplish the same effect.\n+         *\/\n@@ -243,1 +258,6 @@\n-        \/** Fail if short jump overflows *\/\n+        \/**\n+         * Fail with an {@link IllegalArgumentException} if short jump overflows.\n+         * <p>\n+         * This is useful to ensure the physical accuracy of a generated {@code\n+         * class} file.\n+         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -319,2 +319,1 @@\n-        java.management,\n-        java.sql.rowset;\n+        java.management;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,4 +123,0 @@\n-# Fails with +UseCompactObjectHeaders on aarch64\n-runtime\/cds\/appcds\/SharedBaseAddress.java 8340212 linux-aarch64,macosx-aarch64\n-runtime\/cds\/SharedBaseAddress.java 8340212 linux-aarch64,macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,3 +41,2 @@\n-hotspot_compiler_xcomp = \\\n-  :hotspot_compiler \\\n-  -:tier1_compiler_not_xcomp\n+hotspot_compiler_resourcehogs = \\\n+  resourcehogs\/compiler\n@@ -162,2 +161,1 @@\n-  :tier1_compiler_3 \\\n-  :tier1_compiler_not_xcomp\n+  :tier1_compiler_3\n@@ -176,1 +174,0 @@\n-  resourcehogs\/compiler \\\n@@ -221,0 +218,1 @@\n+  compiler\/profiling \\\n@@ -266,12 +264,1 @@\n-  applications\/ctw\/modules \\\n-  compiler\/c2\/ \\\n-  compiler\/ciReplay\/ \\\n-  compiler\/compilercontrol\/ \\\n-  compiler\/debug\/ \\\n-  compiler\/oracle\/ \\\n-  compiler\/print\/ \\\n-  compiler\/relocations\/ \\\n-  compiler\/tiered\/ \\\n-  compiler\/vectorapi\/ \\\n-  compiler\/whitebox\/ \\\n-  :hotspot_slow_compiler \\\n+  :hotspot_compiler \\\n@@ -281,2 +268,0 @@\n-tier1_compiler_not_xcomp = \\\n-  compiler\/profiling\n@@ -288,1 +273,0 @@\n-  :tier1_compiler_not_xcomp \\\n@@ -308,0 +292,3 @@\n+tier2_ctw = \\\n+  :ctw_1\n+\n@@ -664,0 +651,1 @@\n+  :tier2_ctw \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -575,0 +575,5 @@\n+    public static final String UDIV = PREFIX + \"UDIV\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(UDIV, \"UDiv(I|L|F|D)\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-   -:tier3\n+   -:tier3 \\\n+   :jdk_foreign_stress\n@@ -396,0 +397,4 @@\n+jdk_foreign_stress = \\\n+    java\/foreign\/TestMatrix.java \\\n+    java\/foreign\/TestUpcallStress.java\n+\n@@ -631,1 +636,1 @@\n-    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java\n+    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java \n","filename":"test\/jdk\/TEST.groups","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Class\/getSimpleName\/GetSimpleNameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/AnnotationsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n- * @enablePreview\n- * @comment The test uses asmlib\/Instrumentor.java which relies on ClassFile API PreviewFeature.\n@@ -82,1 +80,0 @@\n-                \"--enable-preview\", \/\/ due to usage of ClassFile API PreviewFeature in the agent\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformApp.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/DefineClassTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/classData\/ClassDataTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleBaseByteArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @comment Change enablePreview with the flag in setup's compileSources\n@@ -83,2 +81,1 @@\n-        compileSources(SRC_DIR, CLASSES_DIR, \"--enable-preview\",\n-                       \"--release\", Integer.toString(Runtime.version().feature()));\n+        compileSources(SRC_DIR, CLASSES_DIR);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/StaticInvocableTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/SpecialStatic.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ConfigurationTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleFinderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleNamesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/MultiReleaseJarTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/IsRecordTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/BadProvidersTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/modules\/incubator\/ServiceBinding.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestProcessHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkNegativeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- *  @enablePreview\n- *  @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n@@ -570,1 +568,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows no-param main\n+    @Test\n@@ -578,1 +576,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows non-public main\n+    @Test\n@@ -586,1 +584,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows non-static main\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/UndefinedAccessFlagTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}