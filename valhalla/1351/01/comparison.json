{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/actions\/config\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/actions\/do-build\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/actions\/get-bootjdk\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/actions\/get-bundles\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/actions\/get-msys2\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/scripts\/gen-build-failure-report.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/scripts\/gen-test-summary.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":".github\/workflows\/build-cross-compile.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-          - 'hs\/tier1 compiler not-xcomp'\n@@ -104,4 +103,0 @@\n-          - test-name: 'hs\/tier1 compiler not-xcomp'\n-            test-suite: 'test\/hotspot\/jtreg\/:tier1_compiler_not_xcomp'\n-            debug-suffix: -debug\n-\n","filename":".github\/workflows\/test.yml","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -866,1 +866,1 @@\n-<p>In order to build the full docs (see the\n+<p>In order to build man pages and the full docs (see the\n@@ -868,4 +868,4 @@\n-href=\"https:\/\/www.graphviz.org\">Graphviz<\/a> and <a\n-href=\"https:\/\/pandoc.org\">Pandoc<\/a> are required. Any recent versions\n-should work. For reference, and subject to change, Oracle builds use\n-Graphviz 9.0.0 and Pandoc 2.19.2.<\/p>\n+href=\"https:\/\/pandoc.org\">Pandoc<\/a> is required. For full docs also <a\n+href=\"https:\/\/www.graphviz.org\">Graphviz<\/a> is required. Any recent\n+versions should work. For reference, and subject to change, Oracle\n+builds use Graphviz 9.0.0 and Pandoc 2.19.2.<\/p>\n","filename":"doc\/building.html","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -683,3 +683,3 @@\n-In order to build the full docs (see the `--enable-full-docs`\n-configure option) [Graphviz](https:\/\/www.graphviz.org) and\n-[Pandoc](https:\/\/pandoc.org) are required. Any recent versions should\n+In order to build man pages and the full docs (see the `--enable-full-docs`\n+configure option) [Pandoc](https:\/\/pandoc.org) is required. For full docs also\n+[Graphviz](https:\/\/www.graphviz.org) is required. Any recent versions should\n","filename":"doc\/building.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/CompileJavaModules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/CompileModuleTools.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/CopyImportModules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/CopyInterimTZDB.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/Global.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+include DebugInfoUtils.gmk\n","filename":"make\/Images.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/Init.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/JrtfsJar.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/MacBundles.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/MainSupport.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/RunTestsPrebuilt.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+include DebugInfoUtils.gmk\n@@ -100,1 +101,0 @@\n-  STANDARD_LIBS += -lstdc++\n@@ -103,1 +103,0 @@\n-  STANDARD_LIBS := -l:libstdc++.a\n@@ -117,1 +116,2 @@\n-    LIBS := $(STATIC_LIBS) $(EXTERNAL_LIBS) $(STANDARD_LIBS), \\\n+    LIBS := $(STATIC_LIBS) $(EXTERNAL_LIBS), \\\n+    LINK_TYPE := C++, \\\n","filename":"make\/StaticLibs.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/StaticLibsImage.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/TestImage.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ToolsHotspot.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ToolsJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/Makefile.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/bootcycle-spec.gmk.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-# Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/build-aux\/pkg.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n@@ -314,0 +314,7 @@\n+\n+    if test \"x$TOOLCHAIN_TYPE\" = xclang && test \"x$OPENJDK_TARGET_OS\" = xaix; then\n+      C_O_FLAG_HIGHEST_JVM=\"${C_O_FLAG_HIGHEST_JVM} -finline-functions\"\n+      C_O_FLAG_HIGHEST=\"${C_O_FLAG_HIGHEST} -finline-functions\"\n+      C_O_FLAG_HI=\"${C_O_FLAG_HI} -finline-functions\"\n+    fi\n+\n@@ -334,15 +341,0 @@\n-  elif test \"x$TOOLCHAIN_TYPE\" = xclang; then\n-    if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n-      C_O_FLAG_HIGHEST_JVM=\"-O3 -finline-functions\"\n-      C_O_FLAG_HIGHEST=\"-O3 -finline-functions\"\n-      C_O_FLAG_HI=\"-O3 -finline-functions\"\n-    else\n-      C_O_FLAG_HIGHEST_JVM=\"-O3\"\n-      C_O_FLAG_HIGHEST=\"-O3\"\n-      C_O_FLAG_HI=\"-O3\"\n-    fi\n-    C_O_FLAG_NORM=\"-O2\"\n-    C_O_FLAG_DEBUG_JVM=\"-O0\"\n-    C_O_FLAG_SIZE=\"-Os\"\n-    C_O_FLAG_DEBUG=\"-O0\"\n-    C_O_FLAG_NONE=\"-O0\"\n@@ -651,17 +643,0 @@\n-\n-  # Extra flags needed when building optional static versions of certain\n-  # JDK libraries.\n-  STATIC_LIBS_CFLAGS=\"-DSTATIC_BUILD=1\"\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n-    STATIC_LIBS_CFLAGS=\"$STATIC_LIBS_CFLAGS -ffunction-sections -fdata-sections \\\n-      -DJNIEXPORT='__attribute__((visibility(\\\"default\\\")))'\"\n-  else\n-    STATIC_LIBS_CFLAGS=\"$STATIC_LIBS_CFLAGS -DJNIEXPORT=\"\n-  fi\n-  if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n-    # Disable relax-relocation to enable compatibility with older linkers\n-    RELAX_RELOCATIONS_FLAG=\"-Xassembler -mrelax-relocations=no\"\n-    FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${RELAX_RELOCATIONS_FLAG}],\n-        IF_TRUE: [STATIC_LIBS_CFLAGS=\"$STATIC_LIBS_CFLAGS ${RELAX_RELOCATIONS_FLAG}\"])\n-  fi\n-  AC_SUBST(STATIC_LIBS_CFLAGS)\n","filename":"make\/autoconf\/flags-cflags.m4","additions":8,"deletions":33,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/hotspot.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    AC_MSG_RESULT([no, cannot generate full docs])\n+    AC_MSG_RESULT([no, cannot generate full docs or man pages])\n@@ -132,1 +132,1 @@\n-    AC_MSG_RESULT([no, cannot generate full docs])\n+    AC_MSG_RESULT([no, cannot generate full docs or man pages])\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/jdk-version.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/lib-alsa.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/lib-bundled.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/lib-freetype.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/lib-x11.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -432,2 +432,0 @@\n-STATIC_LIBS_CFLAGS := @STATIC_LIBS_CFLAGS@\n-\n","filename":"make\/autoconf\/spec.gmk.template","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/autoconf\/util_paths.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/CopyFiles.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+ifeq ($(_MAKEBASE_GMK), )\n+  $(error You must include MakeBase.gmk prior to including DebugInfoUtils.gmk)\n+endif\n+\n+################################################################################\n+#\n+# Common debuginfo utility functions\n+#\n+################################################################################\n+\n+################################################################################\n+# Find native debuginfo files in a directory\n+#\n+# Param 1 - dir to find debuginfo files in\n+FindDebuginfoFiles = \\\n+    $(wildcard $(addprefix $1\/*, $(DEBUGINFO_SUFFIXES)) \\\n+        $(addprefix $1\/*\/*, $(DEBUGINFO_SUFFIXES)) \\\n+        $(addprefix $1\/*\/*\/*, $(DEBUGINFO_SUFFIXES)))\n+\n+# Pick the correct debug info files to copy, either zipped or not.\n+ifeq ($(ZIP_EXTERNAL_DEBUG_SYMBOLS), true)\n+  DEBUGINFO_SUFFIXES += .diz\n+else\n+  DEBUGINFO_SUFFIXES := .debuginfo .pdb .map\n+  # On Macosx, if debug symbols have not been zipped, find all files inside *.dSYM\n+  # dirs.\n+  ifeq ($(call isTargetOs, macosx), true)\n+    $(call FillFindCache, \\\n+        $(SUPPORT_OUTPUTDIR)\/modules_libs $(SUPPORT_OUTPUTDIR)\/modules_cmds)\n+    FindDebuginfoFiles = \\\n+        $(if $(wildcard $1), $(call containing, .dSYM\/, $(call FindFiles, $1)))\n+  endif\n+endif\n","filename":"make\/common\/DebugInfoUtils.gmk","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/Execute.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,23 +310,0 @@\n-\n-# Find native debuginfo files in a directory\n-#\n-# Param 1 - dir to find debuginfo files in\n-FindDebuginfoFiles = \\\n-    $(wildcard $(addprefix $1\/*, $(DEBUGINFO_SUFFIXES)) \\\n-        $(addprefix $1\/*\/*, $(DEBUGINFO_SUFFIXES)) \\\n-        $(addprefix $1\/*\/*\/*, $(DEBUGINFO_SUFFIXES)))\n-\n-# Pick the correct debug info files to copy, either zipped or not.\n-ifeq ($(ZIP_EXTERNAL_DEBUG_SYMBOLS), true)\n-  DEBUGINFO_SUFFIXES += .diz\n-else\n-  DEBUGINFO_SUFFIXES := .debuginfo .pdb .map\n-  # On Macosx, if debug symbols have not been zipped, find all files inside *.dSYM\n-  # dirs.\n-  ifeq ($(call isTargetOs, macosx), true)\n-    $(call FillFindCache, \\\n-        $(SUPPORT_OUTPUTDIR)\/modules_libs $(SUPPORT_OUTPUTDIR)\/modules_cmds)\n-    FindDebuginfoFiles = \\\n-        $(if $(wildcard $1), $(call containing, .dSYM\/, $(call FindFiles, $1)))\n-  endif\n-endif\n","filename":"make\/common\/FileUtils.gmk","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/MakeIO.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/Modules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/ProcessMarkdown.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/TextFileProcessing.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/ZipArchive.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/common\/modules\/CopyCommon.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+      LINK_TYPE := $$($1_LINK_TYPE), \\\n@@ -195,3 +196,1 @@\n-    ifeq ($(ENABLE_PANDOC), false)\n-      $(info Warning: pandoc not found. Not generating man pages)\n-    else\n+    ifeq ($(ENABLE_PANDOC), true)\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    $1_EXTRA_CFLAGS += $$(STATIC_LIBS_CFLAGS)\n+    $1_EXTRA_CFLAGS += -DSTATIC_BUILD=1\n","filename":"make\/common\/native\/Flags.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1204,3 +1204,5 @@\n-            organization: common.organization,\n-            revision: \"3.0-17-jdk-asm+1.0\",\n-            ext: \"zip\",\n+            server: \"jpg\",\n+            product: \"jcov\",\n+            version: \"3.0\",\n+            build_number: \"1\",\n+            file: \"bundles\/jcov-3.0+1.zip\",\n","filename":"make\/conf\/jib-profiles.js","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/devkit\/Makefile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/hotspot\/CopyToExplodedJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/hotspot\/gensrc\/GensrcJvmti.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ide\/eclipse\/CreateWorkspace.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ide\/idea\/jdk\/idea.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ide\/visualstudio\/hotspot\/src\/classes\/build\/tools\/projectcreator\/BuildConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ide\/visualstudio\/hotspot\/src\/classes\/build\/tools\/projectcreator\/ProjectCreator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/ide\/vscode\/hotspot\/CreateVSCodeProject.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  LINKER_FLAGS_FILE := $(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/jvm-ldflags.txt\n+  LINKER_FLAGS_FILE := $(MAKESUPPORT_OUTPUTDIR)\/compile-commands\/LIBRARY_hotspot_variant-server_libjvm_libjvm-ldflags.txt\n@@ -63,1 +63,1 @@\n-  XCODE_PROJ_VARDEPS := $(WORKSPACE_ROOT) $(IDE_OUTPUTDIR) \\\n+  XCODE_PROJ_VARDEPS := $(TOPDIR) $(IDE_OUTPUTDIR) \\\n@@ -73,1 +73,1 @@\n-      COMMAND := $(PROJECT_CREATOR_TOOL) $(WORKSPACE_ROOT) $(IDE_OUTPUTDIR) \\\n+      COMMAND := $(PROJECT_CREATOR_TOOL) $(TOPDIR) $(IDE_OUTPUTDIR) \\\n","filename":"make\/ide\/xcode\/hotspot\/CreateXcodeProject.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/langtools\/tools\/javacserver\/server\/CompilerThreadPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/langtools\/tools\/javacserver\/server\/Server.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/java.base\/gensrc\/GensrcBuffer.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/java.base\/gensrc\/GensrcExceptions.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/java.desktop\/gensrc\/GensrcIcons.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.charsets\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.compiler\/Gendata.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.javadoc\/Gendata.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.javadoc\/Gensrc.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.jcmd\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.jconsole\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.jdeps\/Gensrc.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.localedata\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/modules\/jdk.sctp\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/BuildJtregTestThreadFactory.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/JtregNativeLibTest.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/demo\/share\/java2d\/J2DBench\/Makefile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/demo\/share\/java2d\/J2DBench\/build.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,0 +323,4 @@\n+  bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+    return false;\n+  }\n+\n@@ -6153,35 +6157,0 @@\n-\/\/ ------------------------------ Vector shuffle -------------------------------\n-\n-instruct loadshuffle(vReg dst, vReg src) %{\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"loadshuffle $dst, $src\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (bt == T_BYTE) {\n-      if ($dst$$FloatRegister != $src$$FloatRegister) {\n-        if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-          __ orr($dst$$FloatRegister, length_in_bytes == 16 ? __ T16B : __ T8B,\n-                 $src$$FloatRegister, $src$$FloatRegister);\n-        } else {\n-          assert(UseSVE > 0, \"must be sve\");\n-          __ sve_orr($dst$$FloatRegister, $src$$FloatRegister, $src$$FloatRegister);\n-        }\n-      }\n-    } else {\n-      if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-        \/\/ 4S\/8S, 4I, 4F\n-        __ uxtl($dst$$FloatRegister, __ T8H, $src$$FloatRegister, __ T8B);\n-        if (type2aelembytes(bt) == 4) {\n-          __ uxtl($dst$$FloatRegister, __ T4S, $dst$$FloatRegister, __ T4H);\n-        }\n-      } else {\n-        assert(UseSVE > 0, \"must be sve\");\n-        __ sve_vector_extend($dst$$FloatRegister,  __ elemType_to_regVariant(bt),\n-                             $src$$FloatRegister, __ B);\n-      }\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -6210,0 +6179,1 @@\n+\/\/ Maybe move the shuffle preparation to VectorLoadShuffle\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -313,0 +313,4 @@\n+  bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+    return false;\n+  }\n+\n@@ -4400,35 +4404,0 @@\n-\/\/ ------------------------------ Vector shuffle -------------------------------\n-\n-instruct loadshuffle(vReg dst, vReg src) %{\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"loadshuffle $dst, $src\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (bt == T_BYTE) {\n-      if ($dst$$FloatRegister != $src$$FloatRegister) {\n-        if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-          __ orr($dst$$FloatRegister, length_in_bytes == 16 ? __ T16B : __ T8B,\n-                 $src$$FloatRegister, $src$$FloatRegister);\n-        } else {\n-          assert(UseSVE > 0, \"must be sve\");\n-          __ sve_orr($dst$$FloatRegister, $src$$FloatRegister, $src$$FloatRegister);\n-        }\n-      }\n-    } else {\n-      if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-        \/\/ 4S\/8S, 4I, 4F\n-        __ uxtl($dst$$FloatRegister, __ T8H, $src$$FloatRegister, __ T8B);\n-        if (type2aelembytes(bt) == 4) {\n-          __ uxtl($dst$$FloatRegister, __ T4S, $dst$$FloatRegister, __ T4H);\n-        }\n-      } else {\n-        assert(UseSVE > 0, \"must be sve\");\n-        __ sve_vector_extend($dst$$FloatRegister,  __ elemType_to_regVariant(bt),\n-                             $src$$FloatRegister, __ B);\n-      }\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -4457,0 +4426,1 @@\n+\/\/ Maybe move the shuffle preparation to VectorLoadShuffle\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_globals_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"asm\/assembler.hpp\"\n+#include \"asm\/macroAssembler.hpp\"\n@@ -31,0 +31,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -82,0 +84,1 @@\n+\n@@ -120,0 +123,9 @@\n+\n+bool CompressedKlassPointers::check_klass_decode_mode(address base, int shift, const size_t range) {\n+  return MacroAssembler::check_klass_decode_mode(base, shift, range);\n+}\n+\n+bool CompressedKlassPointers::set_klass_decode_mode() {\n+  const size_t range = klass_range_end() - base();\n+  return MacroAssembler::set_klass_decode_mode(_base, _shift, range);\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5467,1 +5467,0 @@\n-  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n@@ -5469,0 +5468,3 @@\n+  assert(_klass_decode_mode != KlassDecodeNone, \"should be initialized\");\n+  return _klass_decode_mode;\n+}\n@@ -5470,3 +5472,5 @@\n-  if (_klass_decode_mode != KlassDecodeNone) {\n-    return _klass_decode_mode;\n-  }\n+MacroAssembler::KlassDecodeMode  MacroAssembler::klass_decode_mode(address base, int shift, const size_t range) {\n+  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n+\n+  \/\/ KlassDecodeMode shouldn't be set already.\n+  assert(_klass_decode_mode == KlassDecodeNone, \"set once\");\n@@ -5474,2 +5478,2 @@\n-  if (CompressedKlassPointers::base() == nullptr) {\n-    return (_klass_decode_mode = KlassDecodeZero);\n+  if (base == nullptr) {\n+    return KlassDecodeZero;\n@@ -5479,2 +5483,1 @@\n-        \/*is32*\/false, (uint64_t)CompressedKlassPointers::base())) {\n-    const size_t range = CompressedKlassPointers::klass_range_end() - CompressedKlassPointers::base();\n+        \/*is32*\/false, (uint64_t)base)) {\n@@ -5482,2 +5485,2 @@\n-    if (((uint64_t)CompressedKlassPointers::base() & range_mask) == 0) {\n-      return (_klass_decode_mode = KlassDecodeXor);\n+    if (((uint64_t)base & range_mask) == 0) {\n+      return KlassDecodeXor;\n@@ -5488,3 +5491,13 @@\n-    (uint64_t)CompressedKlassPointers::base() >> CompressedKlassPointers::shift();\n-  guarantee((shifted_base & 0xffff0000ffffffff) == 0,\n-            \"compressed class base bad alignment\");\n+    (uint64_t)base >> shift;\n+  if ((shifted_base & 0xffff0000ffffffff) == 0) {\n+    return KlassDecodeMovk;\n+  }\n+\n+  \/\/ No valid encoding.\n+  return KlassDecodeNone;\n+}\n+\n+\/\/ Check if one of the above decoding modes will work for given base, shift and range.\n+bool MacroAssembler::check_klass_decode_mode(address base, int shift, const size_t range) {\n+  return klass_decode_mode(base, shift, range) != KlassDecodeNone;\n+}\n@@ -5492,1 +5505,3 @@\n-  return (_klass_decode_mode = KlassDecodeMovk);\n+bool MacroAssembler::set_klass_decode_mode(address base, int shift, const size_t range) {\n+  _klass_decode_mode = klass_decode_mode(base, shift, range);\n+  return _klass_decode_mode != KlassDecodeNone;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-  KlassDecodeMode klass_decode_mode();\n+  \/\/ Calculate decoding mode based on given parameters, used for checking then ultimately setting.\n+  static KlassDecodeMode klass_decode_mode(address base, int shift, const size_t range);\n@@ -107,0 +108,10 @@\n+  \/\/ Returns above setting with asserts\n+  static KlassDecodeMode klass_decode_mode();\n+\n+ public:\n+  \/\/ Checks the decode mode and returns false if not compatible with preferred decoding mode.\n+  static bool check_klass_decode_mode(address base, int shift, const size_t range);\n+\n+  \/\/ Sets the decode mode and returns false if cannot be set.\n+  static bool set_klass_decode_mode(address base, int shift, const size_t range);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/runtime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1757,1 +1757,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1946,2 +1945,0 @@\n-  VMRegPair tmp_vmreg;\n-  tmp_vmreg.set2(r19->as_VMReg());\n@@ -1954,1 +1951,0 @@\n-  int temploc = -1;\n@@ -2174,1 +2170,0 @@\n-  Label after_transition;\n@@ -2207,1 +2202,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/smallRegisterMap_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1002,0 +1002,4 @@\n+bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/compiledIC_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/continuationFreezeThaw_arm.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/globalDefinitions_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/register_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/smallRegisterMap_arm.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/vtableStubs_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,8 +42,0 @@\n-  Address(Register b, Register i, address d = 0)\n-    : _base(b), _index(i), _disp((intptr_t)d) {\n-    assert(i == noreg || d == 0, \"can't have both\");\n-  }\n-\n-  Address(Register b, address d = 0)\n-    : _base(b), _index(noreg), _disp((intptr_t)d) {}\n-\n@@ -53,1 +45,1 @@\n-  Address(Register b, intptr_t d)\n+  Address(Register b, intptr_t d = 0)\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/c2_globals_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/c2_init_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/compiledIC_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-  assert(_pc == *pc_addr || pc == *pc_addr || 0 == *pc_addr,\n+  assert(_pc == *pc_addr || pc == *pc_addr || nullptr == *pc_addr,\n@@ -321,1 +321,1 @@\n-  if (fp() == 0 || (intptr_t(fp()) & (wordSize-1)) != 0) {\n+  if (fp() == nullptr || (intptr_t(fp()) & (wordSize-1)) != 0) {\n@@ -324,1 +324,1 @@\n-  if (sp() == 0 || (intptr_t(sp()) & (wordSize-1)) != 0) {\n+  if (sp() == nullptr || (intptr_t(sp()) & (wordSize-1)) != 0) {\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -627,1 +627,1 @@\n-  \/\/ No need for post barrier if storing NULL\n+  \/\/ No need for post barrier if storing null\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/globalDefinitions_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3299,1 +3299,1 @@\n-  if (CompressedKlassPointers::base() != 0) {\n+  if (CompressedKlassPointers::base() != nullptr) {\n@@ -3359,1 +3359,1 @@\n-      (CompressedKlassPointers::base() == 0 && src != dst)) {  \/\/ Move required.\n+      (CompressedKlassPointers::base() == nullptr && src != dst)) {  \/\/ Move required.\n@@ -3363,1 +3363,1 @@\n-  if (CompressedKlassPointers::base() != 0) {\n+  if (CompressedKlassPointers::base() != nullptr) {\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  if (addr == 0 || ((intptr_t)addr & 3) != 0) {\n+  if (addr == nullptr || ((intptr_t)addr & 3) != 0) {\n@@ -118,1 +118,1 @@\n-    if (trampoline_stub_addr == 0)\n+    if (trampoline_stub_addr == nullptr)\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2156,0 +2156,4 @@\n+bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+  return false;\n+}\n+\n@@ -3341,1 +3345,1 @@\n-      if (entry_point == 0) entry_point = __ pc();\n+      if (entry_point == nullptr) entry_point = __ pc();\n@@ -3380,1 +3384,1 @@\n-      const address entry_point = !($meth$$method) ? 0 : (address)$meth$$method;\n+      const address entry_point = !($meth$$method) ? nullptr : (address)$meth$$method;\n@@ -3613,1 +3617,1 @@\n-    mtctr->add_req(0, loadConLNodes_Entry._last);\n+    mtctr->add_req(nullptr, loadConLNodes_Entry._last);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-  return 0;\n","filename":"src\/hotspot\/cpu\/ppc\/relocInfo_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2106,1 +2106,0 @@\n-  BasicType* in_elem_bt = nullptr;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/smallRegisterMap_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-    address start = 0;\n+    address start = nullptr;\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2618,1 +2618,1 @@\n-  assert(branch_table[vtos] == 0, \"can't compute twice\");\n+  assert(branch_table[vtos] == nullptr, \"can't compute twice\");\n@@ -2626,1 +2626,1 @@\n-  assert(branch_table[dtos] == 0, \"can't compute twice\");\n+  assert(branch_table[dtos] == nullptr, \"can't compute twice\");\n@@ -2647,1 +2647,1 @@\n-  assert(branch_table[ftos] == 0, \"can't compute twice\");\n+  assert(branch_table[ftos] == nullptr, \"can't compute twice\");\n@@ -2668,1 +2668,1 @@\n-  assert(branch_table[itos] == 0, \"can't compute twice\");\n+  assert(branch_table[itos] == nullptr, \"can't compute twice\");\n@@ -2681,1 +2681,1 @@\n-  assert(branch_table[ltos] == 0, \"can't compute twice\");\n+  assert(branch_table[ltos] == nullptr, \"can't compute twice\");\n@@ -2694,1 +2694,1 @@\n-  assert(branch_table[btos] == 0, \"can't compute twice\");\n+  assert(branch_table[btos] == nullptr, \"can't compute twice\");\n@@ -2708,1 +2708,1 @@\n-  assert(branch_table[ztos] == 0, \"can't compute twice\");\n+  assert(branch_table[ztos] == nullptr, \"can't compute twice\");\n@@ -2722,1 +2722,1 @@\n-  assert(branch_table[ctos] == 0, \"can't compute twice\");\n+  assert(branch_table[ctos] == nullptr, \"can't compute twice\");\n@@ -2735,1 +2735,1 @@\n-  assert(branch_table[stos] == 0, \"can't compute twice\");\n+  assert(branch_table[stos] == nullptr, \"can't compute twice\");\n@@ -2748,1 +2748,1 @@\n-  assert(branch_table[atos] == 0, \"can't compute twice\");\n+  assert(branch_table[atos] == nullptr, \"can't compute twice\");\n@@ -2935,1 +2935,1 @@\n-  assert(branch_table[vtos] == 0, \"can't compute twice\");\n+  assert(branch_table[vtos] == nullptr, \"can't compute twice\");\n@@ -2943,1 +2943,1 @@\n-  assert(branch_table[dtos] == 0, \"can't compute twice\");\n+  assert(branch_table[dtos] == nullptr, \"can't compute twice\");\n@@ -2961,1 +2961,1 @@\n-  assert(branch_table[ftos] == 0, \"can't compute twice\");\n+  assert(branch_table[ftos] == nullptr, \"can't compute twice\");\n@@ -2977,1 +2977,1 @@\n-  assert(branch_table[itos] == 0, \"can't compute twice\");\n+  assert(branch_table[itos] == nullptr, \"can't compute twice\");\n@@ -2993,1 +2993,1 @@\n-  assert(branch_table[ltos] == 0, \"can't compute twice\");\n+  assert(branch_table[ltos] == nullptr, \"can't compute twice\");\n@@ -3009,1 +3009,1 @@\n-  assert(branch_table[btos] == 0, \"can't compute twice\");\n+  assert(branch_table[btos] == nullptr, \"can't compute twice\");\n@@ -3025,1 +3025,1 @@\n-  assert(branch_table[ztos] == 0, \"can't compute twice\");\n+  assert(branch_table[ztos] == nullptr, \"can't compute twice\");\n@@ -3042,1 +3042,1 @@\n-  assert(branch_table[ctos] == 0, \"can't compute twice\");\n+  assert(branch_table[ctos] == nullptr, \"can't compute twice\");\n@@ -3058,1 +3058,1 @@\n-  assert(branch_table[stos] == 0, \"can't compute twice\");\n+  assert(branch_table[stos] == nullptr, \"can't compute twice\");\n@@ -3074,1 +3074,1 @@\n-  assert(branch_table[atos] == 0, \"can't compute twice\");\n+  assert(branch_table[atos] == nullptr, \"can't compute twice\");\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/upcallLinker_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -426,1 +426,1 @@\n-      if (strstr(line, \"qemu\") != 0) {\n+      if (strstr(line, \"qemu\") != nullptr) {\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/vtableStubs_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_globals_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/compressedKlass_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/globalDefinitions_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+  product(bool, UseZvbc, false, EXPERIMENTAL, \"Use Zvbc instructions\")           \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/interpreterRT_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/jvmciCodeInstaller_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -788,1 +788,1 @@\n-  movptr(t1, 0, offset, t0); \/\/ lui + lui + slli + add\n+  movptr2(t1, 0, offset, t0); \/\/ lui + lui + slli + add\n@@ -1715,0 +1715,353 @@\n+\n+void MacroAssembler::crc32_vclmul_fold_16_bytes_vectorsize_16(VectorRegister vx, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register buf, Register tmp, const int STEP) {\n+  assert_different_registers(vx, vt, vtmp1, vtmp2, vtmp3, vtmp4);\n+  vclmul_vv(vtmp1, vx, vt);\n+  vclmulh_vv(vtmp2, vx, vt);\n+  vle64_v(vtmp4, buf); addi(buf, buf, STEP);\n+  \/\/ low parts\n+  vredxor_vs(vtmp3, vtmp1, vtmp4);\n+  \/\/ high parts\n+  vslidedown_vi(vx, vtmp4, 1);\n+  vredxor_vs(vtmp1, vtmp2, vx);\n+  \/\/ merge low and high back\n+  vslideup_vi(vx, vtmp1, 1);\n+  vmv_x_s(tmp, vtmp3);\n+  vmv_s_x(vx, tmp);\n+}\n+\n+void MacroAssembler::crc32_vclmul_fold_16_bytes_vectorsize_16_2(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register tmp) {\n+  assert_different_registers(vx, vy, vt, vtmp1, vtmp2, vtmp3, vtmp4);\n+  vclmul_vv(vtmp1, vx, vt);\n+  vclmulh_vv(vtmp2, vx, vt);\n+  \/\/ low parts\n+  vredxor_vs(vtmp3, vtmp1, vy);\n+  \/\/ high parts\n+  vslidedown_vi(vtmp4, vy, 1);\n+  vredxor_vs(vtmp1, vtmp2, vtmp4);\n+  \/\/ merge low and high back\n+  vslideup_vi(vx, vtmp1, 1);\n+  vmv_x_s(tmp, vtmp3);\n+  vmv_s_x(vx, tmp);\n+}\n+\n+void MacroAssembler::crc32_vclmul_fold_16_bytes_vectorsize_16_3(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register tmp) {\n+  assert_different_registers(vx, vy, vt, vtmp1, vtmp2, vtmp3, vtmp4);\n+  vclmul_vv(vtmp1, vx, vt);\n+  vclmulh_vv(vtmp2, vx, vt);\n+  \/\/ low parts\n+  vredxor_vs(vtmp3, vtmp1, vy);\n+  \/\/ high parts\n+  vslidedown_vi(vtmp4, vy, 1);\n+  vredxor_vs(vtmp1, vtmp2, vtmp4);\n+  \/\/ merge low and high back\n+  vslideup_vi(vy, vtmp1, 1);\n+  vmv_x_s(tmp, vtmp3);\n+  vmv_s_x(vy, tmp);\n+}\n+\n+void MacroAssembler::kernel_crc32_vclmul_fold_vectorsize_16(Register crc, Register buf, Register len,\n+                                              Register vclmul_table, Register tmp1, Register tmp2) {\n+  assert_different_registers(crc, buf, len, vclmul_table, tmp1, tmp2, t1);\n+  assert(MaxVectorSize == 16, \"sanity\");\n+\n+  const int TABLE_STEP = 16;\n+  const int STEP = 16;\n+  const int LOOP_STEP = 128;\n+  const int N = 2;\n+\n+  Register loop_step = t1;\n+\n+  \/\/ ======== preparation ========\n+\n+  mv(loop_step, LOOP_STEP);\n+  sub(len, len, loop_step);\n+\n+  vsetivli(zr, N, Assembler::e64, Assembler::m1, Assembler::mu, Assembler::tu);\n+  vle64_v(v0, buf); addi(buf, buf, STEP);\n+  vle64_v(v1, buf); addi(buf, buf, STEP);\n+  vle64_v(v2, buf); addi(buf, buf, STEP);\n+  vle64_v(v3, buf); addi(buf, buf, STEP);\n+  vle64_v(v4, buf); addi(buf, buf, STEP);\n+  vle64_v(v5, buf); addi(buf, buf, STEP);\n+  vle64_v(v6, buf); addi(buf, buf, STEP);\n+  vle64_v(v7, buf); addi(buf, buf, STEP);\n+\n+  vmv_v_x(v31, zr);\n+  vsetivli(zr, 1, Assembler::e32, Assembler::m1, Assembler::mu, Assembler::tu);\n+  vmv_s_x(v31, crc);\n+  vsetivli(zr, N, Assembler::e64, Assembler::m1, Assembler::mu, Assembler::tu);\n+  vxor_vv(v0, v0, v31);\n+\n+  \/\/ load table\n+  vle64_v(v31, vclmul_table);\n+\n+  Label L_16_bytes_loop;\n+  j(L_16_bytes_loop);\n+\n+\n+  \/\/ ======== folding 128 bytes in data buffer per round ========\n+\n+  align(OptoLoopAlignment);\n+  bind(L_16_bytes_loop);\n+  {\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v0, v31, v8, v9, v10, v11, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v1, v31, v12, v13, v14, v15, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v2, v31, v16, v17, v18, v19, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v3, v31, v20, v21, v22, v23, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v4, v31, v24, v25, v26, v27, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v5, v31, v8, v9, v10, v11, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v6, v31, v12, v13, v14, v15, buf, tmp2, STEP);\n+    crc32_vclmul_fold_16_bytes_vectorsize_16(v7, v31, v16, v17, v18, v19, buf, tmp2, STEP);\n+  }\n+  sub(len, len, loop_step);\n+  bge(len, loop_step, L_16_bytes_loop);\n+\n+\n+  \/\/ ======== folding into 64 bytes from 128 bytes in register ========\n+\n+  \/\/ load table\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v31, vclmul_table);\n+\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_2(v0, v4, v31, v8, v9, v10, v11, tmp2);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_2(v1, v5, v31, v12, v13, v14, v15, tmp2);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_2(v2, v6, v31, v16, v17, v18, v19, tmp2);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_2(v3, v7, v31, v20, v21, v22, v23, tmp2);\n+\n+\n+  \/\/ ======== folding into 16 bytes from 64 bytes in register ========\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v31, vclmul_table);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_3(v0, v3, v31, v8, v9, v10, v11, tmp2);\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v31, vclmul_table);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_3(v1, v3, v31, v12, v13, v14, v15, tmp2);\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v31, vclmul_table);\n+  crc32_vclmul_fold_16_bytes_vectorsize_16_3(v2, v3, v31, v16, v17, v18, v19, tmp2);\n+\n+  #undef FOLD_2_VCLMUL_3\n+\n+\n+  \/\/ ======== final: move result to scalar regsiters ========\n+\n+  vmv_x_s(tmp1, v3);\n+  vslidedown_vi(v1, v3, 1);\n+  vmv_x_s(tmp2, v1);\n+}\n+\n+void MacroAssembler::crc32_vclmul_fold_to_16_bytes_vectorsize_32(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                            VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4) {\n+  assert_different_registers(vx, vy, vt, vtmp1, vtmp2, vtmp3, vtmp4);\n+  vclmul_vv(vtmp1, vx, vt);\n+  vclmulh_vv(vtmp2, vx, vt);\n+  \/\/ low parts\n+  vredxor_vs(vtmp3, vtmp1, vy);\n+  \/\/ high parts\n+  vslidedown_vi(vtmp4, vy, 1);\n+  vredxor_vs(vtmp1, vtmp2, vtmp4);\n+  \/\/ merge low and high back\n+  vslideup_vi(vy, vtmp1, 1);\n+  vmv_x_s(t1, vtmp3);\n+  vmv_s_x(vy, t1);\n+}\n+\n+void MacroAssembler::kernel_crc32_vclmul_fold_vectorsize_32(Register crc, Register buf, Register len,\n+                                              Register vclmul_table, Register tmp1, Register tmp2) {\n+  assert_different_registers(crc, buf, len, vclmul_table, tmp1, tmp2, t1);\n+  assert(MaxVectorSize >= 32, \"sanity\");\n+\n+  \/\/ utility: load table\n+  #define CRC32_VCLMUL_LOAD_TABLE(vt, rt, vtmp, rtmp) \\\n+  vid_v(vtmp); \\\n+  mv(rtmp, 2); \\\n+  vremu_vx(vtmp, vtmp, rtmp); \\\n+  vsll_vi(vtmp, vtmp, 3); \\\n+  vluxei64_v(vt, rt, vtmp);\n+\n+  const int TABLE_STEP = 16;\n+  const int STEP = 128;  \/\/ 128 bytes per round\n+  const int N = 2 * 8;   \/\/ 2: 128-bits\/64-bits, 8: 8 pairs of double 64-bits\n+\n+  Register step = tmp2;\n+\n+\n+  \/\/ ======== preparation ========\n+\n+  mv(step, STEP);\n+  sub(len, len, step); \/\/ 2 rounds of folding with carry-less multiplication\n+\n+  vsetivli(zr, N, Assembler::e64, Assembler::m4, Assembler::mu, Assembler::tu);\n+  \/\/ load data\n+  vle64_v(v4, buf);\n+  add(buf, buf, step);\n+\n+  \/\/ load table\n+  CRC32_VCLMUL_LOAD_TABLE(v8, vclmul_table, v28, t1);\n+  \/\/ load mask,\n+  \/\/    v28 should already contains: 0, 8, 0, 8, ...\n+  vmseq_vi(v2, v28, 0);\n+  \/\/    now, v2 should contains: 101010...\n+  vmnand_mm(v1, v2, v2);\n+  \/\/    now, v1 should contains: 010101...\n+\n+  \/\/ initial crc\n+  vmv_v_x(v24, zr);\n+  vsetivli(zr, 1, Assembler::e32, Assembler::m4, Assembler::mu, Assembler::tu);\n+  vmv_s_x(v24, crc);\n+  vsetivli(zr, N, Assembler::e64, Assembler::m4, Assembler::mu, Assembler::tu);\n+  vxor_vv(v4, v4, v24);\n+\n+  Label L_128_bytes_loop;\n+  j(L_128_bytes_loop);\n+\n+\n+  \/\/ ======== folding 128 bytes in data buffer per round ========\n+\n+  align(OptoLoopAlignment);\n+  bind(L_128_bytes_loop);\n+  {\n+    \/\/ v4: data\n+    \/\/ v4: buf, reused\n+    \/\/ v8: table\n+    \/\/ v12: lows\n+    \/\/ v16: highs\n+    \/\/ v20: low_slides\n+    \/\/ v24: high_slides\n+    vclmul_vv(v12, v4, v8);\n+    vclmulh_vv(v16, v4, v8);\n+    vle64_v(v4, buf);\n+    add(buf, buf, step);\n+    \/\/ lows\n+    vslidedown_vi(v20, v12, 1);\n+    vmand_mm(v0, v2, v2);\n+    vxor_vv(v12, v12, v20, v0_t);\n+    \/\/ with buf data\n+    vxor_vv(v4, v4, v12, v0_t);\n+\n+    \/\/ highs\n+    vslideup_vi(v24, v16, 1);\n+    vmand_mm(v0, v1, v1);\n+    vxor_vv(v16, v16, v24, v0_t);\n+    \/\/ with buf data\n+    vxor_vv(v4, v4, v16, v0_t);\n+  }\n+  sub(len, len, step);\n+  bge(len, step, L_128_bytes_loop);\n+\n+\n+  \/\/ ======== folding into 64 bytes from 128 bytes in register ========\n+\n+  \/\/ load table\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  CRC32_VCLMUL_LOAD_TABLE(v8, vclmul_table, v28, t1);\n+\n+  \/\/ v4:  data, first (low) part, N\/2 of 64-bits\n+  \/\/ v20: data, second (high) part, N\/2 of 64-bits\n+  \/\/ v8:  table\n+  \/\/ v10: lows\n+  \/\/ v12: highs\n+  \/\/ v14: low_slides\n+  \/\/ v16: high_slides\n+\n+  \/\/ high part\n+  vslidedown_vi(v20, v4, N\/2);\n+\n+  vsetivli(zr, N\/2, Assembler::e64, Assembler::m2, Assembler::mu, Assembler::tu);\n+\n+  vclmul_vv(v10, v4, v8);\n+  vclmulh_vv(v12, v4, v8);\n+\n+  \/\/ lows\n+  vslidedown_vi(v14, v10, 1);\n+  vmand_mm(v0, v2, v2);\n+  vxor_vv(v10, v10, v14, v0_t);\n+  \/\/ with data part 2\n+  vxor_vv(v4, v20, v10, v0_t);\n+\n+  \/\/ highs\n+  vslideup_vi(v16, v12, 1);\n+  vmand_mm(v0, v1, v1);\n+  vxor_vv(v12, v12, v16, v0_t);\n+  \/\/ with data part 2\n+  vxor_vv(v4, v20, v12, v0_t);\n+\n+\n+  \/\/ ======== folding into 16 bytes from 64 bytes in register ========\n+\n+  \/\/ v4:  data, first part, 2 of 64-bits\n+  \/\/ v16: data, second part, 2 of 64-bits\n+  \/\/ v18: data, third part, 2 of 64-bits\n+  \/\/ v20: data, second part, 2 of 64-bits\n+  \/\/ v8:  table\n+\n+  vslidedown_vi(v16, v4, 2);\n+  vslidedown_vi(v18, v4, 4);\n+  vslidedown_vi(v20, v4, 6);\n+\n+  vsetivli(zr, 2, Assembler::e64, Assembler::m1, Assembler::mu, Assembler::tu);\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v8, vclmul_table);\n+  crc32_vclmul_fold_to_16_bytes_vectorsize_32(v4, v20, v8, v28, v29, v30, v31);\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v8, vclmul_table);\n+  crc32_vclmul_fold_to_16_bytes_vectorsize_32(v16, v20, v8, v28, v29, v30, v31);\n+\n+  addi(vclmul_table, vclmul_table, TABLE_STEP);\n+  vle64_v(v8, vclmul_table);\n+  crc32_vclmul_fold_to_16_bytes_vectorsize_32(v18, v20, v8, v28, v29, v30, v31);\n+\n+\n+  \/\/ ======== final: move result to scalar regsiters ========\n+\n+  vmv_x_s(tmp1, v20);\n+  vslidedown_vi(v4, v20, 1);\n+  vmv_x_s(tmp2, v4);\n+\n+  #undef CRC32_VCLMUL_LOAD_TABLE\n+}\n+\n+\/\/ For more details of the algorithm, please check the paper:\n+\/\/   \"Fast CRC Computation for Generic Polynomials Using PCLMULQDQ Instruction - Intel\"\n+\/\/\n+\/\/ Please also refer to the corresponding code in aarch64 or x86 ones.\n+\/\/\n+\/\/ As the riscv carry-less multiplication is a bit different from the other platforms,\n+\/\/ so the implementation itself is also a bit different from others.\n+\n+void MacroAssembler::kernel_crc32_vclmul_fold(Register crc, Register buf, Register len,\n+                        Register table0, Register table1, Register table2, Register table3,\n+                        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5) {\n+  const int64_t single_table_size = 256;\n+  const int64_t table_num = 8;   \/\/ 4 for scalar, 4 for plain vector\n+  const ExternalAddress table_addr = StubRoutines::crc_table_addr();\n+  Register vclmul_table = tmp3;\n+\n+  la(vclmul_table, table_addr);\n+  add(vclmul_table, vclmul_table, table_num*single_table_size*sizeof(juint), tmp1);\n+  la(table0, table_addr);\n+\n+  if (MaxVectorSize == 16) {\n+    kernel_crc32_vclmul_fold_vectorsize_16(crc, buf, len, vclmul_table, tmp1, tmp2);\n+  } else {\n+    kernel_crc32_vclmul_fold_vectorsize_32(crc, buf, len, vclmul_table, tmp1, tmp2);\n+  }\n+\n+  mv(crc, zr);\n+  update_word_crc32(crc, tmp1, tmp3, tmp4, tmp5, table0, table1, table2, table3, false);\n+  update_word_crc32(crc, tmp1, tmp3, tmp4, tmp5, table0, table1, table2, table3, true);\n+  update_word_crc32(crc, tmp2, tmp3, tmp4, tmp5, table0, table1, table2, table3, false);\n+  update_word_crc32(crc, tmp2, tmp3, tmp4, tmp5, table0, table1, table2, table3, true);\n+}\n+\n@@ -1768,1 +2121,3 @@\n-    const int64_t tmp_limit = MaxVectorSize >= 32 ? unroll_words*3 : unroll_words*5;\n+    const int64_t tmp_limit =\n+            UseZvbc ? 128 * 3 \/\/ 3 rounds of folding with carry-less multiplication\n+                    : MaxVectorSize >= 32 ? unroll_words*3 : unroll_words*5;\n@@ -1830,1 +2185,7 @@\n-    vector_update_crc32(crc, buf, len, tmp1, tmp2, tmp3, tmp4, tmp6, table0, table3);\n+    if (UseZvbc) { \/\/ carry-less multiplication\n+      kernel_crc32_vclmul_fold(crc, buf, len,\n+                               table0, table1, table2, table3,\n+                               tmp1, tmp2, tmp3, tmp4, tmp6);\n+    } else { \/\/ plain vector instructions\n+      vector_update_crc32(crc, buf, len, tmp1, tmp2, tmp3, tmp4, tmp6, table0, table3);\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":364,"deletions":3,"binary":false,"changes":367,"status":"modified"},{"patch":"@@ -1312,0 +1312,18 @@\n+  void kernel_crc32_vclmul_fold(Register crc, Register buf, Register len,\n+              Register table0, Register table1, Register table2, Register table3,\n+              Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5);\n+  void crc32_vclmul_fold_to_16_bytes_vectorsize_32(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                            VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4);\n+  void kernel_crc32_vclmul_fold_vectorsize_32(Register crc, Register buf, Register len,\n+                                              Register vclmul_table, Register tmp1, Register tmp2);\n+  void crc32_vclmul_fold_16_bytes_vectorsize_16(VectorRegister vx, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register buf, Register tmp, const int STEP);\n+  void crc32_vclmul_fold_16_bytes_vectorsize_16_2(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register tmp);\n+  void crc32_vclmul_fold_16_bytes_vectorsize_16_3(VectorRegister vx, VectorRegister vy, VectorRegister vt,\n+                      VectorRegister vtmp1, VectorRegister vtmp2, VectorRegister vtmp3, VectorRegister vtmp4,\n+                      Register tmp);\n+  void kernel_crc32_vclmul_fold_vectorsize_16(Register crc, Register buf, Register len,\n+                                              Register vclmul_table, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,0 +119,3 @@\n+  bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+    return false;\n+  }\n@@ -4425,35 +4428,0 @@\n-\/\/ ------------------------------ Vector shuffle -------------------------------\n-\n-instruct loadshuffleB(vReg dst) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n-  match(Set dst (VectorLoadShuffle dst));\n-  format %{ \"loadshuffleB $dst, $dst\" %}\n-  ins_encode %{\n-    \/\/ For T_BYTE, no need to do anything\n-  %}\n-  ins_pipe(pipe_class_empty);\n-%}\n-\n-instruct loadshuffleX(vReg dst, vReg src) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE ||\n-            Matcher::vector_element_basic_type(n) == T_LONG ||\n-            Matcher::vector_element_basic_type(n) == T_FLOAT ||\n-            Matcher::vector_element_basic_type(n) == T_INT ||\n-            Matcher::vector_element_basic_type(n) == T_SHORT);\n-  match(Set dst (VectorLoadShuffle src));\n-  effect(TEMP_DEF dst);\n-  format %{ \"loadshuffleX $dst, $src\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n-    if (bt == T_SHORT) {\n-      __ vzext_vf2(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-    } else if (bt == T_FLOAT || bt == T_INT) {\n-      __ vzext_vf4(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-    } else { \/\/ bt == T_DOUBLE || bt == T_LONG\n-      __ vzext_vf8(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1367,1 +1367,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1551,2 +1550,0 @@\n-  VMRegPair tmp_vmreg;\n-  tmp_vmreg.set2(x9->as_VMReg());\n@@ -1559,1 +1556,0 @@\n-  int temploc = -1;\n@@ -1763,1 +1759,0 @@\n-  Label after_transition;\n@@ -1802,1 +1797,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/smallRegisterMap_riscv.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -482,1 +482,13 @@\n-    0xdbdabcaf\n+    0xdbdabcaf,\n+\n+    \/\/ CRC32 table for carry-less multiplication implementation\n+    0xe88ef372UL, 0x00000001UL,\n+    0x4a7fe880UL, 0x00000001UL,\n+    0x54442bd4UL, 0x00000001UL,\n+    0xc6e41596UL, 0x00000001UL,\n+    0x3db1ecdcUL, 0x00000000UL,\n+    0x74359406UL, 0x00000001UL,\n+    0xf1da05aaUL, 0x00000000UL,\n+    0x5a546366UL, 0x00000001UL,\n+    0x751997d0UL, 0x00000001UL,\n+    0xccaa009eUL, 0x00000000UL,\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,4 +157,0 @@\n-  if (FLAG_IS_DEFAULT(AlignVector)) {\n-    FLAG_SET_DEFAULT(AlignVector, AvoidUnalignedAccesses);\n-  }\n-\n@@ -358,0 +354,8 @@\n+  \/\/ UseZvbc (depends on RVV).\n+  if (UseZvbc && !UseRVV) {\n+    if (!FLAG_IS_DEFAULT(UseZvbc)) {\n+      warning(\"Cannot enable UseZvbc on cpu without RVV support.\");\n+    }\n+    FLAG_SET_DEFAULT(UseZvbc, false);\n+  }\n+\n@@ -443,0 +447,4 @@\n+\n+  if (FLAG_IS_DEFAULT(AlignVector)) {\n+    FLAG_SET_DEFAULT(AlignVector, AvoidUnalignedAccesses);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,1 @@\n+  decl(ext_Zvbc        , \"Zvbc\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvbc))        \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    return is_in_range_of_RelAddr((address)distance, 0, true);\n+    return is_in_range_of_RelAddr((address)distance, nullptr, true);\n@@ -132,1 +132,1 @@\n-    return is_in_range_of_RelAddr((address)distance, 0, false);\n+    return is_in_range_of_RelAddr((address)distance, nullptr, false);\n@@ -152,1 +152,1 @@\n-    return pcrel_off((address)distance, 0, true);\n+    return pcrel_off((address)distance, nullptr, true);\n@@ -159,1 +159,1 @@\n-    return pcrel_off((address)distance, 0, false);\n+    return pcrel_off((address)distance, nullptr, false);\n@@ -640,0 +640,5 @@\n+ \/\/ Load Halfword Immediate on Condition\n+ #define LOCHI_ZOPC   (unsigned long)(0xECL << 40 | 0x42L)\n+ #define LOCHHI_ZOPC  (unsigned long)(0xECL << 40 | 0x4EL)\n+ #define LOCGHI_ZOPC  (unsigned long)(0xECL << 40 | 0x46L)\n+\n@@ -990,2 +995,2 @@\n-#define BCTG_ZOPC   (unsigned  int)(227L << 40 | 70)\n-#define BCTGR_ZOPC  (unsigned long)(0xb946 << 16)\n+#define BCTG_ZOPC   (unsigned long)(227L << 40 | 70)\n+#define BCTGR_ZOPC  (unsigned  int)(0xb946 << 16)\n@@ -2078,0 +2083,5 @@\n+  \/\/ load halfword immediate on condition\n+  inline void z_lochi( Register r1, int64_t i2, branch_condition m3);  \/\/ load immediate r1[32-63] = i2_simm16   ; int32 <- int16\n+  inline void z_lochhi(Register r1, int64_t i2, branch_condition m3);  \/\/ load immediate r1[ 0-31] = i2_simm16   ; int32 <- int16\n+  inline void z_locghi(Register r1, int64_t i2, branch_condition m3);  \/\/ load immediate r1[ 0-63] = i2_simm16   ; int64 <- int16\n+\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -248,0 +248,5 @@\n+\/\/ load halfword immediate on condition\n+inline void Assembler::z_lochi(Register r1, int64_t i2, branch_condition m3) { emit_48( LOCHI_ZOPC | reg(r1, 8, 48) | simm16(i2, 16, 48) | uimm4(m3, 12, 48)); }\n+inline void Assembler::z_lochhi(Register r1, int64_t i2, branch_condition m3) { emit_48( LOCHHI_ZOPC | reg(r1, 8, 48) | simm16(i2, 16, 48) | uimm4(m3, 12, 48)); }\n+inline void Assembler::z_locghi(Register r1, int64_t i2, branch_condition m3) { emit_48( LOCGHI_ZOPC | reg(r1, 8, 48) | simm16(i2, 16, 48) | uimm4(m3, 12, 48)); }\n+\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/c2_globals_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/compiledIC_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/continuationFreezeThaw_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-  assert(_pc == *pc_addr || pc == *pc_addr || 0 == *pc_addr,\n+  assert(_pc == *pc_addr || pc == *pc_addr || nullptr == *pc_addr,\n@@ -299,1 +299,1 @@\n-  if (fp() == 0 || (intptr_t(fp()) & (wordSize-1)) != 0) {\n+  if (fp() == nullptr || (intptr_t(fp()) & (wordSize-1)) != 0) {\n@@ -302,1 +302,1 @@\n-  if (sp() == 0 || (intptr_t(sp()) & (wordSize-1)) != 0) {\n+  if (sp() == nullptr || (intptr_t(sp()) & (wordSize-1)) != 0) {\n@@ -423,1 +423,1 @@\n-    if ((intptr_t*) current_fp != 0 && (intptr_t*) current_fp <= current_sp) {\n+    if ((intptr_t*) current_fp != nullptr && (intptr_t*) current_fp <= current_sp) {\n@@ -506,1 +506,1 @@\n-          if (current_pc == 0) {\n+          if (current_pc == nullptr) {\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/globalDefinitions_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3429,1 +3429,1 @@\n-  \/\/ TODO: use load immediate on condition and z_bru above will not be required\n+\n@@ -4111,1 +4111,1 @@\n-  bool     need_zero_extend = base != 0;\n+  bool     need_zero_extend = base != nullptr;\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  if ((addr == 0) || (((unsigned long)addr & ~0x0fff) == 0) || ((intptr_t)addr & 1) != 0) {\n+  if ((addr == nullptr) || (((unsigned long)addr & ~0x0fff) == 0) || ((intptr_t)addr & 1) != 0) {\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/registerSaver_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/register_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/register_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,0 @@\n- return 0;\n","filename":"src\/hotspot\/cpu\/s390\/relocInfo_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1758,0 +1758,4 @@\n+bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1418,1 +1418,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1870,2 +1869,0 @@\n-  Label after_transition;\n-\n@@ -1927,1 +1924,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/smallRegisterMap_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -691,1 +691,1 @@\n-    address start = 0;\n+    address start = nullptr;\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/vtableStubs_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/c1_Defs_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1792,8 +1792,19 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, Address src, int vlen_in_bytes) {\n-  switch (vlen_in_bytes) {\n-    case 4:  movdl(dst, src);   break;\n-    case 8:  movq(dst, src);    break;\n-    case 16: movdqu(dst, src);  break;\n-    case 32: vmovdqu(dst, src); break;\n-    case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n-    default: ShouldNotReachHere();\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, Address src, int vlen_in_bytes) {\n+  if (is_integral_type(bt)) {\n+    switch (vlen_in_bytes) {\n+      case 4:  movdl(dst, src);   break;\n+      case 8:  movq(dst, src);    break;\n+      case 16: movdqu(dst, src);  break;\n+      case 32: vmovdqu(dst, src); break;\n+      case 64: evmovdqul(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (vlen_in_bytes) {\n+      case 4:  movflt(dst, src); break;\n+      case 8:  movdbl(dst, src); break;\n+      case 16: movups(dst, src); break;\n+      case 32: vmovups(dst, src, Assembler::AVX_256bit); break;\n+      case 64: vmovups(dst, src, Assembler::AVX_512bit); break;\n+      default: ShouldNotReachHere();\n+    }\n@@ -1803,1 +1814,1 @@\n-void C2_MacroAssembler::load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n+void C2_MacroAssembler::load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch) {\n@@ -1807,1 +1818,1 @@\n-    load_vector(dst, as_Address(src), vlen_in_bytes);\n+    load_vector(bt, dst, as_Address(src), vlen_in_bytes);\n@@ -1810,1 +1821,1 @@\n-    load_vector(dst, Address(rscratch, 0), vlen_in_bytes);\n+    load_vector(bt, dst, Address(rscratch, 0), vlen_in_bytes);\n@@ -1839,4 +1850,1 @@\n-    movq(dst, src);\n-    if (vlen == 16) {\n-      punpcklqdq(dst, dst);\n-    }\n+    load_vector(bt, dst, src, vlen);\n@@ -1853,1 +1861,1 @@\n-  load_vector(dst, addr, vlen_in_bytes);\n+  load_vector(T_BYTE, dst, addr, vlen_in_bytes);\n@@ -3546,1 +3554,1 @@\n-  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n+  load_vector(eltype, dst, src, arrays_hashcode_elsize(eltype) * 8);\n@@ -3550,1 +3558,1 @@\n-  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n+  load_vector(eltype, dst, src, arrays_hashcode_elsize(eltype) * 8);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":26,"deletions":18,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -143,2 +143,2 @@\n-  void load_vector(XMMRegister dst, Address        src, int vlen_in_bytes);\n-  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n+  void load_vector(BasicType bt, XMMRegister dst, Address        src, int vlen_in_bytes);\n+  void load_vector(BasicType bt, XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/c2_globals_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1366,1 +1366,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -1760,2 +1759,0 @@\n-  Label after_transition;\n-\n@@ -1812,1 +1809,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2174,1 +2174,0 @@\n-  BasicType* in_elem_bt = nullptr;\n@@ -2372,3 +2371,0 @@\n-  VMRegPair tmp_vmreg;\n-  tmp_vmreg.set2(rbx->as_VMReg());\n-\n@@ -2380,1 +2376,0 @@\n-  int temploc = -1;\n@@ -2603,2 +2598,0 @@\n-  Label after_transition;\n-\n@@ -2654,1 +2647,0 @@\n-  __ bind(after_transition);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/smallRegisterMap_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  _final_stubs_code_size        = 10000 LP64_ONLY(+20000) WINDOWS_ONLY(+2000) ZGC_ONLY(+20000)\n+  _final_stubs_code_size        = 10000 LP64_ONLY(+20000) WINDOWS_ONLY(+22000) ZGC_ONLY(+20000)\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2214,0 +2214,13 @@\n+\/\/ Return true if Vector::rearrange needs preparation of the shuffle argument\n+bool Matcher::vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen) {\n+  switch (elem_bt) {\n+    case T_BYTE:  return false;\n+    case T_SHORT: return !VM_Version::supports_avx512bw();\n+    case T_INT:   return !VM_Version::supports_avx();\n+    case T_LONG:  return vlen < 8 && !VM_Version::supports_avx512vl();\n+    default:\n+      ShouldNotReachHere();\n+      return false;\n+  }\n+}\n+\n@@ -2765,12 +2778,3 @@\n-static inline GrowableArray<jvalue>* vreplicate_imm(BasicType bt, T con, int len) {\n-  GrowableArray<jvalue>* val = new GrowableArray<jvalue>(len);\n-  jvalue ele;\n-  switch (bt) {\n-    case T_BYTE:   ele.b = con; break;\n-    case T_SHORT:  ele.s = con; break;\n-    case T_INT:    ele.i = con; break;\n-    case T_LONG:   ele.j = con; break;\n-    case T_FLOAT:  ele.f = con; break;\n-    case T_DOUBLE: ele.d = con; break;\n-    default: ShouldNotReachHere();\n-  }\n+static inline GrowableArray<jbyte>* vreplicate_imm(BasicType bt, T con, int len) {\n+  int size = type2aelembytes(bt) * len;\n+  GrowableArray<jbyte>* val = new GrowableArray<jbyte>(size, size, 0);\n@@ -2778,1 +2782,30 @@\n-    val->append(ele);\n+    int offset = i * type2aelembytes(bt);\n+    switch (bt) {\n+      case T_BYTE: val->at(i) = con; break;\n+      case T_SHORT: {\n+        jshort c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jshort));\n+        break;\n+      }\n+      case T_INT: {\n+        jint c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jint));\n+        break;\n+      }\n+      case T_LONG: {\n+        jlong c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jlong));\n+        break;\n+      }\n+      case T_FLOAT: {\n+        jfloat c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jfloat));\n+        break;\n+      }\n+      case T_DOUBLE: {\n+        jdouble c = con;\n+        memcpy(val->adr_at(offset), &c, sizeof(jdouble));\n+        break;\n+      }\n+      default: assert(false, \"%s\", type2name(bt));\n+    }\n@@ -4096,1 +4129,2 @@\n-    __ load_vector($dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ load_vector(bt, $dst$$XMMRegister, $mem$$Address, Matcher::vector_length_in_bytes(this));\n@@ -4579,4 +4613,3 @@\n-    InternalAddress addr = $constantaddress(Matcher::vector_element_basic_type(this),\n-        vreplicate_imm(Matcher::vector_element_basic_type(this), $con$$constant,\n-            (VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 4 : 8) : 8) \/\n-                type2aelembytes(Matcher::vector_element_basic_type(this))));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(Matcher::vector_element_basic_type(this), $con$$constant,\n+                                                           (VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 4 : 8) : 16) \/\n+                                                                   type2aelembytes(Matcher::vector_element_basic_type(this))));\n@@ -4720,1 +4753,1 @@\n-    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, $con$$constant, 1));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_LONG, $con$$constant, VM_Version::supports_sse3() ? 1 : 2));\n@@ -4802,2 +4835,2 @@\n-    InternalAddress addr = $constantaddress(T_FLOAT, vreplicate_imm(T_FLOAT, $con$$constant,\n-        VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 2));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_FLOAT, $con$$constant,\n+                                                           VM_Version::supports_sse3() ? (VM_Version::supports_avx() ? 1 : 2) : 4));\n@@ -4879,1 +4912,1 @@\n-    InternalAddress addr = $constantaddress(T_DOUBLE, vreplicate_imm(T_DOUBLE, $con$$constant, 1));\n+    InternalAddress addr = $constantaddress(vreplicate_imm(T_DOUBLE, $con$$constant, VM_Version::supports_sse3() ? 1 : 2));\n@@ -8876,11 +8909,0 @@\n-\n-instruct loadShuffleB(vec dst) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n-  match(Set dst (VectorLoadShuffle dst));\n-  format %{ \"vector_load_shuffle $dst, $dst\" %}\n-  ins_encode %{\n-    \/\/ empty\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -8953,1 +8975,1 @@\n-            Matcher::vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n+            !VM_Version::supports_avx512bw());\n@@ -8964,1 +8986,1 @@\n-      __ pmovzxbw($vtmp$$XMMRegister, $src$$XMMRegister);\n+      __ movdqu($vtmp$$XMMRegister, $src$$XMMRegister);\n@@ -8979,2 +9001,1 @@\n-      __ vpmovzxbw($vtmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-      __ vpsllw($vtmp$$XMMRegister, $vtmp$$XMMRegister, 1, vlen_enc);\n+      __ vpsllw($vtmp$$XMMRegister, $src$$XMMRegister, 1, vlen_enc);\n@@ -9027,15 +9048,0 @@\n-instruct loadShuffleS_evex(vec dst, vec src) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n-            VM_Version::supports_avx512bw());\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    if (!VM_Version::supports_avx512vl()) {\n-      vlen_enc = Assembler::AVX_512bit;\n-    }\n-    __ vpmovzxbw($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9072,1 +9078,1 @@\n-    __ pmovzxbd($vtmp$$XMMRegister, $src$$XMMRegister);\n+    __ movdqu($vtmp$$XMMRegister, $src$$XMMRegister);\n@@ -9101,12 +9107,0 @@\n-instruct loadShuffleI_avx(vec dst, vec src) %{\n-  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n-            UseAVX > 0);\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    __ vpmovzxbd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9142,2 +9136,1 @@\n-    __ vpmovzxbq($vtmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-    __ vpsllq($vtmp$$XMMRegister, $vtmp$$XMMRegister, 1, vlen_enc);\n+    __ vpsllq($vtmp$$XMMRegister, $src$$XMMRegister, 1, vlen_enc);\n@@ -9169,14 +9162,0 @@\n-instruct loadShuffleL_evex(vec dst, vec src) %{\n-  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n-  match(Set dst (VectorLoadShuffle src));\n-  format %{ \"vector_load_shuffle $dst, $src\" %}\n-  ins_encode %{\n-    assert(UseAVX > 2, \"required\");\n-\n-    int vlen_enc = vector_length_encoding(this);\n-    __ vpmovzxbq($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9791,1 +9770,1 @@\n-    InternalAddress addr = $constantaddress(T_LONG, vreplicate_imm(T_LONG, 0x8040201008040201L, 1));\n+    InternalAddress addr = $constantaddress(jlong(0x8040201008040201));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":61,"deletions":82,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/c2_MacroAssembler_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/continuationFreezeThaw_zero.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/globalDefinitions_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/nativeInst_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/smallRegisterMap_zero.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/upcallLinker_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/aix\/vmStructs_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/bsd\/vmStructs_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,4 +39,1 @@\n-        \"enable support for Oprofile profiler\")                         \\\n-                                                                        \\\n-  product(bool, UseLinuxPosixThreadCPUClocks, true,                     \\\n-          \"(Deprecated) enable fast Linux Posix clocks where available\") \\\n+        \"(Deprecated) enable support for Oprofile profiler\")            \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1487,3 +1487,0 @@\n-  if (!UseLinuxPosixThreadCPUClocks) {\n-    return;\n-  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/vmStructs_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zPhysicalMemoryBacking_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zVirtualMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/osThread_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/osThread_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/os_windows.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/vmStructs_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/vmStructs_aix_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vmStructs_bsd_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/vmStructs_bsd_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vmStructs_linux_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/vmStructs_linux_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/vmStructs_linux_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/atomic_linux_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/orderAccess_linux_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,0 +181,3 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZVBC)) {\n+    VM_Version::ext_Zvbc.enable_feature();\n+  }\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vmStructs_linux_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/vmStructs_linux_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/vmStructs_linux_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/copy_windows_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/vmStructs_windows_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -483,1 +483,1 @@\n-  address array_constant(BasicType bt, GrowableArray<jvalue>* c, int alignment) {\n+  address array_constant(const GrowableArray<jbyte>* c, int alignment) {\n@@ -485,3 +485,1 @@\n-    int len = c->length();\n-    int size = type2aelembytes(bt) * len;\n-    address ptr = start_a_const(size, alignment);\n+    address ptr = start_a_const(c->length(), alignment);\n@@ -489,14 +487,2 @@\n-      for (int i = 0; i < len; i++) {\n-        jvalue e = c->at(i);\n-        switch(bt) {\n-          case T_BOOLEAN: emit_int8(e.z);   break;\n-          case T_BYTE:    emit_int8(e.b);   break;\n-          case T_CHAR:    emit_int16(e.c);  break;\n-          case T_SHORT:   emit_int16(e.s);  break;\n-          case T_INT:     emit_int32(e.i);  break;\n-          case T_LONG:    emit_int64(e.j);  break;\n-          case T_FLOAT:   emit_float(e.f);  break;\n-          case T_DOUBLE:  emit_double(e.d); break;\n-          default:\n-            ShouldNotReachHere();\n-        }\n+      for (int i = 0; i < c->length(); i++) {\n+        emit_int8(c->at(i));\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -892,0 +892,1 @@\n+  cb.set_const_section_alignment(_const_section_alignment);\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/cppVtables.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-  \/\/ We check user input for SharedBaseAddress at dump time. We must weed out values\n-  \/\/ we already know to be invalid later.\n+  \/\/ We check user input for SharedBaseAddress at dump time.\n@@ -158,1 +157,3 @@\n-  \/\/ Therefore, \"shared_base\" must be later usable as encoding base.\n+  \/\/ On AARCH64, The \"shared_base\" may not be later usable as encoding base, depending on the\n+  \/\/ total size of the reserved area and the precomputed_narrow_klass_shift. This is checked\n+  \/\/ before reserving memory.  Here we weed out values already known to be invalid later.\n@@ -1495,0 +1496,9 @@\n+  \/\/ Test that class space base address plus shift can be decoded by aarch64, when restored.\n+  const int precomputed_narrow_klass_shift = ArchiveBuilder::precomputed_narrow_klass_shift();\n+  if (!CompressedKlassPointers::check_klass_decode_mode(base_address, precomputed_narrow_klass_shift,\n+                                                        total_range_size)) {\n+    log_info(cds)(\"CDS initialization: Cannot use SharedBaseAddress \" PTR_FORMAT \" with precomputed shift %d.\",\n+                  p2i(base_address), precomputed_narrow_klass_shift);\n+    use_archive_base_addr = false;\n+  }\n+\n@@ -1534,1 +1544,1 @@\n-    assert(base_address == nullptr || (address)total_space_rs.base() == base_address,\n+    assert(!use_archive_base_addr || (address)total_space_rs.base() == base_address,\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -79,3 +79,2 @@\n-  if (ArchiveBuilder::is_active() && ArchiveBuilder::current()->is_in_buffer_space((address)this)) {\n-    return ArchiveBuilder::current()->offset_to_buffered<InstanceKlass*>(_klass_offset);\n-  } else {\n+  if (MetaspaceShared::is_in_shared_metaspace(this)) {\n+    \/\/ <this> is inside a mmaped CDS archive.\n@@ -83,0 +82,4 @@\n+  } else {\n+    \/\/ <this> is a temporary copy of a RunTimeClassInfo that's being initialized\n+    \/\/ by the ArchiveBuilder.\n+    return ArchiveBuilder::current()->offset_to_buffered<InstanceKlass*>(_klass_offset);\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/serializeClosure.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciTypeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/classFileError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/javaClassesImpl.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -726,2 +726,1 @@\n-  const char* result = (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n-  return strcmp(result, \"\") != 0 ? result : nullptr;\n+  return (st.size() > 0) ? os::strdup(st.as_string()) : nullptr;  \/\/ Example: \"java.base,java.compiler\"\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -960,0 +960,6 @@\n+  assert(caller_ik != nullptr, \"sanity\");\n+  assert(invoked_name != nullptr, \"sanity\");\n+  assert(invoked_type != nullptr, \"sanity\");\n+  assert(method_type != nullptr, \"sanity\");\n+  assert(instantiated_method_type != nullptr, \"sanity\");\n+\n@@ -964,1 +970,1 @@\n-      !member_method->is_shared() ||\n+      (member_method != nullptr && !member_method->is_shared()) ||\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1020,27 +1020,0 @@\n-  do_intrinsic(_VectorShuffleIota, jdk_internal_vm_vector_VectorSupport, vector_shuffle_step_iota_name, vector_shuffle_step_iota_sig, F_S)     \\\n-   do_signature(vector_shuffle_step_iota_sig, \"(Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"                                          \\\n-                                               \"IIII\"                                                                                          \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)\"                                  \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\")                                         \\\n-   do_name(vector_shuffle_step_iota_name, \"shuffleIota\")                                                                                       \\\n-                                                                                                                                               \\\n-  do_intrinsic(_VectorShuffleToVector, jdk_internal_vm_vector_VectorSupport, vector_shuffle_to_vector_name, vector_shuffle_to_vector_sig, F_S) \\\n-   do_signature(vector_shuffle_to_vector_sig, \"(Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"                                          \\\n-                                               \"ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)\"                             \\\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                \\\n-   do_name(vector_shuffle_to_vector_name, \"shuffleToVector\")                                                                                   \\\n-                                                                                                                                               \\\n-  do_intrinsic(_VectorWrapShuffleIndexes, jdk_internal_vm_vector_VectorSupport, vector_wrap_shuffle_indexes_name,                              \\\n-                                                                                                         vector_wrap_shuffle_indexes_sig, F_S) \\\n-   do_signature(vector_wrap_shuffle_indexes_sig, \"(Ljava\/lang\/Class;\"                                                                          \\\n-                                                  \"Ljava\/lang\/Class;\"                                                                          \\\n-                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"                                       \\\n-                                                  \"ILjdk\/internal\/vm\/vector\/VectorSupport$WrapShuffleIndexesOperation;)\"                       \\\n-                                                  \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\")                                      \\\n-   do_name(vector_wrap_shuffle_indexes_name, \"wrapShuffleIndexes\")                                                                             \\\n-                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-  size_initial = align_up(size_initial, os::vm_page_size());\n+  size_initial = align_up(size_initial, rs.page_size());\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/codeCache.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/codeHeapState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/stubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/vmreg.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AnalyticsSequences.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AnalyticsSequences.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSetRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSetRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"nmt\/memTracker.hpp\"\n@@ -33,0 +32,6 @@\n+#include \"runtime\/os.hpp\"\n+\n+size_t G1BlockOffsetTable::compute_size(size_t mem_region_words) {\n+  size_t number_of_slots = (mem_region_words \/ CardTable::card_size_in_words());\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/virtualspace.hpp\"\n@@ -93,4 +92,1 @@\n-  static size_t compute_size(size_t mem_region_words) {\n-    size_t number_of_slots = (mem_region_words \/ CardTable::card_size_in_words());\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_words);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -50,0 +51,5 @@\n+size_t G1CardTable::compute_size(size_t mem_region_size_in_words) {\n+  size_t number_of_slots = (mem_region_size_in_words \/ _card_size_in_words);\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,4 +110,1 @@\n-  static size_t compute_size(size_t mem_region_size_in_words) {\n-    size_t number_of_slots = (mem_region_size_in_words \/ _card_size_in_words);\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_size_in_words);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableEntryClosure.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -994,1 +994,1 @@\n-  size_t aligned_expand_bytes = ReservedSpace::page_align_size_up(expand_bytes);\n+  size_t aligned_expand_bytes = os::align_up_vm_page_size(expand_bytes);\n@@ -1037,2 +1037,1 @@\n-  size_t aligned_shrink_bytes =\n-    ReservedSpace::page_align_size_down(shrink_bytes);\n+  size_t aligned_shrink_bytes = os::align_down_vm_page_size(shrink_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThreadsNeeded.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EdenRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacStats.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MemoryPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreeMemoryTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Predictions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionsOnNodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionsOnNodes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SATBMarkQueueSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SharedClosures.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvRateGroup.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvRateGroup.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGenSizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/gcAdaptivePolicyCounters.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  ReservedSpace old_rs   = heap_rs.first_part(MaxOldSize);\n-  ReservedSpace young_rs = heap_rs.last_part(MaxOldSize);\n+  ReservedSpace old_rs   = heap_rs.first_part(MaxOldSize, GenAlignment);\n+  ReservedSpace young_rs = heap_rs.last_part(MaxOldSize, GenAlignment);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2141,2 +2141,1 @@\n-    \/\/ The next source region is in the current space.  Update src_region_idx\n-    \/\/ and the source address to match src_region_ptr.\n+    \/\/ Found the first non-empty region in the same space.\n@@ -2144,4 +2143,1 @@\n-    HeapWord* const src_region_addr = sd.region_to_addr(src_region_idx);\n-    if (src_region_addr > closure.source()) {\n-      closure.set_source(src_region_addr);\n-    }\n+    closure.set_source(sd.region_to_addr(src_region_idx));\n@@ -2171,3 +2167,0 @@\n-        HeapWord* region_end_addr = region_start_addr + ParallelCompactData::RegionSize;\n-        HeapWord* first_live_word = mark_bitmap()->find_obj_beg(region_start_addr, region_end_addr);\n-        assert(first_live_word < region_end_addr, \"inv\");\n@@ -2177,1 +2170,1 @@\n-        closure.set_source(first_live_word);\n+        closure.set_source(region_start_addr);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,10 @@\n+#include \"runtime\/os.hpp\"\n+\n+\/\/ Return the number of slots needed for an offset array\n+\/\/ that covers mem_region_words words.\n+size_t SerialBlockOffsetTable::compute_size(size_t mem_region_words) {\n+  assert(mem_region_words % CardTable::card_size_in_words() == 0, \"precondition\");\n+\n+  size_t number_of_slots = mem_region_words \/ CardTable::card_size_in_words();\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n@@ -64,1 +74,1 @@\n-    delta = ReservedSpace::page_align_size_up(new_size - old_size);\n+    delta = os::align_up_vm_page_size(new_size - old_size);\n@@ -71,1 +81,1 @@\n-    delta = ReservedSpace::page_align_size_down(old_size - new_size);\n+    delta = os::align_down_vm_page_size(old_size - new_size);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,6 +58,1 @@\n-  static size_t compute_size(size_t mem_region_words) {\n-    assert(mem_region_words % CardTable::card_size_in_words() == 0, \"precondition\");\n-\n-    size_t number_of_slots = mem_region_words \/ CardTable::card_size_in_words();\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_words);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -189,2 +189,2 @@\n-  ReservedSpace young_rs = heap_rs.first_part(MaxNewSize);\n-  ReservedSpace old_rs = heap_rs.last_part(MaxNewSize);\n+  ReservedSpace young_rs = heap_rs.first_part(MaxNewSize, GenAlignment);\n+  ReservedSpace old_rs = heap_rs.last_part(MaxNewSize, GenAlignment);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  size_t aligned_bytes  = ReservedSpace::page_align_size_up(bytes);\n+  size_t aligned_bytes = os::align_up_vm_page_size(bytes);\n@@ -91,1 +91,1 @@\n-    aligned_bytes = ReservedSpace::page_align_size_down(bytes);\n+    aligned_bytes = os::align_down_vm_page_size(bytes);\n@@ -93,1 +93,1 @@\n-  size_t aligned_expand_bytes = ReservedSpace::page_align_size_up(expand_bytes);\n+  size_t aligned_expand_bytes = os::align_up_vm_page_size(expand_bytes);\n@@ -125,1 +125,1 @@\n-  size_t size = ReservedSpace::page_align_size_down(bytes);\n+  size_t size = os::align_down_vm_page_size(bytes);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/adaptiveSizePolicy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/* Copyright (c) 1992, 2021, Oracle and\/or its affiliates, and Stanford University.\n+\/* Copyright (c) 1992, 2024, Oracle and\/or its affiliates, and Stanford University.\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\/* Copyright (c) 1992, 2021, Oracle and\/or its affiliates, and Stanford University.\n+\/* Copyright (c) 1992, 2024, Oracle and\/or its affiliates, and Stanford University.\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetConfig.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetConfig.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfiguration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcName.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcOverheadChecker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcPolicyCounters.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/isGCActiveMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/isGCActiveMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/locationPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"memory\/virtualspace.hpp\"\n@@ -35,1 +34,1 @@\n-  return ReservedSpace::allocation_align_size_up(heap_size \/ mark_distance());\n+  return os::align_up_vm_allocation_granularity(heap_size \/ mark_distance());\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/pretouchTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/softRefPolicy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-    \/\/ must be either an oop or NULL\n+    \/\/ must be either an oop or null\n@@ -468,5 +468,11 @@\n-    \/\/ We can skip marks on a freshly-allocated object in Eden.\n-    \/\/ Keep this code in sync with new_deferred_store_barrier() in runtime.cpp.\n-    \/\/ That routine informs GC to take appropriate compensating steps,\n-    \/\/ upon a slow-path allocation, so as to make this card-mark\n-    \/\/ elision safe.\n+    \/\/ We use card marks to track old to young references in Generational Shenandoah;\n+    \/\/ see flag ShenandoahCardBarrier above.\n+    \/\/ Objects are always allocated in the young generation and initialized\n+    \/\/ before they are promoted. There's always a safepoint (e.g. at final mark)\n+    \/\/ before an object is promoted from young to old. Promotion entails dirtying of\n+    \/\/ the cards backing promoted objects, so they will be guaranteed to be scanned\n+    \/\/ at the next remembered set scan of the old generation.\n+    \/\/ Thus, we can safely skip card-marking of initializing stores on a\n+    \/\/ freshly-allocated object. If any of the assumptions above change in\n+    \/\/ the future, this code will need to be re-examined; see check in\n+    \/\/ ShenandoahCardBarrier::on_slowpath_allocation_exit().\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -889,1 +889,1 @@\n-  phase->set_ctrl(gc_state_offset, phase->C->root());\n+  phase->set_root_as_ctrl(gc_state_offset);\n@@ -947,1 +947,1 @@\n-  phase->set_ctrl(cset_addr_ptr, phase->C->root());\n+  phase->set_root_as_ctrl(cset_addr_ptr);\n@@ -1151,0 +1151,1 @@\n+    \/\/ Load barrier on the control output of a call\n@@ -1152,1 +1153,1 @@\n-      CallNode* call = ctrl->is_Proj() ? ctrl->in(0)->as_CallJava() : ctrl->as_CallJava();\n+      CallJavaNode* call = ctrl->is_Proj() ? ctrl->in(0)->as_CallJava() : ctrl->as_CallJava();\n@@ -1186,0 +1187,9 @@\n+\n+      \/\/ If this is a runtime call, it doesn't have an exception handling path\n+      if (projs->fallthrough_catchproj == nullptr) {\n+        assert(call->method() == nullptr, \"should be runtime call\");\n+        assert(projs->catchall_catchproj == nullptr, \"runtime call should not have catch all projection\");\n+        continue;\n+      }\n+\n+      \/\/ Otherwise, clone the barrier so there's one for the fallthrough and one for the exception handling path\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,0 +91,8 @@\n+void ShenandoahBarrierSet::on_slowpath_allocation_exit(JavaThread* thread, oop new_obj) {\n+#if COMPILER2_OR_JVMCI\n+  assert(!ReduceInitialCardMarks || !ShenandoahCardBarrier || ShenandoahGenerationalHeap::heap()->is_in_young(new_obj),\n+         \"Error: losing card mark on initialzing store to old gen\");\n+#endif \/\/ COMPILER2_OR_JVMCI\n+  assert(thread->deferred_card_mark().is_empty(), \"We don't use this\");\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  void print_on(outputStream* st) const;\n+  void print_on(outputStream* st) const override;\n@@ -87,4 +87,8 @@\n-  virtual void on_thread_create(Thread* thread);\n-  virtual void on_thread_destroy(Thread* thread);\n-  virtual void on_thread_attach(Thread* thread);\n-  virtual void on_thread_detach(Thread* thread);\n+  \/\/ Support for optimizing compilers to call the barrier set on slow path allocations\n+  \/\/ that did not enter a TLAB. Used for e.g. ReduceInitialCardMarks to take any\n+  \/\/ compensating actions to restore card-marks that might otherwise be incorrectly elided.\n+  void on_slowpath_allocation_exit(JavaThread* thread, oop new_obj) override;\n+  void on_thread_create(Thread* thread) override;\n+  void on_thread_destroy(Thread* thread) override;\n+  void on_thread_attach(Thread* thread) override;\n+  void on_thread_detach(Thread* thread) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1049,1 +1049,4 @@\n-  ShenandoahHeap::heap()->free_set()->recycle_trash();\n+  ShenandoahWorkerScope scope(ShenandoahHeap::heap()->workers(),\n+                              ShenandoahWorkerPolicy::calc_workers_for_conc_cleanup(),\n+                              \"cleanup early.\");\n+  ShenandoahHeap::heap()->recycle_trash();\n@@ -1181,1 +1184,4 @@\n-  ShenandoahHeap::heap()->free_set()->recycle_trash();\n+  ShenandoahWorkerScope scope(ShenandoahHeap::heap()->workers(),\n+                              ShenandoahWorkerPolicy::calc_workers_for_conc_cleanup(),\n+                              \"cleanup complete.\");\n+  ShenandoahHeap::heap()->recycle_trash();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -732,1 +732,0 @@\n-  _trash_regions(NEW_C_HEAP_ARRAY(ShenandoahHeapRegion*, max_regions, mtGC)),\n@@ -1005,1 +1004,1 @@\n-  try_recycle_trashed(r);\n+  r->try_recycle_under_lock();\n@@ -1216,1 +1215,1 @@\n-    try_recycle_trashed(r);\n+    r->try_recycle_under_lock();\n@@ -1258,3 +1257,6 @@\n-void ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion* r) {\n-  if (r->is_trash()) {\n-    r->recycle();\n+class ShenandoahRecycleTrashedRegionClosure final : public ShenandoahHeapRegionClosure {\n+public:\n+  ShenandoahRecycleTrashedRegionClosure(): ShenandoahHeapRegionClosure() {}\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) {\n+    r->try_recycle();\n@@ -1262,1 +1264,5 @@\n-}\n+\n+  bool is_thread_safe() {\n+    return true;\n+  }\n+};\n@@ -1265,1 +1271,1 @@\n-  \/\/ lock is not reentrable, check we don't have it\n+  \/\/ lock is not non-reentrant, check we don't have it\n@@ -1267,7 +1273,0 @@\n-  size_t count = 0;\n-  for (size_t i = 0; i < _heap->num_regions(); i++) {\n-    ShenandoahHeapRegion* r = _heap->get_region(i);\n-    if (r->is_trash()) {\n-      _trash_regions[count++] = r;\n-    }\n-  }\n@@ -1275,40 +1274,5 @@\n-  size_t total_batches = 0;\n-  jlong batch_start_time = 0;\n-  jlong recycle_trash_start_time = os::javaTimeNanos();    \/\/ This value will be treated as the initial batch_start_time\n-  jlong batch_end_time = recycle_trash_start_time;\n-  \/\/ Process as many batches as can be processed within 10 us.\n-  static constexpr jlong deadline_ns = 10000;               \/\/ 10 us\n-  size_t idx = 0;\n-  jlong predicted_next_batch_end_time;\n-  jlong batch_process_time_estimate = 0;\n-  while (idx < count) {\n-    if (idx > 0) {\n-      os::naked_yield(); \/\/ Yield to allow allocators to take the lock, except on the first iteration\n-    }\n-    \/\/ Avoid another call to javaTimeNanos() if we already know time at which last batch ended\n-    batch_start_time = batch_end_time;\n-    const jlong deadline = batch_start_time + deadline_ns;\n-\n-    ShenandoahHeapLocker locker(_heap->lock());\n-    do {\n-      \/\/ Measurements on typical 2024 hardware suggest it typically requires between 1400 and 2000 ns to process a batch of\n-      \/\/ 32 regions, assuming low contention with other threads.  Sometimes this goes higher, when mutator threads\n-      \/\/ are contending for CPU cores and\/or the heap lock.  On this hardware with a 10 us deadline, we expect 3-6 batches\n-      \/\/ to be processed between yields most of the time.\n-      \/\/\n-      \/\/ Note that deadline is enforced since the end of previous batch.  In the case that yield() or acquisition of heap lock\n-      \/\/ takes a \"long time\", we will have less time to process regions, but we will always process at least one batch between\n-      \/\/ yields.  Yielding more frequently when there is heavy contention for the heap lock or for CPU cores is considered the\n-      \/\/ right thing to do.\n-      const size_t REGIONS_PER_BATCH = 32;\n-      size_t max_idx = MIN2(count, idx + REGIONS_PER_BATCH);\n-      while (idx < max_idx) {\n-        try_recycle_trashed(_trash_regions[idx++]);\n-      }\n-      total_batches++;\n-      batch_end_time = os::javaTimeNanos();\n-      \/\/ Estimate includes historic combination of yield times and heap lock acquisition times.\n-      batch_process_time_estimate = (batch_end_time - recycle_trash_start_time) \/ total_batches;\n-      predicted_next_batch_end_time = batch_end_time + batch_process_time_estimate;\n-    } while ((idx < count) && (predicted_next_batch_end_time < deadline));\n-  }\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  heap->assert_gc_workers(heap->workers()->active_workers());\n+\n+  ShenandoahRecycleTrashedRegionClosure closure;\n+  heap->parallel_heap_region_iterate(&closure);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":19,"deletions":55,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -289,1 +289,0 @@\n-  ShenandoahHeapRegion** _trash_regions;\n@@ -355,1 +354,0 @@\n-  void try_recycle_trashed(ShenandoahHeapRegion *r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -544,1 +544,1 @@\n-      r->recycle();\n+      r->try_recycle_under_lock();\n@@ -993,1 +993,1 @@\n-      r->recycle();\n+      r->try_recycle_under_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -886,2 +886,1 @@\n-  _affiliated_region_count++;\n-  return _affiliated_region_count;\n+  return Atomic::add(&_affiliated_region_count, (size_t) 1);\n@@ -895,1 +894,1 @@\n-  _affiliated_region_count--;\n+  auto affiliated_region_count = Atomic::sub(&_affiliated_region_count, (size_t) 1);\n@@ -897,1 +896,1 @@\n-         (_used + _humongous_waste <= _affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n+         (used() + _humongous_waste <= affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n@@ -899,1 +898,5 @@\n-  return _affiliated_region_count;\n+  return affiliated_region_count;\n+}\n+\n+size_t ShenandoahGeneration::decrement_affiliated_region_count_without_lock() {\n+  return Atomic::sub(&_affiliated_region_count, (size_t) 1);\n@@ -904,2 +907,1 @@\n-  _affiliated_region_count += delta;\n-  return _affiliated_region_count;\n+  return Atomic::add(&_affiliated_region_count, delta);\n@@ -910,1 +912,1 @@\n-  assert(_affiliated_region_count >= delta, \"Affiliated region count cannot be negative\");\n+  assert(Atomic::load(&_affiliated_region_count) >= delta, \"Affiliated region count cannot be negative\");\n@@ -912,1 +914,1 @@\n-  _affiliated_region_count -= delta;\n+  auto const affiliated_region_count = Atomic::sub(&_affiliated_region_count, delta);\n@@ -914,1 +916,1 @@\n-         (_used + _humongous_waste <= _affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n+         (_used + _humongous_waste <= affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n@@ -916,1 +918,1 @@\n-  return _affiliated_region_count;\n+  return affiliated_region_count;\n@@ -921,2 +923,2 @@\n-  _affiliated_region_count = num_regions;\n-  _used = num_bytes;\n+  Atomic::store(&_affiliated_region_count, num_regions);\n+  Atomic::store(&_used, num_bytes);\n@@ -951,1 +953,1 @@\n-  return _affiliated_region_count;\n+  return Atomic::load(&_affiliated_region_count);\n@@ -956,1 +958,2 @@\n-  if (_affiliated_region_count > result) {\n+  auto const used_regions = this->used_regions();\n+  if (used_regions > result) {\n@@ -959,1 +962,1 @@\n-    result -= _affiliated_region_count;\n+    result -= used_regions;\n@@ -965,1 +968,1 @@\n-  return _affiliated_region_count * ShenandoahHeapRegion::region_size_bytes();\n+  return used_regions() * ShenandoahHeapRegion::region_size_bytes();\n@@ -999,1 +1002,1 @@\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n+         (used_regions_size() >= used()),\n@@ -1023,1 +1026,1 @@\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n+         (used_regions_size() >= used()),\n@@ -1028,1 +1031,1 @@\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() <= _max_capacity),\n+         (used_regions_size() <= _max_capacity),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  size_t _affiliated_region_count;\n+  volatile size_t _affiliated_region_count;\n@@ -134,1 +134,1 @@\n-  size_t used() const override { return _used; }\n+  size_t used() const override { return Atomic::load(&_used); }\n@@ -222,0 +222,2 @@\n+  \/\/ Same as decrement_affiliated_region_count, but w\/o the need to hold heap lock before being called.\n+  size_t decrement_affiliated_region_count_without_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -608,1 +608,1 @@\n-  inline ShenandoahAffiliation region_affiliation(const ShenandoahHeapRegion* r);\n+  inline ShenandoahAffiliation region_affiliation(const ShenandoahHeapRegion* r) const;\n@@ -611,1 +611,1 @@\n-  inline ShenandoahAffiliation region_affiliation(size_t index);\n+  inline ShenandoahAffiliation region_affiliation(size_t index) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-  switch (_affiliations[index]) {\n+  switch (region_affiliation(index)) {\n@@ -385,1 +385,1 @@\n-    assert(false, \"Bad affiliation (%d) for region \" SIZE_FORMAT, _affiliations[index], index);\n+    assert(false, \"Bad affiliation (%d) for region \" SIZE_FORMAT, region_affiliation(index), index);\n@@ -391,1 +391,1 @@\n-  return is_in_reserved(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahAffiliation::YOUNG_GENERATION);\n+  return is_in_reserved(p) && (region_affiliation(heap_region_index_containing(p)) == ShenandoahAffiliation::YOUNG_GENERATION);\n@@ -395,1 +395,1 @@\n-  return is_in_reserved(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahAffiliation::OLD_GENERATION);\n+  return is_in_reserved(p) && (region_affiliation(heap_region_index_containing(p)) == ShenandoahAffiliation::OLD_GENERATION);\n@@ -402,2 +402,2 @@\n-inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(const ShenandoahHeapRegion *r) {\n-  return (ShenandoahAffiliation) _affiliations[r->index()];\n+inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(const ShenandoahHeapRegion *r) const {\n+  return region_affiliation(r->index());\n@@ -422,1 +422,1 @@\n-  if ((orig_affiliation == ShenandoahAffiliation::FREE) || (new_affiliation == ShenandoahAffiliation::FREE)) {\n+  if (orig_affiliation == ShenandoahAffiliation::FREE) {\n@@ -431,1 +431,1 @@\n-  _affiliations[r->index()] = (uint8_t) new_affiliation;\n+  Atomic::store(_affiliations + r->index(), (uint8_t) new_affiliation);\n@@ -434,2 +434,2 @@\n-inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(size_t index) {\n-  return (ShenandoahAffiliation) _affiliations[index];\n+inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(size_t index) const {\n+  return (ShenandoahAffiliation) Atomic::load(_affiliations + index);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  _recycling.unset();\n@@ -95,1 +96,1 @@\n-  ss.print(\"Illegal region state transition from \\\"%s\\\", at %s\\n  \", region_state_to_string(_state), method);\n+  ss.print(\"Illegal region state transition from \\\"%s\\\", at %s\\n  \", region_state_to_string(state()), method);\n@@ -103,1 +104,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -123,1 +124,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -149,1 +150,2 @@\n-  switch (_state) {\n+  auto cur_state = state();\n+  switch (cur_state) {\n@@ -156,1 +158,1 @@\n-      if (_state == _humongous_start || _state == _humongous_cont) {\n+      if (cur_state == _humongous_start || cur_state == _humongous_cont) {\n@@ -180,1 +182,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -197,1 +199,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -212,1 +214,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -229,1 +231,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -245,1 +247,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -256,1 +258,1 @@\n-      _state = _pinned_cset;\n+      set_state(_pinned_cset);\n@@ -267,1 +269,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -289,1 +291,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -302,1 +304,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -332,1 +334,0 @@\n-  shenandoah_assert_heaplocked();\n@@ -335,1 +336,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -347,1 +348,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -361,1 +362,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -402,1 +403,1 @@\n-  switch (_state) {\n+  switch (state()) {\n@@ -572,4 +573,0 @@\n-void ShenandoahHeapRegion::recycle() {\n-  shenandoah_assert_heaplocked();\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  ShenandoahGeneration* generation = heap->generation_for(affiliation());\n@@ -577,2 +574,3 @@\n-  heap->decrease_used(generation, used());\n-  generation->decrement_affiliated_region_count();\n+void ShenandoahHeapRegion::recycle_internal() {\n+  assert(_recycling.is_set() && is_trash(), \"Wrong state\");\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -583,1 +581,0 @@\n-\n@@ -585,1 +582,0 @@\n-\n@@ -587,0 +583,3 @@\n+  if (ZapUnusedHeapArea) {\n+    SpaceMangler::mangle_region(MemRegion(bottom(), end()));\n+  }\n@@ -589,1 +588,0 @@\n-\n@@ -591,2 +589,40 @@\n-  if (ZapUnusedHeapArea) {\n-    SpaceMangler::mangle_region(MemRegion(bottom(), end()));\n+}\n+\n+void ShenandoahHeapRegion::try_recycle_under_lock() {\n+  shenandoah_assert_heaplocked();\n+  if (is_trash() && _recycling.try_set()) {\n+    if (is_trash()) {\n+      ShenandoahHeap* heap = ShenandoahHeap::heap();\n+      ShenandoahGeneration* generation = heap->generation_for(affiliation());\n+\n+      heap->decrease_used(generation, used());\n+      generation->decrement_affiliated_region_count();\n+\n+      recycle_internal();\n+    }\n+    _recycling.unset();\n+  } else {\n+    \/\/ Ensure recycling is unset before returning to mutator to continue memory allocation.\n+    while (_recycling.is_set()) {\n+      if (os::is_MP()) {\n+        SpinPause();\n+      } else {\n+        os::naked_yield();\n+      }\n+    }\n+  }\n+}\n+\n+void ShenandoahHeapRegion::try_recycle() {\n+  shenandoah_assert_not_heaplocked();\n+  if (is_trash() && _recycling.try_set()) {\n+    \/\/ Double check region state after win the race to set recycling flag\n+    if (is_trash()) {\n+      ShenandoahHeap* heap = ShenandoahHeap::heap();\n+      ShenandoahGeneration* generation = heap->generation_for(affiliation());\n+      heap->decrease_used(generation, used());\n+      generation->decrement_affiliated_region_count_without_lock();\n+\n+      recycle_internal();\n+    }\n+    _recycling.unset();\n@@ -798,1 +834,1 @@\n-    evt.set_from(_state);\n+    evt.set_from(state());\n@@ -802,1 +838,1 @@\n-  _state = to;\n+  Atomic::store(&_state, to);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":68,"deletions":32,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+  void recycle_internal();\n@@ -191,12 +192,15 @@\n-  \/\/ Individual states:\n-  bool is_empty_uncommitted()      const { return _state == _empty_uncommitted; }\n-  bool is_empty_committed()        const { return _state == _empty_committed; }\n-  bool is_regular()                const { return _state == _regular; }\n-  bool is_humongous_continuation() const { return _state == _humongous_cont; }\n-\n-  \/\/ Participation in logical groups:\n-  bool is_empty()                  const { return is_empty_committed() || is_empty_uncommitted(); }\n-  bool is_active()                 const { return !is_empty() && !is_trash(); }\n-  bool is_trash()                  const { return _state == _trash; }\n-  bool is_humongous_start()        const { return _state == _humongous_start || _state == _pinned_humongous_start; }\n-  bool is_humongous()              const { return is_humongous_start() || is_humongous_continuation(); }\n+  \/\/ Primitive state predicates\n+  bool is_empty_uncommitted()      const { return state() == _empty_uncommitted; }\n+  bool is_empty_committed()        const { return state() == _empty_committed; }\n+  bool is_regular()                const { return state() == _regular; }\n+  bool is_humongous_continuation() const { return state() == _humongous_cont; }\n+  bool is_regular_pinned()         const { return state() == _pinned; }\n+  bool is_trash()                  const { return state() == _trash; }\n+\n+  \/\/ Derived state predicates (boolean combinations of individual states)\n+  bool static is_empty_state(RegionState state) { return state == _empty_committed || state == _empty_uncommitted; }\n+  bool static is_humongous_start_state(RegionState state) { return state == _humongous_start || state == _pinned_humongous_start; }\n+  bool is_empty()                  const { return is_empty_state(this->state()); }\n+  bool is_active()                 const { auto cur_state = state(); return !is_empty_state(cur_state) && cur_state != _trash; }\n+  bool is_humongous_start()        const { return is_humongous_start_state(state()); }\n+  bool is_humongous()              const { auto cur_state = state(); return is_humongous_start_state(cur_state) || cur_state == _humongous_cont; }\n@@ -204,3 +208,2 @@\n-  bool is_cset()                   const { return _state == _cset   || _state == _pinned_cset; }\n-  bool is_pinned()                 const { return _state == _pinned || _state == _pinned_cset || _state == _pinned_humongous_start; }\n-  bool is_regular_pinned()         const { return _state == _pinned; }\n+  bool is_cset()                   const { auto cur_state = state(); return cur_state == _cset || cur_state == _pinned_cset; }\n+  bool is_pinned()                 const { auto cur_state = state(); return cur_state == _pinned || cur_state == _pinned_cset || cur_state == _pinned_humongous_start; }\n@@ -213,2 +216,2 @@\n-  bool is_alloc_allowed()          const { return is_empty() || is_regular() || _state == _pinned; }\n-  bool is_stw_move_allowed()       const { return is_regular() || _state == _cset || (ShenandoahHumongousMoves && _state == _humongous_start); }\n+  bool is_alloc_allowed()          const { auto cur_state = state(); return is_empty_state(cur_state) || cur_state == _regular || cur_state == _pinned; }\n+  bool is_stw_move_allowed()       const { auto cur_state = state(); return cur_state == _regular || cur_state == _cset || (ShenandoahHumongousMoves && cur_state == _humongous_start); }\n@@ -216,2 +219,2 @@\n-  RegionState state()              const { return _state; }\n-  int  state_ordinal()             const { return region_state_to_ordinal(_state); }\n+  RegionState state()              const { return Atomic::load(&_state); }\n+  int  state_ordinal()             const { return region_state_to_ordinal(state()); }\n@@ -246,1 +249,1 @@\n-  RegionState _state;\n+  volatile RegionState _state;\n@@ -264,0 +267,2 @@\n+  ShenandoahSharedFlag _recycling; \/\/ Used to indicate that the region is being recycled; see try_recycle*().\n+\n@@ -379,1 +384,3 @@\n-  void recycle();\n+  void try_recycle_under_lock();\n+\n+  void try_recycle();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -40,1 +41,1 @@\n-  return ReservedSpace::allocation_align_size_up(heap_size \/ mark_distance());\n+  return os::align_up_vm_allocation_granularity(heap_size \/ mark_distance());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStackWatermark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,4 @@\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_cleanup() {\n+  return ConcGCThreads;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+\n+  \/\/ Calculate workers for concurrent cleanup\n+  static uint calc_workers_for_conc_cleanup();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  nonstatic_field(ShenandoahHeapRegion, _state,                    ShenandoahHeapRegion::RegionState) \\\n+  volatile_nonstatic_field(ShenandoahHeapRegion, _state,           ShenandoahHeapRegion::RegionState) \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/vmStructs_shenandoah.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zIterator.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zReferenceProcessor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zUncoloredRoot.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zValue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrMemorySpace.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-  reservation_size_request_bytes = ReservedSpace::allocation_align_size_up(reservation_size_request_bytes);\n+  reservation_size_request_bytes = os::align_up_vm_allocation_granularity(reservation_size_request_bytes);\n@@ -427,1 +427,1 @@\n-  block_size_request_bytes = ReservedSpace::allocation_align_size_up(block_size_request_bytes);\n+  block_size_request_bytes = os::align_up_vm_allocation_granularity(block_size_request_bytes);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrMethodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrVersionSystem.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/libadt\/vectset.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/libadt\/vectset.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,0 +203,1 @@\n+  assert(is_aligned(committed_size, rs.page_size()), \"must be page aligned\");\n@@ -211,7 +212,2 @@\n-  const size_t page_size = rs.page_size();\n-  const size_t granularity = os::vm_allocation_granularity();\n-  const size_t c_size = align_up(committed_size, page_size);\n-  assert(c_size <= rs.size(), \"alignment made committed size to large\");\n-\n-  os::trace_page_sizes(_name, c_size, rs.size(), rs.base(), rs.size(), page_size);\n-  if (!_memory.initialize(rs, c_size)) {\n+  os::trace_page_sizes(_name, committed_size, rs.size(), rs.base(), rs.size(), rs.page_size());\n+  if (!_memory.initialize(rs, committed_size)) {\n@@ -225,1 +221,1 @@\n-  const size_t reserved_segments_alignment = MAX2(os::vm_page_size(), granularity);\n+  const size_t reserved_segments_alignment = MAX2(os::vm_page_size(), os::vm_allocation_granularity());\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,14 +332,0 @@\n-size_t ReservedSpace::page_align_size_up(size_t size) {\n-  return align_up(size, os::vm_page_size());\n-}\n-\n-\n-size_t ReservedSpace::page_align_size_down(size_t size) {\n-  return align_down(size, os::vm_page_size());\n-}\n-\n-\n-size_t ReservedSpace::allocation_align_size_up(size_t size) {\n-  return align_up(size, os::vm_allocation_granularity());\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -106,4 +106,0 @@\n-  \/\/ Alignment\n-  static size_t page_align_size_up(size_t size);\n-  static size_t page_align_size_down(size_t size);\n-  static size_t allocation_align_size_up(size_t size);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -179,0 +180,6 @@\n+  \/\/ This has already been checked for SharedBaseAddress and if this fails, it's a bug in the allocation code.\n+  if (!set_klass_decode_mode()) {\n+    fatal(\"base=\" PTR_FORMAT \" given with shift %d, cannot be used to encode class pointers\",\n+          p2i(_base), _shift);\n+  }\n+\n@@ -270,0 +277,14 @@\n+  \/\/ Initialize klass decode mode and check compability with decode instructions\n+  if (!set_klass_decode_mode()) {\n+\n+    \/\/ Give fatal error if this is a specified address\n+    if ((address)CompressedClassSpaceBaseAddress == _base) {\n+      vm_exit_during_initialization(\n+            err_msg(\"CompressedClassSpaceBaseAddress=\" PTR_FORMAT \" given with shift %d, cannot be used to encode class pointers\",\n+                    CompressedClassSpaceBaseAddress, _shift));\n+    } else {\n+      \/\/ If this fails, it's a bug in the allocation code.\n+      fatal(\"CompressedClassSpaceBaseAddress=\" PTR_FORMAT \" given with shift %d, cannot be used to encode class pointers\",\n+            p2i(_base), _shift);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -261,0 +261,3 @@\n+  \/\/ Check that with the given base, shift and range, aarch64 an encode and decode the klass pointer.\n+  static bool check_klass_decode_mode(address base, int shift, const size_t range) NOT_AARCH64({ return true;});\n+  static bool set_klass_decode_mode() NOT_AARCH64({ return true;});  \/\/ can be called after initialization\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/constMethodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/constantPool.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1428,0 +1428,14 @@\n+Node* MaxINode::Identity(PhaseGVN* phase) {\n+  const TypeInt* t1 = phase->type(in(1))->is_int();\n+  const TypeInt* t2 = phase->type(in(2))->is_int();\n+\n+  \/\/ Can we determine the maximum statically?\n+  if (t1->_lo >= t2->_hi) {\n+    return in(1);\n+  } else if (t2->_lo >= t1->_hi) {\n+    return in(2);\n+  }\n+\n+  return MaxNode::Identity(phase);\n+}\n+\n@@ -1447,0 +1461,14 @@\n+Node* MinINode::Identity(PhaseGVN* phase) {\n+  const TypeInt* t1 = phase->type(in(1))->is_int();\n+  const TypeInt* t2 = phase->type(in(2))->is_int();\n+\n+  \/\/ Can we determine the minimum statically?\n+  if (t1->_lo >= t2->_hi) {\n+    return in(2);\n+  } else if (t2->_lo >= t1->_hi) {\n+    return in(1);\n+  }\n+\n+  return MaxNode::Identity(phase);\n+}\n+\n@@ -1589,0 +1617,35 @@\n+int MaxNode::opposite_opcode() const {\n+  if (Opcode() == max_opcode()) {\n+    return min_opcode();\n+  } else {\n+    assert(Opcode() == min_opcode(), \"Caller should be either %s or %s, but is %s\", NodeClassNames[max_opcode()], NodeClassNames[min_opcode()], NodeClassNames[Opcode()]);\n+    return max_opcode();\n+  }\n+}\n+\n+\/\/ Given a redundant structure such as Max\/Min(A, Max\/Min(B, C)) where A == B or A == C, return the useful part of the structure.\n+\/\/ 'operation' is the node expected to be the inner 'Max\/Min(B, C)', and 'operand' is the node expected to be the 'A' operand of the outer node.\n+Node* MaxNode::find_identity_operation(Node* operation, Node* operand) {\n+  if (operation->Opcode() == Opcode() || operation->Opcode() == opposite_opcode()) {\n+    Node* n1 = operation->in(1);\n+    Node* n2 = operation->in(2);\n+\n+    \/\/ Given Op(A, Op(B, C)), see if either A == B or A == C is true.\n+    if (n1 == operand || n2 == operand) {\n+      \/\/ If the operations are the same return the inner operation, as Max(A, Max(A, B)) == Max(A, B).\n+      if (operation->Opcode() == Opcode()) {\n+        return operation;\n+      }\n+\n+      \/\/ If the operations are different return the operand 'A', as Max(A, Min(A, B)) == A if the value isn't floating point.\n+      \/\/ With floating point values, the identity doesn't hold if B == NaN.\n+      const Type* type = bottom_type();\n+      if (type->isa_int() || type->isa_long()) {\n+        return operand;\n+      }\n+    }\n+  }\n+\n+  return nullptr;\n+}\n+\n@@ -1594,0 +1657,10 @@\n+  Node* identity_1 = MaxNode::find_identity_operation(in(2), in(1));\n+  if (identity_1 != nullptr) {\n+    return identity_1;\n+  }\n+\n+  Node* identity_2 = MaxNode::find_identity_operation(in(1), in(2));\n+  if (identity_2 != nullptr) {\n+    return identity_2;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -265,2 +265,1 @@\n-\/\/ all the behavior of addition on a ring.  Only new thing is that we allow\n-\/\/ 2 equal inputs to be equal.\n+\/\/ all the behavior of addition on a ring.\n@@ -280,0 +279,2 @@\n+  Node* find_identity_operation(Node* operation, Node* operand);\n+  int opposite_opcode() const;\n@@ -324,0 +325,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n@@ -340,1 +342,2 @@\n-  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n+  virtual Node* Identity(PhaseGVN* phase);\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1359,0 +1359,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -821,3 +821,0 @@\n-  case vmIntrinsics::_VectorShuffleIota:\n-  case vmIntrinsics::_VectorShuffleToVector:\n-  case vmIntrinsics::_VectorWrapShuffleIndexes:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2566,0 +2566,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3454,0 +3454,3 @@\n+    if (failing()) {\n+      return;\n+    }\n@@ -5561,1 +5564,0 @@\n-  assert(failing_internal(), \"should be failing\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,15 +44,1 @@\n-      jvalue ele1 = get_array()->at(i);\n-      jvalue ele2 = other.get_array()->at(i);\n-      bool is_eq;\n-      switch (type()) {\n-        case T_BOOLEAN: is_eq = ele1.z == ele2.z; break;\n-        case T_BYTE:    is_eq = ele1.b == ele2.b; break;\n-        case T_CHAR:    is_eq = ele1.c == ele2.c; break;\n-        case T_SHORT:   is_eq = ele1.s == ele2.s; break;\n-        case T_INT:     is_eq = ele1.i == ele2.i; break;\n-        case T_LONG:    is_eq = ele1.j == ele2.j; break;\n-        case T_FLOAT:   is_eq = jint_cast(ele1.f)  == jint_cast(ele2.f);  break;\n-        case T_DOUBLE:  is_eq = jlong_cast(ele1.d) == jlong_cast(ele2.d); break;\n-        default: ShouldNotReachHere(); is_eq = false;\n-      }\n-      if (!is_eq) {\n+      if (get_array()->at(i) != other.get_array()->at(i)) {\n@@ -64,0 +50,1 @@\n+\n@@ -78,0 +65,9 @@\n+int ConstantTable::alignment() const {\n+  int res = 1;\n+  for (int i = 0; i < _constants.length(); i++) {\n+    const Constant& c = _constants.at(i);\n+    res = MAX2(res, c.alignment());\n+  }\n+  return res;\n+}\n+\n@@ -79,4 +75,24 @@\n-  \/\/ sort descending\n-  if (a->freq() > b->freq())  return -1;\n-  if (a->freq() < b->freq())  return  1;\n-  return 0;\n+  \/\/ put the ones with large alignments first\n+  if (a->alignment() > 8 && b->alignment() > 8) {\n+    \/\/ sort them by alignment\n+    if (a->alignment() > b->alignment()) {\n+      return -1;\n+    } else if (a->alignment() < b->alignment()) {\n+      return 1;\n+    } else {\n+      return 0;\n+    }\n+  } else if (a->alignment() > 8) {\n+    return -1;\n+  } else if (b->alignment() > 8) {\n+    return 1;\n+  } else {\n+    \/\/ for constants with small alignments, sort them by frequency\n+    if (a->freq() > b->freq()) {\n+      return -1;\n+    } else if (a->freq() < b->freq()) {\n+      return 1;\n+    } else {\n+      return 0;\n+    }\n+  }\n@@ -87,1 +103,1 @@\n-    return type2aelembytes(con->type()) * con->get_array()->length();\n+    return con->get_array()->length();\n@@ -152,1 +168,1 @@\n-      constant_addr = masm->array_constant(con.type(), con.get_array(), con.alignment());\n+      constant_addr = masm->array_constant(con.get_array(), con.alignment());\n@@ -254,3 +270,2 @@\n-ConstantTable::Constant ConstantTable::add(MachConstantNode* n, BasicType bt,\n-                                           GrowableArray<jvalue>* array, int alignment) {\n-  Constant con(bt, array, alignment);\n+ConstantTable::Constant ConstantTable::add(MachConstantNode* n, GrowableArray<jbyte>* array, int alignment) {\n+  Constant con(array, alignment);\n@@ -261,3 +276,2 @@\n-ConstantTable::Constant ConstantTable::add(MachConstantNode* n, BasicType bt,\n-                                           GrowableArray<jvalue>* array) {\n-  return add(n, bt, array, array->length() * type2aelembytes(bt));\n+ConstantTable::Constant ConstantTable::add(MachConstantNode* n, GrowableArray<jbyte>* array) {\n+  return add(n, array, array->length());\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":42,"deletions":28,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-      GrowableArray<jvalue>* _array;\n+      GrowableArray<jbyte>* _array;\n@@ -75,2 +75,2 @@\n-    Constant(BasicType type, GrowableArray<jvalue>* array, int alignment, bool can_be_reused = true) :\n-      _type(type),\n+    Constant(GrowableArray<jbyte>* array, int alignment) :\n+      _type(T_BYTE),\n@@ -81,1 +81,1 @@\n-      _can_be_reused(can_be_reused)\n+      _can_be_reused(true)\n@@ -83,1 +83,0 @@\n-      assert(is_java_primitive(type), \"not applicable for %s\", type2name(type));\n@@ -85,2 +84,2 @@\n-      _v._array = new GrowableArray<jvalue>(array->length());\n-      for (jvalue ele : *array) {\n+      _v._array = new GrowableArray<jbyte>(array->length());\n+      for (jbyte ele : *array) {\n@@ -105,1 +104,1 @@\n-    GrowableArray<jvalue>* get_array() const { return _v._array; }\n+    const GrowableArray<jbyte>* get_array() const { return _v._array; }\n@@ -138,0 +137,4 @@\n+  \/\/ The minimum alignment requirement of the constant table, must be a power of 2. The constant\n+  \/\/ section of the nmethod must satisfy this value.\n+  int alignment() const;\n+\n@@ -153,2 +156,2 @@\n-  Constant add(MachConstantNode* n, BasicType bt, GrowableArray<jvalue>* array);\n-  Constant add(MachConstantNode* n, BasicType bt, GrowableArray<jvalue>* array, int alignment);\n+  Constant add(MachConstantNode* n, GrowableArray<jbyte>* array);\n+  Constant add(MachConstantNode* n, GrowableArray<jbyte>* array, int alignment);\n","filename":"src\/hotspot\/share\/opto\/constantTable.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -450,0 +450,41 @@\n+template <typename TypeClass, typename Unsigned>\n+Node* unsigned_div_ideal(PhaseGVN* phase, bool can_reshape, Node* div) {\n+  \/\/ Check for dead control input\n+  if (div->in(0) != nullptr && div->remove_dead_region(phase, can_reshape)) {\n+    return div;\n+  }\n+  \/\/ Don't bother trying to transform a dead node\n+  if (div->in(0) != nullptr && div->in(0)->is_top()) {\n+    return nullptr;\n+  }\n+\n+  const Type* t = phase->type(div->in(2));\n+  if (t == Type::TOP) {\n+    return nullptr;\n+  }\n+  const TypeClass* type_divisor = t->cast<TypeClass>();\n+\n+  \/\/ Check for useless control input\n+  \/\/ Check for excluding div-zero case\n+  if (div->in(0) != nullptr && (type_divisor->_hi < 0 || type_divisor->_lo > 0)) {\n+    div->set_req(0, nullptr); \/\/ Yank control input\n+    return div;\n+  }\n+\n+  if (!type_divisor->is_con()) {\n+    return nullptr;\n+  }\n+  Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con()); \/\/ Get divisor\n+\n+  if (divisor == 0 || divisor == 1) {\n+    return nullptr; \/\/ Dividing by zero constant does not idealize\n+  }\n+\n+  if (is_power_of_2(divisor)) {\n+    return make_urshift<TypeClass>(div->in(1), phase->intcon(log2i_graceful(divisor)));\n+  }\n+\n+  return nullptr;\n+}\n+\n+\n@@ -876,3 +917,1 @@\n-  \/\/ Check for dead control input\n-  if (in(0) && remove_dead_region(phase, can_reshape))  return this;\n-  return nullptr;\n+  return unsigned_div_ideal<TypeInt, juint>(phase, can_reshape, this);\n@@ -881,1 +920,0 @@\n-\n@@ -915,3 +953,1 @@\n-  \/\/ Check for dead control input\n-  if (in(0) && remove_dead_region(phase, can_reshape))  return this;\n-  return nullptr;\n+  return unsigned_div_ideal<TypeLong, julong>(phase, can_reshape, this);\n@@ -920,1 +956,0 @@\n-\n@@ -1087,1 +1122,3 @@\n-Node *UModINode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+\n+template <typename TypeClass, typename Unsigned>\n+static Node* unsigned_mod_ideal(PhaseGVN* phase, bool can_reshape, Node* mod) {\n@@ -1089,1 +1126,35 @@\n-  if( in(0) && remove_dead_region(phase, can_reshape) )  return this;\n+  if (mod->in(0) != nullptr && mod->remove_dead_region(phase, can_reshape)) {\n+    return mod;\n+  }\n+  \/\/ Don't bother trying to transform a dead node\n+  if (mod->in(0) != nullptr && mod->in(0)->is_top()) {\n+    return nullptr;\n+  }\n+\n+  \/\/ Get the modulus\n+  const Type* t = phase->type(mod->in(2));\n+  if (t == Type::TOP) {\n+    return nullptr;\n+  }\n+  const TypeClass* type_divisor = t->cast<TypeClass>();\n+\n+  \/\/ Check for useless control input\n+  \/\/ Check for excluding mod-zero case\n+  if (mod->in(0) != nullptr && (type_divisor->_hi < 0 || type_divisor->_lo > 0)) {\n+    mod->set_req(0, nullptr); \/\/ Yank control input\n+    return mod;\n+  }\n+\n+  if (!type_divisor->is_con()) {\n+    return nullptr;\n+  }\n+  Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con());\n+\n+  if (divisor == 0) {\n+    return nullptr;\n+  }\n+\n+  if (is_power_of_2(divisor)) {\n+    return make_and<TypeClass>(mod->in(1), phase->makecon(TypeClass::make(divisor - 1)));\n+  }\n+\n@@ -1093,0 +1164,50 @@\n+template <typename TypeClass, typename Unsigned, typename Signed>\n+static const Type* unsigned_mod_value(PhaseGVN* phase, const Node* mod) {\n+  const Type* t1 = phase->type(mod->in(1));\n+  const Type* t2 = phase->type(mod->in(2));\n+  if (t1 == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  if (t2 == Type::TOP) {\n+    return Type::TOP;\n+  }\n+\n+  \/\/ 0 MOD X is 0\n+  if (t1 == TypeClass::ZERO) {\n+    return TypeClass::ZERO;\n+  }\n+  \/\/ X MOD X is 0\n+  if (mod->in(1) == mod->in(2)) {\n+    return TypeClass::ZERO;\n+  }\n+\n+  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n+  const Type* bot = mod->bottom_type();\n+  if ((t1 == bot) || (t2 == bot) ||\n+      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM)) {\n+    return bot;\n+  }\n+\n+  const TypeClass* type_divisor = t2->cast<TypeClass>();\n+  if (type_divisor->is_con() && type_divisor->get_con() == 1) {\n+    return TypeClass::ZERO;\n+  }\n+\n+  const TypeClass* type_dividend = t1->cast<TypeClass>();\n+  if (type_dividend->is_con() && type_divisor->is_con()) {\n+    Unsigned dividend = static_cast<Unsigned>(type_dividend->get_con());\n+    Unsigned divisor = static_cast<Unsigned>(type_divisor->get_con());\n+    return TypeClass::make(static_cast<Signed>(dividend % divisor));\n+  }\n+\n+  return bot;\n+}\n+\n+Node* UModINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return unsigned_mod_ideal<TypeInt, juint>(phase, can_reshape, this);\n+}\n+\n+const Type* UModINode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeInt, juint, jint>(phase, this);\n+}\n+\n@@ -1306,3 +1427,1 @@\n-  \/\/ Check for dead control input\n-  if( in(0) && remove_dead_region(phase, can_reshape) )  return this;\n-  return nullptr;\n+  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n@@ -1311,0 +1430,3 @@\n+const Type* UModLNode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n+}\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":136,"deletions":14,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,0 +174,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n@@ -185,0 +186,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n","filename":"src\/hotspot\/share\/opto\/divnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,0 @@\n-#ifdef ASSERT\n@@ -258,0 +257,1 @@\n+#ifdef ASSERT\n@@ -270,1 +270,3 @@\n-    assert(false, \"unscheduable graph\");\n+    assert(false, \"unschedulable graph\");\n+#endif\n+    cfg->C->record_failure(\"unschedulable graph\");\n@@ -273,1 +275,0 @@\n-#endif\n@@ -288,1 +289,4 @@\n-      DEBUG_ONLY(assert_dom(deepb, inb, n, cfg));\n+      assert_dom(deepb, inb, n, cfg);\n+      if (cfg->C->failing()) {\n+        return nullptr;\n+      }\n@@ -375,0 +379,3 @@\n+          if (C->failing()) {\n+            return false;\n+          }\n@@ -526,1 +533,4 @@\n-        DEBUG_ONLY(assert_dom(deepb, inb, load, cfg));\n+        assert_dom(deepb, inb, load, cfg);\n+        if (cfg->C->failing()) {\n+          return nullptr;\n+        }\n@@ -718,0 +728,3 @@\n+    if (C->failing()) {\n+      return nullptr;\n+    }\n@@ -1525,0 +1538,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1617,2 +1633,2 @@\n-    assert(false, \"early schedule failed\");\n-    C->record_method_not_compilable(\"early schedule failed\");\n+    assert(C->failure_is_artificial(), \"early schedule failed\");\n+    C->record_method_not_compilable(\"early schedule failed\" DEBUG_ONLY(COMMA true));\n@@ -1663,0 +1679,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1732,0 +1751,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -896,1 +896,1 @@\n-  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem, bool shuffle_to_vector = false);\n+  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/idealKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -522,0 +522,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n@@ -1392,0 +1395,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -722,2 +722,0 @@\n-  case vmIntrinsics::_VectorShuffleIota:\n-    return inline_vector_shuffle_iota();\n@@ -726,4 +724,0 @@\n-  case vmIntrinsics::_VectorShuffleToVector:\n-    return inline_vector_shuffle_to_vector();\n-  case vmIntrinsics::_VectorWrapShuffleIndexes:\n-    return inline_vector_wrap_shuffle_indexes();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -381,4 +381,0 @@\n-  bool inline_vector_shuffle_to_vector();\n-  bool inline_vector_wrap_shuffle_indexes();\n-  bool inline_vector_shuffle_iota();\n-  Node* partially_wrap_indexes(Node* index_vec, int num_elem, BasicType type_bt);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  if (!livein->is_empty()) {\n+  if (!lo->is_empty()) {\n","filename":"src\/hotspot\/share\/opto\/live.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -769,2 +769,1 @@\n-      ConINode* con_stride = _igvn.intcon(stride);\n-      set_ctrl(con_stride, C->root());\n+      ConINode* con_stride = intcon(stride);\n@@ -778,2 +777,1 @@\n-      ConLNode* con_stride = _igvn.longcon(stride);\n-      set_ctrl(con_stride, C->root());\n+      ConLNode* con_stride = longcon(stride);\n@@ -796,2 +794,1 @@\n-    ConNode* con_scale = _igvn.intcon(scale);\n-    set_ctrl(con_scale, C->root());\n+    ConNode* con_scale = intcon(scale);\n@@ -814,2 +811,1 @@\n-      con_scale = _igvn.longcon(scale);\n-      set_ctrl(con_scale, C->root());\n+      con_scale = longcon(scale);\n@@ -1345,2 +1341,1 @@\n-  ConNode* zero = _igvn.intcon(0);\n-  set_ctrl(zero, C->root());\n+  ConNode* zero = intcon(0);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -357,1 +357,0 @@\n-    Node* zero;\n@@ -359,2 +358,1 @@\n-      zero = phase->_igvn.intcon(0);\n-      n_inv1 = new SubINode(zero, inv1);\n+      n_inv1 = new SubINode(phase->intcon(0), inv1);\n@@ -362,2 +360,1 @@\n-      zero = phase->_igvn.longcon(0L);\n-      n_inv1 = new SubLNode(zero, inv1);\n+      n_inv1 = new SubLNode(phase->longcon(0L), inv1);\n@@ -365,1 +362,0 @@\n-    phase->set_ctrl(zero, phase->C->root());\n@@ -1714,2 +1710,1 @@\n-  Node* unrolled_stride = _igvn.intcon(unrolled_stride_con);\n-  set_ctrl(unrolled_stride, C->root());\n+  Node* unrolled_stride = intcon(unrolled_stride_con);\n@@ -1882,2 +1877,1 @@\n-      new_limit = _igvn.intcon(limit->get_int() - stride_con);\n-      set_ctrl(new_limit, C->root());\n+      new_limit = intcon(limit->get_int() - stride_con);\n@@ -1889,2 +1883,1 @@\n-      Node* stride_l = _igvn.longcon(stride_con);\n-      set_ctrl(stride_l, C->root());\n+      Node* stride_l = longcon(stride_con);\n@@ -1897,2 +1890,1 @@\n-      Node* underflow_clamp_l = _igvn.longcon((stride_con > 0) ? min_jint : max_jint);\n-      set_ctrl(underflow_clamp_l, C->root());\n+      Node* underflow_clamp_l = longcon((stride_con > 0) ? min_jint : max_jint);\n@@ -1988,2 +1980,1 @@\n-  Node *one = _igvn.intcon(1);\n-  set_ctrl(one, C->root());\n+  Node* one = intcon(1);\n@@ -2125,2 +2116,1 @@\n-  Node* scale = _igvn.longcon(scale_con);\n-  set_ctrl(scale, C->root());\n+  Node* scale = longcon(scale_con);\n@@ -2165,2 +2155,1 @@\n-    Node* one = _igvn.longcon(1);\n-    set_ctrl(one, C->root());\n+    Node* one = longcon(1);\n@@ -2371,2 +2360,1 @@\n-      Node *zero = _igvn.zerocon(bt);\n-      set_ctrl(zero, C->root());\n+      Node* zero = zerocon(bt);\n@@ -2423,2 +2411,1 @@\n-          Node *zero = _igvn.integercon(0, exp_bt);\n-          set_ctrl(zero, C->root());\n+          Node* zero = integercon(0, exp_bt);\n@@ -2466,1 +2453,1 @@\n-void PhaseIdealLoop::do_range_check(IdealLoopTree *loop, Node_List &old_new) {\n+void PhaseIdealLoop::do_range_check(IdealLoopTree* loop) {\n@@ -2529,2 +2516,3 @@\n-  \/\/ not loop invariant).\n-  Node* new_limit_ctrl = dominated_node(pre_ctrl, pre_limit_ctrl);\n+  \/\/ not loop invariant). new_limit_ctrl is used for both the pre and main loops. Early control for the main limit may be\n+  \/\/ below the pre loop entry and the pre limit and must be taken into account when initializing new_limit_ctrl.\n+  Node* new_limit_ctrl = dominated_node(pre_ctrl, pre_limit_ctrl, compute_early_ctrl(main_limit, main_limit_ctrl));\n@@ -2542,2 +2530,2 @@\n-  Node* zero = _igvn.longcon(0);\n-  Node* one  = _igvn.longcon(1);\n+  Node* zero = longcon(0);\n+  Node* one  = longcon(1);\n@@ -2545,4 +2533,1 @@\n-  Node* mini = _igvn.longcon(-max_jint);\n-  set_ctrl(zero, C->root());\n-  set_ctrl(one,  C->root());\n-  set_ctrl(mini, C->root());\n+  Node* mini = longcon(-max_jint);\n@@ -2747,2 +2732,1 @@\n-      Node *kill_con = _igvn.intcon(1-flip);\n-      set_ctrl(kill_con, C->root());\n+      Node* kill_con = intcon(1-flip);\n@@ -2781,2 +2765,4 @@\n-  set_ctrl(pre_end->cmp_node(), new_limit_ctrl);\n-  set_ctrl(pre_end->in(1), new_limit_ctrl);\n+  \/\/ Can't use new_limit_ctrl for Bool\/Cmp because it can be out of loop while they are loop variant. Conservatively set\n+  \/\/ control to latest possible one.\n+  set_ctrl(pre_end->cmp_node(), pre_end->in(0));\n+  set_ctrl(pre_end->in(1), pre_end->in(0));\n@@ -2822,2 +2808,2 @@\n-  \/\/ new main_limit can push Bool\/Cmp nodes down (when one of the eliminated condition has parameters that are not loop\n-  \/\/ invariant in the pre loop.\n+  \/\/ new main_limit can push opaque node for zero trip guard down (when one of the eliminated condition has parameters\n+  \/\/ that are not loop invariant in the pre loop).\n@@ -2825,2 +2811,3 @@\n-  set_ctrl(iffm->in(1)->in(1), new_limit_ctrl);\n-  set_ctrl(iffm->in(1), new_limit_ctrl);\n+  \/\/ Bool\/Cmp nodes for zero trip guard should have been assigned control between the main and pre loop (because zero\n+  \/\/ trip guard depends on induction variable value out of pre loop) so shouldn't need to be adjusted\n+  assert(is_dominator(new_limit_ctrl, get_ctrl(iffm->in(1)->in(1))), \"control of cmp should be below control of updated input\");\n@@ -3405,1 +3392,1 @@\n-      phase->do_range_check(this, old_new);\n+      phase->do_range_check(this);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":29,"deletions":42,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,2 +316,1 @@\n-  Node* outer_test = _igvn.intcon(0);\n-  set_ctrl(outer_test, C->root());\n+  Node* outer_test = intcon(0);\n@@ -972,2 +971,1 @@\n-  Node* int_zero = _igvn.intcon(0);\n-  set_ctrl(int_zero, C->root());\n+  Node* int_zero = intcon(0);\n@@ -980,2 +978,1 @@\n-  Node* int_stride = _igvn.intcon(stride_con);\n-  set_ctrl(int_stride, C->root());\n+  Node* int_stride = intcon(stride_con);\n@@ -1276,8 +1273,4 @@\n-  Node* long_zero = _igvn.longcon(0);\n-  set_ctrl(long_zero, C->root());\n-  Node* int_zero = _igvn.intcon(0);\n-  set_ctrl(int_zero, this->C->root());\n-  Node* long_one = _igvn.longcon(1);\n-  set_ctrl(long_one, this->C->root());\n-  Node* int_stride = _igvn.intcon(checked_cast<int>(stride_con));\n-  set_ctrl(int_stride, this->C->root());\n+  Node* long_zero = longcon(0);\n+  Node* int_zero = intcon(0);\n+  Node* long_one = longcon(1);\n+  Node* int_stride = intcon(checked_cast<int>(stride_con));\n@@ -1305,2 +1298,1 @@\n-    Node* K = _igvn.longcon(scale);\n-    set_ctrl(K, this->C->root());\n+    Node* K = longcon(scale);\n@@ -1337,2 +1329,1 @@\n-      Node* max_jint_plus_one_long = _igvn.longcon((jlong)max_jint + 1);\n-      set_ctrl(max_jint_plus_one_long, C->root());\n+      Node* max_jint_plus_one_long = longcon((jlong)max_jint + 1);\n@@ -1392,2 +1383,1 @@\n-    Node* max_jlong_long = _igvn.longcon(max_jlong);\n-    set_ctrl(max_jlong_long, this->C->root());\n+    Node* max_jlong_long = longcon(max_jlong);\n@@ -1427,2 +1417,1 @@\n-    K = _igvn.intcon(checked_cast<int>(scale));\n-    set_ctrl(K, this->C->root());\n+    K = intcon(checked_cast<int>(scale));\n@@ -3158,1 +3147,1 @@\n-    iloop->set_ctrl(zero, igvn->C->root());\n+    iloop->set_root_as_ctrl(zero);\n@@ -4070,2 +4059,1 @@\n-    Node* ratio = _igvn.integercon(ratio_con, stride_con2_bt);\n-    set_ctrl(ratio, C->root());\n+    Node* ratio = integercon(ratio_con, stride_con2_bt);\n@@ -4491,2 +4479,1 @@\n-      ConINode* one = _igvn.intcon(1);\n-      set_ctrl(one, C->root());\n+      ConINode* one = intcon(1);\n@@ -4902,1 +4889,4 @@\n-    split_if_with_blocks( visited, nstack);\n+    split_if_with_blocks(visited, nstack);\n+    if (C->failing()) {\n+      return;\n+    }\n@@ -6426,0 +6416,1 @@\n+    \/\/ We would like to expose this check in product but it appears to be expensive.\n@@ -6869,0 +6860,30 @@\n+ConINode* PhaseIdealLoop::intcon(jint i) {\n+  ConINode* node = _igvn.intcon(i);\n+  set_root_as_ctrl(node);\n+  return node;\n+}\n+\n+ConLNode* PhaseIdealLoop::longcon(jlong i) {\n+  ConLNode* node = _igvn.longcon(i);\n+  set_root_as_ctrl(node);\n+  return node;\n+}\n+\n+ConNode* PhaseIdealLoop::makecon(const Type* t) {\n+  ConNode* node = _igvn.makecon(t);\n+  set_root_as_ctrl(node);\n+  return node;\n+}\n+\n+ConNode* PhaseIdealLoop::integercon(jlong l, BasicType bt) {\n+  ConNode* node = _igvn.integercon(l, bt);\n+  set_root_as_ctrl(node);\n+  return node;\n+}\n+\n+ConNode* PhaseIdealLoop::zerocon(BasicType bt) {\n+  ConNode* node = _igvn.zerocon(bt);\n+  set_root_as_ctrl(node);\n+  return node;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":49,"deletions":28,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -988,0 +988,4 @@\n+  void set_root_as_ctrl(Node* n) {\n+    assert(!has_node(n) || has_ctrl(n), \"\");\n+    _loop_or_ctrl.map(n->_idx, (Node*)((intptr_t)C->root() + 1));\n+  }\n@@ -1424,1 +1428,1 @@\n-  void do_range_check(IdealLoopTree *loop, Node_List &old_new);\n+  void do_range_check(IdealLoopTree* loop);\n@@ -1798,0 +1802,10 @@\n+\n+  ConINode* intcon(jint i);\n+\n+  ConLNode* longcon(jlong i);\n+\n+  ConNode* makecon(const Type* t);\n+\n+  ConNode* integercon(jlong l, BasicType bt);\n+\n+  ConNode* zerocon(BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-      x = ((PhaseGVN&)_igvn).makecon(t);\n+      x = makecon(t);\n@@ -199,2 +199,1 @@\n-      \/\/ Constant's control is always root.\n-      set_ctrl(x, C->root());\n+      assert(get_ctrl(x) == C->root(), \"constant control is not root\");\n@@ -289,0 +288,2 @@\n+    case Op_UDivI:\n+    case Op_UModI:\n@@ -293,0 +294,2 @@\n+    case Op_UDivL:\n+    case Op_UModL:\n@@ -341,2 +344,1 @@\n-  Node *con = _igvn.makecon(pop == Op_IfTrue ? TypeInt::ONE : TypeInt::ZERO);\n-  set_ctrl(con, C->root()); \/\/ Constant gets a new use\n+  Node* con = makecon(pop == Op_IfTrue ? TypeInt::ONE : TypeInt::ZERO);\n@@ -482,2 +484,1 @@\n-      Node* zero = _igvn.integercon(0, bt);\n-      set_ctrl(zero, C->root());\n+      Node* zero = integercon(0, bt);\n@@ -1718,0 +1719,3 @@\n+  if (C->failing()) {\n+    return;\n+  }\n@@ -1910,1 +1914,5 @@\n-        assert(!n->is_Store() && !n->is_LoadStore(), \"no node with a side effect\");\n+        if (n->is_Store() || n->is_LoadStore()) {\n+            assert(false, \"no node with a side effect\");\n+            C->record_failure(\"no node with a side effect\");\n+            return;\n+        }\n@@ -2158,0 +2166,3 @@\n+        if (C->failing()) {\n+          return;\n+        }\n@@ -3088,2 +3099,1 @@\n-  Node *con = _igvn.intcon(proj_con);\n-  set_ctrl(con, C->root());\n+  Node* con = intcon(proj_con);\n@@ -3398,2 +3408,1 @@\n-    rhs_cmpi = _igvn.makecon(TypeInt::ZERO); \/\/ For i < 0\n-    set_ctrl(rhs_cmpi, C->root());\n+    rhs_cmpi = makecon(TypeInt::ZERO); \/\/ For i < 0\n@@ -3428,2 +3437,1 @@\n-  Node *con = _igvn.makecon(lp_proj->is_IfTrue() ? TypeInt::ONE : TypeInt::ZERO);\n-  set_ctrl(con, C->root());\n+  Node* con = makecon(lp_proj->is_IfTrue() ? TypeInt::ONE : TypeInt::ZERO);\n@@ -4811,1 +4819,1 @@\n-    set_ctrl(identity_scalar, C->root());\n+    set_root_as_ctrl(identity_scalar);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1797,1 +1797,0 @@\n-#ifdef ASSERT\n@@ -1804,0 +1803,1 @@\n+#ifdef ASSERT\n@@ -1806,0 +1806,1 @@\n+#endif\n@@ -1807,0 +1808,1 @@\n+    C->record_failure(\"bad AD file\");\n@@ -1808,1 +1810,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -346,0 +346,2 @@\n+  static bool vector_rearrange_requires_load_shuffle(BasicType elem_bt, int vlen);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,0 +229,13 @@\n+template <typename TypeClass>\n+Node* make_and(Node* a, Node* b);\n+\n+template <>\n+inline Node* make_and<TypeLong>(Node* a, Node* b) {\n+  return new AndLNode(a, b);\n+}\n+\n+template <>\n+inline Node* make_and<TypeInt>(Node* a, Node* b) {\n+  return new AndINode(a, b);\n+}\n+\n@@ -361,0 +374,13 @@\n+template <typename TypeClass>\n+Node* make_urshift(Node* a, Node* b);\n+\n+template <>\n+inline Node* make_urshift<TypeLong>(Node* a, Node* b) {\n+  return new URShiftLNode(a, b);\n+}\n+\n+template <>\n+inline Node* make_urshift<TypeInt>(Node* a, Node* b) {\n+  return new URShiftINode(a, b);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1143,1 +1143,0 @@\n-protected:\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1422,1 +1422,1 @@\n-    const_req = constant_table().size() + add_size;\n+    const_req = constant_table().alignment() + constant_table().size() + add_size;\n@@ -1462,0 +1462,1 @@\n+  cb->set_const_section_alignment(constant_table().alignment());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/phase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/phase.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1784,1 +1784,3 @@\n-    case Op_ModI: {\n+    case Op_ModI:\n+    case Op_UDivI:\n+    case Op_UModI: {\n@@ -1794,1 +1796,3 @@\n-    case Op_ModL: {\n+    case Op_ModL:\n+    case Op_UDivL:\n+    case Op_UModL: {\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,2 +277,1 @@\n-  Node* true_con = phase->igvn().intcon(1);\n-  phase->set_ctrl(true_con, phase->C->root());\n+  Node* true_con = phase->intcon(1);\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,0 +343,3 @@\n+  template <typename TypeClass>\n+  const TypeClass* cast() const;\n+\n@@ -2320,0 +2323,9 @@\n+template <>\n+inline const TypeInt* Type::cast<TypeInt>() const {\n+  return is_int();\n+}\n+\n+template <>\n+inline const TypeLong* Type::cast<TypeLong>() const {\n+  return is_long();\n+}\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-static bool is_vector_shuffle(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-}\n-\n-\n@@ -463,2 +458,0 @@\n-    } else if (is_vector_shuffle(from_kls)) {\n-      bt = T_BYTE;\n@@ -509,3 +502,0 @@\n-    } else if (is_vector_shuffle(from_kls) && !vec_unbox->is_shuffle_to_vector()) {\n-      assert(vec_unbox->bottom_type()->is_vect()->element_basic_type() == masktype, \"expect shuffle type consistency\");\n-      vec_val_load = gvn.transform(new VectorLoadShuffleNode(vec_val_load, TypeVect::make(masktype, num_elem)));\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,4 +77,0 @@\n-static bool is_vector_shuffle(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-}\n-\n@@ -165,1 +161,1 @@\n-Node* GraphKit::unbox_vector(Node* v, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem, bool shuffle_to_vector) {\n+Node* GraphKit::unbox_vector(Node* v, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem) {\n@@ -176,1 +172,1 @@\n-  Node* unbox = gvn().transform(new VectorUnboxNode(C, vt, v, merged_memory(), shuffle_to_vector));\n+  Node* unbox = gvn().transform(new VectorUnboxNode(C, vt, v, merged_memory()));\n@@ -517,129 +513,1 @@\n-\/\/ Following routine generates IR corresponding to AbstractShuffle::partiallyWrapIndex method,\n-\/\/ which partially wraps index by modulo VEC_LENGTH and generates a negative index value if original\n-\/\/ index is out of valid index range [0, VEC_LENGTH)\n-\/\/\n-\/\/   wrapped_index = (VEC_LENGTH - 1) & index\n-\/\/   if (index u> VEC_LENGTH) {\n-\/\/     wrapped_index -= VEC_LENGTH;\n-\/\/\n-\/\/ Note: Unsigned greater than comparison treat both <0 and >VEC_LENGTH indices as out-of-bound\n-\/\/ indexes.\n-Node* LibraryCallKit::partially_wrap_indexes(Node* index_vec, int num_elem, BasicType elem_bt) {\n-  assert(elem_bt == T_BYTE, \"Shuffles use byte array based backing storage.\");\n-  const TypeVect* vt  = TypeVect::make(elem_bt, num_elem);\n-\n-  Node* mod_mask = gvn().makecon(TypeInt::make(num_elem-1));\n-  Node* bcast_mod_mask = gvn().transform(VectorNode::scalar2vector(mod_mask, num_elem, elem_bt));\n-\n-  BoolTest::mask pred = BoolTest::ugt;\n-  ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(pred));\n-  Node* lane_cnt  = gvn().makecon(TypeInt::make(num_elem));\n-  Node* bcast_lane_cnt = gvn().transform(VectorNode::scalar2vector(lane_cnt, num_elem, elem_bt));\n-  const TypeVect* vmask_type = TypeVect::makemask(elem_bt, num_elem);\n-  Node* mask = gvn().transform(new VectorMaskCmpNode(pred, bcast_lane_cnt, index_vec, pred_node, vmask_type));\n-\n-  \/\/ Make the indices greater than lane count as -ve values to match the java side implementation.\n-  index_vec = gvn().transform(VectorNode::make(Op_AndV, index_vec, bcast_mod_mask, vt));\n-  Node* biased_val = gvn().transform(VectorNode::make(Op_SubVB, index_vec, bcast_lane_cnt, vt));\n-  return gvn().transform(new VectorBlendNode(biased_val, index_vec, mask));\n-}\n-\n-\/\/ <Sh extends VectorShuffle<E>,  E>\n-\/\/  Sh ShuffleIota(Class<?> E, Class<?> shuffleClass, Vector.Species<E> s, int length,\n-\/\/                  int start, int step, int wrap, ShuffleIotaOperation<Sh, E> defaultImpl)\n-bool LibraryCallKit::inline_vector_shuffle_iota() {\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->isa_instptr();\n-  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n-  const TypeInt*     start_val     = gvn().type(argument(4))->isa_int();\n-  const TypeInt*     step_val      = gvn().type(argument(5))->isa_int();\n-  const TypeInt*     wrap          = gvn().type(argument(6))->isa_int();\n-\n-  if (shuffle_klass == nullptr || shuffle_klass->const_oop() == nullptr ||\n-      vlen == nullptr || !vlen->is_con() || start_val == nullptr || step_val == nullptr ||\n-      wrap == nullptr || !wrap->is_con()) {\n-    return false; \/\/ not enough info for intrinsification\n-  }\n-\n-  if (!is_klass_initialized(shuffle_klass)) {\n-    log_if_needed(\"  ** klass argument not initialized\");\n-    return false;\n-  }\n-\n-  int do_wrap = wrap->get_con();\n-  int num_elem = vlen->get_con();\n-  BasicType elem_bt = T_BYTE;\n-\n-  bool effective_indices_in_range = false;\n-  if (start_val->is_con() && step_val->is_con()) {\n-    int effective_min_index = start_val->get_con();\n-    int effective_max_index = start_val->get_con() + step_val->get_con() * (num_elem - 1);\n-    effective_indices_in_range = effective_max_index >= effective_min_index && effective_min_index >= -128 && effective_max_index <= 127;\n-  }\n-\n-  if (!do_wrap && !effective_indices_in_range) {\n-    \/\/ Disable instrinsification for unwrapped shuffle iota if start\/step\n-    \/\/ values are non-constant OR if intermediate result overflows byte value range.\n-    return false;\n-  }\n-\n-  if (!arch_supports_vector(Op_AddVB, num_elem, elem_bt, VecMaskNotUsed)           ||\n-      !arch_supports_vector(Op_AndV, num_elem, elem_bt, VecMaskNotUsed)            ||\n-      !arch_supports_vector(Op_VectorLoadConst, num_elem, elem_bt, VecMaskNotUsed) ||\n-      !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed)) {\n-    return false;\n-  }\n-\n-  if (!do_wrap &&\n-      (!arch_supports_vector(Op_SubVB, num_elem, elem_bt, VecMaskNotUsed)       ||\n-      !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskNotUsed)  ||\n-      !arch_supports_vector(Op_VectorMaskCmp, num_elem, elem_bt, VecMaskNotUsed))) {\n-    return false;\n-  }\n-\n-  bool step_multiply = !step_val->is_con() || !is_power_of_2(step_val->get_con());\n-  if ((step_multiply && !arch_supports_vector(Op_MulVB, num_elem, elem_bt, VecMaskNotUsed)) ||\n-      (!step_multiply && !arch_supports_vector(Op_LShiftVB, num_elem, elem_bt, VecMaskNotUsed))) {\n-    return false;\n-  }\n-\n-  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n-\n-  Node* res = gvn().transform(new VectorLoadConstNode(gvn().makecon(TypeInt::ZERO), vt));\n-\n-  Node* start = argument(4);\n-  Node* step  = argument(5);\n-\n-  if (step_multiply) {\n-    Node* bcast_step = gvn().transform(VectorNode::scalar2vector(step, num_elem, elem_bt));\n-    res = gvn().transform(VectorNode::make(Op_MulVB, res, bcast_step, vt));\n-  } else if (step_val->get_con() > 1) {\n-    Node* cnt = gvn().makecon(TypeInt::make(log2i_exact(step_val->get_con())));\n-    Node* shift_cnt = vector_shift_count(cnt, Op_LShiftI, elem_bt, num_elem);\n-    res = gvn().transform(VectorNode::make(Op_LShiftVB, res, shift_cnt, vt));\n-  }\n-\n-  if (!start_val->is_con() || start_val->get_con() != 0) {\n-    Node* bcast_start = gvn().transform(VectorNode::scalar2vector(start, num_elem, elem_bt));\n-    res = gvn().transform(VectorNode::make(Op_AddVB, res, bcast_start, vt));\n-  }\n-\n-  Node* mod_val = gvn().makecon(TypeInt::make(num_elem-1));\n-  Node* bcast_mod = gvn().transform(VectorNode::scalar2vector(mod_val, num_elem, elem_bt));\n-\n-  if (do_wrap)  {\n-    \/\/ Wrap the indices greater than lane count.\n-    res = gvn().transform(VectorNode::make(Op_AndV, res, bcast_mod, vt));\n-  } else {\n-    res = partially_wrap_indexes(res, num_elem, elem_bt);\n-  }\n-\n-  ciKlass* sbox_klass = shuffle_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* shuffle_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, sbox_klass);\n-\n-  \/\/ Wrap it up in VectorBox to keep object type information.\n-  res = box_vector(res, shuffle_box_type, elem_bt, num_elem);\n-  set_result(res);\n-  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n-  return true;\n-}\n-\n+\/\/ public static\n@@ -676,1 +544,0 @@\n-  const Type* elem_ty = Type::get_const_basic_type(elem_bt);\n@@ -679,1 +546,1 @@\n-  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem, true);\n+  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem);\n@@ -700,118 +567,0 @@\n-\/\/ public static\n-\/\/ <V,\n-\/\/  Sh extends VectorShuffle<E>,\n-\/\/  E>\n-\/\/ V shuffleToVector(Class<? extends Vector<E>> vclass, Class<E> elementType,\n-\/\/                   Class<? extends Sh> shuffleClass, Sh s, int length,\n-\/\/                   ShuffleToVectorOperation<V, Sh, E> defaultImpl)\n-bool LibraryCallKit::inline_vector_shuffle_to_vector() {\n-  const TypeInstPtr* vector_klass  = gvn().type(argument(0))->isa_instptr();\n-  const TypeInstPtr* elem_klass    = gvn().type(argument(1))->isa_instptr();\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(2))->isa_instptr();\n-  Node*              shuffle       = argument(3);\n-  const TypeInt*     vlen          = gvn().type(argument(4))->isa_int();\n-\n-  if (vector_klass == nullptr || elem_klass == nullptr || shuffle_klass == nullptr || shuffle->is_top() || vlen == nullptr) {\n-    return false; \/\/ dead code\n-  }\n-  if (!vlen->is_con() || vector_klass->const_oop() == nullptr || shuffle_klass->const_oop() == nullptr) {\n-    return false; \/\/ not enough info for intrinsification\n-  }\n-  if (!is_klass_initialized(shuffle_klass) || !is_klass_initialized(vector_klass) ) {\n-    log_if_needed(\"  ** klass argument not initialized\");\n-    return false;\n-  }\n-\n-  int num_elem = vlen->get_con();\n-  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n-  BasicType elem_bt = elem_type->basic_type();\n-\n-  if (num_elem < 4) {\n-    return false;\n-  }\n-\n-  int cast_vopc = VectorCastNode::opcode(-1, T_BYTE); \/\/ from shuffle of type T_BYTE\n-  \/\/ Make sure that cast is implemented to particular type\/size combination.\n-  if (!arch_supports_vector(cast_vopc, num_elem, elem_bt, VecMaskNotUsed)) {\n-    log_if_needed(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n-        cast_vopc, num_elem, type2name(elem_bt));\n-    return false;\n-  }\n-\n-  ciKlass* sbox_klass = shuffle_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* shuffle_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, sbox_klass);\n-\n-  \/\/ Unbox shuffle with true flag to indicate its load shuffle to vector\n-  \/\/ shuffle is a byte array\n-  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, T_BYTE, num_elem, true);\n-\n-  \/\/ cast byte to target element type\n-  shuffle_vec = gvn().transform(VectorCastNode::make(cast_vopc, shuffle_vec, elem_bt, num_elem));\n-\n-  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* vec_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n-\n-  \/\/ Box vector\n-  Node* res = box_vector(shuffle_vec, vec_box_type, elem_bt, num_elem);\n-  set_result(res);\n-  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n-  return true;\n-}\n-\n-\/\/ public static\n-\/\/ <E,\n-\/\/  SH extends VectorShuffle<E>>\n-\/\/ SH wrapShuffleIndexes(Class<E> eClass, Class<? extends SH> shClass, SH sh, int length,\n-\/\/                       ShuffleWrapIndexesOperation<SH> defaultImpl)\n-bool LibraryCallKit::inline_vector_wrap_shuffle_indexes() {\n-  const TypeInstPtr* elem_klass    = gvn().type(argument(0))->isa_instptr();\n-  const TypeInstPtr* shuffle_klass = gvn().type(argument(1))->isa_instptr();\n-  Node*              shuffle       = argument(2);\n-  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n-\n-  if (elem_klass == nullptr || shuffle_klass == nullptr || shuffle->is_top() || vlen == nullptr ||\n-      !vlen->is_con() || shuffle_klass->const_oop() == nullptr) {\n-    \/\/ not enough info for intrinsification\n-    return false;\n-  }\n-\n-  if (!is_klass_initialized(shuffle_klass)) {\n-    log_if_needed(\"  ** klass argument not initialized\");\n-    return false;\n-  }\n-\n-  int num_elem = vlen->get_con();\n-  if ((num_elem < 4) || !is_power_of_2(num_elem)) {\n-    log_if_needed(\"  ** vlen < 4 or not power of two=%d\", num_elem);\n-    return false;\n-  }\n-\n-  \/\/ Shuffles use byte array based backing storage\n-  BasicType shuffle_bt = T_BYTE;\n-  if (!arch_supports_vector(Op_AndV, num_elem, shuffle_bt, VecMaskNotUsed) ||\n-      !arch_supports_vector(Op_Replicate, num_elem, shuffle_bt, VecMaskNotUsed)) {\n-    log_if_needed(\"  ** not supported: op=wrapShuffleIndexes vlen=%d etype=%s\",\n-                  num_elem, type2name(shuffle_bt));\n-    return false;\n-  }\n-\n-  ciKlass* sbox_klass = shuffle_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* shuffle_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, sbox_klass);\n-\n-  \/\/ Unbox shuffle with true flag to indicate its load shuffle to vector\n-  \/\/ shuffle is a byte array\n-  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, shuffle_bt, num_elem, true);\n-\n-  const TypeVect* vt  = TypeVect::make(shuffle_bt, num_elem);\n-  Node* mod_mask = gvn().makecon(TypeInt::make(num_elem - 1));\n-  Node* bcast_mod_mask  = gvn().transform(VectorNode::scalar2vector(mod_mask, num_elem, shuffle_bt));\n-  \/\/ Wrap the indices greater than lane count.\n-  Node* res = gvn().transform(VectorNode::make(Op_AndV, shuffle_vec, bcast_mod_mask, vt));\n-\n-  \/\/ Wrap it up in VectorBox to keep object type information.\n-  res = box_vector(res, shuffle_box_type, shuffle_bt, num_elem);\n-  set_result(res);\n-  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(shuffle_bt))));\n-  return true;\n-}\n-\n@@ -1998,0 +1747,1 @@\n+\n@@ -2000,0 +1750,6 @@\n+  if (shuffle_bt == T_FLOAT) {\n+    shuffle_bt = T_INT;\n+  } else if (shuffle_bt == T_DOUBLE) {\n+    shuffle_bt = T_LONG;\n+  }\n+\n@@ -2001,0 +1757,1 @@\n+  bool need_load_shuffle = Matcher::vector_rearrange_requires_load_shuffle(shuffle_bt, num_elem);\n@@ -2002,3 +1759,5 @@\n-  if (!arch_supports_vector(Op_VectorLoadShuffle, num_elem, elem_bt, VecMaskNotUsed)) {\n-    log_if_needed(\"  ** not supported: arity=0 op=load\/shuffle vlen=%d etype=%s ismask=no\",\n-                    num_elem, type2name(elem_bt));\n+  if (need_load_shuffle && !arch_supports_vector(Op_VectorLoadShuffle, num_elem, shuffle_bt, VecMaskNotUsed)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=0 op=load\/shuffle vlen=%d etype=%s ismask=no\",\n+                    num_elem, type2name(shuffle_bt));\n+    }\n@@ -2016,0 +1775,5 @@\n+  if (!arch_supports_vector(Op_AndV, num_elem, elem_bt, VecMaskNotUsed)) {\n+    log_if_needed(\"  ** not supported: arity=2 op=and vlen=%d etype=%s ismask=no\",\n+                      num_elem, type2name(elem_bt));\n+    return false;\n+  }\n@@ -2036,0 +1800,1 @@\n+  const TypeVect* st = TypeVect::make(shuffle_bt, num_elem);\n@@ -2041,0 +1806,5 @@\n+  assert(is_power_of_2(num_elem), \"wrapping invalid\");\n+  Node* wrapping_mask_elem = gvn().makecon(TypeInteger::make(num_elem - 1, num_elem - 1, Type::WidenMin, shuffle_bt == T_LONG ? T_LONG : T_INT));\n+  Node* wrapping_mask = gvn().transform(VectorNode::scalar2vector(wrapping_mask_elem, num_elem, shuffle_bt));\n+  shuffle = gvn().transform(new AndVNode(shuffle, wrapping_mask, st));\n+\n@@ -2053,0 +1823,4 @@\n+  if (need_load_shuffle) {\n+    shuffle = gvn().transform(new VectorLoadShuffleNode(shuffle, st));\n+  }\n+\n@@ -2059,1 +1833,0 @@\n-      const TypeVect* vt = v1->bottom_type()->is_vect();\n@@ -2157,0 +1930,8 @@\n+  BasicType shuffle_bt = elem_bt;\n+  if (shuffle_bt == T_FLOAT) {\n+    shuffle_bt = T_INT;\n+  } else if (shuffle_bt == T_DOUBLE) {\n+    shuffle_bt = T_LONG;\n+  }\n+  bool need_load_shuffle = Matcher::vector_rearrange_requires_load_shuffle(shuffle_bt, num_elem);\n+\n@@ -2158,4 +1939,4 @@\n-  if (!arch_supports_vector(Op_VectorLoadShuffle, num_elem, elem_bt, VecMaskNotUsed)||\n-      !arch_supports_vector(Op_AndV, num_elem, T_BYTE, VecMaskNotUsed)              ||\n-      !arch_supports_vector(Op_Replicate, num_elem, T_BYTE, VecMaskNotUsed)         ||\n-      !arch_supports_vector(cast_vopc, num_elem, T_BYTE, VecMaskNotUsed)) {\n+  if ((need_load_shuffle && !arch_supports_vector(Op_VectorLoadShuffle, num_elem, elem_bt, VecMaskNotUsed)) ||\n+      (elem_bt != shuffle_bt && !arch_supports_vector(cast_vopc, num_elem, shuffle_bt, VecMaskNotUsed))     ||\n+      !arch_supports_vector(Op_AndV, num_elem, shuffle_bt, VecMaskNotUsed) ||\n+      !arch_supports_vector(Op_Replicate, num_elem, shuffle_bt, VecMaskNotUsed)) {\n@@ -2218,2 +1999,6 @@\n-  const TypeVect* byte_vt = TypeVect::make(T_BYTE, num_elem);\n-  Node* byte_shuffle = gvn().transform(VectorCastNode::make(cast_vopc, v1, T_BYTE, num_elem));\n+  const TypeVect* shuffle_vt = TypeVect::make(shuffle_bt, num_elem);\n+  Node* shuffle = v1;\n+\n+  if (shuffle_bt != elem_bt) {\n+    shuffle = gvn().transform(VectorCastNode::make(cast_vopc, v1, shuffle_bt, num_elem));\n+  }\n@@ -2223,3 +2008,3 @@\n-  Node* mod_val = gvn().makecon(TypeInt::make(num_elem-1));\n-  Node* bcast_mod = gvn().transform(VectorNode::scalar2vector(mod_val, num_elem, T_BYTE));\n-  byte_shuffle = gvn().transform(VectorNode::make(Op_AndV, byte_shuffle, bcast_mod, byte_vt));\n+  Node* mod_val = gvn().makecon(TypeInteger::make(num_elem - 1, num_elem - 1, Type::WidenMin, shuffle_bt == T_LONG ? T_LONG : T_INT));\n+  Node* bcast_mod = gvn().transform(VectorNode::scalar2vector(mod_val, num_elem, shuffle_bt));\n+  shuffle = gvn().transform(VectorNode::make(Op_AndV, shuffle, bcast_mod, shuffle_vt));\n@@ -2228,2 +2013,3 @@\n-  const TypeVect* shuffle_vt = TypeVect::make(elem_bt, num_elem);\n-  Node* load_shuffle = gvn().transform(new VectorLoadShuffleNode(byte_shuffle, shuffle_vt));\n+  if (need_load_shuffle) {\n+    shuffle = gvn().transform(new VectorLoadShuffleNode(shuffle, shuffle_vt));\n+  }\n@@ -2232,1 +2018,1 @@\n-  Node* rearrange = new VectorRearrangeNode(v2, load_shuffle);\n+  Node* rearrange = new VectorRearrangeNode(v2, shuffle);\n@@ -2485,3 +2271,1 @@\n-  if (is_vector_shuffle(vbox_klass_from)) {\n-    return false; \/\/ vector shuffles aren't supported\n-  }\n+\n@@ -2527,12 +2311,0 @@\n-\n-  if (is_vector_shuffle(vbox_klass_to) &&\n-      (!arch_supports_vector(Op_SubVB, num_elem_to, elem_bt_to, VecMaskNotUsed)           ||\n-       !arch_supports_vector(Op_VectorBlend, num_elem_to, elem_bt_to, VecMaskNotUsed)     ||\n-       !arch_supports_vector(Op_VectorMaskCmp, num_elem_to, elem_bt_to, VecMaskNotUsed)   ||\n-       !arch_supports_vector(Op_AndV, num_elem_to, elem_bt_to, VecMaskNotUsed)            ||\n-       !arch_supports_vector(Op_Replicate, num_elem_to, elem_bt_to, VecMaskNotUsed))) {\n-    log_if_needed(\"  ** not supported: arity=1 op=shuffle_index_wrap vlen2=%d etype2=%s\",\n-                    num_elem_to, type2name(elem_bt_to));\n-    return false;\n-  }\n-\n@@ -2636,4 +2408,0 @@\n-  if (is_vector_shuffle(vbox_klass_to)) {\n-     op = partially_wrap_indexes(op, num_elem_to, elem_bt_to);\n-  }\n-\n@@ -2867,2 +2635,7 @@\n-  const TypeVect* index_vect_type = index_vec->bottom_type()->is_vect();\n-  BasicType index_elem_bt = index_vect_type->element_basic_type();\n+  BasicType shuffle_bt = elem_bt;\n+  if (shuffle_bt == T_FLOAT) {\n+    shuffle_bt = T_INT;\n+  } else if (shuffle_bt == T_DOUBLE) {\n+    shuffle_bt = T_LONG;\n+  }\n+  const TypeVect* st = TypeVect::make(shuffle_bt, num_elem);\n@@ -2870,5 +2643,5 @@\n-  \/\/ Downcast index vector to a type agnostic shuffle representation, shuffle\n-  \/\/ indices are held in a byte vector which are later transformed to target\n-  \/\/ specific permutation index format by subsequent VectorLoadShuffle.\n-  int cast_vopc = VectorCastNode::opcode(0, index_elem_bt, true);\n-  Node* index_byte_vec = phase.transform(VectorCastNode::make(cast_vopc, index_vec, T_BYTE, num_elem));\n+  \/\/ Cast index vector to the corresponding bit type\n+  if (elem_bt != shuffle_bt) {\n+    int cast_vopc = VectorCastNode::opcode(0, elem_bt, true);\n+    index_vec = phase.transform(VectorCastNode::make(cast_vopc, index_vec, shuffle_bt, num_elem));\n+  }\n@@ -2877,1 +2650,1 @@\n-  Node* two_vect_lane_cnt_m1 = phase.makecon(TypeInt::make(2 * num_elem - 1));\n+  Node* two_vect_lane_cnt_m1 = phase.makecon(TypeInteger::make(2 * num_elem - 1, 2 * num_elem - 1, Type::WidenMin, shuffle_bt == T_LONG ? T_LONG : T_INT));\n@@ -2879,3 +2652,2 @@\n-                                                                                   T_BYTE, false));\n-  index_byte_vec = phase.transform(VectorNode::make(Op_AndV, index_byte_vec, bcast_two_vect_lane_cnt_m1_vec,\n-                                                    index_byte_vec->bottom_type()->is_vect()));\n+                                                                                   shuffle_bt, false));\n+  index_vec = phase.transform(VectorNode::make(Op_AndV, index_vec, bcast_two_vect_lane_cnt_m1_vec, st));\n@@ -2887,5 +2659,4 @@\n-  const TypeVect* vmask_type = TypeVect::makemask(T_BYTE, num_elem);\n-  Node* lane_cnt_m1 = phase.makecon(TypeInt::make(num_elem - 1));\n-  Node* bcast_lane_cnt_m1_vec = phase.transform(VectorNode::scalar2vector(lane_cnt_m1, num_elem,\n-                                                                          T_BYTE, false));\n-  Node* mask = phase.transform(new VectorMaskCmpNode(pred, index_byte_vec, bcast_lane_cnt_m1_vec, pred_node, vmask_type));\n+  const TypeVect* vmask_type = TypeVect::makemask(shuffle_bt, num_elem);\n+  Node* lane_cnt_m1 = phase.makecon(TypeInteger::make(num_elem - 1, num_elem - 1, Type::WidenMin, shuffle_bt == T_LONG ? T_LONG : T_INT));\n+  Node* bcast_lane_cnt_m1_vec = phase.transform(VectorNode::scalar2vector(lane_cnt_m1, num_elem, shuffle_bt, false));\n+  Node* mask = phase.transform(new VectorMaskCmpNode(pred, index_vec, bcast_lane_cnt_m1_vec, pred_node, vmask_type));\n@@ -2894,2 +2665,1 @@\n-  index_byte_vec = phase.transform(VectorNode::make(Op_AndV, index_byte_vec, bcast_lane_cnt_m1_vec,\n-                       index_byte_vec->bottom_type()->is_vect()));\n+  Node* wrapped_index_vec = phase.transform(VectorNode::make(Op_AndV, index_vec, bcast_lane_cnt_m1_vec, st));\n@@ -2899,1 +2669,3 @@\n-  index_vec = phase.transform(new VectorLoadShuffleNode(index_byte_vec, index_vect_type));\n+  if (Matcher::vector_rearrange_requires_load_shuffle(shuffle_bt, num_elem)) {\n+    wrapped_index_vec = phase.transform(new VectorLoadShuffleNode(wrapped_index_vec, st));\n+  }\n@@ -2904,2 +2676,2 @@\n-  Node* p1 = phase.transform(new VectorRearrangeNode(src1, index_vec));\n-  Node* p2 = phase.transform(new VectorRearrangeNode(src2, index_vec));\n+  Node* p1 = phase.transform(new VectorRearrangeNode(src1, wrapped_index_vec));\n+  Node* p2 = phase.transform(new VectorRearrangeNode(src2, wrapped_index_vec));\n@@ -2958,2 +2730,3 @@\n-    if (!arch_supports_vector(Op_VectorMaskCmp, num_elem, T_BYTE, VecMaskNotUsed)            ||\n-        !arch_supports_vector(Op_AndV, num_elem, T_BYTE, VecMaskNotUsed)                     ||\n+    if ((elem_bt != index_elem_bt && !arch_supports_vector(cast_vopc, num_elem, index_elem_bt, VecMaskNotUsed)) ||\n+        !arch_supports_vector(Op_VectorMaskCmp, num_elem, index_elem_bt, VecMaskNotUsed)     ||\n+        !arch_supports_vector(Op_AndV, num_elem, index_elem_bt, VecMaskNotUsed)              ||\n@@ -2963,1 +2736,0 @@\n-        !arch_supports_vector(cast_vopc, num_elem, T_BYTE, VecMaskNotUsed)                   ||\n@@ -2965,1 +2737,1 @@\n-        !arch_supports_vector(Op_Replicate, num_elem, T_BYTE, VecMaskNotUsed)) {\n+        !arch_supports_vector(Op_Replicate, num_elem, index_elem_bt, VecMaskNotUsed)) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":87,"deletions":315,"binary":false,"changes":402,"status":"modified"},{"patch":"@@ -1218,3 +1218,1 @@\n-    PhaseIterGVN& igvn = phase()->igvn();\n-    Node* zero = igvn.zerocon(bt);\n-    phase()->set_ctrl(zero, phase()->C->root());\n+    Node* zero = phase()->zerocon(bt);\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1469,0 +1469,3 @@\n+      \/\/ In rare case, the input to the VectorCast could be a Replicate node. We need to make sure creating is supported:\n+      \/\/ check the src_type:\n+      VectorNode::vector_size_supported_auto_vectorization(src_type, vlen) &&\n@@ -1731,2 +1734,1 @@\n-        bool is_vector_mask    = vbox_klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n-        bool is_vector_shuffle = vbox_klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n+        bool is_vector_mask = vbox_klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n@@ -1737,5 +1739,0 @@\n-        } else if (is_vector_shuffle) {\n-          if (!is_shuffle_to_vector()) {\n-            \/\/ VectorUnbox (VectorBox vshuffle) ==> VectorLoadShuffle vshuffle\n-            return new VectorLoadShuffleNode(value, out_vt);\n-          }\n@@ -1743,1 +1740,1 @@\n-          \/\/ Vector type mismatch is only supported for masks and shuffles, but sometimes it happens in pathological cases.\n+          \/\/ Vector type mismatch is only supported for masks, but sometimes it happens in pathological cases.\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1691,1 +1691,7 @@\n-\n+\/\/ The target may not directly support the rearrange operation for an element type. In those cases,\n+\/\/ we can transform the rearrange into a different element type. For example, on x86 before AVX512,\n+\/\/ there is no rearrange instruction for short elements, what we will then do is to transform the\n+\/\/ shuffle vector into one that we can do byte rearrange such that it would provide the same\n+\/\/ result. This could have been done in VectorRearrangeNode during code emission but we eagerly\n+\/\/ expand this out because it is often the case that an index vector is reused in many rearrange\n+\/\/ operations. This allows the index preparation to be GVN-ed as well as hoisted out of loops, etc.\n@@ -1695,3 +1701,1 @@\n-    : VectorNode(in, vt) {\n-    assert(in->bottom_type()->is_vect()->element_basic_type() == T_BYTE, \"must be BYTE\");\n-  }\n+    : VectorNode(in, vt) {}\n@@ -1699,1 +1703,0 @@\n-  int GetOutShuffleSize() const { return type2aelembytes(vect_type()->element_basic_type()); }\n@@ -1938,2 +1941,0 @@\n- private:\n-  bool _shuffle_to_vector;\n@@ -1943,1 +1944,1 @@\n-  VectorUnboxNode(Compile* C, const TypeVect* vec_type, Node* obj, Node* mem, bool shuffle_to_vector)\n+  VectorUnboxNode(Compile* C, const TypeVect* vec_type, Node* obj, Node* mem)\n@@ -1945,1 +1946,0 @@\n-    _shuffle_to_vector = shuffle_to_vector;\n@@ -1956,1 +1956,0 @@\n-  bool is_shuffle_to_vector() { return _shuffle_to_vector; }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3466,1 +3466,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, JVM_IsStaticallyLinked(void))\n+JVM_LEAF(jboolean, JVM_IsStaticallyLinked(void))\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiCodeBlobEvents.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,4 +76,0 @@\n-bool VectorSupport::is_vector_shuffle(Klass* klass) {\n-  return klass->is_subclass_of(vmClasses::vector_VectorShuffle_klass());\n-}\n-\n@@ -90,3 +86,1 @@\n-  if (is_vector_shuffle(ik)) {\n-    return T_BYTE;\n-  } else if (is_vector_mask(ik)) {\n+  if (is_vector_mask(ik)) {\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-  static bool is_vector_shuffle(Klass* klass);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-#include \"nmt\/memTracker.hpp\"\n@@ -728,1 +727,0 @@\n-  MemTracker::record_virtual_memory_tag((address)(uintptr_t)addr, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -526,1 +526,0 @@\n-  { \"DontYieldALot\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n@@ -529,0 +528,1 @@\n+  { \"UseOprofile\",                  JDK_Version::jdk(25), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n@@ -538,14 +538,1 @@\n-  { \"UseNotificationThread\",        JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"PreserveAllAnnotations\",       JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseEmptySlotsInSupers\",        JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"OldSize\",                      JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-#if defined(X86)\n-  { \"UseRTMLocking\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseRTMDeopt\",                  JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"RTMRetryCount\",                JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-#endif \/\/ X86\n-\n-\n-  { \"BaseFootPrintEstimate\",           JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"HeapFirstMaximumCompactionCount\", JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n-  { \"UseVtableBasedCHA\",               JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/align.hpp\"\n@@ -31,1 +32,1 @@\n-#include \"utilities\/ostream.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -407,0 +409,3 @@\n+  static size_t align_up_vm_page_size(size_t size)   { return align_up  (size, os::vm_page_size()); }\n+  static size_t align_down_vm_page_size(size_t size) { return align_down(size, os::vm_page_size()); }\n+\n@@ -447,0 +452,2 @@\n+  static size_t align_up_vm_allocation_granularity(size_t size) { return align_up(size, os::vm_allocation_granularity()); }\n+\n@@ -1030,8 +1037,0 @@\n-  \/\/ FIXME - some random stuff that was in os_windows.hpp\n-#ifdef _WINDOWS\n-  \/\/ strtok_s is the Windows thread-safe equivalent of POSIX strtok_r\n-# define strtok_r strtok_s\n-# define S_ISCHR(mode)   (((mode) & _S_IFCHR) == _S_IFCHR)\n-# define S_ISFIFO(mode)  (((mode) & _S_IFIFO) == _S_IFIFO)\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/osThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/osThreadBase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/osThreadBase.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/relocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/stackOverflow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/statSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/statSampler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/timerTrace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/copy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/globalCounter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+# include <sys\/stat.h>\n@@ -83,0 +84,12 @@\n+\/\/ VS doesn't provide strtok_r, which is a POSIX function.  Instead, it\n+\/\/ provides the same function under the name strtok_s.  Note that this is\n+\/\/ *not* the same as the C99 Annex K strtok_s.  VS provides that function\n+\/\/ under the name strtok_s_l.  Make strtok_r a synonym so we can use that name\n+\/\/ in shared code.\n+const auto strtok_r = strtok_s;\n+\n+\/\/ VS doesn't provide POSIX macros S_ISFIFO or S_IFIFO.  It doesn't even\n+\/\/ provide _S_ISFIFO, per its usual naming convention for POSIX stuff.  But it\n+\/\/ does provide _S_IFIFO, so we can roll our own S_ISFIFO.\n+#define S_ISFIFO(mode) (((mode) & _S_IFIFO) == _S_IFIFO)\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/spinYield.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/waitBarrier_generic.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/DefaultSelectorProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/macosx\/native\/libjava\/ProcessHandleImpl_macosx.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/security\/ntlm\/Server.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamConstants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Serializable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/StreamTokenizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/WriteAbortedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AssertionError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/BaseVirtualThread.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/BootstrapMethodError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ExceptionInInitializerError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n@@ -233,1 +235,1 @@\n-     * Default is {@code FIX_SHORT_JUMPS} to automatically rewrite jump\n+     * Default is {@link #FIX_SHORT_JUMPS} to automatically rewrite jump\n@@ -235,0 +237,6 @@\n+     * <p>\n+     * Due to physical restrictions, some types of instructions cannot encode\n+     * certain jump targets with bci offsets less than -32768 or greater than\n+     * 32767, as they use a {@code s2} to encode such an offset.  (The maximum\n+     * length of the {@code code} array is 65535.)  These types of instructions\n+     * are called \"short jumps\".\n@@ -236,0 +244,2 @@\n+     * @see BranchInstruction\n+     * @see DiscontinuedInstruction.JsrInstruction\n@@ -240,1 +250,6 @@\n-        \/** Automatically convert short jumps to long when necessary *\/\n+        \/**\n+         * Automatically convert short jumps to long when necessary.\n+         * <p>\n+         * For an invalid instruction model, a {@link CodeBuilder} may generate\n+         * another or a few other instructions to accomplish the same effect.\n+         *\/\n@@ -243,1 +258,6 @@\n-        \/** Fail if short jump overflows *\/\n+        \/**\n+         * Fail with an {@link IllegalArgumentException} if short jump overflows.\n+         * <p>\n+         * This is useful to ensure the physical accuracy of a generated {@code\n+         * class} file.\n+         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * <h2>Instruction Factories<\/h2>\n+ * <h2 id=\"instruction-factories\">Instruction Factories<\/h2>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.classfile.components.ClassPrinter;\n+\n@@ -95,0 +97,10 @@\n+    \/**\n+     * {@return a text representation of the compound element and its contents for debugging purposes}\n+     *\n+     * The format, structure and exact contents of the returned string are not specified and may change at any time in the future.\n+     *\/\n+    default String toDebugString() {\n+        StringBuilder text = new StringBuilder();\n+        ClassPrinter.toYaml(this, ClassPrinter.Verbosity.TRACE_ALL, text::append);\n+        return text.toString();\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CompoundElement.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -33,1 +34,6 @@\n- * Models an executable instruction in a method body.\n+ * Models an executable instruction in the {@code code} array of the {@link\n+ * CodeAttribute Code} attribute of a method.\n+ * <p>\n+ * The {@link #opcode() opcode} identifies the operation of an instruction.\n+ * Each {@linkplain Opcode#kind() kind} of opcode has its own modeling interface\n+ * for instructions.\n@@ -35,0 +41,1 @@\n+ * @sealedGraph\n@@ -49,1 +56,1 @@\n-     * {@return the opcode of this instruction}\n+     * {@return the operation of this instruction}\n@@ -55,0 +62,2 @@\n+     * This value is equal to {@link Opcode#sizeIfFixed()\n+     * opcode().sizeIfFixed()} if it is not {@code -1}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.util.ListIterator;\n+\n@@ -31,10 +35,42 @@\n- * association between a label's identity and the position it represents is\n- * managed by the entity managing the method body (a {@link CodeModel} or {@link\n- * CodeBuilder}), not the label itself; this allows the same label to have a\n- * meaning both in an existing method (as managed by a {@linkplain CodeModel})\n- * and in the transformation of that method (as managed by a {@linkplain\n- * CodeBuilder}), while corresponding to different positions in each. When\n- * traversing the elements of a {@linkplain CodeModel}, {@linkplain Label}\n- * markers will be delivered at the position to which they correspond.  A label\n- * can be bound to the current position within a {@linkplain CodeBuilder} via\n- * {@link CodeBuilder#labelBinding(Label)} or {@link CodeBuilder#with(ClassFileElement)}.\n+ * position is a cursor position in the list of instructions, similar to that\n+ * of a {@link ListIterator}.\n+ *\n+ * <h2 id=\"reading\">Reading Labels<\/h2>\n+ * Labels read from {@code class} files represent positions in the {@code code}\n+ * array of a {@link CodeAttribute Code} attribute.  It is associated with a\n+ * <dfn>{@index bci}<\/dfn> (bytecode index), also known as <dfn>{@index pc}<\/dfn>\n+ * (program counter), the index into the {@code code} array; the actual cursor\n+ * position is immediately before the given index, so a label at the beginning\n+ * of the instructions has bci {@code 0}, and a label at the end of the\n+ * instructions has bci {@link CodeAttribute#codeLength codeLength() + 1}.  The\n+ * bci can be inspected through {@link CodeAttribute#labelToBci\n+ * CodeAttribute::labelToBci}.\n+ * <p>\n+ * In generic {@link CodeModel}s, a label may not have a bci value; the position\n+ * of a label can be found by searching for the corresponding {@link LabelTarget}\n+ * within that model.\n+ *\n+ * <h2 id=\"writing\">Writing Labels<\/h2>\n+ * Many models in {@link java.lang.classfile} refer to labels.  To write a\n+ * label, a label must be obtained, it must be bound to a {@link CodeBuilder}.\n+ * <p>\n+ * To obtain a label:\n+ * <ul>\n+ * <li>Use a label read from other models.\n+ * <li>Use pre-defined labels from a {@link CodeBuilder}, such as {@link\n+ *     CodeBuilder#startLabel() CodeBuilder::startLabel}, {@link CodeBuilder#endLabel\n+ *     CodeBuilder::endLabel}, or {@link CodeBuilder.BlockCodeBuilder#breakLabel\n+ *     BlockCodeBuilder::breakLabel}.  They are already bound.\n+ * <li>Create labels with {@link CodeBuilder#newLabel CodeBuilder::newLabel} or\n+ *     {@link CodeBuilder#newBoundLabel CodeBuilder::newBoundLabel}.\n+ * <\/ul>\n+ * <p>\n+ * A label must be bound exactly once in the {@code CodeBuilder} where it is\n+ * used; otherwise, writing fails.  To bind an unbound label:\n+ * <ul>\n+ * <li>Send a read {@link LabelTarget} to a {@code CodeBuilder}.\n+ * <li>Use {@link CodeBuilder#labelBinding CodeBuilder::labelBinding}.\n+ * <\/ul>\n+ * Note that a label read from another model is not automatically bound in a\n+ * {@code CodeBuilder}; they are separate entities and the label is bound to\n+ * different positions in them.\n@@ -42,0 +78,3 @@\n+ * @see CodeAttribute#labelToBci CodeAttribute::labelToBci\n+ * @see CodeBuilder#newLabel CodeBuilder::newLabel\n+ * @see CodeBuilder#labelBinding CodeBuilder::labelBinding\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Label.java","additions":49,"deletions":10,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.instruction.*;\n+\n@@ -31,2 +33,10 @@\n- * As well as a number of pseudo-instructions that may be encountered when\n- * traversing the instructions of a method.\n+ * This includes a few pseudo-opcodes modified by {@link #isWide() wide}.\n+ * <p>\n+ * An opcode describes the operation of an instruction.\n+ *\n+ * @apiNote\n+ * The enum constants are named after the opcodes' mnemonics in uppercase.\n+ * Wide pseudo-opcodes are named with the original opcodes' mnemonic plus\n+ * a {@code _W} suffix. However, {@link #LDC_W ldc_w}, {@link #LDC2_W ldc2_w},\n+ * {@link #GOTO_W goto_w}, and {@link #JSR_W jsr_w} are legitimate opcodes\n+ * instead of wide pseudo-opcodes.\n@@ -35,1 +45,0 @@\n- * @see PseudoInstruction\n@@ -41,1 +50,6 @@\n-    \/** Do nothing *\/\n+    \/**\n+     * Do nothing.\n+     *\n+     * @jvms 6.5.nop <em>nop<\/em>\n+     * @see Kind#NOP\n+     *\/\n@@ -44,1 +58,7 @@\n-    \/** Push null *\/\n+    \/**\n+     * Push {@code null}.\n+     *\n+     * @jvms 6.5.aconst_null <em>aconst_null<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -47,1 +67,7 @@\n-    \/** Push int constant -1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code -1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -50,1 +76,7 @@\n-    \/** Push int constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 0}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -53,1 +85,7 @@\n-    \/** Push int constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 1}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -56,1 +94,7 @@\n-    \/** Push int constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 2}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -59,1 +103,7 @@\n-    \/** Push int constant 3 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 3}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -62,1 +112,7 @@\n-    \/** Push int constant 4 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 4}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -65,1 +121,7 @@\n-    \/** Push int constant 5 *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} constant {@code 5}.\n+     *\n+     * @jvms 6.5.iconst_i <em>iconst_&lt;i&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -68,1 +130,7 @@\n-    \/** Push long constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 0L}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -71,1 +139,7 @@\n-    \/** Push long constant  1 *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} constant {@code 1L}.\n+     *\n+     * @jvms 6.5.lconst_l <em>lconst_&lt;l&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -74,1 +148,7 @@\n-    \/** Push float constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 0.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -77,1 +157,7 @@\n-    \/** Push float constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 1.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -80,1 +166,7 @@\n-    \/** Push float constant 2 *\/\n+    \/**\n+     * Push {@link TypeKind#FLOAT float} constant {@code 2.0F}.\n+     *\n+     * @jvms 6.5.fconst_f <em>fconst_&lt;f&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -83,1 +175,7 @@\n-    \/** Push double constant 0 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 0.0D}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -86,1 +184,7 @@\n-    \/** Push double constant 1 *\/\n+    \/**\n+     * Push {@link TypeKind#DOUBLE double} constant {@code 1.0D}.\n+     *\n+     * @jvms 6.5.dconst_d <em>dconst_&lt;d&gt;<\/em>\n+     * @see ConstantInstruction.IntrinsicConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -89,1 +193,8 @@\n-    \/** Push byte *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#BYTE byte} value.\n+     *\n+     * @jvms 6.5.bipush <em>bipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -92,1 +203,8 @@\n-    \/** Push short *\/\n+    \/**\n+     * Push {@link TypeKind#INT int} value from sign-extension of immediate\n+     * {@link TypeKind#SHORT short} value.\n+     *\n+     * @jvms 6.5.sipush <em>sipush<\/em>\n+     * @see ConstantInstruction.ArgumentConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -95,1 +213,7 @@\n-    \/** Push item from run-time constant pool *\/\n+    \/**\n+     * Push item from run-time constant pool.\n+     *\n+     * @jvms 6.5.ldc <em>ldc<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -98,1 +222,7 @@\n-    \/** Push item from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push item from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc_w <em>ldc_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -101,1 +231,8 @@\n-    \/** Push long or double from run-time constant pool (wide index) *\/\n+    \/**\n+     * Push {@link TypeKind#LONG long} or {@link TypeKind#DOUBLE double}\n+     * from run-time constant pool (wide index).\n+     *\n+     * @jvms 6.5.ldc2_w <em>ldc2_w<\/em>\n+     * @see ConstantInstruction.LoadConstantInstruction\n+     * @see Kind#CONSTANT\n+     *\/\n@@ -104,1 +241,6 @@\n-    \/** Load int from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable.\n+     *\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -107,1 +249,6 @@\n-    \/** Load long from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable.\n+     *\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -110,1 +257,6 @@\n-    \/** Load float from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable.\n+     *\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -113,1 +265,6 @@\n-    \/** Load double from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable.\n+     *\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -116,1 +273,6 @@\n-    \/** Load reference from local variable *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable.\n+     *\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -119,1 +281,6 @@\n-    \/** Load int from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -122,1 +289,6 @@\n-    \/** Load int from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -125,1 +297,6 @@\n-    \/** Load int from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -128,1 +305,6 @@\n-    \/** Load int from local variable3  *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.iload_n <em>iload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -131,1 +313,6 @@\n-    \/** Load long from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -134,1 +321,6 @@\n-    \/** Load long from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -137,1 +329,6 @@\n-    \/** Load long from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -140,1 +337,6 @@\n-    \/** Load long from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lload_n <em>lload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -143,1 +345,6 @@\n-    \/** Load float from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -146,1 +353,6 @@\n-    \/** Load float from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -149,1 +361,6 @@\n-    \/** Load float from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -152,1 +369,6 @@\n-    \/** Load float from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fload_n <em>fload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -155,1 +377,6 @@\n-    \/** Load double from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -158,1 +385,6 @@\n-    \/** Load double from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -161,1 +393,6 @@\n-    \/** Load double from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -164,1 +401,6 @@\n-    \/** Load double from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dload_n <em>dload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -167,1 +409,6 @@\n-    \/**  Load reference from local variable 0 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -170,1 +417,6 @@\n-    \/** Load reference from local variable 1 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -173,1 +425,6 @@\n-    \/** Load reference from local variable 2 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -176,1 +433,6 @@\n-    \/** Load reference from local variable 3 *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.aload_n <em>aload_&lt;n&gt;<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -179,1 +441,6 @@\n-    \/** Load int from array *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from array.\n+     *\n+     * @jvms 6.5.iaload <em>iaload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -182,1 +449,6 @@\n-    \/** Load long from array *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from array.\n+     *\n+     * @jvms 6.5.laload <em>laload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -185,1 +457,6 @@\n-    \/** Load float from array *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from array.\n+     *\n+     * @jvms 6.5.faload <em>faload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -188,1 +465,6 @@\n-    \/** Load double from array *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from array.\n+     *\n+     * @jvms 6.5.daload <em>daload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -191,1 +473,6 @@\n-    \/** Load reference from array *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from array.\n+     *\n+     * @jvms 6.5.aaload <em>aaload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -194,1 +481,6 @@\n-    \/** Load byte from array *\/\n+    \/**\n+     * Load {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} from array.\n+     *\n+     * @jvms 6.5.baload <em>baload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -197,1 +489,6 @@\n-    \/** Load char from array *\/\n+    \/**\n+     * Load {@link TypeKind#CHAR char} from array.\n+     *\n+     * @jvms 6.5.caload <em>caload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -200,1 +497,6 @@\n-    \/** Load short from array *\/\n+    \/**\n+     * Load {@link TypeKind#SHORT short} from array.\n+     *\n+     * @jvms 6.5.saload <em>saload<\/em>\n+     * @see Kind#ARRAY_LOAD\n+     *\/\n@@ -203,1 +505,6 @@\n-    \/** Store int into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable.\n+     *\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -206,1 +513,6 @@\n-    \/** Store long into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable.\n+     *\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -209,1 +521,6 @@\n-    \/** Store float into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable.\n+     *\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -212,1 +529,6 @@\n-    \/** Store double into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable.\n+     *\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -215,1 +537,7 @@\n-    \/** Store reference into local variable *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -218,1 +546,6 @@\n-    \/** Store int into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -221,1 +554,6 @@\n-    \/** Store int into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -224,1 +562,6 @@\n-    \/** Store int into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -227,1 +570,6 @@\n-    \/** Store int into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.istore_n <em>istore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -230,1 +578,6 @@\n-    \/** Store long into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -233,1 +586,6 @@\n-    \/** Store long into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -236,1 +594,6 @@\n-    \/** Store long into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -239,1 +602,6 @@\n-    \/** Store long into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.lstore_n <em>lstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -242,1 +610,6 @@\n-    \/** Store float into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -245,1 +618,6 @@\n-    \/** Store float into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -248,1 +626,6 @@\n-    \/** Store float into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -251,1 +634,6 @@\n-    \/** Store float into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.fstore_n <em>fstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -254,1 +642,6 @@\n-    \/** Store double into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 0}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -257,1 +650,6 @@\n-    \/** Store double into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 1}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -260,1 +658,6 @@\n-    \/** Store double into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 2}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -263,1 +666,6 @@\n-    \/** Store double into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable slot {@code 3}.\n+     *\n+     * @jvms 6.5.dstore_n <em>dstore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -266,1 +674,7 @@\n-    \/** Store reference into local variable 0 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 0}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -269,1 +683,7 @@\n-    \/** Store reference into local variable 1 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 1}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -272,1 +692,7 @@\n-    \/** Store reference into local variable 2 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 2}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -275,1 +701,7 @@\n-    \/** Store reference into local variable 3 *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable slot {@code 3}.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.astore_n <em>astore_&lt;n&gt;<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -278,1 +710,6 @@\n-    \/** Store into int array *\/\n+    \/**\n+     * Store into {@link TypeKind#INT int} array.\n+     *\n+     * @jvms 6.5.iastore <em>iastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -281,1 +718,6 @@\n-    \/** Store into long array *\/\n+    \/**\n+     * Store into {@link TypeKind#LONG long} array.\n+     *\n+     * @jvms 6.5.lastore <em>lastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -284,1 +726,6 @@\n-    \/** Store into float array *\/\n+    \/**\n+     * Store into {@link TypeKind#FLOAT float} array.\n+     *\n+     * @jvms 6.5.fastore <em>fastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -287,1 +734,6 @@\n-    \/** Store into double array *\/\n+    \/**\n+     * Store into {@link TypeKind#DOUBLE double} array.\n+     *\n+     * @jvms 6.5.dastore <em>dastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -290,1 +742,6 @@\n-    \/** Store into reference array *\/\n+    \/**\n+     * Store into {@link TypeKind#REFERENCE reference} array.\n+     *\n+     * @jvms 6.5.aastore <em>aastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -293,1 +750,6 @@\n-    \/** Store into byte array *\/\n+    \/**\n+     * Store into {@link TypeKind#BYTE byte} or {@link TypeKind#BOOLEAN boolean} array.\n+     *\n+     * @jvms 6.5.bastore <em>bastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -296,1 +758,6 @@\n-    \/** Store into char array *\/\n+    \/**\n+     * Store into {@link TypeKind#CHAR char} array.\n+     *\n+     * @jvms 6.5.castore <em>castore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -299,1 +766,6 @@\n-    \/** Store into short array *\/\n+    \/**\n+     * Store into {@link TypeKind#SHORT short} array.\n+     *\n+     * @jvms 6.5.sastore <em>sastore<\/em>\n+     * @see Kind#ARRAY_STORE\n+     *\/\n@@ -302,1 +774,6 @@\n-    \/** Pop the top operand stack value *\/\n+    \/**\n+     * Pop the top operand stack value.\n+     *\n+     * @jvms 6.5.pop <em>pop<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -305,1 +782,6 @@\n-    \/** Pop the top one or two operand stack values *\/\n+    \/**\n+     * Pop the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.pop2 <em>pop2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -308,1 +790,6 @@\n-    \/** Duplicate the top operand stack value *\/\n+    \/**\n+     * Duplicate the top operand stack value.\n+     *\n+     * @jvms 6.5.dup <em>dup<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -311,1 +798,6 @@\n-    \/** Duplicate the top operand stack value and insert two values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two values down.\n+     *\n+     * @jvms 6.5.dup_x1 <em>dup_x1<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -314,1 +806,6 @@\n-    \/** Duplicate the top operand stack value and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top operand stack value and insert two or three values down.\n+     *\n+     * @jvms 6.5.dup_x2 <em>dup_x2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -317,1 +814,6 @@\n-    \/** Duplicate the top one or two operand stack values *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values.\n+     *\n+     * @jvms 6.5.dup2 <em>dup2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -320,1 +822,7 @@\n-    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two or three\n+     * values down.\n+     *\n+     * @jvms 6.5.dup2_x1 <em>dup2_x1<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -323,1 +831,7 @@\n-    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two, three,\n+     * or four values down.\n+     *\n+     * @jvms 6.5.dup2_x2 <em>dup2_x2<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -326,1 +840,6 @@\n-    \/** Swap the top two operand stack values *\/\n+    \/**\n+     * Swap the top two operand stack values.\n+     *\n+     * @jvms 6.5.swap <em>swap<\/em>\n+     * @see Kind#STACK\n+     *\/\n@@ -329,1 +848,6 @@\n-    \/** Add int *\/\n+    \/**\n+     * Add {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iadd <em>iadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -332,1 +856,6 @@\n-    \/** Add long *\/\n+    \/**\n+     * Add {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ladd <em>ladd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -335,1 +864,6 @@\n-    \/** Add float *\/\n+    \/**\n+     * Add {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fadd <em>fadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -338,1 +872,6 @@\n-    \/** Add double *\/\n+    \/**\n+     * Add {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dadd <em>dadd<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -341,1 +880,6 @@\n-    \/** Subtract int *\/\n+    \/**\n+     * Subtract {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.isub <em>isub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -344,1 +888,6 @@\n-    \/** Subtract long *\/\n+    \/**\n+     * Subtract {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lsub <em>lsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -347,1 +896,6 @@\n-    \/** Subtract float *\/\n+    \/**\n+     * Subtract {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fsub <em>fsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -350,1 +904,6 @@\n-    \/** Subtract double *\/\n+    \/**\n+     * Subtract {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dsub <em>dsub<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -353,1 +912,6 @@\n-    \/** Multiply int *\/\n+    \/**\n+     * Multiply {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.imul <em>imul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -356,1 +920,6 @@\n-    \/** Multiply long *\/\n+    \/**\n+     * Multiply {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lmul <em>lmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -359,1 +928,6 @@\n-    \/** Multiply float *\/\n+    \/**\n+     * Multiply {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fmul <em>fmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -362,1 +936,6 @@\n-    \/** Multiply double *\/\n+    \/**\n+     * Multiply {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dmul <em>dmul<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -365,1 +944,6 @@\n-    \/** Divide int *\/\n+    \/**\n+     * Divide {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.idiv <em>idiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -368,1 +952,6 @@\n-    \/** Divide long *\/\n+    \/**\n+     * Divide {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.ldiv <em>ldiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -371,1 +960,6 @@\n-    \/** Divide float *\/\n+    \/**\n+     * Divide {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fdiv <em>fdiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -374,1 +968,6 @@\n-    \/** Divide double *\/\n+    \/**\n+     * Divide {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.ddiv <em>ddiv<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -377,1 +976,6 @@\n-    \/** Remainder int *\/\n+    \/**\n+     * Remainder {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.irem <em>irem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -380,1 +984,6 @@\n-    \/** Remainder long *\/\n+    \/**\n+     * Remainder {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lrem <em>lrem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -383,1 +992,6 @@\n-    \/** Remainder float *\/\n+    \/**\n+     * Remainder {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.frem <em>frem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -386,1 +1000,6 @@\n-    \/** Remainder double *\/\n+    \/**\n+     * Remainder {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.drem <em>drem<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -389,1 +1008,6 @@\n-    \/** Negate int *\/\n+    \/**\n+     * Negate {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ineg <em>ineg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -392,1 +1016,6 @@\n-    \/** Negate long *\/\n+    \/**\n+     * Negate {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lneg <em>lneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -395,1 +1024,6 @@\n-    \/** Negate float *\/\n+    \/**\n+     * Negate {@link TypeKind#FLOAT float}.\n+     *\n+     * @jvms 6.5.fneg <em>fneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -398,1 +1032,6 @@\n-    \/** Negate double *\/\n+    \/**\n+     * Negate {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jvms 6.5.dneg <em>dneg<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -401,1 +1040,6 @@\n-    \/** Shift left int *\/\n+    \/**\n+     * Shift left {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishl <em>ishl<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -404,1 +1048,6 @@\n-    \/** Shift left long *\/\n+    \/**\n+     * Shift left {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshl <em>lshl<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -407,1 +1056,6 @@\n-    \/** Shift right int *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.ishr <em>ishr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -410,1 +1064,6 @@\n-    \/** Shift right long *\/\n+    \/**\n+     * Arithmetic shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lshr <em>lshr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -413,1 +1072,6 @@\n-    \/** Logical shift right int *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#INT int}.\n+     *\n+     * @jvms 6.5.iushr <em>iushr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -416,1 +1080,6 @@\n-    \/** Logical shift right long *\/\n+    \/**\n+     * Logical shift right {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lushr <em>lushr<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -419,1 +1088,9 @@\n-    \/** Boolean AND int *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} AND.\n+     *\n+     * @jvms 6.5.iand <em>iand<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -422,1 +1099,6 @@\n-    \/** Boolean AND long *\/\n+    \/**\n+     * Bitwise AND {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.land <em>land<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -425,1 +1107,9 @@\n-    \/** Boolean OR int *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} OR.\n+     *\n+     * @jvms 6.5.ior <em>ior<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -428,1 +1118,6 @@\n-    \/** Boolean OR long *\/\n+    \/**\n+     * Bitwise OR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lor <em>lor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -431,1 +1126,9 @@\n-    \/** Boolean XOR int *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#INT int}.\n+     *\n+     * @apiNote\n+     * This may be used to implement {@link TypeKind#BOOLEAN boolean} XOR.\n+     *\n+     * @jvms 6.5.ixor <em>ixor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -434,1 +1137,6 @@\n-    \/** Boolean XOR long *\/\n+    \/**\n+     * Bitwise XOR {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.lxor <em>lxor<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -437,1 +1145,6 @@\n-    \/** Increment local variable by constant *\/\n+    \/**\n+     * Increment local variable by constant.\n+     *\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     * @see Kind#INCREMENT\n+     *\/\n@@ -440,1 +1153,7 @@\n-    \/** Convert int to long *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2l <em>i2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -443,1 +1162,7 @@\n-    \/** Convert int to float *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2f <em>i2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -446,1 +1171,7 @@\n-    \/** Convert int to double *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.i2d <em>i2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -449,1 +1180,7 @@\n-    \/** Convert long to int *\/\n+    \/**\n+     * Convert {@link TypeKind#LONG long} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.l2i <em>l2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -452,1 +1189,6 @@\n-    \/** Convert long to float *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2f <em>l2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -455,1 +1197,6 @@\n-    \/** Convert long to double *\/\n+    \/** Convert {@link TypeKind#LONG long} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.l2d <em>l2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -458,1 +1205,7 @@\n-    \/** Convert float to int *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2i <em>f2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -461,1 +1214,7 @@\n-    \/** Convert float to long *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#LONG long}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.f2l <em>f2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -464,1 +1223,7 @@\n-    \/** Convert float to double *\/\n+    \/**\n+     * Convert {@link TypeKind#FLOAT float} to {@link TypeKind#DOUBLE double}.\n+     *\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     * @jvms 6.5.f2d <em>f2d<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -467,1 +1232,7 @@\n-    \/** Convert double to int *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#INT int}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2i <em>d2i<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -470,1 +1241,6 @@\n-    \/** Convert double to long *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#LONG long}.\n+     *\n+     * @jvms 6.5.d2l <em>d2l<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -473,1 +1249,7 @@\n-    \/** Convert double to float *\/\n+    \/**\n+     * Convert {@link TypeKind#DOUBLE double} to {@link TypeKind#FLOAT float}.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.d2f <em>d2f<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -476,1 +1258,9 @@\n-    \/** Convert int to byte *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#BYTE byte}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code byte} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2b <em>i2b<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -479,1 +1269,9 @@\n-    \/** Convert int to char *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#CHAR char}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code char} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2c <em>i2c<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -482,1 +1280,9 @@\n-    \/** Convert int to short *\/\n+    \/**\n+     * Convert {@link TypeKind#INT int} to {@link TypeKind#SHORT short}.\n+     * This is as if storing the {@linkplain TypeKind##computational-type\n+     * computational} {@code int} into a {@code short} and loading it back.\n+     *\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @jvms 6.5.i2s <em>i2s<\/em>\n+     * @see Kind#CONVERT\n+     *\/\n@@ -485,1 +1291,7 @@\n-    \/** Compare long *\/\n+    \/**\n+     * Compare {@link TypeKind#LONG long}.\n+     *\n+     * @see Long#compare(long, long)\n+     * @jvms 6.5.lcmp <em>lcmp<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -488,1 +1300,8 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code -1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -491,1 +1310,8 @@\n-    \/** Compare float *\/\n+    \/**\n+     * Compare {@link TypeKind#FLOAT float}.\n+     * Produces {@code 1} if any operand is {@link Float#isNaN(float) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.fcmp_op <em>fcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -494,1 +1320,8 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code -1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -497,1 +1330,8 @@\n-    \/** Compare double *\/\n+    \/**\n+     * Compare {@link TypeKind#DOUBLE double}.\n+     * Produces {@code 1} if any operand is {@link Double#isNaN(double) NaN}.\n+     *\n+     * @see Double##equivalenceRelation Floating-point Equality, Equivalence, and Comparison\n+     * @jvms 6.5.dcmp_op <em>dcmp&lt;op&gt;<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -500,1 +1340,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code == 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -503,1 +1348,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code != 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -506,1 +1356,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code < 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -509,1 +1364,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code >= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -512,1 +1372,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code > 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -515,1 +1380,6 @@\n-    \/** Branch if int comparison with zero succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code <= 0} succeeds.\n+     *\n+     * @jvms 6.5.if_cond <em>if_&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -518,1 +1388,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -521,1 +1396,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -524,1 +1404,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 < operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -527,1 +1412,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 >= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -530,1 +1420,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 > operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -533,1 +1428,6 @@\n-    \/** Branch if int comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#INT int} comparison {@code operand1 <= operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_icmp_cond <em>if_icmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -536,1 +1436,7 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 == operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -539,1 +1445,7 @@\n-    \/** Branch if reference comparison succeeds *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} comparison\n+     * {@code operand1 != operand2} succeeds.\n+     *\n+     * @jvms 6.5.if_acmp_cond <em>if_acmp&lt;cond&gt;<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -542,1 +1454,6 @@\n-    \/** Branch always *\/\n+    \/**\n+     * Branch always.\n+     *\n+     * @jvms 6.5.goto <em>goto<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -546,2 +1463,6 @@\n-     * Jump subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine; last used in major version {@value\n+     * ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr <em>jsr<\/em>\n+     * @see Kind#DISCONTINUED_JSR\n@@ -552,2 +1473,6 @@\n-     * Return from subroutine is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine; last used in major version\n+     * {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Kind#DISCONTINUED_RET\n@@ -557,1 +1482,6 @@\n-    \/** Access jump table by index and jump *\/\n+    \/**\n+     * Access jump table by index and jump.\n+     *\n+     * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n+     * @see Kind#TABLE_SWITCH\n+     *\/\n@@ -560,1 +1490,6 @@\n-    \/** Access jump table by key match and jump *\/\n+    \/**\n+     * Access jump table by key match and jump.\n+     *\n+     * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n+     * @see Kind#LOOKUP_SWITCH\n+     *\/\n@@ -563,1 +1498,6 @@\n-    \/** Return int from method *\/\n+    \/**\n+     * Return {@link TypeKind#INT int} from method.\n+     *\n+     * @jvms 6.5.ireturn <em>ireturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -566,1 +1506,6 @@\n-    \/** Return long from method *\/\n+    \/**\n+     * Return {@link TypeKind#LONG long} from method.\n+     *\n+     * @jvms 6.5.lreturn <em>lreturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -569,1 +1514,6 @@\n-    \/** Return float from method *\/\n+    \/**\n+     * Return {@link TypeKind#FLOAT float} from method.\n+     *\n+     * @jvms 6.5.freturn <em>freturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -572,1 +1522,6 @@\n-    \/** Return double from method *\/\n+    \/**\n+     * Return {@link TypeKind#DOUBLE double} from method.\n+     *\n+     * @jvms 6.5.dreturn <em>dreturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -575,1 +1530,6 @@\n-    \/** Return reference from method *\/\n+    \/**\n+     * Return {@link TypeKind#REFERENCE reference} from method.\n+     *\n+     * @jvms 6.5.areturn <em>areturn<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -578,1 +1538,6 @@\n-    \/** Return void from method *\/\n+    \/**\n+     * Return {@link TypeKind#VOID void} from method.\n+     *\n+     * @jvms 6.5.return <em>return<\/em>\n+     * @see Kind#RETURN\n+     *\/\n@@ -581,1 +1546,6 @@\n-    \/** Get static field from class *\/\n+    \/**\n+     * Get {@code static} field from class.\n+     *\n+     * @jvms 6.5.getstatic <em>getstatic<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -584,1 +1554,6 @@\n-    \/** Set static field in class *\/\n+    \/**\n+     * Set {@code static} field in class.\n+     *\n+     * @jvms 6.5.putstatic <em>putstatic<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -587,1 +1562,6 @@\n-    \/** Fetch field from object *\/\n+    \/**\n+     * Fetch field from object.\n+     *\n+     * @jvms 6.5.getfield <em>getfield<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -590,1 +1570,6 @@\n-    \/** Set field in object *\/\n+    \/**\n+     * Set field in object.\n+     *\n+     * @jvms 6.5.putfield <em>putfield<\/em>\n+     * @see Kind#FIELD_ACCESS\n+     *\/\n@@ -593,1 +1578,6 @@\n-    \/** Invoke instance method; dispatch based on class *\/\n+    \/**\n+     * Invoke instance method; dispatch based on class.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -598,1 +1588,4 @@\n-     * methods and methods of the current class and its supertypes\n+     * methods and methods of the current class and its supertypes.\n+     *\n+     * @jvms 6.5.invokevirtual <em>invokevirtual<\/em>\n+     * @see Kind#INVOKE\n@@ -602,1 +1595,6 @@\n-    \/** Invoke a class (static) method *\/\n+    \/**\n+     * Invoke a class ({@code static}) method.\n+     *\n+     * @jvms 6.5.invokestatic <em>invokestatic<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -605,1 +1603,6 @@\n-    \/** Invoke interface method *\/\n+    \/**\n+     * Invoke interface method.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n+     * @see Kind#INVOKE\n+     *\/\n@@ -608,1 +1611,6 @@\n-    \/** Invoke a dynamically-computed call site *\/\n+    \/**\n+     * Invoke a dynamically-computed call site.\n+     *\n+     * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n+     * @see Kind#INVOKE_DYNAMIC\n+     *\/\n@@ -611,1 +1619,6 @@\n-    \/** Create new object *\/\n+    \/**\n+     * Create new object.\n+     *\n+     * @jvms 6.5.new <em>new<\/em>\n+     * @see Kind#NEW_OBJECT\n+     *\/\n@@ -614,1 +1627,6 @@\n-    \/** Create new array *\/\n+    \/**\n+     * Create new array.\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see Kind#NEW_PRIMITIVE_ARRAY\n+     *\/\n@@ -617,1 +1635,6 @@\n-    \/** Create new array of reference *\/\n+    \/**\n+     * Create new array of {@link TypeKind#REFERENCE reference}.\n+     *\n+     * @jvms 6.5.anewarray <em>anewarray<\/em>\n+     * @see Kind#NEW_REF_ARRAY\n+     *\/\n@@ -620,1 +1643,6 @@\n-    \/** Get length of array *\/\n+    \/**\n+     * Get length of array.\n+     *\n+     * @jvms 6.5.arraylength <em>arraylength<\/em>\n+     * @see Kind#OPERATOR\n+     *\/\n@@ -623,1 +1651,6 @@\n-    \/** Throw exception or error *\/\n+    \/**\n+     * Throw exception or error.\n+     *\n+     * @jvms 6.5.athrow <em>athrow<\/em>\n+     * @see Kind#THROW_EXCEPTION\n+     *\/\n@@ -626,1 +1659,7 @@\n-    \/** Check whether object is of given type *\/\n+    \/**\n+     * Check whether object is of given type.\n+     *\n+     * @see Class#cast(Object)\n+     * @jvms 6.5.checkcast <em>checkcast<\/em>\n+     * @see Kind#TYPE_CHECK\n+     *\/\n@@ -629,1 +1668,7 @@\n-    \/** Determine if object is of given type *\/\n+    \/**\n+     * Determine if object is of given type.\n+     *\n+     * @see Class#isInstance(Object)\n+     * @jvms 6.5.instanceof <em>instanceof<\/em>\n+     * @see Kind#TYPE_CHECK\n+     *\/\n@@ -632,1 +1677,6 @@\n-    \/** Enter monitor for object *\/\n+    \/**\n+     * Enter monitor for object.\n+     *\n+     * @jvms 6.5.monitorenter <em>monitorenter<\/em>\n+     * @see Kind#MONITOR\n+     *\/\n@@ -635,1 +1685,6 @@\n-    \/** Exit monitor for object *\/\n+    \/**\n+     * Exit monitor for object.\n+     *\n+     * @jvms 6.5.monitorexit <em>monitorexit<\/em>\n+     * @see Kind#MONITOR\n+     *\/\n@@ -638,1 +1693,6 @@\n-    \/** Create new multidimensional array *\/\n+    \/**\n+     * Create new multidimensional array.\n+     *\n+     * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n+     * @see Kind#NEW_MULTI_ARRAY\n+     *\/\n@@ -641,1 +1701,6 @@\n-    \/** Branch if reference is null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is {@code null}.\n+     *\n+     * @jvms 6.5.ifnull <em>ifnull<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -644,1 +1709,6 @@\n-    \/** Branch if reference not null *\/\n+    \/**\n+     * Branch if {@link TypeKind#REFERENCE reference} is not {@code null}.\n+     *\n+     * @jvms 6.5.ifnonnull <em>ifnonnull<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -647,1 +1717,6 @@\n-    \/** Branch always (wide index) *\/\n+    \/**\n+     * Branch always (wide index).\n+     *\n+     * @jvms 6.5.goto_w <em>goto_w<\/em>\n+     * @see Kind#BRANCH\n+     *\/\n@@ -651,2 +1726,6 @@\n-     * Jump subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Jump subroutine (wide index); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.jsr_w <em>jsr_w<\/em>\n+     * @see Kind#DISCONTINUED_JSR\n@@ -656,1 +1735,8 @@\n-    \/** Load int from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#INT int} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iload <em>iload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -659,1 +1745,8 @@\n-    \/** Load long from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#LONG long} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lload <em>lload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -662,1 +1755,8 @@\n-    \/** Load float from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#FLOAT float} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fload <em>fload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -665,1 +1765,8 @@\n-    \/** Load double from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#DOUBLE double} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dload <em>dload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -668,1 +1775,8 @@\n-    \/** Load reference from local variable (wide index) *\/\n+    \/**\n+     * Load {@link TypeKind#REFERENCE reference} from local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.aload <em>aload<\/em>\n+     * @see Kind#LOAD\n+     *\/\n@@ -671,1 +1785,8 @@\n-    \/** Store int into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#INT int} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.istore <em>istore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -674,1 +1795,8 @@\n-    \/** Store long into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#LONG long} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.lstore <em>lstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -677,1 +1805,8 @@\n-    \/** Store float into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#FLOAT float} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.fstore <em>fstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -680,1 +1815,8 @@\n-    \/** Store double into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#DOUBLE double} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.dstore <em>dstore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -683,1 +1825,9 @@\n-    \/** Store reference into local variable (wide index) *\/\n+    \/**\n+     * Store {@link TypeKind#REFERENCE reference} into local variable (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     * Can also store the {@link TypeKind##returnAddress returnAddress} type.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.astore <em>astore<\/em>\n+     * @see Kind#STORE\n+     *\/\n@@ -687,2 +1837,8 @@\n-     * Return from subroutine (wide index) is discontinued opcode\n-     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     * (Discontinued) Return from subroutine (wide index); last used in major\n+     * version {@value ClassFile#JAVA_6_VERSION}.\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 4.9.1 Static Constraints\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Kind#DISCONTINUED_RET\n@@ -692,1 +1848,8 @@\n-    \/** Increment local variable by constant (wide index) *\/\n+    \/**\n+     * Increment local variable by constant (wide index).\n+     * This is a {@linkplain #isWide() wide}-modified pseudo-opcode.\n+     *\n+     * @jvms 6.5.wide <em>wide<\/em>\n+     * @jvms 6.5.iinc <em>iinc<\/em>\n+     * @see Kind#INCREMENT\n+     *\/\n@@ -696,1 +1859,2 @@\n-     * Kinds of opcodes.\n+     * Kinds of opcodes.  Each kind of opcode has its own modeling interface\n+     * for its instructions.\n@@ -700,1 +1864,1 @@\n-    public static enum Kind {\n+    public enum Kind {\n@@ -703,1 +1867,1 @@\n-         * Load from local variable\n+         * Load from local variable.\n@@ -705,0 +1869,1 @@\n+         * @see LoadInstruction\n@@ -739,1 +1904,1 @@\n-         * Store into local variable\n+         * Store into local variable.\n@@ -741,0 +1906,1 @@\n+         * @see StoreInstruction\n@@ -775,1 +1941,1 @@\n-         * Increment local variable\n+         * Increment local variable.\n@@ -777,0 +1943,1 @@\n+         * @see IncrementInstruction\n@@ -783,1 +1950,1 @@\n-         * Branch\n+         * Branch.\n@@ -785,0 +1952,1 @@\n+         * @see BranchInstruction\n@@ -807,1 +1975,1 @@\n-         * Access jump table by key match and jump\n+         * Access jump table by key match and jump.\n@@ -809,0 +1977,1 @@\n+         * @see LookupSwitchInstruction\n@@ -814,1 +1983,1 @@\n-         * Access jump table by index and jump\n+         * Access jump table by index and jump.\n@@ -816,0 +1985,1 @@\n+         * @see TableSwitchInstruction\n@@ -821,1 +1991,1 @@\n-         * Return from method\n+         * Return from method.\n@@ -823,0 +1993,1 @@\n+         * @see ReturnInstruction\n@@ -833,1 +2004,1 @@\n-         * Throw exception or error\n+         * Throw exception or error.\n@@ -835,0 +2006,1 @@\n+         * @see ThrowInstruction\n@@ -840,1 +2012,1 @@\n-         * Access field\n+         * Access field.\n@@ -842,0 +2014,1 @@\n+         * @see FieldInstruction\n@@ -850,1 +2023,1 @@\n-         * Invoke method or constructor\n+         * Invoke method or constructor.\n@@ -852,0 +2025,1 @@\n+         * @see InvokeInstruction\n@@ -860,1 +2034,1 @@\n-         * Invoke a dynamically-computed call site\n+         * Invoke a dynamically-computed call site.\n@@ -862,0 +2036,1 @@\n+         * @see InvokeDynamicInstruction\n@@ -867,1 +2042,1 @@\n-         * Create new object\n+         * Create new object.\n@@ -869,0 +2044,1 @@\n+         * @see NewObjectInstruction\n@@ -874,1 +2050,1 @@\n-         * Create new array\n+         * Create new array.\n@@ -876,0 +2052,1 @@\n+         * @see NewPrimitiveArrayInstruction\n@@ -881,1 +2058,1 @@\n-         * Create new reference array\n+         * Create new {@link TypeKind#REFERENCE reference} array.\n@@ -883,0 +2060,1 @@\n+         * @see NewReferenceArrayInstruction\n@@ -888,1 +2066,1 @@\n-         * Create new multidimensional array\n+         * Create new multidimensional array.\n@@ -890,0 +2068,1 @@\n+         * @see NewMultiArrayInstruction\n@@ -895,1 +2074,1 @@\n-         * Check whether object is of given type\n+         * Check whether object is of given type.\n@@ -897,0 +2076,1 @@\n+         * @see TypeCheckInstruction\n@@ -903,1 +2083,1 @@\n-         * Load from array\n+         * Load from array.\n@@ -905,0 +2085,1 @@\n+         * @see ArrayLoadInstruction\n@@ -917,1 +2098,1 @@\n-         * Store into array\n+         * Store into array.\n@@ -919,0 +2100,1 @@\n+         * @see ArrayStoreInstruction\n@@ -931,1 +2113,1 @@\n-         * Stack operations\n+         * Stack operations.\n@@ -933,0 +2115,1 @@\n+         * @see StackInstruction\n@@ -946,1 +2129,1 @@\n-         * Type conversions\n+         * Type conversions.\n@@ -948,0 +2131,1 @@\n+         * @see ConvertInstruction\n@@ -967,1 +2151,1 @@\n-         * Operators\n+         * Operators.\n@@ -969,0 +2153,1 @@\n+         * @see OperatorInstruction\n@@ -1015,1 +2200,1 @@\n-         * Constants\n+         * Constants.\n@@ -1017,0 +2202,1 @@\n+         * @see ConstantInstruction\n@@ -1041,1 +2227,1 @@\n-         * Monitor\n+         * Monitor.\n@@ -1043,0 +2229,1 @@\n+         * @see MonitorInstruction\n@@ -1049,1 +2236,1 @@\n-         * Do nothing\n+         * Do nothing.\n@@ -1051,0 +2238,1 @@\n+         * @see NopInstruction\n@@ -1056,1 +2244,1 @@\n-         * Discontinued jump subroutine\n+         * Discontinued jump subroutine.\n@@ -1058,0 +2246,1 @@\n+         * @see DiscontinuedInstruction.JsrInstruction\n@@ -1060,1 +2249,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1065,1 +2253,1 @@\n-         * Discontinued return from subroutine\n+         * Discontinued return from subroutine.\n@@ -1067,0 +2255,1 @@\n+         * @see DiscontinuedInstruction.RetInstruction\n@@ -1069,1 +2258,0 @@\n-         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n@@ -1093,0 +2281,2 @@\n+     * <p>\n+     * {@code wide} extends local variable index by additional bytes.\n@@ -1094,0 +2284,1 @@\n+     * @jvms 6.5.wide <em>wide<\/em>\n@@ -1112,0 +2303,2 @@\n+     *\n+     * @see Instruction#sizeInBytes() Instruction::sizeInBytes\n@@ -1116,1 +2309,2 @@\n-     * {@return instruction kind}\n+     * {@return operation kind}  Each kind of operation has its own modeling\n+     * interface to model instructions belonging to that kind.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1445,"deletions":251,"binary":false,"changes":1696,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n@@ -36,7 +39,11 @@\n- * Describes the data types Java Virtual Machine operates on.\n- * This omits {@code returnAddress} (JVMS {@jvms 2.3.3}),\n- * which is only used by discontinued {@link\n- * DiscontinuedInstruction.JsrInstruction jsr} and {@link\n- * DiscontinuedInstruction.RetInstruction ret} instructions,\n- * and includes {@link #VOID void} (JVMS {@jvms 4.3.3}), which\n- * appears as a method return type.\n+ * Describes the data types Java Virtual Machine operates on.  This omits {@code\n+ * returnAddress} (JVMS {@jvms 2.3.3}) and includes {@link #VOID void} (JVMS\n+ * {@jvms 4.3.3}), which appears as a method return type.\n+ * <p>\n+ * The <code>{@index returnAddress}<\/code> type is only used by discontinued\n+ * {@linkplain DiscontinuedInstruction.JsrInstruction jump subroutine} and\n+ * {@linkplain DiscontinuedInstruction.RetInstruction return from subroutine}\n+ * instructions.  Jump subroutine instructions push {@code returnAddress} to the\n+ * operand stack; {@link StoreInstruction astore} instructions store {@code\n+ * returnAddress} from the operand stack to local variables; return from\n+ * subroutine instructions load {@code returnAddress} from local variables.\n@@ -167,1 +174,4 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     *\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see NewPrimitiveArrayInstruction\n+     * @see #fromNewarrayCode(int) fromNewarrayCode(int)\n@@ -178,0 +188,1 @@\n+     *\n@@ -188,0 +199,3 @@\n+     *\n+     * @see LoadInstruction\n+     * @see StoreInstruction\n@@ -196,0 +210,1 @@\n+     *\n@@ -198,1 +213,3 @@\n-     * @jvms 6.5.newarray <i>newarray<\/i>\n+     * @jvms 6.5.newarray <em>newarray<\/em>\n+     * @see NewPrimitiveArrayInstruction\n+     * @see #newarrayCode() newarrayCode()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,8 @@\n+ * <p>\n+ * An array load instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayLoadInstruction\" target=\"CodeBuilder#arrayLoad(TypeKind)\" :\n+ * ArrayLoadInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is not {@link TypeKind#VOID void}, and {@link\n+ * TypeKind#BOOLEAN boolean} is converted to {@link TypeKind#BYTE byte}.\n@@ -42,0 +51,2 @@\n+ * @see Opcode.Kind#ARRAY_LOAD\n+ * @see CodeBuilder#arrayLoad CodeBuilder::arrayLoad\n@@ -47,1 +58,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +60,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +71,1 @@\n-     *         {@link Opcode.Kind#ARRAY_LOAD}.\n+     *         {@link Opcode.Kind#ARRAY_LOAD}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -38,2 +39,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n@@ -41,0 +42,8 @@\n+ * <p>\n+ * An array store instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ArrayStoreInstruction\" target=\"CodeBuilder#arrayStore(TypeKind)\" :\n+ * ArrayStoreInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is not {@link TypeKind#VOID void}, and {@link\n+ * TypeKind#BOOLEAN boolean} is converted to {@link TypeKind#BYTE byte}.\n@@ -42,0 +51,2 @@\n+ * @see Opcode.Kind#ARRAY_STORE\n+ * @see CodeBuilder#arrayStore CodeBuilder::arrayStore\n@@ -47,1 +58,1 @@\n-     * {@return the component type of the array} The {@link TypeKind#BYTE byte}\n+     * {@return the component type of the array}  The {@link TypeKind#BYTE byte}\n@@ -49,1 +60,2 @@\n-     * {@link TypeKind#BOOLEAN boolean} arrays.\n+     * {@link TypeKind#BOOLEAN boolean} arrays, so this never returns\n+     * {@code boolean}.\n@@ -59,1 +71,1 @@\n-     *         {@link Opcode.Kind#ARRAY_STORE}.\n+     *         {@link Opcode.Kind#ARRAY_STORE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,17 @@\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes have a\n+ * {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#BRANCH}.  Delivered as\n+ * a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A branch instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"BranchInstruction\" target=\"#of\":\n+ * BranchInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ *     Label target \/\/ @link substring=\"target\" target=\"#target()\"\n+ * )\n+ * }\n+ * <p>\n+ * Due to physical restrictions, some types of instructions cannot encode labels\n+ * too far away in the list of code elements.  In such cases, the {@link\n+ * ClassFile.ShortJumpsOption} controls how an invalid branch instruction model\n+ * is written by a {@link CodeBuilder}.\n@@ -42,0 +52,3 @@\n+ * @see Opcode.Kind#BRANCH\n+ * @see CodeBuilder#branch CodeBuilder::branch\n+ * @see ClassFile.ShortJumpsOption\n@@ -48,1 +61,1 @@\n-     * {@return the target of the branch}\n+     * {@return the branch target of this instruction}\n@@ -59,1 +72,1 @@\n-     *         {@link Opcode.Kind#BRANCH}.\n+     *         {@link Opcode.Kind#BRANCH}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,4 +40,21 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * CharacterRangeTableAttribute CharacterRangeTable} attribute.  Delivered as a\n+ * {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A character range entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"CharacterRange\" target=\"#of\":\n+ * CharacterRange(\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope, \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ *     int characterRangeStart, \/\/ @link substring=\"characterRangeStart\" target=\"#characterRangeStart\"\n+ *     int characterRangeEnd, \/\/ @link substring=\"characterRangeEnd\" target=\"#characterRangeEnd\"\n+ *     int flags \/\/ @link substring=\"flags\" target=\"#flags\"\n+ * )\n+ * }\n+ * <p>\n+ * Another model, {@link CharacterRangeInfo}, also models a character range\n+ * entry;  it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link CharacterRangeTableAttribute}.\n@@ -44,0 +62,3 @@\n+ * @see CharacterRangeInfo\n+ * @see CodeBuilder#characterRange CodeBuilder::characterRange\n+ * @see ClassFile.DebugElementsOption\n@@ -117,1 +138,1 @@\n-     * @see java.lang.classfile.attribute.CharacterRangeInfo#flags()\n+     * @see CharacterRangeInfo#flags()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/CharacterRange.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -41,5 +42,12 @@\n- * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n- * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n- * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, including {@linkplain IntrinsicConstantInstruction\n+ * \"intrinsic\"}, {@linkplain ArgumentConstantInstruction \"argument\"}, and\n+ * {@linkplain LoadConstantInstruction \"load\"} constant instructions.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#CONSTANT}.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ * <p>\n+ * The loaded constant value is symbolically represented as a {@link ConstantDesc}:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConstantInstruction\" target=\"CodeBuilder#loadConstant(ConstantDesc)\" :\n+ * ConstantInstruction(ConstantDesc constantValue) \/\/ @link substring=\"constantValue\" target=\"#constantValue()\"\n+ * }\n@@ -47,0 +55,3 @@\n+ * @see Opcode.Kind#CONSTANT\n+ * @see CodeBuilder#loadConstant(ConstantDesc) CodeBuilder::loadConstant\n+ * @sealedGraph\n@@ -57,1 +68,2 @@\n-     * {@return the type of the constant}\n+     * {@return the {@linkplain TypeKind##computational-type computational type} of the constant}\n+     * This is derived from the {@link #constantValue() constantValue}.\n@@ -62,2 +74,16 @@\n-     * Models an \"intrinsic constant\" instruction (e.g., {@code\n-     * iconst_0}).\n+     * Models an \"intrinsic constant\" instruction, which encodes\n+     * the constant value in its opcode. Examples include {@link\n+     * Opcode#ACONST_NULL aconst_null} and {@link\n+     * Opcode#ICONST_0 iconst_0}.\n+     * <p>\n+     * An intrinsic constant instruction is composite:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"IntrinsicConstantInstruction\" target=\"#ofIntrinsic\" :\n+     * IntrinsicConstantInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+     * }\n+     * where:\n+     * <dl>\n+     * <dt>{@link #opcode() opcode}<\/dt>\n+     * <dd>Must be of the constant kind and have a {@linkplain\n+     * Opcode#sizeIfFixed() fixed size} of 1.<\/dd>\n+     * <\/dl>\n@@ -65,0 +91,2 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofIntrinsic ConstantInstruction::ofIntrinsic\n@@ -70,3 +98,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -80,2 +105,19 @@\n-     * Models an \"argument constant\" instruction (e.g., {@code\n-     * bipush}).\n+     * Models an \"argument constant\" instruction, which encodes the\n+     * constant value in the instruction directly. Includes {@link\n+     * Opcode#BIPUSH bipush} and {@link Opcode#SIPUSH sipush} instructions.\n+     * <p>\n+     * An argument constant instruction is composite:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"ArgumentConstantInstruction\" target=\"#ofArgument\" :\n+     * ArgumentConstantInstruction(\n+     *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+     *     int constantValue \/\/ @link substring=\"constantValue\" target=\"#constantValue()\"\n+     * )\n+     * }\n+     * where:\n+     * <ul>\n+     * <li>{@code opcode} must be one of {@code bipush} or {@code sipush}.\n+     * <li>{@code constantValue} must be in the range of {@code byte}, {@code\n+     * [-128, 127]}, for {@code bipush},  and in the range of {@code short},\n+     * {@code [-32768, 32767]}, for {@code sipush}.\n+     * <\/ul>\n@@ -83,0 +125,5 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofArgument ConstantInstruction::ofArgument\n+     * @see CodeBuilder#loadConstant(int) CodeBuilder::loadConstant(int)\n+     * @see CodeBuilder#bipush CodeBuilder::bipush\n+     * @see CodeBuilder#sipush CodeBuilder::sipush\n@@ -92,3 +139,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -102,2 +146,14 @@\n-     * Models a \"load constant\" instruction (e.g., {@code\n-     * ldc}).\n+     * Models a \"load constant\" instruction, which encodes the constant value\n+     * in the constant pool.  Includes {@link Opcode#LDC ldc} and {@link\n+     * Opcode#LDC_W ldc_w}, and {@link Opcode#LDC2_W ldc2_w} instructions.\n+     * <p>\n+     * A load constant instruction is composite:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"LoadConstantInstruction\" target=\"CodeBuilder#ldc(LoadableConstantEntry)\" :\n+     * LoadConstantInstruction(LoadableConstantEntry constantEntry) \/\/ @link substring=\"constantEntry\" target=\"#constantEntry()\"\n+     * }\n+     * <p>\n+     * A \"load constant\" instruction can load any constant value supported by\n+     * other constant-load instructions.  However, other instructions are\n+     * usually more optimized, avoiding extra constant pool entries and being\n+     * smaller.\n@@ -105,0 +161,3 @@\n+     * @see Opcode.Kind#CONSTANT\n+     * @see ConstantInstruction#ofLoad ConstantInstruction::ofLoad\n+     * @see CodeBuilder#ldc CodeBuilder::ldc\n@@ -116,3 +175,0 @@\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n@@ -142,0 +198,4 @@\n+     * <p>\n+     * {@code value} must be in the range of {@code byte}, {@code [-128, 127]},\n+     * for {@link Opcode#BIPUSH}, and in the range of {@code short}, {@code\n+     * [-32768, 32767]}, for {@link Opcode#SIPUSH}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":81,"deletions":21,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,18 @@\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute, such as {@link Opcode#I2L i2l}.  Corresponding opcodes\n+ * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#CONVERT}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A primitive conversion instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConvertInstruction\" target=\"#of(TypeKind, TypeKind)\" :\n+ * ConvertInstruction(\n+ *     TypeKind fromType, \/\/ @link substring=\"fromType\" target=\"#fromType\"\n+ *     TypeKind toType \/\/ @link substring=\"toType\" target=\"#toType\"\n+ * )\n+ * }\n+ * where these conversions are valid:\n+ * <ul>\n+ * <li>Between {@code int}, {@code long}, {@code float}, and {@code double}, where\n+ * {@code fromType != toType};\n+ * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+ * <\/ul>\n@@ -43,0 +59,2 @@\n+ * @see Opcode.Kind#CONVERT\n+ * @see CodeBuilder#conversion CodeBuilder::conversion\n@@ -58,1 +76,6 @@\n-     * {@return A conversion instruction}\n+     * {@return a conversion instruction}  Valid conversions are:\n+     * <ul>\n+     * <li>Between {@code int}, {@code long}, {@code float}, and {@code double},\n+     * where {@code fromType != toType};\n+     * <li>From {@code int} to {@code byte}, {@code char}, and {@code short}.\n+     * <\/ul>\n@@ -62,0 +85,1 @@\n+     * @throws IllegalArgumentException if this is not a valid conversion\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n+import java.lang.classfile.*;\n@@ -38,3 +34,3 @@\n- * Models instruction discontinued from the {@code code} array of a {@code Code}\n- * attribute. Delivered as a {@link CodeElement} when traversing the elements of\n- * a {@link CodeModel}.\n+ * Marker interface for instruction discontinued from the {@code code} array of\n+ * a {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n@@ -42,0 +38,8 @@\n+ * @apiNote\n+ * While most instructions have convenience factory methods in {@link\n+ * CodeBuilder}, discontinued instructions can only be supplied to code builders\n+ * explicitly with {@link CodeBuilder#with CodeBuilder::with} to discourage\n+ * their use.\n+ *\n+ * @jvms 4.9.1 Static Constraints\n+ * @sealedGraph\n@@ -47,5 +51,22 @@\n-     * Models JSR and JSR_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n-     * {@link Opcode.Kind#DISCONTINUED_JSR}.  Delivered as a {@link CodeElement}\n-     * when traversing the elements of a {@link CodeModel}.\n+     * Models jump subroutine instructions discontinued from the {@code code}\n+     * array of a {@code Code} attribute since class file major version {@value\n+     * ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).  Corresponding opcodes\n+     * have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#DISCONTINUED_JSR}.\n+     * Delivered as a {@link CodeElement} when traversing the elements of a\n+     * {@link CodeModel}.\n+     * <p>\n+     * A jump subroutine instruction is composite:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"JsrInstruction\" target=\"#of(Label)\" :\n+     * JsrInstruction(Label target) \/\/ @link substring=\"target\" target=\"#target()\"\n+     * }\n+     * <p>\n+     * Due to physical restrictions, {@link Opcode#JSR jsr} instructions cannot\n+     * encode labels too far away in the list of code elements.  In such cases,\n+     * the {@link ClassFile.ShortJumpsOption} controls how an invalid {@code jsr}\n+     * instruction model is written by a {@link CodeBuilder}.\n+     * <p>\n+     * Jump subroutine instructions push a {@link TypeKind##returnAddress\n+     * returnAddress} value to the operand stack, and {@link StoreInstruction\n+     * astore} series of instructions can then store this value to a local\n+     * variable slot.\n@@ -53,0 +74,1 @@\n+     * @see Opcode.Kind#DISCONTINUED_JSR\n@@ -60,1 +82,1 @@\n-         * {@return the target of the JSR instruction}\n+         * {@return the target of the jump subroutine instruction}\n@@ -65,1 +87,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -67,1 +89,5 @@\n-         * @param op the opcode for the specific type of JSR instruction,\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@link Opcode#JSR_W\n+         * jsr_w} instructions to avoid short jumps.\n+         *\n+         * @param op the opcode for the specific type of jump subroutine instruction,\n@@ -79,1 +105,1 @@\n-         * {@return a JSR instruction}\n+         * {@return a jump subroutine instruction}\n@@ -89,3 +115,4 @@\n-     * Models RET and RET_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n+     * Models return from subroutine instructions discontinued from the {@code\n+     * code} array of a {@code Code} attribute since class file major version\n+     * {@value ClassFile#JAVA_7_VERSION} (JVMS {@jvms 4.9.1}).\n+     * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -94,0 +121,11 @@\n+     * <p>\n+     * A return from subroutine instruction is composite:\n+     * {@snippet lang=text :\n+     * \/\/ @link substring=\"RetInstruction\" target=\"#of(int)\" :\n+     * RetInstruction(int slot) \/\/ @link substring=\"slot\" target=\"#slot()\"\n+     * }\n+     * where {@code slot} must be within {@code [0, 65535]}.\n+     * <p>\n+     * {@link StoreInstruction astore} series of instructions store a {@link\n+     * TypeKind##returnAddress returnAddress} value to a local variable slot,\n+     * making the slot usable by a return from subroutine instruction.\n@@ -95,0 +133,2 @@\n+     * @jvms 6.5.ret <em>ret<\/em>\n+     * @see Opcode.Kind#DISCONTINUED_RET\n@@ -103,0 +143,1 @@\n+         * The value is within {@code [0, 65535]}.\n@@ -107,1 +148,10 @@\n-         * {@return a RET or RET_W instruction}\n+         * {@return a return from subroutine instruction}\n+         * <p>\n+         * {@code slot} must be in the closed range of {@code [0, 255]} for\n+         * {@link Opcode#RET ret}, or within {@code [0, 65535]} for {@link\n+         * Opcode#RET_W wide ret}.\n+         *\n+         * @apiNote\n+         * The explicit {@code op} argument allows creating {@code wide ret}\n+         * instructions with {@code slot} in the range of regular {@code ret}\n+         * instructions.\n@@ -109,1 +159,1 @@\n-         * @param op the opcode for the specific type of RET instruction,\n+         * @param op the opcode for the specific type of return from subroutine instruction,\n@@ -121,1 +171,3 @@\n-         * {@return a RET instruction}\n+         * {@return a return from subroutine instruction}\n+         * <p>\n+         * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":75,"deletions":23,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -37,6 +39,16 @@\n- * A pseudo-instruction modeling an entry in the exception table of a code\n- * attribute.  Entries in the exception table model catch and finally blocks.\n- * Delivered as a {@link CodeElement} when traversing the contents\n- * of a {@link CodeModel}.\n- *\n- * @see PseudoInstruction\n+ * A pseudo-instruction modeling an entry in the {@code exception_table} array\n+ * of a {@link CodeAttribute Code} attribute.  Catch (JVMS {@jvms 3.12}) and\n+ * finally (JVMS {@jvms 3.14}) blocks in Java source code compile to exception\n+ * table entries.  Delivered as a {@link CodeElement} when traversing the\n+ * contents of a {@link CodeModel}.\n+ * <p>\n+ * An exception table entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ExceptionCatch\" target=\"#of(Label, Label, Label, Optional)\" :\n+ * ExceptionCatch(\n+ *     Label handler, \/\/ @link substring=\"handler\" target=\"#handler\"\n+ *     Label tryStart, \/\/ @link substring=\"tryStart\" target=\"#tryStart\"\n+ *     Label tryEnd, \/\/ @link substring=\"tryEnd\" target=\"#tryEnd\"\n+ *     Optional<ClassEntry> catchType \/\/ @link substring=\"catchType\" target=\"#catchType\"\n+ * )\n+ * }\n@@ -44,0 +56,2 @@\n+ * @see CodeBuilder#exceptionCatch CodeBuilder::exceptionCatch\n+ * @jvms 4.7.3 The {@code Code} Attribute\n@@ -64,2 +78,2 @@\n-     * {@return the type of the exception to catch, or empty if this handler is\n-     * unconditional}\n+     * {@return the type of the exception to catch, or empty if this handler\n+     * catches everything}\n@@ -83,1 +97,1 @@\n-     * {@return an exception table pseudo-instruction for an unconditional handler}\n+     * {@return an exception table pseudo-instruction to catch everything}\n@@ -85,2 +99,2 @@\n-     * @param tryStart the beginning of the instruction range for the gaurded instructions\n-     * @param tryEnd the end of the instruction range for the gaurded instructions\n+     * @param tryStart the beginning of the instruction range for the guarded instructions\n+     * @param tryEnd the end of the instruction range for the guarded instructions\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ExceptionCatch.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -43,2 +44,2 @@\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind}\n+ * of {@link Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n@@ -46,0 +47,9 @@\n+ * <p>\n+ * A field access instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"FieldInstruction\" target=\"#of(Opcode, FieldRefEntry)\" :\n+ * FieldInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ *     FieldRefEntry field, \/\/ @link substring=\"field\" target=\"#field()\"\n+ * )\n+ * }\n@@ -47,0 +57,2 @@\n+ * @see Opcode.Kind#FIELD_ACCESS\n+ * @see CodeBuilder#fieldAccess CodeBuilder::fieldAccess\n@@ -71,1 +83,5 @@\n-     * {@return the field descriptor of the field}\n+     * {@return the field descriptor string of the field}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the field is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n@@ -106,0 +122,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#FIELD_ACCESS}.\n@@ -121,0 +139,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#FIELD_ACCESS}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,2 +37,2 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind()\n+ * kind} of {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n@@ -39,0 +40,14 @@\n+ * <p>\n+ * A local variable increment instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"IncrementInstruction\" target=\"#of\" :\n+ * IncrementInstruction(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot()\"\n+ *     int constant \/\/ @link substring=\"constant\" target=\"#constant()\"\n+ * )\n+ * }\n+ * where\n+ * <ul>\n+ * <li>{@code slot} must be within {@code [0, 65535]}.\n+ * <li>{@code constant} must be within {@code [-32768, 32767]}.\n+ * <\/ul>\n@@ -40,0 +55,3 @@\n+ * @see Opcode.Kind#INCREMENT\n+ * @see CodeBuilder#iinc CodeBuilder::iinc\n+ * @jvms 6.5.iinc <em>iinc<\/em>\n@@ -57,0 +75,4 @@\n+     * <ul>\n+     * <li>{@code slot} must be within {@code [0, 65535]}.\n+     * <li>{@code constant} must be within {@code [-32768, 32767]}.\n+     * <\/ul>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/IncrementInstruction.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -43,3 +45,10 @@\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a dynamically-computed call site invocation instruction in the\n+ * {@code code} array of a {@code Code} attribute.  The corresponding opcode is\n+ * {@link Opcode#INVOKEDYNAMIC invokedynamic}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A dynamically-computed call site invocation instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeDynamicInstruction\" target=\"#of\" :\n+ * InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic) \/\/ @link substring=\"invokedynamic\" target=\"#invokedynamic()\"\n+ * }\n@@ -47,0 +56,3 @@\n+ * @see Opcode.Kind#INVOKE_DYNAMIC\n+ * @see CodeBuilder#invokedynamic CodeBuilder::invokedynamic\n+ * @jvms 6.5.invokedynamic <em>invokedynamic<\/em>\n@@ -65,0 +77,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the invocation typeis available through {@link\n+     * #typeSymbol() typeSymbol()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.TypeKind;\n@@ -45,3 +47,17 @@\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Code} attribute, other than {@link InvokeDynamicInstruction invokedynamic}.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#INVOKE}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A method invocation instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeInstruction\" target=\"#of(Opcode, MemberRefEntry)\" :\n+ * InvokeInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ *     MethodRefEntry | InterfaceMethodRefEntry method) \/\/ @link substring=\"method\" target=\"#method()\"\n+ * )\n+ * }\n+ * where {@code method} must be an {@code InterfaceMethodRefEntry} for {@link\n+ * Opcode#INVOKEINTERFACE invokeinterface} opcode, and must be a {@code\n+ * MethodRefEntry} for {@link Opcode#INVOKEVIRTUAL invokevirtual} opcode.\n+ * {@link Opcode#INVOKESTATIC invokestatic} and {@link Opcode#INVOKESPECIAL\n+ * invokespecial} can have either type of entry for {@code method}.\n@@ -49,0 +65,2 @@\n+ * @see Opcode.Kind#INVOKE\n+ * @see CodeBuilder#invoke CodeBuilder::invoke\n@@ -60,1 +78,1 @@\n-     * {@return whether the class holding the method is an interface}\n+     * {@return whether the class or interface holding the method is an interface}\n@@ -65,2 +83,9 @@\n-     * {@return the {@code count} value of an {@code invokeinterface} instruction, as defined in JVMS {@jvms 6.5}\n-     * or {@code 0} for {@code invokespecial}, {@code invokestatic} and {@code invokevirtual} instructions}\n+     * {@return the {@code count} value of an {@code invokeinterface} instruction,\n+     * or {@code 0} for other instructions}\n+     * <p>\n+     * For an {@code invokeinterface} instruction, this value must be equivalent\n+     * to the sum of {@linkplain TypeKind#slotSize() slot sizes} of all arguments\n+     * plus one, which is equal to the number of operand stack depth consumed by\n+     * this interface method invocation instruction.\n+     *\n+     * @jvms 6.5.invokeinterface <em>invokeinterface<\/em>\n@@ -71,1 +96,1 @@\n-     * {@return the class holding the method}\n+     * {@return the class or interface holding the method}\n@@ -85,1 +110,5 @@\n-     * {@return the method descriptor of the method}\n+     * {@return the method descriptor string of the method}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the method is available through\n+     * {@link #typeSymbol() typeSymbol()}.\n@@ -98,1 +127,0 @@\n-\n@@ -106,1 +134,1 @@\n-     *         {@link Opcode.Kind#INVOKE}.\n+     *         {@link Opcode.Kind#INVOKE}\n@@ -122,0 +150,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#INVOKE}\n@@ -139,0 +169,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#INVOKE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.CodeTransform;\n@@ -31,0 +33,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -38,0 +41,19 @@\n+ * <p>\n+ * This can be used to inspect the target position of labels across {@linkplain\n+ * CodeTransform transformations}, as {@linkplain CodeAttribute#labelToBci bci}\n+ * is not stable.\n+ * <p>\n+ * When passed to a {@link CodeBuilder}, this pseudo-instruction sets the\n+ * specified label to be bound at the current position in the builder.\n+ * <p>\n+ * By design, {@code LabelTarget} cannot be created by users and can only be\n+ * read from a code model.  Use {@link CodeBuilder#labelBinding\n+ * CodeBuilder::labelBinding} to bind arbitrary labels to a {@code CodeBuilder}.\n+ * <p>\n+ * For a {@code CodeBuilder cob}, a {@code LabelTarget lt}, these two calls are\n+ * equivalent:\n+ * {@snippet lang=java :\n+ * cob.with(lt); \/\/ @link substring=\"with\" target=\"CodeBuilder#with\"\n+ * \/\/ @link substring=\"labelBinding\" target=\"CodeBuilder#labelBinding\" :\n+ * cob.labelBinding(lt.label()); \/\/ @link substring=\"label\" target=\"#label\"\n+ * }\n@@ -39,2 +61,2 @@\n- * @see PseudoInstruction\n- *\n+ * @see Label\n+ * @see CodeBuilder#labelBinding CodeBuilder::labelBinding\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LabelTarget.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,2 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.LineNumberInfo;\n@@ -36,4 +39,17 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.LineNumbersOption} option.\n+ * A pseudo-instruction which indicates the code for a given line number starts\n+ * after the current position in a {@link CodeAttribute Code} attribute.  This\n+ * models a single entry in the {@link LineNumberTableAttribute LineNumberTable}\n+ * attribute.  Delivered as a {@link CodeElement} during traversal of the\n+ * elements of a {@link CodeModel}, according to the setting of the {@link\n+ * ClassFile.LineNumbersOption} option.\n+ * <p>\n+ * A line number entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LineNumber\" target=\"#of\" :\n+ * LineNumber(int line) \/\/ @link substring=\"int line\" target=\"#line\"\n+ * }\n+ * <p>\n+ * Another model, {@link LineNumberInfo}, also models a line number entry; it\n+ * has no dependency on a {@code CodeModel} and represents of bci values as\n+ * {@code int}s instead of order of pseudo-instructions in the elements of a\n+ * {@code CodeModel}, and is used as components of a {@link LineNumberTableAttribute}.\n@@ -41,1 +57,3 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * Line numbers are represented with custom pseudo-instructions to avoid using\n+ * labels, which usually indicate branching targets for the control flow.\n@@ -43,0 +61,3 @@\n+ * @see LineNumberInfo\n+ * @see CodeBuilder#lineNumber CodeBuilder::lineNumber\n+ * @see ClassFile.LineNumbersOption\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LineNumber.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,3 +40,14 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain\n+ * Opcode#kind() kind} of {@link Opcode.Kind#LOAD}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A local variable load instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LoadInstruction\" target=\"#of(TypeKind, int)\" :\n+ * LoadInstruction(\n+ *     TypeKind typeKind, \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ *     int slot \/\/ @link substring=\"slot\" target=\"#slot\"\n+ * )\n+ * }\n+ * where {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}, and {@code slot} is within {@code [0, 65535]}.\n@@ -43,0 +55,2 @@\n+ * @see Opcode.Kind#LOAD\n+ * @see CodeBuilder#loadLocal CodeBuilder::loadLocal\n@@ -51,0 +65,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -55,1 +70,2 @@\n-     * {@return the type of the value to be loaded}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be loaded}\n@@ -61,0 +77,3 @@\n+     * {@code kind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -74,0 +93,14 @@\n+     * <p>\n+     * The range of {@code slot} is restricted by the {@code op} and its\n+     * {@linkplain Opcode#sizeIfFixed() size}:\n+     * <ul>\n+     * <li>If {@code op} has size 1, {@code slot} must be exactly the slot value\n+     * implied by the opcode.\n+     * <li>If {@code op} has size 2, {@code slot} must be within {@code [0, 255]}.\n+     * <li>If {@code op} has size 4, {@code slot} must be within {@code [0, 65535]}.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular load instructions when the {@code slot} can be encoded\n+     * with more optimized load instructions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -32,0 +33,1 @@\n+import java.lang.classfile.attribute.LocalVariableInfo;\n@@ -42,4 +44,22 @@\n- * A pseudo-instruction which models a single entry in the\n- * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * LocalVariableTableAttribute LocalVariableTable} attribute.  Delivered as a\n+ * {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A local variable entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LocalVariable\" target=\"#of(int, String, ClassDesc, Label, Label)\" :\n+ * LocalVariable(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot\"\n+ *     String name, \/\/ @link substring=\"name\" target=\"#name\"\n+ *     ClassDesc type, \/\/ @link substring=\"type\" target=\"#type\"\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ * )\n+ * }\n+ * Where {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * Another model, {@link LocalVariableInfo}, also models a local variable\n+ * entry; it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link LocalVariableTableAttribute}.\n@@ -47,1 +67,5 @@\n- * @see PseudoInstruction\n+ * @apiNote\n+ * {@code LocalVariable} is used for all local variables in Java source code.\n+ * If a local variable has a parameterized type, a type argument, or an array\n+ * type of one of the previous types, a {@link LocalVariableType} should be\n+ * created for that local variable as well.\n@@ -49,0 +73,3 @@\n+ * @see LocalVariableInfo\n+ * @see CodeBuilder#localVariable CodeBuilder::localVariable\n+ * @see ClassFile.DebugElementsOption\n@@ -55,0 +82,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -64,1 +92,5 @@\n-     * {@return the local variable field descriptor}\n+     * {@return the local variable field descriptor string}\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the type of the local variable is available\n+     * through {@link #typeSymbol() typeSymbol()}.\n@@ -87,0 +119,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -102,0 +135,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":40,"deletions":6,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,6 +27,2 @@\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.PseudoInstruction;\n-import java.lang.classfile.Signature;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n@@ -42,3 +38,21 @@\n- * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n- * traversal of the elements of a {@link CodeModel}, according to the setting of\n- * the {@link ClassFile.DebugElementsOption} option.\n+ * LocalVariableTypeTableAttribute LocalVariableTypeTable} attribute.  Delivered\n+ * as a {@link CodeElement} during traversal of the elements of a {@link CodeModel},\n+ * according to the setting of the {@link ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * A local variable type entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LocalVariableType\" target=\"#of(int, String, Signature, Label, Label)\" :\n+ * LocalVariableType(\n+ *     int slot, \/\/ @link substring=\"slot\" target=\"#slot\"\n+ *     String name, \/\/ @link substring=\"name\" target=\"#name\"\n+ *     Signature signature, \/\/ @link substring=\"signature\" target=\"#signatureSymbol\"\n+ *     Label startScope, \/\/ @link substring=\"startScope\" target=\"#startScope\"\n+ *     Label endScope \/\/ @link substring=\"endScope\" target=\"#endScope\"\n+ * )\n+ * }\n+ * Where {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * Another model, {@link LocalVariableTypeInfo}, also models a local variable\n+ * type entry; it has no dependency on a {@code CodeModel} and represents of bci\n+ * values as {@code int}s instead of {@code Label}s, and is used as components\n+ * of a {@link LocalVariableTypeTableAttribute}.\n@@ -46,0 +60,9 @@\n+ * @apiNote\n+ * {@code LocalVariableType} is used if a local variable has a parameterized\n+ * type, a type argument, or an array type of one of the previous types as its\n+ * type.  A {@link LocalVariable} with the erased type should still be created\n+ * for that local variable.\n+ *\n+ * @see LocalVariableTypeInfo\n+ * @see CodeBuilder#localVariableType CodeBuilder::localVariableType\n+ * @see ClassFile.DebugElementsOption\n@@ -52,0 +75,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -61,1 +85,5 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature string}\n+     *\n+     * @apiNote\n+     * A symbolic generic signature of the local variable is available\n+     * through {@link #signatureSymbol() signatureSymbol()}.\n@@ -66,1 +94,1 @@\n-     * {@return the local variable signature}\n+     * {@return the local variable generic signature}\n@@ -84,0 +112,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -99,0 +128,1 @@\n+     * {@code slot} must be within {@code [0, 65535]}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":41,"deletions":11,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,3 +38,15 @@\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#LOOKUPSWITCH lookupswitch} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * A lookup switch instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"LookupSwitchInstruction\" target=\"#of\" :\n+ * LookupSwitchInstruction(\n+ *     Label defaultTarget, \/\/ @link substring=\"defaultTarget\" target=\"#defaultTarget\"\n+ *     List<SwitchCase> cases \/\/ @link substring=\"cases\" target=\"#cases()\"\n+ * )\n+ * }\n+ * If elements in {@code cases} are not sorted ascending by their {@link\n+ * SwitchCase#caseValue caseValue}, a sorted version of the {@code cases} list\n+ * will be written instead.\n@@ -40,0 +54,3 @@\n+ * @see Opcode.Kind#LOOKUP_SWITCH\n+ * @see CodeBuilder#lookupswitch CodeBuilder::lookupswitch\n+ * @jvms 6.5.lookupswitch <em>lookupswitch<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LookupSwitchInstruction.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -36,3 +37,11 @@\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * Models a {@link Opcode#MONITORENTER monitorenter} or {@link Opcode#MONITOREXIT\n+ * monitorexit} instruction in the {@code code} array of a {@code Code} attribute.\n+ * Corresponding opcodes have a {@linkplain Opcode#kind() kind} of {@link\n+ * Opcode.Kind#MONITOR}.  Delivered as a {@link CodeElement} when traversing the\n+ * elements of a {@link CodeModel}.\n+ * <p>\n+ * A monitor instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MonitorInstruction\" target=\"#of(Opcode)\" :\n+ * MonitorInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode\"\n+ * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +38,1 @@\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#MULTIANEWARRAY multianewarray} instruction in the {@code code}\n@@ -39,0 +41,10 @@\n+ * <p>\n+ * A new multi-dimensional array instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewMultiArrayInstruction\" target=\"#of\" :\n+ * NewMultiArrayInstruction(\n+ *     ClassEntry arrayType, \/\/ @link substring=\"arrayType\" target=\"#arrayType\"\n+ *     int dimensions \/\/ @link substring=\"dimensions\" target=\"#dimensions\"\n+ * )\n+ * }\n+ * where the {@code arrayType} is an array class.\n@@ -40,0 +52,3 @@\n+ * @see Opcode.Kind#NEW_MULTI_ARRAY\n+ * @see CodeBuilder#multianewarray CodeBuilder::multianewarray\n+ * @jvms 6.5.multianewarray <em>multianewarray<\/em>\n@@ -47,1 +62,1 @@\n-     * {@return the type of the array, as a symbolic descriptor}\n+     * {@return the type of the array}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * Models a {@link Opcode#NEW new} instruction in the {@code code} array of a {@code Code}\n@@ -38,0 +40,7 @@\n+ * <p>\n+ * A new object instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewObjectInstruction\" target=\"#of\" :\n+ * NewObjectInstruction(ClassEntry className) \/\/ @link substring=\"className\" target=\"#className\"\n+ * }\n+ * where the {@code className} is a non-abstract class.\n@@ -39,0 +48,3 @@\n+ * @see Opcode.Kind#NEW_OBJECT\n+ * @see CodeBuilder#new_ CodeBuilder::new_\n+ * @jvms 6.5.new <em>new<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewObjectInstruction.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code newarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NEWARRAY newarray} instruction in the {@code code}\n@@ -38,0 +40,7 @@\n+ * <p>\n+ * A new primitive array instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewPrimitiveArrayInstruction\" target=\"#of\" :\n+ * NewPrimitiveArrayInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ * }\n+ * where {@code typeKind} is primitive and not {@code void}.\n@@ -39,0 +48,3 @@\n+ * @see Opcode.Kind#NEW_PRIMITIVE_ARRAY\n+ * @see CodeBuilder#newarray CodeBuilder::newarray\n+ * @jvms 6.5.newarray <em>newarray<\/em>\n@@ -46,0 +58,4 @@\n+     *\n+     * @apiNote\n+     * The backing array code for this instruction is available through\n+     * {@link TypeKind#newarrayCode() typeKind().newarrayCode()}.\n@@ -53,2 +69,3 @@\n-     * @throws IllegalArgumentException when the {@code typeKind} is not a legal\n-     *                                  primitive array component type\n+     * @throws IllegalArgumentException when {@code typeKind} is not primitive\n+     *         or is {@code void}\n+     * @see TypeKind#fromNewarrayCode(int) TypeKind::fromNewarrayCode\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -35,1 +37,1 @@\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#ANEWARRAY anewarray} instruction in the {@code code}\n@@ -38,0 +40,6 @@\n+ * <p>\n+ * A new reference array instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"NewReferenceArrayInstruction\" target=\"#of\" :\n+ * NewReferenceArrayInstruction(ClassEntry componentType) \/\/ @link substring=\"componentType\" target=\"#componentType\"\n+ * }\n@@ -39,0 +47,3 @@\n+ * @see Opcode.Kind#NEW_REF_ARRAY\n+ * @see CodeBuilder#newarray CodeBuilder::anewarray\n+ * @jvms 6.5.anewarray <em>anewarray<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models a {@code nop} invocation instruction in the {@code code}\n+ * Models a {@link Opcode#NOP nop} instruction in the {@code code}\n@@ -37,0 +39,2 @@\n+ * <p>\n+ * A no-op instruction has no visible state.\n@@ -38,0 +42,2 @@\n+ * @see CodeBuilder#nop CodeBuilder::nop\n+ * @jvms 6.5.nop <em>nop<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NopInstruction.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -41,0 +41,6 @@\n+ * <p>\n+ * An operator instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"OperatorInstruction\" target=\"#of\" :\n+ * OperatorInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ * }\n@@ -42,0 +48,1 @@\n+ * @see Opcode.Kind#OPERATOR\n@@ -48,0 +55,1 @@\n+     * This is derived from the {@link #opcode opcode}.\n@@ -54,1 +62,1 @@\n-     * @param op the opcode for the specific type of array load instruction,\n+     * @param op the opcode for the specific type of operator instruction,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,8 @@\n+ * <p>\n+ * A return-from-method instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ReturnInstruction\" target=\"#of(TypeKind)\" :\n+ * ReturnInstruction(TypeKind typeKind) \/\/ @link substring=\"typeKind\" target=\"#typeKind()\"\n+ * }\n+ * where {@code typeKind} is {@linkplain TypeKind##computational-type\n+ * computational} or {@link TypeKind#VOID void}.\n@@ -43,0 +52,2 @@\n+ * @see Opcode.Kind#RETURN\n+ * @see CodeBuilder#return_(TypeKind) CodeBuilder::return_\n@@ -49,1 +60,2 @@\n-     * {@return the type of the return instruction}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}, including\n+     * {@link TypeKind#VOID void}, of the return instruction}\n@@ -55,0 +67,2 @@\n+     * {@code typeKind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -40,0 +40,6 @@\n+ * <p>\n+ * A stack manipulation instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StackInstruction\" target=\"#of\" :\n+ * StackInstruction(Opcode opcode) \/\/ @link substring=\"opcode\" target=\"#opcode()\"\n+ * }\n@@ -41,0 +47,1 @@\n+ * @see Opcode.Kind#STACK\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -39,1 +40,1 @@\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@code Code} attribute.  Corresponding opcodes have a {@linkplain Opcode#kind() kind} of\n@@ -42,0 +43,16 @@\n+ * <p>\n+ * A local variable store instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StoreInstruction\" target=\"#of(TypeKind, int)\" :\n+ * StoreInstruction(\n+ *     TypeKind typeKind, \/\/ @link substring=\"typeKind\" target=\"#typeKind\"\n+ *     int slot \/\/ @link substring=\"slot\" target=\"#slot\"\n+ * )\n+ * }\n+ * where {@code TypeKind} is {@linkplain TypeKind##computational-type\n+ * computational}, and {@code slot} is within {@code [0, 65535]}.\n+ * <p>\n+ * {@code astore} series of instructions, or {@code reference} type store\n+ * instructions, can also operate on the {@link TypeKind##returnAddress\n+ * returnAddress} type from discontinued {@linkplain\n+ * DiscontinuedInstruction.JsrInstruction jump subroutine instructions}.\n@@ -43,0 +60,2 @@\n+ * @see Opcode.Kind#STORE\n+ * @see CodeBuilder#storeLocal CodeBuilder::storeLocal\n@@ -50,0 +69,1 @@\n+     * The value is within {@code [0, 65535]}.\n@@ -54,1 +74,4 @@\n-     * {@return the type of the value to be stored}\n+     * {@return the {@linkplain TypeKind##computational-type computational type}\n+     * of the value to be stored}  The {@link TypeKind#REFERENCE reference}\n+     * type store instructions also operate on the {@code returnAddress} type,\n+     * which does not apply to {@code reference} type load instructions.\n@@ -60,0 +83,3 @@\n+     * {@code kind} is {@linkplain TypeKind#asLoadable() converted} to its\n+     * computational type.\n+     * {@code slot} must be within {@code [0, 65535]}.\n@@ -73,0 +99,14 @@\n+     * <p>\n+     * The range of {@code slot} is restricted by the {@code op} and its\n+     * {@linkplain Opcode#sizeIfFixed() size}:\n+     * <ul>\n+     * <li>If {@code op} has size 1, {@code slot} must be exactly the slot value\n+     * implied by the opcode.\n+     * <li>If {@code op} has size 2, {@code slot} must be within {@code [0, 255]}.\n+     * <li>If {@code op} has size 4, {@code slot} must be within {@code [0, 65535]}.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * The explicit {@code op} argument allows creating {@code wide} or\n+     * regular store instructions when the {@code slot} can be encoded\n+     * with more optimized store instructions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,11 @@\n- * Models a single case in a {@code lookupswitch} or {@code tableswitch}\n- * instruction.\n+ * Models a single case in a {@link LookupSwitchInstruction lookupswitch} or\n+ * {@link TableSwitchInstruction tableswitch} instruction.\n+ * <p>\n+ * A switch case is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"SwitchCase\" target=\"#of\" :\n+ * SwitchCase(\n+ *     int caseValue, \/\/ @link substring=\"caseValue\" target=\"#caseValue\"\n+ *     Label target \/\/ @link substring=\"target\" target=\"#target\"\n+ * )\n+ * }\n@@ -37,1 +46,0 @@\n- *\n@@ -50,1 +58,1 @@\n-     * Create a {@linkplain SwitchCase}\n+     * {@return a new switch case}\n@@ -54,1 +62,0 @@\n-     * @return the {@linkplain SwitchCase}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/SwitchCase.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.Opcode;\n@@ -36,1 +38,1 @@\n- * Models a {@code tableswitch} instruction in the {@code code} array of a\n+ * Models a {@link Opcode#TABLESWITCH tableswitch} instruction in the {@code code} array of a\n@@ -39,0 +41,21 @@\n+ * <p>\n+ * A table switch instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"TableSwitchInstruction\" target=\"#of\" :\n+ * TableSwitchInstruction(\n+ *     int lowValue, \/\/ @link substring=\"int lowValue\" target=\"#lowValue\"\n+ *     int highValue, \/\/ @link substring=\"int highValue\" target=\"#highValue\"\n+ *     Label defaultTarget, \/\/ @link substring=\"defaultTarget\" target=\"#defaultTarget\"\n+ *     List<SwitchCase> cases \/\/ @link substring=\"cases\" target=\"#cases()\"\n+ * )\n+ * }\n+ * <p>\n+ * When read from {@code class} files, the {@code cases} may omit cases that\n+ * duplicate the default target.  The list is sorted ascending by the {@link\n+ * SwitchCase#caseValue() caseValue}.\n+ * <p>\n+ * When writing to {@code class} file, the order in the {@code cases} list does\n+ * not matter, as there is only one valid order in the physical representation\n+ * of table switch entries.  Treatment of elements in {@code cases} whose value\n+ * is less than {@code lowValue} or greater than {@code highValue}, and elements\n+ * whose value duplicates that of another, is not specified.\n@@ -40,0 +63,3 @@\n+ * @see Opcode.Kind#TABLE_SWITCH\n+ * @see CodeBuilder#tableswitch CodeBuilder::tableswitch\n+ * @jvms 6.5.tableswitch <em>tableswitch<\/em>\n@@ -70,1 +96,2 @@\n-     * @param cases the cases of the switch\n+     * @param cases the cases of the switch; duplicate or out of bound case\n+     *              handling is not specified\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TableSwitchInstruction.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -30,0 +31,1 @@\n+import java.lang.classfile.Opcode;\n@@ -34,1 +36,1 @@\n- * Models an {@code athrow} instruction in the {@code code} array of a\n+ * Models an {@link Opcode#ATHROW athrow} instruction in the {@code code} array of a\n@@ -37,0 +39,2 @@\n+ * <p>\n+ * A throw instruction has no visible state.\n@@ -38,0 +42,2 @@\n+ * @see Opcode.Kind#THROW_EXCEPTION\n+ * @see CodeBuilder#athrow CodeBuiler::athrow\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ThrowInstruction.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,3 +39,18 @@\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n+ * Models an {@link Opcode#INSTANCEOF instanceof} or a {@link Opcode#CHECKCAST checkcast}\n+ * instruction in the {@code code} array of a {@code Code} attribute.  Corresponding\n+ * opcodes have a {@linkplain Opcode#kind() kind} of {@link Opcode.Kind#TYPE_CHECK}.\n+ * Delivered as a {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ * <p>\n+ * An {@code instanceof} checks the type and pushes an integer to the operand stack.\n+ * A {@code checkcast} checks the type and throws a {@link ClassCastException} if\n+ * the check fails.  {@code instanceof} treat the {@code null} reference as a\n+ * failure, while {@code checkcast} treat the {@code null} reference as a success.\n+ * <p>\n+ * A type check instruction is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"TypeCheckInstruction\" target=\"#of(Opcode, ClassEntry)\" :\n+ * TypeCheckInstruction(\n+ *     Opcode opcode, \/\/ @link substring=\"opcode\" target=\"#opcode\"\n+ *     ClassEntry type \/\/ @link substring=\"type\" target=\"#type\"\n+ * )\n+ * }\n@@ -50,1 +65,1 @@\n-     * {@return the type against which the instruction checks or casts}\n+     * {@return the type against which the instruction checks}\n@@ -61,1 +76,1 @@\n-     *         {@link Opcode.Kind#TYPE_CHECK}.\n+     *         {@link Opcode.Kind#TYPE_CHECK}\n@@ -74,0 +89,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#TYPE_CHECK}, or if {@code type} is primitive\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing code instructions.\n+ * The {@code java.lang.classfile.instruction} package contains interfaces describing code instructions.\n+ * Implementations of these interfaces are immutable.\n+ * <p>\n+ * Unless otherwise specified, passing {@code null} or an array or collection containing a {@code null} element as an\n+ * argument to a constructor or method of any Class-File API class or interface will cause a {@link NullPointerException}\n+ * to be thrown.\n@@ -31,0 +36,28 @@\n+ * <h2 id=\"reading\">Reading of instructions<\/h2>\n+ * Instructions and pseudo-instructions are usually accessed from a {@link CodeModel}, such as {@link CodeModel#forEach\n+ * CodeModel::forEach}, and categorized by pattern-matching.\n+ * <p>\n+ * When read from {@code class} files, instructions are lazily inflated; the contents of these instructions, besides the\n+ * bare structure, are not evaluated to speed up parsing.  Instructions to users interest, such as those filtered by the\n+ * pattern matching, have their contents read on demand, to avoid unnecessary reading of unrelated instructions in a code\n+ * array.\n+ * <p>\n+ * Due to the lazy nature of {@code class} file parsing, {@link IllegalArgumentException} indicating malformed\n+ * {@code class} file data can be thrown at any method invocation.  For example, an instruction object for a {@link\n+ * TypeCheckInstruction} may be obtained from a {@code CodeModel}, but the subsequent invocation of {@link\n+ * TypeCheckInstruction#type() .type()} may fail with {@code IllegalArgumentException} because the instruction refers\n+ * to a bad constant pool index.\n+ *\n+ * <h2 id=\"writing\">Writing of instructions<\/h2>\n+ * Writing of instructions happen on {@link CodeBuilder}.  The most basic way to write instructions is to pass an\n+ * instruction object to {@link CodeBuilder#with CodeBuilder::with}, which supports all valid instructions.\n+ * Yet, {@code CodeBuilder} provides a lot of {@linkplain CodeBuilder##instruction-factories convenience factory methods}\n+ * for easy creation of instructions, named by their mnemonic.  These accessors are more concise, and often more\n+ * efficient at run-time than passing instruction objects.\n+ * <p>\n+ * Due to restrictions in the {@code class} file format, some instructions may not be representable in a {@code CodeBuilder}.\n+ * In some scenarios, such as for {@link BranchInstruction}, Class-File API options control if alternatives can be used\n+ * in code generation instead.  Otherwise, they can be configured to fail-fast to ensure the parity of {@code CodeBuilder}\n+ * commands with the generated {@code code} array data.\n+ *\n+ * @jvms 6.5 Instructions\n@@ -35,0 +68,3 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/package-info.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ConstantBootstraps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ConstantGroup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DelegatingMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/NativeMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/TypeConvertingMethodAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileTreeIterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/DigestInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/DigestOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXBuilderParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Certificate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/AttributedCharacterIterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/AttributedString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/RuleBasedCollator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/EnumMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IdentityHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/InvalidPropertiesFormatException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3657,2 +3657,1 @@\n-    private static final boolean TRACE_ON = Boolean.getBoolean(\n-        System.getProperty(\"resource.bundle.debug\", \"false\"));\n+    private static final boolean TRACE_ON = Boolean.getBoolean(\"resource.bundle.debug\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/SimpleTimeZone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Timer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/FindOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaAWTFontAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AccessFlagsImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CatchBuilderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/EntryMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/InterfacesImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SuperclassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationBytecodes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SecurityProviderServiceEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SerializationMisdeclarationEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/ThreadSleepEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/VirtualThreadEndEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/VirtualThreadStartEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ImplicitSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,2 +133,2 @@\n-        if (length == 0) {\n-            \/\/ The state has to be checked explicitly for zero-length segments\n+        if (length < Byte.BYTES) {\n+            \/\/ There can be no null terminator present\n@@ -167,1 +167,2 @@\n-        if (length == 0) {\n+        if (length < Short.BYTES) {\n+            \/\/ There can be no null terminator present\n@@ -202,1 +203,2 @@\n-        if (length == 0) {\n+        if (length < Integer.BYTES) {\n+            \/\/ There can be no null terminator present\n@@ -206,2 +208,0 @@\n-        final long longBytes = length & LONG_MASK;\n-        final long longLimit = fromOffset + longBytes;\n@@ -209,6 +209,11 @@\n-        for (; offset < longLimit; offset += Long.BYTES) {\n-            long val = SCOPED_MEMORY_ACCESS.getLongUnaligned(segment.sessionImpl(), segment.unsafeGetBase(), segment.unsafeGetOffset() + offset, !Architecture.isLittleEndian());\n-            if (mightContainZeroInt(val)) {\n-                for (int j = 0; j < Long.BYTES; j += Integer.BYTES) {\n-                    if (SCOPED_MEMORY_ACCESS.getIntUnaligned(segment.sessionImpl(), segment.unsafeGetBase(), segment.unsafeGetOffset() + offset + j, !Architecture.isLittleEndian()) == 0) {\n-                        return requireWithinStringSize(offset + j - fromOffset, segment, fromOffset, toOffset);\n+        \/\/ For quad byte strings, it does not pay off to use long scanning on x64\n+        if (!Architecture.isX64()) {\n+            final long longBytes = length & LONG_MASK;\n+            final long longLimit = fromOffset + longBytes;\n+            for (; offset < longLimit; offset += Long.BYTES) {\n+                long val = SCOPED_MEMORY_ACCESS.getLongUnaligned(segment.sessionImpl(), segment.unsafeGetBase(), segment.unsafeGetOffset() + offset, !Architecture.isLittleEndian());\n+                if (mightContainZeroInt(val)) {\n+                    for (int j = 0; j < Long.BYTES; j += Integer.BYTES) {\n+                        if (SCOPED_MEMORY_ACCESS.getIntUnaligned(segment.sessionImpl(), segment.unsafeGetBase(), segment.unsafeGetOffset() + offset + j, !Architecture.isLittleEndian()) == 0) {\n+                            return requireWithinStringSize(offset + j - fromOffset, segment, fromOffset, toOffset);\n+                        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/icu\/impl\/StringPrepDataReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/icu\/lang\/UCharacter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/icu\/lang\/UCharacterDirection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/icu\/text\/UTF16.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/NativeImageBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedModuleGraph.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfoExtender.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/Attributes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/InputSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/SAXException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/SAXParseException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/XMLReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/xml\/sax\/helpers\/DefaultHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/platform\/Metrics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/PhantomCleanable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ConstructorAccessorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/FieldAccessorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/PropertiesDefaultHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/impl\/Parser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/StackChunk.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/TranslatedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/JvmtiMountTransition.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,50 +237,0 @@\n-    \/* ============================================================================ *\/\n-    public interface ShuffleIotaOperation<S extends VectorSpecies<?>,\n-                                          SH extends VectorShuffle<?>> {\n-        SH apply(int length, int start, int step, S s);\n-    }\n-\n-    @IntrinsicCandidate\n-    public static\n-    <E,\n-     S extends VectorSpecies<E>,\n-     SH extends VectorShuffle<E>>\n-    SH shuffleIota(Class<E> eClass, Class<? extends SH> shClass, S s,\n-                   int length,\n-                   int start, int step, int wrap,\n-                   ShuffleIotaOperation<S, SH> defaultImpl) {\n-       assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n-       return defaultImpl.apply(length, start, step, s);\n-    }\n-\n-    public interface ShuffleToVectorOperation<V extends Vector<?>,\n-                                              SH extends VectorShuffle<?>> {\n-       V apply(SH sh);\n-    }\n-\n-    @IntrinsicCandidate\n-    public static\n-    <V extends Vector<E>,\n-     SH extends VectorShuffle<E>,\n-     E>\n-    V shuffleToVector(Class<? extends Vector<E>> vClass, Class<E> eClass, Class<? extends SH> shClass, SH sh,\n-                      int length,\n-                      ShuffleToVectorOperation<V, SH> defaultImpl) {\n-      assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n-      return defaultImpl.apply(sh);\n-    }\n-\n-    public interface WrapShuffleIndexesOperation<SH extends VectorShuffle<?>> {\n-        SH apply(SH sh);\n-    }\n-\n-    @IntrinsicCandidate\n-    public static\n-    <E,\n-     SH extends VectorShuffle<E>>\n-    SH wrapShuffleIndexes(Class<E> eClass, Class<? extends SH> shClass, SH sh, int length,\n-                          WrapShuffleIndexesOperation<SH> defaultImpl) {\n-       assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n-       return defaultImpl.apply(sh);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":1,"deletions":51,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -319,2 +319,1 @@\n-        java.management,\n-        java.sql.rowset;\n+        java.management;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/ValueConversions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/dns\/ResolverConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 1996, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/content\/text\/plain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/https\/AbstractDelegateHttpsURLConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousChannelGroupImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/PendingFuture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ThreadPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/HKSCS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                            \"Duplicate annotation for class: \"+klass+\": \" + a);\n+                            \"Duplicate annotation \" + klass + \" in \" + container);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-    public static Class<?> forName(String name) throws ClassNotFoundException {\n-        return Class.forName(name);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/ReflectUtil.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/point\/AffinePoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attributes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/ParsingException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/CtrDrbg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSAPublicKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HashDrbg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HmacDrbg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateCrtKeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateKeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Finished.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -55,9 +54,0 @@\n-    static {\n-        \/\/ eagerly initialize to avoid pinning virtual thread during TLS handshake\n-        try {\n-            MethodHandles.lookup().ensureInitialized(AnchorCertificates.class);\n-        } catch (IllegalAccessException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509TrustManagerImpl.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/BitArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ByteArrayTagOrder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ECUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/IOUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/ValidatorException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/GeneralNames.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/GeneralSubtrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/RFC822Name.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/BuddhistCalendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/AbstractCalendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/BaseCalendar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/CalendarDate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/CalendarSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2898,0 +2898,6 @@\n+## Removed Java Options\n+\n+These `java` options have been removed in JDK @@VERSION_SPECIFICATION@@ and using them results in an error of:\n+\n+>   `Unrecognized VM option` *option-name*\n+\n@@ -2957,50 +2963,0 @@\n-## Removed Java Options\n-\n-These `java` options have been removed in JDK @@VERSION_SPECIFICATION@@ and using them results in an error of:\n-\n->   `Unrecognized VM option` *option-name*\n-\n-`-XX:InitialRAMFraction=`*ratio*\n-:   Sets the initial amount of memory that the JVM may use for the Java heap\n-    before applying ergonomics heuristics as a ratio of the maximum amount\n-    determined as described in the `-XX:MaxRAM` option. The default value is\n-    64.\n-\n-    Use the option `-XX:InitialRAMPercentage` instead.\n-\n-`-XX:MaxRAMFraction=`*ratio*\n-:   Sets the maximum amount of memory that the JVM may use for the Java heap\n-    before applying ergonomics heuristics as a fraction of the maximum amount\n-    determined as described in the `-XX:MaxRAM` option. The default value is 4.\n-\n-    Specifying this option disables automatic use of compressed oops if\n-    the combined result of this and other options influencing the maximum amount\n-    of memory is larger than the range of memory addressable by compressed oops.\n-    See `-XX:UseCompressedOops` for further information about compressed oops.\n-\n-    Use the option `-XX:MaxRAMPercentage` instead.\n-\n-`-XX:MinRAMFraction=`*ratio*\n-:   Sets the maximum amount of memory that the JVM may use for the Java heap\n-    before applying ergonomics heuristics as a fraction of the maximum amount\n-    determined as described in the `-XX:MaxRAM` option for small heaps. A small\n-    heap is a heap of approximately 125 MB. The default value is 2.\n-\n-    Use the option `-XX:MinRAMPercentage` instead.\n-\n-`-XX:+ScavengeBeforeFullGC`\n-:   Enables GC of the young generation before each full GC. This option is\n-    enabled by default. It is recommended that you *don't* disable it, because\n-    scavenging the young generation before a full GC can reduce the number of\n-    objects reachable from the old generation space into the young generation\n-    space. To disable GC of the young generation before each full GC, specify\n-    the option `-XX:-ScavengeBeforeFullGC`.\n-\n-`-Xfuture`\n-:   Enables strict class-file format checks that enforce close conformance to\n-    the class-file format specification. Developers should use this flag when\n-    developing new code. Stricter checks may become the default in future\n-    releases.\n-\n-    Use the option `-Xverify:all` instead.\n-\n@@ -3009,0 +2965,2 @@\n+-   [The `java` Command, Release 24](https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/man\/java.html)\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":8,"deletions":50,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libjava\/PhantomReference.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/java.base\/share\/native\/libjava\/ub.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libjimage\/jimage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libjli\/args.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/native\/libverify\/check_code.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/sdp\/SdpProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/InheritedChannel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDomainSocketsUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.datatransfer\/share\/classes\/java\/awt\/datatransfer\/DataFlavor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/aix\/native\/libawt_xawt\/awt\/awt_InputMethod.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/linux\/native\/libjsound\/PLATFORM_API_LinuxOS_ALSA_MidiIn.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/linux\/native\/libjsound\/PLATFORM_API_LinuxOS_ALSA_MidiUtils.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/apple\/laf\/JRSUIUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/eawt\/Application.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/eio\/FileManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,3 +192,3 @@\n-        if (border != null) {\n-            final Rectangle alloc = getComponent().getBounds();\n-            alloc.x = alloc.y = 0;\n+        final Rectangle alloc = getComponent().getBounds();\n+        alloc.x = alloc.y = 0;\n+        if (border != null && border.isBorderOpaque()) {\n@@ -201,0 +201,9 @@\n+            x = caretRect.x;\n+            y = caretRect.y;\n+            width = Math.max(caretRect.width, 1);\n+            height = Math.max(caretRect.height, 1);\n+        } else {\n+            x = alloc.x;\n+            y = alloc.y;\n+            width = alloc.width;\n+            height = alloc.height;\n@@ -202,4 +211,0 @@\n-        x = caretRect.x;\n-        y = caretRect.y;\n-        width = Math.max(caretRect.width, 1);\n-        height = Math.max(caretRect.height, 1);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaCaret.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaImageFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaKeyBindings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMenuBarUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaNativeResources.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaUtilControlSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/ScreenMenu.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CFontManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CStrike.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/MacOSFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLRenderQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWComponentPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWKeyboardFocusManagerPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CClipboard.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CDragSourceContextPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CFileDialog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJobDialog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CClipboard.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDataTransferer.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTarget.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTargetContextPeer.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CInputMethod.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -441,1 +441,1 @@\n-    \/\/ Remove the specified item.\n+    \/\/ Add the specified item.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenuBar.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTFont.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTStrike.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/CGGlyphImages.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceData.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/native\/libsplashscreen\/splashscreen_sys.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/decoder\/DocumentHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/finder\/ClassFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/finder\/ConstructorFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/finder\/FieldFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/finder\/MethodFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/ClassInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/bmp\/BMPImageReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/png\/PNGImageWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/stream\/StreamCloser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/Metacity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/motif\/MotifLookAndFeel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/AudioSynthesizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/DirectAudioDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JARSoundbankReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JDK13Services.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JSSecurityManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/Platform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/Printer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftSynthesizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/StandardMidiFileReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/AWTEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Composite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/MenuComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SequencedEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SplashScreen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TextComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/WaitDispatchSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/FocusSpec.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n- Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/Modality.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/event\/InputEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/event\/NativeLibLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1024,1 +1024,1 @@\n-                if (numComponents >= components.length) {\n+                if (numComponents > components.length) {\n@@ -1079,1 +1079,1 @@\n-                    if (numComponents >= tempComponents.length) {\n+                    if (numComponents > tempComponents.length) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLine.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/peer\/WindowPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/DefaultPersistenceDelegate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/EventHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/MetaData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/MethodRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/PropertyDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/SimpleBeanInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/XMLDecoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 1014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/beancontext\/BeanContextServicesListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/metadata\/IIOMetadata.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/IIORegistry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/ImageReaderWriterSpi.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/ServiceRegistry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/DocFlavor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/ServiceUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/SimpleDoc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/StreamPrintServiceFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n- * (<a href=\"ftp:\/\/ftp.pwg.org\/pub\/pwg\/standards\/temp_archive\/pwg5100.3.pdf\">\n+ * (<a href=\"https:\/\/ftp.pwg.org\/pub\/pwg\/standards\/temp_archive\/pwg5100.3.pdf\">\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/PresentationDirection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/midi\/Synthesizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/AbstractAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/BufferStrategyPaintManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/DebugGraphics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/DefaultListCellRenderer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JInternalFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/LookAndFeel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/Popup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingPaintEventDispatcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingWorker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/Timer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TimerQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TransferHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIDefaults.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/colorchooser\/AbstractColorChooserPanel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/event\/EventListenerList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicComboBoxRenderer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicHTML.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicInternalFrameTitlePane.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicLabelUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicPopupMenuUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,10 +151,0 @@\n-    \/**\n-     * Constructs a {@code BasicSliderUI}.\n-     *\n-     * @since 16\n-     * @deprecated This constructor was exposed erroneously and will be removed in a future release.\n-     *             Use {@link #BasicSliderUI(JSlider)} instead.\n-     *\/\n-    @Deprecated(since = \"23\", forRemoval = true)\n-    public BasicSliderUI() {}\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicSliderUI.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalLabelUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/skin.laf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTabbedPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTableUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/table\/DefaultTableCellRenderer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/AbstractDocument.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/DefaultCaret.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/DefaultFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/NumberFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/ObjectView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/default.css","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.util.Hashtable;\n+import java.io.Serializable;\n@@ -30,1 +30,1 @@\n-import java.io.*;\n+import java.util.Map;\n@@ -44,2 +44,1 @@\n-public final\n-class Element implements DTDConstants, Serializable {\n+public final class Element implements DTDConstants, Serializable {\n@@ -237,9 +236,6 @@\n-\n-    static Hashtable<String, Integer> contentTypes = new Hashtable<String, Integer>();\n-\n-    static {\n-        contentTypes.put(\"CDATA\", Integer.valueOf(CDATA));\n-        contentTypes.put(\"RCDATA\", Integer.valueOf(RCDATA));\n-        contentTypes.put(\"EMPTY\", Integer.valueOf(EMPTY));\n-        contentTypes.put(\"ANY\", Integer.valueOf(ANY));\n-    }\n+    private static final Map<String, Integer> contentTypes = Map.of(\n+            \"CDATA\", CDATA,\n+            \"RCDATA\", RCDATA,\n+            \"EMPTY\", EMPTY,\n+            \"ANY\", ANY\n+    );\n@@ -256,2 +252,1 @@\n-        Integer val = contentTypes.get(nm);\n-        return (val != null) ? val.intValue() : 0;\n+        return contentTypes.getOrDefault(nm, 0);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/Element.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/ParserDelegator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/rtf\/RTFReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AWTAccessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/DebugSettings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/EmbeddedFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/FontConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/FontDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/NativeLibLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/OSInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/DataTransferer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/TransferableProxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/ExecutableInputMethodManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/InputContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/InputMethodContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/im\/InputMethodManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/BufImgSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ByteArrayImageSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/FileImageSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageConsumerQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageDecoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageFetcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageRepresentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageWatched.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImagingLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/InputStreamImageSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/JPEGImageDecoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/NativeLibLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/SurfaceManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ToolkitImage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/URLImageSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/VSyncedBSManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/shell\/ShellFolder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/shell\/ShellFolderManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/util\/PerformanceLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/util\/ThreadGroupUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CodePointIterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CreatedFontTracker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFont.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFontStrike.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontManagerNativeLibrary.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontUtilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/GlyphList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/HBShaper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/StrikeCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/SunFontManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TrueTypeFont.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/NullSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SunGraphicsEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SurfaceDataProxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/CMSManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/GraphicsPrimitive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/GraphicsPrimitiveMgr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/RendererStats.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/opengl\/OGLRenderQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/opengl\/OGLSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/RenderingEngine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPrinterJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSStreamPrintJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PrintJob2D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/ServiceNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_zh_TW.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/WindowsPlacesBar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/plaf\/GTKKeybindings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/plaf\/WindowsKeybindings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/conf\/psfontj2d.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/common\/java2d\/opengl\/OGLSurfaceData.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libawt\/awt\/image\/awt_parseImage.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libawt\/awt\/medialib\/awt_ImagingLib.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libawt\/java2d\/SurfaceData.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libawt\/java2d\/loops\/IntRgb.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/hb-jdk-font.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/hb-jdk-p.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/sunFont.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libjavajpeg\/jpegdecoder.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libjsound\/PortMixer.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/java_awt_SplashScreen.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/InfoWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/Native.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XBaseWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XClipboard.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDecoratedPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbedCanvasPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbedHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XErrorHandlerUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XFileDialogPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XKeyboardFocusManagerPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XRobotPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XScrollPanePeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XTaskbarPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XTrayIconPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XlibWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11InputMethodDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/screencast\/ScreencastHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/font\/FcFontConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/font\/XRGlyphCacheEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/opengl\/GLXGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/x11\/X11SurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRCompositeManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/CUPSPrinter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/IPPPrintService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/UnixPrintJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/UnixPrintService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/CUPSfuncs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/X11Color.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/fontpath.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/java2d\/x11\/X11FontScaler_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/java2d\/x11\/X11Renderer.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/java2d\/x11\/X11SurfaceData.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/common\/java2d\/x11\/X11TextRenderer_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_InputMethod.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_util.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/multiVis.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_portal.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/AnimationController.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/XPStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32FontManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/TranslucentWindowPainter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WEmbeddedFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WFileDialogPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WMenuItemPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPathGraphics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPrinterJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WTextComponentPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DScreenUpdateManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/opengl\/WGLGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/GDIWindowSurfaceData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/windows\/WindowsFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/java2d\/d3d\/D3DGlyphCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/java2d\/d3d\/D3DSurfaceData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt.rc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Canvas.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_List.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintControl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintControl.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintDialog.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TextComponent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TextComponent.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/DefaultMXBeanMappingFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanServerDelegateImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServerDelegate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/pool\/Connections.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1HeaderParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/HeaderDecoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/hpack\/DecodingCallback.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.rmi\/share\/man\/rmiregistry.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.se\/share\/classes\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.security.jgss\/macosx\/native\/libosxkrb5\/SCDynamicStoreConfig.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.security.jgss\/windows\/man\/kinit.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.security.jgss\/windows\/man\/klist.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.security.jgss\/windows\/man\/ktab.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.security.sasl\/share\/classes\/com\/sun\/security\/sasl\/digest\/DigestMD5Client.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.smartcardio\/unix\/classes\/sun\/security\/smartcardio\/PlatformPCSC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.smartcardio\/windows\/classes\/sun\/security\/smartcardio\/PlatformPCSC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/RowSetResourceBundle_zh_TW.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -662,7 +662,6 @@\n-                     try{\n-                          typeMap.put(Key_map,sun.reflect.misc.ReflectUtil.forName(Value_map));\n-\n-                        }catch(ClassNotFoundException ex) {\n-                          throw new SAXException(MessageFormat.format(resBundle.handleGetObject(\"xmlrch.errmap\").toString(), ex.getMessage()));\n-                        }\n-                      break;\n+                     try {\n+                         typeMap.put(Key_map, Class.forName(Value_map, true, null));\n+                     } catch (ClassNotFoundException ex) {\n+                         throw new SAXException(MessageFormat.format(resBundle.handleGetObject(\"xmlrch.errmap\").toString(), ex.getMessage()));\n+                     }\n+                     break;\n","filename":"src\/java.sql.rowset\/share\/classes\/com\/sun\/rowset\/internal\/XmlReaderContentHandler.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/DOMMessages_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/SAXMessages_zh_TW.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XIncludeMessages_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLSchemaMessages_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XPointerMessages_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xpath\/regex\/RegularExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/share\/classes\/com\/sun\/java\/accessibility\/util\/AWTEventMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/share\/classes\/com\/sun\/java\/accessibility\/util\/EventQueueMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/share\/classes\/com\/sun\/java\/accessibility\/util\/SwingEventMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/windows\/classes\/com\/sun\/java\/accessibility\/internal\/AccessBridge.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/windows\/man\/jabswitch.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/windows\/man\/jaccessinspector.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.accessibility\/windows\/man\/jaccesswalker.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.attach\/aix\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.attach\/macosx\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1021,1 +1021,5 @@\n-                    MethodSymbol exsym = (MethodSymbol) TreeInfo.symbol(invocation.getMethodSelect());\n+                    Symbol exsym = TreeInfo.symbol(invocation.getMethodSelect());\n+                    if (exsym.type.isErroneous()) {\n+                        \/\/ bail out, don't deal with erroneous types which would be reported anyways\n+                        return TypeAnnotationPosition.unknown;\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-header exports java\/io,java\/lang,java\/lang\/annotation,java\/lang\/classfile,java\/lang\/classfile\/attribute,java\/lang\/classfile\/components,java\/lang\/classfile\/constantpool,java\/lang\/classfile\/instruction,java\/lang\/constant,java\/lang\/foreign,java\/lang\/invoke,java\/lang\/module,java\/lang\/ref,java\/lang\/reflect,java\/lang\/runtime,java\/math,java\/net,java\/net\/spi,java\/nio,java\/nio\/channels,java\/nio\/channels\/spi,java\/nio\/charset,java\/nio\/charset\/spi,java\/nio\/file,java\/nio\/file\/attribute,java\/nio\/file\/spi,java\/security,java\/security\/cert,java\/security\/interfaces,java\/security\/spec,java\/text,java\/text\/spi,java\/time,java\/time\/chrono,java\/time\/format,java\/time\/temporal,java\/time\/zone,java\/util,java\/util\/concurrent,java\/util\/concurrent\/atomic,java\/util\/concurrent\/locks,java\/util\/function,java\/util\/jar,java\/util\/random,java\/util\/regex,java\/util\/spi,java\/util\/stream,java\/util\/zip,javax\/crypto,javax\/crypto\/interfaces,javax\/crypto\/spec,javax\/net,javax\/net\/ssl,javax\/security\/auth,javax\/security\/auth\/callback,javax\/security\/auth\/login,javax\/security\/auth\/spi,javax\/security\/auth\/x500,javax\/security\/cert,jdk\/internal\/event[jdk.jfr],jdk\/internal\/javac[java.compiler\\u005C;u002C;java.desktop\\u005C;u002C;java.se\\u005C;u002C;jdk.compiler\\u005C;u002C;jdk.incubator.vector\\u005C;u002C;jdk.jartool\\u005C;u002C;jdk.jdeps\\u005C;u002C;jdk.jfr\\u005C;u002C;jdk.jlink\\u005C;u002C;jdk.jshell],jdk\/internal\/vm\/vector[jdk.incubator.vector] extraModulePackages jdk\/internal\/access\/foreign,jdk\/internal\/classfile\/impl,jdk\/internal\/constant,jdk\/internal\/foreign\/abi,jdk\/internal\/foreign\/abi\/aarch64\/linux,jdk\/internal\/foreign\/abi\/aarch64\/macos,jdk\/internal\/foreign\/abi\/aarch64\/windows,jdk\/internal\/foreign\/abi\/fallback,jdk\/internal\/foreign\/abi\/ppc64\/aix,jdk\/internal\/foreign\/abi\/ppc64\/linux,jdk\/internal\/foreign\/abi\/riscv64\/linux,jdk\/internal\/foreign\/abi\/s390\/linux,jdk\/internal\/foreign\/abi\/x64\/sysv,jdk\/internal\/foreign\/abi\/x64\/windows,jdk\/internal\/foreign\/layout,sun\/nio\/ch,sun\/net,jdk\/internal\/foreign,jdk\/internal\/foreign,sun\/net,sun\/nio\/ch uses java\/lang\/System$LoggerFinder,java\/net\/ContentHandlerFactory,java\/net\/spi\/InetAddressResolverProvider,java\/net\/spi\/URLStreamHandlerProvider,java\/nio\/channels\/spi\/AsynchronousChannelProvider,java\/nio\/channels\/spi\/SelectorProvider,java\/nio\/charset\/spi\/CharsetProvider,java\/nio\/file\/spi\/FileSystemProvider,java\/nio\/file\/spi\/FileTypeDetector,java\/security\/Provider,java\/text\/spi\/BreakIteratorProvider,java\/text\/spi\/CollatorProvider,java\/text\/spi\/DateFormatProvider,java\/text\/spi\/DateFormatSymbolsProvider,java\/text\/spi\/DecimalFormatSymbolsProvider,java\/text\/spi\/NumberFormatProvider,java\/time\/chrono\/AbstractChronology,java\/time\/chrono\/Chronology,java\/time\/zone\/ZoneRulesProvider,java\/util\/spi\/CalendarDataProvider,java\/util\/spi\/CalendarNameProvider,java\/util\/spi\/CurrencyNameProvider,java\/util\/spi\/LocaleNameProvider,java\/util\/spi\/ResourceBundleControlProvider,java\/util\/spi\/ResourceBundleProvider,java\/util\/spi\/TimeZoneNameProvider,java\/util\/spi\/ToolProvider,javax\/security\/auth\/spi\/LoginModule,jdk\/internal\/io\/JdkConsoleProvider,jdk\/internal\/logger\/DefaultLoggerFinder,sun\/text\/spi\/JavaTimeDateTimePatternProvider,sun\/util\/locale\/provider\/LocaleDataMetaInfo,sun\/util\/resources\/LocaleData$CommonResourceBundleProvider,sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider,sun\/util\/spi\/CalendarProvider provides interface\\u0020;java\/nio\/file\/spi\/FileSystemProvider\\u0020;impls\\u0020;jdk\/internal\/jrtfs\/JrtFileSystemProvider target macos-aarch64 flags 8000\n+header exports java\/io,java\/lang,java\/lang\/annotation,java\/lang\/classfile,java\/lang\/classfile\/attribute,java\/lang\/classfile\/constantpool,java\/lang\/classfile\/instruction,java\/lang\/constant,java\/lang\/foreign,java\/lang\/invoke,java\/lang\/module,java\/lang\/ref,java\/lang\/reflect,java\/lang\/runtime,java\/math,java\/net,java\/net\/spi,java\/nio,java\/nio\/channels,java\/nio\/channels\/spi,java\/nio\/charset,java\/nio\/charset\/spi,java\/nio\/file,java\/nio\/file\/attribute,java\/nio\/file\/spi,java\/security,java\/security\/cert,java\/security\/interfaces,java\/security\/spec,java\/text,java\/text\/spi,java\/time,java\/time\/chrono,java\/time\/format,java\/time\/temporal,java\/time\/zone,java\/util,java\/util\/concurrent,java\/util\/concurrent\/atomic,java\/util\/concurrent\/locks,java\/util\/function,java\/util\/jar,java\/util\/random,java\/util\/regex,java\/util\/spi,java\/util\/stream,java\/util\/zip,javax\/crypto,javax\/crypto\/interfaces,javax\/crypto\/spec,javax\/net,javax\/net\/ssl,javax\/security\/auth,javax\/security\/auth\/callback,javax\/security\/auth\/login,javax\/security\/auth\/spi,javax\/security\/auth\/x500,javax\/security\/cert,jdk\/internal\/event[jdk.jfr],jdk\/internal\/javac[java.compiler\\u005C;u002C;java.desktop\\u005C;u002C;java.se\\u005C;u002C;jdk.compiler\\u005C;u002C;jdk.incubator.vector\\u005C;u002C;jdk.jartool\\u005C;u002C;jdk.jdeps\\u005C;u002C;jdk.jfr\\u005C;u002C;jdk.jlink\\u005C;u002C;jdk.jshell],jdk\/internal\/vm\/vector[jdk.incubator.vector] extraModulePackages jdk\/internal\/access\/foreign,jdk\/internal\/classfile\/impl,jdk\/internal\/constant,jdk\/internal\/foreign\/abi,jdk\/internal\/foreign\/abi\/aarch64\/linux,jdk\/internal\/foreign\/abi\/aarch64\/macos,jdk\/internal\/foreign\/abi\/aarch64\/windows,jdk\/internal\/foreign\/abi\/fallback,jdk\/internal\/foreign\/abi\/ppc64\/aix,jdk\/internal\/foreign\/abi\/ppc64\/linux,jdk\/internal\/foreign\/abi\/riscv64\/linux,jdk\/internal\/foreign\/abi\/s390\/linux,jdk\/internal\/foreign\/abi\/x64\/sysv,jdk\/internal\/foreign\/abi\/x64\/windows,jdk\/internal\/foreign\/layout,sun\/nio\/ch,sun\/net,jdk\/internal\/foreign,jdk\/internal\/foreign,sun\/net,sun\/nio\/ch uses java\/lang\/System$LoggerFinder,java\/net\/ContentHandlerFactory,java\/net\/spi\/InetAddressResolverProvider,java\/net\/spi\/URLStreamHandlerProvider,java\/nio\/channels\/spi\/AsynchronousChannelProvider,java\/nio\/channels\/spi\/SelectorProvider,java\/nio\/charset\/spi\/CharsetProvider,java\/nio\/file\/spi\/FileSystemProvider,java\/nio\/file\/spi\/FileTypeDetector,java\/security\/Provider,java\/text\/spi\/BreakIteratorProvider,java\/text\/spi\/CollatorProvider,java\/text\/spi\/DateFormatProvider,java\/text\/spi\/DateFormatSymbolsProvider,java\/text\/spi\/DecimalFormatSymbolsProvider,java\/text\/spi\/NumberFormatProvider,java\/time\/chrono\/AbstractChronology,java\/time\/chrono\/Chronology,java\/time\/zone\/ZoneRulesProvider,java\/util\/spi\/CalendarDataProvider,java\/util\/spi\/CalendarNameProvider,java\/util\/spi\/CurrencyNameProvider,java\/util\/spi\/LocaleNameProvider,java\/util\/spi\/ResourceBundleControlProvider,java\/util\/spi\/ResourceBundleProvider,java\/util\/spi\/TimeZoneNameProvider,java\/util\/spi\/ToolProvider,javax\/security\/auth\/spi\/LoginModule,jdk\/internal\/io\/JdkConsoleProvider,jdk\/internal\/logger\/DefaultLoggerFinder,sun\/text\/spi\/JavaTimeDateTimePatternProvider,sun\/util\/locale\/provider\/LocaleDataMetaInfo,sun\/util\/resources\/LocaleData$CommonResourceBundleProvider,sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider,sun\/util\/spi\/CalendarProvider provides interface\\u0020;java\/nio\/file\/spi\/FileSystemProvider\\u0020;impls\\u0020;jdk\/internal\/jrtfs\/JrtFileSystemProvider target macos-aarch64 flags 8000\n@@ -287,0 +287,1 @@\n+-method name tag descriptor ()C\n@@ -336,0 +337,1 @@\n+method name tag descriptor ()I flags 401\n@@ -1631,40 +1633,1 @@\n-class name java\/lang\/classfile\/components\/ClassPrinter\n-header extends java\/lang\/Object nestMembers java\/lang\/classfile\/components\/ClassPrinter$MapNode,java\/lang\/classfile\/components\/ClassPrinter$ListNode,java\/lang\/classfile\/components\/ClassPrinter$LeafNode,java\/lang\/classfile\/components\/ClassPrinter$Node,java\/lang\/classfile\/components\/ClassPrinter$Verbosity flags 31\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Verbosity outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Verbosity flags 4019\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$MapNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName MapNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$ListNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName ListNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$LeafNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName LeafNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-\n-class name java\/lang\/classfile\/components\/ClassPrinter$LeafNode\n-header extends java\/lang\/Object implements java\/lang\/classfile\/components\/ClassPrinter$Node nestHost java\/lang\/classfile\/components\/ClassPrinter sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/ClassPrinterImpl$LeafNodeImpl flags 601\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$LeafNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName LeafNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$LeafNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName LeafNodeImpl flags 19\n-\n-class name java\/lang\/classfile\/components\/ClassPrinter$ListNode\n-header extends java\/lang\/Object implements java\/lang\/classfile\/components\/ClassPrinter$Node,java\/util\/List nestHost java\/lang\/classfile\/components\/ClassPrinter sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/ClassPrinterImpl$ListNodeImpl flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/classfile\/components\/ClassPrinter$Node;Ljava\/util\/List<Ljava\/lang\/classfile\/components\/ClassPrinter$Node;>;\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$ListNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName ListNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$ListNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName ListNodeImpl flags 9\n-\n-class name java\/lang\/classfile\/components\/ClassPrinter$MapNode\n-header extends java\/lang\/Object implements java\/lang\/classfile\/components\/ClassPrinter$Node,java\/util\/Map nestHost java\/lang\/classfile\/components\/ClassPrinter sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/classfile\/components\/ClassPrinter$Node;Ljava\/util\/Map<Ljava\/lang\/constant\/ConstantDesc;Ljava\/lang\/classfile\/components\/ClassPrinter$Node;>;\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$MapNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName MapNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName MapNodeImpl flags 19\n-\n-class name java\/lang\/classfile\/components\/ClassPrinter$Node\n-header extends java\/lang\/Object nestHost java\/lang\/classfile\/components\/ClassPrinter sealed true permittedSubclasses java\/lang\/classfile\/components\/ClassPrinter$LeafNode,java\/lang\/classfile\/components\/ClassPrinter$ListNode,java\/lang\/classfile\/components\/ClassPrinter$MapNode flags 601\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$LeafNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName LeafNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$ListNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName ListNode flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$MapNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName MapNode flags 609\n-\n-class name java\/lang\/classfile\/components\/ClassPrinter$Verbosity\n-header extends java\/lang\/Enum nestHost java\/lang\/classfile\/components\/ClassPrinter flags 4031 signature Ljava\/lang\/Enum<Ljava\/lang\/classfile\/components\/ClassPrinter$Verbosity;>;\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Verbosity outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Verbosity flags 4019\n-\n-class name java\/lang\/classfile\/components\/ClassRemapper\n-header extends java\/lang\/Object implements java\/lang\/classfile\/ClassTransform sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/ClassRemapperImpl flags 601\n-innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-class name java\/lang\/classfile\/components\/ClassPrinter\n@@ -1672,3 +1635,1 @@\n-class name java\/lang\/classfile\/components\/CodeLocalsShifter\n-header extends java\/lang\/Object implements java\/lang\/classfile\/CodeTransform sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl flags 601\n-innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfField outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfField flags 609\n+-class name java\/lang\/classfile\/components\/ClassPrinter$LeafNode\n@@ -1676,4 +1637,13 @@\n-class name java\/lang\/classfile\/components\/CodeRelabeler\n-header extends java\/lang\/Object implements java\/lang\/classfile\/CodeTransform sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/CodeRelabelerImpl flags 601\n-innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n--method name relabel descriptor (Ljava\/lang\/classfile\/Label;Ljava\/lang\/classfile\/CodeBuilder;)Ljava\/lang\/classfile\/Label;\n+-class name java\/lang\/classfile\/components\/ClassPrinter$ListNode\n+\n+-class name java\/lang\/classfile\/components\/ClassPrinter$MapNode\n+\n+-class name java\/lang\/classfile\/components\/ClassPrinter$Node\n+\n+-class name java\/lang\/classfile\/components\/ClassPrinter$Verbosity\n+\n+-class name java\/lang\/classfile\/components\/ClassRemapper\n+\n+-class name java\/lang\/classfile\/components\/CodeLocalsShifter\n+\n+-class name java\/lang\/classfile\/components\/CodeRelabeler\n@@ -1681,2 +1651,1 @@\n-class name java\/lang\/classfile\/components\/CodeStackTracker\n-header extends java\/lang\/Object implements java\/lang\/classfile\/CodeTransform sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/CodeStackTrackerImpl flags 601\n+-class name java\/lang\/classfile\/components\/CodeStackTracker\n@@ -1778,0 +1747,1 @@\n+-method name tag descriptor ()B\n@@ -1795,0 +1765,1 @@\n+method name tag descriptor ()I flags 401\n@@ -2258,0 +2229,14 @@\n+class name java\/security\/KeyStore\n+header extends java\/lang\/Object nestMembers java\/security\/KeyStore$Builder,java\/security\/KeyStore$TrustedCertificateEntry,java\/security\/KeyStore$SecretKeyEntry,java\/security\/KeyStore$PrivateKeyEntry,java\/security\/KeyStore$Entry,java\/security\/KeyStore$Entry$Attribute,java\/security\/KeyStore$CallbackHandlerProtection,java\/security\/KeyStore$PasswordProtection,java\/security\/KeyStore$ProtectionParameter,java\/security\/KeyStore$LoadStoreParameter flags 21\n+innerclass innerClass java\/security\/KeyStore$LoadStoreParameter outerClass java\/security\/KeyStore innerClassName LoadStoreParameter flags 609\n+innerclass innerClass java\/security\/KeyStore$ProtectionParameter outerClass java\/security\/KeyStore innerClassName ProtectionParameter flags 609\n+innerclass innerClass java\/security\/KeyStore$Entry outerClass java\/security\/KeyStore innerClassName Entry flags 609\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass java\/security\/KeyStore$Builder outerClass java\/security\/KeyStore innerClassName Builder flags 409\n+innerclass innerClass java\/security\/KeyStore$TrustedCertificateEntry outerClass java\/security\/KeyStore innerClassName TrustedCertificateEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$SecretKeyEntry outerClass java\/security\/KeyStore innerClassName SecretKeyEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$PrivateKeyEntry outerClass java\/security\/KeyStore innerClassName PrivateKeyEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$CallbackHandlerProtection outerClass java\/security\/KeyStore innerClassName CallbackHandlerProtection flags 9\n+innerclass innerClass java\/security\/KeyStore$PasswordProtection outerClass java\/security\/KeyStore innerClassName PasswordProtection flags 9\n+innerclass innerClass java\/security\/KeyStore$Entry$Attribute outerClass java\/security\/KeyStore$Entry innerClassName Attribute flags 609\n+\n@@ -2261,0 +2246,4 @@\n+class name java\/security\/SecureRandom\n+header extends java\/util\/Random flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n@@ -2499,1 +2488,1 @@\n-method name tag descriptor ()B flags 401\n+method name tag descriptor ()I flags 401\n@@ -2520,1 +2509,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2522,0 +2510,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2524,1 +2513,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2533,1 +2522,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2536,0 +2524,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2538,1 +2527,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2547,1 +2536,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2549,0 +2537,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2557,1 +2546,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2559,0 +2547,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2561,1 +2550,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2564,1 +2553,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2573,1 +2562,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2576,0 +2564,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2579,1 +2568,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2582,1 +2571,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2587,1 +2576,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2591,1 +2580,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2598,1 +2587,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2602,1 +2591,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2608,1 +2597,1 @@\n-method name tag descriptor ()B flags 1\n+method name tag descriptor ()I flags 1\n@@ -2612,1 +2601,0 @@\n-method name tag descriptor ()B flags 1\n@@ -2615,0 +2603,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2666,0 +2655,1 @@\n+-method name tag descriptor ()C\n@@ -2667,0 +2657,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2669,0 +2660,1 @@\n+-method name tag descriptor ()C\n@@ -2670,0 +2662,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2677,0 +2670,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2684,0 +2679,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2692,1 +2689,0 @@\n-method name tag descriptor ()C flags 1\n@@ -2699,0 +2695,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2703,0 +2700,1 @@\n+-method name tag descriptor ()C\n@@ -2704,0 +2702,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2713,0 +2712,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2715,0 +2716,1 @@\n+-method name tag descriptor ()C\n@@ -2716,0 +2718,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2723,0 +2726,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2731,1 +2736,0 @@\n-method name tag descriptor ()C flags 1\n@@ -2738,0 +2742,1 @@\n+method name tag descriptor ()I flags 1\n@@ -2747,0 +2752,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2754,0 +2761,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2761,0 +2770,2 @@\n+-method name tag descriptor ()C\n+method name tag descriptor ()I flags 1\n@@ -2926,37 +2937,9 @@\n-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl\n-header extends java\/lang\/Object nestMembers jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl,jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl$PrivateListNodeImpl,jdk\/internal\/classfile\/impl\/ClassPrinterImpl$ListNodeImpl,jdk\/internal\/classfile\/impl\/ClassPrinterImpl$LeafNodeImpl flags 31\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$LeafNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName LeafNodeImpl flags 19\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Node outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Node flags 609\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$ListNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName ListNodeImpl flags 9\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl innerClassName MapNodeImpl flags 19\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$LeafNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName LeafNode flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfString outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfString flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfDouble outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfDouble flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfFloat outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfFloat flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfLong outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfLong flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfInt outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfInt flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfShort outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfShort flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfChar outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfChar flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfByte outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfByte flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfBoolean outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfBoolean flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfClass outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfClass flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfEnum outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfEnum flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfAnnotation outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfAnnotation flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfArray outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfArray flags 609\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Verbosity outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Verbosity flags 4019\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$MapNode outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName MapNode flags 609\n-innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n-innerclass innerClass java\/lang\/classfile\/instruction\/DiscontinuedInstruction$JsrInstruction outerClass java\/lang\/classfile\/instruction\/DiscontinuedInstruction innerClassName JsrInstruction flags 609\n-innerclass innerClass java\/lang\/classfile\/instruction\/DiscontinuedInstruction$RetInstruction outerClass java\/lang\/classfile\/instruction\/DiscontinuedInstruction innerClassName RetInstruction flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$TargetInfo outerClass java\/lang\/classfile\/TypeAnnotation innerClassName TargetInfo flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$OffsetTarget outerClass java\/lang\/classfile\/TypeAnnotation innerClassName OffsetTarget flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$TypeArgumentTarget outerClass java\/lang\/classfile\/TypeAnnotation innerClassName TypeArgumentTarget flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$LocalVarTarget outerClass java\/lang\/classfile\/TypeAnnotation innerClassName LocalVarTarget flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$LocalVarTargetInfo outerClass java\/lang\/classfile\/TypeAnnotation innerClassName LocalVarTargetInfo flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$TargetType outerClass java\/lang\/classfile\/TypeAnnotation innerClassName TargetType flags 4019\n-innerclass innerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo$VerificationTypeInfo outerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo innerClassName VerificationTypeInfo flags 609\n-innerclass innerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo$SimpleVerificationTypeInfo outerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo innerClassName SimpleVerificationTypeInfo flags 4019\n-innerclass innerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo$ObjectVerificationTypeInfo outerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo innerClassName ObjectVerificationTypeInfo flags 609\n-innerclass innerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo$UninitializedVerificationTypeInfo outerClass java\/lang\/classfile\/attribute\/StackMapFrameInfo innerClassName UninitializedVerificationTypeInfo flags 609\n-innerclass innerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl$PrivateListNodeImpl outerClass jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl innerClassName PrivateListNodeImpl flags 1a\n-innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl$LeafNodeImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl$ListNodeImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/ClassPrinterImpl$MapNodeImpl$PrivateListNodeImpl\n@@ -2996,21 +2979,1 @@\n-class name jdk\/internal\/classfile\/impl\/ClassRemapperImpl\n-header extends java\/lang\/Record implements java\/lang\/classfile\/components\/ClassRemapper record true flags 31\n-recordcomponent name mapFunction descriptor Ljava\/util\/function\/Function; signature Ljava\/util\/function\/Function<Ljava\/lang\/constant\/ClassDesc;Ljava\/lang\/constant\/ClassDesc;>;\n-innerclass innerClass java\/lang\/classfile\/Signature$ClassTypeSig outerClass java\/lang\/classfile\/Signature innerClassName ClassTypeSig flags 609\n-innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n-innerclass innerClass java\/lang\/classfile\/Signature$ArrayTypeSig outerClass java\/lang\/classfile\/Signature innerClassName ArrayTypeSig flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$TypeArg outerClass java\/lang\/classfile\/Signature innerClassName TypeArg flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfAnnotation outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfAnnotation flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfArray outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfArray flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfConstant outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfConstant flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfClass outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfClass flags 609\n-innerclass innerClass java\/lang\/classfile\/AnnotationValue$OfEnum outerClass java\/lang\/classfile\/AnnotationValue innerClassName OfEnum flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$TypeParam outerClass java\/lang\/classfile\/Signature innerClassName TypeParam flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$RefTypeSig outerClass java\/lang\/classfile\/Signature innerClassName RefTypeSig flags 609\n-innerclass innerClass java\/lang\/classfile\/TypeAnnotation$TargetInfo outerClass java\/lang\/classfile\/TypeAnnotation innerClassName TargetInfo flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$TypeArg$Unbounded outerClass java\/lang\/classfile\/Signature$TypeArg innerClassName Unbounded flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$TypeArg$Bounded outerClass java\/lang\/classfile\/Signature$TypeArg innerClassName Bounded flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$TypeArg$Bounded$WildcardIndicator outerClass java\/lang\/classfile\/Signature$TypeArg$Bounded innerClassName WildcardIndicator flags 4019\n-innerclass innerClass java\/lang\/classfile\/instruction\/ConstantInstruction$LoadConstantInstruction outerClass java\/lang\/classfile\/instruction\/ConstantInstruction innerClassName LoadConstantInstruction flags 609\n-innerclass innerClass java\/lang\/classfile\/Signature$ThrowableSig outerClass java\/lang\/classfile\/Signature innerClassName ThrowableSig flags 609\n-innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-class name jdk\/internal\/classfile\/impl\/ClassRemapperImpl\n@@ -3060,0 +3023,6 @@\n+-class name jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/CodeRelabelerImpl\n+\n+-class name jdk\/internal\/classfile\/impl\/CodeStackTrackerImpl\n+\n@@ -3593,1 +3562,0 @@\n-innerclass innerClass java\/lang\/classfile\/components\/ClassPrinter$Verbosity outerClass java\/lang\/classfile\/components\/ClassPrinter innerClassName Verbosity flags 4019\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.base-O.sym.txt","additions":97,"deletions":129,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -122,0 +122,9 @@\n+class name javax\/swing\/text\/html\/CSS\n+header extends java\/lang\/Object implements java\/io\/Serializable nestMembers javax\/swing\/text\/html\/CSS$Attribute flags 21\n+innerclass innerClass javax\/swing\/text\/html\/CSS$Attribute outerClass javax\/swing\/text\/html\/CSS innerClassName Attribute flags 19\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Tag outerClass javax\/swing\/text\/html\/HTML innerClassName Tag flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.desktop-O.sym.txt","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+class name java\/lang\/management\/RuntimeMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/PlatformManagedObject flags 601 classAnnotations @Ljdk\/Profile+Annotation;(value=I3)\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.management-O.sym.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,6 @@\n+class name javax\/management\/remote\/rmi\/RMIConnector\n+header extends java\/lang\/Object implements javax\/management\/remote\/JMXConnector,java\/io\/Serializable,javax\/management\/remote\/JMXAddressable flags 21\n+innerclass innerClass java\/lang\/module\/ModuleDescriptor$Modifier outerClass java\/lang\/module\/ModuleDescriptor innerClassName Modifier flags 4019\n+innerclass innerClass java\/lang\/module\/ModuleDescriptor$Builder outerClass java\/lang\/module\/ModuleDescriptor innerClassName Builder flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.management.rmi-O.sym.txt","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+class name javax\/naming\/Context\n+-field name APPLET descriptor Ljava\/lang\/String;\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.naming-O.sym.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,4 @@\n+-method name getString descriptor (J)Ljava\/lang\/String;\n+-method name getString descriptor (JLjava\/nio\/charset\/Charset;)Ljava\/lang\/String;\n+-method name setString descriptor (JLjava\/lang\/String;)V\n+-method name setString descriptor (JLjava\/lang\/String;Ljava\/nio\/charset\/Charset;)V\n@@ -53,0 +57,4 @@\n+method name getString descriptor (J)Ljava\/lang\/String; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getString descriptor (JLjava\/nio\/charset\/Charset;)Ljava\/lang\/String; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setString descriptor (JLjava\/lang\/String;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setString descriptor (JLjava\/lang\/String;Ljava\/nio\/charset\/Charset;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.incubator.foreign-O.sym.txt","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_keymgmt.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CPrivateKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CPublicKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CRSACipher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/DynamicLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/NamedOperation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/Namespace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/NamespaceOperation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/NoSuchDynamicMethodException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/Operation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/RelinkableCallSite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/StandardNamespace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/BeansLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/CallerSensitiveDynamicMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/ClassString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/MissingMemberHandlerFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/beans\/StaticClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/internal\/InternalTypeUtilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/ConversionComparator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardedInvocationTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardingDynamicLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardingTypeConverterFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/LinkRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/LinkerServices.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/MethodHandleTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/MethodTypeConversionStrategy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/TypeBasedGuardingDynamicLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/CompositeGuardingDynamicLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/CompositeTypeBasedGuardingDynamicLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/DefaultInternalObjectFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/Guards.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/Lookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/SimpleLinkRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/support\/TypeUtilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/support\/AbstractRelinkableCallSite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/support\/ChainedCallSite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/support\/SimpleRelinkableCallSite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_proc.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/symtab.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/DebugServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotAgent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/SALauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/StubQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/DebuggerBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/bsd\/BsdDebuggerLocal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxDebuggerLocal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionSetBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1MonitoringSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1PrintRegionClosure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/ContiguousSpace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeWithCPIndex.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Instance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Mark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ObjectHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/BasicLock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ObjectSynchronizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/RobustOopDeterminator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,5 +236,2 @@\n-     * Returns the attribute's value from this exchange's\n-     * {@linkplain HttpContext#getAttributes() context attributes}.\n-     *\n-     * @apiNote {@link Filter} modules may store arbitrary objects as attributes through\n-     * {@code HttpExchange} instances as an out-of-band communication mechanism. Other filters\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * instances as an out-of-band communication mechanism. Other filters\n@@ -247,2 +244,1 @@\n-     * @return the attribute's value or {@code null} if either the attribute isn't set\n-     *         or the attribute value is {@code null}\n+     * @return the attribute object, or {@code null} if it does not exist\n@@ -254,5 +250,2 @@\n-     * Sets an attribute with the given {@code name} and {@code value} in this exchange's\n-     * {@linkplain HttpContext#getAttributes() context attributes}.\n-     *\n-     * @apiNote {@link Filter} modules may store arbitrary objects as attributes through\n-     * {@code HttpExchange} instances as an out-of-band communication mechanism. Other filters\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * instances as an out-of-band communication mechanism. Other filters\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpExchange.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.httpserver\/share\/man\/jwebserver.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_neon.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_rvv.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_sve.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.internal.vm.vector.VectorSupport;\n@@ -33,1 +34,1 @@\n-    \/\/ Internal representation allows for a maximum index of 256\n+    \/\/ Internal representation allows for a maximum index of E.MAX_VALUE - 1\n@@ -36,40 +37,2 @@\n-    AbstractShuffle(int length, byte[] reorder) {\n-        super(reorder);\n-        assert(length == reorder.length);\n-        assert(indexesInRange(reorder));\n-    }\n-\n-    AbstractShuffle(int length, int[] reorder) {\n-        this(length, reorder, 0);\n-    }\n-\n-    AbstractShuffle(int length, int[] reorder, int offset) {\n-        super(prepare(length, reorder, offset));\n-    }\n-\n-    AbstractShuffle(int length, IntUnaryOperator f) {\n-        super(prepare(length, f));\n-    }\n-\n-    private static byte[] prepare(int length, int[] reorder, int offset) {\n-        byte[] a = new byte[length];\n-        for (int i = 0; i < length; i++) {\n-            int si = reorder[offset + i];\n-            si = partiallyWrapIndex(si, length);\n-            a[i] = (byte) si;\n-        }\n-        return a;\n-    }\n-\n-    private static byte[] prepare(int length, IntUnaryOperator f) {\n-        byte[] a = new byte[length];\n-        for (int i = 0; i < a.length; i++) {\n-            int si = f.applyAsInt(i);\n-            si = partiallyWrapIndex(si, length);\n-            a[i] = (byte) si;\n-        }\n-        return a;\n-    }\n-\n-    byte[] reorder() {\n-        return (byte[])getPayload();\n+    AbstractShuffle(Object indices) {\n+        super(indices);\n@@ -87,1 +50,3 @@\n-    @Override\n+    \/*package-private*\/\n+    abstract AbstractVector<?> toBitsVector();\n+\n@@ -89,8 +54,9 @@\n-    public void intoArray(int[] a, int offset) {\n-        byte[] reorder = reorder();\n-        int vlen = reorder.length;\n-        for (int i = 0; i < vlen; i++) {\n-            int sourceIndex = reorder[i];\n-            assert(sourceIndex >= -vlen && sourceIndex < vlen);\n-            a[offset + i] = sourceIndex;\n-        }\n+    final AbstractVector<?> toBitsVectorTemplate() {\n+        AbstractSpecies<?> dsp = vspecies().asIntegral();\n+        Class<?> etype = dsp.elementType();\n+        Class<?> rvtype = dsp.dummyVector().getClass();\n+        return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                                     getClass(), etype, length(),\n+                                     rvtype, etype, length(),\n+                                     this, dsp,\n+                                     (v, s) -> v.toBitsVector0());\n@@ -99,0 +65,2 @@\n+    abstract AbstractVector<?> toBitsVector0();\n+\n@@ -101,5 +69,4 @@\n-    public int[] toArray() {\n-        byte[] reorder = reorder();\n-        int[] a = new int[reorder.length];\n-        intoArray(a, 0);\n-        return a;\n+    public final int[] toArray() {\n+        int[] res = new int[length()];\n+        intoArray(res, 0);\n+        return res;\n@@ -108,1 +75,1 @@\n-    \/*package-private*\/\n+    @Override\n@@ -110,9 +77,5 @@\n-    final\n-    AbstractVector<E>\n-    toVectorTemplate() {\n-        \/\/ Note that the values produced by laneSource\n-        \/\/ are already clipped.  At this point we convert\n-        \/\/ them from internal ints (or bytes) into the ETYPE.\n-        \/\/ FIXME: Use a conversion intrinsic for this operation.\n-        \/\/ https:\/\/bugs.openjdk.org\/browse\/JDK-8225740\n-        return (AbstractVector<E>) vspecies().fromIntValues(toArray());\n+    public final <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n+        if (length() != s.length()) {\n+            throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n+        }\n+        return toBitsVector().bitsToShuffle((AbstractSpecies<F>) s);\n@@ -121,0 +84,1 @@\n+    @Override\n@@ -126,13 +90,2 @@\n-        Vector<E> shufvec = this.toVector();\n-        VectorMask<E> vecmask = shufvec.compare(VectorOperators.LT, vspecies().zero());\n-        if (vecmask.anyTrue()) {\n-            byte[] reorder = reorder();\n-            throw checkIndexFailed(reorder[vecmask.firstTrue()], length());\n-        }\n-        return this;\n-    }\n-\n-    @ForceInline\n-    public final VectorShuffle<E> wrapIndexesTemplate() {\n-        Vector<E> shufvec = this.toVector();\n-        VectorMask<E> vecmask = shufvec.compare(VectorOperators.LT, vspecies().zero());\n+        Vector<?> shufvec = this.toBitsVector();\n+        VectorMask<?> vecmask = shufvec.compare(VectorOperators.LT, 0);\n@@ -140,3 +93,2 @@\n-            \/\/ FIXME: vectorize this\n-            byte[] reorder = reorder();\n-            return wrapAndRebuild(reorder);\n+            int[] indices = toArray();\n+            throw checkIndexFailed(indices[vecmask.firstTrue()], length());\n@@ -147,25 +99,0 @@\n-    @ForceInline\n-    public final VectorShuffle<E> wrapAndRebuild(byte[] oldReorder) {\n-        int length = oldReorder.length;\n-        byte[] reorder = new byte[length];\n-        for (int i = 0; i < length; i++) {\n-            int si = oldReorder[i];\n-            \/\/ FIXME: This does not work unless it's a power of 2.\n-            if ((length & (length - 1)) == 0) {\n-                si += si & length;  \/\/ power-of-two optimization\n-            } else if (si < 0) {\n-                \/\/ non-POT code requires a conditional add\n-                si += length;\n-            }\n-            assert(si >= 0 && si < length);\n-            reorder[i] = (byte) si;\n-        }\n-        return vspecies().dummyVector().shuffleFromBytes(reorder);\n-    }\n-\n-    @ForceInline\n-    public final VectorMask<E> laneIsValid() {\n-        Vector<E> shufvec = this.toVector();\n-        return shufvec.compare(VectorOperators.GE, vspecies().zero());\n-    }\n-\n@@ -223,17 +150,0 @@\n-\n-    static boolean indexesInRange(byte[] reorder) {\n-        int length = reorder.length;\n-        for (byte si : reorder) {\n-            if (si >= length || si < -length) {\n-                boolean assertsEnabled = false;\n-                assert(assertsEnabled = true);\n-                if (assertsEnabled) {\n-                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n-                                  java.util.Arrays.toString(reorder));\n-                    throw new AssertionError(msg);\n-                }\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractShuffle.java","additions":34,"deletions":124,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    final Class<? extends AbstractShuffle<E>> shuffleType;\n+    @Stable\n@@ -64,0 +66,1 @@\n+                    Class<? extends AbstractShuffle<E>> shuffleType,\n@@ -69,0 +72,1 @@\n+        this.shuffleType = shuffleType;\n@@ -165,0 +169,5 @@\n+    @ForceInline\n+    final Class<? extends AbstractShuffle<E>> shuffleType() {\n+        return shuffleType;\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,0 +197,20 @@\n+    abstract <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp);\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffleTemplate(AbstractSpecies<F> dsp) {\n+        Class<?> etype = vspecies().elementType();\n+        Class<?> dvtype = dsp.shuffleType();\n+        Class<?> dtype = dsp.asIntegral().elementType();\n+        int dlength = dsp.dummyVector().length();\n+        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                                     getClass(), etype, length(),\n+                                     dvtype, dtype, dlength,\n+                                     this, dsp,\n+                                     AbstractVector::bitsToShuffle0);\n+    }\n+\n+    abstract <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp);\n+\n+    abstract <F> VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap);\n+\n@@ -201,2 +221,13 @@\n-    \/*do not alias this byte array*\/\n-    abstract AbstractShuffle<E> shuffleFromBytes(byte[] reorder);\n+    @ForceInline\n+    final VectorShuffle<E> iotaShuffleTemplate(int start, int step, boolean wrap) {\n+        if ((length() & (length() - 1)) != 0) {\n+            \/\/ Uncommon path, the length is not a power of 2\n+            return wrap ? shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * step + start, length())))\n+                        : shuffleFromOp(i -> i * step + start);\n+        }\n+\n+        AbstractVector<?> iota = vspecies().asIntegral().iota();\n+        iota = (AbstractVector<?>) iota.lanewise(VectorOperators.MUL, step)\n+                .lanewise(VectorOperators.ADD, start);\n+        return iota.toShuffle(vspecies(), wrap);\n+    }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Byte128Shuffle)VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Byte128Shuffle)VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Byte128Shuffle) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n@@ -157,5 +152,1 @@\n-    Byte128Shuffle shuffleFromBytes(byte[] reorder) { return new Byte128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Byte128Shuffle shuffleFromArray(int[] indexes, int i) { return new Byte128Shuffle(indexes, i); }\n+    Byte128Shuffle shuffleFromArray(int[] indices, int i) { return new Byte128Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Byte> toShuffle() {\n-        return super.toShuffleTemplate(Byte128Shuffle.class); \/\/ specialize\n+    public final Byte128Shuffle toShuffle() {\n+        return (Byte128Shuffle) toShuffle(vspecies(), false);\n@@ -824,2 +822,4 @@\n-        Byte128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte128Shuffle(byte[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -828,2 +828,2 @@\n-        public Byte128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -832,2 +832,2 @@\n-        public Byte128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Byte128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -836,2 +836,2 @@\n-        public Byte128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        byte[] indices() {\n+            return (byte[])getPayload();\n@@ -841,0 +841,1 @@\n+        @ForceInline\n@@ -856,2 +857,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Byte128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte128Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -862,6 +862,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Byte128Vector toBitsVector() {\n+            return (Byte128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Byte128Vector toBitsVector0() {\n+            return ((Byte128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -872,3 +873,2 @@\n-        public Byte128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte128Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -877,0 +877,1 @@\n+        @Override\n@@ -878,0 +879,17 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_128;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+        }\n+\n@@ -879,8 +897,55 @@\n-        public Byte128Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n-            Byte128Shuffle s = (Byte128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Byte128Mask laneIsValid() {\n+            return (Byte128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte128Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n+            Byte128Shuffle concreteShuffle = (Byte128Shuffle) shuffle;\n+            return (Byte128Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte128Shuffle wrapIndexes() {\n+            Byte128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Byte128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Byte128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Byte128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static byte[] prepare(int[] indices, int offset) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static byte[] prepare(IntUnaryOperator f) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(byte[] indices) {\n+            int length = indices.length;\n+            for (byte si : indices) {\n+                if (si >= (byte)length || si < (byte)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -888,1 +953,1 @@\n-            return new Byte128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":107,"deletions":42,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Byte256Shuffle)VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Byte256Shuffle)VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Byte256Shuffle) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n@@ -157,5 +152,1 @@\n-    Byte256Shuffle shuffleFromBytes(byte[] reorder) { return new Byte256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Byte256Shuffle shuffleFromArray(int[] indexes, int i) { return new Byte256Shuffle(indexes, i); }\n+    Byte256Shuffle shuffleFromArray(int[] indices, int i) { return new Byte256Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Byte> toShuffle() {\n-        return super.toShuffleTemplate(Byte256Shuffle.class); \/\/ specialize\n+    public final Byte256Shuffle toShuffle() {\n+        return (Byte256Shuffle) toShuffle(vspecies(), false);\n@@ -856,2 +854,4 @@\n-        Byte256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte256Shuffle(byte[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -860,2 +860,2 @@\n-        public Byte256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -864,2 +864,2 @@\n-        public Byte256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Byte256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -868,2 +868,2 @@\n-        public Byte256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        byte[] indices() {\n+            return (byte[])getPayload();\n@@ -873,0 +873,1 @@\n+        @ForceInline\n@@ -888,2 +889,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Byte256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte256Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -894,6 +894,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Byte256Vector toBitsVector() {\n+            return (Byte256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Byte256Vector toBitsVector0() {\n+            return ((Byte256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -904,3 +905,2 @@\n-        public Byte256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte256Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -909,0 +909,1 @@\n+        @Override\n@@ -910,0 +911,17 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_256;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+        }\n+\n@@ -911,8 +929,55 @@\n-        public Byte256Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n-            Byte256Shuffle s = (Byte256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Byte256Mask laneIsValid() {\n+            return (Byte256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte256Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n+            Byte256Shuffle concreteShuffle = (Byte256Shuffle) shuffle;\n+            return (Byte256Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte256Shuffle wrapIndexes() {\n+            Byte256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Byte256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Byte256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Byte256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static byte[] prepare(int[] indices, int offset) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static byte[] prepare(IntUnaryOperator f) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(byte[] indices) {\n+            int length = indices.length;\n+            for (byte si : indices) {\n+                if (si >= (byte)length || si < (byte)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -920,1 +985,1 @@\n-            return new Byte256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":107,"deletions":42,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Byte512Shuffle)VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Byte512Shuffle)VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Byte512Shuffle) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n@@ -157,5 +152,1 @@\n-    Byte512Shuffle shuffleFromBytes(byte[] reorder) { return new Byte512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Byte512Shuffle shuffleFromArray(int[] indexes, int i) { return new Byte512Shuffle(indexes, i); }\n+    Byte512Shuffle shuffleFromArray(int[] indices, int i) { return new Byte512Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Byte> toShuffle() {\n-        return super.toShuffleTemplate(Byte512Shuffle.class); \/\/ specialize\n+    public final Byte512Shuffle toShuffle() {\n+        return (Byte512Shuffle) toShuffle(vspecies(), false);\n@@ -920,2 +918,4 @@\n-        Byte512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte512Shuffle(byte[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -924,2 +924,2 @@\n-        public Byte512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -928,2 +928,2 @@\n-        public Byte512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Byte512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -932,2 +932,2 @@\n-        public Byte512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        byte[] indices() {\n+            return (byte[])getPayload();\n@@ -937,0 +937,1 @@\n+        @ForceInline\n@@ -952,2 +953,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Byte512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte512Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -958,6 +958,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Byte512Vector toBitsVector() {\n+            return (Byte512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Byte512Vector toBitsVector0() {\n+            return ((Byte512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -968,3 +969,2 @@\n-        public Byte512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte512Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -973,0 +973,1 @@\n+        @Override\n@@ -974,0 +975,17 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_512;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+        }\n+\n@@ -975,8 +993,55 @@\n-        public Byte512Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n-            Byte512Shuffle s = (Byte512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Byte512Mask laneIsValid() {\n+            return (Byte512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte512Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n+            Byte512Shuffle concreteShuffle = (Byte512Shuffle) shuffle;\n+            return (Byte512Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte512Shuffle wrapIndexes() {\n+            Byte512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Byte512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Byte512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Byte512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static byte[] prepare(int[] indices, int offset) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static byte[] prepare(IntUnaryOperator f) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(byte[] indices) {\n+            int length = indices.length;\n+            for (byte si : indices) {\n+                if (si >= (byte)length || si < (byte)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -984,1 +1049,1 @@\n-            return new Byte512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":107,"deletions":42,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Byte64Shuffle)VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Byte64Shuffle)VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Byte64Shuffle) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n@@ -157,5 +152,1 @@\n-    Byte64Shuffle shuffleFromBytes(byte[] reorder) { return new Byte64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Byte64Shuffle shuffleFromArray(int[] indexes, int i) { return new Byte64Shuffle(indexes, i); }\n+    Byte64Shuffle shuffleFromArray(int[] indices, int i) { return new Byte64Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Byte> toShuffle() {\n-        return super.toShuffleTemplate(Byte64Shuffle.class); \/\/ specialize\n+    public final Byte64Shuffle toShuffle() {\n+        return (Byte64Shuffle) toShuffle(vspecies(), false);\n@@ -808,2 +806,4 @@\n-        Byte64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte64Shuffle(byte[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -812,2 +812,2 @@\n-        public Byte64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -816,2 +816,2 @@\n-        public Byte64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Byte64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -820,2 +820,2 @@\n-        public Byte64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        byte[] indices() {\n+            return (byte[])getPayload();\n@@ -825,0 +825,1 @@\n+        @ForceInline\n@@ -840,2 +841,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Byte64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte64Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -846,6 +846,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Byte64Vector toBitsVector() {\n+            return (Byte64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Byte64Vector toBitsVector0() {\n+            return ((Byte64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -856,3 +857,2 @@\n-        public Byte64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Byte64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Byte64Shuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -861,0 +861,1 @@\n+        @Override\n@@ -862,0 +863,17 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_64;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+        }\n+\n@@ -863,8 +881,55 @@\n-        public Byte64Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n-            Byte64Shuffle s = (Byte64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Byte64Mask laneIsValid() {\n+            return (Byte64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte64Shuffle rearrange(VectorShuffle<Byte> shuffle) {\n+            Byte64Shuffle concreteShuffle = (Byte64Shuffle) shuffle;\n+            return (Byte64Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Byte64Shuffle wrapIndexes() {\n+            Byte64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Byte64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Byte64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Byte64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static byte[] prepare(int[] indices, int offset) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static byte[] prepare(IntUnaryOperator f) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(byte[] indices) {\n+            int length = indices.length;\n+            for (byte si : indices) {\n+                if (si >= (byte)length || si < (byte)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -872,1 +937,1 @@\n-            return new Byte64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":107,"deletions":42,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (ByteMaxShuffle)VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (ByteMaxShuffle)VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (ByteMaxShuffle) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n@@ -157,5 +152,1 @@\n-    ByteMaxShuffle shuffleFromBytes(byte[] reorder) { return new ByteMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    ByteMaxShuffle shuffleFromArray(int[] indexes, int i) { return new ByteMaxShuffle(indexes, i); }\n+    ByteMaxShuffle shuffleFromArray(int[] indices, int i) { return new ByteMaxShuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Byte> toShuffle() {\n-        return super.toShuffleTemplate(ByteMaxShuffle.class); \/\/ specialize\n+    public final ByteMaxShuffle toShuffle() {\n+        return (ByteMaxShuffle) toShuffle(vspecies(), false);\n@@ -794,2 +792,4 @@\n-        ByteMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        ByteMaxShuffle(byte[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -798,2 +798,2 @@\n-        public ByteMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        ByteMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -802,2 +802,2 @@\n-        public ByteMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        ByteMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -806,2 +806,2 @@\n-        public ByteMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        byte[] indices() {\n+            return (byte[])getPayload();\n@@ -811,0 +811,1 @@\n+        @ForceInline\n@@ -826,2 +827,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, ByteMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((ByteMaxVector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -832,6 +832,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        ByteMaxVector toBitsVector() {\n+            return (ByteMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        ByteMaxVector toBitsVector0() {\n+            return ((ByteMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -842,3 +843,2 @@\n-        public ByteMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, ByteMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((ByteMaxShuffle)(((AbstractShuffle<Byte>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -847,0 +847,1 @@\n+        @Override\n@@ -848,0 +849,17 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_MAX;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+        }\n+\n@@ -849,8 +867,55 @@\n-        public ByteMaxShuffle rearrange(VectorShuffle<Byte> shuffle) {\n-            ByteMaxShuffle s = (ByteMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final ByteMaxMask laneIsValid() {\n+            return (ByteMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final ByteMaxShuffle rearrange(VectorShuffle<Byte> shuffle) {\n+            ByteMaxShuffle concreteShuffle = (ByteMaxShuffle) shuffle;\n+            return (ByteMaxShuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final ByteMaxShuffle wrapIndexes() {\n+            ByteMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (ByteMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (ByteMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (ByteMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static byte[] prepare(int[] indices, int offset) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static byte[] prepare(IntUnaryOperator f) {\n+            byte[] a = new byte[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (byte)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(byte[] indices) {\n+            int length = indices.length;\n+            for (byte si : indices) {\n+                if (si >= (byte)length || si < (byte)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -858,1 +923,1 @@\n-            return new ByteMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":107,"deletions":42,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -1099,1 +1099,1 @@\n-   \/**\n+    \/**\n@@ -2311,3 +2311,4 @@\n-        VectorShuffle<Byte> iota = iotaShuffle();\n-        VectorMask<Byte> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        ByteVector iotaVector = (ByteVector) iotaShuffle().toBitsVector();\n+        ByteVector filter = broadcast((byte)(length() - origin));\n+        VectorMask<Byte> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Byte> iota = iotaShuffle(origin, 1, true);\n@@ -2341,3 +2342,4 @@\n-        VectorShuffle<Byte> iota = iotaShuffle();\n-        VectorMask<Byte> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        ByteVector iotaVector = (ByteVector) iotaShuffle().toBitsVector();\n+        ByteVector filter = broadcast((byte)(length() - origin));\n+        VectorMask<Byte> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Byte> iota = iotaShuffle(origin, 1, true);\n@@ -2362,4 +2364,4 @@\n-        VectorShuffle<Byte> iota = iotaShuffle();\n-        VectorMask<Byte> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((byte)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        ByteVector iotaVector = (ByteVector) iotaShuffle().toBitsVector();\n+        ByteVector filter = broadcast((byte)origin);\n+        VectorMask<Byte> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter);\n+        AbstractShuffle<Byte> iota = iotaShuffle(-origin, 1, true);\n@@ -2402,4 +2404,4 @@\n-        VectorShuffle<Byte> iota = iotaShuffle();\n-        VectorMask<Byte> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((byte)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        ByteVector iotaVector = (ByteVector) iotaShuffle().toBitsVector();\n+        ByteVector filter = broadcast((byte)origin);\n+        VectorMask<Byte> blendMask = iotaVector.compare(VectorOperators.GE, filter);\n+        AbstractShuffle<Byte> iota = iotaShuffle(-origin, 1, true);\n@@ -2428,2 +2430,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2432,1 +2432,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2434,1 +2434,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2457,2 +2457,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2461,1 +2459,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2463,1 +2461,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2484,2 +2482,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2489,1 +2485,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2491,1 +2487,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2497,1 +2493,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2499,1 +2495,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2505,0 +2501,1 @@\n+    @Override\n@@ -2506,2 +2503,2 @@\n-    private final\n-    VectorShuffle<Byte> toShuffle0(ByteSpecies dsp) {\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        assert(dsp.length() == vspecies().length());\n@@ -2516,1 +2513,0 @@\n-    \/*package-private*\/\n@@ -2518,8 +2514,11 @@\n-    final\n-    VectorShuffle<Byte> toShuffleTemplate(Class<?> shuffleType) {\n-        ByteSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), byte.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     ByteVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        ByteVector idx = this;\n+        ByteVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            ByteVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Byte> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -4219,0 +4218,1 @@\n+                Class<? extends AbstractShuffle<Byte>> shuffleType,\n@@ -4221,1 +4221,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -4507,0 +4507,1 @@\n+                            Byte64Vector.Byte64Shuffle.class,\n@@ -4514,0 +4515,1 @@\n+                            Byte128Vector.Byte128Shuffle.class,\n@@ -4521,0 +4523,1 @@\n+                            Byte256Vector.Byte256Shuffle.class,\n@@ -4528,0 +4531,1 @@\n+                            Byte512Vector.Byte512Shuffle.class,\n@@ -4535,0 +4539,1 @@\n+                            ByteMaxVector.ByteMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":46,"deletions":41,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Double128Shuffle)VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Double128Shuffle)VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Double128Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Double128Shuffle shuffleFromBytes(byte[] reorder) { return new Double128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Double128Shuffle shuffleFromArray(int[] indexes, int i) { return new Double128Shuffle(indexes, i); }\n+    Double128Shuffle shuffleFromArray(int[] indices, int i) { return new Double128Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Double> toShuffle() {\n-        return super.toShuffleTemplate(Double128Shuffle.class); \/\/ specialize\n+    public final Double128Shuffle toShuffle() {\n+        return (Double128Shuffle) toShuffle(vspecies(), false);\n@@ -783,1 +781,1 @@\n-        static final Class<Double> ETYPE = double.class; \/\/ used by the JVM\n+        static final Class<Long> ETYPE = long.class; \/\/ used by the JVM\n@@ -785,2 +783,4 @@\n-        Double128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double128Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -789,2 +789,2 @@\n-        public Double128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -793,2 +793,2 @@\n-        public Double128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Double128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -797,2 +797,2 @@\n-        public Double128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -802,0 +802,1 @@\n+        @ForceInline\n@@ -809,2 +810,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -817,2 +818,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Double128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double128Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+            return (Double128Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -823,6 +823,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long128Vector toBitsVector() {\n+            return (Long128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long128Vector toBitsVector0() {\n+            return ((Long128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -833,3 +834,2 @@\n-        public Double128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Double128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double128Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -838,0 +838,1 @@\n+        @Override\n@@ -839,0 +840,28 @@\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -840,8 +869,55 @@\n-        public Double128Shuffle rearrange(VectorShuffle<Double> shuffle) {\n-            Double128Shuffle s = (Double128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Double128Mask laneIsValid() {\n+            return (Double128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double128Shuffle rearrange(VectorShuffle<Double> shuffle) {\n+            Double128Shuffle concreteShuffle = (Double128Shuffle) shuffle;\n+            return (Double128Shuffle) toBitsVector().rearrange(concreteShuffle.cast(LongVector.SPECIES_128))\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double128Shuffle wrapIndexes() {\n+            Long128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Double128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -849,1 +925,1 @@\n-            return new Double128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":121,"deletions":45,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Double256Shuffle)VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Double256Shuffle)VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Double256Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Double256Shuffle shuffleFromBytes(byte[] reorder) { return new Double256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Double256Shuffle shuffleFromArray(int[] indexes, int i) { return new Double256Shuffle(indexes, i); }\n+    Double256Shuffle shuffleFromArray(int[] indices, int i) { return new Double256Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Double> toShuffle() {\n-        return super.toShuffleTemplate(Double256Shuffle.class); \/\/ specialize\n+    public final Double256Shuffle toShuffle() {\n+        return (Double256Shuffle) toShuffle(vspecies(), false);\n@@ -787,1 +785,1 @@\n-        static final Class<Double> ETYPE = double.class; \/\/ used by the JVM\n+        static final Class<Long> ETYPE = long.class; \/\/ used by the JVM\n@@ -789,2 +787,4 @@\n-        Double256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double256Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -793,2 +793,2 @@\n-        public Double256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -797,2 +797,2 @@\n-        public Double256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Double256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -801,2 +801,2 @@\n-        public Double256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -806,0 +806,1 @@\n+        @ForceInline\n@@ -813,2 +814,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -821,2 +822,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Double256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double256Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+            return (Double256Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -827,6 +827,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long256Vector toBitsVector() {\n+            return (Long256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long256Vector toBitsVector0() {\n+            return ((Long256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -837,3 +838,2 @@\n-        public Double256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Double256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double256Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -842,0 +842,1 @@\n+        @Override\n@@ -843,0 +844,28 @@\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -844,8 +873,55 @@\n-        public Double256Shuffle rearrange(VectorShuffle<Double> shuffle) {\n-            Double256Shuffle s = (Double256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Double256Mask laneIsValid() {\n+            return (Double256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double256Shuffle rearrange(VectorShuffle<Double> shuffle) {\n+            Double256Shuffle concreteShuffle = (Double256Shuffle) shuffle;\n+            return (Double256Shuffle) toBitsVector().rearrange(concreteShuffle.cast(LongVector.SPECIES_256))\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double256Shuffle wrapIndexes() {\n+            Long256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Double256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -853,1 +929,1 @@\n-            return new Double256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":121,"deletions":45,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Double512Shuffle)VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Double512Shuffle)VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Double512Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Double512Shuffle shuffleFromBytes(byte[] reorder) { return new Double512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Double512Shuffle shuffleFromArray(int[] indexes, int i) { return new Double512Shuffle(indexes, i); }\n+    Double512Shuffle shuffleFromArray(int[] indices, int i) { return new Double512Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Double> toShuffle() {\n-        return super.toShuffleTemplate(Double512Shuffle.class); \/\/ specialize\n+    public final Double512Shuffle toShuffle() {\n+        return (Double512Shuffle) toShuffle(vspecies(), false);\n@@ -795,1 +793,1 @@\n-        static final Class<Double> ETYPE = double.class; \/\/ used by the JVM\n+        static final Class<Long> ETYPE = long.class; \/\/ used by the JVM\n@@ -797,2 +795,4 @@\n-        Double512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double512Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -801,2 +801,2 @@\n-        public Double512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -805,2 +805,2 @@\n-        public Double512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Double512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -809,2 +809,2 @@\n-        public Double512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -814,0 +814,1 @@\n+        @ForceInline\n@@ -821,2 +822,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -829,2 +830,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Double512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double512Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+            return (Double512Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -835,6 +835,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long512Vector toBitsVector() {\n+            return (Long512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long512Vector toBitsVector0() {\n+            return ((Long512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -845,3 +846,2 @@\n-        public Double512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Double512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double512Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -850,0 +850,1 @@\n+        @Override\n@@ -851,0 +852,28 @@\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -852,8 +881,55 @@\n-        public Double512Shuffle rearrange(VectorShuffle<Double> shuffle) {\n-            Double512Shuffle s = (Double512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Double512Mask laneIsValid() {\n+            return (Double512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double512Shuffle rearrange(VectorShuffle<Double> shuffle) {\n+            Double512Shuffle concreteShuffle = (Double512Shuffle) shuffle;\n+            return (Double512Shuffle) toBitsVector().rearrange(concreteShuffle.cast(LongVector.SPECIES_512))\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double512Shuffle wrapIndexes() {\n+            Long512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Double512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -861,1 +937,1 @@\n-            return new Double512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":121,"deletions":45,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Double64Shuffle)VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Double64Shuffle)VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Double64Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Double64Shuffle shuffleFromBytes(byte[] reorder) { return new Double64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Double64Shuffle shuffleFromArray(int[] indexes, int i) { return new Double64Shuffle(indexes, i); }\n+    Double64Shuffle shuffleFromArray(int[] indices, int i) { return new Double64Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Double> toShuffle() {\n-        return super.toShuffleTemplate(Double64Shuffle.class); \/\/ specialize\n+    public final Double64Shuffle toShuffle() {\n+        return (Double64Shuffle) toShuffle(vspecies(), false);\n@@ -781,1 +779,1 @@\n-        static final Class<Double> ETYPE = double.class; \/\/ used by the JVM\n+        static final Class<Long> ETYPE = long.class; \/\/ used by the JVM\n@@ -783,2 +781,4 @@\n-        Double64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double64Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -787,2 +787,2 @@\n-        public Double64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -791,2 +791,2 @@\n-        public Double64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Double64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -795,2 +795,2 @@\n-        public Double64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -800,0 +800,1 @@\n+        @ForceInline\n@@ -807,2 +808,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -815,2 +816,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Double64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double64Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+            return (Double64Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -821,6 +821,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long64Vector toBitsVector() {\n+            return (Long64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long64Vector toBitsVector0() {\n+            return ((Long64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -831,3 +832,2 @@\n-        public Double64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Double64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Double64Shuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -836,0 +836,1 @@\n+        @Override\n@@ -837,0 +838,28 @@\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -838,8 +867,55 @@\n-        public Double64Shuffle rearrange(VectorShuffle<Double> shuffle) {\n-            Double64Shuffle s = (Double64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Double64Mask laneIsValid() {\n+            return (Double64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double64Shuffle rearrange(VectorShuffle<Double> shuffle) {\n+            Double64Shuffle concreteShuffle = (Double64Shuffle) shuffle;\n+            return (Double64Shuffle) toBitsVector().rearrange(concreteShuffle.cast(LongVector.SPECIES_64))\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Double64Shuffle wrapIndexes() {\n+            Long64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Double64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -847,1 +923,1 @@\n-            return new Double64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":121,"deletions":45,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (DoubleMaxShuffle)VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (DoubleMaxShuffle)VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (DoubleMaxShuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    DoubleMaxShuffle shuffleFromBytes(byte[] reorder) { return new DoubleMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    DoubleMaxShuffle shuffleFromArray(int[] indexes, int i) { return new DoubleMaxShuffle(indexes, i); }\n+    DoubleMaxShuffle shuffleFromArray(int[] indices, int i) { return new DoubleMaxShuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Double> toShuffle() {\n-        return super.toShuffleTemplate(DoubleMaxShuffle.class); \/\/ specialize\n+    public final DoubleMaxShuffle toShuffle() {\n+        return (DoubleMaxShuffle) toShuffle(vspecies(), false);\n@@ -780,1 +778,1 @@\n-        static final Class<Double> ETYPE = double.class; \/\/ used by the JVM\n+        static final Class<Long> ETYPE = long.class; \/\/ used by the JVM\n@@ -782,2 +780,4 @@\n-        DoubleMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        DoubleMaxShuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -786,2 +786,2 @@\n-        public DoubleMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        DoubleMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -790,2 +790,2 @@\n-        public DoubleMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        DoubleMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -794,2 +794,2 @@\n-        public DoubleMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -799,0 +799,1 @@\n+        @ForceInline\n@@ -806,2 +807,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -814,2 +815,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, DoubleMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((DoubleMaxVector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+            return (DoubleMaxVector) toBitsVector().castShape(vspecies(), 0);\n@@ -820,6 +820,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        LongMaxVector toBitsVector() {\n+            return (LongMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        LongMaxVector toBitsVector0() {\n+            return ((LongMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -830,3 +831,2 @@\n-        public DoubleMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, DoubleMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((DoubleMaxShuffle)(((AbstractShuffle<Double>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -835,0 +835,1 @@\n+        @Override\n@@ -836,0 +837,28 @@\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -837,8 +866,55 @@\n-        public DoubleMaxShuffle rearrange(VectorShuffle<Double> shuffle) {\n-            DoubleMaxShuffle s = (DoubleMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final DoubleMaxMask laneIsValid() {\n+            return (DoubleMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final DoubleMaxShuffle rearrange(VectorShuffle<Double> shuffle) {\n+            DoubleMaxShuffle concreteShuffle = (DoubleMaxShuffle) shuffle;\n+            return (DoubleMaxShuffle) toBitsVector().rearrange(concreteShuffle.cast(LongVector.SPECIES_MAX))\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final DoubleMaxShuffle wrapIndexes() {\n+            LongMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (LongMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (LongMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (DoubleMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -846,1 +922,1 @@\n-            return new DoubleMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":121,"deletions":45,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -969,1 +969,1 @@\n-   \/**\n+    \/**\n@@ -2141,3 +2141,4 @@\n-        VectorShuffle<Double> iota = iotaShuffle();\n-        VectorMask<Double> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = LongVector.broadcast((LongVector.LongSpecies) vspecies().asIntegral(), (long)(length() - origin));\n+        VectorMask<Double> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Double> iota = iotaShuffle(origin, 1, true);\n@@ -2171,3 +2172,4 @@\n-        VectorShuffle<Double> iota = iotaShuffle();\n-        VectorMask<Double> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = LongVector.broadcast((LongVector.LongSpecies) vspecies().asIntegral(), (long)(length() - origin));\n+        VectorMask<Double> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Double> iota = iotaShuffle(origin, 1, true);\n@@ -2192,4 +2194,4 @@\n-        VectorShuffle<Double> iota = iotaShuffle();\n-        VectorMask<Double> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((double)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = LongVector.broadcast((LongVector.LongSpecies) vspecies().asIntegral(), (long)origin);\n+        VectorMask<Double> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Double> iota = iotaShuffle(-origin, 1, true);\n@@ -2232,4 +2234,4 @@\n-        VectorShuffle<Double> iota = iotaShuffle();\n-        VectorMask<Double> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((double)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = LongVector.broadcast((LongVector.LongSpecies) vspecies().asIntegral(), (long)origin);\n+        VectorMask<Double> blendMask = iotaVector.compare(VectorOperators.GE, filter).cast(vspecies());\n+        AbstractShuffle<Double> iota = iotaShuffle(-origin, 1, true);\n@@ -2258,2 +2260,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2262,1 +2262,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2264,1 +2264,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2287,2 +2287,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2291,1 +2289,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2293,1 +2291,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2314,2 +2312,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2319,1 +2315,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2321,1 +2317,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2327,1 +2323,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2329,1 +2325,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2335,0 +2331,1 @@\n+    @Override\n@@ -2336,8 +2333,2 @@\n-    private final\n-    VectorShuffle<Double> toShuffle0(DoubleSpecies dsp) {\n-        double[] a = toArray();\n-        int[] sa = new int[a.length];\n-        for (int i = 0; i < a.length; i++) {\n-            sa[i] = (int) a[i];\n-        }\n-        return VectorShuffle.fromArray(dsp, sa, 0);\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n@@ -2346,1 +2337,0 @@\n-    \/*package-private*\/\n@@ -2348,8 +2338,11 @@\n-    final\n-    VectorShuffle<Double> toShuffleTemplate(Class<?> shuffleType) {\n-        DoubleSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), double.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     DoubleVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        LongVector idx = convert(VectorOperators.D2L, 0).reinterpretAsLongs();\n+        LongVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            LongVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Long> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -3734,0 +3727,1 @@\n+                Class<? extends AbstractShuffle<Double>> shuffleType,\n@@ -3736,1 +3730,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -4022,0 +4016,1 @@\n+                            Double64Vector.Double64Shuffle.class,\n@@ -4029,0 +4024,1 @@\n+                            Double128Vector.Double128Shuffle.class,\n@@ -4036,0 +4032,1 @@\n+                            Double256Vector.Double256Shuffle.class,\n@@ -4043,0 +4040,1 @@\n+                            Double512Vector.Double512Shuffle.class,\n@@ -4050,0 +4048,1 @@\n+                            DoubleMaxVector.DoubleMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":46,"deletions":47,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Float128Shuffle)VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Float128Shuffle)VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Float128Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Float128Shuffle shuffleFromBytes(byte[] reorder) { return new Float128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Float128Shuffle shuffleFromArray(int[] indexes, int i) { return new Float128Shuffle(indexes, i); }\n+    Float128Shuffle shuffleFromArray(int[] indices, int i) { return new Float128Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Float> toShuffle() {\n-        return super.toShuffleTemplate(Float128Shuffle.class); \/\/ specialize\n+    public final Float128Shuffle toShuffle() {\n+        return (Float128Shuffle) toShuffle(vspecies(), false);\n@@ -787,1 +785,1 @@\n-        static final Class<Float> ETYPE = float.class; \/\/ used by the JVM\n+        static final Class<Integer> ETYPE = int.class; \/\/ used by the JVM\n@@ -789,2 +787,4 @@\n-        Float128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float128Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -793,2 +793,2 @@\n-        public Float128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -797,2 +797,2 @@\n-        public Float128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Float128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -801,2 +801,2 @@\n-        public Float128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -806,0 +806,1 @@\n+        @ForceInline\n@@ -813,2 +814,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -821,2 +822,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Float128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float128Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+            return (Float128Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -827,6 +827,19 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int128Vector toBitsVector() {\n+            return (Int128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int128Vector toBitsVector0() {\n+            return ((Int128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n@@ -837,3 +850,11 @@\n-        public Float128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Float128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float128Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        public final Float128Mask laneIsValid() {\n+            return (Float128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Float128Shuffle rearrange(VectorShuffle<Float> shuffle) {\n+            Float128Shuffle concreteShuffle = (Float128Shuffle) shuffle;\n+            return (Float128Shuffle) toBitsVector().rearrange(concreteShuffle.cast(IntVector.SPECIES_128))\n+                    .toShuffle(vspecies(), false);\n@@ -844,8 +865,39 @@\n-        public Float128Shuffle rearrange(VectorShuffle<Float> shuffle) {\n-            Float128Shuffle s = (Float128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Float128Shuffle wrapIndexes() {\n+            Int128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Float128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -853,1 +905,1 @@\n-            return new Float128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":97,"deletions":45,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Float256Shuffle)VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Float256Shuffle)VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Float256Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Float256Shuffle shuffleFromBytes(byte[] reorder) { return new Float256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Float256Shuffle shuffleFromArray(int[] indexes, int i) { return new Float256Shuffle(indexes, i); }\n+    Float256Shuffle shuffleFromArray(int[] indices, int i) { return new Float256Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Float> toShuffle() {\n-        return super.toShuffleTemplate(Float256Shuffle.class); \/\/ specialize\n+    public final Float256Shuffle toShuffle() {\n+        return (Float256Shuffle) toShuffle(vspecies(), false);\n@@ -795,1 +793,1 @@\n-        static final Class<Float> ETYPE = float.class; \/\/ used by the JVM\n+        static final Class<Integer> ETYPE = int.class; \/\/ used by the JVM\n@@ -797,2 +795,4 @@\n-        Float256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float256Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -801,2 +801,2 @@\n-        public Float256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -805,2 +805,2 @@\n-        public Float256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Float256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -809,2 +809,2 @@\n-        public Float256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -814,0 +814,1 @@\n+        @ForceInline\n@@ -821,2 +822,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -829,2 +830,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Float256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float256Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+            return (Float256Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -835,6 +835,19 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int256Vector toBitsVector() {\n+            return (Int256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int256Vector toBitsVector0() {\n+            return ((Int256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n@@ -845,3 +858,11 @@\n-        public Float256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Float256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float256Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        public final Float256Mask laneIsValid() {\n+            return (Float256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Float256Shuffle rearrange(VectorShuffle<Float> shuffle) {\n+            Float256Shuffle concreteShuffle = (Float256Shuffle) shuffle;\n+            return (Float256Shuffle) toBitsVector().rearrange(concreteShuffle.cast(IntVector.SPECIES_256))\n+                    .toShuffle(vspecies(), false);\n@@ -852,8 +873,39 @@\n-        public Float256Shuffle rearrange(VectorShuffle<Float> shuffle) {\n-            Float256Shuffle s = (Float256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Float256Shuffle wrapIndexes() {\n+            Int256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Float256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -861,1 +913,1 @@\n-            return new Float256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":97,"deletions":45,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Float512Shuffle)VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Float512Shuffle)VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Float512Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Float512Shuffle shuffleFromBytes(byte[] reorder) { return new Float512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Float512Shuffle shuffleFromArray(int[] indexes, int i) { return new Float512Shuffle(indexes, i); }\n+    Float512Shuffle shuffleFromArray(int[] indices, int i) { return new Float512Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Float> toShuffle() {\n-        return super.toShuffleTemplate(Float512Shuffle.class); \/\/ specialize\n+    public final Float512Shuffle toShuffle() {\n+        return (Float512Shuffle) toShuffle(vspecies(), false);\n@@ -811,1 +809,1 @@\n-        static final Class<Float> ETYPE = float.class; \/\/ used by the JVM\n+        static final Class<Integer> ETYPE = int.class; \/\/ used by the JVM\n@@ -813,2 +811,4 @@\n-        Float512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float512Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -817,2 +817,2 @@\n-        public Float512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -821,2 +821,2 @@\n-        public Float512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Float512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -825,2 +825,2 @@\n-        public Float512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -830,0 +830,1 @@\n+        @ForceInline\n@@ -837,2 +838,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -845,2 +846,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Float512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float512Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+            return (Float512Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -851,6 +851,19 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int512Vector toBitsVector() {\n+            return (Int512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int512Vector toBitsVector0() {\n+            return ((Int512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n@@ -861,3 +874,11 @@\n-        public Float512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Float512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float512Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        public final Float512Mask laneIsValid() {\n+            return (Float512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Float512Shuffle rearrange(VectorShuffle<Float> shuffle) {\n+            Float512Shuffle concreteShuffle = (Float512Shuffle) shuffle;\n+            return (Float512Shuffle) toBitsVector().rearrange(concreteShuffle.cast(IntVector.SPECIES_512))\n+                    .toShuffle(vspecies(), false);\n@@ -868,8 +889,39 @@\n-        public Float512Shuffle rearrange(VectorShuffle<Float> shuffle) {\n-            Float512Shuffle s = (Float512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Float512Shuffle wrapIndexes() {\n+            Int512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Float512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -877,1 +929,1 @@\n-            return new Float512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":97,"deletions":45,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Float64Shuffle)VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Float64Shuffle)VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Float64Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Float64Shuffle shuffleFromBytes(byte[] reorder) { return new Float64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Float64Shuffle shuffleFromArray(int[] indexes, int i) { return new Float64Shuffle(indexes, i); }\n+    Float64Shuffle shuffleFromArray(int[] indices, int i) { return new Float64Shuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Float> toShuffle() {\n-        return super.toShuffleTemplate(Float64Shuffle.class); \/\/ specialize\n+    public final Float64Shuffle toShuffle() {\n+        return (Float64Shuffle) toShuffle(vspecies(), false);\n@@ -783,1 +781,1 @@\n-        static final Class<Float> ETYPE = float.class; \/\/ used by the JVM\n+        static final Class<Integer> ETYPE = int.class; \/\/ used by the JVM\n@@ -785,2 +783,4 @@\n-        Float64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float64Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -789,2 +789,2 @@\n-        public Float64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -793,2 +793,2 @@\n-        public Float64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Float64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -797,2 +797,2 @@\n-        public Float64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -802,0 +802,1 @@\n+        @ForceInline\n@@ -809,2 +810,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -817,2 +818,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Float64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float64Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+            return (Float64Vector) toBitsVector().castShape(vspecies(), 0);\n@@ -823,6 +823,19 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int64Vector toBitsVector() {\n+            return (Int64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int64Vector toBitsVector0() {\n+            return ((Int64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n@@ -833,3 +846,11 @@\n-        public Float64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Float64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Float64Shuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        public final Float64Mask laneIsValid() {\n+            return (Float64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Float64Shuffle rearrange(VectorShuffle<Float> shuffle) {\n+            Float64Shuffle concreteShuffle = (Float64Shuffle) shuffle;\n+            return (Float64Shuffle) toBitsVector().rearrange(concreteShuffle.cast(IntVector.SPECIES_64))\n+                    .toShuffle(vspecies(), false);\n@@ -840,8 +861,39 @@\n-        public Float64Shuffle rearrange(VectorShuffle<Float> shuffle) {\n-            Float64Shuffle s = (Float64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Float64Shuffle wrapIndexes() {\n+            Int64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Float64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -849,1 +901,1 @@\n-            return new Float64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":97,"deletions":45,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (FloatMaxShuffle)VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (FloatMaxShuffle)VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (FloatMaxShuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    FloatMaxShuffle shuffleFromBytes(byte[] reorder) { return new FloatMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    FloatMaxShuffle shuffleFromArray(int[] indexes, int i) { return new FloatMaxShuffle(indexes, i); }\n+    FloatMaxShuffle shuffleFromArray(int[] indices, int i) { return new FloatMaxShuffle(indices, i); }\n@@ -347,0 +338,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n+    }\n+\n+    @Override\n@@ -348,2 +346,2 @@\n-    public VectorShuffle<Float> toShuffle() {\n-        return super.toShuffleTemplate(FloatMaxShuffle.class); \/\/ specialize\n+    public final FloatMaxShuffle toShuffle() {\n+        return (FloatMaxShuffle) toShuffle(vspecies(), false);\n@@ -780,1 +778,1 @@\n-        static final Class<Float> ETYPE = float.class; \/\/ used by the JVM\n+        static final Class<Integer> ETYPE = int.class; \/\/ used by the JVM\n@@ -782,2 +780,4 @@\n-        FloatMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        FloatMaxShuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -786,2 +786,2 @@\n-        public FloatMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        FloatMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -790,2 +790,2 @@\n-        public FloatMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        FloatMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -794,2 +794,2 @@\n-        public FloatMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -799,0 +799,1 @@\n+        @ForceInline\n@@ -806,2 +807,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -814,2 +815,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, FloatMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((FloatMaxVector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+            return (FloatMaxVector) toBitsVector().castShape(vspecies(), 0);\n@@ -820,6 +820,19 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        IntMaxVector toBitsVector() {\n+            return (IntMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        IntMaxVector toBitsVector0() {\n+            return ((IntMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n@@ -830,3 +843,11 @@\n-        public FloatMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, FloatMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((FloatMaxShuffle)(((AbstractShuffle<Float>)(s)).wrapIndexesTemplate())));\n+        public final FloatMaxMask laneIsValid() {\n+            return (FloatMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final FloatMaxShuffle rearrange(VectorShuffle<Float> shuffle) {\n+            FloatMaxShuffle concreteShuffle = (FloatMaxShuffle) shuffle;\n+            return (FloatMaxShuffle) toBitsVector().rearrange(concreteShuffle.cast(IntVector.SPECIES_MAX))\n+                    .toShuffle(vspecies(), false);\n@@ -837,8 +858,39 @@\n-        public FloatMaxShuffle rearrange(VectorShuffle<Float> shuffle) {\n-            FloatMaxShuffle s = (FloatMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final FloatMaxShuffle wrapIndexes() {\n+            IntMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (IntMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (IntMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (FloatMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -846,1 +898,1 @@\n-            return new FloatMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":97,"deletions":45,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -969,1 +969,1 @@\n-   \/**\n+    \/**\n@@ -2153,3 +2153,4 @@\n-        VectorShuffle<Float> iota = iotaShuffle();\n-        VectorMask<Float> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = IntVector.broadcast((IntVector.IntSpecies) vspecies().asIntegral(), (int)(length() - origin));\n+        VectorMask<Float> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Float> iota = iotaShuffle(origin, 1, true);\n@@ -2183,3 +2184,4 @@\n-        VectorShuffle<Float> iota = iotaShuffle();\n-        VectorMask<Float> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = IntVector.broadcast((IntVector.IntSpecies) vspecies().asIntegral(), (int)(length() - origin));\n+        VectorMask<Float> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Float> iota = iotaShuffle(origin, 1, true);\n@@ -2204,4 +2206,4 @@\n-        VectorShuffle<Float> iota = iotaShuffle();\n-        VectorMask<Float> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((float)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = IntVector.broadcast((IntVector.IntSpecies) vspecies().asIntegral(), (int)origin);\n+        VectorMask<Float> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter).cast(vspecies());\n+        AbstractShuffle<Float> iota = iotaShuffle(-origin, 1, true);\n@@ -2244,4 +2246,4 @@\n-        VectorShuffle<Float> iota = iotaShuffle();\n-        VectorMask<Float> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((float)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = IntVector.broadcast((IntVector.IntSpecies) vspecies().asIntegral(), (int)origin);\n+        VectorMask<Float> blendMask = iotaVector.compare(VectorOperators.GE, filter).cast(vspecies());\n+        AbstractShuffle<Float> iota = iotaShuffle(-origin, 1, true);\n@@ -2270,2 +2272,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2274,1 +2274,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2276,1 +2276,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2299,2 +2299,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2303,1 +2301,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2305,1 +2303,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2326,2 +2324,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2331,1 +2327,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2333,1 +2329,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2339,1 +2335,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2341,1 +2337,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2347,0 +2343,1 @@\n+    @Override\n@@ -2348,8 +2345,2 @@\n-    private final\n-    VectorShuffle<Float> toShuffle0(FloatSpecies dsp) {\n-        float[] a = toArray();\n-        int[] sa = new int[a.length];\n-        for (int i = 0; i < a.length; i++) {\n-            sa[i] = (int) a[i];\n-        }\n-        return VectorShuffle.fromArray(dsp, sa, 0);\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        throw new AssertionError();\n@@ -2358,1 +2349,0 @@\n-    \/*package-private*\/\n@@ -2360,8 +2350,11 @@\n-    final\n-    VectorShuffle<Float> toShuffleTemplate(Class<?> shuffleType) {\n-        FloatSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), float.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     FloatVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        IntVector idx = convert(VectorOperators.F2I, 0).reinterpretAsInts();\n+        IntVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            IntVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Integer> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -3684,0 +3677,1 @@\n+                Class<? extends AbstractShuffle<Float>> shuffleType,\n@@ -3686,1 +3680,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -3972,0 +3966,1 @@\n+                            Float64Vector.Float64Shuffle.class,\n@@ -3979,0 +3974,1 @@\n+                            Float128Vector.Float128Shuffle.class,\n@@ -3986,0 +3982,1 @@\n+                            Float256Vector.Float256Shuffle.class,\n@@ -3993,0 +3990,1 @@\n+                            Float512Vector.Float512Shuffle.class,\n@@ -4000,0 +3998,1 @@\n+                            FloatMaxVector.FloatMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":46,"deletions":47,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Int128Shuffle)VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Int128Shuffle)VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Int128Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Int128Shuffle shuffleFromBytes(byte[] reorder) { return new Int128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Int128Shuffle shuffleFromArray(int[] indexes, int i) { return new Int128Shuffle(indexes, i); }\n+    Int128Shuffle shuffleFromArray(int[] indices, int i) { return new Int128Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Integer> toShuffle() {\n-        return super.toShuffleTemplate(Int128Shuffle.class); \/\/ specialize\n+    public final Int128Shuffle toShuffle() {\n+        return (Int128Shuffle) toShuffle(vspecies(), false);\n@@ -800,2 +798,4 @@\n-        Int128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int128Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -804,2 +804,2 @@\n-        public Int128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -808,2 +808,2 @@\n-        public Int128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Int128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -812,2 +812,2 @@\n-        public Int128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -817,0 +817,1 @@\n+        @ForceInline\n@@ -824,2 +825,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -832,2 +833,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Int128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int128Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -838,6 +838,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int128Vector toBitsVector() {\n+            return (Int128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int128Vector toBitsVector0() {\n+            return ((Int128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -848,3 +849,2 @@\n-        public Int128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Int128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int128Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -853,0 +853,1 @@\n+        @Override\n@@ -854,0 +855,4 @@\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n+        }\n+\n@@ -855,8 +860,55 @@\n-        public Int128Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n-            Int128Shuffle s = (Int128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Int128Mask laneIsValid() {\n+            return (Int128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int128Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n+            Int128Shuffle concreteShuffle = (Int128Shuffle) shuffle;\n+            return (Int128Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int128Shuffle wrapIndexes() {\n+            Int128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Int128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -864,1 +916,1 @@\n-            return new Int128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Int256Shuffle)VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Int256Shuffle)VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Int256Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Int256Shuffle shuffleFromBytes(byte[] reorder) { return new Int256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Int256Shuffle shuffleFromArray(int[] indexes, int i) { return new Int256Shuffle(indexes, i); }\n+    Int256Shuffle shuffleFromArray(int[] indices, int i) { return new Int256Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Integer> toShuffle() {\n-        return super.toShuffleTemplate(Int256Shuffle.class); \/\/ specialize\n+    public final Int256Shuffle toShuffle() {\n+        return (Int256Shuffle) toShuffle(vspecies(), false);\n@@ -808,2 +806,4 @@\n-        Int256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int256Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -812,2 +812,2 @@\n-        public Int256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -816,2 +816,2 @@\n-        public Int256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Int256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -820,2 +820,2 @@\n-        public Int256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -825,0 +825,1 @@\n+        @ForceInline\n@@ -832,2 +833,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -840,2 +841,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Int256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int256Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -846,6 +846,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int256Vector toBitsVector() {\n+            return (Int256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int256Vector toBitsVector0() {\n+            return ((Int256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -856,3 +857,2 @@\n-        public Int256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Int256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int256Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -861,0 +861,1 @@\n+        @Override\n@@ -862,0 +863,4 @@\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n+        }\n+\n@@ -863,8 +868,55 @@\n-        public Int256Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n-            Int256Shuffle s = (Int256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Int256Mask laneIsValid() {\n+            return (Int256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int256Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n+            Int256Shuffle concreteShuffle = (Int256Shuffle) shuffle;\n+            return (Int256Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int256Shuffle wrapIndexes() {\n+            Int256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Int256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -872,1 +924,1 @@\n-            return new Int256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Int512Shuffle)VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Int512Shuffle)VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Int512Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Int512Shuffle shuffleFromBytes(byte[] reorder) { return new Int512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Int512Shuffle shuffleFromArray(int[] indexes, int i) { return new Int512Shuffle(indexes, i); }\n+    Int512Shuffle shuffleFromArray(int[] indices, int i) { return new Int512Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Integer> toShuffle() {\n-        return super.toShuffleTemplate(Int512Shuffle.class); \/\/ specialize\n+    public final Int512Shuffle toShuffle() {\n+        return (Int512Shuffle) toShuffle(vspecies(), false);\n@@ -824,2 +822,4 @@\n-        Int512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int512Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -828,2 +828,2 @@\n-        public Int512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -832,2 +832,2 @@\n-        public Int512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Int512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -836,2 +836,2 @@\n-        public Int512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -841,0 +841,1 @@\n+        @ForceInline\n@@ -848,2 +849,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -856,2 +857,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Int512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int512Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -862,6 +862,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int512Vector toBitsVector() {\n+            return (Int512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int512Vector toBitsVector0() {\n+            return ((Int512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -872,3 +873,2 @@\n-        public Int512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Int512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int512Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -877,0 +877,1 @@\n+        @Override\n@@ -878,0 +879,4 @@\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n+        }\n+\n@@ -879,8 +884,55 @@\n-        public Int512Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n-            Int512Shuffle s = (Int512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Int512Mask laneIsValid() {\n+            return (Int512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int512Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n+            Int512Shuffle concreteShuffle = (Int512Shuffle) shuffle;\n+            return (Int512Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int512Shuffle wrapIndexes() {\n+            Int512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Int512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -888,1 +940,1 @@\n-            return new Int512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Int64Shuffle)VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Int64Shuffle)VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Int64Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    Int64Shuffle shuffleFromBytes(byte[] reorder) { return new Int64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Int64Shuffle shuffleFromArray(int[] indexes, int i) { return new Int64Shuffle(indexes, i); }\n+    Int64Shuffle shuffleFromArray(int[] indices, int i) { return new Int64Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Integer> toShuffle() {\n-        return super.toShuffleTemplate(Int64Shuffle.class); \/\/ specialize\n+    public final Int64Shuffle toShuffle() {\n+        return (Int64Shuffle) toShuffle(vspecies(), false);\n@@ -796,2 +794,4 @@\n-        Int64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int64Shuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -800,2 +800,2 @@\n-        public Int64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -804,2 +804,2 @@\n-        public Int64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Int64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -808,2 +808,2 @@\n-        public Int64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -813,0 +813,1 @@\n+        @ForceInline\n@@ -820,2 +821,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -828,2 +829,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Int64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int64Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -834,6 +834,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Int64Vector toBitsVector() {\n+            return (Int64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Int64Vector toBitsVector0() {\n+            return ((Int64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -844,3 +845,2 @@\n-        public Int64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Int64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Int64Shuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -849,0 +849,1 @@\n+        @Override\n@@ -850,0 +851,4 @@\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n+        }\n+\n@@ -851,8 +856,55 @@\n-        public Int64Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n-            Int64Shuffle s = (Int64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Int64Mask laneIsValid() {\n+            return (Int64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int64Shuffle rearrange(VectorShuffle<Integer> shuffle) {\n+            Int64Shuffle concreteShuffle = (Int64Shuffle) shuffle;\n+            return (Int64Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Int64Shuffle wrapIndexes() {\n+            Int64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Int64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Int64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Int64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -860,1 +912,1 @@\n-            return new Int64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (IntMaxShuffle)VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (IntMaxShuffle)VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (IntMaxShuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -157,5 +152,1 @@\n-    IntMaxShuffle shuffleFromBytes(byte[] reorder) { return new IntMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    IntMaxShuffle shuffleFromArray(int[] indexes, int i) { return new IntMaxShuffle(indexes, i); }\n+    IntMaxShuffle shuffleFromArray(int[] indices, int i) { return new IntMaxShuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Integer> toShuffle() {\n-        return super.toShuffleTemplate(IntMaxShuffle.class); \/\/ specialize\n+    public final IntMaxShuffle toShuffle() {\n+        return (IntMaxShuffle) toShuffle(vspecies(), false);\n@@ -805,2 +803,4 @@\n-        IntMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        IntMaxShuffle(int[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -809,2 +809,2 @@\n-        public IntMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        IntMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -813,2 +813,2 @@\n-        public IntMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        IntMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -817,2 +817,2 @@\n-        public IntMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        int[] indices() {\n+            return (int[])getPayload();\n@@ -822,0 +822,1 @@\n+        @ForceInline\n@@ -829,2 +830,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Integer.MAX_VALUE);\n+            assert(Integer.MIN_VALUE <= -VLENGTH);\n@@ -837,2 +838,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, IntMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((IntMaxVector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -843,6 +843,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        IntMaxVector toBitsVector() {\n+            return (IntMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        IntMaxVector toBitsVector0() {\n+            return ((IntMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -853,3 +854,2 @@\n-        public IntMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, IntMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((IntMaxShuffle)(((AbstractShuffle<Integer>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -858,0 +858,1 @@\n+        @Override\n@@ -859,0 +860,4 @@\n+        public void intoArray(int[] a, int offset) {\n+            toBitsVector().intoArray(a, offset);\n+        }\n+\n@@ -860,8 +865,55 @@\n-        public IntMaxShuffle rearrange(VectorShuffle<Integer> shuffle) {\n-            IntMaxShuffle s = (IntMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final IntMaxMask laneIsValid() {\n+            return (IntMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final IntMaxShuffle rearrange(VectorShuffle<Integer> shuffle) {\n+            IntMaxShuffle concreteShuffle = (IntMaxShuffle) shuffle;\n+            return (IntMaxShuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final IntMaxShuffle wrapIndexes() {\n+            IntMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (IntMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (IntMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (IntMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static int[] prepare(int[] indices, int offset) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static int[] prepare(IntUnaryOperator f) {\n+            int[] a = new int[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (int)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(int[] indices) {\n+            int length = indices.length;\n+            for (int si : indices) {\n+                if (si >= (int)length || si < (int)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -869,1 +921,1 @@\n-            return new IntMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -1102,1 +1102,1 @@\n-   \/**\n+    \/**\n@@ -2296,3 +2296,4 @@\n-        VectorShuffle<Integer> iota = iotaShuffle();\n-        VectorMask<Integer> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = broadcast((int)(length() - origin));\n+        VectorMask<Integer> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Integer> iota = iotaShuffle(origin, 1, true);\n@@ -2326,3 +2327,4 @@\n-        VectorShuffle<Integer> iota = iotaShuffle();\n-        VectorMask<Integer> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = broadcast((int)(length() - origin));\n+        VectorMask<Integer> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Integer> iota = iotaShuffle(origin, 1, true);\n@@ -2347,4 +2349,4 @@\n-        VectorShuffle<Integer> iota = iotaShuffle();\n-        VectorMask<Integer> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((int)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = broadcast((int)origin);\n+        VectorMask<Integer> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter);\n+        AbstractShuffle<Integer> iota = iotaShuffle(-origin, 1, true);\n@@ -2387,4 +2389,4 @@\n-        VectorShuffle<Integer> iota = iotaShuffle();\n-        VectorMask<Integer> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((int)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        IntVector iotaVector = (IntVector) iotaShuffle().toBitsVector();\n+        IntVector filter = broadcast((int)origin);\n+        VectorMask<Integer> blendMask = iotaVector.compare(VectorOperators.GE, filter);\n+        AbstractShuffle<Integer> iota = iotaShuffle(-origin, 1, true);\n@@ -2413,2 +2415,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2417,1 +2417,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2419,1 +2419,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2442,2 +2442,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2446,1 +2444,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2448,1 +2446,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2469,2 +2467,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2474,1 +2470,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2476,1 +2472,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2482,1 +2478,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2484,1 +2480,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2490,0 +2486,1 @@\n+    @Override\n@@ -2491,2 +2488,2 @@\n-    private final\n-    VectorShuffle<Integer> toShuffle0(IntSpecies dsp) {\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        assert(dsp.length() == vspecies().length());\n@@ -2501,1 +2498,0 @@\n-    \/*package-private*\/\n@@ -2503,8 +2499,11 @@\n-    final\n-    VectorShuffle<Integer> toShuffleTemplate(Class<?> shuffleType) {\n-        IntSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), int.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     IntVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        IntVector idx = this;\n+        IntVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            IntVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Integer> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -3852,0 +3851,1 @@\n+                Class<? extends AbstractShuffle<Integer>> shuffleType,\n@@ -3854,1 +3854,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -4140,0 +4140,1 @@\n+                            Int64Vector.Int64Shuffle.class,\n@@ -4147,0 +4148,1 @@\n+                            Int128Vector.Int128Shuffle.class,\n@@ -4154,0 +4156,1 @@\n+                            Int256Vector.Int256Shuffle.class,\n@@ -4161,0 +4164,1 @@\n+                            Int512Vector.Int512Shuffle.class,\n@@ -4168,0 +4172,1 @@\n+                            IntMaxVector.IntMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":46,"deletions":41,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    @Override\n@@ -141,7 +142,1 @@\n-      if (wrap) {\n-        return (Long128Shuffle)VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Long128Shuffle)VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Long128Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -152,5 +147,1 @@\n-    Long128Shuffle shuffleFromBytes(byte[] reorder) { return new Long128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Long128Shuffle shuffleFromArray(int[] indexes, int i) { return new Long128Shuffle(indexes, i); }\n+    Long128Shuffle shuffleFromArray(int[] indices, int i) { return new Long128Shuffle(indices, i); }\n@@ -355,0 +346,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -356,2 +354,2 @@\n-    public VectorShuffle<Long> toShuffle() {\n-        return super.toShuffleTemplate(Long128Shuffle.class); \/\/ specialize\n+    public final Long128Shuffle toShuffle() {\n+        return (Long128Shuffle) toShuffle(vspecies(), false);\n@@ -786,2 +784,4 @@\n-        Long128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long128Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -790,2 +790,2 @@\n-        public Long128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -794,2 +794,2 @@\n-        public Long128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Long128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -798,2 +798,2 @@\n-        public Long128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -803,0 +803,1 @@\n+        @ForceInline\n@@ -810,2 +811,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -818,2 +819,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Long128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long128Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -824,6 +824,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long128Vector toBitsVector() {\n+            return (Long128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long128Vector toBitsVector0() {\n+            return ((Long128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -834,3 +841,41 @@\n-        public Long128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Long128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long128Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final Long128Mask laneIsValid() {\n+            return (Long128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Long128Shuffle rearrange(VectorShuffle<Long> shuffle) {\n+            Long128Shuffle concreteShuffle = (Long128Shuffle) shuffle;\n+            return (Long128Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n@@ -841,8 +886,39 @@\n-        public Long128Shuffle rearrange(VectorShuffle<Long> shuffle) {\n-            Long128Shuffle s = (Long128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Long128Shuffle wrapIndexes() {\n+            Long128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Long128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -850,1 +926,1 @@\n-            return new Long128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":120,"deletions":44,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    @Override\n@@ -141,7 +142,1 @@\n-      if (wrap) {\n-        return (Long256Shuffle)VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Long256Shuffle)VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Long256Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -152,5 +147,1 @@\n-    Long256Shuffle shuffleFromBytes(byte[] reorder) { return new Long256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Long256Shuffle shuffleFromArray(int[] indexes, int i) { return new Long256Shuffle(indexes, i); }\n+    Long256Shuffle shuffleFromArray(int[] indices, int i) { return new Long256Shuffle(indices, i); }\n@@ -355,0 +346,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -356,2 +354,2 @@\n-    public VectorShuffle<Long> toShuffle() {\n-        return super.toShuffleTemplate(Long256Shuffle.class); \/\/ specialize\n+    public final Long256Shuffle toShuffle() {\n+        return (Long256Shuffle) toShuffle(vspecies(), false);\n@@ -790,2 +788,4 @@\n-        Long256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long256Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -794,2 +794,2 @@\n-        public Long256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -798,2 +798,2 @@\n-        public Long256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Long256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -802,2 +802,2 @@\n-        public Long256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -807,0 +807,1 @@\n+        @ForceInline\n@@ -814,2 +815,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -822,2 +823,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Long256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long256Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -828,6 +828,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long256Vector toBitsVector() {\n+            return (Long256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long256Vector toBitsVector0() {\n+            return ((Long256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -838,3 +845,41 @@\n-        public Long256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Long256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long256Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final Long256Mask laneIsValid() {\n+            return (Long256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Long256Shuffle rearrange(VectorShuffle<Long> shuffle) {\n+            Long256Shuffle concreteShuffle = (Long256Shuffle) shuffle;\n+            return (Long256Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n@@ -845,8 +890,39 @@\n-        public Long256Shuffle rearrange(VectorShuffle<Long> shuffle) {\n-            Long256Shuffle s = (Long256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Long256Shuffle wrapIndexes() {\n+            Long256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Long256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -854,1 +930,1 @@\n-            return new Long256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":120,"deletions":44,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    @Override\n@@ -141,7 +142,1 @@\n-      if (wrap) {\n-        return (Long512Shuffle)VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Long512Shuffle)VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Long512Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -152,5 +147,1 @@\n-    Long512Shuffle shuffleFromBytes(byte[] reorder) { return new Long512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Long512Shuffle shuffleFromArray(int[] indexes, int i) { return new Long512Shuffle(indexes, i); }\n+    Long512Shuffle shuffleFromArray(int[] indices, int i) { return new Long512Shuffle(indices, i); }\n@@ -355,0 +346,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -356,2 +354,2 @@\n-    public VectorShuffle<Long> toShuffle() {\n-        return super.toShuffleTemplate(Long512Shuffle.class); \/\/ specialize\n+    public final Long512Shuffle toShuffle() {\n+        return (Long512Shuffle) toShuffle(vspecies(), false);\n@@ -798,2 +796,4 @@\n-        Long512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long512Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -802,2 +802,2 @@\n-        public Long512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -806,2 +806,2 @@\n-        public Long512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Long512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -810,2 +810,2 @@\n-        public Long512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -815,0 +815,1 @@\n+        @ForceInline\n@@ -822,2 +823,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -830,2 +831,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Long512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long512Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -836,6 +836,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long512Vector toBitsVector() {\n+            return (Long512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long512Vector toBitsVector0() {\n+            return ((Long512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -846,3 +853,41 @@\n-        public Long512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Long512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long512Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final Long512Mask laneIsValid() {\n+            return (Long512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Long512Shuffle rearrange(VectorShuffle<Long> shuffle) {\n+            Long512Shuffle concreteShuffle = (Long512Shuffle) shuffle;\n+            return (Long512Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n@@ -853,8 +898,39 @@\n-        public Long512Shuffle rearrange(VectorShuffle<Long> shuffle) {\n-            Long512Shuffle s = (Long512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Long512Shuffle wrapIndexes() {\n+            Long512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Long512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -862,1 +938,1 @@\n-            return new Long512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":120,"deletions":44,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    @Override\n@@ -141,7 +142,1 @@\n-      if (wrap) {\n-        return (Long64Shuffle)VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Long64Shuffle)VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Long64Shuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -152,5 +147,1 @@\n-    Long64Shuffle shuffleFromBytes(byte[] reorder) { return new Long64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Long64Shuffle shuffleFromArray(int[] indexes, int i) { return new Long64Shuffle(indexes, i); }\n+    Long64Shuffle shuffleFromArray(int[] indices, int i) { return new Long64Shuffle(indices, i); }\n@@ -355,0 +346,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -356,2 +354,2 @@\n-    public VectorShuffle<Long> toShuffle() {\n-        return super.toShuffleTemplate(Long64Shuffle.class); \/\/ specialize\n+    public final Long64Shuffle toShuffle() {\n+        return (Long64Shuffle) toShuffle(vspecies(), false);\n@@ -784,2 +782,4 @@\n-        Long64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long64Shuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -788,2 +788,2 @@\n-        public Long64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -792,2 +792,2 @@\n-        public Long64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Long64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -796,2 +796,2 @@\n-        public Long64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -801,0 +801,1 @@\n+        @ForceInline\n@@ -808,2 +809,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -816,2 +817,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Long64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long64Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -822,6 +822,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Long64Vector toBitsVector() {\n+            return (Long64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Long64Vector toBitsVector0() {\n+            return ((Long64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -832,3 +839,41 @@\n-        public Long64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Long64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Long64Shuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final Long64Mask laneIsValid() {\n+            return (Long64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Long64Shuffle rearrange(VectorShuffle<Long> shuffle) {\n+            Long64Shuffle concreteShuffle = (Long64Shuffle) shuffle;\n+            return (Long64Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n@@ -839,8 +884,39 @@\n-        public Long64Shuffle rearrange(VectorShuffle<Long> shuffle) {\n-            Long64Shuffle s = (Long64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final Long64Shuffle wrapIndexes() {\n+            Long64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Long64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Long64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Long64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -848,1 +924,1 @@\n-            return new Long64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":120,"deletions":44,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    @Override\n@@ -141,7 +142,1 @@\n-      if (wrap) {\n-        return (LongMaxShuffle)VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (LongMaxShuffle)VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (LongMaxShuffle) iotaShuffleTemplate(start, step, wrap);\n@@ -152,5 +147,1 @@\n-    LongMaxShuffle shuffleFromBytes(byte[] reorder) { return new LongMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    LongMaxShuffle shuffleFromArray(int[] indexes, int i) { return new LongMaxShuffle(indexes, i); }\n+    LongMaxShuffle shuffleFromArray(int[] indices, int i) { return new LongMaxShuffle(indices, i); }\n@@ -355,0 +346,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -356,2 +354,2 @@\n-    public VectorShuffle<Long> toShuffle() {\n-        return super.toShuffleTemplate(LongMaxShuffle.class); \/\/ specialize\n+    public final LongMaxShuffle toShuffle() {\n+        return (LongMaxShuffle) toShuffle(vspecies(), false);\n@@ -784,2 +782,4 @@\n-        LongMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        LongMaxShuffle(long[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -788,2 +788,2 @@\n-        public LongMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        LongMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -792,2 +792,2 @@\n-        public LongMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        LongMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -796,2 +796,2 @@\n-        public LongMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        long[] indices() {\n+            return (long[])getPayload();\n@@ -801,0 +801,1 @@\n+        @ForceInline\n@@ -808,2 +809,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Long.MAX_VALUE);\n+            assert(Long.MIN_VALUE <= -VLENGTH);\n@@ -816,2 +817,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, LongMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((LongMaxVector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -822,6 +822,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        LongMaxVector toBitsVector() {\n+            return (LongMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        LongMaxVector toBitsVector0() {\n+            return ((LongMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -832,3 +839,41 @@\n-        public LongMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, LongMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((LongMaxShuffle)(((AbstractShuffle<Long>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final LongMaxMask laneIsValid() {\n+            return (LongMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final LongMaxShuffle rearrange(VectorShuffle<Long> shuffle) {\n+            LongMaxShuffle concreteShuffle = (LongMaxShuffle) shuffle;\n+            return (LongMaxShuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n@@ -839,8 +884,39 @@\n-        public LongMaxShuffle rearrange(VectorShuffle<Long> shuffle) {\n-            LongMaxShuffle s = (LongMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final LongMaxShuffle wrapIndexes() {\n+            LongMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (LongMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (LongMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (LongMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static long[] prepare(int[] indices, int offset) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static long[] prepare(IntUnaryOperator f) {\n+            long[] a = new long[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (long)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(long[] indices) {\n+            int length = indices.length;\n+            for (long si : indices) {\n+                if (si >= (long)length || si < (long)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -848,1 +924,1 @@\n-            return new LongMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":120,"deletions":44,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -1015,1 +1015,1 @@\n-   \/**\n+    \/**\n@@ -2162,3 +2162,4 @@\n-        VectorShuffle<Long> iota = iotaShuffle();\n-        VectorMask<Long> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = broadcast((long)(length() - origin));\n+        VectorMask<Long> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Long> iota = iotaShuffle(origin, 1, true);\n@@ -2192,3 +2193,4 @@\n-        VectorShuffle<Long> iota = iotaShuffle();\n-        VectorMask<Long> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = broadcast((long)(length() - origin));\n+        VectorMask<Long> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Long> iota = iotaShuffle(origin, 1, true);\n@@ -2213,4 +2215,4 @@\n-        VectorShuffle<Long> iota = iotaShuffle();\n-        VectorMask<Long> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((long)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = broadcast((long)origin);\n+        VectorMask<Long> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter);\n+        AbstractShuffle<Long> iota = iotaShuffle(-origin, 1, true);\n@@ -2253,4 +2255,4 @@\n-        VectorShuffle<Long> iota = iotaShuffle();\n-        VectorMask<Long> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((long)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        LongVector iotaVector = (LongVector) iotaShuffle().toBitsVector();\n+        LongVector filter = broadcast((long)origin);\n+        VectorMask<Long> blendMask = iotaVector.compare(VectorOperators.GE, filter);\n+        AbstractShuffle<Long> iota = iotaShuffle(-origin, 1, true);\n@@ -2279,2 +2281,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2283,1 +2283,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2285,1 +2285,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2308,2 +2308,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2312,1 +2310,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2314,1 +2312,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2335,2 +2333,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2340,1 +2336,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2342,1 +2338,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2348,1 +2344,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2350,1 +2346,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2356,0 +2352,1 @@\n+    @Override\n@@ -2357,2 +2354,2 @@\n-    private final\n-    VectorShuffle<Long> toShuffle0(LongSpecies dsp) {\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        assert(dsp.length() == vspecies().length());\n@@ -2367,1 +2364,0 @@\n-    \/*package-private*\/\n@@ -2369,8 +2365,11 @@\n-    final\n-    VectorShuffle<Long> toShuffleTemplate(Class<?> shuffleType) {\n-        LongSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), long.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     LongVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        LongVector idx = this;\n+        LongVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            LongVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Long> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -3787,0 +3786,1 @@\n+                Class<? extends AbstractShuffle<Long>> shuffleType,\n@@ -3789,1 +3789,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -4066,0 +4066,1 @@\n+                            Long64Vector.Long64Shuffle.class,\n@@ -4073,0 +4074,1 @@\n+                            Long128Vector.Long128Shuffle.class,\n@@ -4080,0 +4082,1 @@\n+                            Long256Vector.Long256Shuffle.class,\n@@ -4087,0 +4090,1 @@\n+                            Long512Vector.Long512Shuffle.class,\n@@ -4094,0 +4098,1 @@\n+                            LongMaxVector.LongMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":46,"deletions":41,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Short128Shuffle)VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Short128Shuffle)VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Short128Shuffle) iotaShuffleTemplate((short) start, (short) step, wrap);\n@@ -157,5 +152,1 @@\n-    Short128Shuffle shuffleFromBytes(byte[] reorder) { return new Short128Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Short128Shuffle shuffleFromArray(int[] indexes, int i) { return new Short128Shuffle(indexes, i); }\n+    Short128Shuffle shuffleFromArray(int[] indices, int i) { return new Short128Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Short> toShuffle() {\n-        return super.toShuffleTemplate(Short128Shuffle.class); \/\/ specialize\n+    public final Short128Shuffle toShuffle() {\n+        return (Short128Shuffle) toShuffle(vspecies(), false);\n@@ -808,2 +806,4 @@\n-        Short128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short128Shuffle(short[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -812,2 +812,2 @@\n-        public Short128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short128Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -816,2 +816,2 @@\n-        public Short128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Short128Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -820,2 +820,2 @@\n-        public Short128Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        short[] indices() {\n+            return (short[])getPayload();\n@@ -825,0 +825,1 @@\n+        @ForceInline\n@@ -832,2 +833,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Short.MAX_VALUE);\n+            assert(Short.MIN_VALUE <= -VLENGTH);\n@@ -840,2 +841,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Short128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short128Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -846,6 +846,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Short128Vector toBitsVector() {\n+            return (Short128Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Short128Vector toBitsVector0() {\n+            return ((Short128Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -856,3 +857,2 @@\n-        public Short128Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Short128Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short128Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -861,0 +861,1 @@\n+        @Override\n@@ -862,0 +863,11 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_128;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+        }\n+\n@@ -863,8 +875,55 @@\n-        public Short128Shuffle rearrange(VectorShuffle<Short> shuffle) {\n-            Short128Shuffle s = (Short128Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Short128Mask laneIsValid() {\n+            return (Short128Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short128Shuffle rearrange(VectorShuffle<Short> shuffle) {\n+            Short128Shuffle concreteShuffle = (Short128Shuffle) shuffle;\n+            return (Short128Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short128Shuffle wrapIndexes() {\n+            Short128Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Short128Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Short128Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Short128Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static short[] prepare(int[] indices, int offset) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static short[] prepare(IntUnaryOperator f) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(short[] indices) {\n+            int length = indices.length;\n+            for (short si : indices) {\n+                if (si >= (short)length || si < (short)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -872,1 +931,1 @@\n-            return new Short128Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":103,"deletions":44,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Short256Shuffle)VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Short256Shuffle)VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Short256Shuffle) iotaShuffleTemplate((short) start, (short) step, wrap);\n@@ -157,5 +152,1 @@\n-    Short256Shuffle shuffleFromBytes(byte[] reorder) { return new Short256Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Short256Shuffle shuffleFromArray(int[] indexes, int i) { return new Short256Shuffle(indexes, i); }\n+    Short256Shuffle shuffleFromArray(int[] indices, int i) { return new Short256Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Short> toShuffle() {\n-        return super.toShuffleTemplate(Short256Shuffle.class); \/\/ specialize\n+    public final Short256Shuffle toShuffle() {\n+        return (Short256Shuffle) toShuffle(vspecies(), false);\n@@ -824,2 +822,4 @@\n-        Short256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short256Shuffle(short[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -828,2 +828,2 @@\n-        public Short256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short256Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -832,2 +832,2 @@\n-        public Short256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Short256Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -836,2 +836,2 @@\n-        public Short256Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        short[] indices() {\n+            return (short[])getPayload();\n@@ -841,0 +841,1 @@\n+        @ForceInline\n@@ -848,2 +849,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Short.MAX_VALUE);\n+            assert(Short.MIN_VALUE <= -VLENGTH);\n@@ -856,2 +857,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Short256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short256Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -862,6 +862,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Short256Vector toBitsVector() {\n+            return (Short256Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Short256Vector toBitsVector0() {\n+            return ((Short256Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -872,3 +873,2 @@\n-        public Short256Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Short256Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short256Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -877,0 +877,1 @@\n+        @Override\n@@ -878,0 +879,11 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_256;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+        }\n+\n@@ -879,8 +891,55 @@\n-        public Short256Shuffle rearrange(VectorShuffle<Short> shuffle) {\n-            Short256Shuffle s = (Short256Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Short256Mask laneIsValid() {\n+            return (Short256Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short256Shuffle rearrange(VectorShuffle<Short> shuffle) {\n+            Short256Shuffle concreteShuffle = (Short256Shuffle) shuffle;\n+            return (Short256Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short256Shuffle wrapIndexes() {\n+            Short256Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Short256Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Short256Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Short256Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static short[] prepare(int[] indices, int offset) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static short[] prepare(IntUnaryOperator f) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(short[] indices) {\n+            int length = indices.length;\n+            for (short si : indices) {\n+                if (si >= (short)length || si < (short)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -888,1 +947,1 @@\n-            return new Short256Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":103,"deletions":44,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Short512Shuffle)VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Short512Shuffle)VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Short512Shuffle) iotaShuffleTemplate((short) start, (short) step, wrap);\n@@ -157,5 +152,1 @@\n-    Short512Shuffle shuffleFromBytes(byte[] reorder) { return new Short512Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Short512Shuffle shuffleFromArray(int[] indexes, int i) { return new Short512Shuffle(indexes, i); }\n+    Short512Shuffle shuffleFromArray(int[] indices, int i) { return new Short512Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Short> toShuffle() {\n-        return super.toShuffleTemplate(Short512Shuffle.class); \/\/ specialize\n+    public final Short512Shuffle toShuffle() {\n+        return (Short512Shuffle) toShuffle(vspecies(), false);\n@@ -856,2 +854,4 @@\n-        Short512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short512Shuffle(short[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -860,2 +860,2 @@\n-        public Short512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short512Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -864,2 +864,2 @@\n-        public Short512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Short512Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -868,2 +868,2 @@\n-        public Short512Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        short[] indices() {\n+            return (short[])getPayload();\n@@ -873,0 +873,1 @@\n+        @ForceInline\n@@ -880,2 +881,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Short.MAX_VALUE);\n+            assert(Short.MIN_VALUE <= -VLENGTH);\n@@ -888,2 +889,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Short512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short512Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -894,6 +894,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Short512Vector toBitsVector() {\n+            return (Short512Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Short512Vector toBitsVector0() {\n+            return ((Short512Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -904,3 +905,2 @@\n-        public Short512Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Short512Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short512Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -909,0 +909,1 @@\n+        @Override\n@@ -910,0 +911,11 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_512;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+        }\n+\n@@ -911,8 +923,55 @@\n-        public Short512Shuffle rearrange(VectorShuffle<Short> shuffle) {\n-            Short512Shuffle s = (Short512Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Short512Mask laneIsValid() {\n+            return (Short512Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short512Shuffle rearrange(VectorShuffle<Short> shuffle) {\n+            Short512Shuffle concreteShuffle = (Short512Shuffle) shuffle;\n+            return (Short512Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short512Shuffle wrapIndexes() {\n+            Short512Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Short512Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Short512Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Short512Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static short[] prepare(int[] indices, int offset) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static short[] prepare(IntUnaryOperator f) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(short[] indices) {\n+            int length = indices.length;\n+            for (short si : indices) {\n+                if (si >= (short)length || si < (short)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -920,1 +979,1 @@\n-            return new Short512Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":103,"deletions":44,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (Short64Shuffle)VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (Short64Shuffle)VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (Short64Shuffle) iotaShuffleTemplate((short) start, (short) step, wrap);\n@@ -157,5 +152,1 @@\n-    Short64Shuffle shuffleFromBytes(byte[] reorder) { return new Short64Shuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    Short64Shuffle shuffleFromArray(int[] indexes, int i) { return new Short64Shuffle(indexes, i); }\n+    Short64Shuffle shuffleFromArray(int[] indices, int i) { return new Short64Shuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Short> toShuffle() {\n-        return super.toShuffleTemplate(Short64Shuffle.class); \/\/ specialize\n+    public final Short64Shuffle toShuffle() {\n+        return (Short64Shuffle) toShuffle(vspecies(), false);\n@@ -800,2 +798,4 @@\n-        Short64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short64Shuffle(short[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -804,2 +804,2 @@\n-        public Short64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short64Shuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -808,2 +808,2 @@\n-        public Short64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        Short64Shuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -812,2 +812,2 @@\n-        public Short64Shuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        short[] indices() {\n+            return (short[])getPayload();\n@@ -817,0 +817,1 @@\n+        @ForceInline\n@@ -824,2 +825,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Short.MAX_VALUE);\n+            assert(Short.MIN_VALUE <= -VLENGTH);\n@@ -832,2 +833,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, Short64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short64Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -838,6 +838,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        Short64Vector toBitsVector() {\n+            return (Short64Vector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        Short64Vector toBitsVector0() {\n+            return ((Short64Vector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -848,3 +849,2 @@\n-        public Short64Shuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, Short64Shuffle.class, this, VLENGTH,\n-                                                    (s) -> ((Short64Shuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -853,0 +853,1 @@\n+        @Override\n@@ -854,0 +855,11 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_64;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+        }\n+\n@@ -855,8 +867,55 @@\n-        public Short64Shuffle rearrange(VectorShuffle<Short> shuffle) {\n-            Short64Shuffle s = (Short64Shuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final Short64Mask laneIsValid() {\n+            return (Short64Mask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short64Shuffle rearrange(VectorShuffle<Short> shuffle) {\n+            Short64Shuffle concreteShuffle = (Short64Shuffle) shuffle;\n+            return (Short64Shuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final Short64Shuffle wrapIndexes() {\n+            Short64Vector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (Short64Vector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (Short64Vector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (Short64Shuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static short[] prepare(int[] indices, int offset) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static short[] prepare(IntUnaryOperator f) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(short[] indices) {\n+            int length = indices.length;\n+            for (short si : indices) {\n+                if (si >= (short)length || si < (short)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -864,1 +923,1 @@\n-            return new Short64Shuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":103,"deletions":44,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -146,7 +147,1 @@\n-      if (wrap) {\n-        return (ShortMaxShuffle)VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return (ShortMaxShuffle)VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+        return (ShortMaxShuffle) iotaShuffleTemplate((short) start, (short) step, wrap);\n@@ -157,5 +152,1 @@\n-    ShortMaxShuffle shuffleFromBytes(byte[] reorder) { return new ShortMaxShuffle(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    ShortMaxShuffle shuffleFromArray(int[] indexes, int i) { return new ShortMaxShuffle(indexes, i); }\n+    ShortMaxShuffle shuffleFromArray(int[] indices, int i) { return new ShortMaxShuffle(indices, i); }\n@@ -360,0 +351,7 @@\n+    @Override\n+    @ForceInline\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+        return bitsToShuffleTemplate(dsp);\n+    }\n+\n+    @Override\n@@ -361,2 +359,2 @@\n-    public VectorShuffle<Short> toShuffle() {\n-        return super.toShuffleTemplate(ShortMaxShuffle.class); \/\/ specialize\n+    public final ShortMaxShuffle toShuffle() {\n+        return (ShortMaxShuffle) toShuffle(vspecies(), false);\n@@ -794,2 +792,4 @@\n-        ShortMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        ShortMaxShuffle(short[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -798,2 +798,2 @@\n-        public ShortMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        ShortMaxShuffle(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -802,2 +802,2 @@\n-        public ShortMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        ShortMaxShuffle(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -806,2 +806,2 @@\n-        public ShortMaxShuffle(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        short[] indices() {\n+            return (short[])getPayload();\n@@ -811,0 +811,1 @@\n+        @ForceInline\n@@ -818,2 +819,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < Short.MAX_VALUE);\n+            assert(Short.MIN_VALUE <= -VLENGTH);\n@@ -826,2 +827,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, ShortMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((ShortMaxVector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -832,6 +832,7 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        ShortMaxVector toBitsVector() {\n+            return (ShortMaxVector) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        ShortMaxVector toBitsVector0() {\n+            return ((ShortMaxVector) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n@@ -842,3 +843,2 @@\n-        public ShortMaxShuffle wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, ShortMaxShuffle.class, this, VLENGTH,\n-                                                    (s) -> ((ShortMaxShuffle)(((AbstractShuffle<Short>)(s)).wrapIndexesTemplate())));\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -847,0 +847,1 @@\n+        @Override\n@@ -848,0 +849,11 @@\n+        public void intoArray(int[] a, int offset) {\n+            VectorSpecies<Integer> species = IntVector.SPECIES_MAX;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+        }\n+\n@@ -849,8 +861,55 @@\n-        public ShortMaxShuffle rearrange(VectorShuffle<Short> shuffle) {\n-            ShortMaxShuffle s = (ShortMaxShuffle) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        @ForceInline\n+        public final ShortMaxMask laneIsValid() {\n+            return (ShortMaxMask) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final ShortMaxShuffle rearrange(VectorShuffle<Short> shuffle) {\n+            ShortMaxShuffle concreteShuffle = (ShortMaxShuffle) shuffle;\n+            return (ShortMaxShuffle) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final ShortMaxShuffle wrapIndexes() {\n+            ShortMaxVector v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = (ShortMaxVector) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = (ShortMaxVector) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return (ShortMaxShuffle) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static short[] prepare(int[] indices, int offset) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static short[] prepare(IntUnaryOperator f) {\n+            short[] a = new short[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = (short)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange(short[] indices) {\n+            int length = indices.length;\n+            for (short si : indices) {\n+                if (si >= (short)length || si < (short)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -858,1 +917,1 @@\n-            return new ShortMaxShuffle(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":103,"deletions":44,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -1099,1 +1099,1 @@\n-   \/**\n+    \/**\n@@ -2312,3 +2312,4 @@\n-        VectorShuffle<Short> iota = iotaShuffle();\n-        VectorMask<Short> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        ShortVector iotaVector = (ShortVector) iotaShuffle().toBitsVector();\n+        ShortVector filter = broadcast((short)(length() - origin));\n+        VectorMask<Short> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Short> iota = iotaShuffle(origin, 1, true);\n@@ -2342,3 +2343,4 @@\n-        VectorShuffle<Short> iota = iotaShuffle();\n-        VectorMask<Short> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        ShortVector iotaVector = (ShortVector) iotaShuffle().toBitsVector();\n+        ShortVector filter = broadcast((short)(length() - origin));\n+        VectorMask<Short> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+        AbstractShuffle<Short> iota = iotaShuffle(origin, 1, true);\n@@ -2363,4 +2365,4 @@\n-        VectorShuffle<Short> iota = iotaShuffle();\n-        VectorMask<Short> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast((short)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        ShortVector iotaVector = (ShortVector) iotaShuffle().toBitsVector();\n+        ShortVector filter = broadcast((short)origin);\n+        VectorMask<Short> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter);\n+        AbstractShuffle<Short> iota = iotaShuffle(-origin, 1, true);\n@@ -2403,4 +2405,4 @@\n-        VectorShuffle<Short> iota = iotaShuffle();\n-        VectorMask<Short> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast((short)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        ShortVector iotaVector = (ShortVector) iotaShuffle().toBitsVector();\n+        ShortVector filter = broadcast((short)origin);\n+        VectorMask<Short> blendMask = iotaVector.compare(VectorOperators.GE, filter);\n+        AbstractShuffle<Short> iota = iotaShuffle(-origin, 1, true);\n@@ -2429,2 +2431,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2433,1 +2433,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2435,1 +2435,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2458,2 +2458,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2462,1 +2460,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2464,1 +2462,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2485,2 +2483,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2490,1 +2486,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2492,1 +2488,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2498,1 +2494,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2500,1 +2496,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2506,0 +2502,1 @@\n+    @Override\n@@ -2507,2 +2504,2 @@\n-    private final\n-    VectorShuffle<Short> toShuffle0(ShortSpecies dsp) {\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+        assert(dsp.length() == vspecies().length());\n@@ -2517,1 +2514,0 @@\n-    \/*package-private*\/\n@@ -2519,8 +2515,11 @@\n-    final\n-    VectorShuffle<Short> toShuffleTemplate(Class<?> shuffleType) {\n-        ShortSpecies vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), short.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     ShortVector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+        ShortVector idx = this;\n+        ShortVector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            ShortVector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<Short> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -4213,0 +4212,1 @@\n+                Class<? extends AbstractShuffle<Short>> shuffleType,\n@@ -4215,1 +4215,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -4501,0 +4501,1 @@\n+                            Short64Vector.Short64Shuffle.class,\n@@ -4508,0 +4509,1 @@\n+                            Short128Vector.Short128Shuffle.class,\n@@ -4515,0 +4517,1 @@\n+                            Short256Vector.Short256Shuffle.class,\n@@ -4522,0 +4525,1 @@\n+                            Short512Vector.Short512Shuffle.class,\n@@ -4529,0 +4533,1 @@\n+                            ShortMaxVector.ShortMaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":46,"deletions":41,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,0 +127,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,2 +136,2 @@\n-    VectorShuffle(byte[] reorder) {\n-        super(reorder);\n+    VectorShuffle(Object indices) {\n+        super(indices);\n@@ -559,1 +559,1 @@\n-    public int laneSource(int i) { return toArray()[i]; }\n+    public abstract int laneSource(int i);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShuffle.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.vm.annotation.ForceInline;\n+\n@@ -345,0 +347,1 @@\n+    @ForceInline\n@@ -370,0 +373,1 @@\n+    @ForceInline\n@@ -413,0 +417,1 @@\n+    @ForceInline\n@@ -435,0 +440,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorSpecies.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1232,1 +1232,1 @@\n-   \/**\n+    \/**\n@@ -2688,3 +2688,9 @@\n-        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n-        VectorMask<$Boxtype$> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        $Bitstype$Vector iotaVector = ($Bitstype$Vector) iotaShuffle().toBitsVector();\n+#if[FP]\n+        $Bitstype$Vector filter = $Bitstype$Vector.broadcast(($Bitstype$Vector.$Bitstype$Species) vspecies().asIntegral(), ($bitstype$)(length() - origin));\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+#else[FP]\n+        $abstractvectortype$ filter = broadcast(($type$)(length() - origin));\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+#end[FP]\n+        AbstractShuffle<$Boxtype$> iota = iotaShuffle(origin, 1, true);\n@@ -2718,3 +2724,9 @@\n-        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n-        VectorMask<$Boxtype$> blendMask = iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n-        iota = iotaShuffle(origin, 1, true);\n+        $Bitstype$Vector iotaVector = ($Bitstype$Vector) iotaShuffle().toBitsVector();\n+#if[FP]\n+        $Bitstype$Vector filter = $Bitstype$Vector.broadcast(($Bitstype$Vector.$Bitstype$Species) vspecies().asIntegral(), ($bitstype$)(length() - origin));\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.LT, filter).cast(vspecies());\n+#else[FP]\n+        $abstractvectortype$ filter = broadcast(($type$)(length() - origin));\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.LT, filter);\n+#end[FP]\n+        AbstractShuffle<$Boxtype$> iota = iotaShuffle(origin, 1, true);\n@@ -2739,4 +2751,9 @@\n-        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n-        VectorMask<$Boxtype$> blendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                                  (broadcast(($type$)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        $Bitstype$Vector iotaVector = ($Bitstype$Vector) iotaShuffle().toBitsVector();\n+#if[FP]\n+        $Bitstype$Vector filter = $Bitstype$Vector.broadcast(($Bitstype$Vector.$Bitstype$Species) vspecies().asIntegral(), ($bitstype$)origin);\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter).cast(vspecies());\n+#else[FP]\n+        $abstractvectortype$ filter = broadcast(($type$)origin);\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare((part == 0) ? VectorOperators.GE : VectorOperators.LT, filter);\n+#end[FP]\n+        AbstractShuffle<$Boxtype$> iota = iotaShuffle(-origin, 1, true);\n@@ -2779,4 +2796,9 @@\n-        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n-        VectorMask<$Boxtype$> blendMask = iota.toVector().compare(VectorOperators.GE,\n-                                                                  (broadcast(($type$)(origin))));\n-        iota = iotaShuffle(-origin, 1, true);\n+        $Bitstype$Vector iotaVector = ($Bitstype$Vector) iotaShuffle().toBitsVector();\n+#if[FP]\n+        $Bitstype$Vector filter = $Bitstype$Vector.broadcast(($Bitstype$Vector.$Bitstype$Species) vspecies().asIntegral(), ($bitstype$)origin);\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.GE, filter).cast(vspecies());\n+#else[FP]\n+        $abstractvectortype$ filter = broadcast(($type$)origin);\n+        VectorMask<$Boxtype$> blendMask = iotaVector.compare(VectorOperators.GE, filter);\n+#end[FP]\n+        AbstractShuffle<$Boxtype$> iota = iotaShuffle(-origin, 1, true);\n@@ -2805,2 +2827,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2809,1 +2829,1 @@\n-            this, ws, null,\n+            this, shuffle, null,\n@@ -2811,1 +2831,1 @@\n-                int ei = s_.laneSource(i);\n+                int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2834,2 +2854,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2838,1 +2856,1 @@\n-                   this, ws, m,\n+                   this, shuffle, m,\n@@ -2840,1 +2858,1 @@\n-                        int ei = s_.laneSource(i);\n+                        int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2861,2 +2879,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        S ws = (S) shuffle.wrapIndexes();\n@@ -2866,1 +2882,1 @@\n-                this, ws, null,\n+                this, shuffle, null,\n@@ -2868,1 +2884,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v0.length());\n@@ -2874,1 +2890,1 @@\n-                v, ws, null,\n+                v, shuffle, null,\n@@ -2876,1 +2892,1 @@\n-                    int ei = s_.laneSource(i);\n+                    int ei = Integer.remainderUnsigned(s_.laneSource(i), v1.length());\n@@ -2882,0 +2898,1 @@\n+    @Override\n@@ -2883,2 +2900,5 @@\n-    private final\n-    VectorShuffle<$Boxtype$> toShuffle0($Type$Species dsp) {\n+    final <F> VectorShuffle<F> bitsToShuffle0(AbstractSpecies<F> dsp) {\n+#if[FP]\n+        throw new AssertionError();\n+#else[FP]\n+        assert(dsp.length() == vspecies().length());\n@@ -2891,0 +2911,1 @@\n+#end[FP]\n@@ -2893,1 +2914,0 @@\n-    \/*package-private*\/\n@@ -2895,8 +2915,19 @@\n-    final\n-    VectorShuffle<$Boxtype$> toShuffleTemplate(Class<?> shuffleType) {\n-        $Type$Species vsp = vspecies();\n-        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                                     getClass(), $type$.class, length(),\n-                                     shuffleType, byte.class, length(),\n-                                     this, vsp,\n-                                     $Type$Vector::toShuffle0);\n+    final <F>\n+    VectorShuffle<F> toShuffle(AbstractSpecies<F> dsp, boolean wrap) {\n+        assert(dsp.elementSize() == vspecies().elementSize());\n+#if[float]\n+        IntVector idx = convert(VectorOperators.F2I, 0).reinterpretAsInts();\n+#end[float]\n+#if[double]\n+        LongVector idx = convert(VectorOperators.D2L, 0).reinterpretAsLongs();\n+#end[double]\n+#if[!FP]\n+        $Type$Vector idx = this;\n+#end[!FP]\n+        $Bitstype$Vector wrapped = idx.lanewise(VectorOperators.AND, length() - 1);\n+        if (!wrap) {\n+            $Bitstype$Vector wrappedEx = wrapped.lanewise(VectorOperators.SUB, length());\n+            VectorMask<$Boxbitstype$> inBound = wrapped.compare(VectorOperators.EQ, idx);\n+            wrapped = wrappedEx.blend(wrapped, inBound);\n+        }\n+        return wrapped.bitsToShuffle(dsp);\n@@ -5450,0 +5481,1 @@\n+                Class<? extends AbstractShuffle<$Boxtype$>> shuffleType,\n@@ -5452,1 +5484,1 @@\n-                  vectorType, maskType,\n+                  vectorType, maskType, shuffleType,\n@@ -5745,0 +5777,1 @@\n+                            $Type$64Vector.$Type$64Shuffle.class,\n@@ -5752,0 +5785,1 @@\n+                            $Type$128Vector.$Type$128Shuffle.class,\n@@ -5759,0 +5793,1 @@\n+                            $Type$256Vector.$Type$256Shuffle.class,\n@@ -5766,0 +5801,1 @@\n+                            $Type$512Vector.$Type$512Shuffle.class,\n@@ -5773,0 +5809,1 @@\n+                            $Type$MaxVector.$Type$MaxShuffle.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":78,"deletions":41,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+    @Override\n@@ -148,7 +149,9 @@\n-      if (wrap) {\n-        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n-      } else {\n-        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n-      }\n+#if[byte]\n+        return ($shuffletype$) iotaShuffleTemplate((byte) start, (byte) step, wrap);\n+#end[byte]\n+#if[short]\n+        return ($shuffletype$) iotaShuffleTemplate((short) start, (short) step, wrap);\n+#end[short]\n+#if[!byteOrShort]\n+        return ($shuffletype$) iotaShuffleTemplate(start, step, wrap);\n+#end[!byteOrShort]\n@@ -159,5 +162,1 @@\n-    $shuffletype$ shuffleFromBytes(byte[] reorder) { return new $shuffletype$(reorder); }\n-\n-    @Override\n-    @ForceInline\n-    $shuffletype$ shuffleFromArray(int[] indexes, int i) { return new $shuffletype$(indexes, i); }\n+    $shuffletype$ shuffleFromArray(int[] indices, int i) { return new $shuffletype$(indices, i); }\n@@ -364,0 +363,1 @@\n+    @Override\n@@ -365,2 +365,12 @@\n-    public VectorShuffle<$Boxtype$> toShuffle() {\n-        return super.toShuffleTemplate($shuffletype$.class); \/\/ specialize\n+    final <F> VectorShuffle<F> bitsToShuffle(AbstractSpecies<F> dsp) {\n+#if[FP]\n+        throw new AssertionError();\n+#else[FP]\n+        return bitsToShuffleTemplate(dsp);\n+#end[FP]\n+    }\n+\n+    @Override\n+    @ForceInline\n+    public final $shuffletype$ toShuffle() {\n+        return ($shuffletype$) toShuffle(vspecies(), false);\n@@ -1080,1 +1090,1 @@\n-        static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n+        static final Class<$Boxbitstype$> ETYPE = $bitstype$.class; \/\/ used by the JVM\n@@ -1082,2 +1092,4 @@\n-        $shuffletype$(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+        $shuffletype$($bitstype$[] indices) {\n+            super(indices);\n+            assert(VLENGTH == indices.length);\n+            assert(indicesInRange(indices));\n@@ -1086,2 +1098,2 @@\n-        public $shuffletype$(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        $shuffletype$(int[] indices, int i) {\n+            this(prepare(indices, i));\n@@ -1090,2 +1102,2 @@\n-        public $shuffletype$(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        $shuffletype$(IntUnaryOperator fn) {\n+            this(prepare(fn));\n@@ -1094,2 +1106,2 @@\n-        public $shuffletype$(IntUnaryOperator fn) {\n-            super(VLENGTH, fn);\n+        $bitstype$[] indices() {\n+            return ($bitstype$[])getPayload();\n@@ -1099,0 +1111,1 @@\n+        @ForceInline\n@@ -1106,2 +1119,2 @@\n-            assert(VLENGTH < Byte.MAX_VALUE);\n-            assert(Byte.MIN_VALUE <= -VLENGTH);\n+            assert(VLENGTH < $Boxbitstype$.MAX_VALUE);\n+            assert($Boxbitstype$.MIN_VALUE <= -VLENGTH);\n@@ -1111,0 +1124,7 @@\n+#if[FP]\n+        @Override\n+        @ForceInline\n+        public $vectortype$ toVector() {\n+            return ($vectortype$) toBitsVector().castShape(vspecies(), 0);\n+        }\n+#else[FP]\n@@ -1114,2 +1134,1 @@\n-            return VectorSupport.shuffleToVector(VCLASS, ETYPE, $shuffletype$.class, this, VLENGTH,\n-                                                    (s) -> (($vectortype$)(((AbstractShuffle<$Boxtype$>)(s)).toVectorTemplate())));\n+            return toBitsVector();\n@@ -1117,0 +1136,1 @@\n+#end[FP]\n@@ -1120,6 +1140,13 @@\n-        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {\n-            AbstractSpecies<F> species = (AbstractSpecies<F>) s;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorShuffle length and species length differ\");\n-            int[] shuffleArray = toArray();\n-            return s.shuffleFromArray(shuffleArray, 0).check(s);\n+        $bitsvectortype$ toBitsVector() {\n+            return ($bitsvectortype$) super.toBitsVectorTemplate();\n+        }\n+\n+        @Override\n+        $bitsvectortype$ toBitsVector0() {\n+            return (($bitsvectortype$) vspecies().asIntegral().dummyVector()).vectorFactory(indices());\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int laneSource(int i) {\n+            return (int)toBitsVector().lane(i);\n@@ -1130,3 +1157,77 @@\n-        public $shuffletype$ wrapIndexes() {\n-            return VectorSupport.wrapShuffleIndexes(ETYPE, $shuffletype$.class, this, VLENGTH,\n-                                                    (s) -> (($shuffletype$)(((AbstractShuffle<$Boxtype$>)(s)).wrapIndexesTemplate())));\n+        public void intoArray(int[] a, int offset) {\n+#if[byte]\n+            VectorSpecies<Integer> species = IntVector.SPECIES_$BITS$;\n+            Vector<Byte> v = toBitsVector();\n+            v.convertShape(VectorOperators.B2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.B2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+            v.convertShape(VectorOperators.B2I, species, 2)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 2);\n+            v.convertShape(VectorOperators.B2I, species, 3)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length() * 3);\n+#end[byte]\n+#if[short]\n+            VectorSpecies<Integer> species = IntVector.SPECIES_$BITS$;\n+            Vector<Short> v = toBitsVector();\n+            v.convertShape(VectorOperators.S2I, species, 0)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset);\n+            v.convertShape(VectorOperators.S2I, species, 1)\n+                    .reinterpretAsInts()\n+                    .intoArray(a, offset + species.length());\n+#end[short]\n+#if[intOrFloat]\n+            toBitsVector().intoArray(a, offset);\n+#end[intOrFloat]\n+#if[longOrDouble]\n+            switch (length()) {\n+                case 1 -> a[offset] = laneSource(0);\n+                case 2 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_64, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 4 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_128, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 8 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_256, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                case 16 -> toBitsVector()\n+                        .convertShape(VectorOperators.L2I, IntVector.SPECIES_512, 0)\n+                        .reinterpretAsInts()\n+                        .intoArray(a, offset);\n+                default -> {\n+                    VectorIntrinsics.checkFromIndexSize(offset, length(), a.length);\n+                    for (int i = 0; i < length(); i++) {\n+                        a[offset + i] = laneSource(i);\n+                    }\n+                }\n+            }\n+#end[longOrDouble]\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public final $masktype$ laneIsValid() {\n+            return ($masktype$) toBitsVector().compare(VectorOperators.GE, 0)\n+                    .cast(vspecies());\n+        }\n+\n+        @ForceInline\n+        @Override\n+        public final $shuffletype$ rearrange(VectorShuffle<$Boxtype$> shuffle) {\n+            $shuffletype$ concreteShuffle = ($shuffletype$) shuffle;\n+#if[FP]\n+            return ($shuffletype$) toBitsVector().rearrange(concreteShuffle.cast($Bitstype$Vector.SPECIES_$BITS$))\n+                    .toShuffle(vspecies(), false);\n+#else[FP]\n+            return ($shuffletype$) toBitsVector().rearrange(concreteShuffle)\n+                    .toShuffle(vspecies(), false);\n+#end[FP]\n@@ -1137,8 +1238,39 @@\n-        public $shuffletype$ rearrange(VectorShuffle<$Boxtype$> shuffle) {\n-            $shuffletype$ s = ($shuffletype$) shuffle;\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+        public final $shuffletype$ wrapIndexes() {\n+            $bitsvectortype$ v = toBitsVector();\n+            if ((length() & (length() - 1)) == 0) {\n+                v = ($bitsvectortype$) v.lanewise(VectorOperators.AND, length() - 1);\n+            } else {\n+                v = ($bitsvectortype$) v.blend(v.lanewise(VectorOperators.ADD, length()),\n+                            v.compare(VectorOperators.LT, 0));\n+            }\n+            return ($shuffletype$) v.toShuffle(vspecies(), false);\n+        }\n+\n+        private static $bitstype$[] prepare(int[] indices, int offset) {\n+            $bitstype$[] a = new $bitstype$[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = indices[offset + i];\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = ($bitstype$)si;\n+            }\n+            return a;\n+        }\n+\n+        private static $bitstype$[] prepare(IntUnaryOperator f) {\n+            $bitstype$[] a = new $bitstype$[VLENGTH];\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int si = f.applyAsInt(i);\n+                si = partiallyWrapIndex(si, VLENGTH);\n+                a[i] = ($bitstype$)si;\n+            }\n+            return a;\n+        }\n+\n+        private static boolean indicesInRange($bitstype$[] indices) {\n+            int length = indices.length;\n+            for ($bitstype$ si : indices) {\n+                if (si >= ($bitstype$)length || si < ($bitstype$)(-length)) {\n+                    String msg = (\"index \"+si+\"out of range [\"+length+\"] in \"+\n+                                  java.util.Arrays.toString(indices));\n+                    throw new AssertionError(msg);\n+                }\n@@ -1146,1 +1278,1 @@\n-            return new $shuffletype$(r);\n+            return true;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":177,"deletions":45,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/resources\/aliasmap","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/aarch64\/AArch64.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/DirectHotSpotObjectConstantImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCodeStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompressedNullConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCICompilerConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotMetaspaceConstantImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotMethodHandleAccessProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotObjectConstantImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotSpeculationLog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/SharedLibraryJVMCIReflection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotVMConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/MethodHandleAccessProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/riscv64\/RISCV64.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/Services.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-                    refMemName += utils.makeSignature((ExecutableElement) refMem, null, true);\n+                    refMemName += utils.makeSignature((ExecutableElement) refMem, null, false, true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jcmd\/share\/man\/jinfo.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jcmd\/share\/man\/jmap.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jcmd\/share\/man\/jps.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jcmd\/share\/man\/jstack.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jcmd\/share\/man\/jstat.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jconsole\/share\/classes\/sun\/tools\/jconsole\/resources\/messages_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jconsole\/share\/man\/jconsole.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ConstantWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/JavapTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/LocalVariableTableWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/LocalVariableTypeTableWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/Options.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/SourceWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/StackMapWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/TypeAnnotationWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/resources\/javap_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/resources\/jdkinternals.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/man\/javap.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/man\/jdeprscan.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdeps\/share\/man\/jdeps.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/ThreadReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/TTYResources_de.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/SunCommandLineLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdi\/share\/man\/jdb.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jdi\/windows\/classes\/com\/sun\/tools\/jdi\/SharedMemoryTransportService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriterKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/RepositoryFiles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/BatchManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/QueryResolver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/test\/DeprecatedMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/test\/DeprecatedThing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Bytecode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/snippet-files\/Snippets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/man\/jfr.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/JimageDiffGenerator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,3 @@\n- * published by the Free Software Foundation.\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/ResourcePoolReader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/man\/jlink.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/man\/jmod.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxLaunchersAsServices.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Enquoter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackageFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/share\/native\/common\/ErrorHandling.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/share\/native\/common\/Log.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/UnixLaunchersAsServices.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WindowsRegistry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jpackage\/windows\/native\/libjpackage\/jpackage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_es.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_fr.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_it.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_ko.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_sv.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/resources\/agent_zh_TW.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/FileDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/OperatingSystemMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,2 +277,7 @@\n-        if (containerMetrics != null && containerMetrics.getCpuSetCpus() != null) {\n-            return containerMetrics.getCpuSetCpus().length == getHostOnlineCpuCount0();\n+        if (containerMetrics != null) {\n+            \/\/ The return value may change (including from non-null to null) and\n+            \/\/ the call may involve I\/O, so keep the result in a local variable.\n+            int[] cpuSetCpus = containerMetrics.getCpuSetCpus();\n+            if (cpuSetCpus != null) {\n+                return cpuSetCpus.length == getHostOnlineCpuCount0();\n+            }\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DnsContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.naming.rmi\/share\/classes\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.security.jgss\/share\/classes\/com\/sun\/security\/jgss\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Difference\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Filter\/src\/main\/resources\/com\/sun\/hotspot\/igv\/filter\/helper.js","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/NetworkConnection\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/SelectionCoordinator\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Settings\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Util\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/ExportGraph.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExpandAdjacentAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ModelAwareAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/application\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/branding\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/LogCompilation\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/hsdis\/binutils\/hsdis-binutils.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/hsdis\/capstone\/hsdis-capstone.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/hsdis\/hsdis.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/hsdis\/llvm\/hsdis-llvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/failure_handler\/README","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/failure_handler\/src\/share\/classes\/jdk\/test\/failurehandler\/action\/ActionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/failure_handler\/src\/share\/conf\/linux.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/code\/test_codestrings.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSetContainers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1RegionMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorageSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahNumberSeq.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zPhysicalMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/opto\/test_no_overflow_int.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/runtime\/test_objectMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,4 +123,0 @@\n-# Fails with +UseCompactObjectHeaders on aarch64\n-runtime\/cds\/appcds\/SharedBaseAddress.java 8340212 linux-aarch64,macosx-aarch64\n-runtime\/cds\/SharedBaseAddress.java 8340212 linux-aarch64,macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,3 +41,2 @@\n-hotspot_compiler_xcomp = \\\n-  :hotspot_compiler \\\n-  -:tier1_compiler_not_xcomp\n+hotspot_compiler_resourcehogs = \\\n+  resourcehogs\/compiler\n@@ -162,2 +161,1 @@\n-  :tier1_compiler_3 \\\n-  :tier1_compiler_not_xcomp\n+  :tier1_compiler_3\n@@ -176,1 +174,0 @@\n-  resourcehogs\/compiler \\\n@@ -221,0 +218,1 @@\n+  compiler\/profiling \\\n@@ -266,12 +264,1 @@\n-  applications\/ctw\/modules \\\n-  compiler\/c2\/ \\\n-  compiler\/ciReplay\/ \\\n-  compiler\/compilercontrol\/ \\\n-  compiler\/debug\/ \\\n-  compiler\/oracle\/ \\\n-  compiler\/print\/ \\\n-  compiler\/relocations\/ \\\n-  compiler\/tiered\/ \\\n-  compiler\/vectorapi\/ \\\n-  compiler\/whitebox\/ \\\n-  :hotspot_slow_compiler \\\n+  :hotspot_compiler \\\n@@ -281,2 +268,0 @@\n-tier1_compiler_not_xcomp = \\\n-  compiler\/profiling\n@@ -288,1 +273,0 @@\n-  :tier1_compiler_not_xcomp \\\n@@ -308,0 +292,3 @@\n+tier2_ctw = \\\n+  :ctw_1\n+\n@@ -664,0 +651,1 @@\n+  :tier2_ctw \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/TestGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/applications\/scimark\/Scimark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestC1Globals.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompileThresholdScaling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestPrintC1Statistics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestTraceLinearScanLevel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/ClearArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUninitializedKlassField.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVolatiles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivINodeIdealizationTests.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-    \/\/ Hotspot should keep the division because it may cause a division by zero trap\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivLNodeIdealizationTests.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @bug 8290248 8312547\n+ * @bug 8290248 8312547 8341781\n@@ -49,0 +49,1 @@\n+                 \"testMax5\",\n@@ -52,1 +53,2 @@\n-                 \"testMin4\"})\n+                 \"testMin4\",\n+                 \"testMin5\"})\n@@ -79,0 +81,1 @@\n+        Asserts.assertEQ(8                                                          , testMax5(a));\n@@ -84,0 +87,1 @@\n+        Asserts.assertEQ(a & 7                                                      , testMin5(a));\n@@ -222,0 +226,12 @@\n+    @Test\n+    @IR(failOn = {IRNode.MAX_I})\n+    public int testMax5(int i) {\n+        return Math.max(i & 7, 8);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MIN_I})\n+    public int testMin5(int i) {\n+        return Math.min(i & 7, 8);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MaxMinINodeIdealizationTests.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8332268\n+ * @summary Test that Ideal transformations of ModINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.ModINodeIdealizationTests\n+ *\/\n+public class ModINodeIdealizationTests {\n+    public static final int RANDOM_POWER_OF_2 = 1 << (1 + Utils.getRandomInstance().nextInt(30));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Random\", \"powerOf2Minus1\",\n+                 \"positivePowerOf2\", \"positivePowerOf2Random\"})\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        a = (a == 0) ? 2 : a;\n+        int b = RunInfo.getRandom().nextInt();\n+        b = (b == 0) ? 2 : b;\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(a % a, constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(a % 32, powerOf2(a));\n+        Asserts.assertEQ(a % RANDOM_POWER_OF_2, powerOf2Random(a));\n+        Asserts.assertEQ(Math.max(0, a) % 32, positivePowerOf2(a));\n+        Asserts.assertEQ(Math.max(0, a) % RANDOM_POWER_OF_2, positivePowerOf2Random(a));\n+        Asserts.assertEQ(a % 127, powerOf2Minus1(a));\n+        Asserts.assertEQ(a % 1, constantAgain(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.MUL})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x % x => 0\n+    public int constant(int x) {\n+        return x % x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I})\n+    \/\/ Checks x % 1 => 0\n+    public int constantAgain(int x) {\n+        return x % 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.RSHIFT, IRNode.ADD, IRNode.SUB})\n+    @IR(counts = {IRNode.AND_I, \"1\"})\n+    public int positivePowerOf2(int x) {\n+        return Math.max(0, x) % 32;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.RSHIFT, IRNode.ADD, IRNode.SUB})\n+    @IR(counts = {IRNode.AND_I, \"1\"})\n+    public int positivePowerOf2Random(int x) {\n+        return Math.max(0, x) % RANDOM_POWER_OF_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.DIV})\n+    @IR(counts = {IRNode.AND_I, \"1\"})\n+    public int powerOf2(int x) {\n+        return x % 32;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I, IRNode.DIV})\n+    @IR(counts = {IRNode.AND_I, \"1\"})\n+    public int powerOf2Random(int x) {\n+        return x % RANDOM_POWER_OF_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_I})\n+    @IR(counts = {IRNode.AND_I, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_I, \"2\"})\n+    \/\/ Special optimization for the case 2^k-1 for bigger k\n+    public int powerOf2Minus1(int x) {\n+        return x % 127;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModINodeIdealizationTests.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8267265\n+ * @summary Test that Ideal transformations of ModLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.ModLNodeIdealizationTests\n+ *\/\n+public class ModLNodeIdealizationTests {\n+    public static final long RANDOM_POWER_OF_2 = 1L << (1 + Utils.getRandomInstance().nextInt(62));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Random\", \"powerOf2Minus1\"})\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        a = (a == 0) ? 2 : a;\n+        long b = RunInfo.getRandom().nextLong();\n+        b = (b == 0) ? 2 : b;\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(a % a, constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(a % (1L << 33), powerOf2(a));\n+        Asserts.assertEQ(a % ((1L << 33) - 1), powerOf2Minus1(a));\n+        Asserts.assertEQ(a % 1, constantAgain(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x % x => 0\n+    public long constant(long x) {\n+        return x % x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L})\n+    \/\/ Checks x % 1 => 0\n+    public long constantAgain(long x) {\n+        return x % 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.DIV})\n+    @IR(counts = {IRNode.AND_L, \"1\"})\n+    \/\/ If the dividend is positive, and divisor is of the form 2^k, we can use a simple bit mask.\n+    public long powerOf2(long x) {\n+        return x % (1L << 33);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L, IRNode.DIV})\n+    @IR(counts = {IRNode.AND_L, \"1\"})\n+    \/\/ If the dividend is positive, and divisor is of the form 2^k, we can use a simple bit mask.\n+    public long powerOf2Random(long x) {\n+        return x % RANDOM_POWER_OF_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MOD_L})\n+    @IR(counts = {IRNode.AND_L, \">=1\", IRNode.RSHIFT, \">=1\", IRNode.CMP_L, \"2\"})\n+    \/\/ Special optimization for the case 2^k-1 for bigger k\n+    public long powerOf2Minus1(long x) {\n+        return x % ((1L << 33) - 1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModLNodeIdealizationTests.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIterativeEA.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8341781\n+ * @summary Test identities of MinNodes and MaxNodes.\n+ * @key randomness\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestMinMaxIdentities\n+ *\/\n+\n+public class TestMinMaxIdentities {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"intMinMin\", \"intMinMax\", \"intMaxMin\", \"intMaxMax\",\n+                  \"longMinMin\", \"longMinMax\", \"longMaxMin\", \"longMaxMax\",\n+                  \"floatMinMin\", \"floatMaxMax\", \"doubleMinMin\", \"doubleMaxMax\",\n+                  \"floatMinMax\", \"floatMaxMin\", \"doubleMinMax\", \"doubleMaxMin\" })\n+    public void runMethod() {\n+        assertResult(10, 20, 10L, 20L, 10.f, 20.f, 10.0, 20.0);\n+        assertResult(20, 10, 20L, 10L, 20.f, 10.f, 20.0, 10.0);\n+\n+        assertResult(RANDOM.nextInt(), RANDOM.nextInt(), RANDOM.nextLong(), RANDOM.nextLong(), RANDOM.nextFloat(), RANDOM.nextFloat(), RANDOM.nextDouble(), RANDOM.nextDouble());\n+        assertResult(RANDOM.nextInt(), RANDOM.nextInt(), RANDOM.nextLong(), RANDOM.nextLong(), RANDOM.nextFloat(), RANDOM.nextFloat(), RANDOM.nextDouble(), RANDOM.nextDouble());\n+\n+        assertResult(Integer.MAX_VALUE, Integer.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE, Float.POSITIVE_INFINITY, Float.NaN, Double.POSITIVE_INFINITY, Double.NaN);\n+        assertResult(Integer.MIN_VALUE, Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Float.NaN, Float.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int iA, int iB, long lA, long lB, float fA, float fB, double dA, double dB) {\n+        Asserts.assertEQ(Math.min(iA, Math.min(iA, iB)), intMinMin(iA, iB));\n+        Asserts.assertEQ(Math.min(iA, Math.max(iA, iB)), intMinMax(iA, iB));\n+        Asserts.assertEQ(Math.max(iA, Math.min(iA, iB)), intMaxMin(iA, iB));\n+        Asserts.assertEQ(Math.max(iA, Math.max(iA, iB)), intMaxMax(iA, iB));\n+\n+        Asserts.assertEQ(Math.min(lA, Math.min(lA, lB)), longMinMin(lA, lB));\n+        Asserts.assertEQ(Math.min(lA, Math.max(lA, lB)), longMinMax(lA, lB));\n+        Asserts.assertEQ(Math.max(lA, Math.min(lA, lB)), longMaxMin(lA, lB));\n+        Asserts.assertEQ(Math.max(lA, Math.max(lA, lB)), longMaxMax(lA, lB));\n+\n+        Asserts.assertEQ(Math.min(fA, Math.min(fA, fB)), floatMinMin(fA, fB));\n+        Asserts.assertEQ(Math.max(fA, Math.max(fA, fB)), floatMaxMax(fA, fB));\n+\n+        Asserts.assertEQ(Math.min(dA, Math.min(dA, dB)), doubleMinMin(dA, dB));\n+        Asserts.assertEQ(Math.max(dA, Math.max(dA, dB)), doubleMaxMax(dA, dB));\n+\n+        \/\/ Due to NaN, these identities cannot be simplified.\n+\n+        Asserts.assertEQ(Math.min(fA, Math.max(fA, fB)), floatMinMax(fA, fB));\n+        Asserts.assertEQ(Math.max(fA, Math.min(fA, fB)), floatMaxMin(fA, fB));\n+        Asserts.assertEQ(Math.min(dA, Math.max(dA, dB)), doubleMinMax(dA, dB));\n+        Asserts.assertEQ(Math.max(dA, Math.min(dA, dB)), doubleMaxMin(dA, dB));\n+    }\n+\n+    \/\/ Integers\n+\n+    @Test\n+    @IR(counts = { IRNode.MIN_I, \"1\" })\n+    public int intMinMin(int a, int b) {\n+        return Math.min(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MIN_I, IRNode.MAX_I })\n+    public int intMinMax(int a, int b) {\n+        return Math.min(a, Math.max(a, b));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MIN_I, IRNode.MAX_I })\n+    public int intMaxMin(int a, int b) {\n+        return Math.max(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.MAX_I, \"1\" })\n+    public int intMaxMax(int a, int b) {\n+        return Math.max(a, Math.max(a, b));\n+    }\n+\n+    \/\/ Longs\n+\n+    \/\/ As Math.min\/max(LL) is not intrinsified, it first needs to be transformed into CMoveL and then MinL\/MaxL before\n+    \/\/ the identity can be matched. However, the outer min\/max is not transformed into CMove because of the CMove cost model.\n+    \/\/ As JDK-8307513 adds intrinsics for the methods, the tests will be updated then.\n+\n+    @Test\n+    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MIN_L, \"1\" })\n+    public long longMinMin(long a, long b) {\n+        return Math.min(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MIN_L, \"1\" })\n+    public long longMinMax(long a, long b) {\n+        return Math.min(a, Math.max(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MAX_L, \"1\" })\n+    public long longMaxMin(long a, long b) {\n+        return Math.max(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatform = { \"riscv64\", \"false\" }, phase = { CompilePhase.BEFORE_MACRO_EXPANSION }, counts = { IRNode.MAX_L, \"1\" })\n+    public long longMaxMax(long a, long b) {\n+        return Math.max(a, Math.max(a, b));\n+    }\n+\n+    \/\/ Floats\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_F, \"1\" })\n+    public float floatMinMin(float a, float b) {\n+        return Math.min(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MAX_F, \"1\" })\n+    public float floatMaxMax(float a, float b) {\n+        return Math.max(a, Math.max(a, b));\n+    }\n+\n+    \/\/ Doubles\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_D, \"1\" })\n+    public double doubleMinMin(double a, double b) {\n+        return Math.min(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MAX_D, \"1\" })\n+    public double doubleMaxMax(double a, double b) {\n+        return Math.max(a, Math.max(a, b));\n+    }\n+\n+    \/\/ Float and double identities that cannot be simplified due to NaN\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_F, \"1\", IRNode.MAX_F, \"1\" })\n+    public float floatMinMax(float a, float b) {\n+        return Math.min(a, Math.max(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_F, \"1\", IRNode.MAX_F, \"1\" })\n+    public float floatMaxMin(float a, float b) {\n+        return Math.max(a, Math.min(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_D, \"1\", IRNode.MAX_D, \"1\" })\n+    public double doubleMinMax(double a, double b) {\n+        return Math.min(a, Math.max(a, b));\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"}, counts = { IRNode.MIN_D, \"1\", IRNode.MAX_D, \"1\" })\n+    public double doubleMaxMin(double a, double b) {\n+        return Math.max(a, Math.min(a, b));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMinMaxIdentities.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestPadding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestTestRemovalPeephole.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizeURShiftSubword.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8332268\n+ * @summary Test that Ideal transformations of UDivINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.UDivINodeIdealizationTests\n+ *\/\n+public class UDivINodeIdealizationTests {\n+    public static final int RANDOM_POWER_OF_2 = 1 << (1 + Utils.getRandomInstance().nextInt(30));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityAgainButBig\", \"identityThird\",\n+            \"retainDenominator\", \"divByPow2\", \"divByPow2Big\", \"divByPow2Random\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        a = (a == 0) ? 1 : a;\n+        int b = RunInfo.getRandom().nextInt();\n+        b = (b == 0) ? 1 : b;\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(Integer.divideUnsigned(a, a), constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        try {\n+            Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned(b, b)), identityThird(a, b));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        try {\n+            Asserts.assertEQ(Integer.divideUnsigned((a * b), b), retainDenominator(a, b));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(Integer.divideUnsigned(a, 1), identity(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned(13, 13)), identityAgain(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, 8), divByPow2(a), \"divByPow2 \" + a);\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.MIN_VALUE), divByPow2Big(a));\n+        Asserts.assertEQ(Integer.divideUnsigned(a, Integer.divideUnsigned((1 << 20) + 1, (1 << 20) + 1)), identityAgainButBig(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x \/ x => 1\n+    public int constant(int x) {\n+        return Integer.divideUnsigned(x, x);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ 1 => x\n+    public int identity(int x) {\n+        return Integer.divideUnsigned(x, 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public int identityAgain(int x) {\n+        return Integer.divideUnsigned(x, Integer.divideUnsigned(13, 13));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public int identityAgainButBig(int x) {\n+        \/\/ (1 << 20) + 1 is an arbitrary integer that cannot be optimized by the power of 2 optimizations\n+        return Integer.divideUnsigned(x, Integer.divideUnsigned((1 << 20) + 1, (1 << 20) + 1));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x \/ (y \/ y) => x\n+    public int identityThird(int x, int y) {\n+        return Integer.divideUnsigned(x, Integer.divideUnsigned(y, y));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MUL, \"1\",\n+            IRNode.UDIV_I, \"1\",\n+            IRNode.DIV_BY_ZERO_TRAP, \"1\"\n+    })\n+    public int retainDenominator(int x, int y) {\n+        return Integer.divideUnsigned((x * y), y);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    \/\/ Dividing an unsigned number by 8 is a trivial right shift by 3\n+    public int divByPow2(int x) {\n+        return Integer.divideUnsigned(x, 8);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public int divByPow2Random(int x) {\n+        return Integer.divideUnsigned(x, RANDOM_POWER_OF_2);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public int divByPow2Big(int x) {\n+        return Integer.divideUnsigned(x, Integer.MIN_VALUE);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivINodeIdealizationTests.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8332268\n+ * @summary Test that Ideal transformations of UDivLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.UDivLNodeIdealizationTests\n+ *\/\n+public class UDivLNodeIdealizationTests {\n+    public static final long RANDOM_POWER_OF_2 = 1L << (1 + Utils.getRandomInstance().nextInt(62));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"identity\", \"identityAgain\", \"identityAgainButBig\", \"identityThird\",\n+            \"retainDenominator\", \"divByPow2\", \"divByPow2Big\", \"divByPow2Random\"})\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        a = (a == 0) ? 1 : a;\n+        long b = RunInfo.getRandom().nextLong();\n+        b = (b == 0) ? 1 : b;\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(Long.divideUnsigned(a, a), constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        try {\n+            Asserts.assertEQ(Long.divideUnsigned((a * b), b), retainDenominator(a, b));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        try {\n+            Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned(b, b)), identityThird(a, b));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(Long.divideUnsigned(a, 1), identity(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned(13, 13)), identityAgain(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, 8), divByPow2(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.MIN_VALUE), divByPow2Big(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, RANDOM_POWER_OF_2), divByPow2Random(a));\n+        Asserts.assertEQ(Long.divideUnsigned(a, Long.divideUnsigned((1L << 40) + 1, (1L << 40) + 1)), identityAgainButBig(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x \/ x => 1\n+    public long constant(long x) {\n+        return Long.divideUnsigned(x, x);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ 1 => x\n+    public long identity(long x) {\n+        return Long.divideUnsigned(x, 1L);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public long identityAgain(long x) {\n+        return Long.divideUnsigned(x, Long.divideUnsigned(13L, 13L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    \/\/ Checks x \/ (c \/ c) => x\n+    public long identityAgainButBig(long x) {\n+        \/\/ (1L << 40) + 1 is an arbitrary integer that cannot be optimized by the power of 2 optimizations\n+        return Long.divideUnsigned(x, Long.divideUnsigned((1L << 40) + 1, (1L << 40) + 1));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x \/ (y \/ y) => x\n+    public long identityThird(long x, long y) {\n+        return Long.divideUnsigned(x, Long.divideUnsigned(y, y));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MUL_L, \"1\",\n+            IRNode.UDIV_L, \"1\",\n+            IRNode.DIV_BY_ZERO_TRAP, \"1\"\n+    })\n+    public long retainDenominator(long x, long y) {\n+        return Long.divideUnsigned((x * y), y);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    \/\/ Dividing an unsigned number by 8 is a trivial right shift by 3\n+    public long divByPow2(long x) {\n+        return Long.divideUnsigned(x, 8L);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public long divByPow2Random(long x) {\n+        return Long.divideUnsigned(x, RANDOM_POWER_OF_2);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UDIV})\n+    @IR(counts = {IRNode.URSHIFT, \"1\"})\n+    public long divByPow2Big(long x) {\n+        return Long.divideUnsigned(x, Long.MIN_VALUE);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivLNodeIdealizationTests.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8332268\n+ * @summary Test that Ideal transformations of UModINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.UModINodeIdealizationTests\n+ *\/\n+public class UModINodeIdealizationTests {\n+    public static final int RANDOM_POWER_OF_2 = 1 << (1 + Utils.getRandomInstance().nextInt(30));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Big\", \"powerOf2Random\", \"reallyConstant\"})\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        a = (a == 0) ? 2 : a;\n+        int b = RunInfo.getRandom().nextInt();\n+        b = (b == 0) ? 2 : b;\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(Integer.remainderUnsigned(a, a), constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, 1), constantAgain(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, 32), powerOf2(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, Integer.MIN_VALUE), powerOf2Big(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(a, RANDOM_POWER_OF_2), powerOf2Random(a));\n+        Asserts.assertEQ(Integer.remainderUnsigned(Integer.MIN_VALUE, 302032), reallyConstant());\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I, IRNode.MUL})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x % x => 0\n+    public int constant(int x) {\n+        return Integer.remainderUnsigned(x, x);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I})\n+    \/\/ Checks x % 1 => 0\n+    public int constantAgain(int x) {\n+        return Integer.remainderUnsigned(x, 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I, IRNode.MUL})\n+    \/\/ Checks that modulo with two constants is calculated at compile time\n+    public int reallyConstant() {\n+        return Integer.remainderUnsigned(Integer.MIN_VALUE, 302032); \/\/ -2147483648 = Integer.parseUnsignedInt(\"2147483648\")\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public int powerOf2(int x) {\n+        return Integer.remainderUnsigned(x, 32);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public int powerOf2Random(int x) {\n+        return Integer.remainderUnsigned(x, RANDOM_POWER_OF_2);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_I, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public int powerOf2Big(int x) {\n+        return Integer.remainderUnsigned(x, Integer.MIN_VALUE);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UModINodeIdealizationTests.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import java.util.Random;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8332268\n+ * @summary Test that Ideal transformations of UModLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.UModLNodeIdealizationTests\n+ *\/\n+public class UModLNodeIdealizationTests {\n+    public static final long RANDOM_POWER_OF_2 = 1L << (1 + Utils.getRandomInstance().nextInt(62));\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"constantAgain\", \"powerOf2\", \"powerOf2Big\", \"powerOf2Random\", \"reallyConstant\"})\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextInt();\n+        a = (a == 0) ? 2 : a;\n+        long b = RunInfo.getRandom().nextInt();\n+        b = (b == 0) ? 2 : b;\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, true);\n+        assertResult(a, b, false);\n+        assertResult(min, min, false);\n+        assertResult(max, max, false);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, boolean shouldThrow) {\n+        try {\n+            Asserts.assertEQ(Long.remainderUnsigned(a, a), constant(a));\n+            Asserts.assertFalse(shouldThrow, \"Expected an exception to be thrown.\");\n+        } catch (ArithmeticException e) {\n+            Asserts.assertTrue(shouldThrow, \"Did not expect an exception to be thrown.\");\n+        }\n+\n+        Asserts.assertEQ(Long.remainderUnsigned(a, 1), constantAgain(a));\n+        Asserts.assertEQ(Long.remainderUnsigned(a, 1L << 33), powerOf2(a));\n+        Asserts.assertEQ(Long.remainderUnsigned(Long.MIN_VALUE, 302032), reallyConstant());\n+        Asserts.assertEQ(Long.remainderUnsigned(a, Long.MIN_VALUE), powerOf2Big(a));\n+        Asserts.assertEQ(Long.remainderUnsigned(a, RANDOM_POWER_OF_2), powerOf2Random(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L, IRNode.MUL})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    \/\/ Checks x % x => 0\n+    public long constant(long x) {\n+        return Long.remainderUnsigned(x, x);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L})\n+    \/\/ Checks x % 1 => 0\n+    public long constantAgain(long x) {\n+        return Long.remainderUnsigned(x, 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L, IRNode.MUL})\n+    \/\/ Checks that modulo with two constants is calculated at compile time\n+    public long reallyConstant() {\n+        return Long.remainderUnsigned(Long.MIN_VALUE, 302032);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public long powerOf2(long x) {\n+        return Long.remainderUnsigned(x, 1L << 33);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public long powerOf2Random(long x) {\n+        return Long.remainderUnsigned(x, RANDOM_POWER_OF_2);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.UMOD_L, IRNode.MUL})\n+    @IR(counts = {IRNode.AND, \"1\"})\n+    \/\/ Checks that for x % 2^k, 2^k-1 is used as a bit mask.\n+    public long powerOf2Big(long x) {\n+        return Long.remainderUnsigned(x, Long.MIN_VALUE);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UModLNodeIdealizationTests.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/igvn\/TestIntegerMulRing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/ScalarReplacementTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/AbstractRootMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/DefaultRootMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/StrengthReduceInterfaceCall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemLimitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemStatTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/parser\/HugeDirectiveUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/cpuflags\/TestAESIntrinsicsOnSupportedConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/cpuflags\/TestAESIntrinsicsOnUnsupportedConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestArrayCopyWithLargeObjectAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestMembarDependencies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/UnsafeIntrinsicsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestBitShuffleOpers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/chacha\/TestChaCha20.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/Binary16Conversion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/Binary16ConversionNaN.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestAllFloat16ToFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestConstFloat16ToFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestEnableJVMCIProduct.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestInvalidJVMCIOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCIPrintProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCISavedProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ConstantPoolTestsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MaterializeVirtualObjectTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInstallationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleDebugInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestAssembler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/amd64\/AMD64TestAssembler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaMethod.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TypeUniverse.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/Arguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -575,0 +575,5 @@\n+    public static final String UDIV = PREFIX + \"UDIV\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(UDIV, \"UDiv(I|L|F|D)\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/FlagVMProcess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/AbstractTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/ArgumentValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/BaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/DeclaredTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRangeCheckPredicatesControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/UseCountedLoopSafepointsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/CoLocatePackMemoryState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ReductionPerf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCyclicDependency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestIndependentPacksWithCyclicDependency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestIndependentPacksWithCyclicDependency2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPeeledReductionNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPickFirstMemoryState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPickLastMemoryState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestScheduleReordersScalarMemops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestUnorderedReduction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/Vec_MulAddS2I.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/PrintIdealPhaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/TestInvalidCompileCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/assertion\/TestTemplateAssertionPredicateNotRemoved.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/PrintCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestMethodHandleInvokesIntrinsic.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestMultiBranchDataOverflow.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +29,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestProfileCounterOverflow.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestSharedHeadExceptionBackedges.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestSpecTrapClassUnloading.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestTypeProfileArgsLimit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+  * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestTypeProfiling.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestUnexpectedProfilingMismatch.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/UnsafeAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass\/Launcher.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/spectrapredefineclass_classloaders\/Launcher.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/unloadingconflict\/TestProfileConflictClassUnloading.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestExplicitRangeChecks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/TestConstantsInError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+        \/\/ Make sure classes are loaded when compiling with -Xcomp\n+        Integer.divideUnsigned(2, 3);\n+        Long.divideUnsigned(2, 3);\n@@ -88,0 +91,10 @@\n+            testPushUDivLThruPhiForOuterLongLoop();\n+            testPushUModLThruPhiForOuterLongLoop();\n+            testPushUDivIThruPhi();\n+            testPushUDivIThruPhiInChain();\n+            testPushUModIThruPhi();\n+            testPushUModIThruPhiInChain();\n+            testPushUDivLThruPhi();\n+            testPushUDivLThruPhiInChain();\n+            testPushUModLThruPhi();\n+            testPushUModLThruPhiInChain();\n@@ -205,0 +218,110 @@\n+\n+    \/\/ Same as above but with UDivI.\n+    static void testPushUDivIThruPhi() {\n+        for (int i = 10; i > 1; i -= 2) {\n+            lFld = Integer.divideUnsigned(10, i);\n+\n+            \/\/ Loop that is not removed such that we do not transform the outer LongCountedLoop (only done if innermost)\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UDivI.\n+    static void testPushUDivIThruPhiInChain() {\n+        for (int i = 10; i > 1; i -= 2) {\n+            for (int j = 0; j < 1; j++) {\n+            }\n+            lFld = Integer.divideUnsigned(10, (i * 100));\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UModI\n+    static void testPushUModIThruPhi() {\n+        for (int i = 10; i > 1; i -= 2) {\n+            lFld = Integer.remainderUnsigned(10, i);\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UModI\n+    static void testPushUModIThruPhiInChain() {\n+        for (int i = 10; i > 1; i -= 2) {\n+            for (int j = 0; j < 1; j++) {\n+            }\n+            lFld = Integer.remainderUnsigned(10, (i * 100));\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UDivL.\n+    static void testPushUDivLThruPhi() {\n+        for (long i = 10; i > 1; i -= 2) {\n+            lFld = Long.divideUnsigned(10L, i);\n+\n+            \/\/ Loop that is not removed such that we do not transform the outer LongCountedLoop (only done if innermost)\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UDivL.\n+    static void testPushUDivLThruPhiInChain() {\n+        for (long i = 10; i > 1; i -= 2) {\n+            for (int j = 0; j < 1; j++) {\n+            }\n+            lFld = Long.divideUnsigned(10L, (i * 100L));\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UModL\n+    static void testPushUModLThruPhi() {\n+        for (long i = 10; i > 1; i -= 2) {\n+            lFld = Long.remainderUnsigned(10L, i);\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as above but with UModL\n+    static void testPushUModLThruPhiInChain() {\n+        for (long i = 10; i > 1; i -= 2) {\n+            for (int j = 0; j < 1; j++) {\n+            }\n+            lFld = Long.remainderUnsigned(10L, (i * 100L));\n+\n+            for (int j = 0; j < 10; j++) {\n+                flag = !flag;\n+            }\n+        }\n+    }\n+\n+    static void testPushUDivLThruPhiForOuterLongLoop() {\n+        for (long i = 10; i > 1; i -= 2) {\n+            lFld = Long.divideUnsigned(10, i);\n+        }\n+    }\n+\n+    static void testPushUModLThruPhiForOuterLongLoop() {\n+        for (int i = 10; i > 1; i -= 2) {\n+            iFld = Integer.remainderUnsigned(10, i);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/splitif\/TestSplitDivisionThroughPhi.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/DeoptReallocFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestDeoptOOM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestUnstableIfTrap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeGetStableArrayElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorRebracket128Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8341834\n- * @summary C2 compilation fails with \"bad AD file\" due to Replicate\n+ * @bug 8341834 8343747\n+ * @summary Replicate node at a VectorCast (ConvL2I) causes superword to fail\n@@ -29,0 +29,1 @@\n+ * @run main\/othervm -XX:CompileCommand=compileonly,TestReplicateAtConv::test -Xcomp -XX:MaxVectorSize=8 TestReplicateAtConv\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReplicateAtConv.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSignumVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicByteOpTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicIntOpTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicLongOpTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,1 +219,0 @@\n-        int val = 65536;\n@@ -221,1 +220,1 @@\n-            res[i] = (short) Math.min(a[i], val);\n+            res[i] = (short) Math.min(a[i], b[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/DeoptimizeFramesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/TestContainerized.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/EventGeneratorLoop.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/JfrReporter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestCardTablePageCommits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestDisableExplicitGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestNumWorkerOutput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestPLABAdaptToMinTLABSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceClearDuringReferenceProcessing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestSmallHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestSystemGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySilently.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySubSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/GCArguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestAggressiveHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestCompressedClassFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestDisableDefaultGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcMarkStepDurationMillis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcRefinementThreads.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapRegionSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1PercentageOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1RemSetFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestInitialTenuringThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxMinHeapFreeRatioFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxRAMFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeThreadIncrease.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestObjectTenuringFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelRefProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSelectDefaultGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSmallInitialHeapWithLargePageAndNUMA.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSoftMaxHeapSizeFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestTargetSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUnrecognizedVMOptionsHandling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsFlagsWithUlimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseNUMAInterleaving.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestVerifyBeforeAndAfterGCFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/class_unloading\/TestG1ClassUnloadingHWM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/cslocker\/TestCSLocker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestDynamicNumberOfGCThreads.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestInitialGCThreadLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/Test2GbHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestAllocationFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsLog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsWithRefs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestG1TraceEagerReclaimHumongousObjects.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousAllocNearlyFullRegion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousCodeCacheRoots.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestInvalidateArrayCopy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestMarkStackSizes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestMixedGCLiveThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestOneEdenRegionAfterGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPLABOutput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPLABSizeBounds.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPeriodicLogMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPrintRegionRememberedSetInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemsetLoggingThreads.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemsetLoggingTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSharedArchiveWithPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkDefragmentedHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSkipRebuildRemsetPhase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerificationInConcurrentCycle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerifyGCType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/ClassLoaderGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/G1SampleClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestHumongousClassLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestHumongousNonArrayAllocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPErgo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPStatic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/logging\/TestG1LoggingFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/mixedgc\/TestLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/numa\/TestG1NUMATouchRegions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectsEvacuation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABEvacuationFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/lib\/PLABUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestDeprecatedPrintFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestGCId.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestMetaSpaceLog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestPrintReferences.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/CompressedClassSpaceSizeInJmapHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspaceSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestSizeTransitions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/serial\/HeapChangeLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressG1Humongous.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressG1Uncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithZ.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithZ.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationAgeThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationFullGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationInterned.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationPrintOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTableResize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationYoungGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/testlibrary\/Helpers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/whitebox\/TestWBGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestAlwaysPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestGarbageCollectorMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestMemoryMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestMemoryManagerMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestNoUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestPageCacheFlush.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestRelocateInPlace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestSmallHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestUncommit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestZForceDiscontiguousHeapReservations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/8176717\/TestInheritFD.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionUnloadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestOutOfMemoryDuringInit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,0 +66,7 @@\n+        if (Platform.isLinux()) {\n+          deprecated.addAll(\n+            Arrays.asList(new String[][] {\n+              {\"UseOprofile\", \"false\"}\n+            })\n+          );\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -74,0 +74,27 @@\n+    private static void testFailure(String forceAddressString) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-Xshare:off\", \/\/ to make CompressedClassSpaceBaseAddress work\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:CompressedClassSpaceBaseAddress=\" + forceAddressString,\n+                \"-Xmx128m\",\n+                \"-Xlog:metaspace*\",\n+                \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        output.reportDiagnosticSummary();\n+\n+        \/\/ We ignore cases where we were not able to map at the force address\n+        if (!output.contains(\"Successfully forced class space address to \" + forceAddressString)) {\n+            throw new SkippedException(\"Skipping because we cannot force ccs to \" + forceAddressString);\n+        }\n+\n+        if (Platform.isAArch64()) {\n+            output.shouldHaveExitValue(1);\n+            output.shouldContain(\"Error occurred during initialization of VM\");\n+            output.shouldContain(\"CompressedClassSpaceBaseAddress=\" + forceAddressString +\n+                                 \" given with shift 0, cannot be used to encode class pointers\");\n+        } else {\n+            output.shouldHaveExitValue(0);\n+        }\n+    }\n+\n@@ -126,0 +153,4 @@\n+\n+        \/\/ Test failure for -XX:CompressedClassBaseAddress and -Xshare:off\n+        testFailure(\"0x0000040001000000\");\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointersEncodingScheme.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/UncaughtNativeExceptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/LoadLibrary\/TestSunBootLibraryPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/Shutdown\/ShutdownTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestThreadDumpClassInitMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/Unsafe\/InternalErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/TestCDSVMCrash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        \/\/ run with archive\n+        \/\/ run with archive; make sure the lambda is loaded from the archive\n@@ -66,1 +66,1 @@\n-            .addPrefix(\"-cp\", appJar)\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load\")\n@@ -71,0 +71,1 @@\n+        output.shouldMatch(\"LambdaInvokeVirtualApp[$][$]Lambda\/.*source: shared objects file\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaInvokeVirtual.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ProhibitedPackage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestDumpClassListSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/ArchivedIntegerCacheTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/CheckIntegerCacheApp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/MainModuleOnly.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCDuringDumpTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/MainModuleOnly.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/OptimizeModuleHandlingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/CFLH\/ClassFileLoadHook.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/SimpleAgent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/DynamicLoaderConstraintsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/IncompatibleOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/ResolvedReferencesNotNullTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsHumongous.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClassesForSubgraphs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FindClass\/FindClassFromBoot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FindClassUtf8\/FindClassUtf8.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/atExit\/TestAtExit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedJniExceptionCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedReleaseArrayElements.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/nativeStack\/TestNativeStack.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/registerNativesWarning\/TestRegisterNativesWarning.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/MonitorInflationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/RedefineClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/THPsInThreadStackPreventionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDetection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack004.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack017.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack018.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/stack\/Stack019.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/stringtable\/StringTableCleaningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/whitebox\/TestWBDeflateIdleMonitors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/sanity\/BasicVMTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CodeCacheTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerDirectivesDCMDTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerMemoryStatisticTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/framework\/VMVersionTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSharedClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestLambdaFormRetransformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestRedefineWithUnresolvedClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadMonitorTest\/VThreadMonitorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestG1HeapRegion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestObjectAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-# Exclude files that need '--enable-preview' to compile.\n-LIB_FILES = $(filter-out %ModuleInfoWriter.java, $(shell find $(TESTLIBRARY_DIR)\/jdk\/test\/lib\/ \\\n+# Must exclude files that need '--enable-preview' to compile, if there is any.\n+LIB_FILES = $(shell find $(TESTLIBRARY_DIR)\/jdk\/test\/lib\/ \\\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/Makefile","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/Compiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,0 @@\n-\n@@ -177,0 +176,7 @@\n+\n+        boolean allowZeroClassCount = Boolean.getBoolean(\"sun.hotspot.tools.ctw.allow_zero_class_count\");\n+        if (allowZeroClassCount && totalClassCount == 0L) {\n+            System.out.println(\"WARN: \" + target + \"(at \" + targetPath + \") has no classes. Ignoring.\");\n+            return;\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/IRExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/NormalTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestAccessModifiers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBasics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCheckedTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/UnloadingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/PhantomReference\/phantom001\/phantom001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/WeakReference\/weak006\/weak006.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_0_1\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_10_20\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_70_80\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_99_100\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/HeapOOMEException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingByFillingMetaspace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingWithWhiteBox.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressHierarchy\/common\/StressHierarchyBaseClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/clear\/clear003\/clear003.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/clear\/clear004\/clear004.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/use\/use001\/use001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/Agent_OnUnload\/agentonunload001\/TestDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/general_functions\/GF08\/gf08t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/multienv\/MA02\/ma02t001\/TestDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+static int waitSuspended(const char* kind);\n@@ -128,1 +129,1 @@\n-            \/* check if all threads suspended on THREAD_START events *\/\n+            \/* check if all THREAD_START events are generated *\/\n@@ -136,0 +137,5 @@\n+            \/* wait until all threads are suspended *\/\n+            if (!NSK_VERIFY(waitSuspended(\"starting\"))) {\n+                return;\n+            }\n+\n@@ -178,1 +184,1 @@\n-            \/* check ia all threads suspended on THREAD_END event *\/\n+            \/* check if all THREAD_END event are generated *\/\n@@ -186,0 +192,5 @@\n+            \/* wait until all threads are suspended *\/\n+            if (!NSK_VERIFY(waitSuspended(\"finishing\"))) {\n+                return;\n+            }\n+\n@@ -213,0 +224,25 @@\n+static int waitSuspended(const char* kind) {\n+    NSK_DISPLAY1(\"Wait for %s threads to be suspended\\n\", kind);\n+    for (int i = 0; i < THREADS_COUNT; i++) {\n+        for (int j = 0; j * TIMEOUT_DELTA < timeout; j++) {\n+            jint state = 0;\n+            if (!NSK_JVMTI_VERIFY(jvmti->GetThreadState(threadsList[i], &state))) {\n+                nsk_jvmti_setFailStatus();\n+                break;\n+            }\n+            if ((state & JVMTI_THREAD_STATE_ALIVE) == 0) {\n+                NSK_COMPLAIN3(\"%s thread %s is not alive: %x\\n\", kind, threadsName[i], (int)state);\n+                nsk_jvmti_setFailStatus();\n+                break;\n+            }\n+            if ((state & JVMTI_THREAD_STATE_SUSPENDED) != 0) {\n+                NSK_DISPLAY2(\"  OK: %s thread %s is suspended\\n\", kind, threadsName[i]);\n+                break;\n+            }\n+            NSK_DISPLAY2(\"  %s thread %s is not suspended, waiting\\n\", kind, threadsName[i]);\n+            nsk_jvmti_sleep(TIMEOUT_DELTA);\n+        }\n+    }\n+    return NSK_TRUE;  \/\/ continue execution\n+}\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/sampling\/SP05\/sp05t003\/sp05t003.cpp","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/README","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/test\/Tests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/CodeCacheInfo\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/ProcessExecutor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/share\/FileUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-#  Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jaxp\/TEST.groups","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-   -:tier3\n+   -:tier3 \\\n+   :jdk_foreign_stress\n@@ -396,0 +397,4 @@\n+jdk_foreign_stress = \\\n+    java\/foreign\/TestMatrix.java \\\n+    java\/foreign\/TestUpcallStress.java\n+\n@@ -631,1 +636,1 @@\n-    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java\n+    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java \n","filename":"test\/jdk\/TEST.groups","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/build\/AbsPathsInImage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/AES\/TestAESCiphers\/Dynamic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGensLongKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/TLS\/TestMasterSecret.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/jdi\/BadAgentPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/jdi\/DoubleAgentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendNoFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8288109 8235786\n+ * @bug 8288109\n@@ -32,2 +32,0 @@\n-import com.sun.net.httpserver.Filter;\n-import com.sun.net.httpserver.HttpContext;\n@@ -38,1 +36,0 @@\n-import org.junit.jupiter.api.AfterAll;\n@@ -59,5 +56,3 @@\n-    private static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n-    private static final boolean ENABLE_LOGGING = true;\n-    private static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n-\n-    private static HttpServer server;\n+    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+    static final boolean ENABLE_LOGGING = true;\n+    static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n@@ -66,1 +61,1 @@\n-    public static void setup() throws Exception {\n+    public static void setup() {\n@@ -73,14 +68,0 @@\n-        server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n-        server.createContext(\"\/normal\", new AttribHandler());\n-        final HttpContext filteredCtx = server.createContext(\"\/filtered\", new AttribHandler());\n-        filteredCtx.getFilters().add(new AttributeAddingFilter());\n-        server.start();\n-        System.out.println(\"Server started at \" + server.getAddress());\n-    }\n-\n-    @AfterAll\n-    public static void afterAll() {\n-        if (server != null) {\n-            System.out.println(\"Stopping server \" + server.getAddress());\n-            server.stop(0);\n-        }\n@@ -89,3 +70,0 @@\n-    \/*\n-     * Verifies that HttpExchange.setAttribute() allows for null value.\n-     *\/\n@@ -93,3 +71,8 @@\n-    public void testNullAttributeValue() throws Exception {\n-        try (var client = HttpClient.newBuilder().proxy(NO_PROXY).build()) {\n-            var request = HttpRequest.newBuilder(uri(server, \"\/normal\", null)).build();\n+    public void testExchangeAttributes() throws Exception {\n+        var handler = new AttribHandler();\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10);\n+        server.createContext(\"\/\", handler);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n@@ -98,30 +81,2 @@\n-        }\n-    }\n-\n-    \/*\n-     * Verifies that an attribute set on one exchange is accessible to another exchange that\n-     * belongs to the same HttpContext.\n-     *\/\n-    @Test\n-    public void testSharedAttribute() throws Exception {\n-        try (var client = HttpClient.newBuilder().proxy(NO_PROXY).build()) {\n-            final var firstReq = HttpRequest.newBuilder(uri(server, \"\/filtered\", \"firstreq\"))\n-                    .build();\n-            System.out.println(\"issuing request \" + firstReq);\n-            final var firstResp = client.send(firstReq, HttpResponse.BodyHandlers.ofString());\n-            assertEquals(200, firstResp.statusCode());\n-\n-            \/\/ issue the second request\n-            final var secondReq = HttpRequest.newBuilder(uri(server, \"\/filtered\", \"secondreq\"))\n-                    .build();\n-            System.out.println(\"issuing request \" + secondReq);\n-            final var secondResp = client.send(secondReq, HttpResponse.BodyHandlers.ofString());\n-            assertEquals(200, secondResp.statusCode());\n-\n-            \/\/ verify that the filter was invoked for both the requests. the filter internally\n-            \/\/ does the setAttribute() and getAttribute() and asserts that the attribute value\n-            \/\/ set by the first exchange was available through the second exchange.\n-            assertTrue(AttributeAddingFilter.filteredFirstReq, \"Filter wasn't invoked for \"\n-                    + firstReq.uri());\n-            assertTrue(AttributeAddingFilter.filteredSecondReq, \"Filter wasn't invoked for \"\n-                    + secondReq.uri());\n+        } finally {\n+            server.stop(0);\n@@ -133,1 +88,1 @@\n-    static URI uri(HttpServer server, String path, String query) throws URISyntaxException {\n+    static URI uri(HttpServer server, String path) throws URISyntaxException {\n@@ -139,1 +94,0 @@\n-                .query(query)\n@@ -161,50 +115,0 @@\n-\n-    private static final class AttributeAddingFilter extends Filter {\n-\n-        private static final String ATTR_NAME =\"foo-bar\";\n-        private static final String ATTR_VAL =\"hello-world\";\n-        private static volatile boolean filteredFirstReq;\n-        private static volatile boolean filteredSecondReq;\n-\n-        @Override\n-        public void doFilter(final HttpExchange exchange, final Chain chain) throws IOException {\n-            if (exchange.getRequestURI().getQuery().contains(\"firstreq\")) {\n-                filteredFirstReq = true;\n-                \/\/ add a request attribute through the exchange, for this first request\n-                \/\/ and at the same time verify that the attribute doesn't already exist\n-                final Object attrVal = exchange.getAttribute(ATTR_NAME);\n-                if (attrVal != null) {\n-                    throw new IOException(\"attribute \" + ATTR_NAME + \" with value: \" + attrVal\n-                            + \" unexpectedly present in exchange: \" + exchange.getRequestURI());\n-                }\n-                \/\/ set the value\n-                exchange.setAttribute(ATTR_NAME, ATTR_VAL);\n-                System.out.println(exchange.getRequestURI() + \" set attribute \"\n-                        + ATTR_NAME + \"=\" + ATTR_VAL);\n-            } else if (exchange.getRequestURI().getQuery().contains(\"secondreq\")) {\n-                filteredSecondReq = true;\n-                \/\/ verify the attribute is already set and the value is the expected one.\n-                final Object attrVal = exchange.getAttribute(ATTR_NAME);\n-                if (attrVal == null) {\n-                    throw new IOException(\"attribute \" + ATTR_NAME + \" is missing in exchange: \"\n-                            + exchange.getRequestURI());\n-                }\n-                if (!ATTR_VAL.equals(attrVal)) {\n-                    throw new IOException(\"unexpected value: \" + attrVal + \" for attribute \"\n-                            + ATTR_NAME + \" in exchange: \" + exchange.getRequestURI());\n-                }\n-                System.out.println(exchange.getRequestURI() + \" found attribute \"\n-                        + ATTR_NAME + \"=\" + attrVal);\n-            } else {\n-                \/\/ unexpected request\n-                throw new IOException(\"unexpected request \" + exchange.getRequestURI());\n-            }\n-            \/\/ let the request proceed\n-            chain.doFilter(exchange);\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"AttributeAddingFilter\";\n-        }\n-    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ExchangeAttributeTest.java","additions":17,"deletions":113,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/ProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/TempDirTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        String INSTRUCTIONS = \"\"\"\n+        final String INSTRUCTIONS = \"\"\"\n@@ -52,1 +52,1 @@\n-                    is a default cursor.\n+                    is a text cursor.\n@@ -57,0 +57,2 @@\n+                4. Verify that the cursor changes to the wait cursor when in\n+                    the empty bottom section of the test window.\n@@ -64,1 +66,1 @@\n-                .columns(35)\n+                .columns(37)\n@@ -71,1 +73,1 @@\n-        JFrame frame = new JFrame();\n+        JFrame frame = new JFrame(\"Cursor Test Frame\");\n@@ -81,0 +83,1 @@\n+        j.setSize(200, 200);\n@@ -82,2 +85,2 @@\n-        frame.getContentPane().add(\"Center\", j);\n-        pane.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));\n+        frame.getContentPane().add(\"North\", j);\n+        pane.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n@@ -85,1 +88,1 @@\n-        frame.pack();\n+        frame.setSize(300, 200);\n@@ -99,1 +102,1 @@\n-        g.drawString(\"Default\", 20, 30);\n+        g.drawString(\"Text\", 20, 30);\n@@ -107,1 +110,1 @@\n-    public CursorBugPanel () {\n+    public CursorBugPanel() {\n","filename":"test\/jdk\/java\/awt\/Cursor\/JPanelCursorTest\/JPanelCursorTest.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/Desktop\/8064934\/bug8064934.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/LargeWindowPaintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/List\/ActionEventTest\/ActionEventTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/Toolkit\/DesktopProperties\/rfe4758438.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ActionEventTest\/ActionEventTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SystemTrayIconHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleComponentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/datatransfer\/SystemSelection\/SystemSelectionAWTTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/datatransfer\/SystemSelection\/SystemSelectionSwingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/dnd\/DropActionChangeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/event\/InputEvent\/ButtonArraysEquality\/ButtonArraysEquality.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/CheckGetMaskForButton\/CheckGetMaskForButton.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/im\/memoryleak\/InputContextMemoryLeakTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/AlphaPrintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintToDir.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/Util.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/othervm\/native\/manual\n+ * @run testng\/othervm\/native\n","filename":"test\/jdk\/java\/foreign\/TestMatrix.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestStubAllocFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestValueLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessDynamic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/handles\/Driver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/handles\/invoker_module\/handle\/invoker\/MethodHandleInvoker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestAsyncStackWalk.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestReentrantUpcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/io\/File\/TempDirDoesNotExist.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BadCanonicalCtrTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ProhibitedMethods.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialPersistentFieldsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @summary Class.getSimpleName() should work for non-JLS compliant class names\n@@ -28,0 +27,1 @@\n+ * @summary Class.getSimpleName() should work for non-JLS compliant class names\n","filename":"test\/jdk\/java\/lang\/Class\/getSimpleName\/GetSimpleNameTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/AnnotationsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/CloseRace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/shutdown\/ShutdownHooks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/StackWalker\/TestBCI.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/String\/StringRepeat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/StringBufferRepeat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/ParkALot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/AnnotationTypeMismatchTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/ArityTypeMismatchTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/ArrayTypeMismatchTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/EnumTypeMismatchTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationVerifier.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/annotation\/ClassFileGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n- * @enablePreview\n- * @comment The test uses asmlib\/Instrumentor.java which relies on ClassFile API PreviewFeature.\n@@ -90,1 +88,0 @@\n-                \"--enable-preview\", \/\/ due to usage of ClassFile API PreviewFeature in the agent\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixApp.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n- * @enablePreview\n- * @comment The test uses asmlib\/Instrumentor.java which relies on ClassFile API PreviewFeature.\n@@ -82,1 +80,0 @@\n-                \"--enable-preview\", \/\/ due to usage of ClassFile API PreviewFeature in the agent\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformApp.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/8022701\/MHIllegalAccess.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/BigArityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n- * @modules java.base\/java.lang:open\n@@ -27,0 +26,1 @@\n+ * @modules java.base\/java.lang:open\n","filename":"test\/jdk\/java\/lang\/invoke\/DefineClassTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/BasicTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/classData\/ClassDataTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleBaseByteArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestByteArrayView.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/accessProtectedSuper\/Test.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/BootstrapMethodJumboArgsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMInvocation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMValidationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyInterfaceWithOverpassMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNameValidationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNestedTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyRepeatFailedResolution.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyReturnPrimitiveTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyStaticArgumentsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyTypeValidationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyWithGarbageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyWrongType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @enablePreview\n+ * @build test.java.lang.invoke.lib.InstructionHelper\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/ConstantBootstrapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @comment Change enablePreview with the flag in setup's compileSources\n@@ -83,2 +81,1 @@\n-        compileSources(SRC_DIR, CLASSES_DIR, \"--enable-preview\",\n-                       \"--release\", Integer.toString(Runtime.version().feature()));\n+        compileSources(SRC_DIR, CLASSES_DIR);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/HiddenNestmateTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/PreviewHiddenClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules java.base\/jdk.internal.misc\n@@ -30,0 +29,1 @@\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/StaticInvocableTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAsm.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaStackTrace.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/SpecialStatic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/MemoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ConfigurationTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleFinderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/ModuleNamesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/module\/MultiReleaseJarTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/ref\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TestMissingTypeVariable.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/invoke\/TestPrivateInterfaceMethodReflect.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/IsRecordTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile\n","filename":"test\/jdk\/java\/lang\/runtime\/ExactnessConversionsSupportTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n- * @modules java.base\/jdk.internal.classfile\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/math\/BigInteger\/HashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/BodySubscribersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/GZIPInputStreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/MaxStreams.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/RedirectTimeoutTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ExpectContinueResetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PushPromiseContinuation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/HpackTestEncoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestExchangeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/SimpleSSLContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/Buffer\/LimitDirectMemory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8344882\n+ * @summary Deallocation failure for temporary buffers\n+ * @run junit\/othervm -XX:MaxDirectMemorySize=32768 UnmeteredTempBuffers\n+ *\/\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class UnmeteredTempBuffers {\n+    @ParameterizedTest\n+    @ValueSource(ints = {16384, 32768, 32769, 65536})\n+    void testFileChannel(int cap) throws IOException {\n+        Path file = Files.createTempFile(\"prefix\", \"suffix\");\n+        try (FileChannel ch = FileChannel.open(file, WRITE, DELETE_ON_CLOSE)) {\n+            ByteBuffer buf = ByteBuffer.wrap(new byte[cap]);\n+            try {\n+                ch.write(buf);\n+            } catch (OutOfMemoryError oome) {\n+                throw new RuntimeException(oome);\n+            }\n+        }  finally {\n+            Files.deleteIfExists(file);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {16384, 32768, 32769, 65536})\n+    void testInputStream(int cap) throws IOException {\n+        Path file = Files.createTempFile(\"prefix\", \"suffix\");\n+        try {\n+            byte[] bytes = new byte[cap];\n+            Files.write(file, bytes);\n+            try (InputStream in = Files.newInputStream(file)) {\n+                in.read(bytes);\n+            } catch (OutOfMemoryError oome) {\n+                throw new RuntimeException(oome);\n+            }\n+        }  finally {\n+            Files.delete(file);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/Buffer\/UnmeteredTempBuffers.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SelectWhenRefused.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/WakeupNow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/security\/KeyStore\/CheckMacOSKeyChainTrust.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageFormatExceptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/HijrahConfigTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle, Inc. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle, Inc. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Arrays\/HashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Currency\/PropertiesTestRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Locale\/UseOldISOCodesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -28,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/BadProvidersTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/concurrent\/StructuredTaskScope\/WithScopedValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/concurrent\/SynchronousQueue\/Fairness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/prefs\/CheckUserPrefsStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GathererAPITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GathererTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GatherersFoldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GatherersMapConcurrentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GatherersScanTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GatherersWindowFixedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/GatherersWindowSlidingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/WhileOpStatefulTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/zip\/DataDescriptorIgnoreCrcAndSizeFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamAvailable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/DeleteTempJarTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/imageio\/metadata\/IIOMetadataFormat\/MetadataFormatThreadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/loading\/MissingClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/sound\/midi\/File\/SMFInterruptedRunningStatus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/sound\/sampled\/Lines\/GetLine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/bug5049549.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/swing\/JFrame\/JFrameBackgroundRefreshTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-        robot.setAutoDelay(200);\n+        robot.setAutoDelay(100);\n@@ -84,0 +84,1 @@\n+                robot.delay(1000);\n@@ -88,0 +89,2 @@\n+                robot.waitForIdle();\n+                robot.delay(100);\n@@ -101,0 +104,2 @@\n+                robot.waitForIdle();\n+                robot.delay(100);\n@@ -103,1 +108,2 @@\n-                \/\/ if the right\/bottom side of splitpane already has focus, and it is contained within another splitpane\n+                \/\/ if the right\/bottom side of splitpane already has focus,\n+                \/\/ and it is contained within another splitpane\n@@ -115,0 +121,3 @@\n+                robot.waitForIdle();\n+                robot.delay(100);\n+\n@@ -127,0 +136,2 @@\n+                robot.waitForIdle();\n+                robot.delay(100);\n@@ -140,1 +151,2 @@\n-                    throw new RuntimeException(\"Test failed, verifiers \" + failedVerifiers.toString() + \" failed for \" + laf);\n+                    throw new RuntimeException(\"Test failed, verifiers \"\n+                                 + failedVerifiers.toString() + \" failed for \" + laf);\n@@ -162,1 +174,2 @@\n-        robot.mouseMove(buttonLoc.x + 8, buttonLoc.y + 8);\n+        robot.mouseMove(buttonLoc.x + button.getWidth() \/ 2,\n+                        buttonLoc.y + button.getHeight() \/ 2);\n@@ -168,1 +181,1 @@\n-        frame = new JFrame();\n+        frame = new JFrame(\"JSplitPaneKeyboardNavigationTest\");\n@@ -178,2 +191,4 @@\n-        final JSplitPane splitPane2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true, rightButton1, rightButton2);\n-        final JSplitPane splitPane1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, leftButton, splitPane2);\n+        final JSplitPane splitPane2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n+                                                     true, rightButton1, rightButton2);\n+        final JSplitPane splitPane1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,\n+                                                     true, leftButton, splitPane2);\n@@ -184,1 +199,0 @@\n-        frame.pack();\n@@ -216,1 +230,0 @@\n-            frame = null;\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/4164779\/JSplitPaneKeyboardNavigationTest.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268145\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"mac\")\n+ * @summary Verify rendering artifact is not seen moving caret inside\n+ *          JTable with TableCellEditor having JTextField\n+ * @run main\/manual TestCaretArtifact\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.JTextField;\n+import javax.swing.table.TableCellEditor;\n+import javax.swing.table.TableColumn;\n+import javax.swing.SwingUtilities;\n+\n+public class TestCaretArtifact {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Double click on \"Click Here\" textfield so that textfield becomes editable;\n+        Press spacebar. Press left arrow button.\n+        Do this few times.\n+        If artifact is seen, press Fail else press Pass.\"\"\";\n+\n+    public static void  main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                .title(\"Caret Artifact Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(TestCaretArtifact::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+\n+    public static JFrame createUI()  {\n+        TableCellEditor editor = new TestEditor(new JTextField());\n+        JTable table = new JTable(new Object[][] {{\"click here\",\n+                \"inactive forever\"}},\n+                new Object[] {\"1\", \"2\"});\n+\n+        JFrame frame = new JFrame(\"CaretArtifact\");\n+        TableColumn column = table.getColumn(\"1\");\n+        column.setCellEditor(editor);\n+        frame.getContentPane().add(\"Center\", table);\n+        frame.setSize(400, 100);\n+\n+        return frame;\n+    }\n+\n+    static class TestEditor extends DefaultCellEditor {\n+        public TestEditor(JTextField tf) {\n+            super(tf);\n+        }\n+        public boolean stopCellEditing() {\n+            return false;\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JTable\/TestCaretArtifact.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/swing\/ProgressMonitor\/ProgressMonitorEscapeKeyPress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationModelTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8335927\n+ * @bug 8335927 8345773\n@@ -125,2 +125,1 @@\n-        var out = new StringBuilder();\n-        ClassPrinter.toYaml(getClassModel(), ClassPrinter.Verbosity.TRACE_ALL, out::append);\n+        var out = getClassModel().toDebugString();\n@@ -907,1 +906,1 @@\n-    private static void assertOut(StringBuilder out, String expected) {\n+    private static void assertOut(CharSequence out, String expected) {\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/LowJCovAttributeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/LowModuleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/ModuleBuilderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-                    List<String> flags = List.of(\n-                            \"--source\", String.valueOf(Runtime.version().feature()));\n+                    List<String> flags = List.of();\n","filename":"test\/jdk\/jdk\/classfile\/SnippetsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-enablePreview = true\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ModuleExamples.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryMemoryLeakTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryRetentionTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/internal\/jline\/AbstractWindowsTerminalTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/internal\/jline\/KeyConversionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/internal\/ref\/Cleaner\/ExitOnThrow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/reflect\/CallerSensitive\/CallerSensitiveFinder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/reflect\/CallerSensitive\/CheckCSMs.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/internal\/reflect\/CallerSensitive\/MissingCallerSensitive.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Scoped.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/streaming\/TestJVMExit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCompilerInlining.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCompilerPhase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestGarbageCollectionEventWithZMajor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestGarbageCollectionEventWithZMinor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestZOldGarbageCollectionEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestZYoungGarbageCollectionEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCPhaseConcurrent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZAllocationStallEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZPageAllocationEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZRelocationSetEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZRelocationSetGroupEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZUncommitEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZUnmapEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestDefNewAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestG1HumongousAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestG1OldAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestG1YoungAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestMarkSweepCompactAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestMetaspaceG1GCAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestMetaspaceParallelGCAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestMetaspaceSerialGCAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestParallelMarkSweepAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/stacktrace\/TestParallelScavengeAllocationPendingStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,0 @@\n- * @enablePreview\n- * @comment update --enable-preview in launchTest() too\n@@ -284,1 +282,0 @@\n-            \"--enable-preview\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestInstrumentation.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestZ.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSizeTFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestVMOperation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/jfr\/javaagent\/TestEventInstrumentation.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdPreserveRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+ * @requires vm.flagless\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartDuration.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,1 +7,0 @@\n-enablePreview = true\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/lambda\/TEST.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/jdk\/modules\/incubator\/ServiceBinding.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jni\/nullCaller\/NullCallerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/lib\/client\/ExtendedRobot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/performance\/client\/SwingMark\/src\/resources\/TextAreaTest.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/ColCvtAlphaDifferentSrcDst.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/ec\/InvalidCurve.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/ssl\/CertPathRestrictions\/TLSRestrictions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.Override;\n@@ -42,1 +43,1 @@\n-\n+import java.util.concurrent.CountDownLatch;\n@@ -55,0 +56,2 @@\n+ * Using SSLEngine allows the client to force the generation of the plaintext\n+ * alert messages.\n@@ -61,0 +64,1 @@\n+    private final CountDownLatch serverLatch;\n@@ -68,0 +72,1 @@\n+        serverLatch = new CountDownLatch(1);\n@@ -87,1 +92,0 @@\n-                socket.setSoTimeout(2000);\n@@ -99,0 +103,1 @@\n+                serverLatch.countDown();\n@@ -103,0 +108,1 @@\n+                serverException.printStackTrace();\n@@ -128,1 +134,0 @@\n-                    clientSocketChannel.socket().setSoTimeout(500);\n@@ -165,3 +170,1 @@\n-                    \/\/ Give server a chance to read before we shutdown via\n-                    \/\/ the try-with-resources block.\n-                    Thread.sleep(2000);\n+                    serverLatch.await();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLCipher\/SSLSocketNoServerHelloClientShutdown.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/IgnorableExceptionMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,1 @@\n+                \"-startdate\", \"-1M\",\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TsacertOptionTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/java.base\/sun\/security\/ec\/ECKeyPairGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/util\/RegisteredDomain\/ParseNames.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestProcessHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/JMapHeapConfigTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/sun\/tools\/jstatd\/JstatdTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jar\/InputFilesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jimage\/JImageNonAsciiNameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jimage\/JImageTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/DefaultProviderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/ExplodedModuleNameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jlink\/ImageFileCreatorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLink2Test.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkNegativeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkOptionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkPluginsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/ModuleNamesOrderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/NativeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/AddOptionsPluginTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CompressorPluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/GenerateJLIClassesPluginTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/IncludeLocalesPluginTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SaveJlinkArgfilesPluginTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StringSharingPluginTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StripJavaDebugAttributesPluginTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/tools\/jlink\/plugins\/VendorInfoPluginsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CommandArguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *           8274781\n+ *           8274781 8345664\n@@ -53,0 +53,11 @@\n+        checkOutput(\"pkg\/package-summary.html\", true,\n+                \"\"\"\n+                    Qualified Link: <a href=\"C.InnerC.html\" title=\"class in pkg\"><code>C.InnerC<\/code><\/a>.<br\/>\n+                     Unqualified Link1: <a href=\"C.InnerC.html\" title=\"class in pkg\"><code>C.InnerC<\/code><\/a>.<br\/>\n+                     Unqualified Link2: <a href=\"C.InnerC.html\" title=\"class in pkg\"><code>C.InnerC<\/code><\/a>.<br\/>\n+                     Qualified Link: <a href=\"C.html#method(pkg.C.InnerC,pkg.C.InnerC2)\"><code>C.method(pkg.\\\n+                    C.InnerC, pkg.C.InnerC2)<\/code><\/a>.<br\/>\n+                     Unqualified Link: <a href=\"C.html#method(pkg.C.InnerC,pkg.C.InnerC2)\"><code>C.method(C.InnerC, C.InnerC2)<\/code><\/a>.<br\/>\n+                     Unqualified Link: <a href=\"C.html#method(pkg.C.InnerC,pkg.C.InnerC2)\"><code>C.method(InnerC, InnerC2)<\/code><\/a>.<br\/>\n+                     Link w\/o Signature: <a href=\"C.html#method(pkg.C.InnerC,pkg.C.InnerC2)\"><code>C.method(C.InnerC, C.InnerC2)<\/code><\/a>.<br\/>\n+                     Package Link: <a href=\"package-summary.html\"><code>pkg<\/code><\/a>.<br\/>\"\"\");\n@@ -62,0 +73,1 @@\n+                     Link w\/o Signature: <a href=\"#method(pkg.C.InnerC,pkg.C.InnerC2)\"><code>method(C.InnerC, C.InnerC2)<\/code><\/a>.<br\/>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkTaglet\/TestLinkTaglet.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-                     <a href=\"..\/..\/..\/..\/m1\/com\/m1\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(java.lang.String)<\/code><\/a>\n+                     <a href=\"..\/..\/..\/..\/m1\/com\/m1\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(String)<\/code><\/a>\n@@ -113,1 +113,1 @@\n-                     interface in com.m1.lib\" class=\"external-link\"><code>Lib.method(java.lang.String)<\/code><\/a>\n+                     interface in com.m1.lib\" class=\"external-link\"><code>Lib.method(String)<\/code><\/a>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkTaglet\/TestLinkTagletWithModule.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * Link w\/o Signature: {@link #method}.<br\/>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkTaglet\/pkg\/C.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      6758050 8025633 8182765\n+ * @bug      6758050 8025633 8182765 8345664\n@@ -52,2 +52,1 @@\n-                <div class=\"block\">Contains <a href=\"#foo(java.util.Map)\"><code>foo(java.util.Ma\\\n-                p&lt;A, java.util.Map&lt;A, A&gt;&gt;)<\/code><\/a><\/div>\"\"\");\n+                    <div class=\"block\">Contains <a href=\"#foo(java.util.Map)\"><code>foo(Map)<\/code><\/a><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNestedGenerics\/TestNestedGenerics.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-                    <li><a href=\"..\/..\/..\/..\/m1\/com\/m1\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(java.lang.String)<\/code><\/a><\/li>\n+                    <li><a href=\"..\/..\/..\/..\/m1\/com\/m1\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(String)<\/code><\/a><\/li>\n@@ -88,1 +88,1 @@\n-                    <li><a href=\"..\/..\/..\/..\/m2\/com\/m2\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(java.lang.String)<\/code><\/a><\/li>\n+                    <li><a href=\"..\/..\/..\/..\/m2\/com\/m2\/lib\/Lib.html#method(java.lang.String)\"><code>Lib.method(String)<\/code><\/a><\/li>\n@@ -118,1 +118,1 @@\n-                    interface in com.m1.lib\" class=\"external-link\"><code>Lib.method(java.lang.String)<\/code><\/a><\/li>\n+                    interface in com.m1.lib\" class=\"external-link\"><code>Lib.method(String)<\/code><\/a><\/li>\n@@ -126,1 +126,1 @@\n-                    interface in com.m2.lib\" class=\"external-link\"><code>Lib.method(java.lang.String)<\/code><\/a><\/li>\n+                    interface in com.m2.lib\" class=\"external-link\"><code>Lib.method(String)<\/code><\/a><\/li>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTagWithModule.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckResourceKeys.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/4241573\/T4241573.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/7003595\/T7003595.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/7153958\/CPoolRefClassContainingInlinedCts.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/7166455\/CheckACC_STRICTFlagOnclinitTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/8000518\/DuplicateConstantPoolEntry.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/8005931\/CheckACC_STRICTFlagOnPkgAccessClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/8009170\/RedundantByteCodeInArrayTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnnotationTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnonymousClass.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * {@code jdk.internal.classfile} library. It iterates over the methods\n+ * {@code java.lang.classfile} library. It iterates over the methods\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/ClassFileVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/Constructors.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/EnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/InstanceMethods.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LambdaTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LegacyOutputTest\/LegacyOutputTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LocalClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/MemberClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/StaticMethods.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/UncommonParamNames.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.code\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n","filename":"test\/langtools\/tools\/javac\/MethodParametersTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n@@ -66,0 +64,1 @@\n+                \"java.lang.classfile\",\n","filename":"test\/langtools\/tools\/javac\/NoStringToLower.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/TestIndyStringConcat.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypeSignatures.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypes.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/access\/Test.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/T6695379\/AnnotationsAreNotCopiedToBridgeMethodsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T6970173\/DebugPointerAtBadPositionTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T7008643\/InlinedFinallyConfuseDebuggersTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/T7053059\/DoubleCastTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,2 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T7093325.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/T7165659\/InnerClassAttrMustNotHaveStrictFPFlagTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n@@ -72,5 +70,5 @@\n-        \"jdk.internal.classfile\",\n-        \"jdk.internal.classfile.attribute\",\n-        \"jdk.internal.classfile.constantpool\",\n-        \"jdk.internal.classfile.instruction\",\n-        \"jdk.internal.classfile.components\",\n+        \"java.lang.classfile\",\n+        \"java.lang.classfile.attribute\",\n+        \"java.lang.classfile.constantpool\",\n+        \"java.lang.classfile.instruction\",\n+        \"java.lang.classfile.components\",\n","filename":"test\/langtools\/tools\/javac\/T8003967\/DetectMutableStaticFields.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n@@ -146,3 +144,0 @@\n-                \"--enable-preview\",\n-                \"--source\", String.valueOf(Runtime.version().feature()),\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\",\n","filename":"test\/langtools\/tools\/javac\/T8010737\/ParameterNamesAreNotCopiedToAnonymousInitTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/T8011181\/EmptyUTF8ForInnerClassNameTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/T8019486\/WrongLNTForLambdaTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/T8022186\/DeadCodeGeneratedForEmptyTryTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/T8024039\/NoDeadCodeGenerationOnTrySmtTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/T8028504\/DontGenerateLVTForGNoneOpTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.code\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n","filename":"test\/langtools\/tools\/javac\/T8180141\/MissingLNTEntryForBreakContinueTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.code\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n","filename":"test\/langtools\/tools\/javac\/T8180660\/MissingLNTEntryForFinalizerTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,3 +27,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/T8187805\/BogusRTTAForUnusedVarTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T8203892\/CheckTargetIsNotAddedAsMarkerInterfaceTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T8209173\/CodeCompletionExceptTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/T8210435\/NoLocalsMustBeReservedForDCEedVarsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/T8222949\/TestConstantDynamic.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrSimpleClose.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/SyntheticParameters.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -644,0 +643,1 @@\n+                .processors(new TestAP())\n@@ -645,1 +645,0 @@\n-                        \"-processor\", TestAP.class.getName(),\n","filename":"test\/langtools\/tools\/javac\/annotations\/parameter\/ParameterAnnotations.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334756\n+ * @summary javac crashes on call to non-existent generic method with explicit annotated type arg\n+ * @compile\/fail\/ref=CrashOnNonExistingMethodTest.out -XDrawDiagnostics -XDdev CrashOnNonExistingMethodTest.java\n+ *\/\n+\n+import static java.lang.annotation.ElementType.TYPE_USE;\n+import java.lang.annotation.Target;\n+\n+class CrashOnNonExistingMethodTest {\n+    @Target(TYPE_USE)\n+    @interface Nullable {}\n+\n+    static <T extends @Nullable Object> T identity(T t) {\n+        return t;\n+    }\n+\n+    static void test() {\n+        CrashOnNonExistingMethodTest.<@Nullable Object>nonNullIdentity(null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/CrashOnNonExistingMethodTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CrashOnNonExistingMethodTest.java:20:37: compiler.err.cant.resolve.location.args.params: kindname.method, nonNullIdentity, java.lang.Object, compiler.misc.type.null, (compiler.misc.location: kindname.class, CrashOnNonExistingMethodTest, null)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/CrashOnNonExistingMethodTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/VariablesDeclaredWithVarTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnonymousClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest1.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest2.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -30,1 +29,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest3.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/DeadCode.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/InstanceInitializer.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NewTypeArguments.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NoTargetAnnotations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Scopes.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/StaticInitializer.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/SyntheticParameters.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008762.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008769.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8010015.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n- *\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestAnonInnerClasses.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestNewCastArray.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeAnnotationPropagationTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeCasts.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Wildcards.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassExtends.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassTypeParam.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ConstructorInvocationTypeArgument.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Constructors.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ExceptionParameters.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Fields.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/FromSpecification.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Initializers.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Lambda.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodInvocationTypeArgument.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodParameters.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReceivers.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReturns.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodThrows.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodTypeParam.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MultiCatch.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NestedTypes.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/RepeatingTypeAnnotations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ResourceVariable.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeCasts.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeTests.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -30,1 +30,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- *  @enablePreview\n- *  @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/EnclosingMethod\/EnclosingMethodTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/MultipleRecordPatterns.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/RuleSwitchBreaks.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/StringSwitchBreaks.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,2 +5,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/T8050993.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/T8314275.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTableTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTypeTableTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleFlagTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ConstructorTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/EnumTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ExceptionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/FieldTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/InnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodParameterTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodTypeBoundTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ReturnTypeTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/AnonymousClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/InnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/LocalClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/MixTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/ModuleInfoTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/NoSourceFileAttribute.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SyntheticClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/TopLevelClassesOneFileTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassConstructorsTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassMembersTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateSiblingsTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AssertFieldTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodForGenericMethodTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n- * @compile --enable-preview --source ${jdk.version} --target ${jdk.version}\n- *          SyntheticTestDriver.java\n+ * @compile SyntheticTestDriver.java\n@@ -39,1 +38,1 @@\n- * @run main\/othervm --enable-preview SyntheticTestDriver BridgeMethodsForLambdaTargetRelease14Test\n+ * @run main SyntheticTestDriver BridgeMethodsForLambdaTargetRelease14Test\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTargetRelease14Test.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/EnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/PackageInfoTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/ThisFieldTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForGenericMethodTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerAnnotationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerClassTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerEnumTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerInterfaceTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForTopLevelClassTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForGenericMethodTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForLambdaTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedPackageTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerEnumTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerEnumTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesIndexTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerEnumTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumsInInnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerClassTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerEnumTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/NoInnerClassesTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/classreader\/8171132\/BadConstantValue.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @enablePreview\n@@ -102,3 +101,1 @@\n-                .options(\"--enable-preview\",\n-                         \"-source\", String.valueOf(Runtime.version().feature()),\n-                         \"-verbose\", \"-parameters\", \"-processor\", P.class.getName())\n+                .options(\"-verbose\", \"-parameters\", \"-processor\", P.class.getName())\n","filename":"test\/langtools\/tools\/javac\/classreader\/BadMethodParameter.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n@@ -38,1 +37,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/code\/CharImmediateValue.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/constDebug\/ConstDebugTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/BadClassfile.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/CheckACC_STRICTFlagOnDefaultMethodTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestDefaultBody.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestNoBridgeOnDefaults.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/super\/TestDirectSuperInterfaceInvoke.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,11 +296,0 @@\n-            \/\/ hack to automatically add exports; a better solution would be to grep the\n-            \/\/ source for import statements or a magic comment\n-            for (File pf: procFiles) {\n-                if (pf.getName().equals(\"CreateBadClassFile.java\")) {\n-                    pOpts.add(\"--enable-preview\");\n-                    pOpts.add(\"--source\");\n-                    pOpts.add(String.valueOf(Runtime.version().feature()));\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.impl=ALL-UNNAMED\");\n-                }\n-            }\n-\n","filename":"test\/langtools\/tools\/javac\/diags\/Example.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadConstantValueType\/BadConstantValueType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidDefaultInterface\/InvalidDefaultInterface.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidStaticInterface\/InvalidStaticInterface.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/expression\/_super\/NonDirectSuper\/NonDirectSuper.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkArchiveTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkShortNameTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @enablePreview\n@@ -34,1 +33,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/flow\/LVTHarness.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.code\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n","filename":"test\/langtools\/tools\/javac\/generics\/bridges\/BridgeHarness.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/importscope\/T8193717.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/jvm\/ClassRefDupInConstantPoolTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaTestStrictFPFlag.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/lambda\/LocalVariableTable.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestBootstrapMethodsCount.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestInvokeDynamic.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,2 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecode.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,2 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecodeTargetRelease14.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n@@ -29,1 +28,0 @@\n- *     java.base\/jdk.internal.classfile.impl\n@@ -69,1 +67,0 @@\n-import jdk.internal.classfile.impl.BootstrapMethodEntryImpl;\n@@ -159,1 +156,1 @@\n-                if (((BootstrapMethodEntryImpl) b).bootstrapMethod().asSymbol().methodName().equals(\"metafactory\")) {\n+                if (b.bootstrapMethod().asSymbol().methodName().equals(\"metafactory\")) {\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaNaming\/TestNonSerializableLambdaNameStability.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -57,1 +56,0 @@\n-            .vmOptions(\"--enable-preview\", \"--source\", String.valueOf(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/launcher\/GetResourceTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n@@ -570,1 +568,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows no-param main\n+    @Test\n@@ -578,1 +576,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows non-public main\n+    @Test\n@@ -586,1 +584,1 @@\n-    \/\/@Test temporary disabled as enabled preview allows non-static main\n+    @Test\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,1 @@\n- * $ java \\\n- *      --enable-preview\n- *      \/path\/to\/CLTest.java\n+ * $ java \/path\/to\/CLTest.java\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/p\/q\/CLTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/ConditionalLineNumberTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/FinallyLineNumberTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @enablePreview\n@@ -24,2 +23,2 @@\n-        if (line != 50) {\n-            error(String.format(\"LineNumberTable contains wrong line number - expected %d, found %d\", 50, line));\n+        if (line != 49) {\n+            error(String.format(\"LineNumberTable contains wrong line number - expected %d, found %d\", 49, line));\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NestedLineNumberTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @enablePreview\n@@ -39,7 +38,7 @@\n-                new SimpleEntry<>(25, 0),\n-                new SimpleEntry<>(26, 4),\n-                new SimpleEntry<>(28, 9),\n-                new SimpleEntry<>(29, 16),\n-                new SimpleEntry<>(30, 32),\n-                new SimpleEntry<>(31, 46),\n-                new SimpleEntry<>(32, 52)\n+                new SimpleEntry<>(24, 0),\n+                new SimpleEntry<>(25, 4),\n+                new SimpleEntry<>(27, 9),\n+                new SimpleEntry<>(28, 16),\n+                new SimpleEntry<>(29, 32),\n+                new SimpleEntry<>(30, 46),\n+                new SimpleEntry<>(31, 52)\n@@ -56,2 +55,2 @@\n-                                       se.getLineNumber() == 30)) {\n-                throw new AssertionError(\"Should go through line 30!\");\n+                                       se.getLineNumber() == 29)) {\n+                throw new AssertionError(\"Should go through line 29!\");\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NullCheckLineNumberTest.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/meth\/TestCP.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/modules\/IncubatingTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/modules\/ModuleVersion.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -31,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/multicatch\/7005371\/T7005371.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/multicatch\/Pos05.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n@@ -35,1 +33,1 @@\n- * @compile -J--enable-preview -processor Annotations -proc:only Annotations.java\n+ * @compile -processor Annotations -proc:only Annotations.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/Annotations.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableTable.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPatternVariablesBytecode.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoUnnecessaryCast.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/platform\/ModuleVersionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/platform\/VerifyCTSymClassFiles.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -105,3 +104,0 @@\n-                                              \"--enable-preview\",\n-                                              \"--source\",\n-                                              \"\" + System.getProperty(\"java.specification.version\"),\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewErrors.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestFileObjectOf.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestOrigin.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @enablePreview\n@@ -37,1 +36,0 @@\n- *      java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/records\/RecordsBinaryCompatibilityTests.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/AnnotationRecovery.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/FlowRecovery.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/LambdaRecovery.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -32,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/recovery\/MethodModifiers.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/resolve\/NoObjectToString.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/sealed\/BinaryCompatibilityTests.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.code\n+ * @modules jdk.compiler\/com.sun.tools.javac.code\n","filename":"test\/langtools\/tools\/javac\/sealed\/CheckSubtypesOfSealedTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/sym\/ElementStructureTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,1 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/varargs\/6199075\/T6199075.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -31,2 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile.impl\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n","filename":"test\/langtools\/tools\/javac\/varargs\/7042566\/T7042566.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/T6716452.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/TestClassNameWarning.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/UndefinedAccessFlagTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/VerificationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n- * @enablePreview\n- * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javap\/classfile\/6888367\/T6888367.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/classfile\/T6887895.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/classfile\/deps\/T6907575.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/JSR175Annotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/NewArray.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Presence.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/PresenceInner.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/TypeCasts.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Visibility.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Wildcards.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib-test\/jdk\/test\/lib\/RandomGeneratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/ProcessToolsExecuteLimitedTestJavaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/CPUInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/GCHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadPinner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/Compiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/CallerClassBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Characters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ObjectHashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringIndexOf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-@Fork(jvmArgs = \"--enable-preview\", value = 1)\n+@Fork(value = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/classfile\/TypeKindBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-@Fork(jvmArgs = \"--enable-preview\", value = 3)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/classfile\/Utf8EntryWriteTo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromSliceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadVirtual.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CriticalCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,4 +58,4 @@\n-    private AbstractMemorySegmentImpl singleByteSegment;\n-    private AbstractMemorySegmentImpl singleByteSegmentMisaligned;\n-    private AbstractMemorySegmentImpl doubleByteSegment;\n-    private AbstractMemorySegmentImpl quadByteSegment;\n+    private MemorySegment singleByteSegment;\n+    private MemorySegment singleByteSegmentMisaligned;\n+    private MemorySegment doubleByteSegment;\n+    private MemorySegment quadByteSegment;\n@@ -69,3 +69,3 @@\n-        singleByteSegment = (AbstractMemorySegmentImpl) arena.allocate((size + 1L) * Byte.BYTES);\n-        doubleByteSegment = (AbstractMemorySegmentImpl) arena.allocate((size + 1L) * Short.BYTES);\n-        quadByteSegment = (AbstractMemorySegmentImpl) arena.allocate((size + 1L) * Integer.BYTES);\n+        singleByteSegment = arena.allocate((size + 1L) * Byte.BYTES);\n+        doubleByteSegment = arena.allocate((size + 1L) * Short.BYTES);\n+        quadByteSegment = arena.allocate((size + 1L) * Integer.BYTES);\n@@ -82,1 +82,1 @@\n-        singleByteSegmentMisaligned = (AbstractMemorySegmentImpl) arena.allocate(singleByteSegment.byteSize() + 1).\n+        singleByteSegmentMisaligned = arena.allocate(singleByteSegment.byteSize() + 1).\n@@ -109,1 +109,1 @@\n-        return StringSupport.strlenByte(singleByteSegment, 0, singleByteSegment.byteSize());\n+        return StringSupport.strlenByte((AbstractMemorySegmentImpl) singleByteSegment, 0, singleByteSegment.byteSize());\n@@ -114,1 +114,1 @@\n-        return StringSupport.strlenByte(singleByteSegmentMisaligned, 0, singleByteSegment.byteSize());\n+        return StringSupport.strlenByte((AbstractMemorySegmentImpl) singleByteSegmentMisaligned, 0, singleByteSegment.byteSize());\n@@ -119,1 +119,1 @@\n-        return StringSupport.strlenShort(doubleByteSegment, 0, doubleByteSegment.byteSize());\n+        return StringSupport.strlenShort((AbstractMemorySegmentImpl) doubleByteSegment, 0, doubleByteSegment.byteSize());\n@@ -124,1 +124,1 @@\n-        return StringSupport.strlenInt(quadByteSegment, 0, quadByteSegment.byteSize());\n+        return StringSupport.strlenInt((AbstractMemorySegmentImpl) quadByteSegment, 0, quadByteSegment.byteSize());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/InternalStrLen.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LinkUpcall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverOfAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/QSort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ToCStringTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/libToJavaString.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/PointerBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsAlloc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsDistance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,1 @@\n-@Fork(value = 10, warmups = 5, jvmArgs = {\n-        \"--enable-preview\"\n-})\n+@Fork(value = 10, warmups = 5)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LazyStaticColdStart.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/Wrappers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/proxy\/ProxyBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerCompareTo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerEquals.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerHashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Shared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/NetworkInterfaceLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketEventOverhead.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ThreadLocalParseUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBuffers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/MessageDigests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/PKCS12KeyStores.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/SSLHandshake.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/TestCertificates.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysSort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ListArgs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/StringJoinerBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Maps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/ref\/FindAny.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/AES.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/Crypto.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESGCMBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/BenchBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/CryptoBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-        \"--enable-preview\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AbstractCorpusBenchmark.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,3 +53,1 @@\n-@Fork(value = 1, jvmArgs = {\n-        \"--enable-preview\"})\n-\n+@Fork(value = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ClassfileBenchmark.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-        \"--enable-preview\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/CodeAttributeTools.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-@Fork(value = 1, jvmArgs = {\"--enable-preview\"})\n+@Fork(value = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ConstantPoolBuildingClassEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-@Fork(value = 1, jvmArgs = {\n-        \"--enable-preview\"})\n+@Fork(value = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n-        \"--enable-preview\"})\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RepeatedModelTraversal.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-        \"--enable-preview\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/ArrayMismatchBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/EqualsIgnoreCaseBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/GatherOperationsBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCastOperationsBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskedLogicOpts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MemorySegmentVectorAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RearrangeBytesBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RotateBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedIOOBEBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadSegmentVarious.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShorts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/VectorFPtoIntCastOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/preview\/patterns\/Exactness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/AllocationMerges.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/ClearMemory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/InterfaceCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubIdealC0Minus_YPlusC1_.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitCount.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReduction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReductionFloatingMinMax.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/overhead\/SimpleRepeatCompilation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/ConvertF2I.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/LeaInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/MicroLargePages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/lang\/LockUnlock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.runtime;\n+\n+import java.lang.invoke.*;\n+import java.lang.reflect.Constructor;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import org.openjdk.bench.util.InMemoryJavaCompiler;\n+\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 18, time = 5)\n+@Measurement(iterations = 10, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Threads(1)\n+@Fork(value = 2)\n+public class MethodHandleStress {\n+\n+    \/\/ The number of distinct classes generated from the source string below\n+    \/\/ All the classes are \"warmed up\" by invoking their methods to get compiled by the jit\n+    @Param({\"1000\"})\n+    public int classes;\n+\n+    \/\/ How many instances of each generated class to create and use in the measurement phase\n+    @Param({\"100\"})\n+    public int instances;\n+\n+    @Benchmark\n+    public Integer executeOne() throws Throwable {\n+        Class c = chooseClass();\n+        Object r = chooseInstance(c);\n+        MethodHandle m = prebindMethods.get(c).get(r);\n+        assert m != null;\n+        return callTheMethod(m, r);\n+    }\n+\n+    private Map<Class, Object[]> instancesOfClassMap = new HashMap<>();\n+    private Map<Class, Map<Object, MethodHandle>> prebindMethods = new ConcurrentHashMap<>();\n+\n+    private Class[] loadedClasses;\n+\n+    private class BenchLoader extends ClassLoader {\n+\n+        private static String classString(String name) {\n+            return \"public class \" + name + \" {\"\n+                    + \"    int instA = 0;\"\n+                    + \"    int getA() {\"\n+                    + \"        return instA;\"\n+                    + \"    }\"\n+                    + \"    public Integer get(Integer depth) throws Throwable {\"\n+                    + \"        return getA();\"\n+                    + \"    }\"\n+                    + \"}\";\n+        }\n+\n+        private Class<?> generateClass(String name) {\n+            byte[] classBytes = InMemoryJavaCompiler.compile(name, classString(name));\n+            return defineClass(name, classBytes, 0, classBytes.length);\n+        }\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void setupClasses() throws Exception {\n+        MethodHandleStress.BenchLoader loader = new MethodHandleStress.BenchLoader();\n+\n+        Object[] receivers1;\n+\n+        loadedClasses = new Class[classes];\n+\n+        MethodHandles.Lookup publicLookup = MethodHandles.publicLookup();\n+        MethodType generatedGetType = MethodType.methodType(Integer.class, Integer.class);\n+\n+        for (int i = 0; i < classes; i++) {\n+            Class<?> c = loader.generateClass(\"B\" + i);\n+            loadedClasses[i] = c;\n+\n+            Constructor<?>[] ca = c.getConstructors();\n+            assert ca.length == 1;\n+\n+            \/\/ Build the list of prebind MHs\n+            ConcurrentHashMap<Object, MethodHandle> prebinds = new ConcurrentHashMap<>();\n+\n+            receivers1 = new Object[instances];\n+            for (int j = 0; j < instances; j++) {\n+                Object inst= ca[0].newInstance();\n+                receivers1[j] = inst;\n+                MethodHandle mh = publicLookup.findVirtual(c, \"get\", generatedGetType);\n+                mh = mh.bindTo(inst);\n+                prebinds.put(inst, mh);\n+            }\n+            instancesOfClassMap.put(c, receivers1);\n+            prebindMethods.put(c, prebinds);\n+        }\n+\n+        \/\/ Warm up the methods\n+        for (int n = 0; n < classes; n++) {\n+            try {\n+                IntStream.range(0, 5000).parallel().forEach(x -> {\n+                    try {\n+                        executeOne();\n+                    } catch (Throwable e) {\n+                    }\n+                });\n+            } catch (Throwable e) {\n+                System.out.println(\"Exception = \" + e);\n+                e.printStackTrace();\n+                System.exit(-1);\n+            }\n+        }\n+\n+        System.gc();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    Class chooseClass() {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichClass = tlr.nextInt(classes);\n+        return loadedClasses[whichClass];\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    Object chooseInstance(Class c) {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichInst = tlr.nextInt(instances);\n+        return ((Object[]) instancesOfClassMap.get(c))[whichInst];\n+    }\n+\n+    static final Integer recurse = 1;\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    int callTheMethod(MethodHandle m, Object r) throws Throwable {\n+        return (Integer) m.invokeExact(recurse);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/runtime\/MethodHandleStress.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}