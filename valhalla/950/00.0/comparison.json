{"files":[{"patch":"@@ -69,4 +69,0 @@\n-    -tag beaninfo:X \\\n-    -tag since.unbundled:X \\\n-    -tag Note:X \\\n-    -tag ToDo:X \\\n","filename":"make\/Docs.gmk","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -699,1 +699,1 @@\n-    const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+    const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -701,1 +702,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n@@ -782,1 +783,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4151,1 +4151,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n@@ -4271,1 +4271,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -842,1 +842,1 @@\n-    const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+    const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n@@ -2042,1 +2042,1 @@\n-  const jint delta = -frame::interpreter_frame_monitor_size() * wordSize;\n+  const jint delta = -frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1089,1 +1089,1 @@\n-    const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+    const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3918,0 +3918,2 @@\n+  \/\/ Round to zero, 64-bit mode, exceptions masked\n+  StubRoutines::x86::_mxcsr_rz = 0x7F80;\n@@ -4010,3 +4012,1 @@\n-  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n-    StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n-  }\n+  StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -488,1 +489,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n@@ -577,1 +578,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4655,1 +4655,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n@@ -4768,1 +4768,1 @@\n-  const int entry_size = frame::interpreter_frame_monitor_size() * wordSize;\n+  const int entry_size = frame::interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1952,0 +1952,8 @@\n+    if (from_value == nullptr) {\n+      \/\/ We have reached here in a kotlin application running with JVMTI\n+      \/\/ capability \"can_access_local_variables\".\n+      \/\/ The illegal state is not yet propagated to this phi. Do it here.\n+      phi->make_illegal();\n+      \/\/ We can skip the illegal phi edge.\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1730,0 +1730,14 @@\n+\/*\n+ * Same as os::map_memory() but also pretouches if AlwaysPreTouch is enabled.\n+ *\/\n+char* map_memory(int fd, const char* file_name, size_t file_offset,\n+                 char *addr, size_t bytes, bool read_only,\n+                 bool allow_exec, MEMFLAGS flags = mtNone) {\n+  char* mem = os::map_memory(fd, file_name, file_offset, addr, bytes,\n+                             AlwaysPreTouch ? false : read_only,\n+                             allow_exec, flags);\n+  if (mem != nullptr && AlwaysPreTouch) {\n+    os::pretouch_memory(mem, mem + bytes);\n+  }\n+  return mem;\n+}\n@@ -1865,3 +1879,3 @@\n-    char* base = os::map_memory(_fd, _full_path, r->file_offset(),\n-                                requested_addr, size, r->read_only(),\n-                                r->allow_exec(), mtClassShared);\n+    char* base = map_memory(_fd, _full_path, r->file_offset(),\n+                            requested_addr, size, r->read_only(),\n+                            r->allow_exec(), mtClassShared);\n@@ -1893,2 +1907,2 @@\n-  char* bitmap_base = os::map_memory(_fd, _full_path, r->file_offset(),\n-                                     requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n+  char* bitmap_base = map_memory(_fd, _full_path, r->file_offset(),\n+                                 requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n@@ -2174,3 +2188,3 @@\n-  char* base = os::map_memory(_fd, _full_path, r->file_offset(),\n-                              addr, _mapped_heap_memregion.byte_size(), r->read_only(),\n-                              r->allow_exec());\n+  char* base = map_memory(_fd, _full_path, r->file_offset(),\n+                          addr, _mapped_heap_memregion.byte_size(), r->read_only(),\n+                          r->allow_exec());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/code\/vtableStubs.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2228,1 +2228,1 @@\n-    if (!task->is_success()) {\n+    if (!task->is_success() && !JVMCI::in_shutdown()) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-    Node* xor_res =  __ URShiftX ( __ XorX( cast,  __ CastPX(__ ctrl(), val)), __ ConI(HeapRegion::LogOfHRGrainBytes));\n+    Node* xor_res =  __ URShiftX ( __ XorX( cast,  __ CastPX(__ ctrl(), val)), __ ConI(checked_cast<jint>(HeapRegion::LogOfHRGrainBytes)));\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -620,4 +620,1 @@\n-    resolved_klass = SystemDictionary::resolve_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n-    if (resolved_klass == nullptr) {\n-      JVMCI_THROW_MSG_NULL(NoClassDefFoundError, str);\n-    }\n+    resolved_klass = SystemDictionary::resolve_or_fail(class_name, class_loader, protection_domain, true, CHECK_NULL);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -822,1 +822,1 @@\n-  static_field(HeapRegion, LogOfHRGrainBytes, int)\n+  static_field(HeapRegion, LogOfHRGrainBytes, uint)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,0 @@\n-  assert(loader_data == ClassLoaderData::the_null_class_loader_data(), \"array classes belong to null loader\");\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2927,1 +2927,2 @@\n-     MutexLocker ml(MultiArray_lock);\n+    MutexLocker ml(MultiArray_lock);\n+    assert(this == ObjArrayKlass::cast(array_klasses())->bottom_klass(), \"sanity\");\n@@ -2930,1 +2931,1 @@\n-    array_klasses()->restore_unshareable_info(ClassLoaderData::the_null_class_loader_data(), Handle(), CHECK);\n+    array_klasses()->restore_unshareable_info(class_loader_data(), Handle(), CHECK);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -574,1 +574,3 @@\n-    log_trace(cds, unshareable)(\"restore: %s\", external_name());\n+    oop class_loader = loader_data->class_loader();\n+    log_trace(cds, unshareable)(\"restore: %s with class loader: %s\", external_name(),\n+      class_loader != nullptr ? class_loader->klass()->external_name() : \"boot\");\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -219,10 +219,5 @@\n-  const Type *t1 = phase->type( in(1) );\n-  const Type *t2 = phase->type( in(2) );\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n-\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n-  const Type *bot = bottom_type();\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n+  const Type* t1 = phase->type(in(1));\n+  const Type* t2 = phase->type(in(2));\n+  if (t1 == Type::TOP || t2 == Type::TOP) {\n+    return Type::TOP;\n+  }\n@@ -231,2 +226,4 @@\n-  const Type *tadd = add_of_identity( t1, t2 );\n-  if( tadd ) return tadd;\n+  const Type* tadd = add_of_identity(t1, t2);\n+  if (tadd != nullptr) {\n+    return tadd;\n+  }\n@@ -234,1 +231,1 @@\n-  return add_ring(t1,t2);               \/\/ Local flavor of type addition\n+  return add_ring(t1, t2);               \/\/ Local flavor of type addition\n@@ -516,1 +513,3 @@\n-  \/\/ We must be adding 2 float constants.\n+  if (!t0->isa_float_constant() || !t1->isa_float_constant()) {\n+    return bottom_type();\n+  }\n@@ -547,1 +546,3 @@\n-  \/\/ We must be adding 2 double constants.\n+  if (!t0->isa_double_constant() || !t1->isa_double_constant()) {\n+    return bottom_type();\n+  }\n@@ -1382,3 +1383,6 @@\n-const Type *MinFNode::add_ring( const Type *t0, const Type *t1 ) const {\n-  const TypeF *r0 = t0->is_float_constant();\n-  const TypeF *r1 = t1->is_float_constant();\n+const Type* MinFNode::add_ring(const Type* t0, const Type* t1 ) const {\n+  const TypeF* r0 = t0->isa_float_constant();\n+  const TypeF* r1 = t1->isa_float_constant();\n+  if (r0 == nullptr || r1 == nullptr) {\n+    return bottom_type();\n+  }\n@@ -1404,3 +1408,6 @@\n-const Type *MinDNode::add_ring( const Type *t0, const Type *t1 ) const {\n-  const TypeD *r0 = t0->is_double_constant();\n-  const TypeD *r1 = t1->is_double_constant();\n+const Type* MinDNode::add_ring(const Type* t0, const Type* t1) const {\n+  const TypeD* r0 = t0->isa_double_constant();\n+  const TypeD* r1 = t1->isa_double_constant();\n+  if (r0 == nullptr || r1 == nullptr) {\n+    return bottom_type();\n+  }\n@@ -1426,3 +1433,6 @@\n-const Type *MaxFNode::add_ring( const Type *t0, const Type *t1 ) const {\n-  const TypeF *r0 = t0->is_float_constant();\n-  const TypeF *r1 = t1->is_float_constant();\n+const Type* MaxFNode::add_ring(const Type* t0, const Type* t1) const {\n+  const TypeF* r0 = t0->isa_float_constant();\n+  const TypeF* r1 = t1->isa_float_constant();\n+  if (r0 == nullptr || r1 == nullptr) {\n+    return bottom_type();\n+  }\n@@ -1448,3 +1458,6 @@\n-const Type *MaxDNode::add_ring( const Type *t0, const Type *t1 ) const {\n-  const TypeD *r0 = t0->is_double_constant();\n-  const TypeD *r1 = t1->is_double_constant();\n+const Type* MaxDNode::add_ring(const Type* t0, const Type* t1) const {\n+  const TypeD* r0 = t0->isa_double_constant();\n+  const TypeD* r1 = t1->isa_double_constant();\n+  if (r0 == nullptr || r1 == nullptr) {\n+    return bottom_type();\n+  }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":40,"deletions":27,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1975,0 +1975,8 @@\n+  \/\/ Sinking a node from a pre loop to its main loop pins the node between the pre and main loops. If that node is input\n+  \/\/ to a check that's eliminated by range check elimination, it becomes input to an expression that feeds into the exit\n+  \/\/ test of the pre loop above the point in the graph where it's pinned.\n+  if (n_loop->_head->is_CountedLoop() && n_loop->_head->as_CountedLoop()->is_pre_loop() &&\n+      u_loop->_head->is_CountedLoop() && u_loop->_head->as_CountedLoop()->is_main_loop() &&\n+      n_loop->_next == get_loop(u_loop->_head->as_CountedLoop()->skip_strip_mined())) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -381,0 +382,1 @@\n+  static int interpreter_frame_monitor_size_in_bytes();\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"utilities\/checkedCast.hpp\"\n+\n","filename":"src\/hotspot\/share\/runtime\/jfieldIDWorkaround.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-    static int    _initialized;\n-    static bool   _destroyed;\n+    static volatile int _initialized;\n+    static volatile bool _destroyed;\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-#if !defined(X86) || !defined(TARGET_COMPILER_gcc) || defined(_WIN64)\n+#if !defined(X86)\n@@ -276,1 +276,1 @@\n-#endif \/\/ !X86 || !TARGET_COMPILER_gcc || _WIN64\n+#endif \/\/ !X86\n@@ -1952,1 +1952,2 @@\n-  if (caller.is_compiled_frame() && !caller.is_deoptimized_frame()) {\n+  if ((caller.is_compiled_frame() && !caller.is_deoptimized_frame()) ||\n+      (caller.is_native_frame() && ((CompiledMethod*)caller.cb())->method()->is_continuation_enter_intrinsic())) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-                   static_ptr_volatile_field,                                                                                        \\\n+                   volatile_static_field,                                                                                            \\\n@@ -199,0 +199,1 @@\n+                volatile_static_field,                                                                                               \\\n@@ -452,1 +453,1 @@\n-     static_field(PerfMemory,                  _initialized,                                  int)                                   \\\n+     volatile_static_field(PerfMemory,         _initialized,                                  int)                                   \\\n@@ -482,1 +483,1 @@\n-  static_ptr_volatile_field(ClassLoaderDataGraph, _head,                                      ClassLoaderData*)                      \\\n+  volatile_static_field(ClassLoaderDataGraph, _head,                                          ClassLoaderData*)                      \\\n@@ -643,1 +644,1 @@\n-  static_ptr_volatile_field(ThreadsSMRSupport, _java_thread_list,                             ThreadsList*)                          \\\n+  volatile_static_field(ThreadsSMRSupport, _java_thread_list,                                 ThreadsList*)                          \\\n@@ -2693,1 +2694,1 @@\n-             GENERATE_STATIC_PTR_VOLATILE_VM_STRUCT_ENTRY,\n+             GENERATE_VOLATILE_STATIC_VM_STRUCT_ENTRY,\n@@ -2895,1 +2896,1 @@\n-             CHECK_STATIC_PTR_VOLATILE_VM_STRUCT_ENTRY,\n+             CHECK_VOLATILE_STATIC_VM_STRUCT_ENTRY,\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -478,0 +478,10 @@\n+\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n+\/\/ returns a non-negative int, usually used as a size of a code buffer range.\n+\/\/ This scales to sizeof(T).\n+template <typename T>\n+inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n+  size_t delta = pointer_delta(left, right, sizeof(T));\n+  assert(delta <= size_t(INT_MAX), \"pointer delta out of range: %zu\", delta);\n+  return static_cast<int>(delta);\n+}\n+\n@@ -494,23 +504,0 @@\n-\/\/ In many places we've added C-style casts to silence compiler\n-\/\/ warnings, for example when truncating a size_t to an int when we\n-\/\/ know the size_t is a small struct. Such casts are risky because\n-\/\/ they effectively disable useful compiler warnings. We can make our\n-\/\/ lives safer with this function, which ensures that any cast is\n-\/\/ reversible without loss of information. It doesn't check\n-\/\/ everything: it isn't intended to make sure that pointer types are\n-\/\/ compatible, for example.\n-template <typename T2, typename T1>\n-constexpr T2 checked_cast(T1 thing) {\n-  T2 result = static_cast<T2>(thing);\n-  assert(static_cast<T1>(result) == thing, \"must be\");\n-  return result;\n-}\n-\n-\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n-\/\/ returns a non-negative int, usually used as a size of a code buffer range.\n-\/\/ This scales to sizeof(T).\n-template <typename T>\n-inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n-  return checked_cast<int>(pointer_delta(left, right, sizeof(T)));\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -5338,1 +5338,1 @@\n-                        ? c.flatname.subName(c.owner.enclClass().flatname.getByteLength() + 1, c.flatname.getByteLength())\n+                        ? c.flatname.subName(c.owner.enclClass().flatname.length() + 1)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    private final Name accessDollar;\n+    private final String accessDollar;\n@@ -117,2 +117,1 @@\n-        accessDollar = names.\n-            fromString(\"access\" + target.syntheticNameChar());\n+        accessDollar = \"access\" + target.syntheticNameChar();\n@@ -365,0 +364,1 @@\n+        final String string = name.toString();\n@@ -366,2 +366,2 @@\n-            name.startsWith(accessDollar) &&\n-            (name.getByteAt(name.getByteLength() - 1) & 1) == 1;\n+            string.startsWith(accessDollar) &&\n+            (string.charAt(string.length() - 1) & 1) != 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -456,0 +456,3 @@\n+        boolean useStringTable = options.isSet(\"useStringTable\");\n+        if (useStringTable)\n+            return newStringNameTable();\n@@ -458,3 +461,14 @@\n-            return UnsharedNameTable.create(this);\n-        else\n-            return SharedNameTable.create(this);\n+            return newUnsharedNameTable();\n+        return newSharedNameTable();\n+    }\n+\n+    public StringNameTable newStringNameTable() {\n+        return StringNameTable.create(this);\n+    }\n+\n+    public SharedNameTable newSharedNameTable() {\n+        return SharedNameTable.create(this);\n+    }\n+\n+    public UnsharedNameTable newUnsharedNameTable() {\n+        return UnsharedNameTable.create(this);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"}]}