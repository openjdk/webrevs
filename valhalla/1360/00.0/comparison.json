{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -449,0 +449,1 @@\n+            ASAN_LDFLAGS=\"$ASAN_LDFLAGS -shared-libasan\"\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIR_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interpreterRT_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -3297,1 +3296,1 @@\n-  CodeBuffer buffer(name, 2348, 1024);\n+  CodeBuffer buffer(name, 2548, 1024);\n@@ -3363,1 +3362,1 @@\n-    Label no_prefix, not_special;\n+    Label no_prefix, not_special, check_rex_prefix;\n@@ -3367,1 +3366,1 @@\n-    __ jccb(Assembler::notEqual, no_adjust);\n+    __ jcc(Assembler::notEqual, no_adjust);\n@@ -3390,1 +3389,21 @@\n-\n+    \/\/\n+    \/\/ Notes:\n+    \/\/  Format of legacy MAP0 test instruction:-\n+    \/\/  [REX\/REX2] [OPCODE] [ModRM] [SIB] [DISP] [IMM32]\n+    \/\/  o  For safepoint polling instruction \"test %eax,(%rax)\", encoding of first register\n+    \/\/     operand and base register of memory operand is b\/w [0-8), hence we do not require\n+    \/\/     additional REX prefix where REX.B bit stores MSB bit of register encoding, which\n+    \/\/     is why two bytes encoding is sufficient here.\n+    \/\/  o  For safepoint polling instruction like \"test %eax,(%r8)\", register encoding of BASE\n+    \/\/     register of memory operand is 1000, thus we need additional REX prefix in this case,\n+    \/\/     there by adding additional byte to instruction encoding.\n+    \/\/  o  In case BASE register is one of the 32 extended GPR registers available only on targets\n+    \/\/     supporting Intel APX extension, then we need to emit two bytes REX2 prefix to hold\n+    \/\/     most significant two bits of 5 bit register encoding.\n+\n+    if (VM_Version::supports_apx_f()) {\n+      __ cmpb(Address(rbx, 0), Assembler::REX2);\n+      __ jccb(Assembler::notEqual, check_rex_prefix);\n+      __ addptr(rbx, 2);\n+      __ bind(check_rex_prefix);\n+    }\n@@ -3392,1 +3411,1 @@\n-    __ jcc(Assembler::notEqual, no_prefix);\n+    __ jccb(Assembler::notEqual, no_prefix);\n@@ -3405,1 +3424,1 @@\n-    __ jcc(Assembler::above, not_special);\n+    __ jccb(Assembler::above, not_special);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2443,16 +2443,0 @@\n-  enc_class Push_ModD_encoding(regD src0, regD src1) %{\n-    __ subptr(rsp, 8);\n-    __ movdbl(Address(rsp, 0), $src1$$XMMRegister);\n-    __ fld_d(Address(rsp, 0));\n-    __ movdbl(Address(rsp, 0), $src0$$XMMRegister);\n-    __ fld_d(Address(rsp, 0));\n-  %}\n-\n-  enc_class Push_ModF_encoding(regF src0, regF src1) %{\n-    __ subptr(rsp, 4);\n-    __ movflt(Address(rsp, 0), $src1$$XMMRegister);\n-    __ fld_s(Address(rsp, 0));\n-    __ movflt(Address(rsp, 0), $src0$$XMMRegister);\n-    __ fld_s(Address(rsp, 0));\n-  %}\n-\n@@ -2490,14 +2474,0 @@\n-  enc_class Push_Result_Mod_DPR( regDPR src) %{\n-    if ($src$$reg != FPR1L_enc) {\n-      \/\/ fincstp\n-      emit_opcode (masm, 0xD9);\n-      emit_opcode (masm, 0xF7);\n-      \/\/ FXCH FPR1 with src\n-      emit_opcode(masm, 0xD9);\n-      emit_d8(masm, 0xC8-1+$src$$reg );\n-      \/\/ fdecstp\n-      emit_opcode (masm, 0xD9);\n-      emit_opcode (masm, 0xF6);\n-    }\n-  %}\n-\n@@ -2515,22 +2485,0 @@\n-  enc_class emitModDPR() %{\n-    \/\/ fprem must be iterative\n-    \/\/ :: loop\n-    \/\/ fprem\n-    emit_opcode( masm, 0xD9 );\n-    emit_opcode( masm, 0xF8 );\n-    \/\/ wait\n-    emit_opcode( masm, 0x9b );\n-    \/\/ fnstsw ax\n-    emit_opcode( masm, 0xDF );\n-    emit_opcode( masm, 0xE0 );\n-    \/\/ sahf\n-    emit_opcode( masm, 0x9E );\n-    \/\/ jp  ::loop\n-    emit_opcode( masm, 0x0F );\n-    emit_opcode( masm, 0x8A );\n-    emit_opcode( masm, 0xF4 );\n-    emit_opcode( masm, 0xFF );\n-    emit_opcode( masm, 0xFF );\n-    emit_opcode( masm, 0xFF );\n-  %}\n-\n@@ -9801,39 +9749,0 @@\n-instruct modDPR_reg(regDPR dst, regDPR src, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE<=1);\n-  match(Set dst (ModD dst src));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"DMOD   $dst,$src\" %}\n-  ins_cost(250);\n-  ins_encode(Push_Reg_Mod_DPR(dst, src),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src),\n-              Pop_Reg_DPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\n-instruct modD_reg(regD dst, regD src0, regD src1, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE>=2);\n-  match(Set dst (ModD src0 src1));\n-  effect(KILL rax, KILL cr);\n-\n-  format %{ \"SUB    ESP,8\\t # DMOD\\n\"\n-          \"\\tMOVSD  [ESP+0],$src1\\n\"\n-          \"\\tFLD_D  [ESP+0]\\n\"\n-          \"\\tMOVSD  [ESP+0],$src0\\n\"\n-          \"\\tFLD_D  [ESP+0]\\n\"\n-     \"loop:\\tFPREM\\n\"\n-          \"\\tFWAIT\\n\"\n-          \"\\tFNSTSW AX\\n\"\n-          \"\\tSAHF\\n\"\n-          \"\\tJP     loop\\n\"\n-          \"\\tFSTP_D [ESP+0]\\n\"\n-          \"\\tMOVSD  $dst,[ESP+0]\\n\"\n-          \"\\tADD    ESP,8\\n\"\n-          \"\\tFSTP   ST0\\t # Restore FPU Stack\"\n-    %}\n-  ins_cost(250);\n-  ins_encode( Push_ModD_encoding(src0, src1), emitModDPR(), Push_ResultD(dst), PopFPU);\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -10445,53 +10354,0 @@\n-\/\/ Spill to obtain 24-bit precision\n-instruct modFPR24_reg(stackSlotF dst, regFPR src1, regFPR src2, eAXRegI rax, eFlagsReg cr) %{\n-  predicate( UseSSE==0 && Compile::current()->select_24_bit_instr());\n-  match(Set dst (ModF src1 src2));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"FMOD   $dst,$src1,$src2\" %}\n-  ins_encode( Push_Reg_Mod_DPR(src1, src2),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src2),\n-              Pop_Mem_FPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\/\/\n-\/\/ This instruction does not round to 24-bits\n-instruct modFPR_reg(regFPR dst, regFPR src, eAXRegI rax, eFlagsReg cr) %{\n-  predicate( UseSSE==0 && !Compile::current()->select_24_bit_instr());\n-  match(Set dst (ModF dst src));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"FMOD   $dst,$src\" %}\n-  ins_encode(Push_Reg_Mod_DPR(dst, src),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src),\n-              Pop_Reg_FPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\n-instruct modF_reg(regF dst, regF src0, regF src1, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE>=1);\n-  match(Set dst (ModF src0 src1));\n-  effect(KILL rax, KILL cr);\n-  format %{ \"SUB    ESP,4\\t # FMOD\\n\"\n-          \"\\tMOVSS  [ESP+0],$src1\\n\"\n-          \"\\tFLD_S  [ESP+0]\\n\"\n-          \"\\tMOVSS  [ESP+0],$src0\\n\"\n-          \"\\tFLD_S  [ESP+0]\\n\"\n-     \"loop:\\tFPREM\\n\"\n-          \"\\tFWAIT\\n\"\n-          \"\\tFNSTSW AX\\n\"\n-          \"\\tSAHF\\n\"\n-          \"\\tJP     loop\\n\"\n-          \"\\tFSTP_S [ESP+0]\\n\"\n-          \"\\tMOVSS  $dst,[ESP+0]\\n\"\n-          \"\\tADD    ESP,4\\n\"\n-          \"\\tFSTP   ST0\\t # Restore FPU Stack\"\n-    %}\n-  ins_cost(250);\n-  ins_encode( Push_ModF_encoding(src0, src1), emitModDPR(), Push_ResultF(dst,0x4), PopFPU);\n-  ins_pipe( pipe_slow );\n-%}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":145,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/vtableStubs_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,0 @@\n-  AD.addInclude(AD._CPP_file, \"precompiled.hpp\");\n@@ -249,2 +248,0 @@\n-  AD.addInclude(AD._CPP_CLONE_file, \"precompiled.hpp\");\n-  AD.addInclude(AD._CPP_EXPAND_file, \"precompiled.hpp\");\n@@ -254,1 +251,0 @@\n-  AD.addInclude(AD._CPP_FORMAT_file, \"precompiled.hpp\");\n@@ -257,1 +253,0 @@\n-  AD.addInclude(AD._CPP_GEN_file, \"precompiled.hpp\");\n@@ -262,4 +257,0 @@\n-  AD.addInclude(AD._CPP_MISC_file, \"precompiled.hpp\");\n-  AD.addInclude(AD._CPP_PEEPHOLE_file, \"precompiled.hpp\");\n-  AD.addInclude(AD._CPP_PIPELINE_file, \"precompiled.hpp\");\n-  AD.addInclude(AD._DFA_file, \"precompiled.hpp\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -617,1 +617,0 @@\n-  void set_name(const char* name)           { _name = name; }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/asm\/macroAssembler_common.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1034,1 +1034,1 @@\n-#ifdef INCLUDE_ZGC\n+#if INCLUDE_ZGC\n@@ -1703,2 +1703,0 @@\n-  int  _fpu_stack_size; \/\/ for sin\/cos implementation on Intel\n-\n@@ -1721,1 +1719,0 @@\n-    , _fpu_stack_size(0)\n@@ -1736,1 +1733,0 @@\n-    , _fpu_stack_size(0)\n@@ -1753,1 +1749,0 @@\n-    , _fpu_stack_size(0)\n@@ -1769,1 +1764,0 @@\n-    , _fpu_stack_size(0)\n@@ -1797,3 +1791,0 @@\n-  void set_fpu_stack_size(int size)              { _fpu_stack_size = size; }\n-  int  fpu_stack_size() const                    { return _fpu_stack_size; }\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -221,1 +220,1 @@\n-         \"Pre-condition: Roots start at aligned boundary: \" SIZE_FORMAT, _buffer_used);\n+         \"Pre-condition: Roots start at aligned boundary: %zu\", _buffer_used);\n@@ -242,1 +241,1 @@\n-           \"Roots segment \" SIZE_FORMAT \" start is not aligned: \" SIZE_FORMAT,\n+           \"Roots segment %zu start is not aligned: %zu\",\n@@ -250,1 +249,1 @@\n-    log_info(cds, heap)(\"archived obj root segment [%d] = \" SIZE_FORMAT \" bytes, obj = \" PTR_FORMAT,\n+    log_info(cds, heap)(\"archived obj root segment [%d] = %zu bytes, obj = \" PTR_FORMAT,\n@@ -333,1 +332,1 @@\n-  log_info(cds)(\"Size of heap region = \" SIZE_FORMAT \" bytes, %d objects, %d roots, %d native ptrs\",\n+  log_info(cds)(\"Size of heap region = %zu bytes, %d objects, %d roots, %d native ptrs\",\n@@ -399,1 +398,1 @@\n-    log_info(cds, heap)(\"Inserting filler obj array of %d elements (\" SIZE_FORMAT \" bytes total) @ buffer offset \" SIZE_FORMAT,\n+    log_info(cds, heap)(\"Inserting filler obj array of %d elements (%zu bytes total) @ buffer offset %zu\",\n@@ -632,1 +631,1 @@\n-  log_info(cds)(\"%s = \" SIZE_FORMAT_W(7) \" ... \" SIZE_FORMAT_W(7) \" (%3zu%% ... %3zu%% = %3zu%%)\", which,\n+  log_info(cds)(\"%s = %7zu ... %7zu (%3zu%% ... %3zu%% = %3zu%%)\", which,\n@@ -759,1 +758,1 @@\n-  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (\" SIZE_FORMAT \" bits)\",\n+  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (%zu bits)\",\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -349,1 +348,1 @@\n-  st->print_cr(\"- core_region_alignment:          \" SIZE_FORMAT, _core_region_alignment);\n+  st->print_cr(\"- core_region_alignment:          %zu\", _core_region_alignment);\n@@ -361,3 +360,3 @@\n-  st->print_cr(\"- cloned_vtables_offset:          \" SIZE_FORMAT_X, _cloned_vtables_offset);\n-  st->print_cr(\"- early_serialized_data_offset:   \" SIZE_FORMAT_X, _early_serialized_data_offset);\n-  st->print_cr(\"- serialized_data_offset:         \" SIZE_FORMAT_X, _serialized_data_offset);\n+  st->print_cr(\"- cloned_vtables_offset:          0x%zx\", _cloned_vtables_offset);\n+  st->print_cr(\"- early_serialized_data_offset:   0x%zx\", _early_serialized_data_offset);\n+  st->print_cr(\"- serialized_data_offset:         0x%zx\", _serialized_data_offset);\n@@ -365,1 +364,1 @@\n-  st->print_cr(\"- shared_path_table_offset:       \" SIZE_FORMAT_X, _shared_path_table_offset);\n+  st->print_cr(\"- shared_path_table_offset:       0x%zx\", _shared_path_table_offset);\n@@ -377,2 +376,2 @@\n-  st->print_cr(\"- heap_root_segments.base_offset: \" SIZE_FORMAT_X, _heap_root_segments.base_offset());\n-  st->print_cr(\"- heap_root_segments.count:       \" SIZE_FORMAT, _heap_root_segments.count());\n+  st->print_cr(\"- heap_root_segments.base_offset: 0x%zx\", _heap_root_segments.base_offset());\n+  st->print_cr(\"- heap_root_segments.count:       %zu\", _heap_root_segments.count());\n@@ -381,4 +380,4 @@\n-  st->print_cr(\"- _heap_oopmap_start_pos:         \" SIZE_FORMAT, _heap_oopmap_start_pos);\n-  st->print_cr(\"- _heap_ptrmap_start_pos:         \" SIZE_FORMAT, _heap_ptrmap_start_pos);\n-  st->print_cr(\"- _rw_ptrmap_start_pos:           \" SIZE_FORMAT, _rw_ptrmap_start_pos);\n-  st->print_cr(\"- _ro_ptrmap_start_pos:           \" SIZE_FORMAT, _ro_ptrmap_start_pos);\n+  st->print_cr(\"- _heap_oopmap_start_pos:         %zu\", _heap_oopmap_start_pos);\n+  st->print_cr(\"- _heap_ptrmap_start_pos:         %zu\", _heap_ptrmap_start_pos);\n+  st->print_cr(\"- _rw_ptrmap_start_pos:           %zu\", _rw_ptrmap_start_pos);\n+  st->print_cr(\"- _ro_ptrmap_start_pos:           %zu\", _ro_ptrmap_start_pos);\n@@ -1496,1 +1495,1 @@\n-    log_error(cds)(\"Unable to seek to position \" SIZE_FORMAT, pos);\n+    log_error(cds)(\"Unable to seek to position %zu\", pos);\n@@ -1631,1 +1630,1 @@\n-  log_debug(cds, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n+  log_debug(cds, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (%zu bits)\",\n@@ -1654,7 +1653,7 @@\n-  st->print_cr(\"- file_offset:                    \" SIZE_FORMAT_X, _file_offset);\n-  st->print_cr(\"- mapping_offset:                 \" SIZE_FORMAT_X, _mapping_offset);\n-  st->print_cr(\"- used:                           \" SIZE_FORMAT, _used);\n-  st->print_cr(\"- oopmap_offset:                  \" SIZE_FORMAT_X, _oopmap_offset);\n-  st->print_cr(\"- oopmap_size_in_bits:            \" SIZE_FORMAT, _oopmap_size_in_bits);\n-  st->print_cr(\"- ptrmap_offset:                  \" SIZE_FORMAT_X, _ptrmap_offset);\n-  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+  st->print_cr(\"- file_offset:                    0x%zx\", _file_offset);\n+  st->print_cr(\"- mapping_offset:                 0x%zx\", _mapping_offset);\n+  st->print_cr(\"- used:                           %zu\", _used);\n+  st->print_cr(\"- oopmap_offset:                  0x%zx\", _oopmap_offset);\n+  st->print_cr(\"- oopmap_size_in_bits:            %zu\", _oopmap_size_in_bits);\n+  st->print_cr(\"- ptrmap_offset:                  0x%zx\", _ptrmap_offset);\n+  st->print_cr(\"- ptrmap_size_in_bits:            %zu\", _ptrmap_size_in_bits);\n@@ -1699,1 +1698,1 @@\n-    log_info(cds)(\"Shared file region (%s) %d: \" SIZE_FORMAT_W(8)\n+    log_info(cds)(\"Shared file region (%s) %d: %8zu\"\n@@ -2185,1 +2184,1 @@\n-  log_info(cds)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = \"  SIZE_FORMAT_W(8) \" bytes\",\n+  log_info(cds)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = %8zu bytes\",\n@@ -2247,1 +2246,1 @@\n-  log_info(cds)(\"CDS archive was created with max heap size = \" SIZE_FORMAT \"M, and the following configuration:\",\n+  log_info(cds)(\"CDS archive was created with max heap size = %zuM, and the following configuration:\",\n@@ -2253,1 +2252,1 @@\n-  log_info(cds)(\"The current max heap size = \" SIZE_FORMAT \"M, G1HeapRegion::GrainBytes = \" SIZE_FORMAT,\n+  log_info(cds)(\"The current max heap size = %zuM, G1HeapRegion::GrainBytes = %zu\",\n@@ -2410,1 +2409,1 @@\n-                    INTPTR_FORMAT \", size = \" SIZE_FORMAT \" bytes\",\n+                    INTPTR_FORMAT \", size = %zu bytes\",\n@@ -2447,1 +2446,1 @@\n-  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n+  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = %8zu bytes\",\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -305,1 +304,1 @@\n-    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: \" SIZE_FORMAT,\n+    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: %zu\",\n@@ -1391,1 +1390,1 @@\n-        log_debug(cds, heap)(\"(%d) %s[\" SIZE_FORMAT \"] ==> \" PTR_FORMAT \" size \" SIZE_FORMAT \" %s\", _level,\n+        log_debug(cds, heap)(\"(%d) %s[%zu] ==> \" PTR_FORMAT \" size %zu %s\", _level,\n@@ -1534,1 +1533,1 @@\n-        PTR_FORMAT \") size \" SIZE_FORMAT \", skipped.\",\n+        PTR_FORMAT \") size %zu, skipped.\",\n@@ -2129,2 +2128,2 @@\n-    log_info(cds, heap)(SIZE_FORMAT_W(8) \" objects are <= \" SIZE_FORMAT_W(-6)\n-                        \" bytes (total \" SIZE_FORMAT_W(8) \" bytes, avg %8.1f bytes)\",\n+    log_info(cds, heap)(\"%8zu objects are <= %-6zu\"\n+                        \" bytes (total %8zu bytes, avg %8.1f bytes)\",\n@@ -2136,1 +2135,1 @@\n-  log_info(cds, heap)(SIZE_FORMAT_W(8) \" huge  objects               (total \"  SIZE_FORMAT_W(8) \" bytes\"\n+  log_info(cds, heap)(\"%8zu huge  objects               (total %8zu bytes\"\n@@ -2140,1 +2139,1 @@\n-  log_info(cds, heap)(SIZE_FORMAT_W(8) \" total objects               (total \"  SIZE_FORMAT_W(8) \" bytes\"\n+  log_info(cds, heap)(\"%8zu total objects               (total %8zu bytes\"\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -270,1 +269,1 @@\n-  log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, core_region_alignment());\n+  log_info(cds)(\"Core region alignment: %zu\", core_region_alignment());\n@@ -291,1 +290,1 @@\n-    log_error(cds)(\"Unable to reserve memory for symbols: \" SIZE_FORMAT \" bytes.\", symbol_rs_size);\n+    log_error(cds)(\"Unable to reserve memory for symbols: %zu bytes.\", symbol_rs_size);\n@@ -774,1 +773,1 @@\n-                     SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+                     \"%zuM\", MaxHeapSize\/M);\n@@ -803,1 +802,1 @@\n-    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MinHeapSize\/M);\n+    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = %zuM\", MinHeapSize\/M);\n@@ -807,1 +806,1 @@\n-    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", InitialHeapSize\/M);\n+    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = %zuM\", InitialHeapSize\/M);\n@@ -811,1 +810,1 @@\n-    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = %zuM\", MaxHeapSize\/M);\n@@ -1091,1 +1090,1 @@\n-    log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, static_mapinfo->core_region_alignment());\n+    log_info(cds)(\"Core region alignment: %zu\", static_mapinfo->core_region_alignment());\n@@ -1245,1 +1244,1 @@\n-    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1247,1 +1246,1 @@\n-    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1476,2 +1475,1 @@\n-         \"CompressedClassSpaceSize malformed: \"\n-         SIZE_FORMAT, CompressedClassSpaceSize);\n+         \"CompressedClassSpaceSize malformed: %zu\", CompressedClassSpaceSize);\n@@ -1487,1 +1485,1 @@\n-    log_info(metaspace)(\"CDS initialization: reducing class space size from \" SIZE_FORMAT \" to \" SIZE_FORMAT,\n+    log_info(metaspace)(\"CDS initialization: reducing class space size from %zu to %zu\",\n@@ -1609,2 +1607,2 @@\n-    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: \" SIZE_FORMAT\n-                  \" actual: \" SIZE_FORMAT, mapinfo->core_region_alignment(), core_region_alignment());\n+    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: %zu\"\n+                  \" actual: %zu\", mapinfo->core_region_alignment(), core_region_alignment());\n@@ -1779,1 +1777,1 @@\n-    st->print(\"size \" SIZE_FORMAT \", \", top - base);\n+    st->print(\"size %zu, \", top - base);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciFlags.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciFlatArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciSymbol.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -2201,1 +2200,1 @@\n-  int flags = cfs->get_u2_fast();\n+  u2 flags = cfs->get_u2_fast();\n@@ -5997,1 +5996,1 @@\n-    jio_snprintf(addr_buf, 20, SIZE_FORMAT_X, new_id);\n+    jio_snprintf(addr_buf, 20, \"0x%zx\", new_id);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1257,2 +1256,2 @@\n-  assert(size > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, size);\n-  assert(size <= INT_MAX, \"Lossy conversion: \" SIZE_FORMAT, size);\n+  assert(size > 0, \"Oop size must be greater than zero, not %zu\", size);\n+  assert(size <= INT_MAX, \"Lossy conversion: %zu\", size);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -363,0 +363,2 @@\n+  template(jdk_internal_foreign_NativeMemorySegmentImpl,             \"jdk\/internal\/foreign\/NativeMemorySegmentImpl\") \\\n+                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-  friend class CodeCacheDumper;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/scopeDesc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2781,3 +2780,3 @@\n-  out->print_cr(\"         Reserved size : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::max_capacity() \/ K);\n-  out->print_cr(\"        Committed size : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::capacity() \/ K);\n-  out->print_cr(\"  Unallocated capacity : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::unallocated_capacity() \/ K);\n+  out->print_cr(\"         Reserved size : %7zu KB\", CodeCache::max_capacity() \/ K);\n+  out->print_cr(\"        Committed size : %7zu KB\", CodeCache::capacity() \/ K);\n+  out->print_cr(\"  Unallocated capacity : %7zu KB\", CodeCache::unallocated_capacity() \/ K);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetRuntime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/modRefBarrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -53,2 +52,0 @@\n-                                         Node* ctl,\n-                                         Node* oop_store,\n@@ -57,2 +54,0 @@\n-                                         uint  adr_idx,\n-                                         BasicType bt,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-                            Node* ctl,\n-                            Node* store,\n@@ -37,2 +35,0 @@\n-                            uint adr_idx,\n-                            BasicType bt,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -29,2 +28,0 @@\n-#include \"opto\/narrowptrnode.hpp\"\n-#include \"utilities\/macros.hpp\"\n@@ -36,1 +33,0 @@\n-  const TypePtr* adr_type = access.addr().type();\n@@ -56,6 +52,0 @@\n-  GraphKit* kit = parse_access.kit();\n-\n-  uint adr_idx = kit->C->get_alias_index(adr_type);\n-  assert(adr_idx != Compile::AliasIdxTop, \"use other store_to_memory factory\" );\n-  pre_barrier(kit, true \/* do_load *\/, kit->control(), access.base(), adr, adr_idx, val.node(),\n-              static_cast<const TypeOopPtr*>(val.type()), nullptr \/* pre_val *\/, access.type());\n@@ -66,0 +56,1 @@\n+  GraphKit* kit = parse_access.kit();\n@@ -75,8 +66,1 @@\n-\n-        ciField* field = vk->get_field_by_offset(vt->field_offset(i), false);\n-        assert(field != nullptr, \"field not found\");\n-        adr_type = kit->C->alias_type(field)->adr_type();\n-        adr_idx = kit->C->get_alias_index(adr_type);\n-\n-        post_barrier(kit, kit->control(), nullptr, access.base(), field_adr, adr_idx, value,\n-                     type->basic_type(), use_precise);\n+        post_barrier(kit, access.base(), field_adr, value, use_precise);\n@@ -86,2 +70,1 @@\n-    post_barrier(kit, kit->control(), access.raw_access(), access.base(), adr, adr_idx, val.node(),\n-                 access.type(), use_precise);\n+    post_barrier(kit, access.base(), adr, val.node(), use_precise);\n@@ -97,2 +80,0 @@\n-  GraphKit* kit = access.kit();\n-\n@@ -103,4 +84,0 @@\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              expected_val \/* pre_val *\/, T_OBJECT);\n-\n@@ -109,2 +86,1 @@\n-  post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-               access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+  post_barrier(access.kit(), access.base(), access.addr().node(), new_val, true);\n@@ -123,4 +99,0 @@\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              expected_val \/* pre_val *\/, T_OBJECT);\n-\n@@ -142,2 +114,1 @@\n-    post_barrier(kit, ideal.ctrl(), access.raw_access(), access.base(),\n-                 access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    post_barrier(kit, access.base(), access.addr().node(), new_val, true);\n@@ -152,2 +123,0 @@\n-  GraphKit* kit = access.kit();\n-\n@@ -159,8 +128,1 @@\n-  \/\/ Don't need to load pre_val. The old value is returned by load_store.\n-  \/\/ The pre_barrier can execute after the xchg as long as no safepoint\n-  \/\/ gets inserted between them.\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              result \/* pre_val *\/, T_OBJECT);\n-  post_barrier(kit, kit->control(), access.raw_access(), access.base(), access.addr().node(),\n-               access.alias_idx(), new_val, T_OBJECT, true);\n+  post_barrier(access.kit(), access.base(), access.addr().node(), new_val, true);\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/modRefBarrierSetC2.cpp","additions":7,"deletions":45,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-  } else if ((gc_state & ShenandoahHeap::UPDATEREFS) != 0) {\n+  } else if ((gc_state & ShenandoahHeap::UPDATE_REFS) != 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetNMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1617,32 +1616,0 @@\n-void SignatureHandlerLibrary::add(uint64_t fingerprint, address handler) {\n-  int handler_index = -1;\n-  \/\/ use customized signature handler\n-  MutexLocker mu(SignatureHandlerLibrary_lock);\n-  \/\/ make sure data structure is initialized\n-  initialize();\n-  fingerprint = InterpreterRuntime::normalize_fast_native_fingerprint(fingerprint);\n-  handler_index = _fingerprints->find(fingerprint);\n-  \/\/ create handler if necessary\n-  if (handler_index < 0) {\n-    if (PrintSignatureHandlers && (handler != Interpreter::slow_signature_handler())) {\n-      tty->cr();\n-      tty->print_cr(\"argument handler #%d at \" PTR_FORMAT \" for fingerprint \" UINT64_FORMAT,\n-                    _handlers->length(),\n-                    p2i(handler),\n-                    fingerprint);\n-    }\n-    _fingerprints->append(fingerprint);\n-    _handlers->append(handler);\n-  } else {\n-    if (PrintSignatureHandlers) {\n-      tty->cr();\n-      tty->print_cr(\"duplicate argument handler #%d for fingerprint \" UINT64_FORMAT \"(old: \" PTR_FORMAT \", new : \" PTR_FORMAT \")\",\n-                    _handlers->length(),\n-                    fingerprint,\n-                    p2i(_handlers->at(handler_index)),\n-                    p2i(handler));\n-    }\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -207,1 +207,0 @@\n-  static void add(uint64_t fingerprint, address handler);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -945,1 +944,1 @@\n-         \"actual alignment \" SIZE_FORMAT \" must be within maximum heap alignment \" SIZE_FORMAT,\n+         \"actual alignment %zu must be within maximum heap alignment %zu\",\n@@ -990,1 +989,1 @@\n-    err_msg(\"Could not reserve enough space for \" SIZE_FORMAT \"KB object heap\",\n+    err_msg(\"Could not reserve enough space for %zuKB object heap\",\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/accessBackend.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2048,132 +2047,0 @@\n-\/\/ JVMTI GetConstantPool support\n-\n-\/\/ For debugging of constant pool\n-const bool debug_cpool = false;\n-\n-#define DBG(code) do { if (debug_cpool) { (code); } } while(0)\n-\n-static void print_cpool_bytes(jint cnt, u1 *bytes) {\n-  const char* WARN_MSG = \"Must not be such entry!\";\n-  jint size = 0;\n-  u2   idx1, idx2;\n-\n-  for (jint idx = 1; idx < cnt; idx++) {\n-    jint ent_size = 0;\n-    u1   tag  = *bytes++;\n-    size++;                       \/\/ count tag\n-\n-    printf(\"const #%03d, tag: %02d \", idx, tag);\n-    switch(tag) {\n-      case JVM_CONSTANT_Invalid: {\n-        printf(\"Invalid\");\n-        break;\n-      }\n-      case JVM_CONSTANT_Unicode: {\n-        printf(\"Unicode      %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_Utf8: {\n-        u2 len = Bytes::get_Java_u2(bytes);\n-        char str[128];\n-        if (len > 127) {\n-           len = 127;\n-        }\n-        strncpy(str, (char *) (bytes+2), len);\n-        str[len] = '\\0';\n-        printf(\"Utf8          \\\"%s\\\"\", str);\n-        ent_size = 2 + len;\n-        break;\n-      }\n-      case JVM_CONSTANT_Integer: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"int          %d\", *(int *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Float: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"float        %5.3ff\", *(float *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Long: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"long         \" INT64_FORMAT, (int64_t) *(jlong *) &val);\n-        ent_size = 8;\n-        idx++; \/\/ Long takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Double: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"double       %5.3fd\", *(jdouble *)&val);\n-        ent_size = 8;\n-        idx++; \/\/ Double takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Class: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"class        #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_String: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"String       #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_Fieldref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Field        #%03d, #%03d\", (int) idx1, (int) idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Methodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Method       #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_InterfaceMethodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"InterfMethod #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_NameAndType: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"NameAndType  #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_ClassIndex: {\n-        printf(\"ClassIndex  %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClass: {\n-        printf(\"UnresolvedClass: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClassInError: {\n-        printf(\"UnresolvedClassInErr: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_StringIndex: {\n-        printf(\"StringIndex: %s\", WARN_MSG);\n-        break;\n-      }\n-    }\n-    printf(\";\\n\");\n-    bytes += ent_size;\n-    size  += ent_size;\n-  }\n-  printf(\"Cpool size: %d\\n\", size);\n-  fflush(nullptr);\n-  return;\n-} \/* end print_cpool_bytes *\/\n-\n-\n@@ -2242,1 +2109,0 @@\n-        DBG(printf(\"adding symbol entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2250,1 +2116,0 @@\n-        DBG(printf(\"adding class entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2284,1 +2149,0 @@\n-    DBG(printf(\"#%03hd tag=%03hd, \", (short)idx, (short)tag));\n@@ -2287,1 +2151,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Invalid\"));\n@@ -2292,1 +2155,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Unicode\"));\n@@ -2304,1 +2166,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Utf8: %s \", str));\n@@ -2337,1 +2198,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Class: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2346,1 +2206,0 @@\n-        DBG(printf(\"JVM_CONSTANT_String: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2356,1 +2215,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Methodref: %hd %hd\", idx1, idx2));\n@@ -2364,1 +2222,0 @@\n-        DBG(printf(\"JVM_CONSTANT_NameAndType: %hd %hd\", idx1, idx2));\n@@ -2371,1 +2228,0 @@\n-        DBG(printf(\"JVM_CONSTANT_ClassIndex: %hd\", idx1));\n@@ -2378,1 +2234,0 @@\n-        DBG(printf(\"JVM_CONSTANT_StringIndex: %hd\", idx1));\n@@ -2388,1 +2243,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodHandle: %d %hd\", kind, idx1));\n@@ -2396,1 +2250,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodType: %hd\", idx1));\n@@ -2407,1 +2260,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Dynamic: %hd %hd\", idx1, idx2));\n@@ -2417,1 +2269,0 @@\n-        DBG(printf(\"JVM_CONSTANT_InvokeDynamic: %hd %hd\", idx1, idx2));\n@@ -2421,1 +2272,0 @@\n-    DBG(printf(\"\\n\"));\n@@ -2427,2 +2277,0 @@\n-  \/\/ Keep temporarily for debugging until it's stable.\n-  DBG(print_cpool_bytes(cnt, start_bytes));\n@@ -2432,2 +2280,0 @@\n-#undef DBG\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":154,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-  fi._access_flags = AccessFlags(next_uint());\n+  fi._access_flags = AccessFlags(checked_cast<u2>(next_uint()));\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/flatArrayOop.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -4092,1 +4091,1 @@\n-  st->print_cr(BULLET\"---- fields (total size \" SIZE_FORMAT \" words):\", oop_size(obj));\n+  st->print_cr(BULLET\"---- fields (total size %zu words):\", oop_size(obj));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/markWord.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1501,1 +1500,1 @@\n-  int flags_bits = (JVM_ACC_NATIVE | JVM_ACC_SYNTHETIC | JVM_ACC_FINAL);\n+  u2 flags_bits = (JVM_ACC_NATIVE | JVM_ACC_SYNTHETIC | JVM_ACC_FINAL);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,2 +223,2 @@\n-  assert(s > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, s);\n-  assert(is_object_aligned(s), \"Oop size is not properly aligned: \" SIZE_FORMAT, s);\n+  assert(s > 0, \"Oop size must be greater than zero, not %zu\", s);\n+  assert(is_object_aligned(s), \"Oop size is not properly aligned: %zu\", s);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1135,1 +1134,1 @@\n-    res = gvn.transform(CMoveNode::make(nullptr, bol, a, b, t));\n+    res = gvn.transform(CMoveNode::make(bol, a, b, t));\n@@ -1164,1 +1163,1 @@\n-  Node* res = gvn.transform(CMoveNode::make(nullptr, bol, sub, zero, t));\n+  Node* res = gvn.transform(CMoveNode::make(bol, sub, zero, t));\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -38,0 +37,2 @@\n+const TypeFunc* ArrayCopyNode::_arraycopy_type_Type = nullptr;\n+\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+  static const TypeFunc* _arraycopy_type_Type;\n@@ -68,0 +69,2 @@\n+public:\n+\n@@ -69,0 +72,6 @@\n+    assert(_arraycopy_type_Type != nullptr, \"should be initialized\");\n+    return _arraycopy_type_Type;\n+  }\n+\n+  static void initialize_arraycopy_Type() {\n+    assert(_arraycopy_type_Type == nullptr, \"should be\");\n@@ -86,1 +95,1 @@\n-    return TypeFunc::make(domain, range);\n+    _arraycopy_type_Type =  TypeFunc::make(domain, range);\n@@ -89,0 +98,1 @@\n+private:\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -738,1 +737,1 @@\n-  if (!in(0) || phase->type(in(0)) == Type::TOP) {\n+  if (in(0) == nullptr || phase->type(in(0)) == Type::TOP) {\n@@ -1897,0 +1896,2 @@\n+const TypeFunc* LockNode::_lock_type_Type = nullptr;\n+\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1239,0 +1239,1 @@\n+  static const TypeFunc* _lock_type_Type;\n@@ -1241,1 +1242,7 @@\n-  static const TypeFunc *lock_type() {\n+  static inline const TypeFunc* lock_type() {\n+    assert(_lock_type_Type != nullptr, \"should be initialized\");\n+    return _lock_type_Type;\n+  }\n+\n+  static void initialize_lock_Type() {\n+    assert(_lock_type_Type == nullptr, \"should be called once\");\n@@ -1254,1 +1261,1 @@\n-    return TypeFunc::make(domain, range);\n+    _lock_type_Type = TypeFunc::make(domain,range);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/classes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"opto\/runtime.hpp\"\n@@ -45,0 +45,17 @@\n+ModFloatingNode::ModFloatingNode(Compile* C, const TypeFunc* tf, const char* name) : CallLeafNode(tf, nullptr, name, TypeRawPtr::BOTTOM) {\n+  add_flag(Flag_is_macro);\n+  C->add_macro_node(this);\n+}\n+\n+ModDNode::ModDNode(Compile* C, Node* a, Node* b) : ModFloatingNode(C, OptoRuntime::Math_DD_D_Type(), \"drem\") {\n+  init_req(TypeFunc::Parms + 0, a);\n+  init_req(TypeFunc::Parms + 1, C->top());\n+  init_req(TypeFunc::Parms + 2, b);\n+  init_req(TypeFunc::Parms + 3, C->top());\n+}\n+\n+ModFNode::ModFNode(Compile* C, Node* a, Node* b) : ModFloatingNode(C, OptoRuntime::modf_Type(), \"frem\") {\n+  init_req(TypeFunc::Parms + 0, a);\n+  init_req(TypeFunc::Parms + 1, b);\n+}\n+\n@@ -1380,0 +1397,3 @@\n+Node *UModLNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n+}\n@@ -1381,8 +1401,3 @@\n-\/\/=============================================================================\n-\/\/------------------------------Value------------------------------------------\n-const Type* ModFNode::Value(PhaseGVN* phase) const {\n-  \/\/ Either input is TOP ==> the result is TOP\n-  const Type *t1 = phase->type( in(1) );\n-  const Type *t2 = phase->type( in(2) );\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n+const Type* UModLNode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n+}\n@@ -1390,5 +1405,11 @@\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n-  const Type *bot = bottom_type();\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n+Node* ModFNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (!can_reshape) {\n+    return nullptr;\n+  }\n+\n+  \/\/ Either input is TOP ==> the result is TOP\n+  const Type* t1 = phase->type(dividend());\n+  const Type* t2 = phase->type(divisor());\n+  if (t1 == Type::TOP || t2 == Type::TOP) {\n+    return phase->C->top();\n+  }\n@@ -1398,1 +1419,1 @@\n-    return Type::FLOAT;         \/\/ note: x%x can be either NaN or 0\n+    return nullptr; \/\/ note: x%x can be either NaN or 0\n@@ -1403,2 +1424,2 @@\n-  jint  x1 = jint_cast(f1);     \/\/ note:  *(int*)&f1, not just (int)f1\n-  jint  x2 = jint_cast(f2);\n+  jint x1 = jint_cast(f1); \/\/ note:  *(int*)&f1, not just (int)f1\n+  jint x2 = jint_cast(f2);\n@@ -1407,2 +1428,6 @@\n-  if (g_isnan(f1))    return t1;\n-  if (g_isnan(f2))    return t2;\n+  if (g_isnan(f1)) {\n+    return replace_with_con(phase, t1);\n+  }\n+  if (g_isnan(f2)) {\n+    return replace_with_con(phase, t2);\n+  }\n@@ -1411,2 +1436,3 @@\n-  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jint)\n-    return Type::FLOAT;\n+  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jint) {\n+    return nullptr;\n+  }\n@@ -1421,7 +1447,1 @@\n-  return TypeF::make(jfloat_cast(xr));\n-}\n-\n-\/\/=============================================================================\n-\/\/------------------------------Idealize---------------------------------------\n-Node *UModLNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n-  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n+  return replace_with_con(phase, TypeF::make(jfloat_cast(xr)));\n@@ -1430,3 +1450,4 @@\n-const Type* UModLNode::Value(PhaseGVN* phase) const {\n-  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n-}\n+Node* ModDNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (!can_reshape) {\n+    return nullptr;\n+  }\n@@ -1434,13 +1455,5 @@\n-\/\/=============================================================================\n-\/\/------------------------------Value------------------------------------------\n-const Type* ModDNode::Value(PhaseGVN* phase) const {\n-  const Type *t1 = phase->type( in(1) );\n-  const Type *t2 = phase->type( in(2) );\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n-\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n-  const Type *bot = bottom_type();\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n+  const Type* t1 = phase->type(dividend());\n+  const Type* t2 = phase->type(divisor());\n+  if (t1 == Type::TOP || t2 == Type::TOP) {\n+    return nullptr;\n+  }\n@@ -1451,1 +1464,1 @@\n-    return Type::DOUBLE;        \/\/ note: x%x can be either NaN or 0\n+    return nullptr; \/\/ note: x%x can be either NaN or 0\n@@ -1456,2 +1469,2 @@\n-  jlong  x1 = jlong_cast(f1);   \/\/ note:  *(long*)&f1, not just (long)f1\n-  jlong  x2 = jlong_cast(f2);\n+  jlong x1 = jlong_cast(f1); \/\/ note:  *(long*)&f1, not just (long)f1\n+  jlong x2 = jlong_cast(f2);\n@@ -1460,2 +1473,6 @@\n-  if (g_isnan(f1))    return t1;\n-  if (g_isnan(f2))    return t2;\n+  if (g_isnan(f1)) {\n+    return replace_with_con(phase, t1);\n+  }\n+  if (g_isnan(f2)) {\n+    return replace_with_con(phase, t2);\n+  }\n@@ -1464,2 +1481,3 @@\n-  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jlong)\n-    return Type::DOUBLE;\n+  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jlong) {\n+    return nullptr;\n+  }\n@@ -1474,1 +1492,29 @@\n-  return TypeD::make(jdouble_cast(xr));\n+  return replace_with_con(phase, TypeD::make(jdouble_cast(xr)));\n+}\n+\n+Node* ModFloatingNode::replace_with_con(PhaseGVN* phase, const Type* con) {\n+  Compile* C = phase->C;\n+  Node* con_node = phase->makecon(con);\n+  CallProjections* projs = extract_projections(false, false);\n+  C->gvn_replace_by(projs->fallthrough_proj, in(TypeFunc::Control));\n+  if (projs->fallthrough_catchproj != nullptr) {\n+    C->gvn_replace_by(projs->fallthrough_catchproj, in(TypeFunc::Control));\n+  }\n+  if (projs->fallthrough_memproj != nullptr) {\n+    C->gvn_replace_by(projs->fallthrough_memproj, in(TypeFunc::Memory));\n+  }\n+  if (projs->catchall_memproj != nullptr) {\n+    C->gvn_replace_by(projs->catchall_memproj, C->top());\n+  }\n+  if (projs->fallthrough_ioproj != nullptr) {\n+    C->gvn_replace_by(projs->fallthrough_ioproj, in(TypeFunc::I_O));\n+  }\n+  assert(projs->catchall_ioproj == nullptr, \"no exceptions from floating mod\");\n+  assert(projs->catchall_catchproj == nullptr, \"no exceptions from floating mod\");\n+  if (projs->resproj[0] != nullptr) {\n+    C->gvn_replace_by(projs->resproj[0], con_node);\n+  }\n+  C->gvn_replace_by(this, C->top());\n+  C->remove_macro_node(this);\n+  disconnect_inputs(C);\n+  return nullptr;\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":99,"deletions":53,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"opto\/callnode.hpp\"\n@@ -143,1 +144,9 @@\n-\/\/------------------------------ModFNode---------------------------------------\n+\/\/ Base class for float and double modulus\n+class ModFloatingNode : public CallLeafNode {\n+protected:\n+  Node* replace_with_con(PhaseGVN* phase, const Type* con);\n+\n+public:\n+  ModFloatingNode(Compile* C, const TypeFunc* tf, const char *name);\n+};\n+\n@@ -145,1 +154,5 @@\n-class ModFNode : public Node {\n+class ModFNode : public ModFloatingNode {\n+private:\n+  Node* dividend() const { return in(TypeFunc::Parms + 0); }\n+  Node* divisor() const { return in(TypeFunc::Parms + 1); }\n+\n@@ -147,1 +160,1 @@\n-  ModFNode( Node *c, Node *in1, Node *in2 ) : Node(c,in1, in2) {}\n+  ModFNode(Compile* C, Node* a, Node* b);\n@@ -149,2 +162,2 @@\n-  virtual const Type* Value(PhaseGVN* phase) const;\n-  virtual const Type *bottom_type() const { return Type::FLOAT; }\n+  virtual uint size_of() const { return sizeof(*this); }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -154,2 +167,5 @@\n-\/\/------------------------------ModDNode---------------------------------------\n-class ModDNode : public Node {\n+class ModDNode : public ModFloatingNode {\n+private:\n+  Node* dividend() const { return in(TypeFunc::Parms + 0); }\n+  Node* divisor() const { return in(TypeFunc::Parms + 2); }\n+\n@@ -158,1 +174,1 @@\n-  ModDNode( Node *c, Node *in1, Node *in2 ) : Node(c, in1, in2) {}\n+  ModDNode(Compile* C, Node* a, Node* b);\n@@ -160,2 +176,2 @@\n-  virtual const Type* Value(PhaseGVN* phase) const;\n-  virtual const Type *bottom_type() const { return Type::DOUBLE; }\n+  virtual uint size_of() const { return sizeof(*this); }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/divnode.hpp","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/generateOptoStub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/idealKit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2150,12 +2149,12 @@\n-  case vmIntrinsics::_numberOfLeadingZeros_i:   n = new CountLeadingZerosINode( arg);  break;\n-  case vmIntrinsics::_numberOfLeadingZeros_l:   n = new CountLeadingZerosLNode( arg);  break;\n-  case vmIntrinsics::_numberOfTrailingZeros_i:  n = new CountTrailingZerosINode(arg);  break;\n-  case vmIntrinsics::_numberOfTrailingZeros_l:  n = new CountTrailingZerosLNode(arg);  break;\n-  case vmIntrinsics::_bitCount_i:               n = new PopCountINode(          arg);  break;\n-  case vmIntrinsics::_bitCount_l:               n = new PopCountLNode(          arg);  break;\n-  case vmIntrinsics::_reverseBytes_c:           n = new ReverseBytesUSNode(nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_s:           n = new ReverseBytesSNode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_i:           n = new ReverseBytesINode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_l:           n = new ReverseBytesLNode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverse_i:                n = new ReverseINode(nullptr, arg); break;\n-  case vmIntrinsics::_reverse_l:                n = new ReverseLNode(nullptr, arg); break;\n+  case vmIntrinsics::_numberOfLeadingZeros_i:   n = new CountLeadingZerosINode( arg); break;\n+  case vmIntrinsics::_numberOfLeadingZeros_l:   n = new CountLeadingZerosLNode( arg); break;\n+  case vmIntrinsics::_numberOfTrailingZeros_i:  n = new CountTrailingZerosINode(arg); break;\n+  case vmIntrinsics::_numberOfTrailingZeros_l:  n = new CountTrailingZerosLNode(arg); break;\n+  case vmIntrinsics::_bitCount_i:               n = new PopCountINode(          arg); break;\n+  case vmIntrinsics::_bitCount_l:               n = new PopCountLNode(          arg); break;\n+  case vmIntrinsics::_reverseBytes_c:           n = new ReverseBytesUSNode(     arg); break;\n+  case vmIntrinsics::_reverseBytes_s:           n = new ReverseBytesSNode(      arg); break;\n+  case vmIntrinsics::_reverseBytes_i:           n = new ReverseBytesINode(      arg); break;\n+  case vmIntrinsics::_reverseBytes_l:           n = new ReverseBytesLNode(      arg); break;\n+  case vmIntrinsics::_reverse_i:                n = new ReverseINode(           arg); break;\n+  case vmIntrinsics::_reverse_l:                n = new ReverseLNode(           arg); break;\n@@ -5457,1 +5456,1 @@\n-                    OptoRuntime::make_setmemory_Type(),\n+                    OptoRuntime::unsafe_setmemory_Type(),\n@@ -8662,1 +8661,1 @@\n-    result = _gvn.transform(new FmaDNode(control(), a, b, c));\n+    result = _gvn.transform(new FmaDNode(a, b, c));\n@@ -8669,1 +8668,1 @@\n-    result = _gvn.transform(new FmaFNode(control(), a, b, c));\n+    result = _gvn.transform(new FmaFNode(a, b, c));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -959,1 +959,3 @@\n-                                                     uint first_node_index_in_cloned_loop_body,\n+                                                     uint first_node_index_in_pre_loop_body,\n+                                                     uint last_node_index_in_pre_loop_body,\n+                                                     DEBUG_ONLY(uint last_node_index_from_backedge_goo COMMA)\n@@ -965,0 +967,6 @@\n+  void create_assertion_predicates_at_main_or_post_loop(CountedLoopNode* source_loop_head,\n+                                                        CountedLoopNode* target_loop_head,\n+                                                        const NodeInLoopBody& _node_in_loop_body, bool clone_template);\n+  void rewire_old_target_loop_entry_dependency_to_new_entry(LoopNode* target_loop_head,\n+                                                            const Node* old_target_loop_entry,\n+                                                            uint node_index_before_new_assertion_predicate_nodes);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -871,3 +870,3 @@\n-    Node *cmov = CMoveNode::make(cmov_ctrl, iff->in(1), phi->in(1+flip), phi->in(2-flip), _igvn.type(phi));\n-    register_new_node( cmov, cmov_ctrl );\n-    _igvn.replace_node( phi, cmov );\n+    Node* cmov = CMoveNode::make(iff->in(1), phi->in(1+flip), phi->in(2-flip), _igvn.type(phi));\n+    register_new_node(cmov, cmov_ctrl);\n+    _igvn.replace_node(phi, cmov);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -444,0 +443,4 @@\n+      } else if (val->is_top()) {\n+        \/\/ This indicates that this path into the phi is dead. Top will eventually also propagate into the Region.\n+        \/\/ IGVN will clean this up later.\n+        values.at_put(j, val);\n@@ -2406,1 +2409,1 @@\n-  CallNode *call = make_slow_call((CallNode *) lock, OptoRuntime::complete_monitor_enter_Type(),\n+  CallNode* call = make_slow_call(lock, OptoRuntime::complete_monitor_enter_Type(),\n@@ -2945,0 +2948,2 @@\n+               n->Opcode() == Op_ModD ||\n+               n->Opcode() == Op_ModF ||\n@@ -3106,1 +3111,24 @@\n-      assert(false, \"unknown node type in macro list\");\n+      switch (n->Opcode()) {\n+      case Op_ModD:\n+      case Op_ModF: {\n+        bool is_drem = n->Opcode() == Op_ModD;\n+        CallNode* mod_macro = n->as_Call();\n+        CallNode* call = new CallLeafNode(mod_macro->tf(),\n+                                          is_drem ? CAST_FROM_FN_PTR(address, SharedRuntime::drem)\n+                                                  : CAST_FROM_FN_PTR(address, SharedRuntime::frem),\n+                                          is_drem ? \"drem\" : \"frem\", TypeRawPtr::BOTTOM);\n+        call->init_req(TypeFunc::Control, mod_macro->in(TypeFunc::Control));\n+        call->init_req(TypeFunc::I_O, mod_macro->in(TypeFunc::I_O));\n+        call->init_req(TypeFunc::Memory, mod_macro->in(TypeFunc::Memory));\n+        call->init_req(TypeFunc::ReturnAdr, mod_macro->in(TypeFunc::ReturnAdr));\n+        call->init_req(TypeFunc::FramePtr, mod_macro->in(TypeFunc::FramePtr));\n+        for (unsigned int i = 0; i < mod_macro->tf()->domain_cc()->cnt() - TypeFunc::Parms; i++) {\n+          call->init_req(TypeFunc::Parms + i, mod_macro->in(TypeFunc::Parms + i));\n+        }\n+        _igvn.replace_node(mod_macro, call);\n+        transform_later(call);\n+        break;\n+      }\n+      default:\n+        assert(false, \"unknown node type in macro list\");\n+      }\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -2913,2 +2912,2 @@\n-  bool is_trace_pointer() const {\n-    return is_trace(TraceMergeStores::Tag::POINTER);\n+  bool is_trace_pointer_parsing() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_PARSING);\n@@ -2917,2 +2916,2 @@\n-  bool is_trace_aliasing() const {\n-    return is_trace(TraceMergeStores::Tag::ALIASING);\n+  bool is_trace_pointer_aliasing() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_ALIASING);\n@@ -2921,2 +2920,2 @@\n-  bool is_trace_adjacency() const {\n-    return is_trace(TraceMergeStores::Tag::ADJACENCY);\n+  bool is_trace_pointer_adjacency() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_ADJACENCY);\n@@ -2993,3 +2992,4 @@\n-  const TraceMemPointer trace(is_trace_pointer(),\n-                              is_trace_aliasing(),\n-                              is_trace_adjacency());\n+  const TraceMemPointer trace(is_trace_pointer_parsing(),\n+                              is_trace_pointer_aliasing(),\n+                              is_trace_pointer_adjacency(),\n+                              true);\n@@ -2997,2 +2997,2 @@\n-  const MemPointer pointer_use(use_store NOT_PRODUCT( COMMA trace ));\n-  const MemPointer pointer_def(def_store NOT_PRODUCT( COMMA trace ));\n+  const MemPointer pointer_use(use_store NOT_PRODUCT(COMMA trace));\n+  const MemPointer pointer_def(def_store NOT_PRODUCT(COMMA trace));\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/multnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/narrowptrnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,2 +543,1 @@\n-  void modf();\n-  void modd();\n+  Node* floating_point_mod(Node* a, Node* b, BasicType type);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1519,11 +1518,3 @@\n-void Parse::modf() {\n-  Node *f2 = pop();\n-  Node *f1 = pop();\n-  Node* c = make_runtime_call(RC_LEAF, OptoRuntime::modf_Type(),\n-                              CAST_FROM_FN_PTR(address, SharedRuntime::frem),\n-                              \"frem\", nullptr, \/\/no memory effects\n-                              f1, f2);\n-  Node* res = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 0));\n-\n-  push(res);\n-}\n+Node* Parse::floating_point_mod(Node* a, Node* b, BasicType type) {\n+  assert(type == BasicType::T_FLOAT || type == BasicType::T_DOUBLE, \"only float and double are floating points\");\n+  CallNode* mod = type == BasicType::T_DOUBLE ? static_cast<CallNode*>(new ModDNode(C, a, b)) : new ModFNode(C, a, b);\n@@ -1531,15 +1522,6 @@\n-void Parse::modd() {\n-  Node *d2 = pop_pair();\n-  Node *d1 = pop_pair();\n-  Node* c = make_runtime_call(RC_LEAF, OptoRuntime::Math_DD_D_Type(),\n-                              CAST_FROM_FN_PTR(address, SharedRuntime::drem),\n-                              \"drem\", nullptr, \/\/no memory effects\n-                              d1, top(), d2, top());\n-  Node* res_d   = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 0));\n-\n-#ifdef ASSERT\n-  Node* res_top = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 1));\n-  assert(res_top == top(), \"second value must be top\");\n-#endif\n-\n-  push_pair(res_d);\n+  Node* prev_mem = set_predefined_input_for_runtime_call(mod);\n+  mod = _gvn.transform(mod)->as_Call();\n+  set_predefined_output_for_runtime_call(mod, prev_mem, TypeRawPtr::BOTTOM);\n+  Node* result = _gvn.transform(new ProjNode(mod, TypeFunc::Parms + 0));\n+  record_for_igvn(mod);\n+  return result;\n@@ -3145,12 +3127,4 @@\n-    if (Matcher::has_match_rule(Op_ModF)) {\n-      \/\/ Generate a ModF node.\n-      b = pop();\n-      a = pop();\n-      c = _gvn.transform( new ModFNode(nullptr,a,b) );\n-      d = precision_rounding(c);\n-      push( d );\n-    }\n-    else {\n-      \/\/ Generate a call.\n-      modf();\n-    }\n+    \/\/ Generate a ModF node.\n+    b = pop();\n+    a = pop();\n+    push(floating_point_mod(a, b, BasicType::T_FLOAT));\n@@ -3278,14 +3252,4 @@\n-    if (Matcher::has_match_rule(Op_ModD)) {\n-      \/\/ Generate a ModD node.\n-      b = pop_pair();\n-      a = pop_pair();\n-      \/\/ a % b\n-\n-      c = _gvn.transform( new ModDNode(nullptr,a,b) );\n-      d = dprecision_rounding(c);\n-      push_pair( d );\n-    }\n-    else {\n-      \/\/ Generate a call.\n-      modd();\n-    }\n+    \/\/ Generate a ModD node.\n+    b = pop_pair();\n+    a = pop_pair();\n+    push_pair(floating_point_mod(a, b, BasicType::T_DOUBLE));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":17,"deletions":53,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -197,0 +196,66 @@\n+const TypeFunc* OptoRuntime::_new_instance_Type                   = nullptr;\n+const TypeFunc* OptoRuntime::_new_array_Type                      = nullptr;\n+const TypeFunc* OptoRuntime::_multianewarray2_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_multianewarray3_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_multianewarray4_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_multianewarray5_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_multianewarrayN_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_complete_monitor_enter_Type         = nullptr;\n+const TypeFunc* OptoRuntime::_complete_monitor_exit_Type          = nullptr;\n+const TypeFunc* OptoRuntime::_monitor_notify_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_uncommon_trap_Type                  = nullptr;\n+const TypeFunc* OptoRuntime::_athrow_Type                         = nullptr;\n+const TypeFunc* OptoRuntime::_rethrow_Type                        = nullptr;\n+const TypeFunc* OptoRuntime::_Math_D_D_Type                       = nullptr;\n+const TypeFunc* OptoRuntime::_Math_DD_D_Type                      = nullptr;\n+const TypeFunc* OptoRuntime::_modf_Type                           = nullptr;\n+const TypeFunc* OptoRuntime::_l2f_Type                            = nullptr;\n+const TypeFunc* OptoRuntime::_void_long_Type                      = nullptr;\n+const TypeFunc* OptoRuntime::_void_void_Type                      = nullptr;\n+const TypeFunc* OptoRuntime::_jfr_write_checkpoint_Type           = nullptr;\n+const TypeFunc* OptoRuntime::_flush_windows_Type                  = nullptr;\n+const TypeFunc* OptoRuntime::_fast_arraycopy_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_checkcast_arraycopy_Type            = nullptr;\n+const TypeFunc* OptoRuntime::_generic_arraycopy_Type              = nullptr;\n+const TypeFunc* OptoRuntime::_slow_arraycopy_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_unsafe_setmemory_Type               = nullptr;\n+const TypeFunc* OptoRuntime::_array_fill_Type                     = nullptr;\n+const TypeFunc* OptoRuntime::_array_sort_Type                     = nullptr;\n+const TypeFunc* OptoRuntime::_array_partition_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_aescrypt_block_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_cipherBlockChaining_aescrypt_Type   = nullptr;\n+const TypeFunc* OptoRuntime::_electronicCodeBook_aescrypt_Type    = nullptr;\n+const TypeFunc* OptoRuntime::_counterMode_aescrypt_Type           = nullptr;\n+const TypeFunc* OptoRuntime::_galoisCounterMode_aescrypt_Type     = nullptr;\n+const TypeFunc* OptoRuntime::_digestBase_implCompress_with_sha3_Type      = nullptr;\n+const TypeFunc* OptoRuntime::_digestBase_implCompress_without_sha3_Type   = nullptr;\n+const TypeFunc* OptoRuntime::_digestBase_implCompressMB_with_sha3_Type    = nullptr;\n+const TypeFunc* OptoRuntime::_digestBase_implCompressMB_without_sha3_Type = nullptr;\n+const TypeFunc* OptoRuntime::_multiplyToLen_Type                  = nullptr;\n+const TypeFunc* OptoRuntime::_montgomeryMultiply_Type             = nullptr;\n+const TypeFunc* OptoRuntime::_montgomerySquare_Type               = nullptr;\n+const TypeFunc* OptoRuntime::_squareToLen_Type                    = nullptr;\n+const TypeFunc* OptoRuntime::_mulAdd_Type                         = nullptr;\n+const TypeFunc* OptoRuntime::_bigIntegerShift_Type                = nullptr;\n+const TypeFunc* OptoRuntime::_vectorizedMismatch_Type             = nullptr;\n+const TypeFunc* OptoRuntime::_ghash_processBlocks_Type            = nullptr;\n+const TypeFunc* OptoRuntime::_chacha20Block_Type                  = nullptr;\n+const TypeFunc* OptoRuntime::_base64_encodeBlock_Type             = nullptr;\n+const TypeFunc* OptoRuntime::_base64_decodeBlock_Type             = nullptr;\n+const TypeFunc* OptoRuntime::_string_IndexOf_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_poly1305_processBlocks_Type         = nullptr;\n+const TypeFunc* OptoRuntime::_intpoly_montgomeryMult_P256_Type    = nullptr;\n+const TypeFunc* OptoRuntime::_intpoly_assign_Type                 = nullptr;\n+const TypeFunc* OptoRuntime::_updateBytesCRC32_Type               = nullptr;\n+const TypeFunc* OptoRuntime::_updateBytesCRC32C_Type              = nullptr;\n+const TypeFunc* OptoRuntime::_updateBytesAdler32_Type             = nullptr;\n+const TypeFunc* OptoRuntime::_osr_end_Type                        = nullptr;\n+const TypeFunc* OptoRuntime::_register_finalizer_Type             = nullptr;\n+#if INCLUDE_JFR\n+const TypeFunc* OptoRuntime::_class_id_load_barrier_Type          = nullptr;\n+#endif \/\/ INCLUDE_JFR\n+#if INCLUDE_JVMTI\n+const TypeFunc* OptoRuntime::_notify_jvmti_vthread_Type           = nullptr;\n+#endif \/\/ INCLUDE_JVMTI\n+const TypeFunc* OptoRuntime::_dtrace_method_entry_exit_Type       = nullptr;\n+const TypeFunc* OptoRuntime::_dtrace_object_alloc_Type            = nullptr;\n@@ -508,1 +573,1 @@\n-const TypeFunc *OptoRuntime::new_instance_Type() {\n+static const TypeFunc* make_new_instance_Type() {\n@@ -525,1 +590,1 @@\n-const TypeFunc *OptoRuntime::notify_jvmti_vthread_Type() {\n+static const TypeFunc* make_notify_jvmti_vthread_Type() {\n@@ -541,1 +606,1 @@\n-const TypeFunc *OptoRuntime::athrow_Type() {\n+static const TypeFunc* make_athrow_Type() {\n@@ -555,2 +620,1 @@\n-\n-const TypeFunc *OptoRuntime::new_array_Type() {\n+static const TypeFunc* make_new_array_Type() {\n@@ -572,5 +636,1 @@\n-const TypeFunc *OptoRuntime::new_array_nozero_Type() {\n-  return new_array_Type();\n-}\n-\n-const TypeFunc *OptoRuntime::multianewarray_Type(int ndim) {\n+const TypeFunc* OptoRuntime::multianewarray_Type(int ndim) {\n@@ -593,17 +653,1 @@\n-const TypeFunc *OptoRuntime::multianewarray2_Type() {\n-  return multianewarray_Type(2);\n-}\n-\n-const TypeFunc *OptoRuntime::multianewarray3_Type() {\n-  return multianewarray_Type(3);\n-}\n-\n-const TypeFunc *OptoRuntime::multianewarray4_Type() {\n-  return multianewarray_Type(4);\n-}\n-\n-const TypeFunc *OptoRuntime::multianewarray5_Type() {\n-  return multianewarray_Type(5);\n-}\n-\n-const TypeFunc *OptoRuntime::multianewarrayN_Type() {\n+static const TypeFunc* make_multianewarrayN_Type() {\n@@ -624,1 +668,1 @@\n-const TypeFunc *OptoRuntime::uncommon_trap_Type() {\n+static const TypeFunc* make_uncommon_trap_Type() {\n@@ -639,1 +683,2 @@\n-const TypeFunc *OptoRuntime::complete_monitor_enter_Type() {\n+\n+static const TypeFunc* make_complete_monitor_enter_Type() {\n@@ -654,5 +699,2 @@\n-const TypeFunc *OptoRuntime::complete_monitor_locking_Type() {\n-  return complete_monitor_enter_Type();\n-}\n-\n-const TypeFunc *OptoRuntime::complete_monitor_exit_Type() {\n+\n+static const TypeFunc* make_complete_monitor_exit_Type() {\n@@ -675,1 +717,1 @@\n-const TypeFunc *OptoRuntime::monitor_notify_Type() {\n+static const TypeFunc* make_monitor_notify_Type() {\n@@ -687,5 +729,1 @@\n-const TypeFunc *OptoRuntime::monitor_notifyAll_Type() {\n-  return monitor_notify_Type();\n-}\n-\n-const TypeFunc* OptoRuntime::flush_windows_Type() {\n+static const TypeFunc* make_flush_windows_Type() {\n@@ -705,1 +743,1 @@\n-const TypeFunc* OptoRuntime::l2f_Type() {\n+static const TypeFunc* make_l2f_Type() {\n@@ -720,1 +758,1 @@\n-const TypeFunc* OptoRuntime::modf_Type() {\n+static const TypeFunc* make_modf_Type() {\n@@ -735,1 +773,1 @@\n-const TypeFunc *OptoRuntime::Math_D_D_Type() {\n+static const TypeFunc* make_Math_D_D_Type() {\n@@ -752,1 +790,1 @@\n-const TypeFunc *OptoRuntime::Math_Vector_Vector_Type(uint num_arg, const TypeVect* in_type, const TypeVect* out_type) {\n+const TypeFunc* OptoRuntime::Math_Vector_Vector_Type(uint num_arg, const TypeVect* in_type, const TypeVect* out_type) {\n@@ -771,1 +809,1 @@\n-const TypeFunc* OptoRuntime::Math_DD_D_Type() {\n+static const TypeFunc* make_Math_DD_D_Type() {\n@@ -790,1 +828,1 @@\n-const TypeFunc* OptoRuntime::void_long_Type() {\n+static const TypeFunc* make_void_long_Type() {\n@@ -804,4 +842,4 @@\n-const TypeFunc* OptoRuntime::void_void_Type() {\n-   \/\/ create input type (domain)\n-   const Type **fields = TypeTuple::fields(0);\n-   const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+0, fields);\n+static const TypeFunc* make_void_void_Type() {\n+  \/\/ create input type (domain)\n+  const Type **fields = TypeTuple::fields(0);\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+0, fields);\n@@ -809,5 +847,5 @@\n-   \/\/ create result type (range)\n-   fields = TypeTuple::fields(0);\n-   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-   return TypeFunc::make(domain, range);\n- }\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n+  return TypeFunc::make(domain, range);\n+}\n@@ -815,4 +853,4 @@\n- const TypeFunc* OptoRuntime::jfr_write_checkpoint_Type() {\n-   \/\/ create input type (domain)\n-   const Type **fields = TypeTuple::fields(0);\n-   const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms, fields);\n+static const TypeFunc* make_jfr_write_checkpoint_Type() {\n+  \/\/ create input type (domain)\n+  const Type **fields = TypeTuple::fields(0);\n+  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms, fields);\n@@ -820,5 +858,5 @@\n-   \/\/ create result type (range)\n-   fields = TypeTuple::fields(0);\n-   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms, fields);\n-   return TypeFunc::make(domain, range);\n- }\n+  \/\/ create result type (range)\n+  fields = TypeTuple::fields(0);\n+  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms, fields);\n+  return TypeFunc::make(domain, range);\n+}\n@@ -831,1 +869,2 @@\n-const TypeFunc* OptoRuntime::make_setmemory_Type() {\n+\n+static const TypeFunc* make_setmemory_Type() {\n@@ -896,23 +935,1 @@\n-const TypeFunc* OptoRuntime::fast_arraycopy_Type() {\n-  \/\/ This signature is simple:  Two base pointers and a size_t.\n-  return make_arraycopy_Type(ac_fast);\n-}\n-\n-const TypeFunc* OptoRuntime::checkcast_arraycopy_Type() {\n-  \/\/ An extension of fast_arraycopy_Type which adds type checking.\n-  return make_arraycopy_Type(ac_checkcast);\n-}\n-\n-const TypeFunc* OptoRuntime::slow_arraycopy_Type() {\n-  \/\/ This signature is exactly the same as System.arraycopy.\n-  \/\/ There are no intptr_t (int\/long) arguments.\n-  return make_arraycopy_Type(ac_slow);\n-}\n-\n-const TypeFunc* OptoRuntime::generic_arraycopy_Type() {\n-  \/\/ This signature is like System.arraycopy, except that it returns status.\n-  return make_arraycopy_Type(ac_generic);\n-}\n-\n-\n-const TypeFunc* OptoRuntime::array_fill_Type() {\n+static const TypeFunc* make_array_fill_Type() {\n@@ -937,1 +954,1 @@\n-const TypeFunc* OptoRuntime::array_partition_Type() {\n+static const TypeFunc* make_array_partition_Type() {\n@@ -960,1 +977,1 @@\n-const TypeFunc* OptoRuntime::array_sort_Type() {\n+static const TypeFunc* make_array_sort_Type() {\n@@ -980,2 +997,1 @@\n-\/\/ for aescrypt encrypt\/decrypt operations, just three pointers returning void (length is constant)\n-const TypeFunc* OptoRuntime::aescrypt_block_Type() {\n+static const TypeFunc* make_aescrypt_block_Type() {\n@@ -1000,4 +1016,1 @@\n-\/**\n- * int updateBytesCRC32(int crc, byte* b, int len)\n- *\/\n-const TypeFunc* OptoRuntime::updateBytesCRC32_Type() {\n+static const TypeFunc* make_updateBytesCRC32_Type() {\n@@ -1022,4 +1035,1 @@\n-\/**\n- * int updateBytesCRC32C(int crc, byte* buf, int len, int* table)\n- *\/\n-const TypeFunc* OptoRuntime::updateBytesCRC32C_Type() {\n+static const TypeFunc* make_updateBytesCRC32C_Type() {\n@@ -1045,4 +1055,1 @@\n-\/**\n-*  int updateBytesAdler32(int adler, bytes* b, int off, int len)\n-*\/\n-const TypeFunc* OptoRuntime::updateBytesAdler32_Type() {\n+static const TypeFunc* make_updateBytesAdler32_Type() {\n@@ -1067,2 +1074,1 @@\n-\/\/ for cipherBlockChaining calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n-const TypeFunc* OptoRuntime::cipherBlockChaining_aescrypt_Type() {\n+static const TypeFunc* make_cipherBlockChaining_aescrypt_Type() {\n@@ -1089,2 +1095,1 @@\n-\/\/ for electronicCodeBook calls of aescrypt encrypt\/decrypt, three pointers and a length, returning int\n-const TypeFunc* OptoRuntime::electronicCodeBook_aescrypt_Type() {\n+static const TypeFunc* make_electronicCodeBook_aescrypt_Type() {\n@@ -1110,2 +1115,1 @@\n-\/\/for counterMode calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n-const TypeFunc* OptoRuntime::counterMode_aescrypt_Type() {\n+static const TypeFunc* make_counterMode_aescrypt_Type() {\n@@ -1133,2 +1137,1 @@\n-\/\/for counterMode calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n-const TypeFunc* OptoRuntime::galoisCounterMode_aescrypt_Type() {\n+static const TypeFunc* make_galoisCounterMode_aescrypt_Type() {\n@@ -1158,4 +1161,1 @@\n-\/*\n- * void implCompress(byte[] buf, int ofs)\n- *\/\n-const TypeFunc* OptoRuntime::digestBase_implCompress_Type(bool is_sha3) {\n+static const TypeFunc* make_digestBase_implCompress_Type(bool is_sha3) {\n@@ -1180,4 +1180,1 @@\n-\/*\n- * int implCompressMultiBlock(byte[] b, int ofs, int limit)\n- *\/\n-const TypeFunc* OptoRuntime::digestBase_implCompressMB_Type(bool is_sha3) {\n+static const TypeFunc* make_digestBase_implCompressMB_Type(bool is_sha3) {\n@@ -1204,1 +1201,1 @@\n-const TypeFunc* OptoRuntime::multiplyToLen_Type() {\n+static const TypeFunc* make_multiplyToLen_Type() {\n@@ -1225,1 +1222,1 @@\n-const TypeFunc* OptoRuntime::squareToLen_Type() {\n+static const TypeFunc* make_squareToLen_Type() {\n@@ -1245,2 +1242,1 @@\n-\/\/ for mulAdd calls, 2 pointers and 3 ints, returning int\n-const TypeFunc* OptoRuntime::mulAdd_Type() {\n+static const TypeFunc* make_mulAdd_Type() {\n@@ -1267,1 +1263,1 @@\n-const TypeFunc* OptoRuntime::montgomeryMultiply_Type() {\n+static const TypeFunc* make_montgomeryMultiply_Type() {\n@@ -1291,1 +1287,1 @@\n-const TypeFunc* OptoRuntime::montgomerySquare_Type() {\n+static const TypeFunc* make_montgomerySquare_Type() {\n@@ -1314,1 +1310,1 @@\n-const TypeFunc * OptoRuntime::bigIntegerShift_Type() {\n+static const TypeFunc* make_bigIntegerShift_Type() {\n@@ -1333,1 +1329,1 @@\n-const TypeFunc* OptoRuntime::vectorizedMismatch_Type() {\n+static const TypeFunc* make_vectorizedMismatch_Type() {\n@@ -1353,3 +1349,2 @@\n-\/\/ GHASH block processing\n-const TypeFunc* OptoRuntime::ghash_processBlocks_Type() {\n-    int argcnt = 4;\n+static const TypeFunc* make_ghash_processBlocks_Type() {\n+  int argcnt = 4;\n@@ -1357,8 +1352,8 @@\n-    const Type** fields = TypeTuple::fields(argcnt);\n-    int argp = TypeFunc::Parms;\n-    fields[argp++] = TypePtr::NOTNULL;    \/\/ state\n-    fields[argp++] = TypePtr::NOTNULL;    \/\/ subkeyH\n-    fields[argp++] = TypePtr::NOTNULL;    \/\/ data\n-    fields[argp++] = TypeInt::INT;        \/\/ blocks\n-    assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n-    const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms+argcnt, fields);\n+  const Type** fields = TypeTuple::fields(argcnt);\n+  int argp = TypeFunc::Parms;\n+  fields[argp++] = TypePtr::NOTNULL;    \/\/ state\n+  fields[argp++] = TypePtr::NOTNULL;    \/\/ subkeyH\n+  fields[argp++] = TypePtr::NOTNULL;    \/\/ data\n+  fields[argp++] = TypeInt::INT;        \/\/ blocks\n+  assert(argp == TypeFunc::Parms+argcnt, \"correct decoding\");\n+  const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms+argcnt, fields);\n@@ -1366,5 +1361,5 @@\n-    \/\/ result type needed\n-    fields = TypeTuple::fields(1);\n-    fields[TypeFunc::Parms+0] = nullptr; \/\/ void\n-    const TypeTuple* range = TypeTuple::make(TypeFunc::Parms, fields);\n-    return TypeFunc::make(domain, range);\n+  \/\/ result type needed\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms+0] = nullptr; \/\/ void\n+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms, fields);\n+  return TypeFunc::make(domain, range);\n@@ -1373,3 +1368,2 @@\n-\/\/ ChaCha20 Block function\n-const TypeFunc* OptoRuntime::chacha20Block_Type() {\n-    int argcnt = 2;\n+static const TypeFunc* make_chacha20Block_Type() {\n+  int argcnt = 2;\n@@ -1377,4 +1371,4 @@\n-    const Type** fields = TypeTuple::fields(argcnt);\n-    int argp = TypeFunc::Parms;\n-    fields[argp++] = TypePtr::NOTNULL;      \/\/ state\n-    fields[argp++] = TypePtr::NOTNULL;      \/\/ result\n+  const Type** fields = TypeTuple::fields(argcnt);\n+  int argp = TypeFunc::Parms;\n+  fields[argp++] = TypePtr::NOTNULL;      \/\/ state\n+  fields[argp++] = TypePtr::NOTNULL;      \/\/ result\n@@ -1382,2 +1376,2 @@\n-    assert(argp == TypeFunc::Parms + argcnt, \"correct decoding\");\n-    const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms + argcnt, fields);\n+  assert(argp == TypeFunc::Parms + argcnt, \"correct decoding\");\n+  const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms + argcnt, fields);\n@@ -1385,5 +1379,5 @@\n-    \/\/ result type needed\n-    fields = TypeTuple::fields(1);\n-    fields[TypeFunc::Parms + 0] = TypeInt::INT;     \/\/ key stream outlen as int\n-    const TypeTuple* range = TypeTuple::make(TypeFunc::Parms + 1, fields);\n-    return TypeFunc::make(domain, range);\n+  \/\/ result type needed\n+  fields = TypeTuple::fields(1);\n+  fields[TypeFunc::Parms + 0] = TypeInt::INT;     \/\/ key stream outlen as int\n+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms + 1, fields);\n+  return TypeFunc::make(domain, range);\n@@ -1392,2 +1386,1 @@\n-\/\/ Base64 encode function\n-const TypeFunc* OptoRuntime::base64_encodeBlock_Type() {\n+static const TypeFunc* make_base64_encodeBlock_Type() {\n@@ -1414,2 +1407,1 @@\n-\/\/ String IndexOf function\n-const TypeFunc* OptoRuntime::string_IndexOf_Type() {\n+static const TypeFunc* make_string_IndexOf_Type() {\n@@ -1434,2 +1426,1 @@\n-\/\/ Base64 decode function\n-const TypeFunc* OptoRuntime::base64_decodeBlock_Type() {\n+static const TypeFunc* make_base64_decodeBlock_Type() {\n@@ -1457,2 +1448,1 @@\n-\/\/ Poly1305 processMultipleBlocks function\n-const TypeFunc* OptoRuntime::poly1305_processBlocks_Type() {\n+static const TypeFunc* make_poly1305_processBlocks_Type() {\n@@ -1477,2 +1467,1 @@\n-\/\/ MontgomeryIntegerPolynomialP256 multiply function\n-const TypeFunc* OptoRuntime::intpoly_montgomeryMult_P256_Type() {\n+static const TypeFunc* make_intpoly_montgomeryMult_P256_Type() {\n@@ -1496,2 +1485,1 @@\n-\/\/ IntegerPolynomial constant time assignment function\n-const TypeFunc* OptoRuntime::intpoly_assign_Type() {\n+static const TypeFunc* make_intpoly_assign_Type() {\n@@ -1516,2 +1504,2 @@\n-\/\/------------- Interpreter state access for on stack replacement\n-const TypeFunc* OptoRuntime::osr_end_Type() {\n+\/\/------------- Interpreter state for on stack replacement\n+static const TypeFunc* make_osr_end_Type() {\n@@ -1763,2 +1751,1 @@\n-\n-const TypeFunc *OptoRuntime::rethrow_Type() {\n+static const TypeFunc* make_rethrow_Type() {\n@@ -1814,1 +1801,1 @@\n-const TypeFunc *OptoRuntime::register_finalizer_Type() {\n+static const TypeFunc* make_register_finalizer_Type() {\n@@ -1831,1 +1818,1 @@\n-const TypeFunc *OptoRuntime::class_id_load_barrier_Type() {\n+static const TypeFunc* make_class_id_load_barrier_Type() {\n@@ -1844,1 +1831,1 @@\n-#endif\n+#endif \/\/ INCLUDE_JFR\n@@ -1847,2 +1834,1 @@\n-\/\/ Dtrace support.  entry and exit probes have the same signature\n-const TypeFunc *OptoRuntime::dtrace_method_entry_exit_Type() {\n+static const TypeFunc* make_dtrace_method_entry_exit_Type() {\n@@ -1863,1 +1849,1 @@\n-const TypeFunc *OptoRuntime::dtrace_object_alloc_Type() {\n+static const TypeFunc* make_dtrace_object_alloc_Type() {\n@@ -1879,1 +1865,0 @@\n-\n@@ -1965,0 +1950,69 @@\n+void OptoRuntime::initialize_types() {\n+  _new_instance_Type                  = make_new_instance_Type();\n+  _new_array_Type                     = make_new_array_Type();\n+  _multianewarray2_Type               = multianewarray_Type(2);\n+  _multianewarray3_Type               = multianewarray_Type(3);\n+  _multianewarray4_Type               = multianewarray_Type(4);\n+  _multianewarray5_Type               = multianewarray_Type(5);\n+  _multianewarrayN_Type               = make_multianewarrayN_Type();\n+  _complete_monitor_enter_Type        = make_complete_monitor_enter_Type();\n+  _complete_monitor_exit_Type         = make_complete_monitor_exit_Type();\n+  _monitor_notify_Type                = make_monitor_notify_Type();\n+  _uncommon_trap_Type                 = make_uncommon_trap_Type();\n+  _athrow_Type                        = make_athrow_Type();\n+  _rethrow_Type                       = make_rethrow_Type();\n+  _Math_D_D_Type                      = make_Math_D_D_Type();\n+  _Math_DD_D_Type                     = make_Math_DD_D_Type();\n+  _modf_Type                          = make_modf_Type();\n+  _l2f_Type                           = make_l2f_Type();\n+  _void_long_Type                     = make_void_long_Type();\n+  _void_void_Type                     = make_void_void_Type();\n+  _jfr_write_checkpoint_Type          = make_jfr_write_checkpoint_Type();\n+  _flush_windows_Type                 = make_flush_windows_Type();\n+  _fast_arraycopy_Type                = make_arraycopy_Type(ac_fast);\n+  _checkcast_arraycopy_Type           = make_arraycopy_Type(ac_checkcast);\n+  _generic_arraycopy_Type             = make_arraycopy_Type(ac_generic);\n+  _slow_arraycopy_Type                = make_arraycopy_Type(ac_slow);\n+  _unsafe_setmemory_Type              = make_setmemory_Type();\n+  _array_fill_Type                    = make_array_fill_Type();\n+  _array_sort_Type                    = make_array_sort_Type();\n+  _array_partition_Type               = make_array_partition_Type();\n+  _aescrypt_block_Type                = make_aescrypt_block_Type();\n+  _cipherBlockChaining_aescrypt_Type  = make_cipherBlockChaining_aescrypt_Type();\n+  _electronicCodeBook_aescrypt_Type   = make_electronicCodeBook_aescrypt_Type();\n+  _counterMode_aescrypt_Type          = make_counterMode_aescrypt_Type();\n+  _galoisCounterMode_aescrypt_Type    = make_galoisCounterMode_aescrypt_Type();\n+  _digestBase_implCompress_with_sha3_Type      = make_digestBase_implCompress_Type(  \/* is_sha3= *\/ true);\n+  _digestBase_implCompress_without_sha3_Type   = make_digestBase_implCompress_Type(  \/* is_sha3= *\/ false);;\n+  _digestBase_implCompressMB_with_sha3_Type    = make_digestBase_implCompressMB_Type(\/* is_sha3= *\/ true);\n+  _digestBase_implCompressMB_without_sha3_Type = make_digestBase_implCompressMB_Type(\/* is_sha3= *\/ false);\n+  _multiplyToLen_Type                 = make_multiplyToLen_Type();\n+  _montgomeryMultiply_Type            = make_montgomeryMultiply_Type();\n+  _montgomerySquare_Type              = make_montgomerySquare_Type();\n+  _squareToLen_Type                   = make_squareToLen_Type();\n+  _mulAdd_Type                        = make_mulAdd_Type();\n+  _bigIntegerShift_Type               = make_bigIntegerShift_Type();\n+  _vectorizedMismatch_Type            = make_vectorizedMismatch_Type();\n+  _ghash_processBlocks_Type           = make_ghash_processBlocks_Type();\n+  _chacha20Block_Type                 = make_chacha20Block_Type();\n+  _base64_encodeBlock_Type            = make_base64_encodeBlock_Type();\n+  _base64_decodeBlock_Type            = make_base64_decodeBlock_Type();\n+  _string_IndexOf_Type                = make_string_IndexOf_Type();\n+  _poly1305_processBlocks_Type        = make_poly1305_processBlocks_Type();\n+  _intpoly_montgomeryMult_P256_Type   = make_intpoly_montgomeryMult_P256_Type();\n+  _intpoly_assign_Type                = make_intpoly_assign_Type();\n+  _updateBytesCRC32_Type              = make_updateBytesCRC32_Type();\n+  _updateBytesCRC32C_Type             = make_updateBytesCRC32C_Type();\n+  _updateBytesAdler32_Type            = make_updateBytesAdler32_Type();\n+  _osr_end_Type                       = make_osr_end_Type();\n+  _register_finalizer_Type            = make_register_finalizer_Type();\n+  JFR_ONLY(\n+    _class_id_load_barrier_Type       = make_class_id_load_barrier_Type();\n+  )\n+#if INCLUDE_JVMTI\n+  _notify_jvmti_vthread_Type          = make_notify_jvmti_vthread_Type();\n+#endif \/\/ INCLUDE_JVMTI\n+  _dtrace_method_entry_exit_Type      = make_dtrace_method_entry_exit_Type();\n+  _dtrace_object_alloc_Type           = make_dtrace_object_alloc_Type();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":236,"deletions":182,"binary":false,"changes":418,"status":"modified"},{"patch":"@@ -134,0 +134,68 @@\n+  \/\/ static TypeFunc* data members\n+  static const TypeFunc* _new_instance_Type;\n+  static const TypeFunc* _new_array_Type;\n+  static const TypeFunc* _multianewarray2_Type;\n+  static const TypeFunc* _multianewarray3_Type;\n+  static const TypeFunc* _multianewarray4_Type;\n+  static const TypeFunc* _multianewarray5_Type;\n+  static const TypeFunc* _multianewarrayN_Type;\n+  static const TypeFunc* _complete_monitor_enter_Type;\n+  static const TypeFunc* _complete_monitor_exit_Type;\n+  static const TypeFunc* _monitor_notify_Type;\n+  static const TypeFunc* _uncommon_trap_Type;\n+  static const TypeFunc* _athrow_Type;\n+  static const TypeFunc* _rethrow_Type;\n+  static const TypeFunc* _Math_D_D_Type;\n+  static const TypeFunc* _Math_DD_D_Type;\n+  static const TypeFunc* _modf_Type;\n+  static const TypeFunc* _l2f_Type;\n+  static const TypeFunc* _void_long_Type;\n+  static const TypeFunc* _void_void_Type;\n+  static const TypeFunc* _jfr_write_checkpoint_Type;\n+  static const TypeFunc* _flush_windows_Type;\n+  static const TypeFunc* _fast_arraycopy_Type;\n+  static const TypeFunc* _checkcast_arraycopy_Type;\n+  static const TypeFunc* _generic_arraycopy_Type;\n+  static const TypeFunc* _slow_arraycopy_Type;\n+  static const TypeFunc* _unsafe_setmemory_Type;\n+  static const TypeFunc* _array_fill_Type;\n+  static const TypeFunc* _array_sort_Type;\n+  static const TypeFunc* _array_partition_Type;\n+  static const TypeFunc* _aescrypt_block_Type;\n+  static const TypeFunc* _cipherBlockChaining_aescrypt_Type;\n+  static const TypeFunc* _electronicCodeBook_aescrypt_Type;\n+  static const TypeFunc* _counterMode_aescrypt_Type;\n+  static const TypeFunc* _galoisCounterMode_aescrypt_Type;\n+  static const TypeFunc* _digestBase_implCompress_with_sha3_Type;\n+  static const TypeFunc* _digestBase_implCompress_without_sha3_Type;\n+  static const TypeFunc* _digestBase_implCompressMB_with_sha3_Type;\n+  static const TypeFunc* _digestBase_implCompressMB_without_sha3_Type;\n+  static const TypeFunc* _multiplyToLen_Type;\n+  static const TypeFunc* _montgomeryMultiply_Type;\n+  static const TypeFunc* _montgomerySquare_Type;\n+  static const TypeFunc* _squareToLen_Type;\n+  static const TypeFunc* _mulAdd_Type;\n+  static const TypeFunc* _bigIntegerShift_Type;\n+  static const TypeFunc* _vectorizedMismatch_Type;\n+  static const TypeFunc* _ghash_processBlocks_Type;\n+  static const TypeFunc* _chacha20Block_Type;\n+  static const TypeFunc* _base64_encodeBlock_Type;\n+  static const TypeFunc* _base64_decodeBlock_Type;\n+  static const TypeFunc* _string_IndexOf_Type;\n+  static const TypeFunc* _poly1305_processBlocks_Type;\n+  static const TypeFunc* _intpoly_montgomeryMult_P256_Type;\n+  static const TypeFunc* _intpoly_assign_Type;\n+  static const TypeFunc* _updateBytesCRC32_Type;\n+  static const TypeFunc* _updateBytesCRC32C_Type;\n+  static const TypeFunc* _updateBytesAdler32_Type;\n+  static const TypeFunc* _osr_end_Type;\n+  static const TypeFunc* _register_finalizer_Type;\n+#if INCLUDE_JFR\n+  static const TypeFunc* _class_id_load_barrier_Type;\n+#endif \/\/ INCLUDE_JFR\n+#if INCLUDE_JVMTI\n+  static const TypeFunc* _notify_jvmti_vthread_Type;\n+#endif \/\/ INCLUDE_JVMTI\n+  static const TypeFunc* _dtrace_method_entry_exit_Type;\n+  static const TypeFunc* _dtrace_object_alloc_Type;\n+\n@@ -249,3 +317,14 @@\n-  static const TypeFunc* new_instance_Type(); \/\/ object allocation (slow case)\n-  static const TypeFunc* new_array_Type ();   \/\/ [a]newarray (slow case)\n-  static const TypeFunc* new_array_nozero_Type ();   \/\/ [a]newarray (slow case)\n+  static inline const TypeFunc* new_instance_Type() {\n+    assert(_new_instance_Type != nullptr, \"should be initialized\");\n+    return _new_instance_Type;\n+  }\n+\n+  static inline const TypeFunc* new_array_Type() {\n+    assert(_new_array_Type != nullptr, \"should be initialized\");\n+    return _new_array_Type;\n+  }\n+\n+  static inline const TypeFunc* new_array_nozero_Type() {\n+    return new_array_Type();\n+  }\n+\n@@ -253,15 +332,74 @@\n-  static const TypeFunc* multianewarray2_Type(); \/\/ multianewarray\n-  static const TypeFunc* multianewarray3_Type(); \/\/ multianewarray\n-  static const TypeFunc* multianewarray4_Type(); \/\/ multianewarray\n-  static const TypeFunc* multianewarray5_Type(); \/\/ multianewarray\n-  static const TypeFunc* multianewarrayN_Type(); \/\/ multianewarray\n-  static const TypeFunc* complete_monitor_enter_Type();\n-  static const TypeFunc* complete_monitor_locking_Type();\n-  static const TypeFunc* complete_monitor_exit_Type();\n-  static const TypeFunc* monitor_notify_Type();\n-  static const TypeFunc* monitor_notifyAll_Type();\n-  static const TypeFunc* uncommon_trap_Type();\n-  static const TypeFunc* athrow_Type();\n-  static const TypeFunc* rethrow_Type();\n-  static const TypeFunc* Math_D_D_Type();  \/\/ sin,cos & friends\n-  static const TypeFunc* Math_DD_D_Type(); \/\/ mod,pow & friends\n+\n+  static inline const TypeFunc* multianewarray2_Type() {\n+    assert(_multianewarray2_Type != nullptr, \"should be initialized\");\n+    return _multianewarray2_Type;\n+  }\n+\n+  static inline const TypeFunc* multianewarray3_Type() {\n+    assert(_multianewarray3_Type != nullptr, \"should be initialized\");\n+    return _multianewarray3_Type;\n+  }\n+\n+  static inline const TypeFunc* multianewarray4_Type() {\n+    assert(_multianewarray4_Type != nullptr, \"should be initialized\");\n+    return _multianewarray4_Type;\n+  }\n+\n+  static inline const TypeFunc* multianewarray5_Type() {\n+    assert(_multianewarray5_Type != nullptr, \"should be initialized\");\n+    return _multianewarray5_Type;\n+  }\n+\n+  static inline const TypeFunc* multianewarrayN_Type() {\n+    assert(_multianewarrayN_Type != nullptr, \"should be initialized\");\n+    return _multianewarrayN_Type;\n+  }\n+\n+  static inline const TypeFunc* complete_monitor_enter_Type() {\n+    assert(_complete_monitor_enter_Type != nullptr, \"should be initialized\");\n+    return _complete_monitor_enter_Type;\n+  }\n+\n+  static inline const TypeFunc* complete_monitor_locking_Type() {\n+    return complete_monitor_enter_Type();\n+  }\n+\n+  static inline const TypeFunc* complete_monitor_exit_Type() {\n+    assert(_complete_monitor_exit_Type != nullptr, \"should be initialized\");\n+    return _complete_monitor_exit_Type;\n+  }\n+\n+  static inline const TypeFunc* monitor_notify_Type() {\n+    assert(_monitor_notify_Type != nullptr, \"should be initialized\");\n+    return _monitor_notify_Type;\n+  }\n+\n+  static inline const TypeFunc* monitor_notifyAll_Type() {\n+    return monitor_notify_Type();\n+  }\n+\n+  static inline const TypeFunc* uncommon_trap_Type() {\n+    assert(_uncommon_trap_Type != nullptr, \"should be initialized\");\n+    return _uncommon_trap_Type;\n+  }\n+\n+  static inline const TypeFunc* athrow_Type() {\n+    assert(_athrow_Type != nullptr, \"should be initialized\");\n+    return _athrow_Type;\n+  }\n+\n+  static inline const TypeFunc* rethrow_Type() {\n+    assert(_rethrow_Type != nullptr, \"should be initialized\");\n+    return _rethrow_Type;\n+  }\n+\n+  static inline const TypeFunc* Math_D_D_Type() {\n+    assert(_Math_D_D_Type != nullptr, \"should be initialized\");\n+    return _Math_D_D_Type;\n+  }\n+\n+  static inline const TypeFunc* Math_DD_D_Type() {\n+    assert(_Math_DD_D_Type != nullptr, \"should be initialized\");\n+    return _Math_DD_D_Type;\n+  }\n+\n@@ -269,5 +407,4 @@\n-  static const TypeFunc* modf_Type();\n-  static const TypeFunc* l2f_Type();\n-  static const TypeFunc* void_long_Type();\n-  static const TypeFunc* void_void_Type();\n-  static const TypeFunc* jfr_write_checkpoint_Type();\n+  static inline const TypeFunc* modf_Type() {\n+    assert(_modf_Type != nullptr, \"should be initialized\");\n+    return _modf_Type;\n+  }\n@@ -276,1 +413,24 @@\n-  static const TypeFunc* flush_windows_Type();\n+  static inline const TypeFunc* l2f_Type() {\n+    assert(_l2f_Type != nullptr, \"should be initialized\");\n+    return _l2f_Type;\n+  }\n+\n+  static inline const TypeFunc* void_long_Type() {\n+    assert(_void_long_Type != nullptr, \"should be initialized\");\n+    return _void_long_Type;\n+  }\n+\n+  static inline const TypeFunc* void_void_Type() {\n+    assert(_void_void_Type != nullptr, \"should be initialized\");\n+    return _void_void_Type;\n+  }\n+\n+  static const TypeFunc* jfr_write_checkpoint_Type() {\n+    assert(_jfr_write_checkpoint_Type != nullptr, \"should be initialized\");\n+    return _jfr_write_checkpoint_Type;\n+  }\n+\n+  static const TypeFunc* flush_windows_Type() {\n+    assert(_flush_windows_Type != nullptr, \"should be initialized\");\n+    return _flush_windows_Type;\n+  }\n@@ -279,4 +439,24 @@\n-  static const TypeFunc* fast_arraycopy_Type(); \/\/ bit-blasters\n-  static const TypeFunc* checkcast_arraycopy_Type();\n-  static const TypeFunc* generic_arraycopy_Type();\n-  static const TypeFunc* slow_arraycopy_Type();   \/\/ the full routine\n+  static inline const TypeFunc* fast_arraycopy_Type() {\n+    assert(_fast_arraycopy_Type != nullptr, \"should be initialized\");\n+    \/\/ This signature is simple:  Two base pointers and a size_t.\n+    return _fast_arraycopy_Type;\n+  }\n+\n+  static inline const TypeFunc* checkcast_arraycopy_Type() {\n+    assert(_checkcast_arraycopy_Type != nullptr, \"should be initialized\");\n+    \/\/ An extension of fast_arraycopy_Type which adds type checking.\n+    return _checkcast_arraycopy_Type;\n+  }\n+\n+  static inline const TypeFunc* generic_arraycopy_Type() {\n+    assert(_generic_arraycopy_Type != nullptr, \"should be initialized\");\n+    \/\/ This signature is like System.arraycopy, except that it returns status.\n+    return _generic_arraycopy_Type;\n+  }\n+\n+  static inline const TypeFunc* slow_arraycopy_Type() {\n+    assert(_slow_arraycopy_Type != nullptr, \"should be initialized\");\n+    \/\/ This signature is exactly the same as System.arraycopy.\n+    \/\/ There are no intptr_t (int\/long) arguments.\n+    return _slow_arraycopy_Type;\n+  }   \/\/ the full routine\n@@ -284,1 +464,43 @@\n-  static const TypeFunc* make_setmemory_Type();\n+  static inline const TypeFunc* unsafe_setmemory_Type() {\n+    assert(_unsafe_setmemory_Type != nullptr, \"should be initialized\");\n+    return _unsafe_setmemory_Type;\n+  }\n+\n+  static inline const TypeFunc* array_fill_Type() {\n+    assert(_array_fill_Type != nullptr, \"should be initialized\");\n+    return _array_fill_Type;\n+  }\n+\n+  static inline const TypeFunc* array_sort_Type() {\n+    assert(_array_sort_Type != nullptr, \"should be initialized\");\n+    return _array_sort_Type;\n+  }\n+\n+  static inline const TypeFunc* array_partition_Type() {\n+    assert(_array_partition_Type != nullptr, \"should be initialized\");\n+    return _array_partition_Type;\n+  }\n+\n+  \/\/ for aescrypt encrypt\/decrypt operations, just three pointers returning void (length is constant)\n+  static inline const TypeFunc* aescrypt_block_Type() {\n+    assert(_aescrypt_block_Type != nullptr, \"should be initialized\");\n+    return _aescrypt_block_Type;\n+  }\n+\n+  \/\/ for cipherBlockChaining calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n+  static inline const TypeFunc* cipherBlockChaining_aescrypt_Type() {\n+    assert(_cipherBlockChaining_aescrypt_Type != nullptr, \"should be initialized\");\n+    return _cipherBlockChaining_aescrypt_Type;\n+  }\n+\n+  \/\/ for electronicCodeBook calls of aescrypt encrypt\/decrypt, three pointers and a length, returning int\n+  static inline const TypeFunc* electronicCodeBook_aescrypt_Type() {\n+    assert(_electronicCodeBook_aescrypt_Type != nullptr, \"should be initialized\");\n+    return _electronicCodeBook_aescrypt_Type;\n+  }\n+\n+  \/\/for counterMode calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n+  static inline const TypeFunc* counterMode_aescrypt_Type() {\n+    assert(_counterMode_aescrypt_Type != nullptr, \"should be initialized\");\n+    return _counterMode_aescrypt_Type;\n+  }\n@@ -286,1 +508,5 @@\n-  static const TypeFunc* array_fill_Type();\n+  \/\/for counterMode calls of aescrypt encrypt\/decrypt, four pointers and a length, returning int\n+  static inline const TypeFunc* galoisCounterMode_aescrypt_Type() {\n+    assert(_galoisCounterMode_aescrypt_Type != nullptr, \"should be initialized\");\n+    return _galoisCounterMode_aescrypt_Type;\n+  }\n@@ -288,7 +514,8 @@\n-  static const TypeFunc* array_sort_Type();\n-  static const TypeFunc* array_partition_Type();\n-  static const TypeFunc* aescrypt_block_Type();\n-  static const TypeFunc* cipherBlockChaining_aescrypt_Type();\n-  static const TypeFunc* electronicCodeBook_aescrypt_Type();\n-  static const TypeFunc* counterMode_aescrypt_Type();\n-  static const TypeFunc* galoisCounterMode_aescrypt_Type();\n+  \/*\n+   * void implCompress(byte[] buf, int ofs)\n+   *\/\n+  static inline const TypeFunc* digestBase_implCompress_Type(bool is_sha3) {\n+    assert((_digestBase_implCompress_with_sha3_Type != nullptr) &&\n+           (_digestBase_implCompress_without_sha3_Type != nullptr), \"should be initialized\");\n+    return is_sha3 ? _digestBase_implCompress_with_sha3_Type : _digestBase_implCompress_without_sha3_Type;\n+  }\n@@ -296,2 +523,8 @@\n-  static const TypeFunc* digestBase_implCompress_Type(bool is_sha3);\n-  static const TypeFunc* digestBase_implCompressMB_Type(bool is_sha3);\n+  \/*\n+   * int implCompressMultiBlock(byte[] b, int ofs, int limit)\n+   *\/\n+  static inline const TypeFunc* digestBase_implCompressMB_Type(bool is_sha3) {\n+    assert((_digestBase_implCompressMB_with_sha3_Type != nullptr) &&\n+           (_digestBase_implCompressMB_without_sha3_Type != nullptr), \"should be initialized\");\n+    return is_sha3 ? _digestBase_implCompressMB_with_sha3_Type : _digestBase_implCompressMB_without_sha3_Type;\n+  }\n@@ -299,3 +532,9 @@\n-  static const TypeFunc* multiplyToLen_Type();\n-  static const TypeFunc* montgomeryMultiply_Type();\n-  static const TypeFunc* montgomerySquare_Type();\n+  static inline const TypeFunc* multiplyToLen_Type() {\n+    assert(_multiplyToLen_Type != nullptr, \"should be initialized\");\n+    return _multiplyToLen_Type;\n+  }\n+\n+  static inline const TypeFunc* montgomeryMultiply_Type() {\n+    assert(_montgomeryMultiply_Type != nullptr, \"should be initialized\");\n+    return _montgomeryMultiply_Type;\n+  }\n@@ -303,1 +542,4 @@\n-  static const TypeFunc* squareToLen_Type();\n+  static inline const TypeFunc* montgomerySquare_Type() {\n+    assert(_montgomerySquare_Type != nullptr, \"should be initialized\");\n+    return _montgomerySquare_Type;\n+  }\n@@ -305,1 +547,4 @@\n-  static const TypeFunc* mulAdd_Type();\n+  static inline const TypeFunc* squareToLen_Type() {\n+    assert(_squareToLen_Type != nullptr, \"should be initialized\");\n+    return _squareToLen_Type;\n+  }\n@@ -307,1 +552,5 @@\n-  static const TypeFunc* bigIntegerShift_Type();\n+  \/\/ for mulAdd calls, 2 pointers and 3 ints, returning int\n+  static inline const TypeFunc* mulAdd_Type() {\n+    assert(_mulAdd_Type != nullptr, \"should be initialized\");\n+    return _mulAdd_Type;\n+  }\n@@ -309,1 +558,4 @@\n-  static const TypeFunc* vectorizedMismatch_Type();\n+  static inline const TypeFunc* bigIntegerShift_Type() {\n+    assert(_bigIntegerShift_Type != nullptr, \"should be initialized\");\n+    return _bigIntegerShift_Type;\n+  }\n@@ -311,8 +563,4 @@\n-  static const TypeFunc* ghash_processBlocks_Type();\n-  static const TypeFunc* chacha20Block_Type();\n-  static const TypeFunc* base64_encodeBlock_Type();\n-  static const TypeFunc* base64_decodeBlock_Type();\n-  static const TypeFunc* string_IndexOf_Type();\n-  static const TypeFunc* poly1305_processBlocks_Type();\n-  static const TypeFunc* intpoly_montgomeryMult_P256_Type();\n-  static const TypeFunc* intpoly_assign_Type();\n+  static inline const TypeFunc* vectorizedMismatch_Type() {\n+    assert(_vectorizedMismatch_Type != nullptr, \"should be initialized\");\n+    return _vectorizedMismatch_Type;\n+  }\n@@ -320,2 +568,71 @@\n-  static const TypeFunc* updateBytesCRC32_Type();\n-  static const TypeFunc* updateBytesCRC32C_Type();\n+  \/\/ GHASH block processing\n+  static inline const TypeFunc* ghash_processBlocks_Type() {\n+    assert(_ghash_processBlocks_Type != nullptr, \"should be initialized\");\n+    return _ghash_processBlocks_Type;\n+  }\n+\n+  \/\/ ChaCha20 Block function\n+  static inline const TypeFunc* chacha20Block_Type() {\n+    assert(_chacha20Block_Type != nullptr, \"should be initialized\");\n+    return _chacha20Block_Type;\n+  }\n+\n+  \/\/ Base64 encode function\n+  static inline const TypeFunc* base64_encodeBlock_Type() {\n+    assert(_base64_encodeBlock_Type != nullptr, \"should be initialized\");\n+    return _base64_encodeBlock_Type;\n+  }\n+\n+  \/\/ Base64 decode function\n+  static inline const TypeFunc* base64_decodeBlock_Type() {\n+    assert(_base64_decodeBlock_Type != nullptr, \"should be initialized\");\n+    return _base64_decodeBlock_Type;\n+  }\n+\n+  \/\/ String IndexOf function\n+  static inline const TypeFunc* string_IndexOf_Type() {\n+    assert(_string_IndexOf_Type != nullptr, \"should be initialized\");\n+    return _string_IndexOf_Type;\n+  }\n+\n+  \/\/ Poly1305 processMultipleBlocks function\n+  static inline const TypeFunc* poly1305_processBlocks_Type() {\n+    assert(_poly1305_processBlocks_Type != nullptr, \"should be initialized\");\n+    return _poly1305_processBlocks_Type;\n+  }\n+\n+  \/\/ MontgomeryIntegerPolynomialP256 multiply function\n+  static inline const TypeFunc* intpoly_montgomeryMult_P256_Type() {\n+    assert(_intpoly_montgomeryMult_P256_Type != nullptr, \"should be initialized\");\n+    return _intpoly_montgomeryMult_P256_Type;\n+  }\n+\n+  \/\/ IntegerPolynomial constant time assignment function\n+  static inline const TypeFunc* intpoly_assign_Type() {\n+    assert(_intpoly_assign_Type != nullptr, \"should be initialized\");\n+    return _intpoly_assign_Type;\n+  }\n+\n+  \/**\n+   * int updateBytesCRC32(int crc, byte* b, int len)\n+   *\/\n+  static inline const TypeFunc* updateBytesCRC32_Type() {\n+    assert(_updateBytesCRC32_Type != nullptr, \"should be initialized\");\n+    return _updateBytesCRC32_Type;\n+  }\n+\n+  \/**\n+   * int updateBytesCRC32C(int crc, byte* buf, int len, int* table)\n+   *\/\n+  static inline const TypeFunc* updateBytesCRC32C_Type() {\n+    assert(_updateBytesCRC32C_Type != nullptr, \"should be initialized\");\n+    return _updateBytesCRC32C_Type;\n+  }\n+\n+  \/**\n+   *  int updateBytesAdler32(int adler, bytes* b, int off, int len)\n+   *\/\n+  static inline const TypeFunc* updateBytesAdler32_Type() {\n+    assert(_updateBytesAdler32_Type != nullptr, \"should be initialized\");\n+    return _updateBytesAdler32_Type;\n+  }\n@@ -323,1 +640,0 @@\n-  static const TypeFunc* updateBytesAdler32_Type();\n@@ -326,1 +642,4 @@\n-  static const TypeFunc* osr_end_Type();\n+  static inline const TypeFunc* osr_end_Type() {\n+    assert(_osr_end_Type != nullptr, \"should be initialized\");\n+    return _osr_end_Type;\n+  }\n@@ -328,1 +647,11 @@\n-  static const TypeFunc* register_finalizer_Type();\n+  static inline const TypeFunc* register_finalizer_Type() {\n+    assert(_register_finalizer_Type != nullptr, \"should be initialized\");\n+    return _register_finalizer_Type;\n+  }\n+\n+#if INCLUDE_JFR\n+  static inline const TypeFunc* class_id_load_barrier_Type() {\n+    assert(_class_id_load_barrier_Type != nullptr, \"should be initialized\");\n+    return _class_id_load_barrier_Type;\n+  }\n+#endif \/\/ INCLUDE_JFR\n@@ -336,2 +665,4 @@\n-  JFR_ONLY(static const TypeFunc* class_id_load_barrier_Type();)\n-  static const TypeFunc* notify_jvmti_vthread_Type();\n+  static inline const TypeFunc* notify_jvmti_vthread_Type() {\n+    assert(_notify_jvmti_vthread_Type != nullptr, \"should be initialized\");\n+    return _notify_jvmti_vthread_Type;\n+  }\n@@ -341,3 +672,10 @@\n-  \/\/ Dtrace support\n-  static const TypeFunc* dtrace_method_entry_exit_Type();\n-  static const TypeFunc* dtrace_object_alloc_Type();\n+  \/\/ Dtrace support. entry and exit probes have the same signature\n+  static inline const TypeFunc* dtrace_method_entry_exit_Type() {\n+    assert(_dtrace_method_entry_exit_Type != nullptr, \"should be initialized\");\n+    return _dtrace_method_entry_exit_Type;\n+  }\n+\n+  static inline const TypeFunc* dtrace_object_alloc_Type() {\n+    assert(_dtrace_object_alloc_Type != nullptr, \"should be initialized\");\n+    return _dtrace_object_alloc_Type;\n+  }\n@@ -356,0 +694,1 @@\n+ static void          initialize_types();\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":403,"deletions":64,"binary":false,"changes":467,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1518,3 +1517,1 @@\n-  Node* cmov = CMoveNode::make(nullptr, this,\n-                               phase->intcon(0), phase->intcon(1),\n-                               TypeInt::BOOL);\n+  Node* cmov = CMoveNode::make(this, phase->intcon(0), phase->intcon(1), TypeInt::BOOL);\n@@ -1725,21 +1722,11 @@\n-  \/\/ Change ((x & (m - 1)) u< m) into (m > 0)\n-  \/\/ This is the off-by-one variant of ((x & m) u<= m)\n-  if (cop == Op_CmpU &&\n-      _test._test == BoolTest::lt &&\n-      cmp1_op == Op_AndI) {\n-    Node* l = cmp1->in(1);\n-    Node* r = cmp1->in(2);\n-    for (int repeat = 0; repeat < 2; repeat++) {\n-      bool match = r->Opcode() == Op_AddI && r->in(2)->find_int_con(0) == -1 &&\n-                   r->in(1) == cmp2;\n-      if (match) {\n-        \/\/ arraylength known to be non-negative, so a (arraylength != 0) is sufficient,\n-        \/\/ but to be compatible with the array range check pattern, use (arraylength u> 0)\n-        Node* ncmp = cmp2->Opcode() == Op_LoadRange\n-                     ? phase->transform(new CmpUNode(cmp2, phase->intcon(0)))\n-                     : phase->transform(new CmpINode(cmp2, phase->intcon(0)));\n-        return new BoolNode(ncmp, BoolTest::gt);\n-      } else {\n-        \/\/ commute and try again\n-        l = cmp1->in(2);\n-        r = cmp1->in(1);\n+  \/\/ Transform: \"((x & (m - 1)) <u m)\" or \"(((m - 1) & x) <u m)\" into \"(m >u 0)\"\n+  \/\/ This is case [CMPU_MASK] which is further described at the method comment of BoolNode::Value_cmpu_and_mask().\n+  if (cop == Op_CmpU && _test._test == BoolTest::lt && cmp1_op == Op_AndI) {\n+    Node* m = cmp2; \/\/ RHS: m\n+    for (int add_idx = 1; add_idx <= 2; add_idx++) { \/\/ LHS: \"(m + (-1)) & x\" or \"x & (m + (-1))\"?\n+      Node* maybe_m_minus_1 = cmp1->in(add_idx);\n+      if (maybe_m_minus_1->Opcode() == Op_AddI &&\n+          maybe_m_minus_1->in(2)->find_int_con(0) == -1 &&\n+          maybe_m_minus_1->in(1) == m) {\n+        Node* m_cmpu_0 = phase->transform(new CmpUNode(m, phase->intcon(0)));\n+        return new BoolNode(m_cmpu_0, BoolTest::gt);\n@@ -1911,3 +1898,51 @@\n-\/\/------------------------------Value------------------------------------------\n-\/\/ Change ((x & m) u<= m) or ((m & x) u<= m) to always true\n-\/\/ Same with ((x & m) u< m+1) and ((m & x) u< m+1)\n+\/\/ We use the following Lemmas\/insights for the following two transformations (1) and (2):\n+\/\/   x & y <=u y, for any x and y           (Lemma 1, masking always results in a smaller unsigned number)\n+\/\/   y <u y + 1 is always true if y != -1   (Lemma 2, (uint)(-1 + 1) == (uint)(UINT_MAX + 1) which overflows)\n+\/\/   y <u 0 is always false for any y       (Lemma 3, 0 == UINT_MIN and nothing can be smaller than that)\n+\/\/\n+\/\/ (1a) Always:     Change ((x & m) <=u m  ) or ((m & x) <=u m  ) to always true   (true by Lemma 1)\n+\/\/ (1b) If m != -1: Change ((x & m) <u  m + 1) or ((m & x) <u  m + 1) to always true:\n+\/\/    x & m <=u m          is always true   \/\/ (Lemma 1)\n+\/\/    x & m <=u m <u m + 1 is always true   \/\/ (Lemma 2: m <u m + 1, if m != -1)\n+\/\/\n+\/\/ A counter example for (1b), if we allowed m == -1:\n+\/\/     (x & m)  <u m + 1\n+\/\/     (x & -1) <u 0\n+\/\/      x       <u 0\n+\/\/   which is false for any x (Lemma 3)\n+\/\/\n+\/\/ (2) Change ((x & (m - 1)) <u m) or (((m - 1) & x) <u m) to (m >u 0)\n+\/\/ This is the off-by-one variant of the above.\n+\/\/\n+\/\/ We now prove that this replacement is correct. This is the same as proving\n+\/\/   \"m >u 0\" if and only if \"x & (m - 1) <u m\", i.e. \"m >u 0 <=> x & (m - 1) <u m\"\n+\/\/\n+\/\/ We use (Lemma 1) and (Lemma 3) from above.\n+\/\/\n+\/\/ Case \"x & (m - 1) <u m => m >u 0\":\n+\/\/   We prove this by contradiction:\n+\/\/     Assume m <=u 0 which is equivalent to m == 0:\n+\/\/   and thus\n+\/\/     x & (m - 1) <u m = 0               \/\/ m == 0\n+\/\/     y           <u     0               \/\/ y = x & (m - 1)\n+\/\/   by Lemma 3, this is always false, i.e. a contradiction to our assumption.\n+\/\/\n+\/\/ Case \"m >u 0 => x & (m - 1) <u m\":\n+\/\/   x & (m - 1) <=u (m - 1)              \/\/ (Lemma 1)\n+\/\/   x & (m - 1) <=u (m - 1) <u m         \/\/ Using assumption m >u 0, no underflow of \"m - 1\"\n+\/\/\n+\/\/\n+\/\/ Note that the signed version of \"m > 0\":\n+\/\/   m > 0 <=> x & (m - 1) <u m\n+\/\/ does not hold:\n+\/\/   Assume m == -1 and x == -1:\n+\/\/     x  & (m - 1) <u m\n+\/\/     -1 & -2      <u -1\n+\/\/     -2           <u -1\n+\/\/     UINT_MAX - 1 <u UINT_MAX           \/\/ Signed to unsigned numbers\n+\/\/ which is true while\n+\/\/   m > 0\n+\/\/ is false which is a contradiction.\n+\/\/\n+\/\/ (1a) and (1b) is covered by this method since we can directly return a true value as type while (2) is covered\n+\/\/ in BoolNode::Ideal since we create a new non-constant node (see [CMPU_MASK]).\n@@ -1921,1 +1956,1 @@\n-      Node* bound = nullptr;\n+      Node* m = nullptr;\n@@ -1923,1 +1958,2 @@\n-        bound = cmp2;\n+        \/\/ (1a) \"((x & m) <=u m)\", cmp2 = m\n+        m = cmp2;\n@@ -1925,1 +1961,7 @@\n-        bound = cmp2->in(1);\n+        \/\/ (1b) \"(x & m) <u m + 1\" and \"(m & x) <u m + 1\", cmp2 = m + 1\n+        Node* rhs_m = cmp2->in(1);\n+        const TypeInt* rhs_m_type = phase->type(rhs_m)->isa_int();\n+        if (rhs_m_type->_lo > -1 || rhs_m_type->_hi < -1) {\n+          \/\/ Exclude any case where m == -1 is possible.\n+          m = rhs_m;\n+        }\n@@ -1928,1 +1970,1 @@\n-      if (cmp1->in(2) == bound || cmp1->in(1) == bound) {\n+      if (cmp1->in(2) == m || cmp1->in(1) == m) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":75,"deletions":33,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -557,1 +557,1 @@\n-  ReverseBytesINode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesINode(Node* in) : Node(nullptr, in) {}\n@@ -559,1 +559,1 @@\n-  const Type *bottom_type() const { return TypeInt::INT; }\n+  const Type* bottom_type() const { return TypeInt::INT; }\n@@ -567,1 +567,1 @@\n-  ReverseBytesLNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesLNode(Node* in) : Node(nullptr, in) {}\n@@ -569,1 +569,1 @@\n-  const Type *bottom_type() const { return TypeLong::LONG; }\n+  const Type* bottom_type() const { return TypeLong::LONG; }\n@@ -577,1 +577,1 @@\n-  ReverseBytesUSNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesUSNode(Node* in1) : Node(nullptr, in1) {}\n@@ -579,1 +579,1 @@\n-  const Type *bottom_type() const { return TypeInt::CHAR; }\n+  const Type* bottom_type() const { return TypeInt::CHAR; }\n@@ -587,1 +587,1 @@\n-  ReverseBytesSNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesSNode(Node* in) : Node(nullptr, in) {}\n@@ -589,1 +589,1 @@\n-  const Type *bottom_type() const { return TypeInt::SHORT; }\n+  const Type* bottom_type() const { return TypeInt::SHORT; }\n@@ -597,1 +597,1 @@\n-  ReverseINode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseINode(Node* in) : Node(nullptr, in) {}\n@@ -599,1 +599,1 @@\n-  const Type *bottom_type() const { return TypeInt::INT; }\n+  const Type* bottom_type() const { return TypeInt::INT; }\n@@ -609,1 +609,1 @@\n-  ReverseLNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseLNode(Node* in) : Node(nullptr, in) {}\n@@ -611,1 +611,1 @@\n-  const Type *bottom_type() const { return TypeLong::LONG; }\n+  const Type* bottom_type() const { return TypeLong::LONG; }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -41,0 +40,2 @@\n+#include \"opto\/callnode.hpp\"\n+#include \"opto\/arraycopynode.hpp\"\n@@ -44,0 +45,1 @@\n+#include \"opto\/runtime.hpp\"\n@@ -769,0 +771,4 @@\n+  LockNode::initialize_lock_Type();\n+  ArrayCopyNode::initialize_arraycopy_Type();\n+  OptoRuntime::initialize_types();\n+\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-#ifndef DONT_USE_PRECOMPILED_HEADER\n-\n@@ -82,2 +80,0 @@\n-\n-#endif \/\/ !DONT_USE_PRECOMPILED_HEADER\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -3888,1 +3887,1 @@\n-  thread->register_thread_stack_with_NMT();\n+  thread->register_thread_stack_with_NMT();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include <oops\/inlineKlass.hpp>\n-#include \"precompiled.hpp\"\n@@ -32,0 +30,1 @@\n+#include \"oops\/inlineKlass.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiGetLoadedClasses.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"oops\/access.hpp\"\n-#include \"precompiled.hpp\"\n@@ -64,0 +62,1 @@\n+#include \"oops\/access.hpp\"\n@@ -296,2 +295,2 @@\n-  tty->print_cr(\"Minimum heap \" SIZE_FORMAT \" Initial heap \" SIZE_FORMAT \" \"\n-                \"Maximum heap \" SIZE_FORMAT \" Space alignment \" SIZE_FORMAT \" Heap alignment \" SIZE_FORMAT,\n+  tty->print_cr(\"Minimum heap %zu Initial heap %zu \"\n+                \"Maximum heap %zu Space alignment %zu Heap alignment %zu\",\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1536,2 +1535,2 @@\n-          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least \" SIZE_FORMAT\n-                                     \" (\" SIZE_FORMAT \"G) which is greater than value given \" SIZE_FORMAT,\n+          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least %zu\"\n+                                     \" (%zuG) which is greater than value given %zu\",\n@@ -1562,1 +1561,1 @@\n-            \" max heap \" SIZE_FORMAT \" > compressed oop heap \" SIZE_FORMAT \". \"\n+            \" max heap %zu > compressed oop heap %zu. \"\n@@ -1573,1 +1572,1 @@\n-    log_trace(gc, heap)(\"  Maximum heap size \" SIZE_FORMAT, (size_t) reasonable_max);\n+    log_trace(gc, heap)(\"  Maximum heap size %zu\", (size_t) reasonable_max);\n@@ -1594,1 +1593,1 @@\n-      log_trace(gc, heap)(\"  Initial heap size \" SIZE_FORMAT, InitialHeapSize);\n+      log_trace(gc, heap)(\"  Initial heap size %zu\", InitialHeapSize);\n@@ -1600,1 +1599,1 @@\n-      log_trace(gc, heap)(\"  Minimum heap size \" SIZE_FORMAT, MinHeapSize);\n+      log_trace(gc, heap)(\"  Minimum heap size %zu\", MinHeapSize);\n@@ -1788,1 +1787,1 @@\n-                \"not \" SIZE_FORMAT \"\\n\",\n+                \"not %zu\\n\",\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-  friend class CodeCacheExtensions;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -326,1 +325,1 @@\n-    st.print_cr(\" allocated (\" SIZE_FORMAT \" bytes)\", obj->size() * HeapWordSize);\n+    st.print_cr(\" allocated (%zu bytes)\", obj->size() * HeapWordSize);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/handles.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -256,1 +255,1 @@\n-  st->print_cr(\"JNI global refs: \" SIZE_FORMAT \", weak refs: \" SIZE_FORMAT,\n+  st->print_cr(\"JNI global refs: %zu, weak refs: %zu\",\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -559,1 +558,1 @@\n-          \"class %s (in module %s) cannot access class %s (in unnamed module @\" SIZE_FORMAT_X \") because module %s does not read unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in module %s) cannot access class %s (in unnamed module @0x%zx) because module %s does not read unnamed module @0x%zx\",\n@@ -586,1 +585,1 @@\n-          \"class %s (in unnamed module @\" SIZE_FORMAT_X \") cannot access class %s (in module %s) because module %s does not export %s to unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in unnamed module @0x%zx) cannot access class %s (in module %s) because module %s does not export %s to unnamed module @0x%zx\",\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1343,2 +1342,2 @@\n-                                 \"bumping in_use_list_ceiling from \" SIZE_FORMAT\n-                                 \" to \" SIZE_FORMAT, old_ceiling, new_ceiling);\n+                                 \"bumping in_use_list_ceiling from %zu\"\n+                                 \" to %zu\", old_ceiling, new_ceiling);\n@@ -1352,2 +1351,2 @@\n-    log_info(monitorinflation)(\"monitors_used=\" SIZE_FORMAT \", ceiling=\" SIZE_FORMAT\n-                               \", monitor_usage=\" SIZE_FORMAT \", threshold=%d\",\n+    log_info(monitorinflation)(\"monitors_used=%zu, ceiling=%zu\"\n+                               \", monitor_usage=%zu, threshold=%d\",\n@@ -1777,1 +1776,1 @@\n-      _stream->print_cr(\"begin deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"begin deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1786,3 +1785,3 @@\n-      _stream->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n-                        \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                        SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"before handshaking: unlinked_count=%zu\"\n+                        \", in_use_list stats: ceiling=%zu, count=\"\n+                        \"%zu, max=%zu\",\n@@ -1796,1 +1795,1 @@\n-                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        \"%zu, count=%zu, max=%zu\",\n@@ -1806,1 +1805,1 @@\n-        _stream->print_cr(\"deflated_count=\" SIZE_FORMAT \", {unlinked,deleted}_count=\" SIZE_FORMAT \" monitors in %3.7f secs\",\n+        _stream->print_cr(\"deflated_count=%zu, {unlinked,deleted}_count=%zu monitors in %3.7f secs\",\n@@ -1809,1 +1808,1 @@\n-      _stream->print_cr(\"end deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"end deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1817,2 +1816,2 @@\n-      _stream->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n-                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"pausing %s: %s=%zu, in_use_list stats: ceiling=\"\n+                        \"%zu, count=%zu, max=%zu\",\n@@ -1825,2 +1824,2 @@\n-      _stream->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n-                        \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n+      _stream->print_cr(\"resuming %s: in_use_list stats: ceiling=%zu\"\n+                        \", count=%zu, max=%zu\", op_name,\n@@ -2053,1 +2052,1 @@\n-  out->print_cr(\"count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, l_in_use_count,\n+  out->print_cr(\"count=%zu, max=%zu\", l_in_use_count,\n@@ -2065,2 +2064,2 @@\n-    out->print_cr(\"in_use_count=\" SIZE_FORMAT \" equals ck_in_use_count=\"\n-                  SIZE_FORMAT, l_in_use_count, ck_in_use_count);\n+    out->print_cr(\"in_use_count=%zu equals ck_in_use_count=%zu\",\n+                  l_in_use_count, ck_in_use_count);\n@@ -2068,2 +2067,2 @@\n-    out->print_cr(\"WARNING: in_use_count=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_count=\" SIZE_FORMAT, l_in_use_count,\n+    out->print_cr(\"WARNING: in_use_count=%zu is not equal to \"\n+                  \"ck_in_use_count=%zu\", l_in_use_count,\n@@ -2075,2 +2074,2 @@\n-    out->print_cr(\"in_use_max=\" SIZE_FORMAT \" equals ck_in_use_max=\"\n-                  SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"in_use_max=%zu equals ck_in_use_max=%zu\",\n+                  l_in_use_max, ck_in_use_max);\n@@ -2078,2 +2077,2 @@\n-    out->print_cr(\"WARNING: in_use_max=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_max=\" SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"WARNING: in_use_max=%zu is not equal to \"\n+                  \"ck_in_use_max=%zu\", l_in_use_max, ck_in_use_max);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,0 +1,1 @@\n+\n@@ -26,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -546,0 +546,2 @@\n+  \/\/ Once mutexes and main_thread are ready, we can use NmtVirtualMemoryLocker.\n+  MemTracker::NmtVirtualMemoryLocker::set_safe_to_use();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -321,1 +320,1 @@\n-                           \"Could not allocate \" SIZE_FORMAT \" bytes for argument.\",\n+                           \"Could not allocate %zu bytes for argument.\",\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -2211,0 +2210,6 @@\n+  ~ThreadDumper() {\n+    for (int index = 0; index < _frames->length(); index++) {\n+      delete _frames->at(index);\n+    }\n+    delete _frames;\n+  }\n@@ -2865,5 +2870,4 @@\n-  if (_gc_before_heap_dump && UseZGC) {\n-    \/\/ ZGC cannot perform a synchronous GC cycle from within the VM thread.\n-    \/\/ So ZCollectedHeap::collect_as_vm_thread() is a noop. To respect the\n-    \/\/ _gc_before_heap_dump flag a synchronous GC cycle is performed from\n-    \/\/ the caller thread in the prologue.\n+  if (_gc_before_heap_dump && (UseZGC || UseShenandoahGC)) {\n+    \/\/ ZGC and Shenandoah cannot perform a synchronous GC cycle from within the VM thread.\n+    \/\/ So collect_as_vm_thread() is a noop. To respect the _gc_before_heap_dump flag a\n+    \/\/ synchronous GC cycle is performed from the caller thread in the prologue.\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/constantTag.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -114,1 +113,1 @@\n-           \"incorrect element size: \" SIZE_FORMAT, elem_size);\n+           \"incorrect element size: %zu\", elem_size);\n@@ -116,1 +115,1 @@\n-           \"byte_count \" SIZE_FORMAT \" must be multiple of element size \" SIZE_FORMAT, byte_count, elem_size);\n+           \"byte_count %zu must be multiple of element size %zu\", byte_count, elem_size);\n@@ -239,1 +238,1 @@\n-    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size \" SIZE_FORMAT \"\\n\", elem_size);\n+    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size %zu\\n\", elem_size);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,10 +137,0 @@\n-\/\/ Format integers which change size between 32- and 64-bit.\n-#define SIZE_FORMAT              \"%\"          PRIuPTR\n-#define SIZE_FORMAT_X            \"0x%\"        PRIxPTR\n-#ifdef _LP64\n-#define SIZE_FORMAT_X_0          \"0x%016\"     PRIxPTR\n-#else\n-#define SIZE_FORMAT_X_0          \"0x%08\"      PRIxPTR\n-#endif\n-#define SIZE_FORMAT_W(width)     \"%\"   #width PRIuPTR\n-\n@@ -166,0 +156,1 @@\n+#define SIZE_FORMAT_X_0          \"0x%016\"     PRIxPTR\n@@ -170,0 +161,1 @@\n+#define SIZE_FORMAT_X_0          \"0x%08\"      PRIxPTR\n@@ -378,1 +370,1 @@\n-#define PROPERFMT             SIZE_FORMAT \"%s\"\n+#define PROPERFMT             \"%zu%s\"\n@@ -382,1 +374,1 @@\n-#define RANGEFMT              \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGEFMT              \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (%zu bytes)\"\n@@ -386,1 +378,1 @@\n-#define RANGE2FMT             \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGE2FMT             \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (%zu bytes)\"\n@@ -419,1 +411,1 @@\n-#define EXACTFMT            SIZE_FORMAT \"%s\"\n+#define EXACTFMT            \"%zu%s\"\n@@ -424,1 +416,1 @@\n-#define HEAP_CHANGE_FORMAT \"%s: \" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)->\" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)\"\n+#define HEAP_CHANGE_FORMAT \"%s: %zuK(%zuK)->%zuK(%zuK)\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+    private final Options options;\n@@ -117,2 +118,2 @@\n-    private final EnumSet<LintCategory> values;\n-    private final EnumSet<LintCategory> suppressedValues;\n+    private EnumSet<LintCategory> values;\n+    private EnumSet<LintCategory> suppressedValues;\n@@ -124,2 +125,18 @@\n-        \/\/ initialize values according to the lint options\n-        Options options = Options.instance(context);\n+        this.context = context;\n+        context.put(lintKey, this);\n+        options = Options.instance(context);\n+    }\n+\n+    \/\/ Instantiate a non-root (\"symbol scoped\") instance\n+    protected Lint(Lint other) {\n+        other.initializeRootIfNeeded();\n+        this.context = other.context;\n+        this.options = other.options;\n+        this.syms = other.syms;\n+        this.names = other.names;\n+        this.values = other.values.clone();\n+        this.suppressedValues = other.suppressedValues.clone();\n+    }\n+\n+    \/\/ Process command line options on demand to allow use of root Lint early during startup\n+    private void initializeRootIfNeeded() {\n@@ -127,0 +144,5 @@\n+        \/\/ Already initialized?\n+        if (values != null)\n+            return;\n+\n+        \/\/ Initialize enabled categories based on \"-Xlint\" flags\n@@ -165,11 +187,0 @@\n-\n-        this.context = context;\n-        context.put(lintKey, this);\n-    }\n-\n-    protected Lint(Lint other) {\n-        this.context = other.context;\n-        this.syms = other.syms;\n-        this.names = other.names;\n-        this.values = other.values.clone();\n-        this.suppressedValues = other.suppressedValues.clone();\n@@ -180,0 +191,1 @@\n+        initializeRootIfNeeded();\n@@ -412,0 +424,1 @@\n+        initializeRootIfNeeded();\n@@ -422,0 +435,1 @@\n+        initializeRootIfNeeded();\n@@ -427,0 +441,14 @@\n+     *\n+     * @param log warning destination\n+     * @param warning key for the localized warning message\n+     *\/\n+    public void logIfEnabled(Log log, LintWarning warning) {\n+        logIfEnabled(log, null, warning);\n+    }\n+\n+    \/**\n+     * Helper method. Log a lint warning if its lint category is enabled.\n+     *\n+     * @param log warning destination\n+     * @param pos source position at which to report the warning\n+     * @param warning key for the localized warning message\n@@ -458,1 +486,1 @@\n-        initializeIfNeeded();\n+        initializeSymbolsIfNeeded();\n@@ -467,1 +495,1 @@\n-        initializeIfNeeded();\n+        initializeSymbolsIfNeeded();\n@@ -488,1 +516,1 @@\n-    private void initializeIfNeeded() {\n+    private void initializeSymbolsIfNeeded() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":46,"deletions":18,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,3 @@\n+    \/** flag: is the \"preview\" lint category enabled? *\/\n+    private final boolean verbose;\n+\n@@ -83,1 +86,0 @@\n-    private final Lint lint;\n@@ -104,3 +106,2 @@\n-        lint = Lint.instance(context);\n-        this.previewHandler =\n-                new MandatoryWarningHandler(log, source, lint.isEnabled(LintCategory.PREVIEW), true, \"preview\", LintCategory.PREVIEW);\n+        verbose = Lint.instance(context).isEnabled(LintCategory.PREVIEW);\n+        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, \"preview\", LintCategory.PREVIEW);\n@@ -179,6 +180,4 @@\n-        if (!lint.isSuppressed(LintCategory.PREVIEW)) {\n-            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n-            previewHandler.report(pos, feature.isPlural() ?\n-                    LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-                    LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n-        }\n+        markUsesPreview(pos);\n+        previewHandler.report(pos, feature.isPlural() ?\n+                LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n+                LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n@@ -194,1 +193,1 @@\n-        if (lint.isEnabled(LintCategory.PREVIEW)) {\n+        if (verbose) {\n@@ -200,0 +199,5 @@\n+    \/**\n+     * Mark the current source file as using a preview feature. The corresponding classfile\n+     * will be generated with minor version {@link ClassFile#PREVIEW_MINOR_VERSION}.\n+     * @param pos the position at which the preview feature was used.\n+     *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n@@ -130,4 +129,0 @@\n-   \/** Lint option: warn about classfile issues\n-     *\/\n-    boolean lintClassfile;\n-\n@@ -154,0 +149,3 @@\n+    \/** The root Lint config. *\/\n+    Lint lint;\n+\n@@ -317,1 +315,1 @@\n-        lintClassfile = Lint.instance(context).isEnabled(LintCategory.CLASSFILE);\n+        lint = Lint.instance(context);\n@@ -867,1 +865,1 @@\n-                if (lintClassfile && !warnedAttrs.contains(name)) {\n+                if (!warnedAttrs.contains(name)) {\n@@ -870,1 +868,1 @@\n-                        log.warning((DiagnosticPosition) null,\n+                        lint.logIfEnabled(log,\n@@ -1637,3 +1635,1 @@\n-            if (lintClassfile) {\n-                log.warning(LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n-            }\n+            lint.logIfEnabled(log, LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n@@ -2104,5 +2100,4 @@\n-                if (lintClassfile) {\n-                    if (failure == null) {\n-                        log.warning(LintWarnings.AnnotationMethodNotFound(container, name));\n-                    } else {\n-                        log.warning(LintWarnings.AnnotationMethodNotFoundReason(container,\n+                if (failure == null) {\n+                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFound(container, name));\n+                } else {\n+                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFoundReason(container,\n@@ -2111,1 +2106,0 @@\n-                    }\n@@ -2987,3 +2981,1 @@\n-        if (lintClassfile) {\n-            log.warning(LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n-        }\n+        lint.logIfEnabled(log, LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,0 @@\n-    private final boolean lint;\n@@ -126,0 +125,1 @@\n+    private final Lint lint;\n@@ -208,1 +208,1 @@\n-        lint = Lint.instance(context).isEnabled(PROCESSING);\n+        lint = Lint.instance(context);\n@@ -628,1 +628,1 @@\n-                       boolean allowModules, ProcessingEnvironment env, boolean lint) {\n+                       boolean allowModules, ProcessingEnvironment env, Lint lint) {\n@@ -651,2 +651,2 @@\n-                    if (lint && !patternAdded) {\n-                        log.warning(LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n+                    if (!patternAdded) {\n+                        lint.logIfEnabled(log, LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n@@ -663,2 +663,1 @@\n-                if (lint &&\n-                    supportedAnnotationPatterns.contains(MatchingUtils.validImportStringToPattern(\"*\")) &&\n+                if (supportedAnnotationPatterns.contains(MatchingUtils.validImportStringToPattern(\"*\")) &&\n@@ -666,1 +665,1 @@\n-                    log.warning(LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n+                    lint.logIfEnabled(log, LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n@@ -673,2 +672,2 @@\n-                        if (lint && !optionAdded) {\n-                            log.warning(LintWarnings.ProcDuplicateOptionName(optionName,\n+                        if (!optionAdded) {\n+                            lint.logIfEnabled(log, LintWarnings.ProcDuplicateOptionName(optionName,\n@@ -891,1 +890,1 @@\n-        if (lint && unmatchedAnnotations.size() > 0) {\n+        if (lint.isEnabled(PROCESSING) && unmatchedAnnotations.size() > 0) {\n@@ -1664,1 +1663,1 @@\n-    private static Pattern importStringToPattern(boolean allowModules, String s, Processor p, Log log, boolean lint) {\n+    private static Pattern importStringToPattern(boolean allowModules, String s, Processor p, Log log, Lint lint) {\n@@ -1690,4 +1689,2 @@\n-    private static Pattern warnAndNoMatches(String s, Processor p, Log log, boolean lint) {\n-        if (lint) {\n-            log.warning(LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n-        }\n+    private static Pattern warnAndNoMatches(String s, Processor p, Log log, Lint lint) {\n+        lint.logIfEnabled(log, LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1573,0 +1573,1 @@\n+# lint: path\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/code\/test_vtableStub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-runtime\/cds\/appcds\/customLoader\/HelloCustom_JFR.java 8241075 linux-all,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -558,0 +558,10 @@\n+    public static final String CON_D = PREFIX + \"CON_D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CON_D, \"ConD\");\n+    }\n+\n+    public static final String CON_F = PREFIX + \"CON_F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CON_F, \"ConF\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.io.IOException;\n@@ -39,5 +40,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n@@ -679,1 +675,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}