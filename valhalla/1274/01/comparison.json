{"files":[{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * A method element annotated {@code @MustUse} is one that returns a value\n+ * which is supposed to be used, since not consuming it will likely be a mistake.\n+ *\n+ * In some cases, the compiler can be certain that the value is not used, and\n+ * in such cases, it may issue an error even in the absense of this annotation.\n+ *\n+ * <p>Compilers issue warnings when a computed value is returned but not assigned\n+ * to a variable or similarly used in different fashion.\n+ *\n+ * @since 24\n+ *\/\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(value={METHOD})\n+public @interface MustUse {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/MustUse.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -341,0 +341,5 @@\n+    \/**\n+     * Flag to indicate the given MethodSymbol returns a value which should be used.\n+     *\/\n+    public static final long MUST_USE = 1L<<53; \/\/MethodSymbols only\n+\n@@ -566,0 +571,1 @@\n+        MUST_USE(Flags.MUST_USE),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -374,0 +374,4 @@\n+    public boolean isPrecious() {\n+        return (flags_field & MUST_USE) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,0 +208,1 @@\n+    public final Type mustUseType;\n@@ -605,0 +606,1 @@\n+        mustUseType = enterClass(\"java.lang.MustUse\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -369,0 +369,6 @@\n+            if (!c.type.isErroneous()\n+                    && toAnnotate.kind == MTH\n+                    && types.isSameType(c.type, syms.mustUseType)) {\n+                toAnnotate.flags_field |= Flags.MUST_USE;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2382,0 +2382,12 @@\n+        \/\/ Check if a returned value is a \"MustUse\"\n+        \/\/ TODO: Should likely do more more inference\n+        if (tree.expr instanceof JCMethodInvocation invocation) {\n+            if (invocation.meth instanceof JCFieldAccess select) {\n+                if (select.sym != null && select.sym.kind == MTH) {\n+                    if (select.sym.isPrecious()) {\n+                        log.error(invocation.meth.pos(), Errors.MethodReturnedMustUseValue(select.selected.type.tsym, select.sym));\n+                    }\n+                }\n+            }\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1941,0 +1941,4 @@\n+# 0: symbol, 1: symbol\n+compiler.err.method.returned.must.use.value=\\\n+    The return value from {0}.{1} should be used, or not called\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.method.returned.must.use.value\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options:  --enable-preview --source 24\n+\n+value record MustHaveValueNotUsed(int i) {\n+\n+    @MustUse\n+    MustHaveValueNotUsed mutate() {\n+        return new MustHaveValueNotUsed(i + 1);\n+    }\n+\n+    static void test() {\n+        MustHaveValueNotUsed m = new MustHaveValueNotUsed(1);\n+        m.mutate(); \/\/ error\n+        m = m.mutate(); \/\/ ok\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MustUseValueNotUsed.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Xxx.\n+ * @enablePreview\n+ *\n+ * @compile\/fail\/ref=MustUseValueTest.out -XDrawDiagnostics MustUseValueTest.java\n+ *\/\n+public value final class MustUseValueTest implements java.io.Serializable {\n+\n+    public static void main(String[] args) {\n+        var array = new String[] { \"A\", \"B\", \"C\",  };\n+\n+        Cursor c = new Cursor(array, 0, 3);\n+        c.next(); \/\/ bad code - ERROR\n+        c = c.next(); \/\/ good code - NOT ERROR\n+\n+        System.out.println(\"Should be B: \" + c.current());\n+    }\n+\n+    value record Cursor<T>(T[] array, int position, int length) {\n+        Cursor {\n+            if (position < 0 || position >= length) {\n+                throw new IndexOutOfBoundsException(\"index %d outside array bounds [0;%d[\".formatted(position, length));\n+            }\n+        }\n+\n+        T current() {\n+            return array[position];\n+        }\n+\n+        @MustUse\n+        Cursor<T> next() {\n+            return new Cursor(array, position+1, length);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/must_use\/MustUseValueTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+MustUseValueTest.java:14:10: compiler.err.method.returned.must.use.value: MustUseValueTest.Cursor, next()\n+- compiler.note.unchecked.filename: MustUseValueTest.java\n+- compiler.note.unchecked.recompile\n+- compiler.note.preview.filename: MustUseValueTest.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/must_use\/MustUseValueTest.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}