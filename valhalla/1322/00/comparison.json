{"files":[{"patch":"@@ -6128,1 +6128,2 @@\n-        && (_super_klass == vmClasses::Object_klass() || _super_klass->is_implicitly_constructible())) {\n+        && (_super_klass == vmClasses::Object_klass() || _super_klass == vmClasses::Record_klass()\n+        || _super_klass->is_implicitly_constructible())) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -428,0 +428,21 @@\n+    \/\/ Test that value record can be considered @ImplicitlyConstructible\n+    \/\/ (note java.lang.Record is a special super-class because it is not annotated with @ImplicitlyConstructible)\n+\n+    @ImplicitlyConstructible\n+    static value record Value16(byte b) { }\n+\n+    static class Test16 {\n+        @NullRestricted\n+        Value16 v = new Value16((byte)1);\n+    }\n+\n+    void test_16() {\n+        Throwable exception = null;\n+        try {\n+            Test16 t16 = new Test16();\n+        } catch(Throwable e) {\n+            exception = e;\n+            System.out.println(\"Received \"+ e);\n+        }\n+        Asserts.assertNull(exception, \"Unexpected exception \" + exception);\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AnnotationsTests.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}