{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.Modifier;\n@@ -35,1 +34,0 @@\n-import java.util.Arrays;\n@@ -48,1 +46,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -141,1 +138,1 @@\n-                    .filter(Class::isValue)\n+                    .filter(cl -> !cl.isPrimitive() && cl.isValue())\n@@ -175,1 +172,1 @@\n-            assert type.isValue();\n+            assert LayoutIteration.isFinalValueClass(type);\n@@ -203,1 +200,1 @@\n-            assert type.isValue();\n+            assert LayoutIteration.isFinalValueClass(type);\n@@ -372,1 +369,1 @@\n-            assert type.isValue();\n+            assert LayoutIteration.isFinalValueClass(type);\n@@ -421,0 +418,1 @@\n+            assert LayoutIteration.isFinalValueClass(type) : type;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        if (!canHaveFlatLayout(flatType))\n+        if (!isFinalValueClass(flatType))\n@@ -74,2 +74,2 @@\n-    private static boolean canHaveFlatLayout(Class<?> flatType) {\n-        return flatType.isValue() && Modifier.isFinal(flatType.getModifiers());\n+    public static boolean isFinalValueClass(Class<?> flatType) {\n+        return !flatType.isPrimitive() && flatType.isValue() && Modifier.isFinal(flatType.getModifiers());\n@@ -97,1 +97,1 @@\n-        assert canHaveFlatLayout(currentClass) : currentClass + \" cannot be flat\";\n+        assert isFinalValueClass(currentClass) : currentClass + \" cannot be flat\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/LayoutIteration.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}