{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -657,1 +657,1 @@\n-     * class or interface; otherwise {@code false}}\n+     * class; otherwise {@code false}}\n@@ -659,2 +659,2 @@\n-     * If this {@code Class} object represents an array type, a primitive type, or\n-     * {@code void}, then this method returns {@code false}.\n+     * If this {@code Class} object represents an array type, an interface,\n+     * a primitive type, or {@code void}, then this method returns {@code false}.\n@@ -666,3 +666,3 @@\n-        if (isPrimitive() || isArray() || isInterface()) return false;\n-\n-        return (this.getModifiers() & Modifier.IDENTITY) == 0;\n+         if (isPrimitive() | isArray() | isInterface())\n+             return false;\n+        return ((getModifiers() & Modifier.IDENTITY) == 0);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -202,7 +202,0 @@\n-        if (interfaceClass.isIdentity() || interfaceClass.isValue()) {\n-            throw new LambdaConversionException(String.format(\n-                    \"%s is %s interface\",\n-                    interfaceClass.getName(),\n-                    interfaceClass.isIdentity() ? \"an identity\" : \"a value\"));\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -267,8 +267,0 @@\n-    \/**\n-     * The access flag {@code ACC_VALUE}, corresponding to the\n-     * source modifier {@link Modifier#VALUE value}, with a mask\n-     * value of <code>{@value \"0x%04x\" Modifier#VALUE}<\/code>.\n-     * @jvms 4.1 -B. Class access and property modifiers\n-     *\/\n-    VALUE(Modifier.VALUE, true, Set.of(Location.CLASS, Location.INNER_CLASS), null),\n-\n@@ -705,1 +697,1 @@\n-                                Set.of(PUBLIC, FINAL, IDENTITY, VALUE,\n+                                Set.of(PUBLIC, FINAL, IDENTITY,\n@@ -719,1 +711,1 @@\n-                                Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY, VALUE,\n+                                Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,2 +159,2 @@\n-     * Return {@code true} if the integer argument includes the\n-     * {@code value} modifier, {@code false} otherwise.\n+     * Return {@code true} if the integer argument does not include the\n+     * {@code identity} modifier, {@code false} otherwise.\n@@ -166,2 +166,2 @@\n-     * @return {@code true} if {@code mod} includes the\n-     * {@code value} modifier; {@code false} otherwise.\n+     * @return {@code true} if {@code mod} does not include the\n+     * {@code identity} modifier; {@code false} otherwise.\n@@ -170,1 +170,1 @@\n-        return (mod & IDENTITY) == 0;\n+        return !isIdentity(mod);\n@@ -338,7 +338,0 @@\n-    \/**\n-     * The {@code int} value representing the {@code value}\n-     * modifier.\n-     * @see AccessFlag#VALUE\n-     *\/\n-   public static final int VALUE            = 0x00000040;\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                Arguments.of(new Object(), false, false),\n+                Arguments.of(new Object(), true, false),\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}