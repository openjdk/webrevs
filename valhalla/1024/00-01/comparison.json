{"files":[{"patch":"@@ -297,0 +297,12 @@\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 23.\n+     *\n+     * @since 23\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se23\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 23 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_23(67),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -158,15 +158,0 @@\n-    \/**\n-     * Return {@code true} if the integer argument does not include the\n-     * {@code identity} modifier, {@code false} otherwise.\n-     *\n-     * @apiNote {@code isValue} should only be called with the modifiers\n-     * of a {@linkplain Class#getModifiers() class}.\n-     *\n-     * @param   mod a set of modifiers\n-     * @return {@code true} if {@code mod} does not include the\n-     * {@code identity} modifier; {@code false} otherwise.\n-     *\/\n-    public static boolean isValue(int mod) {\n-        return !isIdentity(mod);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,3 +57,6 @@\n-            TestIdentityInterface.class,\n-            TestValueInterface.class,\n-            ExpectedClassFlags.class,\n+                TestFinalClass.class,\n+                TestAbstractClass.class,\n+                Foo.class,\n+                StaticTestInterface.class,\n+                TestMarkerAnnotation.class,\n+                ExpectedClassFlags.class,\n@@ -181,5 +184,0 @@\n-    @ExpectedClassFlags(\"[PUBLIC, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n-    public      identity interface PublicIdentityInterface {}\n-    @ExpectedClassFlags(\"[PUBLIC, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n-    public      value interface PublicValueInterface {}\n-\n@@ -188,5 +186,0 @@\n-    @ExpectedClassFlags(\"[PROTECTED, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n-    protected   identity interface ProtectedIdentityInterface {}\n-    @ExpectedClassFlags(\"[PROTECTED, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n-    protected   value interface ProtectedValueInterface {}\n-\n@@ -195,5 +188,0 @@\n-    @ExpectedClassFlags(\"[PRIVATE, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n-    private     identity interface PrivateIdentityInterface {}\n-    @ExpectedClassFlags(\"[PRIVATE, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n-    private     value interface PrivateValueInterface {}\n-\n@@ -202,4 +190,0 @@\n-    @ExpectedClassFlags(\"[STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n-    \/*package*\/ identity interface PackageIdentityInterface {}\n-    @ExpectedClassFlags(\"[STATIC, VALUE, INTERFACE, ABSTRACT]\")\n-    \/*package*\/ value interface PackageValueInterface {}\n@@ -209,2 +193,0 @@\n-    @ExpectedClassFlags(\"[FINAL, IDENTITY]\")\n-    \/*package*\/ final identity class TestFinalIdentityClass {}\n@@ -214,2 +196,0 @@\n-    @ExpectedClassFlags(\"[IDENTITY, ABSTRACT]\")\n-    \/*package*\/ abstract identity class TestAbstractIdentityClass {}\n@@ -238,2 +218,0 @@\n-    @ExpectedClassFlags(\"[PRIVATE, IDENTITY, ABSTRACT]\")\n-    private abstract identity class IdentityFoo {}\n@@ -243,4 +221,0 @@\n-    @ExpectedClassFlags(\"[STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n-    identity interface StaticTestIdentityInterface {}\n-    @ExpectedClassFlags(\"[STATIC, VALUE, INTERFACE, ABSTRACT]\")\n-    value interface StaticTestValueInterface {}\n@@ -257,4 +231,0 @@\n-@ExpectedClassFlags(\"[IDENTITY, INTERFACE, ABSTRACT]\")\n-identity interface TestIdentityInterface {}\n-@ExpectedClassFlags(\"[VALUE, INTERFACE, ABSTRACT]\")\n-value interface TestValueInterface {}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":7,"deletions":37,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -273,1 +273,2 @@\n-                Set.of();\n+                        (cffv.compareTo(ClassFileFormatVersion.RELEASE_22) >= 0)\n+                                ? Set.of(Location.FIELD) : Set.of();\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}