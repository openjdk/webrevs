{"files":[{"patch":"@@ -65,5 +65,0 @@\n-tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java            8357054    generic-all\n-tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttributeTest.java        8357054    generic-all\n-tools\/javac\/valhalla\/value-objects\/NoUnnecessaryLoadableDescriptorsTest.java    8357054    generic-all\n-tools\/javac\/valhalla\/value-objects\/ValueBasedFlagsTest.java                     8357054    generic-all\n-\n","filename":"test\/langtools\/ProblemList.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -43,1 +45,0 @@\n-import com.sun.tools.javac.code.Flags;\n@@ -45,1 +46,0 @@\n-import com.sun.tools.classfile.ClassFile;\n@@ -49,2 +49,0 @@\n-import toolbox.JavacTask;\n-import toolbox.Task;\n@@ -93,3 +91,3 @@\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        var classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n@@ -106,3 +104,3 @@\n-        classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n@@ -133,3 +131,3 @@\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        var classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n@@ -146,3 +144,4 @@\n-        classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n+\n@@ -175,3 +174,4 @@\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        var classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n+\n@@ -188,3 +188,4 @@\n-        classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+        classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check(classFile.minorVersion() == 65535);\n+        Assert.check(classFile.findAttribute(Attributes.loadableDescriptors()).isPresent());\n+\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,6 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n@@ -76,4 +80,3 @@\n-        ClassFile cls = ClassFile.read(LoadableDescriptorsAttributeTest.class.getResourceAsStream(\"LoadableDescriptorsAttributeTest$X.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n+        ClassModel cls;\n+        try (var in = LoadableDescriptorsAttributeTest.class.getResourceAsStream(\"LoadableDescriptorsAttributeTest$X.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n@@ -83,6 +86,3 @@\n-        LoadableDescriptors_attribute descriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (descriptors == null) {\n-            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n-        }\n-        if (descriptors.number_of_descriptors != 3) {\n-            throw new AssertionError(\"Incorrect number of loadable descriptors, found: \" + descriptors.number_of_descriptors);\n+        var descriptors = cls.findAttribute(Attributes.loadableDescriptors()).orElseThrow();\n+        if (descriptors.loadableDescriptors().size() != 3) {\n+            throw new AssertionError(\"Expected 3 loadable descriptors, found: \" + descriptors.loadableDescriptors());\n@@ -91,17 +91,13 @@\n-        int mask = 7;\n-        for (int i = 0; i < descriptors.number_of_descriptors; i++) {\n-            CONSTANT_Utf8_info clsInfo = cls.constant_pool.getUTF8Info(\n-                                  descriptors.descriptors[i]);\n-            switch (clsInfo.value) {\n-                case \"LLoadableDescriptorsAttributeTest$V2;\":\n-                    mask &= ~1; break;\n-                case \"LLoadableDescriptorsAttributeTest$V3;\":\n-                    mask &= ~2; break;\n-                case \"LLoadableDescriptorsAttributeTest$V7;\" :\n-                    mask &= ~4; break;\n-                default:\n-                    throw new AssertionError(\"Unexpected LoadableDescriptors entry!\");\n-            }\n-        }\n-        if (mask != 0) {\n-          throw new AssertionError(\"Some LoadableDescriptors entries are missing!\");\n+        Set<String> expected = Set.of(\n+                \"LLoadableDescriptorsAttributeTest$V2;\",\n+                \"LLoadableDescriptorsAttributeTest$V3;\",\n+                \"LLoadableDescriptorsAttributeTest$V7;\"\n+        );\n+\n+        Set<String> found = descriptors.loadableDescriptors()\n+                .stream()\n+                .map(Utf8Entry::stringValue)\n+                .collect(Collectors.toSet());\n+\n+        if (!expected.equals(found)) {\n+            throw new AssertionError(\"LoadableDescriptors mismatch, found: \" + found);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttributeTest.java","additions":26,"deletions":30,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,6 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.util.List;\n@@ -53,0 +57,2 @@\n+        ClassModel cls;\n+        LoadableDescriptorsAttribute loadableDescriptors;\n@@ -55,4 +61,2 @@\n-        ClassFile cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n+        try (var in = NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n@@ -62,2 +66,1 @@\n-        LoadableDescriptors_attribute LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (LoadableDescriptors != null) {\n+        if (cls.findAttribute(Attributes.loadableDescriptors()).isPresent()) {\n@@ -68,4 +71,2 @@\n-        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n+        try (var in = NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n@@ -75,2 +76,1 @@\n-        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (LoadableDescriptors != null) {\n+        if (cls.findAttribute(Attributes.loadableDescriptors()).isPresent()) {\n@@ -80,5 +80,3 @@\n-        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$PreloadTest2.class\n-        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2.class\n+        try (var in = NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n@@ -88,2 +86,1 @@\n-        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (LoadableDescriptors != null) {\n+        if (cls.findAttribute(Attributes.loadableDescriptors()).isPresent()) {\n@@ -94,4 +91,2 @@\n-        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n+        try (var in = NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n@@ -101,2 +96,1 @@\n-        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (LoadableDescriptors != null) {\n+        if (cls.findAttribute(Attributes.loadableDescriptors()).isPresent()) {\n@@ -107,1 +101,3 @@\n-        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\"));\n+        try (var in = NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\")) {\n+            cls = ClassFile.of().parse(in.readAllBytes());\n+        }\n@@ -114,8 +110,1 @@\n-        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n-        if (LoadableDescriptors == null) {\n-            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n-        }\n-\n-        if (LoadableDescriptors.number_of_descriptors != 1) {\n-            throw new AssertionError(\"Incorrect number of LoadableDescriptors classes\");\n-        }\n+        loadableDescriptors = cls.findAttribute(Attributes.loadableDescriptors()).orElseThrow();\n@@ -123,4 +112,4 @@\n-        CONSTANT_Utf8_info utf8Info = cls.constant_pool.getUTF8Info(LoadableDescriptors.descriptors[0]);\n-        System.err.println(\"utf8 \" + utf8Info.value);\n-        if (!utf8Info.value.equals(\"LNoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2;\")) {\n-            throw new AssertionError(\"Expected LoadableDescriptors class entry is missing, but found \" + utf8Info.value);\n+        List<String> expected = List.of(\"LNoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2;\");\n+        List<String> found = loadableDescriptors.loadableDescriptors().stream().map(Utf8Entry::stringValue).toList();\n+        if (!expected.equals(found)) {\n+            throw new AssertionError(\"Expected one LoadableDescriptors class entry Inner2, but found \" + found);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryLoadableDescriptorsTest.java","additions":30,"deletions":41,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -45,1 +46,0 @@\n-import com.sun.tools.classfile.ClassFile;\n@@ -91,2 +91,2 @@\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check((classFile.access_flags.flags & Flags.ACC_STRICT) == 0);\n+        var classFile = ClassFile.of().parse(classFilePath);\n+        Assert.check((classFile.flags().flagsMask() & Flags.ACC_STRICT) == 0);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueBasedFlagsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}