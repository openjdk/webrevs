{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8020156 8020009 8022326 8012913 8024405 8024408 8071477\n+ * @bug 8020156 8020009 8022326 8012913 8024405 8024408 8071477 8336672\n@@ -114,1 +114,1 @@\n-        List<Integer> l = Arrays.asList(1, 2, 3, 4);\n+        List<String> l = Arrays.asList(\"A\", \"B\", \"C\", \"D\");\n@@ -294,1 +294,1 @@\n-        assertSortedMapCharacteristics(new ConcurrentSkipListMap<>(Comparator.<Integer>reverseOrder()),\n+        assertSortedMapCharacteristics(new ConcurrentSkipListMap<>(Comparator.<String>reverseOrder()),\n@@ -318,1 +318,1 @@\n-    void assertMapCharacteristics(Map<Integer, String> m, int keyCharacteristics) {\n+    void assertMapCharacteristics(Map<String, String> m, int keyCharacteristics) {\n@@ -322,1 +322,1 @@\n-    void assertMapCharacteristics(Map<Integer, String> m, int keyCharacteristics, int notValueCharacteristics) {\n+    void assertMapCharacteristics(Map<String, String> m, int keyCharacteristics, int notValueCharacteristics) {\n@@ -339,1 +339,1 @@\n-    void assertSetCharacteristics(Set<Integer> s, int keyCharacteristics) {\n+    void assertSetCharacteristics(Set<String> s, int keyCharacteristics) {\n@@ -349,1 +349,1 @@\n-    void assertSortedMapCharacteristics(SortedMap<Integer, String> m, int keyCharacteristics) {\n+    void assertSortedMapCharacteristics(SortedMap<String, String> m, int keyCharacteristics) {\n@@ -352,1 +352,1 @@\n-        Set<Integer> keys = m.keySet();\n+        Set<String> keys = m.keySet();\n@@ -365,1 +365,1 @@\n-    void assertSortedSetCharacteristics(SortedSet<Integer> s, int keyCharacteristics) {\n+    void assertSortedSetCharacteristics(SortedSet<String> s, int keyCharacteristics) {\n@@ -376,5 +376,5 @@\n-    void initMap(Map<Integer, String> m) {\n-        m.put(1, \"4\");\n-        m.put(2, \"3\");\n-        m.put(3, \"2\");\n-        m.put(4, \"1\");\n+    void initMap(Map<String, String> m) {\n+        m.put(\"A\", \"4\");\n+        m.put(\"B\", \"3\");\n+        m.put(\"C\", \"2\");\n+        m.put(\"D\", \"1\");\n@@ -383,2 +383,2 @@\n-    void initSet(Set<Integer> s) {\n-        s.addAll(Arrays.asList(1, 2, 3, 4));\n+    void initSet(Set<String> s) {\n+        s.addAll(Arrays.asList(\"A\", \"B\", \"C\", \"D\"));\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorCharacteristics.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n- * @bug 8148748\n+ * @bug 8148748 8336672\n@@ -67,2 +67,2 @@\n-        SpliteratorDataBuilder<Integer> db =\n-                new SpliteratorDataBuilder<>(data, 5, Arrays.asList(1, 2, 3, 4));\n+        SpliteratorDataBuilder<String> db =\n+                new SpliteratorDataBuilder<>(data, \"Z\", Arrays.asList(\"A\", \"B\", \"C\", \"D\"));\n@@ -87,1 +87,1 @@\n-            Stack<Integer> s = new Stack<>();\n+            Stack<String> s = new Stack<>();\n@@ -109,1 +109,1 @@\n-\n+        \/\/ BUG: Assumes identity\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorFailFastTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,2 +185,2 @@\n-    static class AbstractRandomAccessListImpl extends AbstractList<Integer> implements RandomAccess {\n-        List<Integer> l;\n+    static class AbstractRandomAccessListImpl<T> extends AbstractList<T> implements RandomAccess {\n+        List<T> l;\n@@ -188,1 +188,1 @@\n-        AbstractRandomAccessListImpl(Collection<Integer> c) {\n+        AbstractRandomAccessListImpl(Collection<T> c) {\n@@ -193,1 +193,1 @@\n-        public boolean add(Integer integer) {\n+        public boolean add(T value) {\n@@ -195,1 +195,1 @@\n-            return l.add(integer);\n+            return l.add(value);\n@@ -199,1 +199,1 @@\n-        public Iterator<Integer> iterator() {\n+        public Iterator<T> iterator() {\n@@ -204,1 +204,1 @@\n-        public Integer get(int index) {\n+        public T get(int index) {\n@@ -220,1 +220,1 @@\n-        public List<Integer> subList(int fromIndex, int toIndex) {\n+        public List<T> subList(int fromIndex, int toIndex) {\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorLateBindingFailFastHelper.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n- * @bug 8148748 8170155\n+ * @bug 8148748 8170155 8336672\n@@ -72,2 +72,2 @@\n-        SpliteratorDataBuilder<Integer> db =\n-                new SpliteratorDataBuilder<>(data, 5, Arrays.asList(1, 2, 3, 4));\n+        SpliteratorDataBuilder<String> db =\n+                new SpliteratorDataBuilder<>(data, \"Z\", Arrays.asList(\"A\", \"B\", \"C\", \"D\"));\n@@ -92,1 +92,1 @@\n-            Stack<Integer> s = new Stack<>();\n+            Stack<String> s = new Stack<>();\n@@ -109,0 +109,1 @@\n+        \/\/ BUG: Assumes identity\n@@ -116,0 +117,1 @@\n+        \/\/ BUG: Assumes identity in WeakHashMap\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorLateBindingTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -31,1 +32,2 @@\n- * @bug 8020016 8071477 8072784 8169838\n+ * @run testng\/othervm --enable-preview SpliteratorTraversingAndSplittingTest\n+ * @bug 8020016 8071477 8072784 8169838 8336672\n@@ -34,0 +36,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -631,10 +635,13 @@\n-            db.addMap(WeakHashMap::new);\n-\n-            db.addMap(m -> {\n-                \/\/ Create a Map ensuring that for large sizes\n-                \/\/ buckets will be consist of 2 or more entries\n-                WeakHashMap<Integer, Integer> cm = new WeakHashMap<>(1, m.size() + 1);\n-                for (Map.Entry<Integer, Integer> e : m.entrySet())\n-                    cm.put(e.getKey(), e.getValue());\n-                return cm;\n-            }, \"new java.util.WeakHashMap(1, size + 1)\");\n+            if (!PreviewFeatures.isEnabled()) {\n+                \/\/ With --enable-preview, WeakHashmap is not tested with Integer, a value class\n+                db.addMap(WeakHashMap::new);\n+\n+                db.addMap(m -> {\n+                    \/\/ Create a Map ensuring that for large sizes\n+                    \/\/ buckets will consist of 2 or more entries\n+                    WeakHashMap<Integer, Integer> cm = new WeakHashMap<>(1, m.size() + 1);\n+                    for (Map.Entry<Integer, Integer> e : m.entrySet())\n+                        cm.put(e.getKey(), e.getValue());\n+                    return cm;\n+                }, \"new java.util.WeakHashMap(1, size + 1)\");\n+            }\n","filename":"test\/jdk\/java\/util\/Spliterator\/SpliteratorTraversingAndSplittingTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.CopyOnWriteArraySet;\n@@ -38,1 +36,2 @@\n-import java.util.stream.LambdaTestHelpers;\n+import java.util.stream.IntStream;\n+\n@@ -48,0 +47,6 @@\n+\/*\n+ * @test\n+ * @summary Tests laziness of stream operations\n+ * @bug 8336672\n+ *\/\n+\n@@ -54,0 +59,2 @@\n+    \/\/ Well known Identity instances; needed for IdentityHashMap\n+    static List<String> CONTENT = IntStream.range(0, 10).mapToObj(i -> \"BASE-\" + i).toList();\n@@ -57,1 +64,0 @@\n-        List<Integer> content = LambdaTestHelpers.countTo(10);\n@@ -59,4 +65,4 @@\n-        List<Collection<Integer>> collections = new ArrayList<>();\n-        collections.add(new ArrayList<>(content));\n-        collections.add(new LinkedList<>(content));\n-        collections.add(new Vector<>(content));\n+        List<Collection<String>> collections = new ArrayList<>();\n+        collections.add(new ArrayList<>(CONTENT));\n+        collections.add(new LinkedList<>(CONTENT));\n+        collections.add(new Vector<>(CONTENT));\n@@ -64,3 +70,3 @@\n-        collections.add(new HashSet<>(content));\n-        collections.add(new LinkedHashSet<>(content));\n-        collections.add(new TreeSet<>(content));\n+        collections.add(new HashSet<>(CONTENT));\n+        collections.add(new LinkedHashSet<>(CONTENT));\n+        collections.add(new TreeSet<>(CONTENT));\n@@ -68,2 +74,2 @@\n-        Stack<Integer> stack = new Stack<>();\n-        stack.addAll(content);\n+        Stack<String> stack = new Stack<>();\n+        stack.addAll(CONTENT);\n@@ -71,2 +77,2 @@\n-        collections.add(new PriorityQueue<>(content));\n-        collections.add(new ArrayDeque<>(content));\n+        collections.add(new PriorityQueue<>(CONTENT));\n+        collections.add(new ArrayDeque<>(CONTENT));\n@@ -76,1 +82,1 @@\n-        collections.add(new ConcurrentSkipListSet<>(content));\n+        collections.add(new ConcurrentSkipListSet<>(CONTENT));\n@@ -78,2 +84,2 @@\n-        ArrayBlockingQueue<Integer> arrayBlockingQueue = new ArrayBlockingQueue<>(content.size());\n-        for (Integer i : content)\n+        ArrayBlockingQueue<String> arrayBlockingQueue = new ArrayBlockingQueue<>(CONTENT.size());\n+        for (String i : CONTENT)\n@@ -82,6 +88,6 @@\n-        collections.add(new PriorityBlockingQueue<>(content));\n-        collections.add(new LinkedBlockingQueue<>(content));\n-        collections.add(new LinkedTransferQueue<>(content));\n-        collections.add(new ConcurrentLinkedQueue<>(content));\n-        collections.add(new LinkedBlockingDeque<>(content));\n-        collections.add(new ConcurrentLinkedDeque<>(content));\n+        collections.add(new PriorityBlockingQueue<>(CONTENT));\n+        collections.add(new LinkedBlockingQueue<>(CONTENT));\n+        collections.add(new LinkedTransferQueue<>(CONTENT));\n+        collections.add(new ConcurrentLinkedQueue<>(CONTENT));\n+        collections.add(new LinkedBlockingDeque<>(CONTENT));\n+        collections.add(new ConcurrentLinkedDeque<>(CONTENT));\n@@ -98,4 +104,4 @@\n-    public void testCollectionSizeRemove(String name, Collection<Integer> c) {\n-        assertTrue(c.remove(1));\n-        Stream<Integer> s = c.stream();\n-        assertTrue(c.remove(2));\n+    public void testCollectionSizeRemove(String name, Collection<String> c) {\n+        assertTrue(c.remove(CONTENT.get(0)));\n+        Stream<String> s = c.stream();\n+        assertTrue(c.remove(CONTENT.get(1)));\n@@ -108,1 +114,1 @@\n-        Map<Integer, Integer> content = new HashMap<>();\n+        Map<String, String> content = new HashMap<>();\n@@ -110,1 +116,2 @@\n-            content.put(i, i);\n+            var ix = CONTENT.get(i);\n+            content.put(ix, ix);\n@@ -113,1 +120,1 @@\n-        Map<String, Supplier<Map<Integer, Integer>>> maps = new HashMap<>();\n+        Map<String, Supplier<Map<String, String>>> maps = new HashMap<>();\n@@ -135,1 +142,1 @@\n-        for (Map.Entry<String, Supplier<Map<Integer, Integer>>> e : maps.entrySet()) {\n+        for (Map.Entry<String, Supplier<Map<String, String>>> e : maps.entrySet()) {\n@@ -137,1 +144,0 @@\n-\n@@ -144,1 +150,1 @@\n-    public void testMapKeysSizeRemove(String name, Supplier<Map<Integer, Integer>> c) {\n+    public void testMapKeysSizeRemove(String name, Supplier<Map<String, String>> c) {\n@@ -149,1 +155,1 @@\n-    public void testMapValuesSizeRemove(String name, Supplier<Map<Integer, Integer>> c) {\n+    public void testMapValuesSizeRemove(String name, Supplier<Map<String, String>> c) {\n@@ -154,1 +160,1 @@\n-    public void testMapEntriesSizeRemove(String name, Supplier<Map<Integer, Integer>> c) {\n+    public void testMapEntriesSizeRemove(String name, Supplier<Map<String, String>> c) {\n@@ -158,2 +164,2 @@\n-    private void testEntrySetSizeRemove(String name, Set<Map.Entry<Integer, Integer>> c) {\n-        Map.Entry<Integer, Integer> first = c.iterator().next();\n+    private void testEntrySetSizeRemove(String name, Set<Map.Entry<String, String>> c) {\n+        Map.Entry<String, String> first = c.iterator().next();\n@@ -161,2 +167,2 @@\n-        Stream<Map.Entry<Integer, Integer>> s = c.stream();\n-        Map.Entry<Integer, Integer> second = c.iterator().next();\n+        Stream<Map.Entry<String, String>> s = c.stream();\n+        Map.Entry<String, String> second = c.iterator().next();\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/CollectionAndMapModifyStreamTest.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"}]}