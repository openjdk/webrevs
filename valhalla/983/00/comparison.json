{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import javax.lang.model.type.TypeKind;\n@@ -716,1 +715,1 @@\n-             return types.isSubtype(a, bound, true);\n+             return types.isSubtype(a, bound);\n@@ -795,2 +794,2 @@\n-    Type checkConstructorRefType(JCExpression expr, Type t) {\n-        t = checkClassOrArrayType(expr, t);\n+    Type checkConstructorRefType(DiagnosticPosition pos, Type t) {\n+        t = checkClassOrArrayType(pos, t);\n@@ -799,1 +798,1 @@\n-                log.error(expr, Errors.AbstractCantBeInstantiated(t.tsym));\n+                log.error(pos, Errors.AbstractCantBeInstantiated(t.tsym));\n@@ -802,1 +801,1 @@\n-                log.error(expr, Errors.EnumCantBeInstantiated);\n+                log.error(pos, Errors.EnumCantBeInstantiated);\n@@ -805,1 +804,1 @@\n-                t = checkClassType(expr, t, true);\n+                t = checkClassType(pos, t, true);\n@@ -809,1 +808,1 @@\n-                log.error(expr, Errors.GenericArrayCreation);\n+                log.error(pos, Errors.GenericArrayCreation);\n@@ -1154,5 +1153,1 @@\n-        return checkValidGenericType(null, t);\n-    }\n-\n-    public boolean checkValidGenericType(JCTree pos, Type t) {\n-        return firstIncompatibleTypeArg(pos, t) == null;\n+        return firstIncompatibleTypeArg(t) == null;\n@@ -1161,1 +1156,1 @@\n-        private Type firstIncompatibleTypeArg(JCTree pos, Type type) {\n+        private Type firstIncompatibleTypeArg(Type type) {\n@@ -1552,1 +1547,1 @@\n-                Type incompatibleArg = firstIncompatibleTypeArg(tree, tree.type);\n+                Type incompatibleArg = firstIncompatibleTypeArg(tree.type);\n@@ -4477,1 +4472,0 @@\n-            this.warned = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-    private final boolean allowValueClasses;\n@@ -92,2 +91,0 @@\n-        Source source = Source.instance(context);\n-        allowValueClasses = Source.Feature.VALUE_CLASSES.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-    public final boolean allowValueClasses;\n@@ -152,1 +151,0 @@\n-        allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -474,4 +472,5 @@\n-\n-        Symbol s2 = ((MethodSymbol)sym).implementation(site.tsym, types, true);\n-        return (s2 == null || s2 == sym || sym.owner == s2.owner || (sym.owner.isInterface() && s2.owner == syms.objectType.tsym) ||\n-                !types.isSubSignature(types.memberType(site, s2), types.memberType(site, sym)));\n+        else {\n+            Symbol s2 = ((MethodSymbol)sym).implementation(site.tsym, types, true);\n+            return (s2 == null || s2 == sym || sym.owner == s2.owner || (sym.owner.isInterface() && s2.owner == syms.objectType.tsym) ||\n+                    !types.isSubSignature(types.memberType(site, s2), types.memberType(site, sym)));\n+        }\n@@ -4277,1 +4276,0 @@\n-                boolean isConstructor = names.isInit(name);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -144,2 +144,0 @@\n-    private final Symtab syms;\n-\n@@ -180,1 +178,0 @@\n-        syms = Symtab.instance(context);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2277,2 +2277,1 @@\n-            checkDimension(tree.pos(), tree.clazz.type);\n-            code.emitop2(checkcast, tree.clazz.type, PoolWriter::putClass);\n+            code.emitop2(checkcast, checkDimension(tree.pos(), tree.clazz.type), PoolWriter::putClass);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4059,4 +4059,0 @@\n-# 0: type\n-compiler.err.generic.parameterization.with.primitive.class=\\\n-    Inferred type {0} involves generic parameterization by a primitive class\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,4 +229,0 @@\n-\n-# Primitive Classes\n-compiler.err.cyclic.primitive.class.membership\n-compiler.err.generic.parameterization.with.primitive.class\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}