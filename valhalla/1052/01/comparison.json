{"files":[{"patch":"@@ -114,1 +114,0 @@\n-        -XDenablePrimitiveClasses \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,5 +34,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED BlackholeTest.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *      --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *      --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/BlackholeTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @run main\/othervm -XX:+EnableValhalla TestAcmpWithUnstableIf\n- * @run main\/othervm -XX:+EnableValhalla -XX:CompileCommand=compileonly,TestAcmpWithUnstableIf::test* -Xbatch TestAcmpWithUnstableIf\n+ * @run main\/othervm TestAcmpWithUnstableIf\n+ * @run main\/othervm -XX:CompileCommand=compileonly,TestAcmpWithUnstableIf::test* -Xbatch TestAcmpWithUnstableIf\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestAcmpWithUnstableIf.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,7 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *          TestArrayAccessDeopt.java\n- * @run main\/othervm -XX:+EnableValhalla -Xmx200m\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   TestArrayAccessDeopt\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xmx200m TestArrayAccessDeopt\n@@ -106,1 +102,1 @@\n-            String[] arg = {\"-XX:+EnableValhalla\", \"--add-exports\", \"java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\", \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n+            String[] arg = {\"--enable-preview\", \"--add-exports\", \"java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\", \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,5 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestArrayCopyWithOops.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n@@ -41,3 +39,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n@@ -48,3 +44,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_arraycopy\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -49,0 +48,3 @@\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -51,3 +53,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestArrays.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestArrays\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n@@ -61,4 +61,4 @@\n-        scenarios[2].addFlags(\"-XX:+EnableValhalla\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n-        scenarios[3].addFlags(\"-XX:+EnableValhalla\", \"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n-        scenarios[4].addFlags(\"-XX:+EnableValhalla\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n-        scenarios[5].addFlags(\"-XX:+EnableValhalla\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[2].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[3].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n+        scenarios[4].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n+        scenarios[5].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -48,3 +47,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestBasicFunctionality.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestBasicFunctionality\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch -XX:TypeProfileLevel=222\n+ * @run main\/othervm -Xbatch -XX:TypeProfileLevel=222\n@@ -40,1 +40,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch -XX:TypeProfileLevel=222\n+ * @run main\/othervm -Xbatch -XX:TypeProfileLevel=222\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @modules java.base\/jdk.internal.misc\n@@ -45,6 +44,4 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestBufferTearing.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -53,4 +50,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -60,4 +54,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -67,4 +58,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":7,"deletions":19,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,6 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestBufferTearingC1.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n@@ -39,4 +36,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestC1.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestC1\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestC1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,5 +34,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestC1ValueNumbering.java\n- * @run main\/othervm -XX:+EnableValhalla -Xcomp -XX:TieredStopAtLevel=1 -ea\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -ea\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1ValueNumbering.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -35,2 +34,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -41,2 +39,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -47,2 +44,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -53,2 +49,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -50,3 +49,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestCallingConvention.java\n- * @run main\/othervm\/timeout=450 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestCallingConvention\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=450 compiler.valhalla.inlinetypes.TestCallingConvention\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestCallingConventionC1.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestCallingConventionC1\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestCallingConventionC1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:-TieredCompilation -Xcomp\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCastMismatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,6 +29,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestDeadAllocationRemoval.java\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   TestDeadAllocationRemoval\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xbatch TestDeadAllocationRemoval\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -44,0 +43,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -46,2 +47,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestDeoptimizationWhenBuffering.java\n+ * @enablePreview\n@@ -49,4 +49,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -55,4 +52,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -61,4 +55,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -69,4 +60,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -77,4 +65,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -85,4 +70,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -93,4 +75,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -101,4 +80,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":11,"deletions":35,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -30,6 +30,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestFlatArrayAliasesCardMark.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:-BackgroundCompilation\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   TestFlatArrayAliasesCardMark\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:-BackgroundCompilation TestFlatArrayAliasesCardMark\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,5 +29,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestFlatArrayThreshold.java\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xbatch\n@@ -35,3 +33,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxOops=1 -Xbatch\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -XX:FlatArrayElementMaxOops=1 -Xbatch\n@@ -39,3 +35,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=1 -Xbatch\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -XX:FlatArrayElementMaxSize=1 -Xbatch\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,6 +29,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *          TestGenerated.java\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xbatch\n@@ -36,3 +33,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch -XX:FlatArrayElementMaxSize=0\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -Xbatch -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -46,5 +48,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestGetfieldChains.java\n- * @run main\/othervm\/timeout=300 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                               --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                               compiler.valhalla.inlinetypes.TestGetfieldChains\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestGetfieldChains\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,7 +42,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *          TestInlineFieldNonFlattened.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -XX:-TieredCompilation\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:-TieredCompilation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestInlineFieldNonFlattened.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n- * @modules java.base\/jdk.internal.misc java.base\/jdk.internal.value\n@@ -51,3 +50,4 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestIntrinsics.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestIntrinsics\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestIntrinsics\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestIsSubstitutableReresolution::test\n+ * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestIsSubstitutableReresolution::test\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestJNICalls.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestJNICalls\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -55,0 +54,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -56,3 +57,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestLWorld.java\n- * @run main\/othervm\/timeout=450  --enable-preview compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main\/othervm\/timeout=450 compiler.valhalla.inlinetypes.TestLWorld\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,7 +47,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *          TestLWorldProfiling.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla\n- *                               --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                               --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                               compiler.valhalla.inlinetypes.TestLWorldProfiling\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestLWorldProfiling\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,5 +31,2 @@\n- * @compile --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *          TestLarvalState.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n- *                   compiler.valhalla.inlinetypes.TestLarvalState\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm compiler.valhalla.inlinetypes.TestLarvalState\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLarvalState.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test TestLoopUnswitchingWithFlatArrayCheck\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test TestLoopUnswitchingWithFlatArrayCheck\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLoopUnswitchingWithFlatArrayCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -51,7 +50,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *          TestMethodHandles.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla\n- *                               --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                               --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                               compiler.valhalla.inlinetypes.TestMethodHandles\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestMethodHandles\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -38,1 +38,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -43,1 +43,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -47,1 +47,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -52,1 +52,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -57,1 +57,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n@@ -61,1 +61,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -Xbatch\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xbatch\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch -XX:-UseTypeProfile\n+ * @run main\/othervm -Xbatch -XX:-UseTypeProfile\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestNestmateAccess.java\n- * @run main\/othervm -XX:+EnableValhalla -Xcomp\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xcomp\n@@ -45,1 +45,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xcomp -XX:TieredStopAtLevel=1\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1\n@@ -48,2 +48,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   compiler.valhalla.inlinetypes.TestNestmateAccess\n+ * @run main\/othervm compiler.valhalla.inlinetypes.TestNestmateAccess\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla\n- *                               -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -49,3 +48,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestNullableArrays.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestNullableArrays\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestNullableArrays\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -54,0 +53,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -55,3 +56,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestNullableInlineTypes.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestNullableInlineTypes\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestOnStackReplacement.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestOnStackReplacement\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestOnStackReplacement\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch compiler.valhalla.inlinetypes.TestOptimizeKlassCmp\n+ * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestOptimizeKlassCmp\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:CompileCommand=dontinline,TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:CompileCommand=dontinline,TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestSafepointAtPollReturn.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:CompileCommand=exclude,compiler.valhalla.inlinetypes.TestStressReturnBuffering::caller -Xmx4m\n+ * @run main\/othervm -XX:CompileCommand=exclude,compiler.valhalla.inlinetypes.TestStressReturnBuffering::caller -Xmx4m\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -33,2 +32,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestTrivialMethods.java\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -36,3 +36,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @run main\/othervm -Xbootclasspath\/a:.\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n@@ -36,2 +35,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n@@ -42,2 +40,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -XX:CompileCommand=compileonly,*::<init> -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*::<init> -Xcomp -XX:-TieredCompilation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUninitializedValueClass.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,6 +31,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestUnloadedInlineTypeArray.java\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xcomp\n@@ -39,4 +36,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n@@ -45,4 +39,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp\n+ * @run main\/othervm -Xcomp\n@@ -50,4 +41,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n@@ -55,4 +43,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n@@ -61,4 +46,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n@@ -67,4 +49,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n@@ -72,4 +51,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                   -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":10,"deletions":34,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -44,6 +46,2 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestUnloadedInlineTypeField.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla\n- *                               --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                               --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n- *                               compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n+ * @compile TestUnloadedInlineTypeField.java\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla TestUnresolvedInlineClass\n+ * @run main\/othervm TestUnresolvedInlineClass\n@@ -55,1 +55,1 @@\n-            String[] arg = {\"-XX:+EnableValhalla\", \"-XX:+InlineTypePassFieldsAsArgs\", \"TestUnresolvedInlineClass\", \"run\"};\n+            String[] arg = {\"--enable-preview\", \"-XX:+InlineTypePassFieldsAsArgs\", \"TestUnresolvedInlineClass\", \"run\"};\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n- * @modules java.base\/jdk.internal.value\n@@ -49,0 +48,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -50,3 +51,1 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestValueClasses.java\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestValueClasses\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestValueClasses\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @compile --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED TestValueRematDuringTypeSharpening.java\n- * @run main\/othervm\/timeout=300 --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED compiler.valhalla.inlinetypes.TestValueRematDuringTypeSharpening\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestValueRematDuringTypeSharpening\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueRematDuringTypeSharpening.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,5 +31,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED TestWrongFlatArrayCopyStubWithZGC.java\n- * @run main\/othervm -XX:+EnableValhalla -Xbatch -XX:+UseZGC -XX:-ZGenerational\n- *                   --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *                   --add-exports java.base\/jdk.internal.value=ALL-UNNAMED\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xbatch -XX:+UseZGC -XX:-ZGenerational\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWrongFlatArrayCopyStubWithZGC.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,2 +41,3 @@\n- * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n- *          --add-exports java.base\/jdk.internal.value=ALL-UNNAMED ValueOnBootclasspath.java InstallBootstrapClasses.java TestBootClassloader.java\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @compile ValueOnBootclasspath.java InstallBootstrapClasses.java TestBootClassloader.java\n@@ -45,3 +46,2 @@\n- * @run main\/othervm -XX:+EnableValhalla InstallBootstrapClasses\n- * @run main\/othervm -XX:+EnableValhalla\n- *                   -Xbootclasspath\/a:boot -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm InstallBootstrapClasses\n+ * @run main\/othervm -Xbootclasspath\/a:boot -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @ignore Fix 8328162\n@@ -30,0 +31,1 @@\n+ * @enablePreview\n@@ -31,1 +33,1 @@\n- * @run main\/othervm -XX:-EnableValhalla ClassAccessFlagsRawTest\n+ * @run main\/othervm ClassAccessFlagsRawTest\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassAccessFlagsRawTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -32,1 +33,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses HelloInlineClassTest\n+ * @run main\/othervm HelloInlineClassTest\n@@ -47,1 +48,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\",\n@@ -51,1 +52,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\",\n@@ -57,1 +58,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\",\n@@ -62,1 +63,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\",\n@@ -70,1 +71,1 @@\n-        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+        TestCommon.run(\"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/HelloInlineClassTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n@@ -54,1 +55,1 @@\n-                    \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                    \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -37,1 +38,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n@@ -95,1 +96,1 @@\n-        TestCommon.dumpBaseArchive(baseArchiveName, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", unlockArg, logArg)\n+        TestCommon.dumpBaseArchive(baseArchiveName, \"--enable-preview\", unlockArg, logArg)\n@@ -101,1 +102,1 @@\n-              \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+              \"--enable-preview\",\n@@ -113,1 +114,1 @@\n-             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+             \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -34,1 +35,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n@@ -63,2 +64,1 @@\n-             \"-XX:+EnableValhalla\",\n-             \"-XX:+EnablePrimitiveClasses\",\n+             \"--enable-preview\",\n@@ -72,2 +72,1 @@\n-            \"-XX:+EnableValhalla\",\n-            \"-XX:+EnablePrimitiveClasses\",\n+            \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-    static primitive class Point {\n+    static value class Point {\n@@ -51,1 +51,1 @@\n-    static primitive class Rectangle {\n+    static value class Rectangle {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/HelloInlineClassApp.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public primitive class Point {\n+public value class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/Point.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @ignore\n- * @test CheckcastTest\n- * @summary checkcast bytecode test\n- * @library \/test\/lib\n- * @compile VDefaultTest.java CheckcastTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.CheckcastTest\n- *\/\n-\n-public class CheckcastTest {\n-\n-    static primitive class Point {\n-        int x;\n-        int y;\n-\n-        public Point() {\n-            x = 0;\n-            y = 0;\n-        }\n-\n-        public Point(int x, int y) {\n-            this.x = x;\n-            this.y = y;\n-        }\n-    }\n-\n-\n-    static void testCastingFromObjectToVal(Object o) {\n-        boolean npe = false;\n-        try {\n-            Point pv = (Point)o;\n-        } catch(NullPointerException e) {\n-            npe = true;\n-        }\n-        Asserts.assertTrue(npe == false || o == null, \"Casting null to val should throw a NPE\");\n-    }\n-\n-    static void testCastingFromValToBox(Point p) {\n-        boolean npe = false;\n-        try {\n-            Point.ref pb = p;\n-        } catch(NullPointerException e) {\n-            npe = true;\n-        }\n-        Asserts.assertFalse(npe, \"Casting from val to box should not throw an NPE\");\n-    }\n-\n-    static void testCastingFromBoxToVal(Point.ref p) {\n-        boolean npe = false;\n-        try {\n-            Point pv = (Point) p;\n-        } catch(NullPointerException e) {\n-            npe = true;\n-        }\n-        if (npe) {\n-            Asserts.assertEquals(p, null, \"NPE must be thrown only if p is null\");\n-        } else {\n-            Asserts.assertNotEquals(p, null, \"Casting null to val must thrown a NPE\");\n-        }\n-\n-    }\n-\n-    public static void main(String[] args) {\n-        \/\/ Testing casting from box to val\n-        \/\/ First invocation: casting null to Point with an unresolved class entry\n-        testCastingFromBoxToVal(null);\n-        \/\/ Second invocation: casting non-null to val, will trigger resolution of the class entry\n-        testCastingFromBoxToVal(new Point(3,4));\n-        \/\/ Third invocation: casting null to Point with a resolved class entry\n-        testCastingFromBoxToVal(null);\n-\n-        \/\/ Testing casting from val to box\n-        testCastingFromBoxToVal(new Point(3,4));\n-\n-        \/\/ Testing casting from object to val\n-        \/\/ First invocation: casting null to Point with an unresolved class entry\n-        testCastingFromObjectToVal(null);\n-        \/\/ Second invocation: casting non-null to al, will trigger resolution of the class entry\n-        testCastingFromObjectToVal(new Point(3,4));\n-        \/\/ Third invocation: casting null to Point with a resolved class entry\");\n-        testCastingFromObjectToVal(null);\n-        \/\/ Fourth invocation: with something not the right type\n-        boolean cce = false;\n-        try {\n-            testCastingFromObjectToVal(new String(\"NotPoint\"));\n-        } catch(ClassCastException e) {\n-            cce = true;\n-        }\n-        Asserts.assertTrue(cce,\"casting invalid type to val should throw CCE\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CheckcastTest.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n- public class Element0 {\n-    int i=0,j=0;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/Element0.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public primitive class Element1 {\n-    int i=0,j=0;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/Element1.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @ignore\n- * @test\n- * @summary test that mismatches in bottom class of multi-dimensional\n-            arrays are correctly detected\n- * @library \/testlibrary \/test\/lib\n- * @compile MultiANewArrayTypeCheck.jcod MultiANewArrayTest.java Element0.java Element1.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses MultiANewArrayTest\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-\n-public class MultiANewArrayTest {\n-\n-    public static void main(String[] args) {\n-        Error ex = null;\n-        try {\n-            MultiANewArrayTypeCheck.createArray0();\n-        } catch(Error e) {\n-            ex = e;\n-        }\n-        Asserts.assertNotNull(ex, \"An ICCE should have been thrown\");\n-        Asserts.assertEquals(ex.getClass(), IncompatibleClassChangeError.class, \"Error is not an ICCE\");\n-        ex = null;\n-        try {\n-            MultiANewArrayTypeCheck.createArray1();\n-        } catch(Error e) {\n-            ex = e;\n-        }\n-        Asserts.assertNull(ex, \"No error should have been thrown\");\n-        ex = null;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTest.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * This class provides two static methods equivalent to this Java source code:\n- * void createArray0() {\n- *     Element0 array = new Element0[10][10]; \/\/ Element0 is expected to be an inline type\n- * }\n- * void createArray1() {\n- *     Element1 array = new Element1[10][10]; \/\/ Element1 is expected to be a reference type\n- * }\n- *\/\n-\n-class MultiANewArrayTypeCheck {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"[[QElement0;\"; \/\/ #8\n-    class #10; \/\/ #9\n-    Utf8 \"[[LElement1;\"; \/\/ #10\n-    class #12; \/\/ #11\n-    Utf8 \"MultiANewArrayTypeCheck\"; \/\/ #12\n-    Utf8 \"Code\"; \/\/ #13\n-    Utf8 \"LineNumberTable\"; \/\/ #14\n-    Utf8 \"createArray0\"; \/\/ #15\n-    Utf8 \"createArray1\"; \/\/ #16\n-    Utf8 \"SourceFile\"; \/\/ #17\n-    Utf8 \"MultiANewArrayTypeCheck.java\"; \/\/ #18\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #11;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#13) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#14) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  1;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #15; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#13) { \/\/ Code\n-          2; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x100A100AC5000702;\n-            0x4BB1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#14) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  4;\n-                9  5;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #16; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#13) { \/\/ Code\n-          2; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x100A100AC5000902;\n-            0x4BB1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#14) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  8;\n-                9  9;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#17) { \/\/ SourceFile\n-      #18;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class MultiANewArrayTypeCheck\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTypeCheck.jcod","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla PreloadCircularityTest\n+ * @run main\/othervm PreloadCircularityTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/**\n- * @ignore\n- * @test\n- * @library \/test\/lib\n- * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n- * @enablePreview\n- * @run driver org.openjdk.asmtools.JtregDriver jasm -strict TestFieldTypeMismatchClasses.jasm\n- * @compile TestFieldTypeMismatch.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.TestFieldTypeMismatch\n- *\/\n-\n-public class TestFieldTypeMismatch {\n-\n-    public static void main(String[] args) {\n-        boolean exception = false;\n-        try {\n-          TestFieldTypeMismatchClass t = new TestFieldTypeMismatchClass();\n-        } catch(IncompatibleClassChangeError err) {\n-            exception = true;\n-            Asserts.assertEquals(err.getMessage(),\n-                \"Class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass expects class runtime.valhalla.inlinetypes.MyValue to be an inline type, but it is not\");\n-        }\n-        Asserts.assertTrue(exception);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatch.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 66:0 {\n-\n-    Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n-\n-    public Method \"<init>\":\"()V\"\n-      stack 1 locals 1\n-    {\n-        aload_0;\n-        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n-        return;\n-    }\n-\n-    public Method test:\"()V\" stack 2 locals 1 {\n-        aload_0;\n-        aconst_null;\n-        putfield Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n-        return;\n-    }\n-}\n-\n-super public final class runtime\/valhalla\/inlinetypes\/MyValue version 66:0 {\n-    Field foo:I = 42;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClasses.jasm","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @ignore\n- * @test VDefaultTest\n- * @summary vdefault bytecode test\n- * @library \/test\/lib\n- * @compile Point.java\n- * @compile -XDallowFlattenabilityModifiers VDefaultTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.VDefaultTest\n- *\/\n-\n-public class VDefaultTest {\n-\n-    static primitive final class Point {\n-        final int x;\n-        final int y;\n-\n-        static Point make() {\n-            Point p = Point.default;\n-            return p;\n-        }\n-\n-        Point() {\n-            x = 0;\n-            y = 0;\n-        }\n-    }\n-\n-    static primitive final class Value {\n-        final char c;\n-        final byte b;\n-        final short s;\n-        final int i;\n-        final long l;\n-        final float f;\n-        final double d;\n-        final Point p;\n-\n-        static Value make() {\n-            Value p = Value.default;\n-            return p;\n-        }\n-\n-        Value () {\n-            c = 0;\n-            b = 0;\n-            s = 0;\n-            i = 0;\n-            l = 0;\n-            f = 0;\n-            d = 0;\n-            p = Point.make();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        creationTest();\n-        creationTest();\n-    }\n-\n-    static void creationTest() {\n-        Value v = Value.make();\n-        Asserts.assertEquals(v.c, (char)0, \"invalid char default value\");\n-        Asserts.assertEquals(v.b, (byte)0, \"invalid char default value\");\n-        Asserts.assertEquals(v.s, (short)0, \"invalid short default value\");\n-        Asserts.assertEquals(v.i, 0, \"invalid int default value\");\n-        Asserts.assertEquals(v.l, 0L, \"invalid long default value\");\n-        Asserts.assertEquals(v.f, 0.0F, \"invalid float default value\");\n-        Asserts.assertEquals(v.d, 0.0D, \"invalid double default value\");\n-        Asserts.assertEquals(v.p.x, 0, \"invalid embedded inline type value\");\n-        Asserts.assertEquals(v.p.y, 0, \"invalid embedded inline type value\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VDefaultTest.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -39,1 +39,1 @@\n- * @ignore Disabled until there is a syntax in the language to make objects\/fields non-tearable\n+ * @ignore Fix JDK-8328353\n@@ -44,0 +44,1 @@\n+ * @enablePreview\n@@ -46,2 +47,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -51,2 +51,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n@@ -56,2 +55,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -DSTEP_COUNT=10000000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -DSTEP_COUNT=10000000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n@@ -60,2 +58,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -65,2 +62,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -70,2 +66,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/**\n- * @test\n- * @ignore\n- * @bug 8210351\n- * @summary test nestmate access to an inline type's public, protected and private final fields.\n- * @library \/test\/lib\n- * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n- * @run driver org.openjdk.asmtools.JtregDriver jasm -strict WithFieldAccessorTestClasses.jasm\n- * @compile WithFieldAccessorTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.WithFieldAccessorTest\n- *\/\n-\n-public class WithFieldAccessorTest {\n-\n-    public static void main(String... args) {\n-        WithFieldOwner start = WithFieldOwner.default;\n-        WithFieldOwner x = start;\n-        x.checkFields((char) 0, 0, 0, 0);\n-\n-        x = WithFieldOwner.withC(start, 'a');\n-        x = WithFieldOwner.withL(x, 1);\n-        x = WithFieldOwner.withD(x, 2);\n-        x = WithFieldOwner.withI(x, 3);\n-        x.checkFields('a', 1, 2, 3);\n-\n-        x = WithFieldNestHost.withC(start, 'b');\n-        x = WithFieldNestHost.withL(x, 4);\n-        x = WithFieldNestHost.withD(x, 5);\n-        x = WithFieldNestHost.withI(x, 6);\n-        x.checkFields('b', 4, 5, 6);\n-\n-        x = WithFieldNestmate.withC(start, 'c');\n-        x = WithFieldNestmate.withL(x, 7);\n-        x = WithFieldNestmate.withD(x, 8);\n-        x = WithFieldNestmate.withI(x, 9);\n-        x.checkFields('c', 7, 8, 9);\n-\n-        catchAccessError(() -> WithFieldSamePackage.withC(start, 'd'));\n-        catchAccessError(() -> WithFieldSamePackage.withL(start, 10));\n-        catchAccessError(() -> WithFieldSamePackage.withD(start, 11));\n-        catchAccessError(() -> WithFieldSamePackage.withI(start, 12));\n-    }\n-\n-    static void catchAccessError(Runnable r) {\n-        try {\n-            r.run();\n-            Asserts.fail(\"access violation not caught\");\n-        }\n-        catch (IllegalAccessError e)  { \/* expected *\/ }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,233 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldOwner\n-    version 66:0\n-{\n-    NestHost runtime\/valhalla\/inlinetypes\/WithFieldNestHost;\n-\n-    public final Field c:C;\n-    protected final Field l:J;\n-    final Field d:D;\n-    private final Field i:I;\n-\n-    public Method checkFields:\"(CJDI)V\" stack 4 {\n-        aload_0;\n-        getfield c:C;\n-        invokestatic java\/lang\/Character.valueOf:\"(C)Ljava\/lang\/Character;\";\n-        iload_1;\n-        invokestatic java\/lang\/Character.valueOf:\"(C)Ljava\/lang\/Character;\";\n-        ldc \"unexpected c value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        aload_0;\n-        getfield l:J;\n-        invokestatic java\/lang\/Long.valueOf:\"(J)Ljava\/lang\/Long;\";\n-        lload_2;\n-        invokestatic java\/lang\/Long.valueOf:\"(J)Ljava\/lang\/Long;\";\n-        ldc \"unexpected l value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        aload_0;\n-        getfield d:D;\n-        invokestatic java\/lang\/Double.valueOf:\"(D)Ljava\/lang\/Double;\";\n-        dload 4;\n-        invokestatic java\/lang\/Double.valueOf:\"(D)Ljava\/lang\/Double;\";\n-        ldc \"unexpected d value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        aload_0;\n-        getfield i:I;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        iload 6;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        ldc \"unexpected i value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        return;\n-    }\n-\n-    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n-        areturn;\n-    }\n-\n-    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        lload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n-        areturn;\n-    }\n-\n-    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        dload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n-        areturn;\n-    }\n-\n-    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n-        areturn;\n-    }\n-\n-}\n-\n-public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldNestmate\n-    version 66:0\n-{\n-    NestHost runtime\/valhalla\/inlinetypes\/WithFieldNestHost;\n-\n-    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n-        areturn;\n-    }\n-\n-    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        lload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n-        areturn;\n-    }\n-\n-    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        dload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n-        areturn;\n-    }\n-\n-    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n-        areturn;\n-    }\n-\n-}\n-\n-public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldNestHost\n-    version 66:0\n-{\n-    NestMembers runtime\/valhalla\/inlinetypes\/WithFieldOwner, runtime\/valhalla\/inlinetypes\/WithFieldNestmate;\n-\n-    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n-        areturn;\n-    }\n-\n-    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        lload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n-        areturn;\n-    }\n-\n-    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        dload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n-        areturn;\n-    }\n-\n-    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n-        areturn;\n-    }\n-}\n-\n-public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldSamePackage\n-    version 66:0\n-{\n-\n-    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n-        areturn;\n-    }\n-\n-    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        lload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n-        areturn;\n-    }\n-\n-    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 3\n-    {\n-        aload_0;\n-        dload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n-        areturn;\n-    }\n-\n-    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n-        stack 2\n-    {\n-        aload_0;\n-        iload_1;\n-        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n-        areturn;\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTestClasses.jasm","additions":0,"deletions":233,"binary":false,"changes":233,"status":"deleted"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @ignore\n- * @test\n- * @summary withfield bytecode test\n- * @library \/test\/lib\n- * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n- * @run driver org.openjdk.asmtools.JtregDriver jasm -strict WithFieldTestClasses.jasm\n- * @compile Point.java WithFieldTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.WithFieldTest\n- *\/\n-\n-public class WithFieldTest {\n-\n-    public static void main(String[] args) {\n-        creationTest();\n-        creationTest();\n-        witherTest();\n-        witherTest();\n-        allTypesTest();\n-    }\n-\n-    static void creationTest() {\n-        WithFieldPoint p = WithFieldPoint.make(10,20);\n-        p.checkFields(10, 20);\n-    }\n-\n-    static void witherTest() {\n-        WithFieldPoint p1 = WithFieldPoint.make(2,12);\n-        p1.checkFields(2, 12);\n-        WithFieldPoint p2 = p1.withX(3);\n-        p2.checkFields(3, 12);\n-        WithFieldPoint p3 = p2.withY(14);\n-        p3.checkFields(3, 14);\n-        WithFieldPoint p4 = p1.withY(14);\n-        p4.checkFields(2, 14);\n-        WithFieldPoint p5 = p4.withX(3);\n-        p5.checkFields(3, 14);\n-    }\n-\n-    static boolean[] z_values = new boolean[] { false, true, false};\n-    static byte[] b_values = new byte[] { 0, 125, -111};\n-    static short[] s_values = new short[] { 0, 32654, -31836};\n-    static char[] c_values = new char[] { 0, 1, 65528};\n-    static int[] i_values = new int[] { 0, 2137523847, -2037453241};\n-    static long[] l_values = new long[] { 0, 9123456036854775807L, -9112272036854775507L};\n-    static float[] f_values = new float[] { 0.0f, 1.52758043e7f, -7.93757e-5f};\n-    static double[] d_values = new double[] { 0.0d, 3.304786e9d, -0.7548345e-15d};\n-    static Object[] o_values = new Object[] { null, \"Hello\", \"Duke\"};\n-    static Point[] p_values = new Point[] { new Point(0, 0), new Point(-1, 1), new Point(1, -1)};\n-\n-    static void allTypesTest() {\n-        AllTypes value = AllTypes.default;\n-        int[] map = new int[10];\n-        verifyAllTypes(value, map);\n-        for (int i = 2; i >= 0; i--) {\n-            value = value.set_z(z_values[map[0] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_b(b_values[map[1] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_s(s_values[map[2] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_c(c_values[map[3] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_i(i_values[map[4] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_l(l_values[map[5] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_f(f_values[map[6] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_d(d_values[map[7] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_o(o_values[map[8] = i]);\n-            verifyAllTypes(value, map);\n-            value = value.set_p(p_values[map[9] = i]);\n-            verifyAllTypes(value, map);\n-        }\n-    }\n-\n-    static void verifyAllTypes(AllTypes x, int[] map) {\n-        Asserts.assertEquals(x.z, z_values[map[0]]);\n-        Asserts.assertEquals(x.b, b_values[map[1]]);\n-        Asserts.assertEquals(x.s, s_values[map[2]]);\n-        Asserts.assertEquals(x.c, c_values[map[3]]);\n-        Asserts.assertEquals(x.i, i_values[map[4]]);\n-        Asserts.assertEquals(x.l, l_values[map[5]]);\n-        Asserts.assertEquals(x.f, f_values[map[6]]);\n-        Asserts.assertEquals(x.d, d_values[map[7]]);\n-        Asserts.assertEquals(x.o, o_values[map[8]]);\n-        Asserts.assertEquals(x.p, p_values[map[9]]);\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTest.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"},{"patch":"@@ -1,191 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldPoint\n-    version 66:0\n-{\n-\n-    private final Field x:I;\n-    private final Field y:I;\n-\n-    public static Method make:\"(II)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\"\n-        stack 4\n-    {\n-        aconst_init runtime\/valhalla\/inlinetypes\/WithFieldPoint;\n-        dup;\n-        iconst_0;\n-        iconst_0;\n-        invokevirtual checkFields:\"(II)V\";\n-\n-        iload_0;\n-        withfield x:I;\n-        dup;\n-        iload_0;\n-        iconst_0;\n-        invokevirtual checkFields:\"(II)V\";\n-\n-        iload_1;\n-        withfield y:I;\n-        dup;\n-        iload_0;\n-        iload_1;\n-        invokevirtual checkFields:\"(II)V\";\n-\n-        areturn;\n-    }\n-\n-    public Method getX:\"()I\" stack 1 {\n-        aload_0;\n-        getfield x:I;\n-        ireturn;\n-    }\n-\n-    public Method getY:\"()I\" stack 1 {\n-        aload_0;\n-        getfield y:I;\n-        ireturn;\n-    }\n-\n-    public Method withX:\"(I)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield x:I;\n-        areturn;\n-    }\n-\n-    public Method withY:\"(I)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield y:I;\n-        areturn;\n-    }\n-\n-    public Method checkFields:\"(II)V\" stack 3 {\n-        aload_0;\n-        getfield x:I;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        iload_1;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        ldc \"invalid x value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        aload_0;\n-        getfield y:I;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        iload_2;\n-        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n-        ldc \"invalid y value\";\n-        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n-\n-        return;\n-    }\n-\n-}\n-\n-public final primitive value class runtime\/valhalla\/inlinetypes\/AllTypes\n-    version 66:0\n-{\n-\n-    public final Field z:Z;\n-    public final Field b:B;\n-    public final Field s:S;\n-    public final Field c:C;\n-    public final Field i:I;\n-    public final Field l:J;\n-    public final Field f:F;\n-    public final Field d:D;\n-    public final Field o:\"Ljava\/lang\/Object;\";\n-    public final Field p:\"Qruntime\/valhalla\/inlinetypes\/Point;\";\n-\n-    public Method set_z:\"(Z)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield z:Z;\n-        areturn;\n-    }\n-\n-    public Method set_b:\"(B)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield b:B;\n-        areturn;\n-    }\n-\n-    public Method set_s:\"(S)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield s:S;\n-        areturn;\n-    }\n-\n-    public Method set_c:\"(C)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield c:C;\n-        areturn;\n-    }\n-\n-    public Method set_i:\"(I)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        iload_1;\n-        withfield i:I;\n-        areturn;\n-    }\n-\n-    public Method set_l:\"(J)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 3 {\n-        aload_0;\n-        lload_1;\n-        withfield l:J;\n-        areturn;\n-    }\n-\n-    public Method set_f:\"(F)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        fload_1;\n-        withfield f:F;\n-        areturn;\n-    }\n-\n-    public Method set_d:\"(D)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 3 {\n-        aload_0;\n-        dload_1;\n-        withfield d:D;\n-        areturn;\n-    }\n-\n-    public Method set_o:\"(Ljava\/lang\/Object;)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        aload_1;\n-        withfield o:\"Ljava\/lang\/Object;\";\n-        areturn;\n-    }\n-\n-    public Method set_p:\"(Qruntime\/valhalla\/inlinetypes\/Point;)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n-        aload_0;\n-        aload_1;\n-        withfield p:\"Qruntime\/valhalla\/inlinetypes\/Point;\";\n-        areturn;\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTestClasses.jasm","additions":0,"deletions":191,"binary":false,"changes":191,"status":"deleted"},{"patch":"@@ -1,581 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/\/ These tests are based on this .java file.  Each test case changed an access\n-\/\/ flag to cause a ClassFormatError exception when loading the class.\n-\/*\n-public abstract value class AbstractV {\n-\n-    static int x = 3;\n-\n-    public static synchronized void meth() {\n-        System.out.println(\"hi\");\n-    }\n-}\n-*\/\n-\n-\/\/ Removed ACC_STATIC from field access flags.\n-class AbstractVField {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [33] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    Field #8 #9; \/\/ #7     at 0x39\n-    class #10; \/\/ #8     at 0x3E\n-    NameAndType #11 #12; \/\/ #9     at 0x41\n-    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n-    Utf8 \"out\"; \/\/ #11     at 0x59\n-    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n-    String #14; \/\/ #13     at 0x77\n-    Utf8 \"hi\"; \/\/ #14     at 0x7A\n-    Method #16 #17; \/\/ #15     at 0x7F\n-    class #18; \/\/ #16     at 0x84\n-    NameAndType #19 #20; \/\/ #17     at 0x87\n-    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n-    Utf8 \"println\"; \/\/ #19     at 0xA2\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n-    Field #22 #23; \/\/ #21     at 0xC4\n-    class #24; \/\/ #22     at 0xC9\n-    NameAndType #25 #26; \/\/ #23     at 0xCC\n-    Utf8 \"AbstractVField\"; \/\/ #24     at 0xD1\n-    Utf8 \"x\"; \/\/ #25     at 0xDE\n-    Utf8 \"I\"; \/\/ #26     at 0xE2\n-    Utf8 \"Code\"; \/\/ #27     at 0xE6\n-    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n-    Utf8 \"meth\"; \/\/ #29     at 0xFF\n-    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n-    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n-    Utf8 \"AbstractVField.java\"; \/\/ #32     at 0x011E\n-  } \/\/ Constant Pool\n-\n-  0x0441; \/\/ access [ ACC_PUBLIC ACC_ABSTRACT ACC_VALUE ]\n-  #22;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x013A\n-      0x0000; \/\/ access\n-      #25; \/\/ name_index       : x\n-      #26; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [3] { \/\/ Methods\n-    {  \/\/ method at 0x0144\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x014C\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB70001B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n-              [1] { \/\/ line_number_table\n-                0  2; \/\/  at 0x016F\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x016F\n-      0x0029; \/\/ access\n-      #29; \/\/ name_index       : meth\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 37) { \/\/ Code at 0x0177\n-          2; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[9]{\n-            0xB20007120DB6000F;\n-            0xB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n-              [2] { \/\/ line_number_table\n-                0  7; \/\/  at 0x019E\n-                8  8; \/\/  at 0x01A2\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x01A2\n-      0x0008; \/\/ access\n-      #30; \/\/ name_index       : <clinit>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x01AA\n-          1; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[5]{\n-            0x06B30015B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n-              [1] { \/\/ line_number_table\n-                0  4; \/\/  at 0x01CD\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n-      #32;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class AbstractVField\n-\n-\n-\/\/ Added ACC_FINAL to class access flags.\n-class AbstractVFinal {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [33] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    Field #8 #9; \/\/ #7     at 0x39\n-    class #10; \/\/ #8     at 0x3E\n-    NameAndType #11 #12; \/\/ #9     at 0x41\n-    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n-    Utf8 \"out\"; \/\/ #11     at 0x59\n-    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n-    String #14; \/\/ #13     at 0x77\n-    Utf8 \"hi\"; \/\/ #14     at 0x7A\n-    Method #16 #17; \/\/ #15     at 0x7F\n-    class #18; \/\/ #16     at 0x84\n-    NameAndType #19 #20; \/\/ #17     at 0x87\n-    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n-    Utf8 \"println\"; \/\/ #19     at 0xA2\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n-    Field #22 #23; \/\/ #21     at 0xC4\n-    class #24; \/\/ #22     at 0xC9\n-    NameAndType #25 #26; \/\/ #23     at 0xCC\n-    Utf8 \"AbstractVFinal\"; \/\/ #24     at 0xD1\n-    Utf8 \"x\"; \/\/ #25     at 0xDE\n-    Utf8 \"I\"; \/\/ #26     at 0xE2\n-    Utf8 \"Code\"; \/\/ #27     at 0xE6\n-    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n-    Utf8 \"meth\"; \/\/ #29     at 0xFF\n-    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n-    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n-    Utf8 \"AbstractVFinal.java\"; \/\/ #32     at 0x011E\n-  } \/\/ Constant Pool\n-\n-  0x0451; \/\/ access [ ACC_FINAL ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n-  #22;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x013A\n-      0x0008; \/\/ access\n-      #25; \/\/ name_index       : x\n-      #26; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [3] { \/\/ Methods\n-    {  \/\/ method at 0x0144\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x014C\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB70001B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n-              [1] { \/\/ line_number_table\n-                0  2; \/\/  at 0x016F\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x016F\n-      0x0029; \/\/ access\n-      #29; \/\/ name_index       : meth\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 37) { \/\/ Code at 0x0177\n-          2; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[9]{\n-            0xB20007120DB6000F;\n-            0xB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n-              [2] { \/\/ line_number_table\n-                0  7; \/\/  at 0x019E\n-                8  8; \/\/  at 0x01A2\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x01A2\n-      0x0008; \/\/ access\n-      #30; \/\/ name_index       : <clinit>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x01AA\n-          1; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[5]{\n-            0x06B30015B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n-              [1] { \/\/ line_number_table\n-                0  4; \/\/  at 0x01CD\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n-      #32;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class AbstractVFinal\n-\n-\n-\/\/ Added ACC_INTERFACE to class access flags\n-class AbstractVintf {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [33] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    Field #8 #9; \/\/ #7     at 0x39\n-    class #10; \/\/ #8     at 0x3E\n-    NameAndType #11 #12; \/\/ #9     at 0x41\n-    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n-    Utf8 \"out\"; \/\/ #11     at 0x59\n-    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n-    String #14; \/\/ #13     at 0x77\n-    Utf8 \"hi\"; \/\/ #14     at 0x7A\n-    Method #16 #17; \/\/ #15     at 0x7F\n-    class #18; \/\/ #16     at 0x84\n-    NameAndType #19 #20; \/\/ #17     at 0x87\n-    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n-    Utf8 \"println\"; \/\/ #19     at 0xA2\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n-    Field #22 #23; \/\/ #21     at 0xC4\n-    class #24; \/\/ #22     at 0xC9\n-    NameAndType #25 #26; \/\/ #23     at 0xCC\n-    Utf8 \"AbstractVintf\"; \/\/ #24     at 0xD1\n-    Utf8 \"x\"; \/\/ #25     at 0xDE\n-    Utf8 \"I\"; \/\/ #26     at 0xE2\n-    Utf8 \"Code\"; \/\/ #27     at 0xE6\n-    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n-    Utf8 \"meth\"; \/\/ #29     at 0xFF\n-    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n-    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n-    Utf8 \"AbstractVintf.java\"; \/\/ #32     at 0x011E\n-  } \/\/ Constant Pool\n-\n-  0x0641; \/\/ access [ ACC_INTERFACE ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n-  #22;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x013A\n-      0x0008; \/\/ access\n-      #25; \/\/ name_index       : x\n-      #26; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [3] { \/\/ Methods\n-    {  \/\/ method at 0x0144\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x014C\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB70001B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n-              [1] { \/\/ line_number_table\n-                0  2; \/\/  at 0x016F\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x016F\n-      0x0029; \/\/ access\n-      #29; \/\/ name_index       : meth\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 37) { \/\/ Code at 0x0177\n-          2; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[9]{\n-            0xB20007120DB6000F;\n-            0xB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n-              [2] { \/\/ line_number_table\n-                0  7; \/\/  at 0x019E\n-                8  8; \/\/  at 0x01A2\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x01A2\n-      0x0008; \/\/ access\n-      #30; \/\/ name_index       : <clinit>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x01AA\n-          1; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[5]{\n-            0x06B30015B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n-              [1] { \/\/ line_number_table\n-                0  4; \/\/  at 0x01CD\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n-      #32;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class AbstractVintf\n-\n-\n-\/\/ Changed the access flags for synchronized method meth() to not be static.\n-class AbstractVMethod {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [33] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    Field #8 #9; \/\/ #7     at 0x39\n-    class #10; \/\/ #8     at 0x3E\n-    NameAndType #11 #12; \/\/ #9     at 0x41\n-    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n-    Utf8 \"out\"; \/\/ #11     at 0x59\n-    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n-    String #14; \/\/ #13     at 0x77\n-    Utf8 \"hi\"; \/\/ #14     at 0x7A\n-    Method #16 #17; \/\/ #15     at 0x7F\n-    class #18; \/\/ #16     at 0x84\n-    NameAndType #19 #20; \/\/ #17     at 0x87\n-    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n-    Utf8 \"println\"; \/\/ #19     at 0xA2\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n-    Field #22 #23; \/\/ #21     at 0xC4\n-    class #24; \/\/ #22     at 0xC9\n-    NameAndType #25 #26; \/\/ #23     at 0xCC\n-    Utf8 \"AbstractVMethod\"; \/\/ #24     at 0xD1\n-    Utf8 \"x\"; \/\/ #25     at 0xDE\n-    Utf8 \"I\"; \/\/ #26     at 0xE2\n-    Utf8 \"Code\"; \/\/ #27     at 0xE6\n-    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n-    Utf8 \"meth\"; \/\/ #29     at 0xFF\n-    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n-    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n-    Utf8 \"AbstractVMethod.java\"; \/\/ #32     at 0x011E\n-  } \/\/ Constant Pool\n-\n-  0x0441; \/\/ access [ ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n-  #22;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x013A\n-      0x0008; \/\/ access\n-      #25; \/\/ name_index       : x\n-      #26; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [2] { \/\/ Methods\n-    {  \/\/ method at 0x016F\n-      0x0021; \/\/ access\n-      #29; \/\/ name_index       : meth\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 37) { \/\/ Code at 0x0177\n-          2; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[9]{\n-            0xB20007120DB6000F;\n-            0xB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n-              [2] { \/\/ line_number_table\n-                0  7; \/\/  at 0x019E\n-                8  8; \/\/  at 0x01A2\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x01A2\n-      0x0008; \/\/ access\n-      #30; \/\/ name_index       : <clinit>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#27, 29) { \/\/ Code at 0x01AA\n-          1; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[5]{\n-            0x06B30015B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n-              [1] { \/\/ line_number_table\n-                0  4; \/\/  at 0x01CD\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n-      #32;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class AbstractVMethod\n-\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCCFETests.jcod","additions":0,"deletions":581,"binary":false,"changes":581,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @ignore\n- * @test ACC_CFETest\n- * @bug 8281279\n- * @summary test class access rules for abstract classes that have ACC_VALUE set.\n- * @compile ACCCFETests.jcod\n- * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -Xverify:remote ACC_CFETest\n- *\/\n-\n-public class ACC_CFETest {\n-\n-    public static void runTest(String test_name, String message) throws Exception {\n-        System.out.println(\"Testing: \" + test_name);\n-        try {\n-            Class newClass = Class.forName(test_name);\n-            if (message != null) {\n-                throw new RuntimeException(\"Expected ClassFormatError with message: \" + message + \", but none occurred\");\n-            }\n-        } catch (java.lang.ClassFormatError e) {\n-            if (!e.getMessage().contains(message)) {\n-                throw new RuntimeException( \"Wrong ClassFormatError: \" + e.getMessage() + \" expected: \" + message);\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Test illegal class that has ACC_VALUE set and a non-static field..\n-        runTest(\"AbstractVField\", \"Illegal field modifiers in class AbstractVField\");\n-\n-        \/\/ Test illegal class that has both ACC_FINAL and ACC_VALUE set.\n-        runTest(\"AbstractVFinal\",\n-                \"Illegal class modifiers in class AbstractVFinal (a value class)\");\n-\n-        \/\/ Test illegal class that has both ACC_INTERFACE and ACC_VALUE set.\n-        runTest(\"AbstractVintf\",\n-                \"Illegal field modifiers in class AbstractVintf: 0x8\");\n-\n-        \/\/ Test illegal class that has ACC_VALUE set and a non-static synchronized method.\n-        runTest(\"AbstractVMethod\",\n-                \"Method meth in class AbstractVMethod (not an identity class) has illegal modifiers: 0x21\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_CFETest.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328412\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -31,1 +32,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses ACC_ICCETest\n+ * @run main\/othervm ACC_ICCETest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_ICCETest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @ignore\n- * @test\n- * @ignore  TBD: Resolution of -XX:-EnableValhalla\n- * @summary test that if a class file has ACC_VALUE or ACC_PRIMITIVE set then it must be run\n- *          with option -XX:+EnableValhalla or -XX:+EnablePrimitiveClasses respectively.\n- * @compile cfpTests.jcod\n- * @run main\/othervm -XX:-EnableValhalla -XX:-EnablePrimitiveClasses BadACCValue ACC_VALUE\n- * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses BadACCValue ACC_PRIMIITVE\n- *\/\n-\n-public class BadACCValue {\n-\n-    public static void runTest(String test_name, String message) throws Exception {\n-        System.out.println(\"Testing: \" + test_name + \" Expecting CFE with message: \" + message);\n-        try {\n-            Class newClass = Class.forName(test_name);\n-            throw new RuntimeException(\"Managed to load primitive class with -XX:-EnablePrimitiveClasses\");\n-        } catch (java.lang.ClassFormatError e) {\n-            if (!e.getMessage().contains(message)) {\n-                throw new RuntimeException( \"Wrong ClassFormatError: \" + e.getMessage());\n-            }\n-        } catch (Throwable t) {\n-            throw new RuntimeException( \"Wrong Exeception, message: \" + t.getMessage(), t);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Test correct error message for disabled Valhalla features\n-        String message = args[0].equals(\"ACC_VALUE\") ?\n-            \"Class modifier ACC_VALUE in class ValueFieldNotFinal requires option -XX:+EnableValhalla\" :\n-            \"Class modifier ACC_PRIMITIVE in class ValueFieldNotFinal requires option -XX:+EnablePrimitiveClasses\";\n-        runTest(\"ValueFieldNotFinal\", message);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadACCValue.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -25,1 +25,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328416\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,1 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote BadInlineTypes\n+ * @run main\/othervm -Xverify:remote BadInlineTypes\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadInlineTypes.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @ignore\n- * @test PrimitiveUsers\n- * @summary test that if a class file uses primitive classes, -XX:+EnablePrimitiveClasses must be set.\n- * @compile PrimitiveUsers.jcod\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses PrimitiveUsers true\n- * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses PrimitiveUsers false\n- *\/\n-\n-public class PrimitiveUsers {\n-\n-    static final String[][] TEST_CASE_ERROR = {\n-        { \"PrimitiveUsersField\",         \"Field \\\"p\\\" in class PrimitiveUsersField has illegal signature \\\"QMyPrimitive;\\\"\" },\n-        { \"PrimitiveUsersStaticQArg\",    \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersStaticQArg, requires option -XX:+EnablePrimitiveClasses\" },\n-        { \"PrimitiveUsersStaticQReturn\", \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersStaticQReturn, requires option -XX:+EnablePrimitiveClasses\" },\n-        { \"PrimitiveUsersQArg\",    \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersQArg, requires option -XX:+EnablePrimitiveClasses\" },\n-        { \"PrimitiveUsersQReturn\", \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersQReturn, requires option -XX:+EnablePrimitiveClasses\" }\n-    };\n-\n-    public static void testLoadCasesEnabled() throws Throwable {\n-        for (String[] caseAndError : TEST_CASE_ERROR) {\n-            Class.forName(caseAndError[0]);\n-        }\n-    }\n-\n-    public static void testLoadCasesDisabled() throws Throwable {\n-        for (String[] caseAndError : TEST_CASE_ERROR) {\n-            try {\n-                Class.forName(caseAndError[0]);\n-                throw new RuntimeException(\"Test case \" + caseAndError[0] + \" loaded with out failure\");\n-            } catch (Throwable t) {\n-                if (!(t instanceof ClassFormatError)) {\n-                    t.printStackTrace();\n-                    throw t;\n-                }\n-                if (!t.getMessage().equals(caseAndError[1])) {\n-                    t.printStackTrace();\n-                    throw new RuntimeException(\"Wrong CFE error: \" +  t.getMessage() + \" expected: \" + caseAndError[1]);\n-                }\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        if (args[0].equals(\"true\")) {\n-            testLoadCasesEnabled();\n-        } else {\n-            \/\/ Test correct error message for disabled primitive class feature\n-            testLoadCasesDisabled();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,588 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\n-\/*\n- These test classes contains variations of Q-type signature uses which should\n- only work with +EnablePrimitiveClasses\n-\n- The original source with all the illegal cases looks like this, then below\n- are classes with a single aspect declared (for each line in the prototype\n- class listed)\n-\n- public class PrimitiveUsers {\n-    MyPrimitive p;\n-    public static void staticCheckQArg(MyPrimitive p) {}\n-    public static MyPrimitive staticCheckQReturn() { return MyPrimitive.default; }\n-    public void checkQArg(MyPrimitive p) {}\n-    public MyPrimitive checkQReturn() { return MyPrimitive.default; }\n- }\n-*\/\n-\n-\/\/ Use Q-signature field...\n-\n-class PrimitiveUsersField {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"PrimitiveUsersField\"; \/\/ #8\n-    Utf8 \"p\"; \/\/ #9\n-    Utf8 \"QMyPrimitive;\"; \/\/ #10\n-    Utf8 \"Code\"; \/\/ #11\n-    Utf8 \"LineNumberTable\"; \/\/ #12\n-    Utf8 \"SourceFile\"; \/\/ #13\n-    Utf8 \"PrimitiveUsersField.java\"; \/\/ #14\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-    {  \/\/ field\n-      0x0000; \/\/ access\n-      #9; \/\/ name_index\n-      #10; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#13) { \/\/ SourceFile\n-      #14;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class PrimitiveUsersField\n-\n-\n-\/\/ Static method q-sig in arg\n-\n-class PrimitiveUsersStaticQArg {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"PrimitiveUsersStaticQArg\"; \/\/ #8\n-    Utf8 \"Code\"; \/\/ #9\n-    Utf8 \"LineNumberTable\"; \/\/ #10\n-    Utf8 \"staticCheckQArg\"; \/\/ #11\n-    Utf8 \"(QMyPrimitive;)V\"; \/\/ #12\n-    Utf8 \"SourceFile\"; \/\/ #13\n-    Utf8 \"PrimitiveUsersStaticQArg.java\"; \/\/ #14\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          0; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0xB1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  4;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#13) { \/\/ SourceFile\n-      #14;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class PrimitiveUsersStaticQArg\n-\n-\/\/ Static method q-sig in return\n-\n-class PrimitiveUsersStaticQReturn {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"MyPrimitive\"; \/\/ #8\n-    class #10; \/\/ #9\n-    Utf8 \"PrimitiveUsersStaticQReturn\"; \/\/ #10\n-    Utf8 \"Code\"; \/\/ #11\n-    Utf8 \"LineNumberTable\"; \/\/ #12\n-    Utf8 \"staticCheckQReturn\"; \/\/ #13\n-    Utf8 \"()QMyPrimitive;\"; \/\/ #14\n-    Utf8 \"SourceFile\"; \/\/ #15\n-    Utf8 \"PrimitiveUsersStaticQReturn.java\"; \/\/ #16\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #9;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #13; \/\/ name_index\n-      #14; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          1; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[]{\n-            0xCB0007B0;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  5;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#15) { \/\/ SourceFile\n-      #16;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class PrimitiveUsersStaticQReturn\n-\n-\/\/ Method with q-sig in arg\n-\n-class PrimitiveUsersQArg {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"PrimitiveUsersQArg\"; \/\/ #8\n-    Utf8 \"Code\"; \/\/ #9\n-    Utf8 \"LineNumberTable\"; \/\/ #10\n-    Utf8 \"checkQArg\"; \/\/ #11\n-    Utf8 \"(QMyPrimitive;)V\"; \/\/ #12\n-    Utf8 \"SourceFile\"; \/\/ #13\n-    Utf8 \"PrimitiveUsersQArg.java\"; \/\/ #14\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          0; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[]{\n-            0xB1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  6;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#13) { \/\/ SourceFile\n-      #14;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class PrimitiveUsersQArg\n-\n-\/\/ Method with q-sig in return\n-\n-class PrimitiveUsersQReturn {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"MyPrimitive\"; \/\/ #8\n-    class #10; \/\/ #9\n-    Utf8 \"PrimitiveUsersQReturn\"; \/\/ #10\n-    Utf8 \"Code\"; \/\/ #11\n-    Utf8 \"LineNumberTable\"; \/\/ #12\n-    Utf8 \"checkQReturn\"; \/\/ #13\n-    Utf8 \"()QMyPrimitive;\"; \/\/ #14\n-    Utf8 \"SourceFile\"; \/\/ #15\n-    Utf8 \"PrimitiveUsersQReturn.java\"; \/\/ #16\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #9;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #13; \/\/ name_index\n-      #14; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0xCB0007B0;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  7;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#15) { \/\/ SourceFile\n-      #16;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class PrimitiveUsersQReturn\n-\n-\n-\/\/ Legal primitive class MyPrimitive for enabled use cases\n-\n-class MyPrimitive {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"MyPrimitive\"; \/\/ #4\n-    Utf8 \"<vnew>\"; \/\/ #5\n-    Utf8 \"(I)QMyPrimitive;\"; \/\/ #6\n-    Field #2 #8; \/\/ #7\n-    NameAndType #9 #10; \/\/ #8\n-    Utf8 \"id\"; \/\/ #9\n-    Utf8 \"I\"; \/\/ #10\n-    class #12; \/\/ #11\n-    Utf8 \"java\/lang\/Object\"; \/\/ #12\n-    Utf8 \"()QMyPrimitive;\"; \/\/ #13\n-    Utf8 \"Code\"; \/\/ #14\n-    Utf8 \"LineNumberTable\"; \/\/ #15\n-    Utf8 \"SourceFile\"; \/\/ #16\n-    Utf8 \"MyPrimitive.java\"; \/\/ #17\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access\n-  #2;\/\/ this_cpx\n-  #11;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-    {  \/\/ field\n-      0x0010; \/\/ access\n-      #9; \/\/ name_index\n-      #10; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #5; \/\/ name_index\n-      #13; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#14) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x03B800014B2AB0;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#15) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  6;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#14) { \/\/ Code\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[]{\n-            0xCB00024C1A2B5FCC;\n-            0x00074C2BB0;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#15) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  7;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#16) { \/\/ SourceFile\n-      #17;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class MyPrimitive\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.jcod","additions":0,"deletions":588,"binary":false,"changes":588,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328417\n@@ -31,0 +31,1 @@\n+ * @enablePreview\n@@ -34,1 +35,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -verify TestClassModifiers\n+ * @run main\/othervm -verify TestClassModifiers\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/TestClassModifiers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328419\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -33,1 +34,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -verify TestSuperClasses\n+ * @run main\/othervm -verify TestSuperClasses\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/TestSuperClasses.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328438\n@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote VTAssignability\n+ * @run main\/othervm -Xverify:remote VTAssignability\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xverify:remote VTMonitor\n+ * @run main\/othervm -Xverify:remote VTMonitor\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @ignore\n+ * @ignore Fix JDK-8328423\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -31,1 +32,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -verify VerifierInlineTypes\n+ * @run main\/othervm -verify VerifierInlineTypes\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VerifierInlineTypes.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @ignore\n- * @test\n- * @bug 8269756\n- * @summary test scenarios where getfield, putfield, and withfield access the\n- *          same constant pool field_ref and test other withfield error cases.\n- * @compile withfieldTests.jcod RunWithfieldTests.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote RunWithfieldTests\n- *\/\n-\n-public class RunWithfieldTests {\n-\n-    public static void main(String argv[]) throws Throwable {\n-\n-        \/\/ Check that a withfield on a CONSTANT_Field_info entry that references\n-        \/\/ an identity object will fail and that subsequent putfield and getfield\n-        \/\/ operations on the same CONSTANT_FIELD_info entry will succeed.\n-        Class wfoClass = Class.forName(\"withfieldObject\");\n-        withfieldObject wfo = (withfieldObject)wfoClass.getDeclaredConstructor().newInstance();\n-        String y = wfo.getfield();\n-        if (!y.equals(\"cde\")) {\n-            throw new RuntimeException(\"Unexpected value of wfo.getfield(): \" + y);\n-        }\n-\n-\n-        \/\/ Check that a putfield and getfield on a CONSTANT_Field_info entry that\n-        \/\/ references an identity object will succeed and that a subsequent withfield\n-        \/\/ operation on the same CONSTANT_FIELD_info entry will fail.\n-        Class pfoClass = Class.forName(\"putfieldObject\");\n-        putfieldObject pfo = (putfieldObject)pfoClass.getDeclaredConstructor().newInstance();\n-        String x = pfo.getfield();\n-        if (!x.equals(\"abc\")) {\n-            throw new RuntimeException(\"Unexpected value of pfo.getfield(): \" + x);\n-        }\n-        try {\n-            pfo.withfieldFunc();\n-            throw new RuntimeException(\"ICCE not thrown\");\n-        } catch (IncompatibleClassChangeError e) {\n-            if (!e.getMessage().contains(\"withfield cannot be used on identity class\")) {\n-                throw new RuntimeException(\"Wrong ICCE thrown: \" + e.getMessage());\n-            }\n-        }\n-\n-\n-        \/\/ Check that a putfield on a CONSTANT_Field_info entry that references\n-        \/\/ a primitive object will fail and that subsequent withfield and getfield\n-        \/\/ operations on the same CONSTANT_FIELD_info entry will succeed.\n-        try {\n-            putfieldPrimitive pfp = new putfieldPrimitive(false);  \/\/ putfield on a primitive class\n-            throw new RuntimeException(\"ICCE not thrown\");\n-        } catch (IncompatibleClassChangeError e) {\n-            if (!e.getMessage().contains(\"putfield cannot be used on primitive class\")) {\n-                throw new RuntimeException(\"Wrong ICCE thrown: \" + e.getMessage());\n-            }\n-        }\n-        putfieldPrimitive pfp = new putfieldPrimitive(true);  \/\/ withfield on a primitive class\n-        if (pfp.getX() != 5) {\n-            throw new RuntimeException(\"Unexpected value of d.getfield(): \" + pfp.getX());\n-        }\n-\n-\n-        \/\/ Check that a withfield and getfield on a CONSTANT_Field_info entry that\n-        \/\/ references a primitive object will succeed and that a subsequent putfield\n-        \/\/ operation on the same CONSTANT_FIELD_info entry will fail.\n-        withfieldPrimitive wfp = new withfieldPrimitive(true);  \/\/ withfield on a primitive class\n-        if (wfp.getX() != 5) {\n-            throw new RuntimeException(\"Unexpected value of d.getfield(): \" + wfp.getX());\n-        }\n-        try {\n-            withfieldPrimitive wfp2 = new withfieldPrimitive(false);  \/\/ putfield on a primitive class\n-            throw new RuntimeException(\"ICCE not thrown\");\n-        } catch (IncompatibleClassChangeError e) {\n-            if (!e.getMessage().contains(\"putfield cannot be used on primitive class\")) {\n-                throw new RuntimeException(\"Wrong ICCE thrown: \" + e.getMessage());\n-            }\n-        }\n-\n-\n-        \/\/ Test withfield with a null stack operand.\n-        try {\n-            withfieldNull wfn = new withfieldNull();\n-            throw new RuntimeException(\"NPE not thrown\");\n-        } catch (NullPointerException e) {\n-            if (!e.getMessage().contains(\"Cannot assign field \\\"x\\\"\")) {\n-                throw new RuntimeException(\"Wrong NPE thrown: \" + e.getMessage());\n-            }\n-        }\n-\n-\n-        \/\/ Test that a VerifyError exception is thrown for a withfield bytecode if the\n-        \/\/ stack operand is a different primitive type than the primitive type in the\n-        \/\/ constant pool field_ref.\n-        try {\n-            WrongPrimWF wPrim = new WrongPrimWF();\n-            throw new RuntimeException(\"No exception thrown\");\n-        } catch (VerifyError e) {\n-            if (!e.getMessage().contains(\"Bad type on operand stack\")) {\n-                throw new RuntimeException(\"Wrong VerifyError thrown: \" + e.getMessage());\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/RunWithfieldTests.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -1,1121 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/* This jcod class is based on this Java code. To see what changed from the\n-   original jcod file search for !!!!.\n- public class withfieldObject {\n-\n-     String y;\n-\n-     public withfieldObject() {\n-         try {\n-             y = \"abc\";  \/\/ Change this putfield to a withfield\n-         } catch (IncompatibleClassChangeError e) {\n-             y = \"cde\";\n-         }\n-     }\n-\n-     public String getfield() {\n-         return y;\n-     }\n- }\n-*\/\n-\n-class withfieldObject {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [26] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    String #8; \/\/ #7     at 0x39\n-    Utf8 \"abc\"; \/\/ #8     at 0x3C\n-    Field #10 #11; \/\/ #9     at 0x42\n-    class #12; \/\/ #10     at 0x47\n-    NameAndType #13 #14; \/\/ #11     at 0x4A\n-    Utf8 \"withfieldObject\"; \/\/ #12     at 0x4F\n-    Utf8 \"y\"; \/\/ #13     at 0x60\n-    Utf8 \"Ljava\/lang\/String;\"; \/\/ #14     at 0x64\n-    class #16; \/\/ #15     at 0x79\n-    Utf8 \"java\/lang\/IncompatibleClassChangeError\"; \/\/ #16     at 0x7C\n-    String #18; \/\/ #17     at 0xA5\n-    Utf8 \"cde\"; \/\/ #18     at 0xA8\n-    Utf8 \"Code\"; \/\/ #19     at 0xAE\n-    Utf8 \"LineNumberTable\"; \/\/ #20     at 0xB5\n-    Utf8 \"StackMapTable\"; \/\/ #21     at 0xC7\n-    Utf8 \"getfield\"; \/\/ #22     at 0xD7\n-    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #23     at 0xE2\n-    Utf8 \"SourceFile\"; \/\/ #24     at 0xF9\n-    Utf8 \"withfieldObject.java\"; \/\/ #25     at 0x0106\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n-  #10;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x0126\n-      0x0000; \/\/ access\n-      #13; \/\/ name_index       : y\n-      #14; \/\/ descriptor_index : Ljava\/lang\/String;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [2] { \/\/ Methods\n-    {  \/\/ method at 0x0130\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#19, 96) { \/\/ Code at 0x0138  \/\/ !!!! Changed 95 -> 96\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[22]{                \/\/ !!!! Changed from 21 -> 22\n-            0x2AB700012A1207CC;     \/\/ !!!! Changed last byte from B5 (putfield) to CC (withfield)\n-            0x000957A7000A4C2A;     \/\/ !!!! Inserted 0x57 (pop) to clear the stack.\n-            0x1211B50009B1;\n-          }\n-          [1] { \/\/ Traps\n-            4 11 14 15; \/\/  at 0x0165  \/\/ !!!! Changed 10 -> 11 and 13 -> 14\n-          } \/\/ end Traps\n-          [2] { \/\/ Attributes\n-            Attr(#20, 26) { \/\/ LineNumberTable at 0x0167\n-              [6] { \/\/ line_number_table\n-                0  6; \/\/  at 0x0173\n-                4  8; \/\/  at 0x0177\n-                10  11; \/\/  at 0x017B\n-                13  9; \/\/  at 0x017F\n-                14  10; \/\/  at 0x0183\n-                20  12; \/\/  at 0x0187\n-              }\n-            } \/\/ end LineNumberTable\n-            ;\n-            Attr(#21, 16) { \/\/ StackMapTable at 0x0187\n-              [2] { \/\/\n-                255b, 14, [1]{7b,10}, [1]{7b,15}; \/\/ full_frame  \/\/ !!!! Changed 13 to 14\n-                6b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x019D\n-      0x0001; \/\/ access\n-      #22; \/\/ name_index       : getfield\n-      #23; \/\/ descriptor_index : ()Ljava\/lang\/String;\n-      [1] { \/\/ Attributes\n-        Attr(#19, 29) { \/\/ Code at 0x01A5\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB40009B0;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 6) { \/\/ LineNumberTable at 0x01BC\n-              [1] { \/\/ line_number_table\n-                0  15; \/\/  at 0x01C8\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#24, 2) { \/\/ SourceFile at 0x01CA\n-      #25;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class withfieldObject\n-\n-\n-\n-\/* This jcod class is based on this Java code.  To see what changed from the\n-   orignal jcod file, search for !!!!.\n- public class putfieldObject {\n-     String y;\n-     public putfieldObject() {\n-         y = \"abc\";\n-     }\n-     public void withfieldFunc() {\n-         y = \"cde\";  \/\/ Change this putfield to a withfield\n-     }\n-     public String getfield() {\n-         return y;\n-     }\n- }\n-*\/\n-class putfieldObject {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [24] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    String #8; \/\/ #7     at 0x39\n-    Utf8 \"abc\"; \/\/ #8     at 0x3C\n-    Field #10 #11; \/\/ #9     at 0x42\n-    class #12; \/\/ #10     at 0x47\n-    NameAndType #13 #14; \/\/ #11     at 0x4A\n-    Utf8 \"putfieldObject\"; \/\/ #12     at 0x4F\n-    Utf8 \"y\"; \/\/ #13     at 0x60\n-    Utf8 \"Ljava\/lang\/String;\"; \/\/ #14     at 0x64\n-    String #16; \/\/ #15     at 0x79\n-    Utf8 \"cde\"; \/\/ #16     at 0x7C\n-    Utf8 \"Code\"; \/\/ #17     at 0x82\n-    Utf8 \"LineNumberTable\"; \/\/ #18     at 0x89\n-    Utf8 \"withfieldFunc\"; \/\/ #19     at 0x9B\n-    Utf8 \"getfield\"; \/\/ #20     at 0xAB\n-    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #21     at 0xB6\n-    Utf8 \"SourceFile\"; \/\/ #22     at 0xCD\n-    Utf8 \"putfieldObject.java\"; \/\/ #23     at 0xDA\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n-  #10;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0xFA\n-      0x0000; \/\/ access\n-      #13; \/\/ name_index       : y\n-      #14; \/\/ descriptor_index : Ljava\/lang\/String;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [3] { \/\/ Methods\n-    {  \/\/ method at 0x0104\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#17, 43) { \/\/ Code at 0x010C\n-          2; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[11]{\n-            0x2AB700012A1207B5;\n-            0x0009B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#18, 14) { \/\/ LineNumberTable at 0x0129\n-              [3] { \/\/ line_number_table\n-                0  6; \/\/  at 0x0135\n-                4  7; \/\/  at 0x0139\n-                10  8; \/\/  at 0x013D\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x013D\n-      0x0001; \/\/ access\n-      #19; \/\/ name_index       : withfieldFunc\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#17, 35) { \/\/ Code at 0x0145\n-          2; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[7]{\n-            0x2A120FCC0009B1;  \/\/ !!!! Change 0xB5 (putfield) to 0xCC (withfield)\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#18, 10) { \/\/ LineNumberTable at 0x015E\n-              [2] { \/\/ line_number_table\n-                0  11; \/\/  at 0x016A\n-                6  12; \/\/  at 0x016E\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0x016E\n-      0x0001; \/\/ access\n-      #20; \/\/ name_index       : getfield\n-      #21; \/\/ descriptor_index : ()Ljava\/lang\/String;\n-      [1] { \/\/ Attributes\n-        Attr(#17, 29) { \/\/ Code at 0x0176\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB40009B0;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#18, 6) { \/\/ LineNumberTable at 0x018D\n-              [1] { \/\/ line_number_table\n-                0  15; \/\/  at 0x0199\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#22, 2) { \/\/ SourceFile at 0x019B\n-      #23;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class putfieldObject\n-\n-\n-\n-\/* This jcod class is based on this Java code.  To see what changed from the\n-   original jcod file, search for !!!!.\n-public primitive final class putfieldPrimitive {\n-    int x;\n-\n-    public putfieldPrimitive(boolean odd) {\n-        if (odd) {\n-            x = 5;\n-        } else {\n-            x = 6;\n-        }\n-    }\n-\n-    public int getX() {\n-        return x;\n-    }\n-}\n-*\/\n-\n-\/\/ If putfieldPrimitive.<vnew>(bool) is passed TRUE then it uses a withfield bytecode.\n-\/\/ Otherwise, it uses a putfield bytecode.\n-\n-class putfieldPrimitive {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [20] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"putfieldPrimitive\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x13\n-    NameAndType #5 #6; \/\/ #4     at 0x18\n-    Utf8 \"x\"; \/\/ #5     at 0x1D\n-    Utf8 \"I\"; \/\/ #6     at 0x21\n-    class #8; \/\/ #7     at 0x25\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8     at 0x28\n-    Utf8 \"getX\"; \/\/ #9     at 0x3B\n-    Utf8 \"()I\"; \/\/ #10     at 0x42\n-    Utf8 \"Code\"; \/\/ #11     at 0x48\n-    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x4F\n-    Utf8 \"<vnew>\"; \/\/ #13     at 0x61\n-    Utf8 \"(Z)QputfieldPrimitive;\"; \/\/ #14     at 0x6A\n-    Utf8 \"StackMapTable\"; \/\/ #15     at 0x75\n-    class #17; \/\/ #16     at 0x85\n-    Utf8 \"QputfieldPrimitive;\"; \/\/ #17     at 0x88\n-    Utf8 \"SourceFile\"; \/\/ #18     at 0x90\n-    Utf8 \"putfieldPrimitive.java\"; \/\/ #19     at 0x9D\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0xB2\n-      0x0010; \/\/ access\n-      #5; \/\/ name_index       : x\n-      #6; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [2] { \/\/ Methods\n-    {  \/\/ method at 0xBC\n-      0x0001; \/\/ access\n-      #9; \/\/ name_index       : getX\n-      #10; \/\/ descriptor_index : ()I\n-      [1] { \/\/ Attributes\n-        Attr(#11, 29) { \/\/ Code at 0xC4\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB40003AC;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#12, 6) { \/\/ LineNumberTable at 0xDB\n-              [1] { \/\/ line_number_table\n-                0  13; \/\/  at 0xE7\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0xE7\n-      0x0009; \/\/ access\n-      #13; \/\/ name_index       : <vnew>\n-      #14; \/\/ descriptor_index : (Z)QputfieldPrimitive;\n-      [1] { \/\/ Attributes\n-        Attr(#11, 84) { \/\/ Code at 0xEF  \/\/ !!! Change 83 -> 84\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[29]{             \/\/ !!!! Change 28 -> 29\n-            0xCB00014C1A99000D;\n-            0x082B5FCC00034CA7;\n-            0x000C10062B5FB500;  \/\/ !!!! Change goto target B -> C and 0xCC (withfield) to 0xB5 (putfield)\n-            0x032B4C2BB0;        \/\/ !!!! Inserted 0x2B (aload_1)\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [2] { \/\/ Attributes\n-            Attr(#12, 22) { \/\/ LineNumberTable at 0x011D\n-              [5] { \/\/ line_number_table\n-                0  4; \/\/  at 0x0129\n-                4  5; \/\/  at 0x012D\n-                8  6; \/\/  at 0x0131\n-                18  8; \/\/  at 0x0135\n-                26  10; \/\/  at 0x0139\n-              }\n-            } \/\/ end LineNumberTable\n-            ;\n-            Attr(#15, 9) { \/\/ StackMapTable at 0x0139\n-              [2] { \/\/\n-                252b, 18, [1]z{7b,16}; \/\/ append_frame 1\n-                8b; \/\/ same_frame    \/\/ !!!! change 7 -> 8\n-              }\n-            } \/\/ end StackMapTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#18, 2) { \/\/ SourceFile at 0x014A\n-      #19;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class putfieldPrimitive\n-\n-\n-\n-\/* This jcod class is based on this Java code.  To see what changed from the\n-   original jcod file, search for !!!!.\n-public primitive final class withfieldPrimitive {\n-    int x;\n-\n-    public withfieldPrimitive(boolean odd) {\n-        if (odd) {\n-            x = 5;\n-        } else {\n-            x = 6;\n-        }\n-    }\n-\n-    public int getX() {\n-        return x;\n-    }\n-}\n-*\/\n-\n-\/\/ This class is identical to putfieldPrimitive except for its name.  A new class\n-\/\/ was needed for a fresh constant pool resolution.\n-\/\/ If withfieldPrimitive.<vnew>(bool) is passed TRUE then it uses a withfield bytecode.\n-\/\/ Otherwise, it uses a putfield bytecode.\n-\n-class withfieldPrimitive {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [20] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"withfieldPrimitive\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x13\n-    NameAndType #5 #6; \/\/ #4     at 0x18\n-    Utf8 \"x\"; \/\/ #5     at 0x1D\n-    Utf8 \"I\"; \/\/ #6     at 0x21\n-    class #8; \/\/ #7     at 0x25\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8     at 0x28\n-    Utf8 \"getX\"; \/\/ #9     at 0x3B\n-    Utf8 \"()I\"; \/\/ #10     at 0x42\n-    Utf8 \"Code\"; \/\/ #11     at 0x48\n-    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x4F\n-    Utf8 \"<vnew>\"; \/\/ #13     at 0x61\n-    Utf8 \"(Z)QwithfieldPrimitive;\"; \/\/ #14     at 0x6A\n-    Utf8 \"StackMapTable\"; \/\/ #15     at 0x75\n-    class #17; \/\/ #16     at 0x85\n-    Utf8 \"QwithfieldPrimitive;\"; \/\/ #17     at 0x88\n-    Utf8 \"SourceFile\"; \/\/ #18     at 0x90\n-    Utf8 \"withfieldPrimitive.java\"; \/\/ #19     at 0x9D\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0xB2\n-      0x0010; \/\/ access\n-      #5; \/\/ name_index       : x\n-      #6; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [2] { \/\/ Methods\n-    {  \/\/ method at 0xBC\n-      0x0001; \/\/ access\n-      #9; \/\/ name_index       : getX\n-      #10; \/\/ descriptor_index : ()I\n-      [1] { \/\/ Attributes\n-        Attr(#11, 29) { \/\/ Code at 0xC4\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB40003AC;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#12, 6) { \/\/ LineNumberTable at 0xDB\n-              [1] { \/\/ line_number_table\n-                0  13; \/\/  at 0xE7\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0xE7\n-      0x0009; \/\/ access\n-      #13; \/\/ name_index       : <vnew>\n-      #14; \/\/ descriptor_index : (Z)QwithfieldPrimitive;\n-      [1] { \/\/ Attributes\n-        Attr(#11, 84) { \/\/ Code at 0xEF  \/\/ !!! Change 83 -> 84\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[29]{             \/\/ !!!! Change 28 -> 29\n-            0xCB00014C1A99000D;\n-            0x082B5FCC00034CA7;\n-            0x000C10062B5FB500;  \/\/ !!!! Change goto target B -> C and 0xCC (withfield) to 0xB5 (putfield)\n-            0x032B4C2BB0;        \/\/ !!!! Inserted 0x2B (aload_1)\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [2] { \/\/ Attributes\n-            Attr(#12, 22) { \/\/ LineNumberTable at 0x011D\n-              [5] { \/\/ line_number_table\n-                0  4; \/\/  at 0x0129\n-                4  5; \/\/  at 0x012D\n-                8  6; \/\/  at 0x0131\n-                18  8; \/\/  at 0x0135\n-                26  10; \/\/  at 0x0139\n-              }\n-            } \/\/ end LineNumberTable\n-            ;\n-            Attr(#15, 9) { \/\/ StackMapTable at 0x0139\n-              [2] { \/\/\n-                252b, 18, [1]z{7b,16}; \/\/ append_frame 1\n-                8b; \/\/ same_frame    \/\/ !!!! change 7 -> 8\n-              }\n-            } \/\/ end StackMapTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#18, 2) { \/\/ SourceFile at 0x014A\n-      #19;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class withfieldPrimitive\n-\n-\n-\n-\/* This jcod class is based on this Java code. To see what changed from the\n-   original jcod file search for !!!!.\n-public primitive final class withfieldNull {\n-    int x;\n-    public withfieldNull() {\n-        String s = null;\n-        x = 5;\n-    }\n-}\n-*\/\n-\/\/ This class tests a withfield bytecode with a stack operand that is null.\n-class withfieldNull {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [15] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"withfieldNull\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x19\n-    NameAndType #5 #6; \/\/ #4     at 0x1E\n-    Utf8 \"x\"; \/\/ #5     at 0x23\n-    Utf8 \"I\"; \/\/ #6     at 0x27\n-    class #8; \/\/ #7     at 0x2B\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8     at 0x2E\n-    Utf8 \"<vnew>\"; \/\/ #9     at 0x41\n-    Utf8 \"()QwithfieldNull;\"; \/\/ #10     at 0x4A\n-    Utf8 \"Code\"; \/\/ #11     at 0x5A\n-    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x61\n-    Utf8 \"SourceFile\"; \/\/ #13     at 0x73\n-    Utf8 \"withfieldNull.java\"; \/\/ #14     at 0x80\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0x9B\n-      0x0010; \/\/ access\n-      #5; \/\/ name_index       : x\n-      #6; \/\/ descriptor_index : I\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [1] { \/\/ Methods\n-    {  \/\/ method at 0xA5\n-      0x0009; \/\/ access\n-      #9; \/\/ name_index       : <vnew>\n-      #10; \/\/ descriptor_index : ()QwithfieldNull;\n-      [1] { \/\/ Attributes\n-        Attr(#11, 51) { \/\/ Code at 0xAD\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[15]{\n-            0xCB00014B014C0801; \/\/ !!!! Change 0x2A (aload_0) to 0x01 (aconst_null)\n-            0x5FCC00034B2AB0;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#12, 18) { \/\/ LineNumberTable at 0xCE\n-              [4] { \/\/ line_number_table\n-                0  4; \/\/  at 0xDA\n-                4  5; \/\/  at 0xDE\n-                6  6; \/\/  at 0xE2\n-                13  7; \/\/  at 0xE6\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#13, 2) { \/\/ SourceFile at 0xE8\n-      #14;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class withfieldNull\n-\n-\n-\n-\/* Thexe jcod classes are based on this Java code. To see what changed from the\n-   original jcod file search for !!!!.\n-\n-public class WrongPrimWF {\n-\n-    public primitive final class Dot { }\n-\n-    public primitive final class Loc { }\n-\n-    public primitive final class Both {\n-        Dot dot;\n-        Loc loc;\n-        Both(Dot d, Loc l) {\n-            dot = d;   \/\/ this d is changed to l to cause the VerifyError\n-            loc = l;\n-        }\n-    }\n-\n-    public WrongPrimWF() {\n-        Both b = new Both(new Dot(), new Loc());\n-    }\n-}\n-\n-*\/\n-\n-\/\/ Test that a withfield opcode, whose stack operand 'Loc' is a different primitive type\n-\/\/ than the primitive class in its constant pool field_res,f causes a VerifyError exception.\n-class WrongPrimWF$Dot {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [20] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"WrongPrimWF$Dot\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x1F\n-    NameAndType #5 #6; \/\/ #4     at 0x24\n-    Utf8 \"this$0\"; \/\/ #5     at 0x29\n-    Utf8 \"LWrongPrimWF;\"; \/\/ #6     at 0x32\n-    class #8; \/\/ #7     at 0x42\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8     at 0x45\n-    Utf8 \"<vnew>\"; \/\/ #9     at 0x58\n-    Utf8 \"(LWrongPrimWF;)QWrongPrimWF$Dot;\"; \/\/ #10     at 0x61\n-    Utf8 \"Code\"; \/\/ #11     at 0x84\n-    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x8B\n-    Utf8 \"SourceFile\"; \/\/ #13     at 0x9D\n-    Utf8 \"WrongPrimWF.java\"; \/\/ #14     at 0xAA\n-    Utf8 \"NestHost\"; \/\/ #15     at 0xBD\n-    class #17; \/\/ #16     at 0xC8\n-    Utf8 \"WrongPrimWF\"; \/\/ #17     at 0xCB\n-    Utf8 \"InnerClasses\"; \/\/ #18     at 0xD9\n-    Utf8 \"Dot\"; \/\/ #19     at 0xE8\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0xF8\n-      0x1010; \/\/ access\n-      #5; \/\/ name_index       : this$0\n-      #6; \/\/ descriptor_index : LWrongPrimWF;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [1] { \/\/ Methods\n-    {  \/\/ method at 0x0102\n-      0x0009; \/\/ access\n-      #9; \/\/ name_index       : <vnew>\n-      #10; \/\/ descriptor_index : (LWrongPrimWF;)QWrongPrimWF$Dot;\n-      [1] { \/\/ Attributes\n-        Attr(#11, 37) { \/\/ Code at 0x010A\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[13]{\n-            0xCB00014C2A2B5FCC;\n-            0x00034C2BB0;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#12, 6) { \/\/ LineNumberTable at 0x0129\n-              [1] { \/\/ line_number_table\n-                0  3; \/\/  at 0x0135\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#13, 2) { \/\/ SourceFile at 0x0137\n-      #14;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#15, 2) { \/\/ NestHost at 0x013F\n-      #16; \/\/ WrongPrimWF at 0x0147\n-    } \/\/ end NestHost\n-    ;\n-    Attr(#18, 10) { \/\/ InnerClasses at 0x0147\n-      [1] { \/\/ classes\n-        #1 #16 #19 273; \/\/  at 0x0157\n-      }\n-    } \/\/ end InnerClasses\n-  } \/\/ Attributes\n-} \/\/ end class WrongPrimWF$Dot\n-\n-\n-class WrongPrimWF$Loc {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [20] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"WrongPrimWF$Loc\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x1F\n-    NameAndType #5 #6; \/\/ #4     at 0x24\n-    Utf8 \"this$0\"; \/\/ #5     at 0x29\n-    Utf8 \"LWrongPrimWF;\"; \/\/ #6     at 0x32\n-    class #8; \/\/ #7     at 0x42\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8     at 0x45\n-    Utf8 \"<vnew>\"; \/\/ #9     at 0x58\n-    Utf8 \"(LWrongPrimWF;)QWrongPrimWF$Loc;\"; \/\/ #10     at 0x61\n-    Utf8 \"Code\"; \/\/ #11     at 0x84\n-    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x8B\n-    Utf8 \"SourceFile\"; \/\/ #13     at 0x9D\n-    Utf8 \"WrongPrimWF.java\"; \/\/ #14     at 0xAA\n-    Utf8 \"NestHost\"; \/\/ #15     at 0xBD\n-    class #17; \/\/ #16     at 0xC8\n-    Utf8 \"WrongPrimWF\"; \/\/ #17     at 0xCB\n-    Utf8 \"InnerClasses\"; \/\/ #18     at 0xD9\n-    Utf8 \"Loc\"; \/\/ #19     at 0xE8\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [1] { \/\/ Fields\n-    {  \/\/ field at 0xF8\n-      0x1010; \/\/ access\n-      #5; \/\/ name_index       : this$0\n-      #6; \/\/ descriptor_index : LWrongPrimWF;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [1] { \/\/ Methods\n-    {  \/\/ method at 0x0102\n-      0x0009; \/\/ access\n-      #9; \/\/ name_index       : <vnew>\n-      #10; \/\/ descriptor_index : (LWrongPrimWF;)QWrongPrimWF$Loc;\n-      [1] { \/\/ Attributes\n-        Attr(#11, 37) { \/\/ Code at 0x010A\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[13]{\n-            0xCB00014C2A2B5FCC;\n-            0x00034C2BB0;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#12, 6) { \/\/ LineNumberTable at 0x0129\n-              [1] { \/\/ line_number_table\n-                0  5; \/\/  at 0x0135\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#13, 2) { \/\/ SourceFile at 0x0137\n-      #14;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#15, 2) { \/\/ NestHost at 0x013F\n-      #16; \/\/ WrongPrimWF at 0x0147\n-    } \/\/ end NestHost\n-    ;\n-    Attr(#18, 10) { \/\/ InnerClasses at 0x0147\n-      [1] { \/\/ classes\n-        #1 #16 #19 273; \/\/  at 0x0157\n-      }\n-    } \/\/ end InnerClasses\n-  } \/\/ Attributes\n-} \/\/ end class WrongPrimWF$Loc\n-\n-\n-class WrongPrimWF$Both {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [34] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"WrongPrimWF$Both\"; \/\/ #2     at 0x0D\n-    Field #1 #4; \/\/ #3     at 0x20\n-    NameAndType #5 #6; \/\/ #4     at 0x25\n-    Utf8 \"this$0\"; \/\/ #5     at 0x2A\n-    Utf8 \"LWrongPrimWF;\"; \/\/ #6     at 0x33\n-    Field #1 #8; \/\/ #7     at 0x43\n-    NameAndType #9 #10; \/\/ #8     at 0x48\n-    Utf8 \"dot\"; \/\/ #9     at 0x4D\n-    Utf8 \"QWrongPrimWF$Dot;\"; \/\/ #10     at 0x53\n-    Field #1 #12; \/\/ #11     at 0x67\n-    NameAndType #13 #14; \/\/ #12     at 0x6C\n-    Utf8 \"loc\"; \/\/ #13     at 0x71\n-    Utf8 \"QWrongPrimWF$Loc;\"; \/\/ #14     at 0x77\n-    class #16; \/\/ #15     at 0x8B\n-    Utf8 \"java\/lang\/Object\"; \/\/ #16     at 0x8E\n-    Utf8 \"<vnew>\"; \/\/ #17     at 0xA1\n-    Utf8 \"(LWrongPrimWF;QWrongPrimWF$Dot;QWrongPrimWF$Loc;)QWrongPrimWF$Both;\"; \/\/ #18     at 0xAA\n-    Utf8 \"Code\"; \/\/ #19     at 0xF0\n-    Utf8 \"LineNumberTable\"; \/\/ #20     at 0xF7\n-    Utf8 \"SourceFile\"; \/\/ #21     at 0x0109\n-    Utf8 \"WrongPrimWF.java\"; \/\/ #22     at 0x0116\n-    Utf8 \"NestHost\"; \/\/ #23     at 0x0129\n-    class #25; \/\/ #24     at 0x0134\n-    Utf8 \"WrongPrimWF\"; \/\/ #25     at 0x0137\n-    Utf8 \"InnerClasses\"; \/\/ #26     at 0x0145\n-    Utf8 \"Both\"; \/\/ #27     at 0x0154\n-    class #29; \/\/ #28     at 0x015B\n-    Utf8 \"WrongPrimWF$Dot\"; \/\/ #29     at 0x015E\n-    Utf8 \"Dot\"; \/\/ #30     at 0x0170\n-    class #32; \/\/ #31     at 0x0176\n-    Utf8 \"WrongPrimWF$Loc\"; \/\/ #32     at 0x0179\n-    Utf8 \"Loc\"; \/\/ #33     at 0x018B\n-  } \/\/ Constant Pool\n-\n-  0x0851; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_FINAL ACC_PUBLIC ]\n-  #1;\/\/ this_cpx\n-  #15;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [3] { \/\/ Fields\n-    {  \/\/ field at 0x019B\n-      0x0010; \/\/ access\n-      #9; \/\/ name_index       : dot\n-      #10; \/\/ descriptor_index : QWrongPrimWF$Dot;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ field at 0x01A3\n-      0x0010; \/\/ access\n-      #13; \/\/ name_index       : loc\n-      #14; \/\/ descriptor_index : QWrongPrimWF$Loc;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ field at 0x01AB\n-      0x1010; \/\/ access\n-      #5; \/\/ name_index       : this$0\n-      #6; \/\/ descriptor_index : LWrongPrimWF;\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [1] { \/\/ Methods\n-    {  \/\/ method at 0x01B5\n-      0x0008; \/\/ access\n-      #17; \/\/ name_index       : <vnew>\n-      #18; \/\/ descriptor_index : (LWrongPrimWF;QWrongPrimWF$Dot;QWrongPrimWF$Loc;)QWrongPrimWF$Both;\n-      [1] { \/\/ Attributes\n-        Attr(#19, 63) { \/\/ Code at 0x01BD\n-          2; \/\/ max_stack\n-          4; \/\/ max_locals\n-          Bytes[27]{\n-            0xCB00014E2A2D5FCC;\n-            0x00034E2C2D5FCC00; \/\/ !!!! change 2B (aload_1) to 2C (aload_2) to put Loc on the stack.\n-            0x074E2C2D5FCC000B; \/\/      this should cause a VerifyError because withfield is assigning\n-            0x4E2DB0;           \/\/      to a field of type Dot.\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 18) { \/\/ LineNumberTable at 0x01EA\n-              [4] { \/\/ line_number_table\n-                0  10; \/\/  at 0x01F6\n-                11  11; \/\/  at 0x01FA\n-                18  12; \/\/  at 0x01FE\n-                25  13; \/\/  at 0x0202\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#21, 2) { \/\/ SourceFile at 0x0204\n-      #22;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#23, 2) { \/\/ NestHost at 0x020C\n-      #24; \/\/ WrongPrimWF at 0x0214\n-    } \/\/ end NestHost\n-    ;\n-    Attr(#26, 26) { \/\/ InnerClasses at 0x0214\n-      [3] { \/\/ classes\n-        #1 #24 #27 273; \/\/  at 0x0224\n-        #28 #24 #30 273; \/\/  at 0x022C\n-        #31 #24 #33 273; \/\/  at 0x0234\n-      }\n-    } \/\/ end InnerClasses\n-  } \/\/ Attributes\n-} \/\/ end class WrongPrimWF$Both\n-\n-\n-class WrongPrimWF {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  66; \/\/ version\n-  [34] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    Method #8 #9; \/\/ #7     at 0x39\n-    class #10; \/\/ #8     at 0x3E\n-    NameAndType #33 #11; \/\/ #9     at 0x41\n-    Utf8 \"WrongPrimWF$Dot\"; \/\/ #10     at 0x46\n-    Utf8 \"(LWrongPrimWF;)QWrongPrimWF$Dot;\"; \/\/ #11     at 0x58\n-    Method #13 #14; \/\/ #12     at 0x7B\n-    class #15; \/\/ #13     at 0x80\n-    NameAndType #33 #16; \/\/ #14     at 0x83\n-    Utf8 \"WrongPrimWF$Loc\"; \/\/ #15     at 0x88\n-    Utf8 \"(LWrongPrimWF;)QWrongPrimWF$Loc;\"; \/\/ #16     at 0x9A\n-    Method #18 #19; \/\/ #17     at 0xBD\n-    class #20; \/\/ #18     at 0xC2\n-    NameAndType #33 #21; \/\/ #19     at 0xC5\n-    Utf8 \"WrongPrimWF$Both\"; \/\/ #20     at 0xCA\n-    Utf8 \"(LWrongPrimWF;QWrongPrimWF$Dot;QWrongPrimWF$Loc;)QWrongPrimWF$Both;\"; \/\/ #21     at 0xDD\n-    class #23; \/\/ #22     at 0x0123\n-    Utf8 \"WrongPrimWF\"; \/\/ #23     at 0x0126\n-    Utf8 \"Code\"; \/\/ #24     at 0x0134\n-    Utf8 \"LineNumberTable\"; \/\/ #25     at 0x013B\n-    Utf8 \"SourceFile\"; \/\/ #26     at 0x014D\n-    Utf8 \"WrongPrimWF.java\"; \/\/ #27     at 0x015A\n-    Utf8 \"NestMembers\"; \/\/ #28     at 0x016D\n-    Utf8 \"InnerClasses\"; \/\/ #29     at 0x017B\n-    Utf8 \"Dot\"; \/\/ #30     at 0x018A\n-    Utf8 \"Loc\"; \/\/ #31     at 0x0190\n-    Utf8 \"Both\"; \/\/ #32     at 0x0196\n-    Utf8 \"<vnew>\"; \/\/ #33\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n-  #22;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [0] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [1] { \/\/ Methods\n-    {  \/\/ method at 0x01A9\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#24, 50) { \/\/ Code at 0x01B1\n-          3; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[18]{\n-            0x2AB700012A2AB800;\n-            0x072AB8000CB80011;\n-            0x4CB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#25, 14) { \/\/ LineNumberTable at 0x01D5\n-              [3] { \/\/ line_number_table\n-                0  16; \/\/  at 0x01E1\n-                4  17; \/\/  at 0x01E5\n-                17  18; \/\/  at 0x01E9\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#26, 2) { \/\/ SourceFile at 0x01EB\n-      #27;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#28, 8) { \/\/ NestMembers at 0x01F3\n-      [3] { \/\/ classes\n-        #18; \/\/ WrongPrimWF$Both at 0x01FD\n-        #13; \/\/ WrongPrimWF$Loc at 0x01FF\n-        #8; \/\/ WrongPrimWF$Dot at 0x0201\n-      }\n-    } \/\/ end NestMembers\n-    ;\n-    Attr(#29, 26) { \/\/ InnerClasses at 0x0201\n-      [3] { \/\/ classes\n-        #8 #22 #30 273; \/\/  at 0x0211\n-        #13 #22 #31 273; \/\/  at 0x0219\n-        #18 #22 #32 273; \/\/  at 0x0221\n-      }\n-    } \/\/ end InnerClasses\n-  } \/\/ Attributes\n-} \/\/ end class WrongPrimWF\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/withfieldTests.jcod","additions":0,"deletions":1121,"binary":false,"changes":1121,"status":"deleted"},{"patch":"@@ -25,0 +25,1 @@\n+ * @ignore Fix JDK-8328461\n@@ -29,0 +30,1 @@\n+ * @enablePreview\n@@ -30,1 +32,1 @@\n- * @run main\/othervm\/native -agentlib:FieldAccessModify -XX:+EnableValhalla -XX:+EnablePrimitiveClasses FieldAccessModify\n+ * @run main\/othervm\/native -agentlib:FieldAccessModify FieldAccessModify\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/FieldAccessModify\/FieldAccessModify.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+ * @ignore Fix JDK-8328468\n@@ -29,0 +30,1 @@\n+ * @enablePreview\n@@ -30,1 +32,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses HeapDump\n+ * @run main\/othervm HeapDump\n@@ -164,1 +166,1 @@\n-            LingeredApp.startApp(theApp, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\"\/*, \"-XX:+PrintInlineLayout\"*\/);\n+            LingeredApp.startApp(theApp, \"--enable-preview\"\/*, \"-XX:+PrintInlineLayout\"*\/);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/HeapDump\/HeapDump.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla BasicRecordSer\n+ * @run testng\/othervm --enable-preview BasicRecordSer\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BasicRecordSer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla RecordClassTest\n+ * @run testng\/othervm --enable-preview RecordClassTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/RecordClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -28,1 +29,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueSerialization\n+ * @run testng\/othervm ValueSerialization\n@@ -100,9 +101,0 @@\n-    \/** A Serializable primitive class Point *\/\n-    static primitive class SerializablePrimitivePoint implements Serializable {\n-        public int x;\n-        public int y;\n-        SerializablePrimitivePoint(int x, int y) { this.x = x; this.y = y; }\n-        @Override public String toString() {\n-            return \"[SerializablePrimitivePoint x=\" + x + \" y=\" + y + \"]\"; }\n-    }\n-\n@@ -129,8 +121,1 @@\n-                    new SerializablePoint(4, 8) } },\n-            new Object[] { new SerializablePrimitivePoint(711, 7101) },\n-            new Object[] { new SerializablePrimitivePoint[] {\n-                    new SerializablePrimitivePoint(71, 75),\n-                    new SerializablePrimitivePoint(72, 76) } },\n-            new Object[] { new Object[] {\n-                    new SerializablePrimitivePoint(73, 77),\n-                    new SerializablePrimitivePoint(74, 78) } },\n+                    new SerializablePoint(4, 8) } }\n@@ -250,2 +235,1 @@\n-            new Object[] { SerializablePoint.class },\n-            new Object[] { SerializablePrimitivePoint.class }\n+            new Object[] { SerializablePoint.class }\n","filename":"test\/jdk\/java\/io\/Serializable\/valueObjects\/ValueSerialization.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,1 +31,1 @@\n- * @run main\/othervm -XX:+EnableValhalla GenericStringTest\n+ * @run main\/othervm GenericStringTest\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla IsRecordTest\n+ * @run testng\/othervm --enable-preview IsRecordTest\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/IsRecordTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm -XX:+EnableValhalla RecordReflectionTest\n+ * @run testng\/othervm --enable-preview RecordReflectionTest\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/RecordReflectionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,3 @@\n- * @run junit\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=-1 ArrayElementVarHandleTest\n- * @run junit\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n+ * @enablePreview\n+ * @run junit\/othervm -XX:FlatArrayElementMaxSize=-1 ArrayElementVarHandleTest\n+ * @run junit\/othervm -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla LambdaConversion\n+ * @enablePreview\n+ * @run junit\/othervm LambdaConversion\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaConversion.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla LambdaTest\n+ * @enablePreview\n+ * @run junit\/othervm LambdaTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,3 @@\n- * @run junit\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n- * @run junit\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n+ * @enablePreview\n+ * @run junit\/othervm -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n+ * @run junit\/othervm -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla MethodHandleTest\n+ * @enablePreview\n+ * @run junit\/othervm MethodHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run main\/othervm -XX:+EnableValhalla MethodReference\n+ * @enablePreview\n+ * @run main\/othervm MethodReference\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodReference.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla Nest\n+ * @enablePreview\n+ * @run junit\/othervm Nest\n","filename":"test\/jdk\/valhalla\/valuetypes\/Nest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,3 @@\n- * @run junit\/othervm -XX:+EnableValhalla NullRestrictedTest\n- * @run junit\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=0 NullRestrictedTest\n+ * @enablePreview\n+ * @run junit\/othervm NullRestrictedTest\n+ * @run junit\/othervm -XX:InlineFieldMaxFlatSize=0 NullRestrictedTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @run junit\/othervm -XX:+EnableValhalla -Dvalue.bsm.salt=1 ObjectMethods\n- * @run junit\/othervm -XX:+EnableValhalla -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods\n+ * @enablePreview\n+ * @run junit\/othervm -Dvalue.bsm.salt=1 ObjectMethods\n+ * @run junit\/othervm -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n- * @run testng\/othervm -XX:+EnableValhalla ObjectMethodsViaCondy\n+ * @enablePreview\n+ * @run testng\/othervm ObjectMethodsViaCondy\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run testng\/othervm -XX:+EnableValhalla ObjectNewInstance\n+ * @enablePreview\n+ * @run testng\/othervm ObjectNewInstance\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectNewInstance.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run testng\/othervm -XX:+EnableValhalla ProxyTest\n+ * @enablePreview\n+ * @run testng\/othervm ProxyTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/ProxyTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla Reflection\n+ * @enablePreview\n+ * @run junit\/othervm Reflection\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla StreamTest\n+ * @enablePreview\n+ * @run junit\/othervm StreamTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/StreamTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla SubstitutabilityTest\n+ * @enablePreview\n+ * @run junit\/othervm SubstitutabilityTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-     * Verify that the class is a value class if --enable-preview and -XX:+EnableValhallait true\n+     * Verify that the class is a value class if --enable-preview true\n","filename":"test\/jdk\/valhalla\/valuetypes\/UseValueClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n- * @run junit\/othervm -XX:+EnableValhalla -Dexpected=true ValhallaFeaturesTest\n- * @run junit\/othervm -XX:-EnableValhalla -Dexpected=false ValhallaFeaturesTest\n+ * @run junit\/othervm --enable-preview -Dexpected=true ValhallaFeaturesTest\n@@ -48,2 +47,2 @@\n-        System.out.println(\"EnableValhalla: \" + enabled);\n-        assertEquals(\"EnableValhalla Flag\", expected, enabled);\n+        System.out.println(\"ValhallaFeatures.isEnabled(): \" + enabled);\n+        assertEquals(\"ValhallaFeatures.isEnabled() Flag\", expected, enabled);\n@@ -58,1 +57,1 @@\n-            assertThrows(\"EnableValhalla Flag\", UnsupportedOperationException.class,\n+            assertThrows(\"ValhallaFeatures.ensureValhallaEnabled() Flag\", UnsupportedOperationException.class,\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValhallaFeaturesTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run junit\/othervm -XX:+EnableValhalla ValueConstantDesc\n+ * @enablePreview\n+ * @run junit\/othervm ValueConstantDesc\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,2 @@\n- * @run testng\/othervm -XX:+EnableValhalla WeakReferenceTest\n+ * @enablePreview\n+ * @run testng\/othervm WeakReferenceTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakReferenceTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8207341\n- * @summary Test value constructor code with side effects.\n- * @compile SideEffectTest.java\n- * @run main\/othervm -XX:+EnablePrimitiveClasses SideEffectTest\n- * @ignore\n- *\/\n-\n-\n-public class SideEffectTest {\n-\n-    static primitive class V {\n-\n-        static String output = \"\";\n-\n-        int x;\n-\n-        V() {\n-            foo(x = 1234);\n-        }\n-\n-        V(int x) {\n-            int l = 1234;\n-            foo(l += this.x = x);\n-        }\n-\n-        static void foo(int x) {\n-            output += x;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        V v = new V();\n-        if (!v.output.equals(\"1234\"))\n-            throw new AssertionError(\"Broken\");\n-        if (v.x != 1234)\n-            throw new AssertionError(\"Broken\");\n-        v = new V(8765);\n-        if (!v.output.equals(\"12349999\"))\n-            throw new AssertionError(\"Broken\");\n-        if (v.x != 8765)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SideEffectTest.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n- * @summary javac should generate BSM to invoke the static factory for value class\n+ * @summary javac should generate BSM to invoke constructor for value class\n+ * @enablePreview\n@@ -31,2 +32,1 @@\n- * @run main\/othervm -XX:+EnablePrimitiveClasses ConstructorRefTest\n- * @ignore Verifier error\n+ * @run main\/othervm ConstructorRefTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstructorRefTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                       \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\"})\n+                       \"--enable-preview\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/intrinsics\/IsFlattenedArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}