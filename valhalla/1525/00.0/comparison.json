{"files":[{"patch":"@@ -117,0 +117,1 @@\n+    EXCLUDE_PATTERNS := -files, \\\n","filename":"make\/CompileJavaModules.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    -serialwarn -encoding ISO-8859-1 -docencoding UTF-8 -breakiterator \\\n+    -serialwarn -encoding utf-8 -docencoding utf-8 -breakiterator \\\n@@ -108,1 +108,1 @@\n-    -serialwarn -encoding ISO-8859-1 -breakiterator -splitIndex --system none \\\n+    -serialwarn -encoding utf-8 -breakiterator -splitIndex --system none \\\n@@ -267,1 +267,1 @@\n-\t$$(ECHO) -n '$$($1_OVERVIEW_TEXT)' > $$@\n+\t$$(PRINTF) \"%s\" '$$($1_OVERVIEW_TEXT)' > $$@\n","filename":"make\/Docs.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-\t    ( $(ECHO) -n \"DEPS_$(call GetModuleNameFromModuleInfo, $m) := \" && \\\n+\t    ( $(PRINTF) \"DEPS_%s := \" \"$(call GetModuleNameFromModuleInfo, $m)\" && \\\n@@ -213,1 +213,1 @@\n-\t      $(ECHO) -n \"TRANSITIVE_MODULES_$(call GetModuleNameFromModuleInfo, $m) := \" && \\\n+\t      $(PRINTF) \"TRANSITIVE_MODULES_%s := \" \"$(call GetModuleNameFromModuleInfo, $m)\" && \\\n","filename":"make\/common\/Modules.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -865,1 +865,2 @@\n-                \"--disable-precompiled-headers\");\n+                \"--disable-precompiled-headers\",\n+                \"--with-source-date=version\");\n@@ -1154,4 +1155,1 @@\n-            revision: devkit_platform_revisions[devkit_platform],\n-            environment: {\n-                \"DEVKIT_HOME\": input.get(\"devkit\", \"home_path\"),\n-            }\n+            revision: devkit_platform_revisions[devkit_platform]\n","filename":"make\/conf\/jib-profiles.js","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n@@ -104,3 +107,0 @@\n-import com.sun.tools.javac.jvm.Target;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.javac.util.Pair;\n@@ -347,1 +347,2 @@\n-    private ZipEntry createZipEntry(String name, long timestamp) {\n+    private ZipEntry createZipEntry(String name, long timeMillisSinceEpoch) {\n+        Instant time = Instant.ofEpochMilli(timeMillisSinceEpoch);\n@@ -349,2 +350,1 @@\n-\n-        ze.setTime(timestamp);\n+        ze.setTimeLocal(LocalDateTime.ofInstant(time, ZoneOffset.UTC));\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3389,1 +3389,1 @@\n-    if (uabs(imm) < (1 << 24)) {\n+    if (g_uabs(imm) < (1 << 24)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1181,1 +1181,1 @@\n-    size_t granularity = uabs(step);\n+    size_t granularity = g_uabs(step);\n@@ -1240,1 +1240,1 @@\n-    unsigned int granularity = uabs(step);\n+    unsigned int granularity = g_uabs(step);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-    z_lg(Rmonitors, _z_ijava_state_neg(monitors), Z_fp);\n+    get_monitors(Rmonitors);\n@@ -679,0 +679,7 @@\n+#ifdef ASSERT\n+  NearLabel ok;\n+  z_cg(Z_fp, 0, Z_SP);\n+  z_bre(ok);\n+  stop(\"Z_fp is corrupted\");\n+  bind(ok);\n+#endif \/\/ ASSERT\n@@ -680,0 +687,2 @@\n+  z_slag(reg, reg, Interpreter::logStackElementSize);\n+  z_agr(reg, Z_fp);\n@@ -683,0 +692,9 @@\n+#ifdef ASSERT\n+  NearLabel ok;\n+  z_cg(Z_fp, 0, Z_SP);\n+  z_bre(ok);\n+  stop(\"Z_fp is corrupted\");\n+  bind(ok);\n+#endif \/\/ ASSERT\n+  z_sgr(reg, Z_fp);\n+  z_srag(reg, reg, Interpreter::logStackElementSize);\n@@ -843,1 +861,0 @@\n-    const Address monitor_block_top(Z_fp, _z_ijava_state_neg(monitors));\n@@ -848,1 +865,1 @@\n-    z_lg(R_current_monitor, monitor_block_top);\n+    get_monitors(R_current_monitor);\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -66,0 +66,5 @@\n+int VM_Version::VM_Features::_features_bitmap_size = sizeof(VM_Version::VM_Features::_features_bitmap) \/ BytesPerLong;\n+\n+VM_Version::VM_Features VM_Version::_features;\n+VM_Version::VM_Features VM_Version::_cpu_features;\n+\n@@ -85,1 +90,1 @@\n-  assert ((!Universe::is_fully_initialized() || (_features & CPU_FLUSH) != 0), \"clflush should be available\");\n+  assert ((!Universe::is_fully_initialized() || _features.supports_feature(CPU_FLUSH)), \"clflush should be available\");\n@@ -136,1 +141,1 @@\n-    Label detect_486, cpu486, detect_586, std_cpuid1, std_cpuid4;\n+    Label detect_486, cpu486, detect_586, std_cpuid1, std_cpuid4, std_cpuid24;\n@@ -335,0 +340,11 @@\n+    \/\/\n+    \/\/ cpuid(0x24) Converged Vector ISA Main Leaf (EAX = 24H, ECX = 0).\n+    \/\/\n+    __ bind(std_cpuid24);\n+    __ movl(rax, 0x24);\n+    __ movl(rcx, 0);\n+    __ cpuid();\n+    __ lea(rsi, Address(rbp, in_bytes(VM_Version::std_cpuid24_offset())));\n+    __ movl(Address(rsi, 0), rax);\n+    __ movl(Address(rsi, 4), rbx);\n+\n@@ -421,2 +437,1 @@\n-    __ cmpl(rax, 0x200000);\n-    __ jcc(Assembler::notEqual, vector_save_restore);\n+    __ jcc(Assembler::equal, vector_save_restore);\n@@ -426,2 +441,1 @@\n-    __ cmpl(rax, 0x80000);\n-    __ jcc(Assembler::notEqual, vector_save_restore);\n+    __ jcc(Assembler::equal, vector_save_restore);\n@@ -480,0 +494,1 @@\n+      \/\/ OR check _cpuid_info.sefsl1_cpuid7_edx.bits.avx10\n@@ -482,3 +497,6 @@\n-      __ andl(rax, Address(rsi, 4)); \/\/ xcr0 bits sse | ymm\n-      __ cmpl(rax, 0x10000);\n-      __ jccb(Assembler::notEqual, legacy_setup); \/\/ jump if EVEX is not supported\n+      __ andl(rax, Address(rsi, 4));\n+      __ lea(rsi, Address(rbp, in_bytes(VM_Version::sefsl1_cpuid7_offset())));\n+      __ movl(rbx, 0x80000);\n+      __ andl(rbx, Address(rsi, 4));\n+      __ orl(rax, rbx);\n+      __ jccb(Assembler::equal, legacy_setup); \/\/ jump if EVEX is not supported\n@@ -565,2 +583,1 @@\n-      __ cmpl(rax, 0x10000);\n-      __ jcc(Assembler::notEqual, legacy_save_restore);\n+      __ jcc(Assembler::equal, legacy_save_restore);\n@@ -838,1 +855,0 @@\n-  _features = 0;\n@@ -854,1 +870,1 @@\n-    _cpu_features = _features;   \/\/ Preserve features\n+    _cpu_features = _features; \/\/ Preserve features\n@@ -903,2 +919,2 @@\n-    _features &= ~CPU_SSE4_1;\n-    _features &= ~CPU_SSE4_2;\n+    _features.clear_feature(CPU_SSE4_1);\n+    _features.clear_feature(CPU_SSE4_2);\n@@ -908,3 +924,3 @@\n-    _features &= ~CPU_SSE3;\n-    _features &= ~CPU_SSSE3;\n-    _features &= ~CPU_SSE4A;\n+    _features.clear_feature(CPU_SSE3);\n+    _features.clear_feature(CPU_SSSE3);\n+    _features.clear_feature(CPU_SSE4A);\n@@ -914,1 +930,1 @@\n-    _features &= ~CPU_SSE2;\n+    _features.clear_feature(CPU_SSE2);\n@@ -917,1 +933,1 @@\n-    _features &= ~CPU_SSE;\n+    _features.clear_feature(CPU_SSE);\n@@ -983,15 +999,19 @@\n-    _features &= ~CPU_AVX512F;\n-    _features &= ~CPU_AVX512DQ;\n-    _features &= ~CPU_AVX512CD;\n-    _features &= ~CPU_AVX512BW;\n-    _features &= ~CPU_AVX512VL;\n-    _features &= ~CPU_AVX512_VPOPCNTDQ;\n-    _features &= ~CPU_AVX512_VPCLMULQDQ;\n-    _features &= ~CPU_AVX512_VAES;\n-    _features &= ~CPU_AVX512_VNNI;\n-    _features &= ~CPU_AVX512_VBMI;\n-    _features &= ~CPU_AVX512_VBMI2;\n-    _features &= ~CPU_AVX512_BITALG;\n-    _features &= ~CPU_AVX512_IFMA;\n-    _features &= ~CPU_APX_F;\n-    _features &= ~CPU_AVX512_FP16;\n+    _features.clear_feature(CPU_AVX512F);\n+    _features.clear_feature(CPU_AVX512DQ);\n+    _features.clear_feature(CPU_AVX512CD);\n+    _features.clear_feature(CPU_AVX512BW);\n+    _features.clear_feature(CPU_AVX512ER);\n+    _features.clear_feature(CPU_AVX512PF);\n+    _features.clear_feature(CPU_AVX512VL);\n+    _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+    _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+    _features.clear_feature(CPU_AVX512_VAES);\n+    _features.clear_feature(CPU_AVX512_VNNI);\n+    _features.clear_feature(CPU_AVX512_VBMI);\n+    _features.clear_feature(CPU_AVX512_VBMI2);\n+    _features.clear_feature(CPU_AVX512_BITALG);\n+    _features.clear_feature(CPU_AVX512_IFMA);\n+    _features.clear_feature(CPU_APX_F);\n+    _features.clear_feature(CPU_AVX512_FP16);\n+    _features.clear_feature(CPU_AVX10_1);\n+    _features.clear_feature(CPU_AVX10_2);\n@@ -1010,1 +1030,1 @@\n-    _features &= ~CPU_APX_F;\n+    _features.clear_feature(CPU_APX_F);\n@@ -1014,2 +1034,2 @@\n-    _features &= ~CPU_AVX2;\n-    _features &= ~CPU_AVX_IFMA;\n+    _features.clear_feature(CPU_AVX2);\n+    _features.clear_feature(CPU_AVX_IFMA);\n@@ -1019,4 +1039,4 @@\n-    _features &= ~CPU_AVX;\n-    _features &= ~CPU_VZEROUPPER;\n-    _features &= ~CPU_F16C;\n-    _features &= ~CPU_SHA512;\n+    _features.clear_feature(CPU_AVX);\n+    _features.clear_feature(CPU_VZEROUPPER);\n+    _features.clear_feature(CPU_F16C);\n+    _features.clear_feature(CPU_SHA512);\n@@ -1027,1 +1047,1 @@\n-    _features &= ~CPU_HT;\n+    _features.clear_feature(CPU_HT);\n@@ -1032,17 +1052,19 @@\n-      _features &= ~CPU_VZEROUPPER;\n-      _features &= ~CPU_AVX512BW;\n-      _features &= ~CPU_AVX512VL;\n-      _features &= ~CPU_AVX512DQ;\n-      _features &= ~CPU_AVX512_VNNI;\n-      _features &= ~CPU_AVX512_VAES;\n-      _features &= ~CPU_AVX512_VPOPCNTDQ;\n-      _features &= ~CPU_AVX512_VPCLMULQDQ;\n-      _features &= ~CPU_AVX512_VBMI;\n-      _features &= ~CPU_AVX512_VBMI2;\n-      _features &= ~CPU_CLWB;\n-      _features &= ~CPU_FLUSHOPT;\n-      _features &= ~CPU_GFNI;\n-      _features &= ~CPU_AVX512_BITALG;\n-      _features &= ~CPU_AVX512_IFMA;\n-      _features &= ~CPU_AVX_IFMA;\n-      _features &= ~CPU_AVX512_FP16;\n+      _features.clear_feature(CPU_VZEROUPPER);\n+      _features.clear_feature(CPU_AVX512BW);\n+      _features.clear_feature(CPU_AVX512VL);\n+      _features.clear_feature(CPU_AVX512DQ);\n+      _features.clear_feature(CPU_AVX512_VNNI);\n+      _features.clear_feature(CPU_AVX512_VAES);\n+      _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+      _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+      _features.clear_feature(CPU_AVX512_VBMI);\n+      _features.clear_feature(CPU_AVX512_VBMI2);\n+      _features.clear_feature(CPU_CLWB);\n+      _features.clear_feature(CPU_FLUSHOPT);\n+      _features.clear_feature(CPU_GFNI);\n+      _features.clear_feature(CPU_AVX512_BITALG);\n+      _features.clear_feature(CPU_AVX512_IFMA);\n+      _features.clear_feature(CPU_AVX_IFMA);\n+      _features.clear_feature(CPU_AVX512_FP16);\n+      _features.clear_feature(CPU_AVX10_1);\n+      _features.clear_feature(CPU_AVX10_2);\n@@ -1058,1 +1080,0 @@\n-  assert(supports_cpuid(), \"Always present\");\n@@ -1082,2 +1103,2 @@\n-  char buf[1024];\n-  int cpu_info_size = jio_snprintf(\n+  char buf[2048];\n+  size_t cpu_info_size = jio_snprintf(\n@@ -1089,1 +1110,2 @@\n-  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size, _features_names);\n+\n+  insert_features_names(_features, buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n@@ -2091,0 +2113,1 @@\n+\n@@ -2866,2 +2889,2 @@\n-uint64_t VM_Version::CpuidInfo::feature_flags() const {\n-  uint64_t result = 0;\n+VM_Version::VM_Features VM_Version::CpuidInfo::feature_flags() const {\n+  VM_Features vm_features;\n@@ -2869,1 +2892,1 @@\n-    result |= CPU_CX8;\n+    vm_features.set_feature(CPU_CX8);\n@@ -2871,1 +2894,1 @@\n-    result |= CPU_CMOV;\n+    vm_features.set_feature(CPU_CMOV);\n@@ -2873,1 +2896,1 @@\n-    result |= CPU_FLUSH;\n+    vm_features.set_feature(CPU_FLUSH);\n@@ -2877,1 +2900,1 @@\n-  assert ((result & CPU_FLUSH) != 0, \"clflush should be available\");\n+  assert (vm_features.supports_feature(CPU_FLUSH), \"clflush should be available\");\n@@ -2880,1 +2903,1 @@\n-    result |= CPU_FXSR;\n+    vm_features.set_feature(CPU_FXSR);\n@@ -2883,1 +2906,1 @@\n-    result |= CPU_HT;\n+    vm_features.set_feature(CPU_HT);\n@@ -2886,1 +2909,1 @@\n-    result |= CPU_MMX;\n+    vm_features.set_feature(CPU_MMX);\n@@ -2888,1 +2911,1 @@\n-    result |= CPU_SSE;\n+    vm_features.set_feature(CPU_SSE);\n@@ -2890,1 +2913,1 @@\n-    result |= CPU_SSE2;\n+    vm_features.set_feature(CPU_SSE2);\n@@ -2892,1 +2915,1 @@\n-    result |= CPU_SSE3;\n+    vm_features.set_feature(CPU_SSE3);\n@@ -2894,1 +2917,1 @@\n-    result |= CPU_SSSE3;\n+    vm_features.set_feature(CPU_SSSE3);\n@@ -2896,1 +2919,1 @@\n-    result |= CPU_SSE4_1;\n+    vm_features.set_feature(CPU_SSE4_1);\n@@ -2898,1 +2921,1 @@\n-    result |= CPU_SSE4_2;\n+    vm_features.set_feature(CPU_SSE4_2);\n@@ -2900,1 +2923,1 @@\n-    result |= CPU_POPCNT;\n+    vm_features.set_feature(CPU_POPCNT);\n@@ -2903,1 +2926,1 @@\n-    result |= CPU_APX_F;\n+    vm_features.set_feature(CPU_APX_F);\n@@ -2909,2 +2932,2 @@\n-    result |= CPU_AVX;\n-    result |= CPU_VZEROUPPER;\n+    vm_features.set_feature(CPU_AVX);\n+    vm_features.set_feature(CPU_VZEROUPPER);\n@@ -2912,1 +2935,1 @@\n-      result |= CPU_SHA512;\n+      vm_features.set_feature(CPU_SHA512);\n@@ -2914,1 +2937,1 @@\n-      result |= CPU_F16C;\n+      vm_features.set_feature(CPU_F16C);\n@@ -2916,1 +2939,1 @@\n-      result |= CPU_AVX2;\n+      vm_features.set_feature(CPU_AVX2);\n@@ -2918,1 +2941,1 @@\n-        result |= CPU_AVX_IFMA;\n+        vm_features.set_feature(CPU_AVX_IFMA);\n@@ -2921,1 +2944,1 @@\n-        result |= CPU_GFNI;\n+        vm_features.set_feature(CPU_GFNI);\n@@ -2926,1 +2949,1 @@\n-      result |= CPU_AVX512F;\n+      vm_features.set_feature(CPU_AVX512F);\n@@ -2928,1 +2951,1 @@\n-        result |= CPU_AVX512CD;\n+        vm_features.set_feature(CPU_AVX512CD);\n@@ -2930,1 +2953,1 @@\n-        result |= CPU_AVX512DQ;\n+        vm_features.set_feature(CPU_AVX512DQ);\n@@ -2932,1 +2955,1 @@\n-        result |= CPU_AVX512_IFMA;\n+        vm_features.set_feature(CPU_AVX512_IFMA);\n@@ -2934,1 +2957,1 @@\n-        result |= CPU_AVX512PF;\n+        vm_features.set_feature(CPU_AVX512PF);\n@@ -2936,1 +2959,1 @@\n-        result |= CPU_AVX512ER;\n+        vm_features.set_feature(CPU_AVX512ER);\n@@ -2938,1 +2961,1 @@\n-        result |= CPU_AVX512BW;\n+        vm_features.set_feature(CPU_AVX512BW);\n@@ -2940,1 +2963,1 @@\n-        result |= CPU_AVX512VL;\n+        vm_features.set_feature(CPU_AVX512VL);\n@@ -2942,1 +2965,1 @@\n-        result |= CPU_AVX512_VPOPCNTDQ;\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n@@ -2944,1 +2967,1 @@\n-        result |= CPU_AVX512_VPCLMULQDQ;\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n@@ -2946,1 +2969,1 @@\n-        result |= CPU_AVX512_VAES;\n+        vm_features.set_feature(CPU_AVX512_VAES);\n@@ -2948,1 +2971,1 @@\n-        result |= CPU_AVX512_VNNI;\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n@@ -2950,1 +2973,1 @@\n-        result |= CPU_AVX512_BITALG;\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n@@ -2952,1 +2975,1 @@\n-        result |= CPU_AVX512_VBMI;\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n@@ -2954,1 +2977,28 @@\n-        result |= CPU_AVX512_VBMI2;\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n+    }\n+    if (is_intel()) {\n+      if (sefsl1_cpuid7_edx.bits.avx10 != 0 &&\n+          std_cpuid24_ebx.bits.avx10_vlen_512 !=0 &&\n+          std_cpuid24_ebx.bits.avx10_converged_isa_version >= 1 &&\n+          xem_xcr0_eax.bits.opmask != 0 &&\n+          xem_xcr0_eax.bits.zmm512 != 0 &&\n+          xem_xcr0_eax.bits.zmm32 != 0) {\n+        vm_features.set_feature(CPU_AVX10_1);\n+        vm_features.set_feature(CPU_AVX512F);\n+        vm_features.set_feature(CPU_AVX512CD);\n+        vm_features.set_feature(CPU_AVX512DQ);\n+        vm_features.set_feature(CPU_AVX512PF);\n+        vm_features.set_feature(CPU_AVX512ER);\n+        vm_features.set_feature(CPU_AVX512BW);\n+        vm_features.set_feature(CPU_AVX512VL);\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n+        vm_features.set_feature(CPU_AVX512_VAES);\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n+        if (std_cpuid24_ebx.bits.avx10_converged_isa_version >= 2) {\n+          vm_features.set_feature(CPU_AVX10_2);\n+        }\n+      }\n@@ -2957,0 +3007,1 @@\n+\n@@ -2958,1 +3009,1 @@\n-    result |= CPU_HV;\n+    vm_features.set_feature(CPU_HV);\n@@ -2960,1 +3011,1 @@\n-    result |= CPU_BMI1;\n+    vm_features.set_feature(CPU_BMI1);\n@@ -2962,1 +3013,1 @@\n-    result |= CPU_TSC;\n+    vm_features.set_feature(CPU_TSC);\n@@ -2964,1 +3015,1 @@\n-    result |= CPU_TSCINV_BIT;\n+    vm_features.set_feature(CPU_TSCINV_BIT);\n@@ -2966,1 +3017,1 @@\n-    result |= CPU_AES;\n+    vm_features.set_feature(CPU_AES);\n@@ -2968,1 +3019,1 @@\n-    result |= CPU_LZCNT;\n+    vm_features.set_feature(CPU_LZCNT);\n@@ -2970,1 +3021,1 @@\n-    result |= CPU_3DNOW_PREFETCH;\n+    vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -2972,1 +3023,1 @@\n-    result |= CPU_ERMS;\n+    vm_features.set_feature(CPU_ERMS);\n@@ -2974,1 +3025,1 @@\n-    result |= CPU_FSRM;\n+    vm_features.set_feature(CPU_FSRM);\n@@ -2976,1 +3027,1 @@\n-    result |= CPU_CLMUL;\n+    vm_features.set_feature(CPU_CLMUL);\n@@ -2978,1 +3029,1 @@\n-    result |= CPU_RTM;\n+    vm_features.set_feature(CPU_RTM);\n@@ -2980,1 +3031,1 @@\n-     result |= CPU_ADX;\n+     vm_features.set_feature(CPU_ADX);\n@@ -2982,1 +3033,1 @@\n-    result |= CPU_BMI2;\n+    vm_features.set_feature(CPU_BMI2);\n@@ -2984,1 +3035,1 @@\n-    result |= CPU_SHA;\n+    vm_features.set_feature(CPU_SHA);\n@@ -2986,1 +3037,1 @@\n-    result |= CPU_FMA;\n+    vm_features.set_feature(CPU_FMA);\n@@ -2988,1 +3039,1 @@\n-    result |= CPU_FLUSHOPT;\n+    vm_features.set_feature(CPU_FLUSHOPT);\n@@ -2990,1 +3041,1 @@\n-    result |= CPU_CLWB;\n+    vm_features.set_feature(CPU_CLWB);\n@@ -2992,1 +3043,1 @@\n-    result |= CPU_RDTSCP;\n+    vm_features.set_feature(CPU_RDTSCP);\n@@ -2994,1 +3045,1 @@\n-    result |= CPU_RDPID;\n+    vm_features.set_feature(CPU_RDPID);\n@@ -3000,1 +3051,1 @@\n-      result |= CPU_3DNOW_PREFETCH;\n+      vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3002,1 +3053,1 @@\n-      result |= CPU_SSE4A;\n+      vm_features.set_feature(CPU_SSE4A);\n@@ -3008,1 +3059,1 @@\n-      result |= CPU_SERIALIZE;\n+      vm_features.set_feature(CPU_SERIALIZE);\n@@ -3010,1 +3061,1 @@\n-      result |= CPU_AVX512_FP16;\n+      vm_features.set_feature(CPU_AVX512_FP16);\n@@ -3017,2 +3068,2 @@\n-    assert((result & CPU_CLWB) == 0, \"Check if it is supported?\");\n-    result &= ~CPU_CLWB;\n+    assert(vm_features.supports_feature(CPU_CLWB), \"Check if it is supported?\");\n+    vm_features.clear_feature(CPU_CLWB);\n@@ -3023,1 +3074,1 @@\n-    result |= CPU_PKU;\n+    vm_features.set_feature(CPU_PKU);\n@@ -3026,1 +3077,1 @@\n-    result |= CPU_OSPKE;\n+    vm_features.set_feature(CPU_OSPKE);\n@@ -3031,1 +3082,1 @@\n-    result |= CPU_CET_SS;\n+    vm_features.set_feature(CPU_CET_SS);\n@@ -3034,1 +3085,1 @@\n-    result |= CPU_CET_IBT;\n+    vm_features.set_feature(CPU_CET_IBT);\n@@ -3041,1 +3092,1 @@\n-    result |= CPU_TSCINV;\n+    vm_features.set_feature(CPU_TSCINV);\n@@ -3043,2 +3094,1 @@\n-\n-  return result;\n+  return vm_features;\n@@ -3234,0 +3284,11 @@\n+\n+void VM_Version::insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen) {\n+  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+    if (features.supports_feature((VM_Version::Feature_Flag)i)) {\n+      int res = jio_snprintf(buf, buflen, \", %s\", _features_names[i]);\n+      assert(res > 0, \"not enough temporary space allocated\");\n+      buf += res;\n+      buflen -= res;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":196,"deletions":135,"binary":false,"changes":331,"status":"modified"},{"patch":"@@ -6320,0 +6320,1 @@\n+  effect(TEMP dst);\n@@ -6323,1 +6324,1 @@\n-            \"ecmovnel $dst, $src1, $src2\" %}\n+            \"cmovnel  $dst, $src2\" %}\n@@ -6326,1 +6327,1 @@\n-    __ ecmovl(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovl(Assembler::notEqual, $dst$$Register, $src2$$Register);\n@@ -6336,0 +6337,1 @@\n+  effect(TEMP dst);\n@@ -6351,1 +6353,2 @@\n-  match(Set dst (CMoveI (Binary cop cr) (Binary src1 src2)));\n+  match(Set dst (CMoveI (Binary cop cr) (Binary src2 src1)));\n+  effect(TEMP dst);\n@@ -6355,1 +6358,1 @@\n-            \"ecmovnel $dst, $src1, $src2\" %}\n+            \"cmovnel  $dst, $src2\" %}\n@@ -6358,1 +6361,1 @@\n-    __ ecmovl(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovl(Assembler::notEqual, $dst$$Register, $src2$$Register);\n@@ -6601,0 +6604,1 @@\n+  predicate(!UseAPX);\n@@ -6609,0 +6613,1 @@\n+  predicate(UseAPX);\n@@ -6635,0 +6640,1 @@\n+  effect(TEMP dst);\n@@ -6638,1 +6644,1 @@\n-            \"ecmovneq $dst, $src1, $src2\" %}\n+            \"cmovneq  $dst, $src2\" %}\n@@ -6641,1 +6647,1 @@\n-    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovq(Assembler::notEqual, $dst$$Register, $src2$$Register);\n@@ -6664,1 +6670,2 @@\n-  match(Set dst (CMoveP (Binary cop cr) (Binary src1 src2)));\n+  match(Set dst (CMoveP (Binary cop cr) (Binary src2 src1)));\n+  effect(TEMP dst);\n@@ -6668,1 +6675,1 @@\n-            \"ecmovneq $dst, $src1, $src2\" %}\n+            \"cmovneq  $dst, $src2\" %}\n@@ -6671,1 +6678,1 @@\n-    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovq(Assembler::notEqual, $dst$$Register, $src2$$Register);\n@@ -6834,0 +6841,1 @@\n+  effect(TEMP dst);\n@@ -6837,1 +6845,1 @@\n-            \"ecmovneq $dst, $src1, $src2\" %}\n+            \"cmovneq  $dst, $src2\" %}\n@@ -6840,1 +6848,1 @@\n-    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovq(Assembler::notEqual, $dst$$Register, $src2$$Register);\n@@ -6863,1 +6871,2 @@\n-  match(Set dst (CMoveL (Binary cop cr) (Binary src1 src2)));\n+  match(Set dst (CMoveL (Binary cop cr) (Binary src2 src1)));\n+  effect(TEMP dst);\n@@ -6867,1 +6876,1 @@\n-            \"ecmovneq $dst, $src1, $src2\" %}\n+            \"cmovneq $dst, $src2\" %}\n@@ -6870,1 +6879,1 @@\n-    __ ecmovq(Assembler::notEqual, $dst$$Register, $src1$$Register, $src2$$Register);\n+    __ cmovq(Assembler::notEqual, $dst$$Register, $src2$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1600,1 +1600,1 @@\n-  if (profiled_method != nullptr) {\n+  if (profiled_method != nullptr && TypeProfileCasts) {\n@@ -1610,1 +1610,1 @@\n-  if (profiled_method != nullptr) {\n+  if (profiled_method != nullptr && TypeProfileCasts) {\n@@ -1623,1 +1623,1 @@\n-  if (profiled_method != nullptr) {\n+  if (profiled_method != nullptr && TypeProfileCasts) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"prims\/jvmtiAgentList.hpp\"\n@@ -457,0 +458,4 @@\n+\n+  \/\/ This is an old flag used by CDS regression testing only. It doesn't apply\n+  \/\/ to the AOT workflow.\n+  FLAG_SET_ERGO(AllowArchivingWithJavaAgent, false);\n@@ -507,0 +512,9 @@\n+\n+  \/\/ We don't load any agents in the assembly phase, so we can ensure that the agents\n+  \/\/ cannot affect the contents of the AOT cache. E.g., we don't want the agents to\n+  \/\/ redefine any cached classes. We also don't want the agents to modify heap objects that\n+  \/\/ are cached.\n+  \/\/\n+  \/\/ Since application is not executed in the assembly phase, there's no need to load\n+  \/\/ the agents anyway -- no one will notice that the agents are not loaded.\n+  JvmtiAgentList::disable_agent_list();\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,1 +67,2 @@\n-          \"Allow Java agent to be run with CDS dumping\")                    \\\n+          \"Allow Java agent to be run with CDS dumping (not applicable\"     \\\n+          \" to AOT\")                                                        \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -823,2 +823,1 @@\n-  int mode = CDSConfig::is_dumping_preimage_static_archive() ? 0666 : 0444;\n-  int fd = os::open(_full_path, O_RDWR | O_CREAT | O_TRUNC | O_BINARY, mode);\n+  int fd = os::open(_full_path, O_RDWR | O_CREAT | O_TRUNC | O_BINARY, 0666);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-  oop shared_strings_array = StringTable::init_shared_strings_array(_dumped_interned_strings);\n+  oop shared_strings_array = StringTable::init_shared_strings_array();\n@@ -611,3 +611,0 @@\n-  \/\/ We must succeed because:\n-  \/\/ - _dumped_interned_strings do not contain any large strings.\n-  \/\/ - StringTable::init_shared_table() doesn't create any large arrays.\n@@ -686,1 +683,1 @@\n-  StringTable::write_shared_table(_dumped_interned_strings);\n+  StringTable::write_shared_table();\n@@ -713,2 +710,0 @@\n-\n-    orig_ik->constants()->add_dumped_interned_strings();\n@@ -2077,5 +2072,2 @@\n-\/\/ Not all the strings in the global StringTable are dumped into the archive, because\n-\/\/ some of those strings may be only referenced by classes that are excluded from\n-\/\/ the archive. We need to explicitly mark the strings that are:\n-\/\/   [1] used by classes that WILL be archived;\n-\/\/   [2] included in the SharedArchiveConfigFile.\n+\/\/ Keep track of the contents of the archived interned string table. This table\n+\/\/ is used only by CDSHeapVerifier.\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -651,9 +651,0 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (CDSConfig::is_dumping_heap() && _extra_interned_strings != nullptr) {\n-    for (int i = 0; i < _extra_interned_strings->length(); i ++) {\n-      OopHandle string = _extra_interned_strings->at(i);\n-      HeapShared::add_to_dumped_interned_strings(string.resolve());\n-    }\n-  }\n-#endif\n-\n@@ -782,1 +773,1 @@\n-  \/\/ Resolve constant pool entries -- we don't load any new classes during this stage\n+  \/\/ Eargerly resolve all string constants in constant pools\n@@ -790,1 +781,1 @@\n-      AOTConstantPoolResolver::dumptime_resolve_constants(ik, CHECK);\n+      AOTConstantPoolResolver::preresolve_string_cp_entries(ik, CHECK);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -810,1 +810,1 @@\n-                                  methodHandle(), 0, CompileTask::Reason_Replay, THREAD);\n+                                  0, CompileTask::Reason_Replay, THREAD);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -1229,0 +1228,8 @@\n+  if (!SystemDictionaryShared::is_builtin_loader(ik->class_loader_data())) {\n+    \/\/ A class loaded by a user-defined classloader.\n+    assert(ik->shared_classpath_index() < 0, \"not assigned yet\");\n+    ik->set_shared_classpath_index(UNREGISTERED_INDEX);\n+    SystemDictionaryShared::set_shared_class_misc_info(ik, (ClassFileStream*)stream);\n+    return;\n+  }\n+\n@@ -1233,0 +1240,2 @@\n+  bool found_invalid = false;\n+\n@@ -1247,1 +1256,0 @@\n-    bool found_invalid = false;\n@@ -1274,2 +1282,0 @@\n-                ik->set_shared_classpath_index(-1);\n-                ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n@@ -1291,1 +1297,1 @@\n-        return false; \/\/ quit iterating\n+        return false; \/\/ Break the AOTClassLocationConfig::dumptime_iterate() loop.\n@@ -1296,0 +1302,1 @@\n+  }\n@@ -1297,12 +1304,2 @@\n-    if (found_invalid) {\n-      return;\n-    }\n-\n-    \/\/ No path entry found for this class: most likely a shared class loaded by the\n-    \/\/ user defined classloader.\n-    if (classpath_index < 0 && !SystemDictionaryShared::is_builtin_loader(ik->class_loader_data())) {\n-      assert(ik->shared_classpath_index() < 0, \"not assigned yet\");\n-      ik->set_shared_classpath_index(UNREGISTERED_INDEX);\n-      SystemDictionaryShared::set_shared_class_misc_info(ik, (ClassFileStream*)stream);\n-      return;\n-    }\n+  if (found_invalid) {\n+    assert(classpath_index == -1, \"sanity\");\n@@ -1315,1 +1312,1 @@\n-  ClassLoaderExt::record_result(checked_cast<s2>(classpath_index), ik, redefined);\n+  ClassLoaderExt::record_result_for_builtin_loader(checked_cast<s2>(classpath_index), ik, redefined);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -387,2 +387,2 @@\n-  str->indent().print_cr(\"bci: @%d\", _offset);\n-  str->indent().print_cr(\"flags: {%s }\",\n+  str->print_cr(\"bci: @%d\", _offset);\n+  str->print_cr(\"flags: {%s }\",\n@@ -390,1 +390,1 @@\n-  str->indent().print(\"locals: {\");\n+  str->print(\"locals: {\");\n@@ -399,1 +399,1 @@\n-  str->indent().print(\"stack: {\");\n+  str->print(\"stack: {\");\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -147,2 +147,2 @@\n-  str->indent().print_cr(\"StackMapTable: frame_count = %d\", _frame_count);\n-  str->indent().print_cr(\"table = { \");\n+  str->print_cr(\"StackMapTable: frame_count = %d\", _frame_count);\n+  str->print_cr(\"table = {\");\n@@ -150,1 +150,1 @@\n-    streamIndentor si(str);\n+    StreamIndentor si(str, 2);\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -449,4 +449,4 @@\n-  streamIndentor si(ss);\n-  ss->indent().print_cr(\"Reason:\");\n-  streamIndentor si2(ss);\n-  ss->indent().print(\"%s\", \"\");\n+  StreamIndentor si(ss, 2);\n+  ss->print_cr(\"Reason:\");\n+\n+  StreamIndentor si2(ss, 2);\n@@ -523,1 +523,0 @@\n-    streamIndentor si(ss);\n@@ -534,3 +533,6 @@\n-    ss->indent().print_cr(\"Location:\");\n-    streamIndentor si2(ss);\n-    ss->indent().print_cr(\"%s.%s%s @%d: %s\",\n+\n+    StreamIndentor si(ss, 2);\n+    ss->print_cr(\"Location:\");\n+\n+    StreamIndentor si2(ss, 2);\n+    ss->print_cr(\"%s.%s%s @%d: %s\",\n@@ -543,1 +545,1 @@\n-  streamIndentor si(ss);\n+  StreamIndentor si(ss, 2);\n@@ -545,2 +547,2 @@\n-    ss->indent().print_cr(\"Current Frame:\");\n-    streamIndentor si2(ss);\n+    ss->print_cr(\"Current Frame:\");\n+    StreamIndentor si2(ss, 2);\n@@ -550,2 +552,2 @@\n-    ss->indent().print_cr(\"Stackmap Frame:\");\n-    streamIndentor si2(ss);\n+    ss->print_cr(\"Stackmap Frame:\");\n+    StreamIndentor si2(ss, 2);\n@@ -558,3 +560,3 @@\n-    streamIndentor si(ss);\n-    ss->indent().print_cr(\"Bytecode:\");\n-    streamIndentor si2(ss);\n+    StreamIndentor si(ss, 2);\n+    ss->print_cr(\"Bytecode:\");\n+    StreamIndentor si2(ss, 2);\n@@ -567,1 +569,2 @@\n-    streamIndentor si(ss);\n+    StreamIndentor si(ss, 2);\n+\n@@ -570,2 +573,2 @@\n-      ss->indent().print_cr(\"Exception Handler Table:\");\n-      streamIndentor si2(ss);\n+      ss->print_cr(\"Exception Handler Table:\");\n+      StreamIndentor si2(ss, 2);\n@@ -573,1 +576,1 @@\n-        ss->indent().print_cr(\"bci [%d, %d] => handler: %d\", table.start_pc(i),\n+        ss->print_cr(\"bci [%d, %d] => handler: %d\", table.start_pc(i),\n@@ -582,2 +585,2 @@\n-    streamIndentor si(ss);\n-    ss->indent().print_cr(\"Stackmap Table:\");\n+    StreamIndentor si(ss, 2);\n+    ss->print_cr(\"Stackmap Table:\");\n@@ -588,1 +591,1 @@\n-    streamIndentor si2(ss);\n+    StreamIndentor si2(ss, 2);\n@@ -592,1 +595,0 @@\n-      ss->indent();\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+  do_klass(MethodHandleImpl_klass,                      java_lang_invoke_MethodHandleImpl                     ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -401,1 +401,0 @@\n-  methodHandle save_hot_method;\n@@ -456,1 +455,0 @@\n-    save_hot_method = methodHandle(thread, task->hot_method());\n@@ -1157,1 +1155,0 @@\n-                                        const methodHandle& hot_method,\n@@ -1176,7 +1173,2 @@\n-    if (!hot_method.is_null()) {\n-      tty->print(\" hot: \");\n-      if (hot_method() != method()) {\n-          hot_method->print_short_name(tty);\n-      } else {\n-        tty->print(\"yes\");\n-      }\n+    if (hot_count > 0) {\n+      tty->print(\" hot: yes\");\n@@ -1329,1 +1321,1 @@\n-                               hot_method, hot_count, compile_reason,\n+                               hot_count, compile_reason,\n@@ -1340,1 +1332,1 @@\n-                                       const methodHandle& hot_method, int hot_count,\n+                                       int hot_count,\n@@ -1360,1 +1352,1 @@\n-  nmethod* nm = CompileBroker::compile_method(method, osr_bci, comp_level, hot_method, hot_count, compile_reason, directive, THREAD);\n+  nmethod* nm = CompileBroker::compile_method(method, osr_bci, comp_level, hot_count, compile_reason, directive, THREAD);\n@@ -1367,1 +1359,1 @@\n-                                         const methodHandle& hot_method, int hot_count,\n+                                         int hot_count,\n@@ -1463,1 +1455,1 @@\n-    compile_method_base(method, osr_bci, comp_level, hot_method, hot_count, compile_reason, is_blocking, THREAD);\n+    compile_method_base(method, osr_bci, comp_level, hot_count, compile_reason, is_blocking, THREAD);\n@@ -1610,1 +1602,0 @@\n-                                                const methodHandle& hot_method,\n@@ -1616,1 +1607,1 @@\n-                       hot_method, hot_count, compile_reason,\n+                       hot_count, compile_reason,\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-      CompileBroker::compile_method(mh, InvocationEntryBci, CompLevel_full_optimization, mh, hot_count, CompileTask::Reason_Bootstrap, CHECK);\n+      CompileBroker::compile_method(mh, InvocationEntryBci, CompLevel_full_optimization, hot_count, CompileTask::Reason_Bootstrap, CHECK);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3235,1 +3235,5 @@\n-}\n+C2V_END\n+\n+C2V_VMENTRY_0(jboolean, isCompilerThread, (JNIEnv* env, jobject))\n+  return thread->is_Compiler_thread();\n+C2V_END\n@@ -3400,0 +3404,1 @@\n+  {CC \"isCompilerThread\",                             CC \"()Z\",                                                                             FN_PTR(isCompilerThread)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+  X86_ONLY(static_field(CompilerToVM::Data,    supports_avx512_simd_sort,              bool))                                        \\\n@@ -153,1 +154,1 @@\n-  JVMTI_ONLY(static_field(CompilerToVM::Data,  _should_notify_object_alloc,            int*))                                         \\\n+  JVMTI_ONLY(static_field(CompilerToVM::Data,  _should_notify_object_alloc,            int*))                                        \\\n@@ -1003,1 +1004,5 @@\n-  static_field(VM_Version, _has_intel_jcc_erratum, bool)\n+  static_field(VM_Version,                     _features,                      VM_Version::VM_Features) \\\n+                                                                                                        \\\n+  nonstatic_field(VM_Version::VM_Features,     _features_bitmap[0],            uint64_t)                \\\n+  static_field(VM_Version::VM_Features,        _features_bitmap_size,          int)                     \\\n+  static_field(VM_Version,                     _has_intel_jcc_erratum,         bool)\n@@ -1011,1 +1016,2 @@\n-#define VM_LONG_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n+#define VM_LONG_CPU_FEATURE_CONSTANTS \\\n+   CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1178,1 +1178,1 @@\n-  StreamAutoIndentor indentor(st, 1);\n+  StreamIndentor si(st, 1);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -378,34 +378,0 @@\n-\n-void ConstantPool::add_dumped_interned_strings() {\n-  InstanceKlass* ik = pool_holder();\n-  if (!ik->is_linked()) {\n-    \/\/ resolved_references() doesn't exist yet, so we have no resolved CONSTANT_String entries. However,\n-    \/\/ some static final fields may have default values that were initialized when the class was parsed.\n-    \/\/ We need to enter those into the CDS archive strings table.\n-    for (JavaFieldStream fs(ik); !fs.done(); fs.next()) {\n-      if (fs.access_flags().is_static()) {\n-        fieldDescriptor& fd = fs.field_descriptor();\n-        if (fd.field_type() == T_OBJECT) {\n-          int offset = fd.offset();\n-          check_and_add_dumped_interned_string(ik->java_mirror()->obj_field(offset));\n-        }\n-      }\n-    }\n-  } else {\n-    objArrayOop rr = resolved_references();\n-    if (rr != nullptr) {\n-      int rr_len = rr->length();\n-      for (int i = 0; i < rr_len; i++) {\n-        check_and_add_dumped_interned_string(rr->obj_at(i));\n-      }\n-    }\n-  }\n-}\n-\n-void ConstantPool::check_and_add_dumped_interned_string(oop obj) {\n-  if (obj != nullptr && java_lang_String::is_instance(obj) &&\n-      !ArchiveHeapWriter::is_string_too_large_to_archive(obj)) {\n-    HeapShared::add_to_dumped_interned_strings(obj);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n-  static void check_and_add_dumped_interned_string(oop obj);\n@@ -687,1 +686,0 @@\n-  void add_dumped_interned_strings() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -934,0 +934,6 @@\n+  if (is_runtime_setup_required()) {\n+    \/\/ Need to take the slow path, which will call the runtimeSetup() function instead\n+    \/\/ of <clinit>\n+    initialize(CHECK);\n+    return;\n+  }\n@@ -952,1 +958,0 @@\n-  AOTClassInitializer::call_runtime_setup(THREAD, this);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3574,1 +3574,1 @@\n-         (use->is_If() || use->is_CMove() || use->is_Bool()) &&\n+         (use->is_If() || use->is_CMove() || use->is_Bool() || use->is_OpaqueInitializedAssertionPredicate()) &&\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2963,0 +2963,10 @@\n+\/\/ Perform refining of strip mined loop nodes in the macro nodes list.\n+void PhaseMacroExpand::refine_strip_mined_loop_macro_nodes() {\n+   for (int i = C->macro_count(); i > 0; i--) {\n+    Node* n = C->macro_node(i - 1);\n+    if (n->is_OuterStripMinedLoop()) {\n+      n->as_OuterStripMinedLoop()->adjust_strip_mined_loop(&_igvn);\n+    }\n+  }\n+}\n+\n@@ -3080,0 +3090,1 @@\n+  refine_strip_mined_loop_macro_nodes();\n@@ -3132,1 +3143,0 @@\n-        n->as_OuterStripMinedLoop()->adjust_strip_mined_loop(&_igvn);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -224,0 +224,2 @@\n+\n+  void refine_strip_mined_loop_macro_nodes();\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-  unsigned int abs_con = uabs(con);\n+  unsigned int abs_con = g_uabs(con);\n@@ -508,1 +508,1 @@\n-  julong abs_con = uabs(con);\n+  julong abs_con = g_uabs(con);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1032,1 +1032,1 @@\n-  const int max_live_nodes_increase_per_iteration = NodeLimitFudgeFactor * 2;\n+  const int max_live_nodes_increase_per_iteration = NodeLimitFudgeFactor * 3;\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2045,1 +2045,1 @@\n-      return TypeInt::make(uabs(ti->get_con()));\n+      return TypeInt::make(g_uabs(ti->get_con()));\n@@ -2052,1 +2052,1 @@\n-      return TypeLong::make(uabs(tl->get_con()));\n+      return TypeLong::make(g_uabs(tl->get_con()));\n@@ -2123,0 +2123,21 @@\n+static const Type* reverse_bytes(int opcode, const Type* con) {\n+  switch (opcode) {\n+    case Op_ReverseBytesS:  return TypeInt::make(byteswap(checked_cast<jshort>(con->is_int()->get_con())));\n+    case Op_ReverseBytesUS: return TypeInt::make(byteswap(checked_cast<jchar>(con->is_int()->get_con())));\n+    case Op_ReverseBytesI:  return TypeInt::make(byteswap(checked_cast<jint>(con->is_int()->get_con())));\n+    case Op_ReverseBytesL:  return TypeLong::make(byteswap(checked_cast<jlong>(con->is_long()->get_con())));\n+    default: ShouldNotReachHere();\n+  }\n+}\n+\n+const Type* ReverseBytesNode::Value(PhaseGVN* phase) const {\n+  const Type* type = phase->type(in(1));\n+  if (type == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  if (type->singleton()) {\n+    return reverse_bytes(Opcode(), type);\n+  }\n+  return bottom_type();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -586,0 +586,6 @@\n+\n+class ReverseBytesNode : public InvolutionNode {\n+public:\n+  ReverseBytesNode(Node* in) : InvolutionNode(in) {}\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+};\n@@ -588,1 +594,1 @@\n-class ReverseBytesINode : public InvolutionNode {\n+class ReverseBytesINode : public ReverseBytesNode {\n@@ -590,1 +596,3 @@\n-  ReverseBytesINode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesINode(Node* in) : ReverseBytesNode(in) {\n+  }\n+\n@@ -598,1 +606,1 @@\n-class ReverseBytesLNode : public InvolutionNode {\n+class ReverseBytesLNode : public ReverseBytesNode {\n@@ -600,1 +608,1 @@\n-  ReverseBytesLNode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesLNode(Node* in) : ReverseBytesNode(in) {}\n@@ -608,1 +616,1 @@\n-class ReverseBytesUSNode : public InvolutionNode {\n+class ReverseBytesUSNode : public ReverseBytesNode {\n@@ -610,1 +618,1 @@\n-  ReverseBytesUSNode(Node* in1) : InvolutionNode(in1) {}\n+  ReverseBytesUSNode(Node* in1) : ReverseBytesNode(in1) {}\n@@ -618,1 +626,1 @@\n-class ReverseBytesSNode : public InvolutionNode {\n+class ReverseBytesSNode : public ReverseBytesNode {\n@@ -620,1 +628,1 @@\n-  ReverseBytesSNode(Node* in) : InvolutionNode(in) {}\n+  ReverseBytesSNode(Node* in) : ReverseBytesNode(in) {}\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -47,0 +47,4 @@\n+  if (StressMacroExpansion) {\n+    C->shuffle_macro_nodes();\n+  }\n+\n@@ -314,1 +318,1 @@\n-    assert(vbox->is_Phi(), \"should be phi\");\n+    assert(vbox->is_Phi() || vbox->is_CheckCastPP(), \"either phi or expanded\");\n@@ -365,1 +369,1 @@\n-  assert(!vbox->is_Phi(), \"should be expanded\");\n+  assert(vbox->is_CheckCastPP(), \"should be expanded\");\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1132,1 +1132,1 @@\n-  nmethod* nm = CompileBroker::compile_method(mh, bci, comp_level, mh, mh->invocation_count(), CompileTask::Reason_Whitebox, CHECK_false);\n+  nmethod* nm = CompileBroker::compile_method(mh, bci, comp_level, mh->invocation_count(), CompileTask::Reason_Whitebox, CHECK_false);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -873,0 +873,3 @@\n+\/\/ Return true if the execution after the provided bytecode continues at the\n+\/\/ next bytecode in the code. This is not the case for gotos, returns, and\n+\/\/ throws.\n@@ -875,2 +878,0 @@\n-    \/\/ List may be incomplete.  Here we really only care about bytecodes where compiled code\n-    \/\/ can deoptimize.\n@@ -880,0 +881,10 @@\n+    case Bytecodes::_areturn:\n+    case Bytecodes::_dreturn:\n+    case Bytecodes::_freturn:\n+    case Bytecodes::_ireturn:\n+    case Bytecodes::_lreturn:\n+    case Bytecodes::_jsr:\n+    case Bytecodes::_ret:\n+    case Bytecodes::_return:\n+    case Bytecodes::_lookupswitch:\n+    case Bytecodes::_tableswitch:\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1175,0 +1175,1 @@\n+  \/\/ This field is checked by the interpreter which expects it to be an integer.\n@@ -1181,4 +1182,1 @@\n-  int get_interp_only_mode()                { return _interp_only_mode; }\n-  int set_interp_only_mode(int val)         { return _interp_only_mode = val; }\n-  void increment_interp_only_mode()         { ++_interp_only_mode; }\n-  void decrement_interp_only_mode()         { --_interp_only_mode; }\n+  void set_interp_only_mode(bool val)       { _interp_only_mode = val ? 1 : 0; }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -463,0 +463,3 @@\n+  \/\/ Initialize memory pools\n+  Arena::initialize_chunk_pool();\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,0 +1,1 @@\n+\n@@ -1171,0 +1172,1 @@\n+  declare_toplevel_type(VM_Version)                                       \\\n@@ -1723,1 +1725,0 @@\n-  NOT_ZERO(X86_ONLY(declare_constant(frame::entry_frame_call_wrapper_offset)))      \\\n@@ -2153,0 +2154,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1135,1 +1135,1 @@\n-static inline unsigned int uabs(unsigned int n) {\n+static inline unsigned int g_uabs(unsigned int n) {\n@@ -1144,1 +1144,1 @@\n-static inline julong uabs(julong n) {\n+static inline julong g_uabs(julong n) {\n@@ -1153,2 +1153,2 @@\n-static inline julong uabs(jlong n) { return uabs((julong)n); }\n-static inline unsigned int uabs(int n) { return uabs((unsigned int)n); }\n+static inline julong g_uabs(jlong n) { return g_uabs((julong)n); }\n+static inline unsigned int g_uabs(int n) { return g_uabs((unsigned int)n); }\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,8 +278,0 @@\n-        \/** cache of subclass security audit results *\/\n-        static final ClassValue<Boolean> subclassAudits =\n-            new ClassValue<>() {\n-                @Override\n-                protected Boolean computeValue(Class<?> type) {\n-                    return auditSubclass(type);\n-                }\n-            };\n@@ -1575,25 +1567,0 @@\n-    \/**\n-     * Performs reflective checks on given subclass to verify that it doesn't\n-     * override security-sensitive non-final methods.  Returns TRUE if subclass\n-     * is \"safe\", FALSE otherwise.\n-     *\/\n-    private static Boolean auditSubclass(Class<?> subcl) {\n-        for (Class<?> cl = subcl;\n-             cl != ObjectInputStream.class;\n-             cl = cl.getSuperclass())\n-        {\n-            try {\n-                cl.getDeclaredMethod(\n-                    \"readUnshared\", (Class[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-            try {\n-                cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-        }\n-        return Boolean.TRUE;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,11 +212,0 @@\n-    private static class Caches {\n-        \/** cache of subclass security audit results *\/\n-        static final ClassValue<Boolean> subclassAudits =\n-            new ClassValue<>() {\n-                @Override\n-                protected Boolean computeValue(Class<?> type) {\n-                    return auditSubclass(type);\n-                }\n-            };\n-    }\n-\n@@ -1044,25 +1033,0 @@\n-    \/**\n-     * Performs reflective checks on given subclass to verify that it doesn't\n-     * override security-sensitive non-final methods.  Returns TRUE if subclass\n-     * is \"safe\", FALSE otherwise.\n-     *\/\n-    private static Boolean auditSubclass(Class<?> subcl) {\n-        for (Class<?> cl = subcl;\n-             cl != ObjectOutputStream.class;\n-             cl = cl.getSuperclass())\n-        {\n-            try {\n-                cl.getDeclaredMethod(\n-                    \"writeUnshared\", new Class<?>[] { Object.class });\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-            try {\n-                cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-        }\n-        return Boolean.TRUE;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -128,4 +128,13 @@\n-     * within an {@link java.io.InputStreamReader InputStreamReader} or other object\n-     * that handles character encoding. After this is done, subsequent reading should\n-     * use only the wrapper object; operating directly on {@code System.in} results\n-     * in unspecified behavior.\n+     * within the object that handles character encoding. After this is done,\n+     * subsequent reading should use only the wrapper object; continuing to\n+     * operate directly on {@code System.in} results in unspecified behavior.\n+     * <p>\n+     * Here are two common examples. Using an {@link java.io.InputStreamReader\n+     * InputStreamReader}:\n+     * {@snippet lang=java :\n+     *     new InputStreamReader(System.in, System.getProperty(\"stdin.encoding\"));\n+     * }\n+     * Or using a {@link java.util.Scanner Scanner}:\n+     * {@snippet lang=java :\n+     *     new Scanner(System.in, System.getProperty(\"stdin.encoding\"));\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1529,0 +1529,5 @@\n+        runtimeSetup();\n+    }\n+\n+    \/\/ Also called from JVM when loading an AOT cache\n+    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -319,1 +319,0 @@\n-    \/\/ Called from JVM when loading an AOT cache\n@@ -324,0 +323,1 @@\n+    \/\/ Also called from JVM when loading an AOT cache\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        @JEP(number=499, title=\"Structured Concurrency\", status=\"Fourth Preview\")\n+        @JEP(number=505, title=\"Structured Concurrency\", status=\"Fifth Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,0 @@\n-            case FLEXIBLE_CONSTRUCTORS -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-        FLEXIBLE_CONSTRUCTORS(JDK22, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n+        FLEXIBLE_CONSTRUCTORS(JDK25, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1723,0 +1723,1 @@\n+        Type seltypeUnboxed = types.unboxedTypeOrType(seltype);\n@@ -1730,1 +1731,1 @@\n-            boolean booleanSwitch = types.isSameType(types.unboxedTypeOrType(seltype), syms.booleanType);\n+            boolean booleanSwitch = types.isSameType(seltypeUnboxed, syms.booleanType);\n@@ -1828,3 +1829,6 @@\n-                                    if (!stringSwitch && !intSwitch &&\n-                                            !((pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN)) &&\n-                                              types.isSameType(types.unboxedTypeOrType(seltype), pattype))) {\n+                                    boolean isLongFloatDoubleOrBooleanConstant =\n+                                            pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN);\n+                                    if (isLongFloatDoubleOrBooleanConstant) {\n+                                        preview.checkSourceLevel(label.pos(), Feature.PRIMITIVE_PATTERNS);\n+                                    }\n+                                    if (!stringSwitch && !intSwitch && !(isLongFloatDoubleOrBooleanConstant && types.isSameType(seltypeUnboxed, pattype))) {\n@@ -4566,1 +4570,1 @@\n-                    return rs.resolveSelf(pos, env, site.tsym, name);\n+                    return rs.resolveSelf(pos, env, site.tsym, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3873,2 +3873,2 @@\n-     * @param c             The qualifier.\n-     * @param name          The identifier's name.\n+     * @param c             The type of the selected expression\n+     * @param tree          The expression\n@@ -3879,1 +3879,2 @@\n-                       Name name) {\n+                       JCFieldAccess tree) {\n+        Name name = tree.name;\n@@ -3890,1 +3891,3 @@\n-                    else if (env1.info.ctorPrologue && !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n+                    else if (env1.info.ctorPrologue &&\n+                            !isReceiverParameter(env, tree) &&\n+                            !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n@@ -3942,0 +3945,6 @@\n+    private boolean isReceiverParameter(Env<AttrContext> env, JCFieldAccess tree) {\n+        if (env.tree.getTag() != METHODDEF)\n+            return false;\n+        JCMethodDecl method = (JCMethodDecl)env.tree;\n+        return method.recvparam != null && tree == method.recvparam.nameexpr;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,3 +262,1 @@\n-                        TypeElement e2 = (TypeElement)\n-                            ((DeclaredType) supertype).asElement();\n-                        if (e2.getSuperclass().getKind() != TypeKind.NONE)\n+                        if (isImportantType(supertype))\n@@ -530,1 +528,1 @@\n-                             .map(tpe -> annotationsToString(tpe) + tpe.toString())\n+                             .map(tpe -> annotationsToString(tpe) + tpe.toString() + printTypeVariableBoundsIfNeeded(tpe))\n@@ -537,0 +535,16 @@\n+        private String printTypeVariableBoundsIfNeeded(TypeParameterElement tpe) {\n+            List<? extends TypeMirror> printableBounds =\n+                    tpe.getBounds()\n+                       .stream()\n+                       .filter(type -> isImportantType(type))\n+                       .toList();\n+\n+            if (printableBounds.isEmpty()) {\n+                return \"\";\n+            }\n+\n+            return \" extends \" + printableBounds.stream()\n+                                                .map(t -> t.toString())\n+                                                .collect(Collectors.joining(\" & \"));\n+        }\n+\n@@ -776,0 +790,17 @@\n+        \/**{@return true if this type is either not {@code java.lang.Object},\n+         * or is annotated, and hence needs to be included in the output,\n+         * even for cases where there's implicit {@code java.lang.Object} type.}\n+         *\n+         * @param type the type to check.\n+         *\/\n+        private boolean isImportantType(TypeMirror type) {\n+            if (!type.getAnnotationMirrors().isEmpty()) {\n+                return true;\n+            }\n+            TypeElement e2 = (TypeElement)\n+                ((DeclaredType) type).asElement();\n+            if (!e2.getKind().isClass()) {\n+                return true;\n+            }\n+            return e2.getSuperclass().getKind() != TypeKind.NONE;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -697,0 +697,3 @@\n+compiler.err.illegal.char.literal.multiple.surrogates=\\\n+    character literal contains more than one UTF-16 code unit\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,3 +81,0 @@\n-compiler\/c2\/irTests\/TestFloat16ScalarOperations.java 8355708 linux-aarch64\n-compiler\/c2\/irTests\/MulHFNodeIdealizationTests.java 8355708 linux-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2526,0 +2526,5 @@\n+    public static final String RISCV_VFNMSUB_MASKED = PREFIX + \"RISCV_VFNMSUB_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(RISCV_VFNMSUB_MASKED, \"vfnmsub_masked\");\n+    }\n+\n@@ -2531,0 +2536,5 @@\n+    public static final String RISCV_VFNMADD_MASKED = PREFIX + \"RISCV_VFNMADD_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(RISCV_VFNMADD_MASKED, \"vfnmadd_masked\");\n+    }\n+\n@@ -2536,0 +2546,5 @@\n+    public static final String RISCV_VFMSUB_MASKED = PREFIX + \"RISCV_VFMSUB_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(RISCV_VFMSUB_MASKED, \"vfmsub_masked\");\n+    }\n+\n@@ -2541,0 +2556,5 @@\n+    public static final String RISCV_VFMADD_MASKED = PREFIX + \"RISCV_VFMADD_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(RISCV_VFMADD_MASKED, \"vfmadd_masked\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDgenerateEarlyLarvalFrame -XDnoLocalProxyVars StrictFieldsOld.java StrictFieldsNew.java\n+ * @compile -XDforcePreview -XDgenerateEarlyLarvalFrame -XDnoLocalProxyVars StrictFieldsOld.java StrictFieldsNew.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/RedefineStrictFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+java\/awt\/Frame\/MaximizedToMaximized\/MaximizedToMaximized.java 8340374 macosx-all\n@@ -130,0 +131,1 @@\n+java\/awt\/dnd\/FileListBetweenJVMsTest\/FileListBetweenJVMsTest.java 8353673 macosx-all\n@@ -131,1 +133,1 @@\n-java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java 8288839 windows-x64\n+java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java 8288839 windows-x64,macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}