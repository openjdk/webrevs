{"files":[{"patch":"@@ -6460,4 +6460,4 @@\n-    jint obj_size = vk->layout_helper();\n-    assert(obj_size != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n-    if (UseTLAB) {\n-      tlab_allocate(r0, noreg, obj_size, tmp1, tmp2, slow_case);\n+    jint lh = vk->layout_helper();\n+    assert(lh != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n+    if (UseTLAB && !Klass::layout_helper_needs_slow_path(lh)) {\n+      tlab_allocate(r0, noreg, lh, tmp1, tmp2, slow_case);\n@@ -6470,1 +6470,0 @@\n-    ldrw(tmp2, Address(klass, Klass::layout_helper_offset()));\n@@ -6472,0 +6471,3 @@\n+      ldrw(tmp2, Address(klass, Klass::layout_helper_offset()));\n+      tst(tmp2, Klass::_lh_instance_slow_path_bit);\n+      br(Assembler::NE, slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -6165,4 +6165,4 @@\n-    jint obj_size = vk->layout_helper();\n-    assert(obj_size != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n-    if (UseTLAB) {\n-      tlab_allocate(r15_thread, rax, noreg, obj_size, r13, r14, slow_case);\n+    jint lh = vk->layout_helper();\n+    assert(lh != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n+    if (UseTLAB && !Klass::layout_helper_needs_slow_path(lh)) {\n+      tlab_allocate(r15_thread, rax, noreg, lh, r13, r14, slow_case);\n@@ -6176,1 +6176,0 @@\n-    movl(r14, Address(rbx, Klass::layout_helper_offset()));\n@@ -6178,0 +6177,3 @@\n+      movl(r14, Address(rbx, Klass::layout_helper_offset()));\n+      testl(r14, Klass::_lh_instance_slow_path_bit);\n+      jcc(Assembler::notZero, slow_case);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}