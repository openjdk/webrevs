{"files":[{"patch":"@@ -321,0 +321,1 @@\n+    *((Array<SigEntry>**)adr_extended_sig()) = nullptr;\n@@ -324,0 +325,1 @@\n+    *((Array<VMRegPair>**)adr_return_regs()) = nullptr;\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -723,0 +723,1 @@\n+    set_inline_type_field_klasses_array(nullptr);\n@@ -724,1 +725,0 @@\n-  set_inline_type_field_klasses_array(nullptr);\n@@ -728,0 +728,1 @@\n+    set_null_marker_offsets_array(nullptr);\n@@ -769,0 +770,1 @@\n+  set_loadable_descriptors(nullptr);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @requires os.family == \"aix\"\n@@ -39,14 +38,2 @@\n-\/*\n- * @test\n- * @bug 8308762\n- * @library \/test\/lib\n- * @summary Test that redefinition of class containing Throwable refs does not leak constant pool\n- * @requires os.family != \"aix\"\n- * @requires vm.jvmti\n- * @requires vm.flagless\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.instrument\n- *          java.compiler\n- * @run main RedefineClassHelper\n- * @run main\/othervm\/timeout=6000 -javaagent:redefineagent.jar -XX:MetaspaceSize=17m -XX:MaxMetaspaceSize=17m RedefineLeakThrowable\n- *\/\n+\n+\/\/ MaxMetaspaceSize=23m allows InMemoryJavaCompiler to load even if CDS is off.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineLeakThrowable.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336829\n+ * @library \/test\/lib\n+ * @summary Test that redefinition of a value class containing Throwable refs does not leak constant pool\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.instrument\n+ *          java.compiler\n+ * @run main RedefineClassHelper\n+ * @run main\/othervm\/timeout=6000 --enable-preview -Xlog:class+load,gc+metaspace+freelist+oom:rt.log -javaagent:redefineagent.jar -XX:MetaspaceSize=23m -XX:MaxMetaspaceSize=23m RedefineLeakThrowableValue\n+ *\/\n+\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+\n+value class Tester {\n+    void test() {\n+        try {\n+            int i = 42;\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+    }\n+}\n+\n+public class RedefineLeakThrowableValue {\n+\n+    static final String NEW_TESTER =\n+        \"value class Tester {\" +\n+        \"   void test() {\" +\n+        \"        try {\" +\n+        \"            int i = 42;\" +\n+        \"        } catch (Throwable t) {\" +\n+        \"            t.printStackTrace();\" +\n+        \"        }\" +\n+        \"    }\" +\n+        \"}\";\n+\n+\n+    public static void main(String argv[]) throws Exception {\n+        String java_version = System.getProperty(\"java.specification.version\");\n+        \/\/ Load InMemoryJavaCompiler outside the redefinition loop to prevent random lambdas that load and fill up metaspace.\n+        byte[] bytecodes = InMemoryJavaCompiler.compile(\"Tester\", NEW_TESTER,\n+                                                        \"-source\", java_version, \"--enable-preview\",\n+                                                        \"--add-exports\", \"java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\");\n+        for (int i = 0; i < 700; i++) {\n+            RedefineClassHelper.redefineClass(Tester.class, bytecodes);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineLeakThrowableValue.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}