{"files":[{"patch":"@@ -1272,0 +1272,1 @@\n+            currentClassSym = localEnv.enclClass.sym;\n@@ -1287,0 +1288,2 @@\n+        ClassSymbol currentClassSym;\n+\n@@ -1290,0 +1293,1 @@\n+            ClassSymbol previousClassSym = currentClassSym;\n@@ -1292,0 +1296,1 @@\n+                currentClassSym = classDecl.sym;\n@@ -1295,0 +1300,1 @@\n+                currentClassSym = previousClassSym;\n@@ -1387,0 +1393,4 @@\n+            \/\/ make sure that there is a symbol and it is not static\n+            if (sym == null || sym.isStatic()) {\n+                return;\n+            }\n@@ -1395,1 +1405,0 @@\n-\n@@ -1405,30 +1414,16 @@\n-            if (sym != null) {\n-                if (!sym.isStatic() && sym.kind == VAR && sym.owner.kind == TYP) {\n-                    if (sym.name == names._this || sym.name == names._super) {\n-                        \/\/ are we seeing something like `this` or `CurrentClass.this` or `SuperClass.super::foo`?\n-                        if (TreeInfo.isExplicitThisReference(\n-                                types,\n-                                (ClassType)localEnv.enclClass.sym.type,\n-                                tree)) {\n-                            reportPrologueError(tree, sym);\n-                        }\n-                    } else if (sym.kind == VAR && sym.owner.kind == TYP) { \/\/ now fields only\n-                        if (sym.owner != localEnv.enclClass.sym) {\n-                            if (localEnv.enclClass.sym.isSubClass(sym.owner, types) &&\n-                                    sym.isInheritedIn(localEnv.enclClass.sym, types)) {\n-                                \/* if we are dealing with a field that doesn't belong to the current class, but the\n-                                 * field is inherited, this is an error. Unless, the super class is also an outer\n-                                 * class and the field's qualifier refers to the outer class\n-                                 *\/\n-                                if (tree.hasTag(IDENT) ||\n-                                    TreeInfo.isExplicitThisReference(\n-                                            types,\n-                                            (ClassType)localEnv.enclClass.sym.type,\n-                                            ((JCFieldAccess)tree).selected)) {\n-                                    reportPrologueError(tree, sym);\n-                                }\n-                            }\n-                        } else if (isEarlyReference(localEnv, tree, sym)) {\n-                            \/* now this is a `proper` instance field of the current class\n-                             * references to fields of identity classes which happen to have initializers are\n-                             * not allowed in the prologue\n+            if (sym.kind == VAR && sym.owner.kind == TYP) {\n+                if (sym.name == names._this || sym.name == names._super) {\n+                    \/\/ are we seeing something like `this` or `CurrentClass.this` or `SuperClass.super::foo`?\n+                    if (TreeInfo.isExplicitThisReference(\n+                            types,\n+                            (ClassType)localEnv.enclClass.sym.type,\n+                            tree)) {\n+                        reportPrologueError(tree, sym);\n+                    }\n+                } else if (sym.kind == VAR && sym.owner.kind == TYP) { \/\/ now fields only\n+                    if (sym.owner != localEnv.enclClass.sym) {\n+                        if (localEnv.enclClass.sym.isSubClass(sym.owner, types) &&\n+                                sym.isInheritedIn(localEnv.enclClass.sym, types)) {\n+                            \/* if we are dealing with a field that doesn't belong to the current class, but the\n+                             * field is inherited, this is an error. Unless, the super class is also an outer\n+                             * class and the field's qualifier refers to the outer class\n@@ -1436,2 +1431,21 @@\n-                            if (insideLambdaOrClassDef ||\n-                                (!localEnv.enclClass.sym.isValueClass() && (sym.flags_field & HASINIT) != 0))\n+                            if (tree.hasTag(IDENT) ||\n+                                TreeInfo.isExplicitThisReference(\n+                                        types,\n+                                        (ClassType)localEnv.enclClass.sym.type,\n+                                        ((JCFieldAccess)tree).selected)) {\n+                                reportPrologueError(tree, sym);\n+                            }\n+                        }\n+                    } else if (isEarlyReference(localEnv, tree, sym)) {\n+                        \/* now this is a `proper` instance field of the current class\n+                         * references to fields of identity classes which happen to have initializers are\n+                         * not allowed in the prologue\n+                         *\/\n+                        if (insideLambdaOrClassDef ||\n+                            (!localEnv.enclClass.sym.isValueClass() && (sym.flags_field & HASINIT) != 0))\n+                            reportPrologueError(tree, sym);\n+                        \/\/ we will need to generate a proxy for this field later on\n+                        if (!isInLHS) {\n+                            if (allowValueClasses) {\n+                                localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n+                            } else {\n@@ -1439,7 +1453,0 @@\n-                            \/\/ we will need to generate a proxy for this field later on\n-                            if (!isInLHS) {\n-                                if (allowValueClasses) {\n-                                    localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n-                                } else {\n-                                    reportPrologueError(tree, sym);\n-                                }\n@@ -1471,0 +1478,8 @@\n+                } else if (currentClassSym != env.enclClass.sym) {\n+                    \/* so we are inside a class, CI, in the prologue of an outer class, CO, and the symbol being\n+                     * analyzed has no qualifier. So if the symbol is a member of CI the reference is allowed,\n+                     * otherwise it is not.\n+                     * It could be that the reference to CI's member happens inside CI's own prologue, but that\n+                     * will be checked separately, when CI's prologue is analyzed.\n+                     *\/\n+                    return !sym.isMemberOf(currentClassSym, types);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":55,"deletions":40,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                System.err.println(xx);  \/\/ this should fail\n+                System.err.println(xx);  \/\/ this one is OK, reading field `xx` in the anonymous class\n@@ -197,1 +197,1 @@\n-        }.xx;  \/\/ this one is OK though\n+        }.xx;  \/\/ this one is OK too, field of a fully constructed class\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,1 +21,0 @@\n-SuperInitFails.java:195:36: compiler.err.cant.ref.before.ctor.called: xx\n@@ -37,1 +36,1 @@\n-36 errors\n+35 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -515,0 +515,14 @@\n+    public static class Test25 {\n+        public Test25(Object o) {}\n+\n+        class Sub extends Test25 {\n+            public Sub() {\n+                super(new Object() {\n+                    void foo() {\n+                        getClass();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n@@ -562,0 +576,1 @@\n+        new Test25(null);\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}