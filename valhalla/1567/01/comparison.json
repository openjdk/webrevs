{"files":[{"patch":"@@ -1272,0 +1272,1 @@\n+            currentClassSym = localEnv.enclClass.sym;\n@@ -1287,0 +1288,2 @@\n+        ClassSymbol currentClassSym;\n+\n@@ -1290,0 +1293,1 @@\n+            ClassSymbol previousClassSym = currentClassSym;\n@@ -1292,0 +1296,1 @@\n+                currentClassSym = classDecl.sym;\n@@ -1295,0 +1300,1 @@\n+                currentClassSym = previousClassSym;\n@@ -1387,0 +1393,4 @@\n+            \/\/ make sure the symbol is not static\n+            if (sym.isStatic()) {\n+                return;\n+            }\n@@ -1471,0 +1481,6 @@\n+                } else if (currentClassSym != env.enclClass.sym) {\n+                    \/* so we are inside a class, CI, in the prologue of an outer class, CO, and the symbol being\n+                     * analyzed has no qualifier. So if the symbol is a member of CI the reference is allowed,\n+                     * otherwise it is not.\n+                     *\/\n+                    return !sym.isMemberOf(currentClassSym, types);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                System.err.println(xx);  \/\/ this should fail\n+                System.err.println(xx);  \/\/ this one is OK, reading field `xx` in the anonymous class\n@@ -197,1 +197,1 @@\n-        }.xx;  \/\/ this one is OK though\n+        }.xx;  \/\/ this one is OK too, field of a fully constructed class\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,1 +21,0 @@\n-SuperInitFails.java:195:36: compiler.err.cant.ref.before.ctor.called: xx\n@@ -37,1 +36,1 @@\n-36 errors\n+35 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Iterator;\n@@ -515,0 +516,14 @@\n+    public static class Test25 {\n+        public Test25(Object o) {}\n+\n+        class Sub extends Test25 {\n+            public Sub() {\n+                super(new Object() {\n+                    void foo() {\n+                        getClass();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n@@ -562,0 +577,1 @@\n+        new Test25(null);\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}