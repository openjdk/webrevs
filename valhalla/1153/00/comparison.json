{"files":[{"patch":"@@ -257,0 +257,1 @@\n+    public final Type numberType;\n@@ -665,0 +666,2 @@\n+        numberType = enterClass(\"java.lang.Number\");\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5205,1 +5205,1 @@\n-                    (c.isValueClass() || hasAbstractValueSuperClass(c)) &&\n+                    (c.isValueClass() || hasAbstractValueSuperClass(c, Set.of(syms.numberType.tsym))) &&\n@@ -5231,1 +5231,1 @@\n-        private boolean hasAbstractValueSuperClass(Symbol c) {\n+        private boolean hasAbstractValueSuperClass(Symbol c, Set<Symbol> excluding) {\n@@ -5239,1 +5239,1 @@\n-                if (sup.isValueClass()) {\n+                if (sup.isValueClass() && !excluding.contains(sup.tsym)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1144,0 +1144,16 @@\n+            assertOK(\n+                    \/\/ Number is a special case, no warning for identity classes extending it\n+                    \"\"\"\n+                    class NumberSubClass extends Number {\n+                        private static final long serialVersionUID = 0L;\n+                        @Override\n+                        public double doubleValue() { return 0; }\n+                        @Override\n+                        public int intValue() { return 0; }\n+                        @Override\n+                        public long longValue() { return 0; }\n+                        @Override\n+                        public float floatValue() { return 0; }\n+                    }\n+                    \"\"\"\n+            );\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}