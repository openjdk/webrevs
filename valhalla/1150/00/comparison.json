{"files":[{"patch":"@@ -342,1 +342,1 @@\n-                              LIR_OprFact::illegalOpr, state_for(x))\n+                              obj.result(), state_for(x))\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1352,1 +1352,1 @@\n-        oop_maps = generate_exception_throw(sasm, CAST_FROM_FN_PTR(address, throw_identity_exception), false);\n+        oop_maps = generate_exception_throw(sasm, CAST_FROM_FN_PTR(address, throw_identity_exception), true);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4710,1 +4710,1 @@\n-                    InterpreterRuntime::throw_identity_exception));\n+                    InterpreterRuntime::throw_identity_exception), rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -889,1 +889,1 @@\n-JRT_ENTRY(void, Runtime1::throw_identity_exception(JavaThread* current))\n+JRT_ENTRY(void, Runtime1::throw_identity_exception(JavaThread* current, oopDesc* object))\n@@ -892,1 +892,2 @@\n-  SharedRuntime::throw_and_post_jvmti_exception(current, vmSymbols::java_lang_IdentityException());\n+  char* message = SharedRuntime::generate_identity_exception_message(current, object->klass());\n+  SharedRuntime::throw_and_post_jvmti_exception(current, vmSymbols::java_lang_IdentityException(), message);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  static void throw_identity_exception(JavaThread* current);\n+  static void throw_identity_exception(JavaThread* current, oopDesc* object);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -978,2 +978,14 @@\n-JRT_ENTRY(void, InterpreterRuntime::throw_identity_exception(JavaThread* current))\n-  THROW(vmSymbols::java_lang_IdentityException());\n+JRT_ENTRY(void, InterpreterRuntime::throw_identity_exception(JavaThread* current, oopDesc* obj))\n+  Klass* klass = cast_to_oop(obj)->klass();\n+  ResourceMark rm(THREAD);\n+  const char* desc = \"Cannot synchronize on an instance of value class \";\n+  const char* className = klass->external_name();\n+  size_t msglen = strlen(desc) + strlen(className) + 1;\n+  char* message = NEW_RESOURCE_ARRAY(char, msglen);\n+  if (nullptr == message) {\n+    \/\/ Out of memory: can't create detailed error message\n+    THROW_MSG(vmSymbols::java_lang_IdentityException(), className);\n+  } else {\n+    jio_snprintf(message, msglen, \"%s%s\", desc, className);\n+    THROW_MSG(vmSymbols::java_lang_IdentityException(), message);\n+  }\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  static void    throw_identity_exception(JavaThread* current);\n+  static void    throw_identity_exception(JavaThread* current, oopDesc* obj);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1975,0 +1975,15 @@\n+char* SharedRuntime::generate_identity_exception_message(JavaThread* current, Klass* klass) {\n+  assert(klass->is_inline_klass(), \"Must be a concrete value class\");\n+  const char* desc = \"Cannot synchronize on an instance of value class \";\n+  const char* className = klass->external_name();\n+  size_t msglen = strlen(desc) + strlen(className) + 1;\n+  char* message = NEW_RESOURCE_ARRAY(char, msglen);\n+  if (nullptr == message) {\n+    \/\/ Out of memory: can't create detailed error message\n+    message = const_cast<char*>(klass->external_name());\n+  } else {\n+    jio_snprintf(message, msglen, \"%s%s\", desc, className);\n+  }\n+  return message;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -322,0 +322,2 @@\n+  static char* generate_identity_exception_message(JavaThread* thr, Klass* klass);\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+* Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\n+\/**\n+* @test TestCloneableValue\n+* @library \/test\/lib\n+* @enablePreview\n+* @compile TestCloneableValue.java\n+* @run main\/othervm -XX:LockingMode=0 runtime.valhalla.inlinetypes.TestCloneableValue\n+*\/\n+\n+\/**\n+* @test TestCloneableValue\n+* @library \/test\/lib\n+* @enablePreview\n+* @compile TestCloneableValue.java\n+* @run main\/othervm -XX:LockingMode=1 runtime.valhalla.inlinetypes.TestCloneableValue\n+*\/\n+\n+\/**\n+* @test TestCloneableValue\n+* @library \/test\/lib\n+* @enablePreview\n+* @compile TestCloneableValue.java\n+* @run main\/othervm -XX:LockingMode=2 runtime.valhalla.inlinetypes.TestCloneableValue\n+*\/\n+\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class MonitorEnterTest {\n+\n+  static void monitorEnter(Object o, boolean expectSuccess, String message) {\n+    try {\n+      synchronized(o) {\n+        Asserts.assertFalse(expectSuccess, \"MonitorEnter should not have succeeded on an instance of \" + o.getClass().getName());\n+      }\n+    } catch (IdentityException e) {\n+      Asserts.assertTrue(expectSuccess, \"Unexpected IdentityException with an instance of \" + o.getClass().getName());\n+      if (message != null) {\n+        Asserts.assertEQ(e.getMessage(), message, \"Exception message mismatch\");\n+      }\n+    }\n+  }\n+\n+  static value class MyValue { }\n+\n+  public static void main(String[] args) {\n+    \/\/ Attempts to lock the instance are repeated many time to ensure that the different paths\n+    \/\/ are used: interpreter, C1, and C2 (which deopt to the interpreter in this case)\n+    for (int i = 0; i <  20000; i++) {\n+      monitorEnter(new Object(), true);\n+      monitorEnter(new String(), true);\n+      monitorEnter(new MyValue(), false, \"Cannot synchronize on an instance of value class MonitorEnterTest$MyValue\");\n+      monitorEnter(Integer.valueOf(42), false, \"Cannot synchronize on an instance of value class java.lang.Integer\");\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MonitorEnterTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}