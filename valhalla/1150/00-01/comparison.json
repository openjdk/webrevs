{"files":[{"patch":"@@ -333,1 +333,1 @@\n-      new SimpleExceptionStub(Runtime1::throw_identity_exception_id, LIR_OprFact::illegalOpr, state_for(x)) :\n+      new SimpleExceptionStub(Runtime1::throw_identity_exception_id, obj.result(), state_for(x)) :\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -933,1 +933,1 @@\n-        oop_maps = generate_exception_throw(sasm, CAST_FROM_FN_PTR(address, throw_identity_exception), false);\n+        oop_maps = generate_exception_throw(sasm, CAST_FROM_FN_PTR(address, throw_identity_exception), true);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4240,1 +4240,1 @@\n-                    InterpreterRuntime::throw_identity_exception));\n+                    InterpreterRuntime::throw_identity_exception), r0);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,3 +55,9 @@\n-    try {\n-      synchronized(o) {\n-        Asserts.assertFalse(expectSuccess, \"MonitorEnter should not have succeeded on an instance of \" + o.getClass().getName());\n+      try {\n+          synchronized(o) {\n+            Asserts.assertFalse(expectSuccess, \"MonitorEnter should not have succeeded on an instance of \" + o.getClass().getName());\n+          }\n+      } catch (IdentityException e) {\n+          Asserts.assertTrue(expectSuccess, \"Unexpected IdentityException with an instance of \" + o.getClass().getName());\n+          if (message != null) {\n+              Asserts.assertEQ(e.getMessage(), message, \"Exception message mismatch\");\n+          }\n@@ -59,6 +65,0 @@\n-    } catch (IdentityException e) {\n-      Asserts.assertTrue(expectSuccess, \"Unexpected IdentityException with an instance of \" + o.getClass().getName());\n-      if (message != null) {\n-        Asserts.assertEQ(e.getMessage(), message, \"Exception message mismatch\");\n-      }\n-    }\n@@ -69,8 +69,9 @@\n-  public static void main(String[] args) {\n-    \/\/ Attempts to lock the instance are repeated many time to ensure that the different paths\n-    \/\/ are used: interpreter, C1, and C2 (which deopt to the interpreter in this case)\n-    for (int i = 0; i <  20000; i++) {\n-      monitorEnter(new Object(), true);\n-      monitorEnter(new String(), true);\n-      monitorEnter(new MyValue(), false, \"Cannot synchronize on an instance of value class MonitorEnterTest$MyValue\");\n-      monitorEnter(Integer.valueOf(42), false, \"Cannot synchronize on an instance of value class java.lang.Integer\");\n+    public static void main(String[] args) {\n+        \/\/ Attempts to lock the instance are repeated many time to ensure that the different paths\n+        \/\/ are used: interpreter, C1, and C2 (which deopt to the interpreter in this case)\n+        for (int i = 0; i <  20000; i++) {\n+            monitorEnter(new Object(), true);\n+            monitorEnter(new String(), true);\n+            monitorEnter(new MyValue(), false, \"Cannot synchronize on an instance of value class MonitorEnterTest$MyValue\");\n+            monitorEnter(Integer.valueOf(42), false, \"Cannot synchronize on an instance of value class java.lang.Integer\");\n+        }\n@@ -78,1 +79,0 @@\n-  }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MonitorEnterTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}