{"files":[{"patch":"@@ -2013,10 +2013,15 @@\n-        boolean resultTypesOK =\n-            types.returnTypeSubstitutable(mt, ot, otres, overrideWarner);\n-        if (overrideWarner.hasNonSilentLint(LintCategory.NULL)) {\n-            warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness1);\n-        }\n-        overrideWarner.remove(LintCategory.NULL);\n-        \/\/ at this point we know this will be true but to gather the warnings\n-        types.isSubSignature(mt, ot, overrideWarner);\n-        if (overrideWarner.hasNonSilentLint(LintCategory.NULL)) {\n-            warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness2);\n+        boolean resultTypesOK = false;\n+        try {\n+            types.pushWarner(overrideWarner);\n+            resultTypesOK = types.returnTypeSubstitutable(mt, ot, otres, overrideWarner);\n+            if (overrideWarner.hasNonSilentLint(LintCategory.NULL)) {\n+                warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness1);\n+            }\n+            overrideWarner.remove(LintCategory.NULL);\n+            \/\/ at this point we know this will be true but to gather the warnings\n+            types.isSubSignature(mt, ot, overrideWarner);\n+            if (overrideWarner.hasNonSilentLint(LintCategory.NULL)) {\n+                warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness2);\n+            }\n+        } finally {\n+            types.popWarner();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2202,1 +2202,1 @@\n-                isUninitializedNonNullableOrParametricField(sym));\n+                isUninitializedNonNullableField(sym));\n@@ -2222,0 +2222,7 @@\n+        boolean isUninitializedNonNullableField(VarSymbol sym) {\n+            return sym.owner.kind == TYP &&\n+                    ((sym.flags() & (FINAL | HASINIT | PARAMETER)) == 0 &&\n+                            classDef.sym.isEnclosedBy((ClassSymbol)sym.owner) &&\n+                            types.isNonNullable(sym.type));\n+        }\n+\n@@ -2310,8 +2317,6 @@\n-                if (isUninitializedNonNullableOrParametricField(sym)) {\n-                    if (lint.isEnabled(Lint.LintCategory.NULL)) {\n-                        if (types.isNonNullable(sym.type)) {\n-                            log.warning(pos, Warnings.NonNullableShouldBeInitialized);\n-                        } else {\n-                            \/\/ see JDK-8339087\n-                            \/\/log.warning(pos, Warnings.ParametricShouldBeInitialized);\n-                        }\n+                if (isUninitializedNonNullableField(sym)) {\n+                    if (types.isNonNullable(sym.type)) {\n+                        log.error(pos, Errors.NonNullableShouldBeInitialized);\n+                    } else {\n+                        \/\/ see JDK-8339087\n+                        \/\/log.warning(pos, Warnings.ParametricShouldBeInitialized);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -4178,0 +4178,3 @@\n+compiler.err.non.nullable.should.be.initialized=\\\n+    field of non-nullable type should be initialized\n+\n@@ -4196,3 +4199,0 @@\n-compiler.warn.non.nullable.should.be.initialized=\\\n-    field of non-nullable type should be initialized\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -230,1 +230,0 @@\n-compiler.warn.non.nullable.should.be.initialized\n@@ -233,3 +232,0 @@\n-compiler.warn.unchecked.nullness.conversion\n-compiler.warn.overrides.with.different.nullness.1\n-compiler.warn.overrides.with.different.nullness.2\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.non.nullable.should.be.initialized\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n+\n+class NonNullableShouldBeInitialized {\n+    NonNullableShouldBeInitialized! field;\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NonNullableShouldBeInitialized.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.overrides.with.different.nullness.1\n+\/\/ key: compiler.warn.overrides.with.different.nullness.2\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version} -Xlint:null\n+\n+class OverrideWithDifferentNullness {\n+    abstract class A {\n+        abstract String! lookup(String! arg);\n+    }\n+\n+    abstract class B extends A {\n+        abstract String? lookup(String? arg);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/OverrideWithDifferentNullness.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.unchecked.nullness.conversion\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version} -Xlint:null\n+\n+class UncheckedNullnessConversion {\n+    void m(UncheckedNullnessConversion! s1, UncheckedNullnessConversion? s3) {\n+        s1 = s3;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UncheckedNullnessConversion.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -36,2 +36,1 @@\n- * @run testng\/othervm NullabilityCompilationTests\n- * @ignore 8316628\n+ * @run junit NullabilityCompilationTests\n@@ -44,1 +43,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -47,3 +46,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n@@ -51,2 +47,5 @@\n-    private static String[] EMPTY_OPTIONS = {};\n-    private static String[] LINT_OPTIONS = { \"-Xlint:null\" };\n+    private static String[] PREVIEW_OPTIONS = {\n+            \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())};\n+    private static String[] PREVIEW_PLUS_LINT_OPTIONS = {\n+            \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()),\n+            \"-Xlint:null\" };\n@@ -98,1 +97,1 @@\n-                testHelper(LINT_OPTIONS, diagAndCode.code);\n+                testHelper(PREVIEW_PLUS_LINT_OPTIONS, diagAndCode.code);\n@@ -100,2 +99,2 @@\n-                testHelper(LINT_OPTIONS, diagAndCode.diag, diagAndCode.diagsCount, TestResult.COMPILE_WITH_WARNING, diagAndCode.code, null);\n-                testHelper(EMPTY_OPTIONS, diagAndCode.code,\n+                testHelper(PREVIEW_PLUS_LINT_OPTIONS, diagAndCode.diag, diagAndCode.diagsCount, TestResult.COMPILE_WITH_WARNING, diagAndCode.code, null);\n+                testHelper(PREVIEW_OPTIONS, diagAndCode.code,\n@@ -109,1 +108,1 @@\n-                testHelper(EMPTY_OPTIONS, diagAndCode.diag, diagAndCode.diagsCount, TestResult.ERROR, diagAndCode.code, null);\n+                testHelper(PREVIEW_OPTIONS, diagAndCode.diag, diagAndCode.diagsCount, TestResult.ERROR, diagAndCode.code, null);\n@@ -112,1 +111,1 @@\n-                testHelper(EMPTY_OPTIONS, diagAndCode.code);\n+                testHelper(PREVIEW_OPTIONS, diagAndCode.code);\n@@ -125,1 +124,2 @@\n-    public void testErrorNonNullableCantBeAssignedNull() {\n+    @Test\n+    void testErrorNonNullableCantBeAssignedNull() {\n@@ -137,0 +137,8 @@\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo! s = null;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.prob.found.req\"),\n@@ -146,1 +154,9 @@\n-                        \/*new DiagAndCode(\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo[]! s = null;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.prob.found.req\"),\n+                        new DiagAndCode(\n@@ -157,1 +173,1 @@\n-                                \"compiler.err.prob.found.req\"),*\/\n+                                \"compiler.err.prob.found.req\"),\n@@ -176,1 +192,3 @@\n-    public void testWarnUninitialized() {\n+\n+    @Test\n+    void testErrorUninitialized() {\n@@ -186,2 +204,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\"),\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo! s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n@@ -195,2 +221,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\"),\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo[]! s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n@@ -204,2 +238,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\"),\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo![]! s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n@@ -213,2 +255,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\"),\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo![]![]! s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n@@ -219,1 +269,1 @@\n-                                    Point[][]! s;\n+                                    Point[]![] s;\n@@ -222,2 +272,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\"),\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo[]![] s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n@@ -228,1 +286,1 @@\n-                                    Point[][][]! s;\n+                                    Point[]![][] s;\n@@ -231,2 +289,10 @@\n-                                Result.Warning,\n-                                \"compiler.warn.non.nullable.should.be.initialized\")\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo {\n+                                    Foo[]![][] s;\n+                                }\n+                                \"\"\",\n+                                Result.Error,\n+                                \"compiler.err.non.nullable.should.be.initialized\")\n@@ -237,1 +303,2 @@\n-    public void testUncheckedNullnessConversions () {\n+    @Test\n+    void testUncheckedNullnessConversions () {\n@@ -244,1 +311,1 @@\n-                                    void m(Point! s1, Point s3) {\n+                                    void m(Point! s1, Point? s3) {\n@@ -252,1 +319,1 @@\n-                        \/*new DiagAndCode(\n+                        new DiagAndCode(\n@@ -260,3 +327,2 @@\n-                                Result.Warning,\n-                                \"compiler.warn.unchecked.nullness.conversion\",\n-                                1),*\/\n+                                Result.Clean,\n+                                \"\"),\n@@ -274,1 +340,0 @@\n-                        \/*\n@@ -278,1 +343,1 @@\n-                                    Foo<String> f2;\n+                                    Foo<String?> f2;\n@@ -286,1 +351,1 @@\n-                                class Foo<T extends Object!> {\n+                                class Foo<T extends String!> {\n@@ -290,0 +355,8 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo<T extends Object!> {\n+                                    Foo<String?> f2;\n+                                }\n+                                \"\"\",\n@@ -293,2 +366,8 @@\n-                        *\/\n-\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Foo<T extends Object!> {\n+                                    Foo<String> f2;\n+                                }\n+                                \"\"\",\n+                                Result.Clean,\n+                                \"\"),\n@@ -306,0 +385,12 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                import java.util.*;\n+                                value class Point { public implicit Point(); }\n+                                class Foo {\n+                                    void test(List<? extends Point!> ls1, List<? extends Point?> ls3) {\n+                                        ls1 = ls3;\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -318,0 +409,11 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                import java.util.*;\n+                                class Foo {\n+                                    void test(List<? extends Object!> ls1, List<? extends String?> ls3) {\n+                                        ls1 = ls3;\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -331,0 +433,12 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Test {\n+                                    static value class Atom {}\n+                                    static class Box<X> {}\n+                                    void test(Box<? extends Atom!> t1, Box<Atom?> t2) {\n+                                        t1 = t2;\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -334,1 +448,0 @@\n-\n@@ -345,0 +458,12 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Wrapper<T> {}\n+                                class Test<T> {\n+                                    Wrapper<T?> newWrapper() { return null; }\n+                                    void m() {\n+                                        Wrapper<T!> w = newWrapper();\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -358,0 +483,12 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                import java.util.function.*;\n+                                class Test {\n+                                    void plot(Function<String?, String> f) {}\n+                                    void m(Function<String!, String> gradient) {\n+                                        plot(gradient);\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -371,0 +508,12 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                import java.util.function.*;\n+                                class Test {\n+                                    void plot(Function<String!, String> f) {}\n+                                    void m(Function<String?, String> gradient) {\n+                                        plot(gradient);\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -439,0 +588,16 @@\n+                                Result.Clean,\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Test {\n+                                    class Box<X> {}\n+                                    static value class Point { public implicit Point(); }\n+                                    @SafeVarargs\n+                                    private <Z> Z make_box_uni(Z... bs) {\n+                                        return bs[0];\n+                                    }\n+                                    void test(Box<Point!> bref, Box<Point?> bval) {\n+                                        Box<? extends Point!> res = make_box_uni(bref, bval);\n+                                    }\n+                                }\n+                                \"\"\",\n@@ -442,1 +607,0 @@\n-\n@@ -469,1 +633,2 @@\n-    public void testNoWarnings() {\n+    @Test\n+    void testNoWarnings() {\n@@ -584,3 +749,2 @@\n-                                        \/* we are testing that the compiler won't infer the arguments of\n-                                         * VarHandle::setVolatile as (Cell, String!)\n-                                         *\/\n+                                        \/\/ we are testing that the compiler won't infer the arguments of\n+                                        \/\/ VarHandle::setVolatile as (Cell, String!)\n@@ -590,3 +754,2 @@\n-                                        \/* if that were the case, see comment above, then this invocation would generate\n-                                         * a warning, VarHandle::setVolatile is a polymorphic signature method\n-                                         *\/\n+                                        \/\/ if that were the case, see comment above, then this invocation would generate\n+                                        \/\/ a warning, VarHandle::setVolatile is a polymorphic signature method\n@@ -658,1 +821,2 @@\n-    public void testOverridingWarnings() {\n+    @Test\n+    void testOverridingWarnings() {\n@@ -668,1 +832,1 @@\n-                                    abstract String lookup(String arg);\n+                                    abstract String? lookup(String arg);\n@@ -681,1 +845,1 @@\n-                                    abstract String lookup(Point arg);\n+                                    abstract String lookup(Point? arg);\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityCompilationTests.java","additions":218,"deletions":54,"binary":false,"changes":272,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    Point! o2;\n+    Point! o2 = new Point();\n@@ -164,1 +164,1 @@\n-    Point![]![]![]! oarr;\n+    Point![]![]![]! oarr = {{{new Point()}}};\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityParsingBangTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                        Test! t;\n+                        Test! t = new Test();\n@@ -123,1 +123,1 @@\n-                        List!<Test!> t;\n+                        List!<Test!> t = new ArrayList<>();\n@@ -140,1 +140,1 @@\n-                        T! t;\n+                        T! t = (T)new Object();\n@@ -164,1 +164,1 @@\n-                        String[]! t;\n+                        String[]! t = {\"\"};\n@@ -180,1 +180,1 @@\n-                        String?[]![]? t;\n+                        String?[]![]? t = {{\"\"}};\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilitySignatureAttrTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}