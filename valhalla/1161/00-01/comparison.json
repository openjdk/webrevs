{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    public void testValueBased(Path base) throws Exception {\n+    public void testLoadableDescField(Path base) throws Exception {\n@@ -88,0 +88,82 @@\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+\n+    @Test\n+    public void testLoadableDescMethodArg(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    void m(Val val) {}\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+\n+    @Test\n+    public void testLoadableDescReturnType(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    Val m() {\n+                        return null;\n+                    }\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"}]}