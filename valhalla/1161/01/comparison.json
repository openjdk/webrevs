{"files":[{"patch":"@@ -1054,1 +1054,1 @@\n-        public ClassType cloneWithMetadata(List<TypeMetadata> md) {\n+        protected ClassType cloneWithMetadata(List<TypeMetadata> md) {\n@@ -2372,1 +2372,1 @@\n-        public ErrorType cloneWithMetadata(List<TypeMetadata> md) {\n+        protected ErrorType cloneWithMetadata(List<TypeMetadata> md) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2674,2 +2674,1 @@\n-        boolean cIsValue = (c.tsym.flags() & VALUE_CLASS) != 0;\n-        Type identitySuper = null, valueSuper = null;\n+        Type identitySuper = null;\n@@ -2678,1 +2677,1 @@\n-                if ((t.tsym.flags() & IDENTITY_TYPE) != 0 && (t.tsym.flags() & VALUE_BASED) == 0)\n+                if (t.isIdentityClass() && (t.tsym.flags() & VALUE_BASED) == 0)\n@@ -2680,3 +2679,1 @@\n-                else if ((t.tsym.flags() & VALUE_CLASS) != 0)\n-                    valueSuper = t;\n-                if (cIsValue && identitySuper != null && identitySuper.tsym != syms.objectType.tsym) { \/\/ Object is special\n+                if (c.isValueClass() && identitySuper != null && identitySuper.tsym != syms.objectType.tsym) { \/\/ Object is special\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1024,0 +1024,3 @@\n+                if (preview.isPreview(Source.Feature.VALUE_CLASSES)) {\n+                    preview.markUsesPreview(null);\n+                }\n@@ -1029,0 +1032,3 @@\n+            if (preview.isPreview(Source.Feature.VALUE_CLASSES)) {\n+                preview.markUsesPreview(null);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1116,4 +1116,0 @@\n-        Type localType = v.erasure(types);\n-        if (localType.requiresLoadableDescriptors(env.enclClass.sym)) {\n-            poolWriter.enterLoadableDescriptorsClass(localType.tsym);\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -211,3 +211,3 @@\n-                                (select.name == names._this &&\n-                                        (currentClassSym == selectedClassSym ||\n-                                                !currentClassSym.isEnclosedBy(selectedClassSym))));\n+                        (select.name == names._this &&\n+                            (currentClassSym == selectedClassSym ||\n+                            !currentClassSym.isEnclosedBy(selectedClassSym))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    public void testValueBased(Path base) throws Exception {\n+    public void testLoadableDescField(Path base) throws Exception {\n@@ -88,0 +88,82 @@\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+\n+    @Test\n+    public void testLoadableDescMethodArg(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    void m(Val val) {}\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+\n+    @Test\n+    public void testLoadableDescReturnType(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    Val m() {\n+                        return null;\n+                    }\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        }\n+        } \/\/ return type is value type so should be preloaded\n@@ -60,1 +60,1 @@\n-            V5 v5 = null;  \/\/ preload value type used for local type.\n+            V5 v5 = null;  \/\/ no preload as value type is used for local type.\n@@ -73,1 +73,1 @@\n-    \/\/ So we expect ONLY V2, V3 V5, V7 to be in LoadableDescriptors list\n+    \/\/ So we expect ONLY V2, V3, V7 to be in LoadableDescriptors list\n@@ -87,2 +87,2 @@\n-        if (descriptors.number_of_descriptors != 4) {\n-            throw new AssertionError(\"Incorrect number of loadable descriptors\");\n+        if (descriptors.number_of_descriptors != 3) {\n+            throw new AssertionError(\"Incorrect number of loadable descriptors, found: \" + descriptors.number_of_descriptors);\n@@ -91,1 +91,1 @@\n-        int mask = 0x56;\n+        int mask = 7;\n@@ -94,1 +94,1 @@\n-                                  descriptors.descriptor_info_index[i]);\n+                                  descriptors.descriptors[i]);\n@@ -97,1 +97,1 @@\n-                    mask &= ~2; break;\n+                    mask &= ~1; break;\n@@ -99,3 +99,1 @@\n-                    mask &= ~4; break;\n-                case \"LLoadableDescriptorsAttributeTest$V5;\":\n-                    mask &= ~16; break;\n+                    mask &= ~2; break;\n@@ -103,1 +101,1 @@\n-                    mask &= ~64; break;\n+                    mask &= ~4; break;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttributeTest.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        CONSTANT_Utf8_info utf8Info = cls.constant_pool.getUTF8Info(LoadableDescriptors.descriptor_info_index[0]);\n+        CONSTANT_Utf8_info utf8Info = cls.constant_pool.getUTF8Info(LoadableDescriptors.descriptors[0]);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryLoadableDescriptorsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}