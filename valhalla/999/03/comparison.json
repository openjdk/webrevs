{"files":[{"patch":"@@ -5239,0 +5239,1 @@\n+  lea(inline_klass, Address(inline_klass, Array<InlineKlass*>::base_offset_in_bytes()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4588,1 +4588,1 @@\n-  movptr(inline_klass, Address(inline_klass, index, Address::times_ptr));\n+  movptr(inline_klass, Address(inline_klass, index, Address::times_ptr, Array<InlineKlass*>::base_offset_in_bytes()));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4066,0 +4066,1 @@\n+  this_klass->set_inline_type_field_klasses_array(_inline_type_field_klasses);\n@@ -4969,1 +4970,0 @@\n-        \/\/ if (_cp->tag_at(_preload_classes->at(i)).is_klass()) continue;\n@@ -5520,0 +5520,1 @@\n+  assert(nullptr == _inline_type_field_klasses, \"invariant\");\n@@ -5671,2 +5672,2 @@\n-        Klass* k = _inline_type_field_klasses->at(fs.index());\n-        ik->set_inline_type_field_klass(fs.index(), k);\n+        Klass* k = ik->inline_type_field_klasses_array()->at(fs.index());\n+        assert(k->is_inline_klass(), \"must be\");\n@@ -5892,0 +5893,1 @@\n+  _inline_type_field_klasses = nullptr;\n@@ -6266,1 +6268,1 @@\n-                       SystemDictionary::resolve_super_or_fail(_class_name,\n+                       SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name,\n@@ -6353,1 +6355,1 @@\n-        interf = SystemDictionary::resolve_super_or_fail(\n+        interf = SystemDictionary::resolve_with_circularity_detection_or_fail(\n@@ -6423,0 +6425,1 @@\n+      if (fieldinfo.access_flags().is_static()) continue;  \/\/ Only non-static fields are processed at load time\n@@ -6424,5 +6427,13 @@\n-      if (fieldinfo.field_flags().is_null_free_inline_type() && !fieldinfo.access_flags().is_static()) {\n-        \/\/ Pre-load classes of fields that are candidate for flattening\n-        Klass* klass = SystemDictionary::resolve_inline_type_field_or_fail(sig,\n-            Handle(THREAD, _loader_data->class_loader()),\n-            _protection_domain, true, CHECK);\n+      if (fieldinfo.field_flags().is_null_free_inline_type()) {\n+        \/\/ Pre-load classes of null-free fields that are candidate for flattening\n+        TempNewSymbol s = Signature::strip_envelope(sig);\n+        if (s == _class_name) {\n+          THROW_MSG(vmSymbols::java_lang_ClassCircularityError(), err_msg(\"Class %s cannot have a null-free non-static field of its own type\", _class_name->as_C_string()));\n+        }\n+        log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: a null-free non-static field is declared with this type\", s->as_C_string(), _class_name->as_C_string());\n+        Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, s, Handle(THREAD, _loader_data->class_loader()), _protection_domain, false, THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) failed: %s\",\n+                                      s->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+          return; \/\/ Exception is still pending\n+        }\n@@ -6431,1 +6442,0 @@\n-          assert(klass->is_instance_klass(), \"Sanity check\");\n@@ -6434,1 +6444,1 @@\n-                    err_msg(\"Class %s expects class %s to be concrete value type, but it is an identity class\",\n+                    err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n@@ -6448,1 +6458,0 @@\n-          ResourceMark rm(THREAD);\n@@ -6450,3 +6459,2 @@\n-                    err_msg(\"Class %s expects class %s to be implicitly constructible, but it is not\",\n-                    _class_name->as_C_string(),\n-                    InstanceKlass::cast(klass)->external_name()));\n+                    err_msg(\"class %s is not implicitly constructible and it is used in a null restricted non-static field (not supported)\",\n+                    klass->name()->as_C_string()));\n@@ -6454,3 +6462,8 @@\n-        _inline_type_field_klasses->at_put(fieldinfo.index(), InlineKlass::cast(klass));\n-      } else {\n-        if (sig != _class_name && is_class_in_preload_attribute(sig)) {\n+        _inline_type_field_klasses->at_put(fieldinfo.index(), vk);\n+        log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) succeeded\", s->as_C_string(), _class_name->as_C_string());\n+      } else if (Signature::has_envelope(sig)) {\n+        \/\/ Preloading classes for nullable fields that are listed in the Preload attribute\n+        \/\/ Those classes would be required later for the flattening of nullable inline type fields\n+        TempNewSymbol name = Signature::strip_envelope(sig);\n+        if (name != _class_name && is_class_in_preload_attribute(name)) {\n+          log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: field type in Preload attribute\", name->as_C_string(), _class_name->as_C_string());\n@@ -6458,5 +6471,1 @@\n-          Klass* klass = SystemDictionary::resolve_or_null(sig, Handle(THREAD, loader), _protection_domain, THREAD);\n-          if (HAS_PENDING_EXCEPTION) {\n-            CLEAR_PENDING_EXCEPTION;\n-          }\n-          \/\/ Should we verify that klass is a value class? What the PreLoad attribute spec says about that?\n+          Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, name, Handle(THREAD, loader), _protection_domain, false, THREAD);\n@@ -6466,1 +6475,1 @@\n-              log_info(class, preload)(\"Preloading class %s during linking of class %s because of its Preload attribute\", sig->as_C_string(), _class_name->as_C_string());\n+              log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in Preload attribute) succeeded\", name->as_C_string(), _class_name->as_C_string());\n@@ -6468,1 +6477,2 @@\n-              log_info(class, preload)(\"Preloading class %s during linking of class %s because of its Preload attribute but loaded class is not a value class\", sig->as_C_string(), _class_name->as_C_string());\n+              \/\/ Non value class are allowed by the current spec, but it could be an indication of an issue so let's log a warning\n+              log_warning(class, preload)(\"Preloading class %s during loading of class %s (cause: field type in Preload attribute) but loaded class is not a value class\", name->as_C_string(), _class_name->as_C_string());\n@@ -6470,2 +6480,7 @@\n-          } else {\n-            log_warning(class, preload)(\"Preloading of class %s during linking of class %s (Preload attribute) failed\", sig->as_C_string(), _class_name->as_C_string());\n+            } else {\n+            log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in Preload attribute) failed : %s\",\n+                                          name->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+          }\n+          \/\/ Loads triggered by the preload attribute are speculative, failures must not impact loading of current class\n+          if (HAS_PENDING_EXCEPTION) {\n+            CLEAR_PENDING_EXCEPTION;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":43,"deletions":28,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-    case PlaceholderTable::LOAD_SUPER:\n-       queuehead = _superThreadQ;\n+    case PlaceholderTable::DETECT_CIRCULARITY:\n+       queuehead = _circularityThreadQ;\n@@ -106,3 +106,0 @@\n-    case PlaceholderTable::PRIMITIVE_OBJECT_FIELD:\n-       queuehead = _inlineTypeFieldQ;\n-       break;\n@@ -119,2 +116,2 @@\n-    case PlaceholderTable::LOAD_SUPER:\n-       _superThreadQ = seenthread;\n+    case PlaceholderTable::DETECT_CIRCULARITY:\n+       _circularityThreadQ = seenthread;\n@@ -125,3 +122,0 @@\n-    case PlaceholderTable::PRIMITIVE_OBJECT_FIELD:\n-       _inlineTypeFieldQ = seenthread;\n-       break;\n@@ -199,1 +193,1 @@\n-void PlaceholderEntry::set_supername(Symbol* supername) {\n+void PlaceholderEntry::set_next_klass_name(Symbol* next_klass_name) {\n@@ -201,2 +195,2 @@\n-  assert(_supername == nullptr || _supername->refcount() > 1, \"must be referenced also by the loader\");\n-  _supername = supername;\n+  assert(_next_klass_name == nullptr || _next_klass_name->refcount() > 1, \"must be referenced also by the loader\");\n+  _next_klass_name = next_klass_name;\n@@ -210,1 +204,1 @@\n-                            Symbol* supername){\n+                            Symbol* next_klass_name){\n@@ -215,1 +209,1 @@\n-  entry.set_supername(supername);\n+  entry.set_next_klass_name(next_klass_name);\n@@ -241,1 +235,1 @@\n-  case PlaceholderTable::LOAD_SUPER:    return \"LOAD_SUPER\";\n+  case PlaceholderTable::DETECT_CIRCULARITY:    return \"DETECT_CIRCULARITY\";\n@@ -243,1 +237,0 @@\n-  case PlaceholderTable::PRIMITIVE_OBJECT_FIELD: return \"PRIMITIVE_OBJECT_FIELD\";\n@@ -262,1 +255,1 @@\n-\/\/ If LOAD_SUPER, this is used for circularity detection for instanceklass loading.\n+\/\/ If DETECT_CIRCULARITY, this is used for circularity detection for instanceklass loading.\n@@ -266,1 +259,1 @@\n-                                                 Symbol* supername,\n+                                                 Symbol* next_klass_name,\n@@ -268,1 +261,1 @@\n-  assert(action != LOAD_SUPER || supername != nullptr, \"must have a super class name\");\n+  assert(action != DETECT_CIRCULARITY || next_klass_name != nullptr, \"must have a super class name\");\n@@ -272,1 +265,1 @@\n-    probe = add_entry(name, loader_data, supername);\n+    probe = add_entry(name, loader_data, next_klass_name);\n@@ -274,2 +267,2 @@\n-    if (action == LOAD_SUPER) {\n-      probe->set_supername(supername);\n+    if (action == DETECT_CIRCULARITY) {\n+      probe->set_next_klass_name(next_klass_name);\n@@ -308,1 +301,1 @@\n-    probe->set_supername(nullptr);\n+    probe->set_next_klass_name(nullptr);\n@@ -312,2 +305,1 @@\n-      && (probe->defineThreadQ() == nullptr) && (probe->definer() == nullptr)\n-      && (probe->inlineTypeFieldQ() == nullptr)) {\n+      && (probe->defineThreadQ() == nullptr) && (probe->definer() == nullptr)) {\n@@ -325,3 +317,3 @@\n-  if (supername() != nullptr) {\n-    st->print(\", supername \");\n-    supername()->print_value_on(st);\n+  if (next_klass_name() != nullptr) {\n+    st->print(\", next_klass_name \");\n+    next_klass_name()->print_value_on(st);\n@@ -347,3 +339,0 @@\n-  st->print(\"inlineTypeFieldQ threads:\");\n-  SeenThread::print_action_queue(inlineTypeFieldQ(), st);\n-  st->cr();\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-  \/\/ multiple LOAD_SUPER threads can proceed in parallel\n-  \/\/ LOAD_SUPER needed to check for class circularity\n+  \/\/ multiple DETECT_CIRCULARITY threads can proceed in parallel\n+  \/\/ DETECT_CIRCULARITY needed to check for class circularity\n@@ -53,3 +53,2 @@\n-    LOAD_SUPER = 2,                \/\/ loading superclass for this class\n-    DEFINE_CLASS = 3,              \/\/ find_or_define class\n-    PRIMITIVE_OBJECT_FIELD = 4     \/\/ primitive object fields\n+    DETECT_CIRCULARITY = 2,        \/\/ loading while detecting class circularity\n+    DEFINE_CLASS = 3               \/\/ find_or_define class\n@@ -86,1 +85,1 @@\n-  SymbolHandle      _supername;\n+  SymbolHandle      _next_klass_name;\n@@ -89,1 +88,1 @@\n-  SeenThread*       _superThreadQ;  \/\/ doubly-linked queue of Threads loading a superclass for this class\n+  SeenThread*       _circularityThreadQ;  \/\/ doubly-linked queue of Threads loading with circularity detection\n@@ -98,1 +97,0 @@\n-  SeenThread*       _inlineTypeFieldQ;  \/\/ queue of inline types for circularity checking\n@@ -105,2 +103,2 @@\n-  SeenThread*        superThreadQ()        const { return _superThreadQ; }\n-  void               set_superThreadQ(SeenThread* SeenThread) { _superThreadQ = SeenThread; }\n+  SeenThread*        superThreadQ()        const { return _circularityThreadQ; }\n+  void               set_superThreadQ(SeenThread* SeenThread) { _circularityThreadQ = SeenThread; }\n@@ -116,2 +114,1 @@\n-     _superThreadQ(nullptr), _loadInstanceThreadQ(nullptr), _defineThreadQ(nullptr),\n-     _inlineTypeFieldQ(nullptr) { }\n+     _circularityThreadQ(nullptr), _loadInstanceThreadQ(nullptr), _defineThreadQ(nullptr) { }\n@@ -119,2 +116,2 @@\n-  Symbol*            supername()           const { return _supername; }\n-  void               set_supername(Symbol* supername);\n+  Symbol*            next_klass_name()           const { return _next_klass_name; }\n+  void               set_next_klass_name(Symbol* next_klass_name);\n@@ -128,5 +125,2 @@\n-  SeenThread*        inlineTypeFieldQ()    const { return _inlineTypeFieldQ; }\n-  void               set_inlineTypeFieldQ(SeenThread* SeenThread) { _inlineTypeFieldQ = SeenThread; }\n-\n-  bool super_load_in_progress() {\n-     return (_superThreadQ != nullptr);\n+  bool circularity_detection_in_progress() {\n+     return (_circularityThreadQ != nullptr);\n@@ -143,4 +137,0 @@\n-  bool inline_type_field_in_progress() {\n-    return (_inlineTypeFieldQ != nullptr);\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -405,2 +405,2 @@\n-\/\/ resolve_super_or_fail adds a LOAD_SUPER placeholder to the placeholder table before calling\n-\/\/ resolve_instance_class_or_null. ClassCircularityError is detected when a LOAD_SUPER or LOAD_INSTANCE\n+\/\/ resolve_with_circularity_detection_or_fail adds a DETECT_CIRCULARITY placeholder to the placeholder table before calling\n+\/\/ resolve_instance_class_or_null. ClassCircularityError is detected when a DETECT_CIRCULARITY or LOAD_INSTANCE\n@@ -410,2 +410,2 @@\n-InstanceKlass* SystemDictionary::resolve_super_or_fail(Symbol* class_name,\n-                                                       Symbol* super_name,\n+InstanceKlass* SystemDictionary::resolve_with_circularity_detection_or_fail(Symbol* class_name,\n+                                                       Symbol* next_name,\n@@ -417,2 +417,2 @@\n-  assert(super_name != nullptr, \"null superclass for resolving\");\n-  assert(!Signature::is_array(super_name), \"invalid superclass name\");\n+  assert(next_name != nullptr, \"null superclass for resolving\");\n+  assert(!Signature::is_array(next_name), \"invalid superclass name\");\n@@ -423,1 +423,1 @@\n-                           super_name, is_superclass);\n+                           next_name, is_superclass);\n@@ -445,1 +445,1 @@\n-    \/\/ if the super_name matches class->super()->name() and if the class loaders match.\n+    \/\/ if the next_name matches class->super()->name() and if the class loaders match.\n@@ -449,1 +449,1 @@\n-         ((quicksuperk->name() == super_name) &&\n+         ((quicksuperk->name() == next_name) &&\n@@ -455,1 +455,1 @@\n-      if (probe && probe->check_seen_thread(THREAD, PlaceholderTable::LOAD_SUPER)) {\n+      if (probe && probe->check_seen_thread(THREAD, PlaceholderTable::DETECT_CIRCULARITY)) {\n@@ -465,2 +465,2 @@\n-                                                                  PlaceholderTable::LOAD_SUPER,\n-                                                                  super_name, THREAD);\n+                                                                  PlaceholderTable::DETECT_CIRCULARITY,\n+                                                                  next_name, THREAD);\n@@ -477,1 +477,1 @@\n-    SystemDictionary::resolve_instance_class_or_null(super_name,\n+    SystemDictionary::resolve_instance_class_or_null(next_name,\n@@ -485,1 +485,1 @@\n-    PlaceholderTable::find_and_remove(class_name, loader_data, PlaceholderTable::LOAD_SUPER, THREAD);\n+    PlaceholderTable::find_and_remove(class_name, loader_data, PlaceholderTable::DETECT_CIRCULARITY, THREAD);\n@@ -491,1 +491,1 @@\n-    handle_resolution_exception(super_name, true, CHECK_NULL);\n+    handle_resolution_exception(next_name, true, CHECK_NULL);\n@@ -497,43 +497,0 @@\n-Klass* SystemDictionary::resolve_inline_type_field_or_fail(Symbol* signature,\n-                                                           Handle class_loader,\n-                                                           Handle protection_domain,\n-                                                           bool throw_error,\n-                                                           TRAPS) {\n-  Symbol* class_name = signature->fundamental_name(THREAD);\n-  class_loader = Handle(THREAD, java_lang_ClassLoader::non_reflection_class_loader(class_loader()));\n-  ClassLoaderData* loader_data = class_loader_data(class_loader);\n-  bool throw_circularity_error = false;\n-  PlaceholderEntry* oldprobe;\n-\n-  {\n-    MutexLocker mu(THREAD, SystemDictionary_lock);\n-    oldprobe = PlaceholderTable::get_entry(class_name, loader_data);\n-    if (oldprobe != nullptr &&\n-      oldprobe->check_seen_thread(THREAD, PlaceholderTable::PRIMITIVE_OBJECT_FIELD)) {\n-      throw_circularity_error = true;\n-\n-    } else {\n-      PlaceholderTable::find_and_add(class_name, loader_data,\n-                                   PlaceholderTable::PRIMITIVE_OBJECT_FIELD, nullptr, THREAD);\n-    }\n-  }\n-\n-  Klass* klass = nullptr;\n-  if (!throw_circularity_error) {\n-    klass = SystemDictionary::resolve_or_fail(class_name, class_loader,\n-                                               protection_domain, true, THREAD);\n-  } else {\n-    ResourceMark rm(THREAD);\n-    THROW_MSG_NULL(vmSymbols::java_lang_ClassCircularityError(), class_name->as_C_string());\n-  }\n-\n-  {\n-    MutexLocker mu(THREAD, SystemDictionary_lock);\n-    PlaceholderTable::find_and_remove(class_name, loader_data,\n-                                      PlaceholderTable::PRIMITIVE_OBJECT_FIELD, THREAD);\n-  }\n-\n-  class_name->decrement_refcount();\n-  return klass;\n-}\n-\n@@ -552,1 +509,1 @@\n-  Klass* superk = SystemDictionary::resolve_super_or_fail(name,\n+  Klass* superk = SystemDictionary::resolve_with_circularity_detection_or_fail(name,\n@@ -556,1 +513,1 @@\n-                                                          true,\n+                                                          false,\n@@ -585,1 +542,1 @@\n-             (oldprobe->instance_load_in_progress() || oldprobe->super_load_in_progress())) {\n+             (oldprobe->instance_load_in_progress() || oldprobe->circularity_detection_in_progress())) {\n@@ -656,1 +613,1 @@\n-  bool super_load_in_progress  = false;\n+  bool circularity_detection_in_progress  = false;\n@@ -674,3 +631,3 @@\n-      if (placeholder != nullptr && placeholder->super_load_in_progress()) {\n-         super_load_in_progress = true;\n-         superclassname = placeholder->supername();\n+      if (placeholder != nullptr && placeholder->circularity_detection_in_progress()) {\n+         circularity_detection_in_progress = true;\n+         superclassname = placeholder->next_klass_name();\n@@ -684,1 +641,1 @@\n-  if (super_load_in_progress) {\n+  if (circularity_detection_in_progress) {\n@@ -1101,1 +1058,1 @@\n-  Klass *found = resolve_super_or_fail(klass->name(), super_type->name(),\n+  Klass *found = resolve_with_circularity_detection_or_fail(klass->name(), super_type->name(),\n@@ -1190,1 +1147,0 @@\n-\n@@ -1193,0 +1149,1 @@\n+      if (fs.access_flags().is_static()) continue;\n@@ -1195,4 +1152,17 @@\n-        if (!fs.access_flags().is_static()) {\n-          \/\/ Pre-load inline class\n-          Klass* real_k = SystemDictionary::resolve_inline_type_field_or_fail(sig,\n-            class_loader, protection_domain, true, CHECK_NULL);\n+        \/\/ Pre-load inline class\n+        TempNewSymbol name = Signature::strip_envelope(sig);\n+        Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+          class_loader, protection_domain, false, CHECK_NULL);\n+        Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());\n+        if (real_k != k) {\n+          \/\/ oops, the app has substituted a different version of k!\n+          return nullptr;\n+        }\n+      } else if (Signature::has_envelope(sig)) {\n+        TempNewSymbol name = Signature::strip_envelope(sig);\n+        if (name != ik->name() && ik->is_class_in_preload_attribute(name)) {\n+          Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+            class_loader, protection_domain, false, THREAD);\n+          if (HAS_PENDING_EXCEPTION) {\n+            CLEAR_PENDING_EXCEPTION;\n+          }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":42,"deletions":72,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  static InstanceKlass* resolve_super_or_fail(Symbol* class_name,\n+  static InstanceKlass* resolve_with_circularity_detection_or_fail(Symbol* class_name,\n@@ -136,5 +136,0 @@\n-  static Klass* resolve_inline_type_field_or_fail(Symbol* signature,\n-                                                  Handle class_loader,\n-                                                  Handle protection_domain,\n-                                                  bool throw_error,\n-                                                  TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-      klass->set_inline_type_field_klass(index, field_k);\n+      klass->set_inline_type_field_klass(index, InlineKlass::cast(field_k));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-  address adr_jf = adr_inline_type_field_klasses();\n-  if (adr_jf != nullptr) {\n-    return (InlineKlassFixedBlock*)(adr_jf + this->java_fields_count() * sizeof(Klass*));\n-  }\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,0 +175,9 @@\n+bool InstanceKlass::is_class_in_preload_attribute(Symbol* name) const {\n+  if (_preload_classes == nullptr) return false;\n+  for (int i = 0; i < _preload_classes->length(); i++) {\n+        Symbol* class_name = _constants->klass_at_noresolve(_preload_classes->at(i));\n+        if (class_name == name) return true;\n+  }\n+  return false;\n+}\n+\n@@ -448,1 +457,0 @@\n-                                       parser.has_inline_fields() ? parser.java_fields_count() : 0,\n@@ -577,4 +585,0 @@\n-\n-  if (has_inline_type_fields()) {\n-    _inline_type_field_klasses = (const Klass**) adr_inline_type_field_klasses();\n-  }\n@@ -716,0 +720,5 @@\n+  if (inline_type_field_klasses_array() != nullptr) {\n+    MetadataFactory::free_array<InlineKlass*>(loader_data, inline_type_field_klasses_array());\n+  }\n+  set_inline_type_field_klasses_array(nullptr);\n+\n@@ -960,0 +969,38 @@\n+    for (AllFieldStream fs(this); !fs.done(); fs.next()) {\n+      if (fs.is_null_free_inline_type() && fs.access_flags().is_static()) {\n+        Symbol* sig = fs.signature();\n+        TempNewSymbol s = Signature::strip_envelope(sig);\n+        if (s != name()) {\n+          log_info(class, preload)(\"Preloading class %s during linking of class %s. Cause: a null-free static field is declared with this type\", s->as_C_string(), name()->as_C_string());\n+          Klass* klass = SystemDictionary::resolve_or_fail(s,\n+                                                          Handle(THREAD, class_loader()), Handle(THREAD, protection_domain()), true,\n+                                                          CHECK_false);\n+          if (HAS_PENDING_EXCEPTION) {\n+            log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: null-free static field) failed: %s\",\n+                                      s->as_C_string(), name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+            return false; \/\/ Exception is still pending\n+          }\n+          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: null-free static field) succeeded\",\n+                                   s->as_C_string(), name()->as_C_string());\n+          assert(klass != nullptr, \"Sanity check\");\n+          if (!klass->is_inline_klass()) {\n+            THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                       err_msg(\"class %s expects class %s to be a value class but it is an identity class\",\n+                       name()->as_C_string(), klass->external_name()), false);\n+          }\n+          if (klass->is_abstract()) {\n+            THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                      err_msg(\"Class %s expects class %s to be concrete value class, but it is an abstract class\",\n+                      name()->as_C_string(),\n+                      InstanceKlass::cast(klass)->external_name()), false);\n+          }\n+          InstanceKlass* ik = InstanceKlass::cast(klass);\n+          if (!ik->is_implicitly_constructible()) {\n+             THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                        err_msg(\"class %s is not implicitly constructible and it is used in a null restricted static field (not supported)\",\n+                        klass->external_name()), false);\n+          }\n+          \/\/ the inline_type_field_klass_array is not updated because of CDS (see verifications in SystemDictionary::load_shared_class())\n+        }\n+      }\n+    }\n@@ -966,0 +1013,1 @@\n+        log_info(class, preload)(\"Preloading class %s during linking of class %s because of the class is listed in the Preload attribute\", class_name->as_C_string(), name()->as_C_string());\n@@ -974,1 +1022,5 @@\n-          log_info(class, preload)(\"Preloading class %s during linking of class %s because of its Preload attribute\", class_name->as_C_string(), name()->as_C_string());\n+          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: Preload attribute) succeeded\", class_name->as_C_string(), name()->as_C_string());\n+          if (!klass->is_inline_klass()) {\n+            \/\/ Non value class are allowed by the current spec, but it could be an indication of an issue so let's log a warning\n+              log_warning(class, preload)(\"Preloading class %s during linking of class %s (cause: Preload attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n+          }\n@@ -976,30 +1028,1 @@\n-          log_warning(class, preload)(\"Preloading of class %s during linking of class %s (Preload attribute) failed\", class_name->as_C_string(), name()->as_C_string());\n-        }\n-      }\n-    }\n-\n-    for (AllFieldStream fs(this); !fs.done(); fs.next()) {\n-      if (fs.is_null_free_inline_type() && fs.access_flags().is_static()) {\n-        Symbol* sig = fs.signature();\n-        oop loader = class_loader();\n-        oop protection_domain = this->protection_domain();\n-        Klass* klass = SystemDictionary::resolve_or_fail(sig,\n-                                                        Handle(THREAD, loader), Handle(THREAD, protection_domain), true,\n-                                                        CHECK_false);\n-        if (klass == nullptr) {\n-          THROW_(vmSymbols::java_lang_LinkageError(), false);\n-        }\n-        if (!klass->is_inline_klass()) {\n-          Exceptions::fthrow(\n-            THREAD_AND_LOCATION,\n-            vmSymbols::java_lang_IncompatibleClassChangeError(),\n-            \"class %s is not an inline type\",\n-            klass->external_name());\n-        }\n-        InstanceKlass* ik = InstanceKlass::cast(klass);\n-        if (!ik->is_implicitly_constructible()) {\n-          Exceptions::fthrow(\n-            THREAD_AND_LOCATION,\n-            vmSymbols::java_lang_IncompatibleClassChangeError(),\n-            \"class %s is not implicitly constructible and it is used in a null restricted static field (not supported)\",\n-            klass->external_name());\n+          log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: Preload attribute) failed\", class_name->as_C_string(), name()->as_C_string());\n@@ -1362,1 +1385,2 @@\n-          set_inline_type_field_klass(fs.index(), klass);\n+          assert(klass->is_inline_klass(), \"Must be\");\n+          set_inline_type_field_klass(fs.index(), InlineKlass::cast(klass));\n@@ -2813,3 +2837,1 @@\n-    for (int i = 0; i < java_fields_count(); i++) {\n-      it->push(&((Klass**)adr_inline_type_field_klasses())[i]);\n-    }\n+    it->push(&_inline_type_field_klasses);\n@@ -2860,8 +2882,0 @@\n-  if (has_inline_type_fields()) {\n-    for (AllFieldStream fs(this); !fs.done(); fs.next()) {\n-      if (fs.is_null_free_inline_type()) {\n-        reset_inline_type_field_klass(fs.index());\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":62,"deletions":48,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-\/\/    [EMBEDDED inline_type_field_klasses] only if has_inline_fields() == true\n@@ -301,1 +300,1 @@\n-  const Klass**   _inline_type_field_klasses; \/\/ For \"inline class\" fields, null if none present\n+  Array<InlineKlass*>* _inline_type_field_klasses; \/\/ For \"inline class\" fields, null if none present\n@@ -441,2 +440,2 @@\n-  int     field_offset      (int index) const { return field(index).offset(); }\n-  int     field_access_flags(int index) const { return field(index).access_flags().as_int(); }\n+  int field_offset      (int index) const { return field(index).offset(); }\n+  int field_access_flags(int index) const { return field(index).access_flags().as_int(); }\n@@ -447,2 +446,3 @@\n-  bool    field_is_flat(int index) const { return field_flags(index).is_flat(); }\n-  bool    field_is_null_free_inline_type(int index) const;\n+  bool field_is_flat(int index) const { return field_flags(index).is_flat(); }\n+  bool field_is_null_free_inline_type(int index) const;\n+  bool is_class_in_preload_attribute(Symbol* name) const;\n@@ -998,1 +998,1 @@\n-                  int java_fields, bool is_inline_type) {\n+                  bool is_inline_type) {\n@@ -1004,1 +1004,0 @@\n-           (java_fields * (int)sizeof(Klass*)\/wordSize) +\n@@ -1012,1 +1011,0 @@\n-                                               has_inline_type_fields() ? java_fields_count() : 0,\n@@ -1027,4 +1025,6 @@\n-  inline address adr_inline_type_field_klasses() const;\n-  inline Klass* get_inline_type_field_klass(int idx) const;\n-  inline Klass* get_inline_type_field_klass_or_null(int idx) const;\n-  inline void set_inline_type_field_klass(int idx, Klass* k);\n+  Array<InlineKlass*>* inline_type_field_klasses_array() const { return _inline_type_field_klasses; }\n+  void set_inline_type_field_klasses_array(Array<InlineKlass*>* array) { _inline_type_field_klasses = array; }\n+\n+  inline InlineKlass* get_inline_type_field_klass(int idx) const;\n+  inline InlineKlass* get_inline_type_field_klass_or_null(int idx) const;\n+  inline void set_inline_type_field_klass(int idx, InlineKlass* k);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -66,14 +66,1 @@\n-inline address InstanceKlass::adr_inline_type_field_klasses() const {\n-  if (has_inline_type_fields()) {\n-    InstanceKlass* volatile* adr_impl = adr_implementor();\n-    if (adr_impl != nullptr) {\n-      return (address)(adr_impl + 1);\n-    }\n-\n-    return (address)end_of_nonstatic_oop_maps();\n-  } else {\n-    return nullptr;\n-  }\n-}\n-\n-inline Klass* InstanceKlass::get_inline_type_field_klass(int idx) const {\n+inline InlineKlass* InstanceKlass::get_inline_type_field_klass(int idx) const {\n@@ -82,1 +69,1 @@\n-  Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];\n+  InlineKlass* k = inline_type_field_klasses_array()->at(idx);\n@@ -84,1 +71,0 @@\n-  assert(k->is_inline_klass(), \"Must be an inline type\");\n@@ -88,1 +74,1 @@\n-inline Klass* InstanceKlass::get_inline_type_field_klass_or_null(int idx) const {\n+inline InlineKlass* InstanceKlass::get_inline_type_field_klass_or_null(int idx) const {\n@@ -91,2 +77,1 @@\n-  Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];\n-  assert(k == nullptr || k->is_inline_klass(), \"Must be an inline type\");\n+  InlineKlass* k = inline_type_field_klasses_array()->at(idx);\n@@ -96,1 +81,1 @@\n-inline void InstanceKlass::set_inline_type_field_klass(int idx, Klass* k) {\n+inline void InstanceKlass::set_inline_type_field_klass(int idx, InlineKlass* k) {\n@@ -100,2 +85,3 @@\n-  assert(((Klass**)adr_inline_type_field_klasses())[idx] == nullptr, \"Should not be set twice\");\n-  ((Klass**)adr_inline_type_field_klasses())[idx] = k;\n+  assert(inline_type_field_klasses_array() != nullptr, \"array must have been created\");\n+  assert(inline_type_field_klasses_array()->at(idx) == nullptr, \"Should not be set twice\");\n+  inline_type_field_klasses_array()->at_put(idx, k);\n@@ -107,1 +93,1 @@\n-  ((Klass**)adr_inline_type_field_klasses())[idx] = nullptr;\n+  inline_type_field_klasses_array()->at_put(idx, nullptr);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    PlaceholderTable::classloadAction super_action = PlaceholderTable::LOAD_SUPER;\n+    PlaceholderTable::classloadAction super_action = PlaceholderTable::DETECT_CIRCULARITY;\n@@ -74,1 +74,1 @@\n-    SymbolHandle supername = placeholder->supername();\n+    SymbolHandle supername = placeholder->next_klass_name();\n@@ -89,1 +89,1 @@\n-    supername = placeholder->supername();\n+    supername = placeholder->next_klass_name();\n","filename":"test\/hotspot\/gtest\/classfile\/test_placeholders.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,491 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test PreloadCircularityTest\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @library \/test\/lib\n+ * @compile PreloadCircularityTest.java\n+ * @run main\/othervm -XX:+EnableValhalla PreloadCircularityTest\n+ *\/\n+\n+ import java.lang.reflect.Method;\n+ import java.util.ArrayList;\n+ import java.util.Collections;\n+ import java.util.List;\n+\n+import javax.management.relation.RelationServiceNotRegisteredException;\n+\n+ import jdk.internal.value.ValueClass;\n+ import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+ import jdk.internal.vm.annotation.LooselyConsistentValue;\n+ import jdk.internal.vm.annotation.NullRestricted;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class PreloadCircularityTest {\n+\n+    \/\/ Testing preload due to non-static fields\n+\n+    static value class Class0a {\n+        @NullRestricted\n+        Class0b vb = new Class0b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class0b {\n+        @NullRestricted\n+        Class0c vc = new Class0c();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class0c {\n+        int i = 0;\n+    }\n+\n+    void test_0() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class0a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class0b during loading of class PreloadCircularityTest$Class0a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class0c during loading of class PreloadCircularityTest$Class0b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class0c during loading of class PreloadCircularityTest$Class0b (cause: null-free non-static field) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class0b during loading of class PreloadCircularityTest$Class0a (cause: null-free non-static field) succeeded\");\n+        out.shouldNotContain(\"(cause: null-free non-static field) failed\");\n+    }\n+\n+    static value class Class1a {\n+        @NullRestricted\n+        Class1b vb = new Class1b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class1b {\n+        Class1c vc = new Class1c();\n+    }\n+\n+    static value class Class1c {\n+        int i = 0;\n+    }\n+\n+    void test_1() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class1a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1b during loading of class PreloadCircularityTest$Class1a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b (cause: field type in Preload attribute) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1b during loading of class PreloadCircularityTest$Class1a (cause: null-free non-static field) succeeded\");\n+    }\n+\n+    static value class Class2a {\n+        @NullRestricted\n+        Class2b vb = new Class2b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class2b {\n+        @NullRestricted\n+        Class2c vc = new Class2c();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class2c {\n+        @NullRestricted\n+        Class2b vb = new Class2b();\n+    }\n+\n+    void test_2() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class2a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2c during loading of class PreloadCircularityTest$Class2b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2c (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class2c during loading of class PreloadCircularityTest$Class2b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2a (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+    }\n+\n+    static value class Class3a {\n+        @NullRestricted\n+        Class3b vb = new Class3b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class3b {\n+        @NullRestricted\n+        Class3c vc = new Class3c();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class3c {\n+        Class3b vb = new Class3b();\n+    }\n+\n+    void test_3() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class3a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3c during loading of class PreloadCircularityTest$Class3b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class3c during loading of class PreloadCircularityTest$Class3b (cause: null-free non-static field) succeeded\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3a (cause: null-free non-static field) succeeded\");\n+    }\n+\n+    static value class Class4a {\n+        @NullRestricted\n+        Class4b vb = new Class4b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class4b {\n+        @NullRestricted\n+        Class4a vc = new Class4a();\n+    }\n+\n+    void test_4() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class4a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class4b during loading of class PreloadCircularityTest$Class4a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class4a during loading of class PreloadCircularityTest$Class4b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class4a during loading of class PreloadCircularityTest$Class4b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class4b during loading of class PreloadCircularityTest$Class4a (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+    }\n+\n+    static value class Class5a {\n+        Class5b vb = new Class5b();\n+\n+        @NullRestricted\n+        Class5c vc = new Class5c();\n+    }\n+\n+    static value class Class5b {\n+        @NullRestricted\n+        Class5d vd = new Class5d();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class5c {\n+        Class5b vb = new Class5b();\n+    }\n+\n+    static value class Class5d {\n+        @NullRestricted\n+        Class5b vb = new Class5b();\n+    }\n+\n+    void test_5() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class5a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5c during loading of class PreloadCircularityTest$Class5a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class5c during loading of class PreloadCircularityTest$Class5a (cause: null-free non-static field) succeeded\");\n+    }\n+\n+    static value class Class6a {\n+        @NullRestricted\n+        Class6b vb = new Class6b();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class6b {\n+        Class6c vc = new Class6c();\n+\n+        @NullRestricted\n+        Class6d vd = new Class6d();\n+    }\n+\n+    static value class Class6c {\n+        int i = 0;\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class6d {\n+        @NullRestricted\n+        Class6b vb = new Class6b();\n+    }\n+\n+    void test_6() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class6a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b (cause: field type in Preload attribute) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6d during loading of class PreloadCircularityTest$Class6b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6d (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class6d during loading of class PreloadCircularityTest$Class6b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6a (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class7a {\n+        @NullRestricted\n+        Class7a va = new Class7a();\n+    }\n+\n+    void test_7() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class7a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldNotContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class7a during loading of class PreloadCircularityTest$Class7a. Cause: a null-free non-static field is declared with this type\");\n+    }\n+\n+    static value class Class8a {\n+        Class8a va = new Class8a();\n+    }\n+\n+    void test_8() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class8a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldNotContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class8a during loading of class PreloadCircularityTest$Class8a. Cause: a null-free non-static field is declared with this type\");\n+    }\n+\n+    static value class Class9a {\n+        @NullRestricted\n+        Class9b vb = new Class9b();\n+    }\n+\n+    static class Class9b { }\n+\n+    void test_9() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class9a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class9b during loading of class PreloadCircularityTest$Class9a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"java.lang.IncompatibleClassChangeError: Class PreloadCircularityTest$Class9a expects class PreloadCircularityTest$Class9b to be a value class, but it is an identity class\");\n+    }\n+\n+    static value class Class10a {\n+        @NullRestricted\n+        Class10b vb = new Class10b();\n+    }\n+\n+    static value class Class10b { }\n+\n+    void test_10() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class10a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class10b during loading of class PreloadCircularityTest$Class10a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class10b is not implicitly constructible and it is used in a null restricted non-static field (not supported)\");\n+    }\n+\n+    \/\/ Testing preloading due to static fields\n+\n+    @ImplicitlyConstructible\n+    static value class Class50a {\n+        @NullRestricted\n+        static Class50a sa;\n+    }\n+\n+    void test_50() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class50a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldNotContain(\"[info][class,preload]\");\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class51a {\n+        @NullRestricted\n+        static Class51b sb;\n+\n+        @NullRestricted\n+        static Class51c sc;\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class51b {\n+        @NullRestricted\n+        static Class51a sa;\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class51c {\n+        @NullRestricted\n+        Class51a sa = new Class51a();\n+    }\n+\n+    void test_51() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class51a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a (cause: null-free static field) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c (cause: null-free non-static field) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a (cause: null-free static field) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b (cause: null-free static field) succeeded\");\n+    }\n+\n+    static value class Class52a {\n+        @NullRestricted\n+        static Class52b vb;\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class52b {\n+        @NullRestricted\n+        Class52c vc = new Class52c();\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class52c {\n+        @NullRestricted\n+        Class52b vb = new Class52b();\n+    }\n+\n+    void test_52() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class52a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52b during linking of class PreloadCircularityTest$Class52a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class53a {\n+        Class53b vb = new Class53b();\n+\n+        @NullRestricted\n+        static Class53b sb;\n+    }\n+\n+    @ImplicitlyConstructible\n+    static value class Class53b {\n+        @NullRestricted\n+        Class53a va = new Class53a();\n+    }\n+\n+    \/\/ In the following test, Class53a fails to optimistically load Class53b at load time, but successfully loads it at link time\n+\n+    void test_53() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class53a\");\n+        out.shouldHaveExitValue(0);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b (cause: null-free non-static field) succeeded\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a (cause: null-free static field) succeeded\");\n+    }\n+\n+    static value class Class54a {\n+        @NullRestricted\n+        static Class54b sb;\n+    }\n+\n+    static class Class54b { }\n+\n+    void test_54() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class54a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a (cause: null-free static field) succeeded\");\n+        out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class54a expects class PreloadCircularityTest$Class54b to be a value class but it is an identity class\");\n+    }\n+\n+    static class Class55a {\n+        @NullRestricted\n+        static Class55b sb;\n+    }\n+\n+    static value class Class55b { }\n+\n+    void test_55() throws Exception {\n+        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class55a\");\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a (cause: null-free static field) succeeded\");\n+        out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class55b is not implicitly constructible and it is used in a null restricted static field (not supported)\");\n+    }\n+\n+    public static class TestHelper {\n+        public static void main(String[] args) {\n+            try {\n+                Class c = Class.forName(args[0]);\n+            } catch (Throwable ex) {\n+                ex.printStackTrace();\n+                System.exit(1);\n+            }\n+            System.exit(0);\n+        }\n+    }\n+\n+    static OutputAnalyzer tryLoadingClass(String className) throws Exception {\n+        ProcessBuilder pb = exec(\"PreloadCircularityTest$TestHelper\", className);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        System.out.println(out.getOutput());\n+        return out;\n+    }\n+\n+    static ProcessBuilder exec(String... args) throws Exception {\n+        List<String> argsList = new ArrayList<>();\n+        Collections.addAll(argsList, \"-XX:+EnableValhalla\");\n+        Collections.addAll(argsList, \"-Dtest.class.path=\" + System.getProperty(\"test.class.path\", \".\"));\n+        Collections.addAll(argsList, \"-Xlog:class+preload=info\");\n+        Collections.addAll(argsList, args);\n+        return ProcessTools.createTestJavaProcessBuilder(argsList);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Crerating tests\");\n+        PreloadCircularityTest tests = new PreloadCircularityTest();\n+        Class c = tests.getClass();\n+        System.out.println(\"Iterating over test methods\");\n+        boolean hasFailedTest = false;\n+        for (Method m : c.getDeclaredMethods()) {\n+            if (m.getName().startsWith(\"test_\")) {\n+                boolean failed = false;\n+                try {\n+                    System.out.println(\"Running \" + m.getName());\n+                    m.invoke(tests);\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    failed = true;\n+                }\n+                System.out.println(\"Test \" + m.getName() + \" : \" + (failed ? \"FAILED\" : \"PASSED\"));\n+                hasFailedTest = failed ? true : hasFailedTest;\n+            }\n+        }\n+        if (hasFailedTest) {\n+            throw new RuntimeException(\"Not all tests passed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":491,"deletions":0,"binary":false,"changes":491,"status":"added"},{"patch":"@@ -56,1 +56,1 @@\n-        checkFor(pb, \"[info][class,preload] Preloading class PreloadValue0 during linking of class ValuePreloadClient0 because of its Preload attribute\");\n+        checkFor(pb, \"[info][class,preload] Preloading class PreloadValue0 during loading of class ValuePreloadClient0. Cause: field type in Preload attribute\");\n@@ -59,1 +59,1 @@\n-        checkFor(pb, \"[warning][class,preload] Preloading of class PreloadValue1 during linking of class ValuePreloadClient1 (Preload attribute) failed\");\n+        checkFor(pb, \"[warning][class,preload] Preloading of class PreloadValue1 during linking of class ValuePreloadClient1 (cause: Preload attribute) failed\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}