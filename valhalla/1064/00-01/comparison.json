{"files":[{"patch":"@@ -582,1 +582,1 @@\n-  if (orig_callee->is_object_constructor() && (orig_callee->holder()->is_abstract() || orig_callee->holder()->is_java_lang_Object()) && peek()->is_InlineType()) {\n+  if (orig_callee->is_object_constructor() && (orig_callee->holder()->is_abstract() || orig_callee->holder()->is_java_lang_Object()) && stack(sp() - nargs)->is_InlineType()) {\n@@ -584,1 +584,1 @@\n-    InlineTypeNode* receiver = peek()->as_InlineType();\n+    InlineTypeNode* receiver = stack(sp() - nargs)->as_InlineType();\n@@ -595,3 +595,3 @@\n-      receiver = map->argument(_caller, 0)->as_InlineType();\n-      assert(peek()->bottom_type()->inline_klass() == receiver->bottom_type()->inline_klass(), \"Receiver type mismatch\");\n-      _exits.map()->replace_edge(receiver, clone, &_gvn);\n+      Node* receiver_in_caller = map->argument(_caller, 0)->as_InlineType();\n+      assert(receiver_in_caller->bottom_type()->inline_klass() == receiver->bottom_type()->inline_klass(), \"Receiver type mismatch\");\n+      _exits.map()->replace_edge(receiver_in_caller, clone, &_gvn);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    static abstract value class MyAbstract { }\n+    static abstract value class MyAbstract1 { }\n@@ -83,1 +83,1 @@\n-    static value class MyValue2 extends MyAbstract {\n+    static value class MyValue2 extends MyAbstract1 {\n@@ -91,1 +91,7 @@\n-    static value class MyValue3 extends MyAbstract {\n+    static abstract value class MyAbstract2 {\n+        public MyAbstract2(int x) {\n+\n+        }\n+    }\n+\n+    static value class MyValue3 extends MyAbstract2 {\n@@ -102,1 +108,1 @@\n-            super();\n+            super(x);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueConstruction.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}