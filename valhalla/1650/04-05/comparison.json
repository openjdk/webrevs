{"files":[{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8334258\n- * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview1.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview1.java\n- *\/\n-public class EarlyAssignmentNoPreview1 {\n-\n-    Runnable r;\n-\n-    public EarlyAssignmentNoPreview1() {\n-        r = () -> System.out.println(\"hello\");\n-        this(r);\n-    }\n-\n-    public EarlyAssignmentNoPreview1(Runnable r) {\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyAssignmentNoPreview1();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8334258\n- * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview2.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview2.java\n- *\/\n-public class EarlyAssignmentNoPreview2 {\n-\n-    Runnable r;\n-\n-    public EarlyAssignmentNoPreview2() {\n-        this.r = () -> System.out.println(\"hello\");\n-        this(this.r);\n-    }\n-\n-    public EarlyAssignmentNoPreview2(Runnable r) {\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyAssignmentNoPreview2();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8334258\n- * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview3.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview3.java\n- *\/\n-public class EarlyAssignmentNoPreview3 {\n-\n-    Runnable r;\n-\n-    public EarlyAssignmentNoPreview3() {\n-        EarlyAssignmentNoPreview3.this.r = () -> System.out.println(\"hello\");\n-        this(EarlyAssignmentNoPreview3.this.r);\n-    }\n-\n-    public EarlyAssignmentNoPreview3(Runnable r) {\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyAssignmentNoPreview3();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-EarlyAssignments.java:42:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:43:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:44:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:45:34: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:47:36: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:51:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:55:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:59:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:77:13: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:78:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:79:25: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:80:31: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:130:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:135:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:140:29: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:145:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:150:28: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:159:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n-EarlyAssignments.java:168:13: compiler.err.cant.assign.val.to.var: final, x\n-EarlyAssignments.java:179:13: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:179:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n-EarlyAssignments.java:188:17: compiler.err.cant.ref.before.ctor.called: x\n-22 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8334248\n- * @summary Invalid error for early construction local class constructor method reference\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @compile EarlyIndirectOuterCapture.java\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyIndirectOuterCapture\n- *\/\n-\n-public class EarlyIndirectOuterCapture {\n-\n-    EarlyIndirectOuterCapture() {\n-        this(null);\n-    }\n-\n-    EarlyIndirectOuterCapture(InnerSuperclass inner) { }\n-\n-    class InnerSuperclass { }\n-\n-    static class InnerOuter extends EarlyIndirectOuterCapture {     \/\/ accessible\n-        class InnerInnerOuter extends EarlyIndirectOuterCapture {   \/\/ not accessible\n-            InnerInnerOuter() {\n-                super(new InnerSuperclass() { }); \/\/ should this be accepted?, InnerSuperclass is not an inner class of InnerInnerOuter\n-            }\n-\n-            InnerInnerOuter(boolean b) {\n-                super(InnerOuter.this.new InnerSuperclass() { }); \/\/ ok, explicit\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyIndirectOuterCapture.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8334488\n- * @summary Verify the error message generated for early access from inner class\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @compile\/fail\/ref=EarlyInnerAccessErrorMessageTest.out -XDrawDiagnostics EarlyInnerAccessErrorMessageTest.java\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest\n- *\/\n-public class EarlyInnerAccessErrorMessageTest {\n-    int x;\n-    EarlyInnerAccessErrorMessageTest() {\n-        class Inner {\n-            { System.out.println(x); }\n-        }\n-        super();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-EarlyInnerAccessErrorMessageTest.java:22:34: compiler.err.cant.ref.before.ctor.called: x\n-1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8345438\n- * @summary Verify 'return' allowed in a lambda declared in an early construction context\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLambdaReturn\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLambdaReturn\n- *\/\n-public class EarlyLambdaReturn {\n-\n-    public EarlyLambdaReturn() {\n-        Runnable r = () -> {\n-            return;\n-        };\n-        super();\n-        r.run();\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLambdaReturn();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLambdaReturn.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8325805\n- * @summary Verify local class in early construction context has no outer instance\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @compile\/fail\/ref=EarlyLocalClass.out -XDrawDiagnostics EarlyLocalClass.java\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalClass\n- *\/\n-public class EarlyLocalClass {\n-    EarlyLocalClass() {\n-        class Local {\n-            void foo() {\n-                EarlyLocalClass.this.hashCode();    \/\/ this should FAIL\n-            }\n-        }\n-        new Local();                                \/\/ this is OK\n-        super();\n-        new Local();                                \/\/ this is OK\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-EarlyLocalClass.java:22:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n-1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest1\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest1\n- *\/\n-public class EarlyLocalTest1 {\n-\n-    class Test {\n-        Test() {\n-            class InnerLocal { }\n-            Runnable r = () -> new InnerLocal();\n-            r.run();\n-            super();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest1().new Test();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest1.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest2\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest2\n- *\/\n-public class EarlyLocalTest2 {\n-\n-    class Test {\n-        Test() {\n-            class InnerLocal { }\n-            Runnable r = () -> new InnerLocal() { };\n-            r.run();\n-            super();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest2().new Test();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest2.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest3\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest3\n- *\/\n-\n-public class EarlyLocalTest3 {\n-\n-    class Test {\n-        Test() {\n-            class InnerLocal { }\n-            Runnable r = InnerLocal::new;\n-            r.run();\n-            super();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest3().new Test();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest3.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest4\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest4\n- *\/\n-public class EarlyLocalTest4 {\n-\n-    class Test {\n-        Test() {\n-            class InnerLocal { }\n-            Runnable r = new Runnable() {\n-                public void run() {\n-                    new InnerLocal();\n-                }\n-            };\n-            r.run();\n-            super();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest4().new Test();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest4.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest5\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest5\n- *\/\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public class EarlyLocalTest5 {\n-\n-    int y;\n-\n-    class Test extends AtomicReference<Runnable> {\n-        Test(int x) {\n-            class Foo implements Runnable {\n-                public void run() {\n-                    System.out.println(x + y);\n-                }\n-            }\n-            super(new Foo());\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest5().new Test(42);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest5.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest6\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest6\n- *\/\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public class EarlyLocalTest6 {\n-\n-    int y;\n-\n-    class Test extends AtomicReference<Runnable> {\n-        Test(int x) {\n-            super(new Runnable() {\n-                public void run() {\n-                    System.out.println(x + y);\n-                }\n-            });\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest6().new Test(42);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest6.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest7\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest7\n- *\/\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public class EarlyLocalTest7 {\n-\n-    int y;\n-\n-    class Test extends AtomicReference<Runnable> {\n-        Test(int x) {\n-            super(() -> System.out.println(x + y));\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest7().new Test(42);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest7.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8333313\n- * @summary Verify references to local classes declared in early construction contexts\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest8\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest8\n- *\/\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-public class EarlyLocalTest8 {\n-\n-    class Test extends AtomicReference<Runnable> {\n-        Test(int x) {\n-            super(\n-                switch (x) {\n-                    case 0 -> null;\n-                    default -> {\n-                        class InnerLocal { }\n-                        yield () -> new InnerLocal() { { System.out.println(EarlyLocalTest8.this); } };\n-                    }\n-                });\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new EarlyLocalTest8().new Test(42);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest8.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8334037\n- * @summary Test for compiler crash when local class created in early lambda\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main LambdaLocalEarlyCrash\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester LambdaLocalEarlyCrash\n- *\/\n-\n-public class LambdaLocalEarlyCrash {\n-    interface A { }\n-\n-    class Inner {\n-       Inner() {\n-          this(() -> {\n-             class Local {\n-                void g() {\n-                   m();\n-                }\n-             }\n-             new Local().g(); \/\/ error\n-          });\n-       }\n-\n-       Inner(Runnable tr) {\n-          tr.run();\n-       }\n-    }\n-\n-    void m() {\n-       System.out.println(\"Hello\");\n-    }\n-\n-    public static void main(String[] args) {\n-       new LambdaLocalEarlyCrash().new Inner();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaLocalEarlyCrash.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8334252\n- * @summary Test lambda declared in early construction context\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main LambdaOuterCapture\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester LambdaOuterCapture\n- *\/\n-\n-public class LambdaOuterCapture {\n-\n-    public class Inner {\n-\n-        public Inner() {\n-            Runnable r = () -> System.out.println(LambdaOuterCapture.this);\n-            this(r);\n-        }\n-\n-        public Inner(Runnable r) {\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new LambdaOuterCapture().new Inner();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaOuterCapture.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-SuperInitFails.java:68:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:73:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:78:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:83:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:88:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:110:33: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:115:14: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:119:20: compiler.err.not.encl.class: java.lang.Object\n-SuperInitFails.java:123:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n-SuperInitFails.java:130:22: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:136:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:144:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n-SuperInitFails.java:149:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n-SuperInitFails.java:166:50: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:170:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:179:13: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:183:17: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:187:24: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:191:18: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:197:32: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:217:25: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:222:33: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:227:29: compiler.err.redundant.superclass.init\n-SuperInitFails.java:240:41: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:241:16: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:250:35: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:44:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:48:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:52:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:56:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:60:33: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:64:32: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:94:18: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:100:13: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:161:18: compiler.err.call.must.only.appear.in.ctor\n-35 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -0,0 +1,18 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview1.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview1.java\n+ *\/\n+public class EarlyAssignmentNoPreview1 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview1() {\n+        r = () -> System.out.println(\"hello\");\n+        this(r);\n+    }\n+\n+    public EarlyAssignmentNoPreview1(Runnable r) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview1.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview1.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.out","status":"renamed"},{"patch":"@@ -0,0 +1,18 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview2.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview2.java\n+ *\/\n+public class EarlyAssignmentNoPreview2 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview2() {\n+        this.r = () -> System.out.println(\"hello\");\n+        this(this.r);\n+    }\n+\n+    public EarlyAssignmentNoPreview2(Runnable r) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview2.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview2.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.out","status":"renamed"},{"patch":"@@ -0,0 +1,18 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview3.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview3.java\n+ *\/\n+public class EarlyAssignmentNoPreview3 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview3() {\n+        EarlyAssignmentNoPreview3.this.r = () -> System.out.println(\"hello\");\n+        this(EarlyAssignmentNoPreview3.this.r);\n+    }\n+\n+    public EarlyAssignmentNoPreview3(Runnable r) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview3.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/pre_release_tests\/EarlyAssignmentNoPreview3.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.out","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/AnonSuperLambdaCrash.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/AnonSuperLambdaCrash.java","status":"renamed"},{"patch":"@@ -6,9 +6,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyAssignments.java","additions":0,"deletions":9,"binary":false,"changes":9,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","status":"renamed"},{"patch":"@@ -0,0 +1,23 @@\n+EarlyAssignments.java:33:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:34:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:35:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:36:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:38:36: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:42:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:46:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:50:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:68:13: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:69:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:70:25: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:71:31: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:121:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:126:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:131:29: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:136:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:141:28: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:150:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n+EarlyAssignments.java:159:13: compiler.err.cant.assign.val.to.var: final, x\n+EarlyAssignments.java:170:13: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:170:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n+EarlyAssignments.java:179:17: compiler.err.cant.ref.before.ctor.called: x\n+22 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyAssignments.out","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334248\n+ * @summary Invalid error for early construction local class constructor method reference\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyIndirectOuterCapture\n+ *\/\n+\n+public class EarlyIndirectOuterCapture {\n+\n+    EarlyIndirectOuterCapture() {\n+        this(null);\n+    }\n+\n+    EarlyIndirectOuterCapture(InnerSuperclass inner) { }\n+\n+    class InnerSuperclass { }\n+\n+    static class InnerOuter extends EarlyIndirectOuterCapture {     \/\/ accessible\n+        class InnerInnerOuter extends EarlyIndirectOuterCapture {   \/\/ not accessible\n+            InnerInnerOuter() {\n+                super(new InnerSuperclass() { }); \/\/ should this be accepted?, InnerSuperclass is not an inner class of InnerInnerOuter\n+            }\n+\n+            InnerInnerOuter(boolean b) {\n+                super(InnerOuter.this.new InnerSuperclass() { }); \/\/ ok, explicit\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyIndirectOuterCapture.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334488\n+ * @summary Verify the error message generated for early access from inner class\n+ * @compile\/fail\/ref=EarlyInnerAccessErrorMessageTest.out -XDrawDiagnostics EarlyInnerAccessErrorMessageTest.java\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest\n+ *\/\n+public class EarlyInnerAccessErrorMessageTest {\n+    int x;\n+    EarlyInnerAccessErrorMessageTest() {\n+        class Inner {\n+            { System.out.println(x); }\n+        }\n+        super();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyInnerAccessErrorMessageTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+EarlyInnerAccessErrorMessageTest.java:13:34: compiler.err.cant.ref.before.ctor.called: x\n+1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyInnerAccessErrorMessageTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8345438\n+ * @summary Verify 'return' allowed in a lambda declared in an early construction context\n+ * @run main EarlyLambdaReturn\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLambdaReturn\n+ *\/\n+public class EarlyLambdaReturn {\n+\n+    public EarlyLambdaReturn() {\n+        Runnable r = () -> {\n+            return;\n+        };\n+        super();\n+        r.run();\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLambdaReturn();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLambdaReturn.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8325805\n+ * @summary Verify local class in early construction context has no outer instance\n+ * @compile\/fail\/ref=EarlyLocalClass.out -XDrawDiagnostics EarlyLocalClass.java\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalClass\n+ *\/\n+public class EarlyLocalClass {\n+    EarlyLocalClass() {\n+        class Local {\n+            void foo() {\n+                EarlyLocalClass.this.hashCode();    \/\/ this should FAIL\n+            }\n+        }\n+        new Local();                                \/\/ this is OK\n+        super();\n+        new Local();                                \/\/ this is OK\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalClass.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+EarlyLocalClass.java:13:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n+1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalClass.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalCtorRef.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalCtorRef.java","status":"renamed"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest1\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest1\n+ *\/\n+public class EarlyLocalTest1 {\n+\n+    class Test {\n+        Test() {\n+            class InnerLocal { }\n+            Runnable r = () -> new InnerLocal();\n+            r.run();\n+            super();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest1().new Test();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest1.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest2\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest2\n+ *\/\n+public class EarlyLocalTest2 {\n+\n+    class Test {\n+        Test() {\n+            class InnerLocal { }\n+            Runnable r = () -> new InnerLocal() { };\n+            r.run();\n+            super();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest2().new Test();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest2.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest3\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest3\n+ *\/\n+\n+public class EarlyLocalTest3 {\n+\n+    class Test {\n+        Test() {\n+            class InnerLocal { }\n+            Runnable r = InnerLocal::new;\n+            r.run();\n+            super();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest3().new Test();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest3.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest4\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest4\n+ *\/\n+public class EarlyLocalTest4 {\n+\n+    class Test {\n+        Test() {\n+            class InnerLocal { }\n+            Runnable r = new Runnable() {\n+                public void run() {\n+                    new InnerLocal();\n+                }\n+            };\n+            r.run();\n+            super();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest4().new Test();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest4.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest5\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest5\n+ *\/\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class EarlyLocalTest5 {\n+\n+    int y;\n+\n+    class Test extends AtomicReference<Runnable> {\n+        Test(int x) {\n+            class Foo implements Runnable {\n+                public void run() {\n+                    System.out.println(x + y);\n+                }\n+            }\n+            super(new Foo());\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest5().new Test(42);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest5.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest6\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest6\n+ *\/\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class EarlyLocalTest6 {\n+\n+    int y;\n+\n+    class Test extends AtomicReference<Runnable> {\n+        Test(int x) {\n+            super(new Runnable() {\n+                public void run() {\n+                    System.out.println(x + y);\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest6().new Test(42);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest6.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest7\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest7\n+ *\/\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class EarlyLocalTest7 {\n+\n+    int y;\n+\n+    class Test extends AtomicReference<Runnable> {\n+        Test(int x) {\n+            super(() -> System.out.println(x + y));\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest7().new Test(42);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest7.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8333313\n+ * @summary Verify references to local classes declared in early construction contexts\n+ * @run main EarlyLocalTest8\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest8\n+ *\/\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class EarlyLocalTest8 {\n+\n+    class Test extends AtomicReference<Runnable> {\n+        Test(int x) {\n+            super(\n+                switch (x) {\n+                    case 0 -> null;\n+                    default -> {\n+                        class InnerLocal { }\n+                        yield () -> new InnerLocal() { { System.out.println(EarlyLocalTest8.this); } };\n+                    }\n+                });\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLocalTest8().new Test(42);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/EarlyLocalTest8.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/ErrorExpected.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/ErrorExpected.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/IgnoreMethod.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/IgnoreMethod.java","status":"renamed"},{"patch":"@@ -125,11 +125,2 @@\n-        DirectoryStream<Path> paths = null;\n-        try {\n-            paths = Files.newDirectoryStream(baseDir,\n-                    p -> (!Files.isDirectory(p) &&\n-                            (p.endsWith(className + \".java\") ||\n-                            p.endsWith(className + \".out\"))\n-                    )\n-            );\n-        } catch (IOException e) {\n-            throw new AssertionError(\"Error accessing directory: \" + e.getMessage());\n-        }\n+        Path javaFile = baseDir.resolve(className + \".java\");\n+        Path goldenFile = Files.exists(baseDir.resolve(className + \".out\")) ? baseDir.resolve(className + \".out\") : null;\n@@ -137,9 +128,0 @@\n-        Path javaFile = null;\n-        Path goldenFile = null;\n-        for (Path p: paths) {\n-            if (p.toString().endsWith(\"java\")) {\n-                javaFile = p;\n-            } else if (p.toString().endsWith(\"out\")) {\n-                goldenFile = p;\n-            }\n-        }\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/InitializationWarningTester.java","additions":2,"deletions":20,"binary":false,"changes":22,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTester.java","status":"renamed"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8334037\n+ * @summary Test for compiler crash when local class created in early lambda\n+ * @run main LambdaLocalEarlyCrash\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester LambdaLocalEarlyCrash\n+ *\/\n+\n+public class LambdaLocalEarlyCrash {\n+    interface A { }\n+\n+    class Inner {\n+       Inner() {\n+          this(() -> {\n+             class Local {\n+                void g() {\n+                   m();\n+                }\n+             }\n+             new Local().g(); \/\/ error\n+          });\n+       }\n+\n+       Inner(Runnable tr) {\n+          tr.run();\n+       }\n+    }\n+\n+    void m() {\n+       System.out.println(\"Hello\");\n+    }\n+\n+    public static void main(String[] args) {\n+       new LambdaLocalEarlyCrash().new Inner();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/LambdaLocalEarlyCrash.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8334252\n+ * @summary Test lambda declared in early construction context\n+ * @run main LambdaOuterCapture\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester LambdaOuterCapture\n+ *\/\n+\n+public class LambdaOuterCapture {\n+\n+    public class Inner {\n+\n+        public Inner() {\n+            Runnable r = () -> System.out.println(LambdaOuterCapture.this);\n+            this(r);\n+        }\n+\n+        public Inner(Runnable r) {\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new LambdaOuterCapture().new Inner();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/LambdaOuterCapture.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/MrefDoubleTrans.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/MrefDoubleTrans.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/MultiLevelOuterInstance.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/MultiLevelOuterInstance.java","status":"renamed"},{"patch":"@@ -6,9 +6,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/SuperInitFails.java","additions":0,"deletions":9,"binary":false,"changes":9,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","status":"renamed"},{"patch":"@@ -0,0 +1,36 @@\n+SuperInitFails.java:59:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:64:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:69:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:74:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:79:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:101:33: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:106:14: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:110:20: compiler.err.not.encl.class: java.lang.Object\n+SuperInitFails.java:114:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n+SuperInitFails.java:121:22: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:127:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:135:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n+SuperInitFails.java:140:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n+SuperInitFails.java:157:50: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:161:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:170:13: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:174:17: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:178:24: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:182:18: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:188:32: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:208:25: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:213:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:218:29: compiler.err.redundant.superclass.init\n+SuperInitFails.java:231:41: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:232:16: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:241:35: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:35:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:39:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:43:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:47:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:51:33: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:55:32: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:85:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:91:13: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:152:18: compiler.err.call.must.only.appear.in.ctor\n+35 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/SuperInitFails.out","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -27,9 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/SuperInitGood.java","additions":0,"deletions":9,"binary":false,"changes":9,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","status":"renamed"},{"patch":"@@ -0,0 +1,10 @@\n+modules = \\\n+        jdk.compiler\/com.sun.tools.javac.api \\\n+        jdk.compiler\/com.sun.tools.javac.main \\\n+        jdk.jlink \\\n+        jdk.compiler\/com.sun.tools.javac.code \\\n+        jdk.compiler\/com.sun.tools.javac.comp \\\n+        jdk.compiler\/com.sun.tools.javac.file \\\n+        jdk.compiler\/com.sun.tools.javac.main \\\n+        jdk.compiler\/com.sun.tools.javac.tree \\\n+        jdk.compiler\/com.sun.tools.javac.util\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/TEST.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/ValueClassSuperInitFails.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitFails.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/ValueClassSuperInitFails.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitFails.out","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/SuperInit\/super_init_other\/ValueClassSuperInitGood.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitGood.java","status":"renamed"}]}