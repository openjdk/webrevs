{"files":[{"patch":"@@ -32,1 +32,1 @@\n-# DISABLED_WARNINGS_java +=\n+DISABLED_WARNINGS_java += initialization\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,0 +281,6 @@\n+        \/**\n+         * Warn about code in identity classes that wouldn't be allowed in early\n+         * construction due to a this dependency.\n+         *\/\n+        INITIALIZATION(\"initialization\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1191,0 +1191,1 @@\n+                boolean addedSuperInIdentityClass = false;\n@@ -1199,0 +1200,1 @@\n+                            addedSuperInIdentityClass = true;\n@@ -1248,1 +1250,3 @@\n-                            break;\n+                            if (!addedSuperInIdentityClass || !allowValueClasses) {\n+                                break;\n+                            }\n@@ -1252,1 +1256,1 @@\n-                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv);\n+                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv, addedSuperInIdentityClass && allowValueClasses);\n@@ -1269,1 +1273,3 @@\n-        CtorPrologueVisitor(Env<AttrContext> localEnv) {\n+        boolean warningsOnly;\n+\n+        CtorPrologueVisitor(Env<AttrContext> localEnv, boolean warningsOnly) {\n@@ -1272,0 +1278,1 @@\n+            this.warningsOnly = warningsOnly;\n@@ -1304,0 +1311,4 @@\n+            reportPrologueError(tree, sym, false);\n+        }\n+\n+        private void reportPrologueError(JCTree tree, Symbol sym, boolean hasInit) {\n@@ -1305,1 +1316,10 @@\n-            log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+            if (!warningsOnly) {\n+                if (hasInit) {\n+                    log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n+                } else {\n+                    log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+                }\n+            } else if (allowValueClasses) {\n+                \/\/ issue lint warning\n+                localEnv.info.lint.logIfEnabled(tree, LintWarnings.WouldNotBeAllowedInPrologue(sym));\n+            }\n@@ -1401,1 +1421,1 @@\n-                        log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+                        reportPrologueError(tree, sym);\n@@ -1406,1 +1426,1 @@\n-                        log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n+                        reportPrologueError(tree, sym, true);\n@@ -1449,1 +1469,6 @@\n-                                localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n+                                if (!warningsOnly) {\n+                                    \/* do not generate proxies in warning only mode, as in that mode\n+                                     * we are dealing with code that is not in the prologue phase\n+                                     *\/\n+                                    localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n+                                }\n@@ -1580,1 +1605,1 @@\n-                        if (v.owner.kind == TYP && !v.isStatic() && v.isStrict()) {\n+                        if (allowValueClasses && v.owner.kind == TYP && !v.isStatic()) {\n@@ -1582,1 +1607,1 @@\n-                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv);\n+                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv, !v.isStrict());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":34,"deletions":9,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -4323,0 +4323,5 @@\n+# 0: symbol or name\n+# lint: initialization\n+compiler.warn.would.not.be.allowed.in.prologue=\\\n+    reference to {0} would not be allowed in the prologue phase\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,0 +222,4 @@\n+javac.opt.Xlint.desc.initialization=\\\n+    Warn about code in identity classes that wouldn''t be allowed in early\\n\\\n+\\                         construction due to a this dependency.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-\n-\n@@ -192,0 +190,1 @@\n+        Symbol.ClassSymbol currentClassSym = (Symbol.ClassSymbol)(types.erasure(currentClass)).tsym;\n@@ -199,1 +198,3 @@\n-                       ident.name == names._super;\n+                       ident.name == names._super &&\n+                               (tree.type.tsym == currentClass.tsym ||\n+                                currentClassSym.isSubClass(tree.type.tsym, types));\n@@ -206,2 +207,1 @@\n-                Symbol.ClassSymbol currentClassSym = (Symbol.ClassSymbol)((Type.ClassType)types.erasure(currentClass)).tsym;\n-                Symbol.ClassSymbol selectedClassSym = (Symbol.ClassSymbol)((Type.ClassType)selectedType).tsym;\n+                Symbol.ClassSymbol selectedClassSym = (Symbol.ClassSymbol)(selectedType).tsym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -169,0 +169,2 @@\n+ * <tr><th scope=\"row\">{@code initialization}       <td>code in identity classes that wouldn't be allowed in early\n+ *                                                      construction due to a this dependency.\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -604,0 +604,3 @@\n+    -   `initialization`: Warns about code in identity classes that wouldn't be\n+        allowed in early construction due to a `this` dependency.\n+\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @compile\/fail\/ref=EarlyAssignments.out -XDrawDiagnostics EarlyAssignments.java\n@@ -7,0 +6,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @compile\/fail\/ref=EarlyAssignments.out -XDrawDiagnostics EarlyAssignments.java\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyAssignments\n@@ -155,1 +166,1 @@\n-\n+        @IgnoreMethod\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,22 +1,22 @@\n-EarlyAssignments.java:31:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:32:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:33:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:34:34: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:36:36: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:40:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:44:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:48:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:66:13: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:67:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:68:25: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:69:31: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:119:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:124:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:129:29: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:134:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:139:28: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:148:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n-EarlyAssignments.java:157:13: compiler.err.cant.assign.val.to.var: final, x\n-EarlyAssignments.java:168:13: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:168:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n-EarlyAssignments.java:177:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:42:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:43:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:44:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:45:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:47:36: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:51:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:55:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:59:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:77:13: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:78:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:79:25: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:80:31: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:130:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:135:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:140:29: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:145:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:150:28: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:159:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n+EarlyAssignments.java:168:13: compiler.err.cant.assign.val.to.var: final, x\n+EarlyAssignments.java:179:13: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:179:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n+EarlyAssignments.java:188:17: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -5,0 +5,9 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n@@ -6,0 +15,2 @@\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyIndirectOuterCapture\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyIndirectOuterCapture.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5,0 +5,9 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n@@ -6,0 +15,2 @@\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyInnerAccessErrorMessageTest.java:11:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyInnerAccessErrorMessageTest.java:22:34: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLambdaReturn\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLambdaReturn\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLambdaReturn.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,0 +5,9 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n@@ -6,0 +15,2 @@\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalClass\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyLocalClass.java:11:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n+EarlyLocalClass.java:22:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest1\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest1\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest1.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest2\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest2\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest2.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest3\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest3\n@@ -28,0 +40,1 @@\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest3.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest4\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest4\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest4.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest5\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest5\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest5.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest6\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest6\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest6.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest7\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest7\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest7.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main EarlyLocalTest8\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester EarlyLocalTest8\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest8.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,1 @@\n-public @interface Foo {\n-    int value();\n-}\n+public @interface ErrorExpected {}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ErrorExpected.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/repeatingAnnotations\/supportingAnnotations\/Foo.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,1 @@\n-public @interface Foo {\n-    int value();\n-}\n+public @interface IgnoreMethod {}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/IgnoreMethod.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/repeatingAnnotations\/supportingAnnotations\/Foo.java","status":"copied"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.io.PrintWriter;\n+import java.io.IOException;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.charset.Charset;\n+\n+import javax.tools.Diagnostic;\n+import javax.tools.DiagnosticListener;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+\n+import com.sun.tools.javac.code.Attribute;\n+import com.sun.tools.javac.comp.Attr;\n+import com.sun.tools.javac.comp.AttrContext;\n+import com.sun.tools.javac.comp.CompileStates;\n+import com.sun.tools.javac.comp.Env;\n+import com.sun.tools.javac.comp.Modules;\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.file.PathFileObject;\n+import com.sun.tools.javac.main.JavaCompiler;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.*;\n+import com.sun.tools.javac.tree.TreeInfo;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.DiagnosticSource;\n+import com.sun.tools.javac.util.JCDiagnostic;\n+import com.sun.tools.javac.util.List;\n+import com.sun.tools.javac.util.ListBuffer;\n+import com.sun.tools.javac.util.Log;\n+import com.sun.tools.javac.util.Options;\n+\n+public class InitializationWarningTester {\n+    Context context;\n+    Options options;\n+    MyJavaCompiler javaCompiler;\n+    JavacFileManager javacFileManager;\n+    PrintWriter errOut;\n+    DiagnosticListener<JavaFileObject> diagnosticListener;\n+\n+    public static void main(String... args) throws Throwable {\n+        String testSrc = System.getProperty(\"test.src\");\n+        Path baseDir = Paths.get(testSrc);\n+        InitializationWarningTester tester = new InitializationWarningTester();\n+        Assert.check(args.length > 0, \"no args, ending\");\n+        tester.test(baseDir, args[0]);\n+    }\n+\n+    java.util.List<String> compilationOutput = new ArrayList<>();\n+\n+    public InitializationWarningTester() {\n+        context = new Context();\n+        diagnosticListener = new DiagnosticListener<JavaFileObject>() {\n+            public void report(Diagnostic<? extends JavaFileObject> message) {\n+                if (!ignoreDiagnostics &&\n+                    (message.getCode().contains(warningKey) ||\n+                     message.getCode().contains(errorKey1) ||\n+                     message.getCode().contains(errorKey2))) {\n+                    if ((message.getCode().contains(errorKey1) ||\n+                            message.getCode().contains(errorKey2)) &&\n+                            !errorExpected) {\n+                        throw new AssertionError(\"error key not expected \" + message);\n+                    }\n+                    JCDiagnostic diagnostic = (JCDiagnostic) message;\n+                    String msgData = ((PathFileObject)diagnostic.getDiagnosticSource().getFile()).getShortName() +\n+                            \":\" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \": \" + diagnostic.getCode() + \": \" +\n+                            diagnostic.getArgs()[0];\n+                    compilationOutput.add(msgData);\n+                }\n+            }\n+        };\n+        context.put(DiagnosticListener.class, diagnosticListener);\n+        JavacFileManager.preRegister(context);\n+        MyAttr.preRegister(context, this);\n+        options = Options.instance(context);\n+        options.put(\"--enable-preview\", \"--enable-preview\");\n+        options.put(\"--source\", Integer.toString(Runtime.version().feature()));\n+        options.put(\"-Xlint:initialization\", \"-Xlint:initialization\");\n+        javaCompiler = new MyJavaCompiler(context);\n+        javacFileManager = new JavacFileManager(context, false, Charset.defaultCharset());\n+    }\n+\n+    static final String errorKey1 = \"compiler.err.cant.ref.before.ctor.called\";\n+    static final String errorKey2 = \"compiler.err.cant.assign.initialized.before.ctor.called\";\n+    static final String warningKey = \"compiler.warn.would.not.be.allowed.in.prologue\";\n+\n+    void test(Path baseDir, String className) throws Throwable {\n+        DirectoryStream<Path> paths = null;\n+        try {\n+            paths = Files.newDirectoryStream(baseDir,\n+                    p -> (!Files.isDirectory(p) &&\n+                            (p.endsWith(className + \".java\") ||\n+                            p.endsWith(className + \".out\"))\n+                    )\n+            );\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Error accessing directory: \" + e.getMessage());\n+        }\n+\n+        Path javaFile = null;\n+        Path goldenFile = null;\n+        for (Path p: paths) {\n+            if (p.toString().endsWith(\"java\")) {\n+                javaFile = p;\n+            } else if (p.toString().endsWith(\"out\")) {\n+                goldenFile = p;\n+            }\n+        }\n+        \/\/ compile\n+        javaCompiler.compile(com.sun.tools.javac.util.List.of(javacFileManager.getJavaFileObject(javaFile)));\n+        if (goldenFile != null) {\n+            java.util.List<String> goldenFileContent = Files.readAllLines(goldenFile);\n+            goldenFileContent = goldenFileContent.stream()\n+                    .filter(s -> s.contains(errorKey1) || s.contains(errorKey2))\n+                    .collect(Collectors.toList());\n+            Assert.check(goldenFileContent.size() == compilationOutput.size(), \"compilation output length mismatch\");\n+            for (int i = 0; i < goldenFileContent.size(); i++) {\n+                String goldenLine = goldenFileContent.get(i);\n+                String warningLine = compilationOutput.get(i);\n+                if (warningLine.contains(warningKey)) {\n+                    goldenLine = goldenLine.replace(errorKey1, warningKey);\n+                    goldenLine = goldenLine.replace(errorKey2, warningKey);\n+                }\n+                Assert.check(warningLine.equals(goldenLine), \"error for line \" + warningLine);\n+            }\n+        } else {\n+            Assert.check(compilationOutput.size() == 0);\n+        }\n+    }\n+\n+    static class MyJavaCompiler extends JavaCompiler {\n+        MyJavaCompiler(Context context) {\n+            super(context);\n+            \/\/ do not generate code\n+            this.shouldStopPolicyIfNoError = CompileStates.CompileState.LOWER;\n+        }\n+    }\n+\n+    \/\/ ignore diagnostics\n+    boolean ignoreDiagnostics = false;\n+    \/\/ even when compiling with warnings on, an error will be produced\n+    boolean errorExpected = false;\n+\n+    static class MyAttr extends Attr {\n+        InitializationWarningTester tester;\n+        static void preRegister(Context context, InitializationWarningTester tester) {\n+            context.put(attrKey, (com.sun.tools.javac.util.Context.Factory<Attr>) c -> new MyAttr(c, tester));\n+        }\n+\n+        MyAttr(Context context, InitializationWarningTester tester) {\n+            super(context);\n+            this.tester = tester;\n+        }\n+\n+        @Override\n+        public void visitMethodDef(JCMethodDecl tree) {\n+            boolean previousIgnoreDiags = tester.ignoreDiagnostics;\n+            boolean previousErrExpected = tester.errorExpected;\n+            try {\n+                if (TreeInfo.isConstructor(tree)) {\n+                    \/\/ remove the super constructor call if it is a no arguments invocation\n+                    List<Attribute.Compound> attributes = tree.sym.getDeclarationAttributes();\n+                    for (Attribute.Compound attribute : attributes) {\n+                        if (attribute.toString().equals(\"@IgnoreMethod\")) {\n+                            tester.ignoreDiagnostics = true;\n+                        } else if (attribute.toString().equals(\"@ErrorExpected\")) {\n+                            tester.errorExpected = true;\n+                        }\n+                    }\n+                    if (TreeInfo.hasAnyConstructorCall(tree) && !tester.errorExpected) {\n+                        ListBuffer<JCStatement> newStats = new ListBuffer<>();\n+                        for (JCStatement statement : tree.body.stats) {\n+                            if (statement instanceof JCExpressionStatement expressionStatement &&\n+                                    expressionStatement.expr instanceof JCMethodInvocation methodInvocation) {\n+                                if (TreeInfo.isConstructorCall(methodInvocation) && methodInvocation.args.isEmpty()) {\n+                                    continue;\n+                                }\n+                            }\n+                            newStats.add(statement);\n+                        }\n+                        tree.body.stats = newStats.toList();\n+                    }\n+                }\n+                super.visitMethodDef(tree);\n+            } finally {\n+                tester.ignoreDiagnostics = previousIgnoreDiags;\n+                tester.errorExpected = previousErrExpected;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTester.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main LambdaLocalEarlyCrash\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester LambdaLocalEarlyCrash\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaLocalEarlyCrash.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main LambdaOuterCapture\n+ * @build InitializationWarningTester\n+ * @run main InitializationWarningTester LambdaOuterCapture\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaOuterCapture.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @compile\/fail\/ref=SuperInitFails.out -XDrawDiagnostics SuperInitFails.java\n@@ -7,0 +6,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @compile\/fail\/ref=SuperInitFails.out -XDrawDiagnostics SuperInitFails.java\n+ * @build ErrorExpected InitializationWarningTester\n+ * @run main InitializationWarningTester SuperInitFails\n@@ -102,1 +113,1 @@\n-\n+    @ErrorExpected\n@@ -153,1 +164,1 @@\n-\n+    @ErrorExpected\n@@ -157,1 +168,1 @@\n-\n+    @ErrorExpected\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,35 +1,35 @@\n-SuperInitFails.java:57:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:62:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:67:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:72:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:77:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:99:33: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:104:14: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:108:20: compiler.err.not.encl.class: java.lang.Object\n-SuperInitFails.java:112:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n-SuperInitFails.java:119:22: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:125:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:133:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n-SuperInitFails.java:138:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n-SuperInitFails.java:155:50: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:159:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:168:13: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:172:17: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:176:24: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:180:18: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:186:32: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:206:25: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:211:33: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:216:29: compiler.err.redundant.superclass.init\n-SuperInitFails.java:229:41: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:230:16: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:239:35: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:33:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:37:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:41:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:45:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:49:33: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:53:32: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:83:18: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:89:13: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:150:18: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:68:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:73:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:78:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:83:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:88:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:110:33: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:115:14: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:119:20: compiler.err.not.encl.class: java.lang.Object\n+SuperInitFails.java:123:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n+SuperInitFails.java:130:22: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:136:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:144:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n+SuperInitFails.java:149:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n+SuperInitFails.java:166:50: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:170:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:179:13: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:183:17: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:187:24: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:191:18: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:197:32: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:217:25: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:222:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:227:29: compiler.err.redundant.superclass.init\n+SuperInitFails.java:240:41: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:241:16: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:250:35: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:44:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:48:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:52:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:56:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:60:33: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:64:32: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:94:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:100:13: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:161:18: compiler.err.call.must.only.appear.in.ctor\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -27,0 +27,12 @@\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jlink\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main SuperInitGood\n+ * @build InitializationWarningTester IgnoreMethod\n+ * @run main InitializationWarningTester SuperInitGood\n@@ -47,0 +59,1 @@\n+        @IgnoreMethod\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.would.not.be.allowed.in.prologue\n+\/\/ options: -Xlint:initialization --enable-preview -source ${jdk.version}\n+\n+public class InitializationWarning {\n+    Object o = null;\n+\n+    InitializationWarning(Object oo) {\n+        this.o = oo;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InitializationWarning.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -60,0 +60,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/GeneratingClassLoader.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerRunOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/systemd\/SystemdRunOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReachableExcludesImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/ReachableObjects.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Root.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/net\/HttpHeaderParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -69,0 +70,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/os\/linux\/HugePageConfiguration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1012,0 +1012,1 @@\n+        @SuppressWarnings(\"initialization\")\n@@ -1206,0 +1207,1 @@\n+        @SuppressWarnings(\"initialization\")\n@@ -1337,0 +1339,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SimpleOCSPServer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/lib\/security\/timestamp\/TsaServer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -740,4 +740,7 @@\n-  private final List<Function<String,Object>> flagsGetters = Arrays.asList(\n-    this::getBooleanVMFlag, this::getIntVMFlag, this::getUintVMFlag,\n-    this::getIntxVMFlag, this::getUintxVMFlag, this::getUint64VMFlag,\n-    this::getSizeTVMFlag, this::getStringVMFlag, this::getDoubleVMFlag);\n+  private final List<Function<String,Object>> flagsGetters;\n+  {\n+      flagsGetters = Arrays.asList(\n+          this::getBooleanVMFlag, this::getIntVMFlag, this::getUintVMFlag,\n+          this::getIntxVMFlag, this::getUintxVMFlag, this::getUint64VMFlag,\n+          this::getSizeTVMFlag, this::getStringVMFlag, this::getDoubleVMFlag);\n+  }\n@@ -782,0 +785,1 @@\n+  @SuppressWarnings(\"initialization\")\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -43,0 +44,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringEquals.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedBuffer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/TestAdaptVarHandles.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -56,0 +57,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -57,0 +59,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/PointerBench.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/BBPoint.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ref\/CleanerChurn.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ref\/CleanerGC.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/StringCharBufferBulkTransfer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -75,0 +76,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/CopyOnWriteArrayListBenchmark.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/logging\/LoggingRuntimeMicros.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/IntegerDuplicate\/IntegerDuplicateProblem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/IntegerMax\/IntegerMaxProblem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/IntegerSum\/IntegerSumProblem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/tasks\/PrimesSieve\/PrimesSieveProblem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -57,0 +58,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/PolynomialP256Bench.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1242,0 +1242,1 @@\n+        @SuppressWarnings(\"initialization\")\n@@ -1253,0 +1254,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/XArrayList.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -470,0 +470,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -1570,0 +1571,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/HashMap.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -608,0 +608,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/XHashMap.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -324,0 +324,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CodeCacheStress.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -191,0 +191,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -192,0 +193,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -193,0 +195,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/InterfaceCalls.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/PostAllocationStores.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -391,0 +391,1 @@\n+            @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/RBTreeSearch.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+        @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/WriteBarrier.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/RedundantLeaPeephole.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -131,0 +132,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -134,0 +136,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -137,0 +140,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/lambda\/invoke\/Function0.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -204,0 +205,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -206,0 +208,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -209,0 +212,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -211,0 +215,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -213,0 +218,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -216,0 +222,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -218,0 +225,1 @@\n+    @SuppressWarnings(\"initialization\")\n@@ -220,0 +228,1 @@\n+    @SuppressWarnings(\"initialization\")\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/lambda\/invoke\/Function1.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}