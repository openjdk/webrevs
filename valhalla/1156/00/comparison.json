{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,17 @@\n+unsigned JvmtiTagMapKey::get_hash(const JvmtiTagMapKey& entry) {\n+  oop obj = entry._obj;\n+  assert(obj != nullptr, \"must lookup obj to hash\");\n+  if (obj->is_inline_type()) {\n+    \/\/ For inline types, use the klass as a hash code and let the equals match the obj.\n+    \/\/ It might have a long bucket but sobeit.\n+    return (unsigned)((int64_t)obj->klass() >> 3);\n+  } else {\n+    return (unsigned)obj->identity_hash();\n+  }\n+}\n+\n+\/\/ Inline types don't use hash for this table.\n+static inline bool fast_no_hash_check(oop obj) {\n+  return (obj->fast_no_hash_check() && !obj->is_inline_type());\n+}\n+\n@@ -97,2 +114,2 @@\n-  if (obj->fast_no_hash_check()) {\n-    \/\/ Objects in the table all have a hashcode.\n+  if (fast_no_hash_check(obj)) {\n+    \/\/ Objects in the table all have a hashcode, unless inlined types.\n@@ -110,1 +127,1 @@\n-  if (obj->fast_no_hash_check()) {\n+  if (fast_no_hash_check(obj)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.cpp","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,5 +55,1 @@\n-  static unsigned get_hash(const JvmtiTagMapKey& entry) {\n-    assert(entry._obj != nullptr, \"must lookup obj to hash\");\n-    return (unsigned)entry._obj->identity_hash();\n-  }\n-\n+  static unsigned get_hash(const JvmtiTagMapKey& entry);\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}