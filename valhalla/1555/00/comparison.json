{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -55,1 +56,3 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestIntrinsics\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.valhalla.inlinetypes.TestIntrinsics\n@@ -61,0 +64,4 @@\n+    private static final WhiteBox WHITEBOX = WhiteBox.getWhiteBox();\n+    private static final boolean UseArrayFlattening = WHITEBOX.getBooleanVMFlag(\"UseArrayFlattening\");\n+    private static final boolean UseFieldFlattening = WHITEBOX.getBooleanVMFlag(\"UseFieldFlattening\");\n+\n@@ -69,1 +76,2 @@\n-                   .addFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                   .addFlags(\"-Xbootclasspath\/a:.\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+WhiteBoxAPI\",\n+                             \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n@@ -1176,0 +1184,35 @@\n+    static public value class SmallValue {\n+        byte a;\n+        byte b;\n+        static final SmallValue DEFAULT = createDefaultInline();\n+        SmallValue(byte a, byte b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @ForceInline\n+        static SmallValue createDefaultInline() {\n+            return new SmallValue((byte)0, (byte)0);\n+        }\n+\n+        @ForceInline\n+        static SmallValue createWithFieldsInline(int x, long y) {\n+            return new SmallValue((byte)x, (byte)y);\n+        }\n+    }\n+\n+    SmallValue test63_vt;\n+    private static final long TEST63_VT_OFFSET;\n+    private static final boolean TEST63_VT_FLATTENED;\n+    private static final int TEST63_VT_LAYOUT;\n+    static {\n+        try {\n+            Field test63_vt_Field = TestIntrinsics.class.getDeclaredField(\"test63_vt\");\n+            TEST63_VT_OFFSET = U.objectFieldOffset(test63_vt_Field);\n+            TEST63_VT_FLATTENED = U.isFlatField(test63_vt_Field);\n+            TEST63_VT_LAYOUT = U.fieldLayout(test63_vt_Field);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -1178,3 +1221,4 @@\n-    public boolean test63(MyValue1 oldVal, MyValue1 newVal) {\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public boolean test63(SmallValue oldVal, SmallValue newVal) {\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndSetFlatValue(this, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1182,1 +1226,2 @@\n-            return U.compareAndSetReference(this, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndSetReference(this, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1188,3 +1233,4 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        test31_vt = MyValue1.createDefaultInline();\n+        \/\/ Unsafe::compareAndSetFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        test63_vt = SmallValue.createDefaultInline();\n@@ -1192,1 +1238,1 @@\n-        boolean res = test63(test31_vt, vt);\n+        boolean res = test63(test63_vt, vt);\n@@ -1195,1 +1241,1 @@\n-        if (TEST31_VT_FLATTENED) {\n+        if (TEST63_VT_FLATTENED) {\n@@ -1197,1 +1243,1 @@\n-            Asserts.assertEQ(test31_vt, vt);\n+            Asserts.assertEQ(test63_vt, vt);\n@@ -1200,2 +1246,2 @@\n-        res = test63(MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n-        if (TEST31_VT_FLATTENED) {\n+        res = test63(SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n+        if (TEST63_VT_FLATTENED) {\n@@ -1203,1 +1249,20 @@\n-            Asserts.assertEQ(test31_vt, vt);\n+            Asserts.assertEQ(test63_vt, vt);\n+        }\n+    }\n+\n+    private static final long TEST64_BASE_OFFSET;\n+    private static final int TEST64_INDEX_SCALE;\n+    private static final SmallValue[] TEST64_ARRAY;\n+    private static final boolean TEST64_FLATTENED_ARRAY;\n+    private static final boolean TEST64_ATOMIC_ARRAY;\n+    private static final int TEST64_LAYOUT;\n+    static {\n+        try {\n+            TEST64_ARRAY = (SmallValue[])ValueClass.newNullRestrictedAtomicArray(SmallValue.class, 2, SmallValue.DEFAULT);\n+            TEST64_BASE_OFFSET = U.arrayBaseOffset(TEST64_ARRAY.getClass());\n+            TEST64_INDEX_SCALE = U.arrayIndexScale(TEST64_ARRAY.getClass());\n+            TEST64_FLATTENED_ARRAY = ValueClass.isFlatArray(TEST64_ARRAY);\n+            TEST64_ATOMIC_ARRAY = ValueClass.isAtomicArray(TEST64_ARRAY);\n+            TEST64_LAYOUT = U.arrayLayout(TEST64_ARRAY.getClass());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n@@ -1209,3 +1274,4 @@\n-    public boolean test64(MyValue1[] arr, MyValue1 oldVal, Object newVal) {\n-        if (TEST33_FLATTENED_ARRAY) {\n-            return U.compareAndSetFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public boolean test64(SmallValue[] arr, SmallValue oldVal, SmallValue newVal) {\n+        if (TEST64_FLATTENED_ARRAY) {\n+            Asserts.assertTrue(UseArrayFlattening);\n+            return U.compareAndSetFlatValue(arr, TEST64_BASE_OFFSET + TEST64_INDEX_SCALE, TEST64_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1213,1 +1279,2 @@\n-            return U.compareAndSetReference(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, oldVal, newVal);\n+            Asserts.assertFalse(UseArrayFlattening);\n+            return U.compareAndSetReference(arr, TEST64_BASE_OFFSET + TEST64_INDEX_SCALE, oldVal, newVal);\n@@ -1219,3 +1286,3 @@\n-        if (TEST33_FLATTENED_ARRAY) return;\n-        MyValue1[] arr = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 2, MyValue1.DEFAULT);\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n+        Asserts.assertTrue(TEST64_ATOMIC_ARRAY);\n+        SmallValue[] arr = (SmallValue[])ValueClass.newNullRestrictedAtomicArray(SmallValue.class, 2, SmallValue.DEFAULT);\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n@@ -1226,1 +1293,1 @@\n-        if (TEST33_FLATTENED_ARRAY) {\n+        if (TEST64_FLATTENED_ARRAY) {\n@@ -1231,2 +1298,2 @@\n-        res = test64(arr, MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n-        if (TEST33_FLATTENED_ARRAY) {\n+        res = test64(arr, SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n+        if (TEST64_FLATTENED_ARRAY) {\n@@ -1240,3 +1307,4 @@\n-    public boolean test65(Object o, Object oldVal, MyValue1 newVal) {\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndSetFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public boolean test65(Object o, Object oldVal, SmallValue newVal) {\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndSetFlatValue(o, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1244,1 +1312,2 @@\n-            return U.compareAndSetReference(o, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndSetReference(o, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1250,3 +1319,4 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        test31_vt = MyValue1.createDefaultInline();\n+        \/\/ Unsafe::compareAndSetFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        test63_vt = SmallValue.createDefaultInline();\n@@ -1254,1 +1324,1 @@\n-        boolean res = test65(this, test31_vt, vt);\n+        boolean res = test65(this, test63_vt, vt);\n@@ -1256,1 +1326,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1258,1 +1328,1 @@\n-        res = test65(this, MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n+        res = test65(this, SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n@@ -1260,1 +1330,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1266,2 +1336,3 @@\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndSetFlatValue(this, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1269,1 +1340,2 @@\n-            return U.compareAndSetReference(this, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndSetReference(this, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1275,3 +1347,4 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        test31_vt = MyValue1.createDefaultInline();\n+        \/\/ Unsafe::compareAndSetFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        test63_vt = SmallValue.createDefaultInline();\n@@ -1279,1 +1352,1 @@\n-        boolean res = test66(test31_vt, vt);\n+        boolean res = test66(test63_vt, vt);\n@@ -1281,1 +1354,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1283,1 +1356,1 @@\n-        res = test66(MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n+        res = test66(SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n@@ -1285,1 +1358,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1290,3 +1363,4 @@\n-    public Object test67(MyValue1 oldVal, MyValue1 newVal) {\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public Object test67(SmallValue oldVal, SmallValue newVal) {\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndExchangeFlatValue(this, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1294,1 +1368,2 @@\n-            return U.compareAndExchangeReference(this, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndExchangeReference(this, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1300,4 +1375,5 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        MyValue1 oldVal = MyValue1.createDefaultInline();\n-        test31_vt = oldVal;\n+        \/\/ Unsafe::compareAndExchangeFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        SmallValue oldVal = SmallValue.createDefaultInline();\n+        test63_vt = oldVal;\n@@ -1305,1 +1381,1 @@\n-        Object res = test67(test31_vt, vt);\n+        Object res = test67(test63_vt, vt);\n@@ -1308,1 +1384,1 @@\n-        if (TEST31_VT_FLATTENED) {\n+        if (TEST63_VT_FLATTENED) {\n@@ -1310,1 +1386,1 @@\n-            Asserts.assertEQ(test31_vt, vt);\n+            Asserts.assertEQ(test63_vt, vt);\n@@ -1313,2 +1389,2 @@\n-        res = test67(MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n-        if (TEST31_VT_FLATTENED) {\n+        res = test67(SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n+        if (TEST63_VT_FLATTENED) {\n@@ -1316,1 +1392,1 @@\n-            Asserts.assertEQ(test31_vt, vt);\n+            Asserts.assertEQ(test63_vt, vt);\n@@ -1322,3 +1398,4 @@\n-    public Object test68(MyValue1[] arr, MyValue1 oldVal, Object newVal) {\n-        if (TEST33_FLATTENED_ARRAY) {\n-            return U.compareAndExchangeFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public Object test68(SmallValue[] arr, SmallValue oldVal, Object newVal) {\n+        if (TEST64_FLATTENED_ARRAY) {\n+            Asserts.assertTrue(UseArrayFlattening);\n+            return U.compareAndExchangeFlatValue(arr, TEST64_BASE_OFFSET + TEST64_INDEX_SCALE, TEST64_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1326,1 +1403,2 @@\n-            return U.compareAndExchangeReference(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, oldVal, newVal);\n+            Asserts.assertFalse(UseArrayFlattening);\n+            return U.compareAndExchangeReference(arr, TEST64_BASE_OFFSET + TEST64_INDEX_SCALE, oldVal, newVal);\n@@ -1332,3 +1410,3 @@\n-        if (TEST33_FLATTENED_ARRAY) return;\n-        MyValue1[] arr = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 2, MyValue1.DEFAULT);\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n+        Asserts.assertTrue(TEST64_ATOMIC_ARRAY);\n+        SmallValue[] arr = (SmallValue[])ValueClass.newNullRestrictedAtomicArray(SmallValue.class, 2, SmallValue.DEFAULT);\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n@@ -1339,2 +1417,2 @@\n-        if (TEST33_FLATTENED_ARRAY) {\n-            Asserts.assertEQ(res, MyValue1.createDefaultInline());\n+        if (TEST64_FLATTENED_ARRAY) {\n+            Asserts.assertEQ(res, SmallValue.createDefaultInline());\n@@ -1344,2 +1422,2 @@\n-        res = test68(arr, MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n-        if (TEST33_FLATTENED_ARRAY) {\n+        res = test68(arr, SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n+        if (TEST64_FLATTENED_ARRAY) {\n@@ -1353,3 +1431,4 @@\n-    public Object test69(Object o, Object oldVal, MyValue1 newVal) {\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndExchangeFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+    public Object test69(Object o, Object oldVal, SmallValue newVal) {\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndExchangeFlatValue(o, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1357,1 +1436,2 @@\n-            return U.compareAndExchangeReference(o, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndExchangeReference(o, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1363,4 +1443,5 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        MyValue1 oldVal = MyValue1.createDefaultInline();\n-        test31_vt = oldVal;\n+        \/\/ Unsafe::compareAndExchangeFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        SmallValue oldVal = SmallValue.createDefaultInline();\n+        test63_vt = oldVal;\n@@ -1368,1 +1449,1 @@\n-        Object res = test69(this, test31_vt, vt);\n+        Object res = test69(this, test63_vt, vt);\n@@ -1370,1 +1451,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1372,1 +1453,1 @@\n-        res = test69(this, MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n+        res = test69(this, SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n@@ -1374,1 +1455,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1380,2 +1461,3 @@\n-        if (TEST31_VT_FLATTENED) {\n-            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n+        if (TEST63_VT_FLATTENED) {\n+            Asserts.assertTrue(UseFieldFlattening);\n+            return U.compareAndExchangeFlatValue(this, TEST63_VT_OFFSET, TEST63_VT_LAYOUT, SmallValue.class, oldVal, newVal);\n@@ -1383,1 +1465,2 @@\n-            return U.compareAndExchangeReference(this, TEST31_VT_OFFSET, oldVal, newVal);\n+            Asserts.assertFalse(UseFieldFlattening);\n+            return U.compareAndExchangeReference(this, TEST63_VT_OFFSET, oldVal, newVal);\n@@ -1389,4 +1472,5 @@\n-        if (TEST31_VT_FLATTENED) return;\n-        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n-        MyValue1 oldVal = MyValue1.createDefaultInline();\n-        test31_vt = oldVal;\n+        \/\/ Unsafe::compareAndExchangeFlatValue needs UseArrayFlattening.\n+        if (UseFieldFlattening && !UseArrayFlattening) return;\n+        SmallValue vt = SmallValue.createWithFieldsInline(rI, rL);\n+        SmallValue oldVal = SmallValue.createDefaultInline();\n+        test63_vt = oldVal;\n@@ -1394,1 +1478,1 @@\n-        Object res = test70(test31_vt, vt);\n+        Object res = test70(test63_vt, vt);\n@@ -1396,1 +1480,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n@@ -1398,1 +1482,1 @@\n-        res = test70(MyValue1.createDefaultInline(), MyValue1.createDefaultInline());\n+        res = test70(SmallValue.createDefaultInline(), SmallValue.createDefaultInline());\n@@ -1400,1 +1484,1 @@\n-        Asserts.assertEQ(test31_vt, vt);\n+        Asserts.assertEQ(test63_vt, vt);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":178,"deletions":94,"binary":false,"changes":272,"status":"modified"}]}