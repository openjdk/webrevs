{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -185,1 +186,4 @@\n-        return (b ? TRUE : FALSE);\n+        if (!PreviewFeatures.isEnabled()) {\n+            return (b ? TRUE : FALSE);\n+        }\n+        return new Boolean(b);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -145,5 +146,17 @@\n-     * If a new {@code Byte} instance is not required, this method\n-     * should generally be used in preference to the constructor\n-     * {@link #Byte(byte)}, as this method is likely to yield\n-     * significantly better space and time performance since\n-     * all byte values are cached.\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          <p>\n+     *              - When preview features are NOT enabled, {@code Byte} is an identity class.\n+     *              If a new {@code Byte} instance is not required, this method\n+     *              should generally be used in preference to the constructor\n+     *              {@link #Byte(byte)}, as this method is likely to yield\n+     *              significantly better space and time performance since\n+     *              all byte values are cached.\n+     *          <\/p>\n+     *          <p>\n+     *              - When preview features are enabled, {@code Byte} is a {@linkplain Class#isValue value class}.\n+     *              The {@code valueOf} behavior is the same as invoking the constructor,\n+     *              whether cached or not.\n+     *          <\/p>\n+     *      <\/div>\n+     * <\/div>\n@@ -159,1 +172,1 @@\n-        return ByteCache.cache[(int)b + offset];\n+        return (!PreviewFeatures.isEnabled()) ? ByteCache.cache[(int)b + offset] : new Byte(b);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -9274,9 +9275,20 @@\n-     * If a new {@code Character} instance is not required, this method\n-     * should generally be used in preference to the constructor\n-     * {@link #Character(char)}, as this method is likely to yield\n-     * significantly better space and time performance by caching\n-     * frequently requested values.\n-     *\n-     * This method will always cache values in the range {@code\n-     * '\\u005Cu0000'} to {@code '\\u005Cu007F'}, inclusive, and may\n-     * cache other values outside of this range.\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          <p>\n+     *              - When preview features are NOT enabled, {@code Character} is an identity class.\n+     *              If a new {@code Character} instance is not required, this method\n+     *              should generally be used in preference to the constructor\n+     *              {@link #Character(char)}, as this method is likely to yield\n+     *              significantly better space and time performance by caching\n+     *              frequently requested values.\n+     *              This method will always cache values in the range {@code\n+     *              '\\u005Cu0000'} to {@code '\\u005Cu007F'}, inclusive, and may\n+     *              cache other values outside of this range.\n+     *          <\/p>\n+     *          <p>\n+     *             - When preview features are enabled, {@code Character} is a {@linkplain Class#isValue value class}.\n+     *              The {@code valueOf} behavior is the same as invoking the constructor,\n+     *              whether cached or not.\n+     *          <\/p>\n+     *      <\/div>\n+     * <\/div>\n@@ -9291,2 +9303,4 @@\n-        if (c <= 127) { \/\/ must cache\n-            return CharacterCache.cache[(int)c];\n+        if (!PreviewFeatures.isEnabled()) {\n+            if (c <= 127) { \/\/ must cache\n+                return CharacterCache.cache[(int) c];\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -999,8 +1000,20 @@\n-     * {@code int} value.  If a new {@code Integer} instance is not\n-     * required, this method should generally be used in preference to\n-     * the constructor {@link #Integer(int)}, as this method is likely\n-     * to yield significantly better space and time performance by\n-     * caching frequently requested values.\n-     *\n-     * This method will always cache values in the range -128 to 127,\n-     * inclusive, and may cache other values outside of this range.\n+     * {@code int} value.\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          <p>\n+     *              - When preview features are NOT enabled, {@code Integer} is an identity class.\n+     *              If a new {@code Integer} instance is not\n+     *              required, this method should generally be used in preference to\n+     *              the constructor {@link #Integer(int)}, as this method is likely\n+     *              to yield significantly better space and time performance by\n+     *              caching frequently requested values.\n+     *              This method will always cache values in the range -128 to 127,\n+     *              inclusive, and may cache other values outside of this range.\n+     *          <\/p>\n+     *          <p>\n+     *              - When preview features are enabled, {@code Integer} is a {@linkplain Class#isValue value class}.\n+     *              The {@code valueOf} behavior is the same as invoking the constructor,\n+     *              whether cached or not.\n+     *          <\/p>\n+     *      <\/div>\n+     * <\/div>\n@@ -1015,2 +1028,4 @@\n-        if (i >= IntegerCache.low && i <= IntegerCache.high)\n-            return IntegerCache.cache[i + (-IntegerCache.low)];\n+        if (!PreviewFeatures.isEnabled()) {\n+            if (i >= IntegerCache.low && i <= IntegerCache.high)\n+                return IntegerCache.cache[i + (-IntegerCache.low)];\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -992,8 +993,19 @@\n-     * If a new {@code Long} instance is not required, this method\n-     * should generally be used in preference to the constructor\n-     * {@link #Long(long)}, as this method is likely to yield\n-     * significantly better space and time performance by caching\n-     * frequently requested values.\n-     *\n-     * This method will always cache values in the range -128 to 127,\n-     * inclusive, and may cache other values outside of this range.\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          <p>\n+     *              - When preview features are NOT enabled, {@code Long} is an identity class.\n+     *              If a new {@code Long} instance is not required, this method\n+     *              should generally be used in preference to the constructor\n+     *              {@link #Long(long)}, as this method is likely to yield\n+     *              significantly better space and time performance by caching\n+     *              frequently requested values.\n+     *              This method will always cache values in the range -128 to 127,\n+     *              inclusive, and may cache other values outside of this range.\n+     *          <\/p>\n+     *          <p>\n+     *              - When preview features are enabled, {@code Long} is a {@linkplain Class#isValue value class}.\n+     *              The {@code valueOf} behavior is the same as invoking the constructor,\n+     *              whether cached or not.\n+     *          <\/p>\n+     *      <\/div>\n+     * <\/div>\n@@ -1008,3 +1020,5 @@\n-        final int offset = 128;\n-        if (l >= -128 && l <= 127) { \/\/ will cache\n-            return LongCache.cache[(int)l + offset];\n+        if (!PreviewFeatures.isEnabled()) {\n+            if (l >= -128 && l <= 127) { \/\/ will cache\n+                final int offset = 128;\n+                return LongCache.cache[(int) l + offset];\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -272,8 +273,19 @@\n-     * If a new {@code Short} instance is not required, this method\n-     * should generally be used in preference to the constructor\n-     * {@link #Short(short)}, as this method is likely to yield\n-     * significantly better space and time performance by caching\n-     * frequently requested values.\n-     *\n-     * This method will always cache values in the range -128 to 127,\n-     * inclusive, and may cache other values outside of this range.\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          <p>\n+     *              - When preview features are NOT enabled, {@code Short} is an identity class.\n+     *              If a new {@code Short} instance is not required, this method\n+     *              should generally be used in preference to the constructor\n+     *              {@link #Short(short)}, as this method is likely to yield\n+     *              significantly better space and time performance by caching\n+     *              frequently requested values.\n+     *              This method will always cache values in the range -128 to 127,\n+     *              inclusive, and may cache other values outside of this range.\n+     *          <\/p>\n+     *          <p>\n+     *              - When preview features are enabled, {@code Short} is a {@linkplain Class#isValue value class}.\n+     *              The {@code valueOf} behavior is the same as invoking the constructor,\n+     *              whether cached or not.\n+     *          <\/p>\n+     *      <\/div>\n+     * <\/div>\n@@ -288,4 +300,6 @@\n-        final int offset = 128;\n-        int sAsInt = s;\n-        if (sAsInt >= -128 && sAsInt <= 127) { \/\/ must cache\n-            return ShortCache.cache[sAsInt + offset];\n+        if (!PreviewFeatures.isEnabled()) {\n+            final int offset = 128;\n+            int sAsInt = s;\n+            if (sAsInt >= -128 && sAsInt <= 127) { \/\/ must cache\n+                return ShortCache.cache[sAsInt + offset];\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @run main\/othervm --enable-preview -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+EliminateAutoBox\n+ *                   compiler.eliminateAutobox.TestLongBoxing\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestLongBoxing.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,6 @@\n+\n+\/*\n+ * test\n+ * @run main CheckIntegerCacheApp\n+ * @run main\/othervm --enable-preview CheckIntegerCacheApp\n+ *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/CheckIntegerCacheApp.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @run main\/othervm --enable-preview ValueOf\n","filename":"test\/jdk\/java\/lang\/Integer\/ValueOf.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}