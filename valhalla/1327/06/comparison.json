{"files":[{"patch":"@@ -614,2 +614,2 @@\n-     * {@return {@code true} if this {@code Class} object represents an identity\n-     * class or interface; otherwise {@code false}}\n+     * {@return {@code true} if this {@code Class} object represents an identity class;\n+     * otherwise {@code false}}\n@@ -617,3 +617,2 @@\n-     * If this {@code Class} object represents an array type, then this method\n-     * returns {@code true}.\n-     * If this {@code Class} object represents a primitive type, or {@code void},\n+     * If this {@code Class} object represents an array type then this method returns {@code true}.\n+     * If this {@code Class} object represents an interface, a primitive type, or {@code void}\n@@ -622,0 +621,1 @@\n+     * @see AccessFlag#IDENTITY\n@@ -628,2 +628,3 @@\n-     * {@return {@code true} if this {@code Class} object represents a value\n-     * class; otherwise {@code false}}\n+     * {@return {@code true} if this {@code Class} object represents a value class;\n+     * otherwise {@code false}}\n+     * All classes that are not {@linkplain #isIdentity identity classes} are value classes.\n@@ -631,2 +632,3 @@\n-     * If this {@code Class} object represents an array type, an interface,\n-     * a primitive type, or {@code void}, then this method returns {@code false}.\n+     * If this {@code Class} object represents an array type then this method returns {@code false}.\n+     * If this {@code Class} object represents an interface, a primitive type, or {@code void},\n+     * then this method returns {@code true}.\n@@ -634,0 +636,1 @@\n+     * @see AccessFlag#IDENTITY\n@@ -638,6 +641,1 @@\n-        if (!PreviewFeatures.isEnabled()) {\n-            return false;\n-        }\n-         if (isPrimitive() || isArray() || isInterface())\n-             return false;\n-        return ((getModifiers() & Modifier.IDENTITY) == 0);\n+        return PreviewFeatures.isEnabled() ? !isIdentity() : false;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n- * objects do not have identity and cannot be used for synchronization or locking.\n+ * objects do not have identity and cannot be used for synchronization, locking,\n+ * or for any type of {@link java.lang.ref.Reference}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -474,0 +474,15 @@\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          The \"identity hash code\" of a {@linkplain Class#isValue() value object}\n+     *          is computed by combining the hash codes of the value object's fields recursively.\n+     *      <\/div>\n+     * <\/div>\n+     * @apiNote\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          Note that, like ==, this hash code exposes information about a value object's\n+     *          private fields that might otherwise be hidden by an identity object.\n+     *          Developers should be cautious about storing sensitive secrets in value object fields.\n+     *      <\/div>\n+     * <\/div>\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -599,1 +599,1 @@\n-            return cls.isValue() && cls.accessFlags().contains(AccessFlag.FINAL);\n+            return cls.isValue() && cls.accessFlags().contains(AccessFlag.FINAL) && !cls.isPrimitive();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n- * reference-equality in place of object-equality when comparing keys (and\n- * values).  In other words, in an {@code IdentityHashMap}, two keys\n+ * `==` in place of object-equality when comparing keys (and values).\n+ * In other words, in an {@code IdentityHashMap}, two keys\n","filename":"src\/java.base\/share\/classes\/java\/util\/IdentityHashMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -183,2 +182,2 @@\n-    * {@return {@code true} if the specified object reference is an identity object,\n-    * otherwise {@code false}}\n+    * {@return {@code true} if the object is a non-null reference\n+    * to an {@linkplain Class#isIdentity() identity object}, otherwise {@code false}}\n@@ -186,2 +185,10 @@\n-    * @param obj an object\n-    * @throws NullPointerException if {@code obj} is {@code null}\n+    * @apiNote\n+    * If the parameter is {@code null}, there is no object\n+    * and hence no class to check for identity; the return is {@code false}.\n+    * To test for a {@linkplain Class#isValue() value object} use:\n+    * {@snippet type=\"java\" :\n+    *     if (obj != null && !Objects.hasIdentity(obj)) {\n+    *         \/\/ obj is a non-null value object\n+    *     }\n+    * }\n+    * @param obj an object or {@code null}\n@@ -193,3 +200,14 @@\n-        requireNonNull(obj);\n-        return obj.getClass().isIdentity() ||  \/\/ Before Valhalla all classes are identity classes\n-                obj.getClass() == Object.class;\n+        return (obj == null) ? false : obj.getClass().isIdentity();\n+    }\n+\n+   \/**\n+    * {@return {@code true} if the object is a non-null reference\n+    * to an {@linkplain Class#isValue() value object}, otherwise {@code false}}\n+    *\n+    * @param obj an object or {@code null}\n+    * @since Valhalla\n+    *\/\n+   @PreviewFeature(feature = PreviewFeature.Feature.VALUE_OBJECTS)\n+\/\/    @IntrinsicCandidate\n+    public static boolean isValueObject(Object obj) {\n+        return (obj == null) ? false : obj.getClass().isValue();\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.ref.WeakReference;\n@@ -30,0 +29,1 @@\n+import java.lang.ref.WeakReference;\n@@ -125,0 +125,16 @@\n+ * @apiNote\n+ * <div class=\"preview-block\">\n+ *      <div class=\"preview-comment\">\n+ *          Objects that are {@linkplain Class#isValue() value objects} do not have identity\n+ *          and can not be used as keys in a {@code WeakHashMap}. {@linkplain java.lang.ref.Reference References}\n+ *          such as {@linkplain WeakReference WeakReference} used by {@code WeakhashMap}\n+ *          to hold the key; cannot refer to a value object.\n+ *          Methods such as {@linkplain #get get} or {@linkplain #containsKey containsKey}\n+ *          will always return {@code null} or {@code false} respectively.\n+ *          The methods such as {@linkplain #put put}, {@linkplain #putAll putAll},\n+ *          {@linkplain #compute(Object, BiFunction) compute}, and\n+ *          {@linkplain #computeIfAbsent(Object, Function) computeIfAbsent} or any method putting\n+ *          a value object, as a key, throw {@link IdentityException}.\n+ *      <\/div>\n+ * <\/div>\n+ *\n@@ -291,0 +307,2 @@\n+     * The key may be a value object, but it will never be equal to the referent\n+     * so does not need a separate Objects.hasIdentity check.\n@@ -459,0 +477,1 @@\n+     * @throws IdentityException if {@code key} is a value object\n@@ -462,0 +481,1 @@\n+        Objects.requireIdentity(k);\n@@ -551,0 +571,1 @@\n+     * @throws  IdentityException if any of the {@code keys} is a value object\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                                        \"public abstract interface java.util.Map<K,V>\"),\n+                                        \"public abstract value interface java.util.Map<K,V>\"),\n@@ -144,1 +144,1 @@\n-@ExpectedGenericString(\"abstract interface AnInterface\")\n+@ExpectedGenericString(\"abstract value interface AnInterface\")\n@@ -147,1 +147,1 @@\n-@ExpectedGenericString(\"abstract interface LocalMap<K,V>\")\n+@ExpectedGenericString(\"abstract value interface LocalMap<K,V>\")\n@@ -205,1 +205,1 @@\n-@ExpectedGenericString(\"abstract sealed interface SealedRootIntf\")\n+@ExpectedGenericString(\"abstract sealed value interface SealedRootIntf\")\n@@ -244,1 +244,1 @@\n-    @ExpectedGenericString(\"public abstract static sealed interface SealedRootIntf$IntfA\")\n+    @ExpectedGenericString(\"public abstract static sealed value interface SealedRootIntf$IntfA\")\n@@ -250,1 +250,1 @@\n-    @ExpectedGenericString(\"public abstract static non-sealed interface SealedRootIntf$IntfB\")\n+    @ExpectedGenericString(\"public abstract static non-sealed value interface SealedRootIntf$IntfB\")\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- *          4802647 7123424 8024709 8193128\n+ *          4802647 7123424 8024709 8193128 8346307\n@@ -34,0 +34,1 @@\n+ * @run main\/othervm --enable-preview MOAT\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.WeakHashMap;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @summary Check WeakHashMap throws IdentityException when Value Objects are put\n+ * @enablePreview\n+ * @run junit WeakHashMapValues\n+ *\/\n+public class WeakHashMapValues {\n+\n+    \/*\n+     * Check that any kind of put with a value class as a key throws IdentityException\n+     *\/\n+    @Test\n+    void checkThrowsIdentityException() {\n+        WeakHashMap<Object, Object> whm = new WeakHashMap<>();\n+        Object key = new Foo(1);\n+        assertThrows(IdentityException.class, () -> whm.put(key, \"1\"));\n+        assertThrows(IdentityException.class, () -> whm.putIfAbsent(key, \"2\"));\n+        assertThrows(IdentityException.class, () -> whm.compute(key, (_, _) -> \"3\"));\n+        assertThrows(IdentityException.class, () -> whm.computeIfAbsent(key, (_) -> \"4\"));\n+\n+        HashMap<Object, String> hmap = new HashMap<>();\n+        hmap.put(key, \"6\");\n+        assertThrows(IdentityException.class, () -> whm.putAll(hmap));\n+    }\n+\n+    \/*\n+     * Check that any kind of put with Integer as a value class as a key throws IdentityException\n+     *\/\n+    @Test\n+    void checkIntegerThrowsIdentityException() {\n+        WeakHashMap<Object, Object> whm = new WeakHashMap<>();\n+        Object key = 1;\n+        assertThrows(IdentityException.class, () -> whm.put(key, \"1\"));\n+        assertThrows(IdentityException.class, () -> whm.putIfAbsent(key, \"2\"));\n+        assertThrows(IdentityException.class, () -> whm.compute(key, (_, _) -> \"3\"));\n+        assertThrows(IdentityException.class, () -> whm.computeIfAbsent(key, (_) -> \"4\"));\n+\n+        HashMap<Object, String> hmap = new HashMap<>();\n+        hmap.put(key, \"6\");\n+        assertThrows(IdentityException.class, () -> whm.putAll(hmap));\n+\n+    }\n+\n+    \/**\n+     * Check that queries with a value object return false or null.\n+     *\/\n+    @Test\n+    void checkValueObjectGet() {\n+        WeakHashMap<Object, Object> whm = new WeakHashMap<>();\n+        Object key = \"X\";\n+        Object v = new Foo(1);\n+        assertEquals(whm.get(v), null, \"Get of value object should return null\");\n+        assertEquals(whm.containsKey(v), false, \"containsKey should return false\");\n+    }\n+}\n+\n+value class Foo {\n+    int x;\n+    Foo(int x) {\n+        this.x = x;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/WeakHashMapValues.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Optional;\n@@ -34,0 +35,1 @@\n+import java.util.function.Function;\n@@ -35,0 +37,2 @@\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Modifier;\n@@ -111,0 +115,1 @@\n+    \/\/ Instances to test, classes of each instance are tested too\n@@ -112,0 +117,1 @@\n+        Function<String, String> lambda1 = (a) -> \"xyz\";\n@@ -113,1 +119,2 @@\n-                Arguments.of(new Object(), true, false),\n+                Arguments.of(lambda1, true, false),         \/\/ a lambda (Identity for now)\n+                Arguments.of(new Object(), true, false),    \/\/ java.lang.Object\n@@ -115,2 +122,0 @@\n-                Arguments.of(String.class, true, false),\n-                Arguments.of(Object.class, true, false),\n@@ -127,0 +132,19 @@\n+    \/\/ Classes to test\n+    static Stream<Arguments> classesData() {\n+        return Stream.of(\n+                Arguments.of(int.class, false, true),       \/\/ Fabricated primitive classes\n+                Arguments.of(long.class, false, true),\n+                Arguments.of(short.class, false, true),\n+                Arguments.of(byte.class, false, true),\n+                Arguments.of(float.class, false, true),\n+                Arguments.of(double.class, false, true),\n+                Arguments.of(char.class, false, true),\n+                Arguments.of(void.class, false, true),\n+                Arguments.of(String.class, true, false),\n+                Arguments.of(Object.class, true, false),\n+                Arguments.of(Function.class, false, true),  \/\/ Interface\n+                Arguments.of(Optional.class, false, true),  \/\/ Concrete value classes...\n+                Arguments.of(Character.class, false, true)\n+        );\n+    }\n+\n@@ -131,0 +155,1 @@\n+        assertEquals(identityClass, Objects.hasIdentity(obj), \"Objects.hasIdentity(\" + obj + \")\");\n@@ -132,5 +157,3 @@\n-        if (clazz == Object.class) {\n-            assertTrue(Objects.hasIdentity(obj), \"Objects.hasIdentity()\");\n-        } else {\n-            assertEquals(identityClass, Objects.hasIdentity(obj), \"Objects.hasIdentity()\");\n-        }\n+        \/\/ Run tests on the class\n+        classTests(clazz, identityClass, valueClass);\n+    }\n@@ -138,1 +161,4 @@\n-        assertEquals(identityClass, clazz.isIdentity(), \"Class.isIdentity()\");\n+    @ParameterizedTest\n+    @MethodSource(\"classesData\")\n+    public void classTests(Class<?> clazz, boolean identityClass, boolean valueClass) {\n+        assertEquals(identityClass, clazz.isIdentity(), \"Class.isIdentity(): \" + clazz);\n@@ -140,1 +166,9 @@\n-        assertEquals(valueClass, clazz.isValue(), \"Class.isValue()\");\n+        assertEquals(valueClass, clazz.isValue(), \"Class.isValue(): \" + clazz);\n+\n+        assertEquals(clazz.accessFlags().contains(AccessFlag.IDENTITY),\n+                identityClass, \"AccessFlag.IDENTITY: \" + clazz);\n+\n+        int modifiers = clazz.getModifiers();\n+        assertEquals(clazz.isIdentity(), (modifiers & Modifier.IDENTITY) != 0, \"Class.getModifiers() & IDENTITY != 0\");\n+        assertEquals(clazz.isValue(), (modifiers & Modifier.IDENTITY) == 0, \"Class.getModifiers() & IDENTITY == 0\");\n+    }\n@@ -142,6 +176,4 @@\n-        \/\/ JDK-8294866: Not yet implemented checks of AccessFlags for the array class\n-\/\/        assertEquals(clazz.accessFlags().contains(AccessFlag.IDENTITY),\n-\/\/                identityClass, \"AccessFlag.IDENTITY\");\n-\/\/\n-\/\/        assertEquals(clazz.accessFlags().contains(AccessFlag.VALUE),\n-\/\/                valueClass, \"AccessFlag.VALUE\");\n+    @Test\n+    public void identityTestNull() {\n+        assertFalse(Objects.hasIdentity(null), \"Objects.hasIdentity(null)\");\n+        assertFalse(Objects.isValueObject(null), \"Objects.isValueObject(null)\");\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":48,"deletions":16,"binary":false,"changes":64,"status":"modified"}]}