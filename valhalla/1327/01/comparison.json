{"files":[{"patch":"@@ -33,1 +33,2 @@\n- * objects do not have identity and cannot be used for synchronization or locking.\n+ * objects do not have identity and cannot be used for synchronization, locking,\n+ * or for any type of {@link java.lang.ref.Reference}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -676,0 +676,15 @@\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          The \"identity hash code\" of a {@linkplain Class#isValue() value object}\n+     *          is computed by combining the hash codes of the value object's fields recursively.\n+     *      <\/div>\n+     * <\/div>\n+     * @apiNote\n+     * <div class=\"preview-block\">\n+     *      <div class=\"preview-comment\">\n+     *          Note that, like ==, this hash code exposes information about a value object's\n+     *          private fields that might otherwise be hidden by an identity object.\n+     *          Developers should be cautious about storing sensitive secrets in value object fields.\n+     *      <\/div>\n+     * <\/div>\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,3 @@\n- * reference-equality in place of object-equality when comparing keys (and\n+ * reference-equality for {@linkplain Class#isIdentity() identity objects} and\n+ * substutitability for {@linkplain Class#isValue value objects}\n+ * in place of object-equality when comparing keys (and\n","filename":"src\/java.base\/share\/classes\/java\/util\/IdentityHashMap.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.lang.ref.WeakReference;\n+import java.lang.ref.Reference;\n@@ -30,0 +30,1 @@\n+import java.lang.ref.WeakReference;\n@@ -33,0 +34,1 @@\n+import java.util.function.Function;\n@@ -125,0 +127,16 @@\n+ * @apiNote\n+ * <div class=\"preview-block\">\n+ *      <div class=\"preview-comment\">\n+ *          Keys that are {@linkplain Class#isValue() value objects} do not have identity\n+ *          and can not be used as keys in a {@code WeakHashMap}. {@linkplain Reference References}\n+ *          such as {@linkplain WeakReference WeakReference} used by {@code WeakhashMap}\n+ *          to hold the key; cannot refer to a value object.\n+ *          Methods such as {@linkplain #get get} or {@linkplain #containsKey containsKey}\n+ *          will always return {@code null} or {@code false} respectively.\n+ *          The methods such as {@linkplain #put put}, {@linkplain #putAll putAll},\n+ *          {@linkplain #compute(Object, BiFunction) compute}, and\n+ *          {@linkplain #computeIfAbsent(Object, Function) computeIfAbsent} or any method putting\n+ *          a value object, as a key, throw {@link IdentityException}.\n+ *      <\/div>\n+ * <\/div>\n+ *\n@@ -293,0 +311,3 @@\n+        \/\/ only identity objects can be compared to a reference\n+        if (!Objects.hasIdentity(key))\n+            return false;\n@@ -459,0 +480,1 @@\n+     * @throws IdentityException if the {@code key} is a value object\n@@ -462,0 +484,1 @@\n+        Objects.hasIdentity(k);\n@@ -551,0 +574,1 @@\n+     * @throws  IdentityException if any of the {@code keys} is a value object\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- *          4802647 7123424 8024709 8193128\n+ *          4802647 7123424 8024709 8193128 8346307\n@@ -34,0 +34,1 @@\n+ * @run main\/othervm --enable-preview MOAT\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.WeakHashMap;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/*\n+ * @test\n+ * @summary Check WeakHashMap throws IdentityException when Value Objects are put\n+ * @enablePreview\n+ * @run junit WeakHashMapValues\n+ *\/\n+public class WeakHashMapValues {\n+\n+    \/*\n+     * Check that any kind of put with a value class as a key throws IdentityException\n+     *\/\n+    @Test\n+    void checkThrowsIdentityException() {\n+        WeakHashMap<Object, Object> whm = new WeakHashMap<>();\n+        Object key = new Foo(1);\n+        assertThrows(IdentityException.class, () -> whm.put(key, \"1\"));\n+        assertThrows(IdentityException.class, () -> whm.putIfAbsent(key, \"2\"));\n+        assertThrows(IdentityException.class, () -> whm.compute(key, (_, _) -> \"3\"));\n+        assertThrows(IdentityException.class, () -> whm.computeIfAbsent(key, (_) -> \"4\"));\n+\n+        HashMap<Object, String> hmap = new HashMap<>();\n+        hmap.put(key, \"6\");\n+        assertThrows(IdentityException.class, () -> whm.putAll(hmap));\n+\n+    }\n+    \/*\n+     * Check that any kind of put with Integer as a value class as a key throws IdentityException\n+     *\/\n+    @Test\n+    void checkIntegerThrowsIdentityException() {\n+        WeakHashMap<Object, Object> whm = new WeakHashMap<>();\n+        Object key = 1;\n+        assertThrows(IdentityException.class, () -> whm.put(key, \"1\"));\n+        assertThrows(IdentityException.class, () -> whm.putIfAbsent(key, \"2\"));\n+        assertThrows(IdentityException.class, () -> whm.compute(key, (_, _) -> \"3\"));\n+        assertThrows(IdentityException.class, () -> whm.computeIfAbsent(key, (_) -> \"4\"));\n+\n+        HashMap<Object, String> hmap = new HashMap<>();\n+        hmap.put(key, \"6\");\n+        assertThrows(IdentityException.class, () -> whm.putAll(hmap));\n+\n+    }\n+}\n+\n+value class Foo {\n+    int x;\n+    Foo(int x) {\n+        this.x = x;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/WeakHashMapValues.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}