{"files":[{"patch":"@@ -828,2 +828,4 @@\n-      \/\/ Receiver updated by the just called constructor. We need to update the map to make the effect visible.\n-      replace_in_map(receiver, cloned_updated_receiver);\n+      \/\/ Receiver updated by the just called constructor. We need to update the map to make the effect visible. After\n+      \/\/ the super() call, only the updated receiver in local(0) will be used from now on. Therefore, we do not need\n+      \/\/ to update the original receiver 'receiver' but only the 'updated_receiver'.\n+      replace_in_map(updated_receiver, cloned_updated_receiver);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,14 @@\n+ *                   compiler.valhalla.inlinetypes.TestValueConstruction\n+ *\/\n+\n+\/**\n+ * @test id=DontInlineHelper\n+ * @summary Test construction of value objects.\n+ * @key randomness\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                   -XX:CompileCommand=dontinline,compiler*::helper*\n+ *                   -XX:CompileCommand=inline,TestValueConstruction::checkDeopt\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueConstruction.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}