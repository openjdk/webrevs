{"files":[{"patch":"@@ -29,1 +29,1 @@\n-* @compile -XDenablePrimitiveClasses TestFloat16VectorSum.java\n+* @compile  TestFloat16VectorSum.java\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorSum.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,5 @@\n+    private static float InfinityF = Float.POSITIVE_INFINITY;\n+    private static float NaNf = Float.NaN;\n+\n+    private static final float MAX_VAL_FP16 = 0x1.ffcp15f;\n+\n@@ -44,0 +49,1 @@\n+        FusedMultiplyAddTests.main();\n@@ -71,3 +77,3 @@\n-        checkFloat16(POSITIVE_INFINITY,  Float.POSITIVE_INFINITY,  \"+infinity\");\n-        checkFloat16(NEGATIVE_INFINITY,  Float.NEGATIVE_INFINITY,  \"-infinity\");\n-        checkFloat16(NaN,                Float.NaN,            \"NaN\");\n+        checkFloat16(POSITIVE_INFINITY,   InfinityF,  \"+infinity\");\n+        checkFloat16(NEGATIVE_INFINITY,  -InfinityF,  \"-infinity\");\n+        checkFloat16(NaN,                 NaNf,            \"NaN\");\n@@ -99,2 +105,2 @@\n-            {Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY},\n-            {Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY},\n+            {InfinityF, -InfinityF},\n+            {-InfinityF, InfinityF},\n@@ -102,1 +108,1 @@\n-            {Float.NaN, Float.NaN},\n+            {NaNf,       NaNf},\n@@ -126,2 +132,2 @@\n-            {Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY},\n-            {Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY},\n+            { InfinityF, InfinityF},\n+            {-InfinityF, InfinityF},\n@@ -129,1 +135,1 @@\n-            {Float.NaN, Float.NaN},\n+            {NaNf,       NaNf},\n@@ -151,2 +157,2 @@\n-            Float.NEGATIVE_INFINITY,\n-            Float.POSITIVE_INFINITY,\n+            -InfinityF,\n+            InfinityF,\n@@ -171,2 +177,2 @@\n-            Float.NEGATIVE_INFINITY,\n-            Float.POSITIVE_INFINITY,\n+            -InfinityF,\n+             InfinityF,\n@@ -284,2 +290,2 @@\n-            {Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY},\n-            {Float.NEGATIVE_INFINITY, Float.NaN},\n+            { InfinityF, InfinityF},\n+            {-InfinityF, NaNf},\n@@ -287,1 +293,1 @@\n-            {Float.NaN, Float.NaN},\n+            {NaNf,       NaNf},\n@@ -305,3 +311,3 @@\n-            {Float.POSITIVE_INFINITY, MAX_EXPONENT + 1},\n-            {Float.POSITIVE_INFINITY, MAX_EXPONENT + 1},\n-            {Float.NaN,               MAX_EXPONENT + 1},\n+            {InfinityF, MAX_EXPONENT + 1},\n+            {InfinityF, MAX_EXPONENT + 1},\n+            {NaNf,      MAX_EXPONENT + 1},\n@@ -317,2 +323,2 @@\n-            {0x1.ffcp14f,  MAX_EXPONENT - 1},  \/\/ Float16.MAX_VALUE * 0.5\n-            {0x1.ffcp15f,  MAX_EXPONENT},      \/\/ Float16.MAX_VALUE\n+            {MAX_VAL_FP16*0.5f, MAX_EXPONENT - 1},\n+            {MAX_VAL_FP16,      MAX_EXPONENT},\n@@ -336,3 +342,3 @@\n-            {Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY},\n-            {Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY},\n-            {Float.NaN,               Float.NaN},\n+            {InfinityF, InfinityF},\n+            {InfinityF, InfinityF},\n+            {NaNf,      NaNf},\n@@ -351,2 +357,2 @@\n-            {0x1.ffcp14f,  0x0.004p14f},  \/\/ Test Float16.MAX_VALUE * 0.5\n-            {0x1.ffcp15f,  0x0.004p15f},  \/\/ Test Float16.MAX_VALUE\n+            {MAX_VAL_FP16*0.5f, 0x0.004p14f},\n+            {MAX_VAL_FP16,      0x0.004p15f},\n@@ -371,0 +377,162 @@\n+\n+    class FusedMultiplyAddTests {\n+        public static void main(String... args) {\n+            testNonFinite();\n+            testZeroes();\n+            testSimple();\n+        }\n+\n+        private static void testNonFinite() {\n+            float [][] testCases = {\n+                {1.0f,       InfinityF,  2.0f,\n+                 InfinityF,\n+                },\n+\n+                {1.0f,       2.0f,       InfinityF,\n+                 InfinityF,\n+                },\n+\n+                {InfinityF,  1.0f,       InfinityF,\n+                 InfinityF,\n+                },\n+\n+                {0x1.ffcp14f, 2.0f,     -InfinityF,\n+                 -InfinityF},\n+\n+                {InfinityF,  1.0f,      -InfinityF,\n+                 NaNf,\n+                },\n+\n+                {-InfinityF, 1.0f,       InfinityF,\n+                 NaNf,\n+                },\n+\n+                {1.0f,       NaNf,       2.0f,\n+                 NaNf,\n+                },\n+\n+                {1.0f,       2.0f,       NaNf,\n+                 NaNf,\n+                },\n+\n+                {InfinityF,  2.0f,       NaNf,\n+                 NaNf,\n+                },\n+\n+                {NaNf,       2.0f,       InfinityF,\n+                 NaNf,\n+                },\n+            };\n+\n+            for (float[] testCase: testCases) {\n+                testFusedMacCase(testCase[0], testCase[1], testCase[2], testCase[3]);\n+            }\n+        }\n+\n+        private static void testZeroes() {\n+            float [][] testCases = {\n+                {+0.0f, +0.0f, +0.0f,\n+                 +0.0f,\n+                },\n+\n+                {-0.0f, +0.0f, +0.0f,\n+                 +0.0f,\n+                },\n+\n+                {+0.0f, +0.0f, -0.0f,\n+                 +0.0f,\n+                },\n+\n+                {+0.0f, +0.0f, -0.0f,\n+                 +0.0f,\n+                },\n+\n+                {-0.0f, +0.0f, -0.0f,\n+                 -0.0f,\n+                },\n+\n+                {-0.0f, -0.0f, -0.0f,\n+                 +0.0f,\n+                },\n+\n+                {-1.0f, +0.0f, -0.0f,\n+                 -0.0f,\n+                },\n+\n+                {-1.0f, +0.0f, +0.0f,\n+                 +0.0f,\n+                },\n+\n+                {-2.0f, +0.0f, -0.0f,\n+                 -0.0f,\n+                },\n+            };\n+\n+            for (float[] testCase: testCases) {\n+                testFusedMacCase(testCase[0], testCase[1], testCase[2], testCase[3]);\n+            }\n+        }\n+\n+        private static void testSimple() {\n+            final float ulpOneFp16 = ulp(valueOf(1.0f)).floatValue();\n+\n+            float [][] testCases = {\n+                {1.0f, 2.0f, 3.0f,\n+                 5.0f,},\n+\n+                {1.0f, 2.0f, -2.0f,\n+                 0.0f,},\n+\n+                {5.0f, 5.0f, -25.0f,\n+                 0.0f,},\n+\n+                {0.5f*MAX_VAL_FP16, 2.0f, -0.5f*MAX_VAL_FP16,\n+                 0.5f*MAX_VAL_FP16},\n+\n+                {MAX_VAL_FP16, 2.0f, -MAX_VAL_FP16,\n+                 MAX_VAL_FP16},\n+\n+                {MAX_VAL_FP16, 2.0f, 1.0f,\n+                 InfinityF},\n+\n+                {(1.0f + ulpOneFp16),\n+                 (1.0f + ulpOneFp16),\n+                 -1.0f - 2.0f*ulpOneFp16,\n+                 ulpOneFp16 * ulpOneFp16},\n+\n+\/\/                 \/\/ Double-rounding if done in double precision\n+\/\/                 {0x1.fffffep23f, 0x1.000004p28f, 0x1.fep5f, 0x1.000002p52f}\n+            };\n+\n+            for (float[] testCase: testCases) {\n+                testFusedMacCase(testCase[0], testCase[1], testCase[2], testCase[3]);\n+            }\n+        }\n+\n+        private static void testFusedMacCase(float input1, float input2, float input3, float expected) {\n+            Float16 a = valueOf(input1);\n+            Float16 b = valueOf(input2);\n+            Float16 c = valueOf(input3);\n+            Float16 d = valueOf(expected);\n+\n+            test(\"Float16.fma(float)\", a, b, c, Float16.fma(a, b, c), d);\n+\n+            \/\/ Permute first two inputs\n+            test(\"Float16.fma(float)\", b, a, c, Float16.fma(b, a, c), d);\n+            return;\n+        }\n+    }\n+\n+    private static void test(String testName,\n+                           Float16 input1, Float16 input2, Float16 input3,\n+                           Float16 result, Float16 expected) {\n+        if (Float16.compare(expected, result ) != 0) {\n+            System.err.println(\"Failure for \"  + testName + \":\\n\" +\n+                               \"\\tFor inputs \" + input1   + \"\\t(\" + toHexString(input1) + \") and \"\n+                                               + input2   + \"\\t(\" + toHexString(input2) + \") and\"\n+                                               + input3   + \"\\t(\" + toHexString(input3) + \")\\n\"  +\n+                               \"\\texpected  \"  + expected + \"\\t(\" + toHexString(expected) + \")\\n\" +\n+                               \"\\tgot       \"  + result   + \"\\t(\" + toHexString(result) + \").\");\n+            throw new RuntimeException();\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/Float16\/BasicFloat16ArithTests.java","additions":195,"deletions":27,"binary":false,"changes":222,"status":"modified"}]}