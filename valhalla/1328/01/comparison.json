{"files":[{"patch":"@@ -3894,0 +3894,1 @@\n+  for (int i = 0; i < _indent; i++) _st->print(\"  \");\n@@ -3896,1 +3897,1 @@\n-     fd->print_on(_st);\n+     fd->print_on(_st, _base_offset);\n@@ -3899,2 +3900,2 @@\n-     fd->print_on_for(_st, _obj);\n-     _st->cr();\n+     fd->print_on_for(_st, _obj, _indent, _base_offset);\n+     if (!fd->field_flags().is_flat()) _st->cr();\n@@ -3905,1 +3906,1 @@\n-void InstanceKlass::oop_print_on(oop obj, outputStream* st) {\n+void InstanceKlass::oop_print_on(oop obj, outputStream* st, int indent, int base_offset) {\n@@ -3921,1 +3922,1 @@\n-  FieldPrinter print_field(st, obj);\n+  FieldPrinter print_field(st, obj, indent, base_offset);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+   int _indent;\n+   int _base_offset;\n@@ -95,1 +97,2 @@\n-   FieldPrinter(outputStream* st, oop obj = nullptr) : _obj(obj), _st(st) {}\n+   FieldPrinter(outputStream* st, oop obj = nullptr, int indent = 0, int base_offset = 0) :\n+                 _obj(obj), _st(st), _indent(indent), _base_offset(base_offset) {}\n@@ -1259,1 +1262,2 @@\n-  void oop_print_on      (oop obj, outputStream* st);\n+  void oop_print_on      (oop obj, outputStream* st) { oop_print_on(obj, st, 0, 0); }\n+  void oop_print_on      (oop obj, outputStream* st, int indent = 0, int base_offset = 0);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-void fieldDescriptor::print_on(outputStream* st) const {\n+void fieldDescriptor::print_on(outputStream* st, int base_offset) const {\n@@ -111,1 +111,1 @@\n-  st->print(\" @%d \", offset());\n+  st->print(\" @%d \", offset() + base_offset);\n@@ -129,1 +129,1 @@\n-void fieldDescriptor::print_on_for(outputStream* st, oop obj) {\n+void fieldDescriptor::print_on_for(outputStream* st, oop obj, int indent, int base_offset) {\n@@ -131,4 +131,2 @@\n-  if (!is_null_free_inline_type()) {\n-    print_on(st);\n-    st->print(\" \");\n-  }\n+  print_on(st, base_offset);\n+  st->print(\" \");\n@@ -167,1 +165,0 @@\n-        assert(is_null_free_inline_type(), \"Only null free inline type fields can be flat\");\n@@ -172,2 +169,2 @@\n-        st->print_cr(\"Flat inline type field '%s':\", vk->name()->as_C_string());\n-        FieldPrinter print_field(st, obj);\n+        st->print_cr(\"Flat inline type field:\");\n+        FieldPrinter print_field(st, obj, indent + 1, base_offset + field_offset );\n@@ -175,0 +172,6 @@\n+        if (this->field_flags().has_null_marker()) {\n+          for (int i = 0; i < indent + 1; i++) st->print(\"  \");\n+          st->print_cr(\" - [null_marker] @%d %s\",\n+                    vk->null_marker_offset() - base_offset + field_offset,\n+                    obj->bool_field(vk->null_marker_offset()) ? \"Field marked as non-null\" : \"Field marked as null\");\n+        }\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-  void print_on(outputStream* st) const;\n-  void print_on_for(outputStream* st, oop obj);\n+  void print_on(outputStream* st, int base_offset = 0) const;\n+  void print_on_for(outputStream* st, oop obj, int indent = 0, int base_offset = 0);\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}