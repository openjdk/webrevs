{"files":[{"patch":"@@ -135,1 +135,2 @@\n-    valhalla\n+    valhalla \\\n+    java\/lang\/instrument\/valhalla\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-public record Host() {\n+public value class Host {\n@@ -30,1 +30,0 @@\n-        this();\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/Host\/Host.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/Host\/Host.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-public record Host() {\n+public value class Host {\n@@ -30,1 +30,0 @@\n-        this();\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/Host\/redef\/Host.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/Host\/redef\/Host.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-public record Host(int A) {\n+public value class Host {\n+    int A;\n@@ -30,1 +31,1 @@\n-        this(A);\n+        this.A = A;\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostA\/Host.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostA\/Host.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-public record Host(int A) {\n+public value class Host {\n+    int A;\n@@ -30,1 +31,1 @@\n-        this(A);\n+        this.A = A;\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostA\/redef\/Host.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostA\/redef\/Host.java","status":"copied"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value class Host {\n+    int A;\n+    long B;\n+    public static String getID() { return \"HostAB\/Host.java\";}\n+    public int m() {\n+        return 1; \/\/ original class\n+    }\n+    public Host(int A, long B, char C) {\n+        this.A = A;\n+        this.B = B;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostAB\/Host.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value class Host {\n+    int A;\n+    long B;\n+    public static String getID() { return \"HostAB\/redef\/Host.java\"; }\n+    public int m() {\n+        return 2; \/\/ redefined class\n+    }\n+    public Host(int A, long B, char C) {\n+        this.A = A;\n+        this.B = B;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostAB\/redef\/Host.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,4 @@\n-public record Host(int A, long B, char C) {\n+public value class Host {\n+    int A;\n+    long B;\n+    char C;\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostABC\/redef\/Host.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostABC\/redef\/Host.java","status":"copied"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value class Host {\n+    int A;\n+    char C;\n+    public static String getID() { return \"HostAC\/redef\/Host.java\"; }\n+    public int m() {\n+        return 2; \/\/ redefined class\n+    }\n+    public Host(int A, long B, char C) {\n+        this.A = A;\n+        this.C = C;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostAC\/redef\/Host.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-public record Host(long B) {\n+public value class Host {\n+    long B;\n@@ -30,1 +31,1 @@\n-        this(B);\n+        this.B = B;\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostB\/redef\/Host.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostB\/redef\/Host.java","status":"copied"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value class Host {\n+    long B;\n+    int A;\n+    public static String getID() { return \"HostBA\/redef\/Host.java\"; }\n+    public int m() {\n+        return 2; \/\/ redefined class\n+    }\n+    public Host(int A, long B, char C) {\n+        this.B = B;\n+        this.A = A;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostBA\/redef\/Host.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class Host { \/\/ this is instance (not value) class\n+    public static String getID() { return \"HostI\/Host.java\";}\n+    public int m() {\n+        return 1; \/\/ original class\n+    }\n+    public Host(int A, long B, char C) {\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostI\/Host.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-public record Host() {\n+public class Host { \/\/ this is instance (not value) class\n@@ -30,1 +30,0 @@\n-        this();\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/HostI\/redef\/Host.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/Host\/redef\/Host.java","status":"copied"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for value class redefinition\n+ * @comment The code is based on test\/jdk\/java\/lang\/instrument\/RedefineNestmateAttr\n+ * @comment modified for value classes.\n+ *\n+ * @library \/test\/lib\n+ * @modules java.compiler\n+ *          java.instrument\n+ * @enablePreview\n+ * @run main RedefineClassHelper\n+ * @compile Host\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class*=trace RedefineValueClass Host\n+ * @compile HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class*=trace RedefineValueClass HostA\n+ * @compile HostAB\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class*=trace RedefineValueClass HostAB\n+ * @compile HostI\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class*=trace RedefineValueClass HostI\n+ *\/\n+\n+\/* Test Description\n+\n+The basic test class is called Host.\n+Each variant of the class is defined in source code in its own directory i.e.\n+\n+Host\/Host.java defines zero fields\n+Class HostA\/Host.java has field \"int A\"\n+Class HostAB\/Host.java has fields \"int A\" and \"long B\" (in that order)\n+Class HostI\/Host.java is an instance class with zero fields\n+etc.\n+\n+Each Host class has the form:\n+\n+  public value class Host {\n+    \/\/ fields here\n+    public static String getID() { return \"<directory name>\/Host.java\"; }\n+\n+    public int m() {\n+        return 1; \/\/ original class\n+    }\n+\n+    public Host(int A, long B, char C) {\n+         ...\n+    }\n+  }\n+\n+The only exception is class in HostI dir which is instance class.\n+\n+Under each directory is a directory \"redef\" with a modified version of the Host\n+class that changes the ID to e.g. Host\/redef\/Host.java, and the method m()\n+returns 2. This allows us to check we have the redefined class loaded.\n+\n+Using Host' to represent the redefined version we test different redefinition combinations.\n+\n+We can only directly load one class Host per classloader, so to run all the\n+groups we either need to use new classloaders, or we reinvoke the test\n+requesting a different primary directory. We chose the latter using\n+multiple @run tags. So we preceed as follows:\n+\n+ @compile Host\/Host.java\n+ @run RedefineValueClass Host\n+ @compile HostA\/Host.java  - replaces previous Host.class\n+ @run RedefineValueClass HostA\n+ @compile HostAB\/Host.java  - replaces previous Host.class\n+ @run RedefineValueClass HostAB\n+etc.\n+\n+Within the test we directly compile redefined versions of the classes,\n+using CompilerUtil, and then read the .class file directly as a byte[]\n+to use with the RedefineClassHelper.\n+*\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+public class RedefineValueClass {\n+\n+    static final Path SRC = Paths.get(System.getProperty(\"test.src\"));\n+    static final Path DEST = Paths.get(System.getProperty(\"test.classes\"));\n+\n+    public static void main(String[] args) throws Throwable {\n+        String origin = args[0];\n+        System.out.println(\"Testing original Host class from \" + origin);\n+\n+        \/\/ Make sure the Host class loaded directly is an original version\n+        \/\/ and from the expected location. Use a ctor common to all Host\n+        \/\/ classes.\n+        Host h = new Host(3, 4, 'a');\n+        assertTrue(h.m() == 1);\n+        assertTrue(Host.getID().startsWith(origin + \"\/\"));\n+\n+        String[] badTransforms = null;  \/\/ directories of bad classes\n+        String[] goodTransforms = null; \/\/ directories of good classes\n+\n+        switch (origin) {\n+        case \"Host\":\n+            badTransforms = new String[] {\n+                \"HostI\", \/\/ value class to instance class\n+                \"HostA\"  \/\/ add field\n+            };\n+            goodTransforms = new String[] {\n+                origin\n+            };\n+            break;\n+\n+        case \"HostA\":\n+            badTransforms = new String[] {\n+                \"Host\",   \/\/ remove field\n+                \"HostAB\", \/\/ add field\n+                \"HostB\"   \/\/ change field\n+            };\n+            goodTransforms = new String[] {\n+                origin\n+            };\n+            break;\n+\n+        case \"HostAB\":\n+            badTransforms = new String[] {\n+                \"HostA\",   \/\/ remove field\n+                \"HostABC\", \/\/ add field\n+                \"HostAC\",  \/\/ change fields\n+                \"HostBA\"   \/\/ reorder fields\n+            };\n+            goodTransforms = new String[] {\n+                origin,\n+            };\n+            break;\n+\n+        case \"HostI\":  \/\/ instance class\n+            badTransforms = new String[] {\n+                \"Host\",  \/\/ instance class to value class\n+            };\n+            break;\n+\n+        default:\n+            throw new RuntimeException(\"Unknown test directory: \" + origin);\n+        }\n+\n+        \/\/ Compile and check bad transformations\n+        checkBadTransforms(Host.class, badTransforms);\n+\n+        \/\/ Compile and check good transformations\n+        if (goodTransforms != null) {\n+            checkGoodTransforms(Host.class, goodTransforms);\n+        }\n+    }\n+\n+    static void checkGoodTransforms(Class<?> c, String[] dirs) throws Throwable {\n+        for (String dir : dirs) {\n+            dir += \"\/redef\";\n+            System.out.println(\"Trying good retransform from \" + dir);\n+            byte[] buf = bytesForHostClass(dir);\n+            RedefineClassHelper.redefineClass(c, buf);\n+\n+            \/\/ Test redefintion worked\n+            Host h = new Host(3, 4, 'a');\n+            assertTrue(h.m() == 2);\n+            System.out.println(\"Redefined ID: \" + Host.getID());\n+            assertTrue(Host.getID().startsWith(dir));\n+        }\n+    }\n+\n+    static void checkBadTransforms(Class<?> c, String[] dirs) throws Throwable {\n+        for (String dir : dirs) {\n+            dir += \"\/redef\";\n+            System.out.println(\"Trying bad retransform from \" + dir);\n+            byte[] buf = bytesForHostClass(dir);\n+            try {\n+                RedefineClassHelper.redefineClass(c, buf);\n+                throw new RuntimeException(\"Retransformation from directory \" + dir +\n+                                \" succeeded unexpectedly\");\n+            }\n+            catch (UnsupportedOperationException uoe) {\n+                System.out.println(\"Got expected UnsupportedOperationException \" + uoe);\n+            }\n+        }\n+    }\n+\n+    static byte[] bytesForHostClass(String dir) throws Throwable {\n+        compile(dir);\n+        Path clsfile = DEST.resolve(dir).resolve(\"Host.class\");\n+        System.out.println(\"Reading bytes from \" + clsfile);\n+        return Files.readAllBytes(clsfile);\n+    }\n+\n+    static void compile(String dir) throws Throwable {\n+        Path src = SRC.resolve(dir);\n+        Path dst = DEST.resolve(dir);\n+        System.out.println(\"Compiling from: \" + src + \"\\n\" +\n+                           \"            to: \" + dst);\n+        CompilerUtils.compile(src, dst,\n+                              false \/* don't recurse *\/,\n+                              \"--enable-preview\",\n+                              \"--source\", String.valueOf(Runtime.version().feature()));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/RedefineValueClass.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/_HostACB\/redef\/Host.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostACB\/redef\/Host.java","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/_HostBAC\/redef\/Host.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostBAC\/redef\/Host.java","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/_HostBCA\/redef\/Host.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostBCA\/redef\/Host.java","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/_HostCAB\/redef\/Host.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostCAB\/redef\/Host.java","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefineValueClass\/_HostCBA\/redef\/Host.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/HostCBA\/redef\/Host.java","status":"copied"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for value class retransformation\n+ *\n+ * @library \/test\/lib\n+ * @modules java.instrument\n+ * @enablePreview\n+ *\n+ * @run main RetransformValueClass buildAgent\n+ *\n+ * @run main\/othervm -javaagent:testAgent.jar RetransformValueClass\n+ *\/\n+\n+import java.lang.instrument.Instrumentation;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.security.ProtectionDomain;\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+\/*\n+ * The test verifies Instrumentation.retransformClasses() (and JVMTI function RetransformClasses)\n+ * works with value classes (i.e. JVMTI JvmtiClassFileReconstituter correctly restores class bytes).\n+ *\/\n+\n+value class ValueClass {\n+    public int f1;\n+    public String f2;\n+\n+    public ValueClass(int v1, String v2) {\n+        f1 = v1;\n+        f2 = v2;\n+    }\n+}\n+\n+public class RetransformValueClass {\n+\n+    public static void main (String[] args) throws Exception {\n+        if (args.length == 1 && \"buildAgent\".equals(args[0])) {\n+            buildAgent();\n+        } else {\n+            runTest();\n+        }\n+    }\n+\n+    static void buildAgent() throws Exception {\n+        String manifest = \"Premain-Class: RetransformValueClass\\nCan-Redefine-Classes: true\\nCan-Retransform-Classes: true\\n\";\n+        ClassFileInstaller.writeJar(\"testAgent.jar\", ClassFileInstaller.Manifest.fromString(manifest), \"RetransformValueClass\");\n+    }\n+\n+    \/\/ agent implementation\n+    static Instrumentation instrumentation;\n+    public static void premain(String agentArgs, Instrumentation inst) {\n+        instrumentation = inst;\n+    }\n+\n+    \/\/ test implementation\n+    static final Class targetClass = ValueClass.class;\n+    static final String targetClassName = targetClass.getName();\n+    static boolean transformToOriginalClassbytes = false;\n+\n+    static void runTest() throws Exception {\n+        instrumentation.addTransformer(new Transformer(), true);\n+\n+        instrumentation.retransformClasses(targetClass);\n+\n+        transformToOriginalClassbytes = true;\n+        instrumentation.retransformClasses(targetClass);\n+    }\n+\n+\n+    static class Transformer implements ClassFileTransformer {\n+        public Transformer() {\n+        }\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+            Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n+\n+            if (className.equals(targetClassName)) {\n+                log(\"Transformer sees '\" + className + \"' of \" + classfileBuffer.length + \" bytes.\");\n+                if (transformToOriginalClassbytes) {\n+                    return classfileBuffer;\n+                } else {\n+                    return  null;\n+                }\n+            }\n+            return null;\n+        }\n+    }\n+\n+    static void log(Object o) {\n+        System.out.println(String.valueOf(o));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RetransformValueClass.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}