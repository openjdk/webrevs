{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,3 @@\n-    \/\/ sequence of sizeof(8) isEmpty|offset. Use the first module that is not empty.\n+    \/\/ Sequence of sizeof(8) flags|offset. Use the first module that is not empty.\n+    \/\/ Recent jimage files are built to put the non-empty module entry first in\n+    \/\/ the sequence, but there is no guarantee we are reading a new jimage file.\n@@ -198,1 +200,1 @@\n-        u4 isEmpty = _endian->get(*((u4*)ptr));\n+        u4 pkg_flags = _endian->get(*((u4*)ptr));\n@@ -200,1 +202,1 @@\n-        if (!isEmpty) {\n+        if ((pkg_flags & PKG_FLAG_IS_EMPTY) == 0) {\n","filename":"src\/java.base\/share\/native\/libjimage\/imageFile.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -315,0 +315,9 @@\n+    \/\/ Bit masks for the flags held in \"\/packages\/xxx\" entries.\n+    \/\/ Should match same-named constants defined in:\n+    \/\/   src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageResourcesTree.java\n+    enum {\n+        \/\/ If set, the package is empty in the module of the offset entry.\n+        \/\/ For any package at most one module can have a non-empty reference.\n+        PKG_FLAG_IS_EMPTY = 0x1,\n+    };\n+\n","filename":"src\/java.base\/share\/native\/libjimage\/imageFile.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Comparator;\n@@ -39,0 +40,1 @@\n+import java.util.stream.Stream;\n@@ -106,0 +108,11 @@\n+        \/\/ Sort references so the module for which the package is non-empty is\n+        \/\/ the first in the list. This will save time scanning for the module.\n+        private static final Comparator<PackageReference> NON_EMPTY_FIRST =\n+                Comparator.comparing(PackageReference::isEmpty)\n+                        .thenComparing(PackageReference::name);\n+\n+        \/\/ Bit masks for the flags held in \"\/packages\/xxx\" entries.\n+        \/\/ Should match same-named constants defined in:\n+        \/\/  src\/java.base\/share\/native\/libjimage\/imageFile.hpp\n+        private static final int PKG_FLAG_IS_EMPTY = 0x1;\n+\n@@ -120,0 +133,12 @@\n+            String name() {\n+                return name;\n+            }\n+\n+            boolean isEmpty() {\n+                return isEmpty;\n+            }\n+\n+            int flags() {\n+                return isEmpty() ? PKG_FLAG_IS_EMPTY : 0;\n+            }\n+\n@@ -122,1 +147,1 @@\n-                return name + \"[empty:\" + isEmpty + \"]\";\n+                return name() + \"[empty:\" + isEmpty() + \"]\";\n@@ -126,1 +151,1 @@\n-        private final Map<String, PackageReference> references = new TreeMap<>();\n+        private final Map<String, PackageReference> references = new HashMap<>();\n@@ -132,0 +157,8 @@\n+        int refCount() {\n+            return references.size();\n+        }\n+\n+        Stream<PackageReference> sortedRefs() {\n+            return references.values().stream().sorted(NON_EMPTY_FIRST);\n+        }\n+\n@@ -134,1 +167,1 @@\n-            if (ref == null || ref.isEmpty) {\n+            if (ref == null || ref.isEmpty()) {\n@@ -140,10 +173,5 @@\n-            boolean exists = false;\n-            for (PackageReference ref : references.values()) {\n-                if (!ref.isEmpty) {\n-                    if (exists) {\n-                        throw new RuntimeException(\"Multiple modules to contain package \"\n-                                + getName());\n-                    } else {\n-                        exists = true;\n-                    }\n-                }\n+            if (refCount() == 0) {\n+                throw new RuntimeException(\"Package nodes should not be empty \" + getName());\n+            }\n+            if (!sortedRefs().skip(1).allMatch(PackageReference::isEmpty)) {\n+                throw new RuntimeException(\"Multiple modules to contain package \" + getName());\n@@ -214,6 +242,1 @@\n-                                    Set<String> pkgs = moduleToPackage.get(module);\n-                                    if (pkgs == null) {\n-                                        pkgs = new TreeSet<>();\n-                                        moduleToPackage.put(module, pkgs);\n-                                    }\n-                                    pkgs.add(pkg);\n+                                    moduleToPackage.computeIfAbsent(module, k -> new TreeSet<>()).add(pkg);\n@@ -226,6 +249,1 @@\n-                                    Set<String> mods = packageToModule.get(pkg);\n-                                    if (mods == null) {\n-                                        mods = new TreeSet<>();\n-                                        packageToModule.put(pkg, mods);\n-                                    }\n-                                    mods.add(module);\n+                                    packageToModule.computeIfAbsent(pkg, k -> new TreeSet<>()).add(module);\n@@ -343,1 +361,1 @@\n-                int size = pkgNode.references.size() * 8;\n+                int size = pkgNode.refCount() * 8;\n@@ -383,1 +401,1 @@\n-                int size = pkgNode.references.size() * 8;\n+                int size = pkgNode.refCount() * 8;\n@@ -386,4 +404,4 @@\n-                for (PackageNode.PackageReference mod : pkgNode.references.values()) {\n-                    buff.putInt(mod.isEmpty ? 1 : 0);\n-                    buff.putInt(writer.addString(mod.name));\n-                }\n+                pkgNode.sortedRefs().forEach(ref -> {\n+                    buff.putInt(ref.flags());\n+                    buff.putInt(writer.addString(ref.name()));\n+                });\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageResourcesTree.java","additions":49,"deletions":31,"binary":false,"changes":80,"status":"modified"}]}