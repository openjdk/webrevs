{"files":[{"patch":"@@ -30,0 +30,10 @@\n+    java\/lang\/Byte.java \\\n+    java\/lang\/Short.java \\\n+    java\/lang\/Integer.java \\\n+    java\/lang\/Long.java \\\n+    java\/lang\/Float.java \\\n+    java\/lang\/Double.java \\\n+    java\/lang\/Boolean.java \\\n+    java\/lang\/Character.java \\\n+    java\/lang\/Number.java \\\n+    java\/lang\/Record.java \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcValueClasses.gmk","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1112,1 +1112,1 @@\n-            System.out.println(\"substitutable \" + a + \" vs \" + b);\n+            System.out.println(\"substitutable \" + a.getClass() + \": \" + a + \" vs \" + b);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,0 +211,7 @@\n+            \/\/ exports are not setup during early VM initialization\n+            if (!jdk.internal.misc.VM.isModuleSystemInited()) {\n+                \/\/  access java.base classes only\n+                assert lookupModule == refModule && refModule == Object.class.getModule();\n+                return true;\n+            }\n+\n@@ -231,2 +238,0 @@\n-            if (isModuleAccessible(refc, lookupModule, prevLookupModule))\n-                return true;\n@@ -234,3 +239,1 @@\n-            \/\/ not exported but allow access during VM initialization\n-            \/\/ because java.base does not have its exports setup\n-            if (!jdk.internal.misc.VM.isModuleSystemInited())\n+            if (isModuleAccessible(refc, lookupModule, prevLookupModule))\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}