{"files":[{"patch":"@@ -32,1 +32,1 @@\n-# DISABLED_WARNINGS_java +=\n+DISABLED_WARNINGS_java += initialization\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,0 +281,6 @@\n+        \/**\n+         * Warn about code in identity classes that wouldn't be allowed in early\n+         * construction due to a this dependency.\n+         *\/\n+        INITIALIZATION(\"initialization\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1192,0 +1192,1 @@\n+                boolean addedSuperInIdentityClass = false;\n@@ -1200,0 +1201,1 @@\n+                            addedSuperInIdentityClass = true;\n@@ -1249,1 +1251,3 @@\n-                            break;\n+                            if (!addedSuperInIdentityClass || !allowValueClasses) {\n+                                break;\n+                            }\n@@ -1253,1 +1257,1 @@\n-                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv);\n+                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv, addedSuperInIdentityClass && allowValueClasses);\n@@ -1270,1 +1274,3 @@\n-        CtorPrologueVisitor(Env<AttrContext> localEnv) {\n+        boolean warningsOnly;\n+\n+        CtorPrologueVisitor(Env<AttrContext> localEnv, boolean warningsOnly) {\n@@ -1273,0 +1279,1 @@\n+            this.warningsOnly = warningsOnly;\n@@ -1305,0 +1312,4 @@\n+            reportPrologueError(tree, sym, false);\n+        }\n+\n+        private void reportPrologueError(JCTree tree, Symbol sym, boolean hasInit) {\n@@ -1306,1 +1317,10 @@\n-            log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+            if (!warningsOnly) {\n+                if (hasInit) {\n+                    log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n+                } else {\n+                    log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+                }\n+            } else if (allowValueClasses) {\n+                \/\/ issue lint warning\n+                localEnv.info.lint.logIfEnabled(tree, LintWarnings.WouldNotBeAllowedInPrologue(sym));\n+            }\n@@ -1402,1 +1422,1 @@\n-                        log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n+                        reportPrologueError(tree, sym);\n@@ -1407,1 +1427,1 @@\n-                        log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n+                        reportPrologueError(tree, sym, true);\n@@ -1581,1 +1601,1 @@\n-                        if (v.owner.kind == TYP && !v.isStatic() && v.isStrict()) {\n+                        if (allowValueClasses && v.owner.kind == TYP && !v.isStatic()) {\n@@ -1583,1 +1603,1 @@\n-                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv);\n+                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv, !v.isStrict());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -4299,0 +4299,5 @@\n+# 0: symbol or name\n+# lint: initialization\n+compiler.warn.would.not.be.allowed.in.prologue=\\\n+    reference to {0} would not be allowed in the prologue phase\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,0 +222,4 @@\n+javac.opt.Xlint.desc.initialization=\\\n+    Warn about code in identity classes that wouldn''t be allowed in early\\n\\\n+\\                         construction due to a this dependency.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,0 +169,2 @@\n+ * <tr><th scope=\"row\">{@code initialization}       <td>code in identity classes that wouldn't be allowed in early\n+ *                                                      construction due to a this dependency.\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -604,0 +604,3 @@\n+    -   `initialization`: Warns about code in identity classes that wouldn't be\n+        allowed in early construction due to a `this` dependency.\n+\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8367698\n+ * @summary New lint category `initialization` for code that would not be allowed in the prologue\n+ * @compile\/fail\/ref=InitializationWarningTest.out -XDrawDiagnostics -Xlint:initialization -Werror InitializationWarningTest.java\n+ * @enablePreview\n+ *\/\n+\n+class InitializationWarningTest implements Iterable<Object> {\n+    InitializationWarningTest self = this;\n+    Object o = null;\n+\n+    InitializationWarningTest(Object oo, InitializationWarningTest other) {\n+        this.o = oo;                                  \/\/ warning, field has initializer\n+        m();                                          \/\/ warning, instance method\n+        InitializationWarningTest.this.m();           \/\/ warning, instance method\n+        InitializationWarningTest.super.hashCode();   \/\/ warning\n+        other.m();                                    \/\/ good\n+        sm();                                         \/\/ good too\n+        System.identityHashCode(this);                \/\/ warning\n+        Iterable.super.spliterator();                 \/\/ warning\n+        new Inner();\n+    }\n+\n+    class Inner {}\n+\n+    void m() {}\n+    static void sm() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTest.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+InitializationWarningTest.java:9:1: compiler.err.does.not.override.abstract: InitializationWarningTest, iterator(), java.lang.Iterable\n+InitializationWarningTest.java:10:38: compiler.warn.would.not.be.allowed.in.prologue: this\n+InitializationWarningTest.java:14:13: compiler.warn.would.not.be.allowed.in.prologue: o\n+InitializationWarningTest.java:15:9: compiler.warn.would.not.be.allowed.in.prologue: m()\n+InitializationWarningTest.java:16:39: compiler.warn.would.not.be.allowed.in.prologue: m()\n+InitializationWarningTest.java:17:40: compiler.warn.would.not.be.allowed.in.prologue: hashCode()\n+InitializationWarningTest.java:20:33: compiler.warn.would.not.be.allowed.in.prologue: this\n+InitializationWarningTest.java:21:23: compiler.warn.would.not.be.allowed.in.prologue: spliterator()\n+InitializationWarningTest.java:22:9: compiler.warn.would.not.be.allowed.in.prologue: InitializationWarningTest\n+1 error\n+8 warnings\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTest.out","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.would.not.be.allowed.in.prologue\n+\/\/ options: -Xlint:initialization --enable-preview -source ${jdk.version}\n+\n+public class InitializationWarning {\n+    Object o = null;\n+\n+    InitializationWarning(Object oo) {\n+        this.o = oo;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InitializationWarning.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"}]}