{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,6 +182,2 @@\n-    private static boolean eq(float a, float b) {\n-        return Float.floatToRawIntBits(a) == Float.floatToRawIntBits(b);\n-    }\n-    private static boolean eq(double a, double b) {\n-        return Double.doubleToRawLongBits(a) == Double.doubleToRawLongBits(b);\n-    }\n+    private static boolean eq(float a, float b) { return Float.compare(a, b) == 0; }\n+    private static boolean eq(double a, double b) { return Double.compare(a, b) == 0; }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -79,0 +81,22 @@\n+        static final HashMap<Class<?>, MethodHandle> primitiveSubstitutable = new HashMap<>();\n+\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+                @SuppressWarnings(\"removal\")\n+                ClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+                    @Override public ClassLoader run() { return ClassLoader.getPlatformClassLoader(); }\n+                });\n+\n+                primitiveSubstitutable.putAll(primitiveEquals); \/\/ adopt all the primitive eq methods\n+                primitiveSubstitutable.put(float.class, lookup.findStatic(MethodHandleBuilder.class, \"eqValue\",\n+                        MethodType.fromMethodDescriptorString(\"(FF)Z\", loader)));\n+                primitiveSubstitutable.put(double.class, lookup.findStatic(MethodHandleBuilder.class, \"eqValue\",\n+                        MethodType.fromMethodDescriptorString(\"(DD)Z\", loader)));\n+\n+            } catch (ReflectiveOperationException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n@@ -109,2 +133,2 @@\n-        static MethodHandle builtinPrimitiveEquals(Class<?> type) {\n-            return primitiveEquals.get(type);\n+        static MethodHandle builtinPrimitiveSubstitutable(Class<?> type) {\n+            return primitiveSubstitutable.get(type);\n@@ -590,0 +614,8 @@\n+        \/\/ Substitutability test for float\n+        private static boolean eqValue(float a, float b) {\n+            return Float.floatToRawIntBits(a) == Float.floatToRawIntBits(b);\n+        }\n+        \/\/ Substitutability test for double\n+        private static boolean eqValue(double a, double b) {\n+            return Double.doubleToRawLongBits(a) == Double.doubleToRawLongBits(b);\n+        }\n@@ -774,1 +806,1 @@\n-            return MethodHandleBuilder.builtinPrimitiveEquals(type);\n+            return MethodHandleBuilder.builtinPrimitiveSubstitutable(type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"}]}