{"files":[{"patch":"@@ -172,1 +172,5 @@\n-  assert(obj->klass()->is_flatArray_klass(),\"must be an flat array\");\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers,\n+  \/\/ because size_given_klass() calls oop_size() on objects that might be\n+  \/\/ concurrently forwarded, which would overwrite the Klass*.\n+  \/\/ Also, why we need to pass this layout_helper() to flatArrayOop::object_size.\n+  assert(UseCompactObjectHeaders || obj->is_flatArray(),\"must be an flat array\");\n@@ -174,1 +178,1 @@\n-  return array->object_size();\n+  return array->object_size(layout_helper());\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  int object_size() const;\n+  int object_size(int lh) const;\n","filename":"src\/hotspot\/share\/oops\/flatArrayOop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-inline int flatArrayOopDesc::object_size() const {\n-  return object_size(klass()->layout_helper(), length());\n+inline int flatArrayOopDesc::object_size(int lh) const {\n+  return object_size(lh, length());\n","filename":"src\/hotspot\/share\/oops\/flatArrayOop.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  return obj->is_flatArray() ? flatArrayOop(obj)->object_size() : refArrayOop(obj)->object_size();\n+  return obj->is_flatArray() ? flatArrayOop(obj)->object_size(layout_helper()) : refArrayOop(obj)->object_size();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}