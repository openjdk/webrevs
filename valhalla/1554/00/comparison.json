{"files":[{"patch":"@@ -3710,1 +3710,1 @@\n-    if (tf()->returns_inline_type_as_fields() && !_method->is_method_handle_intrinsic()) {\n+    if (tf()->returns_inline_type_as_fields() && !_method->is_method_handle_intrinsic() && _method->return_type()->is_loaded()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2721,1 +2721,1 @@\n-    if (tf()->returns_inline_type_as_fields() && !_method->is_method_handle_intrinsic()) {\n+    if (tf()->returns_inline_type_as_fields() && !_method->is_method_handle_intrinsic() && _method->return_type()->is_loaded()) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -766,11 +766,1 @@\n-        if (InlineTypeReturnedAsFields) {\n-          \/\/ Return might be in scalarized form but we can't handle it because we\n-          \/\/ don't know the type. This can happen due to a missing preload attribute.\n-          \/\/ TODO 8284443 Use PhaseMacroExpand::expand_mh_intrinsic_return for this\n-          trap(str, nullptr,\n-               Deoptimization::make_trap_request\n-               (Deoptimization::Reason_uninitialized,\n-                Deoptimization::Action_reinterpret));\n-        } else {\n-          do_null_assert(return_type->as_klass());\n-        }\n+        do_null_assert(return_type->as_klass());\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -6176,1 +6176,1 @@\n-        log_info(class, preload)(\"Preloading class %s during loading of class %s. \"\n+        log_info(class, preload)(\"Preloading of class %s during loading of class %s. \"\n@@ -6197,1 +6197,1 @@\n-      } else if (Signature::has_envelope(sig)) {\n+      } else if (Signature::has_envelope(sig) && PreloadClasses) {\n@@ -6202,1 +6202,1 @@\n-          log_info(class, preload)(\"Preloading class %s during loading of class %s. \"\n+          log_info(class, preload)(\"Preloading of class %s during loading of class %s. \"\n@@ -6217,1 +6217,1 @@\n-              log_warning(class, preload)(\"Preloading class %s during loading of class %s \"\n+              log_warning(class, preload)(\"Preloading of class %s during loading of class %s \"\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1104,1 +1104,1 @@\n-  log_info(class, preload)(\"Preloading class %s during loading of shared class %s. \"\n+  log_info(class, preload)(\"Preloading of class %s during loading of shared class %s. \"\n@@ -1142,1 +1142,1 @@\n-    log_info(class, preload)(\"Preloading class %s during loading of shared class %s. \"\n+    log_info(class, preload)(\"Preloading of class %s during loading of shared class %s. \"\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -599,1 +599,1 @@\n-InlineKlass* InlineKlass::returned_inline_klass(const RegisterMap& map, bool* return_oop) {\n+InlineKlass* InlineKlass::returned_inline_klass(const RegisterMap& map, bool* return_oop, Method* method) {\n@@ -622,1 +622,1 @@\n-  if (return_oop != nullptr && o != nullptr) {\n+  if (return_oop != nullptr && o != nullptr && o->is_inline_type()) {\n@@ -624,4 +624,5 @@\n-    assert(o->is_inline_type(), \"Invalid return value\");\n-    InlineKlass* vk = InlineKlass::cast(o->klass());\n-    if (vk->can_be_returned_as_fields()) {\n-      return vk;\n+    InlineKlass* vk_val = InlineKlass::cast(o->klass());\n+    InlineKlass* vk_sig = method->returns_inline_type();\n+    if (vk_val->can_be_returned_as_fields() && vk_sig != nullptr) {\n+      assert(vk_val == vk_sig, \"Unexpected return value\");\n+      return vk_val;\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-  static InlineKlass* returned_inline_klass(const RegisterMap& reg_map, bool* return_oop = nullptr);\n+  static InlineKlass* returned_inline_klass(const RegisterMap& reg_map, bool* return_oop = nullptr, Method* method = nullptr);\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1070,1 +1070,1 @@\n-          log_info(class, preload)(\"Preloading class %s during linking of class %s. Cause: a null-free static field is declared with this type\", s->as_C_string(), name()->as_C_string());\n+          log_info(class, preload)(\"Preloading of class %s during linking of class %s. Cause: a null-free static field is declared with this type\", s->as_C_string(), name()->as_C_string());\n@@ -1113,1 +1113,1 @@\n-    if (loadable_descriptors() != nullptr) {\n+    if (loadable_descriptors() != nullptr && PreloadClasses) {\n@@ -1120,1 +1120,1 @@\n-        log_info(class, preload)(\"Preloading class %s during linking of class %s because of the class is listed in the LoadableDescriptors attribute\", sig->as_C_string(), name()->as_C_string());\n+        log_info(class, preload)(\"Preloading of class %s during linking of class %s because of the class is listed in the LoadableDescriptors attribute\", sig->as_C_string(), name()->as_C_string());\n@@ -1131,1 +1131,1 @@\n-              log_warning(class, preload)(\"Preloading class %s during linking of class %s (cause: LoadableDescriptors attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n+            log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-InlineKlass* Method::returns_inline_type(Thread* thread) const {\n+InlineKlass* Method::returns_inline_type() const {\n@@ -747,3 +747,1 @@\n-  while (!ss.at_return_type()) {\n-    ss.next();\n-  }\n+  ss.skip_to_return_type();\n@@ -1316,1 +1314,1 @@\n-  if (InlineTypeReturnedAsFields && returns_inline_type(THREAD) && !has_scalarized_return()) {\n+  if (InlineTypeReturnedAsFields && returns_inline_type() && !has_scalarized_return()) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -519,1 +519,1 @@\n-  InlineKlass* returns_inline_type(Thread* thread) const;\n+  InlineKlass* returns_inline_type() const;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -837,1 +837,1 @@\n-      assert(result->is_top() || !call->tf()->returns_inline_type_as_fields(), \"Unexpected return value\");\n+      assert(result->is_top() || !call->tf()->returns_inline_type_as_fields() || !call->as_CallJava()->method()->return_type()->is_loaded(), \"Unexpected return value\");\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2098,1 +2098,2 @@\n-             strncmp(name, \"C2 Runtime load_unknown_inline\", 30) == 0, \"TODO: add failed case check\");\n+             strncmp(name, \"C2 Runtime load_unknown_inline\", 30) == 0 ||\n+             strncmp(name, \"store_inline_type_fields_to_buf\", 31) == 0, \"TODO: add failed case check\");\n@@ -2278,0 +2279,1 @@\n+                  strcmp(call->as_CallLeaf()->_name, \"store_inline_type_fields_to_buf\") == 0 ||\n@@ -2817,1 +2819,2 @@\n-           strncmp(name, \"C2 Runtime load_unknown_inline\", 30) == 0, \"sanity\");\n+           strncmp(name, \"C2 Runtime load_unknown_inline\", 30) == 0 ||\n+           strncmp(name, \"store_inline_type_fields_to_buf\", 31) == 0, \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"runtime\/stubRoutines.hpp\"\n@@ -2023,0 +2024,50 @@\n+    if (!t->is_loaded() && InlineTypeReturnedAsFields) {\n+      \/\/ The return type is unloaded but the callee might later be C2 compiled and then return\n+      \/\/ in scalarized form when the return type is loaded. Handle this similar to what we do in\n+      \/\/ PhaseMacroExpand::expand_mh_intrinsic_return by calling into the runtime to buffer.\n+      \/\/ It's a bit unfortunate because we will deopt anyway but the interpreter needs an oop.\n+      IdealKit ideal(this);\n+      IdealVariable res(ideal);\n+      ideal.declarations_done();\n+      ideal.if_then(ret, BoolTest::eq, ideal.makecon(TypePtr::NULL_PTR)); {\n+        \/\/ Return value is null\n+        ideal.set(res, ret);\n+      } ideal.else_(); {\n+        \/\/ Return value is non-null\n+        sync_kit(ideal);\n+\n+        \/\/ Change return type of call to scalarized return\n+        const TypeFunc* tf = call->_tf;\n+        const TypeTuple* domain = OptoRuntime::store_inline_type_fields_Type()->domain_cc();\n+        const TypeFunc* new_tf = TypeFunc::make(tf->domain_sig(), tf->domain_cc(), tf->range_sig(), domain);\n+        call->_tf = new_tf;\n+        _gvn.set_type(call, call->Value(&_gvn));\n+        _gvn.set_type(ret, ret->Value(&_gvn));\n+\n+        Node* store_to_buf_call = make_runtime_call(RC_NO_LEAF | RC_NO_IO,\n+                                                    OptoRuntime::store_inline_type_fields_Type(),\n+                                                    StubRoutines::store_inline_type_fields_to_buf(),\n+                                                    nullptr, TypePtr::BOTTOM, ret);\n+\n+        \/\/ We don't know how many values are returned. This assumes the\n+        \/\/ worst case, that all available registers are used.\n+        for (uint i = TypeFunc::Parms+1; i < domain->cnt(); i++) {\n+          if (domain->field_at(i) == Type::HALF) {\n+            store_to_buf_call->init_req(i, top());\n+            continue;\n+          }\n+          Node* proj =_gvn.transform(new ProjNode(call, i));\n+          store_to_buf_call->init_req(i, proj);\n+        }\n+        make_slow_call_ex(store_to_buf_call, env()->Throwable_klass(), false);\n+\n+        Node* buf = _gvn.transform(new ProjNode(store_to_buf_call, TypeFunc::Parms));\n+        const Type* buf_type = TypeOopPtr::make_from_klass(t->as_klass())->join_speculative(TypePtr::NOTNULL);\n+        buf = _gvn.transform(new CheckCastPPNode(control(), buf, buf_type));\n+\n+        ideal.set(res, buf);\n+        ideal.sync_kit(this);\n+      } ideal.end_if();\n+      sync_kit(ideal);\n+      ret = _gvn.transform(ideal.value(res));\n+    }\n@@ -2701,1 +2752,1 @@\n-  assert(call->in(call->req()-1) != nullptr, \"must initialize all parms\");\n+  assert(call->in(call->req()-1) != nullptr || (call->req()-1) > (TypeFunc::Parms+7), \"must initialize all parms\");\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2402,1 +2402,1 @@\n-  fields[TypeFunc::Parms+0] = TypeInstPtr::NOTNULL;\n+  fields[TypeFunc::Parms+0] = TypeInstPtr::BOTTOM;\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1990,0 +1990,3 @@\n+  develop(bool, PreloadClasses, true,                                       \\\n+          \"Preloading all classes from the LoadableDescriptors attribute\")  \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-    InlineKlass* vk = method->returns_inline_type(thread);\n+    InlineKlass* vk = method->returns_inline_type();\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-    if (method->has_scalarized_return()) {\n+    if (InlineTypeReturnedAsFields && return_oop) {\n@@ -795,2 +795,1 @@\n-      assert(return_oop, \"must be\");\n-      vk = InlineKlass::returned_inline_klass(map, &return_oop);\n+      vk = InlineKlass::returned_inline_klass(map, &return_oop, method);\n@@ -801,1 +800,0 @@\n-        assert(vk == method->returns_inline_type(thread()), \"bad inline klass\");\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,1 +190,0 @@\n-            \"-XX:-InlineTypeReturnedAsFields\", \/\/ TODO Remove this once 8284443 fixed handling of unloaded return types\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/unloaded\/TestInlineUnloaded.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-        \/\/ TODO Re-enable this once 8284443 fixed handling of unloaded return types\n-        \/\/ new TestInliningProtectionDomain(ProtectionDomainTestNoOtherCompilationPrivate.class, false);\n+        new TestInliningProtectionDomain(ProtectionDomainTestNoOtherCompilationPrivate.class, false);\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestInliningProtectionDomain.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *                   -XX:-UseArrayFlattening -XX:+UseFieldFlattening\n+ *                   -XX:-UseArrayFlattening -XX:+UseFieldFlattening -XX:+IgnoreUnrecognizedVMOptions -XX:+PreloadClasses\n@@ -35,1 +35,1 @@\n- * @run main\/othervm -XX:+UseFieldFlattening\n+ * @run main\/othervm -XX:+UseFieldFlattening -XX:+IgnoreUnrecognizedVMOptions -XX:+PreloadClasses\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/PutFlatValueWithoutUseArrayFlattening.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,0 +61,15 @@\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                   TestOopsInReturnConvention Interpreted\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                   TestOopsInReturnConvention C1\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                   TestOopsInReturnConvention C2\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOopsInReturnConvention.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,7 @@\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                   -Xbatch -XX:CompileCommand=dontinline,*::test*\n+ *                   TestUnloadedReturnTypes\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses -XX:+AlwaysIncrementalInline\n+ *                   TestUnloadedReturnTypes\n@@ -38,0 +45,1 @@\n+import jdk.test.lib.Asserts;\n@@ -48,3 +56,2 @@\n-class MyClass {\n-\n-    static MyValue1 test(boolean b) {\n+class MyHolder1 {\n+    static MyValue1 test1(boolean b) {\n@@ -55,0 +62,88 @@\n+\/\/ Uses all registers available for scalarized return on x64\n+value class MyValue2 {\n+    int i1 = 42;\n+    int i2 = 43;\n+    int i3 = 44;\n+    int i4 = 45;\n+    int i5 = 46;\n+    double d1 = 47;\n+    double d2 = 48;\n+    double d3 = 49;\n+    double d4 = 50;\n+    double d5 = 51;\n+    double d6 = 52;\n+    double d7 = 53;\n+    double d8 = 54;\n+}\n+\n+class MyHolder2Super {\n+    public MyValue2 test2Virtual(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue2();\n+        }\n+        return null;\n+    }\n+}\n+\n+class MyHolder2 extends MyHolder2Super {\n+    public MyValue2 test2(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue2();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public MyValue2 test2Virtual(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue2();\n+        }\n+        return null;\n+    }\n+}\n+\n+\/\/ Uses all registers available for scalarized return on AArch64\n+value class MyValue3 {\n+    int i1 = 42;\n+    int i2 = 43;\n+    int i3 = 44;\n+    int i4 = 45;\n+    int i5 = 46;\n+    int i6 = 47;\n+    int i7 = 48;\n+    double d1 = 49;\n+    double d2 = 50;\n+    double d3 = 51;\n+    double d4 = 52;\n+    double d5 = 53;\n+    double d6 = 54;\n+    double d7 = 55;\n+    double d8 = 56;\n+}\n+\n+class MyHolder3Super {\n+    public MyValue3 test3Virtual(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue3();\n+        }\n+        return null;\n+    }\n+}\n+\n+class MyHolder3 extends MyHolder3Super {\n+    public MyValue3 test3(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue3();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public MyValue3 test3Virtual(boolean loadIt) {\n+        if (loadIt) {\n+            return new MyValue3();\n+        }\n+        return null;\n+    }\n+}\n+\n@@ -60,2 +155,18 @@\n-    public static void test(boolean b) {\n-        res = MyClass.test(b);\n+    public static void test1(boolean b) {\n+        res = MyHolder1.test1(b);\n+    }\n+\n+    public static Object test2(MyHolder2 h, boolean loadIt) {\n+        return h.test2(loadIt);\n+    }\n+\n+    public static Object test2Virtual(MyHolder2Super h, boolean loadIt) {\n+        return h.test2Virtual(loadIt);\n+    }\n+\n+    public static Object test3(MyHolder3 h, boolean loadIt) {\n+        return h.test3(loadIt);\n+    }\n+\n+    public static Object test3Virtual(MyHolder3Super h, boolean loadIt) {\n+        return h.test3Virtual(loadIt);\n@@ -66,1 +177,1 @@\n-        Method m = TestUnloadedReturnTypes.class.getMethod(\"test\", boolean.class);\n+        Method m = TestUnloadedReturnTypes.class.getMethod(\"test1\", boolean.class);\n@@ -69,1 +180,6 @@\n-        \/\/ Make sure the callee method is C2 compiled\n+        MyHolder2 h2 = new MyHolder2();\n+        MyHolder2Super h2Super = new MyHolder2Super();\n+        MyHolder3 h3 = new MyHolder3();\n+        MyHolder3Super h3Super = new MyHolder3Super();\n+\n+        \/\/ Warmup\n@@ -71,1 +187,7 @@\n-            MyClass.test((i % 2) == 0);\n+            MyHolder1.test1((i % 2) == 0);\n+            Asserts.assertEquals(test2(h2, false), null);\n+            Asserts.assertEquals(test2Virtual(h2, false), null);\n+            Asserts.assertEquals(test2Virtual(h2Super, false), null);\n+            Asserts.assertEquals(test3(h3, false), null);\n+            Asserts.assertEquals(test3Virtual(h3, false), null);\n+            Asserts.assertEquals(test3Virtual(h3Super, false), null);\n@@ -74,4 +196,4 @@\n-        test(true);\n-        if (((MyValue1)res).x != 42) {\n-            throw new RuntimeException(\"Test failed\");\n-        }\n+        test1(true);\n+        Asserts.assertEquals(((MyValue1)res).x, 42);\n+        test1(false);\n+        Asserts.assertEquals(res, null);\n@@ -79,3 +201,6 @@\n-        test(false);\n-        if (res != null) {\n-            throw new RuntimeException(\"Test failed\");\n+        \/\/ Deopt and re-compile callee at C2 so it returns scalarized, then deopt again\n+        for (int i = 0; i < 100_000; ++i) {\n+            Asserts.assertEquals(h2.test2(true), new MyValue2());\n+            Asserts.assertEquals(h2Super.test2Virtual(true), new MyValue2());\n+            Asserts.assertEquals(h3.test3(true), new MyValue3());\n+            Asserts.assertEquals(h3Super.test3Virtual(true), new MyValue3());\n@@ -83,0 +208,6 @@\n+        Asserts.assertEquals(test2(h2, true), new MyValue2());\n+        Asserts.assertEquals(test2Virtual(h2, true), new MyValue2());\n+        Asserts.assertEquals(test2Virtual(h2Super, true), new MyValue2());\n+        Asserts.assertEquals(test3(h3, true), new MyValue3());\n+        Asserts.assertEquals(test3Virtual(h3, true), new MyValue3());\n+        Asserts.assertEquals(test3Virtual(h3Super, true), new MyValue3());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":147,"deletions":16,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @library \/test\/lib\n@@ -30,0 +29,2 @@\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class0b during loading of class PreloadCircularityTest$Class0a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class0c during loading of class PreloadCircularityTest$Class0b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class0b during loading of class PreloadCircularityTest$Class0a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class0c during loading of class PreloadCircularityTest$Class0b. Cause: a null-free non-static field is declared with this type\");\n@@ -99,2 +99,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1b during loading of class PreloadCircularityTest$Class1a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1b during loading of class PreloadCircularityTest$Class1a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b. Cause: field type in LoadableDescriptors attribute\");\n@@ -126,3 +126,3 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2c during loading of class PreloadCircularityTest$Class2b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class2c during loading of class PreloadCircularityTest$Class2b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class2b during loading of class PreloadCircularityTest$Class2c. Cause: a null-free non-static field is declared with this type\");\n@@ -153,3 +153,3 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3c during loading of class PreloadCircularityTest$Class3b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class3c during loading of class PreloadCircularityTest$Class3b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c. Cause: field type in LoadableDescriptors attribute\");\n@@ -176,2 +176,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class4b during loading of class PreloadCircularityTest$Class4a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class4a during loading of class PreloadCircularityTest$Class4b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class4b during loading of class PreloadCircularityTest$Class4a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class4a during loading of class PreloadCircularityTest$Class4b. Cause: a null-free non-static field is declared with this type\");\n@@ -209,3 +209,3 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a. Cause: field type in LoadableDescriptors attribute\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n@@ -215,4 +215,4 @@\n-        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5c during loading of class PreloadCircularityTest$Class5a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c. Cause: field type in LoadableDescriptors attribute\");\n-        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class5c during loading of class PreloadCircularityTest$Class5a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class5d during loading of class PreloadCircularityTest$Class5b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5d. Cause: a null-free non-static field is declared with this type\");\n@@ -252,2 +252,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6a. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b. Cause: field type in LoadableDescriptors attribute\");\n@@ -255,2 +255,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6d during loading of class PreloadCircularityTest$Class6b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6d. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6d during loading of class PreloadCircularityTest$Class6b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6b during loading of class PreloadCircularityTest$Class6d. Cause: a null-free non-static field is declared with this type\");\n@@ -271,1 +271,1 @@\n-        out.shouldNotContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class7a during loading of class PreloadCircularityTest$Class7a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldNotContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class7a during loading of class PreloadCircularityTest$Class7a. Cause: a null-free non-static field is declared with this type\");\n@@ -281,1 +281,1 @@\n-        out.shouldNotContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class8a during loading of class PreloadCircularityTest$Class8a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldNotContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class8a during loading of class PreloadCircularityTest$Class8a. Cause: a null-free non-static field is declared with this type\");\n@@ -295,1 +295,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class9b during loading of class PreloadCircularityTest$Class9a. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class9b during loading of class PreloadCircularityTest$Class9a. Cause: a null-free non-static field is declared with this type\");\n@@ -310,1 +310,1 @@\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class10b during loading of class PreloadCircularityTest$Class10a. Cause: a null-free non-static field is declared with this type\");\n+    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class10b during loading of class PreloadCircularityTest$Class10a. Cause: a null-free non-static field is declared with this type\");\n@@ -353,1 +353,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n@@ -355,2 +355,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c. Cause: a null-free non-static field is declared with this type\");\n@@ -359,1 +359,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b. Cause: a null-free static field is declared with this type\");\n@@ -384,3 +384,3 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52b during linking of class PreloadCircularityTest$Class52a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52b during linking of class PreloadCircularityTest$Class52a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b. Cause: a null-free non-static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c. Cause: a null-free non-static field is declared with this type\");\n@@ -410,2 +410,2 @@\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in LoadableDescriptors attribute\");\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n+    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in LoadableDescriptors attribute\");\n+    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n@@ -414,2 +414,2 @@\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a. Cause: a null-free static field is declared with this type\");\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n+    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a. Cause: a null-free static field is declared with this type\");\n+    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n@@ -431,1 +431,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a. Cause: a null-free static field is declared with this type\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a. Cause: a null-free static field is declared with this type\");\n@@ -447,1 +447,1 @@\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a. Cause: a null-free static field is declared with this type\");\n+    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a. Cause: a null-free static field is declared with this type\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        checkFor(pb, \"[info][class,preload] Preloading class PreloadValue0 during loading of class ValuePreloadClient0. Cause: field type in LoadableDescriptors attribute\");\n+        checkFor(pb, \"[info][class,preload] Preloading of class PreloadValue0 during loading of class ValuePreloadClient0. Cause: field type in LoadableDescriptors attribute\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}