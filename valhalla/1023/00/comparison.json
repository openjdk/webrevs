{"files":[{"patch":"@@ -50,2 +50,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -294,6 +292,0 @@\n-            @Override\n-            public boolean isInlineClass(String desc) {\n-                Class<?> aClass = symbol(desc);\n-                return aClass != null && PrimitiveClass.isPrimitiveValueType(aClass);\n-            }\n-\n@@ -306,2 +298,1 @@\n-                        Class<?> c = Class.forName(basicTypeHelper.symbol(desc).replaceAll(\"\/\", \".\"), true, lookup.lookupClass().getClassLoader());\n-                        return basicTypeHelper.isInlineClass(desc) ? PrimitiveClass.asValueType(c) : PrimitiveClass.asPrimaryType(c);\n+                        return Class.forName(basicTypeHelper.symbol(desc).replaceAll(\"\/\", \".\"), true, lookup.lookupClass().getClassLoader());\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/OldInstructionHelper.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,5 +48,0 @@\n-    @Override\n-    public boolean isInlineClass(String t) {\n-        return t.charAt(0) == 'Q' && t.endsWith(\";\");\n-    }\n-\n@@ -58,4 +53,0 @@\n-    @Override\n-    public String valueType(String s) {\n-        return \"Q\" + s + \";\";\n-    }\n@@ -68,1 +59,0 @@\n-            case 'Q':\n@@ -157,1 +147,0 @@\n-                    case 'Q':\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/BasicTypeHelper.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -176,2 +176,1 @@\n-        int poolIdx = (typeHelper.isInlineClass(typeHelper.type(array))) ?\n-            poolHelper.putInlineClass(array) : poolHelper.putClass(array);\n+        int poolIdx = poolHelper.putClass(array);\n@@ -184,2 +183,1 @@\n-        int poolIdx = (typeHelper.isInlineClass(typeHelper.type(target))) ?\n-            poolHelper.putInlineClass(target) : poolHelper.putClass(target);\n+        int poolIdx = poolHelper.putClass(target);\n@@ -192,2 +190,1 @@\n-        int poolIdx = (typeHelper.isInlineClass(typeHelper.type(target))) ?\n-            poolHelper.putInlineClass(target) : poolHelper.putClass(target);\n+        int poolIdx = poolHelper.putClass(target);\n@@ -1165,2 +1162,1 @@\n-                        stackmaps.writeChar(typeHelper.isInlineClass(t) ?\n-                            poolHelper.putInlineClass(typeHelper.symbol(t)) : poolHelper.putClass(typeHelper.symbol(t)));\n+                        stackmaps.writeChar(poolHelper.putClass(typeHelper.symbol(t)));\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/CodeBuilder.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,18 +87,0 @@\n-     * Return true if the parameter is a value type.\n-     *\n-     * @param t the type descreiptor\n-     * @return true if the given type is a value type\n-     *\/\n-    boolean isInlineClass(T t);\n-\n-    \/**\n-     * For a symbol that corresponds to a value type, return the type descriptor.\n-     *\n-     * @param s the symbol\n-     * @return the type descriptor\n-     *\/\n-    default T valueType(S s) {\n-        return type(s);\n-    }\n-\n-    \/**\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/TypeHelper.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}