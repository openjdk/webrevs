{"files":[{"patch":"@@ -1832,4 +1832,0 @@\n-  \/\/ Valhalla missing LM_LIGHTWEIGHT support just now\n-  if (EnableValhalla && LockingMode == LM_LIGHTWEIGHT) {\n-    FLAG_SET_CMDLINE(LockingMode, LM_LEGACY);\n-  }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -309,0 +309,2 @@\n+\/\/ These checks are required for wait, notify and exit to avoid inflating the monitor to\n+\/\/ find out this inline type object cannot be locked.\n@@ -544,1 +546,1 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  assert(!EnableValhalla || !obj->mark().is_inline_type(), \"must not eliminate inline locks\");\n@@ -563,1 +565,2 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  \/\/ The interpreter and c1 generate code to throw IdentityException before calling this.\n+  assert(!EnableValhalla || !obj->mark().is_inline_type(), \"should not reach here\");\n@@ -684,1 +687,1 @@\n-      return;\n+      return; \/\/ why not IMSE?\n@@ -770,1 +773,6 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+\n+  if (EnableValhalla && obj->mark().is_inline_type()) {\n+    JavaThread* THREAD = current;\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_IdentityException(), obj->klass()->external_name());\n+  }\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        boolean sawImse = false;\n+        boolean sawExc = false;\n@@ -55,1 +55,1 @@\n-            sawImse = checkImse(t);\n+            sawExc = checkIdException(t);\n@@ -57,1 +57,1 @@\n-        if (!sawImse) {\n+        if (!sawExc) {\n@@ -60,1 +60,1 @@\n-        sawImse = false;\n+        sawExc = false;\n@@ -64,1 +64,1 @@\n-            sawImse = checkImse(t);\n+            sawExc = checkImse(t);\n@@ -66,1 +66,1 @@\n-        if (!sawImse) {\n+        if (!sawExc) {\n@@ -77,0 +77,7 @@\n+\n+    static boolean checkIdException(Throwable t) {\n+        if (t instanceof IdentityException) {\n+            return true;\n+        }\n+        throw new RuntimeException(t);\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"}]}