{"files":[{"patch":"@@ -309,2 +309,0 @@\n-\/\/ These checks are required for wait, notify and exit to avoid inflating the monitor to\n-\/\/ find out this inline type object cannot be locked.\n@@ -546,1 +544,1 @@\n-  assert(!EnableValhalla || !obj->mark().is_inline_type(), \"must not eliminate inline locks\");\n+  CHECK_THROW_NOSYNC_IMSE(obj);\n@@ -565,2 +563,1 @@\n-  \/\/ The interpreter and c1 generate code to throw IdentityException before calling this.\n-  assert(!EnableValhalla || !obj->mark().is_inline_type(), \"should not reach here\");\n+  CHECK_THROW_NOSYNC_IMSE(obj);\n@@ -687,1 +684,1 @@\n-      return; \/\/ why not IMSE?\n+      return;\n@@ -773,6 +770,1 @@\n-\n-  if (EnableValhalla && obj->mark().is_inline_type()) {\n-    JavaThread* THREAD = current;\n-    ResourceMark rm(THREAD);\n-    THROW_MSG(vmSymbols::java_lang_IdentityException(), obj->klass()->external_name());\n-  }\n+  CHECK_THROW_NOSYNC_IMSE(obj);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        boolean sawExc = false;\n+        boolean sawImse = false;\n@@ -55,1 +55,1 @@\n-            sawExc = checkIdException(t);\n+            sawImse = checkImse(t);\n@@ -57,1 +57,1 @@\n-        if (!sawExc) {\n+        if (!sawImse) {\n@@ -60,1 +60,1 @@\n-        sawExc = false;\n+        sawImse = false;\n@@ -64,1 +64,1 @@\n-            sawExc = checkImse(t);\n+            sawImse = checkImse(t);\n@@ -66,1 +66,1 @@\n-        if (!sawExc) {\n+        if (!sawImse) {\n@@ -77,7 +77,0 @@\n-\n-    static boolean checkIdException(Throwable t) {\n-        if (t instanceof IdentityException) {\n-            return true;\n-        }\n-        throw new RuntimeException(t);\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"}]}