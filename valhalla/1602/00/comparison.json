{"files":[{"patch":"@@ -42,0 +42,1 @@\n+#include \"oops\/refArrayKlass.hpp\"\n@@ -114,7 +115,8 @@\n-  assert(klass->is_klass(), \"must be instance class\");\n-  if (klass->is_array_klass()) {\n-    assert(properties == ArrayKlass::ArrayProperties::DEFAULT, \"properties only apply to single dimension arrays\");\n-    return ArrayKlass::cast(klass)->allocate_arrayArray(1, length, THREAD);\n-  } else {\n-    return InstanceKlass::cast(klass)->allocate_objArray(length, properties, THREAD);\n-  }\n+  assert(!klass->is_array_klass() || properties == ArrayKlass::ArrayProperties::DEFAULT, \"properties only apply to single dimension arrays\");\n+  ArrayKlass* ak = klass->array_klass(CHECK_NULL);\n+  return ObjArrayKlass::cast(ak)->allocate_instance(length, properties, THREAD);\n+}\n+\n+refArrayOop oopFactory::new_refArray(Klass* array_klass, int length, TRAPS) {\n+  RefArrayKlass* rak = RefArrayKlass::cast(array_klass);  \/\/ asserts is refArray_klass().\n+  return rak->allocate_instance(length, rak->properties(), THREAD);\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,0 +61,3 @@\n+  \/\/ Allocate refArray instance given a refArrayKlass.\n+  static refArrayOop     new_refArray(Klass* array_klass, int length, TRAPS);\n+\n","filename":"src\/hotspot\/share\/memory\/oopFactory.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -221,11 +221,0 @@\n-objArrayOop ArrayKlass::allocate_arrayArray(int n, int length, TRAPS) {\n-  check_array_allocation_length(length, arrayOopDesc::max_array_length(T_ARRAY), CHECK_NULL);\n-  size_t size = refArrayOopDesc::object_size(length);\n-  ArrayKlass* ak = array_klass(n + dimension(), CHECK_NULL);\n-  ObjArrayKlass* oak = ObjArrayKlass::cast(ak)->klass_with_properties(ArrayProperties::DEFAULT, CHECK_NULL);\n-  objArrayOop o = (objArrayOop)Universe::heap()->array_allocate(oak, size, length,\n-                                                                \/* do_zero *\/ true, CHECK_NULL);\n-  \/\/ initialization to null not necessary, area already cleared\n-  return o;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,0 @@\n-  objArrayOop allocate_arrayArray(int n, int length, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+  friend class Deoptimization;\n+  friend class oopFactory;\n@@ -101,0 +103,1 @@\n+ private:\n@@ -102,0 +105,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1856,5 +1856,0 @@\n-objArrayOop InstanceKlass::allocate_objArray(int length, ArrayKlass::ArrayProperties props, TRAPS) {\n-  ArrayKlass* ak = array_klass(CHECK_NULL);\n-  return ObjArrayKlass::cast(ak)->allocate_instance(length, props, CHECK_NULL);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -920,1 +920,0 @@\n-  objArrayOop allocate_objArray(int lenght, ArrayKlass::ArrayProperties props, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+  static ArrayDescription array_layout_selection(Klass* element, ArrayProperties properties);\n+  virtual objArrayOop allocate_instance(int length, ArrayProperties props, TRAPS);\n+\n@@ -61,3 +64,0 @@\n-  \/\/ Compiler\/Interpreter offset\n-  static ByteSize element_klass_offset() { return in_ByteSize(offset_of(ObjArrayKlass, _element_klass)); }\n-\n@@ -67,0 +67,3 @@\n+  \/\/ Compiler\/Interpreter offset\n+  static ByteSize element_klass_offset() { return in_ByteSize(offset_of(ObjArrayKlass, _element_klass)); }\n+\n@@ -92,3 +95,1 @@\n-  static ArrayDescription array_layout_selection(Klass* element, ArrayProperties properties);\n-\n-  virtual objArrayOop allocate_instance(int length, ArrayProperties props, TRAPS);\n+ public:\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+  friend class Deoptimization;\n+  friend class oopFactory;\n@@ -62,0 +64,1 @@\n+ private:\n@@ -64,0 +67,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/oops\/refArrayKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -419,2 +419,1 @@\n-    RefArrayKlass* array_klass = RefArrayKlass::cast(array_type);\n-    result = array_klass->allocate_instance(len, RefArrayKlass::cast(array_type)->properties(), THREAD);\n+    result = oopFactory::new_refArray(array_type, len, THREAD);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}