[{"commit":{"message":"Merge jdk"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attribute.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassElement.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/PreloadAttribute.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java"},{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"d4b0102624e8fe33e5c11c5d7d70700b7b324c1a"},{"commit":{"message":"8322573: [lworld] Add null-restricted value class array support in core reflection\n\nReviewed-by: fparain, rriggs"},"files":[],"sha":"474f876f63329e96596e9bdfbff7061e11f03f7c"},{"commit":{"message":"8321293: [lworld] First batch of migrated runtime tests\n\nReviewed-by: dsimms"},"files":[],"sha":"1f9544e6f53312ec908599b2de465716ecd22530"},{"commit":{"message":"8320296: [lworld] Fix profiling at array store subtype checks in Valhalla\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"814a5e93cb392a77a43550bf8dab5ab9d52bdcfd"},{"commit":{"message":"8321941: Migrate test\/jdk\/valhalla\/valuetypes from primitive classes to null-restricted types\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"2dc05aa9c4bf47baf60b091c42cb4f9784e6d374"},{"commit":{"message":"8321039: [lworld] Substitutability code must recognize new annotations\n\nReviewed-by: fparain, rriggs"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"8e0a09ddebd736a8db19cdf99abfb14a0c4daccb"},{"commit":{"message":"8320437: [lworld] Adding internal null-restricted storage API points\n\nReviewed-by: thartmann, dsimms"},"files":[],"sha":"738869210fdfc56f50e9044c41cf8cad7b65c8ca"},{"commit":{"message":"8320225: [lworld] TestBasicFunctionality::test20 fails intermittently because it does not correctly handle coalescing of subword stores"},"files":[],"sha":"f3fa4f8a60dc709c99e9ebb55a08000654fe38d6"},{"commit":{"message":"8320080: [lworld] SubTypeCheckNode::sub asserts with \"should be not null\""},"files":[],"sha":"3f3a7be085db25e1a990a5a3ec214d3679b751ec"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+15"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"}],"sha":"6e6ac6c9aa52d377578bbb1d741f87ac534ed33c"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+14\n\nCo-authored-by: Tobias Hartmann <thartmann@openjdk.org>"},"files":[{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"24e0c059b8d02057abbfb02b52209692e44d94e5"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+13"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"481893b8fbbee8a957a4a7fcba3545eff2293e62"},{"commit":{"message":"8319967: [lworld] TypeAryPtr::cast_to_not_null_free hits assert(!not_null_free || !is_flat()) failed: inconsistency"},"files":[],"sha":"6be441a4decbd85cd51c26e1699a34bbc2281d24"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+12"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"6e31ad2fddbb24c138f1684c88943a8e509844f5"},{"commit":{"message":"8319528: [lworld] Remove T_PRIMITIVE_OBJECT from JIT code"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"d62c55dd99c4050f620c2626438cf83c1f08e022"},{"commit":{"message":"8315744: [lworld] SubTypeCheckNode::sub asserts with \"should be not null\""},"files":[],"sha":"c328c5fcd8e91084ba0da65781e935bec1df3263"},{"commit":{"message":"8315745: [lworld] \"Meet Not Symmetric\" failures"},"files":[],"sha":"d5a1584e18782926b941ebe19d8d00f5fa8736de"},{"commit":{"message":"8316742: [lworld] Intrinsify Unsafe::isFlattenedArray()\n\nReviewed-by: thartmann"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"985474d2e685b4037bd867c20f41ae03637aaeb6"},{"commit":{"message":"8317658: [lworld] TemplateTable::withfield() does not correctly load the ResolvedFieldEntry\n\nReviewed-by: fparain"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3a5d7d9f3d994b4886120185f3f0a3a37bc771b9"},{"commit":{"message":"Merge jdk\n\njdk-22+11"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"9beecaef3145afc580904dede557aa7faa3debd7"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+10"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"39426cf6a66128c14d48ed3d9416f84fb86d4e03"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+9"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"40b2e61d35cdc3ba4586592fb71fec345bdd63df"},{"commit":{"message":"8315935: [lworld] Apply flat renaming to C2 code\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"0263bd9385f64119e9d41428d3604f5a21430fc9"},{"commit":{"message":"8311219: [lworld] VM option \"InlineFieldMaxFlatSize\" cannot work well\n\nCo-authored-by: Tobias Hartmann <thartmann@openjdk.org>\nReviewed-by: jbhateja, thartmann"},"files":[],"sha":"72cfc5ff6b13f48df937d5a6df7e839077a5237c"},{"commit":{"message":"8313667: [lworld] XBarrierSetC2::clone_at_expansion() uses wrong array copy stub for cloning flat primitive type arrays\n\nReviewed-by: thartmann"},"files":[],"sha":"261a0457ec4dbb39427ad9b9e5e12138e4eb7e2b"},{"commit":{"message":"8315412: [lworld] Preparing code for lw5\n\nReviewed-by: lfoltan, thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"202c5cc2e0f5f0a4464c71ea02e42467974708a8"},{"commit":{"message":"8315272: [lworld] Replacing NULL with nullptr in aarch64 code\n\nReviewed-by: lfoltan"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"3b4cc5fdb038a7363e5ac8a704adacd70701c1ff"},{"commit":{"message":"8314923: [lworld] AllocationMergesTests.java fails IR verification\n\nReviewed-by: chagedorn"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"ffb28305f61995a6e990b04bd1aaed2b65a623b7"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+8"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"ae8b7dbc774a44ea1b9083f69e7f83b8aa72da8c"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+7"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"8bdf624019dbefa7d2fa583f306f72862b3c4629"},{"commit":{"message":"8314190: [lworld] Missing InlineTypeNode re-materialization during type sharpening.\n\nReviewed-by: thartmann"},"files":[],"sha":"9ceb30babc0a1aa5224ca08c8cd77eed391cd3db"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+6"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"cf95308c529a0fe4a3f4cb9ddda38335ce37cf4b"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+4 and jdk-22+5"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"064cd392384821f6332ce5b8e9bc84153b59117a"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+3"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"054524e323138d0b4d2dfaed0cca8e1b77f6bce4"},{"commit":{"message":"Adjust testing, refine ProblemList with test ids"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"ce916e16248be54f8d604bae6248ed51aaef12ad"},{"commit":{"message":"8313607: [lworld] runtime\/valhalla\/inlinetypes\/InlineOops.java GenZ assertion on aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"8af773c0f2f36fb1a4455530c0022a24bb89b2bc"},{"commit":{"message":"Adjust testing for ZGenerational compiler failures"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"b35925899c99b73a90c935da74482661e0aecc58"},{"commit":{"message":"Merge jdk\n\nMerge jdk-22+2"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"a262109c2cdf945dc003cdd0507575d2a83a1742"},{"commit":{"message":"Adjust testing for 8313607 (InlineOops GenZ on aarch64)"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8bacdd4b843c5220f54424c26add507eb729e704"},{"commit":{"message":"8309344: [lworld] Initial ZGenerational fixes and support"},"files":[],"sha":"48040955ae0dc71023c4e58ae41051b4d630a2b4"},{"commit":{"message":"8312417: [lworld] Replacing NULL with nullptr in x86 code"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"c1976b273f7edad0cee6960ff473504ff615ec43"},{"commit":{"message":"8312231: Replacing NULL with nullptr in shared code"},"files":[{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"9bbdc52c6d7ab8f8c5ff8cf1f25f50490634206a"},{"commit":{"message":"8311383: [lworld] Restoring inline class mirrors with CDS.\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"2d65027f17871acf4f641db74e71bd81fdb7fa5b"},{"commit":{"message":"8310651: [lworld] ValueConstantDesc fails after merge with jdk-21+25\n\nReviewed-by: fparain"},"files":[{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"ab7f741d287e933d6de82be5f5ad5eab20f965e8"},{"commit":{"message":"8309357: [lworld] CDS is broken with InlineKlasses after the merge"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"7e09a28ad89d3f31dc3626b3667b4ae13bcbd326"},{"commit":{"message":"8310650: [lworld] Problemlist PrimitiveClassConstantTest.java\n8310652: Problemlist ValueConstantDesc.java"},"files":[{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"cabc4d28c5c92f6386252851b0dede1ddde3129c"},{"commit":{"message":"8310034: [lworld] C2 compilation fails with assert \"array can't be flattened\""},"files":[],"sha":"f7d6429c64d67a86f1b5f930a2a9dadd49402594"},{"commit":{"message":"8310022: [lworld] C1 compilation asserts with new lightweight locking"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"07aebbf75b902184a43748b41266c16c2e049c11"},{"commit":{"message":"8309650: [lworld] Fix mismatch inline type issue during method calls\n\nReviewed-by: thartmann"},"files":[],"sha":"53b40f92b5af2d438a340209c56bcc6e5af0378e"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+25 and jdk-22+0"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"c26c692137a5639a84d5e2406c6b58b89f4d06ef"},{"commit":{"message":"8309586: [lworld] Feature version post merge doesn't match CheckFeatureGate1.java & CheckFeatureGate2.java"},"files":[],"sha":"94636f4c8282474e58ea8229711102e104966257"},{"commit":{"message":"8309466: [lworld] Problem list CDS tests until JDK-8309357 is fixed"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"038580a5ab57ca751d272292ea4fd52ad50b971c"},{"commit":{"message":"8309353: [lworld] C2 compilations fails with assert(false) failed: type flow analysis failed for OSR compilation"},"files":[],"sha":"f5456ebe1cc87299eeb3e57f6f3fa4edabc43a38"},{"commit":{"message":"8308756: [lworld] compiler\/ciReplay\/TestInliningProtectionDomain.java fails because CDS is disabled"},"files":[],"sha":"fd3dfb774450b8dcef2f074ab95542f6d1bd5e8b"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+21, jdk-21+22, jdk-21+23 and jdk-21+24"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"46bf70ae4c6e718f9bc835d510d0d645920e834d"},{"commit":{"message":"8309036: [lworld] Assert during C2 compilation \"possible deadlock\""},"files":[],"sha":"446e3c4e9014f17f72c172aa901473f54cdcdaf3"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+16, jdk-21+17, jdk-21+18, jdk-21+19 and jdk-21+20"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"a8576b4b3f353aa2be498f197e0e5750bc18b492"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+15"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"3b84e3c7d9975fc3d116f25ac1617a786b732b1e"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+14"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"8367d28821c6e5328822544a5594d05855fad32b"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+11, jdk-21+12 and jdk-21+13"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"8d2290498b59ad2f07418538ab90433e005d587e"},{"commit":{"message":"Merge jdk\n\nMerge from jdk-21+5 to jdk-21+10"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"fc300fa9c5795b9376e1df87f39f0de1a9020a0b"},{"commit":{"message":"8306986: [lworld] C2 compilation fails with assert \"Should have been buffered\""},"files":[],"sha":"131a3cee543eadb6c992570dd6e3b5ee61f7860e"},{"commit":{"message":"8232892: [AARCH64] [lworld] Inline type use of Access API (compiler barrier support)"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"c5c56757cb03e88cd952d50445646b9fcf1ad92f"},{"commit":{"message":"8306677: [lworld] TestCallingConventionC1 fails on AArch64 with -XX:+PatchALot"},"files":[],"sha":"6673e60b5f65664ff2858880dcd64e4be7b03448"},{"commit":{"message":"8303000: [lworld] C2 compilation fails with assert(phase->C->get_alias_index(t) == phase->C->get_alias_index(t_adr)) failed: correct memory chain"},"files":[],"sha":"404d2ab1fc480b69bd38877473f2621a61a2ad4e"},{"commit":{"message":"8306568: [lworld] Oop verification failure in InlineKlass::returned_inline_klass\n\nReviewed-by: dsimms"},"files":[],"sha":"e7d520735318131b107a8a62393b1768934a7def"},{"commit":{"message":"8306567: ProblemList ProblemList CDS test RedefineRunningMethods_Shared.java\n\nReviewed-by: thartmann"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"edac97b79163096594360f24c85415d7d46448d3"},{"commit":{"message":"8306565: [lworld] Asserts with stress testing during PhaseCCP due to unexpected top types"},"files":[],"sha":"88632a32ad85dc5c6ed912e291be939741806bd1"},{"commit":{"message":"8306453: ProblemList CDS tests failing with dumping the shared archive: --patch-module"},"files":[{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"93355a32e5f184fbce9f3e27f5f253278c80d8cc"},{"commit":{"message":"8306443: [lworld] Incorrect loading of is-init-byte from stack"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"aba2179008a7b09842d73450908dba30e04fd647"},{"commit":{"message":"8301007: [lworld] Handle mismatches of the preload attribute in the calling convention\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"6b0631ccc0d4aaa05177b643b69c2177b2887c61"},{"commit":{"message":"8306301: [lworld] Circular dependency when unpacking"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"27cde0aa962037f61ce2248be5e7f43fcbc94563"},{"commit":{"message":"8304084: [lworld] Fix copyright text in GensrcValueClasses.gmk\n\nReviewed-by: mchung"},"files":[],"sha":"a85a539a59fca31922904e5a1725bcc47a09ef69"},{"commit":{"message":"8303416: [lworld] Fix JVM crash at Unsafe_FinishPrivateBuffer\n\nReviewed-by: thartmann"},"files":[],"sha":"d8e7d2eb3837c6b18a2c88955ae2ab89667889bb"},{"commit":{"message":"8271959: [lworld] Convert Optional and VBS classes to value class\n\nReviewed-by: erikj, mchung"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"4f71167ca2eacc3330e1a4b709c482c3d0bd36e5"},{"commit":{"message":"8293800: [lworld] Remove TypeInlineType and related code\n\nCo-authored-by: Roland Westrelin <roland@openjdk.org>"},"files":[],"sha":"0baf5d1e66045f648bc7312d2802ad962960cff2"},{"commit":{"message":"8303137: [lworld] Fix ArchivedEnumTest fail caused by changed Enum static field\n\nReviewed-by: mchung"},"files":[],"sha":"5e871a477f79a7407053fdd4f5b4cd2aadcf8901"},{"commit":{"message":"8293702: [lworld] C1 does not properly handle unloaded inline type field loads"},"files":[],"sha":"21c557a725d4eddad6e07d4a7dcdf7f16440c804"},{"commit":{"message":"8284164: [lworld] Inline type elements of autobox cache should be casted to non-null"},"files":[],"sha":"a5785722f5f49fba98efdbb3f0edf5c7613d8b83"},{"commit":{"message":"8296950: [lworld] AccessFlags should be specific to class file version\n\nReviewed-by: mchung"},"files":[],"sha":"bc2c7c206a73c2b762e56077e80b84eaa7fc1755"},{"commit":{"message":"8282616: [lworld] C2 does not properly handle circular .ref or value class fields"},"files":[],"sha":"46bfac49bcd5eeb898519b253939b5d8f97e9d83"},{"commit":{"message":"8301899: [lworld] Value class APIs should have annotation for PreviewFeature\n\nReviewed-by: mchung"},"files":[],"sha":"01d8cceeb40a8c1c8b0de4540aed70d708a5c740"},{"commit":{"message":"8301664: [lworld] Inconsistent CastPP type leads to infinite loop in PhaseIterGVN::optimize"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2b29a9f99db91bc0904f2a85197256b6b623b589"},{"commit":{"message":"8301896: [backout] Revert addition of PreviewFeature for Value classes\n\nReviewed-by: mchung"},"files":[],"sha":"2ffaa0b0ea02fae24959696f1a278d17a3e36dd3"},{"commit":{"message":"8301720: [lworld] Value class APIs should have javadoc annotation for PreviewFeature\n\nReviewed-by: mchung"},"files":[],"sha":"5fd97c73405dde284fa42c201f13bf53beb83eae"},{"commit":{"message":"8301867: [lworld] BlackholeTest triggers assert \"Should have been buffered\""},"files":[],"sha":"2164d6dffea58f42f2e993a576bf35c86705ed36"},{"commit":{"message":"Merge jdk\n\nMerge jdk-21+5\n\nCo-authored-by: Roland Westrelin <roland@openjdk.org>\nCo-authored-by: Tobias Hartmann <thartmann@openjdk.org>"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"256f488b64846e4af2bfa90d436139bda8d0e7aa"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-21+1'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"6cd250ff9f85458b9de6129bc7ff297a1d029042"},{"commit":{"message":"8286824: [lworld] WeakHashMap for value classes"},"files":[],"sha":"a4c6473bf48541170792305f97456b24fdb49528"},{"commit":{"message":"8297207: [lworld] refactor primitive classes tests"},"files":[],"sha":"f689294b07c3b56f4b5f65e18a6f04ef3a1121d0"},{"commit":{"message":"8297199: [lworld] relocate test folder"},"files":[],"sha":"02e118314bd207ed718703e1680349d6e47d3ee1"},{"commit":{"message":"Removed bad named test"},"files":[],"sha":"994e84343f973c31a308b2975018ea7b1c19ea36"},{"commit":{"message":"8296711: [lworld] identity\/value javadoc cleanup\n\nReviewed-by: mchung"},"files":[],"sha":"d2fe8c59f9b4b183a443f4abd2c676492a5a491f"},{"commit":{"message":"8296491: [lworld] implement Object::hashCode for recursively-typed values"},"files":[],"sha":"8346a82215c607a59f7087e8c226ffd5847cbce9"},{"commit":{"message":"8296423: [lworld] add VarHandle tests for value classes"},"files":[],"sha":"dfaaafc2e8540be57789412d5932a2d31b1ccc30"},{"commit":{"message":"8293321: [lworld] substitutability test shall support value class with cyclic membership"},"files":[],"sha":"0ff3973c6105ae8f7b3709caa452ceed8df8f885"},{"commit":{"message":"8296172: [lworld] vmTestbase\/nsk\/jvmti\/GetObjectMonitorUsage\/objmonusage007\/TestDescription.java fails with \"primitive\" keyword"},"files":[],"sha":"3d42cca60478a6470620746a1e33eaff639570c8"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+21'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"2197395184149a900efa7c95f9bb9cfc926e29d0"},{"commit":{"message":"8295086: [lworld] follow-up for JDK-8288131"},"files":[],"sha":"eef5d0bd79aa97fdb515b5688ba3717ede3a435b"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+20'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"3b88153c50f5b5670bb6bbf756031cbe98c054b8"},{"commit":{"message":"8224057: [lworld] a hidden value class can't have <vnew> static factory method"},"files":[],"sha":"3aa9d593ccc361290b8592e7d487db706c29384b"},{"commit":{"message":"8295735: [lworld] Missing membar after buffer initialization in method handle return"},"files":[],"sha":"e350088b00de212024094c77683a11ac6a53c5a4"},{"commit":{"message":"8295731: [lworld] C1's linear register allocator spill map is incorrect"},"files":[],"sha":"4e59de18738484a0258f45cd6a49b029f352b3a2"},{"commit":{"message":"8247569: [lworld] Align with spec for <vnew> methods\n8294224: [lworld] VM support for <vnew> factory methods\n\nCo-authored-by: Vicente Romero <vromero@openjdk.org>\nCo-authored-by: Harold Seigel <hseigel@openjdk.org>\nCo-authored-by: Mandy Chung <mchung@openjdk.org>\nReviewed-by: fparain, mchung"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"}],"sha":"cc629c957ad2c59c539b8fd537a56033febb7d12"},{"commit":{"message":"8295655: [lworld] AArch64: Deoptimization from return value stub fails"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"6c933c171145f1e28f22456f3556402286b05525"},{"commit":{"message":"8295455: [lworld] find_callee_info_helper hits \"must have non-abstract attached method\" assert"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"688186b3fd7c7173c83069fe9d4fc87cfce63778"},{"commit":{"message":"8281295: Prototype serialization\/deserialization using Unsafe.\n\nReviewed-by: mchung"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"143f6b28b20f0d3ee6c52fad58f5836230bfb112"},{"commit":{"message":"8295234: [lworld] inner class of older classfile versions is not recognized as identity class\n\nReviewed-by: fparain"},"files":[],"sha":"336ef70095ec90b4be47aa29117c943b3b751f84"},{"commit":{"message":"8280979: [lworld] Rename PrimitiveObjectMethods to ValueObjectMethods\n\nReviewed-by: rriggs"},"files":[],"sha":"191942b54cef9de298646a00d25882bc94e1d4b4"},{"commit":{"message":"8294860: [lworld] Add java.util.Objects.isValueObject\n\nReviewed-by: mchung"},"files":[],"sha":"e1c3d839c7a9c81bacda90944e3517d594592987"},{"commit":{"message":"8295152: [lworld] Various C2 compiler issues revealed by stress testing"},"files":[],"sha":"82b63b75a6ca68a4948fcbd0672d3b777b18d255"},{"commit":{"message":"8270852: [lworld] bytecodes spinned at runtime should set minor_version to 65535 if preview feature enabled\n\nReviewed-by: rriggs"},"files":[],"sha":"cf05d5c19640daaf55beee84334784325a897b7c"},{"commit":{"message":"8293551: [lworld] Remove obsolete interfaces __primitive__ and __value__, and NonTearable\n\nReviewed-by: mchung"},"files":[],"sha":"8b2d9896b60c18070e37b471f2c35c20c63987c6"},{"commit":{"message":"8294927: [lworld] LambdaMetafactory class should reject identity and value superinterface\n\nReviewed-by: rriggs"},"files":[],"sha":"14c71a4d6f26b41c641799e41685854755d9964e"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+18'"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"67bae7e716ac674ee859f3c97e12d8ad102a8267"},{"commit":{"message":"8293542: [lworld] Merge InlineTypeNode and InlineTypePtrNode in C2"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"7c569cd2eaeb6a514638fa2483d867c9f17af69d"},{"commit":{"message":"[lworld] Added missing -XX:+EnableValhalla to ClassInitBarrier test"},"files":[],"sha":"d2fa68bb04bf8747133807e11907e362f0104e76"},{"commit":{"message":"8288135: [lworld] Implement HotSpot flag -XX:+EnablePrimitiveClasses\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"6a27741b79020009871da2a6065048902685ae31"},{"commit":{"message":"8294797: [lworld] update javadoc to remove references to primitive classes\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"2b06f9ed8b64317ea6f4dafb3559c16a6d7c9c95"},{"commit":{"message":"8294678: [lworld] Update AccessFlags tests to include ACC_IDENTITY and ACC_VALUE\n\nReviewed-by: mchung"},"files":[],"sha":"866adb676c5a22133e5dcb6cad84da2a104844b2"},{"commit":{"message":"8294774: add more regression tests for value objects"},"files":[],"sha":"6d4ad25077f07b978919b0fb40771cd84cc5bbed"},{"commit":{"message":"8294013: [lworld] Missing class init barriers in c2i adapter"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"9932689c343ddfe3d5586ce6c3817f2f96d54258"},{"commit":{"message":"8293994: [lworld] Deoptimization from nmethod entry barrier breaks scalarized calling convention"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"ee15e2d905edf29ed7660ca057d6cadb69de3f87"},{"commit":{"message":"8294312: [lworld] Add java.util.Objects.isIdentityObject\n\nReviewed-by: mchung"},"files":[],"sha":"9039a70b87719a4889931a601466b2a8900620bf"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+17'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"b10c80111788684513ff0ebae493965fb0902da4"},{"commit":{"message":"8294462: [lworld] Add jdk.internal.misc.ValhallaFeatures to reflect -XX:+EnableValhalla\n\nReviewed-by: mchung, dsimms"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"951544ffe536e8bb1e2b17048c479d04ee5136d9"},{"commit":{"message":"8294272: improve error messages issued by javac if primitive classes are not supported"},"files":[],"sha":"9290cc97906b9d79e84b5644a23f53d411038e82"},{"commit":{"message":"8288131: [lworld] Implement javac flag -XDenablePrimitiveClasses\n\nReviewed-by: dsimms"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"}],"sha":"4f0f30203c1276f9c14b7b3996177426be2d7675"},{"commit":{"message":"8294159: automatically generated tests under test\/jdk\/java\/lang\/invoke\/VarHandles\/ have been modified by mistake\n\nReviewed-by: rriggs, mchung"},"files":[],"sha":"56dfc296f6c8f5d9118acb47be13bea793556dba"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+16'"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"947ad67fcdbef5e518f60a30b60309d9fc2cf337"},{"commit":{"message":"8294229: [lworld] sun.jvm.hotspot.interpreter.Bytecodes refers to \"defaultvalue\" (not aconst_init)"},"files":[],"sha":"68dc74cec7bd674b3295717c0bc3b03868d1711d"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+15'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"60855881344b0e9606765fe8ff53d878ef622972"},{"commit":{"message":"Adjust ProblemList"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"33be83981e0bbf342dc7ecd7ccdced11c3c056c2"},{"commit":{"message":"8294054: [lworld] asPrimaryType\/asValueType intrinsics broken after JDK-8287692"},"files":[],"sha":"bac833dc71c77e9715f6f9122440da9dd2615fb8"},{"commit":{"message":"8292883: [lworld] javac fails to detect class files with invalid access flags"},"files":[],"sha":"33e1455d5efc04d14f6813f870dd2a465cb82f76"},{"commit":{"message":"8287692: Move Class primitive APIs to jdk.internal.value.PrimitiveClass\n\nReviewed-by: mchung"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"8813f488224c6ea4db1e06d446fe07ff8f6c944d"},{"commit":{"message":"8293934: [lworld] TestCallingConvention triggers \"code buffer not large enough\" assert"},"files":[],"sha":"2eceb31d18505d5afc31f50e56cbab1ac350c982"},{"commit":{"message":"[lworld] Disable getModifiersTest until 8291719 is fixed"},"files":[],"sha":"7c6eb809cd137fc188d289efc6b752567bb15bec"},{"commit":{"message":"8293868: [lworld] remove support for @__primitive__ and @__value__ for declaring primitive, value classes"},"files":[{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"fc0fece54eab5cf3de3c25c32f1f2575aa5ce6ec"},{"commit":{"message":"8293812: rename regression tests folder from lworld-values to primitive-classes"},"files":[],"sha":"72ea8be965fad07d4f325d89d859a6746a0ad719"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+14' into lworld"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"a6a57f2774abd636cd2dd2e9187d14062aeee4d8"},{"commit":{"message":"8293134: Valhalla: Verifier error in method call with abstract value class arg\n\nReviewed-by: fparain"},"files":[],"sha":"5b6e30c79146b957a4c632c559095dee754dfca1"},{"commit":{"message":"8293609: [lworld] Update vmTestbase\/nsk\/jdi\/Accessible\/modifiers001 to allow ACC_IDENTITY\n\nReviewed-by: mchung"},"files":[],"sha":"7bdfe88e3d95d19dd06893d2a70805cd14200879"},{"commit":{"message":"8293536: [lworld] serviceability\/jvmti\/RedefineClasses\/RedefineObject.java fails with added ACC_IDENTITY to object for old version\n\nReviewed-by: fparain"},"files":[],"sha":"61c28c2f49c3f7d80241f711d823d913718a8073"},{"commit":{"message":"8293523: test\/langtools\/tools\/javac\/preview\/PreviewTest is failing after the merge with 'master'"},"files":[],"sha":"44128207af0c1d2f34ba9d1eda670e2545a41691"},{"commit":{"message":"8293448: [lworld] ClassAccessFlagsRawTest fail\n\nReviewed-by: hseigel, mchung"},"files":[],"sha":"0eef4b512b82ca87ced67e0d09f8625b6abf31f6"},{"commit":{"message":"8293500: [lworld] runtime\/NMT\/MallocLimitTest.java#invalid-settings crashes after merge"},"files":[],"sha":"1a081f6f42c7fee7bf6794dfd8b13c9a2a873032"},{"commit":{"message":"8293487: [lworld] SIGSEGV with -XX:+VerifyAdapterSharing"},"files":[],"sha":"a649fec6a4acd32de4487d913dc66e13be3f6384"},{"commit":{"message":"8281463: [lworld] VALUE \/ PRIMITIVE modifiers should be supported by reflection\n\nReviewed-by: mchung"},"files":[],"sha":"619ab361be68052226fd87b68a1b6d281233f6ff"},{"commit":{"message":"Merge jdk\n\nMerge jdk-20+13 into lworld"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"aad9ca94888c241cccea5919ab909975fc81ba80"},{"commit":{"message":"8293357: [lworld] TestTrivialMethods fails with \"constantGetter is not C2 compiled\""},"files":[],"sha":"8c3210f5e098a07d883766348bade4cc53456a3b"},{"commit":{"message":"8292942: [lworld] add a test to check that an anonymous class is always an identity class"},"files":[],"sha":"2e6c5b64cdb8da86acf6d4c1de3f8cf24643377f"},{"commit":{"message":"8293314: [lworld] C2 OSR compilation fails with assert(_gvn.type(l)->higher_equal(type)) failed: must constrain OSR typestate"},"files":[],"sha":"02ea8d33fd2ddbbbfb1aa07f80defc56d5a36c89"},{"commit":{"message":"8293253: [lw4] Code fixing access flags in old class files is incorrect and incomplete\n\nReviewed-by: thartmann"},"files":[],"sha":"28c8958c4a64a0c040769bf91f9be63f8ec9dbee"},{"commit":{"message":"8293127: Valhalla: gcbasher update for new bytecodes\n\nReviewed-by: mchung"},"files":[],"sha":"29ee419ce02a31a3a972627f98146ab1a2b915d4"},{"commit":{"message":"8293126: [lworld] follow-up for JDK-8293120"},"files":[],"sha":"252ebe1ec474964850f756ec2d02e1b1721bd6d5"},{"commit":{"message":"8293172: [lworld] Folding of default value loads is broken"},"files":[],"sha":"ffdca33f203b03d83313cc489d909cb5217ff672"},{"commit":{"message":"8293173: [lworld] Fully apply refactoring from JDK-8275201 to Valhalla"},"files":[],"sha":"af6d76ab1b140c22b3d7a36c24de9cffc7daf47f"},{"commit":{"message":"8293183: [lworld] add missing tests for functional interfaces"},"files":[],"sha":"d38f39479671c276e86f03b56a52091d1c2ce458"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-20+8' into lworld"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java"},{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"4c3231c3c163d529f64e8039d1ed228bac989058"},{"commit":{"message":"8293038: [lworld] consolidate Value Objects tests"},"files":[],"sha":"ec987c5c2c86b7aa8c1371f013f10ad4a1dcff67"},{"commit":{"message":"8293129: [lworld] remove experimental code related to methods inherited from Object"},"files":[],"sha":"cdbafe56e14801076df030d8aa69d20490487102"},{"commit":{"message":"8293120: [lworld] javac is rejecting correct class declaration that has a combination of value and sealed modifiers"},"files":[],"sha":"8823c9b1f7ecfb0eb60d382c5b23cc4c93a97a54"},{"commit":{"message":"8292753: [lworld] javac is accepting erroneous synchronized statements"},"files":[],"sha":"3d9b4a7f2a63d393420e645dfcbb67f3e08d86a3"},{"commit":{"message":"8292953: [lworld] Remove ValueCapableClass"},"files":[],"sha":"2b23a957910bf30e96e2ce8fb00fa76fc61fd5e5"},{"commit":{"message":"8292817: [lworld] add binary compatibility tests"},"files":[],"sha":"5190d9abb230cf03f5ec39187c2aeb22d5dccd52"},{"commit":{"message":"8292882: [lw4] PERMITS_VALUE should be removed from all source files\n\nReviewed-by: dsimms"},"files":[],"sha":"8c772cc314e496f7dfc73c8081eb4d02a9a2a8ac"},{"commit":{"message":"8292812: jvm test RunWithfieldTests.java fails with VerifyError exception\n\nReviewed-by: fparain"},"files":[],"sha":"c9216717ea5700640bf8df26752be3a146f9b354"},{"commit":{"message":"8292630: [lworld] javac is accepting annotation interface declarations with modifiers: identity and value"},"files":[],"sha":"4a3131a875760e00c10857e5d6b9eced861506bd"},{"commit":{"message":"8287768: [lw4] Record component may not have the name isValueObject"},"files":[{"filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java"}],"sha":"8436b9626a6553772ffde469994569e64ac4773b"},{"commit":{"message":"Switch to modifier model to handle value and identity classes\n\nReviewed-by: dsimms"},"files":[],"sha":"3dc006bdba0e0101ac19831cead88e6f5eefa34b"},{"commit":{"message":"8289747: [lworld] Remove injected interfaces from CDS tests"},"files":[],"sha":"ce85ba8facb2dc17671b439714ec247ab48484fb"},{"commit":{"message":"8289686: [lworld] Unnecessary buffering because constant getters with scalarized arg are not C2 compiled"},"files":[],"sha":"0777b3339ad9a41b13f285e8ba9fae25f2ef6e5e"},{"commit":{"message":"8288644: [lw4] Unable to extend a separately compiled abstract value class\n\nReviewed-by: fparain"},"files":[],"sha":"c7a75211b98e5af6b46e936f4a091b92513606bd"},{"commit":{"message":"8288600: [test] Revert IdentityObject interface change in java.naming test RunBasic"},"files":[],"sha":"dff3d147adcaee101f1f867381a36fd2eea0f887"},{"commit":{"message":"8287241: Add IdentityException to report that a value object is not valid\n\nReviewed-by: mchung"},"files":[],"sha":"3d15c2f1b54c8ce28c2aec82ac2c096c2ffb0f60"},{"commit":{"message":"8288186: [lw4] Many runtime\/cds\/appcds\/ tests are still referring to IdentityObject"},"files":[],"sha":"22bb54721e39720c690cfd2d3baa0d65cb8d3bb9"},{"commit":{"message":"8283777: [lworld] TestArrayCopyAsLoadsStores.java triggers assert after merging jdk-19+15"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"02985564a67dc91a3f76d008b63b6dcdd786f6b8"},{"commit":{"message":"8288171: [lw4] Revert JDK-8253873 to fix failures in jdi, jvmti and jwdp tests"},"files":[],"sha":"15cb319a3d2e7d314864ceba44170aa8c2860918"},{"commit":{"message":"8288098: [lworld] C2 fails to scalarize value class arguments"},"files":[],"sha":"328d1ea273241c67654174227c1145a2256609bf"},{"commit":{"message":"8287763: [lw4] Javac does not implement the spec for non-trivial constructors in toto"},"files":[],"sha":"6692a954f4b4ddcd8b420dffd9dbea1c1ee22f2b"},{"commit":{"message":"8288084: [lw4] Tier1 hotspot runtime test ClassHierarchyTest.java fails"},"files":[],"sha":"5cf27a50ffe902b7de9ace6969d092fd225e6f78"},{"commit":{"message":"8287898: [lw4] test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VerifierInlineTypes.java fails"},"files":[],"sha":"929a25ed41e2be0691bbabf61d427d5b97600dc1"},{"commit":{"message":"8287767: [lw4] Javac tolerates mutually incompatible super types."},"files":[],"sha":"830fb16e574ce125cfe0bc584e6aca481d04cd6e"},{"commit":{"message":"8287770: [lw4] Javac tolerates synchronizing on an instance of a value interface"},"files":[],"sha":"c2cf32482e8ab7c1916c26ef55f11a788ff83d77"},{"commit":{"message":"8287136: [lw4] Javac tolerates abstract value classes that violate constraints for qualifying to be value super classes\n8287713: [lw4] Javac incorrectly flags subclasses as being ACC_IDENTITY classes.\n8281312: [lworld] Reenable test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations.java"},"files":[],"sha":"3582cb823f75eab34ba7024fc5d98ea37c75f26c"},{"commit":{"message":"8287359: ACC_IDENTITY bit not consistently set in Inner class flags"},"files":[],"sha":"4b62e1cc0a8ecb3982f410de6685c9d24271352c"},{"commit":{"message":"8287330: (valhalla) Better modeling of access flags in core reflection\n\nReviewed-by: mchung"},"files":[],"sha":"0f7c1c29214441cca2418361deed29fac5ee9585"},{"commit":{"message":"8287203: Synthetic concrete classes generated by javac are lacking the ACC_IDENTITY bit."},"files":[],"sha":"68ab121490e22e992a74332f0158364598313465"},{"commit":{"message":"8287030: Remove references to Objects.newIdentity\n\nReviewed-by: mchung"},"files":[],"sha":"ed4493144f6d1953dde4897a1b14fe331aa41817"},{"commit":{"message":"8287040: [lworld][lw4] Remove abstract Object class support from HotSpot\n\nReviewed-by: dsimms"},"files":[],"sha":"e300a857e9d46fb9f4dc65bee5766eadb8d21569"},{"commit":{"message":"8286807: Revert experimental special treatment given to new Object() instantiation."},"files":[],"sha":"b4f0a6e327213d76b8a86e3ad648747d842cc80e"},{"commit":{"message":"8286864: [lworld] runtime\/valhalla\/inlinetypes\/testSupers\/TestSuperClasses.java refers to IdentityObject interface"},"files":[],"sha":"4165ca014805dd3f46bff6320f4780c1d36fac4a"},{"commit":{"message":"8286877: [lworld] remove interface injection tests runtime\/valhalla\/inlinetypes\/identityObject\/TestIdentityObject.java & runtime\/valhalla\/inlinetypes\/primitiveObject\/TestPrimitiveObject.java"},"files":[],"sha":"104d6d9f80cbc4f8edd701d008f6250073e86d53"},{"commit":{"message":"8286491: Withdraw ValueObject and IdentityObject and introduce value and identity class modifiers\n8237952: [lworld] Examine Class::getAnnotatedInterfaces and other annotation-related API\n\nCo-authored-by: David Simms <dsimms@openjdk.org>"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"}],"sha":"d70e7e4920705e5d088e89aea1039eba2fa751a9"},{"commit":{"message":"8281269: Update Valhalla test which uses ClassTransformer class"},"files":[],"sha":"8d3750400ece36084b47fe5bf9ee06486ae25c1a"},{"commit":{"message":"8285763: Implement new approach to dump inlined objects"},"files":[{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"04181f90aec4b5ffb738944e22bb6b78203b1567"},{"commit":{"message":"8278390: [lworld] Scalarization of nullable inline types in the calling convention\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"8fa17febe332bfad2f125bbc9b429279214b3248"},{"commit":{"message":"8282569: [lworld] C2 asserts with \"re-allocation should be removed by Ideal transformation\""},"files":[],"sha":"9b9365dfb08f4abecd60f422819c7b6edbfa94cc"},{"commit":{"message":"8284019: [lworld] Constructor::newInstance on abstract Object class throws InstantiationException\n\nReviewed-by: fparain"},"files":[],"sha":"252a614aa6d6a786947349cd760d11f4eba52c83"},{"commit":{"message":"8282580: Remove javac support for __WithField as a bytecode macro"},"files":[],"sha":"37014032c40515c5ca5d82b6bc991b4baf09d10f"},{"commit":{"message":"8284040: Allow 'super()' calls in \"empty\" constructors"},"files":[],"sha":"50a9e932db8155a10fa58afd17da494de8004575"},{"commit":{"message":"8284159: [lworld] C2 failures with migrated wrapper classes"},"files":[],"sha":"8ac816b8642b1994a21b5b1476aca93ba4a1096a"},{"commit":{"message":"8284123: Problem list compiler\/arraycopy\/TestArrayCopyAsLoadsStores.java#id1"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"a2405cc76954343c3c9eface0cb66e7d4a612994"},{"commit":{"message":"8284000: [lworld] sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java fails after JDK-8283573\n\nReviewed-by: fparain"},"files":[],"sha":"0cf71fe98c1839cb325cb16cbcbe69d14cea6341"},{"commit":{"message":"Merge jdk\n\nMerge jdk-19+15"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"d909eac7c5fc71bc33baa3e30e7105dec67134d3"},{"commit":{"message":"8283573: [lworld] Make Object an abstract class\n\nReviewed-by: dsimms, thartmann"},"files":[],"sha":"cc0ea4675f150791738744951d2c20d7467bb2e5"},{"commit":{"message":"8265121: [lworld] Better optimize null-checks in C1\n\nReviewed-by: thartmann"},"files":[],"sha":"77e57c2684d913b01bf13f121a652419151b2817"},{"commit":{"message":"8282695: [lworld] assert(oopDesc::is_oop(obj)) in compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"5d03db860f45dff42d685f2b2f1175e8bb99d9f9"},{"commit":{"message":"8282512: Remove usages of __WithField in compiler tests\n\nReviewed-by: thartmann"},"files":[],"sha":"8e825246e23a8625a7e3bb2c4debe9942b66722a"},{"commit":{"message":"8282107: Valhalla: javac does not correctly recognize value class factory <init>"},"files":[],"sha":"a29cea9170b7811af50ee0bea88276128c0ee9df"},{"commit":{"message":"8282079: [lworld] Generate Preload attribute in lambdas and proxies if value classes are referenced\n\nReviewed-by: rriggs"},"files":[],"sha":"b3938a6e5aef8ef180822bd82fbe5edb4463702f"},{"commit":{"message":"8282292: [lworld] runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java Xcomp C1 asserts\n\nReviewed-by: thartmann"},"files":[],"sha":"53bb09651a02a21b7cb2d18e9bcbd74e6198355d"},{"commit":{"message":"8281283: Remove usages of __WithField in runtime tests\n\nReviewed-by: rriggs, dsimms"},"files":[],"sha":"71cf8628fa3133ff43bff0238f7a4eaa921cb88d"},{"commit":{"message":"8281323: [lworld] Unnecessary entries in Preload attribute\n8280942: Preload attribute should mention primitive classes when reference projection is used in descriptors"},"files":[],"sha":"603cb9d66be577ad17f90a0386160761d4a76b06"},{"commit":{"message":"8282108: [lworld] Enhance CreateSymbols to read Preload attribute"},"files":[],"sha":"52546456dd9c53152f807a1306a2ff3e19cfab2e"},{"commit":{"message":"8281763: Support Valhalla class file features in asmtools\n\nReviewed-by: lkuskov"},"files":[],"sha":"6c863ce493e37c652406f08f1726a5518cae7116"},{"commit":{"message":"8281880: AsmTools driver uses wrong implementation classes"},"files":[],"sha":"2c8ecdb0cd4a3d1a0d699a5fd2cf769692c73bba"},{"commit":{"message":"Tweak header format for correctness"},"files":[],"sha":"7c0494a44bf9a8ac29dcf52c5a3a29409b22c03e"},{"commit":{"message":"8281618: Add asmtools sources as a test library\n\nDuplicate copy of asmtools that will support Valhalla class file features. Eventually those features will end up in the official asmtools & jtreg, and we can garbage-collect this fork.\n\nReviewed-by: dsimms"},"files":[],"sha":"dc6036f627813e5605d93be4c89bc8dfa2006bc5"},{"commit":{"message":"8281471: [lworld] check_code.c should not accept Q-signatures as valid\n\nReviewed-by: fparain"},"files":[],"sha":"c99c872f9fcdcb5874b0ef046b1e645a187dba40"},{"commit":{"message":"8281073: [lworld] Update MethodHandles::zero, empty, constant APIs for primitive classes\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"611fca0a13051036144414e0d07509f45b5e70ca"},{"commit":{"message":"8281537: [lworld] runtime\/cds\/appcds\/TestDumpClassListSource.java fails with Exception: java.lang.RuntimeException: Class Hello should be printed in classlist"},"files":[],"sha":"9cab68b494b7d89f7782a50cb67e7677e7253729"},{"commit":{"message":"8281026: Allow for compiler.note.cant.instantiate.object.directly to be suppressed via an option"},"files":[],"sha":"fe2126b2fc2c865fc2d1bbc7bb8154fa00c678da"},{"commit":{"message":"8281454: [lworld] Assert in EA due to oop access to flat array"},"files":[],"sha":"5a0f3336c0e51ea8e4942f7b70a40f37ded0c2f2"},{"commit":{"message":"8281380: [lworld] Rename T_INLINE_TYPE to T_PRIMITIVE_OBJECT\n\nReviewed-by: hseigel"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"954f5ca407e4d68204fc0010d2082103255a61cb"},{"commit":{"message":"8281279: [lworld] Add JVM support for ACC_PERMITS_VALUE\n\nReviewed-by: fparain"},"files":[],"sha":"3017cf71c2201b236415c671827cfc3bac9c3521"},{"commit":{"message":"8281378: [lworld] Crash in LateInlineMHCallGenerator::do_late_inline_check\n\nReviewed-by: thartmann"},"files":[],"sha":"18b1f28d13eeb7c390fd9298be579801799562a3"},{"commit":{"message":"8281013: Errors.PrimitiveClassDoesNotSupport diagnostic should apply to value classes also"},"files":[],"sha":"fc22b797a7438dec5dbae8bb0f536207b5619765"},{"commit":{"message":"8281336: [lworld] Remove workaround in LambdaToMethod to circumvent BootstrapMethodError\n8274399: [lworld] LambdaConversionException thrown when the receiver type is a primitive reference type and the implementation type is the primitive value type of the same class\n\nCo-authored-by: Mandy Chung <mchung@openjdk.org>\nReviewed-by: mchung"},"files":[],"sha":"2571b270de06c209d5bfdb86a1a1929e6aa711b4"},{"commit":{"message":"8281325: [lworld] Unused code emitted for unpacking arguments leads to code buffer overflow"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2f2fa459af4215085b8bf78be7fc11619a250b59"},{"commit":{"message":"8279840: [lworld] Inconsistent treatment of repeated modifiers.\n\nReviewed-by: sadayapalam"},"files":[],"sha":"4ae0a0d2e11d67f6d1efe161674110aff171e872"},{"commit":{"message":"8281166: [lworld] javac should generate BSM to invoke the static factory for value class"},"files":[],"sha":"8b5c17ba3d714adaeb43a62624db800122529ed2"},{"commit":{"message":"Merge jdk\n\nMerge jdk-19+8"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"68b7cfaa27339454f48571154da3545c9433e13e"},{"commit":{"message":"8279839: [lworld] Javac has started incorrectly accepting native as a modifer for classes\n\nReviewed-by: sadayapalam"},"files":[],"sha":"6e609b324aed08413c9eae2e7cc93814c8d24933"},{"commit":{"message":"8281281: [lworld] Preload attribute code needs some fixes\n\nReviewed-by: hseigel"},"files":[],"sha":"a7b10d2acff754b015a4372b4b838d1d41b39940"},{"commit":{"message":"8280980: [lworld] MethodHandle and VarHandle support for value classes"},"files":[],"sha":"b7a7fa729f922b784e8167befe1ec786ec163bef"},{"commit":{"message":"8281116: [lworld] Adding Preload attribute support\n\nReviewed-by: hseigel"},"files":[],"sha":"f5a5dc35f126734401eded910420ac5b805f0193"},{"commit":{"message":"8280194: Abstract classes that allow value subclasses should be marked ACC_PERMITS_VALUE (0x0040)\n8242619: [lworld] Ascertain that no-arg super constructors of inline classes are empty"},"files":[],"sha":"2e44552e0b8566280a706cfbec73eaec1bffe6fb"},{"commit":{"message":"8280382: [lworld] JCWithField AST node support should evolve to work with value classes\n\nReviewed-by: sadayapalam"},"files":[],"sha":"d41022dc679bc275dd57ef8f2a1c9bf817d559d8"},{"commit":{"message":"8280707: [lworld] More issues with C2's arraycopy intrinsic"},"files":[],"sha":"22b271d0b3db95f914b9f8abb9eeb04169c1e05a"},{"commit":{"message":"8280746: [lworld] Initial core libraries support for value classes\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"32e6ec4e73b56d982819cc4e10218701cc11fb82"},{"commit":{"message":"8280704: [lworld] Rename defaultvalue to aconst_init in tests\n\nReviewed-by: fparain"},"files":[],"sha":"0c1345f88372fbf64a76b86c50ea5bd52556d1e6"},{"commit":{"message":"8280456: [lworld] javac should allow compilation with abstract java.lang.Object class"},"files":[],"sha":"6a489b1d0e250e1ef19f3dc57101c75e6c4798ed"},{"commit":{"message":"8280524: [lworld] Interpreter incorrectly handles uninitialized static inline type field\n\nCo-authored-by: Frederic Parain <fparain@openjdk.org>\nReviewed-by: fparain"},"files":[],"sha":"41147748dfb9f7c3db52b7798d92f2c90e1573b0"},{"commit":{"message":"8280381: [lworld] VM should accept static factory methods in value class files.\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"ba87b167f2fe2327508a06ec8652c6ddaa9402c1"},{"commit":{"message":"8280270: [lworld] JITs miss some klass initialization checks for defaultvalue\n\nReviewed-by: fparain"},"files":[],"sha":"6610bca71691a3f2665ef77e0cf7ab4b846d8d94"},{"commit":{"message":"8279655: [lworld] Bogus error: incompatible types: Object cannot be converted to Foo\n\nReviewed-by: sadayapalam"},"files":[],"sha":"0c0b8872921cd442f662a9db8d5df0876667220b"},{"commit":{"message":"8280519: Revert fix for JDK-8212175 as it is not relevant anymore"},"files":[],"sha":"521f0edbfaa0641aa44defa7b9706c04c10d1e69"},{"commit":{"message":"8280514: [API-cleanup] Merge the internal API points Types.is{Primitive\/Value}Class with Type.is{Primitive\/Value}Class"},"files":[],"sha":"a9a8c83a4b2411149bb88b053827778d0e934c76"},{"commit":{"message":"8280440: [lworld] Scalarization does not properly handle speculative types"},"files":[],"sha":"15f2c4ca178be2ad69715d19ad947d18e7fe06c1"},{"commit":{"message":"Trival: Header format error"},"files":[],"sha":"bb4a4dfb5738a482d31837073e5006439185bcb4"},{"commit":{"message":"8279906: [lworld] Javac tolerates synchronized methods in value\/primitive records\n\nReviewed-by: sadayapalam"},"files":[],"sha":"e82f5f100824e325d7f58ea3d82bf47496671610"},{"commit":{"message":"8280006: [lworld] Compiler interface uses wrong class loader when looking up field type\n\nReviewed-by: fparain"},"files":[],"sha":"ab46c224d70c4e605cdd648e5654ead28df33eed"},{"commit":{"message":"8280164: [lworld] Generate Preload attribute to enumerate value classes encountered"},"files":[{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java"}],"sha":"ab748ddcd4a30337db343f720ac379e00b265170"},{"commit":{"message":"8279656: [lworld] Javac diagnostic compiler.err.primitive.class.must.not.implement.cloneable not valid anymore\n\nReviewed-by: sadayapalam"},"files":[],"sha":"01bd664ee6f20936d927fa57d4f1f812dc5441ad"},{"commit":{"message":"Implement code generation support for value classes\n\nReviewed-by: fparain"},"files":[],"sha":"e785b5ac19caf8f4d38147969955f7e9f6bbb24c"},{"commit":{"message":"8279912: [lworld] The test jdk\/java\/lang\/instrument\/valhalla\/RedefinePrimitive.java has started failing\n\nReviewed-by: fparain"},"files":[],"sha":"39c9e52c33aee884a3b14b2e5a43f712df723a37"},{"commit":{"message":"8279901: [lworld] Javac should verify\/ensure that a Functional interface implements neither IdentityObject nor ValueObject"},"files":[],"sha":"2a9d16110632608acdda6ff7e5fa43cc3379da1c"},{"commit":{"message":"8279838: [lworld] PrimitiveObject is dead, long live ValueObject\n\nReviewed-by: rriggs, fparain"},"files":[],"sha":"d94e0371546bb062f63ff69eea0a9d4fa89abe20"},{"commit":{"message":"8279624: [lworld] interpreter should avoid value copies in withfield when possible\n\nReviewed-by: dsimms"},"files":[],"sha":"3444c29dbd7049c630ebd9f566737708550d3db3"},{"commit":{"message":"8279853: [lworld] Multiple issues with speculative type at checkcast"},"files":[],"sha":"677e325a8abf9af1e4095de0e2a3f12b097ceda3"},{"commit":{"message":"8279672: [lworld] Implement semantic checks for value classes"},"files":[],"sha":"bfa2f474ce2e936ca0d0eb9aadb242ab61a33ad2"},{"commit":{"message":"8279368: [lworld] Add parser support for declaration of value classes"},"files":[{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"063c1c4d2d3543b86ea21704436e9d43aecc73ea"},{"commit":{"message":"8279428: [lworld] Revalue ACC_PRIMITIVE to be 0x800 to align with draft JVMS\n\nReviewed-by: thartmann, fparain, rriggs"},"files":[],"sha":"d555db6ccd4d548380dcdde63db09460c157fe7a"},{"commit":{"message":"8279431: [lworld] Withdraw all support for ref-default classes"},"files":[{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java"}],"sha":"021839b798ccb65fca660fe86c2f6e6f07d94bb0"},{"commit":{"message":"8279377: [lworld] Javac Parser still has stale code supporting nullable projection types from a previous era"},"files":[],"sha":"8692aefa5ca3cb3dcd55dfa7f6d96c94f07ab813"},{"commit":{"message":"8274800: [lworld] Primitive classes can't be retransformed\n\nReviewed-by: fparain, sspitsyn"},"files":[],"sha":"5ac15a15e265e4770c8e13c4dfe7ddf760dd0a9f"},{"commit":{"message":"8278352: [lworld] nmethod assembly snippet in hs_err file misses method name and parameters"},"files":[{"filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java"}],"sha":"e49b8508781b3f34e5a62141575dad0ca3798491"},{"commit":{"message":"8278350: [lworld] Compiler test failures after merge with mainline"},"files":[],"sha":"4bbbdaa8da4d4f92a7a63594b8f66c95420a6b84"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+25'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"caf5e5a9daedebcb35a913cad218672f065393a7"},{"commit":{"message":"8277570: [lworld] Pre-allocated instance should be created during class initialization\n\nReviewed-by: dsimms, amenkov"},"files":[],"sha":"b9afd2a05794e747e664bf7b8a0e97573289b96c"},{"commit":{"message":"8274973: [lworld] compiler\/c2\/irTests\/TestPostParseCallDevirtualization.java fails with valhalla\n\nReviewed-by: thartmann"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"d7f31ef2ef8fc0903e0e9c422d4b71de0db099fc"},{"commit":{"message":"8277057: [lworld] array code needs some name cleanup\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"3b8813c796cf92f6d400a7146404a28a8d8beab0"},{"commit":{"message":"8277062: [lworld] C2 compilation fails with \"not drained yet\" assert"},"files":[],"sha":"2c5bec487b1b0402ae2942264cac59c97f7936eb"},{"commit":{"message":"8276812: [lworld] [lw3] JVM_ACC_FIELD_INLINED flag creates a conflict with an existing flag\n\nReviewed-by: mchung"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"}],"sha":"935c40ece1cc15083ac55f4472dcb6834c9017fa"},{"commit":{"message":"8273715: [lworld] C2 compilation fails with \"missed optimization opportunity\""},"files":[],"sha":"62c36b3541fe52fcffce20905970b49b62064053"},{"commit":{"message":"8276538: [lworld] [AArch64] LIR_Assembler::emit_profile_inline_type temporary register conflict\n\nReviewed-by: fparain, thartmann"},"files":[],"sha":"4f0791fce8ea81d891a48aef779de5dd3514f50e"},{"commit":{"message":"8276656: [lworld] merge JEP 416: reimplement core reflection with method handles"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"37f0096919a3417e2d94b12e5823f598c86282a0"},{"commit":{"message":"8276612: [lworld] runtime\/valhalla\/inlinetypes\/InlineTypeArray.java crashes with \" memory leak: allocating without ResourceMark\""},"files":[],"sha":"b71ad8dbaa3f90b4371f09499b3d2dbf7b530353"},{"commit":{"message":"8276187: [lworld] [lw3] Handling of pre-loaded fields is inefficient\n\nReviewed-by: dsimms"},"files":[],"sha":"01e9411ff7dc8baf00a982e543997be3b7474ed3"},{"commit":{"message":"8275606: [lworld] ClassInitializationFailuresTest triggers assert with -XX:-UseTLAB\n\nReviewed-by: dsimms"},"files":[],"sha":"90c62595e82f2fc10f4f9294e563f7612543c749"},{"commit":{"message":"8276051: [lworld] Indeterministic GC behavior in runtime\/valhalla\/inlinetypes\/InlineOops.java"},"files":[],"sha":"f2a163cce04af3a3763aacaf8a79af877f77240e"},{"commit":{"message":"8275825: [lworld] Unnecessary buffering because trivial accessor methods are not C2 compiled"},"files":[],"sha":"9c886f310d94a66c3bc481a6484ecee4b8274e65"},{"commit":{"message":"8275824: [lworld] C2 generates unused code (klass ptr check) when oop value of scalarized return is not used"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"e7ddeb2f540750908f0712d297fe079429600df9"},{"commit":{"message":"8275797: [lworld] Scalar replacement fails with ShouldNotReachHere() due to unexpected load type"},"files":[],"sha":"600ecaf588aa67df241d07c88964b417c0a6a772"},{"commit":{"message":"8275583: [lworld] C2 fails to scalarize inline types in safepoint debug info in rare cases"},"files":[],"sha":"3354fc048ce0395c6ab512263313d8fb18583b22"},{"commit":{"message":"8272448: [lworld] C2 compilation fails with \"Bad graph detected in build_loop_late\""},"files":[],"sha":"c61edd5fec596bccec8dbb1f9a0614ab28ea062a"},{"commit":{"message":"8274950: [lworld] LoadNode::Identity optimization should not skip casts"},"files":[],"sha":"df020e0183e5edc546af2135510b68bef364a514"},{"commit":{"message":"8275195: [lworld] Revisit use of TypePtr::meet_aryptr() after merge\n\nReviewed-by: thartmann"},"files":[],"sha":"31bbb950e3a9084d21e7abbbadf0089f8df2ed8b"},{"commit":{"message":"8274972: [lworld] TestLWorld.test151() fails with IR verification errors\n\nReviewed-by: thartmann"},"files":[],"sha":"715b8330bb4d3ad533123aaf8e01777e4b4d01c6"},{"commit":{"message":"8275331: [lworld] TestArrays.java fails IR verification on aarch64"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"0868f38696faeaab87ac8d65dc5d6ca76c384ebe"},{"commit":{"message":"8273594: [lworld] JITs need to properly handle static inline type field with unloaded type\n\nReviewed-by: fparain"},"files":[],"sha":"902a15773118364db4ea38c2cc9c5f93f49c1394"},{"commit":{"message":"8275276: [lworld] C2 compilation fails with assert \"adr_type for memory phis only\""},"files":[],"sha":"cff488b15374144d959865e7a58244fea2dd9c92"},{"commit":{"message":"8275220: [lworld] Various compiler code cleanups and refactoring"},"files":[],"sha":"68265657bf1901965fafba3c258d39d202e1941a"},{"commit":{"message":"8274131: [lworld] [aarch64] ClassInitializationFailuresTest.java stop: klass not initialized\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"7de67f1ea57a7eed5f99467ea3d52841c1c3f466"},{"commit":{"message":"Merge jdk\n\nMerge jdk-18+18"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"cb080234f25f77f24c67d5f62b89a7b0908bf097"},{"commit":{"message":"8274792: [lworld] Final fields should be flattened\n\nReviewed-by: thartmann"},"files":[],"sha":"3f5d92fb5f0d35a33d9448bc703e11a64d5ca4e6"},{"commit":{"message":"8273360: [lworld] Invoking a reflection-generated constructor for primitive class gives InstantiationError\n\nReviewed-by: mchung"},"files":[],"sha":"13035717c97321939a8e152db98ba15f4268a93c"},{"commit":{"message":"8273018: [lworld] Property annotation propagation to <init> lacks in primitive records\n8273202: [lworld] MethodParameters are not generated for factories for primitive records\n\nReviewed-by: sadayapalam"},"files":[],"sha":"2688bf6e922eb042b36c4ae6f566f3d3b869fba4"},{"commit":{"message":"Adjust problem list for initial aarch64 testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"a5cf51953659f720a2ff79ea1648611ff6a3bd7d"},{"commit":{"message":"Fix header format for build setup"},"files":[],"sha":"c64b1608329276efe5c2823a8347a81317b1509f"},{"commit":{"message":"8273650: [lworld] Interpreter fails with fatal error: DEBUG MESSAGE: klass not initialized\n\nReviewed-by: dsimms, thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"8bed69aaca316c2646b052a1acc465afc79faf95"},{"commit":{"message":"8270477: [lworld] bytecode testing API does not emit Q type descriptors\n\nReviewed-by: mchung"},"files":[],"sha":"e075eaf3078a95904eaab48d5600be76ddde7816"},{"commit":{"message":"8267697: [lworld] [lw3] VM crashes during heap dump if Java heap contains flat arrays"},"files":[{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"0c0c9e176e3be05ae46a0f8f1722aff879c8d197"},{"commit":{"message":"8273554: [lworld] Runtime tests should not explicitly set -Xint\/-Xcomp\n\nReviewed-by: fparain"},"files":[],"sha":"3111124930c34bab1bd38907ecc32c82557bc019"},{"commit":{"message":"8273323: [lworld] Fix post-parse call devirtualization with inline type receiver\n\nReviewed-by: vlivanov"},"files":[],"sha":"252b04bf128e982b7d620952a6373bfae2170093"},{"commit":{"message":"8267665: [lworld] Scalarization of nullable inline types"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"59fc2db496a0ba7fe3e737f7a998c28f2715efb3"},{"commit":{"message":"[lworld] Removed TestNativeClone.java from ProblemList now that 8270098 is fixed"},"files":[],"sha":"45b63633cc2cf5e40f8182927b8930805458f643"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+12'"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"994f6cfe5a81873adc13c52cabc335da42647d5d"},{"commit":{"message":"8272760: [lworld] Aarch64 part of JDK-8272753\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"}],"sha":"0bfc6205480c52ca8edff01ef6e3483857aee349"},{"commit":{"message":"8271583: [lworld] primitive records can't be reference favoring\n\nReviewed-by: sadayapalam"},"files":[],"sha":"a74a1ceeff957e3832f9104790aee9f566c15dad"},{"commit":{"message":"8272306: [lworld] Fix incorrectly merged code in classListParser.cpp\n\nReviewed-by: dsimms"},"files":[],"sha":"dd0a9ebed9b42b6649f628a6c9b63dac28ffc876"},{"commit":{"message":"8272793: [lworld] Test CustomClassListDump.java fails with Pattern \"CustomLoadee id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\" not found in classlist"},"files":[],"sha":"7553793769d50844a89b1607c623435f5a713944"},{"commit":{"message":"8272753: [lworld] \"Invalid frame size\" assert in frame::repair_sender_sp"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"aaa7401c49e87f9790c2ebf21e72198b2dafcd9d"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+11'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"55f8d9eb5d182a9104e7d133d03f93b94cfd5b28"},{"commit":{"message":"8272566: [lworld] [AArch64] G1 write barrier slow path needs to save more registers\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"b0219dc830456e44c1dece77c98661a72e80e8d9"},{"commit":{"message":"8272397: [lworld] Move ValueBootstrapMethods to java.lang.runtime\n\nReviewed-by: fparain, rriggs"},"files":[],"sha":"9c2af854deb759d4b7879191d7ff5807bf679e32"},{"commit":{"message":"8271556: [lworld] java.lang.BootstrapMethodError in .equals() for primitive record\n\nReviewed-by: rriggs"},"files":[],"sha":"ad20c66f6664b89a0bf0ef2177d91739fdb0d014"},{"commit":{"message":"8272400: [lworld] serviceability\/sa\/CDSJMapClstats.java fails: No suitable match for type of address\n\nReviewed-by: fparain"},"files":[],"sha":"9d05484027b9d1c525c194f40c22fb8d0eac07ff"},{"commit":{"message":"8272511: [lworld] Disable PhaseIdealLoop::try_sink_out_of_loop until optimization is stable in mainline"},"files":[],"sha":"96f20529e9a0f9e16a5ba54d571a073b81b9aae6"},{"commit":{"message":"8272290: [lworld] Disable CDS if InlineTypePassFieldsAsArgs has changed\n\nReviewed-by: mchung, fparain"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"a5516c19ad4973eebc1f0c38a6b48d067413a0a4"},{"commit":{"message":"8272307: [lworld] [AArch64] TestCallingConventionC1 test63 and test64 get incorrect result\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"}],"sha":"f85b10beff2404c370b175b1cd01bf209b5f3388"},{"commit":{"message":"8272041: [lworld] CDS heap dump fails with primitive objects\n\nReviewed-by: fparain, mchung"},"files":[],"sha":"a8994ba4ef126ce92311b340b82a112d276decb3"},{"commit":{"message":"8271924: [lworld] Crashes in ZBarrierSetRuntime::load_barrier_on_oop_array"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"14723f912ca0d9f6a27e7db8851061cb115359d0"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+9'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"bdaa4af02bccfd527bd19fbc3049685be4fdfc6d"},{"commit":{"message":"8271710: [lworld] Unsafe compareAndSet\/Exchange C2 intrinsics should support inline types"},"files":[],"sha":"dcfafdb4c88fdc8e55679a9ea86459be182c31e1"},{"commit":{"message":"8271528: [lworld] [TESTBUG] Several C2 IR tests fail on AArch64\n\nReviewed-by: chagedorn, thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"e13315abf6f7dc0f5172798762b9ea7eb203d8a2"},{"commit":{"message":"8271234: [lworld] InlineTypeBaseNode::merge_with fails with assert(i < _cnt)"},"files":[],"sha":"709cb06ff55eda70dd941e7f7f7d48c5900277fd"},{"commit":{"message":"8264340: [lworld] [AArch64] TestLWorld.java assertion failure in OopFlow::build_oop_map\n\nReviewed-by: thartmann"},"files":[],"sha":"ca9a0bcd9dbc9024fd632180adce00aa91c45637"},{"commit":{"message":"8271405: [lworld] Redo test\/jdk\/java\/lang\/invoke\/VarHandles changes for JDK-8269956"},"files":[],"sha":"9fe230452505ad7a49da8216f06c0196426eeada"},{"commit":{"message":"8271536: [lworld] VerifyError in hotspot\/jtreg\/runtime\/classFileParserBug\/NameAndTypeSig.java\n\nReviewed-by: fparain"},"files":[],"sha":"ecca7a000cc9aa7a18f512b00d2d371f8f944de7"},{"commit":{"message":"8271508: [lworld] disallow primitive classes with super_class of 0\n\nReviewed-by: dsimms"},"files":[],"sha":"44784e4cdfcf3156c33b0e62ac6b639ccd8a91b4"},{"commit":{"message":"8271544: [lworld] GraphBuilder::withfield should handle identity class holder"},"files":[],"sha":"bdf27993723b0c9057db9a148a629b034ba3eb08"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+8'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2ca8eba42e826e08439e4575dcbc6de3621c0395"},{"commit":{"message":"8271535: [lworld] TestLWorld fails during IR verification because method is not inlined"},"files":[],"sha":"c8b88f2612427faa2bbe2a74cf830883d33239f7"},{"commit":{"message":"8271531: [lworld] Implicit null check optimization does not hoist constant load input"},"files":[],"sha":"6699537ae0f4d32627c7d7c931071caaa5f0273b"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+7'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"0e3418df579fa7d2c6f56b4064656a8223f362db"},{"commit":{"message":"8271486: [lworld] Memory corruption due to out of bound access in MacroAssembler::move_helper"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"233d7bbb84a874d96e35657ff533d9c5903fbea6"},{"commit":{"message":"8271309: [lworld] FieldModification event: new_value is invalid for Q objects\n\nReviewed-by: fparain"},"files":[],"sha":"128238081fde5ce62aa64061562e20c76843ccf7"},{"commit":{"message":"8271397: [lworld] SIGSEGV in ciKlass::is_subtype_of\n\nReviewed-by: fparain"},"files":[],"sha":"aace1e5c4b4c425b66092c0c67b1000bc1a663e7"},{"commit":{"message":"8271380: [lworld] Intrinsify j.l.Class::asPrimaryType\/asValueType"},"files":[],"sha":"bebb40f5dc00b40f1fcdb68f9cebbd7bb597095d"},{"commit":{"message":"8271389: [lworld] Improve typing of primitiveObject.getClass()"},"files":[],"sha":"227611116c706c13d3f367dd51e9fe231b37aad7"},{"commit":{"message":"8271324: [lworld] java\/foreign\/* tests fail with \"guarantee(sect->end() <= tend) failed: sanity\""},"files":[],"sha":"7ac76624ae0a89d33adb46660025f996883f2798"},{"commit":{"message":"8271330: [lworld] SIGSEGV in MemNode::find_previous_store"},"files":[],"sha":"92f9ea9fa44b7bcf442278adf5d223f29b1f1846"},{"commit":{"message":"8269956: [lworld] javac should generate `ldc LPoint;` for class literal Point.class\n\nReviewed-by: dsimms, thartmann, mchung"},"files":[],"sha":"8c1359afd08b7370ed5436f98924c592e139138e"},{"commit":{"message":"8271229: [lworld] Test serviceability\/sa\/ClhsdbDumpclass.java fails with unexpected end of file\n\nReviewed-by: dsimms"},"files":[],"sha":"702f1baf114ac27a8456415127b349469bd46748"},{"commit":{"message":"[lworld] Problemlist TestNativeClone until 8270098 is fixed"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"865c6b5961d788497e084be1bec345ce2e32ba64"},{"commit":{"message":"8270995: [lworld] G1BarrierSetC2::step_over_gc_barrier asserts with \"bad barrier shape\""},"files":[],"sha":"616023843b10876dcd3b0e3dd49534b6e48b274f"},{"commit":{"message":"8271282: [lworld] C2 compilation fails with \"bad AD file\""},"files":[],"sha":"ae5fc42bd10549a582d9850fd5e306754a298db0"},{"commit":{"message":"[lworld] Remove AOT tests from problem list"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"7d215b664e40bbf2afcf629eb277bc1d71672acb"},{"commit":{"message":"8270357: [lworld] some jtreg tests disabled on AArch64\n\nReviewed-by: thartmann"},"files":[],"sha":"46b88b580baa1dbc25f0477c2f851145f55718a7"},{"commit":{"message":"8271017: [lworld] Implement withfield changes from JDK-8269408 on AArch64\n\nReviewed-by: fparain"},"files":[],"sha":"ad0491ed1c544c2c9485ad40abbbebc6408e8ccf"},{"commit":{"message":"8271154: [lworld] CDS LoaderConstraintsTest fails after injection of IdentityObject\n\nReviewed-by: hseigel"},"files":[],"sha":"8c1129061ccca182eda866e87c5a5693d6c3d622"},{"commit":{"message":"8244231: [lworld] Add support for ref-default and val-default inline classes."},"files":[{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java"}],"sha":"a4066d7a21377c03c04565fe23981d650f777a7b"},{"commit":{"message":"8269756: [lworld] Add tests for invalid withfield operands\n\nReviewed-by: fparain"},"files":[],"sha":"02584ab0cc6bfbaf3cb0ce2f7331e4836996891f"},{"commit":{"message":"8271141: [lworld] Remove unused jvaluetype q member in jvalue"},"files":[],"sha":"01cab820cd8cdbb043276c3aa48774945517e15d"},{"commit":{"message":"8271113: [lworld] java\/lang\/constant\/MethodHandleDescTest.java fails after JDK-8247376"},"files":[],"sha":"64ad8d034e8bad29ee3b1e32db2a312c15bcc229"},{"commit":{"message":"8247376: [lworld] Constant API support for primitive classes"},"files":[],"sha":"6bc5ea9b625958ccf5548a4b87036bbbbe636acd"},{"commit":{"message":"8271025: [lworld] vmTestbase\/jit\/t\/* tests fail after JDK-8237073"},"files":[],"sha":"4d42fe16a063c1391fd6e6ed772ab43c871daf5f"},{"commit":{"message":"8269408: [lworld] Withfield and field resolution update\n\nReviewed-by: dsimms"},"files":[],"sha":"31d3bb0f5f404217061bfbfd8f2909a6d00c0280"},{"commit":{"message":"8268946: [lworld] Re-implement JDK-8266015 after the merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"b45994af571219a5b79e984885913f3db5067caf"},{"commit":{"message":"8237073: [lworld] Need special handling of jlO constructor invocation\n\nReviewed-by: thartmann, hseigel, fparain, mchung"},"files":[],"sha":"4609bad519f36beaa5dbc940b798ddf0f4e05274"},{"commit":{"message":"8268945: [lworld] Re-implement JDK-8267151 after merge"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"b6e783698b0734fc784ea5b5a2aa2d673a50362d"},{"commit":{"message":"8270896: [lworld] C2 compilation fails with \"Meet Not Symmetric\""},"files":[],"sha":"9b5ae0aa6e006a254fcd478976fd33c94073c875"},{"commit":{"message":"8270350: [lworld] GeneratedMethodAccessor contains incorrect cast\n\nReviewed-by: hseigel"},"files":[],"sha":"6d0ecdf384c261c5501f52a1359c0703069b1981"},{"commit":{"message":"8263024: Convert Valhalla tests using the old framework to the new framework\n\nReviewed-by: thartmann, chagedorn"},"files":[],"sha":"aa84c4ed383b6266fbdb3fddd3aded1771613dfb"},{"commit":{"message":"8270316: [lworld] enable -Xcomp run in test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java"},"files":[],"sha":"c207165b8606d1b4505f52be6362681d61a9fc7e"},{"commit":{"message":"8269536: Fix verifier withfield test"},"files":[],"sha":"7f972be914a97bd29585ae00d49409660f273053"},{"commit":{"message":"[lworld] Re-enable testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"1e464b3c4e09880a2db6dc1d1790ac7e6dd9ba0e"},{"commit":{"message":"8267932: [lworld] JIT support for the L\/Q model (step 2)"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"}],"sha":"20d81328513f8a1f6e418cf3b2471fc996ad44e5"},{"commit":{"message":"8269578: [lworld] fix AArch64 build after JDK-8267824\n\nReviewed-by: fparain, shade"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"}],"sha":"37ea410358921ff5f0cc124a0c1b3a09e34d67e4"},{"commit":{"message":"8269792: [lworld] Duplicate\/redundant CONSTANT_Class_info entry in constant pool"},"files":[],"sha":"b3b7fb2bf96b40fd4636a699e150b8ab5c2d8610"},{"commit":{"message":"8269274: [lworld] Withfield instruction fails to verify when operand stack contains LPrimitiveClass;\n\nReviewed-by: fparain"},"files":[],"sha":"b62a66e379fda00a5ba4622da7661c89b380ecdf"},{"commit":{"message":"8268021: [lworld] [AArch64] fix support for InlineTypeReturnedAsFields"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"21090e0447e66f527cb80265ac0418a655f862be"},{"commit":{"message":"Adjust testing\n\nReviewed-by: shade"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"bfd6f2ca1ed66289423cb4746abe77ce472daa59"},{"commit":{"message":"8269279: [lworld] 8269231 causes build failures\n\nReviewed-by: shade"},"files":[],"sha":"2b8e9670688bb85da7c3c81b6822ecd50ef0a395"},{"commit":{"message":"8269231: Fix 32-bit Valhalla (Zero) builds\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"f2538f48e64fe6f7870e237fd529000d0ececf9b"},{"commit":{"message":"8269172: Add java.util.Objects.newIdentity method\n\nReviewed-by: mchung"},"files":[],"sha":"bb1071183ffdce1c8ed4ca09790437d8543df831"},{"commit":{"message":"8269095: Fix Valhalla Zero build failures\n\nReviewed-by: dsimms"},"files":[],"sha":"936d430d38c8e5f596a8b00ecfc648ee7199fe04"},{"commit":{"message":"8269084: [lworld] runtime\/cds tests need to be migrated to the unified class file scheme"},"files":[],"sha":"b73a5c211434a7f68ca8e0831714184224e73324"},{"commit":{"message":"8269023: [lworld] L\/Q<type> support\n\nCo-authored-by: Frederic Parain <fparain@openjdk.org>\nCo-authored-by: Tobias Hartmann <thartmann@openjdk.org>\nCo-authored-by: Mandy Chung <mchung@openjdk.org>\nCo-authored-by: Srikanth Adayapalam <sadayapalam@openjdk.org>"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"3c399d9f7f36903e4c2583c16b0080e01181114a"},{"commit":{"message":"8267824: [lworld] Lots of lingering references to inline\/value types in Javac code base"},"files":[{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"}],"sha":"fab7d7a13a257b386372b19de3aceb67542b30ba"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+2'"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"85af6b560efc65b40fd0ec43e16ae7e27a563518"},{"commit":{"message":"8267821: [lworld] Javac's handling of `primitive' modifier is unlike the handling of other restricted identifiers"},"files":[],"sha":"0a85431493a483c4596e4d578be494724daa1382"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-18+1'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"00034f17830f05ed04c92b3857971c74e06cf26b"},{"commit":{"message":"8268671: [lworld] Wrong code generated for PrimitiveClass.ref.default"},"files":[],"sha":"6215bc53c00e4b6274dddfee6e8085563d82c5fd"},{"commit":{"message":"8267910: [lworld] Javac fails to implicitly type abstract classes as implementing IdentityObject"},"files":[],"sha":"b3b74d9db732a6dd7bf28bc8492e5fb9d7b2c32a"},{"commit":{"message":"8267984: [lworld] The fix for JDK-8267918 incorrectly precludes synchronization of variables of TypeVariable type"},"files":[],"sha":"d9bd2ae00e8bf23d8ec40cfba24b91da5a847465"},{"commit":{"message":"8267791: [lworld][lw3] Support compiler blackholes for inline types\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"f931661b00c7d2fb88fd791a92b574f06cb5bf4e"},{"commit":{"message":"8267923: [lworld] Javac's implementation differs from JEP401 in a few matters.\n8267918: [lworld] Javac tolerates synchronizing on a primitive reference type\n8267907: [lworld] Withdraw support for the experimental option -XDallowValueMemberCycles\n8267843: [lworld] Double diagnostics when primitive class instance is passed around before being fully initialized\n8267841: [lworld] A primitive class that implements Cloneable is tolerated by javac\n8267835: [lworld] Javac tolerates vacuous chaining to super constructor from primitive class constructor\n8267965: [lworld] Javac disallows calls to super.{hashCode(), equals(), toString()} on a primitive instance receiver"},"files":[],"sha":"f1b32691431219c4d4861da296a1f33fb1bb8b01"},{"commit":{"message":"8267818: [lworld] [AArch64] Shenandoah barrier set build warnings and register conflict\n\nReviewed-by: fparain"},"files":[],"sha":"44cb67ea3457e7359a3c055a08a4105bbd068564"},{"commit":{"message":"8266890: [lworld] [AArch64] add support for InlineTypePassFieldsAsArgs\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"08715901f7463dc5bf77fc76ab33958c4de4e0bf"},{"commit":{"message":"8267710: [lworld][lw3] Hook AlwaysAtomicAccesses to primitive classes atomicity rules\n\nReviewed-by: fparain"},"files":[],"sha":"0f1c33c725e4baa23c1d90029301553a1fde38db"},{"commit":{"message":"8267698: [lworld] [lw3] runtime\\exceptionMsgs\\NullPointerException\\NullPointerExceptionTest.java test fails because of new error message"},"files":[],"sha":"25983c72163bc23e5001d6f023100ed59acbf770"},{"commit":{"message":"8267559: [lworld] [lw3] NPE thrown when attempting to write null to a null-free array has incorrect error message\n\nReviewed-by: dsimms"},"files":[],"sha":"340ecece1b7058ae5766d063fb73cb4483b8a4ee"},{"commit":{"message":"8267672: [lworld] A couple of cleanups to Unified class file generation scheme"},"files":[],"sha":"7e2f202253cac45c066e3280947a944a37806505"},{"commit":{"message":"8267542: [lworld] [lqagain] javac emits useless checkcast when accessing fields through the reference projection"},"files":[],"sha":"e150bd9b14bd6f22987aedc2ecbd8552c90dc0e2"},{"commit":{"message":"8266466: [lworld] Enhance javac to consume unified primitive class files generated under the option -XDunifiedValRefClass"},"files":[],"sha":"f9806a412e9440e3bf025f6421049dcdfb39e64d"},{"commit":{"message":"8267503: [lworld] [lw3] NPE message thrown by checkcast is incorrect\n\nReviewed-by: dsimms"},"files":[],"sha":"ae4ce74eb7de87cc57ebf869187484d757573ef6"},{"commit":{"message":"8267428: Several features lack the EnableValhalla guard"},"files":[],"sha":"13e7d4a35c6d27128f03bba724cf4c8d93dd68cd"},{"commit":{"message":"8266710: [lworld] tools\/javac\/valhalla\/lworld-values\/EnhancedForLoopTest.java fails after merge"},"files":[],"sha":"c8d7c8260921ccb2b2e72dcc6cc04144ff7649fc"},{"commit":{"message":"8266712: [lworld] compiler\/loopstripmining\/DeadNodesInOuterLoopAtLoopCloning.java fails after merge"},"files":[],"sha":"e2b66fcea64bac04460c2dc02d4f48e1f8b4fe81"},{"commit":{"message":"8266709: [lworld] compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java fails after merge"},"files":[],"sha":"716b530e0527a7de27a6719c3d9c68a6242001e8"},{"commit":{"message":"8266586: [lworld] [lw3] Remove experimental support for primitive classes in JPDA\n\nReviewed-by: dsimms"},"files":[],"sha":"ab997be25794f650e4a22fc9b5499f18bb0b61cb"},{"commit":{"message":"Merge jdk\n\nMerge jdk at 20210505"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"65578e15eb494f3dbfc0cc45e2671ad45df9cafa"},{"commit":{"message":"8266582: [lworld] [lw3] C1 should have a flag to control use of delayed reads of flattened fields\n\nReviewed-by: dsimms, thartmann"},"files":[],"sha":"b7478179e4f96ffd82b9b5e0d7f807e25fb2769e"},{"commit":{"message":"8265973: [lworld] C2 compilation fails due to infinite loop in PhaseIterGVN::optimize"},"files":[],"sha":"f43fafc7d81f3d34f6e971765dbadae41ae5c393"},{"commit":{"message":"8265719: [lworld] CDS tests fail after the merge with master"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"74dbd64e4577489843b992f43ae1f8104762c328"},{"commit":{"message":"8265725: [lworld] Fix code in synchronizer.cpp after the merge"},"files":[{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"b8712b3ad61bfee2cb87d6b99b890913408da017"},{"commit":{"message":"8265720: [lworld] RedefineLeak.java is still problem listed"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"d77a0d4cdd91d97f4d9fa7114a7da3fc83040056"},{"commit":{"message":"8266361: [lworld] [lw3] Experimental JNI APIs to access flattened arrays should be removed\n\nReviewed-by: lfoltan"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"}],"sha":"c01d10b2a0d81aa9381e89f8cd2a52afee9fab86"},{"commit":{"message":"8266324: [lworld] [lw3] Component type of arrays of primitive objects incorrectly loaded at link time\n\nReviewed-by: hseigel, lfoltan"},"files":[],"sha":"93c4160f4c038eb2d7ed4712253a16b3b65413f2"},{"commit":{"message":"8265423: [lworld] Provide experimental support for generating a single class file per primitive class"},"files":[],"sha":"17b12ac7e3169beff5fb7b0caa561d391a94c455"},{"commit":{"message":"8266086: [lworld][lw3] C1 produces incorrect code when GlobalValueNumbering is used\n\nReviewed-by: thartmann"},"files":[],"sha":"a7ab3bb259501864500e5648b5a44c740e800ef0"},{"commit":{"message":"8265726: [lworld] C2 compilation fails with assert \"uses must be dominated by definitions\""},"files":[],"sha":"8dc4430df6f0c71c85f194a436262494355b347a"},{"commit":{"message":"8265376: Prepare for javac change to do the member translation as described in SoV\n\nReviewed-by: rriggs"},"files":[],"sha":"b65c2b1eb982098694edf5d03f030da1aed1d51d"},{"commit":{"message":"8265748: [lworld] C2 compilation fails with \"Not a Long\" assert during matching"},"files":[],"sha":"9e9e95316d9ba7e1c908e3c34332438d82ec1558"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"55029d869c32d778ada5c495e60bedafa45d943d"},{"commit":{"message":"8265615: [lworld] docs-jdk-api-javadoc target fails with un-escaped angle bracket"},"files":[],"sha":"983744f3b3579207ef8e35d7348bc58f70b76508"},{"commit":{"message":"8264897: [lworld] C2: Use BarrierSetC2::obj_allocate to buffer inline type in PhaseMacroExpand::expand_mh_intrinsic_return\n\nReviewed-by: thartmann"},"files":[],"sha":"feedec1c77100e22acbd0deef50c901ea6bf61a3"},{"commit":{"message":"8265184: [lworld] [AArch64] Broken fast class init barrier for static calls in c2i adapter\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"301de8d1f9cdbce72a5d950cf114cedf8a66da30"},{"commit":{"message":"8264414: [lworld] [AArch64] TestBufferTearing.java fails with C1\n\nReviewed-by: thartmann, fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"}],"sha":"2e6c276ac466aed46c0e60f3808ab49d14dc5d2b"},{"commit":{"message":"8265118: [lworld] C1 should optimize inline type checkcasts\n\nReviewed-by: fparain"},"files":[],"sha":"e9c78ce4fcfd01361c35883e0d68f9ae5a80d079"},{"commit":{"message":"8264895: [lworld] assert(!InstanceKlass::cast(receiver_klass)->is_not_initialized()) failed: receiver_klass must be initialized\n\nReviewed-by: fparain"},"files":[],"sha":"4f889591c03f25680a3c93620b77e071b999b353"},{"commit":{"message":"8264977: [lworld] A primitive class field by name val confuses javac"},"files":[],"sha":"571322eaf9f688f20ba3ba0d90b22c8ce0ce72fa"},{"commit":{"message":"8264978: [lworld] Various small code cleanups"},"files":[],"sha":"f3950adba5b2a1c0e146855f7a4b7e16e57859e8"},{"commit":{"message":"8244227: [lworld] Explore an implementation where the reference projection and value projection types are backed by a single class symbol\n\nReviewed-by: mcimadamore"},"files":[],"sha":"c68ce892ca267e9b93ebfd3b693cfe4cb55b8c70"},{"commit":{"message":"8264085: [lworld] C2 compilation fails with assert \"inline type should be loaded\""},"files":[],"sha":"f816f2944d99e21250d696d2398474f2aae9661b"},{"commit":{"message":"8264586: [lworld] C2 compilation fails due to infinite loop in PhaseIterGVN::optimize"},"files":[],"sha":"937f9b340683cee80e8e3441d0acb7fe8d78632d"},{"commit":{"message":"8264216: [lworld] unknown.Class.default gives misleading compilation error\n\nReviewed-by: sadayapalam"},"files":[],"sha":"28a4ec0249fd86fe17f2b816c6f5f8eed31abfeb"},{"commit":{"message":"8263441: [lworld] TestUnloadedInlineTypeField fails due to unexpected compilation level"},"files":[],"sha":"83d849f4e18715d39d74cc003cbb756b57293b8d"},{"commit":{"message":"8262831: [lworld] C2 compilation fails with assert \"should be addp but is Phi\"\n\nReviewed-by: thartmann"},"files":[],"sha":"226abe294c81312fff267caa3091ac788893fef4"},{"commit":{"message":"8263900: [lworld] Make .default a separate node type in the parser.\n\nReviewed-by: sadayapalam"},"files":[],"sha":"91c49e4fa89ee795081ac1e1ac01dbbdebc58bd4"},{"commit":{"message":"8263568: [lworld] Fix residual reference to 'value'\n\nReviewed-by: rriggs, sadayapalam"},"files":[],"sha":"94c281e2c2e4ec8aeb83f4ecd4c4189b1e6dc67f"},{"commit":{"message":"8258038: [AARCH64] [lworld] Fix inline type implementation\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"ff70e7d8259e9126a232c347a7f4dad86d9dc5f3"},{"commit":{"message":"8263566: [lworld] Skip generate_return_value_stubs when InlineTypeReturnedAsFields is disabled\n\nReviewed-by: thartmann"},"files":[],"sha":"683bd428afa00aeb2f8e69fef028673004d3ae86"},{"commit":{"message":"8263440: [lworld] C2 compilation fails with \"Error mixing types: byte and inlinetype[1]:{byte}\""},"files":[],"sha":"d23b64402c69a257ddb8e417405da0605d75ba99"},{"commit":{"message":"8262287: [lworld] C2 compilation fails with assert \"should have been removed from the graph\"\n\nReviewed-by: thartmann"},"files":[],"sha":"c2c4b2f7fd094828060ff53bc4d9af68392a6b29"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+13'"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"c04dc73c1c401b816ea662d4d21335ed0472267a"},{"commit":{"message":"8263067: [lworld] Improve buffer instance allocation in MacroAssembler::store_inline_type_fields_to_buf\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"d3001a61b67e8fe94328f45b87bedfb4ffc7ea31"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+12'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"a061ea0ab4ee53c3e6077c4ec02d6a2b11fa93ab"},{"commit":{"message":"8262863: [lworld] C2 should keep track of the oop even if an inline type is returned as fields"},"files":[],"sha":"7f07f60c885448f5f5402248512c19487c9a758d"},{"commit":{"message":"8262746: [lworld] jcmd VM.class_print_layout crash due to NULL cld name\n\nReviewed-by: fparain"},"files":[],"sha":"6131196eb5da1269d544c69ba5e923b890b1e211"},{"commit":{"message":"8262748: [lworld] print out reason information for Deoptimize instruction\n\nReviewed-by: thartmann"},"files":[],"sha":"6924d180aa81ec7cae09869b813dd40741775383"},{"commit":{"message":"8262747: [lworld] C1 compilation fails when PinAllInstructions is turned on\n\nReviewed-by: thartmann"},"files":[],"sha":"436cfe6138c8820205c9163c0402e990b10bdcad"},{"commit":{"message":"8262308: [lworld] Various small C2 fixes for bugs found by stress testing"},"files":[],"sha":"0dfcc948ea7e14ece823dd1c07ce0c642d67f118"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+11'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"}],"sha":"ab51b601e56897bd33357db2603aa772c86adecf"},{"commit":{"message":"8262104: [lworld] Runtime should automagically have primitive classes implement PrimitiveObject\n\nReviewed-by: fparain"},"files":[],"sha":"b5bf7a90ccaeff2040c860ff5e8a4edf52b135e4"},{"commit":{"message":"8262231: [lworld] C2 compilation fails with assert \"user must call transfer_exceptions_into_jvms\""},"files":[],"sha":"1816db371d9d333b337228d7436d91a3b3e150cd"},{"commit":{"message":"8262129: [lworld] C2 compilation fails with assert \"can not use dead node\""},"files":[],"sha":"5ac8ba0f9b77f3de62c047c3e0055282beda2084"},{"commit":{"message":"8262128: [lworld] C1's ValueNumbering optimization does not correctly handle delayed accesses\n\nReviewed-by: fparain"},"files":[],"sha":"1c9a7a9a47093b5788a39141a72b414d2934227c"},{"commit":{"message":"8262025: [lworld] C2 should optimize acmp of the same inline type\n\nReviewed-by: dsimms"},"files":[],"sha":"11cda281f3035eb576068f8549fed27b38773575"},{"commit":{"message":"8261782: [lworld] Add support for PrimitiveObject interface"},"files":[],"sha":"f421b939851139ac5a8e575e78d1cec0886617b0"},{"commit":{"message":"8261874: [lworld] Non-flattened array blocks scalarization of inline type"},"files":[],"sha":"e88ff83c8bc527b417a2afb76f02125a198a46bc"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+10'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"e31335fa607994f61538519907c5150e2016513b"},{"commit":{"message":"8261830: [lworld] [test] ArchiveRelocationTest compilation failure\n\nReviewed-by: iklam"},"files":[],"sha":"3899e114a8f63d7b22886f63eecc78492861a05a"},{"commit":{"message":"8255045: [lworld] LoadNode::Value() use of markWord::prototype() may strip type bits"},"files":[],"sha":"b9d9ca463af7aa626975b02a6e1fdecef7b3d090"},{"commit":{"message":"8261751: [lworld] Fix lingering references to inline\/value types"},"files":[],"sha":"9a601e0d57630690f79511139d8520af360c3d53"},{"commit":{"message":"8261647: [lworld] Missing default initialization of non-flattened field of empty inline type"},"files":[],"sha":"d4ce0d4e5554a2158640d3cf3cfa1d8eb596ef0e"},{"commit":{"message":"8261721: [lworld] Javac messages still refer to inline types"},"files":[],"sha":"dad7d191970fcf6869b58ec725d5bb6226619ac5"},{"commit":{"message":"8261156: [lworld] Re-enable C1 testing after mainline issues are fixed"},"files":[],"sha":"9e577c0e7ced89aa38014b7a24428d887a26ea0e"},{"commit":{"message":"8261631: [lworld] Fatal error in C1 compiled code due to unexpected klass"},"files":[],"sha":"4d953ffa0e170039d7edfabb86c4b54cca8c488d"},{"commit":{"message":"8261633: [lworld] TestLWorld::test10 fails IR verification"},"files":[],"sha":"f1d50a1a06703fda4fa5d304053d62780f051647"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+9'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"ac814eac07ab0a71dabd2af172fba8e64dffd800"},{"commit":{"message":"8241894: [lworld] crash in ZGC running InlineOops.java#id3\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"84c3e324726fc08dfad4d2bc214e7943b60133d0"},{"commit":{"message":"8261439: [lworld] update use of \"inline class\" to \"primitive class\" in java\/lang\/invoke and com\/sun\/jdi\/ tests"},"files":[],"sha":"3d47537a235f27dde3b6dce7d820dc1a21ad10ca"},{"commit":{"message":"8261393: [lworld] Adopt `primitive' as the modifier in declaration of identity free classes in lieu of `inline`"},"files":[{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"693282f34942df07527e249f971dadc8cad5de54"},{"commit":{"message":"8261021: [lworld] valhalla\/valuetypes\/LambdaConversion.java fails Illegal class name \"QLambdaConversion$Pointer;\"\n\nReviewed-by: dsimms, rriggs, mchung"},"files":[],"sha":"b2c84c7467748f4b1c87126a81085883ae92e013"},{"commit":{"message":"8261019: [lworld] valhalla\/valuetypes\/QTypeDescriptorTest.java \"Illegal class name \"QLine;\" in class file $Proxy5\"\n\nReviewed-by: mchung"},"files":[],"sha":"4768ea2063fa5acf3296a447884c510a7747f180"},{"commit":{"message":"8261264: [lworld] runtime\/valhalla\/inlinetypes tests fail to compile\n\nReviewed-by: rriggs"},"files":[],"sha":"c4f63d286149e52e27eb6ed21b9d437237d9b598"},{"commit":{"message":"8260606: Update Valhalla core-libs naming for methods related to primitive classes\n\nReviewed-by: mchung"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"5f1e8d97bd1608cae1f5bc69a03fb7727b90e9b6"},{"commit":{"message":"8261226: [lworld] Array access profiling should be disabled at compilation level 1 and 2"},"files":[],"sha":"ddfba612d49609214fe9d6aad7c02de80ce516d1"},{"commit":{"message":"8261037: [lworld] Assert during C2 compilation due to inconsistent JVMState at safepoint"},"files":[],"sha":"ce486c327f9d5fb69cbf02fa9e0da1075bcad0d0"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-17+8'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"33dc4fb9804d5d301bb68f824e819dcf596a1add"},{"commit":{"message":"8260363: [lworld] C2 compilation fails with assert(n->Opcode() != Op_Phi) failed: cannot match\n\nReviewed-by: thartmann"},"files":[],"sha":"fbb8a6bdf878d2c370a0e78b04a5a5736f2eb765"},{"commit":{"message":"Merge jdk\n\nMerge to 20210119"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8569088689c17b404ed62368e5f667a6aad4e75e"},{"commit":{"message":"[lworld] code cleanup reverting some old leftover change"},"files":[],"sha":"81e6a5af488474f84674080d0f09c3813b8deb2e"},{"commit":{"message":"[lworld] Field::get should return default value instead of null on non-flattened inline field\n\nReviewed-by: rriggs"},"files":[],"sha":"a2e8c6b2747beec4a794550b2745c9ca9ee5eb46"},{"commit":{"message":"8260375: [lworld] ValueTearing fails with -XX:FlatArrayElementMaxSize=0 -XX:InlineFieldMaxFlatSize=0\n\nReviewed-by: thartmann"},"files":[],"sha":"a5d6ed3f80ddcfe20220e4ac92e09446bcaa5bb4"},{"commit":{"message":"Remove unused field from Method\n\nReviewed-by: hseigel, lfoltan"},"files":[],"sha":"2f35fb728b0937478f67bf4579821460ab2e1841"},{"commit":{"message":"8260283: [lworld] C1's EliminateFieldAccess optimization fails with \"wrong types\"\n\nReviewed-by: fparain"},"files":[],"sha":"6d8a8cc4ff9756e2c583ba5042e35c0d3693849e"},{"commit":{"message":"8260225: [lworld] C1's delayed load indexed optimization sets incorrect type\n\nReviewed-by: fparain"},"files":[],"sha":"61bdc451fb82483d2a8d04701ff3c7ab66a08324"},{"commit":{"message":"8260034: [lworld] C1 compilation fails with assert \"should not be optimized out\""},"files":[],"sha":"607c71f6bcc6da97478c83fdad646020faa7d44f"},{"commit":{"message":"8257846: [lworld] Separate compilation failure of generic inline class"},"files":[],"sha":"bc6af253ede83bac6b6809927a56e8093baa2082"},{"commit":{"message":"8259804: Field.setAccessible should not allow changing fields of inline classes\n\nReviewed-by: mchung, chegar"},"files":[],"sha":"f5fb93c4ee6d83813ffae6ae87bbede7b49e9274"},{"commit":{"message":"8259556: [lworld] Various C2 crashes with -XX:-ScalarizeInlineTypes"},"files":[],"sha":"6e3dc5571fd705aa9f739241fe91297e1b43a5ad"},{"commit":{"message":"8259230: [lworld] Several crashes with C2 stress options"},"files":[],"sha":"40e13c5348547a3dadbc8a2f180b1d29d03e7967"},{"commit":{"message":"8258480: [lworld] Adapter creation asserts with -XX:+VerifyAdapterSharing"},"files":[],"sha":"bfa3dd4b4421b2883d4dbe983e953a7eadc7db85"},{"commit":{"message":"8258412: [lworld] TestArrays::test73 fails due to unexpected result"},"files":[],"sha":"56ddef2afb77ba8eca0936565ac08e350045f9a4"},{"commit":{"message":"8252024: [lworld] Lock ordering issue when printing nmethod labels"},"files":[],"sha":"34232ad1f268d9b149250b8ee38bcb2b62e6556b"},{"commit":{"message":"8228634: [lworld] ciField::will_link() returns incorrect result for the withfield bytecode\n\nReviewed-by: fparain"},"files":[],"sha":"67f86bdb3a803f7fc14e77cb2e3df9b88c9f44ad"},{"commit":{"message":"8258026: [lworld] Endless deoptimization at defaultvalue due to unresolved klass"},"files":[],"sha":"1d85945f15e3f2b57ca3d858193947b7b29a50b7"},{"commit":{"message":"8257965: [lworld] C2 compilation fails with assert(unc->peek_monitor_obj() == obj) failed: wrong monitor"},"files":[],"sha":"6d1ca782fcfc505b52be737e0ad40dff8602854c"},{"commit":{"message":"8257579: [lworld] C2 compilation fails because ret_addr_offset() is not within emitted code"},"files":[],"sha":"1a7dcb4eb655170a09549ef56bcf3ecfd1b062ed"},{"commit":{"message":"8257832: [lworld] C2 compilation fails with assert(_base == AryPtr) failed: Not an array pointer"},"files":[],"sha":"718168967f9e4f847cf8fd75f9abf0fa72805b06"},{"commit":{"message":"8256330: [lworld] Dead inline type nodes are not reclaimed assertions"},"files":[],"sha":"0d4353e301e2985a2e8b3feff11793001ae0a539"},{"commit":{"message":"8257773: [lworld] fix compiler replay for new profile data\n\nReviewed-by: thartmann"},"files":[],"sha":"19c23ff54fde7cde2ec3a81366c453f99b746ec7"},{"commit":{"message":"8257674: [lworld] C1's substitutability check does not respect UseCompressedClassPointers"},"files":[],"sha":"330f2f2924e3ecf56df442d4b079f20db728d4a7"},{"commit":{"message":"8257657: [lworld] TestLWorld and TestNullableInlineTypes fail during IR verification"},"files":[],"sha":"8408e305587bfdc41e4855d9979ca9da91a0c2c0"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+27'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2e71ef663558d903b8c038b9f49f0bde003ee0dc"},{"commit":{"message":"Remove deprecated options from tests\n\nReviewed-by: thartmann, lfoltan"},"files":[],"sha":"c08bc913d23e7a666bfd73257b7e758e0bb50fe3"},{"commit":{"message":"8231500: [lworld] Merge the experimental bytecode API"},"files":[],"sha":"972a751873c29c8f9a8cea89d0e94bdffba02d8d"},{"commit":{"message":"8257422: [lworld] Problems with scalarized inline type return and incremental inlining"},"files":[],"sha":"8680152416550cf26a263ba48dc19cfe26bd77bf"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+26'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8efeb68ef0594c2c7c20bc2e45c112d6ef623b2b"},{"commit":{"message":"[lworld] Missed disabling testcase that does not pack well with  -XX:ForceNonTearable"},"files":[],"sha":"1abd0379634de35301d1a6d0c7efba8e9eeda1d2"},{"commit":{"message":"8257446: [lworld] VM flag PrintInlineLayout doesn't work anymore\n\nReviewed-by: hseigel"},"files":[],"sha":"7a8c405c85d14adf8fabe34264b389751460619c"},{"commit":{"message":"8257166: [lworld] CCP fails to optimize FlatArrayCheckNode"},"files":[],"sha":"41ee0c8da696b7dc23adec8b11bb437a58e1c8dd"},{"commit":{"message":"8251966: [lworld] TestArrays.java fails with -XX:+ExpandSubTypeCheckAtParseTime"},"files":[],"sha":"c2b5f11cf2ce37f4dace345c962171a4de773dda"},{"commit":{"message":"8257154: [lworld] AndLNode::Identity optimization does not handle top input"},"files":[],"sha":"89dde2a958bdea7049e0e528ed532de9430de9b8"},{"commit":{"message":"8256929: [lworld] Fails to compile with --with-debug-level=optimized"},"files":[],"sha":"9108c1242f5a1ccaa13848db0772330f9ab4725e"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+25'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"0e48aeb496257b66afa21cf1067206b7fcf6de6f"},{"commit":{"message":"8256481: [lworld] C2 fails to eliminate GC barriers when replacing inline type buffer allocation"},"files":[],"sha":"39c775ffd7cacc9b5cd401e477a7b2151bc687bf"},{"commit":{"message":"8255995: templateTable_x86.cpp (TemplateTable::if_acmp) not always do correct null check.\n\nReviewed-by: fparain, thartmann"},"files":[],"sha":"e9217dad98d10d313ad710e25e4e1a2cb9d4bc6e"},{"commit":{"message":"8238369: [lworld] Incorrect layout of inline type in flattened array.\n\nReviewed-by: fparain"},"files":[],"sha":"cc1f08e177213b091cf3a141ffa935a8bcf8872f"},{"commit":{"message":"Disable further BiasedLocking tests"},"files":[],"sha":"928c29eea766684d328554832b32c02d3a0c7706"},{"commit":{"message":"8255522: [lworld] References to biased pattern remain in markWord::is_unlocked()\n\nReviewed-by: fparain, skuksenko"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"a3fb148558731c7d1ff734e20a9b9d4dc7c63220"},{"commit":{"message":"8256400: [lworld] C2 compilation fails with assert(addp->is_AddP() && addp->outcnt() > 0) failed: Don't process dead nodes"},"files":[],"sha":"e9724e55acea069d4e278a8561ed3109f22650b6"},{"commit":{"message":"8256391: [lworld] C2 compilation fails with assert(EnableValhalla) failed: should only be used for inline types"},"files":[],"sha":"dfa9e45cb612173041b3617ce7e5bf5d9a65f1a2"},{"commit":{"message":"8256329: [lworld] C2 compilation fails with assert(!t->is_flat() && !t->is_not_flat()) failed: Should have been optimized out"},"files":[],"sha":"1c3bb00e55b824d3bc1d7730274e8a0f9fac3f66"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+24'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"74e40a562ee333e0bab88cfc6e6a1d03f90bdcdc"},{"commit":{"message":"8255046: [lworld] JIT should make use of array layout encoding in markWord\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"1b1aefaabd59b3dd98593c9af9b4a101f47f95d3"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+23'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"a833bd80ae8396bd70ec5957b60a75b47e85aa48"},{"commit":{"message":"GH workflow syntax"},"files":[],"sha":"a133d8fb4b121f7104231e7e38d871449897fe2d"},{"commit":{"message":"GitHub actions ignore main project branches"},"files":[],"sha":"1dbcefcb5d049656fc0991d557ec3395109f4905"},{"commit":{"message":"8255727: [lworld] Withdraw support for @java.lang.ValueBased"},"files":[],"sha":"25a3ae8e32f6708dc7e5f58d51af746a8b6e2746"},{"commit":{"message":"8255600: [lworld] C2 compilation fails with assert: modified node was not processed by IGVN.transform_old()"},"files":[],"sha":"2b18bce379b3e830e59819d6a2a984f1f9122583"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+22'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"7e616ce39c936cfb51c10d24f0b78aa2248ad37c"},{"commit":{"message":"8255541: [lworld] Improve array layout checks in C2 compiled code"},"files":[],"sha":"756943d5f37df8071f416ab0237a25ec801ffd9a"},{"commit":{"message":"Remove 32-bit builds from GH actions"},"files":[],"sha":"4c7d99c6a0df61c3ad60a2b151f2289a44bf3fb9"},{"commit":{"message":"8255130: [lworld] Adjust github actions"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"a15b665f9550947a8478bd65af33855af3915e86"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"fd02c47763c40d8a7c37e3ad58824d591a3a83fb"},{"commit":{"message":"8255230: [lworld] C2 compilation fails with assert(!inline_alloc) failed: Inline type allocations should not have safepoint uses"},"files":[],"sha":"1e44a3b89c68a0721fdabd8057c620df4e853275"},{"commit":{"message":"8255396: [lworld] locking breaks oopDesc is_flatArray\/is_nullfreeArray type checks\n\nReviewed-by: fparain"},"files":[],"sha":"9b5f54a7ef681dc9b1172ccd2832da578b900f8c"},{"commit":{"message":"8255250: [lworld] Backout patch adding jdk.internal.ValueBased\n\nReviewed-by: mchung"},"files":[],"sha":"d387b29835e866ad86c1207e5602f9415bf9d512"},{"commit":{"message":"8247299: [lworld] Disable UseBiasedLocking by default\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3a7c9fe6c01bf79f1124e0fc3af143be28c49207"},{"commit":{"message":"8254797: [Development] Define & apply annotation jdk.internal.ValueBased"},"files":[],"sha":"3167856153ff48b921ddc8fee5c1bd363d9703c2"},{"commit":{"message":"8255054: Fix test broken by incorrect removal of java.lang.ValueBased"},"files":[],"sha":"28b90dcd7189b87711595458c6232c07ba8d3511"},{"commit":{"message":"8254957: Comparison of ArrayList with int, Integer, PrimitiveInt,..."},"files":[],"sha":"28fb33d2bf4bf15ad6b4945de69355d21d7b396a"},{"commit":{"message":"8254985: [lworld] C2 compilation fails with assert(field_type->is_loaded()) failed: field type must be loaded"},"files":[],"sha":"6be188d8c128e360ee2f576156cb789b0dfe90ec"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+20'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"b9bec068748ccb488a2bccd8714542c89769ca26"},{"commit":{"message":"8254891: [lworld] runtime\/valhalla\/inlinetypes\/UnsafeTest.java fails with flattening disabled\n\nReviewed-by: fparain"},"files":[],"sha":"e8a9d251eb3d99cd2e9721a26498eca36f53ea53"},{"commit":{"message":"8254898: [lworld] TestArrayAccessDeopt fails with RuntimeException: 'Uncommon trap occurred'"},"files":[],"sha":"a89eba3147e633af9105099e942b7ab105b4a4c8"},{"commit":{"message":"8254888: [lworld] Remove dead code from array property checking"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"9b39695b2fe750e416bf3e69b40274f60ce6ab77"},{"commit":{"message":"8254258: [lworld] [lw3] Inline types layout can be optimized\n\nReviewed-by: dsimms"},"files":[],"sha":"85f6d5b6a3f39c93365fef301f9abbe43c969a8f"},{"commit":{"message":"8235914: [lworld] Profile acmp bytecode\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"378279c95e4e725bf666e65cb0d4ff220e3373d6"},{"commit":{"message":"8254326: [lworld] [lw3] Extend definition of empty inline types\n\nReviewed-by: hseigel"},"files":[],"sha":"e8152142e8929af7d207b492798159a487ab3eb1"},{"commit":{"message":"8254174: [lworld] [lw3] C1 should optimize access to array of empty types\n\nReviewed-by: thartmann"},"files":[],"sha":"735bd44d04377be86f12d66b6128deead28f3743"},{"commit":{"message":"8254219: [lworld] Remove reserved entries from the calling convention"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"ea780c9113527bc6cc5d9eab25411eb2da343c5e"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+19'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"cae9a89082e048dd956511418d8c7d8213e7a163"},{"commit":{"message":"8252030: [lworld] Enable UseArrayLoadStoreProfile by default"},"files":[],"sha":"d5519976d4e92e785383d247882287a238407e39"},{"commit":{"message":"8253873: jdi, jvmti, and jdwp tests fail because of unexpected number of interfaces\n\nReviewed-by: fparain"},"files":[],"sha":"644b057b80b716e009f32a9d22ef5dd07e9dd12c"},{"commit":{"message":"8254026: [lworld] Execute compiler unit tests in random order by default"},"files":[],"sha":"157f8c319f0fb6ae9ca1a86c8378f5f95d2c9275"},{"commit":{"message":"8253745: [lworld] C1: Flat inline type array store may write out of bounds"},"files":[],"sha":"f24c2a821dd56ce21d623290dbe101fdb0b25bb6"},{"commit":{"message":"8248220: [lworld] Optimize empty inline types"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"67af0b73f3065477a8f0ef9ad5666b9410e86152"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+18'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"d248d3837c8cce2d5e50ab5bd4b519caeffa9714"},{"commit":{"message":"8253724: [lworld] C1 compilation hits assert: Empty inline type access should be removed\n\nReviewed-by: thartmann"},"files":[],"sha":"c6f85a33929bc2d60a5a0699aa0772640ea9e5a8"},{"commit":{"message":"8253744: [lworld] [lw3] Injected IdentityObject interface should not be hidden by the JVM\n\nCo-authored-by: Daniel Fuchs <dfuchs@openjdk.org>\nReviewed-by: rriggs"},"files":[],"sha":"18d127231875d4071ad616d8efdb24fcfd0290a1"},{"commit":{"message":"8253663: [lworld] [lw3] TestJNIArrays crashes in jni_CreateSubElementSelector\n\nReviewed-by: lfoltan"},"files":[],"sha":"e605c42ecece9a954a640252e2ddbcf7d8cbc01b"},{"commit":{"message":"8253416: [lworld] C1: incorrect nestmate access to flattened field if nest-host is not loaded\n\nReviewed-by: fparain"},"files":[],"sha":"268a9ad040f6445996bcb4a5d5320def58592856"},{"commit":{"message":"8253592: [lworld] C2: Additional fixes for handling empty inline types"},"files":[],"sha":"33bdce230cb339442e5e28db233e1b8895fd3555"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+17'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2989eaaa09739182cf3cbd2287a3967b01a2cb2d"},{"commit":{"message":"8253511: [lworld] ClassFileParser does not handle field type mismatch\n\nReviewed-by: hseigel"},"files":[],"sha":"4a26a176d3b9344f9d553ea0a4d009d687380bc4"},{"commit":{"message":"8253181: [lworld] Javac fails to properly handle inline class files with inner classes"},"files":[],"sha":"9fc3d54b457e060596b4bb524c1e64d7f86d80a1"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+16'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"85bd776b15e2d718812055ccf98a0d2d9a7edb16"},{"commit":{"message":"Relax jcheck"},"files":[],"sha":"17a5215d35d0f5a77dabc3f614c28db884025f39"},{"commit":{"message":"8253218: ClassFileParser hits assert(klass->access_flags().is_inline_t…\n\nReviewed-by: fparain"},"files":[],"sha":"4f9c2e2231a449cb915f80dbc429d0e583b49b5b"},{"commit":{"message":"8253143: [lworld] Valhalla microbenchmarks bulk update"},"files":[],"sha":"174dcf50d20057388430e7e0828c27ee05cb3d6c"},{"commit":{"message":"8249887: [lworld] [lw3] Inline types should have a single set of array klasses\n\nReviewed-by: dsimms"},"files":[],"sha":"63076805b3e0fe550849cbcea9b88cb73f354f6e"},{"commit":{"message":"8253113: [lworld] [lw3] C1 should avoid copying element of flattened arrays when reading a sub-element\n\nReviewed-by: thartmann"},"files":[],"sha":"1a52191ca9376db05ca2aa7ba493ad39a622d066"},{"commit":{"message":"8253161: [lworld] C1's substitutability check should use andptr instead of andl for mark word"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"07e2fc53c1407f6e34e2cb147f5d61190b4227d0"},{"commit":{"message":"8253047: [lworld] C2 compilation fails with guarantee(sect->end() <= sect->limit()) failed: sanity"},"files":[],"sha":"74a852385098f1e8e8cb0ecfa29232d589f4dbf5"},{"commit":{"message":"8253006: [lworld] Incorrect debug information for fields of scalarized flat array"},"files":[],"sha":"dee85cee6aa780987156ac957033dce40b2a4ea7"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+15'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"819efc104e465a56d698a94d73e6556452356f87"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+14'"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"803d0d34cc2ac0d793da38225174f54f1e1fbe98"},{"commit":{"message":"8252506: [lworld] Multiple issues with C2's arraycopy intrinsic"},"files":[],"sha":"31412b9f2a3409e3814197cfe2c5665e1a2c71a7"},{"commit":{"message":"8252862: [lworld] Accidentally disabled fix for JDK-8252110"},"files":[],"sha":"84fc0a1698cad8ed78e3c0737a19ddc0fa352c1f"},{"commit":{"message":"8252854: [lworld] Buffering in C1 entry can trigger safepoint before nmethod entry barrier has been executed"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"963ed688b7a49c41864164cf9a6e870bac0a999f"},{"commit":{"message":"8252753: [lworld] Merge of jdk-16+12 broke CDS for inline types\n\nimplemented handling of MetaspaceClosure::_internal_pointer_ref\n\nReviewed-by: dsimms"},"files":[],"sha":"9616df9950c48b175a8797aadd310f64bdc7eb77"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+13'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"}],"sha":"40f856832c3a33c37c0be346d283102fbe2c8c4e"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+12'"},"files":[{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"321ea1de04c41c2b9cbff649270a7962edf6f2b8"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+11'"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"e02fecec24c03ffa588cb5fbc8528e2aabf2f47c"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+10'"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"c5eda14eeabd0738e1ac27e253158c017b2fae12"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+9'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"31cc75a5ecf87bff9c1af49670b6eaf7826eaa1e"},{"commit":{"message":"8252650: [lworld] Merge of jdk-16+8 breaks debug build GC gc\/TestObjectAlignment.java\n\nReviewed-by: hseigel"},"files":[],"sha":"0d8d8e3cc0818880f06997526f6c0b50c617315d"},{"commit":{"message":"8252651: [lworld] Clear the instance klass mirror for inline type"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"aada81b02f8099340e2fefadb076799654bb201a"},{"commit":{"message":"8252633: [lworld] Multiple compiler test failures after merging jdk-16+7"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"86c76d3ae31640ec69bfa46b2739d841a786ee70"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+8'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"f543f7333686f1f1f159a349c3bd9f40d0317f1c"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+7'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8816727ddce07ff5e83d2ee8809768caf1a6fac7"},{"commit":{"message":"8252040: [lworld] Execute compiler unit tests in random order"},"files":[],"sha":"9bde3a446168d1ede6994c5d77c03aa3b2a91867"},{"commit":{"message":"8229897: [lworld] C1 should avoid allocation when reading a field from a flattened field\n\nReviewed-by: thartmann"},"files":[],"sha":"3540dd4d19c728c52f9141341835026e9bb17ce6"},{"commit":{"message":"8252299: [lworld] C2 compilation fails with assert(!use_ReduceInitialCardMarks()) failed: can only happen with card marking"},"files":[],"sha":"54b541094689d6244b95307724f9a9698c10e46d"},{"commit":{"message":"8252061: [lword] Support Object::toString for inline type\n\nReviewed-by: sadayapalam, rriggs"},"files":[],"sha":"acfed88167d4f6228802af8fcffdd54b58817689"},{"commit":{"message":"8244713: [lworld] V.ref class should not inadvertently carry over attributes from V.class"},"files":[],"sha":"bce51c9076ba84e831e6b4797faed7f3806446c3"},{"commit":{"message":"Merge jdk\n\nMerge 'jdk-16+6'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"a8215ec34fba43e06575cefad3e00a403e1618cb"},{"commit":{"message":"8252227: [lworld] Merge of jdk-16+5 broke compiler\/arraycopy\/TestEliminateArrayCopy.java"},"files":[],"sha":"4ab5388ba95b0de489972c2d0729393ef9dd7838"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+5'"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"cd5c75f8ad82cc01620070bfd5f02df01b704825"},{"commit":{"message":"8252111: [lworld] C2 intrinsic needs to handle unsafe access to non-flattened field of constant inline type holder"},"files":[],"sha":"c75f0f146a58e0f55b7ee69aec40ec3403c9da8a"},{"commit":{"message":"8252112: [lworld] Deoptimization fails when trying to re-assign empty inline type elements of a flattened array"},"files":[],"sha":"2d8688f5a0a79c96c2adf05f209d8020750ec9e0"},{"commit":{"message":"8252110: [lworld] C2 compilation crashes with SIGSEGV in AddPNode::Value"},"files":[],"sha":"6f7ee4ffdae34b2427988e65703ccc44d1f8b3dc"},{"commit":{"message":"8252109: [lworld] C2 compilation fails with assert(!has_phi_inputs(region)) failed: already cloned with phis"},"files":[],"sha":"ac68edf66868f9cc0a514ba8e156bcc51158b1b5"},{"commit":{"message":"8251986: [lworld] implement Class::valueType and Class::referenceType in Java\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"}],"sha":"a5aa3a9d262d20caaa58f9306ec6cd02f62d8bbe"},{"commit":{"message":"8250511: [lworld] C2 compilation crashes in PhaseIdealLoop::spinup\n\nReviewed-by: thartmann"},"files":[],"sha":"2bde31fdb2b26c87ec2207f2c223d7fd58adfb37"},{"commit":{"message":"8250764: [lworld] Merge JDK-8247697 in from mainline\n\nReviewed-by: thartmann"},"files":[],"sha":"b697e163c8e92cad39f4815e2a1c5c5eac15143b"},{"commit":{"message":"8251442: [lworld] C2 compilation fails with assert(value->bottom_type()->higher_equal(_type))"},"files":[],"sha":"5d1350ef32eba34258f5e700d2637c8a0a95dd99"},{"commit":{"message":"8251940: [lworld] Incorrect Signature attribute in class file."},"files":[],"sha":"248fdec9dccbff9fadf68669a400b743d05f3621"},{"commit":{"message":"8244232: [lworld] Improve javadoc comments for various methods dealing with projection types"},"files":[],"sha":"212077b167af8987ac2ca2bc74a6d53ab7d90412"},{"commit":{"message":"8244513: [lworld] Typing of conditional expressions involving values."},"files":[],"sha":"f72ec3c37f69709a473989d91df302144242a4f7"},{"commit":{"message":"8251504: [lworld] Support empty inline classes without -XDallowEmptyValues"},"files":[],"sha":"77af8092c0fc5309b6b19aff458610d49f683c5b"},{"commit":{"message":"8251842: rename ACC_VALUE to ACC_INLINE\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"2c019fdf352d5dc98902afc76bfb79e3450d56e0"},{"commit":{"message":"8251398: [lworld] TestCallingConvention::test36 spuriously fails due to incorrect field value"},"files":[],"sha":"2455c8ede34224fc5b66be222c95e6cfafbd630c"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+4'"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f0a8efc27f6bf022f6a47ce79e899e5847d3d54e"},{"commit":{"message":"Merge jdk\n\nMerge tag 'jdk-16+3', notes:\n\n* Tooks \"ours\" only for: 8247697 Remove delayed_forbidden dead code in C2, needs reworking\n* Trusted final, now includes inline type fields"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"93cde00746cfbb9f96ffea8618aa1ce3d3f49e54"},{"commit":{"message":"8244233: [lworld] Nested types are not handled properly across projections"},"files":[],"sha":"dda358bb3773a1886769ea7f8b1328f2382ae3ec"},{"commit":{"message":"8244975: [lworld] Investigate if VM can implement Object::hashCode by calling ValueBootstrapMethods for inline types\n\nReviewed-by: sadayapalam, mchung"},"files":[{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"f891f43347203c68f4a14d464278574bf36f25fe"},{"commit":{"message":"[lworld] clean up VarHandle support for inline type"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"67a019a56d4770bad226e400c228181330400c02"},{"commit":{"message":"8251046: [lworld] [lw3] C1 should avoid heap allocations in withfield when possible\n\nReviewed-by: thartmann"},"files":[],"sha":"59d8f6b4607d676bd7310857c38a3b6918aa3cc4"},{"commit":{"message":"8251107: [lworld] test lworld-values\/TopInterfaceNegativeTest.java is failing"},"files":[],"sha":"660aa19eda768ef50cb2586b888d86491affc769"},{"commit":{"message":"8251116: [lworld] test lworld-values\/ValuesAsRefs.java failing."},"files":[],"sha":"349b22a30a16ba4a354c1a8407e4c392d2fde592"},{"commit":{"message":"8250877: [lworld] Remove special acmp handling for isSubstitutable0 method in the JIT"},"files":[],"sha":"f7f6929652eabfed8757c1c6930529ce994ba9cd"},{"commit":{"message":"8242453: [lworld] C2 compilation fails with assert 'correct memory chain'"},"files":[],"sha":"448aaa0a3563fb0170410f273203b7498e6a3a92"},{"commit":{"message":"8250962: [lworld] C2 should not replace redundant scalar replaceable allocations"},"files":[],"sha":"ef1a221fb9d2b18a907b98da83744c8ccc681a81"},{"commit":{"message":"8244315: [lworld] The hierarchy between V$ref and V$val must be sealed\n\nReviewed-by: sadayapalam"},"files":[],"sha":"e473d9d4d8e385f248b95d66efbb50f36c4a4745"},{"commit":{"message":"8244314: [lworld] V.ref and V.val are supposed to be nest mates\n\nReviewed-by: sadayapalam"},"files":[],"sha":"5305fbdda57b53b92bfa08d68cf5ff4b2a099ebe"},{"commit":{"message":"8221323: [lworld] Javac should support class literals for projection types."},"files":[],"sha":"72b3046c3e8b4c53847fe9adf2c68f8a59fe23ae"},{"commit":{"message":"8250997: [lworld] Javac should not allow constructor reference expression to mention projection types"},"files":[],"sha":"e40d6bacf6a3bc7e2aff56c2e955b2263a3d5347"},{"commit":{"message":"8250234: [lworld] [lw3] jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java fails with C1\n\nReviewed-by: thartmann"},"files":[],"sha":"ae1759a540b04d6fd928ceaedd427768bbe3e2e7"},{"commit":{"message":"8250951: [lworld] Escape analysis fails due to oop access to flat array"},"files":[],"sha":"6e6d0c7153b94f3fbc8bb749b33b68fa3d42863c"},{"commit":{"message":"8222784: [lworld] Remove stale compiler option: -XDallowGenericsOverValues"},"files":[],"sha":"8895fbcc4c6f68f63a6abacf886b7d08d585ea5a"},{"commit":{"message":"8250881: [lworld] Crash in AOT code with -XX:-EnableValhalla"},"files":[],"sha":"cecd9c5ba08d12a6cac7264f2c13ef7f258c2e4a"},{"commit":{"message":"8250823: [lworld] Various cleanups and small fixes in JIT code"},"files":[],"sha":"9feaf0597335e745a61e4d6ee2a967dba7727bc9"},{"commit":{"message":"rename valhalla runtime tests to 'inline'\n\nReviewed-by: fparain"},"files":[],"sha":"66005d4d317e15b34a68af75e46d9dd0baffb1f5"},{"commit":{"message":"8250664: [lworld] Rename 'value type' to 'inline type'\n\nReviewed-by: hseigel"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"2fa48054e60dffa8c18add91760d75314c6c58bf"},{"commit":{"message":"rename load_value_type_fields_in_regs and store_value_type_fields_to_buf"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"c5fb63d06785745c2b56289f2c4f4d6a1a5067c1"},{"commit":{"message":"8249886: Rename -XX: InlineArrayElemMaxFlat* options\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"22265ecb412d857a1fbc51f7635295bc089bd6e5"},{"commit":{"message":"8220710: [lworld] Improve propagation of nullability information"},"files":[],"sha":"93fb98e8b442a3abdab01f391efb3ecade62c656"},{"commit":{"message":"8249869: [lworld] Remove LW2 specific code from the JIT"},"files":[],"sha":"22dd0da1454a60e8e8b34d1edcb51d7de63ed380"},{"commit":{"message":"8234364: [lworld] ValueBootstrapMethods::isSubstitutable0 should do null check and type check"},"files":[],"sha":"d5187c507d59077938f6285bc80639338d29239c"},{"commit":{"message":"Remove unused type"},"files":[],"sha":"2d0df70a6d86c536cb2d397ff049b1084f00e2ff"},{"commit":{"message":"jdk-8249555 Rename valueArray* source files to flatArray*\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"9f56cb6a3d81beffe5d293fc4ae366d597ab89a3"},{"commit":{"message":"More renaming from value type to inline type\n\nReviewed-by: hseigel"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"2cd5c0ef8abed7b5ff6538184cb829c79e342817"},{"commit":{"message":"8249660: TestJNIArrays.java fails when run with -Xcheck:jni\n\nReviewed-by: fparain"},"files":[],"sha":"1c8718afe3fe12b203cf31333e640cc1d2a61f99"},{"commit":{"message":"8249613: [lworld] Use initialization free allocation when copying a value\n\nReviewed-by: hseigel"},"files":[],"sha":"068a27a79c98f6d84516a0c9093d01d5b3f7e287"},{"commit":{"message":"8249257: Rename ValueKlass to InlineKlass\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"39d2ef3f2618d7450843a75073cf36f83bb73220"},{"commit":{"message":"8249396: JNI function IsSameObject should apply the substitutability test for inline types\n\nReviewed-by: hseigel"},"files":[],"sha":"80115902cdc42a6a4e8d8ccc7929aab07dc2ed63"},{"commit":{"message":"8249244: Rename T_VALUETYPE to T_INLINE_TYPE\n\nReviewed-by: mchung, fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"9c25fc78440ea374eb6b8bf6108c23e66772ec8a"},{"commit":{"message":"8247663: [lworld] LambdaMetaFactory should allow an inline value projection type to convert to its reference projection type\n\nReviewed-by: rriggs"},"files":[],"sha":"83d6a2281a95fcda0cad5a45850da7dcdb7ade58"},{"commit":{"message":"8249091: [asm] Updates to ASM to support inline opcodes default and withfield\n\nReviewed-by: mchung"},"files":[],"sha":"701567c094ea4b88cf71a79b9567fd7b1569cad8"},{"commit":{"message":"8242402: multianewarray is missing checks on the bottom class\n\nReviewed-by: hseigel"},"files":[],"sha":"e9c44351df2604298f8c52f3bbb4d3b7c4784b96"},{"commit":{"message":"8248163: jdb crashes when invoking \"lock\" command on inline class\n\nReviewed-by: hseigel"},"files":[],"sha":"f5f65c5ef51406437ce9ac9e579f75776f61472b"},{"commit":{"message":"8248662: [lworld][lw3] vmTestbase\/nsk\/jdwp\/ReferenceType\/Interfaces\/interfaces001\/TestDescription.java fails after 8245216"},"files":[],"sha":"f2063f8a36426f041aac3b87f50fbf09ea745c2a"},{"commit":{"message":"8248251: don't all java.lang.IdentityObject to be redefined or retrans…\n\nReviewed-by: fparain"},"files":[],"sha":"925f78ddd149f0a4b7da4df24adf1ee276c27735"},{"commit":{"message":"8248330: [lworld] [lw3] test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetImplementedInterfaces\/getintrf007\/TestDescription.java fails because of IdentityObject\n\nReviewed-by: hseigel"},"files":[],"sha":"d39d420797a46671f723e645e357f83dbdf5aeb8"},{"commit":{"message":"changes based on late comments concerning 8247795 fix\n\nReviewed-by: mchung"},"files":[],"sha":"9ba8bbe151f08445260c08362510304615b6d993"},{"commit":{"message":"[lworld] temporary fix to serviceability HiddenClassSigTest test until JDK-8247491 fixes it properly"},"files":[],"sha":"806fff417e2adc296428ec4e7b41fff6cdfe1e15"},{"commit":{"message":"8248003: [lworld] [lw3] VM crashes when classes with inline type fields are loaded from CDS archive"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"3f8947bb2a077f1c558df95bf72cc287006e6d7b"},{"commit":{"message":"8247923: [lworld] Empty inline types break calling convention optimization"},"files":[],"sha":"45400b1ebd69691011223596543bce6acd9f1366"},{"commit":{"message":"8248167: [lworld] [lw3] JdbInlineTypesTest fails\n\nReviewed-by: hseigel"},"files":[],"sha":"d615a338282f4df92b63e36378992095440113e0"},{"commit":{"message":"8247795: allow factory methods for inline types to return j.l.Obje…\n\nReviewed-by: fparain"},"files":[],"sha":"e5eb253e426db89440fcec1c4b40ab197eebdf32"},{"commit":{"message":"[lworld] small reflection implementation clean up"},"files":[],"sha":"9cdd26f6c38bbcd4414e0a93b71450ab2a01afde"},{"commit":{"message":"LW3 version string"},"files":[],"sha":"45e20dcccc1d454d80d06a8ad1523edd6d8f168c"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"609aaed38968c7c77bf3d78137887ab4b1dc5fe1"},{"commit":{"message":"Rename klass->is_value() to is_inline_klass(), rename oop->is_value t…\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"cf4c01c095387e533c3989ee4a0b53dc7f1ecf22"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"fdfc4b34dfb02569e4dfef1be124aeb1b1c2bb1e"},{"commit":{"message":"8247746: [lworld] TestNullableArray::test78 fails with ZGC due to incorrect result"},"files":[],"sha":"dc585c25159007719ac6f5892fd084756bfab9ab"},{"commit":{"message":"8247686: [lworld] C2 compilation fails with assert(!is_default(*igvn)) failed: default value type allocation"},"files":[],"sha":"8072069c3685c772cbe65aa682a765d2c6802c7c"},{"commit":{"message":"rename verifier related value-types, rename JVM_SIGNATURE_VALUETYPE, …\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"66c1d4409f5aecf44eaa1b7b34f567f78269d9cd"},{"commit":{"message":"8244561: [lworld] Javac should not allow instantiation of V.ref or V.val"},"files":[],"sha":"55bfd32bf8d9a4d4c4a01a8a59c8de442ded23ad"},{"commit":{"message":"8247664: [lworld] Bogus error message: incompatible types while using separate compilation"},"files":[],"sha":"bb06ed4f5488bd0e912889c1a98a67af5b33fbca"},{"commit":{"message":"8247590: [lworld] JVM_ACC_FIELD_INLINED clashes with ENUM"},"files":[],"sha":"246ac15992e68ff1e20e50563b2eae3a2a721456"},{"commit":{"message":"8247567: [lworld] java.lang.AssertionError: Invalid pool entry"},"files":[],"sha":"ad38a9fa234ee0bb3d7928646af4028ee4ae2b61"},{"commit":{"message":"8247578: [lworld] New inlined JVM internal field access constant in java.base"},"files":[],"sha":"446e392a43cd71aab2259ed4419e9df991b1de99"},{"commit":{"message":"8247357: Flattenable field concept needs some cleanup\n\nReviewed-by: hseigel"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"4d78c6304340a8dbc4a912bb56be7090a31f52f4"},{"commit":{"message":"add WhiteBox support to fix failing test\n\nReviewed-by: fparain"},"files":[],"sha":"be9744da79fa9cc5c4af6285a76cbdeccfe7350a"},{"commit":{"message":"8246603: [lworld] C2 does not scalarize inline types wrapped into non-escaping box objects"},"files":[],"sha":"f187e9dbbafcc6aec516b0cab2a0cb124381c3db"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"eab0f506aa460a1476be35308254ddd40149bb4d"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"f8bcfccf5bab779825feab9b648a88f28b2683cc"},{"commit":{"message":"8247238: [lworld] JIT should trust final fields in inline type buffers"},"files":[],"sha":"0a65690c09301e0a007f499088cc282fe32fa1e1"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"4bca44eb587978a7d25233ff0dcc498123dc08d4"},{"commit":{"message":"8247309: [lworld] C1 crashes when compiling _defaultvalue referencing unresolved inline type"},"files":[],"sha":"8e19481f4433fc81978d4db0ab398ba2d39e8a44"},{"commit":{"message":"[lworld] Incorrect renaming of ValueFieldMaxFlat size in compiler tests"},"files":[],"sha":"fce84c0023bebbd204fbce3b42cde8218bf5576e"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8e35838223e41ce353199c5ca9a1ed15a4d10c76"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2f51c64b6d3639e7d287eb9f0d89b33e261096c7"},{"commit":{"message":"Post-merge adjustment in DirectMethodHandle"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"3123ec300191ed8a9f29285c99587af3fe38822f"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"fc11dfa4d06020cf1c50eac216a9fcc6ce1ed591"},{"commit":{"message":"82467538: [lworld] Merge of jdk-15+21 broke JVMCI testing"},"files":[],"sha":"9f63a0c4dbbcaede627cba2e8ea1aee0b6c9518e"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"6aa1293d80c40259259d45f1b8f9498eef163f02"},{"commit":{"message":"Rename value type -XX options to inline...\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"b0ea24641eda2dd67b483635eb5c519055ce728e"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"195dd2d5a9ff27be06c68e520004fe879dd49848"},{"commit":{"message":"rename variables, etc. from ...value... to ...inline..."},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"1e7ad541967f105ffc87eca1bde616201efbda5c"},{"commit":{"message":"8246014: [lworld] [lw3] serviceability\/sa\/ClhsdbDumpclass.java is failing for a while\n\nReviewed-by: hseigel"},"files":[],"sha":"3dee5f5e5cc7b91ba3b5acec4be941194a50d932"},{"commit":{"message":"8245646: [lworld] LW3 Reduce impact of IdentityObject on metaspace\n\nReviewed-by: dsimms"},"files":[],"sha":"ed7a00c6f70a264a1cd3445f5496b53543f4a8bf"},{"commit":{"message":"8245953: [lworld] Remove array storage property bits clearing from JIT code"},"files":[],"sha":"27e8b6e06f28e6096072d23175af630915af7d22"},{"commit":{"message":"8245809: [lworld] Remove the last traces of arrayStorageProperties\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"}],"sha":"8422fb481d2fb0900cb6e830c5906085b998410a"},{"commit":{"message":"8245584: [lworld] LW3 core reflection update\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java"}],"sha":"9a83d9b61241f5517d46e7d4a078b1245692e39c"},{"commit":{"message":"8245729: [lworld] Adjust JIT code to reference projection changes"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"e895128f832a783b33937e7e317c191b813aa3db"},{"commit":{"message":"8244931: [lworld] Decommission arrayStorageProperties from runtime null free and flat array tests"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"eaf15771b2d533af093b6a0e63ab9825dc0814e2"},{"commit":{"message":"8245216: lworld] The JVM should inject the IdentityObject interface to types which need it\n\nReviewed-by: hseigel"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"ec75333c333fd9fbe0ad553c0ec10d9d30280e4c"},{"commit":{"message":"8245019: lworld] SIGSEGV in BufferBlob::buffered value type due to instruction memory corruption"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"}],"sha":"e8894bd7d8690f8232664ac6eebe2b2045430571"},{"commit":{"message":"8242612: lworld] Javac should not expressly encode the new super interface types in class files\n8237954: [lworld] @ignored tests need to be tweaked and reenabled.\n\nReviewed-by: jlaskey"},"files":[],"sha":"9a5e8f3921ae281fd64fddefdd3417ab3b90406f"},{"commit":{"message":"8244982: lworld] Javac does not compile test\/jdk\/valhalla\/valuetypes\/StreamTest.java anymore\n\nReviewed-by: jlaskey"},"files":[],"sha":"c6b21d17522a929b57c05b4080c901c6ceeee5b3"},{"commit":{"message":"8244563: [lworld] Javac does not allow jlO to be express superclass of inline types."},"files":[],"sha":"c82e6b9815e50ece6f474b86390f85d1e0f9ced8"},{"commit":{"message":"8244796: [lworld] Javac does not compile test\/hotspot\/jtreg\/runtime\/valhalla\/valuetypes\/UnsafeTest.java anymore\n\nReviewed-by: jlaskey"},"files":[],"sha":"122aa795a8e5400b22b6c63d9bfb796e5b8596b1"},{"commit":{"message":"8244934: [lworld] Copyright header format"},"files":[],"sha":"df9b1ac7fdabe55181fdcff1e4e249e117d92f24"},{"commit":{"message":"8244810: [lworld] Decommission arrayStorageProperties from Klass:array_klass() et el"},"files":[{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"2e5a9581372fe6366a45b0c300acba85dc967b09"},{"commit":{"message":"8243317: jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java fails multiple tests"},"files":[],"sha":"f87a1b4194376bc61518974c6015aa46477b2a9e"},{"commit":{"message":"8230082: [lworld] Volatile field declaration in inline class fails with ClassFormatError"},"files":[],"sha":"46a60aeca16b3f91d5190793005891250c7e8bcb"},{"commit":{"message":"8244235: java.lang.NoSuchFieldError: this when initializing an inner class inside an inline type"},"files":[],"sha":"27858b062af228168c6eee7a4d067232dd1fd206"},{"commit":{"message":"8244711: [lworld] Javac needs to tweak checks for interface implementation by an inline type."},"files":[],"sha":"ec1930c03b1f9e03c779e8475ef7b7ea7aa12013"},{"commit":{"message":"8244708: [lworld] CDS tests that bundle inline classes should also bundle reference projection classes.\n\nReviewed-by: dsimms"},"files":[],"sha":"bc0e6478d93b9b1307f65438765691ef52941f35"},{"commit":{"message":"JDK-8243204 add class load time checking of abstract super classes of…\n\nReviewed-by: fparain"},"files":[],"sha":"b00578fa211759b749b2b4af8be0e2b6e8d2b9a0"},{"commit":{"message":"8244559: [lworld] Lambda and parameterized ref of an inline type doesn't work well"},"files":[],"sha":"e586cdbe737261930b0f302312f8881a0e26ae62"},{"commit":{"message":"8244584: Fix hotspot \/ runtime test compile errors after pivoting towards \"lw3\""},"files":[],"sha":"b2f5a1a0da95f22762f81a64bcd992af993441b0"},{"commit":{"message":"8244519: [lworld] C2 compilation fails with 'monitors must always exist for synchronized methods'"},"files":[],"sha":"171da6aa45391a5de78d329318ba1e843618c456"},{"commit":{"message":"8244583: [lworld] TestIntrinsics fails due to unexpected getSuperclass() result"},"files":[],"sha":"5c4f729939da9a288f65fdb021ea57821be09846"},{"commit":{"message":"8244414: [lworld] Migrate Valhalla micro benchmarks suite to not use V? syntax\n\nReviewed-by: mcimadamore"},"files":[],"sha":"72aa43ebe786c5529edf5bec16a9fd92f7d8368e"},{"commit":{"message":"8243625: [lworld] Co-evolve hotspot-compiler tests along with JDK-8237072\n\nReviewed-by: thartmann"},"files":[],"sha":"08bfa8fe76ffd22b1a8afe93b5f221bec624dc4c"},{"commit":{"message":"8243623: [lworld] Syntax and other mechanical changes in langtools tests for JDK-8237072"},"files":[],"sha":"4c2f8bee278599e37b643978a75bc281aa9ef4e4"},{"commit":{"message":"8243626: [lworld] Co-evolve hotspot-runtime tests along with JDK-8237072\n\nReviewed-by: fparain"},"files":[],"sha":"40289cfa4e0f3ee708c9608283d979eaaf6c9ead"},{"commit":{"message":"8243627: [lworld] Co-evolve jdk-valhalla tests along with JDK-8237072\n\nReviewed-by: mchung"},"files":[],"sha":"9ef4318c8ebd9202411310b13d796d6b3b86f8b0"},{"commit":{"message":"8237072: [lworld] Add support for denoting and deriving the reference projection"},"files":[],"sha":"a3a846d7d17b2ea7bd54c7e82e3e97aea602f227"},{"commit":{"message":"8244339: [lworld] JIT support for inline types with abstract class supertypes"},"files":[],"sha":"6742fab881b455f27b39231f465d5ba73b9cd1f6"},{"commit":{"message":"8244092: [lworld] TestC2CCalls segfaults in frame::sender_for_compiled_frame with ZGC"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"750279778cd0d81dfb022f9c5d34a2a5a21bba0e"},{"commit":{"message":"8242900: [lworld] Allow an inline type to declare a superclass that meets specified restrictions"},"files":[],"sha":"21a4dae797e19c56f8b3effe604e4990df54edb7"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"d4828d74696ce3a84aa1a545d34427ecb5931910"},{"commit":{"message":"Merge jdk"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"e2f1a5fac3e3fbed7c80683687f57122c32411c1"},{"commit":{"message":"allow inline classes to have abstract supers\n\nReviewed-by: fparain"},"files":[],"sha":"e4e93d77c81448ef1f752d79fb6320a091cf7e58"},{"commit":{"message":"8242269: [lworld] C2 compilation fails with assert \"meet not symmetric\"\n\nReviewed-by: dsimms, thartmann"},"files":[],"sha":"ff1b435ee9ddcca8f7d3bf8c06881e61efd5954d"},{"commit":{"message":"8242496: [lworld] new and defaultvalue don't perform checks on class to instantiate\n\nReviewed-by: dsimms"},"files":[],"sha":"acffd197fa1749c3e867073cc8ddf6c48b9fcb7d"},{"commit":{"message":"Change exception messages to say 'Inline type' instead of 'Value type'\n\nReviewed-by: fparain"},"files":[],"sha":"aee9550ce333f2fad053d8748aa1be27338bd92f"},{"commit":{"message":"8242443: [lworld] Disabling scalarization fails with assert \"incorrect depth prediction\""},"files":[],"sha":"7fa3ff52b058fd82a2b0fb668b35f4ff7d90b353"},{"commit":{"message":"8242210: [lworld] TestCallingConvention::test36 spuriously fails\n\nReviewed-by: fparain"},"files":[],"sha":"d9f3aaa90c2ef1c41611e1d23e5a1e61762f4262"},{"commit":{"message":"8242457: [lworld] Cherry pick and adjust JDK-8241997 for Valhalla"},"files":[],"sha":"a1c89db7698feefcd579f963eb466b9b775b02e4"},{"commit":{"message":"8242455: [lworld] C1 compilation fails with assert \"should have same type\""},"files":[],"sha":"d87d47db3571d652170ca6b47fb1231a408f1d5e"},{"commit":{"message":"8242454: [lworld] TestLWorld::test63 fails with \"no exception thrown\""},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"}],"sha":"096230398c2cefa398f8e7cfa1c7f0d3a3bf3ea3"},{"commit":{"message":"Remove whitespace\/tabs"},"files":[],"sha":"0c52cfec143d73acca1ea97ecdc4df120f4c7885"},{"commit":{"message":"Merge branch 'lworld' into lworld_merge\n\n# Conflicts:\n#\tsrc\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp\n#\tsrc\/hotspot\/cpu\/x86\/x86_64.ad"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"ae1135cfa65e793a3c3e2e193bcbd0f57b12abc5"},{"commit":{"message":"8242344: [lworld] JDK-8236522 class_list_match_sane() introduced strncpy truncation warnings"},"files":[],"sha":"1aea5d2ecb5d254daaee36d3ea8df5aa6956510d"},{"commit":{"message":"8241764: [lworld] TestC2CCalls fails with SIGSEGV in frame::sender_for_compiled_frame"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"a264ae9a75672223559f483270a5333b24195a22"},{"commit":{"message":"Prototype inline cursors for List"},"files":[],"sha":"d544758b986f909f355611fca3d9fc4034ef245d"},{"commit":{"message":"8235753: [lworld] Handle deoptimization when buffering scalarized inline type args in C1"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"0595ad08114f86b1916a16351e57c9edc94e2945"},{"commit":{"message":"8241918: [lworld] Build failures after JDK-8236522\n\nReviewed-by: dsimms"},"files":[],"sha":"ece2a2d3ce28c78720794d62d1456815f40e1c85"},{"commit":{"message":"8241910: [lworld] C2 crashes due to duplicate storestore barrier added by JDK-8236522"},"files":[],"sha":"2a6ddbd8f4ec94a4d0125d517ab1528ba5a5dd58"},{"commit":{"message":"8236522: NonTearable marker interface for inline classes"},"files":[{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"cab7a5b928940dc5d0e616f15439ad6d546120ed"},{"commit":{"message":"8241533: [lworld] PhaseMacroExpand::migrate_outs should be replaced b…"},"files":[],"sha":"78b0ffda9239b2915b731ba875394d278dd32853"},{"commit":{"message":"Discovered merge issue JDK-8242269"},"files":[],"sha":"ddfee9a78297f5fe075b848d87d1e58a9651222a"},{"commit":{"message":"All done merging master"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f02982411942406459e38024339a7ca6fcbd8ec1"},{"commit":{"message":"Added IdentityObject.newIdentity()"},"files":[],"sha":"0bca2918eeed1df8bc1bc779d8af3f5813a61def"},{"commit":{"message":"8240863: Update .jcheck\/conf for Valhalla lworld branch\n\nReviewed-by: ehelin"},"files":[],"sha":"092f64203e98288d887570f0f99a72fadce93f7c"},{"commit":{"message":"[lworld] Ignore top types from JDK-8237069"},"files":[],"sha":"46b92b4912cbbe71758908d63afdc16d7750d6cb"},{"commit":{"message":"8240313: [lworld] valhalla\/valuetypes\/StaticInitFactoryTest.java NPE after merge"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"22686d804a5e0aca845addab8af0639b9400246f"},{"commit":{"message":"Lworld: Fix for (2 out of 3) test failures resulting from merge"},"files":[],"sha":"fd842ff8a032694d543685a0253a73e9b981badd"},{"commit":{"message":"8240177: [lworld] C2: Use macro nodes for subtype checks"},"files":[],"sha":"33c1f92646b9d102fab1a300fc70cd142211cf23"},{"commit":{"message":"[lworld] Fixed Shenandoah build"},"files":[],"sha":"2451f1045a2df51d74ceee4c3cd4b9803f953fd6"},{"commit":{"message":"8240174: [lworld] C2 compilation fails with -XX:+VerifyGraphEdges"},"files":[],"sha":"9b714c15670e4b480298c26bcdca8f6f234d87f9"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"990b66f0d6a72eeae51bb86d2f40c2be61e57902"},{"commit":{"message":"8239242: [lworld] SIGSEGV in ~BufferBlob::buffered value type"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"0b987a20526cf25f45cb5f17c3dc244015c9b1e5"},{"commit":{"message":"8239877: [lworld] valhalla\/valuetypes\/QTypeDescriptorTest.java fails after merge\n\nReviewed-by: mchung, hseigel"},"files":[],"sha":"245299ea84d6261072faf80ea3240609de59c572"},{"commit":{"message":"Fix field layout option name"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0c59fc89ae4543529f37ce8cc517cf6e23ef48f6"},{"commit":{"message":"Remove irrelevant value types verifier test case\n\nReviewed-by: lfoltan"},"files":[],"sha":"514e84f47d16dacae52d09296454659bf875a327"},{"commit":{"message":"[lworld] CheckGraalIntrinsics.java does not handle inline type specific intrinsics not implemented by Graal"},"files":[],"sha":"bf1b959f9b1b0d841c8f19e9562ec9a4b32c4153"},{"commit":{"message":"[lworld] Fixed JVMCI to support new array profiling method metadata"},"files":[],"sha":"31617dbb1c64dea0b83e939527215b93876c0487"},{"commit":{"message":"[lworld] Make sure ValueTypeNode::remove_redundant_allocations is executed if inline types are buffered"},"files":[],"sha":"ce1b48e74db7116d73daa7b45c752669eb15b4d3"},{"commit":{"message":"[lworld] Removed too strong assert in ValueTypeNode::default_oop"},"files":[],"sha":"3a23336e112ce5266e676e7fd999265ca9631d13"},{"commit":{"message":"[lworld] C2 needs to handle allocation of uninitialized multidim inline type array"},"files":[],"sha":"c1c144ce0901bacb0e1b29859dae75f98d5e05ba"},{"commit":{"message":"[lworld] Cleaned up bad merge in macro.hpp\/cpp"},"files":[],"sha":"c4cc83277543acc8b59f12a519110418136aaf93"},{"commit":{"message":"[lworld] TestLWorld::test92 requires another dummy loop to reliably trigger split if"},"files":[],"sha":"763d8d949d24ce8c29a45d28e6821ff7fd11ab72"},{"commit":{"message":"[lworld] Fixed SigEntry::create_symbol because SignatureStream does not handle signature without return type anymore"},"files":[],"sha":"913efabc576621f513fb9dab8746e34d9e1eba9a"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"dcf79f86a2073dd15bb6ea8433a42d997c24d310"},{"commit":{"message":"8238869: [lworld] C2's slow path allocation does not set the larval bit\n\nReviewed-by: roland"},"files":[],"sha":"7aea3d1bfc51dc038ad8f276d3f7ec77fddebb5a"},{"commit":{"message":"8238780: [lworld] C2: Partially initialized value type buffer might be observed by other thread\n\nReviewed-by: roland"},"files":[],"sha":"217cd1498311997f7d8defd0275d13399a89cffd"},{"commit":{"message":"8238713: [lworld] C2 compiled method triggers infinite number of uncommon traps for interface array store\n\nReviewed-by: roland"},"files":[],"sha":"e5896511c4e7f7806bcf7d3aa7a76f4352c2266e"},{"commit":{"message":"8238948: [lworld] Method resolution does not handle invokespecial with scalarized receiver\n\nReviewed-by: fparain"},"files":[],"sha":"b6ebfe32b57ab707843fbd943248f98eff190282"},{"commit":{"message":"[lworld] Fix an enable layout optimizations"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"21808373b93a412e7c3c0ad99d5411762e973e6f"},{"commit":{"message":"8238895: [lworld] Serial Version UID to ignore IdentityClass interface"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"}],"sha":"98129a24ea1d74b6d51fc208e1f9c31e4b456be2"},{"commit":{"message":"8237066: [lworld] Adjust inline type's interactions with jlO methods per latest spec"},"files":[],"sha":"8c3ef109472b46745baba41d77200deec3fe4ce5"},{"commit":{"message":"8237475: [lworld] C1 should not allocate default inline type"},"files":[],"sha":"81c2046bc39045751d2d836b3f68f091256875d5"},{"commit":{"message":"8238768: [lworld] Update field layout code"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"8862c450eb817b4301a84431d1e53ae00c494232"},{"commit":{"message":"8238449: [lworld] CDS test failures after the introduction of java.lang.IdentityObject"},"files":[],"sha":"3134e7c60617b33f3f0750b24a2c0de88385325a"},{"commit":{"message":"8237067: [lworld] Provide linguistic support to denote default values\n\nReviewed-by: sadayapalam"},"files":[],"sha":"069d8cd993b1197d4efab2c411d7740856eceac5"},{"commit":{"message":"[lworld]: Fix test failure due to stale jasm encoding"},"files":[],"sha":"f6efd05352bf8f7270ff2ac1864806ce33964356"},{"commit":{"message":"[lworld]: Fix test failure due to constant pool overflow"},"files":[],"sha":"230756237e3dc09f3511d7d4a625d6b11d9bd417"},{"commit":{"message":"[lworld]: Clean up reflection related test failures pending resolution of JDK-8237952"},"files":[],"sha":"27ec1c4f62078d470361da1a451ee8cd0bc07df7"},{"commit":{"message":"8237074: [lworld] Compiler should emit a warning if code compares the result of getClass() against the class literal for an interface\n\nReviewed-by: sadayapalam"},"files":[],"sha":"46924b536e94de4469fc43132b6f0c52eeda92cb"},{"commit":{"message":"8237071: [lworld] Totalize System.identityHashCode for inline types"},"files":[],"sha":"29b8e9134ab625f36bac40d1e51321ecd2d5efaf"},{"commit":{"message":"8237955: [lworld] Identity types that have no declaration sites fail to be IdentityObjects"},"files":[],"sha":"a2ad7e6e0f30e5df4bbdb1a21f1938d1faf15a8c"},{"commit":{"message":"8237069: [lworld] Introduce and wire-in the new top interfaces"},"files":[],"sha":"cc79f9bb7239ea81ca4979ede27f8229289d2a41"},{"commit":{"message":"8237057: [lworld] Upgrade lambda proxy classes to class file version 58"},"files":[],"sha":"fe0fed22c563f28dd140855372d2a979149d7471"},{"commit":{"message":"8236854: [lworld] Second JNI extension to access flattened arrays\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"}],"sha":"9c4bdd1ed43235223dcdb1f32057c8a702102cb1"},{"commit":{"message":"8234500: [lworld] Multiple failures with -XX:+DeoptimizeALot\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"02d57a58c0658b9e77c656ce8cea34a1b59d1689"},{"commit":{"message":"8225638: [lworld] Store inline classes in CDS archive"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"6501f7fbcfa7a81ee6fce61660fdbd2414ed5754"},{"commit":{"message":"8230408: [lworld] TestCallingConventionC1.test109 times out"},"files":[],"sha":"6829017fe0e6df777097fad102904b388a268632"},{"commit":{"message":"8235492: Update Prototype HashMap using inline classes"},"files":[],"sha":"ed77d669f34df2bce12f05a31b29bdbc547162e8"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"23045e59b2995352e667ba4bcabddcc38b91b3af"},{"commit":{"message":"8235253: [lworld] TestStressReturnBuffering fails with ZGC"},"files":[],"sha":"eb184bf966669138a29dd8cea5631f43713ce2cf"},{"commit":{"message":"8235254: [lworld] TestNativeClone crashes in PhaseMacroExpand::expand_arraycopy_node() with ZGC"},"files":[],"sha":"7306dcd5c9f6429c0578efeb13c1317254b574a5"},{"commit":{"message":"8235190: [lworld] Add fastpath to access uninitialized inline fields\n\nReviewed-by: dsimms"},"files":[],"sha":"64a479a52669eecbaf27d3074d59499826dc58f3"},{"commit":{"message":"8234633: lworld] Create fast path for aaload\/aastore of inlined values\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"93f2e239556ab5889430796c64c00e02d701b8e9"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"c94364002306695b674d924300e134899c44cacd"},{"commit":{"message":"8234912: [lworld] getfield should use fast path before being quickened\n\nReviewed-by: dsimms"},"files":[],"sha":"ddc162a1e3c84b19f43ad6a5c3ae81c122913991"},{"commit":{"message":"8234632: [lworld] Create fast path for putfield of inlined values\n\nReviewed-by: dsimms"},"files":[],"sha":"1e7ae5bebad962595b8198d5719d76f4eeecd5c1"},{"commit":{"message":"8233200: [lworld] compiler\/runtime\/Test8010927.java fails with fatal error: DEBUG MESSAGE: Verify oop store failed\n\nReviewed-by: fparain"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"1c1ce9a895de936df75f91b13e12a334b6fb9b78"},{"commit":{"message":"8234761: [lworld] JNI extensions to provide direct access to flattened arrays\n\nReviewed-by: dsimms"},"files":[],"sha":"57e114ab2f7b0dd7a3041107adf1f2c07f162d94"},{"commit":{"message":"8234688: [lworld] Supporting volatile semantic for flattenable fields\n\nReviewed-by: dsimms"},"files":[],"sha":"1262780365937c3c2efa6e1d683693a41fede166"},{"commit":{"message":"8234507: [lworld] Macro ASM version of access_value_copy\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"}],"sha":"eb1578a65037cf6dbe3439069810df14a34da062"},{"commit":{"message":"[lworld] Fixed --disable-precompiled-headers build"},"files":[],"sha":"b3c157e49fa6a9158167d8d092323775a6b65dac"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"b7df542734c201d74e48853ea0f600a20b8e38e7"},{"commit":{"message":"8234572: [lworld] aaload\/aastore profiling\n\nReviewed-by: thartmann, fparain"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"755b4e7548ea00e45d4221a2904d1fbb0c941f52"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"9e3f8175af6fe1776c13d236780113a1482b661a"},{"commit":{"message":"8234492: [lworld] Endless loop when reresolving C2 compiled call to isSubstitutable0"},"files":[],"sha":"1b0fcd8ebcbf9b6eee061faebeb19677c9b59c30"},{"commit":{"message":"8234246: [lworld] InterpreterRuntime::is_substitutable fails with guarantee(!HAS_PENDING_EXCEPTION) failed: isSubstitutable() raised exception\n\nReviewed-by: mchung"},"files":[],"sha":"fb7728624bb66be76d6132d3cd8364e6c91da7d4"},{"commit":{"message":"8234108: [lworld] Call site reresolution fails for ValueBootstrapMethods::isSubstitutable0 callee\n\nReviewed-by: dsimms"},"files":[],"sha":"7fde35ec09f383ceeae01682a6fcea36e35eb2b7"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"464b8f6ea6551101d8654671a46008292d4109d3"},{"commit":{"message":"8233076: [lworld] C2 compilation fails in PhaseCFG::insert_anti_dependences"},"files":[],"sha":"3a6160ff1d62c4783f8539406443e2919a96f3c7"},{"commit":{"message":"8233415: [lworld] VM crashes with assert(region != __null) failed: No region for 0x00000005d56dd5f0"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"f00d680e346a7efb36c58114bd4de526e7abbadb"},{"commit":{"message":"8233464: [lworld] C2 compilation fails with assert(t->meet(t0) == t) failed: Not monotonic"},"files":[],"sha":"9eb954ea4b001358972f3312fa29da287eec3dc9"},{"commit":{"message":"8233297: [lworld] runtime\/NMT\/ShutdownTwice.java fails with assert(*_lock >= 0) failed: Can not content exclusive lock"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"}],"sha":"f76e32e8d5d8eb66c6a12ae5df9abfd19a4bb2e0"},{"commit":{"message":"8233130: [lworld] assert(size_in_words <= (julong)max_jint) failed: no overflow"},"files":[],"sha":"6a2e9ccb16e3c865121375a0c1db9a763538770e"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"eabb9daf3f9a80097347f50e3d4bb4b365ab3fb1"},{"commit":{"message":"8231498: [lworld] Inline type use of Access API (compiler barrier support)"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"fff1b9a6cc2210cc159ac86bdb1cadb1169981e2"},{"commit":{"message":"8233124: [lworld] TestBasicFunctionality::test12 fails due to invalid field values after deoptimization"},"files":[],"sha":"481f07fe16c7e1923ff222559f5b45a1fdeafbe1"},{"commit":{"message":"[lworld] Use JVM_SIGNATURE constants"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"}],"sha":"d293ba54a735e6129f191788f56aae6ac637db30"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"082e70219a8ec52f72a9dd4ba121e5ff420e1a6a"},{"commit":{"message":"8211028: jdb \"eval\" should allow to create a new value type instance with specified fields\n\nReviewed-by: dsimms"},"files":[],"sha":"204f83e466639f112ba1141c471d51243cf2d54c"},{"commit":{"message":"8232953: [lworld] TestArrays fails when executed with -XX:+StressArrayCopyMacroNode"},"files":[],"sha":"2e30607be19dc2ab1babbd43dff18b1d89ddfb1d"},{"commit":{"message":"8232785: [lworld] JPDA modifications for inline types should have unit tests\n\nReviewed-by: dsimms"},"files":[],"sha":"59ac08a64251dbb42828de3d1c121211b30b1eab"},{"commit":{"message":"8232656: SEGV in very large arrays of inline classes"},"files":[],"sha":"9aba2ffa1b20bb62c8d9757498d322bbb1e65e18"},{"commit":{"message":"8211026: jdb should not allow to assign null to value type\n\nReviewed-by: mchung"},"files":[],"sha":"33a6eda576a451c22c4f17920cc90e917131a406"},{"commit":{"message":"8211027: jdb \"eval\" should perform substitutability test when applying == to inline types\n\nReviewed-by: dsimms"},"files":[],"sha":"44ef9b826b42e8b6f34ead596fb4b424b2faeaf8"},{"commit":{"message":"8230962: Aarch64 Fix fast class initialization checks after merge\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"1d13ab7129f8831110181f09ee309052fe36f65c"},{"commit":{"message":"Adjust Testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"579379df385a6741b003a5c54f212929a1aa6936"},{"commit":{"message":"8232108: [lworld] Reflective method invocation with scalarized return is not GC safe\n\nReviewed-by: roland"},"files":[],"sha":"b9509727db62cb137f04f64bd1e03293bc2317a2"},{"commit":{"message":"8231561: [lworld] C2 generates inefficient code for acmp\n\nReviewed-by: roland"},"files":[],"sha":"bdd737401980e9b531ae71515f7129f6e6c68f9c"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"09a37afc0cc8df966ff0f6a6af8b31336b3cc505"},{"commit":{"message":"8231961: [lworld] C1 compiled code returns incorrect value for flattened array access\n\nReviewed-by: iklam"},"files":[],"sha":"88ec32c69efc8076805c1cbbf148f780c796d621"},{"commit":{"message":"8232058: Supporting inline types in Java debugger\n\nReviewed-by: dsimms"},"files":[],"sha":"20a4955ba735616fa5606c32636b7dd1b0436ce5"},{"commit":{"message":"Merge"},"files":[],"sha":"d29a146cbe15c60e783ba4e97dfdb7bbb1123c3e"},{"commit":{"message":"8231615: [lworld] TestLWorld::test84\/test87\/test88 fail with TieredCompilation^\n\nReviewed-by: thartmann"},"files":[],"sha":"597833ba60fed8bb52fa0d25a937db57944be893"},{"commit":{"message":"8231613: [lworld] TestLWorld::test92\/test94 fail due to unexpected trap count\n\nReviewed-by: thartmann"},"files":[],"sha":"61fe842c7a1a79613d09a87bcd96756987640c9a"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2981f96a1aa44da408675cc40d1db3316ed1cb95"},{"commit":{"message":"Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f86cf58e16f85262b924209ac02f55adf500d823"},{"commit":{"message":"Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"c5c390090276609216f9e4af4e197b4b84840867"},{"commit":{"message":"8231497: [lworld] Inline type use of Access API (Runtime)\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"135473004be725077508897f90a2b7a7db1e6e93"},{"commit":{"message":"8230915: [lworld] Deoptimization fails with assert(value->type() == T_OBJECT) failed: object element expected\n\nReviewed-by: thartmann"},"files":[],"sha":"366bd3c141c53fa3f1716b88d7a922313a954146"},{"commit":{"message":"[lworld] Excluding two more tests due to 8231615"},"files":[],"sha":"1a1e2fb15446c91439f2511a83b8d4f21a61931f"},{"commit":{"message":"[lworld] Disable C2 IR verification if C1 is tested"},"files":[],"sha":"8267e5b698164acc7eaf85256263ddd9752d90e4"},{"commit":{"message":"8230925: [lworld] Some tests fail with matchCount verification when TieredCompilation is enabled"},"files":[],"sha":"671e3c0ffe92d98d589ff219cb4445aeae403853"},{"commit":{"message":"8231609: [lworld] SIGSEGV in GraphKit::gen_checkcast"},"files":[],"sha":"7f7863bbd3fa74d19b17d5ee6217ae315fa856fc"},{"commit":{"message":"8228622: [lworld] Ineffective codegeneration for flattened arrays checks causes large performance regression on List iteration\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"37c295db0f0451ddb2ff4babba88e8d8549a2241"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"fcdbfa73ab76dc564125147a089053f60c6e1d97"},{"commit":{"message":"8231263: plus\/minus UTF-8 causes compile error\n\nReviewed-by: hseigel"},"files":[],"sha":"96151b3c1e63bf493d1ebe46a46f5155606ebf05"},{"commit":{"message":"8231075: Prototype HashMap implementations using inline classes\n\nJMH protypes\n"},"files":[],"sha":"c706485fd1afffbbb23fb86c0445a1cb94a900d2"},{"commit":{"message":"8231045: [lworld] ValueTypeReturnedAsFields does not work with OSR compiled callee"},"files":[],"sha":"1b973f901c34a6f320932a2bfc85f26cb4bc5003"},{"commit":{"message":"8230912: [lworld] InterpreterRuntime::uninitialized_static_value_field fails with fatal error: An exception should have been thrown above\n\nReviewed-by: dsimms"},"files":[],"sha":"d5c99fddb0779e4eba7c8eb81e02ec2750c17358"},{"commit":{"message":"8231146: Crude heap object size\n\nReviewed-by: mchung, fparain"},"files":[],"sha":"1a7953e514272a15a7685dfc682886fe1a4a1cab"},{"commit":{"message":"8231080: [lworld] Clean up remains of TLVB"},"files":[],"sha":"d912eecc26a680220300b1ed3edc1488fbfae89c"},{"commit":{"message":"8230961: [lworld] valhalla\/valuetypes\/QTypeDescriptorTest.java fails after merge"},"files":[],"sha":"a2180e3abda7116d4356664cc73d2281bf072cf5"},{"commit":{"message":"8230851: Interpreter could avoid calling the runtime for defaultvalue [x86]\n\nReviewed-by: dsamersoff"},"files":[],"sha":"ef34097a1a944015ebc0ecf6c8ed0ed1e69316d6"},{"commit":{"message":"8230959: [lworld] TestSelfArrayCopy fails with assert(node->Opcode() == Op_CastP2X) failed: ConvP2XNode required\n\nReviewed-by:\n"},"files":[],"sha":"9dbb3652d39a643c6515eb3d6966fa8fd73c543f"},{"commit":{"message":"8230960: [lworld] x86: Fix fast class initialization checks after merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"b3bcf0aacb1a0be4ac8028495c9820de79d9d4b4"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"17930484b997e7c35d448d98abbfb65a01244b9c"},{"commit":{"message":"[lworld] added comment about JDK-8230925 failure"},"files":[],"sha":"3c77d3e22003b8ebcfeded5ac57c969a19e15b83"},{"commit":{"message":"8229898: [lworld] Enable C1 by default\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"6f3cf10135ac3877bef4b437ff85ee1c24e3fba7"},{"commit":{"message":"[lworld] Temp disable read barrier GCs"},"files":[],"sha":"d922f0cbe4e307daf67abc5ba989dbefdf85e723"},{"commit":{"message":"8230761: [lworld] C2 compilation fails with assert(reg < CHUNK_SIZE) failed"},"files":[],"sha":"b1754f6a172da1a85650e37bc46798a7cd4c6808"},{"commit":{"message":"[lworld] Valhalla support for AArch64 part 2"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"8ae8e5c870f1e4b52014c9fdcf295e0b9ce7f0aa"},{"commit":{"message":"8230394: [lworld] C2 compilation fails with assert(_refresh_tick < 2*100000) failed: DU iteration must converge quickly"},"files":[],"sha":"5230ccdd5e730319e86e44bfe82ceee025682e41"},{"commit":{"message":"8230433: [lworld] C2 compilation fails with assert(_del_tick == node->_del_tick) failed: no unexpected deletions allowed"},"files":[],"sha":"9b0cb411cff54a4f05af0b1a389a4150a462f9b0"},{"commit":{"message":"8230482: Initial support for empty inline classes\n\nReviewed-by: iklam"},"files":[],"sha":"21ba4a463a79e4de2ed5a6b18bf65831d1a1d3c8"},{"commit":{"message":"[lworld] Fixed C1 time out in TestDeadAllocationRemoval due to long running loop"},"files":[],"sha":"693f96768bef8967b28fc2f338812af53ac41c4c"},{"commit":{"message":"8230397: [lworld] C2 compilation fails with assert(projs->fallthrough_proj != __null) failed: must be found"},"files":[],"sha":"f376da103233b1daab3ea57c7a901ef28e65faab"},{"commit":{"message":"8230348: [lworld] SIGSEGV in Compile::Output()"},"files":[],"sha":"b05abb91b0c32cd708bf13e22b9362a747dc6614"},{"commit":{"message":"8230325: Incorrect generation of C1 unverified entry point"},"files":[],"sha":"cb8b8c11a7993479647b5fc04f4c83e719af305b"},{"commit":{"message":"8229539: [lworld] Incorrect result of sorting test with -XX:ValueArrayElemMaxFlatSize=0"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"dcd86c0c9af610f6764ab911d4e83ca8738eff9d"},{"commit":{"message":"8230121: [lworld]  Javac does not properly parse nullable projection types of parameterized inline types"},"files":[],"sha":"e5902d4cb5bbc76b363ba343e6ae34a4603524a2"},{"commit":{"message":"8228441: Field layout requires complete overhaul to efficiently support inline classes\n\nReviewed-by: dsamersoff"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"513c9bec836396be24985319bc6630e7711eca47"},{"commit":{"message":"8230023: [lworld] CompiledMethod::preserve_callee_argument_oops needs to keep signature symbol alive"},"files":[],"sha":"f393fa9131afae5268821e9d364d515013ab22b9"},{"commit":{"message":"8229799: [lworld][c1] incorrect handling of return value from SubstitutabilityCheckStub"},"files":[],"sha":"bb2bfdf361a1bd97f8a64423b01451249ee2e8c0"},{"commit":{"message":"8229823: [lworld] ArrayCopyNode::modifies returns incorrect value for inline type arrays"},"files":[],"sha":"e67bb4eb6fe04092cb13e1bcab7f476ad21ab8e5"},{"commit":{"message":"8229760: [lworld] OopMap contains invalid oop for field in scalar replaced inline type array element"},"files":[],"sha":"dacedcbaec17bf7d49a37d286541ebfbb196171b"},{"commit":{"message":"8229772: [lworld] OSR compilation fails with inconsistent signature assert"},"files":[],"sha":"eeff5c3ea8843b48ae9e87f95c298791431475f8"},{"commit":{"message":"8229758: [lworld] SharedRuntime::handle_wrong_method selects wrong entry point for static calls"},"files":[],"sha":"43087936775cce5eae6d254f3a4ac61ed810bcb1"},{"commit":{"message":"8229753: [lworld] TESTBUG Do not force COMP_LEVEL_SIMPLE when EnableValhallaC1 is true"},"files":[],"sha":"39abb21bec81f2180007aca28195d5ca1e2bd026"},{"commit":{"message":"8229754: [lworld][c1] arraycopy_valuetype_check needs to do null check first"},"files":[],"sha":"80f4e6363ef8f832e07cdaea8ffa996a3b40b6d0"},{"commit":{"message":"8229382: [lworld][c1] TestLWorld.java crashes with -XX:+UseSerialGC\n\nDo not cache C1 constants in conditionally executed LIR\n\nReviewed-by: thartmann"},"files":[],"sha":"f7c3c45e5e9e124ff9c01f9f89f1efae3ca28978"},{"commit":{"message":"8229372: Static inline fields should allow circularity\n\nReviewed-by: dsimms"},"files":[],"sha":"006ea31a9fd0077877d8d9774c0d4e87de69a5a5"},{"commit":{"message":"8229443: [lworld] Missing anti-dependency between loads and stores from flattened array"},"files":[],"sha":"a34ebd58abfa2aed732aa1c2f6e84743d550e5cc"},{"commit":{"message":"8229700: [lworld] Incorrect lambda implicit parameter type inference in the presence of nullable projection types"},"files":[],"sha":"0139dad7c6adc2f7e3f68c0832c6e6193a66bae2"},{"commit":{"message":"8229537: [lworld] Poor interaction between explicit lambda parameters and nullable projection types"},"files":[],"sha":"ec0e936eeb4836e0939e87d791f0fbdb15932ae2"},{"commit":{"message":"8228693: [lworld] C2 treats static nullable inline type fields as never-null when initialized at compile time"},"files":[],"sha":"78a13b2283d33ec578109f7b13f49bca7d671244"},{"commit":{"message":"8227387: [lworld] TestLWorld fails with assert(\\!is_always_locked()) failed: invariant"},"files":[],"sha":"b19e64cf715b262badcef23e709bba6c51f020c1"},{"commit":{"message":"8229288: [lworld] C2 should not clear storage property bits if comparing to non-inline array klass"},"files":[],"sha":"a26023e19882e77cde43541d35b1f6b08679d040"},{"commit":{"message":"Valhalla support for AArch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"788830117195ff6db38b624ee146f82b9d5f635f"},{"commit":{"message":"8228695: [lworld] EnableValhallaC1 and TieredStopAtLevel options should obey TieredCompilation"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"8b61411f5749da15c61f1fae66f07b1e78c8ff55"},{"commit":{"message":"8228694: [lworld] Ignore tests scenarios in TestWithfieldC1.java due to JDK-8228693"},"files":[],"sha":"076a9da769df3d9537c2fae116239dfb3ae7fb94"},{"commit":{"message":"8228633: [lworld][c1] method invocation fails if the return type is an unloaded Q type\n\nReviewed-by: thartmann"},"files":[],"sha":"98f3543ff1006371f671716c5eee8b83e9f6f981"},{"commit":{"message":"8227494: [lworld][c1] Optimize withfield bytecode into putfield\n\nReviewed-by: thartmann"},"files":[],"sha":"306217ae29ea0e9f1b9bd45c8639d20d0f2ad4e2"},{"commit":{"message":"[lworld] Fixed duplicate test name in TestArrays.java"},"files":[],"sha":"92b183697604a3c84fb66b21dfaac7272dec7980"},{"commit":{"message":"8228416: [lworld] C2 compilation fails with assert(raw_val == __null) failed: val may not be null\n\nReviewed-by: roland"},"files":[],"sha":"70581c99b48325ebc0db3716dc7ab0cb274339ca"},{"commit":{"message":"8228367: [lworld] Constant, null-free inline type fields should be treated as flattenable\n\nReviewed-by: roland"},"files":[],"sha":"1ee9e2b638fd8ed929d2767367172a6cca01775d"},{"commit":{"message":"8227634: [lworld] Better optimize object array accesses\n\nReviewed-by: roland"},"files":[],"sha":"8203aebaec4f59f4e9d988ec1dbbe997aaddee39"},{"commit":{"message":"8227452: [lworld][c1] jdk\/valhalla\/valuetypes\/ValueArray.java fails with -Xcomp"},"files":[],"sha":"1bbeaf5e4af6a534a9554c82ef40fbbae3ce8776"},{"commit":{"message":"8227568: [lworld][c1] oopmap missing for calls to store_value_type_fields_to_buf\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"}],"sha":"2b0df419d65fa1c20fb157e47f69e7089b123e5b"},{"commit":{"message":"[lworld] Some refactoring and removal of unnecessary TODOs"},"files":[],"sha":"d316844b51d7629b8ff007b64f603e77083fc401"},{"commit":{"message":"8227451: [lworld][c1] withfield and defaultvalue handling for unloaded classes\n\nReviewed-by: thartmann"},"files":[],"sha":"217e3690336222de09753950b64ab7577f5efb31"},{"commit":{"message":"8227453: [lworld][c1] compiler\/valhalla\/valuetypes\/TestArrays fails with -Xcomp"},"files":[],"sha":"d9b806029c4cb60c98178bdf883ed2e72d0cc82b"},{"commit":{"message":"8227209: [lworld][c1] TestOnStackReplacement.java scenario #4 times out with -DVerifyVM=true"},"files":[],"sha":"af1b1239556cf6f45cf35896b40be91fa1eb7d3a"},{"commit":{"message":"8227509: [lworld] nmethod::print_nmethod_labels fails with Error: ShouldNotReachHere()"},"files":[],"sha":"61390239c04a20d47d310a39c97e32391dae058c"},{"commit":{"message":"8227463: [lworld] Non-optimal code generation for array properties check\n\nReviewed-by: roland"},"files":[],"sha":"a82ef6bb8ef16dd70379c9088543ceea55993174"},{"commit":{"message":"8227436: [lworld] C2 compilation fails with \"bad dominance\"\n\nReviewed-by: roland"},"files":[],"sha":"8eb71bf717a5c61418297da31545d7b4bf2acc71"},{"commit":{"message":"8227373: [lworld] Monitorenter fails with VerifyError: Bad type on operand stack\n\nChange verifier to check for a non-scalar type instead of a reference\n\nReviewed-by: iklam"},"files":[],"sha":"957009af2afbfc0e62a97b4fd51a6d7c00079879"},{"commit":{"message":"8224944: [lworld] TestCallingConventionC1::test63 fails with -Xcomp\n\nReviewed-by: thartmann"},"files":[],"sha":"8cfa7c4fd341022482837b8f094f2af6cf3e581b"},{"commit":{"message":"8226921: [lworld] Refactor argument shuffling code for ValueTypePassFieldsAsArgs\n\nReviewed-by: dsamersoff"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"13cecac2b250b9c68bd672f0643a88924f0f09a6"},{"commit":{"message":"8227396: [lworld] C2 compilation fails with assert(is_ValueType()) failed: invalid node class"},"files":[],"sha":"a98c9a528d225ade89ca1b211cf62332ece82982"},{"commit":{"message":"8227388: [lworld] Javac still emits error messages that refer to value modifier"},"files":[],"sha":"43d301c60147397a5f49501816d5d6fd2b28f23c"},{"commit":{"message":"8227385: [lworld] Confusing error message when using inline types with --release 13"},"files":[],"sha":"8b8a145e22bbed1e19ec46b22f90b699c898a07e"},{"commit":{"message":"8227310: [lworld] Fix diagnostic flag -XX:ScalarizeValueTypes\n\nReviewed-by: roland"},"files":[],"sha":"a4cc291ae6ce0c2797a64d897fcf0e27d003269d"},{"commit":{"message":"8227276: [lworld] C2 compilation fails with assert(i < field_count()) failed: field not found"},"files":[],"sha":"745ddef7a81961ac9ca93d4827e68bfb259c7ffe"},{"commit":{"message":"8222148: [lworld] Value type check(guard) causes not working lock coarsening optimization\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"8633ca48fa026e516f21528681261fe5dc65a215"},{"commit":{"message":"8227271: [lworld] C2 compilation fails when loading final value type field that is always null"},"files":[],"sha":"2c756de4905b95f5f1edfec200cedab0dadcf361"},{"commit":{"message":"8224211: [lworld] Reflective method invocation fails with assert(sender_sp != sp()) failed: must have changed\n\nReviewed-by: thartmann"},"files":[],"sha":"2f070c6d954669c64979ce729a80506978d928e2"},{"commit":{"message":"8227180: [lworld] C2 compilation fails with assert(f->is_flattened()) failed: should be flattened"},"files":[],"sha":"3edad898a6c37dd454fdf10ed4896da198e33f22"},{"commit":{"message":"8227244: [lworld][c1] enqueueMethodForCompilation uses wrong level when testing with C1 only"},"files":[],"sha":"05f51488384304f9acf96c233a8bec8ab3bc8f30"},{"commit":{"message":"8227040: [lworld][c1] Must repair stack frame before calling buffer_value_args\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"81dae56808a8788da5164d1cb931e5547adebc03"},{"commit":{"message":"8222221: [lworld] Valhalla causes performance slowdown for reflective invocations\n\nReviewed-by: roland"},"files":[],"sha":"050770e10783c89e3c34e7a7f7eb33c5a5a48ea7"},{"commit":{"message":"8227033: [lworld] Remove ACmpOnValues command line option\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0506482bbac0d4fe89ac89b77262ee68a45d3edc"},{"commit":{"message":"8227065: [lworld][c1] runtime.valhalla.valuetypes.ValueTypeArray fails with C1\n\nReviewed-by: thartmann"},"files":[],"sha":"9b938c58b369731a837b0016e02da43204a981d0"},{"commit":{"message":"8227012: [lworld] Compiler tests fail with -Xmixed"},"files":[],"sha":"93e139e07bc34e9d6e9bb02d84f7fc901a7a58af"},{"commit":{"message":"Added tag lworld_stable for changeset 7c637fd25e7d"},"files":[],"sha":"06bd4bce9230c8f5c485d2b9b99e99dc0f44156f"},{"commit":{"message":"8226860: [lworld][c1] runtime\/valhalla\/valuetypes\/Ifacmp.java fails with C1\n\nReviewed-by: thartmann"},"files":[],"sha":"cac85721c9f0b3436358210fd6436eecbaa74f1a"},{"commit":{"message":"8226821: [lworld] C2 compilation fails due to unexpected method return type"},"files":[],"sha":"fb8086b8b56b7f3de52d0056bcb714b43e7f7e3b"},{"commit":{"message":"Added tag lworld_stable for changeset 2b098533f1e5"},"files":[],"sha":"6fb3048dfbaa5df5710b5b76489e955074d0f1e1"},{"commit":{"message":"Removed tag lworld_stable"},"files":[],"sha":"a7bb91e11664c38aa5e6ca6de579da618a790327"},{"commit":{"message":"8226800: [lworld][c1] SharedRuntime::fixup_callers_callsite is wrong when caller is C1\n\nReviewed-by: thartmann"},"files":[],"sha":"e2e151735825b78504fdeb011f47054e94343053"},{"commit":{"message":"8226517: [lworld] C2 compilation fails with assert(n->Opcode() != Op_Phi) failed: cannot match\n\nReviewed-by: thartmann"},"files":[],"sha":"df5e9f913c3937a8873cdb0b9fd7b9f3a20147f0"},{"commit":{"message":"8207257: Add VarHandle access test for value type declared in ref type\n\nReviewed-by: mchung"},"files":[],"sha":"6f7f097eea905d2a9a6f5cff6afb84a3ac3fe820"},{"commit":{"message":"8226389: jlink tests fail; asm has wrong understanding of new bytecodes\n\nReviewed-by: mchung"},"files":[],"sha":"9692c102dd5dcb410daa965fa20651702a5aa2b9"},{"commit":{"message":"8226465: [lworld][c1] javac fails if C1 is enabled\n\nReviewed-by: thartmann"},"files":[],"sha":"c403a1886ac5a4b45d714de7aeae9301c308efe4"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"76e5b32edb789ff7d8f9cee5bad9827e0d95d073"},{"commit":{"message":"[lworld] Increased timeout of long running compiler tests"},"files":[],"sha":"426b16ddded379c979984bad10da9bd4800daf0a"},{"commit":{"message":"8226733: [lworld] Oop map of C2 compiled method contains narrow klass ptr"},"files":[],"sha":"6a93b3079557606e02e1a9f8ef67507ee27bf7d5"},{"commit":{"message":"8226711: [lworld] TESTBUG C1 fails to compile some test methods when -DVerifyVM=true is specified"},"files":[],"sha":"33687e2bd32d6ce33a1513e3a0fee8bad94e8589"},{"commit":{"message":"[lworld] test\/jdk\/java\/lang\/invoke\/VarHandles\/Point.java is missing from JDK-8207259 changeset"},"files":[],"sha":"6ef837144d6386f4993707200a00d46f06424ff4"},{"commit":{"message":"8207259: [lworld] Ensure VarHandle compare and set\/exchange work for inline types\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"5b32441166b07ad5d2a1699725b990215a4f54ee"},{"commit":{"message":"[lworld] ensure the substititutability invoker uses the primary mirror"},"files":[],"sha":"08f92c8cd5e2a2b0b7dbc7c517c2721756705b4e"},{"commit":{"message":"[lworld] getSimpleName should print V? for indirect inline type"},"files":[],"sha":"425cca9daa5db2243dfc110d81afd22bdd4f9f8b"},{"commit":{"message":"8226395: Test makes assumptions about what fields can be setAccessible\n\nReviewed-by: mchung"},"files":[],"sha":"29c836a145e7257f61c2ad40f410e470ce1181ed"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"9d2b18e5cb9fb6a6435c8de028f3ae08c5e05b66"},{"commit":{"message":"8225371: TestLWorld.java fails with -DVerifyVM=true\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"42ba6371ae6ed771fdf74f04ec03eb5d6acfd842"},{"commit":{"message":"8209897: [lworld] JVM_Clone should throw CNSE for value types"},"files":[],"sha":"d15c2185b93ff7c5b39b0b539db55b4ef1b0e88e"},{"commit":{"message":"8225640: [lworld] VM crash with java -Xint -server -Xmx1024m -XX:+UseG1GC -XX:HeapBaseMinAddress=2147483648"},"files":[],"sha":"a0b676be4c172b2d7cd95be3b62813fe66efa5ca"},{"commit":{"message":"8209897: [lworld] JVM_Clone should throw CNSE for value types"},"files":[],"sha":"9ace5184d1b574e54afe448945d1a3fa29e7bb2f"},{"commit":{"message":"[lworld] Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"b15b1808e29e208732fdec6c03d20eb602071dd5"},{"commit":{"message":"[lworld] Adjust Testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3dee9cf4c30fd96203e0dd8c0bf934fcaf54f24b"},{"commit":{"message":"8224110: [lworld] Reflective method invocation fails with assert: \"illegal type\"\n\nReviewed-by: mchung"},"files":[],"sha":"442fae1d20945164f140ed992c9d59467c2a4a0b"},{"commit":{"message":"[lworld] Adjust Testing"},"files":[],"sha":"08ec53439137715777ef87e6b8b44a3328a7640d"},{"commit":{"message":"[lworld] Adjust testing"},"files":[],"sha":"06880fe7816a30127ac38140a5ccceb29143e6a5"},{"commit":{"message":"8226284: [lworld][c1] TestJNICalls.java fails with -DVerifyVM=true\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"}],"sha":"c9dfec2555c9916777091d5a60ce1e653219190f"},{"commit":{"message":"[lworld] EnableValhalla on by default, and testing adjusted"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"724e919a594f92315ce593e2c8c52ffdb4f6d615"},{"commit":{"message":"8225455: [lworld] isSubstitutable0 fails with nullable projection field in -Xint"},"files":[],"sha":"98acc5caf1717a51ae04c27f0e1c493fc4ed7f47"},{"commit":{"message":"[lworld] clean up and use asPrimaryType as JDK-8225317 is fixed"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"7898710b10f7f89cf45d5ccf444dbf2e847dd380"},{"commit":{"message":"[lworld] update tests using constructors rather than __WithField"},"files":[],"sha":"e2b6db62efcada87fe1bf0d3cd2adacd8887f69c"},{"commit":{"message":"8224874: [lworld] TypeNameTest fails since 8221545"},"files":[],"sha":"519189a183c60ec863eb31d34a0bc0c7b066bd35"},{"commit":{"message":"8225762: [lworld][c1] deoptimization fails with -XX:+StressValueTypeReturnedAsFields\n\nReviewed-by: thartmann"},"files":[],"sha":"fe18700b7c4d0ac86f799b9c940f17b63d450206"},{"commit":{"message":"8225374: [lworld][c1] TestMethodHandles.java fails with -XX:+StressValueTypeReturnedAsFields\n\nReviewed-by: thartmann"},"files":[],"sha":"4608ef374c5c69a662ce24bdebfbad31f1471ce5"},{"commit":{"message":"8225317: [lworld] Fix Class::asPrimaryType and isAssignableFrom C2 intrinsics after JDK-8223351"},"files":[],"sha":"6f9105d9ae34f570bba82b459eee3acc112b59c7"},{"commit":{"message":"[lworld] Backing out fix for 8225317"},"files":[],"sha":"232eb13ad7524bf78f042f675a29dae11b5ab0e5"},{"commit":{"message":"8225317: [lworld] Fix Class::asPrimaryType and isAssignableFrom C2 intrinsics after JDK-8223351\n\nReviewed-by: roland"},"files":[],"sha":"cf82873d6be4e0748415f8f5c673b0b93daff82b"},{"commit":{"message":"8225665: [lworld] C2 compilation fails with assert(node->Opcode() == Op_CastP2X) failed: ConvP2XNode required"},"files":[],"sha":"e71811eed939ea74d01c3c2cd02779875535d409"},{"commit":{"message":"8224877: [lworld] cplsym00103m025 fails with \"Failed to reject bad class: no exception was thrown\"\n\nFixed bad merge\n"},"files":[],"sha":"5ff5764e1b7a3233a3a65bc108757fe377dcaadb"},{"commit":{"message":"8221647: [lworld] Performance regression due to the fact that check if array is array of values is not hoisted out of the loop\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopnode.hpp"}],"sha":"47e98886305c63ba8de2ebb075cf373f47ef2b58"},{"commit":{"message":"8225637: [lworld] java -Xshare:on -version crashes"},"files":[],"sha":"53583079a3364b1efd70835200019636c7563fbd"},{"commit":{"message":"8225623: [lworld][c1] java -Xcomp -version fails with IllegalMonitorStateException"},"files":[],"sha":"da24a8641b581b5e4401ca6295852cc3d435ba6e"},{"commit":{"message":"8225337: [lworld] TestNewAcmp.java fails with C1 when java.lang.ClassValue::* are compiled\n\nReviewed-by: thartmann"},"files":[],"sha":"47c0d18c252b323fa02d00df6f87b6c58340cb5e"},{"commit":{"message":"8225579: [lworld] Ifacmp.java fails with 'Multiple garbage collectors selected'"},"files":[],"sha":"cc1aef75e6a984ad558723cd92edbe6cdbb1f305"},{"commit":{"message":"8225575: [lworld] TestNewAcmp fails with assert(_map != __null) failed: must call stopped() to test for reset compiler map"},"files":[],"sha":"049ac6827ef1b9f5360ab5f4356ef186a63ef646"},{"commit":{"message":"8225204: [lworld] C2 crashed trying to generate code for filling 2-dimensional nullable value type array"},"files":[],"sha":"395c972d334df60e1dd74bffa4c900bc775b5cd1"},{"commit":{"message":"8225462: [lworld] MethodHandle support of the static <init> factory method\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"dded1dcef6c4dc924f78e58c16028d325f5fe934"},{"commit":{"message":"8223582: [lworld] WeakReference of an inline type should throw\n\nReviewed-by: mchung"},"files":[],"sha":"60e0eefe01120dd3967cef7c374bdeeecc05fdce"},{"commit":{"message":"8223349: [lworld] Reflection support on static <init> factory methods for inline types\n\nReviewed-by: jrose, mchung"},"files":[],"sha":"2632a9fc122221af288953e63ed1be469671b009"},{"commit":{"message":"8225079: [lworld] newInstance wrong return type Internal Error\n\nSpecify T_VALUETYPE, not T_OBJECT as factory method return type\n\nReviewed-by: mchung"},"files":[],"sha":"3d1609ca4bb53b2c1f73517d199d16f6e6d9a490"},{"commit":{"message":"[lworld] fix merge with mainline repo (printing of nmethod)"},"files":[],"sha":"8451da5c0fe622e50dc24b3c7eeac6dc7bc27e89"},{"commit":{"message":"8223351: [lworld] Primary mirror and nullable mirror for inline type\n\nReviewed-by: rriggs, acorn, hseigel"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"fed0b383302cdad303625767d07bdebec822b18a"},{"commit":{"message":"8218619: [lworld] Execute all test scenarios with C1\n\nReviewed-by: thartmann"},"files":[],"sha":"c6d5ff9b9ce8e6a040f6328fdcbef91d0a0736ae"},{"commit":{"message":"8224831: [lworld] TestCallingConventionC1.java fails with -Xcomp\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"6b71517a05f0df0efe4c18c154826f9beb8cf445"},{"commit":{"message":"8224631: [lworld] C1 asserts - Could not resolve circular dependency\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"c7f719a25c7e2f0e25dea54ad99ea60a80623cb4"},{"commit":{"message":"8217714: [lworld] Support for substitutability checks in interpreter\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0b9b505762471d9d7a749e40b524c4141278cde3"},{"commit":{"message":"[lworld] Adjust Testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"059946b4f424c2b1a592a0515b6dadaaae9bb3d7"},{"commit":{"message":"Merge"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"b3a1b1023d36fcd8695a06ecc47e1ddcb6e40526"},{"commit":{"message":"[lworld] Disable UseSharedSpace by default"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0b168904616f19d55e18032c73d55153d015fcc6"},{"commit":{"message":"[lworld]: Change a few lingering value modifiers to inline"},"files":[],"sha":"fa8c342ca7ccb1a2b44e9253abf0a074ca88a7a8"},{"commit":{"message":"[lworld]: Change value modifier to inline in benchmarks"},"files":[],"sha":"20fe388ff037c30729711fc8a3f584b5d939cdab"},{"commit":{"message":"8225222: [lworld]: Withdraw support for value modifier and @__value__ annotation"},"files":[],"sha":"c38c3c5169ff4cb995fe7c2ce406e309062f818c"},{"commit":{"message":"[lworld] minor benchmarks cleanup"},"files":[],"sha":"15eff770c96579bf76a726db6e7d32be6c5c0ae9"},{"commit":{"message":"8222711: [lworld]: Value construction modalities in class file - finishing touches"},"files":[],"sha":"7a59468b7c54f579f975cfe8a3f91ac1ac163a59"},{"commit":{"message":"8222361: [lworld] Convert benchmarks into JEP230 style micros"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"}],"sha":"12a61be3e9d0830f278b8f7d2b1a06eed981984b"},{"commit":{"message":"8224868: [lworld] VerifyLastFrame fails with assert: getting result from unreachable basicblock\n\nReviewed-by: acorn"},"files":[],"sha":"9dec15a61cd6db7dab8ee03fa3e720ffd8704e9d"},{"commit":{"message":"8224971: [lworld] ObjArrayKlass::storage_properties() should not return \"null free\" for multidim\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"f78d33b6559d0d8f5c60105f58f47cf5465e2580"},{"commit":{"message":"8224861: Rework restrictions introduced by 8223029 for nullable arrays\n\nReviewed-by: thartmann"},"files":[],"sha":"a8cc6e3622de607017b3b82dbfbfd10a35a37a98"},{"commit":{"message":"[lworld] Increased timeout for TestNewAcmp.java"},"files":[],"sha":"b325b3ed867591618f6325a1c670eb6fb12310a6"},{"commit":{"message":"8222815: [lworld] LW2 Attempts to serialize an inline type should throw NotSerializableException\n\nReviewed-by: rriggs"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"}],"sha":"722ca5bae44467e01c459563e0d1f1eb7af323cf"},{"commit":{"message":"8224818: [lworld] compiler\/valhalla\/valuetypes\/TestLWorld.java fails with ACmpOnValues=3"},"files":[],"sha":"4533a58b00880ab32671fbf9a8d141edc99ba846"},{"commit":{"message":"8224489: [lworld] Compilation fails with assert((!o && ptr != Constant) || (o && ptr == Constant)) failed: constant pointers must have a value supplied"},"files":[],"sha":"4ba80876a3987cba523f1b5d4acd685cf857cdc4"},{"commit":{"message":"[lworld] Disable TestCallingConventionC1 with -Xcomp until 8224831 is fixed"},"files":[],"sha":"eb74333d5cd5defa96084852a787e77d3ee1db41"},{"commit":{"message":"8220788: [lworld] C1 support for LW2 Arrays\n\nReviewed-by: thartmann"},"files":[],"sha":"bbedd90568ada20723a97ecfa6ebdd7fdd481690"},{"commit":{"message":"[lworld] TestArrayAccessDeopt fails with -Xcomp"},"files":[],"sha":"76cfd257892ab5136502ca60c78dff6cb0f80e67"},{"commit":{"message":"Merge"},"files":[],"sha":"bc08f886df14c78cac95d77b9b848ac7030fa37c"},{"commit":{"message":"Merge up to 'jdk-13+20'"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"}],"sha":"4ebd45cfbbfbff4d343c4e185ad7f4e1af3cf2c8"},{"commit":{"message":"Merge"},"files":[],"sha":"85c78c3ff062a6dc4c8d18f4eabc330495f79793"},{"commit":{"message":"Merge to last conflict"},"files":[],"sha":"01eb403cc18483c03bfd0551ed5a9440bbf172ce"},{"commit":{"message":"Merge"},"files":[],"sha":"46ebfa6ed9f81664b7803a2b9e9e756c7933703e"},{"commit":{"message":"Merge to last conflict"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"3bc2e3fc0859adbf5c13b22aca3151d75de2210b"},{"commit":{"message":"Merge"},"files":[],"sha":"6ae826c1b1c879be9470ec246cb179365a728e0c"},{"commit":{"message":"Merge to last conflict"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"c357fe032caabb50c665b7ea4b045ba783d917d7"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"}],"sha":"09d074b90d8af81c8c39d002c522d0d601e65b2b"},{"commit":{"message":"Merge to last conflict"},"files":[],"sha":"d0774055abf814f85409dacb8bb90b805272df8b"},{"commit":{"message":"Merge"},"files":[],"sha":"fbebb86d3b67d9e34e190c2542160e635701c237"},{"commit":{"message":"Merge to last conflict"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"0a33c98d2bebd4b6be0a2a178fb1bedf2a63a359"},{"commit":{"message":"Merge up to 'jdk-13+19'"},"files":[],"sha":"51d0dfd0fd4f438b2feb187e652d28d8ec084042"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"e6860470463ce65d4e098206be20a987c618c3a0"},{"commit":{"message":"Merge to last conflict"},"files":[],"sha":"96d8d1423872f6e5074703d6bcf433f659221b7d"},{"commit":{"message":"Merge"},"files":[],"sha":"cbbbb0dc89dae6003efdc236b8b016b85b56116e"},{"commit":{"message":"Merge to last conflict"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"01c43cdbc644a5dd6531b53a7b10dc21a6552360"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"}],"sha":"476df03bbddb8d918762bab55f42906ea9e17118"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"369added90a317aa3064de199382da9dd1bed159"},{"commit":{"message":"Merge to last conflict"},"files":[],"sha":"2576a36b3dad946bb2e849f108181ba811ce35e2"},{"commit":{"message":"Merge up to 'jdk-13+18'"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"82a693107ac885d3a7b130b6dc2ee0734ccb371e"},{"commit":{"message":"Merge up to 'jdk-13+17'"},"files":[],"sha":"d84db37159f54389747932d05ce1cb66dcbadbe6"},{"commit":{"message":"Merge"},"files":[],"sha":"232a744f6f2742bddf6c690c6d233879d9b92cf6"},{"commit":{"message":"[lworld]: Merge in overhauled constant pool handling from JDK-8222289"},"files":[],"sha":"0326375fe245105da6c2c52f5be5f825c11c7463"},{"commit":{"message":"8224482: [lworld] Scalar replacement computes incorrect value for uninitialized non-flattened value array"},"files":[],"sha":"5930b705994049ee31e59c554a0c938017daf355"},{"commit":{"message":"[lworld] Improved klass loading from [V? and reverted now unnecessary fix for 8224036"},"files":[],"sha":"15463e97787216576b14ec16a328872b24faeb4c"},{"commit":{"message":"8224231: [lworld] Many crypto tests fail with -Xcomp"},"files":[],"sha":"2e54258c0ae6b8039efbd94f83c8a5e1fce69f5e"},{"commit":{"message":"8224068: [lworld] JCK api\/java_lang\/invoke\/MethodHandles\/Lookup\/ExceptionsTests crashes\n\nThrow exception in MethodHandle.FindConstructor() if return type is not void\n\nReviewed-by: jrose"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"694508980cfb51f99b234db54f8fb7653518ceca"},{"commit":{"message":"[lworld] Disabled reflective call tests until JDK-8224110 and JDK-8224211 are fixed"},"files":[],"sha":"95b1d229c9009cf31dc1b0ca20f9c4c18dc732bd"},{"commit":{"message":"8223965: [lworld] Reflective method invocation does not handle value type returned as fields\n\nReviewed-by: iklam"},"files":[],"sha":"c5db4bea77226c59d968bb83a873c66ec398db95"},{"commit":{"message":"Merge up to JDK-8222289"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f8f3b7abb17f932c5141add394b5c243a3d73bc8"},{"commit":{"message":"8223954: [lworld] TestIntrinsics fails with assert 'user must call transfer_exceptions_into_jvms'"},"files":[],"sha":"2247a3e359fa75c00852ecee2e237b4011d75417"},{"commit":{"message":"8224036: [lworld] System.arraycopy intrinsic does not always check for flattened src array\n\nReviewed-by: roland"},"files":[],"sha":"c4241d6195597f6c4846a2acbdd9cb6b9e0c22be"},{"commit":{"message":"[lworld] Refactored some comments around LW2 array support in C2"},"files":[],"sha":"7ae26f27afd5d8ad0d9e79aea36f8c99a9d3f12f"},{"commit":{"message":"8223949: [lworld] Casting null to an unloaded value type should throw NPE"},"files":[],"sha":"8448182129b4a033a2480ab0a8bb514ddc6c17a4"},{"commit":{"message":"8223931: [lworld] C1 ValueTypeReturnedAsFields should check if method return value is never null"},"files":[],"sha":"365414ffddcedc875c3c828df0833d7a0f9a671d"},{"commit":{"message":"8223729: [lworld] Initial C1 implementation for -XX:ACmpOnValues=3\n\nReviewed-by: thartmann"},"files":[],"sha":"659315cf95601cb4ec4075f6cbbbd434c16d7951"},{"commit":{"message":"8223882: [lworld] Compilation crashes in ValueTypeNode::is_default with -Xcomp"},"files":[],"sha":"8a8ac7a5b37b60a3dfb2da4e77e4e684c2497d4e"},{"commit":{"message":"Fixed TestNewAcmp.java failure in product VM"},"files":[],"sha":"f49f7abb90a641a40f1b029498d626ab4ee901c4"},{"commit":{"message":"8223866: [lworld] TestNullableValueTypes triggers endless loop in compilation with -Xcomp"},"files":[],"sha":"96b9ae5bf47906951372ca2c692903fe878a25e5"},{"commit":{"message":"8223418: [lworld] refactor TestNewAcmp.java\n\nReviewed-by: thartmann"},"files":[],"sha":"9381a068f223ce202a537dedd086658e28d38f78"},{"commit":{"message":"8223345: [lworld] Implement ValueTypeReturnedAsFields for C1\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"5d109cdf10531b4ce9339814ed4646b3c10d47b5"},{"commit":{"message":"8223387: [lworld] reflection support for LW2 arrays\n\nReviewed-by: mchung"},"files":[],"sha":"17a5ad861a13f15f2d03fa6b78cdd67496d69c05"},{"commit":{"message":"8222787: [lworld] JVM should be enhanced to work with static <init> factory methods for inline types\n\nAdd support for static <init> factory methods that have non-void return values\n\nReviewed-by: iklam, thartmann, sadayapalam, lfoltan, hseigel"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"f01567f0d2a197aea711e6dbe258d3f04729df67"},{"commit":{"message":"8223029: [lworld] C2 support for widening\/narrowing conversion \"[QFoo;\" <: \"[LFoo;”\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"}],"sha":"93be80d798102f2c7ae019283f54e7d7a4102edb"},{"commit":{"message":"8223350: [lworld] Use inline classes instead of value classes\n\nReviewed-by: hseigel"},"files":[],"sha":"559df52e68641bec1f84b28c7e7e803155813d98"},{"commit":{"message":"8223017: [lworld] checkcast\/instance broken for LW2 arrays\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"fe869b1300624f1520e57b510f6a94be676cc3e8"},{"commit":{"message":"8223390: [lworld] Shenandoah build broken since 8222989"},"files":[],"sha":"1e4eebbcce3c39d0e57b24639ea40396df65a217"},{"commit":{"message":"8223229: [lworld] C1 crashes when calling final virtual methods with value arguments\n\nReviewed-by: thartmann"},"files":[],"sha":"3ae9c041a833b610ddbf93dbf78f0b361f306592"},{"commit":{"message":"8223110: [lworld] Handle GC that happens when C1 allocates buffered value objects\n\nReviewed-by: thartmann"},"files":[],"sha":"a5257b300f59f5c371141adf483648cca4a84ced"},{"commit":{"message":"Fixed failure in TestCallingConventionC1.java when G1GC is not used"},"files":[],"sha":"659331541f661da2245b9fd166d332763cc36516"},{"commit":{"message":"8222989: [lworld] Calling convention - C2 to C1 (oop params)\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"ead8d8fdd0b0a9c4cead5794512ca0c0c71e4067"},{"commit":{"message":"8223028: [lworld] vm\/mlvm\/anonloader\/stress\/byteMutation crash in VerificationType::is_valuetype_assignable_from()\n\nRemove the complaining assert because it's complaining about a valid signature\n\nReviewed-by: fparain"},"files":[],"sha":"1f39e18ac5d335b45f94dee25d90b1c0bc905929"},{"commit":{"message":"8222711: [lworld]: Additional fixes for value construction via static init factories"},"files":[],"sha":"2d28ff3f20e8af907340e28f96855bfe045b8dff"},{"commit":{"message":"8222974: [lworld]:  Interim fix for javac doesn't like \"?\" syntax in instanceof type expression"},"files":[],"sha":"140a0303abf106b224a815e88fe94c098fb6b7e5"},{"commit":{"message":"[lworld] Removed some accidentally pushed debug code"},"files":[],"sha":"838aa7d6a9200560dd845714c832132fe2208ac4"},{"commit":{"message":"8220716: [lworld] C2 support for LW2 arrays\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"}],"sha":"958bc5510c1f524f868cf16b13ef6f3a90c0dd52"},{"commit":{"message":"8222525: [lworld] Runtime support for LW2 Arrays\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/services\/heapDumper.cpp"}],"sha":"f49762698cfc350280eca28cd3daf67f0a000e9f"},{"commit":{"message":"8222555, 8222553: [lworld]: Regression tests to show code compiles properly"},"files":[],"sha":"531d98a73a71831547d6e1f44115da310d586b5c"},{"commit":{"message":"8222711: [lworld]: Value construction modalities in class file. Remove untenable assert"},"files":[],"sha":"d35db54a0bb110f3d44c0d9cdfa3cb47238514a1"},{"commit":{"message":"8222711: [lworld]: Value construction modalities in class file. Remove untenable assert"},"files":[],"sha":"49beb5d50bb9fada17d7d89efce6f7346019bfff"},{"commit":{"message":"8222711: [lworld]: Value construction modalities in class file. Make sure to qualify the factory method with the correct containing class"},"files":[],"sha":"e39e085187de36cb1a5fdf6bc72ad44feb1c6a4f"},{"commit":{"message":"8222908: [lworld] Calling convention - unwind C2->C1 callstack"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"10b49f3c1207350b8df87913061742364b4e0d04"},{"commit":{"message":"8222717: [lworld] Calling convention - repair C1 stack\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"d70235404efbdc73772ec28124e22e2b44131602"},{"commit":{"message":"[lworld]: Fix failure that shows up in Mach5 testing probably due to locale settings"},"files":[],"sha":"3c9c19eabc554958cac3c413b74c03176e779b09"},{"commit":{"message":"8222849: [lworld] Use 'inline class' instead of 'value class' in compiler tests"},"files":[],"sha":"44ba4ab29ef2f5827fe1be57c6ac7e0fe902155a"},{"commit":{"message":"8222840: [lworld] TestNullableValueTypes fails to compile after 8222792"},"files":[],"sha":"af7d447a7eb441c83e13de6b9c57e66f16cf9ae1"},{"commit":{"message":"Change tests to use 'inline' instead of 'value' for the types previously known as value types\n\nReviewed-by lfoltan\n"},"files":[],"sha":"9bc4278f2a76199d79793eca344b778c4a431e8d"},{"commit":{"message":"8222402: [lworld] LW2 array support in javac"},"files":[],"sha":"6dbb150c802787929a1ceb91d2ffa47920312e2b"},{"commit":{"message":"8222792: [lworld] Additional tests for enforcing latest type relationship rules between an inline type and its nullable projection"},"files":[],"sha":"3eed4e1591c49ff0f043ee35055fff4bd5c3b344"},{"commit":{"message":"8222792: [lworld] Javac should enforce the latest relationship rules between an inline type and its nullable projection"},"files":[],"sha":"b4638aa683f88e714a572ecc6f041c09a3feed5f"},{"commit":{"message":"8222790: [lworld] Additional changes to enable javac internals to discriminate between LV; and QV; in various formatted outputs"},"files":[],"sha":"a4e62e90683b2423fae995e72c468601c91b38f7"},{"commit":{"message":"8222790: [lworld] javac diagnostics don't discriminate between inline types and their nullable projection types"},"files":[],"sha":"0b026569db42579498b6153afaa5a886ebf36102"},{"commit":{"message":"8222784: [lworld] Partial revert. Restore -XDallowGenericsOverValues for now"},"files":[],"sha":"c2b86302b2a50a8f575d66f46800ebaf442d5789"},{"commit":{"message":"8222711: [lworld] Initial skeletal implementation of inline class instance construction via <init>"},"files":[{"filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java"}],"sha":"a3ce25a3fab0a12efb3c9fa836d565db849f1cba"},{"commit":{"message":"[lworld] Migrate test still depending on -XDallowGenericsOverValues"},"files":[],"sha":"0ea0e237c439a934e812699b46dfe63c7ba755f8"},{"commit":{"message":"8222745: [lworld] Declare value classes with \"inline\" modifier"},"files":[{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"d7d6641eb13910f1834ad50704acda9a53e2a11d"},{"commit":{"message":"8222784: [lworld] Remove stale compiler options: -XDallowGenericsOverValues and -XDdisallowValueConstructors"},"files":[],"sha":"051ab75044301d022339d07a3567203c41202dd5"},{"commit":{"message":"8222783: [lworld] Withdraw support for .box and .val syntax"},"files":[],"sha":"b8d8be3b611b4d713b3aa454cffccdf287679b86"},{"commit":{"message":"Change tests to use value? and value instead of value.box and value.val\n\nReviewed-by lfoltan\n"},"files":[],"sha":"93ccd135cf4c6dbd917fe2451e7d18848ea128e3"},{"commit":{"message":"8222712: [lworld] print parameter types for different compiled entry points\n\nReviewed-by: thartmann"},"files":[],"sha":"09f144889d1824ef0091a6df5c78a10ffb46a196"},{"commit":{"message":"8222729: [lworld] Crash in Symbol::print_as_signature_external_parameters when encountering [Q"},"files":[],"sha":"a67895a33fbefdb55e2aab76f5d83a7cfbdd6120"},{"commit":{"message":"8222722: [lworld]  Javac fails to compile V?[].class"},"files":[],"sha":"a0a2db1f260d57a090d815bb06d27176c6e5a9a3"},{"commit":{"message":"8222636: [lworld] Remove usages of .val and .box from compiler tests"},"files":[],"sha":"6f2c45ae3181403e1ed04a17f9b0a9494a4681fe"},{"commit":{"message":"8222718: [lworld] Scalarization of value types around exceptions control flow is broken"},"files":[],"sha":"7974864e84b5ffd19c0d8191e84e70886a42cf2a"},{"commit":{"message":"Change tests to use value and value? instead of value.val and value.box\n\nReviewed-by: fparain"},"files":[],"sha":"e9408df9bae1c21922787dba017d04b40eab5ab6"},{"commit":{"message":"8222634: [lworld] Javac does not allow array creation of the form new VT? []"},"files":[],"sha":"3c3c6bb645375e74f572e7c119a023869a793625"},{"commit":{"message":"8222384: [lworld] Calling convention - C2 to C1 (floating point params)\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"728ee46f432c5b4f1b3a571d335cf7dd00e0262b"},{"commit":{"message":"8222634: [lworld] Additional tests for null mixin with (L-form) ValueType?'s"},"files":[],"sha":"5e3be38351646ff9bd648ee911d2c33889f1693e"},{"commit":{"message":"8222634: [lworld] Additional tests for various code snippets that were incorrectly failing to compile"},"files":[],"sha":"cb8dce956eab14841ada10722617c91f7947881f"},{"commit":{"message":"8222634: [lworld] Javac sometimes emits incorrect ('Q') descriptors for fields"},"files":[],"sha":"cdd65c3f045701b8e8772bfc06f9abe6a980c7cc"},{"commit":{"message":"8222632: [lworld] Remove usages of __WithField from compiler tests"},"files":[],"sha":"b6956e0e0232e3250f12420e176ab8425c07c223"},{"commit":{"message":"8222631: [lworld] Reserved entry in signature prevents incremental inlining"},"files":[],"sha":"fc59995169a3d57ed767642acb795010b02b965f"},{"commit":{"message":"8221545: [lworld] Preliminary support for alternate denotation of values and boxes"},"files":[],"sha":"037fc970b16149f8d07144c38d15a4a1298b97d8"},{"commit":{"message":"8222523: [lworld] Build failure after merge"},"files":[],"sha":"c82d2dd198d336739ad2e8f317095df27196b2ee"},{"commit":{"message":"8222399: [lworld] Add more compiler tests for .box\/.val casts"},"files":[],"sha":"00cfb4671f2c89233dd43cce150341c7390a1eec"},{"commit":{"message":"[lworld] Print additional field info in ci"},"files":[],"sha":"5d03ccec1a947860194a5228a4cce532a4a2ab1d"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"554c9c56d6eee31d8323c2099e5f2961e6db5d8f"},{"commit":{"message":"8222243: [lworld] Calling convention - C2 to C1 (fixed point params only)\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"7711392df774f0899d371fb1f2c82fd05856f59b"},{"commit":{"message":"[lworld] Missed default value in value_mirror"},"files":[],"sha":"c2b9b1063d55ad183584e7fdbe8e56cfc0f1f566"},{"commit":{"message":"8221699: [lworld] Additional changes to implement temporary alternative IDE-compatible annotation for \"value\" keyword"},"files":[],"sha":"65b866f4ea6d56f94d866dd62e9aa3872b494ffd"},{"commit":{"message":"8222128: [lworld] Assertion failure in ci with flattenable non-flattened field inside a flattened field\n\nReviewed-by: roland, dsimms"},"files":[],"sha":"ace45dd74fe4f1d33272eba4596bb8bb4e5b94ef"},{"commit":{"message":"8221699: [lworld] Implement temporary alternative IDE-compatible annotation for \"value\" keyword"},"files":[{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"2b1e6e0633c4370677faf0c3d3f681820d628dc9"},{"commit":{"message":"8222110: [lworld] Javac should tolerate value membership cycles under an option"},"files":[],"sha":"f0681d31c4c5b85845c2a25135fc81ca304ad3fe"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"1ed50c8f830350bfdc6cd960f65a58143817f87b"},{"commit":{"message":"8221879: [lworld] Calling convention - Interpreter to C1\n\nI2c adapter now always go through Method::_from_compiled_value_entry.\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"879ec202aca2af95a653d058e51eb8068e69ee65"},{"commit":{"message":"Fixed test failures in product builds"},"files":[],"sha":"56aaa97a0b93e9395901557c31d10a2e96b5ce66"},{"commit":{"message":"Fixed gtest affected by previous change"},"files":[],"sha":"e82dd72b51d81ebf442ece18595bda432d5ae079"},{"commit":{"message":"8221653: [lworld] Calling convention - C1 to Interpreter\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"ad2d154ec512f953e784d19b59d29a3218f09d61"},{"commit":{"message":"JDK-8221330: [lworld] Missed test add"},"files":[],"sha":"1371cc3bf466f0ad6dad6f439e1faea79b9eb737"},{"commit":{"message":"JDK-8221330: [lworld] Javac adds InnerClass attribute without appropriate value flag\n\nAuthor: sadayapalam\n"},"files":[],"sha":"876fc40964f04fed5f9d9b725fa306cfadafabeb"},{"commit":{"message":"8220701: [lworld] Remove ValueArrayFlatten command line flag\n\nReviewed-by: dsimms"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"07510d73f836d0b6a7d1b594c3b145755cee0b49"},{"commit":{"message":"8220583: [lworld] Missing ValueTypeNode for value type receiver\n\nReviewed-by: roland"},"files":[],"sha":"93119b67c286da38119a60864c0a7abc1fa9e35f"},{"commit":{"message":"8220666: [lworld] Nullability information is lost at checkcast in ciTypeFlow\n\nReviewed-by: roland"},"files":[],"sha":"a13fa8a9d429b8a1f51a865698a411e577423d55"},{"commit":{"message":"8215560: [lworld] Investigate if method handle calls can be further optimized\n\nReviewed-by: thartmann"},"files":[],"sha":"23866facda3d1e89d1adf17bb6c95e35344f58f7"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3f3754c2dc81b5ea5919272ef6fe6c79a1a5db30"},{"commit":{"message":"8220330: [lworld] C1 asserts basic_type() <= T_ARRAY in ShortLoopOptimizer"},"files":[],"sha":"5c000274dc1f1c2455a796db5ce9a7ee24ce7e29"},{"commit":{"message":"The previous changeset (42adc57b994f) for 8220269 is incomplete. This is the remaining fix\n\nReviewed-by: thartmann"},"files":[],"sha":"0413562110db2ed1cfce264945e7dadd581c089d"},{"commit":{"message":"8220269: [lworld] C1 should return default value for uninitialized non-static Q fields\n\nReviewed-by: thartmann"},"files":[],"sha":"43880a69a8438baddd6adb1122c79cb54a25af3a"},{"commit":{"message":"8220118: [lworld] Fix C1 handling of unloaded Q classes\n\nReviewed-by: thartmann"},"files":[],"sha":"5dc8b111103bb6ffbeda86de4b9dc682dc54c5a4"},{"commit":{"message":"8218615: [lworld] C1 intrinsic support for System.arraycopy\n\nReviewed-by: fparain"},"files":[],"sha":"6d6450afed41c9a18ebd1bb30e49360c38a6096f"},{"commit":{"message":"Trailing whitespace turned up in merge"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"bee794c9c0f9abe4563ac3ff509b5dced0e6c343"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"44fef4593d344839c037bfd2a4824c723e82003b"},{"commit":{"message":"Misleading TODO in PhaseMacroExpand::value_type_from_mem()"},"files":[],"sha":"7e0606cb659033901f98ea46283559f78d2304eb"},{"commit":{"message":"8218979: [lworld] TestBasicFunctionality fails due to unexpected number of StoreNodes\n\nReviewed-by: thartmann"},"files":[],"sha":"a0a5d436e2018a4d728b9ed817b5351e2173639b"},{"commit":{"message":"8219572: [lworld] vmTestbase\/gc\/ArrayJuggle\/* tests fail with Idealize should return new nodes\n\nReviewed-by: roland"},"files":[],"sha":"5791b233695114a475cd14ddcf2142a6a761cc22"},{"commit":{"message":"8219242: [lworld] C1 aastore on a Phi node needs flattened array check\n\nReviewed-by: thartmann"},"files":[],"sha":"7e60702d68933bcbf2e02abaf5e95a1067166bbb"},{"commit":{"message":"8219155: [lworld] C1 getstatic of a value box type is incorrect"},"files":[],"sha":"ef32b30fbb8482540f32c14fbd69d362e83401d8"},{"commit":{"message":"Merge"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"8edac886c9588c2dcfed57130edcba2bf99b43a7"},{"commit":{"message":"8219154: [lworld] C1 aastore of flattened array needs null check for L-types\n\nReviewed-by: thartmann"},"files":[],"sha":"0b0f2cd83d924f9f6bb4d901b538c78a17da474d"},{"commit":{"message":"8219200: [lworld] Various crashes after fix for JDK-8215477\n\nReviewed-by: thartmann"},"files":[],"sha":"40258ccdaccf69708b5e948122275191d952859c"},{"commit":{"message":"8215477: [lworld] C2 should avoid value type allocations when inlining incrementally\n\nReviewed-by: thartmann"},"files":[],"sha":"84a4364ac6b8a035e602121d462f9deb97bca9b9"},{"commit":{"message":"8218919: [lworld] C1 aastore of flattened array needs null and type check\n\nReviewed-by: thartmann"},"files":[],"sha":"0f6cabc40a57daf9066b50130290bc50c6cb1493"},{"commit":{"message":"8218925: [lworld] C2 register allocator spills into reserved argument stack slots"},"files":[],"sha":"2acfe5b332629b4d997c52fccb02a4f560e90717"},{"commit":{"message":"[lworld] Small cleanup of calling convention related code"},"files":[],"sha":"f54a063739c142077af7578ea5e6da9a77afc318"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"2fdc164c03c51134cc3da55f04b9df08379b3560"},{"commit":{"message":"8218612: [lworld] C1 support for array covariance for aastore\n\nReviewed-by: thartmann"},"files":[],"sha":"2bc88fe161a66f937d577c1fdc3f0b752f758a07"},{"commit":{"message":"8215559: [lworld] Scalarize calls with a value type receiver\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"8a604f265481a8f011fc5a3776441bab09eb3cf8"},{"commit":{"message":"8218614: [lworld] Re-enable array covariance compiler tests"},"files":[],"sha":"252aced150df3586957f236f787035ca6753e845"},{"commit":{"message":"Change verifier to allow assignability of arrays of value types to arrays of java.lang.Objects and interfaces\n\nReviewed-by: iklam"},"files":[],"sha":"ded81b7ef76047cfd4145fa2ccb44780d5fcd859"},{"commit":{"message":"[lworld] Added missing copyright header"},"files":[],"sha":"53a1de148dd8715d97da7e8365f8e994b45b21ee"},{"commit":{"message":"8218142: [lworld] C1 support for array covariance for aaload"},"files":[],"sha":"86aa0fdecf0fa2b935f2e131f8c8a15ddff5b3fc"},{"commit":{"message":"IsSubstitutable should catch any error or runtime exception and let it pass through\n\nContributed-by: forax\n"},"files":[],"sha":"1e8cc9a2582f18075311dece4871d8b55e44b2be"},{"commit":{"message":"8218143: Merge with main, fails compiler\/valhalla\/valuetypes\/TestNewAcmp.java\n\nReviewed-by: thartmann"},"files":[],"sha":"324767c54ca286d13029bcf0dfb09217f804e237"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"1aeac91581bf716305bcee09d9b0cc45fcbce251"},{"commit":{"message":"8218040: [lworld] [lworld] Restore value array covariant behavior by\/as default"},"files":[],"sha":"d5e4b6e441bcb07732b5445437cffa5d78662485"},{"commit":{"message":"[lworld] Fix value type benchmarks, make compilable and working"},"files":[],"sha":"c901f2aa2b5a44765190b075cea35a88dcd08c4c"},{"commit":{"message":"Allow substituability test when EnableValhalla is false"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"b3d6a8154a40d1879b9e50e4a2744c70a94429b8"},{"commit":{"message":"8217966: [lworld] ClassFormatError: Illegal class name \"QX$Entry<TE;>;\" in class file X$Entry"},"files":[],"sha":"050f57b0d66af1ae46f7e42f953e15e8c4c72719"},{"commit":{"message":"8217958: [lworld] Trouble assigning\/casting to a value array type with parameterized element types"},"files":[],"sha":"d46413dae7f2fcac610bb04df6223a2effab12ff"},{"commit":{"message":"8217875: [lworld] Javac does not allow express casts between value types and their light weight box types"},"files":[],"sha":"60ef6d3ce692377862036c9b8997f9a52d48fbfd"},{"commit":{"message":"8217872: [lworld] Javac forbids look ups on the light weight box type of a value type"},"files":[],"sha":"ad436f63eefcfa1263edcbd15b06ec3a60473b7a"},{"commit":{"message":"8215473: [lworld] Support for substitutability checks in C2\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"79225dd71364d360f7c3533a55eb589123c9c211"},{"commit":{"message":"[lworld] Fixed missing masking of JVM_CONSTANT_QDESC_BIT from ldc"},"files":[],"sha":"7da4cbd4a0921c516ef95d893c36de31a02f1143"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"dbf4abab76780b037b1c5093f85d74bbf27a8111"},{"commit":{"message":"8206144: [lworld] Adapt and add C2 intrinsics for value types Unsafe API\n\nReviewed-by: thartmann"},"files":[],"sha":"c439b9e2b957a014aa8ba150e44684e7abafa89c"},{"commit":{"message":"8215501: [lworld] javac should accept op== on both refs and values"},"files":[],"sha":"3258a0a8a79987176388ed17cc0d012207960615"},{"commit":{"message":"8217284: [lworld][c1] TestLWorld.test60 fails to throw IllegalMonitorStateException"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"9b7c9566c9bd7ba49f05e3e049a6fac51b8d2240"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"78ad2511a80cd6ebb4055f69cb2ad95cc0a27cf8"},{"commit":{"message":"8217223: [lworld][c1] monitorenter on value object should throw IllegalMonitorStateException\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp"}],"sha":"4f617cf255f75fc0dc8ee2014844c4557235fc2b"},{"commit":{"message":"8217241: [lworld] Calling convention should handle abstract methods and null-tolerant value args"},"files":[],"sha":"2326027cf97892f40677dc34f63fde53f71a261e"},{"commit":{"message":"[lworld] Disable array covariance tests that failed to compile after JDK-8215507"},"files":[],"sha":"57c5c2a8708ba167cd9154aa903bf4e0b28a33b8"},{"commit":{"message":"[lworld] Re-enabled test5 after 8206274 was fixed"},"files":[],"sha":"b7997eea2111d196c5836a74b27e736c7dfa7e43"},{"commit":{"message":"[lworld] toString throws NPE on uninitialized default value containing null field"},"files":[],"sha":"57179871515f9cd6eeaba884ec096a909e963b06"},{"commit":{"message":"Minor cleanup in value BSMs to handle nullable values"},"files":[],"sha":"71b29c897731857621cfc6a8bd7e2aca2fc19864"},{"commit":{"message":"[lworld] replace MemberName::canBeNull with MemberName::isValue to represent null-free value field"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"ccb7da427a42baf7b2ef18e00a2c359c9169c054"},{"commit":{"message":"8215507: [lworld]: javac should forbid explicit conversion from value array to Object[]"},"files":[],"sha":"c32f7c9f91ccb175836591d8e028da9172eb48aa"},{"commit":{"message":"[lworld] Fixed build after sync with mainline"},"files":[],"sha":"f6c61f63d123f584204530b45c0dfb9c2231bc11"},{"commit":{"message":"Add verifier array covariance comments and fix test so that it fails if the expected exceptions are not thrown\n\nReviewed-by: iklam"},"files":[],"sha":"b4d55fbc9dd5a450cfe4b873fd18135e4f2ad282"},{"commit":{"message":"Merge"},"files":[{"filename":"make\/test\/BuildMicrobenchmark.gmk"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"10faa76e5cd2352d5b8dba916a9505ea41349b17"},{"commit":{"message":"8216465: [lworld][c1] null check is needed when reading non-nullable static fields\n\nReviewed-by: thartmann"},"files":[],"sha":"d23f6fd6495d97dde1dcde6d25d9bf3b44b27818"},{"commit":{"message":"8216327: [lworld][c1] checkcast for value type should throw NullPointerException with null operand\n\nReviewed-by: thartmann"},"files":[],"sha":"0664866f5780855af5aab12c8e6e49b3e5382fd4"},{"commit":{"message":"8216270: [lworld] C2 compilation fails with Error mixing types: NULL and valuetype[3]"},"files":[],"sha":"84a7994cdb2b61ccdb7b5be232a966b270db3059"},{"commit":{"message":"8216260: [lworld] C2 compilation fails with assert(_base == ValueType) failed: Not a value type"},"files":[],"sha":"ce7cfc88aa51526a3011ddcf83360f39c32736b7"},{"commit":{"message":"8216183: [lworld][c1] getfield cannot handle unloaded classes that contain flattened fields\n\nDeoptimize in such cases\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"be77d09917a6afe7ce08fcef8274ad1a118bffe2"},{"commit":{"message":"8206274: [lworld] toString throws NPE on value containing null field\n8207218: [lworld] Update value's hashCode implementation to generate a different value from run to run\n8215642: [lworld] improve toString to include the field names"},"files":[],"sha":"18e377939a85e3101d5dfe0cf955e8ec31f7d356"},{"commit":{"message":"[lworld] Fix isSubstitutable to check the type of both operands"},"files":[],"sha":"42fa33391789912c675fd0e488dffb4a6d8b3da2"},{"commit":{"message":"Add missing #include so build without precompiled headers succeeds\n\nReviewed-by: lfoltan"},"files":[],"sha":"6913c2a07c22ff200938c9dea00fc9daf0d1c1e7"},{"commit":{"message":"[lworld] Removed accidental copy\/paste pushed with JDK-8206139"},"files":[],"sha":"a1a2c0ea56be23619dcffe41b2441f0619326840"},{"commit":{"message":"8206139: [lworld] Re-enable calling convention optimizations\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"8b384e4167a93c5560227f7afef58ed76d3b538b"},{"commit":{"message":"Add the new Unsafe primitives to update values in a private buffer\n\nand test method to test if a field is flattened and if an array class\nis a flattened array.\n\nThe Unsafe APIs for values include the following:\n\nboolean Unsafe::isFlattened(Field f);\nboolean Unsafe::isFlattenedArray(Class<?> arrayClass);\n<V> long valueHeaderSize(Class<V> vc);\n<V> V makePrivateBuffer(V value);\n<V> V finishPrivateBuffer(V value);\n<V> V getValue(Object o, long offset, Class<?> vc);\n<V> void putValue(Object o, long offset, Class<?> vc, V v);\n\nmakePrivateBuffer creates a value instance whose layout and\ncontents is exactly the same as the input value and marks it in\nlarval state and finishPrivateBuffer will exit the larval state.\nIn between Unsafe.putXXX on the buffer will update the larval\nvalue instance.\n"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"f63677ae600d69cd5f6af11d4b0c70bf77030343"},{"commit":{"message":"[lworld] Wrong use of is_Q_signature prevents value klass pre-loading"},"files":[],"sha":"46cb94246059ebc13156cf93871d9d026338b561"},{"commit":{"message":"Add utility methods for substitutability tests for VM to experiment acmp for values"},"files":[],"sha":"a18b64d8101d7528228a89d8ee8c8e43f7925873"},{"commit":{"message":"Add new verifier tests for assignability checks of value types and arrays of value types\n\nReviewed-by: dsimms"},"files":[],"sha":"70bd074fd0c43b7dc1770ac1c12cd670ea1bef7e"},{"commit":{"message":"Fixed tests that broke C1 (no deopt for arraycopy; array covariance)"},"files":[],"sha":"8888a8947c2856dba133f3bd218ca915718b490b"},{"commit":{"message":"8214689: [lworld][c1] aaload cannot handle unloaded class\n\nReviewed-by: thartmann"},"files":[],"sha":"a1638c92d2c91adade8e0e606f6e76d40000a81f"},{"commit":{"message":"Generate indy for value hashCode\/equals\/toString with receiver type"},"files":[],"sha":"544461039ccdaf25c16e872de968987fc76e0aea"},{"commit":{"message":"Minor patch to ASM for Q-Type support"},"files":[],"sha":"efaa7ec7bcfbe3188bdfbdd3b563225f3faa330e"},{"commit":{"message":"8215259: [lworld]: Evolve the byte code API library to handle Q type forms"},"files":[],"sha":"52d7fa8026c05b93ecc889c17254bf2c5ec18475"},{"commit":{"message":"8215246: [lworld]: Latest merge breaks langtools tests"},"files":[],"sha":"f28b0b04acdfd42857513b50aa5e9c278008baa3"},{"commit":{"message":"Minor fix to Q-type and L-type mirror"},"files":[],"sha":"c98e3a4bd967338d6a4f5471df7974a00cfeff2d"},{"commit":{"message":"8215122: [lworld] TestLWold fails with ClassCastException"},"files":[],"sha":"87b1cb68431ee40a7c2ab51c1e405999659a974b"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"abf0883946954809e5ce246857150b6e0603e8b2"},{"commit":{"message":"8215110: [lworld]:  Javac should not generate a null check anymore for checkcast target type being a value type"},"files":[],"sha":"e96500b09af66867761d2b8983b4b35200de80d0"},{"commit":{"message":"8215109: [lworld]:  ClassFormatError: Illegal class name \"QX<TE;>;\""},"files":[],"sha":"64e4cc1681079084a6300ea00645f2a269b25787"},{"commit":{"message":"[lworld] Re-enable quick instanceof with Q-descriptors"},"files":[],"sha":"d2c437979db98c8759db79b76f4772f7b67ea790"},{"commit":{"message":"8214895: [lworld] C2 compilation fails with EA: missing memory path"},"files":[],"sha":"65ee62f66cbddf3e0bf480e47290d47f7559de61"},{"commit":{"message":"8215007: [lworld] Re-enable compiler tests that require null checks at checkcasts"},"files":[],"sha":"09ee7d6eb1603644a1feb90b82c39551fc61dc2d"},{"commit":{"message":"8215006: [lworld] Remove useless leftover code from MVT"},"files":[],"sha":"e0134f85a6e7e4701e31f36f3e142617a01f46dc"},{"commit":{"message":"8214977: [lworld] checkcast should perform a null-check when its CP entry contains a Q-descriptor"},"files":[],"sha":"b89b91442b3f507394dd7889b0e4dc8e205e9d95"},{"commit":{"message":"8214762: [lworld][c1] NewMultiArray should preserve type information\n\nReviewed-by: thartmann"},"files":[],"sha":"097c89bb42725094c2945fd26e55c0645ee3029b"},{"commit":{"message":"8214742: [lworld][c1] Block merging need to preserve type info for flattened arrays\n\nReviewed-by: thartmann"},"files":[],"sha":"59fb1007979a44a325d1d768dd1b385ea9fa5605"},{"commit":{"message":"8214894: [lworld] Allocation elimination should not be blocked by ValueTypeNodes"},"files":[],"sha":"2d69680c05c72d1c6ffb4a174c57ae232de32708"},{"commit":{"message":"[lworld] Add test cases to verify looking up methods with mismatched descriptors"},"files":[],"sha":"b32118ff37f28461fdfb32c7dd520d4ea9885754"},{"commit":{"message":"[lworld] Enable QTypeDescriptorTest to verify JVM native reflection"},"files":[],"sha":"1525199d33b3d51f65dcc886708e1560790714bf"},{"commit":{"message":"[lworld] More fixes related to T_VALUETYPE"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"ed318d34db57b377d135e0f364155d19a35289fc"},{"commit":{"message":"[lworld] Another missing .box declaration"},"files":[],"sha":"d021cf5ab9a10f04ff3c35c76507418c7897d09f"},{"commit":{"message":"[lworld] Added missing .box declarations to avoid NullPointerException"},"files":[],"sha":"b73c3d17b8a0d3d32c95498076225cb3c9e88e48"},{"commit":{"message":"[lworld] Fixed too strong asserts added by 8214717"},"files":[],"sha":"23c0519363170e9e0ace8eb584aa569492fabd6f"},{"commit":{"message":"8214686: [lworld][c1] Crash when invoking methods on value array"},"files":[],"sha":"21218ee90c35d39daa176840b3888f772b073de6"},{"commit":{"message":"8214717: [lworld] C2 should use nullability information (.box\/.val) instead of relying on -XX:NullableValueTypes"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"1aa4a4abd57213048b722649741ea1942e02ec27"},{"commit":{"message":"Test fixes for MethodBuilder.loadCode API change"},"files":[],"sha":"880cba9708124bcd9f023ca125f5b60f44788b45"},{"commit":{"message":"8214706: [lworld] MethodHandle lookup fails with asBoxType() class in MethodType"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"}],"sha":"d6b3af63707256a7f53fdfd40f982c8ce3c6ce24"},{"commit":{"message":"Lworld: Fix test failure around cicularity in class files"},"files":[],"sha":"ec31d383c9a544a4a8bff4d192096167171dbbdb"},{"commit":{"message":"[lworld] temp - disable intrinsic support for arraycopy"},"files":[],"sha":"de8b0bbfc6b620a2f047cb7c3e2c905b5802f524"},{"commit":{"message":"8214426: [lworld][C1] aaload doesn't work with constant index\n\nReviewed-by: thartmann"},"files":[],"sha":"0c8d69ff5f615cabf4430ea7cbbd4cf3b7afead7"},{"commit":{"message":"Update ValueBootstrapMethodsTest.java per Class::toString change"},"files":[],"sha":"2d92dc576eee24d3d63a5acefd09af9f9e819b37"},{"commit":{"message":"Fix macos build after 8214341"},"files":[],"sha":"2d20c8377febba03048ce54a5b85606199d78076"},{"commit":{"message":"8214489: [LW2] Q-mirror and method handle, and reflection initial support for Q-type\n\nReviewed-by: fparain, thartmann"},"files":[{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"76509b6ff168f1c7025ad8887edc5e4527fcd718"},{"commit":{"message":"Change methods in ValueTypeArray.java test to not have arguments of type [Ljava.lang.Object; when arrays of value types are being passed\n\nReviewed-by: fparain"},"files":[],"sha":"6bb8e60d294a0901ad20dd92186e1beec574cf6a"},{"commit":{"message":"[lworld] Refactored TestLWorld and TestNullableValueTypes in preparation for the Q-Mirror patch"},"files":[],"sha":"72f0e9079603ce62c2a4d5cee7f1b46faaada9a3"},{"commit":{"message":"8214341: [lworld][C1] implement anewarray for value type for C1\n\nReviewed-by: thartmann"},"files":[],"sha":"cb26c2afb8492674a66cf0c713fe09563e95e8fc"},{"commit":{"message":"8214307: [lworld][C1] Access to flattened fields does not support nested flattened fields"},"files":[],"sha":"c06d5c9b67d3c1cdcd2f3a809d1630eba570f3d0"},{"commit":{"message":"Lworld: Inserted casts for Q<->L assignments should use erased type"},"files":[],"sha":"037a16bf50c5dbd0c06b040f76ee07d491abb986"},{"commit":{"message":"8214421:[lworld] Q<->L mixing should be via checkcasts"},"files":[],"sha":"721e8d4551f467f0fcca58a4fc3fb61ecf612cc0"},{"commit":{"message":"Verifier changes needed for LW2\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"93ab9c29f96d53acfd998166eb2b59bd149b077c"},{"commit":{"message":"8214299:[lworld] Strange errors from javac when mixing box and val types"},"files":[],"sha":"209617dae84f13946abb1da7e3c41a7c022c817b"},{"commit":{"message":"8214303: [lworld] Value types consistency checks should have been removed with 8214138"},"files":[],"sha":"aab231e39f9b7593275cf821776ed9ba063bea15"},{"commit":{"message":"[lworld] LW2 compiler test fixes"},"files":[],"sha":"1da41153b87dcdcc0c7a867e731fbe1516bc6873"},{"commit":{"message":"Remove generation of ValueTypes attribute in lambda proxy class and method accessor class"},"files":[],"sha":"4bfbbb34147305af7916451b3f8e16d1671a2750"},{"commit":{"message":"[lworld] Make `Q' type signature\/descriptor emission on by default"},"files":[],"sha":"c0ec5136d25bcae705e27e61ee9ca222a18e629d"},{"commit":{"message":"[lworld] Withdraw vestigial code for ValueTypes attribute generation"},"files":[],"sha":"0fdf7a7a1e1ed7d1537dcdb1f691e21077ed053c"},{"commit":{"message":"[lworld] Initial C1 support for value types"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0748b574dc34c5c6fc443d72cb543657cdef9190"},{"commit":{"message":"8214138: [lword] Initial step for the transition from LW1 to LW2"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"ea75439d68d526f6b6d6de1820d9273128288ff6"},{"commit":{"message":"[lworld] Withdraw vestigial references to ACC_FLATTENABLE"},"files":[],"sha":"22369b594d9d6007cfb661691c4ffac12fd1cfe2"},{"commit":{"message":"[lworld] Withdraw support for ValueTypes attribute emission from the experimental bytecode library"},"files":[],"sha":"6818888d202415534bff80fd8ab60f35b2c8f17d"},{"commit":{"message":"8212792 : [lworld] Withdraw support for flattenability modifier"},"files":[],"sha":"237985e8d133767a7651e9f204097a2feeb5be3d"},{"commit":{"message":"8212800 : [lworld] Javac should not emit the ValueTypes attribute anymore"},"files":[],"sha":"97601e70ad75ae99fb9f0e680fad6b6cdc14f554"},{"commit":{"message":"8213173 : [lworld] Add light weight box support for to model nullable value types"},"files":[],"sha":"084653c81aa9901790c08e146f8aeeb73e527ab9"},{"commit":{"message":"[lworld] Restricted Q type emission in Constant_Class_info to anewarray\/multianewarray\/Object_variable_info"},"files":[],"sha":"56a59390b6e741cc97d795ece74574e673842fa9"},{"commit":{"message":"Added tag lworld_stable for changeset 6132641c6ff6"},"files":[],"sha":"7ab6a3cd5507de69f4952e78c23ac84a4fa384a3"},{"commit":{"message":"[lworld] Removed useless checks"},"files":[],"sha":"26ff6ce29ce097acd3d311712a2dd7876f4afcb5"},{"commit":{"message":"8212190: [lworld] Support for nullable value types in C2\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0a07ea9ba9a6ae110e4874c8bd75f144a5b0a647"},{"commit":{"message":"Adjust prototype README & version for LW2"},"files":[],"sha":"1b4a6b2eb84d9e15c8568b8edccadafbbe08f88b"},{"commit":{"message":"8212615: [lworld] Javac's ClassReader has trouble coping with 'Q' types"},"files":[],"sha":"4966196dd5e3f26c51d52f24d828cb860e0b7b5d"},{"commit":{"message":"8212245: Remove Thread-Local Value Buffer\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"f0aa020d9b9c3893078acf926df585e87b40e1f3"},{"commit":{"message":"8212563: [lworld] Javac should emit `Q' descriptors for value types"},"files":[],"sha":"14774ca8511b6e5dc5729f1f88c3a1b0ad1d96b1"},{"commit":{"message":"8212175: [lworld] Trouble creating an anonymous value class with diamond syntax"},"files":[],"sha":"1b2271009a4ce41de94aadbef7443b4ed8e2fc64"},{"commit":{"message":"8211772: [lworld] Support for non-scalarized value types\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"dff5e0ce5b2212dab4f74d808712f068c9733beb"},{"commit":{"message":"8211993: [lworld] TestNativeClone fails with assert(!obj->is_ValueType()) failed: should not cast value type\n\nReviewed-by: roland"},"files":[],"sha":"d4dcc0cbe418b628f67b73067324a6b97990d300"},{"commit":{"message":"8212080: Null checks are missing in withfield for flattened\/flattenable fields in the interpreter\n\nReviewed-by: dsimms"},"files":[],"sha":"ffb0b5a620d884157e01b550bac42709f069796f"},{"commit":{"message":"8211910: [lworld] Reinstate support for local value classes"},"files":[],"sha":"481d2fc068886684736b7178018482eb96dab0d7"},{"commit":{"message":"8211155: [lworld] TestArrays.java fails with \"assertEquals: expected 416 to equal 855\"\n\nReviewed-by: thartmann"},"files":[],"sha":"a7f830548c0e38e34c5ac7e095bdbf8a81d64a6b"},{"commit":{"message":"8206141: [lworld] Improve accessing a flattened value type array passed as Object[]\n\nReviewed-by: thartmann"},"files":[],"sha":"eb990650d4d109f5ab39ae8fc4f718096a332378"},{"commit":{"message":"8211210: [lworld] Compilation fails with \"default value may not be null\" with -XX:+StressReflectiveCode\n\nReviewed-by: thartmann"},"files":[],"sha":"8e8fb1239487fd3960e3b903d093da4e12e61104"},{"commit":{"message":"[lworld] Fixed CmpLNode optimization to use correct input + some refactoring"},"files":[],"sha":"abcab99fc5ae00884ce00cc5b0e5adb170102c93"},{"commit":{"message":"8211153: [lworld] TestNativeClone.java fails with \"Error mixing types: valuetype[1]:{int} and NULL\" when executed with -Xcomp\n\nReviewed-by: roland"},"files":[],"sha":"90240abb43871efe798f46bae674ea26bf4b3181"},{"commit":{"message":"[lworld] Fixed test name in deoptimizeMethod call"},"files":[],"sha":"ed3623b4b1bbaaeeb8c4feb43650706af2c6c440"},{"commit":{"message":"8210351: [Lworld] VM throws incorrect java.lang.IllegalAccessError on withfield operation within the same nest\n\nAllow access if classes are nestmates.\n\nReviewed-by: fparain"},"files":[],"sha":"3b173eedc94ad1cd291b78667e5f583d7cf6f90f"},{"commit":{"message":"[lworld]: Fix build failure"},"files":[],"sha":"9e3b30bc0777ef001dcb32d7ab591534f2a387db"},{"commit":{"message":"8211142: [lworld] Change value class modifier token from \"__ByValue\" to \"value\""},"files":[],"sha":"f9022925d0c3fa6cb2dc5cb27323633fe5991934"},{"commit":{"message":"8210825: [lworld] Javac should tolerate legacy idioms for equality (LIFE) when applied to values"},"files":[],"sha":"1c3ed53ad538bca7d13bfe53ad3e38178083f781"},{"commit":{"message":"8210756: [lworld] C2 should optimize default oop load from known value klass\n\nReviewed-by: roland"},"files":[],"sha":"782519a667191d167bd2aec84f2811737f51676b"},{"commit":{"message":"8210762: [lworld] hotspot test Unsafe\/RangeCheck.java fails with -Xcomp -XX:+EnableValhalla\n\nReviewed-by: roland"},"files":[],"sha":"5b271418bc71bd8d1bf2b70fa38e2bb7a3a8f22e"},{"commit":{"message":"[lworld] Fix test failure; Also cleanup and comment recent change"},"files":[],"sha":"7edec2bae8c6fe85e89c48248a578cf60726283b"},{"commit":{"message":"8210906: [lworld] default value creation should not impose raw types on users"},"files":[],"sha":"74701213cc52ff54ad26923bc2910f4ca75bb660"},{"commit":{"message":"[lworld] Update benchmarks suite with -XDallowWithFieldOperator"},"files":[],"sha":"39aab05dccf30bae3fbad55828a35f89ca3465e9"},{"commit":{"message":"8210847:[lworld] Javac should accept __WithField operator only with -XDallowWithFieldOperator"},"files":[],"sha":"e27026307729e54336506b6ec7bdc2a0a2e0c241"},{"commit":{"message":"8210659: [lworld] ValueTypeNode::load_default_oop() should return constant for known value klass\n\nReviewed-by: roland"},"files":[],"sha":"a7212c02f4bc91d24f03b12fb0ca3c44acc77240"},{"commit":{"message":"8210646: [lworld] C2 compilation fails with \"assert(!target->is_ready()) failed: our arrival must be expected\"\n\nReviewed-by: roland"},"files":[],"sha":"7a8c33acfa0f9696ba193c88d881bb63fdd5bd83"},{"commit":{"message":"Minor test clean-ups suggested by thartmann\n\nReviewed-by: thartmann"},"files":[],"sha":"886e4f62e7094da68dc109e8a8e044c39384ddb2"},{"commit":{"message":"8207168:[LWorld] Withdraw support for __MakeDefault and add support for ValueType.default"},"files":[],"sha":"46655896af713e17f52bdb67344d8af8d02a6259"},{"commit":{"message":"8189802: [lworld] Non-flattened value type array is not initialized\n\nReviewed-by: thartmann"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"95ede3672a0b741f7030fe86f06a6337a3d5d009"},{"commit":{"message":"Remove TestNativeClone.java from the Problem list\n\nReviewed-by: lfoltan"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"580cae7fbfc8711c9e862a62753870d88edca65d"},{"commit":{"message":"8210424: [lworld] hotspot jtreg test compiler\/valhalla\/valuetypes\/TestNativeClone.java fails to compile"},"files":[],"sha":"75f1dae9bfa2ffee0970b870965aee7b7a644003"},{"commit":{"message":"8210260: [lworld] Improve acmp implementation\n\nReviewed-by: roland, jrose"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"944eb8f928d6b68c03504081d37cb7bbc5822c87"},{"commit":{"message":"8209400:[LWorld] Allow anonymous classes to be value types"},"files":[],"sha":"b90dac01347163532ac6da010c649bee0b854a27"},{"commit":{"message":"8209989: [lworld] C2 compilation fails with \"unexpected user of value type\"\n\nReviewed-by: roland"},"files":[],"sha":"ad666bd1cf6d3fe3963bf651e552260d4481cc23"},{"commit":{"message":"8209899: [lworld] dcmd tests crash with \"Unexpected constant pool layout\"\n\nGenerate constant pool ValueType attribute entries after the fields depended on by jcmd.\n\nReviewed-by: mchung"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"662b6d6e8568d8195064cf7bf0ab7277b2b834b6"},{"commit":{"message":"[lworld] Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"7e1272bc1d40d2010c1cdebaf6882f59048f1913"},{"commit":{"message":"[lworld] Merge fixes"},"files":[],"sha":"9086d25b579a19f507949b4370fff5b7f6937c45"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"05f0a0dfdee65f0a4eaad0e0feddaa82cf039c6b"},{"commit":{"message":"[lworld] Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"fc9c5fec144c0ece5b59ebeb0d6524e5768c5bb0"},{"commit":{"message":"8210346:[LWorld] inferred value typed `type arguments' are allowed by Javac even without -XDallowGenericsOverValues"},"files":[],"sha":"0391887b1c8023cdba57bb556ebc68c30fa6c3ea"},{"commit":{"message":"[lworld] Fix test failure post merge"},"files":[],"sha":"468736ae4d63b8b36c94b06d4a2b27fbff65ea26"},{"commit":{"message":"8210310: [lworld] Javac allows invocation of identity sensitive jlO methods on values via super"},"files":[],"sha":"cac938d3395097b8bcc21ff4f8e7d5c6f99628fc"},{"commit":{"message":"8210122: [lworld] javac issues bogus \"no comment\" doclint warning while compiling value class"},"files":[],"sha":"1b9cb0cf0ed1a2f925b9012564818e348425dc80"},{"commit":{"message":"Don't run hs\/compiler\/aot tests if +EnableValhalla\n\nReviewed-by: fparain"},"files":[],"sha":"68d8269f347898b0c9207a04034fae8625b57e5b"},{"commit":{"message":"8209134: [lworld] New nmethod entry point for unscalarized (nullable) value type arguments\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"a4b56b7dd7e46339805c01f002527c376a6a591b"},{"commit":{"message":"Add acmp benchmarks"},"files":[],"sha":"1f2794c448e0607ba53345074cf189d98fd62ec8"},{"commit":{"message":"8209896: [lworld] IncompatibleClassChangeError thrown when defining a lambda within value type\n\nReviewed-by: forax, fparain"},"files":[],"sha":"21b126b3a9f9136dc1b4d4d7a1c715ef16b604b2"},{"commit":{"message":"8205026: [lworld] EnableValhalla regression testing\n\nFix tests that need special handling when potentially run with -XX:+EnableValhalla\n\nReviewed-by: lfoltan, thartmann"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"54ebd7de0e651ae97dca44452bd16446fcc76713"},{"commit":{"message":"8209702: [lworld] C2 compilation fails with \"assert(argument(0)->bottom_type()->isa_ptr()) failed: must be\"\n\nReviewed-by: roland"},"files":[],"sha":"3ebc35dbdefaf8d1f7f5a891d46f6e256e059fa3"},{"commit":{"message":"Add missing #include to fix build with no precompiled headers\n\nReviewed-by: dsimms"},"files":[],"sha":"394913a65e2d74f092cfb782b234f414e6214389"},{"commit":{"message":"Bad merge, more parentheses"},"files":[],"sha":"eb66d79a40d169089c69dfd04cefe1c753865e39"},{"commit":{"message":"Fixed timeout on debug builds"},"files":[],"sha":"05f00f0779dfc783b0bf747a150c99f67d2ec633"},{"commit":{"message":"8209687: [lworld] C2 compilation crashes in AddPNode::Value\n\nReviewed-by: roland"},"files":[],"sha":"08568bd31c735edc6401b58145ee8be8938083fb"},{"commit":{"message":"Post merge fixes"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"c2a2f9570f6bafbc871a0730aaa0eb2129a2f5f1"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"8570b8ae4605337793e40f7954e82438909f3888"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java"}],"sha":"8b12da53c23e4b7aeb3fb7cb6dbeb88bbe98f422"},{"commit":{"message":"[lworld] Refactoring of acmp related code"},"files":[],"sha":"86deb71dfba4210a5c5a97a2e21b2ce99f44ff1d"},{"commit":{"message":"8209443: [lworld] byteMutation test asserts intermittently in the verifier\n\nAdd check for uninitialized type before calling VerificationType::name()\n\nReviewed-by: fparain"},"files":[],"sha":"31af14f27fa3c49c2748f0640831b86e68f22363"},{"commit":{"message":"8209009: [lworld] C2 compilation fails with 'assert(ptn != __null) failed: node should be registered'"},"files":[],"sha":"6ad2eac6b720e4c067378c06c50a0019795549b4"},{"commit":{"message":"Added tag lw1_0 for changeset d2aa5d494481"},"files":[],"sha":"609846603a614fd1685ddc55d12cfe2735d45496"},{"commit":{"message":"8206140: [lworld] Move return value null checks into the callee\n\nReviewed-by: thartmann"},"files":[],"sha":"b94360ed960f6b1cda862d7fab8b7e0090b50328"},{"commit":{"message":"8207788: [lworld] multinewarray bytecode should check for ValueType inconsistency"},"files":[],"sha":"eaa4119310cc9a6fdc80965b64d236642ab2f5d5"},{"commit":{"message":"Add -XX:+IgnoreUnrecognizedVMOptions to test because -XX:+AlwaysIncrementalInline is a develop flag\n\nReviewed-by: thartmann"},"files":[],"sha":"1cb04afbbde15f1fd2ea6ea3ce19ab57480f8abd"},{"commit":{"message":"8208162: Support for multi-dimensional value arrays is incomplete\n\nReviewed-by: fparain, acorn"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"2e937a536aa1738a6b684878c8fc19bc194196ed"},{"commit":{"message":"Adjust prototype README & version"},"files":[],"sha":"74320bc803be9a96f879f20a1bbddf9fdfff6519"},{"commit":{"message":"[Lworld]: Test value instance creation using new under separate compilation"},"files":[],"sha":"5ec130fc1e9a518873d46eecedae848eb307a3f6"},{"commit":{"message":"[Lworld]: Test value instance creation using new under separate compilation"},"files":[],"sha":"6689fd2ff9a4117c12adb275c400ebb0ee470d27"},{"commit":{"message":"8207848: [lworld] Compilation fails with \"must have enough JVMS stack to execute invokevirtual\"\n\nReviewed-by: roland"},"files":[],"sha":"be2e729adfd49da51c10280b91da27a3ca15bd42"},{"commit":{"message":"8207344: [lworld] hotspot jtreg test TestArrayCopyAsLoadsStores.java fails with EnableValhalla\n\nReviewed-by: thartmann"},"files":[],"sha":"f887333114f1e54c8df053b9d3ff5d6dc7cc470d"},{"commit":{"message":"[lworld] Cleanup of 8207844\n\nReviewed-by: jrose"},"files":[],"sha":"2c8174dba6002284ba453a848f7a358710db41ee"},{"commit":{"message":"[lworld] Added missing -XX:+UnlockDiagnosticVMOptions to TestNewAcmp.java\n\nReviewed-by: thartmann"},"files":[],"sha":"65414d74b3b9cdf41af62674e5c8b55b4c81286f"},{"commit":{"message":"[lworld] Compiler tests cleanup\n\nReviewed-by: thartmann"},"files":[],"sha":"c8369a327596f63da9713d80dca86570df3cb976"},{"commit":{"message":"8207790: [lworld] update reflection to generate ValueTypes attribute\n\nReviewed-by: dsimms"},"files":[],"sha":"6d1135b597403810d2b40b5b32fe1fe8d9b5b1e9"},{"commit":{"message":"8207844: [lworld] Crash during method resolution because value type holder is not linked\n\nReviewed-by: roland"},"files":[],"sha":"047a1456922b757071fcbd613178082a21b50101"},{"commit":{"message":"8207242: [lworld] TestLWorld fails with \"assert(_base >= AnyPtr && _base <= KlassPtr) failed: Not a pointer\"\n\nReviewed-by: roland"},"files":[],"sha":"d23929984335421cafd8281ece21bd61665afc64"},{"commit":{"message":"[lworld] Refactoring of changes for 8205044\n\nReviewed-by: jrose"},"files":[],"sha":"0cf35fcd12da096f4ea0545b7993774e8854d2ab"},{"commit":{"message":"8207815: [lworld] JVM_GetArrayElement and, JVM_SetArrayElement don't work for flatten array\n\nReviewed-by: jrose"},"files":[],"sha":"082f3494e906b335a2141eb66fc6cd2c4c678489"},{"commit":{"message":"8207773: [lworld] C2 should not allocate when returning a value type as Object from an inlined method\n\nReviewed-by: roland"},"files":[],"sha":"9d4c2e1d715c48b1d1bece90de5d63dbacdd7629"},{"commit":{"message":"8207346: [lworld] C2 fails with \"already heap allocated value types should be linked directly\"\n\nReviewed-by: roland"},"files":[],"sha":"e3d5c110138e9ecace96ac56a010d71ddb46d36d"},{"commit":{"message":"8207197: [lworld] VarHandle array support for value types\n\nReviewed-by: dsimms"},"files":[],"sha":"ffb8bb488e74e323a92c4ba474bfef8b50669b09"},{"commit":{"message":"8207401: [lworld] TestLWorld.java crashes java_lang_String::create_from_symbol\n\nReviewed-by: hseigel"},"files":[],"sha":"ef13f2315b33a88bb935678442a1dc6017c276cb"},{"commit":{"message":"8205910: [Lworld] Diagnose use of 'this' with DU fields (for VTs and VBCs)"},"files":[],"sha":"8a9d488fd5f81532cafaf86236d63386a50c5561"},{"commit":{"message":"[Lworld] Emit slightly better byte code sequence for withfield operation involving fields of category 1 computational type"},"files":[],"sha":"1f4a31fd48315f05c0dc8308a8ef6a3e242a119c"},{"commit":{"message":"8207194: [lworld] Update InnerClassLambdaMetafactory to add ValueTypes attribute in generated class\n\nReviewed-by: forax, hseigel"},"files":[],"sha":"fc82703670c3353c0198b2b1efb2b52efe9260e3"},{"commit":{"message":"8207332: [Lworld] Javac generates bad code for value constructors involving chained assignments"},"files":[],"sha":"843366740ecca5a6cfe0e7833fbe35ff9052f70f"},{"commit":{"message":"8207341: [Lworld] Javac generates bad code for value constructors when expressions with side effects are involved"},"files":[],"sha":"fab3b15d39566f7b1775924101d2da8d9f05aa18"},{"commit":{"message":"8207040: [lworld] TestLWorld fails with \"Meet Not Symmetric\" with -Xcomp\n\nReviewed-by: thartmann"},"files":[],"sha":"145a26f706f392c1cd02e2edfa841b504243be41"},{"commit":{"message":"8207330: [Lworld] Javac fails to mark the synthetic field holding enclosing instance as ACC_FLATTENABLE where it should"},"files":[],"sha":"aeab60993055180d7fc25c288ad498c4e239f809"},{"commit":{"message":"8206112: [lworld] TestLWorld fails with 'bci must not shift' with -Xcomp"},"files":[],"sha":"abd9aa5bc6e59a1b738f4ea1dc96ca334f133572"},{"commit":{"message":"Lworld: Eliminate redundant null check inserted by javac"},"files":[],"sha":"44409f29b6d940dd721fabb994838b7a0da3ff5f"},{"commit":{"message":"8207205: [lworld] Unsafe\/VarHandle read-modify-write value accessors\n\nReviewed-by: acorn"},"files":[],"sha":"7a64b3ef8ad573f7fa885b27b3742f7c98f7ff17"},{"commit":{"message":"8207207: [lworld] test\/jdk\/valhalla\/valuetypes\/ValueBootstrapMethod fails with ICCE\n\nReviewed-by: acorn"},"files":[],"sha":"a40ef9302db9ffe330ea14c9427d99c23a02ea09"},{"commit":{"message":"8206002: [lworld] ValueTypesTest fails with 'assert(Universe::heap()->is_in_closed_subset(o)) failed: should be in closed'"},"files":[],"sha":"c347291b9279e290fa67f8c1e0b572763f66ae43"},{"commit":{"message":"8198749: lworld: Translation of value constructors in classic constructor notation\n\nReviewed-by: mcimadamore"},"files":[],"sha":"b8f9cd5447e27f397ef4796fb4a247bb9b5692a6"},{"commit":{"message":"8205044: [lworld] Interpreter and compiler support for acmp with value type operands\n\nReviewed-by: roland, iklam"},"files":[],"sha":"c2f80cd417e1ee358c200162170da1f7cd6d83b2"},{"commit":{"message":"Add value types consistency checks\n\nReviewed-by: acorn"},"files":[],"sha":"27316c64b0c4ac840ef90dca0a6783ae635abccf"},{"commit":{"message":"[lworld] Enable runtime tests with -Xcomp and fix indentation"},"files":[],"sha":"30ffd08f91b090727959e5521cd924d690b65ff6"},{"commit":{"message":"8206108: [lworld] TestEliminateAllocationPhi fails with SIGSEGV in PhaseMacroExpand::expand_allocate_common\n\nReviewed-by: thartmann"},"files":[],"sha":"26fdf22bac2d92b11ad98722342ab3f9142999b1"},{"commit":{"message":"Lworld: Some cleanup in preparation for value type constructors support"},"files":[],"sha":"24c3256db46c595edf9e56eb645931b0411923e7"},{"commit":{"message":"8206904: [lworld] fix Unsafe get* with value types\n\nReviewed-by:\n"},"files":[],"sha":"293a0848cbd79a91d8c7a3ebd4d7a5f8708d6931"},{"commit":{"message":"8204615: [lworld] C2 support for java.lang.Object methods on value types\n\nReviewed-by: roland"},"files":[],"sha":"ba727f4a634ca36ebb14ac8b7d87846f3157ab68"},{"commit":{"message":"8206121: [lworld] ensure non-nullable on setting value field via reflection and VarHandle\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"dc972fb7370681dfb786b651b7c6ba094d33b9c1"},{"commit":{"message":"Add -XDallowEmptyValues to JTReg test ...\/valuetypes\/Empty.java so it will compile\n\nReviewed-by: forax"},"files":[],"sha":"0ae9b3f8a3b618b8f353d561aa4ea38a3e48ae8d"},{"commit":{"message":"8206245: [lworld] C2 crashes when merging values with different types\n\nReviewed-by: roland"},"files":[],"sha":"d87b6a6782bdfbf914ae3a9337f6ea5b12c0d855"},{"commit":{"message":"Lworld: Allow empty values under the option -XDallowEmptyValues"},"files":[],"sha":"58bef04a0144ebb2c7f754cdd302b8bc09a92cf2"},{"commit":{"message":"8205437: [lworld] java\/lang\/invoke\/condy\/ConstantBootstrapsTest.java fails to compile"},"files":[],"sha":"75cdd822f6b2d0bf220f51b547e050c12ad10c21"},{"commit":{"message":"8205686: [lworld] __WithField seems to have trouble if the value type is a generic type"},"files":[],"sha":"4b1c1986ef17bfe5c1bb9bff6888fcdeb43ec3b1"},{"commit":{"message":"8206147: [lworld] Javac crashes with assertion failure while handing withField when field involved is private and of inner type"},"files":[],"sha":"0eb67b61a62c694d741778a60db38d804bfc4b95"},{"commit":{"message":"Add #include logging\/log.hpp in unsafe.cpp"},"files":[],"sha":"833b2dd830109226544197c3b0a4e16be6151562"},{"commit":{"message":"8205549: [lworld] Unsafe support for flattened field of value type\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java"}],"sha":"dd351fb5756b3499202740b83581b01d4a12d3d6"},{"commit":{"message":"[lworld] Fix pack200 failure due to unevolved attribute visitor"},"files":[],"sha":"0f7314f9447b3dfa25c235754dbe6e6c8e9de1b7"},{"commit":{"message":"[lworld] At compile time, disallow declaring value classes with no instance fields"},"files":[],"sha":"3c155284899ed15a6f095a11fa937f5591d4f70a"},{"commit":{"message":"8206109: [lworld] TestLWorld crashes in ciInstanceKlass::get_field_by_offset() with -Xcomp"},"files":[],"sha":"a68e0266257cb8716118a2e334ed0d6416803dea"},{"commit":{"message":"8206110: [lworld] TestIntrinsics fails with 'Not a Java pointer' with -Xcomp"},"files":[],"sha":"20ecc59cd08f00b5d08d644706a216b2fcbb4a90"},{"commit":{"message":"8205944: [lworld] hotspot TestArrays.java test fails when -XX:CompileThreshold=100 is specified"},"files":[],"sha":"a039e02fbbeb76b5c158dc0b63c7388741763d58"},{"commit":{"message":"[lworld] Fixed SIGILL caused by incorrect patch for 8205340 and renamed 'flattenable' parameter"},"files":[],"sha":"67145b3640492cd3b86e9965c9b03996343bf2d2"},{"commit":{"message":"[lworld] Cleanup of null checks\n\nReviewed-by: jrose"},"files":[],"sha":"d6630bbcac891ee6b0163a83f523d46dfa2cfaa0"},{"commit":{"message":"8205998: [lworld] Verifier should reject value type classes if -XX:+EnableValhalla is not set\n\nAdd check for this to classFileParser and throw ClassFormatError if need be.\n\nReviewed-by: acorn"},"files":[],"sha":"30b5caf70f65903e2706569c3396260c082204c3"},{"commit":{"message":"8205340: [lworld] Re-enable _hashCode, _identityHashCode and _newArray intrinsics\n\nReviewed-by: thartmann"},"files":[],"sha":"6af7e8c52bcf96e1165c984e77b46f360d858fd3"},{"commit":{"message":"[lworld] Multiple compiler fixes and refactoring\n\nReviewed-by: roland"},"files":[],"sha":"e5a99395d800096f3ae7f9e734b294a4a57b3c19"},{"commit":{"message":"[lworld] Fixed compiler tests by adding -XDallowFlattenabilityModifiers"},"files":[],"sha":"dbc25ffeb9251366bd2112ef4c836080fd8ac04f"},{"commit":{"message":"[lworld] Adjust failing runtime tests by adding suitable options"},"files":[],"sha":"d485a9ac8c4438756ffc140f71cdb9e83b1d7556"},{"commit":{"message":"[lworld] Restore support for the __Flattenable and __NotFlattened field modifiers under the internal experimental mode -XDallowFlattenabilityModifiers"},"files":[],"sha":"0798354add607354868a135d536dab1c053d3ec6"},{"commit":{"message":"[lworld] Withdraw support for the __Flattenable and __NotFlattened field modifiers"},"files":[],"sha":"89891a2b3e6af13dcc82d2f0fc5fa278bb75296b"},{"commit":{"message":"[lworld] Fix test failure due to missing option"},"files":[],"sha":"e83685a06f94c3784d49af0a4bf18bc427bca771"},{"commit":{"message":"[lworld] Javac should not recognize or specially handle value based classes (unless invoked with the experimental mode -XDallowValueBasedClasses)"},"files":[],"sha":"539d6dba13a4a233c5649d963d445028ff2e8991"},{"commit":{"message":"[lworld] Forbid value types from being type arguments in generic parameterizations \/ bounds \/ witnesses (allowed for experiments under -XDallowGenericsOverValues)"},"files":[],"sha":"24612575a6de81316b7d96b162fd9f1417d9344f"},{"commit":{"message":"[lworld] Additional test for value finality in class files"},"files":[],"sha":"a24598679fcd6e46f7aa13ae86cced1c367469b5"},{"commit":{"message":"[lworld] Relax the requirement that value classes and their instance fields must be explicitlymarked final; Make them implicitly final automatically"},"files":[],"sha":"499207dfbb302f4719fb1b1ba97652a44653ee6f"},{"commit":{"message":"Add test to verify hashCode\/equals\/toString"},"files":[],"sha":"a48d3bc7b5348b586c8c1d7f9fbd7f7a86cfe127"},{"commit":{"message":"Typo fix"},"files":[],"sha":"19b3c5994ad9fba7f768b96bccc6911b98babf34"},{"commit":{"message":"README.html - short benchmarks description is added"},"files":[],"sha":"fd8310b407d73b57e3de3ce40110271e4977d1bb"},{"commit":{"message":"Typo fixed"},"files":[],"sha":"79f5f27c362cf002f788358ab43e66d174c005ac"},{"commit":{"message":"[lworld] Javac should emit a synthetic longHashCode() method only if the programmer hasn't supplied one"},"files":[],"sha":"be06492e9ac4d768c9e2cb25efc68ddcf84f5b40"},{"commit":{"message":"Remove static arg from hashCode BSM"},"files":[],"sha":"850875430e6bd7493e859526167f11deeda9f464"},{"commit":{"message":"[lworld] Javac support for generating hashCode\/equals\/toString for value classes that hook into value bootstrap methods in the runtime via indy"},"files":[],"sha":"9dc99741221121a7633f923e51b7f8d8b1a84645"},{"commit":{"message":"Re-enable VarHandles test to run with -XX:+EnableValhalla and JIT\n\nReviewed-by: thartmann"},"files":[],"sha":"52a5e2fcf63737dcc3f71bc1d45e9e52400b76b4"},{"commit":{"message":"8204953: [lworld] TestArrays.java crashes with \"assert(is_in_g1_reserved((const void*) addr)) failed: Address 0x00000005d56dd5f0 is outside of the heap\"\n\nReviewed-by: thartmann"},"files":[],"sha":"e34a8280d54b7722dbff524c3ebbaad7571f48c8"},{"commit":{"message":"8204954: [lworld] FlattenableSemanticTest crashes with assert(false) failed: DEBUG MESSAGE: null oop passed to encode_heap_oop_not_null2"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"dbffc9ee91f1f6da87ad6eb5646ad5f8020dac9c"},{"commit":{"message":"Fixed copy_array use case objArray to objArray where dest element klass is specifically a value type"},"files":[{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"bcb74612e7ccf05553e08fe7b54695df592fcb51"},{"commit":{"message":"[lworld] [Testbug] Avoid early compilation in TestArrays.java"},"files":[],"sha":"6a905bfbc1cfb65d7f3a946ccbc73e2f03929906"},{"commit":{"message":"[lworld] C2 fixes for crashes with TestMethodHandles.java"},"files":[],"sha":"b32d1a2470d3173ed88edd9c6fd80df0e158fbbd"},{"commit":{"message":"[lworld] C2 arraycopy intrinsic fixes\n\nReviewed-by: roland"},"files":[],"sha":"05e2868f406b7aa3e9c301eaa85a20b23f1b6c57"},{"commit":{"message":"8203293: [lworld] Test does bypass on javac null checks"},"files":[],"sha":"ba39f169d924ce65d7abc524ebeed88f11d6088d"},{"commit":{"message":"[lworld] Handle casted value type receiver in GraphKit::gen_instanceof"},"files":[],"sha":"9b97dc4e4e9acf37dabe5a9d1dcf1be474a66fd7"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"1df8207a5970e62cd4cfd9f69714c4f0a5d8ada2"},{"commit":{"message":"[lworld] Additional enhancement to the bytecode library with an API for easy emission of ValueTypes attribute"},"files":[],"sha":"717d0d7d3689e677f26c3bd9ce59e4463f83e9af"},{"commit":{"message":"Initial library support for generating BSM for value type's hashCode\/equals\/toString\n\nReviewed-by: psandoz"},"files":[],"sha":"8a2d310e29be708c61ab40da55c8fa8b7d363944"},{"commit":{"message":"Type system fix + fix to cast from profiling + fix to interface call on known value"},"files":[],"sha":"6227d644b5abfb8d350abb30dcd84b108004a196"},{"commit":{"message":"[lworld] Enhance the bytecode library with an API for easy emission of ValueTypes attribute"},"files":[],"sha":"c2faa7dce0f74c8fe8912d9f2dd777d0a7307001"},{"commit":{"message":"[lworld] Fix tests that are failing post merge"},"files":[],"sha":"071e70756a7cbbfb1dc47900809bf16eae7c3a22"},{"commit":{"message":"Arraycopy\/copyOf\/clone intrinsics fixes for Lworld"},"files":[],"sha":"09f099cab74c483c4aee3e927f2bc3c41ad784c9"},{"commit":{"message":"[lword] Add initial set of valhalla lword benchmarks"},"files":[],"sha":"6b9dd9c7b54a5ee4e17d122ea840011fe10b89e4"},{"commit":{"message":"Add verifier checks for when a reference can and cannot be a value type\n\nReviewed-by: acorn"},"files":[],"sha":"040d65db4fb5334d2d6e8a877b3a4a577fe5dce5"},{"commit":{"message":"[lworld] Move null check from method entry into i2c adapter\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"}],"sha":"9de8ea4d7d75d36d21707e26c062a4cfaf5fc17a"},{"commit":{"message":"[lworld] Cleanup: remove TypeValueTypePtr\n\nReviewed-by: roland"},"files":[],"sha":"656178a99f6c4c98a05722def56bdfd358f1a79f"},{"commit":{"message":"Update the hotspot JTReg Valhalla BadValueTypes.java test for the ValueTypes attribute\n\nReviewed-by: acorn, dsimms"},"files":[],"sha":"9af9b4d59c1cfbb3c674738424e8ba5e336a3c61"},{"commit":{"message":"Merge Fixes"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"f9fe99ac6fc6520c12e307ef2083dd76b22c715d"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"264859156c4742e86b59a0a5b36eb36e4aabf5a1"},{"commit":{"message":"Add support for the ValueTypes attribute"},"files":[],"sha":"32a3bb21cc9a091b776277967258ec8a432bce49"},{"commit":{"message":"8202861: [lworld] update jdk value type tests not to declare static field of its own value type\n\nReviewed-by: psandoz"},"files":[],"sha":"4e501d41d5edb49de8b6652a67db92b1413eea35"},{"commit":{"message":"Object methods on values"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"f61f8d4e49ff6aef763cf6f85f2b5119c11d7236"},{"commit":{"message":"Instanceof and Class.isInstance() fixes"},"files":[],"sha":"14d0dde9d95e1094cfffa5bedf2c61d20f5ac352"},{"commit":{"message":"[lworld] Fixed build on macosx"},"files":[],"sha":"4051be2797e5af68a04f89bf178495b8e339c6df"},{"commit":{"message":"[LWorld] Value type array support for C2 (and lots of bug fixes)\n\nReviewed-by: roland, dsimms"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"9b833c12929d306b604665cb4cf97147e3854c91"},{"commit":{"message":"[lworld] Javac\/Javap support for \"ValueTypes\" attribute to tabulate all value types encountered in the compilation\/generation of a class file"},"files":[],"sha":"497f094f77d996b05661b5da92afc30f2507ff72"},{"commit":{"message":"Fix checkcast with value types"},"files":[],"sha":"c781d0dbb56a1f000964779528109349fbd5a83e"},{"commit":{"message":"[lworld] Compiler tests for value types that implement interfaces"},"files":[],"sha":"b6beecf30ae6189ced5239babf6bd6cb84e5a88f"},{"commit":{"message":"Fix stack map creation in byte code API"},"files":[],"sha":"de815fd82837967d51162888789487cdcbc833d5"},{"commit":{"message":"Lworld C2 fixes"},"files":[],"sha":"8a4951ba28d865483928d83236767681eaf13785"},{"commit":{"message":"[lworld] Emit a warning on potential null pollution into value based instances"},"files":[],"sha":"0a26b1ebc78edd348844a739b6d116a69ed2bfc0"},{"commit":{"message":"8201329: [lword] Interpreter crashed on attempt to allocate two-dimensional array of values"},"files":[],"sha":"1f4cf66ee5fae801fe6e700e442401a30fcdf5a5"},{"commit":{"message":"Fix flag definition conflict"},"files":[],"sha":"5b3f1386419e7fb30feaf7e593f03fa13338df26"},{"commit":{"message":"Enabling quickening for getfield and putfield"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"563b138dccc659383e8436ff8ff5f2b13e6e9361"},{"commit":{"message":"[lworld] Initial C2 support for LWorld value types"},"files":[],"sha":"c03a4342c094148f5612f5017d537eb516ea2cd1"},{"commit":{"message":"Use __NotFlattened field modifier, remove tabs"},"files":[],"sha":"93cb6887937c0bb50a66f20d206aa15d18707b89"},{"commit":{"message":"[lworld] Introduce a new annotation java.lang.ValueBased to distinguish migrating value based classes from pure value types and implement leniet semantics for them; Also flip the default for ACC_Flattenable"},"files":[],"sha":"654ff41a2a5fc115598c04b6917d953397536cfd"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"0a98b25168950c1b2113abb08a0ecf671e794af3"},{"commit":{"message":"[lworld] test_value_is_not_buffered() must use cmpq instead of cmpl"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"}],"sha":"b26487faa72e0990d1a3230cd2082886a4f92e31"},{"commit":{"message":"For withfield opcode, check that its reference on the stack is the same as its constant pool fieldref's class\n\nReviewed-by: dsimms"},"files":[],"sha":"888c67ad122168b61e0c1eab5a7c715097d319f7"},{"commit":{"message":"[lworld] Fixed scalarization for flattened value type arrays"},"files":[],"sha":"8d154b02d57fb3cab3d763640c9512a60255e06e"},{"commit":{"message":"Add VarHandle tests for value types\n\nReviewed-by: psandoz"},"files":[],"sha":"d062e12d4e2ddd2d8762537e9229bb8394a141b9"},{"commit":{"message":"Disallow Field::setAccessible on value type fields"},"files":[],"sha":"0ba44bcb54d469167c3d1edf4b27751a02737887"},{"commit":{"message":"Clean up some comments"},"files":[],"sha":"81d26dd24a1caac9835ed87686c69e1278550055"},{"commit":{"message":"Compiles on Windows"},"files":[],"sha":"4ab0ed8e4cd10795d40638005d8f613aca196a08"},{"commit":{"message":"Fix osx build failure due to missing #include header file"},"files":[],"sha":"ba8301c38d0446e6acb5b01351b20d6f860b081f"},{"commit":{"message":"Fix method supports_value_types() and ignore ACC_VALUE and ACC_FLATTENABLE in old class file versions\n\nReviewed-by: acorn"},"files":[],"sha":"0672e7b2a4c5b10fd066c22a1cfc5814fc59628e"},{"commit":{"message":"[lworld] Compiler cleanups part 2"},"files":[],"sha":"7c79f415e4a74f59df8c68378bc4c9ab7283f164"},{"commit":{"message":"Initial lworld array support runtime\/interpreter"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"}],"sha":"79d97ff0001266ff4fa6db1b827ccb2f952f4a3c"},{"commit":{"message":"Add value type specific ClassFormatError checks and add appropriate tests\n\nReviewed-by: acorn"},"files":[],"sha":"f98e970db1f5212340c8f3adc1cffc6a9bd28b18"},{"commit":{"message":"Fix withfield verifier bug and add verifier lworld tests\n\nReviewed-by: acorn"},"files":[],"sha":"7abcbaf50dafe8a68be4ec11effbef2ed3bbae71"},{"commit":{"message":"Re-enable thread local value buffering and template interpreter clean up"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"0ceadcc4a6f956aa6e2860cf22609c2d75ca42fc"},{"commit":{"message":"More mvt clean up in lworld"},"files":[],"sha":"3878b5cf94516e31ad856414d053df025666c713"},{"commit":{"message":"Fix jdk.experimental.value.MethodHandleBuilder with proper class names"},"files":[],"sha":"ef95aff2720fbf5e60fd716da46db6d5f5f19bae"},{"commit":{"message":"Interpreter cleanup"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"}],"sha":"fc0445597e58a413473a91abfa6f64eadbef00a3"},{"commit":{"message":"Update jdk.experimental.bytecode API that supports condy\n\nReviewed-by: psandoz, mcimadamore"},"files":[],"sha":"3d7f29a4c620add768a92e66e188e3265c32c470"},{"commit":{"message":"[lworld] Compiler cleanups part 1"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"5665dac81dfba128c656435d976cf64f470127e9"},{"commit":{"message":"[lworld] Replace old \"v\" bytecodes with lworld"},"files":[],"sha":"c7bee328c687b29cf56a26fd65e1e69d6c821c21"},{"commit":{"message":"Interpreter fixes for bytecode rewriting and withfield bugs"},"files":[],"sha":"11806b1f76a05cafd8f2b868a465e018853aedb1"},{"commit":{"message":"[lworld] Constant progagation should continue as is for static final fields"},"files":[],"sha":"c55daa06b44beaef6feec2177c67477b243b48ba"},{"commit":{"message":"[lworld] Assorted cleanups to javac code after code review"},"files":[],"sha":"fd7c5d7902cd8079f7c6583b0bbd1ceba59a04e6"},{"commit":{"message":"[lworld] Withdraw dangling references to stale opcodes and other minor cleanups"},"files":[],"sha":"3c2011d0d6a04b20390f12e527f1b86a4c70b1e0"},{"commit":{"message":"[lworld] Cleanup lingering vestigial traces of 'Q'isms"},"files":[],"sha":"1751c538bc8ff6bf86576f69877fd85bfdc1d1ae"},{"commit":{"message":"[lworld] Remove mvt from version string"},"files":[],"sha":"3b331494d13c94db0991dcae06f6cbec3079c9c2"},{"commit":{"message":"8197909: [lworld] Change Javac's diagnostic emission strategy for cyclic.value.type.membership"},"files":[],"sha":"1859431f5de1f960b705515f433354498d2a7ff9"},{"commit":{"message":"8199452: [lworld] Check#checkRefType is too strict and forbids various legitimate operations on value classes"},"files":[],"sha":"f93a3a7e4c7fab589e151534bfc1fe798d30d0b5"},{"commit":{"message":"8198748: [lworld] Javac should insert null checks at casts to value types"},"files":[],"sha":"5da8c642157dbd515bb531642ef3114ff1bf172c"},{"commit":{"message":"[lworld] Basic runtime test for withfield behavior"},"files":[],"sha":"a8362d344be033d13037a8cfc82444df64a9826a"},{"commit":{"message":"Remove CONSTANT_Value* and related MVT code\n\nReviewed-by: lfoltan, thartmann"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"98475250c00d413916a6d22ae9a1e2da3a5edb4f"},{"commit":{"message":"Update tests to run with verifier on\n\nReviewed-by: mchung"},"files":[],"sha":"cd8407588d75019ee918203c4c9500a792ffcdd4"},{"commit":{"message":"Add test cases for accessing value types via core reflection and VarHandle\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"}],"sha":"b195aca910ae9b1c241d22025104a7b16783e7f5"},{"commit":{"message":"Minor fixes"},"files":[],"sha":"4b1c6be3fcf7a5a06754040d4bf020ef1b3c09c7"},{"commit":{"message":"Second step in migrating toward the L-world value types\n\nReviewed-by: acorn"},"files":[],"sha":"1730dabd186fc58052c85fc368731d129435aa30"},{"commit":{"message":"[lworld] Changes to the experimental bytecode library to support L-World values"},"files":[],"sha":"12bc1695fdccf09bda7ebdb36c4ae9f20755b7c1"},{"commit":{"message":"[lworld] Fix langtools test failure due to JCWithField AST node positions not being computed properly"},"files":[],"sha":"f164a123d2eac73765f83290681d905a4d0cf14b"},{"commit":{"message":"[lworld] Withdraw support for assignment syntax for value instance field updates (use __WithField operator instead)"},"files":[],"sha":"1f1ae9ee7e22524bea8b8b3737aabaf24763729e"},{"commit":{"message":"[lworld] Add support for __WithField operator"},"files":[],"sha":"1202b7fd8a469f9e4d4865267d75d3209785c17f"},{"commit":{"message":"Remove MVT verifier changes and prototype LWorld verifier changes\n\nReviewed-by: acorn, fparain, lfoltan"},"files":[],"sha":"c2cf25af5bc411fcf14a834aa5f9c5b142a68aa3"},{"commit":{"message":"Drop jdk.incubator.mvt and MVT change from MethodHandle and reflection\n\nReviewed-by: acorn"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"6b157e57d9f22707d4603cea81e4bda86b7dfbec"},{"commit":{"message":"[lworld] Where statically discernible, javac should reject null assignments to, null casts to and null comparisons with value instances"},"files":[],"sha":"d584f74e38456104c8c6fcadc97722e413bc9418"},{"commit":{"message":"[lworld] Withdraw @Flattenable annotation and introduce __Flattenable modifier"},"files":[],"sha":"43c5bf03bec2e31fa86f288182c6b1dd50769288"},{"commit":{"message":"[lworld] Additional tests for null assignment behavior involving multidimensional arrays"},"files":[],"sha":"48e249061cb340c7a4ebfd6d5b20419891fcb060"},{"commit":{"message":"8197911:  [lworld] Null assignment to array cells that are value instances or fields tagged ACC_FLATTENABLE should be rejected"},"files":[],"sha":"26b561d44192ccf29afea013b728e2e5094c5cad"},{"commit":{"message":"8197791:  Allow null to be cast into a value type (for now)"},"files":[],"sha":"57520ffe1803e5b9df693b292f50c983efeef7ac"},{"commit":{"message":"8197792: Allow updates to instance fields of value types via withfield by any method in the same nest"},"files":[],"sha":"8be9d0d053e75d156e8aadbb9328c76c91c7c9a8"},{"commit":{"message":"8197799: Add support for ACC_FLATTENABLE flag for fields"},"files":[],"sha":"76c485330e473fa9bb2e7c92a3e7e3adcc855d23"},{"commit":{"message":"First transition step toward L-world experimentation"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"dbdc1ba3253c051f82a0975bfc3a2cc5a3f8d13f"},{"commit":{"message":"Fix test failure post merge (adjust \"golden\" file)"},"files":[],"sha":"9283fa3da44b9850f5cf14e0f54fdfa964345325"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3842472e0ec124627a65c17ed5f714e763bb9960"},{"commit":{"message":"Test that defaultvalue cannot be used with abstract classes or interfaces"},"files":[],"sha":"76a1a8271c9736a2bc014200db0df4732e6a32cb"},{"commit":{"message":"Tighten up a few loose ends in attribution and code generation for withfield"},"files":[],"sha":"2d3a373bfb1067cbeddab47244c549f31a359a4a"},{"commit":{"message":"Initial support for code generation using defaultvalue and withfield"},"files":[],"sha":"1aa4b35017fe4409e0e77c016c620790796d53ff"},{"commit":{"message":"Scanner, parser, semantic analysis and attribution support for value types"},"files":[],"sha":"bb5e57af4b874c690421a932d4b3a0cfb8824b38"},{"commit":{"message":"Merge with MVT as initial start point"},"files":[],"sha":"228653c3047e187603a3008208c25b82152061ea"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"3eaa43736d42df6e880f58cf138b38a826a585b8"},{"commit":{"message":"8195001: [MVT] Avoid allocations of default value types\n\nReviewed-by: roland"},"files":[],"sha":"acd5fa16167c1d4f0c450ebae1212fb101dcd3df"},{"commit":{"message":"Un-intentional merge"},"files":[],"sha":"2c5855d24e841aa8c48d200ee95a8f17733cb87b"},{"commit":{"message":"Adjust Testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f65c6d62fe4e9b5cc1e8a7f04f1aeb67faaf780b"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"87cb8a85eb03e86caf722b9231a9e79237e7d6f3"},{"commit":{"message":"Adjust Testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"7808437bda64c87a4d6639f01ce493e8a97de87c"},{"commit":{"message":"8193501: [MVT] Compilation fails with \"unexpected projection from allocation node\"\n\nReviewed-by: dsimms"},"files":[],"sha":"3e73d17bc25f934b5ee3de327298261a77264ace"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"9c3c904b2e460b8334a111ff6d1e5b089ce1317a"},{"commit":{"message":"8183920: [MVT] Arraycopy and clone intrinsics do not work with value type arrays\n\nReviewed-by: thartmann"},"files":[],"sha":"a355d02e42efc0e9580db193fcab6ad7350c92e4"},{"commit":{"message":"More VVT tests"},"files":[],"sha":"a2d7d42b2356ee9095c3dea12da7ae38e4a7d20f"},{"commit":{"message":"Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f62e35db02cdfff158b3637abf81686e3e889b87"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"753963769b30796fcefe9c3c2414553051b5c79b"},{"commit":{"message":"8193310: [MVT] Graph for 'TestMinimalValueTypes::test7' fails IR verification\n\nReviewed-by: roland"},"files":[],"sha":"0fc919c015d03c05edd8a3354ef9216123c95663"},{"commit":{"message":"8190935: [MVT] TestMinimalValueTypes fails with ClassCastException\n\nReviewed-by: roland"},"files":[],"sha":"1a9ddb60592029c168dfffd20ed7c593333affc6"},{"commit":{"message":"8193070: [MVT] PhaseIdealLoop::get_ctrl() fails with \"assert(ctrl->is_CFG())\"\n\nReviewed-by: roland"},"files":[],"sha":"ae59c0603405250ab4b1b5468f09153d3db9f90d"},{"commit":{"message":"[MVT] Fixed Windows build after merge of 8189610"},"files":[],"sha":"7c23cf3e7d117cc569ac2e95976d8b25443d787d"},{"commit":{"message":"README: EA disclaimer text"},"files":[],"sha":"e846a78314aa2f3c9678bd3605c564d1099dd3ce"},{"commit":{"message":"8193123: [MVT] ciReplay does not support non-flattened value type fields\n\nReviewed-by: roland"},"files":[],"sha":"599da6e51e7043457ea36be495737c1dcd7ca11f"},{"commit":{"message":"Adjust testing"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"f69cf485394f8775c14c48c17adbb969e327a982"},{"commit":{"message":"8190203: [MVT] Version string must indicate \"MVT EA\" build\n\n\"--with-version-pre=mvtea\"\n"},"files":[],"sha":"e208556a0356259128c4d904b5c4968cc3d903d0"},{"commit":{"message":"8190936: Further SA support issues"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"278ea69255fdc26bdfc6c00be0054acc992d365a"},{"commit":{"message":"Merge"},"files":[],"sha":"3f7eddefc8e3f8a50df9626aeb6b215d5098b1a7"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"12b094411d894261cf68ec05c40160164b79150a"},{"commit":{"message":"8190430: [MVT] Fixing GC support for Thread-local value buffers\n\nReviewed-by: bdelsart"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"a403ef6b749aa0ecd01cc9d0db22f71a71d515de"},{"commit":{"message":"8191818: [MVT] CTW fails with \"assert(vk->is__Value()) failed: unexpected value type klass\"\n\nReviewed-by: roland"},"files":[],"sha":"e05e3e2a28ef916ceda24ab67426a107cf40f346"},{"commit":{"message":"Update"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"eb972aac46aa7daa17d17f4cc88eb2eb7cbd4688"},{"commit":{"message":"Updated test failures\/bugs"},"files":[{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"}],"sha":"fad1b643a6de6abe4a4722d3755219e614320d8d"},{"commit":{"message":"8191419: Lazy initialization of static value fields may cause invalid behavior"},"files":[],"sha":"ba3c517c30685ba307df9452fe7798feccdc7f9e"},{"commit":{"message":"8191766: [MVT] OSR compilation fails with \"assert(tk->is_loaded()) failed: must be loaded\"\n\nRemoved the assert that was added by JDK-8183111 because it is too strong.\n"},"files":[],"sha":"7d9b49e905434def210780980d375f9ba6f6d759"},{"commit":{"message":"Tier 1 test failures"},"files":[],"sha":"dc6dfaed8a83f30956c22b37f1a027e1985dcd5c"},{"commit":{"message":"8191148: Bytecodes API produces an incorrect stackmap for value arrays"},"files":[],"sha":"56d10c43fd5493629cd1bcf288ec3fa0aa607b54"},{"commit":{"message":"8191026: [MVT] ValueKlass::set_if_bufferable() should always return false if ValueTypesBufferMaxMemory == 0"},"files":[],"sha":"a8963e78965eed84bbd7ce861ef67286b08333e1"},{"commit":{"message":"Merge"},"files":[],"sha":"85be6b8874af1db0ad98742b20dd0aa91af34288"},{"commit":{"message":"8188809: [MVT] C2 support for interpreter buffering of value types\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"7e9896089fd3a7d86b8a62a45f628dfa2d31cb61"},{"commit":{"message":"8190458: [MVT] C2 should use pre-allocated default value types\n\nReviewed-by: roland"},"files":[],"sha":"2ec6a8d8248ccdeed057e0379a508539a9d97ae9"},{"commit":{"message":"8190704: [MVT] TestOnStackReplacement crashes with \"Error mixing types\"\n\nReviewed-by: roland"},"files":[],"sha":"be924e1b874d18ed051139c7e6e345326fa15f23"},{"commit":{"message":"Merge"},"files":[],"sha":"395e7d6e30dae71851b9002690a79cfacb138dcf"},{"commit":{"message":"[MVT] Symbol lookup may fail during class loading"},"files":[],"sha":"b583cc280f0c40319d1ff8dc2aad5bbd1f30745b"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"b5327a9cd34dcf74a2e837c81c3ed04cd1f57da3"},{"commit":{"message":"8190202: [MVT] Allow Class.forName() to return value types for VVT (EnableValhalla) but not MVT\n\nReviewed-by: fparain"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"277057b115e4605a8c4d2851858faed4ab6e7ff9"},{"commit":{"message":"8190372: [MVT] Disallow InnerClasses Attribute to contain inner\/outer class indices to a value class\n\nFor EnableMVT, inner\/outer class indices are not allowed to be a value class\n\nReviewed-by: fparain"},"files":[],"sha":"8b5b9ec7a27587f279f653dedb54573099541529"},{"commit":{"message":"[MVT] Replaced wrong binary with logical or"},"files":[],"sha":"3e7f7759496e7d0c6dae033fcc074df956c678fa"},{"commit":{"message":"8190432: [MVT] Value Types should have a default pre-allocated\n\nReviewed-by: thartmann"},"files":[],"sha":"2f789dc3dbd2bd2d426873435807b8239d1c070a"},{"commit":{"message":"Merge"},"files":[],"sha":"9ef49c3be7aa6065e27b79ec0708d61007ac1f92"},{"commit":{"message":"Fix: javap fails to disassemble wide prefixed vloads\/vstores properly"},"files":[],"sha":"0a4ddd43a82fe34ba9c9732f3628bf57f28aed63"},{"commit":{"message":"8189755: [MVT]Verifier doesn't accept wide prefix for vload and vstore\n\nReviewed-by: lfoltan"},"files":[],"sha":"1abfecd1836021aefe1a047ece72ef2533d608d6"},{"commit":{"message":"[MVT] Workaround fix for 8189802"},"files":[],"sha":"4db031e34a4161c7708b932ab80a6c6fd5218084"},{"commit":{"message":"8189690: [mvt]Static fields support for Value Types is broken\n\nReviewed-by: dsimms"},"files":[],"sha":"df39cfdfc48346f16e23ef4d04987bcbed53e004"},{"commit":{"message":"8189613: [MVT] __Value oop not preserved when safepointing at return\n\nReviewed-by: roland"},"files":[],"sha":"f0baa578033ea228c66716f4fa4374566210e51e"},{"commit":{"message":"Merge"},"files":[],"sha":"44f8f80d615b53d19f5808f6586942908090bee0"},{"commit":{"message":"8189268: [MVT] C2 fails with SIGSEGV in PhaseMacroExpand::expand_mh_intrinsic_return()\n\nReviewed-by: roland"},"files":[],"sha":"d1bf8fc3dd6f859205b1fd84212aa02d6ad4befb"},{"commit":{"message":"Back out cast"},"files":[],"sha":"6d44a4ac1768ec1936573f0407dd4f38caafcad2"},{"commit":{"message":"8188807: [MVT] Split ValueTypeTestBench into multiple tests and adjust timeout"},"files":[],"sha":"e75141bcfdbe8e2fce4ce9831b3edf82eefc5716"},{"commit":{"message":"Merge"},"files":[],"sha":"b353dbfa27f1ad0aba8c2cf6e12a5580458f89f8"},{"commit":{"message":"Missing change from 8152856 conflict"},"files":[],"sha":"a707ddb248904a6240c5b34f98cef158d23ee175"},{"commit":{"message":"8189219: [MVT] Build fails with \"shifting a negative signed value is undefined\" on Mac\n\nMerge conflict stepped over JDK-8152856\n"},"files":[],"sha":"a9db0d4ae6ed6de714d5bbb05d7101add4794fad"},{"commit":{"message":"Adjust tests after JDK-8187696 fix"},"files":[],"sha":"f04be5e3bbf516cb8ace789087686eae9677dc74"},{"commit":{"message":"8187696: missing ACC_VALUE in inner class attributes\n\nReviewed-by: dsimms"},"files":[],"sha":"336cc3ecd3d6fa6cb5786e26b66006736718e782"},{"commit":{"message":"Missing copyright"},"files":[],"sha":"c852c70779e06f03e5fe56867df69f890669c572"},{"commit":{"message":"8188770: [MVT] Various code cleanups\n\nReviewed-by: roland"},"files":[],"sha":"319c3ababa075b67d27bc7f26b5c016063bcf7f4"},{"commit":{"message":"8187817: [MVT] Crash with \"assert(has_value_fields()) failed: Sanity checking\" when inheriting value type fields\n\nReviewed-by: dsimms"},"files":[],"sha":"1559119ad02727afa30f1f7f5ef1f7a460a323f2"},{"commit":{"message":"Refactored ValueOops test"},"files":[],"sha":"a6537e6e8ff3eb08d31586391ea69c301d2f263b"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"a9c28a7ac5d752a6bf59cd11dc1eb618d591078a"},{"commit":{"message":"8186716: [MVT] C2 crashes with \"assert(!n->is_ValueType()) failed: value types should not be split through phis\"\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/share\/opto\/node.hpp"}],"sha":"837a0297a0865f26e65d2c360f5c7010c7ef9c77"},{"commit":{"message":"8185556: [MVT] C2 compiler support for non-flattened value type fields\n\nReviewed-by: roland"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"7e925e033dc1bd393a8109fcb3ac3379f90cb4f5"},{"commit":{"message":"8188149: [MVT] Interpreter\/runtime support for non-flattened value type fields\n\nReviewed-by: dsimms, thartmann"},"files":[],"sha":"58a71b38e36cada6baf9ac679c40a8a5cd58bec3"},{"commit":{"message":"Import changes from mvt\/hotspot"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp"},{"filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"5b2d30c40578831045f87c930e4f678ef8fb926f"},{"commit":{"message":"Import changes from mvt\/langtools"},"files":[],"sha":"e0a929370636d121dfc6902d80804b173ddc9f51"},{"commit":{"message":"Import changes from mvt\/jdk"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"52dfe1fe2d611610c95db9c372d8d594a7ad90a7"},{"commit":{"message":"Import changes from mvt\/top"},"files":[],"sha":"c3b42fc9b6c1705b913ef641e5e7775e2775d065"},{"commit":{"message":"Create branch mvt"},"files":[],"sha":"d198ad630280119c35c33048bdf8caa69c3d1e08"},{"commit":{"message":"L-World value types"},"files":[],"sha":"6af1eac2963b9db841e185edb38d497bad9ef19c"}]