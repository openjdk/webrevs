{"files":[{"patch":"@@ -190,0 +190,1 @@\n+        res.append(nullMarker(t));\n@@ -193,0 +194,4 @@\n+    private String nullMarker(Type t) {\n+        return t.getNullMarker().typeSuffix();\n+    }\n+\n@@ -233,0 +238,1 @@\n+            buf.append(nullMarker(t));\n@@ -236,0 +242,1 @@\n+            buf.append(nullMarker(t));\n@@ -286,1 +293,1 @@\n-        return s;\n+        return s + nullMarker(t);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Printer.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -760,5 +760,5 @@\n-        if (nullMarker == NullMarker.UNSPECIFIED) {\n-            return this;\n-        } else {\n-            return addMetadata(new TypeMetadata.NullMarker(nullMarker));\n-        }\n+        if (nullMarker == getNullMarker()) return this;\n+        Type base = dropMetadata(TypeMetadata.NullMarker.class);\n+        return (nullMarker == NullMarker.UNSPECIFIED) ?\n+                base :\n+                base.addMetadata(new TypeMetadata.NullMarker(nullMarker));\n@@ -2239,0 +2239,1 @@\n+                bound2 = bound2.asNullMarked(bound.getNullMarker());\n@@ -2243,1 +2244,2 @@\n-                    if (types.isSameType(b, bound2)) return;\n+                    if (b.getNullMarker() == bound2.getNullMarker() &&\n+                            types.isSameType(b, bound2)) return;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -4035,0 +4036,1 @@\n+        NullMarker nullMarker = NullMarker.NOT_NULL;\n@@ -4039,0 +4041,3 @@\n+            if (t.getNullMarker().ordinal() > nullMarker.ordinal()) {\n+                nullMarker = t.getNullMarker();\n+            }\n@@ -4088,1 +4093,2 @@\n-            return new ArrayType(lub(elements), syms.arrayClass);\n+            return new ArrayType(lub(elements), syms.arrayClass)\n+                    .asNullMarked(nullMarker);\n@@ -4123,1 +4129,2 @@\n-            return compoundMin(candidates);\n+            return compoundMin(candidates)\n+                    .asNullMarked(nullMarker);\n@@ -4175,1 +4182,4 @@\n-        else if (t.isPrimitive() || s.isPrimitive())\n+\n+        final NullMarker nullMarker = t.getNullMarker().ordinal() < s.getNullMarker().ordinal() ?\n+                    t.getNullMarker() : s.getNullMarker();\n+        if (t.isPrimitive() || s.isPrimitive())\n@@ -4178,1 +4188,1 @@\n-            return t;\n+            return t.asNullMarked(nullMarker);\n@@ -4180,1 +4190,1 @@\n-            return s;\n+            return s.asNullMarked(nullMarker);\n@@ -4183,1 +4193,1 @@\n-        return glbFlattened(closure, t);\n+        return glbFlattened(closure, t).asNullMarked(nullMarker);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1474,1 +1474,4 @@\n-                return filterBounds(uv, inferenceContext).head;\n+                Infer infer = inferenceContext.infer;\n+                List<Type> eqbounds = filterBounds(uv, inferenceContext);\n+                return eqbounds.tail.tail == null  ?\n+                        eqbounds.head : infer.types.lub(eqbounds);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Smoke test for nullability inference\n+ * @enablePreview\n+ * @compile\/fail\/ref=NullabilityInferenceTest.out -XDrawDiagnostics NullabilityInferenceTest.java\n+ *\/\n+\n+import java.util.List;\n+\n+class Test {\n+    static class Box<T> { }\n+\n+    static <T> List<Box<T>> makeInvariant(Box<T>... boxes) { return null; }\n+    static <T> List<Box<T>> makeCovariant(Box<? extends T>... boxes) { return null; }\n+    static <T> List<Box<T>> makeContravariant(Box<? super T>... boxes) { return null; }\n+\n+    void testInvariant() {\n+        Box<String?> bs_null = null;\n+        Box<String!> bs_nonnull = null;\n+\n+        Integer i = null;\n+        i = (Integer)makeInvariant(bs_null, bs_nonnull); \/\/ List<Box<String?>>\n+        i = (Integer)makeInvariant(bs_nonnull, bs_null); \/\/ List<Box<String?>>\n+        i = (Integer)makeInvariant(bs_null, bs_null); \/\/ List<Box<String?>>\n+        i = (Integer)makeInvariant(bs_nonnull, bs_nonnull); \/\/ List<Box<String!>>\n+    }\n+\n+    void testCovariant() {\n+        Box<String?> bs_null = null;\n+        Box<String!> bs_nonnull = null;\n+\n+        Integer i = null;\n+        i = (Integer)makeCovariant(bs_null, bs_nonnull); \/\/ List<Box<String?>>\n+        i = (Integer)makeCovariant(bs_nonnull, bs_null); \/\/ List<Box<String?>>\n+        i = (Integer)makeCovariant(bs_null, bs_null); \/\/ List<Box<String?>>\n+        i = (Integer)makeCovariant(bs_nonnull, bs_nonnull); \/\/ List<Box<String!>>\n+    }\n+\n+    void testContravariant() {\n+        Box<String?> bs_null = null;\n+        Box<String!> bs_nonnull = null;\n+\n+        Integer i = null;\n+        i = (Integer)makeContravariant(bs_null, bs_nonnull); \/\/ List<Box<String!>>\n+        i = (Integer)makeContravariant(bs_nonnull, bs_null); \/\/ List<Box<String!>>\n+        i = (Integer)makeContravariant(bs_null, bs_null); \/\/ List<Box<String?>>\n+        i = (Integer)makeContravariant(bs_nonnull, bs_nonnull); \/\/ List<Box<String!>>\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityInferenceTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+NullabilityInferenceTest.java:22:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:23:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:24:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:25:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:33:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:34:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:35:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:36:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:44:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:45:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:46:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:47:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+- compiler.note.unchecked.filename: NullabilityInferenceTest.java\n+- compiler.note.unchecked.recompile\n+- compiler.note.preview.filename: NullabilityInferenceTest.java, DEFAULT\n+- compiler.note.preview.recompile\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityInferenceTest.out","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"}]}