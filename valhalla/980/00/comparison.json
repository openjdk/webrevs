{"files":[{"patch":"@@ -553,1 +553,0 @@\n-     * Visits a WildcardTypeTree node.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/TreeVisitor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1140,1 +1140,1 @@\n-                                  classType.tsym, classType.getMetadata()) {\n+                            classType.tsym, classType.getMetadata()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,13 +126,0 @@\n-    \/** Flag is set for a class symbol if it defines one or more non-empty\n-     *  instance initializer block(s). This is relevenat only for class symbols\n-     *  that originate from source types. For binary types the instance initializer\n-     *  blocks are \"normalized\" into the constructors.\n-     *\/\n-    public static final int HASINITBLOCK         = 1<<18;\n-\n-    \/** Flag is set for a method symbol if it is an empty no-arg ctor.\n-     *  i.e. one that simply returns (jlO) or merely chains to a super's\n-     *  no-arg ctor\n-     *\/\n-    public static final int EMPTYNOARGCONSTR         = 1<<18;\n-\n@@ -527,2 +514,0 @@\n-        HASINITBLOCK(Flags.HASINITBLOCK),\n-        EMPTYNOARGCONSTR(Flags.EMPTYNOARGCONSTR),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-                Type arg;\n+                Type arg = null;\n@@ -682,0 +682,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1003,0 +1003,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -769,4 +769,2 @@\n-            }\n-            FunctionDescriptor descRes;\n-            if (abstracts.size() == 1) {\n-                descRes = new FunctionDescriptor(abstracts.first());\n+            } else if (abstracts.size() == 1) {\n+                return new FunctionDescriptor(abstracts.first());\n@@ -774,1 +772,1 @@\n-                descRes = mergeDescriptors(origin, abstracts.toList());\n+                FunctionDescriptor descRes = mergeDescriptors(origin, abstracts.toList());\n@@ -793,0 +791,1 @@\n+                return descRes;\n@@ -794,1 +793,0 @@\n-            return descRes;\n@@ -1030,5 +1028,15 @@\n-            try {\n-                warnStack = warnStack.prepend(warn);\n-                if (t.hasTag(ARRAY) && s.hasTag(ARRAY)) {\n-                    if (((ArrayType)t).elemtype.isPrimitive()) {\n-                        return isSameType(elemtype(t), elemtype(s));\n+            if (t.hasTag(ARRAY) && s.hasTag(ARRAY)) {\n+                if (((ArrayType)t).elemtype.isPrimitive()) {\n+                    return isSameType(elemtype(t), elemtype(s));\n+                } else {\n+                    return isSubtypeUncheckedInternal(elemtype(t), elemtype(s), false, warn);\n+                }\n+            } else if (isSubtype(t, s, capture)) {\n+                return true;\n+            } else if (t.hasTag(TYPEVAR)) {\n+                return isSubtypeUncheckedInternal(t.getUpperBound(), s, false, warn);\n+            } else if (!s.isRaw()) {\n+                Type t2 = asSuper(t, s.tsym);\n+                if (t2 != null && t2.isRaw()) {\n+                    if (isReifiable(s)) {\n+                        warn.silentWarn(LintCategory.UNCHECKED);\n@@ -1036,6 +1044,1 @@\n-                        \/\/ if T.ref <: S, then T[] <: S[]\n-                        Type es = elemtype(s);\n-                        Type et = elemtype(t);\n-                        if (!isSubtypeUncheckedInternal(et, es, false, warn))\n-                            return false;\n-                        return true;\n+                        warn.warn(LintCategory.UNCHECKED);\n@@ -1043,1 +1046,0 @@\n-                } else if (isSubtype(t, s, capture)) {\n@@ -1045,12 +1047,0 @@\n-                } else if (t.hasTag(TYPEVAR)) {\n-                    return isSubtypeUncheckedInternal(t.getUpperBound(), s, false, warn);\n-                } else if (!s.isRaw()) {\n-                    Type t2 = asSuper(t, s.tsym);\n-                    if (t2 != null && t2.isRaw()) {\n-                        if (isReifiable(s)) {\n-                            warn.silentWarn(LintCategory.UNCHECKED);\n-                        } else {\n-                            warn.warn(LintCategory.UNCHECKED);\n-                        }\n-                        return true;\n-                    }\n@@ -1058,3 +1048,0 @@\n-                return false;\n-            } finally {\n-                warnStack = warnStack.tail;\n@@ -1062,0 +1049,1 @@\n+            return false;\n@@ -1119,0 +1107,1 @@\n+\n@@ -1122,2 +1111,2 @@\n-        private IsSubtype isSubtype = new IsSubtype();\n-        class IsSubtype extends TypeRelation {\n+        private TypeRelation isSubtype = new TypeRelation()\n+        {\n@@ -1140,2 +1129,2 @@\n-                             s.hasTag(BOT) || s.hasTag(CLASS) ||\n-                             s.hasTag(ARRAY) || s.hasTag(TYPEVAR);\n+                         s.hasTag(BOT) || s.hasTag(CLASS) ||\n+                         s.hasTag(ARRAY) || s.hasTag(TYPEVAR);\n@@ -1251,1 +1240,1 @@\n-        }\n+        };\n@@ -1439,2 +1428,2 @@\n-                        && visit(t.getEnclosingType(), s.getEnclosingType())\n-                        && containsTypeEquivalent(t.getTypeArguments(), s.getTypeArguments());\n+                    && visit(t.getEnclosingType(), s.getEnclosingType())\n+                    && containsTypeEquivalent(t.getTypeArguments(), s.getTypeArguments());\n@@ -2155,10 +2144,0 @@\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"warn stack\">\n-    public void pushWarner(Warner warner) {\n-        warnStack = warnStack.prepend(warner);\n-    }\n-\n-    public void popWarner() {\n-        warnStack = warnStack.tail;\n-    }\n-    \/\/ <\/editor-fold>\n-\n@@ -2474,1 +2453,1 @@\n-                    erased = new ErasedClassType(erased.getEnclosingType(), erased.tsym,\n+                    erased = new ErasedClassType(erased.getEnclosingType(),erased.tsym,\n@@ -2830,10 +2809,1 @@\n-        return isSubSignature(t, s, noWarnings);\n-    }\n-\n-    public boolean isSubSignature(Type t, Type s, Warner warn) {\n-        try {\n-            warnStack = warnStack.prepend(warn);\n-            return hasSameArgs(t, s, true) || hasSameArgs(t, erasure(s), true);\n-        } finally {\n-            warnStack = warnStack.tail;\n-        }\n+        return hasSameArgs(t, s, true) || hasSameArgs(t, erasure(s), true);\n@@ -4310,6 +4280,4 @@\n-        try {\n-            warnStack = warnStack.prepend(warner);\n-            if (isSameType(r1.getReturnType(), r2res))\n-                return true;\n-            if (r1.getReturnType().isPrimitive() || r2res.isPrimitive())\n-                return false;\n+        if (isSameType(r1.getReturnType(), r2res))\n+            return true;\n+        if (r1.getReturnType().isPrimitive() || r2res.isPrimitive())\n+            return false;\n@@ -4317,7 +4285,3 @@\n-            if (hasSameArgs(r1, r2))\n-                return covariantReturnType(r1.getReturnType(), r2res, warner);\n-            if (isSubtypeUnchecked(r1.getReturnType(), r2res, warner))\n-                return true;\n-            if (!isSubtype(r1.getReturnType(), erasure(r2res), false))\n-                return false;\n-            warner.warn(LintCategory.UNCHECKED);\n+        if (hasSameArgs(r1, r2))\n+            return covariantReturnType(r1.getReturnType(), r2res, warner);\n+        if (isSubtypeUnchecked(r1.getReturnType(), r2res, warner))\n@@ -4325,3 +4289,4 @@\n-        } finally {\n-            warnStack = warnStack.tail;\n-        }\n+        if (!isSubtype(r1.getReturnType(), erasure(r2res)))\n+            return false;\n+        warner.warn(LintCategory.UNCHECKED);\n+        return true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":42,"deletions":77,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-                List<Type> bounds = List.of(chk.checkRefType(tvar.bounds.head, attribType(tvar.bounds.head, env)));\n+                List<Type> bounds = List.of(attribType(tvar.bounds.head, env));\n@@ -809,1 +809,1 @@\n-                    bounds = bounds.prepend(chk.checkRefType(bound, attribType(bound, env)));\n+                    bounds = bounds.prepend(attribType(bound, env));\n@@ -2917,1 +2917,1 @@\n-            if (tree.constructor != null && tree.constructor.kind == MTH) {\n+            if (tree.constructor != null && tree.constructor.kind == MTH)\n@@ -2919,1 +2919,0 @@\n-            }\n@@ -3635,1 +3634,0 @@\n-            Symbol lhsSym = TreeInfo.symbol(that.expr);\n@@ -3642,0 +3640,1 @@\n+                Symbol lhsSym = TreeInfo.symbol(that.expr);\n@@ -4427,1 +4426,1 @@\n-                return;\n+                return ;\n@@ -4677,1 +4676,1 @@\n-                \/\/ except for three situations:\n+                \/\/ except for two situations:\n@@ -4683,1 +4682,1 @@\n-                    \/\/ If the symbol's type is parameterized, erase it\n+                    \/\/ (a) If the symbol's type is parameterized, erase it\n@@ -4690,1 +4689,1 @@\n-                    \/\/ (c) If the symbol's type is an inner class, then\n+                    \/\/ (b) If the symbol's type is an inner class, then\n@@ -5056,1 +5055,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -720,1 +720,1 @@\n-    private boolean checkExtends(JCTree pos, Type a, Type bound) {\n+    private boolean checkExtends(Type a, Type bound) {\n@@ -791,8 +791,0 @@\n-            Fragment fragment = c.isAbstract() && c.isValueClass() && c == st.tsym ? Fragments.AbstractValueClass(c) : Fragments.SuperclassOfValueClass(c, st);\n-            if ((st.tsym.flags() & HASINITBLOCK) != 0) {\n-                log.error(pos, Errors.AbstractValueClassDeclaresInitBlock(fragment));\n-            }\n-            Type encl = st.getEnclosingType();\n-            if (encl != null && encl.hasTag(CLASS)) {\n-                log.error(pos, Errors.AbstractValueClassCannotBeInner(fragment));\n-            }\n@@ -800,7 +792,1 @@\n-                switch (s.kind) {\n-                case VAR:\n-                    if ((s.flags() & STATIC) == 0) {\n-                        log.error(pos, Errors.InstanceFieldNotAllowed(s, fragment));\n-                    }\n-                    break;\n-                case MTH:\n+                if (s.kind == MTH) {\n@@ -809,13 +795,0 @@\n-                    } else if (s.isConstructor()) {\n-                        MethodSymbol m = (MethodSymbol)s;\n-                        if (m.getParameters().size() > 0) {\n-                            log.error(pos, Errors.AbstractValueClassConstructorCannotTakeArguments(m, fragment));\n-                        } else if (m.getTypeParameters().size() > 0) {\n-                            log.error(pos, Errors.AbstractValueClassConstructorCannotBeGeneric(m, fragment));\n-                        } else if (m.type.getThrownTypes().size() > 0) {\n-                            log.error(pos, Errors.AbstractValueClassConstructorCannotThrow(m, fragment));\n-                        } else if (protection(m.flags()) > protection(m.owner.flags())) {\n-                            log.error(pos, Errors.AbstractValueClassConstructorHasWeakerAccess(m, fragment));\n-                        } else if ((m.flags() & EMPTYNOARGCONSTR) == 0) {\n-                                log.error(pos, Errors.AbstractValueClassNoArgConstructorMustBeEmpty(m, fragment));\n-                        }\n@@ -1234,1 +1207,1 @@\n-                        !checkExtends(pos, actual, bounds.head)) {\n+                        !checkExtends(actual, bounds.head)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-                make.QualIdent(lambdaType.getReturnType().tsym).setType(lambdaType.getReturnType()),\n+                make.QualIdent(lambdaType.getReturnType().tsym),\n@@ -2351,1 +2351,1 @@\n-                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner() || tree.sym.owner.isValueClass()));\n+                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -242,15 +242,0 @@\n-\n-        if (m.isConstructor() && m.type.getParameterTypes().size() == 0) {\n-            int statsSize = tree.body.stats.size();\n-            if (statsSize == 0) {\n-                m.flags_field |= EMPTYNOARGCONSTR;\n-            } else if (statsSize == 1 && TreeInfo.isSuperCall(tree.body.stats.head)) {\n-                JCExpressionStatement exec = (JCExpressionStatement) tree.body.stats.head;\n-                JCMethodInvocation meth = (JCMethodInvocation)exec.expr;\n-                if (meth.args.size() == 0) {\n-                    \/\/ Deem a constructor \"empty\" even if it contains a 'super' call,\n-                    \/\/ as long as it has no argument expressions (to respect common coding style).\n-                    m.flags_field |= EMPTYNOARGCONSTR;\n-                }\n-            }\n-        }\n@@ -277,6 +262,0 @@\n-    @Override\n-    public void visitBlock(JCBlock tree) {\n-        if ((tree.flags & STATIC) == 0 && tree.stats.size() > 0)\n-            env.info.scope.owner.flags_field |= HASINITBLOCK;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2304,16 +2304,0 @@\n-        return findMemberTypeInternal(env,site, name, c);\n-    }\n-\n-    \/** Find qualified member type.\n-     *  @param env       The current environment.\n-     *  @param site      The original type from where the selection takes\n-     *                   place.\n-     *  @param name      The type's name.\n-     *  @param c         The class to search for the member type. This is\n-     *                   always a superclass or implemented interface of\n-     *                   site's class.\n-     *\/\n-    Symbol findMemberTypeInternal(Env<AttrContext> env,\n-                          Type site,\n-                          Name name,\n-                          TypeSymbol c) {\n@@ -2368,8 +2352,0 @@\n-        return findTypeInternal(env, name);\n-    }\n-\n-    \/** Find an unqualified type symbol.\n-     *  @param env       The current environment.\n-     *  @param name      The type's name.\n-     *\/\n-    Symbol findTypeInternal(Env<AttrContext> env, Name name) {\n@@ -3714,1 +3690,1 @@\n-                            site.tsym.type.getTypeArguments() : List.nil(), site.tsym, site.getMetadata());\n+                                site.tsym.type.getTypeArguments() : List.nil(), site.tsym, site.getMetadata());\n@@ -4609,1 +4585,5 @@\n-            super(STATICERR, sym, \"static error\");\n+            this(sym, \"static error\");\n+        }\n+\n+        StaticError(Symbol sym, String debugName) {\n+            super(STATICERR, sym, debugName);\n@@ -4741,1 +4721,1 @@\n-            super(sym);\n+            super(sym, \"bad method ref error\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -509,1 +509,1 @@\n-        MethodSymbol sym = (MethodSymbol)TreeInfo.symbolFor(invoke.meth);\n+        Symbol sym = TreeInfo.symbolFor(invoke.meth);\n@@ -533,1 +533,1 @@\n-    private void invoke(JCTree site, MethodSymbol sym, List<JCExpression> args, RefSet<?> receiverRefs) {\n+    private void invoke(JCTree site, Symbol sym, List<JCExpression> args, RefSet<?> receiverRefs) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.tools.javac.code.Source.Feature;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCSwitchExpression;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/CRTable.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -857,13 +857,0 @@\n-                    if (sym.isConstructor() && sym.type.getParameterTypes().size() == 0) {\n-                        try {\n-                            int code_length = buf.getInt(bp + 4);\n-                            if ((code_length == 1 && buf.getByte(bp + 8) == (byte) ByteCodes.return_) ||\n-                                (code_length == 5 && buf.getByte(bp + 8) == ByteCodes.aload_0 &&\n-                                    buf.getByte(bp + 9) == (byte) ByteCodes.invokespecial &&\n-                                            buf.getByte(bp + 12) == (byte) ByteCodes.return_)) {\n-                                sym.flags_field |= EMPTYNOARGCONSTR;\n-                            }\n-                        } catch (UnderflowException e) {\n-                            throw badClassFile(\"bad.class.truncated.at.offset\", Integer.toString(e.getLength()));\n-                        }\n-                    }\n@@ -1049,0 +1036,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-            int flags = adjustFlags(inner, inner.flags_field);\n+            int flags = adjustFlags(inner.flags_field);\n@@ -982,1 +982,1 @@\n-        int flags = adjustFlags(v, v.flags());\n+        int flags = adjustFlags(v.flags());\n@@ -1011,1 +1011,1 @@\n-        int flags = adjustFlags(m, m.flags());\n+        int flags = adjustFlags(m.flags());\n@@ -1296,4 +1296,0 @@\n-                if (debugstackmap) System.out.print(\"object(\" + types.erasure(t).tsym + \")\");\n-                databuf.appendByte(7);\n-                databuf.appendChar(poolWriter.putClass(types.erasure(t)));\n-                break;\n@@ -1611,1 +1607,1 @@\n-            flags = adjustFlags(c, c.flags() & ~(DEFAULT | STRICTFP));\n+            flags = adjustFlags(c.flags() & ~(DEFAULT | STRICTFP));\n@@ -1641,1 +1637,1 @@\n-            case TYP: poolWriter.enterInnerClass((ClassSymbol)sym); break;\n+            case TYP: poolWriter.enterInner((ClassSymbol)sym); break;\n@@ -1648,1 +1644,1 @@\n-                poolWriter.enterInnerClass(local);\n+                poolWriter.enterInner(local);\n@@ -1774,1 +1770,1 @@\n-    int adjustFlags(Symbol sym, final long flags) {\n+    int adjustFlags(final long flags) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.ToIntFunction;\n@@ -37,0 +38,1 @@\n+import static com.sun.tools.javac.code.TypeTag.DOUBLE;\n@@ -38,0 +40,1 @@\n+import static com.sun.tools.javac.code.TypeTag.LONG;\n@@ -39,0 +42,11 @@\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Class;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Double;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Fieldref;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Float;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Integer;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_InterfaceMethodref;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Long;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_MethodHandle;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_MethodType;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Methodref;\n+import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_String;\n@@ -390,11 +404,0 @@\n-    public void emitLdc(LoadableConstant constant, int od) {\n-        if (od <= 255) {\n-            emitop1(ldc1, od, constant);\n-        }\n-        else {\n-            emitop2(ldc2, od, constant);\n-        }\n-    }\n-\n-    \/** Emit a ldc (or ldc_w) instruction, taking into account operand size\n-     *\/\n@@ -403,1 +406,4 @@\n-        if (od <= 255) {\n+        Type constantType = types.constantType(constant);\n+        if (constantType.hasTag(LONG) || constantType.hasTag(DOUBLE)) {\n+            emitop2(ldc2w, od, constant);\n+        } else if (od <= 255) {\n@@ -405,2 +411,1 @@\n-        }\n-        else {\n+        } else {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-    private static final Object[] NO_STATIC_ARGS = new Object[0];\n@@ -2367,1 +2366,1 @@\n-            code.emitLdc((LoadableConstant) tree.selected.type, makeRef(tree.pos(), tree.selected.type));\n+            code.emitLdc((LoadableConstant)checkDimension(tree.pos(), tree.selected.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -593,9 +593,0 @@\n-\n-        private void ldc() {\n-            if (typecode == LONGcode || typecode == DOUBLEcode) {\n-                code.emitop2(ldc2w, value, PoolWriter::putConstant);\n-            } else {\n-                code.emitLdc(value);\n-            }\n-        }\n-\n@@ -617,1 +608,1 @@\n-                    ldc();\n+                    code.emitLdc(value);\n@@ -624,1 +615,1 @@\n-                    ldc();\n+                    code.emitLdc(value);\n@@ -631,1 +622,1 @@\n-                    ldc();\n+                    code.emitLdc(value);\n@@ -639,1 +630,1 @@\n-                    ldc();\n+                    code.emitLdc(value);\n@@ -642,1 +633,1 @@\n-                ldc();\n+                code.emitLdc(value);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Items.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-    void enterInnerClass(ClassSymbol c) {\n+    void enterInner(ClassSymbol c) {\n@@ -234,1 +234,1 @@\n-            enterInnerClass(c.owner.enclClass());\n+            enterInner(c.owner.enclClass());\n@@ -334,1 +334,1 @@\n-            enterInnerClass(c);\n+            enterInner(c);\n@@ -391,1 +391,1 @@\n-                        enterInnerClass((ClassSymbol)ct.tsym);\n+                        enterInner((ClassSymbol)ct.tsym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import static com.sun.tools.javac.tree.JCTree.Tag.LITERAL;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/StringConcat.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Comparator;\n@@ -43,0 +44,1 @@\n+import java.util.function.ToIntFunction;\n@@ -86,0 +88,2 @@\n+import com.sun.tools.javac.code.Lint;\n+import com.sun.tools.javac.code.Lint.LintCategory;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -527,16 +527,0 @@\n-    \/** If next input token matches one of the two given tokens, skip it, otherwise report\n-     *  an error.\n-     *\n-     * @return The actual token kind.\n-     *\/\n-    public TokenKind accept2(TokenKind tk1, TokenKind tk2) {\n-        TokenKind returnValue = token.kind;\n-        if (token.kind == tk1 || token.kind == tk2) {\n-            nextToken();\n-        } else {\n-            setErrorEndPos(token.pos);\n-            reportSyntaxError(S.prevToken().endPos, Errors.Expected2(tk1, tk2));\n-        }\n-        return returnValue;\n-    }\n-\n@@ -2716,2 +2700,1 @@\n-        JCNewClass newClass = toP(F.at(newpos).NewClass(encl, typeArgs, t, args, body));\n-        return newClass;\n+        return toP(F.at(newpos).NewClass(encl, typeArgs, t, args, body));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4068,40 +4068,0 @@\n-# 0: symbol, 1: message segment\n-compiler.err.abstract.value.class.constructor.cannot.take.arguments=\\\n-    {1} defines a constructor {0} that takes arguments. This is disallowed\n-\n-# 0: symbol, 1: message segment\n-compiler.err.abstract.value.class.constructor.cannot.be.generic=\\\n-    {1} defines a generic constructor {0}. This is disallowed\n-\n-# 0: symbol, 1: message segment\n-compiler.err.abstract.value.class.constructor.cannot.throw=\\\n-    {1} defines a constructor {0} that throws an exception. This is disallowed\n-\n-# 0: symbol, 1: message segment\n-compiler.err.abstract.value.class.constructor.has.weaker.access=\\\n-    {1} defines a constructor {0} with a weaker access privilege than the declaring class. This is disallowed\n-\n-# 0: symbol, 1: message segment\n-compiler.err.instance.field.not.allowed=\\\n-    {1} defines an instance field {0}. This is disallowed\n-\n-# 0: symbol, 1: message segment\n-compiler.err.abstract.value.class.no.arg.constructor.must.be.empty=\\\n-    {1} defines a nonempty no-arg constructor {0}. This is disallowed\n-\n-# 0: message segment\n-compiler.err.abstract.value.class.declares.init.block=\\\n-    {0} declares one or more non-empty instance initializer blocks. This is disallowed.\n-\n-# 0: message segment\n-compiler.err.abstract.value.class.cannot.be.inner=\\\n-    {0} is an inner class. This is disallowed.\n-\n-# 0: symbol, 1: type\n-compiler.misc.superclass.of.value.class=\\\n-    The super class {1} of the value class {0}\n-\n-# 0: symbol\n-compiler.misc.abstract.value.class=\\\n-    The abstract value class {0}\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -955,4 +955,0 @@\n-\n-        public boolean isInit() {\n-            return name.table.names.isInit(name);\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-        if (!md.isInit()) return null;\n+        if (md.name != md.name.table.names.init) return null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,5 +83,0 @@\n-    public void remove(LintCategory lint) {\n-        nonSilentLintSet.remove(lint);\n-        silentLintSet.remove(lint);\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Warner.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.cannot.be.inner\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public class AbstractValueClassCannotBeInner {\n-    abstract value class Inner {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassCannotBeInner.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.constructor.cannot.be.generic\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassConstructorCannotBeGeneric {\n-    <T> AbstractValueClassConstructorCannotBeGeneric() {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorCannotBeGeneric.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.constructor.cannot.throw\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassConstructorCannotThrow {\n-    AbstractValueClassConstructorCannotThrow() throws Exception {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorCannotThrow.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.constructor.has.weaker.access\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassConstructorHasWeakerAccess {\n-    private AbstractValueClassConstructorHasWeakerAccess() {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorHasWeakerAccess.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.no.arg.constructor.must.be.empty\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassNoArgConstructorMustBeEmpty {\n-    public AbstractValueClassNoArgConstructorMustBeEmpty() {\n-        System.out.println(\"\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassNoArgConstructorMustBeEmpty.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.declares.init.block\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassWithInstanceInitializer {\n-    int f;\n-    { f = 42; }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassWithInstanceInitializer.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.abstract.value.class.constructor.cannot.take.arguments\n-\/\/ key: compiler.misc.abstract.value.class\n-\n-public abstract value class AbstractValueClassWithNonTrivialConst {\n-    AbstractValueClassWithNonTrivialConst(int i) {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassWithNonTrivialConst.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.instance.field.not.allowed\n-\/\/ key: compiler.misc.superclass.of.value.class\n-\n-abstract class InstanceFieldNotAllowedInValueClass {\n-    int i;\n-}\n-\n-value class V extends InstanceFieldNotAllowedInValueClass {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceFieldNotAllowedInValueClass.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8209400 8215246\n- * @summary Allow anonymous classes to be value types\n- * @compile AnonymousValueType.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:none AnonymousValueType\n- * @ignore\n- *\/\n-\n-\n-public class AnonymousValueType {\n-    public static void main(String[] args) {\n-        Object o = new value Comparable<String>() {\n-            int x = 10;\n-            @Override\n-            public int compareTo(String o) {\n-                return 0;\n-            }\n-        };\n-        if (!o.toString().equals(\"AnonymousValueType$1@\" + Integer.toHexString(o.hashCode())))\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValueType.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check array creation with V and V.ref\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile ArrayCreationWithQuestion.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayCreationWithQuestion\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ArrayCreationWithQuestion {\n-\n-    static value class VT {\n-        VT[] a1;\n-        VT[] a2;\n-\n-        VT(boolean non_implicit) {\n-            a1 = new VT[42];\n-            a2 = new VT[42];\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ArrayCreationWithQuestion().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ArrayCreationWithQuestion$VT.class\").toString() };\n-        runCheck(params, new String [] {\n-        \"         6: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-        \"        17: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayCreationWithQuestion.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222402\n- * @summary LW2 array support in javac\n- * @compile ArrayRelationsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayRelationsTest\n- * @ignore\n- *\/\n-\n-public value class ArrayRelationsTest {\n-\n-    int x;\n-\n-    public static void main(String [] args) {\n-        ArrayRelationsTest [] la = new ArrayRelationsTest[10];\n-        ArrayRelationsTest [] qa = new ArrayRelationsTest[10];\n-        boolean cce = false;\n-        try {\n-            qa = (ArrayRelationsTest[]) (Object []) (new String [10]);\n-        } catch (ClassCastException e) {\n-            cce = true;\n-        }\n-        if (!cce) {\n-            throw new AssertionError(\"Missing CCE\");\n-        }\n-        la = qa;\n-        ArrayRelationsTest[] la2 = qa;\n-        ArrayRelationsTest [] qa2 = (ArrayRelationsTest []) la2;\n-        boolean npe = false;\n-        try {\n-            la2[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-        npe = false;\n-        Object [] oa = qa;\n-        try {\n-            oa[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-\n-        \/\/ round trip;\n-        Object o = oa = la = qa;\n-        qa = (ArrayRelationsTest[]) (la = (ArrayRelationsTest []) (oa = (Object []) o));\n-        qa [0] = new ArrayRelationsTest();\n-\n-        npe = false;\n-        try {\n-            la[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayRelationsTest.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check various code snippets that were incorrectly failing to compile.\n- * @compile -XDenablePrimitiveClasses AssortedTests.java\n- * @ignore\n- *\/\n-\n-primitive class MyValue1 {\n-    final int x = 0;\n-}\n-\n-class X {\n-    static final MyValue1 vField = new MyValue1();\n-\n-    primitive class MyValue2 {\n-        final MyValue1.ref vBoxField;\n-\n-        public MyValue2() {\n-            vBoxField = new MyValue1();\n-        }\n-    }\n-\n-    public static void main(String[] args) { }\n-}\n-\n-primitive class MyValue3 {\n-    final int x = 0;\n-    public int hash() { return 0; }\n-}\n-\n-class Y {\n-\n-    primitive class MyValue4 {\n-        final MyValue3.ref vBoxField = null;\n-\n-        public int test() {\n-            return vBoxField.hash();\n-        }\n-    }\n-\n-    public static void main(String[] args) { }\n-}\n-\n-interface MyInterface {\n-    public void test(MyValue5.ref vt);\n-}\n-\n-primitive class MyValue5 implements MyInterface {\n-    final int x = 0;\n-\n-    @Override\n-    public void test(MyValue5.ref vt) { }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AssortedTests.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary V.ref class should not inadvertently carry over attributes from V.class\n- * @bug 8244713\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses AttributesTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AttributesTest\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class AttributesTest {\n-\n-    void foo() {\n-        @Deprecated\n-        primitive class V<T> {}\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(AttributesTest.class.getResourceAsStream(\"AttributesTest$1V.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of inner class attribute *\/\n-        InnerClasses_attribute inners = (InnerClasses_attribute) cls.attributes.get(Attribute.InnerClasses);\n-        if (inners == null) {\n-            throw new AssertionError(\"Missing inner class attribute\");\n-        }\n-        if (inners.number_of_classes != 1) {\n-            throw new AssertionError(\"Unexpected inner class attribute\");\n-        }\n-        String name = inners.classes[0].getInnerName(cls.constant_pool);\n-        if (!name.equals(\"V\")) {\n-            throw new AssertionError(\"Unexpected inner class \" + name);\n-        }\n-\n-        \/\/ Test emission of nest host attribute. Nest members attribute tested in InlineNesting*\n-        NestHost_attribute nestHost = (NestHost_attribute)cls.attributes.get(Attribute.NestHost);\n-        CONSTANT_Class_info host = nestHost != null ? nestHost.getNestTop(cls.constant_pool) : null;\n-        if (host == null || !host.getName().equals(\"AttributesTest\")) {\n-            throw new RuntimeException(\"Wrong Nest host \" + host.getName());\n-        }\n-\n-        \/\/ Test signature attribute\n-        Signature_attribute signature = (Signature_attribute)cls.attributes.get(Attribute.Signature);\n-        String sign =  signature.getSignature(cls.constant_pool);\n-        if (sign == null || !sign.equals(\"<T:Ljava\/lang\/Object;>Ljava\/lang\/Object;\")) {\n-            throw new RuntimeException(\"Wrong signature \" + sign);\n-        }\n-\n-        \/\/ Test SourceFile attribute\n-        SourceFile_attribute source = (SourceFile_attribute)cls.attributes.get(Attribute.SourceFile);\n-        String src =  source.getSourceFile(cls.constant_pool);\n-        if (src == null || !src.equals(\"AttributesTest.java\")) {\n-            throw new RuntimeException(\"Wrong source \" + src);\n-        }\n-\n-        \/\/ Test Deprecated attribute\n-        Deprecated_attribute depr = (Deprecated_attribute) cls.attributes.get(Attribute.Deprecated);\n-        if (depr == null) {\n-            throw new RuntimeException(\"Missing deprecated annotation\");\n-        }\n-\n-        \/\/ Test EnclosingMethod attribute\n-        EnclosingMethod_attribute meth = (EnclosingMethod_attribute) cls.attributes.get(Attribute.EnclosingMethod);\n-        if (meth == null) {\n-            throw new RuntimeException(\"Missing enclosing method attribute\");\n-        }\n-        String mName = meth.getMethodName(cls.constant_pool);\n-        if (mName == null || !mName.equals(\"foo\")) {\n-            throw new RuntimeException(\"Wrong enclosing method \" + mName);\n-        }\n-\n-        \/\/ The following attributes should not be present in the projection file.\n-        String [] shouldBeAbsent = {\n-                                        \"SourceDebugExtension\",\n-                                        \"BootstrapMethods\",\n-                                        \"Module\",\n-                                        \"ModulePackages\",\n-                                        \"ModuleMainClass\",\n-                                        \"Synthetic\",\n-                                   };\n-        for (String attr : shouldBeAbsent) {\n-            if (cls.getAttribute(attr) != null) {\n-                throw new RuntimeException(\"Unexpected attribute: \" + attr);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AttributesTest.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244711\n- * @summary Test that primitive classes work well with TWR\n- * @compile -XDenablePrimitiveClasses AutoCloseableTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AutoCloseableTest\n- * @ignore\n- *\/\n-\n-public class AutoCloseableTest {\n-\n-    primitive static class Foo implements AutoCloseable {\n-\n-        String s = \"Exception while closing AutoCloseable\";\n-\n-        @Override\n-        public void close() throws Exception {\n-            throw new Exception(s);\n-        }\n-\n-    }\n-\n-    public static void main(String[] args) {\n-        String expected = \"\";\n-        String found = \"\";\n-        try (Foo foo = new Foo()) {\n-            expected = foo.s;\n-        } catch (Exception e) {\n-            found = e.getMessage();\n-        }\n-        if (expected.length() == 0 || !expected.equals(found))\n-            throw new AssertionError(\"Should not get here!\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AutoCloseableTest.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8214421 8221545 8222792\n- * @summary Q<->L mixing should be OK for upcasts and should use checkcasts for downcasts.\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses BoxValCastTest.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses BoxValCastTest\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class BoxValCastTest {\n-\n-    static primitive class VT {\n-        int f = 0;\n-        static final VT.ref vtbox = (VT.ref) new VT(); \/\/ no binary cast\n-        static VT vt = (VT) vtbox; \/\/ binary cast\n-        static VT.ref box = vt; \/\/ no binary cast\n-        static VT.ref box2 = (VT) box; \/\/ binary cast\n-        static VT.ref box3 = id(new VT()); \/\/ no binary cast + no binary cast\n-\n-        static VT id(VT.ref vtb) {\n-            return (VT) vtb; \/\/ binary\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new BoxValCastTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"BoxValCastTest$VT.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-        \"checkcast     #7                  \/\/ class \\\"QBoxValCastTest$VT;\\\"\"\n-\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-         int errors = 0;\n-         for (String eo: expectedOut) {\n-             if (!out.contains(eo)) {\n-                 System.err.println(\"Match not found for string: \" + eo);\n-                 errors++;\n-             }\n-         }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-        String [] splits = out.split(\"checkcast     #7\", -1);\n-        if (splits.length != 4) {\n-             throw new AssertionError(\"Unexpected javap output: \" + splits.length);\n-        }\n-        splits = out.split(\"checkcast\", -1);\n-        if (splits.length != 9) {\n-             throw new AssertionError(\"Unexpected javap output: \" + splits.length);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BoxValCastTest.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -35,1 +35,1 @@\n-\tprivate final int x, ymx;\n+    private final int x, ymx;\n@@ -37,1 +37,1 @@\n-\tCanonicalCtorTest(int x, int y) {\n+    CanonicalCtorTest(int x, int y) {\n@@ -39,2 +39,2 @@\n-\t\tymx = y - x;\n-\t\tthis.x = x;\n+        ymx = y - x;\n+        this.x = x;\n@@ -44,3 +44,3 @@\n-\t\tvalidate();                 \/\/ OK: DU = {}\n-\t\tthis.validate();            \/\/ OK: DU = {}\n-\t\tCanonicalCtorTest.this.validate();          \/\/ OK: DU = {}\n+        validate();                 \/\/ OK: DU = {}\n+        this.validate();            \/\/ OK: DU = {}\n+        CanonicalCtorTest.this.validate();          \/\/ OK: DU = {}\n@@ -48,3 +48,3 @@\n-\t\tassert (this.x > 0);        \/\/ OK: DU = {}\n-\t\tassert (this.y() > 0);      \/\/ OK: DU = {}\n-\t}\n+        assert (this.x > 0);        \/\/ OK: DU = {}\n+        assert (this.y() > 0);      \/\/ OK: DU = {}\n+    }\n@@ -52,3 +52,3 @@\n-\tint x() {\n-\t\treturn x;\n-\t}\n+    int x() {\n+        return x;\n+    }\n@@ -56,3 +56,3 @@\n-\tint y() {\n-\t\treturn ymx + x;\n-\t}\n+    int y() {\n+        return ymx + x;\n+    }\n@@ -60,3 +60,3 @@\n-\tvoid validate() {\n-\t\tassert (x() > 0 && y() > 0);\n-\t}\n+    void validate() {\n+        assert (x() > 0 && y() > 0);\n+    }\n@@ -64,5 +64,5 @@\n-\tpublic static void main(String... av) {\n-\t\tCanonicalCtorTest z = new CanonicalCtorTest(1, 10);\n-\t\tassert (z.x() == 1);\n-\t\tassert (z.y() == 10);\n-\t}\n+    public static void main(String... av) {\n+        CanonicalCtorTest z = new CanonicalCtorTest(1, 10);\n+        assert (z.x() == 1);\n+        assert (z.y() == 10);\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CanonicalCtorTest.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check that casting to a value type involves no null check when values are not recognized in source.\n- * @compile -XDenablePrimitiveClasses Point.java\n- * @compile\/fail\/ref=CastNoNullCheckTest.out -source 10 -XDrawDiagnostics CastNoNullCheckTest.java\n- * @ignore\n- *\/\n-\n-public class CastNoNullCheckTest {\n-    void m() {\n-        Object o = null;\n-        Point p = (Point) o;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNoNullCheckTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 10\n-CastNoNullCheckTest.java:11:9: compiler.err.cant.access: Point, (compiler.misc.bad.class.file.header: Point.class, (compiler.misc.bad.class.signature: \"QPoint;\"))\n-1 error\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNoNullCheckTest.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8207332\n- * @summary Verify that chained assignments in value constructors are lowered correctly.\n- * @compile -XDenablePrimitiveClasses ChainedAssignmentTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ChainedAssignmentTest\n- * @ignore\n- *\/\n-\n-public class ChainedAssignmentTest {\n-\n-    static primitive class Point {\n-        int x;\n-        int y;\n-        Point() {\n-            x = y = 1234; \/\/ Problematic\n-        }\n-    }\n-\n-    static primitive class LongPoint {\n-        long x;\n-        long y;\n-        LongPoint() {\n-            x = y = 1234; \/\/ Problematic\n-        }\n-    }\n-    public static void main(String[] args) {\n-        Point p = new Point();\n-        if (p.x != 1234 || p.y != 1234)\n-            throw new AssertionError(\"Broken\");\n-\n-        LongPoint lp = new LongPoint();\n-        if (lp.x != 1234 || lp.y != 1234)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ChainedAssignmentTest.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Value types and their instance fields are implicitly final\n- *\n- * @compile\/fail\/ref=CheckFinal.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFinal.java\n- * @ignore\n- *\/\n-\n-primitive class CheckFinal { \/\/ implicitly final\n-    int fi;  \/\/ implicitly final\n-    final int fe; \/\/ explicitly final\n-    void f(int x) {\n-        int y;\n-        x = y = 0;\n-        this.fi = 100;  \/\/ Error.\n-        this.fe = 100;  \/\/ Error.\n-        this.xs = 100; \/\/ OK.\n-        this.xsf = 100; \/\/ Error\n-\n-        CheckFinal cf = new CheckFinal() {}; \/\/ Error, final class cannot be extended.\n-    }\n-    final Object o = new Object() { int i;\n-                         void foo() {\n-                             i = 100;\n-                         };\n-                     };\n-    static int xs; \/\/ OK.\n-    static final int xsf; \/\/ OK.\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFinal.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-CheckFinal.java:14:13: compiler.err.cant.assign.val.to.var: final, fi\n-CheckFinal.java:15:13: compiler.err.cant.assign.val.to.var: final, fe\n-CheckFinal.java:17:13: compiler.err.cant.assign.val.to.var: static final, xsf\n-CheckFinal.java:19:29: compiler.err.cant.inherit.from.final: CheckFinal\n-CheckFinal.java:19:42: compiler.err.identity.type.has.value.super.type: compiler.misc.anonymous.class: CheckFinal, CheckFinal\n-5 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFinal.out","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check value flag in class file\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n- * @run main CheckFlags\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public class CheckFlags {\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(CheckFlags.class.getResourceAsStream(\"Point.class\"));\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n-            throw new Exception(\"Value flag not set\");\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_FINAL))\n-            throw new Exception(\"Final flag not set\");\n-\n-        Field [] flds = cls.fields;\n-\n-        for (Field fld : flds) {\n-            if (!fld.access_flags.is(AccessFlags.ACC_FINAL))\n-                throw new Exception(\"Final flag not set\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlags.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8237071\n- * @summary Totalize System.identityHashCode for inline types.\n- * @compile -XDenablePrimitiveClasses CheckIdentityHash.java\n- * @ignore\n- *\/\n-\n-final primitive class CheckIdentityHash {\n-    int identityHashCode(CheckIdentityHash x) {\n-        return 0;\n-    }\n-    void test(CheckIdentityHash v) {\n-        this.identityHashCode(v);\n-        System.identityHashCode(v);\n-        System.identityHashCode(this);\n-        java.lang.System.identityHashCode(v);\n-        java.lang.System.identityHashCode(this);\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8237071\n- * @summary Totalize System.identityHashCode for inline types.\n- * @compile -XDenablePrimitiveClasses CheckIdentityHash01.java\n- * @ignore\n- *\/\n-import static java.lang.System.*;\n-\n-public final primitive class CheckIdentityHash01 {\n-    void test(CheckIdentityHash01 v) {\n-\n-        identityHashCode(v);      \/\/ <- error\n-        identityHashCode(this);   \/\/ <- error\n-\n-        System system = null;\n-        system.identityHashCode(v);      \/\/ <- error\n-        system.identityHashCode(this);   \/\/ <- error\n-\n-        System.identityHashCode(v);      \/\/ <- error\n-        System.identityHashCode(this);   \/\/ <- error\n-\n-        java.lang.System.identityHashCode(v);    \/\/ <- error\n-        java.lang.System.identityHashCode(this); \/\/ <- error\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash01.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8211910\n- * @summary [lworld] Reinstate support for local value classes.\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses CheckLocalClasses.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckLocalClasses\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public class CheckLocalClasses {\n-    public class RefOuter {\n-        void foo() {\n-            RefOuter o = new RefOuter();\n-            primitive  class Inner {\n-                private final int value2;\n-                public Inner(int value2) {\n-                    System.out.println(o);\n-                    this.value2 = value2;\n-                }\n-            }\n-        }\n-    }\n-    public primitive class ValueOuter {\n-        int x = 10;\n-        void foo() {\n-            ValueOuter o = new ValueOuter();\n-            primitive class Inner {\n-                private final int value2;\n-                public Inner(int value2) {\n-                    System.out.println(o);\n-                    this.value2 = value2;\n-                }\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(CheckLocalClasses.class.getResourceAsStream(\"CheckLocalClasses$ValueOuter$1Inner.class\"));\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n-            throw new Exception(\"Value flag not set\");\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_FINAL))\n-            throw new Exception(\"Final flag not set\");\n-\n-        cls = ClassFile.read(CheckLocalClasses.class.getResourceAsStream(\"CheckLocalClasses$RefOuter$1Inner.class\"));\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n-            throw new Exception(\"Value flag not set\");\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_FINAL))\n-            throw new Exception(\"Final flag not set\");\n-\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckLocalClasses.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,13 +0,0 @@\n-CheckMakeDefault.java:9:15: compiler.err.illegal.combination.of.modifiers: interface, primitive\n-CheckMakeDefault.java:10:24: compiler.err.illegal.combination.of.modifiers: abstract, primitive\n-CheckMakeDefault.java:26:32: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: boolean, int)\n-CheckMakeDefault.java:27:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte, boolean)\n-CheckMakeDefault.java:28:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: char, boolean)\n-CheckMakeDefault.java:29:31: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, boolean)\n-CheckMakeDefault.java:30:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: short, boolean)\n-CheckMakeDefault.java:31:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, boolean)\n-CheckMakeDefault.java:32:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, boolean)\n-CheckMakeDefault.java:33:37: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, boolean)\n-CheckMakeDefault.java:34:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n-CheckMakeDefault.java:35:36: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte[], int)\n-12 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMakeDefault.out","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -1,20 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check null store into multidimensional array\n- * @compile\/fail\/ref=CheckMultiDimensionalArrayStore.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckMultiDimensionalArrayStore.java\n- * @ignore\n- *\/\n-\n-public class CheckMultiDimensionalArrayStore {\n-    primitive final class V {\n-        final int x = 10;\n-        class Y {\n-            V [][][] va = new V[][][] {{{ null }}};\n-            V [][] va2 =  {{ null }};\n-            void foo() {\n-                va = new V[][][] {{{ null }}};\n-                va[0][0][0] = null;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMultiDimensionalArrayStore.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-CheckMultiDimensionalArrayStore.java:11:43: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckMultiDimensionalArrayStore.V)\n-CheckMultiDimensionalArrayStore.java:12:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckMultiDimensionalArrayStore.V)\n-CheckMultiDimensionalArrayStore.java:14:38: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckMultiDimensionalArrayStore.V)\n-CheckMultiDimensionalArrayStore.java:15:31: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckMultiDimensionalArrayStore.V)\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMultiDimensionalArrayStore.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,14 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8222790\n- * @summary javac diagnostics don't discriminate between inline types and there nullable projection types.\n- * @ignore\n- * @compile\/fail\/ref=CheckQuestionInMessages.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckQuestionInMessages.java\n- *\/\n-\n-import java.util.List;\n-\n-primitive class X {\n-    List<X.ref> ls = new Object();\n-    X.ref[] xa = new Object[10];  \/\/ no support for Object.ref yet, but they are the same.\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckQuestionInMessages.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, java.util.List<X.ref>)\n-CheckQuestionInMessages.java:13:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object[], X.ref[])\n-2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckQuestionInMessages.out","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,12 +0,0 @@\n-CheckMakeDefault.java:10:20: compiler.err.abstract.value.class.cannot.be.inner: (compiler.misc.abstract.value.class: Point.A)\n-CheckMakeDefault.java:26:32: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: boolean, int)\n-CheckMakeDefault.java:27:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte, boolean)\n-CheckMakeDefault.java:28:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: char, boolean)\n-CheckMakeDefault.java:29:31: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, boolean)\n-CheckMakeDefault.java:30:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: short, boolean)\n-CheckMakeDefault.java:31:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, boolean)\n-CheckMakeDefault.java:32:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, boolean)\n-CheckMakeDefault.java:33:37: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, boolean)\n-CheckMakeDefault.java:34:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n-CheckMakeDefault.java:35:36: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte[], int)\n-11 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.out","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -75,14 +75,0 @@\n-        assertFail(\"compiler.err.instance.field.not.allowed\",\n-                \"\"\"\n-                abstract value class V {\n-                    int f;  \/\/ Error, abstract value class may not declare an instance field.\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n-                    abstract value class V {\n-                        \/\/ Error, an abstract value class cant be an inner class\n-                    }\n-                }\n-                \"\"\");\n@@ -97,12 +83,0 @@\n-        assertFail(\"compiler.err.abstract.value.class.declares.init.block\",\n-                \"\"\"\n-                abstract value class V {\n-                    { int f = 42; } \/\/ Error, abstract value class may not declare an instance initializer.\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n-                \"\"\"\n-                abstract value class V {\n-                    V(int x) {}  \/\/ Error, abstract value class may not declare a non-trivial constructor.\n-                }\n-                \"\"\");\n@@ -133,16 +107,0 @@\n-        assertFail(\"compiler.err.instance.field.not.allowed\",\n-                \"\"\"\n-                abstract class I {\n-                    int f;\n-                }\n-                value class V extends I {}\n-                \"\"\");\n-\n-        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n-                    abstract class I {}\n-                    static value class V extends I\n-                }\n-                \"\"\");\n-\n@@ -156,16 +114,0 @@\n-\n-        assertFail(\"compiler.err.abstract.value.class.declares.init.block\",\n-                \"\"\"\n-                abstract class I {\n-                    { int f = 42; }\n-                }\n-                value class V extends I {}\n-                \"\"\");\n-\n-        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n-                \"\"\"\n-                abstract class I {\n-                    I(int x) {}\n-                }\n-                value class V extends I {}\n-                \"\"\");\n@@ -242,6 +184,0 @@\n-        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n-                    abstract value class AbsValue {}\n-                }\n-                \"\"\");\n@@ -373,43 +309,0 @@\n-    }\n-\n-    @Test\n-    void testNontrivialConstructor() {\n-        assertOK(\n-                \"\"\"\n-                abstract value class V {\n-                    public V() {} \/\/ trivial ctor\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.abstract.value.class.constructor.has.weaker.access\",\n-                \"\"\"\n-                abstract value class V {\n-                    private V() {} \/\/ non-trivial, more restrictive access than the class.\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n-                \"\"\"\n-                abstract value class V {\n-                    public V(int x) {} \/\/ non-trivial ctor as it declares formal parameters.\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.be.generic\",\n-                \"\"\"\n-                abstract value class V {\n-                    <T> V() {} \/\/ non trivial as it declares type parameters.\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.throw\",\n-                \"\"\"\n-                abstract value class V {\n-                    V() throws Exception {} \/\/ non-trivial as it throws\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.abstract.value.class.no.arg.constructor.must.be.empty\",\n-                \"\"\"\n-                abstract value class V {\n-                    V() {\n-                        System.out.println(\"\");\n-                    } \/\/ non-trivial as it has a body.\n-                }\n-                \"\"\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"modified"}]}