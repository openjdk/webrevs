{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import java.util.HashMap;\n@@ -55,1 +54,0 @@\n-import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -360,1 +358,1 @@\n-        if (isInitOrVNew() && owner.hasOuterInstance()) {\n+        if (name == name.table.names.init && owner.hasOuterInstance()) {\n@@ -408,1 +406,1 @@\n-        return (flags() & INTERFACE) != 0;\n+        return (flags_field & INTERFACE) != 0;\n@@ -419,9 +417,1 @@\n-    public boolean isPrimitiveClass() {\n-        return (flags() & PRIMITIVE_CLASS) != 0;\n-    }\n-\n-        return !isInterface() && (flags() & VALUE_CLASS) != 0;\n-    }\n-\n-    public boolean isConcreteValueClass() {\n-        return isValueClass() && !isAbstract();\n+        return (flags_field & VALUE_CLASS) != 0;\n@@ -432,9 +422,1 @@\n-        return !isInterface() && (flags() & IDENTITY_TYPE) != 0;\n-    }\n-\n-    public boolean isValueInterface() {\n-        return isInterface() && (flags() & VALUE_CLASS) != 0;\n-    }\n-\n-    public boolean isIdentityInterface() {\n-        return isInterface() && (flags() & IDENTITY_TYPE) != 0;\n+        return !isInterface() && (flags_field & IDENTITY_TYPE) != 0;\n@@ -484,13 +466,1 @@\n-        return name == name.table.names.init && (flags() & STATIC) == 0;\n-    }\n-\n-    \/** Is this symbol a value object factory?\n-     *\/\n-    public boolean isValueObjectFactory() {\n-        return name == name.table.names.vnew && this.type.getReturnType().tsym == this.owner;\n-    }\n-\n-    \/** Is this symbol a constructor or value factory?\n-     *\/\n-    public boolean isInitOrVNew() {\n-        return name.table.names.isInitOrVNew(name);\n+        return name == name.table.names.init;\n@@ -1359,1 +1329,1 @@\n-                new ClassType(Type.noType, null, null, List.nil(), Flavor.X_Typeof_X),\n+                new ClassType(Type.noType, null, null, List.nil()),\n@@ -1396,2 +1366,1 @@\n-                                              type.getMetadata(),\n-                                              type.getFlavor());\n+                                              type.getMetadata());\n@@ -1463,8 +1432,0 @@\n-            } finally {\n-                if (this.type != null && this.type.hasTag(CLASS)) {\n-                    ClassType ct = (ClassType) this.type;\n-                    ct.flavor = ct.flavor.metamorphose((this.flags_field & PRIMITIVE_CLASS) != 0);\n-                    if (!this.type.isIntersection() && this.erasure_field != null && this.erasure_field.hasTag(CLASS)) {\n-                        ((ClassType) this.erasure_field).flavor = ct.flavor;\n-                    }\n-                }\n@@ -1658,1 +1619,0 @@\n-                classType.flavor = Flavor.X_Typeof_X;\n@@ -2022,1 +1982,1 @@\n-                String s = isInitOrVNew()\n+                String s = (name == name.table.names.init)\n@@ -2084,1 +2044,1 @@\n-            if (isInitOrVNew() || _other.kind != MTH) return false;\n+            if (isConstructor() || _other.kind != MTH) return false;\n@@ -2091,1 +2051,1 @@\n-                types.asSuper(owner.type.referenceProjectionOrSelf(), other.owner) != null &&\n+                types.asSuper(owner.type, other.owner) != null &&\n@@ -2153,1 +2113,1 @@\n-            if (isInitOrVNew() || _other.kind != MTH) return false;\n+            if (isConstructor() || _other.kind != MTH) return false;\n@@ -2160,1 +2120,1 @@\n-                types.asSuper(owner.type.referenceProjectionOrSelf(), other.owner) != null) {\n+                types.asSuper(owner.type, other.owner) != null) {\n@@ -2277,1 +2237,1 @@\n-            if (isInitOrVNew())\n+            if (name == name.table.names.init)\n@@ -2465,1 +2425,1 @@\n-                if (refSym.isInitOrVNew()) {\n+                if (refSym.isConstructor()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":14,"deletions":54,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -108,1 +107,0 @@\n-    boolean allowPrimitiveClasses;\n@@ -149,2 +147,0 @@\n-        Source source = Source.instance(context);\n-        allowPrimitiveClasses = Source.Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -213,1 +209,0 @@\n-        localEnv.info.isSelfCall = false;\n@@ -266,1 +261,0 @@\n-        localEnv.info.isSelfCall = false;\n@@ -517,4 +511,0 @@\n-        if (allowPrimitiveClasses) {\n-            ct.flavor = ct.flavor.metamorphose((c.flags_field & PRIMITIVE_CLASS) != 0);\n-        }\n-\n@@ -539,6 +529,0 @@\n-        if (allowPrimitiveClasses && ct.isPrimitiveClass()) {\n-            if (ct.projection != null) {\n-                ct.projection.typarams_field = ct.typarams_field;\n-                ct.projection.allparams_field = ct.allparams_field;\n-            }\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -66,0 +65,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties;\n@@ -68,0 +68,1 @@\n+import com.sun.tools.javac.tree.JCTree;\n@@ -79,0 +80,1 @@\n+import static com.sun.tools.javac.code.Scope.LookupKind.NON_RECURSIVE;\n@@ -114,4 +116,0 @@\n-    \/** Switch: allow primitive classes.\n-     *\/\n-    boolean allowPrimitiveClasses;\n-\n@@ -296,1 +294,0 @@\n-        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -516,1 +513,0 @@\n-        case 'Q':\n@@ -520,4 +516,0 @@\n-                if ((char) signature[sigp] == 'Q' && !allowPrimitiveClasses) {\n-                    throw badClassFile(\"bad.class.signature\",\n-                                       quoteBadSignature());\n-                }\n@@ -581,2 +573,1 @@\n-        byte prefix = signature[sigp];\n-        if (prefix != 'L' && (!allowPrimitiveClasses || prefix != 'Q'))\n+        if (signature[sigp] != 'L')\n@@ -587,1 +578,0 @@\n-        ClassType.Flavor flavor;\n@@ -599,2 +589,0 @@\n-                \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n-                flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n@@ -604,2 +592,1 @@\n-                        \/\/ Todo: This spews out more objects than before, i.e no reuse with identical flavor\n-                        return new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata(), flavor);\n+                        return new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata());\n@@ -607,1 +594,1 @@\n-                    return new ClassType(outer, List.nil(), t, List.nil(), flavor);\n+                    return new ClassType(outer, List.nil(), t, List.nil());\n@@ -617,3 +604,1 @@\n-                \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n-                flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n-                outer = new ClassType(outer, sigToTypes('>'), t, List.nil(), flavor) {\n+                outer = new ClassType(outer, sigToTypes('>'), t, List.nil()) {\n@@ -682,3 +667,1 @@\n-                    \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n-                    flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n-                    outer = new ClassType(outer, List.nil(), t, List.nil(), flavor);\n+                    outer = new ClassType(outer, List.nil(), t, List.nil());\n@@ -876,13 +859,0 @@\n-                    if (sym.isInitOrVNew() && sym.type.getParameterTypes().size() == 0) {\n-                        try {\n-                            int code_length = buf.getInt(bp + 4);\n-                            if ((code_length == 1 && buf.getByte(bp + 8) == (byte) ByteCodes.return_) ||\n-                                (code_length == 5 && buf.getByte(bp + 8) == ByteCodes.aload_0 &&\n-                                    buf.getByte(bp + 9) == (byte) ByteCodes.invokespecial &&\n-                                            buf.getByte(bp + 12) == (byte) ByteCodes.return_)) {\n-                                sym.flags_field |= EMPTYNOARGCONSTR;\n-                            }\n-                        } catch (UnderflowException e) {\n-                            throw badClassFile(\"bad.class.truncated.at.offset\", Integer.toString(e.getLength()));\n-                        }\n-                    }\n@@ -1068,7 +1038,0 @@\n-                        \/\/ Map value class factory methods back to constructors for the benefit of earlier pipeline stages\n-                        if (sym.kind == MTH && sym.name == names.vnew && !sym.type.getReturnType().hasTag(TypeTag.VOID)) {\n-                            sym.type = new MethodType(sym.type.getParameterTypes(),\n-                                    syms.voidType,\n-                                    sym.type.getThrownTypes(),\n-                                    syms.methodClass);\n-                        }\n@@ -1428,1 +1391,1 @@\n-        if (!names.isInitOrVNew(nt.name))\n+        if (nt.name != names.init)\n@@ -2666,8 +2629,1 @@\n-        if (names.isInitOrVNew(name) && ((flags & STATIC) != 0)) {\n-            flags &= ~STATIC;\n-            type = new MethodType(type.getParameterTypes(),\n-                    syms.voidType,\n-                    type.getThrownTypes(),\n-                    syms.methodClass);\n-        }\n-        if (names.isInitOrVNew(name) && currentOwner.hasOuterInstance()) {\n+        if (name == names.init && currentOwner.hasOuterInstance()) {\n@@ -2719,1 +2675,1 @@\n-            ((name == names.init || name == names.vnew) && !t.getReturnType().hasTag(TypeTag.VOID))) {\n+            (name == names.init && !t.getReturnType().hasTag(TypeTag.VOID))) {\n@@ -2783,1 +2739,1 @@\n-        if (names.isInitOrVNew(sym.name) && currentOwner.hasOuterInstance()) {\n+        if (sym.name == names.init && currentOwner.hasOuterInstance()) {\n@@ -2947,8 +2903,0 @@\n-        if (c == syms.objectType.tsym) {\n-            flags &= ~IDENTITY_TYPE; \/\/ jlO lacks identity even while being a concrete class.\n-        }\n-        if ((flags & PRIMITIVE_CLASS) != 0) {\n-            if (!allowPrimitiveClasses || (flags & (FINAL | PRIMITIVE_CLASS | IDENTITY_TYPE)) != (FINAL | PRIMITIVE_CLASS)) {\n-                throw badClassFile(\"bad.access.flags\", Flags.toString(flags));\n-            }\n-        }\n@@ -3196,0 +3144,4 @@\n+        if ((flags & ACC_STRICT) != 0) {\n+            flags &= ~ACC_STRICT;\n+            flags |= STRICT;\n+        }\n@@ -3212,3 +3164,0 @@\n-        if ((flags & (ABSTRACT | INTERFACE | ACC_VALUE | ACC_MODULE)) == 0) {\n-            flags |= ACC_IDENTITY;\n-        }\n@@ -3219,14 +3168,1 @@\n-        if ((flags & ACC_PRIMITIVE) != 0) {\n-            flags &= ~ACC_PRIMITIVE;\n-            if (allowPrimitiveClasses) {\n-                flags |= PRIMITIVE_CLASS;\n-            }\n-        }\n-        if ((flags & ACC_VALUE) != 0) {\n-            flags &= ~ACC_VALUE;\n-            if (allowValueClasses) {\n-                flags |= VALUE_CLASS;\n-            }\n-        }\n-        if ((flags & ACC_IDENTITY) != 0) {\n-            flags &= ~ACC_IDENTITY;\n+        if ((flags & ACC_IDENTITY) != 0 || (majorVersion <= V66.major && (flags & INTERFACE) == 0)) {\n@@ -3234,0 +3170,2 @@\n+        } else if ((flags & INTERFACE) == 0 && allowValueClasses && majorVersion > V66.major) {\n+            flags |= VALUE_CLASS;\n@@ -3235,0 +3173,1 @@\n+        flags &= ~ACC_IDENTITY; \/\/ ACC_IDENTITY and SYNCHRONIZED bits overloaded\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":20,"deletions":81,"binary":false,"changes":101,"status":"modified"}]}