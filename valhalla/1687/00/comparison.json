{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"oops\/flatArrayKlass.hpp\"\n@@ -45,2 +46,2 @@\n-  FlatArrayKlass* get_FlatArrayKlass() {\n-    return (FlatArrayKlass*)get_Klass();\n+  const FlatArrayKlass* get_FlatArrayKlass() const {\n+    return FlatArrayKlass::cast(get_Klass());\n@@ -55,0 +56,2 @@\n+  LayoutKind layout_kind() const { return get_FlatArrayKlass()->layout_kind(); }\n+\n","filename":"src\/hotspot\/share\/ci\/ciFlatArrayKlass.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"oops\/flatArrayKlass.hpp\"\n@@ -2316,0 +2317,4 @@\n+      if (klass->is_flat_array_klass() && tkls->offset() == in_bytes(FlatArrayKlass::layout_kind_offset())) {\n+        assert(Opcode() == Op_LoadI, \"must load an int from _layout_kind\");\n+        return TypeInt::make(static_cast<jint>(klass->as_flat_array_klass()->layout_kind()));\n+      }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3776,0 +3776,12 @@\n+\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {IRNode.MEMBAR}, counts = {IRNode.IF, \"3\"}) \/\/ null check, class check, range check\n+    static int test155(Test151Value[] a) {\n+        return a[0].b;\n+    }\n+\n+    @Run(test = \"test155\")\n+    public void test155_verifier() {\n+        test155((Test151Value[])ValueClass.newNullRestrictedNonAtomicArray(Test151Value.class, 1, Test151Value.DEFAULT));\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.valhalla.array.read;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.internal.value.ValueClass;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class HoistArrayChecks {\n+    private static final int SIZE = 1_000_000;\n+\n+    value record Point(byte x, byte y) {\n+        static final Point DEFAULT = new Point((byte) 0, (byte) 0);\n+    }\n+\n+    Point[] nonAtomicFlatArray = (Point[]) ValueClass.newNullRestrictedNonAtomicArray(Point.class, SIZE, Point.DEFAULT);\n+    Point[] atomicFlatArray = (Point[]) ValueClass.newNullRestrictedAtomicArray(Point.class, SIZE, Point.DEFAULT);\n+    Point[] nullableFlatArray = (Point[]) ValueClass.newNullableAtomicArray(Point.class, SIZE);\n+\n+    @Setup\n+    public void setup() {\n+        for (int i = 0; i < SIZE; i++) {\n+            nullableFlatArray[i] = Point.DEFAULT;\n+        }\n+    }\n+\n+    @Benchmark\n+    public int nonAtomicNaive() {\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = nonAtomicFlatArray[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int nonAtomicHoisted() {\n+        Point[] array = nonAtomicFlatArray;\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = array[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int atomicNaive() {\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = atomicFlatArray[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int atomicHoisted() {\n+        Point[] array = atomicFlatArray;\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = array[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int nullableNaive() {\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = nullableFlatArray[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int nullableHoisted() {\n+        Point[] array = nullableFlatArray;\n+        int sum = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            Point p = array[i];\n+            sum += p.x + p.y;\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/array\/read\/HoistArrayChecks.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}