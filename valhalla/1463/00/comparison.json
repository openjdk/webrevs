{"files":[{"patch":"@@ -517,1 +517,1 @@\n-  if (UseArrayFlattening && vk->is_naturally_atomic()  && vk->has_non_atomic_layout()) {\n+  if (vk->maybe_flat_in_array() && vk->is_naturally_atomic() && vk->has_non_atomic_layout()) {\n@@ -522,1 +522,1 @@\n-  } else if (UseArrayFlattening && vk->has_atomic_layout()) {\n+  } else if (vk->maybe_flat_in_array() && vk->has_atomic_layout()) {\n@@ -545,1 +545,1 @@\n-  if (UseArrayFlattening && vk->has_nullable_atomic_layout()) {\n+  if (vk->maybe_flat_in_array() && vk->has_nullable_atomic_layout()) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.internal.value.ValueClass;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test TestFlatArrayElementMaxOops\n+ * @summary Test that the FlatArrayElementMaxOops flag works as expected.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @run main\/othervm -XX:+UseArrayFlattening -XX:FlatArrayElementMaxOops=0\n+ *                   -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                   runtime.valhalla.inlinetypes.TestFlatArrayElementMaxOops 0\n+ * @run main\/othervm -XX:+UseArrayFlattening -XX:FlatArrayElementMaxOops=1\n+ *                   -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                   runtime.valhalla.inlinetypes.TestFlatArrayElementMaxOops 1\n+ * @run main\/othervm -XX:+UseArrayFlattening -XX:FlatArrayElementMaxOops=2\n+ *                   -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                   runtime.valhalla.inlinetypes.TestFlatArrayElementMaxOops 2\n+ *\/\n+\n+public class TestFlatArrayElementMaxOops {\n+\n+    @LooselyConsistentValue\n+    static value class ValueWithOneOoop {\n+        Object obj1 = null;\n+    }\n+\n+    @LooselyConsistentValue\n+    static value class ValueWithTwoOoops {\n+        Object obj1 = null;\n+        Object obj2 = null;\n+    }\n+\n+    public static void main(String[] args) {\n+        int FlatArrayElementMaxOops = Integer.valueOf(args[0]);\n+        Object[] array = ValueClass.newNullRestrictedNonAtomicArray(ValueWithOneOoop.class, 1, new ValueWithOneOoop());\n+        Asserts.assertEquals(ValueClass.isFlatArray(array), FlatArrayElementMaxOops >= 1);\n+        array = ValueClass.newNullRestrictedAtomicArray(ValueWithOneOoop.class, 1, new ValueWithOneOoop());\n+        Asserts.assertEquals(ValueClass.isFlatArray(array), FlatArrayElementMaxOops >= 1);\n+        array = ValueClass.newNullableAtomicArray(ValueWithOneOoop.class, 1);\n+        Asserts.assertEquals(ValueClass.isFlatArray(array), FlatArrayElementMaxOops >= 1);\n+\n+        array = ValueClass.newNullRestrictedNonAtomicArray(ValueWithTwoOoops.class, 1, new ValueWithTwoOoops());\n+        Asserts.assertEquals(ValueClass.isFlatArray(array), FlatArrayElementMaxOops >= 2);\n+        array = ValueClass.newNullRestrictedAtomicArray(ValueWithTwoOoops.class, 1, new ValueWithTwoOoops());\n+        Asserts.assertEquals(ValueClass.isFlatArray(array), FlatArrayElementMaxOops >= 2);\n+        array = ValueClass.newNullableAtomicArray(ValueWithTwoOoops.class, 1);\n+        Asserts.assertFalse(ValueClass.isFlatArray(array));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFlatArrayElementMaxOops.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}