{"files":[{"patch":"@@ -2406,0 +2406,1 @@\n+        \/\/ When calling this with array = MyValue1[], we will already throw an ArrayStoreException here.\n@@ -2407,2 +2408,2 @@\n-        \/\/ Always throws a ClassCastException because we just successfully stored\n-        \/\/ a non-value type value and therefore the array can't be a value class array.\n+        \/\/ Always returns false because we just successfully stored a non-value object and therefore the array can't\n+        \/\/ be a value class array.\n@@ -2413,9 +2414,1 @@\n-    \/\/ With the default warm-up, we will profile the ArrayStoreException already in the interpreter and pass it in the\n-    \/\/ MDO to the C2 compiler (see InterpreterRuntime::create_klass_exception). As a result, C2 is not able to propagate\n-    \/\/ the improved type in the CheckCastPP after the subtype check because we've seen too many traps being taken at\n-    \/\/ that bci (see Compile::too_many_traps() which checks that zero traps have been taken so far). Thus, the subtype\n-    \/\/ check for the value class cannot be removed either. Set a warm-up value of zero to avoid that the trap is\n-    \/\/ observed in the interpreter. Note that C2 also required MonomorphicArrayCheck to be set in order to propagate\n-    \/\/ the type. Same for test98-100().\n-    @Warmup(0)\n-    public void test97_verifier() {\n+    public void test97_verifier(RunInfo runInfo) {\n@@ -2424,5 +2417,22 @@\n-        try {\n-            test97(array1);\n-            throw new RuntimeException(\"Should throw ArrayStoreException\");\n-        } catch (ArrayStoreException e) {\n-            \/\/ Expected\n+        \/\/ When emitting the array store check \"NonValueClass <: Object[]\" for \"array[0] = new NonValueClass(42)\" in\n+        \/\/ test97(), we speculatively assume that Object[] is exact and emit such a check with an uncommont trap before\n+        \/\/ the array store check at the same bci. We propagate that information with an additional CheckCastPP node\n+        \/\/ feeding into the array store subtype check.\n+        \/\/ At runtime, we will hit the ArrayStoreException in the first execution when array is a MyValue1[].\n+        \/\/ With the default IR framework warm-up, we will profile the ArrayStoreException already in the interpreter and\n+        \/\/ pass it in the MDO to the C2 compiler (see InterpreterRuntime::create_klass_exception). As a result, C2 is\n+        \/\/ not able to speculatively cast the array of type Object[] to an exact type before the first subtype check\n+        \/\/ because we've seen too many traps being taken at that bci due to the ArrayStoreException that was hit at the\n+        \/\/ very same bci (see Compile::too_many_traps() which checks that zero traps have been taken  so far). Thus,\n+        \/\/ the second subtype check for the value class cannot be removed either.\n+        \/\/ By not executing test97() with MyValue1[] during warm-up, which would trigger the ArrayStoreException,\n+        \/\/ we will not observe an ArrayStoreException before C2 compilation. Note that C2 also require\n+        \/\/ MonomorphicArrayCheck in order to emit the speculative exactness check.\n+        \/\/ The same is required for test98-100().\n+        if (!runInfo.isWarmUp()) {\n+            try {\n+                test97(array1);\n+                throw new RuntimeException(\"Should throw ArrayStoreException\");\n+            } catch (ArrayStoreException e) {\n+                \/\/ Expected\n+            }\n@@ -2439,0 +2449,1 @@\n+        \/\/ When calling this with array = MyValue1[], we will already throw an ArrayStoreException here.\n@@ -2446,2 +2457,1 @@\n-    @Warmup(0) \/\/ See test97() for details.\n-    public void test98_verifier() {\n+    public void test98_verifier(RunInfo runInfo) {\n@@ -2450,5 +2460,7 @@\n-        try {\n-            test98(array1);\n-            throw new RuntimeException(\"Should throw ArrayStoreException\");\n-        } catch (ArrayStoreException e) {\n-            \/\/ Expected\n+        if (!runInfo.isWarmUp()) { \/\/ See test97() for the reason why we need this.\n+            try {\n+                test98(array1);\n+                throw new RuntimeException(\"Should throw ArrayStoreException\");\n+            } catch (ArrayStoreException e) {\n+                \/\/ Expected\n+            }\n@@ -2469,0 +2481,1 @@\n+        \/\/ When calling this with array = MyValue1[], we will already throw an ArrayStoreException here.\n@@ -2477,2 +2490,1 @@\n-    @Warmup(0) \/\/ See test97() for details.\n-    public void test99_verifier() {\n+    public void test99_verifier(RunInfo runInfo) {\n@@ -2481,5 +2493,7 @@\n-        try {\n-            test99(array1);\n-            throw new RuntimeException(\"Should throw ArrayStoreException\");\n-        } catch (ArrayStoreException e) {\n-            \/\/ Expected\n+        if (!runInfo.isWarmUp()) { \/\/ See test97() for the reason why we need this.\n+            try {\n+                test99(array1);\n+                throw new RuntimeException(\"Should throw ArrayStoreException\");\n+            } catch (ArrayStoreException e) {\n+                \/\/ Expected\n+            }\n@@ -2500,0 +2514,1 @@\n+        \/\/ When calling this with array = MyValue1[], we will already throw an ArrayStoreException here.\n@@ -2507,2 +2522,1 @@\n-    @Warmup(0) \/\/ See test97() for details.\n-    public void test100_verifier() {\n+    public void test100_verifier(RunInfo runInfo) {\n@@ -2511,5 +2525,7 @@\n-        try {\n-            test100(array1);\n-            throw new RuntimeException(\"Should throw ArrayStoreException\");\n-        } catch (ArrayStoreException e) {\n-            \/\/ Expected\n+        if (!runInfo.isWarmUp()) { \/\/ See test97() for the reason why we need this.\n+            try {\n+                test100(array1);\n+                throw new RuntimeException(\"Should throw ArrayStoreException\");\n+            } catch (ArrayStoreException e) {\n+                \/\/ Expected\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":53,"deletions":37,"binary":false,"changes":90,"status":"modified"}]}