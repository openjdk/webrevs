{"files":[{"patch":"@@ -6230,0 +6230,10 @@\n+        } else {\n+          \/\/ Just poking the system dictionary to see if the class has already be loaded\n+          oop loader = loader_data()->class_loader();\n+          InstanceKlass* klass = SystemDictionary::find_instance_klass(THREAD, name, Handle(THREAD, loader));\n+          if (UseNewCode) {\n+            assert(!name->equals(\"java\/lang\/Integer\") || klass != nullptr, \"Integer should be loaded\");\n+          }\n+          if (klass != nullptr && klass->is_inline_klass()) {\n+            _inline_layout_info_array->adr_at(fieldinfo.index())->set_klass(InlineKlass::cast(klass));\n+          }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -194,0 +194,6 @@\n+static void add_wrapper_class(JavaThread* current, ClassLoaderData* cld, Symbol* classname) {\n+  InstanceKlass* ik = SystemDictionary::find_instance_klass(current, classname, Handle(current, nullptr));\n+  assert(ik != nullptr, \"Must exist\");\n+  SystemDictionary::add_to_initiating_loader(current, ik, cld);\n+}\n+\n@@ -195,0 +201,1 @@\n+  ClassLoaderData* cld = nullptr;\n@@ -197,1 +204,1 @@\n-    return ClassLoaderDataGraph::add(class_loader, true);\n+    cld = ClassLoaderDataGraph::add(class_loader, true);\n@@ -199,1 +206,1 @@\n-    return (class_loader() == nullptr) ? ClassLoaderData::the_null_class_loader_data() :\n+    cld = (class_loader() == nullptr) ? ClassLoaderData::the_null_class_loader_data() :\n@@ -202,0 +209,13 @@\n+  if (class_loader() != nullptr && cld->dictionary() != nullptr) {\n+    MonitorLocker mu1(SystemDictionary_lock);\n+    JavaThread* current = JavaThread::current();\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Boolean());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Byte());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Character());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Short());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Integer());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Long());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Float());\n+    add_wrapper_class(current, cld, vmSymbols::java_lang_Double());\n+  }\n+  return cld;\n@@ -1749,1 +1769,0 @@\n-#if INCLUDE_CDS\n@@ -1752,1 +1771,3 @@\n-\/\/ This API should be used only by AOTLinkedClassBulkLoader\n+\/\/ This API is used by AOTLinkedClassBulkLoader and to register boxing\n+\/\/ classes from java.lang in all class loaders to enable more value\n+\/\/ classes optimizations\n@@ -1756,1 +1777,0 @@\n-  assert(CDSConfig::is_using_aot_linked_classes(), \"must be\");\n@@ -1762,2 +1782,3 @@\n-  assert(dictionary->find_class(current, name) == nullptr, \"sanity\");\n-  dictionary->add_klass(current, name, k);\n+  if (dictionary->find_class(current, name) == nullptr) {\n+    dictionary->add_klass(current, name, k);\n+  }\n@@ -1765,1 +1786,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-                                       ClassLoaderData* loader_data) NOT_CDS_RETURN;\n+                                       ClassLoaderData* loader_data);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}