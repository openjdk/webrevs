{"files":[{"patch":"@@ -6230,0 +6230,7 @@\n+        } else {\n+          \/\/ Just poking the system dictionary to see if the class has already be loaded\n+          oop loader = loader_data()->class_loader();\n+          InstanceKlass* klass = SystemDictionary::find_instance_klass(THREAD, name, Handle(THREAD, loader));\n+          if (klass != nullptr && klass->is_inline_klass()) {\n+            _inline_layout_info_array->adr_at(fieldinfo.index())->set_klass(InlineKlass::cast(klass));\n+          }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -194,0 +194,19 @@\n+static void add_wrapper_class(JavaThread* current, ClassLoaderData* cld, Symbol* classname) {\n+  InstanceKlass* ik = SystemDictionary::find_instance_klass(current, classname, Handle(current, nullptr));\n+  assert(ik != nullptr, \"Must exist\");\n+  SystemDictionary::add_to_initiating_loader(current, ik, cld);\n+}\n+\n+static void add_wrapper_classes(ClassLoaderData* cld) {\n+  MonitorLocker mu1(SystemDictionary_lock);\n+  JavaThread* current = JavaThread::current();\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Boolean());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Byte());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Character());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Short());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Integer());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Long());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Float());\n+  add_wrapper_class(current, cld, vmSymbols::java_lang_Double());\n+}\n+\n@@ -199,2 +218,7 @@\n-    return (class_loader() == nullptr) ? ClassLoaderData::the_null_class_loader_data() :\n-                                      ClassLoaderDataGraph::find_or_create(class_loader);\n+    if (class_loader() == nullptr) {\n+      return ClassLoaderData::the_null_class_loader_data();\n+    } else {\n+      ClassLoaderData* cld = ClassLoaderDataGraph::find_or_create(class_loader);\n+      add_wrapper_classes(cld);\n+      return cld;\n+    }\n@@ -1749,1 +1773,0 @@\n-#if INCLUDE_CDS\n@@ -1752,1 +1775,3 @@\n-\/\/ This API should be used only by AOTLinkedClassBulkLoader\n+\/\/ This API is used by AOTLinkedClassBulkLoader and to register boxing\n+\/\/ classes from java.lang in all class loaders to enable more value\n+\/\/ classes optimizations\n@@ -1756,1 +1781,0 @@\n-  assert(CDSConfig::is_using_aot_linked_classes(), \"must be\");\n@@ -1762,2 +1786,3 @@\n-  assert(dictionary->find_class(current, name) == nullptr, \"sanity\");\n-  dictionary->add_klass(current, name, k);\n+  if (dictionary->find_class(current, name) == nullptr) {\n+    dictionary->add_klass(current, name, k);\n+  }\n@@ -1765,1 +1790,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-                                       ClassLoaderData* loader_data) NOT_CDS_RETURN;\n+                                       ClassLoaderData* loader_data);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}