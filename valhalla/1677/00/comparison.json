{"files":[{"patch":"@@ -1348,1 +1348,1 @@\n-void CodeCache::mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee) {\n+void CodeCache::mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee, bool only_calling_convention) {\n@@ -1354,1 +1354,1 @@\n-    if (nm->is_dependent_on_method(dependee)) {\n+    if (nm->is_dependent_on_method(dependee, only_calling_convention)) {\n@@ -1396,1 +1396,1 @@\n-  mark_for_deoptimization(&deopt_scope, m_h());\n+  mark_for_deoptimization(&deopt_scope, m_h(), false);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-  static void mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee);\n+  static void mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee, bool only_calling_convention);\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,4 @@\n+void Dependencies::assert_mismatch_calling_convention(ciMethod* m) {\n+  assert_common_1(mismatch_calling_convention, m);\n+}\n+\n@@ -588,0 +592,1 @@\n+  \"mismatch_calling_convention\",\n@@ -600,0 +605,1 @@\n+  1, \/\/ mismatch_calling_convention m\n@@ -1697,3 +1703,10 @@\n-  if (m->is_old()\n-      || m->number_of_breakpoints() > 0\n-      || m->mismatch()) {\n+  if (m->is_old() || m->number_of_breakpoints() > 0) {\n+    return m->method_holder();\n+  } else {\n+    return nullptr;\n+  }\n+}\n+\n+Klass* Dependencies::check_mismatch_calling_convention(Method* m) {\n+  assert(must_be_in_vm(), \"raw oops here\");\n+  if (m->mismatch()) {\n@@ -2076,0 +2089,3 @@\n+  case mismatch_calling_convention:\n+    witness = check_mismatch_calling_convention(method_argument(0));\n+    break;\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -117,0 +117,6 @@\n+    \/\/ This dependency means that the calling convention of the method\n+    \/\/ was assumed to be callable with the scalar calling convention.\n+    \/\/ In case of a mismatch, because of future class loading, the\n+    \/\/ nmethod must be recompiled to use the non-scalar calling convention.\n+    mismatch_calling_convention,\n+\n@@ -169,1 +175,1 @@\n-    non_ctxk_types      = (1 << evol_method) | (1 << call_site_target_value),\n+    non_ctxk_types      = (1 << evol_method) | (1 << mismatch_calling_convention) | (1 << call_site_target_value),\n@@ -350,0 +356,1 @@\n+  void assert_mismatch_calling_convention(ciMethod* m);\n@@ -423,0 +430,1 @@\n+  static Klass* check_mismatch_calling_convention(Method* m);\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2895,1 +2895,2 @@\n-bool nmethod::is_dependent_on_method(Method* dependee) {\n+bool nmethod::is_dependent_on_method(Method* dependee, bool only_calling_convention) {\n+  Dependencies::DepType dep_type = only_calling_convention ? Dependencies::mismatch_calling_convention : Dependencies::evol_method;\n@@ -2897,1 +2898,1 @@\n-    if (deps.type() != Dependencies::evol_method)\n+    if (deps.type() != dep_type)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1062,4 +1062,5 @@\n-  \/\/ Fast breakpoint support. Tells if this compiled method is\n-  \/\/ dependent on the given method. Returns true if this nmethod\n-  \/\/ corresponds to the given method as well.\n-  bool is_dependent_on_method(Method* dependee);\n+  \/\/ Tells if this compiled method is dependent on the given method.\n+  \/\/ Returns true if this nmethod corresponds to the given method as well.\n+  \/\/ Used for fast breakpoint support if only_calling_convention is false;\n+  \/\/ used for updating the calling convention if true.\n+  bool is_dependent_on_method(Method* dependee, bool only_calling_convention);\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1950,1 +1950,1 @@\n-      \/\/ Register an evol dependency on the callee method to make sure that this method is deoptimized and\n+      \/\/ Register an calling convention dependency on the callee method to make sure that this method is deoptimized and\n@@ -1952,1 +1952,1 @@\n-      C->dependencies()->assert_evol_method(call->method());\n+      C->dependencies()->assert_mismatch_calling_convention(call->method());\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -838,1 +838,1 @@\n-    CodeCache::mark_for_deoptimization(&deopt_scope, mh());\n+    CodeCache::mark_for_deoptimization(&deopt_scope, mh(), false);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1347,1 +1347,1 @@\n-methodHandle SharedRuntime::find_callee_method(bool is_optimized, bool& caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::find_callee_method(bool& caller_does_not_scalarize, TRAPS) {\n@@ -1374,2 +1374,2 @@\n-    if (callinfo.resolved_method()->mismatch() && !is_optimized) {\n-      caller_is_c1 = true;\n+    if (callinfo.resolved_method()->mismatch()) {\n+      caller_does_not_scalarize = true;\n@@ -1384,1 +1384,1 @@\n-methodHandle SharedRuntime::resolve_helper(bool is_virtual, bool is_optimized, bool& caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::resolve_helper(bool is_virtual, bool is_optimized, bool& caller_does_not_scalarize, TRAPS) {\n@@ -1408,2 +1408,2 @@\n-  if (caller_nm->is_compiled_by_c1() || (call_info.resolved_method()->mismatch() && !is_optimized)) {\n-    caller_is_c1 = true;\n+  if (caller_nm->is_compiled_by_c1() || call_info.resolved_method()->mismatch()) {\n+    caller_does_not_scalarize = true;\n@@ -1429,1 +1429,1 @@\n-    tty->print(\"resolving %s%s (%s) call%s to\",\n+    tty->print(\"resolving %s%s (%s) %s call to\",\n@@ -1431,1 +1431,1 @@\n-               Bytecodes::name(invoke_code), (caller_is_c1) ? \" from C1\" : \"\");\n+               Bytecodes::name(invoke_code), (caller_does_not_scalarize) ? \"non-scalar\" : \"\");\n@@ -1470,1 +1470,1 @@\n-    inline_cache->update(&call_info, receiver->klass(), caller_is_c1);\n+    inline_cache->update(&call_info, receiver->klass(), caller_does_not_scalarize);\n@@ -1474,1 +1474,1 @@\n-    callsite->set(callee_method, caller_is_c1);\n+    callsite->set(callee_method, caller_does_not_scalarize);\n@@ -1494,2 +1494,2 @@\n-  bool is_optimized = false;\n-  bool caller_is_c1 = false;\n+  const bool is_optimized = false;\n+  bool caller_does_not_scalarize = false;\n@@ -1497,1 +1497,1 @@\n-    callee_method = SharedRuntime::handle_ic_miss_helper(is_optimized, caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::handle_ic_miss_helper(caller_does_not_scalarize, CHECK_NULL);\n@@ -1502,1 +1502,1 @@\n-  return get_resolved_entry(current, callee_method, false, is_optimized, caller_is_c1);\n+  return get_resolved_entry(current, callee_method, false, is_optimized, caller_does_not_scalarize);\n@@ -1555,1 +1555,1 @@\n-  bool caller_is_c1 = false;\n+  bool caller_does_not_scalarize = false;\n@@ -1558,1 +1558,1 @@\n-    callee_method = SharedRuntime::reresolve_call_site(is_static_call, is_optimized, caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::reresolve_call_site(is_static_call, is_optimized, caller_does_not_scalarize, CHECK_NULL);\n@@ -1562,1 +1562,1 @@\n-  return get_resolved_entry(current, callee_method, is_static_call, is_optimized, caller_is_c1);\n+  return get_resolved_entry(current, callee_method, is_static_call, is_optimized, caller_does_not_scalarize);\n@@ -1602,1 +1602,1 @@\n-                                          bool is_static_call, bool is_optimized, bool caller_is_c1) {\n+                                          bool is_static_call, bool is_optimized, bool caller_does_not_scalarize) {\n@@ -1609,1 +1609,1 @@\n-  if (caller_is_c1) {\n+  if (caller_does_not_scalarize) {\n@@ -1624,1 +1624,1 @@\n-  bool caller_is_c1 = false;\n+  bool caller_does_not_scalarize = false;\n@@ -1627,1 +1627,1 @@\n-    callee_method = SharedRuntime::resolve_helper(false, false, caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(false, false, caller_does_not_scalarize, CHECK_NULL);\n@@ -1631,1 +1631,1 @@\n-  return get_resolved_entry(current, callee_method, true, false, caller_is_c1);\n+  return get_resolved_entry(current, callee_method, true, false, caller_does_not_scalarize);\n@@ -1637,1 +1637,1 @@\n-  bool caller_is_c1 = false;\n+  bool caller_does_not_scalarize = false;\n@@ -1639,1 +1639,1 @@\n-    callee_method = SharedRuntime::resolve_helper(true, false, caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, false, caller_does_not_scalarize, CHECK_NULL);\n@@ -1643,1 +1643,1 @@\n-  return get_resolved_entry(current, callee_method, false, false, caller_is_c1);\n+  return get_resolved_entry(current, callee_method, false, false, caller_does_not_scalarize);\n@@ -1651,1 +1651,1 @@\n-  bool caller_is_c1 = false;\n+  bool caller_does_not_scalarize = false;\n@@ -1653,1 +1653,1 @@\n-    callee_method = SharedRuntime::resolve_helper(true, true, caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, true, caller_does_not_scalarize, CHECK_NULL);\n@@ -1657,1 +1657,1 @@\n-  return get_resolved_entry(current, callee_method, false, true, caller_is_c1);\n+  return get_resolved_entry(current, callee_method, false, true, caller_does_not_scalarize);\n@@ -1662,1 +1662,1 @@\n-methodHandle SharedRuntime::handle_ic_miss_helper(bool& is_optimized, bool& caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::handle_ic_miss_helper(bool& caller_does_not_scalarize, TRAPS) {\n@@ -1680,1 +1680,1 @@\n-    tty->print(\"IC miss (%s) call%s to\", Bytecodes::name(bc), (caller_is_c1) ? \" from C1\" : \"\");\n+    tty->print(\"IC miss (%s) %s call to\", Bytecodes::name(bc), (caller_does_not_scalarize) ? \"non-scalar\" : \"\");\n@@ -1714,1 +1714,1 @@\n-    caller_is_c1 = true;\n+    caller_does_not_scalarize = true;\n@@ -1719,1 +1719,1 @@\n-  inline_cache->update(&call_info, receiver()->klass(), caller_is_c1);\n+  inline_cache->update(&call_info, receiver()->klass(), caller_does_not_scalarize);\n@@ -1730,1 +1730,1 @@\n-methodHandle SharedRuntime::reresolve_call_site(bool& is_static_call, bool& is_optimized, bool& caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::reresolve_call_site(bool& is_static_call, bool& is_optimized, bool& caller_does_not_scalarize, TRAPS) {\n@@ -1741,1 +1741,1 @@\n-    caller_is_c1 = caller.cb()->as_nmethod()->is_compiled_by_c1();\n+    caller_does_not_scalarize = caller.cb()->as_nmethod()->is_compiled_by_c1();\n@@ -1807,1 +1807,1 @@\n-  methodHandle callee_method = find_callee_method(is_optimized, caller_is_c1, CHECK_(methodHandle()));\n+  methodHandle callee_method = find_callee_method(caller_does_not_scalarize, CHECK_(methodHandle()));\n@@ -1814,1 +1814,1 @@\n-    tty->print(\"handle_wrong_method reresolving call%s to\", (caller_is_c1) ? \" from C1\" : \"\");\n+    tty->print(\"handle_wrong_method reresolving %s call to\", (caller_does_not_scalarize) ? \"non-scalar\" : \"\");\n@@ -2906,1 +2906,1 @@\n-                  CodeCache::mark_for_deoptimization(&deopt_scope, mh());\n+                  CodeCache::mark_for_deoptimization(&deopt_scope, mh(), true);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -403,1 +403,1 @@\n-  static methodHandle handle_ic_miss_helper(bool& is_optimized, bool& caller_is_c1, TRAPS);\n+  static methodHandle handle_ic_miss_helper(bool& caller_is_c1, TRAPS);\n@@ -406,1 +406,1 @@\n-  static methodHandle find_callee_method(bool is_optimized, bool& caller_is_c1, TRAPS);\n+  static methodHandle find_callee_method(bool& caller_is_c1, TRAPS);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -34,7 +34,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue1\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -43,16 +43,10 @@\n-    Utf8 \"MyValue1\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Utf8 \"Code\"; \/\/ #20\n-    Utf8 \"LineNumberTable\"; \/\/ #21\n-    Utf8 \"verify\"; \/\/ #22\n-    Utf8 \"StackMapTable\"; \/\/ #23\n-    Utf8 \"SourceFile\"; \/\/ #24\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"ConstantValue\"; \/\/ #13\n+    int 0x0000002A; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n@@ -61,3 +55,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -70,3 +64,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -74,0 +68,3 @@\n+        Attr(#13) { \/\/ ConstantValue\n+          #14;\n+        } \/\/ end ConstantValue\n@@ -81,2 +78,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -84,1 +81,1 @@\n-        Attr(#20) { \/\/ Code\n+        Attr(#15) { \/\/ Code\n@@ -88,1 +85,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -94,1 +91,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -96,2 +93,3 @@\n-                0  24;\n-                4  25;\n+                0  25;\n+                6  24;\n+                10  25;\n@@ -107,2 +105,2 @@\n-      #22; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #17; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -110,2 +108,2 @@\n-        Attr(#20) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#15) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -114,3 +112,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -121,1 +117,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -123,3 +119,1 @@\n-                0  28;\n-                9  29;\n-                19  31;\n+                0  31;\n@@ -128,6 +122,0 @@\n-            ;\n-            Attr(#23) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -141,2 +129,2 @@\n-    Attr(#24) { \/\/ SourceFile\n-      #25;\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n@@ -148,1 +136,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -152,7 +140,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue2\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -161,16 +149,10 @@\n-    Utf8 \"MyValue2\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Utf8 \"Code\"; \/\/ #20\n-    Utf8 \"LineNumberTable\"; \/\/ #21\n-    Utf8 \"verify\"; \/\/ #22\n-    Utf8 \"StackMapTable\"; \/\/ #23\n-    Utf8 \"SourceFile\"; \/\/ #24\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"ConstantValue\"; \/\/ #13\n+    int 0x0000002A; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n@@ -179,3 +161,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -188,3 +170,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -192,0 +174,3 @@\n+        Attr(#13) { \/\/ ConstantValue\n+          #14;\n+        } \/\/ end ConstantValue\n@@ -199,2 +184,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -202,1 +187,1 @@\n-        Attr(#20) { \/\/ Code\n+        Attr(#15) { \/\/ Code\n@@ -206,1 +191,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -212,1 +197,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -214,2 +199,3 @@\n-                0  34;\n-                4  35;\n+                0  35;\n+                6  34;\n+                10  35;\n@@ -225,2 +211,2 @@\n-      #22; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #17; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -228,2 +214,2 @@\n-        Attr(#20) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#15) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -232,3 +218,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -239,1 +223,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -241,3 +225,1 @@\n-                0  38;\n-                9  39;\n-                19  41;\n+                0  41;\n@@ -246,6 +228,0 @@\n-            ;\n-            Attr(#23) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -259,2 +235,2 @@\n-    Attr(#24) { \/\/ SourceFile\n-      #25;\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n@@ -266,1 +242,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -270,7 +246,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue3\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -279,16 +255,10 @@\n-    Utf8 \"MyValue3\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Utf8 \"Code\"; \/\/ #20\n-    Utf8 \"LineNumberTable\"; \/\/ #21\n-    Utf8 \"verify\"; \/\/ #22\n-    Utf8 \"StackMapTable\"; \/\/ #23\n-    Utf8 \"SourceFile\"; \/\/ #24\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"ConstantValue\"; \/\/ #13\n+    int 0x0000002A; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n@@ -297,3 +267,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -306,3 +276,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -310,0 +280,3 @@\n+        Attr(#13) { \/\/ ConstantValue\n+          #14;\n+        } \/\/ end ConstantValue\n@@ -317,2 +290,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -320,1 +293,1 @@\n-        Attr(#20) { \/\/ Code\n+        Attr(#15) { \/\/ Code\n@@ -324,1 +297,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -330,1 +303,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -332,2 +305,3 @@\n-                0  44;\n-                4  45;\n+                0  45;\n+                6  44;\n+                10  45;\n@@ -343,2 +317,2 @@\n-      #22; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #17; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -346,2 +320,2 @@\n-        Attr(#20) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#15) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -350,3 +324,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -357,1 +329,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -359,3 +331,1 @@\n-                0  48;\n-                9  49;\n-                19  51;\n+                0  51;\n@@ -364,6 +334,0 @@\n-            ;\n-            Attr(#23) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -377,2 +341,2 @@\n-    Attr(#24) { \/\/ SourceFile\n-      #25;\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n@@ -384,1 +348,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -388,7 +352,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue4\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -397,19 +361,13 @@\n-    Utf8 \"MyValue4\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Method #8 #3; \/\/ #20\n-    Utf8 \"Code\"; \/\/ #21\n-    Utf8 \"LineNumberTable\"; \/\/ #22\n-    Utf8 \"verify\"; \/\/ #23\n-    Utf8 \"StackMapTable\"; \/\/ #24\n-    Utf8 \"make\"; \/\/ #25\n-    Utf8 \"()LMyValue4;\"; \/\/ #26\n-    Utf8 \"SourceFile\"; \/\/ #27\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #28\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Method #1 #9; \/\/ #13\n+    Utf8 \"ConstantValue\"; \/\/ #14\n+    int 0x0000002A; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"verify\"; \/\/ #18\n+    Utf8 \"make\"; \/\/ #19\n+    Utf8 \"()LMyValue4;\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #22\n@@ -418,3 +376,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -427,3 +385,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -431,0 +389,3 @@\n+        Attr(#14) { \/\/ ConstantValue\n+          #15;\n+        } \/\/ end ConstantValue\n@@ -438,2 +399,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -441,1 +402,1 @@\n-        Attr(#21) { \/\/ Code\n+        Attr(#16) { \/\/ Code\n@@ -445,1 +406,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -451,1 +412,1 @@\n-            Attr(#22) { \/\/ LineNumberTable\n+            Attr(#17) { \/\/ LineNumberTable\n@@ -453,2 +414,3 @@\n-                0  54;\n-                4  55;\n+                0  55;\n+                6  54;\n+                10  55;\n@@ -464,2 +426,2 @@\n-      #23; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #18; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -467,2 +429,2 @@\n-        Attr(#21) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#16) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -471,3 +433,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -478,1 +438,1 @@\n-            Attr(#22) { \/\/ LineNumberTable\n+            Attr(#17) { \/\/ LineNumberTable\n@@ -480,3 +440,1 @@\n-                0  58;\n-                9  59;\n-                19  61;\n+                0  61;\n@@ -485,6 +443,0 @@\n-            ;\n-            Attr(#24) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -498,2 +450,2 @@\n-      #25; \/\/ name_index\n-      #26; \/\/ descriptor_index\n+      #19; \/\/ name_index\n+      #20; \/\/ descriptor_index\n@@ -501,1 +453,1 @@\n-        Attr(#21) { \/\/ Code\n+        Attr(#16) { \/\/ Code\n@@ -505,1 +457,1 @@\n-            0xBB000859B70014B0;\n+            0xBB000159B7000DB0;\n@@ -510,1 +462,1 @@\n-            Attr(#22) { \/\/ LineNumberTable\n+            Attr(#17) { \/\/ LineNumberTable\n@@ -522,2 +474,2 @@\n-    Attr(#27) { \/\/ SourceFile\n-      #28;\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n@@ -529,1 +481,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -533,7 +485,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue5\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -542,21 +494,15 @@\n-    Utf8 \"MyValue5\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Method #8 #3; \/\/ #20\n-    class #22; \/\/ #21\n-    Utf8 \"Verifiable\"; \/\/ #22\n-    Utf8 \"Code\"; \/\/ #23\n-    Utf8 \"LineNumberTable\"; \/\/ #24\n-    Utf8 \"verify\"; \/\/ #25\n-    Utf8 \"StackMapTable\"; \/\/ #26\n-    Utf8 \"make\"; \/\/ #27\n-    Utf8 \"()LMyValue5;\"; \/\/ #28\n-    Utf8 \"SourceFile\"; \/\/ #29\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Method #1 #9; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"Verifiable\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x0000002A; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"verify\"; \/\/ #20\n+    Utf8 \"make\"; \/\/ #21\n+    Utf8 \"()LMyValue5;\"; \/\/ #22\n+    Utf8 \"SourceFile\"; \/\/ #23\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #24\n@@ -565,3 +511,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -570,1 +516,1 @@\n-    #21;\n+    #14;\n@@ -575,3 +521,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -579,0 +525,3 @@\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n@@ -586,2 +535,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -589,1 +538,1 @@\n-        Attr(#23) { \/\/ Code\n+        Attr(#18) { \/\/ Code\n@@ -593,1 +542,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -599,1 +548,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -601,2 +550,3 @@\n-                0  72;\n-                4  73;\n+                0  73;\n+                6  72;\n+                10  73;\n@@ -612,2 +562,2 @@\n-      #25; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -615,2 +565,2 @@\n-        Attr(#23) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#18) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -619,3 +569,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -626,1 +574,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -628,3 +576,1 @@\n-                0  77;\n-                9  78;\n-                19  80;\n+                0  80;\n@@ -633,6 +579,0 @@\n-            ;\n-            Attr(#26) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -646,2 +586,2 @@\n-      #27; \/\/ name_index\n-      #28; \/\/ descriptor_index\n+      #21; \/\/ name_index\n+      #22; \/\/ descriptor_index\n@@ -649,1 +589,1 @@\n-        Attr(#23) { \/\/ Code\n+        Attr(#18) { \/\/ Code\n@@ -653,1 +593,1 @@\n-            0xBB000859B70014B0;\n+            0xBB000159B7000DB0;\n@@ -658,1 +598,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -670,2 +610,2 @@\n-    Attr(#29) { \/\/ SourceFile\n-      #30;\n+    Attr(#23) { \/\/ SourceFile\n+      #24;\n@@ -677,1 +617,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -681,7 +621,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue6\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -690,21 +630,15 @@\n-    Utf8 \"MyValue6\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Method #8 #3; \/\/ #20\n-    class #22; \/\/ #21\n-    Utf8 \"Verifiable\"; \/\/ #22\n-    Utf8 \"Code\"; \/\/ #23\n-    Utf8 \"LineNumberTable\"; \/\/ #24\n-    Utf8 \"verify\"; \/\/ #25\n-    Utf8 \"StackMapTable\"; \/\/ #26\n-    Utf8 \"make\"; \/\/ #27\n-    Utf8 \"()LMyValue6;\"; \/\/ #28\n-    Utf8 \"SourceFile\"; \/\/ #29\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Method #1 #9; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"Verifiable\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x0000002A; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"verify\"; \/\/ #20\n+    Utf8 \"make\"; \/\/ #21\n+    Utf8 \"()LMyValue6;\"; \/\/ #22\n+    Utf8 \"SourceFile\"; \/\/ #23\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #24\n@@ -713,3 +647,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -718,1 +652,1 @@\n-    #21;\n+    #14;\n@@ -723,3 +657,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -727,0 +661,3 @@\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n@@ -734,2 +671,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -737,1 +674,1 @@\n-        Attr(#23) { \/\/ Code\n+        Attr(#18) { \/\/ Code\n@@ -741,1 +678,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -747,1 +684,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -749,2 +686,3 @@\n-                0  87;\n-                4  88;\n+                0  88;\n+                6  87;\n+                10  88;\n@@ -760,2 +698,2 @@\n-      #25; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -763,2 +701,2 @@\n-        Attr(#23) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#18) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -767,3 +705,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -774,1 +710,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -776,3 +712,1 @@\n-                0  92;\n-                9  93;\n-                19  95;\n+                0  95;\n@@ -781,6 +715,0 @@\n-            ;\n-            Attr(#26) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -794,2 +722,2 @@\n-      #27; \/\/ name_index\n-      #28; \/\/ descriptor_index\n+      #21; \/\/ name_index\n+      #22; \/\/ descriptor_index\n@@ -797,1 +725,1 @@\n-        Attr(#23) { \/\/ Code\n+        Attr(#18) { \/\/ Code\n@@ -801,1 +729,1 @@\n-            0xBB000859B70014B0;\n+            0xBB000159B7000DB0;\n@@ -806,1 +734,1 @@\n-            Attr(#24) { \/\/ LineNumberTable\n+            Attr(#19) { \/\/ LineNumberTable\n@@ -818,2 +746,2 @@\n-    Attr(#29) { \/\/ SourceFile\n-      #30;\n+    Attr(#23) { \/\/ SourceFile\n+      #24;\n@@ -825,1 +753,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -829,7 +757,7 @@\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    Field #8 #9; \/\/ #7\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue7\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n@@ -838,16 +766,10 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n-    Utf8 \"x\"; \/\/ #11\n-    Utf8 \"I\"; \/\/ #12\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n-    String #16; \/\/ #15\n-    Utf8 \"Verification failed\"; \/\/ #16\n-    Method #13 #18; \/\/ #17\n-    NameAndType #5 #19; \/\/ #18\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n-    Utf8 \"Code\"; \/\/ #20\n-    Utf8 \"LineNumberTable\"; \/\/ #21\n-    Utf8 \"verify\"; \/\/ #22\n-    Utf8 \"StackMapTable\"; \/\/ #23\n-    Utf8 \"SourceFile\"; \/\/ #24\n-    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"ConstantValue\"; \/\/ #13\n+    int 0x0000002A; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n@@ -856,3 +778,3 @@\n-  0x0020; \/\/ access\n-  #8;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #1;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -865,3 +787,3 @@\n-      0x0000; \/\/ access\n-      #11; \/\/ name_index\n-      #12; \/\/ descriptor_index\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n@@ -869,0 +791,3 @@\n+        Attr(#13) { \/\/ ConstantValue\n+          #14;\n+        } \/\/ end ConstantValue\n@@ -876,2 +801,2 @@\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -879,1 +804,1 @@\n-        Attr(#20) { \/\/ Code\n+        Attr(#15) { \/\/ Code\n@@ -883,1 +808,1 @@\n-            0x2AB700012A102AB5;\n+            0x2A102AB500032AB7;\n@@ -889,1 +814,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -891,2 +816,3 @@\n-                0  102;\n-                4  103;\n+                0  103;\n+                6  102;\n+                10  103;\n@@ -902,2 +828,2 @@\n-      #22; \/\/ name_index\n-      #6; \/\/ descriptor_index\n+      #17; \/\/ name_index\n+      #12; \/\/ descriptor_index\n@@ -905,2 +831,2 @@\n-        Attr(#20) { \/\/ Code\n-          3; \/\/ max_stack\n+        Attr(#15) { \/\/ Code\n+          0; \/\/ max_stack\n@@ -909,3 +835,1 @@\n-            0x2AB40007102A9F00;\n-            0x0DBB000D59120FB7;\n-            0x0011BFB1;\n+            0xB1;\n@@ -916,1 +840,1 @@\n-            Attr(#21) { \/\/ LineNumberTable\n+            Attr(#16) { \/\/ LineNumberTable\n@@ -918,3 +842,1 @@\n-                0  106;\n-                9  107;\n-                19  109;\n+                0  109;\n@@ -923,6 +845,0 @@\n-            ;\n-            Attr(#23) { \/\/ StackMapTable\n-              [] { \/\/ \n-                19b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n@@ -936,2 +852,2 @@\n-    Attr(#24) { \/\/ SourceFile\n-      #25;\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n@@ -943,1 +859,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -985,1 +901,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1008,0 +924,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #20\n+    Utf8 \"LMyValue1;\"; \/\/ #21\n@@ -1075,0 +993,4 @@\n+    ;\n+    Attr(#20) { \/\/ LoadableDescriptors\n+      0x00010015;\n+    } \/\/ end LoadableDescriptors\n@@ -1079,1 +1001,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1091,0 +1013,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #9\n+    Utf8 \"LMyValue2;\"; \/\/ #10\n@@ -1117,0 +1041,4 @@\n+    ;\n+    Attr(#9) { \/\/ LoadableDescriptors\n+      0x0001000A;\n+    } \/\/ end LoadableDescriptors\n@@ -1121,1 +1049,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1135,0 +1063,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #11\n+    Utf8 \"LMyValue2;\"; \/\/ #12\n@@ -1162,0 +1092,4 @@\n+    ;\n+    Attr(#11) { \/\/ LoadableDescriptors\n+      0x0001000C;\n+    } \/\/ end LoadableDescriptors\n@@ -1166,1 +1100,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1191,0 +1125,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #22\n+    Utf8 \"LMyValue2;\"; \/\/ #23\n@@ -1259,0 +1195,4 @@\n+    ;\n+    Attr(#22) { \/\/ LoadableDescriptors\n+      0x00010017;\n+    } \/\/ end LoadableDescriptors\n@@ -1263,1 +1203,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1290,0 +1230,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #24\n+    Utf8 \"LMyValue2;\"; \/\/ #25\n@@ -1359,0 +1301,4 @@\n+    ;\n+    Attr(#24) { \/\/ LoadableDescriptors\n+      0x00010019;\n+    } \/\/ end LoadableDescriptors\n@@ -1363,1 +1309,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1386,0 +1332,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #20\n+    Utf8 \"LMyValue3;\"; \/\/ #21\n@@ -1453,0 +1401,4 @@\n+    ;\n+    Attr(#20) { \/\/ LoadableDescriptors\n+      0x00010015;\n+    } \/\/ end LoadableDescriptors\n@@ -1457,1 +1409,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1480,0 +1432,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #20\n+    Utf8 \"LMyValue3;\"; \/\/ #21\n@@ -1547,0 +1501,4 @@\n+    ;\n+    Attr(#20) { \/\/ LoadableDescriptors\n+      0x00010015;\n+    } \/\/ end LoadableDescriptors\n@@ -1551,1 +1509,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1576,0 +1534,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #22\n+    Utf8 \"LMyValue3;\"; \/\/ #23\n@@ -1644,0 +1604,4 @@\n+    ;\n+    Attr(#22) { \/\/ LoadableDescriptors\n+      0x00010017;\n+    } \/\/ end LoadableDescriptors\n@@ -1648,1 +1612,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1673,0 +1637,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #22\n+    Utf8 \"LMyValue7;\"; \/\/ #23\n@@ -1741,0 +1707,4 @@\n+    ;\n+    Attr(#22) { \/\/ LoadableDescriptors\n+      0x00010017;\n+    } \/\/ end LoadableDescriptors\n@@ -1745,1 +1715,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1768,0 +1738,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #20\n+    Utf8 \"LMyValue7;\"; \/\/ #21\n@@ -1835,0 +1807,4 @@\n+    ;\n+    Attr(#20) { \/\/ LoadableDescriptors\n+      0x00010015;\n+    } \/\/ end LoadableDescriptors\n@@ -1839,1 +1815,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1862,0 +1838,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #20\n+    Utf8 \"LMyValue7;\"; \/\/ #21\n@@ -1929,0 +1907,4 @@\n+    ;\n+    Attr(#20) { \/\/ LoadableDescriptors\n+      0x00010015;\n+    } \/\/ end LoadableDescriptors\n@@ -1933,1 +1915,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -1958,0 +1940,2 @@\n+    Utf8 \"LoadableDescriptors\"; \/\/ #22\n+    Utf8 \"LMyValue7;\"; \/\/ #23\n@@ -2026,0 +2010,4 @@\n+    ;\n+    Attr(#22) { \/\/ LoadableDescriptors\n+      0x00010017;\n+    } \/\/ end LoadableDescriptors\n@@ -2030,1 +2018,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -2105,1 +2093,1 @@\n-    Field #73 #74; \/\/ #72\n+    Method #73 #74; \/\/ #72\n@@ -2108,3 +2096,3 @@\n-    Utf8 \"MyValue4\"; \/\/ #75\n-    Utf8 \"x\"; \/\/ #76\n-    Utf8 \"I\"; \/\/ #77\n+    Utf8 \"java\/util\/Objects\"; \/\/ #75\n+    Utf8 \"requireNonNull\"; \/\/ #76\n+    Utf8 \"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\"; \/\/ #77\n@@ -2436,4 +2424,4 @@\n-            0x4357A7001A2A1BB6;\n-            0x0043B40048102A9F;\n-            0x000DBB004E591250;\n-            0xB70052BFB1;\n+            0x4357A7001D2A1BB6;\n+            0x0043B8004857102A;\n+            0x102A9F000DBB004E;\n+            0x591250B70052BFB1;\n@@ -2449,2 +2437,2 @@\n-                26  373;\n-                36  376;\n+                29  373;\n+                39  376;\n@@ -2457,1 +2445,1 @@\n-                22b; \/\/ same_frame\n+                25b; \/\/ same_frame\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":436,"deletions":448,"binary":false,"changes":884,"status":"modified"}]}