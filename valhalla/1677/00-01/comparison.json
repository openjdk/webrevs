{"files":[{"patch":"@@ -1348,1 +1348,1 @@\n-void CodeCache::mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee, bool only_calling_convention) {\n+void CodeCache::mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee) {\n@@ -1354,1 +1354,1 @@\n-    if (nm->is_dependent_on_method(dependee, only_calling_convention)) {\n+    if (nm->is_dependent_on_method(dependee)) {\n@@ -1396,1 +1396,1 @@\n-  mark_for_deoptimization(&deopt_scope, m_h(), false);\n+  mark_for_deoptimization(&deopt_scope, m_h());\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-  static void mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee, bool only_calling_convention);\n+  static void mark_for_deoptimization(DeoptimizationScope* deopt_scope, Method* dependee);\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,4 +117,6 @@\n-    \/\/ This dependency means that the calling convention of the method\n-    \/\/ was assumed to be callable with the scalar calling convention.\n-    \/\/ In case of a mismatch, because of future class loading, the\n-    \/\/ nmethod must be recompiled to use the non-scalar calling convention.\n+    \/\/ This dependency means that some argument of this method was\n+    \/\/ assumed to be always passed in scalarized form. In case of\n+    \/\/ a mismatch with two super methods (one assuming scalarized\n+    \/\/ and one assuming non-scalarized), all callers of this method\n+    \/\/ (via virtual calls) now need to be recompiled.\n+    \/\/ See CompiledEntrySignature::compute_calling_conventions\n@@ -188,1 +190,3 @@\n-    default_context_type_bit = (1<<LG2_TYPE_LIMIT)\n+    default_context_type_bit = (1<<LG2_TYPE_LIMIT),\n+\n+    method_types = (1 << evol_method) | (1 << mismatch_calling_convention),\n@@ -199,0 +203,2 @@\n+  static bool has_method_dep(DepType dept) { return dept_in_mask(dept, method_types); }\n+\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2895,2 +2895,1 @@\n-bool nmethod::is_dependent_on_method(Method* dependee, bool only_calling_convention) {\n-  Dependencies::DepType dep_type = only_calling_convention ? Dependencies::mismatch_calling_convention : Dependencies::evol_method;\n+bool nmethod::is_dependent_on_method(Method* dependee) {\n@@ -2898,4 +2897,4 @@\n-    if (deps.type() != dep_type)\n-      continue;\n-    Method* method = deps.method_argument(0);\n-    if (method == dependee) return true;\n+    if (Dependencies::has_method_dep(deps.type())) {\n+      Method* method = deps.method_argument(0);\n+      if (method == dependee) return true;\n+    }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1064,3 +1064,3 @@\n-  \/\/ Used for fast breakpoint support if only_calling_convention is false;\n-  \/\/ used for updating the calling convention if true.\n-  bool is_dependent_on_method(Method* dependee, bool only_calling_convention);\n+  \/\/ It is used for fast breakpoint support and updating the calling convention\n+  \/\/ in case of mismatch.\n+  bool is_dependent_on_method(Method* dependee);\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -838,1 +838,1 @@\n-    CodeCache::mark_for_deoptimization(&deopt_scope, mh(), false);\n+    CodeCache::mark_for_deoptimization(&deopt_scope, mh());\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2906,1 +2906,1 @@\n-                  CodeCache::mark_for_deoptimization(&deopt_scope, mh(), true);\n+                  CodeCache::mark_for_deoptimization(&deopt_scope, mh());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}