{"files":[{"patch":"@@ -199,1 +199,0 @@\n-         stub_id == Runtime1::new_instance_no_inline_id       ||\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1139,1 +1139,1 @@\n-  CodeEmitInfo* info = state_for(x, x->state());\n+  CodeEmitInfo* info = state_for(x, x->needs_state_before() ? x->state_before() : x->state());\n@@ -1152,17 +1152,0 @@\n-void LIRGenerator::do_NewInlineTypeInstance(NewInlineTypeInstance* x) {\n-  \/\/ Mapping to do_NewInstance (same code) but use state_before for reexecution.\n-  CodeEmitInfo* info = state_for(x, x->state_before());\n-  x->set_to_object_type();\n-  LIR_Opr reg = result_register_for(x->type());\n-  new_instance(reg, x->klass(), false,\n-               \/* allow_inline *\/ true,\n-               FrameMap::r10_oop_opr,\n-               FrameMap::r11_oop_opr,\n-               FrameMap::r4_oop_opr,\n-               LIR_OprFact::illegalOpr,\n-               FrameMap::r3_metadata_opr, info);\n-  LIR_Opr result = rlock_result(x);\n-  __ move(reg, result);\n-\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -653,1 +653,0 @@\n-    case new_instance_no_inline_id:\n@@ -662,2 +661,0 @@\n-        } else if (id == new_instance_no_inline_id) {\n-          __ set_info(\"new_instance_no_inline\", dont_gc_arguments);\n@@ -674,5 +671,1 @@\n-        if (id == new_instance_no_inline_id) {\n-          call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_instance_no_inline), klass);\n-        } else {\n-          call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_instance), klass);\n-        }\n+        call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_instance), klass);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}