{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -408,0 +409,27 @@\n+UNSAFE_ENTRY(jarray, Unsafe_NewSpecialArray(JNIEnv *env, jobject unsafe, jclass elmClass, jint len, jint layoutKind)) {\n+  oop mirror = JNIHandles::resolve_non_null(elmClass);\n+  Klass* klass = java_lang_Class::as_Klass(mirror);\n+  klass->initialize(CHECK_NULL);\n+  if (len < 0) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Array length is negative\");\n+  }\n+  if (klass->is_identity_class()) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Element class is not a value class\");\n+  }\n+  if (klass->is_abstract()) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Element class is abstract\");\n+  }\n+  LayoutKind lk = static_cast<LayoutKind>(layoutKind);\n+  if (lk <= LayoutKind::REFERENCE || lk >= LayoutKind::UNKNOWN) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Invalid layout kind\");\n+  }\n+  InlineKlass* vk = InlineKlass::cast(klass);\n+  \/\/ WARNING: test below will need modifications when flat layouts supported for fields\n+  \/\/ but not for arrays are introduce (NULLABLE_NON_ATOMIC_FLAT for instance)\n+  if (!UseArrayFlattening || !vk->is_layout_supported(lk)) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_UnsupportedOperationException(), \"Layout not supported\");\n+  }\n+  oop array = oopFactory::new_flatArray(vk, len, lk, CHECK_NULL);\n+  return (jarray) JNIHandles::make_local(THREAD, array);\n+} UNSAFE_END\n+\n@@ -1117,0 +1145,1 @@\n+    {CC \"newSpecialArray\",      CC \"(\" CLS \"II)[\" OBJ,    FN_PTR(Unsafe_NewSpecialArray)},\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -262,0 +262,3 @@\n+    public native Object[] newSpecialArray(Class<?> componentType,\n+                                                  int length, int layoutKind);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import java.lang.reflect.Field;\n@@ -46,0 +48,1 @@\n+ * @requires vm.flagless\n@@ -48,0 +51,1 @@\n+ *          java.base\/jdk.internal.misc\n@@ -57,0 +61,1 @@\n+  static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -454,0 +459,92 @@\n+  @ImplicitlyConstructible\n+  static value class AtomicValue {\n+    int i = 0;\n+  }\n+\n+  static value class FieldsHolder {\n+    @NullRestricted\n+    SmallValue sv = new SmallValue();\n+\n+    @NullRestricted\n+    AtomicValue av = new AtomicValue();\n+\n+    AtomicValue nav = new AtomicValue();\n+  }\n+\n+  static void testSpecialArrayLayoutFromArray(Object[] array, boolean expectException) {\n+    int lk = UNSAFE.arrayLayout(array.getClass());\n+    boolean exception = false;\n+    try {\n+      Object[] newArray = UNSAFE.newSpecialArray(array.getClass().getComponentType(), 10, lk);\n+      int newLk = UNSAFE.arrayLayout(newArray.getClass());\n+      assertEquals(newLk, lk);\n+    } catch(IllegalArgumentException e) {\n+      e.printStackTrace();\n+      exception = true;\n+    }\n+    assertEquals(exception, expectException, \"Exception not matching expectations\");\n+  }\n+\n+  static void testSpecialArrayFromFieldLayout(Class c, int layout, boolean expectException) {\n+    boolean exception = false;\n+    try {\n+      Object[] array = UNSAFE.newSpecialArray(c, 10, layout);\n+      int lk = UNSAFE.arrayLayout(array.getClass());\n+      assertEquals(lk, layout);\n+    } catch (IllegalArgumentException e) {\n+      e.printStackTrace();\n+      throw new RuntimeException(e);\n+    } catch (UnsupportedOperationException e) {\n+      e.printStackTrace();\n+      exception = true;\n+    }\n+    assertEquals(exception, expectException, \"Exception not matching expectations\");\n+  }\n+\n+  static void testSpecialArrayCreation() {\n+    RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+    List<String> jvmArgs = runtimeMXBean.getInputArguments();\n+    boolean arrayFlatteningEnabled = true;\n+    for (String s : jvmArgs) {\n+      if (s.compareTo(\"-XX:-UseArrayFlattening\") == 0) arrayFlatteningEnabled = false;\n+    }\n+\n+    \/\/ Test array creation from another array\n+    Object[] array0 = new SmallValue[10];\n+    testSpecialArrayLayoutFromArray(array0, true);\n+    if (arrayFlatteningEnabled) {\n+      Object[] array1 = ValueClass.newNullRestrictedArray(SmallValue.class, 10);\n+      testSpecialArrayLayoutFromArray(array1, false);\n+      Object[] array2 = ValueClass.newNullRestrictedAtomicArray(SmallValue.class, 10);\n+      testSpecialArrayLayoutFromArray(array2, false);\n+      Object[] array3 = ValueClass.newNullableAtomicArray(SmallValue.class, 10);\n+      testSpecialArrayLayoutFromArray(array3, false);\n+    }\n+\n+    \/\/ Test array creation from a field layout\n+    try {\n+      Class c = FieldsHolder.class;\n+      Field f0 = c.getDeclaredField(\"sv\");\n+      int layout0 = UNSAFE.fieldLayout(f0);\n+      testSpecialArrayFromFieldLayout(f0.getType(), layout0, !arrayFlatteningEnabled);\n+      Field f1 = c.getDeclaredField(\"av\");\n+      int layout1 = UNSAFE.fieldLayout(f1);\n+      testSpecialArrayFromFieldLayout(f1.getType(), layout1, !arrayFlatteningEnabled);\n+      Field f2 = c.getDeclaredField(\"nav\");\n+      int layout2 = UNSAFE.fieldLayout(f2);\n+      testSpecialArrayFromFieldLayout(f2.getType(), layout2, !arrayFlatteningEnabled);\n+    } catch(NoSuchFieldException e) {\n+      e.printStackTrace();\n+    }\n+\n+    \/\/ Testing an invalid layout value\n+    boolean exception = false;\n+    try {\n+      UNSAFE.newSpecialArray(SmallValue.class, 10, 100);\n+    } catch(IllegalArgumentException e) {\n+      e.printStackTrace();\n+      exception = true;\n+    }\n+    assertEquals(exception, true, \"Exception not received\");\n+  }\n+\n@@ -458,0 +555,1 @@\n+    testSpecialArrayCreation();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlatArraysTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"modified"}]}