{"files":[{"patch":"@@ -1672,1 +1672,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool object_init) {\n@@ -1799,0 +1799,6 @@\n+  \/\/ Issue a StoreStore barrier on entry to Object_init if the\n+  \/\/ class has strict field fields.  Be lazy, always do it.\n+  if (object_init) {\n+    __ membar(MacroAssembler::StoreStore);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1142,1 +1142,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool object_init) {\n@@ -1257,0 +1257,6 @@\n+  \/\/ Issue a StoreStore barrier on entry to Object_init if the\n+  \/\/ class has strict field fields.  Be lazy, always do it.\n+  if (object_init) {\n+    __ membar(MacroAssembler::StoreStore, R1_tmp);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1709,1 +1709,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool object_init) {\n@@ -1804,0 +1804,7 @@\n+  \/\/ --------------------------------------------------------------------------\n+  \/\/ Issue a StoreStore barrier on entry to Object_init if the\n+  \/\/ class has strict field fields.  Be lazy, always do it.\n+  if (object_init) {\n+    __ membar(Assembler::StoreStore);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1548,0 +1548,6 @@\n+  \/\/ Issue a StoreStore barrier on entry to Object_init if the\n+  \/\/ class has strict field fields.  Be lazy, always do it.\n+  if (object_init) {\n+    __ membar(MacroAssembler::StoreStore);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1800,0 +1800,6 @@\n+  \/\/ If object_init == true, we should insert a StoreStore barrier here to\n+  \/\/ prevent strict fields initial default values from being observable.\n+  \/\/ However, s390 is a TSO platform, so if `this` escapes, strict fields\n+  \/\/ initialized values are guaranteed to be the ones observed, so the\n+  \/\/ barrier can be elided.\n+\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1242,1 +1242,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool object_init) {\n@@ -1363,0 +1363,6 @@\n+  \/\/ If object_init == true, we should insert a StoreStore barrier here to\n+  \/\/ prevent strict fields initial default values from being observable.\n+  \/\/ However, x86 is a TSO platform, so if `this` escapes, strict fields\n+  \/\/ initialized values are guaranteed to be the ones observed, so the\n+  \/\/ barrier can be elided.\n+\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+          \/\/ No need to use the method kind with a memory barrier on entry\n+          \/\/ because the method is empty and already has a memory barrier on return\n@@ -158,0 +160,4 @@\n+        } else if (EnableValhalla) {\n+          \/\/ For non-empty Object constructors, we need a memory barrier\n+          \/\/ when entering the method to ensure correctness of strict fields\n+          return object_init;\n@@ -306,0 +312,1 @@\n+    case object_init            : tty->print(\"object_init\"            ); break;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    object_init,                                                \/\/ special barrier on entry\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -193,0 +193,1 @@\n+  method_entry(object_init)\n@@ -420,0 +421,1 @@\n+  case Interpreter::object_init            : break;\n@@ -432,0 +434,1 @@\n+    assert(kind != Interpreter::object_init, \"Not supported\");\n@@ -437,1 +440,3 @@\n-    entry_point = Interpreter::entry_for_kind(synchronized ? Interpreter::zerolocals_synchronized : Interpreter::zerolocals);\n+    entry_point = kind == Interpreter::object_init ?\n+                  Interpreter::entry_for_kind(Interpreter::object_init) :\n+                  Interpreter::entry_for_kind(synchronized ? Interpreter::zerolocals_synchronized : Interpreter::zerolocals);\n@@ -439,1 +444,1 @@\n-      entry_point = generate_normal_entry(synchronized);\n+      entry_point = generate_normal_entry(synchronized, kind == Interpreter::object_init);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-  address generate_normal_entry(bool synchronized);\n+  address generate_normal_entry(bool synchronized, bool object_init);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}