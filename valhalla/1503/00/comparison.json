{"files":[{"patch":"@@ -91,1 +91,1 @@\n-    private static final String PREFIX = \"_#\";\n+    public static final String PREFIX = \"_#\";\n@@ -393,2 +393,6 @@\n-        String regex = START + \"Allocate\\\\b\" + MID + \"allocationKlass:.*\\\\b\" + IS_REPLACED + \"\\\\s.*\" + END;\n-        macroNodes(ALLOC_OF, regex);\n+        allocateOfNodes(ALLOC_OF, IS_REPLACED);\n+    }\n+\n+    public static void allocateOfNodes(String irNodePlaceholder, String allocatee) {\n+        String regex = START + \"Allocate\\\\b\" + MID + \"allocationKlass:.*\\\\b\" + allocatee + \"\\\\s.*\" + END;\n+        macroNodes(irNodePlaceholder, regex);\n@@ -405,0 +409,4 @@\n+        allocateArrayOfNodes(ALLOC_ARRAY_OF, IS_REPLACED);\n+    }\n+\n+    public static void allocateArrayOfNodes(String irNodePlaceholder, String allocatee) {\n@@ -423,1 +431,1 @@\n-        String name_part = \"\\\\[+.(\" + partial_name_prefix + \")?\" + IS_REPLACED + \";\";\n+        String name_part = \"\\\\[+.(\" + partial_name_prefix + \")?\" + allocatee + \";\";\n@@ -425,1 +433,1 @@\n-        macroNodes(ALLOC_ARRAY_OF, regex);\n+        macroNodes(irNodePlaceholder, regex);\n@@ -490,1 +498,1 @@\n-        callOfNodes(CALL_OF, \"Call.*\");\n+        callOfNodes(CALL_OF, \"Call.*\", IS_REPLACED + \" \" );\n@@ -495,1 +503,6 @@\n-        callOfNodes(CALL_OF_METHOD, \"Call.*Java\");\n+        callOfNodes(CALL_OF_METHOD, \"Call.*Java\", IS_REPLACED + \" \");\n+    }\n+\n+    public static final String STATIC_CALL = PREFIX + \"STATIC_CALL\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(STATIC_CALL, \"CallStaticJava\");\n@@ -500,1 +513,19 @@\n-        callOfNodes(STATIC_CALL_OF_METHOD, \"CallStaticJava\");\n+        staticCallOfMethodNodes(STATIC_CALL_OF_METHOD, IS_REPLACED + \" \");\n+    }\n+\n+    public static void staticCallOfMethodNodes(String irNodePlaceholder, String calleeRegex) {\n+        callOfNodes(irNodePlaceholder, \"CallStaticJava\", calleeRegex);\n+    }\n+\n+    public static final String CALL_LEAF_NO_FP = PREFIX + \"CALL_LEAF_NO_FP\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CALL_LEAF_NO_FP, \"CallLeafNoFP\");\n+    }\n+\n+    public static final String CALL_LEAF_NO_FP_OF_METHOD = COMPOSITE_PREFIX + \"CALL_LEAF_NO_FP_OF_METHOD\" + POSTFIX;\n+    static {\n+        callLeafNoFpOfMethodNodes(CALL_LEAF_NO_FP_OF_METHOD, IS_REPLACED);\n+    }\n+\n+    public static void callLeafNoFpOfMethodNodes(String irNodePlaceholder, String calleeRegex) {\n+        callOfNodes(irNodePlaceholder, \"CallLeafNoFP\", calleeRegex);\n@@ -597,0 +628,5 @@\n+    public static final String CMP_N = PREFIX + \"CMP_N\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CMP_N, \"CmpN\");\n+    }\n+\n@@ -711,1 +747,1 @@\n-        callOfNodes(DYNAMIC_CALL_OF_METHOD, \"CallDynamicJava\");\n+        callOfNodes(DYNAMIC_CALL_OF_METHOD, \"CallDynamicJava\", IS_REPLACED);\n@@ -892,1 +928,5 @@\n-        loadOfNodes(LOAD_OF_CLASS, \"Load(B|UB|S|US|I|L|F|D|P|N)\");\n+        anyLoadOfNodes(LOAD_OF_CLASS, IS_REPLACED);\n+    }\n+\n+    public static void anyLoadOfNodes(String irNodePlaceholder, String loadee) {\n+        loadOfNodes(irNodePlaceholder, \"Load(B|UB|S|US|I|L|F|D|P|N)\", loadee);\n@@ -902,1 +942,1 @@\n-        loadOfNodes(LOAD_B_OF_CLASS, \"LoadB\");\n+        loadOfNodes(LOAD_B_OF_CLASS, \"LoadB\", IS_REPLACED);\n@@ -912,1 +952,1 @@\n-        loadOfNodes(LOAD_D_OF_CLASS, \"LoadD\");\n+        loadOfNodes(LOAD_D_OF_CLASS, \"LoadD\", IS_REPLACED);\n@@ -922,1 +962,1 @@\n-        loadOfNodes(LOAD_F_OF_CLASS, \"LoadF\");\n+        loadOfNodes(LOAD_F_OF_CLASS, \"LoadF\", IS_REPLACED);\n@@ -932,1 +972,1 @@\n-        loadOfNodes(LOAD_I_OF_CLASS, \"LoadI\");\n+        loadOfNodes(LOAD_I_OF_CLASS, \"LoadI\", IS_REPLACED);\n@@ -957,1 +997,1 @@\n-        loadOfNodes(LOAD_L_OF_CLASS, \"LoadL\");\n+        loadOfNodes(LOAD_L_OF_CLASS, \"LoadL\", IS_REPLACED);\n@@ -967,1 +1007,1 @@\n-        loadOfNodes(LOAD_N_OF_CLASS, \"LoadN\");\n+        loadOfNodes(LOAD_N_OF_CLASS, \"LoadN\", IS_REPLACED);\n@@ -983,1 +1023,1 @@\n-        loadOfNodes(LOAD_P_OF_CLASS, \"LoadP\");\n+        loadOfNodes(LOAD_P_OF_CLASS, \"LoadP\", IS_REPLACED);\n@@ -993,1 +1033,1 @@\n-        loadOfNodes(LOAD_S_OF_CLASS, \"LoadS\");\n+        loadOfNodes(LOAD_S_OF_CLASS, \"LoadS\", IS_REPLACED);\n@@ -1003,1 +1043,1 @@\n-        loadOfNodes(LOAD_UB_OF_CLASS, \"LoadUB\");\n+        loadOfNodes(LOAD_UB_OF_CLASS, \"LoadUB\", IS_REPLACED);\n@@ -1013,1 +1053,1 @@\n-        loadOfNodes(LOAD_US_OF_CLASS, \"LoadUS\");\n+        loadOfNodes(LOAD_US_OF_CLASS, \"LoadUS\", IS_REPLACED);\n@@ -1842,1 +1882,1 @@\n-        storeOfNodes(STORE_B_OF_CLASS, \"StoreB\");\n+        storeOfNodes(STORE_B_OF_CLASS, \"StoreB\", IS_REPLACED);\n@@ -1852,1 +1892,1 @@\n-        storeOfNodes(STORE_C_OF_CLASS, \"StoreC\");\n+        storeOfNodes(STORE_C_OF_CLASS, \"StoreC\", IS_REPLACED);\n@@ -1862,1 +1902,1 @@\n-        storeOfNodes(STORE_D_OF_CLASS, \"StoreD\");\n+        storeOfNodes(STORE_D_OF_CLASS, \"StoreD\", IS_REPLACED);\n@@ -1872,1 +1912,1 @@\n-        storeOfNodes(STORE_F_OF_CLASS, \"StoreF\");\n+        storeOfNodes(STORE_F_OF_CLASS, \"StoreF\", IS_REPLACED);\n@@ -1882,1 +1922,1 @@\n-        storeOfNodes(STORE_I_OF_CLASS, \"StoreI\");\n+        storeOfNodes(STORE_I_OF_CLASS, \"StoreI\", IS_REPLACED);\n@@ -1892,1 +1932,1 @@\n-        storeOfNodes(STORE_L_OF_CLASS, \"StoreL\");\n+        storeOfNodes(STORE_L_OF_CLASS, \"StoreL\", IS_REPLACED);\n@@ -1902,1 +1942,1 @@\n-        storeOfNodes(STORE_N_OF_CLASS, \"StoreN\");\n+        storeOfNodes(STORE_N_OF_CLASS, \"StoreN\", IS_REPLACED);\n@@ -1907,1 +1947,14 @@\n-        storeOfNodes(STORE_OF_CLASS, \"Store(B|C|S|I|L|F|D|P|N)\");\n+        anyStoreOfNodes(STORE_OF_CLASS, IS_REPLACED);\n+    }\n+\n+    public static void anyStoreOfNodes(String irNodePlaceholder, String storee) {\n+        storeOfNodes(irNodePlaceholder, \"Store(B|C|S|I|L|F|D|P|N)\", storee);\n+    }\n+\n+    public static final String NON_FLAT_STORE_OF_CLASS = COMPOSITE_PREFIX + \"NON_FLAT_STORE_OF_CLASS\" + POSTFIX;\n+    static {\n+        anyNonFlatStoreOfNodes(NON_FLAT_STORE_OF_CLASS, IS_REPLACED);\n+    }\n+\n+    public static void anyNonFlatStoreOfNodes(String irNodePlaceholder, String storee) {\n+        nonFlatStoreOfNodes(irNodePlaceholder, \"Store(B|C|S|I|L|F|D|P|N)\", storee);\n@@ -1923,1 +1976,1 @@\n-        storeOfNodes(STORE_P_OF_CLASS, \"StoreP\");\n+        storeOfNodes(STORE_P_OF_CLASS, \"StoreP\", IS_REPLACED);\n@@ -2782,2 +2835,2 @@\n-    private static void callOfNodes(String irNodePlaceholder, String callRegex) {\n-        String regex = START + callRegex + MID + IS_REPLACED + \" \" +  END;\n+    private static void callOfNodes(String irNodePlaceholder, String callRegex, String calleeRegex) {\n+        String regex = START + callRegex + MID + calleeRegex + END;\n@@ -2854,2 +2907,7 @@\n-    private static void loadOfNodes(String irNodePlaceholder, String irNodeRegex) {\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + IS_REPLACED + LOAD_OF_CLASS_POSTFIX;\n+    private static void loadOfNodes(String irNodePlaceholder, String irNodeRegex, String loadee) {\n+        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + loadee + LOAD_OF_CLASS_POSTFIX;\n+        beforeMatching(irNodePlaceholder, regex);\n+    }\n+\n+    private static void storeOfNodes(String irNodePlaceholder, String irNodeRegex, String storee) {\n+        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + storee + STORE_OF_CLASS_POSTFIX;\n@@ -2859,2 +2917,2 @@\n-    private static void storeOfNodes(String irNodePlaceholder, String irNodeRegex) {\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    private static void nonFlatStoreOfNodes(String irNodePlaceholder, String irNodeRegex, String storee) {\n+        String regex = START + irNodeRegex + MID + \"@((stable:)?\\\\w+\/)*\" + storee + STORE_OF_CLASS_POSTFIX;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":93,"deletions":35,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import static compiler.lib.ir_framework.IRNode.PREFIX;\n@@ -29,1 +30,0 @@\n-    private static final String PREFIX = \"_#\";\n@@ -31,83 +31,0 @@\n-    public static final String ALLOC_G = PREFIX + \"ALLOC_G\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(ALLOC_G, InlineTypeRegexes.ALLOC_G);\n-    }\n-\n-    public static final String ALLOCA_G = PREFIX + \"ALLOCA_G\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(ALLOCA_G, InlineTypeRegexes.ALLOCA_G);\n-    }\n-\n-    public static final String MYVALUE_ARRAY_KLASS = PREFIX + \"MYVALUE_ARRAY_KLASS\" + POSTFIX;    static {\n-        IRNode.optoOnly(MYVALUE_ARRAY_KLASS, InlineTypeRegexes.MYVALUE_ARRAY_KLASS);\n-    }\n-\n-    public static final String ALLOC = PREFIX + \"ALLOC\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(ALLOC, InlineTypeRegexes.ALLOC);\n-    }\n-\n-    public static final String ALLOCA = PREFIX + \"ALLOCA\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(ALLOCA, InlineTypeRegexes.ALLOCA);\n-    }\n-\n-    public static final String LOAD = PREFIX + \"LOAD\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(LOAD, InlineTypeRegexes.LOAD);\n-    }\n-\n-    public static final String LOADK = PREFIX + \"LOADK\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(LOADK, InlineTypeRegexes.LOADK);\n-    }\n-\n-    public static final String STORE = PREFIX + \"STORE\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(STORE, InlineTypeRegexes.STORE);\n-    }\n-\n-    public static final String LOOP = PREFIX + \"LOOP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(LOOP, InlineTypeRegexes.LOOP);\n-    }\n-\n-    public static final String COUNTEDLOOP = PREFIX + \"COUNTEDLOOP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(COUNTEDLOOP, InlineTypeRegexes.COUNTEDLOOP);\n-    }\n-\n-    public static final String COUNTEDLOOP_MAIN = PREFIX + \"COUNTEDLOOP_MAIN\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(COUNTEDLOOP_MAIN, InlineTypeRegexes.COUNTEDLOOP_MAIN);\n-    }\n-\n-    public static final String TRAP = PREFIX + \"TRAP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(TRAP, InlineTypeRegexes.TRAP);\n-    }\n-\n-    public static final String LINKTOSTATIC = PREFIX + \"LINKTOSTATIC\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(LINKTOSTATIC, InlineTypeRegexes.LINKTOSTATIC);\n-    }\n-\n-    public static final String NPE = PREFIX + \"NPE\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(NPE, InlineTypeRegexes.NPE);\n-    }\n-\n-    public static final String CALL = PREFIX + \"CALL\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(CALL, InlineTypeRegexes.CALL);\n-    }\n-\n-    public static final String CALL_LEAF = PREFIX + \"CALL_LEAF\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(CALL_LEAF, InlineTypeRegexes.CALL_LEAF);\n-    }\n-\n-    public static final String CALL_LEAF_NOFP = PREFIX + \"CALL_LEAF_NOFP\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(CALL_LEAF_NOFP, InlineTypeRegexes.CALL_LEAF_NOFP);\n-    }\n@@ -117,1 +34,1 @@\n-        IRNode.beforeMatching(CALL_UNSAFE, InlineTypeRegexes.CALL_UNSAFE);\n+        IRNode.staticCallOfMethodNodes(CALL_UNSAFE, InlineTypeRegexes.JDK_INTERNAL_MISC_UNSAFE);\n@@ -122,6 +39,1 @@\n-        IRNode.beforeMatching(STORE_INLINE_FIELDS, InlineTypeRegexes.STORE_INLINE_FIELDS);\n-    }\n-\n-    public static final String SCOBJ = PREFIX + \"SCOBJ\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(SCOBJ, InlineTypeRegexes.SCOBJ);\n+        IRNode.staticCallOfMethodNodes(STORE_INLINE_FIELDS, InlineTypeRegexes.STORE_INLINE_TYPE_FIELDS);\n@@ -132,1 +44,1 @@\n-        IRNode.beforeMatching(LOAD_UNKNOWN_INLINE, InlineTypeRegexes.LOAD_UNKNOWN_INLINE);\n+        IRNode.staticCallOfMethodNodes(LOAD_UNKNOWN_INLINE, InlineTypeRegexes.LOAD_UNKNOWN_INLINE);\n@@ -137,1 +49,1 @@\n-        IRNode.beforeMatching(STORE_UNKNOWN_INLINE, InlineTypeRegexes.STORE_UNKNOWN_INLINE);\n+        IRNode.staticCallOfMethodNodes(STORE_UNKNOWN_INLINE, InlineTypeRegexes.STORE_UNKNOWN_INLINE);\n@@ -142,6 +54,1 @@\n-        IRNode.beforeMatching(INLINE_ARRAY_NULL_GUARD, InlineTypeRegexes.INLINE_ARRAY_NULL_GUARD);\n-    }\n-\n-    public static final String INTRINSIC_SLOW_PATH = PREFIX + \"INTRINSIC_SLOW_PATH\" + POSTFIX;\n-    static {\n-        IRNode.optoOnly(INTRINSIC_SLOW_PATH, InlineTypeRegexes.INTRINSIC_SLOW_PATH);\n+        IRNode.staticCallOfMethodNodes(INLINE_ARRAY_NULL_GUARD, InlineTypeRegexes.INLINE_ARRAY_NULL_GUARD);\n@@ -152,1 +59,1 @@\n-        IRNode.optoOnly(CLONE_INTRINSIC_SLOW_PATH, InlineTypeRegexes.CLONE_INTRINSIC_SLOW_PATH);\n+        IRNode.staticCallOfMethodNodes(CLONE_INTRINSIC_SLOW_PATH, InlineTypeRegexes.JAVA_LANG_OBJECT_CLONE);\n@@ -155,21 +62,1 @@\n-    public static final String CLASS_CHECK_TRAP = PREFIX + \"CLASS_CHECK_TRAP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(CLASS_CHECK_TRAP, InlineTypeRegexes.CLASS_CHECK_TRAP);\n-    }\n-\n-    public static final String NULL_CHECK_TRAP = PREFIX + \"NULL_CHECK_TRAP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(NULL_CHECK_TRAP, InlineTypeRegexes.NULL_CHECK_TRAP);\n-    }\n-\n-    public static final String NULL_ASSERT_TRAP = PREFIX + \"NULL_ASSERT_TRAP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(NULL_ASSERT_TRAP, InlineTypeRegexes.NULL_ASSERT_TRAP);\n-    }\n-\n-    public static final String RANGE_CHECK_TRAP = PREFIX + \"RANGE_CHECK_TRAP\" + POSTFIX;\n-    static {\n-        IRNode.beforeMatching(RANGE_CHECK_TRAP, InlineTypeRegexes.RANGE_CHECK_TRAP);\n-    }\n-\n-    public static final String UNHANDLED_TRAP = PREFIX + \"UNHANDLED_TRAP\" + POSTFIX;\n+    public static final String CHECKCAST_ARRAYCOPY = PREFIX + \"CHECKCAST_ARRAYCOPY\" + POSTFIX;\n@@ -177,1 +64,1 @@\n-        IRNode.beforeMatching(UNHANDLED_TRAP, InlineTypeRegexes.UNHANDLED_TRAP);\n+        IRNode.callLeafNoFpOfMethodNodes(CHECKCAST_ARRAYCOPY, InlineTypeRegexes.CHECKCAST_ARRAYCOPY);\n@@ -180,1 +67,1 @@\n-    public static final String PREDICATE_TRAP = PREFIX + \"PREDICATE_TRAP\" + POSTFIX;\n+    public static final String JLONG_ARRAYCOPY = PREFIX + \"JLONG_ARRAYCOPY\" + POSTFIX;\n@@ -182,1 +69,1 @@\n-        IRNode.beforeMatching(PREDICATE_TRAP, InlineTypeRegexes.PREDICATE_TRAP);\n+        IRNode.callLeafNoFpOfMethodNodes(JLONG_ARRAYCOPY, InlineTypeRegexes.JLONG_DISJOINT_ARRAYCOPY);\n@@ -185,1 +72,1 @@\n-    public static final String MEMBAR = PREFIX + \"MEMBAR\" + POSTFIX;\n+    public static final String SUBSTITUTABILITY_TEST = PREFIX + \"SUBSTITUTABILITY_TEST\" + POSTFIX;\n@@ -187,1 +74,1 @@\n-        IRNode.beforeMatching(MEMBAR, InlineTypeRegexes.MEMBAR);\n+        IRNode.staticCallOfMethodNodes(SUBSTITUTABILITY_TEST, InlineTypeRegexes.VALUE_OBJECT_METHODS_IS_SUBSTITUTABLE);\n@@ -190,1 +77,1 @@\n-    public static final String CHECKCAST_ARRAYCOPY = PREFIX + \"CHECKCAST_ARRAYCOPY\" + POSTFIX;\n+    public static final String ALLOC_OF_MYVALUE_KLASS = PREFIX + \"ALLOC_OF_MYVALUE_KLASS\" + POSTFIX;\n@@ -192,1 +79,1 @@\n-        IRNode.optoOnly(CHECKCAST_ARRAYCOPY, InlineTypeRegexes.CHECKCAST_ARRAYCOPY);\n+        IRNode.allocateOfNodes(ALLOC_OF_MYVALUE_KLASS, InlineTypeRegexes.MYVALUE_KLASS);\n@@ -195,1 +82,1 @@\n-    public static final String JLONG_ARRAYCOPY = PREFIX + \"JLONG_ARRAYCOPY\" + POSTFIX;\n+    public static final String ALLOC_ARRAY_OF_MYVALUE_KLASS = PREFIX + \"ALLOC_ARRAY_OF_MYVALUE_KLASS\" + POSTFIX;\n@@ -197,1 +84,1 @@\n-        IRNode.optoOnly(JLONG_ARRAYCOPY, InlineTypeRegexes.JLONG_ARRAYCOPY);\n+        IRNode.allocateArrayOfNodes(ALLOC_ARRAY_OF_MYVALUE_KLASS, InlineTypeRegexes.MYVALUE_KLASS);\n@@ -200,1 +87,1 @@\n-    public static final String FIELD_ACCESS = PREFIX + \"FIELD_ACCESS\" + POSTFIX;\n+    public static final String LOAD_OF_ANY_KLASS = PREFIX + \"LOAD_OF_ANY_KLASS\" + POSTFIX;\n@@ -202,1 +89,1 @@\n-        IRNode.optoOnly(FIELD_ACCESS, InlineTypeRegexes.FIELD_ACCESS);\n+        IRNode.anyLoadOfNodes(LOAD_OF_ANY_KLASS, InlineTypeRegexes.ANY_KLASS);\n@@ -205,1 +92,1 @@\n-    public static final String SUBSTITUTABILITY_TEST = PREFIX + \"SUBSTITUTABILITY_TEST\" + POSTFIX;\n+    public static final String STORE_OF_ANY_KLASS = PREFIX + \"STORE_OF_ANY_KLASS\" + POSTFIX;\n@@ -207,1 +94,1 @@\n-        IRNode.beforeMatching(SUBSTITUTABILITY_TEST, InlineTypeRegexes.SUBSTITUTABILITY_TEST);\n+        IRNode.anyStoreOfNodes(STORE_OF_ANY_KLASS, InlineTypeRegexes.ANY_KLASS);\n@@ -210,1 +97,1 @@\n-    public static final String CMPP = PREFIX + \"CMPP\" + POSTFIX;\n+    public static final String NON_FLAT_STORE_OF_ANY_KLASS = PREFIX + \"NON_FLAT_STORE_OF_ANY_KLASS\" + POSTFIX;\n@@ -212,1 +99,1 @@\n-        IRNode.beforeMatching(CMPP, InlineTypeRegexes.CMPP);\n+        IRNode.anyNonFlatStoreOfNodes(NON_FLAT_STORE_OF_ANY_KLASS, InlineTypeRegexes.ANY_KLASS);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeIRNode.java","additions":23,"deletions":136,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -27,43 +27,11 @@\n-    \/\/ Regular expressions used to match nodes in the PrintIdeal output\n-    private static final String START = \"(\\\\d+(\\\\s){2}(\";\n-    private static final String MID = \".*)+(\\\\s){2}===.*\";\n-    private static final String END = \")\";\n-    \/\/ Generic allocation\n-    public static final String ALLOC_G = \"(.*call,static.*wrapper for: C2 Runtime new_instance\" + END;\n-    public static final String ALLOCA_G = \"(.*call,static.*wrapper for: C2 Runtime new_array\" + END;\n-    \/\/ Inline type allocation\n-    public static final String MYVALUE_ARRAY_KLASS = \"\\\\[(precise )?compiler\/valhalla\/inlinetypes\/.*MyValue\";\n-    public static final String ALLOC = \"(.*precise compiler\/valhalla\/inlinetypes\/.*MyValue.*\\\\R(.*(?i:mov|xorl|nop|spill).*\\\\R)*.*C2 Runtime new_instance\" + END;\n-    public static final String ALLOCA = \"(.*\" + MYVALUE_ARRAY_KLASS + \".*\\\\R(.*(?i:mov|xorl|nop|spill).*\\\\R)*.*C2 Runtime new_array\" + END;\n-    public static final String LOAD = START + \"Load(B|C|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/.*\" + END;\n-    public static final String LOADK = START + \"LoadK\" + MID + END;\n-    public static final String STORE = START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/.*\" + END;\n-    public static final String LOOP = START + \"Loop\" + MID + \"\" + END;\n-    public static final String COUNTEDLOOP = START + \"CountedLoop\\\\b\" + MID + \"\" + END;\n-    public static final String COUNTEDLOOP_MAIN = START + \"CountedLoop\\\\b\" + MID + \"main\" + END;\n-    public static final String TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*(unstable_if|predicate)\" + END;\n-    public static final String LINKTOSTATIC = START + \"CallStaticJava\" + MID + \"linkToStatic\" + END;\n-    public static final String NPE = START + \"CallStaticJava\" + MID + \"null_check\" + END;\n-    public static final String CALL = START + \"CallStaticJava\" + MID + END;\n-    public static final String CALL_LEAF = \"(CALL, runtime leaf|call_leaf,runtime)\";\n-    public static final String CALL_LEAF_NOFP = \"(CALL, runtime leaf nofp|call_leaf_nofp,runtime)\";\n-    protected static final String CALL_UNSAFE = START + \"CallStaticJava\" + MID + \"# Static  jdk.internal.misc.Unsafe::\" + END;\n-    public static final String STORE_INLINE_FIELDS = START + \"CallStaticJava\" + MID + \"store_inline_type_fields\" + END;\n-    public static final String SCOBJ = \"(.*# ScObj.*\" + END;\n-    public static final String LOAD_UNKNOWN_INLINE = START + \"CallStaticJava\" + MID + \"C2 Runtime load_unknown_inline\" + END;\n-    public static final String STORE_UNKNOWN_INLINE = START + \"CallStaticJava\" + MID + \"C2 Runtime store_unknown_inline\" + END;\n-    public static final String INLINE_ARRAY_NULL_GUARD = START + \"CallStaticJava\" + MID + \"null_check' action='none'\" + END;\n-    public static final String INTRINSIC_SLOW_PATH = \"(.*call,static.*wrapper for: uncommon_trap.*reason='intrinsic_or_type_checked_inlining'.*\" + END;\n-    public static final String CLONE_INTRINSIC_SLOW_PATH = \"(.*call,static.*java.lang.Object::clone.*\" + END;\n-    public static final String CLASS_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*class_check\" + END;\n-    public static final String NULL_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_check\" + END;\n-    public static final String NULL_ASSERT_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_assert\" + END;\n-    public static final String RANGE_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*range_check\" + END;\n-    public static final String UNHANDLED_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unhandled\" + END;\n-    public static final String PREDICATE_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*predicate\" + END;\n-    public static final String MEMBAR = START + \"MemBar\" + MID + END;\n-    public static final String CHECKCAST_ARRAYCOPY = \"(.*\" + CALL_LEAF_NOFP + \".*checkcast_arraycopy.*\" + END;\n-    public static final String JLONG_ARRAYCOPY = \"(.*\" + CALL_LEAF_NOFP + \".*jlong_disjoint_arraycopy.*\" + END;\n-    public static final String FIELD_ACCESS = \"(.*Field: *\" + END;\n-    public static final String SUBSTITUTABILITY_TEST = START + \"CallStaticJava\" + MID + \"java.lang.runtime.ValueObjectMethods::isSubstitutable\" + END;\n-    public static final String CMPP = START + \"(CmpP|CmpN)\" + MID + \"\" + END;\n+    public static final String MYVALUE_KLASS = \"compiler\/valhalla\/inlinetypes\/.*MyValue\\\\w*\";\n+    public static final String ANY_KLASS = \"compiler\/valhalla\/inlinetypes\/.*\";\n+    public static final String VALUE_OBJECT_METHODS_IS_SUBSTITUTABLE = \"java.lang.runtime.ValueObjectMethods::isSubstitutable\";\n+    public static final String STORE_INLINE_TYPE_FIELDS = \"store_inline_type_fields\";\n+    public static final String JDK_INTERNAL_MISC_UNSAFE = \"# Static  jdk.internal.misc.Unsafe::\";\n+    public static final String LOAD_UNKNOWN_INLINE = \"C2 Runtime load_unknown_inline\";\n+    public static final String STORE_UNKNOWN_INLINE = \"C2 Runtime store_unknown_inline\";\n+    public static final String INLINE_ARRAY_NULL_GUARD = \"null_check' action='none'\";\n+    public static final String JLONG_DISJOINT_ARRAYCOPY = \"jlong_disjoint_arraycopy\";\n+    public static final String CHECKCAST_ARRAYCOPY = \"checkcast_arraycopy\";\n+    public static final String JAVA_LANG_OBJECT_CLONE = \"java.lang.Object::clone\";\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeRegexes.java","additions":11,"deletions":43,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -40,1 +40,10 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_ARRAY_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.CHECKCAST_ARRAYCOPY;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.CLONE_INTRINSIC_SLOW_PATH;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.INLINE_ARRAY_NULL_GUARD;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.JLONG_ARRAYCOPY;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_UNKNOWN_INLINE;\n@@ -43,0 +52,8 @@\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+import static compiler.lib.ir_framework.IRNode.ALLOC_ARRAY;\n+import static compiler.lib.ir_framework.IRNode.CLASS_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP;\n+import static compiler.lib.ir_framework.IRNode.LOOP;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n+\n@@ -118,1 +135,1 @@\n-        counts = {ALLOCA, \"= 1\"})\n+        counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"})\n@@ -120,2 +137,2 @@\n-        counts = {ALLOCA, \"= 1\"},\n-        failOn = LOAD)\n+        counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"},\n+        failOn = {LOAD_OF_ANY_KLASS})\n@@ -141,1 +158,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -157,1 +174,1 @@\n-    @IR(failOn = ALLOCA)\n+    @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS})\n@@ -186,1 +203,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -245,1 +262,1 @@\n-    @IR(failOn = {ALLOCA, LOOP, LOAD, TRAP})\n+    @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -260,1 +277,1 @@\n-    @IR(failOn = LOAD)\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n@@ -277,1 +294,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -720,1 +737,1 @@\n-        failOn = {ALLOCA, LOOP, LOAD, TRAP})\n+        failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -737,1 +754,1 @@\n-    \/\/ @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    \/\/ @Test(failOn = ALLOC_OF_MYVALUE_KLASS, + ALLOC_ARRAY_OF_MYVALUE_KLASS + LOOP + LOAD_OF_ANY_KLASS + STORE_OF_ANY_KLASS + UNSTABLE_IF_TRAP, PREDICATE_TRAP)\n@@ -740,1 +757,1 @@\n-        failOn = {ALLOCA, LOOP, LOAD, TRAP})\n+        failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -742,1 +759,1 @@\n-        failOn = {ALLOCA, LOOP, TRAP})\n+        failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -783,1 +800,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1547,1 +1564,1 @@\n-    @IR(counts = {ALLOCA, \"= 1\"})\n+    @IR(counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"})\n@@ -1848,1 +1865,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE})\n+        failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE})\n@@ -1869,1 +1886,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE})\n+        failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE})\n@@ -1887,1 +1904,1 @@\n-    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -1918,1 +1935,1 @@\n-        failOn = {ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n+        failOn = {ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n@@ -1920,1 +1937,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n+        failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n@@ -1949,1 +1966,1 @@\n-        failOn = {ALLOCA_G, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+        failOn = {ALLOC_ARRAY, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -1951,1 +1968,1 @@\n-            failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+            failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -1971,1 +1988,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G},\n+        failOn = {ALLOC, ALLOC_ARRAY},\n@@ -1976,1 +1993,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, STORE_UNKNOWN_INLINE, LOAD_UNKNOWN_INLINE},\n+        failOn = {ALLOC, ALLOC_ARRAY, STORE_UNKNOWN_INLINE, LOAD_UNKNOWN_INLINE},\n@@ -2008,1 +2025,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G},\n+        failOn = {ALLOC, ALLOC_ARRAY},\n@@ -2012,1 +2029,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, STORE_UNKNOWN_INLINE, LOAD_UNKNOWN_INLINE},\n+        failOn = {ALLOC, ALLOC_ARRAY, STORE_UNKNOWN_INLINE, LOAD_UNKNOWN_INLINE},\n@@ -2050,2 +2067,2 @@\n-        failOn = {ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n-        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\", ALLOC_G, \"= 1\"})\n+        failOn = {ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\", ALLOC, \"= 1\"})\n@@ -2053,1 +2070,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n@@ -2086,2 +2103,2 @@\n-        failOn = {ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n-        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\", ALLOC_G, \"= 1\"})\n+        failOn = {ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\", ALLOC, \"= 1\"})\n@@ -2089,1 +2106,1 @@\n-        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        failOn = {ALLOC, ALLOC_ARRAY, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n@@ -2588,1 +2605,1 @@\n-        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+        counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2590,1 +2607,1 @@\n-        failOn = INTRINSIC_SLOW_PATH)\n+        failOn = INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP)\n@@ -2617,1 +2634,1 @@\n-    @IR(failOn = INTRINSIC_SLOW_PATH)\n+    @IR(failOn = INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP)\n@@ -2630,1 +2647,1 @@\n-    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2643,1 +2660,1 @@\n-    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2662,1 +2679,1 @@\n-        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+        counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2664,1 +2681,1 @@\n-        failOn = INTRINSIC_SLOW_PATH)\n+        failOn = INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP)\n@@ -2679,1 +2696,1 @@\n-        failOn = INTRINSIC_SLOW_PATH)\n+        failOn = INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP)\n@@ -2691,1 +2708,1 @@\n-    @IR(failOn = INTRINSIC_SLOW_PATH)\n+    @IR(failOn = INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP)\n@@ -2703,1 +2720,1 @@\n-    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2715,1 +2732,1 @@\n-    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2733,1 +2750,1 @@\n-        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+        counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2735,1 +2752,1 @@\n-        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+        failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -2748,1 +2765,1 @@\n-    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+    @IR(failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -2761,1 +2778,1 @@\n-    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+    @IR(failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -2803,1 +2820,1 @@\n-        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+        counts = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, \"= 1\"})\n@@ -2805,1 +2822,1 @@\n-        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+        failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -2820,1 +2837,1 @@\n-        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+        failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -2832,1 +2849,1 @@\n-    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n+    @IR(failOn = {INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP, CLASS_CHECK_TRAP})\n@@ -3123,1 +3140,1 @@\n-    @IR(failOn = {LOAD})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n@@ -3146,1 +3163,1 @@\n-    @IR(failOn = {LOAD})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n@@ -3201,1 +3218,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3341,1 +3358,1 @@\n-    @IR(failOn = {ALLOC_G, ALLOCA_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE,\n+    @IR(failOn = {ALLOC, ALLOC_ARRAY, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP, LOAD_UNKNOWN_INLINE,\n@@ -3362,1 +3379,1 @@\n-    @IR(failOn = {ALLOCA, ALLOC_G, LOOP, LOAD, TRAP,\n+    @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, ALLOC, LOOP, LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP,\n@@ -3388,1 +3405,1 @@\n-    \/\/ @IR(failOn = {ALLOC_G, ALLOCA_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    \/\/ @IR(failOn = {ALLOC_G, ALLOC_ARRAY, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3409,1 +3426,1 @@\n-    \/\/ @IR(failOn = {ALLOCA, ALLOC_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    \/\/ @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, ALLOC_G, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3502,1 +3519,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3523,1 +3540,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3645,1 +3662,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS,})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":79,"deletions":62,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -36,1 +36,4 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_ARRAY_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -39,0 +42,5 @@\n+import static compiler.lib.ir_framework.IRNode.LOOP;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.SCOPE_OBJECT;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n+\n@@ -79,1 +87,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -93,1 +101,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -108,2 +116,2 @@\n-        counts = {ALLOC, \"= 1\", STORE, \"= 19\"},\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"= 1\", STORE_OF_ANY_KLASS, \"= 19\"},\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -111,1 +119,1 @@\n-        failOn = {ALLOC, LOAD, STORE, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -127,1 +135,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -142,1 +150,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -163,2 +171,2 @@\n-        counts = {ALLOC, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -166,2 +174,2 @@\n-        counts = {ALLOC, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -183,2 +191,2 @@\n-    @IR(counts = {ALLOC, \"<= 2\"},\n-        failOn = {LOAD, TRAP})\n+    @IR(counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"},\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -197,1 +205,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -218,3 +226,3 @@\n-        counts = {ALLOC, \"= 1\", LOAD, \"= 19\",\n-                  STORE, \"= 3\"}, \/\/ InitializeNode::coalesce_subword_stores merges stores\n-        failOn = {TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"= 1\", LOAD_OF_ANY_KLASS, \"= 19\",\n+                  STORE_OF_ANY_KLASS, \"= 3\"}, \/\/ InitializeNode::coalesce_subword_stores merges stores\n+        failOn = {UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -222,2 +230,2 @@\n-        counts = {ALLOC, \"= 2\", STORE, \"= 19\"},\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"= 2\", STORE_OF_ANY_KLASS, \"= 19\"},\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -260,1 +268,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -277,1 +285,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -295,1 +303,1 @@\n-        counts = {SCOBJ, \">= 1\", LOAD, \"<= 12\"}) \/\/ TODO 8227588 (loads should be removed)\n+        counts = {SCOPE_OBJECT, \">= 1\", LOAD_OF_ANY_KLASS, \"<= 12\"}) \/\/ TODO 8227588 (loads should be removed)\n@@ -358,2 +366,2 @@\n-        failOn = {ALLOC, STORE, TRAP},\n-        counts = {LOAD, \"= 19\"})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP},\n+        counts = {LOAD_OF_ANY_KLASS, \"= 19\"})\n@@ -361,1 +369,1 @@\n-        failOn = {ALLOC, LOAD, STORE, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -377,2 +385,2 @@\n-        failOn = {LOAD, TRAP},\n-        counts = {ALLOC, \"<= 1\"}) \/\/ 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP},\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\"}) \/\/ 1 MyValue2 allocation (if not the all-zero value)\n@@ -380,2 +388,2 @@\n-        failOn = {LOAD, TRAP},\n-        counts = {ALLOC, \"<= 2\"}) \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP},\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"}) \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n@@ -396,1 +404,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -411,1 +419,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -428,2 +436,2 @@\n-        counts = {ALLOC, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -431,2 +439,2 @@\n-        counts = {ALLOC, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -450,2 +458,2 @@\n-        counts = {ALLOC, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -453,2 +461,2 @@\n-        counts = {ALLOC, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD, TRAP})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -477,2 +485,2 @@\n-        counts = {ALLOC, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n-        failOn = {LOAD})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\"}, \/\/ 1 MyValue2 allocation (if not the all-zero value)\n+        failOn = {LOAD_OF_ANY_KLASS})\n@@ -481,2 +489,2 @@\n-    \/\/    counts = {ALLOC, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n-    \/\/    failOn = LOAD)\n+    \/\/    counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 2\"}, \/\/ 1 MyValue1 and 1 MyValue2 allocation (if not the all-zero value)\n+    \/\/    failOn = LOAD_OF_ANY_KLASS)\n@@ -517,1 +525,1 @@\n-    @IR(counts = {ALLOC, \"= 4\"}, failOn = TRAP)\n+    @IR(counts = {ALLOC_OF_MYVALUE_KLASS, \"= 4\"}, failOn = {UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -547,1 +555,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -561,1 +569,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -575,1 +583,1 @@\n-    @IR(failOn = {ALLOC, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -590,1 +598,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -604,1 +612,1 @@\n-    @IR(failOn = {ALLOC, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -625,1 +633,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP})\n@@ -650,1 +658,1 @@\n-    @IR(counts = {ALLOC, \"= 1\"})\n+    @IR(counts = {ALLOC_OF_MYVALUE_KLASS, \"= 1\"})\n@@ -703,1 +711,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -725,1 +733,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -747,1 +755,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -796,1 +804,1 @@\n-    \/\/     failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n+    \/\/     failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -831,1 +839,1 @@\n-    \/\/     failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n+    \/\/     failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -869,1 +877,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1037,1 +1045,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1057,1 +1065,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1085,1 +1093,1 @@\n-    @IR(failOn = {LOAD})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n@@ -1113,1 +1121,1 @@\n-    @IR(failOn = {LOAD})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":70,"deletions":62,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -35,1 +35,3 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -38,0 +40,4 @@\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n+\n@@ -119,1 +125,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -132,1 +138,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -145,1 +151,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -158,1 +164,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -171,1 +177,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -184,1 +190,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -204,1 +210,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -222,1 +228,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -240,1 +246,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -258,1 +264,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -276,1 +282,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -294,1 +300,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -318,1 +324,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -367,1 +373,1 @@\n-        failOn = {ALLOC, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -384,1 +390,1 @@\n-        failOn = {ALLOC, STORE, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -407,1 +413,1 @@\n-        failOn = {ALLOC, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -874,1 +880,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -992,1 +998,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1045,1 +1051,1 @@\n-    @IR(failOn = {LOAD, STORE, TRAP})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1047,1 +1053,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1061,1 +1067,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1075,1 +1081,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1090,1 +1096,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1104,1 +1110,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1118,1 +1124,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1131,1 +1137,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1266,1 +1272,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.CALL_UNSAFE;\n@@ -43,0 +43,2 @@\n+import static compiler.lib.ir_framework.IRNode.LOAD_KLASS;\n+\n@@ -102,1 +104,1 @@\n-    @IR(failOn = {LOADK})\n+    @IR(failOn = {LOAD_KLASS})\n@@ -133,1 +135,1 @@\n-    @IR(failOn = {LOADK})\n+    @IR(failOn = {LOAD_KLASS})\n@@ -1659,1 +1661,1 @@\n-    @IR(failOn = {LOADK})\n+    @IR(failOn = {LOAD_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,7 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.INLINE_ARRAY_NULL_GUARD;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.SUBSTITUTABILITY_TEST;\n@@ -45,0 +51,13 @@\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+import static compiler.lib.ir_framework.IRNode.CLASS_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.COUNTED_LOOP;\n+import static compiler.lib.ir_framework.IRNode.COUNTED_LOOP_MAIN;\n+import static compiler.lib.ir_framework.IRNode.FIELD_ACCESS;\n+import static compiler.lib.ir_framework.IRNode.LOAD_OF_CLASS;\n+import static compiler.lib.ir_framework.IRNode.LOOP;\n+import static compiler.lib.ir_framework.IRNode.MEMBAR;\n+import static compiler.lib.ir_framework.IRNode.NULL_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.STORE_OF_CLASS;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n+\n@@ -122,1 +141,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -280,1 +299,1 @@\n-    @IR(failOn = {ALLOC, STORE, LOOP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, LOOP})\n@@ -375,1 +394,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -556,1 +575,1 @@\n-    @IR(failOn = {ALLOC, STORE, LOOP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, LOOP})\n@@ -591,1 +610,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -624,1 +643,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -644,1 +663,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1155,1 +1174,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1184,1 +1203,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1343,1 +1362,1 @@\n-        failOn = {ALLOC_G})\n+        failOn = {ALLOC})\n@@ -1385,1 +1404,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1403,1 +1422,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1419,1 +1438,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1496,1 +1515,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1510,1 +1529,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1524,1 +1543,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1537,1 +1556,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1550,1 +1569,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1676,1 +1695,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1759,1 +1778,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -1782,1 +1801,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1989,1 +2008,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -2012,1 +2031,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -2035,1 +2054,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -2063,1 +2082,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -2088,1 +2107,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2128,1 +2147,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2152,1 +2171,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2176,1 +2195,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2197,1 +2216,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2282,1 +2301,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2323,1 +2342,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -2366,1 +2385,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 2\"})\n@@ -2368,1 +2387,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 1\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 1\"})\n@@ -2388,1 +2407,1 @@\n-        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 1\"})\n+        counts = {COUNTED_LOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -2409,1 +2428,1 @@\n-        counts = {COUNTEDLOOP, \"= 2\"})\n+        counts = {COUNTED_LOOP, \"= 2\"})\n@@ -2429,1 +2448,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 2\"})\n@@ -2431,1 +2450,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 1\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 1\"})\n@@ -2452,1 +2471,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 2\"})\n@@ -2454,1 +2473,1 @@\n-        counts = {COUNTEDLOOP_MAIN, \"= 0\"})\n+        counts = {COUNTED_LOOP_MAIN, \"= 0\"})\n@@ -2530,1 +2549,1 @@\n-        failOn = {LOAD_UNKNOWN_INLINE, ALLOC_G, MEMBAR})\n+        failOn = {LOAD_UNKNOWN_INLINE, ALLOC, MEMBAR})\n@@ -2598,1 +2617,1 @@\n-        failOn = {LOAD_UNKNOWN_INLINE, ALLOC_G, MEMBAR})\n+        failOn = {LOAD_UNKNOWN_INLINE, ALLOC, MEMBAR})\n@@ -2819,1 +2838,1 @@\n-    @IR(failOn = {ALLOC, STORE, LOOP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, LOOP})\n@@ -2871,1 +2890,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(failOn = {ALLOC, MEMBAR, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2893,1 +2912,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(failOn = {ALLOC, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2938,1 +2957,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(failOn = {ALLOC, MEMBAR, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2956,1 +2975,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(failOn = {ALLOC, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2988,1 +3007,1 @@\n-        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 2\"},\n+        counts = {COUNTED_LOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 2\"},\n@@ -3018,1 +3037,1 @@\n-        counts = {COUNTEDLOOP, \"= 4\", STORE_UNKNOWN_INLINE, \"= 9\"})\n+        counts = {COUNTED_LOOP, \"= 4\", STORE_UNKNOWN_INLINE, \"= 9\"})\n@@ -3177,1 +3196,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3195,1 +3214,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3197,1 +3216,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR})\n+    @IR(failOn = {ALLOC, MEMBAR})\n@@ -3215,1 +3234,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3233,1 +3252,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3235,1 +3254,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR})\n+    @IR(failOn = {ALLOC, MEMBAR})\n@@ -3253,1 +3272,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3270,1 +3289,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3288,1 +3307,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3306,1 +3325,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3324,1 +3343,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3403,1 +3422,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3422,1 +3441,1 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n+    @IR(failOn = {ALLOC, MEMBAR},\n@@ -3544,1 +3563,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3559,1 +3578,1 @@\n-    @IR(failOn = {LOAD, STORE, FIELD_ACCESS, NULL_CHECK_TRAP, TRAP})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, FIELD_ACCESS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3574,1 +3593,1 @@\n-        failOn = {ALLOC_G})\n+        failOn = {ALLOC})\n@@ -3593,1 +3612,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -3641,1 +3660,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3672,1 +3691,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3703,1 +3722,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3734,1 +3753,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3770,1 +3789,1 @@\n-    @IR(failOn = {LOAD},\n+    @IR(failOn = {LOAD_OF_ANY_KLASS},\n@@ -3774,1 +3793,1 @@\n-        counts = {ALLOC, \"<= 1\", STORE, \"<= 1\"})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"<= 1\", STORE_OF_ANY_KLASS, \"<= 1\"})\n@@ -3799,1 +3818,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -3819,1 +3838,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -3869,1 +3888,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -3892,1 +3911,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3905,1 +3924,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3923,1 +3942,1 @@\n-    \/\/ @IR(failOn = {ALLOC_G, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n+    \/\/ @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3938,1 +3957,1 @@\n-    \/\/ @IR(failOn = {ALLOC_G, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n+    \/\/ @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, NULL_CHECK_TRAP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3972,2 +3991,2 @@\n-        failOn = {ALLOC_G})\n-    @IR(failOn = {LOAD, STORE, TRAP})\n+        failOn = {ALLOC})\n+    @IR(failOn = {LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -3996,1 +4015,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -4020,1 +4039,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -4035,1 +4054,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -4088,1 +4107,1 @@\n-    @IR(failOn = {ALLOC_G})\n+    @IR(failOn = {ALLOC})\n@@ -4137,1 +4156,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -4271,1 +4290,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -4300,1 +4319,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":108,"deletions":89,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -37,1 +37,3 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.SUBSTITUTABILITY_TEST;\n@@ -40,0 +42,6 @@\n+import static compiler.lib.ir_framework.IRNode.CLASS_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.NULL_ASSERT_TRAP;\n+import static compiler.lib.ir_framework.IRNode.NULL_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.RANGE_CHECK_TRAP;\n+import static compiler.lib.ir_framework.IRNode.STATIC_CALL;\n+\n@@ -276,1 +284,1 @@\n-        counts = {CALL, \"= 4\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\", RANGE_CHECK_TRAP, \"= 1\"})\n+        counts = {STATIC_CALL, \"= 4\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\", RANGE_CHECK_TRAP, \"= 1\"})\n@@ -278,1 +286,1 @@\n-        counts = {CALL, \"= 4\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\"})\n+        counts = {STATIC_CALL, \"= 4\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\"})\n@@ -309,1 +317,1 @@\n-        counts = {CALL, \"= 4\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\", RANGE_CHECK_TRAP, \"= 1\"})\n+        counts = {STATIC_CALL, \"= 4\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\", RANGE_CHECK_TRAP, \"= 1\"})\n@@ -311,1 +319,1 @@\n-        counts = {CALL, \"= 4\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\"})\n+        counts = {STATIC_CALL, \"= 4\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\"})\n@@ -341,1 +349,1 @@\n-        counts = {CALL, \"= 5\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\",\n+        counts = {STATIC_CALL, \"= 5\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\",\n@@ -344,1 +352,1 @@\n-        counts = {CALL, \"= 5\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\"})\n+        counts = {STATIC_CALL, \"= 5\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import jdk.internal.value.ValueClass;\n-import jdk.internal.vm.annotation.LooselyConsistentValue;\n@@ -40,1 +38,4 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_ARRAY_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_INLINE_FIELDS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -43,0 +44,2 @@\n+import static compiler.lib.ir_framework.IRNode.STATIC_CALL;\n+\n@@ -172,1 +175,1 @@\n-        failOn = {ALLOC, STORE, CALL})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, STATIC_CALL})\n@@ -174,1 +177,1 @@\n-        counts = {ALLOC, \"= 1\", STORE, \"= 14\"})\n+        counts = {ALLOC_OF_MYVALUE_KLASS, \"= 1\", STORE_OF_ANY_KLASS, \"= 14\"})\n@@ -323,1 +326,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE, STORE_INLINE_FIELDS})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, STORE_INLINE_FIELDS})\n@@ -446,1 +449,1 @@\n-        failOn = {ALLOC, ALLOCA, STORE, STORE_INLINE_FIELDS})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, STORE_INLINE_FIELDS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_ARRAY_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_UNKNOWN_INLINE;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.NON_FLAT_STORE_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_UNKNOWN_INLINE;\n@@ -31,1 +39,5 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+import static compiler.lib.ir_framework.IRNode.LOOP;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n@@ -89,1 +101,1 @@\n-        counts = {ALLOCA, \"= 1\"})\n+        counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"})\n@@ -91,2 +103,2 @@\n-        counts = {ALLOCA, \"= 1\"},\n-        failOn = LOAD)\n+        counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"},\n+        failOn = {LOAD_OF_ANY_KLASS})\n@@ -118,1 +130,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -134,1 +146,1 @@\n-    @IR(failOn = {ALLOCA})\n+    @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS})\n@@ -167,1 +179,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -230,1 +242,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -245,1 +257,1 @@\n-    @IR(failOn = LOAD)\n+    @IR(failOn = {LOAD_OF_ANY_KLASS})\n@@ -262,1 +274,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -883,1 +895,1 @@\n-        failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -901,1 +913,1 @@\n-    @IR(failOn = {ALLOCA, LOOP, TRAP})\n+    @IR(failOn = {ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -954,1 +966,1 @@\n-    \/\/ @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    \/\/ @Test(failOn = ALLOC_OF_MYVALUE_KLASS + ALLOC_ARRAY_OF_MYVALUE_KLASS + LOOP + LOAD_OF_ANY_KLASS + STORE_OF_ANY_KLASS + UNSTABLE_IF_TRAP, PREDICATE_TRAP)\n@@ -1762,1 +1774,1 @@\n-    @IR(counts = {ALLOCA, \"= 1\"})\n+    @IR(counts = {ALLOC_ARRAY_OF_MYVALUE_KLASS, \"= 1\"})\n@@ -2129,1 +2141,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2152,1 +2164,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2253,1 +2265,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -2269,1 +2281,1 @@\n-        failOn = {ALLOC, LOOP, STORE, TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, LOOP, NON_FLAT_STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2357,1 +2369,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2380,1 +2392,1 @@\n-    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, ALLOC_ARRAY_OF_MYVALUE_KLASS, LOOP, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2919,1 +2931,1 @@\n-    @IR(failOn = {ALLOC_G, STORE, TRAP})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2947,1 +2959,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -2995,1 +3007,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -3056,1 +3068,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -3094,1 +3106,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -3138,1 +3150,1 @@\n-        failOn = {ALLOC_G, STORE})\n+        failOn = {ALLOC, NON_FLAT_STORE_OF_ANY_KLASS})\n@@ -3170,1 +3182,1 @@\n-        failOn = {ALLOC_G, STORE})\n+        failOn = {ALLOC, NON_FLAT_STORE_OF_ANY_KLASS})\n@@ -3201,1 +3213,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -3236,1 +3248,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n@@ -3269,1 +3281,1 @@\n-    @IR(failOn = {ALLOC_G, STORE})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":42,"deletions":30,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -42,1 +42,3 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -45,0 +47,6 @@\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+import static compiler.lib.ir_framework.IRNode.CMP_N;\n+import static compiler.lib.ir_framework.IRNode.CMP_P;\n+import static compiler.lib.ir_framework.IRNode.PREDICATE_TRAP;\n+import static compiler.lib.ir_framework.IRNode.UNSTABLE_IF_TRAP;\n+\n@@ -115,1 +123,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -134,1 +142,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -153,1 +161,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -175,1 +183,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -193,1 +201,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -247,1 +255,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -271,1 +279,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -288,1 +296,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -312,1 +320,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -331,1 +339,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -358,1 +366,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -403,1 +411,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -447,1 +455,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -475,1 +483,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -504,1 +512,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -531,1 +539,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -561,1 +569,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -592,1 +600,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -610,1 +618,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -654,1 +662,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -677,1 +685,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -694,1 +702,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -696,1 +704,1 @@\n-        failOn = {ALLOC})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -716,1 +724,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -737,1 +745,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -763,1 +771,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -776,1 +784,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -816,1 +824,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -857,1 +865,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -874,1 +882,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -887,1 +895,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -917,1 +925,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -970,1 +978,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -992,1 +1000,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1012,1 +1020,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1031,1 +1039,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -1055,1 +1063,1 @@\n-    @IR(failOn = {ALLOC_G, STORE, TRAP})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1083,1 +1091,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1131,1 +1139,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1192,1 +1200,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1228,1 +1236,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1269,1 +1277,1 @@\n-    @IR(failOn = {ALLOC_G, TRAP})\n+    @IR(failOn = {ALLOC, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1310,1 +1318,1 @@\n-    @IR(failOn = {ALLOC_G, STORE, TRAP})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1326,1 +1334,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1343,1 +1351,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1360,1 +1368,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1383,1 +1391,1 @@\n-    @IR(failOn = {ALLOC_G, STORE, TRAP})\n+    @IR(failOn = {ALLOC, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1411,1 +1419,1 @@\n-    @IR(failOn = {ALLOC, STORE, TRAP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1461,1 +1469,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1524,1 +1532,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1562,1 +1570,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1605,1 +1613,1 @@\n-    @IR(failOn = {ALLOC_G, TRAP})\n+    @IR(failOn = {ALLOC, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1627,1 +1635,1 @@\n-    @IR(failOn = {ALLOC_G, LOAD, STORE, TRAP})\n+    @IR(failOn = {ALLOC, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n@@ -1652,1 +1660,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1695,1 +1703,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1736,1 +1744,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1775,1 +1783,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1821,1 +1829,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1867,1 +1875,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1906,1 +1914,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1952,1 +1960,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -1997,1 +2005,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -2037,1 +2045,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -2062,1 +2070,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2105,1 +2113,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2135,1 +2143,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2176,1 +2184,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2222,1 +2230,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2251,1 +2259,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2286,1 +2294,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2324,1 +2332,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2353,1 +2361,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2382,1 +2390,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n@@ -2421,2 +2429,2 @@\n-        failOn = {ALLOC, STORE},\n-        counts = {LOAD, \" = 4\"}) \/\/ 4 loads from the non-flattened MyValue1.v4 fields\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS},\n+        counts = {LOAD_OF_ANY_KLASS, \" = 4\"}) \/\/ 4 loads from the non-flattened MyValue1.v4 fields\n@@ -2424,1 +2432,1 @@\n-        failOn = {ALLOC, STORE})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -2539,1 +2547,1 @@\n-    @IR(failOn = {ALLOC})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS})\n@@ -2555,1 +2563,1 @@\n-        failOn = {ALLOC, CMPP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, CMP_N, CMP_P})\n@@ -2569,1 +2577,1 @@\n-    @IR(failOn = {ALLOC, CMPP})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, CMP_N, CMP_P})\n@@ -2619,1 +2627,1 @@\n-        counts = {ALLOC_G, \" <= 2\"}) \/\/ 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 2\"}) \/\/ 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n@@ -2621,1 +2629,1 @@\n-        counts = {ALLOC_G, \" <= 3\"}) \/\/ 1 MyValue1 allocation + 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 3\"}) \/\/ 1 MyValue1 allocation + 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n@@ -2655,1 +2663,1 @@\n-        counts = {ALLOC_G, \" <= 2\"}) \/\/ 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 2\"}) \/\/ 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n@@ -2657,1 +2665,1 @@\n-        counts = {ALLOC_G, \" <= 3\"}) \/\/ 1 MyValue1 allocation + 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 3\"}) \/\/ 1 MyValue1 allocation + 1 MyValue2 allocation + 1 Integer allocation (if not the all-zero value)\n@@ -2691,1 +2699,1 @@\n-        failOn = {ALLOC_G})\n+        failOn = {ALLOC})\n@@ -2693,1 +2701,1 @@\n-        counts = {ALLOC_G, \" <= 1\"}) \/\/ No allocation required if the MyValue2 return is the all-zero value\n+        counts = {ALLOC, \" <= 1\"}) \/\/ No allocation required if the MyValue2 return is the all-zero value\n@@ -2742,1 +2750,1 @@\n-        failOn = {ALLOC_G})\n+        failOn = {ALLOC})\n@@ -2744,1 +2752,1 @@\n-        counts = {ALLOC_G, \" <= 1\"}) \/\/ No allocation required if the MyValue3 return is the all-zero value\n+        counts = {ALLOC, \" <= 1\"}) \/\/ No allocation required if the MyValue3 return is the all-zero value\n@@ -3313,1 +3321,1 @@\n-    @IR(failOn = ALLOC_G)\n+    @IR(failOn = ALLOC)\n@@ -3330,1 +3338,1 @@\n-    @IR(failOn = ALLOC_G)\n+    @IR(failOn = ALLOC)\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":98,"deletions":90,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.LOAD_OF_ANY_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -38,0 +40,3 @@\n+import static compiler.lib.ir_framework.IRNode.LOAD_OF_CLASS;\n+import static compiler.lib.ir_framework.IRNode.STORE_OF_CLASS;\n+\n@@ -105,1 +110,1 @@\n-    @IR(failOn = {ALLOC, LOAD, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, LOAD_OF_ANY_KLASS, STORE_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.ALLOC_OF_MYVALUE_KLASS;\n+import static compiler.valhalla.inlinetypes.InlineTypeIRNode.STORE_OF_ANY_KLASS;\n@@ -34,0 +35,2 @@\n+import static compiler.lib.ir_framework.IRNode.ALLOC;\n+\n@@ -171,1 +174,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -219,1 +222,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    @IR(failOn = {ALLOC_OF_MYVALUE_KLASS, STORE_OF_ANY_KLASS})\n@@ -530,1 +533,1 @@\n-        counts = {ALLOC_G, \" <= 7\"}) \/\/ 6 MyValueClass2\/MyValueClass2Inline allocations + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 7\"}) \/\/ 6 MyValueClass2\/MyValueClass2Inline allocations + 1 Integer allocation (if not the all-zero value)\n@@ -532,1 +535,1 @@\n-        counts = {ALLOC_G, \" <= 8\"}) \/\/ 1 MyValueClass1 allocation + 6 MyValueClass2\/MyValueClass2Inline allocations + 1 Integer allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 8\"}) \/\/ 1 MyValueClass1 allocation + 6 MyValueClass2\/MyValueClass2Inline allocations + 1 Integer allocation (if not the all-zero value)\n@@ -567,1 +570,1 @@\n-        counts = {ALLOC_G, \" <= 1\"}) \/\/ 1 MyValueClass2Inline allocation (if not the all-zero value)\n+        counts = {ALLOC, \" <= 1\"}) \/\/ 1 MyValueClass2Inline allocation (if not the all-zero value)\n@@ -569,1 +572,1 @@\n-        counts = {ALLOC_G, \" <= 2\"}) \/\/ 1 MyValueClass2 + 1 MyValueClass2Inline allocation  (if not the all-zero value)\n+        counts = {ALLOC, \" <= 2\"}) \/\/ 1 MyValueClass2 + 1 MyValueClass2Inline allocation  (if not the all-zero value)\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}