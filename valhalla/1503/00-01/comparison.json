{"files":[{"patch":"@@ -106,2 +106,2 @@\n-    private static final String STORE_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n-    private static final String LOAD_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n+    private static final String STORE_OF_CLASS_POSTFIX = \"( \\\\([^\\\\)]+\\\\))?(:|\\\\+)\\\\S* \\\\*\" + END;\n+    private static final String LOAD_OF_CLASS_POSTFIX = \"( \\\\([^\\\\)]+\\\\))?(:|\\\\+)\\\\S* \\\\*\" + END;\n@@ -931,2 +931,2 @@\n-    public static void anyLoadOfNodes(String irNodePlaceholder, String loadee) {\n-        loadOfNodes(irNodePlaceholder, \"Load(B|UB|S|US|I|L|F|D|P|N)\", loadee);\n+    public static void anyLoadOfNodes(String irNodePlaceholder, String fieldHolder) {\n+        loadOfNodes(irNodePlaceholder, \"Load(B|UB|S|US|I|L|F|D|P|N)\", fieldHolder);\n@@ -1950,11 +1950,2 @@\n-    public static void anyStoreOfNodes(String irNodePlaceholder, String storee) {\n-        storeOfNodes(irNodePlaceholder, \"Store(B|C|S|I|L|F|D|P|N)\", storee);\n-    }\n-\n-    public static final String NON_FLAT_STORE_OF_CLASS = COMPOSITE_PREFIX + \"NON_FLAT_STORE_OF_CLASS\" + POSTFIX;\n-    static {\n-        anyNonFlatStoreOfNodes(NON_FLAT_STORE_OF_CLASS, IS_REPLACED);\n-    }\n-\n-    public static void anyNonFlatStoreOfNodes(String irNodePlaceholder, String storee) {\n-        nonFlatStoreOfNodes(irNodePlaceholder, \"Store(B|C|S|I|L|F|D|P|N)\", storee);\n+    public static void anyStoreOfNodes(String irNodePlaceholder, String fieldHolder) {\n+        storeOfNodes(irNodePlaceholder, \"Store(B|C|S|I|L|F|D|P|N)\", fieldHolder);\n@@ -2908,1 +2899,1 @@\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + loadee + LOAD_OF_CLASS_POSTFIX;\n+        String regex = START + irNodeRegex + MID + \"@(\\\\w+: ?)*[\\\\w\/]*\\\\b\" + loadee + LOAD_OF_CLASS_POSTFIX;\n@@ -2913,6 +2904,1 @@\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + storee + STORE_OF_CLASS_POSTFIX;\n-        beforeMatching(irNodePlaceholder, regex);\n-    }\n-\n-    private static void nonFlatStoreOfNodes(String irNodePlaceholder, String irNodeRegex, String storee) {\n-        String regex = START + irNodeRegex + MID + \"@((stable:)?\\\\w+\/)*\" + storee + STORE_OF_CLASS_POSTFIX;\n+        String regex = START + irNodeRegex + MID + \"@(\\\\w+: ?)*[\\\\w\/]*\\\\b\" + storee + STORE_OF_CLASS_POSTFIX;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":8,"deletions":22,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -97,5 +97,0 @@\n-    public static final String NON_FLAT_STORE_OF_ANY_KLASS = PREFIX + \"NON_FLAT_STORE_OF_ANY_KLASS\" + POSTFIX;\n-    static {\n-        IRNode.anyNonFlatStoreOfNodes(NON_FLAT_STORE_OF_ANY_KLASS, InlineTypeRegexes.ANY_KLASS);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeIRNode.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-    public static final String ANY_KLASS = \"compiler\/valhalla\/inlinetypes\/.*\";\n+    public static final String ANY_KLASS = \"compiler\/valhalla\/inlinetypes\/[\\\\w\/]*\";\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeRegexes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3140,1 +3140,2 @@\n-    @IR(failOn = {LOAD_OF_ANY_KLASS})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {LOAD_OF_ANY_KLASS})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import static compiler.valhalla.inlinetypes.InlineTypeIRNode.NON_FLAT_STORE_OF_ANY_KLASS;\n@@ -2281,1 +2280,2 @@\n-        failOn = {ALLOC_OF_MYVALUE_KLASS, LOOP, NON_FLAT_STORE_OF_ANY_KLASS, UNSTABLE_IF_TRAP, PREDICATE_TRAP})\n+        failOn = {ALLOC_OF_MYVALUE_KLASS, LOOP, UNSTABLE_IF_TRAP, PREDICATE_TRAP},\n+        counts = {STORE_OF_ANY_KLASS, \"= 38\"})\n@@ -3150,1 +3150,2 @@\n-        failOn = {ALLOC, NON_FLAT_STORE_OF_ANY_KLASS})\n+        failOn = {ALLOC},\n+        counts = {STORE_OF_ANY_KLASS, \"= 19\"})\n@@ -3182,1 +3183,2 @@\n-        failOn = {ALLOC, NON_FLAT_STORE_OF_ANY_KLASS})\n+        failOn = {ALLOC},\n+        counts = {STORE_OF_ANY_KLASS, \"= 19\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -771,2 +771,11 @@\n-    @IR(counts = {IRNode.STORE_OF_FIELD, \"myClassEmpty\", \"1\", IRNode.STORE_OF_CLASS, \"GoodCount\", \"1\",\n-                  IRNode.STORE_OF_CLASS, \"\/GoodCount\", \"1\", IRNode.STORE_OF_CLASS, \"MyClassEmpty\", \"0\"},\n+    @IR(counts = {\n+            IRNode.STORE_OF_FIELD, \"myClassEmpty\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"oodCount\", \"0\",\n+            IRNode.STORE_OF_CLASS, \"GoodCount\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"\/GoodCount\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"tests\/GoodCount\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"\/tests\/GoodCount\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"ir_framework\/tests\/GoodCount\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"\/ir_framework\/tests\/GoodCount\", \"0\",\n+            IRNode.STORE_OF_CLASS, \"MyClassEmpty\", \"0\"\n+        },\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}