{"files":[{"patch":"@@ -844,0 +844,3 @@\n+    \/** The bit mask of {@link AccessFlag#STRICT_INIT} access and property modifier. *\/\n+    int ACC_STRICT_INIT = 0x0800;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n@@ -288,2 +287,2 @@\n-     * The access flag {@code ACC_STRICT_INIT}, with a mask\n-     * value of {@code 0x0800}.\n+     * The access flag {@code ACC_STRICT_INIT}, with a mask value of\n+     * <code>{@value \"0x%04x\" java.lang.classfile.ClassFile#ACC_STRICT_INIT}<\/code>.\n@@ -295,1 +294,1 @@\n-    STRICT_INIT(Modifier.STRICT, false,\n+    STRICT_INIT(ACC_STRICT_INIT, false,\n@@ -483,1 +482,1 @@\n-              ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM | ACC_STRICT,\n+              ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM | ACC_STRICT_INIT,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -393,1 +393,1 @@\n-     * @see AccessFlag#STRICT and AccessFlag#STRICT_FIELD\n+     * @see AccessFlag#STRICT\n@@ -466,1 +466,1 @@\n-        Modifier.VOLATILE       | Modifier.STRICT;\n+        Modifier.VOLATILE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n-import static java.lang.classfile.ClassFile.ACC_STRICT;\n+import static java.lang.classfile.ClassFile.*;\n@@ -96,1 +95,1 @@\n-            if ((f.flags().flagsMask() & (ACC_STATIC | ACC_STRICT)) == ACC_STRICT) {\n+            if ((f.flags().flagsMask() & (ACC_STATIC | ACC_STRICT_INIT)) == ACC_STRICT_INIT) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,2 +53,1 @@\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n-import static java.lang.classfile.ClassFile.ACC_STRICT;\n+import static java.lang.classfile.ClassFile.*;\n@@ -127,1 +126,1 @@\n-            if ((field.flags().flagsMask() & (ACC_STATIC | ACC_STRICT)) == ACC_STRICT) { \/\/ instance strict\n+            if ((field.flags().flagsMask() & (ACC_STATIC | ACC_STRICT_INIT)) == ACC_STRICT_INIT) { \/\/ instance strict\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n-import static java.lang.classfile.ClassFile.ACC_STRICT;\n+import static java.lang.classfile.ClassFile.*;\n@@ -50,1 +49,1 @@\n-            if ((field.fieldFlags() & (ACC_STATIC | ACC_STRICT)) == ACC_STRICT) {\n+            if ((field.fieldFlags() & (ACC_STATIC | ACC_STRICT_INIT)) == ACC_STRICT_INIT) {\n@@ -60,1 +59,1 @@\n-            if ((field.fieldFlags() & (ACC_STATIC | ACC_STRICT)) == ACC_STRICT) {\n+            if ((field.fieldFlags() & (ACC_STATIC | ACC_STRICT_INIT)) == ACC_STRICT_INIT) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/WritableField.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}