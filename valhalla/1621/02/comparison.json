{"files":[{"patch":"@@ -445,7 +445,1 @@\n-\n-                \/\/ Temporary logic to handle package root classification until new\n-                \/\/ image reader code is committed which sets FLAGS_IS_PACKAGE_ROOT.\n-                \/\/ Base name is \"\/packages\" or \"\/modules\" (NOT \"packages\" and \"modules\").\n-                \/\/ TODO: Uncomment the FLAGS_IS_PACKAGE_ROOT test below.\n-                \/\/ return (getFlags() & FLAGS_IS_PACKAGE_ROOT) != 0\n-                return getBase().charAt(1) == 'p'\n+                return (getFlags() & FLAGS_IS_PACKAGE_ROOT) != 0\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageLocation.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.jimage;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.function.Function;\n-\n-\/**\n- * Factory to get ImageReader\n- *\n- * @implNote This class needs to maintain JDK 8 source compatibility.\n- *\n- * It is used internally in the JDK to implement jimage\/jrtfs access,\n- * but also compiled and delivered as part of the jrtfs.jar to support access\n- * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n- *\/\n-public class ImageReaderFactory {\n-    private ImageReaderFactory() {}\n-\n-    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n-    private static final Path BOOT_MODULES_JIMAGE;\n-\n-    static {\n-        FileSystem fs;\n-        if (ImageReaderFactory.class.getClassLoader() == null) {\n-            try {\n-                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n-                        .getMethod(\"theFileSystem\")\n-                        .invoke(null);\n-            } catch (Exception e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n-        } else {\n-            fs = FileSystems.getDefault();\n-        }\n-        BOOT_MODULES_JIMAGE = fs.getPath(JAVA_HOME, \"lib\", \"modules\");\n-    }\n-\n-    private static final Map<Path, ImageReader> readers = new ConcurrentHashMap<>();\n-\n-    \/**\n-     * Returns an {@code ImageReader} to read from the given image file\n-     *\/\n-    public static ImageReader get(Path jimage) throws IOException {\n-        Objects.requireNonNull(jimage);\n-        try {\n-            return readers.computeIfAbsent(jimage, OPENER);\n-        } catch (UncheckedIOException io) {\n-            throw io.getCause();\n-        }\n-    }\n-\n-    private static Function<Path, ImageReader> OPENER = new Function<Path, ImageReader>() {\n-        public ImageReader apply(Path path) {\n-            try {\n-                return ImageReader.open(path);\n-            } catch (IOException io) {\n-                throw new UncheckedIOException(io);\n-            }\n-        }\n-    };\n-\n-    \/**\n-     * Returns the {@code ImageReader} to read the image file in this\n-     * run-time image.\n-     *\n-     * @throws UncheckedIOException if an I\/O error occurs\n-     *\/\n-    public static ImageReader getImageReader() {\n-        try {\n-            return get(BOOT_MODULES_JIMAGE);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReaderFactory.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -55,5 +55,1 @@\n-    \/\/ The following flags are designed to be additive (hence \"has-resources\"\n-    \/\/ rather than \"is-empty\", even though \"isEmpty()\" is whats in the API).\n-    \/\/ API methods like \"isEmpty()\" and \"hasPreviewVersion()\" are designed to\n-    \/\/ match the semantics of ImageLocation flags to avoid having business\n-    \/\/ logic need to reason about two different flag regimes.\n+    \/\/ The following flags are designed to be additive.\n@@ -195,8 +191,1 @@\n-\n-                    \/\/ Temporarily allow for *neither* flag to be set. This is what would\n-                    \/\/ be written by a 1.0 version of the jimage flag, and indicates a\n-                    \/\/ normal resource without a preview version.\n-                    \/\/ TODO: Remove the zero-check below once image writer code is updated.\n-                    int previewFlags =\n-                            buffer.get(idx) & (FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_PREVIEW_VERSION);\n-                    if (previewFlags == 0 || (previewFlags & testFlags) != 0) {\n+                    if ((buffer.get(idx) & testFlags) != 0) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ModuleReference.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            return true;\n+            return ENABLE_PREVIEW_MODE;\n@@ -66,0 +66,3 @@\n+            if (!ENABLE_PREVIEW_MODE) {\n+                return false;\n+            }\n@@ -84,0 +87,9 @@\n+    \/\/ Temporary system property to disable preview patching and enable the new preview mode\n+    \/\/ feature for testing\/development. Once the preview mode feature is finished, the value\n+    \/\/ will be always 'true' and this code, and all related dead-code can be removed.\n+    private static final boolean DISABLE_PREVIEW_PATCHING_DEFAULT = false;\n+    private static final boolean ENABLE_PREVIEW_MODE = Boolean.parseBoolean(\n+            System.getProperty(\n+                    \"DISABLE_PREVIEW_PATCHING\",\n+                    Boolean.toString(DISABLE_PREVIEW_PATCHING_DEFAULT)));\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/PreviewMode.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -322,6 +322,1 @@\n-        \/\/ Temporarily, we allow either version (1.1 or 1.0) of the file to\n-        \/\/ be read so this code can be committed before image writing changes\n-        \/\/ for preview mode. Preview mode changes do not modify any structure,\n-        \/\/ so a 1.0 file will look like a jimage without any preview resources.\n-        \/\/ TODO: Restore equality check for MINOR_VERSION.\n-        _header.minor_version(_endian) > MINOR_VERSION) {\n+        _header.minor_version(_endian) != MINOR_VERSION) {\n","filename":"src\/java.base\/share\/native\/libjimage\/imageFile.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-            long compressedSize, long uncompressedSize) {\n+                            long compressedSize, long uncompressedSize, int previewFlags) {\n@@ -82,1 +82,1 @@\n-                        contentOffset, compressedSize, uncompressedSize);\n+                        contentOffset, compressedSize, uncompressedSize, previewFlags);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/BasicImageWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import jdk.internal.jimage.ImageLocation;\n@@ -230,25 +231,2 @@\n-        ResourcePool resultResources;\n-        try {\n-            resultResources = pluginSupport.visitResources(allContent);\n-            if (generateRuntimeImage) {\n-                \/\/ Keep track of non-modules resources for linking from a run-time image\n-                resultResources = addNonClassResourcesTrackFiles(resultResources,\n-                                                                 writer);\n-                \/\/ Generate the diff between the input resources from packaged\n-                \/\/ modules in 'allContent' to the plugin- or otherwise\n-                \/\/ generated-content in 'resultResources'\n-                resultResources = addResourceDiffFiles(allContent.resourcePool(),\n-                                                       resultResources,\n-                                                       writer);\n-            }\n-        } catch (PluginException pe) {\n-            if (JlinkTask.DEBUG) {\n-                pe.printStackTrace();\n-            }\n-            throw pe;\n-        } catch (Exception ex) {\n-            if (JlinkTask.DEBUG) {\n-                ex.printStackTrace();\n-            }\n-            throw new IOException(ex);\n-        }\n+        ResourcePool resultResources =\n+                getResourcePool(allContent, writer, pluginSupport, generateRuntimeImage);\n@@ -285,0 +263,2 @@\n+                int locFlags = ImageLocation.getFlags(\n+                        res.path(), p -> resultResources.findEntry(p).isPresent());\n@@ -286,1 +266,1 @@\n-                writer.addLocation(path, offset[0], compressedSize, uncompressedSize);\n+                writer.addLocation(path, offset[0], compressedSize, uncompressedSize, locFlags);\n@@ -310,0 +290,34 @@\n+    private static ResourcePool getResourcePool(\n+            ResourcePoolManager allContent,\n+            BasicImageWriter writer,\n+            ImagePluginStack pluginSupport,\n+            boolean generateRuntimeImage)\n+            throws IOException {\n+        ResourcePool resultResources;\n+        try {\n+            resultResources = pluginSupport.visitResources(allContent);\n+            if (generateRuntimeImage) {\n+                \/\/ Keep track of non-modules resources for linking from a run-time image\n+                resultResources = addNonClassResourcesTrackFiles(resultResources,\n+                        writer);\n+                \/\/ Generate the diff between the input resources from packaged\n+                \/\/ modules in 'allContent' to the plugin- or otherwise\n+                \/\/ generated-content in 'resultResources'\n+                resultResources = addResourceDiffFiles(allContent.resourcePool(),\n+                        resultResources,\n+                        writer);\n+            }\n+        } catch (PluginException pe) {\n+            if (JlinkTask.DEBUG) {\n+                pe.printStackTrace();\n+            }\n+            throw pe;\n+        } catch (Exception ex) {\n+            if (JlinkTask.DEBUG) {\n+                ex.printStackTrace();\n+            }\n+            throw new IOException(ex);\n+        }\n+        return resultResources;\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageFileCreator.java","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,2 +57,2 @@\n-            ImageStringsWriter strings,\n-            long contentOffset, long compressedSize, long uncompressedSize) {\n+                                           ImageStringsWriter strings,\n+                                           long contentOffset, long compressedSize, long uncompressedSize, int previewFlags) {\n@@ -93,7 +93,8 @@\n-               .addAttribute(ATTRIBUTE_MODULE, moduleName)\n-               .addAttribute(ATTRIBUTE_PARENT, parentName)\n-               .addAttribute(ATTRIBUTE_BASE, baseName)\n-               .addAttribute(ATTRIBUTE_EXTENSION, extensionName)\n-               .addAttribute(ATTRIBUTE_OFFSET, contentOffset)\n-               .addAttribute(ATTRIBUTE_COMPRESSED, compressedSize)\n-               .addAttribute(ATTRIBUTE_UNCOMPRESSED, uncompressedSize);\n+                .addAttribute(ATTRIBUTE_MODULE, moduleName)\n+                .addAttribute(ATTRIBUTE_PARENT, parentName)\n+                .addAttribute(ATTRIBUTE_BASE, baseName)\n+                .addAttribute(ATTRIBUTE_EXTENSION, extensionName)\n+                .addAttribute(ATTRIBUTE_OFFSET, contentOffset)\n+                .addAttribute(ATTRIBUTE_COMPRESSED, compressedSize)\n+                .addAttribute(ATTRIBUTE_UNCOMPRESSED, uncompressedSize)\n+                .addAttribute(ATTRIBUTE_PREVIEW_FLAGS, previewFlags);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageLocationWriter.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import jdk.internal.jimage.ImageLocation;\n+import jdk.internal.jimage.ModuleReference;\n+\n@@ -32,0 +35,1 @@\n+import java.util.Comparator;\n@@ -33,0 +37,1 @@\n+import java.util.HashSet;\n@@ -38,1 +43,3 @@\n-import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.joining;\n@@ -42,1 +49,0 @@\n- *\n@@ -47,1 +53,1 @@\n-        return path.startsWith(\"\/packages\") || path.startsWith(\"\/modules\");\n+        return path.startsWith(\"\/packages\/\") || path.startsWith(\"\/modules\/\");\n@@ -53,1 +59,2 @@\n-    private static class Node {\n+    \/\/ Visible for testing only.\n+    static class Node {\n@@ -69,0 +76,8 @@\n+        private void setLocation(ImageLocationWriter loc) {\n+            \/\/ This *can* be called more than once, but only with the same instance.\n+            if (this.loc != null && loc != this.loc) {\n+                throw new IllegalStateException(\"Cannot add different locations: \" + name);\n+            }\n+            this.loc = Objects.requireNonNull(loc);\n+        }\n+\n@@ -98,1 +113,2 @@\n-    private static final class ResourceNode extends Node {\n+    \/\/ Visible for testing only.\n+    static final class ResourceNode extends Node {\n@@ -105,14 +121,23 @@\n-    private static class PackageNode extends Node {\n-        \/**\n-         * A reference to a package. Empty packages can be located inside one or\n-         * more modules. A package with classes exist in only one module.\n-         *\/\n-        static final class PackageReference {\n-\n-            private final String name;\n-            private final boolean isEmpty;\n-\n-            PackageReference(String name, boolean isEmpty) {\n-                this.name = Objects.requireNonNull(name);\n-                this.isEmpty = isEmpty;\n-            }\n+    \/**\n+     * A 2nd level package directory, {@code \"\/packages\/<package-name>\"}.\n+     *\n+     * <p>While package paths can exist within many modules, for each package\n+     * there is at most one module in which that package has resources.\n+     *\n+     * <p>For example, the package path {@code java\/util} exists in both the\n+     * {@code java.base} and {@code java.logging} modules. This means both\n+     * {@code \"\/packages\/java.util\/java.base\"} and\n+     * {@code \"\/packages\/java.util\/java.logging\"} will exist, but only\n+     * {@code \"java.base\"} entry will be marked as having content.\n+     *\n+     * <p>When processing module references in non-preview mode, entries marked\n+     * as {@link ModuleReference#isPreviewOnly() preview-only} must be ignored.\n+     *\n+     * <p>If all entries in a package are preview-only, then the package's flags\n+     * have {@link ImageLocation#FLAGS_IS_PREVIEW_ONLY FLAGS_IS_PREVIEW_ONLY}\n+     * set, and the entire package must be ignored.\n+     *\/\n+    \/\/ Visible for testing only.\n+    static final class PackageNode extends Node {\n+        private final List<ModuleReference> moduleReferences;\n+        private final int packageFlags;\n@@ -120,4 +145,4 @@\n-            @Override\n-            public String toString() {\n-                return name + \"[empty:\" + isEmpty + \"]\";\n-            }\n+        PackageNode(String name, List<ModuleReference> moduleReferences, Node parent) {\n+            super(name, parent);\n+            this.moduleReferences = Collections.unmodifiableList(moduleReferences);\n+            this.packageFlags = validate();\n@@ -126,4 +151,2 @@\n-        private final Map<String, PackageReference> references = new TreeMap<>();\n-\n-        PackageNode(String name, Node parent) {\n-            super(name, parent);\n+        List<ModuleReference> getModuleReferences() {\n+            return moduleReferences;\n@@ -132,4 +155,3 @@\n-        private void addReference(String name, boolean isEmpty) {\n-            PackageReference ref = references.get(name);\n-            if (ref == null || ref.isEmpty) {\n-                references.put(name, new PackageReference(name, isEmpty));\n+        private int validate() {\n+            if (moduleReferences.isEmpty()) {\n+                throw new IllegalStateException(\"Package must be associated with modules: \" + getName());\n@@ -137,0 +159,10 @@\n+            if (moduleReferences.stream().filter(ModuleReference::hasContent).count() > 1) {\n+                throw new IllegalStateException(\"Multiple modules contain non-empty package: \" + getName());\n+            }\n+            \/\/ Calculate the package's ImageLocation flags.\n+            boolean hasPreviewVersion =\n+                    moduleReferences.stream().anyMatch(ModuleReference::hasPreviewVersion);\n+            boolean isPreviewOnly =\n+                    moduleReferences.stream().allMatch(ModuleReference::isPreviewOnly);\n+            return (hasPreviewVersion ? ImageLocation.FLAGS_HAS_PREVIEW_VERSION : 0)\n+                    | (isPreviewOnly ? ImageLocation.FLAGS_IS_PREVIEW_ONLY : 0);\n@@ -138,0 +170,1 @@\n+    }\n@@ -139,12 +172,5 @@\n-        private void validate() {\n-            boolean exists = false;\n-            for (PackageReference ref : references.values()) {\n-                if (!ref.isEmpty) {\n-                    if (exists) {\n-                        throw new RuntimeException(\"Multiple modules to contain package \"\n-                                + getName());\n-                    } else {\n-                        exists = true;\n-                    }\n-                }\n-            }\n+    \/\/ Not serialized, and never stored in any field of any class that is.\n+    @SuppressWarnings(\"serial\")\n+    private static final class InvalidTreeException extends Exception {\n+        public InvalidTreeException(Node badNode) {\n+            super(\"Resources tree, invalid data structure, skipping: \" + badNode.getPath());\n@@ -152,0 +178,3 @@\n+        \/\/ Exception only used for program flow, not debugging.\n+        @Override\n+        public Throwable fillInStackTrace() {return this;}\n@@ -157,1 +186,3 @@\n-    private static final class Tree {\n+    \/\/ Visible for testing only.\n+    static final class Tree {\n+        private static final String PREVIEW_PREFIX = \"META-INF\/preview\/\";\n@@ -162,2 +193,1 @@\n-        private Node modules;\n-        private Node packages;\n+        private Node packagesRoot;\n@@ -165,2 +195,4 @@\n-        private Tree(List<String> paths) {\n-            this.paths = paths;\n+        \/\/ Visible for testing only.\n+        Tree(List<String> paths) {\n+            this.paths = paths.stream().sorted(Comparator.reverseOrder()).toList();\n+            \/\/ Root node is not added to the directAccess map.\n@@ -172,21 +204,15 @@\n-            modules = new Node(\"modules\", root);\n-            directAccess.put(modules.getPath(), modules);\n-\n-            Map<String, Set<String>> moduleToPackage = new TreeMap<>();\n-            Map<String, Set<String>> packageToModule = new TreeMap<>();\n-\n-            for (String p : paths) {\n-                if (!p.startsWith(\"\/\")) {\n-                    continue;\n-                }\n-                String[] split = p.split(\"\/\");\n-                \/\/ minimum length is 3 items: \/<mod>\/<pkg>\n-                if (split.length < 3) {\n-                    System.err.println(\"Resources tree, invalid data structure, \"\n-                            + \"skipping \" + p);\n-                    continue;\n-                }\n-                Node current = modules;\n-                String module = null;\n-                for (int i = 0; i < split.length; i++) {\n-                    \/\/ When a non terminal node is marked as being a resource, something is wrong.\n+            Node modulesRoot = new Node(\"modules\", root);\n+            directAccess.put(modulesRoot.getPath(), modulesRoot);\n+            packagesRoot = new Node(\"packages\", root);\n+            directAccess.put(packagesRoot.getPath(), packagesRoot);\n+\n+            \/\/ Map of dot-separated package names to module references (those\n+            \/\/ in which the package appear). References are merged after to\n+            \/\/ ensure each module name appears only once, but temporarily a\n+            \/\/ module may have several entries per package (e.g. with-content,\n+            \/\/ without-content, normal, preview-only etc..).\n+            Map<String, Set<ModuleReference>> packageToModules = new TreeMap<>();\n+            for (String fullPath : paths) {\n+                try {\n+                    processPath(fullPath, modulesRoot, packageToModules);\n+                } catch (InvalidTreeException err) {\n@@ -194,54 +220,2 @@\n-                    \/\/ invalid directory entry marled as not directory (see 8131762)\n-                    if (current instanceof ResourceNode) {\n-                        System.err.println(\"Resources tree, invalid data structure, \"\n-                                + \"skipping \" + p);\n-                        continue;\n-                    }\n-                    String s = split[i];\n-                    if (!s.isEmpty()) {\n-                        \/\/ First item, this is the module, simply add a new node to the\n-                        \/\/ tree.\n-                        if (module == null) {\n-                            module = s;\n-                        }\n-                        Node n = current.children.get(s);\n-                        if (n == null) {\n-                            if (i == split.length - 1) { \/\/ Leaf\n-                                n = new ResourceNode(s, current);\n-                                String pkg = toPackageName(n.parent);\n-                                \/\/System.err.println(\"Adding a resource node. pkg \" + pkg + \", name \" + s);\n-                                if (pkg != null && !pkg.startsWith(\"META-INF\")) {\n-                                    Set<String> pkgs = moduleToPackage.get(module);\n-                                    if (pkgs == null) {\n-                                        pkgs = new TreeSet<>();\n-                                        moduleToPackage.put(module, pkgs);\n-                                    }\n-                                    pkgs.add(pkg);\n-                                }\n-                            } else { \/\/ put only sub trees, no leaf\n-                                n = new Node(s, current);\n-                                directAccess.put(n.getPath(), n);\n-                                String pkg = toPackageName(n);\n-                                if (pkg != null && !pkg.startsWith(\"META-INF\")) {\n-                                    Set<String> mods = packageToModule.get(pkg);\n-                                    if (mods == null) {\n-                                        mods = new TreeSet<>();\n-                                        packageToModule.put(pkg, mods);\n-                                    }\n-                                    mods.add(module);\n-                                }\n-                            }\n-                        }\n-                        current = n;\n-                    }\n-                }\n-            }\n-            packages = new Node(\"packages\", root);\n-            directAccess.put(packages.getPath(), packages);\n-            \/\/ The subset of package nodes that have some content.\n-            \/\/ These packages exist only in a single module.\n-            for (Map.Entry<String, Set<String>> entry : moduleToPackage.entrySet()) {\n-                for (String pkg : entry.getValue()) {\n-                    PackageNode pkgNode = new PackageNode(pkg, packages);\n-                    pkgNode.addReference(entry.getKey(), false);\n-                    directAccess.put(pkgNode.getPath(), pkgNode);\n+                    \/\/ invalid directory entry marked as not directory (see 8131762).\n+                    System.err.println(err.getMessage());\n@@ -251,10 +225,13 @@\n-            \/\/ All packages\n-            for (Map.Entry<String, Set<String>> entry : packageToModule.entrySet()) {\n-                \/\/ Do we already have a package node?\n-                PackageNode pkgNode = (PackageNode) packages.getChildren(entry.getKey());\n-                if (pkgNode == null) {\n-                    pkgNode = new PackageNode(entry.getKey(), packages);\n-                }\n-                for (String module : entry.getValue()) {\n-                    pkgNode.addReference(module, true);\n-                }\n+            \/\/ We've collected information for all \"packages\", including the root\n+            \/\/ (empty) package and anything under \"META-INF\". However, these should\n+            \/\/ not have entries in the \"\/packages\" directory.\n+            packageToModules.keySet().removeIf(p -> p.isEmpty() || p.equals(\"META-INF\") || p.startsWith(\"META-INF.\"));\n+            packageToModules.forEach((pkgName, modRefs) -> {\n+                \/\/ Merge multiple refs for the same module.\n+                List<ModuleReference> pkgModules = modRefs.stream()\n+                        .collect(Collectors.groupingBy(ModuleReference::name))\n+                        .values().stream()\n+                        .map(refs -> refs.stream().reduce(ModuleReference::merge).orElseThrow())\n+                        .sorted()\n+                        .toList();\n+                PackageNode pkgNode = new PackageNode(pkgName, pkgModules, packagesRoot);\n@@ -262,0 +239,16 @@\n+            });\n+        }\n+\n+        private void processPath(\n+                String fullPath,\n+                Node modulesRoot,\n+                Map<String, Set<ModuleReference>> packageToModules)\n+                throws InvalidTreeException {\n+            \/\/ Paths are untrusted, so be careful about checking expected format.\n+            if (!fullPath.startsWith(\"\/\") || fullPath.endsWith(\"\/\") || fullPath.contains(\"\/\/\")) {\n+                return;\n+            }\n+            int modEnd = fullPath.indexOf('\/', 1);\n+            \/\/ Ensure non-empty module name with non-empty suffix.\n+            if (modEnd <= 1) {\n+                return;\n@@ -263,3 +256,11 @@\n-            \/\/ Validate that the packages are well formed.\n-            for (Node n : packages.children.values()) {\n-                ((PackageNode)n).validate();\n+            String modName = fullPath.substring(1, modEnd);\n+            String pkgPath = fullPath.substring(modEnd + 1);\n+\n+            Node parentNode = getDirectoryNode(modName, modulesRoot);\n+            boolean isPreviewPath = false;\n+            if (pkgPath.startsWith(PREVIEW_PREFIX)) {\n+                \/\/ For preview paths, process nodes relative to the preview directory.\n+                pkgPath = pkgPath.substring(PREVIEW_PREFIX.length());\n+                Node metaInf = getDirectoryNode(\"META-INF\", parentNode);\n+                parentNode = getDirectoryNode(\"preview\", metaInf);\n+                isPreviewPath = true;\n@@ -268,0 +269,26 @@\n+            int pathEnd = pkgPath.lastIndexOf('\/');\n+            \/\/ From invariants tested above, this must now be well-formed.\n+            String fullPkgName = (pathEnd == -1) ? \"\" : pkgPath.substring(0, pathEnd).replace('\/', '.');\n+            String resourceName = pkgPath.substring(pathEnd + 1);\n+            \/\/ Intermediate packages are marked \"empty\" (no resources). This might\n+            \/\/ later be merged with a non-empty reference for the same package.\n+            ModuleReference emptyRef = ModuleReference.forEmptyPackage(modName, isPreviewPath);\n+\n+            \/\/ Work down through empty packages to final resource.\n+            for (int i = pkgEndIndex(fullPkgName, 0); i != -1; i = pkgEndIndex(fullPkgName, i)) {\n+                \/\/ Due to invariants already checked, pkgName is non-empty.\n+                String pkgName = fullPkgName.substring(0, i);\n+                packageToModules.computeIfAbsent(pkgName, p -> new HashSet<>()).add(emptyRef);\n+                String childNodeName = pkgName.substring(pkgName.lastIndexOf('.') + 1);\n+                parentNode = getDirectoryNode(childNodeName, parentNode);\n+            }\n+            \/\/ Reached non-empty (leaf) package (could still be a duplicate).\n+            Node resourceNode = parentNode.getChildren(resourceName);\n+            if (resourceNode == null) {\n+                ModuleReference resourceRef = ModuleReference.forResource(modName, isPreviewPath);\n+                packageToModules.computeIfAbsent(fullPkgName, p -> new HashSet<>()).add(resourceRef);\n+                \/\/ Init adds new node to parent (don't add resources to directAccess).\n+                new ResourceNode(resourceName, parentNode);\n+            } else if (!(resourceNode instanceof ResourceNode)) {\n+                throw new InvalidTreeException(resourceNode);\n+            }\n@@ -270,3 +297,8 @@\n-        public String toResourceName(Node node) {\n-            if (!node.children.isEmpty()) {\n-                throw new RuntimeException(\"Node is not a resource\");\n+        private Node getDirectoryNode(String name, Node parent) throws InvalidTreeException {\n+            Node child = parent.getChildren(name);\n+            if (child == null) {\n+                \/\/ Adds child to parent during init.\n+                child = new Node(name, parent);\n+                directAccess.put(child.getPath(), child);\n+            } else if (child instanceof ResourceNode) {\n+                throw new InvalidTreeException(child);\n@@ -274,1 +306,1 @@\n-            return removeRadical(node);\n+            return child;\n@@ -277,13 +309,5 @@\n-        public String getModule(Node node) {\n-            if (node.parent == null || node.getName().equals(\"modules\")\n-                    || node.getName().startsWith(\"packages\")) {\n-                return null;\n-            }\n-            String path = removeRadical(node);\n-            \/\/ \"\/xxx\/...\";\n-            path = path.substring(1);\n-            int i = path.indexOf(\"\/\");\n-            if (i == -1) {\n-                return path;\n-            } else {\n-                return path.substring(0, i);\n+        \/\/ Helper to iterate package names up to, and including, the complete name.\n+        private int pkgEndIndex(String s, int i) {\n+            if (i >= 0 && i < s.length()) {\n+                i = s.indexOf('.', i + 1);\n+                return i != -1 ? i : s.length();\n@@ -291,0 +315,1 @@\n+            return -1;\n@@ -293,8 +318,3 @@\n-        public String toPackageName(Node node) {\n-            if (node.parent == null) {\n-                return null;\n-            }\n-            String path = removeRadical(node.getPath(), \"\/modules\/\");\n-            String module = getModule(node);\n-            if (path.equals(module)) {\n-                return null;\n+        private String toResourceName(Node node) {\n+            if (!node.children.isEmpty()) {\n+                throw new RuntimeException(\"Node is not a resource\");\n@@ -302,2 +322,1 @@\n-            String pkg = removeRadical(path, module + \"\/\");\n-            return pkg.replace('\/', '.');\n+            return removeRadical(node);\n@@ -306,1 +325,1 @@\n-        public String removeRadical(Node node) {\n+        private String removeRadical(Node node) {\n@@ -342,0 +361,1 @@\n+                \/\/ \"\/packages\/<pkg name>\" entries have 8-byte entries (flags+offset).\n@@ -343,2 +363,2 @@\n-                int size = pkgNode.references.size() * 8;\n-                writer.addLocation(current.getPath(), offset, 0, size);\n+                int size = pkgNode.getModuleReferences().size() * 8;\n+                writer.addLocation(current.getPath(), offset, 0, size, pkgNode.packageFlags);\n@@ -354,0 +374,3 @@\n+                    int locFlags = ImageLocation.getFlags(\n+                            current.getPath(), tree.directAccess::containsKey);\n+                    \/\/ Normal directory entries have 4-byte entries (offset only).\n@@ -355,1 +378,1 @@\n-                    writer.addLocation(current.getPath(), offset, 0, size);\n+                    writer.addLocation(current.getPath(), offset, 0, size, locFlags);\n@@ -372,1 +395,1 @@\n-                    item.loc = entry.getValue();\n+                    item.setLocation(entry.getValue());\n@@ -381,1 +404,1 @@\n-                \/\/ \/packages\/<pkg name>\n+                \/\/ \"\/packages\/<pkg name>\" entries have 8-byte entries (flags+offset).\n@@ -383,10 +406,7 @@\n-                int size = pkgNode.references.size() * 8;\n-                ByteBuffer buff = ByteBuffer.allocate(size);\n-                buff.order(writer.getByteOrder());\n-                for (PackageNode.PackageReference mod : pkgNode.references.values()) {\n-                    buff.putInt(mod.isEmpty ? 1 : 0);\n-                    buff.putInt(writer.addString(mod.name));\n-                }\n-                byte[] arr = buff.array();\n-                content.add(arr);\n-                current.loc = outLocations.get(current.getPath());\n+\n+                List<ModuleReference> refs = pkgNode.getModuleReferences();\n+                ByteBuffer byteBuffer = ByteBuffer.allocate(8 * refs.size());\n+                byteBuffer.order(writer.getByteOrder());\n+                ModuleReference.write(refs, byteBuffer.asIntBuffer(), writer::addString);\n+                content.add(byteBuffer.array());\n+                current.setLocation(outLocations.get(current.getPath()));\n@@ -413,1 +433,1 @@\n-                        current.loc = outLocations.get(s);\n+                        current.setLocation(outLocations.get(s));\n@@ -416,1 +436,1 @@\n-                        current.loc = outLocations.get(current.getPath());\n+                        current.setLocation(outLocations.get(current.getPath()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageResourcesTree.java","additions":201,"deletions":181,"binary":false,"changes":382,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -46,0 +47,1 @@\n+import static java.util.stream.Collectors.toSet;\n@@ -66,1 +68,1 @@\n- * @run junit\/othervm ImageReaderTest\n+ * @run junit\/othervm -esa -DDISABLE_PREVIEW_PATCHING=false ImageReaderTest\n@@ -73,1 +75,2 @@\n-\n+    \/\/ The '@' prefix marks the entry as a preview entry which will be placed in\n+    \/\/ the '\/modules\/<module>\/META-INF\/preview\/...' namespace.\n@@ -76,3 +79,7 @@\n-                    \"com.foo.Alpha\",\n-                    \"com.foo.Beta\",\n-                    \"com.foo.bar.Gamma\"),\n+                    \"com.foo.HasPreviewVersion\",\n+                    \"com.foo.NormalFoo\",\n+                    \"com.foo.bar.NormalBar\",\n+                    \/\/ Replaces original class in preview mode.\n+                    \"@com.foo.HasPreviewVersion\",\n+                    \/\/ New class in existing package in preview mode.\n+                    \"@com.foo.bar.IsPreviewOnly\"),\n@@ -81,1 +88,7 @@\n-                    \"com.bar.Two\"));\n+                    \"com.bar.Two\",\n+                    \/\/ Two new packages in preview mode (new symbolic links).\n+                    \"@com.bar.preview.stuff.Foo\",\n+                    \"@com.bar.preview.stuff.Bar\"),\n+            \"modgus\", Arrays.asList(\n+                    \/\/ A second module with a preview-only empty package (preview).\n+                    \"@com.bar.preview.other.Gus\"));\n@@ -94,1 +107,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -109,1 +122,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -116,2 +129,2 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n-            assertNode(reader, \"\/modules\/modfoo\/com\/foo\/Alpha.class\");\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            assertNode(reader, \"\/modules\/modfoo\/com\/foo\/HasPreviewVersion.class\");\n@@ -121,3 +134,3 @@\n-            assertEquals(\"Class: com.foo.Alpha\", loader.loadAndGetToString(\"modfoo\", \"com.foo.Alpha\"));\n-            assertEquals(\"Class: com.foo.Beta\", loader.loadAndGetToString(\"modfoo\", \"com.foo.Beta\"));\n-            assertEquals(\"Class: com.foo.bar.Gamma\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.Gamma\"));\n+            assertEquals(\"Class: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n@@ -130,1 +143,1 @@\n-            \"modfoo:com\/foo\/Alpha.class\",\n+            \"modfoo:com\/foo\/HasPreviewVersion.class\",\n@@ -134,1 +147,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -150,1 +163,1 @@\n-            \"modbar:com\/foo\/Alpha.class\",\n+            \"modbar:com\/foo\/HasPreviewVersion.class\",\n@@ -155,1 +168,1 @@\n-            \"modules:modfoo\/com\/foo\/Alpha.class\",\n+            \"modules:modfoo\/com\/foo\/HasPreviewVersion.class\",\n@@ -158,1 +171,1 @@\n-            \"'':modfoo\/com\/foo\/Alpha.class\",\n+            \"'':modfoo\/com\/foo\/HasPreviewVersion.class\",\n@@ -161,1 +174,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -178,1 +191,1 @@\n-            \"modules\/modfoo\/com:foo\/Alpha.class\",\n+            \"modules\/modfoo\/com:foo\/HasPreviewVersion.class\",\n@@ -181,1 +194,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -189,1 +202,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -191,1 +204,1 @@\n-            Set<String> pkgNames = root.getChildNames().collect(Collectors.toSet());\n+            Set<String> pkgNames = root.getChildNames().collect(toSet());\n@@ -206,1 +219,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -214,0 +227,117 @@\n+    @Test\n+    public void testPreviewResources_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ No preview classes visible.\n+            assertEquals(\"Class: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n+\n+            \/\/ NormalBar exists but IsPreviewOnly doesn't.\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/NormalBar.class\");\n+            assertAbsent(reader, \"\/modules\/modfoo\/com\/foo\/bar\/IsPreviewOnly.class\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\", \"HasPreviewVersion.class\", \"NormalFoo.class\", \"bar\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\/bar\", \"NormalBar.class\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewResources_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ Preview version of classes either overwrite existing entries or are added to directories.\n+            assertEquals(\"Preview: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n+            assertEquals(\"Preview: com.foo.bar.IsPreviewOnly\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.IsPreviewOnly\"));\n+\n+            \/\/ Both NormalBar and IsPreviewOnly exist (direct lookup and as child nodes).\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/NormalBar.class\");\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/IsPreviewOnly.class\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\", \"HasPreviewVersion.class\", \"NormalFoo.class\", \"bar\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\/bar\", \"NormalBar.class\", \"IsPreviewOnly.class\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewOnlyPackages_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ No 'preview' package or anything inside it.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\/Foo.class\");\n+\n+            \/\/ And no package link.\n+            assertAbsent(reader, \"\/packages\/com.bar.preview\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewOnlyPackages_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ In preview mode 'preview' package exists with preview only content.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\", \"Foo.class\", \"Bar.class\");\n+            assertResource(reader, \"modbar\", \"com\/bar\/preview\/stuff\/Foo.class\");\n+\n+            \/\/ And package links exists.\n+            assertDirContents(reader, \"\/packages\/com.bar.preview\", \"modbar\", \"modgus\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewModeLinks_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            assertDirContents(reader, \"\/packages\/com.bar\", \"modbar\");\n+            \/\/ Missing symbolic link and directory when not in preview mode.\n+            assertAbsent(reader, \"\/packages\/com.bar.preview\");\n+            assertAbsent(reader, \"\/packages\/com.bar.preview.stuff\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewModeLinks_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            \/\/ In preview mode there is a new preview-only module visible.\n+            assertDirContents(reader, \"\/packages\/com.bar\", \"modbar\", \"modgus\");\n+            \/\/ And additional packages are present.\n+            assertDirContents(reader, \"\/packages\/com.bar.preview\", \"modbar\", \"modgus\");\n+            assertDirContents(reader, \"\/packages\/com.bar.preview.stuff\", \"modbar\");\n+            assertDirContents(reader, \"\/packages\/com.bar.preview.other\", \"modgus\");\n+            \/\/ And the preview-only content appears as we expect.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\", \"stuff\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\", \"Foo.class\", \"Bar.class\");\n+            \/\/ In both modules in which it was added.\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\/preview\", \"other\");\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\/preview\/other\", \"Gus.class\");\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {false, true})\n+    public void testPreviewEntriesAlwaysHidden(boolean previewMode) throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, previewMode ? PreviewMode.ENABLED : PreviewMode.DISABLED)) {\n+            \/\/ The META-INF directory exists, but does not contain the preview directory.\n+            Node dir = assertDir(reader, \"\/modules\/modfoo\/META-INF\");\n+            assertEquals(0, dir.getChildNames().filter(n -> n.endsWith(\"\/preview\")).count());\n+            \/\/ Neither the preview directory, nor anything in it, can be looked-up directly.\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\");\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\/com\/foo\");\n+            \/\/ HasPreviewVersion.class is a preview class in the test data, and thus appears in\n+            \/\/ two places in the jimage). Ensure the preview version is always hidden.\n+            String alphaPath = \"com\/foo\/HasPreviewVersion.class\";\n+            assertNode(reader, \"\/modules\/modfoo\/\" + alphaPath);\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\/\" + alphaPath);\n+        }\n+    }\n+\n@@ -226,0 +356,21 @@\n+    private static void assertDirContents(ImageReader reader, String name, String... expectedChildNames) throws IOException {\n+        Node dir = assertDir(reader, name);\n+        Set<String> localChildNames = dir.getChildNames()\n+                .peek(s -> assertTrue(s.startsWith(name + \"\/\")))\n+                .map(s -> s.substring(name.length() + 1))\n+                .collect(toSet());\n+        assertEquals(\n+                Set.of(expectedChildNames),\n+                localChildNames,\n+                String.format(\"Unexpected child names in directory '%s'\", name));\n+    }\n+\n+    private static void assertResource(ImageReader reader, String modName, String resPath) throws IOException {\n+        assertTrue(reader.containsResource(modName, resPath), \"Resource should exist: \" + modName + \"\/\" + resPath);\n+        Node resNode = reader.findResourceNode(modName, resPath);\n+        assertTrue(resNode.isResource(), \"Node should be a resource: \" + resNode.getName());\n+        String nodeName = \"\/modules\/\" + modName + \"\/\" + resPath;\n+        assertEquals(nodeName, resNode.getName());\n+        assertSame(resNode, reader.findNode(nodeName));\n+    }\n+\n@@ -228,1 +379,1 @@\n-        assertTrue(link.isLink(), \"Node was not a symbolic link: \" + name);\n+        assertTrue(link.isLink(), \"Node should be a symbolic link: \" + link.getName());\n@@ -253,0 +404,4 @@\n+                boolean isPreviewEntry = fqn.startsWith(\"@\");\n+                if (isPreviewEntry) {\n+                    fqn = fqn.substring(1);\n+                }\n@@ -256,2 +411,0 @@\n-\n-                String path = fqn.replace('.', '\/') + \".class\";\n@@ -263,1 +416,1 @@\n-                                return \"Class: %s\";\n+                                return \"%s: %s\";\n@@ -266,1 +419,2 @@\n-                        \"\"\", pkg, cls, fqn);\n+                        \"\"\", pkg, cls, isPreviewEntry ? \"Preview\" : \"Class\", fqn);\n+                String path = (isPreviewEntry ? \"META-INF\/preview\/\" : \"\") + fqn.replace('.', '\/') + \".class\";\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ImageReaderTest.java","additions":183,"deletions":29,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Whitebox tests for ImageResourcesTree.\n+ * @modules jdk.jlink\/jdk.tools.jlink.internal\n+ * @build jdk.jlink\/jdk.tools.jlink.internal.ImageResourcesTreeTest\n+ * @run junit\/othervm -ea -esa jdk.jlink\/jdk.tools.jlink.internal.ImageResourcesTreeTest\n+ *\/\n+public class ImageResourcesTreeTestDriver {}\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/ImageResourcesTreeTestDriver.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+modules = \\\n+    jdk.jlink\/jdk.tools.jlink.internal\n+bootclasspath.dirs=.\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/TEST.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal;\n+\n+import jdk.internal.jimage.ModuleReference;\n+import jdk.tools.jlink.internal.ImageResourcesTree.Node;\n+import jdk.tools.jlink.internal.ImageResourcesTree.PackageNode;\n+import jdk.tools.jlink.internal.ImageResourcesTree.ResourceNode;\n+import jdk.tools.jlink.internal.ImageResourcesTree.Tree;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class ImageResourcesTreeTest {\n+\n+    private static final String MODULES_PREFIX = \"\/modules\/\";\n+    private static final String PACKAGES_PREFIX = \"\/packages\/\";\n+\n+    @Test\n+    public void directoryNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        \/\/ All paths from the root (but not the root itself).\n+        assertTrue(nodes.containsKey(\"\/modules\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\/util\"));\n+        assertFalse(nodes.containsKey(\"\/\"));\n+\n+        \/\/ Check for mismatched modules.\n+        assertTrue(nodes.containsKey(\"\/modules\/java.logging\/java\/util\/logging\"));\n+        assertFalse(nodes.containsKey(\"\/modules\/java.base\/java\/util\/logging\"));\n+\n+        Set<String> dirPaths = nodes.keySet().stream()\n+                .filter(p -> p.startsWith(MODULES_PREFIX))\n+                .collect(Collectors.toSet());\n+        for (String path : dirPaths) {\n+            Node dir = nodes.get(path);\n+            assertFalse(dir instanceof ResourceNode, \"Unexpected resource: \" + dir);\n+            assertEquals(path, dir.getPath());\n+            assertTrue(path.endsWith(\"\/\" + dir.getName()), \"Unexpected directory name: \" + dir);\n+        }\n+    }\n+\n+    @Test\n+    public void resourceNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        \/\/ This map *does not* contain the resources, only the \"directory\" nodes.\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.base\/java\/util\"),\n+                \"SomeClass.class\", \"SomeOtherClass.class\", \"resource.txt\");\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.logging\/java\/util\/logging\"),\n+                \"LoggingClass.class\", \"OtherLoggingClass.class\");\n+    }\n+\n+    @Test\n+    public void expectedPackages() {\n+        \/\/ Paths are only to resources. Packages are inferred.\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        Node packages = nodes.get(\"\/packages\");\n+        List<String> pkgNames = nodes.keySet().stream()\n+                .filter(p -> p.startsWith(PACKAGES_PREFIX))\n+                .map(p -> p.substring(PACKAGES_PREFIX.length()))\n+                .sorted()\n+                .toList();\n+\n+        assertEquals(List.of(\"java\", \"java.util\", \"java.util.logging\"), pkgNames);\n+        for (String pkgName : pkgNames) {\n+            PackageNode pkgNode = assertInstanceOf(PackageNode.class, packages.getChildren(pkgName));\n+            assertSame(nodes.get(PACKAGES_PREFIX + pkgNode.getName()), pkgNode);\n+        }\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        PackageNode pkgUtil = getPackageNode(nodes, \"java.util\");\n+        List<ModuleReference> modRefs = pkgUtil.getModuleReferences();\n+        assertEquals(2, modRefs.size());\n+\n+        List<String> modNames = modRefs.stream().map(ModuleReference::name).toList();\n+        assertEquals(List.of(\"java.base\", \"java.logging\"), modNames);\n+\n+        \/\/ Ordered by name.\n+        assertNonEmptyRef(modRefs.get(0), \"java.base\");\n+        assertEmptyRef(modRefs.get(1), \"java.logging\");\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries_withPreviewResources() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/OtherClass.class\",\n+                \"\/java.base\/META-INF\/preview\/java\/util\/OtherClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        PackageNode pkgUtil = getPackageNode(nodes, \"java.util\");\n+        List<ModuleReference> modRefs = pkgUtil.getModuleReferences();\n+\n+        ModuleReference baseRef = modRefs.get(0);\n+        assertNonEmptyRef(baseRef, \"java.base\");\n+        assertTrue(baseRef.hasPreviewVersion());\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries_withPreviewOnlyPackages() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/META-INF\/preview\/java\/util\/preview\/only\/PreviewClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        \/\/ Preview only package (with content).\n+        PackageNode nonEmptyPkg = getPackageNode(nodes, \"java.util.preview.only\");\n+        ModuleReference nonEmptyRef = nonEmptyPkg.getModuleReferences().getFirst();\n+        assertNonEmptyPreviewOnlyRef(nonEmptyRef, \"java.base\");\n+\n+        \/\/ Preview only packages can be empty.\n+        PackageNode emptyPkg = getPackageNode(nodes, \"java.util.preview\");\n+        ModuleReference emptyRef = emptyPkg.getModuleReferences().getFirst();\n+        assertEmptyPreviewOnlyRef(emptyRef, \"java.base\");\n+    }\n+\n+    @Test\n+    public void expectedPackageOrder_sharedPackage() {\n+        \/\/ Resource in many modules define the same package (java.shared), but\n+        \/\/ this only has content in one module (java.content).\n+        \/\/ Order of test data is shuffled to show reordering in entry list.\n+        \/\/ \"java.moduleN\" would sort before after \"java.previewN\" if it were\n+        \/\/ only sorted by name, but preview entries come first.\n+        \/\/ Expect: preview{1..3) -> content -> module{1..3}\n+        List<String> paths = List.of(\n+                \/\/ Module with content in \"java.shared\".\n+                \"\/java.content\/java\/shared\/MainPackageClass.class\",\n+                \/\/ Other resources (in other modules) which implicitly define \"java.shared\".\n+                \"\/java.module3\/java\/shared\/three\/SomeClass.class\",\n+                \"\/java.module2\/java\/shared\/two\/SomeClass.class\",\n+                \"\/java.module1\/java\/shared\/one\/SomeClass.class\",\n+                \/\/ Preview resources in other modules which implicitly define \"java.shared\".\n+                \"\/java.preview3\/META-INF\/preview\/java\/shared\/baz\/SomeClass.class\",\n+                \"\/java.preview2\/META-INF\/preview\/java\/shared\/bar\/SomeClass.class\",\n+                \"\/java.preview1\/META-INF\/preview\/java\/shared\/foo\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        PackageNode sharedPkg = getPackageNode(nodes, \"java.shared\");\n+        List<ModuleReference> refs = sharedPkg.getModuleReferences();\n+\n+        \/\/ Preview packages first, by name.\n+        int n = 1;\n+        for (ModuleReference ref : refs.subList(0, 3)) {\n+            assertEmptyPreviewOnlyRef(ref, \"java.preview\" + (n++));\n+        }\n+        \/\/ The content package (simply due to its name).\n+        assertNonEmptyRef(refs.get(3), \"java.content\");\n+        \/\/ And the non-preview empty packages after.\n+        n = 1;\n+        for (ModuleReference ref : refs.subList(4, 7)) {\n+            assertEmptyRef(ref, \"java.module\" + (n++));\n+        }\n+    }\n+\n+    static PackageNode getPackageNode(Map<String, Node> nodes, String pkgName) {\n+        return assertInstanceOf(PackageNode.class, nodes.get(PACKAGES_PREFIX + pkgName));\n+    }\n+\n+    static void assertContainsResources(Node dirNode, String... resourceNames) {\n+        for (String name : resourceNames) {\n+            Node node = assertInstanceOf(ResourceNode.class, dirNode.getChildren(name));\n+            assertEquals(name, node.getName());\n+            assertEquals(dirNode.getPath() + \"\/\" + name, node.getPath());\n+        }\n+    }\n+\n+    static void assertNonEmptyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertTrue(ref.hasContent(), \"Expected non-empty reference: \" + ref);\n+        assertFalse(ref.isPreviewOnly(), \"Expected not preview-only: \" + ref);\n+    }\n+\n+    static void assertEmptyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertFalse(ref.hasContent(), \"Expected empty reference: \" + ref);\n+        assertFalse(ref.isPreviewOnly(), \"Expected not preview-only: \" + ref);\n+    }\n+\n+    static void assertNonEmptyPreviewOnlyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertTrue(ref.hasContent(), \"Expected empty reference: \" + ref);\n+        assertTrue(ref.isPreviewOnly(), \"Expected preview-only: \" + ref);\n+    }\n+\n+    static void assertEmptyPreviewOnlyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertFalse(ref.hasContent(), \"Expected empty reference: \" + ref);\n+        assertTrue(ref.isPreviewOnly(), \"Expected preview-only: \" + ref);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/jdk.jlink\/jdk\/tools\/jlink\/internal\/ImageResourcesTreeTest.java","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Param;\n@@ -47,0 +48,1 @@\n+import java.util.Map;\n@@ -49,0 +51,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -51,0 +55,3 @@\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.mapping;\n+import static java.util.stream.Collectors.toList;\n@@ -70,1 +77,1 @@\n-    \/\/\/ per-benchmark or a per-iteration state object. The subclasses provide\n+    \/\/\/ per-trial or a per-iteration state object. The subclasses provide\n@@ -87,0 +94,2 @@\n+    \/\/\/ A {@link Level#Trial per-trial} state which provides an image reader,\n+    \/\/\/ suitable for {@link Mode#AverageTime average time} benchmarks.\n@@ -88,1 +97,3 @@\n-    public static class WarmStartWithImageReader extends BaseState {\n+    public static class WarmStart extends BaseState {\n+        @Param({\"DISABLED\", \"ENABLED\"})\n+        PreviewMode previewMode;\n@@ -94,1 +105,1 @@\n-            reader = ImageReader.open(copiedImageFile, PreviewMode.DISABLED);\n+            reader = ImageReader.open(copiedImageFile, previewMode);\n@@ -103,0 +114,12 @@\n+    @State(Scope.Benchmark)\n+    public static class WarmStartWithCachedNodes extends WarmStart {\n+        @Setup(Level.Trial)\n+        public void setUp() throws IOException {\n+            super.setUp();\n+            countAllNodes(reader, reader.findNode(\"\/\"));\n+        }\n+    }\n+\n+    \/\/\/ A {@link Level#Iteration per-iteration} state suitable for\n+    \/\/\/ {@link Mode#SingleShotTime single shot} benchmarks. Unlike\n+    \/\/\/ {@link WarmStart}, this state does not provide a reader instance.\n@@ -105,0 +128,3 @@\n+        @Param({\"DISABLED\", \"ENABLED\"})\n+        PreviewMode previewMode;\n+\n@@ -117,1 +143,1 @@\n-    public static class ColdStartWithImageReader extends BaseState {\n+    public static class ColdStartWithImageReader extends ColdStart {\n@@ -123,1 +149,1 @@\n-            reader = ImageReader.open(copiedImageFile, PreviewMode.DISABLED);\n+            reader = ImageReader.open(copiedImageFile, previewMode);\n@@ -138,1 +164,1 @@\n-    public void warmCache_CountAllNodes(WarmStartWithImageReader state) throws IOException {\n+    public void warmStart_CountAllNodes(WarmStartWithCachedNodes state) throws IOException {\n@@ -142,0 +168,39 @@\n+    \/\/\/ Benchmarks {@link ImageReader#containsResource(String, String)} when no\n+    \/\/\/ nodes have been cached in the {@link ImageReader}. In non-preview mode,\n+    \/\/\/ this should be identical to the case where nodes are cached (because the\n+    \/\/\/ cache isn't used) but in preview mode, the cache will be tested for\n+    \/\/\/ preview resources, and thus differ depending on whether nodes are present.\n+    \/\/\/\n+    \/\/\/ This doesn't need to be a cold start because it never modifies the nodes\n+    \/\/\/ cache.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_ContainsResource_emptyNodeCache(WarmStart state) throws IOException {\n+        state.count = countContainsResource(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As above, but the nodes cache has been filled, giving preview mode a\n+    \/\/\/ different code path.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_ContainsResource_fullNodeCache(WarmStartWithCachedNodes state) throws IOException {\n+        state.count = countContainsResource(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As {@link #warmStart_ContainsResource_emptyNodeCache}, but tests\n+    \/\/\/ {@link ImageReader#findResourceNode(String, String)}.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_FindResourceNode_emptyNodeCache(WarmStart state) throws IOException {\n+        state.count = countFindResourceNode(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As {@link #warmStart_ContainsResource_fullNodeCache}, but tests\n+    \/\/\/ {@link ImageReader#findResourceNode(String, String)}.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_FindResourceNode_fullNodeCache(WarmStartWithCachedNodes state) throws IOException {\n+        state.count = countFindResourceNode(state.reader, ClassList.pathMap());\n+    }\n+\n+\n@@ -150,1 +215,1 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, PreviewMode.DISABLED)) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n@@ -155,1 +220,1 @@\n-    \/\/\/ As above, but includes the time to initialize the `ImageReader`.\n+    \/\/\/ As above, but excludes the time to initialize the `ImageReader`.\n@@ -174,2 +239,2 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, PreviewMode.DISABLED)) {\n-            for (String path : INIT_CLASSES) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n+            for (String path : ClassList.names()) {\n@@ -186,1 +251,1 @@\n-        state.count = INIT_CLASSES.size();\n+        state.count = ClassList.count();\n@@ -188,1 +253,1 @@\n-        if ((100 * errors) \/ INIT_CLASSES.size() >= 2) {\n+        if ((100 * errors) \/ ClassList.count() >= 2) {\n@@ -207,0 +272,27 @@\n+    static long countContainsResource(ImageReader reader, Map<String, List<String>> modToPaths)\n+            throws IOException {\n+        long count = 0;\n+        for (Map.Entry<String, List<String>> e : modToPaths.entrySet()) {\n+            String mod = e.getKey();\n+            for (String path : e.getValue()) {\n+                if (reader.containsResource(mod, path)) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n+    static long countFindResourceNode(ImageReader reader, Map<String, List<String>> modToPaths) throws IOException {\n+        long count = 0;\n+        for (Map.Entry<String, List<String>> e : modToPaths.entrySet()) {\n+            String mod = e.getKey();\n+            for (String path : e.getValue()) {\n+                if (reader.findResourceNode(mod, path) != null) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n@@ -211,2 +303,2 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, PreviewMode.DISABLED)) {\n-            for (String path : INIT_CLASSES) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n+            for (String path : ClassList.names()) {\n@@ -223,1 +315,1 @@\n-                        errors, INIT_CLASSES.size(), String.join(\"\\n\\t\", missing)));\n+                        errors, ClassList.count(), String.join(\"\\n\\t\", missing)));\n@@ -226,851 +318,884 @@\n-    \/\/ Note: This list is inherently a little fragile and may end up being more\n-    \/\/ trouble than it's worth to maintain. If it turns out that it needs to be\n-    \/\/ regenerated often when this benchmark is run, then a new approach should\n-    \/\/ be considered, such as:\n-    \/\/ * Limit the list of classes to non-internal ones.\n-    \/\/ * Calculate the list dynamically based on the running JVM.\n-    \/\/\n-    \/\/ Created by running \"java -verbose:class\", throwing away anonymous inner\n-    \/\/ classes and anything without a reliable name, and grouping by the stated\n-    \/\/ source. It's not perfect, but it's representative.\n-    \/\/\n-    \/\/ <jdk_root>\/bin\/java -verbose:class HelloWorld 2>&1 \\\n-    \/\/   | fgrep '[class,load]' | cut -d' ' -f2 \\\n-    \/\/   | tr '.' '\/' \\\n-    \/\/   | egrep -v '\\$[0-9$]' \\\n-    \/\/   | fgrep -v 'HelloWorld' \\\n-    \/\/   | fgrep -v '\/META-INF\/preview\/' \\\n-    \/\/   | while read f ; do echo \"${f}.class\" ; done \\\n-    \/\/   > initclasses.txt\n-    \/\/\n-    \/\/ Output:\n-    \/\/    java\/lang\/Object.class\n-    \/\/    java\/io\/Serializable.class\n-    \/\/    ...\n-    \/\/\n-    \/\/ jimage list <jdk_root>\/images\/jdk\/lib\/modules \\\n-    \/\/     | awk '\/^Module: *\/ { MOD=$2 }; \/^    *\/ { print \"\/modules\/\"MOD\"\/\"$1 }' \\\n-    \/\/     > fullpaths.txt\n-    \/\/\n-    \/\/ Output:\n-    \/\/     ...\n-    \/\/     \/modules\/java.base\/java\/lang\/Object.class\n-    \/\/     \/modules\/java.base\/java\/lang\/OutOfMemoryError.class\n-    \/\/     ...\n-    \/\/\n-    \/\/ while read c ; do grep \"\/$c\" fullpaths.txt ; done < initclasses.txt \\\n-    \/\/     | while read c ; do printf '    \"%s\",\\n' \"$c\" ; done \\\n-    \/\/     > initpaths.txt\n-    \/\/\n-    \/\/ Output:\n-    private static final Set<String> INIT_CLASSES = Set.of(\n-            \"\/modules\/java.base\/java\/lang\/Object.class\",\n-            \"\/modules\/java.base\/java\/io\/Serializable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Comparable.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharSequence.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/Constable.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ConstantDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/String.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AnnotatedElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/GenericDeclaration.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Type.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfField.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class.class\",\n-            \"\/modules\/java.base\/java\/lang\/Cloneable.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/System.class\",\n-            \"\/modules\/java.base\/java\/lang\/Throwable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Error.class\",\n-            \"\/modules\/java.base\/java\/lang\/Exception.class\",\n-            \"\/modules\/java.base\/java\/lang\/RuntimeException.class\",\n-            \"\/modules\/java.base\/java\/security\/ProtectionDomain.class\",\n-            \"\/modules\/java.base\/java\/security\/SecureClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/ReflectiveOperationException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassNotFoundException.class\",\n-            \"\/modules\/java.base\/java\/lang\/Record.class\",\n-            \"\/modules\/java.base\/java\/lang\/LinkageError.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoClassDefFoundError.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassCastException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArrayStoreException.class\",\n-            \"\/modules\/java.base\/java\/lang\/VirtualMachineError.class\",\n-            \"\/modules\/java.base\/java\/lang\/InternalError.class\",\n-            \"\/modules\/java.base\/java\/lang\/OutOfMemoryError.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackOverflowError.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalMonitorStateException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Reference.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalCallerException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/SoftReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/WeakReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/FinalReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/PhantomReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Finalizer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runnable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$FieldHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$Constants.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$UncaughtExceptionHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadGroup.class\",\n-            \"\/modules\/java.base\/java\/lang\/BaseVirtualThread.class\",\n-            \"\/modules\/java.base\/java\/lang\/VirtualThread.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadBuilders$BoundVirtualThread.class\",\n-            \"\/modules\/java.base\/java\/util\/Map.class\",\n-            \"\/modules\/java.base\/java\/util\/Dictionary.class\",\n-            \"\/modules\/java.base\/java\/util\/Hashtable.class\",\n-            \"\/modules\/java.base\/java\/util\/Properties.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessibleObject.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Member.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Field.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Parameter.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Executable.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Method.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Constructor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationScope.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/StackChunk.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessorImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/annotation\/Annotation.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/CallerSensitive.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessorImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MemberName.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ResolvedMethodName.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleNatives.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfMethod.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodType.class\",\n-            \"\/modules\/java.base\/java\/lang\/BootstrapMethodError.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/CallSite.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/ABIDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/VMStorage.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/UpcallLinker$CallRegs.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ConstantCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MutableCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VolatileCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/AssertionStatusDirectives.class\",\n-            \"\/modules\/java.base\/java\/lang\/Appendable.class\",\n-            \"\/modules\/java.base\/java\/lang\/AbstractStringBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringBuffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/UnsafeConstants.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Unsafe.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/Modules.class\",\n-            \"\/modules\/java.base\/java\/lang\/AutoCloseable.class\",\n-            \"\/modules\/java.base\/java\/io\/Closeable.class\",\n-            \"\/modules\/java.base\/java\/io\/InputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/ByteArrayInputStream.class\",\n-            \"\/modules\/java.base\/java\/net\/URL.class\",\n-            \"\/modules\/java.base\/java\/lang\/Enum.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/Manifest.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$AppClassLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$PlatformClassLoader.class\",\n-            \"\/modules\/java.base\/java\/security\/CodeSource.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentMap.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractMap.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/Iterable.class\",\n-            \"\/modules\/java.base\/java\/util\/Collection.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/List.class\",\n-            \"\/modules\/java.base\/java\/util\/RandomAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractList.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayList.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackTraceElement.class\",\n-            \"\/modules\/java.base\/java\/nio\/Buffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackWalker.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackStreamFactory$AbstractStackWalker.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackWalker$StackFrame.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/LiveStackFrame.class\",\n-            \"\/modules\/java.base\/java\/lang\/LiveStackFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractOwnableSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Boolean.class\",\n-            \"\/modules\/java.base\/java\/lang\/Character.class\",\n-            \"\/modules\/java.base\/java\/lang\/Number.class\",\n-            \"\/modules\/java.base\/java\/lang\/Float.class\",\n-            \"\/modules\/java.base\/java\/lang\/Double.class\",\n-            \"\/modules\/java.base\/java\/lang\/Byte.class\",\n-            \"\/modules\/java.base\/java\/lang\/Short.class\",\n-            \"\/modules\/java.base\/java\/lang\/Integer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Long.class\",\n-            \"\/modules\/java.base\/java\/lang\/Void.class\",\n-            \"\/modules\/java.base\/java\/util\/Iterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/RecordComponent.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$Vector.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorMask.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/FillerObject.class\",\n-            \"\/modules\/java.base\/java\/lang\/NullPointerException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArithmeticException.class\",\n-            \"\/modules\/java.base\/java\/lang\/IndexOutOfBoundsException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArrayIndexOutOfBoundsException.class\",\n-            \"\/modules\/java.base\/java\/io\/ObjectStreamField.class\",\n-            \"\/modules\/java.base\/java\/util\/Comparator.class\",\n-            \"\/modules\/java.base\/java\/lang\/String$CaseInsensitiveComparator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/VM.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module$ArchivedData.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/CDS.class\",\n-            \"\/modules\/java.base\/java\/util\/Set.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableSet.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$Set12.class\",\n-            \"\/modules\/java.base\/java\/util\/Objects.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableList.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListN.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableMap.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangReflectAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/ReflectAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/SharedSecrets.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory.class\",\n-            \"\/modules\/java.base\/java\/io\/ObjectStreamClass.class\",\n-            \"\/modules\/java.base\/java\/lang\/Math.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory$Config.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangRefAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Null.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Lock.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps$Raw.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/Charset.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/spi\/CharsetProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/StandardCharsets.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringLatin1.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/HistoricallyNamedCharset.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/Unicode.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/StrictMath.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ArraysSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/Map$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$Node.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$TreeNode.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringConcatHelper.class\",\n-            \"\/modules\/java.base\/java\/lang\/VersionProps.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runtime.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/Lock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Segment.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CounterCell.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Node.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/LockSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ReservationNode.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractSet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$EntrySet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$HashIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$EntryIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/StaticProperty.class\",\n-            \"\/modules\/java.base\/java\/io\/FileInputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/System$In.class\",\n-            \"\/modules\/java.base\/java\/io\/FileDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaIOFileDescriptorAccess.class\",\n-            \"\/modules\/java.base\/java\/io\/Flushable.class\",\n-            \"\/modules\/java.base\/java\/io\/OutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/FileOutputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/System$Out.class\",\n-            \"\/modules\/java.base\/java\/io\/FilterInputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedInputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/FilterOutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/PrintStream.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedOutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/Writer.class\",\n-            \"\/modules\/java.base\/java\/io\/OutputStreamWriter.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/StreamEncoder.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CharsetEncoder.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8$Encoder.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CodingErrorAction.class\",\n-            \"\/modules\/java.base\/java\/util\/Arrays.class\",\n-            \"\/modules\/java.base\/java\/nio\/ByteBuffer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/ScopedMemoryAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Function.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/Preconditions.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BiFunction.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNioAccess.class\",\n-            \"\/modules\/java.base\/java\/nio\/HeapByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/PreviewMode.DISABLED.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedWriter.class\",\n-            \"\/modules\/java.base\/java\/lang\/Terminator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$Handler.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal.class\",\n-            \"\/modules\/java.base\/java\/util\/Hashtable$Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$NativeHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/Integer$IntegerCache.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/OSEnvironment.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$State.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Reference$ReferenceHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$ThreadIdentifiers.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Finalizer$FinalizerThread.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/Cleaner.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptySet.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyList.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalArgumentException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleStatics.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/ClassFileFormatVersion.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharacterData.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharacterDataLatin1.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ClassFileDumper.class\",\n-            \"\/modules\/java.base\/java\/util\/HexFormat.class\",\n-            \"\/modules\/java.base\/java\/lang\/Character$CharacterCache.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicInteger.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MemberName$Factory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/Reflection.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN$MapNIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/KeyValueHolder.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/VerifyAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Modifier.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangModuleAccess.class\",\n-            \"\/modules\/java.base\/java\/io\/File.class\",\n-            \"\/modules\/java.base\/java\/io\/DefaultFileSystem.class\",\n-            \"\/modules\/java.base\/java\/io\/FileSystem.class\",\n-            \"\/modules\/java.base\/java\/io\/UnixFileSystem.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/DecimalDigits.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModulePatcher.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$IllegalNativeAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/HashSet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Modules.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$Counters.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedBootLayer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedModuleGraph.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModuleFinders.class\",\n-            \"\/modules\/java.base\/java\/net\/URI.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetUriAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModulesMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModules.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ExplodedSystemModules.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Watchable.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Path.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/FileSystems.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/DefaultFileSystemProvider.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/spi\/FileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/AbstractFileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystemProvider.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/OpenOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/StandardOpenOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/FileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixPath.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/Util.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringCoding.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixNativeDispatcher.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BootLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module$EnableNativeAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderHelper.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CollectionView.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$KeySetView.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$LibraryPaths.class\",\n-            \"\/modules\/java.base\/java\/io\/File$PathStatus.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$CountedLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$Sync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryContext.class\",\n-            \"\/modules\/java.base\/java\/util\/Queue.class\",\n-            \"\/modules\/java.base\/java\/util\/Deque.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayDeque.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayDeque$DeqIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibrary.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryImpl.class\",\n-            \"\/modules\/java.base\/java\/security\/cert\/Certificate.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValuesView.class\",\n-            \"\/modules\/java.base\/java\/util\/Enumeration.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Traverser.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$BaseIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValueIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/PosixFileAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileStoreAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixMountEntry.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/CopyOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/LinkOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Files.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffers.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/CarrierThreadLocal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/TerminatingThreadLocal.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$SetFromMap.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeySet.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerFactory.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ThreadFactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Cleaner.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList$Node.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Cleaner$Cleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/PhantomCleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanerCleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/InnocuousThread.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer$Deallocator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$PhantomCleanableRef.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleFinder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModulePath.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/Attributes$Name.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Array.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/perf\/PerfCounter.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/perf\/Perf.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/DirectBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/MappedByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/DirectByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/Bits.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicLong.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/VM$BufferPool.class\",\n-            \"\/modules\/java.base\/java\/nio\/LongBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/DirectLongBufferU.class\",\n-            \"\/modules\/java.base\/java\/util\/zip\/ZipConstants.class\",\n-            \"\/modules\/java.base\/java\/util\/zip\/ZipFile.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/JarFile.class\",\n-            \"\/modules\/java.base\/java\/util\/BitSet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilZipFileAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilJarAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/JavaUtilJarAccessImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runtime$Version.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$List12.class\",\n-            \"\/modules\/java.base\/java\/util\/Optional.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/AttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/UserDefinedFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/DynamicFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/AbstractBasicFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews$Basic.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes$UnixAsBasicFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream$Filter.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Files$AcceptAllFilter.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/SecureDirectoryStream.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixSecureDirectoryStream.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReadWriteLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$FairSync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$WriteLock.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream$UnixDirectoryIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttribute.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileModeAttribute.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory$Flags.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/Channel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ReadableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/WritableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SeekableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/GatheringByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ScatteringByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/InterruptibleChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractInterruptibleChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/FileChannel.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeDispatcher.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcher.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/UnixFileDispatcherImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcherImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/IOUtil.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Interruptible.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeThreadSet.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl$Closer.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/Channels.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Streams.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/SelChImpl.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/NetworkChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SelectableChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractSelectableChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SocketChannel.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/SocketChannelImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/ChannelInputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Supplier.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeySet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeyMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferenceKey.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/StrongReferenceKey.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodTypeForm.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/WeakReferenceKey.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper$Format.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ConstantDescs.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ClassDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ClassOrInterfaceDescImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ArrayClassDescImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ConstantUtils.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/MethodTypeDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/MethodTypeDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/MethodHandleDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/DirectMethodHandleDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/PrimitiveClassDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc$AnonymousDynamicConstantDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$NamedFunction.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Holder.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/ValueConversions.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/Invokers.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchMethodException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$BasicType.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/TypeKind.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Name.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Holder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AnnotationElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Annotation.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/PoolEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/Utf8Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl$State.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Attribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/MethodElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/FieldElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util$Writable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractElement.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundRuntimeVisibleAnnotationsAttribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Attributes.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$RuntimeVisibleAnnotationsMapper.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper$AttributeStability.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl$Intrinsic.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SplitConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/BootstrapMethodEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/EntryMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ClassEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractNamedEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$ClassEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Consumer.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFile.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassFileImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AttributeHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Superclass.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SuperclassImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/SourceFileAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundSourceFileAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$SourceFileMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BoundAttribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/MethodBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/MethodInfo.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefsEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$NameAndTypeEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MemberRefEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/FieldRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractMemberRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$FieldRefEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator$ClassData.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CodeBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelContext.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CodeElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/PseudoInstruction.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/CharacterRange.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariable.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariableType.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder$DeferredLabel.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/BufWriter.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BufWriterImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Label.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LabelTarget.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelImpl.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/VerifyType.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Opcode.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Opcode$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MethodRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$MethodRefEntryImpl.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/empty\/Empty.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$AdHocAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$CodeMapper.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/FieldBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CustomAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationReader.class\",\n-            \"\/modules\/java.base\/java\/util\/ListIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListItr.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Frame.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Type.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper$CodeRange.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassLoadingClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$CachedClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver$ClassHierarchyInfo.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassHierarchyInfoImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassReader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ModifiedUtf.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup$ClassDefiner.class\",\n-            \"\/modules\/java.base\/java\/lang\/IncompatibleClassChangeError.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchMethodError.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BootstrapMethodInvoker.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InnerClassLambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InfoFromMemberName.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$Access.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilCollectionAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Interfaces.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/InterfacesImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeConvertingMethodAdapter.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Constructor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangInvokeAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessMode.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessType.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/Invokers$Holder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo.class\",\n-            \"\/modules\/java.base\/java\/io\/DataInput.class\",\n-            \"\/modules\/java.base\/java\/io\/DataInputStream.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$CountingDataInput.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeThread.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Blocker.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Util.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Util$BufferCache.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/IOStatus.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ByteArray.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandles.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleGuards.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarForm.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$IndexEntry.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/StandardCharsets.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/US_ASCII.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/ISO_8859_1.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16BE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16LE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32BE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32LE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$ValueEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Builder.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Modifier.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag$Location.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires$Modifier.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeySet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeyIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/Checks.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayList$Itr.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Provides.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableSet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$Values.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$ValueIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN$SetNIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$Attributes.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferences.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleReader.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixUriUtils.class\",\n-            \"\/modules\/java.base\/java\/net\/URI$Parser.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleReference.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferenceImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Exports.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Opens.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixException.class\",\n-            \"\/modules\/java.base\/java\/io\/IOException.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ArchivedClassLoaders.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$BootClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassLoader$ParallelLoaders.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap$KeySet.class\",\n-            \"\/modules\/java.base\/java\/security\/Principal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath.class\",\n-            \"\/modules\/java.base\/java\/net\/URLStreamHandlerFactory.class\",\n-            \"\/modules\/java.base\/java\/net\/URL$DefaultFactory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetURLAccess.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/ParseUtil.class\",\n-            \"\/modules\/java.base\/java\/net\/URLStreamHandler.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/protocol\/file\/Handler.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil$MASKS.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/protocol\/jar\/Handler.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderValue.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader$LoadedModule.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/DefaultRoots.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$HashMapSpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$ValueSpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/BaseStream.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Stream.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/PipelineHelper.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/AbstractPipeline.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$Head.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$Type.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$MaskBuilder.class\",\n-            \"\/modules\/java.base\/java\/util\/EnumMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class$ReflectionData.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class$Atomic.class\",\n-            \"\/modules\/java.base\/java\/lang\/PublicMethods$MethodList.class\",\n-            \"\/modules\/java.base\/java\/lang\/PublicMethods$Key.class\",\n-            \"\/modules\/java.base\/sun\/reflect\/annotation\/AnnotationParser.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory$LazyStaticHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/annotation\/Stable.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$SpeciesData.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$SpeciesData.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$Factory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer$Factory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/SimpleMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchFieldException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Species_L.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Accessor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle$Holder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$TransformKey.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormBuffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$Transform.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collectors.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collector$Characteristics.class\",\n-            \"\/modules\/java.base\/java\/util\/EnumSet.class\",\n-            \"\/modules\/java.base\/java\/util\/RegularEnumSet.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collector.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collectors$CollectorImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BiConsumer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Interface.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$InterfaceMethodRefEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BinaryOperator.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/TerminalOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$ReduceOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamShape.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Sink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/TerminalSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$AccumulatingSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$Box.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeySpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Predicate.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$StatelessOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Sink$ChainedReference.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleResolution.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink$OfRef.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindOp.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterators.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterators$IteratorSpliterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/Configuration.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/Resolver.class\",\n-            \"\/modules\/java.base\/java\/lang\/ModuleLayer.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedSet.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashSet.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedMap.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ResolvedModule.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Mapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue$Memoizer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog$ServiceProvider.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/CopyOnWriteArrayList.class\",\n-            \"\/modules\/java.base\/java\/lang\/ModuleLayer$Controller.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$SafeModuleFinder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationSupport.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation$Pinned.class\",\n-            \"\/modules\/java.base\/sun\/launcher\/LauncherHelper.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/URLUtil.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$Loader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$FileLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/Resource.class\",\n-            \"\/modules\/java.base\/java\/io\/FileCleanable.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ByteBuffered.class\",\n-            \"\/modules\/java.base\/java\/security\/SecureClassLoader$CodeSourceKey.class\",\n-            \"\/modules\/java.base\/java\/security\/PermissionCollection.class\",\n-            \"\/modules\/java.base\/java\/security\/Permissions.class\",\n-            \"\/modules\/java.base\/java\/lang\/NamedPackage.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/MethodFinder.class\",\n-            \"\/modules\/java.base\/java\/lang\/Readable.class\",\n-            \"\/modules\/java.base\/java\/nio\/CharBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/HeapCharBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CoderResult.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$IdentityHashMapIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeyIterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/Shutdown.class\",\n-            \"\/modules\/java.base\/java\/lang\/Shutdown$Lock.class\");\n+    \/\/\/ Note: This list is inherently a little fragile and may end up being more\n+    \/\/\/ trouble than it's worth to maintain. If it turns out that it needs to be\n+    \/\/\/ regenerated often when this benchmark is run, then a new approach should\n+    \/\/\/ be considered, such as:\n+    \/\/\/ * Limit the list of classes to non-internal ones.\n+    \/\/\/ * Calculate the list dynamically based on the running JVM.\n+    \/\/\/ * Build a custom jimage file similar to ImageReaderTest\n+    private static final class ClassList {\n+        \/\/\/ Returns the names of resource nodes expected to be present in the\n+        \/\/\/ reader, excluding preview mode paths (i.e. \"\/META-INF\/preview\/\").\n+        private static Set<String> names() {\n+            return INIT_CLASSES;\n+        }\n+\n+        \/\/\/ Returns the number of resources present.\n+        private static int count() {\n+            return INIT_CLASSES.size();\n+        }\n+\n+        \/\/\/ Returns the resource nodes represented as a map from module name to\n+        \/\/\/ resource path. This is suitable for testing functions like\n+        \/\/\/ {@link ImageReader#containsResource(String, String)} without the\n+        \/\/\/ overhead of splitting resource names during the trial.\n+        private static Map<String, List<String>> pathMap() {\n+            return MODULE_TO_PATHS;\n+        }\n+\n+        \/\/ Created by running \"java -verbose:class\", throwing away anonymous inner\n+        \/\/ classes and anything without a reliable name, and grouping by the stated\n+        \/\/ source. It's not perfect, but it's representative.\n+        \/\/\n+        \/\/ <jdk_root>\/bin\/java -verbose:class HelloWorld 2>&1 \\\n+        \/\/   | fgrep '[class,load]' | cut -d' ' -f2 \\\n+        \/\/   | tr '.' '\/' \\\n+        \/\/   | egrep -v '\\$[0-9$]' \\\n+        \/\/   | fgrep -v 'HelloWorld' \\\n+        \/\/   | fgrep -v '\/META-INF\/preview\/' \\\n+        \/\/   | while read f ; do echo \"${f}.class\" ; done \\\n+        \/\/   > initclasses.txt\n+        \/\/\n+        \/\/ Output:\n+        \/\/    java\/lang\/Object.class\n+        \/\/    java\/io\/Serializable.class\n+        \/\/    ...\n+        \/\/\n+        \/\/ jimage list <jdk_root>\/images\/jdk\/lib\/modules \\\n+        \/\/     | awk '\/^Module: *\/ { MOD=$2 }; \/^    *\/ { print \"\/modules\/\"MOD\"\/\"$1 }' \\\n+        \/\/     > fullpaths.txt\n+        \/\/\n+        \/\/ Output:\n+        \/\/     ...\n+        \/\/     \/modules\/java.base\/java\/lang\/Object.class\n+        \/\/     \/modules\/java.base\/java\/lang\/OutOfMemoryError.class\n+        \/\/     ...\n+        \/\/\n+        \/\/ while read c ; do grep \"\/$c\" fullpaths.txt ; done < initclasses.txt \\\n+        \/\/     | while read c ; do printf '    \"%s\",\\n' \"$c\" ; done \\\n+        \/\/     > initpaths.txt\n+        \/\/\n+        \/\/ Output:\n+        private static final Set<String> INIT_CLASSES = Set.of(\n+                \"\/modules\/java.base\/java\/lang\/Object.class\",\n+                \"\/modules\/java.base\/java\/io\/Serializable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Comparable.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharSequence.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/Constable.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ConstantDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/String.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AnnotatedElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/GenericDeclaration.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Type.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfField.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class.class\",\n+                \"\/modules\/java.base\/java\/lang\/Cloneable.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/System.class\",\n+                \"\/modules\/java.base\/java\/lang\/Throwable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Error.class\",\n+                \"\/modules\/java.base\/java\/lang\/Exception.class\",\n+                \"\/modules\/java.base\/java\/lang\/RuntimeException.class\",\n+                \"\/modules\/java.base\/java\/security\/ProtectionDomain.class\",\n+                \"\/modules\/java.base\/java\/security\/SecureClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/ReflectiveOperationException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassNotFoundException.class\",\n+                \"\/modules\/java.base\/java\/lang\/Record.class\",\n+                \"\/modules\/java.base\/java\/lang\/LinkageError.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoClassDefFoundError.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassCastException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArrayStoreException.class\",\n+                \"\/modules\/java.base\/java\/lang\/VirtualMachineError.class\",\n+                \"\/modules\/java.base\/java\/lang\/InternalError.class\",\n+                \"\/modules\/java.base\/java\/lang\/OutOfMemoryError.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackOverflowError.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalMonitorStateException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Reference.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalCallerException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/SoftReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/WeakReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/FinalReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/PhantomReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Finalizer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runnable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$FieldHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$Constants.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$UncaughtExceptionHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadGroup.class\",\n+                \"\/modules\/java.base\/java\/lang\/BaseVirtualThread.class\",\n+                \"\/modules\/java.base\/java\/lang\/VirtualThread.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadBuilders$BoundVirtualThread.class\",\n+                \"\/modules\/java.base\/java\/util\/Map.class\",\n+                \"\/modules\/java.base\/java\/util\/Dictionary.class\",\n+                \"\/modules\/java.base\/java\/util\/Hashtable.class\",\n+                \"\/modules\/java.base\/java\/util\/Properties.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessibleObject.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Member.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Field.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Parameter.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Executable.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Method.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Constructor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationScope.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/StackChunk.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessorImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/annotation\/Annotation.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/CallerSensitive.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessorImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MemberName.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ResolvedMethodName.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleNatives.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfMethod.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodType.class\",\n+                \"\/modules\/java.base\/java\/lang\/BootstrapMethodError.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/CallSite.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/ABIDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/VMStorage.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/UpcallLinker$CallRegs.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ConstantCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MutableCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VolatileCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/AssertionStatusDirectives.class\",\n+                \"\/modules\/java.base\/java\/lang\/Appendable.class\",\n+                \"\/modules\/java.base\/java\/lang\/AbstractStringBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringBuffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/UnsafeConstants.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Unsafe.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/Modules.class\",\n+                \"\/modules\/java.base\/java\/lang\/AutoCloseable.class\",\n+                \"\/modules\/java.base\/java\/io\/Closeable.class\",\n+                \"\/modules\/java.base\/java\/io\/InputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/ByteArrayInputStream.class\",\n+                \"\/modules\/java.base\/java\/net\/URL.class\",\n+                \"\/modules\/java.base\/java\/lang\/Enum.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/Manifest.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$AppClassLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$PlatformClassLoader.class\",\n+                \"\/modules\/java.base\/java\/security\/CodeSource.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentMap.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractMap.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/Iterable.class\",\n+                \"\/modules\/java.base\/java\/util\/Collection.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/List.class\",\n+                \"\/modules\/java.base\/java\/util\/RandomAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractList.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayList.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackTraceElement.class\",\n+                \"\/modules\/java.base\/java\/nio\/Buffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackWalker.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackStreamFactory$AbstractStackWalker.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackWalker$StackFrame.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/LiveStackFrame.class\",\n+                \"\/modules\/java.base\/java\/lang\/LiveStackFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractOwnableSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Boolean.class\",\n+                \"\/modules\/java.base\/java\/lang\/Character.class\",\n+                \"\/modules\/java.base\/java\/lang\/Number.class\",\n+                \"\/modules\/java.base\/java\/lang\/Float.class\",\n+                \"\/modules\/java.base\/java\/lang\/Double.class\",\n+                \"\/modules\/java.base\/java\/lang\/Byte.class\",\n+                \"\/modules\/java.base\/java\/lang\/Short.class\",\n+                \"\/modules\/java.base\/java\/lang\/Integer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Long.class\",\n+                \"\/modules\/java.base\/java\/lang\/Void.class\",\n+                \"\/modules\/java.base\/java\/util\/Iterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/RecordComponent.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$Vector.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorMask.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/FillerObject.class\",\n+                \"\/modules\/java.base\/java\/lang\/NullPointerException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArithmeticException.class\",\n+                \"\/modules\/java.base\/java\/lang\/IndexOutOfBoundsException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArrayIndexOutOfBoundsException.class\",\n+                \"\/modules\/java.base\/java\/io\/ObjectStreamField.class\",\n+                \"\/modules\/java.base\/java\/util\/Comparator.class\",\n+                \"\/modules\/java.base\/java\/lang\/String$CaseInsensitiveComparator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/VM.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module$ArchivedData.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/CDS.class\",\n+                \"\/modules\/java.base\/java\/util\/Set.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableSet.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$Set12.class\",\n+                \"\/modules\/java.base\/java\/util\/Objects.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableList.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListN.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableMap.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangReflectAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/ReflectAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/SharedSecrets.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory.class\",\n+                \"\/modules\/java.base\/java\/io\/ObjectStreamClass.class\",\n+                \"\/modules\/java.base\/java\/lang\/Math.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory$Config.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangRefAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Null.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Lock.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps$Raw.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/Charset.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/spi\/CharsetProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/StandardCharsets.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringLatin1.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/HistoricallyNamedCharset.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/Unicode.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/StrictMath.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ArraysSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/Map$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$Node.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$TreeNode.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringConcatHelper.class\",\n+                \"\/modules\/java.base\/java\/lang\/VersionProps.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runtime.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/Lock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Segment.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CounterCell.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Node.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/LockSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ReservationNode.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractSet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$EntrySet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$HashIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$EntryIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/StaticProperty.class\",\n+                \"\/modules\/java.base\/java\/io\/FileInputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/System$In.class\",\n+                \"\/modules\/java.base\/java\/io\/FileDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaIOFileDescriptorAccess.class\",\n+                \"\/modules\/java.base\/java\/io\/Flushable.class\",\n+                \"\/modules\/java.base\/java\/io\/OutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/FileOutputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/System$Out.class\",\n+                \"\/modules\/java.base\/java\/io\/FilterInputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedInputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/FilterOutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/PrintStream.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedOutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/Writer.class\",\n+                \"\/modules\/java.base\/java\/io\/OutputStreamWriter.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/StreamEncoder.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CharsetEncoder.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8$Encoder.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CodingErrorAction.class\",\n+                \"\/modules\/java.base\/java\/util\/Arrays.class\",\n+                \"\/modules\/java.base\/java\/nio\/ByteBuffer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/ScopedMemoryAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Function.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/Preconditions.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BiFunction.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNioAccess.class\",\n+                \"\/modules\/java.base\/java\/nio\/HeapByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/ByteOrder.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedWriter.class\",\n+                \"\/modules\/java.base\/java\/lang\/Terminator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$Handler.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal.class\",\n+                \"\/modules\/java.base\/java\/util\/Hashtable$Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$NativeHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/Integer$IntegerCache.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/OSEnvironment.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$State.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Reference$ReferenceHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$ThreadIdentifiers.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Finalizer$FinalizerThread.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/Cleaner.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptySet.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyList.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalArgumentException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleStatics.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/ClassFileFormatVersion.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharacterData.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharacterDataLatin1.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ClassFileDumper.class\",\n+                \"\/modules\/java.base\/java\/util\/HexFormat.class\",\n+                \"\/modules\/java.base\/java\/lang\/Character$CharacterCache.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicInteger.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MemberName$Factory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/Reflection.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN$MapNIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/KeyValueHolder.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/VerifyAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Modifier.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangModuleAccess.class\",\n+                \"\/modules\/java.base\/java\/io\/File.class\",\n+                \"\/modules\/java.base\/java\/io\/DefaultFileSystem.class\",\n+                \"\/modules\/java.base\/java\/io\/FileSystem.class\",\n+                \"\/modules\/java.base\/java\/io\/UnixFileSystem.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/DecimalDigits.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModulePatcher.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$IllegalNativeAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/HashSet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Modules.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$Counters.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedBootLayer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedModuleGraph.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModuleFinders.class\",\n+                \"\/modules\/java.base\/java\/net\/URI.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetUriAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModulesMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModules.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ExplodedSystemModules.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Watchable.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Path.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/FileSystems.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/DefaultFileSystemProvider.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/spi\/FileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/AbstractFileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystemProvider.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/OpenOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/StandardOpenOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/FileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixPath.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/Util.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringCoding.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixNativeDispatcher.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BootLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module$EnableNativeAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderHelper.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CollectionView.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$KeySetView.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$LibraryPaths.class\",\n+                \"\/modules\/java.base\/java\/io\/File$PathStatus.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$CountedLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$Sync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryContext.class\",\n+                \"\/modules\/java.base\/java\/util\/Queue.class\",\n+                \"\/modules\/java.base\/java\/util\/Deque.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayDeque.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayDeque$DeqIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibrary.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryImpl.class\",\n+                \"\/modules\/java.base\/java\/security\/cert\/Certificate.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValuesView.class\",\n+                \"\/modules\/java.base\/java\/util\/Enumeration.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Traverser.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$BaseIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValueIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/PosixFileAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileStoreAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixMountEntry.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/CopyOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/LinkOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Files.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffers.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/CarrierThreadLocal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/TerminatingThreadLocal.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$SetFromMap.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeySet.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerFactory.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ThreadFactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Cleaner.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList$Node.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Cleaner$Cleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/PhantomCleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanerCleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/InnocuousThread.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer$Deallocator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$PhantomCleanableRef.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleFinder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModulePath.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/Attributes$Name.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Array.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/perf\/PerfCounter.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/perf\/Perf.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/DirectBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/MappedByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/DirectByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/Bits.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicLong.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/VM$BufferPool.class\",\n+                \"\/modules\/java.base\/java\/nio\/LongBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/DirectLongBufferU.class\",\n+                \"\/modules\/java.base\/java\/util\/zip\/ZipConstants.class\",\n+                \"\/modules\/java.base\/java\/util\/zip\/ZipFile.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/JarFile.class\",\n+                \"\/modules\/java.base\/java\/util\/BitSet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilZipFileAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilJarAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/JavaUtilJarAccessImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runtime$Version.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$List12.class\",\n+                \"\/modules\/java.base\/java\/util\/Optional.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/AttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/UserDefinedFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/DynamicFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/AbstractBasicFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews$Basic.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes$UnixAsBasicFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream$Filter.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Files$AcceptAllFilter.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/SecureDirectoryStream.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixSecureDirectoryStream.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReadWriteLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$FairSync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$WriteLock.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream$UnixDirectoryIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttribute.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileModeAttribute.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory$Flags.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/Channel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ReadableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/WritableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SeekableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/GatheringByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ScatteringByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/InterruptibleChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractInterruptibleChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/FileChannel.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeDispatcher.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcher.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/UnixFileDispatcherImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcherImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/IOUtil.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Interruptible.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeThreadSet.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl$Closer.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/Channels.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Streams.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/SelChImpl.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/NetworkChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SelectableChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractSelectableChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SocketChannel.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/SocketChannelImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/ChannelInputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Supplier.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeySet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeyMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferenceKey.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/StrongReferenceKey.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodTypeForm.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/WeakReferenceKey.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper$Format.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ConstantDescs.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ClassDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ClassOrInterfaceDescImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ArrayClassDescImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ConstantUtils.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/MethodTypeDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/MethodTypeDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/MethodHandleDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/DirectMethodHandleDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/PrimitiveClassDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc$AnonymousDynamicConstantDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$NamedFunction.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Holder.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/ValueConversions.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/Invokers.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchMethodException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$BasicType.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/TypeKind.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Name.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Holder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AnnotationElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Annotation.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/PoolEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/Utf8Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl$State.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Attribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/MethodElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/FieldElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util$Writable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractElement.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundRuntimeVisibleAnnotationsAttribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Attributes.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$RuntimeVisibleAnnotationsMapper.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper$AttributeStability.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl$Intrinsic.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SplitConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/BootstrapMethodEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/EntryMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ClassEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractNamedEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$ClassEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Consumer.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFile.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassFileImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AttributeHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Superclass.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SuperclassImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/SourceFileAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundSourceFileAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$SourceFileMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BoundAttribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/MethodBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/MethodInfo.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefsEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$NameAndTypeEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MemberRefEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/FieldRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractMemberRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$FieldRefEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator$ClassData.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CodeBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelContext.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CodeElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/PseudoInstruction.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/CharacterRange.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariable.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariableType.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder$DeferredLabel.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/BufWriter.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BufWriterImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Label.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LabelTarget.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelImpl.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/VerifyType.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Opcode.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Opcode$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MethodRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$MethodRefEntryImpl.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/empty\/Empty.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$AdHocAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$CodeMapper.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/FieldBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CustomAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationReader.class\",\n+                \"\/modules\/java.base\/java\/util\/ListIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListItr.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Frame.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Type.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper$CodeRange.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassLoadingClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$CachedClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver$ClassHierarchyInfo.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassHierarchyInfoImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassReader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ModifiedUtf.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup$ClassDefiner.class\",\n+                \"\/modules\/java.base\/java\/lang\/IncompatibleClassChangeError.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchMethodError.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BootstrapMethodInvoker.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InnerClassLambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InfoFromMemberName.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$Access.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilCollectionAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Interfaces.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/InterfacesImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeConvertingMethodAdapter.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Constructor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangInvokeAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessMode.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessType.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/Invokers$Holder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo.class\",\n+                \"\/modules\/java.base\/java\/io\/DataInput.class\",\n+                \"\/modules\/java.base\/java\/io\/DataInputStream.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$CountingDataInput.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeThread.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Blocker.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Util.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Util$BufferCache.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/IOStatus.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ByteArray.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandles.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleGuards.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarForm.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$IndexEntry.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/StandardCharsets.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/US_ASCII.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/ISO_8859_1.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16BE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16LE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32BE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32LE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$ValueEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Builder.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Modifier.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag$Location.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires$Modifier.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeySet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeyIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/Checks.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayList$Itr.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Provides.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableSet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$Values.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$ValueIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN$SetNIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$Attributes.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferences.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleReader.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixUriUtils.class\",\n+                \"\/modules\/java.base\/java\/net\/URI$Parser.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleReference.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferenceImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Exports.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Opens.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixException.class\",\n+                \"\/modules\/java.base\/java\/io\/IOException.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ArchivedClassLoaders.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$BootClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassLoader$ParallelLoaders.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap$KeySet.class\",\n+                \"\/modules\/java.base\/java\/security\/Principal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath.class\",\n+                \"\/modules\/java.base\/java\/net\/URLStreamHandlerFactory.class\",\n+                \"\/modules\/java.base\/java\/net\/URL$DefaultFactory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetURLAccess.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/ParseUtil.class\",\n+                \"\/modules\/java.base\/java\/net\/URLStreamHandler.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/protocol\/file\/Handler.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil$MASKS.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/protocol\/jar\/Handler.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderValue.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader$LoadedModule.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/DefaultRoots.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$HashMapSpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$ValueSpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/BaseStream.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Stream.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/PipelineHelper.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/AbstractPipeline.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$Head.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$Type.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$MaskBuilder.class\",\n+                \"\/modules\/java.base\/java\/util\/EnumMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class$ReflectionData.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class$Atomic.class\",\n+                \"\/modules\/java.base\/java\/lang\/PublicMethods$MethodList.class\",\n+                \"\/modules\/java.base\/java\/lang\/PublicMethods$Key.class\",\n+                \"\/modules\/java.base\/sun\/reflect\/annotation\/AnnotationParser.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory$LazyStaticHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/annotation\/Stable.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$SpeciesData.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$SpeciesData.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$Factory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer$Factory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/SimpleMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchFieldException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Species_L.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Accessor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle$Holder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$TransformKey.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormBuffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$Transform.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collectors.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collector$Characteristics.class\",\n+                \"\/modules\/java.base\/java\/util\/EnumSet.class\",\n+                \"\/modules\/java.base\/java\/util\/RegularEnumSet.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collector.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collectors$CollectorImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BiConsumer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Interface.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$InterfaceMethodRefEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BinaryOperator.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/TerminalOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$ReduceOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamShape.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Sink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/TerminalSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$AccumulatingSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$Box.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeySpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Predicate.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$StatelessOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Sink$ChainedReference.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleResolution.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink$OfRef.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindOp.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterators.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterators$IteratorSpliterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/Configuration.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/Resolver.class\",\n+                \"\/modules\/java.base\/java\/lang\/ModuleLayer.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedSet.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashSet.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedMap.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ResolvedModule.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Mapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue$Memoizer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog$ServiceProvider.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/CopyOnWriteArrayList.class\",\n+                \"\/modules\/java.base\/java\/lang\/ModuleLayer$Controller.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$SafeModuleFinder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationSupport.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation$Pinned.class\",\n+                \"\/modules\/java.base\/sun\/launcher\/LauncherHelper.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/URLUtil.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$Loader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$FileLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/Resource.class\",\n+                \"\/modules\/java.base\/java\/io\/FileCleanable.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ByteBuffered.class\",\n+                \"\/modules\/java.base\/java\/security\/SecureClassLoader$CodeSourceKey.class\",\n+                \"\/modules\/java.base\/java\/security\/PermissionCollection.class\",\n+                \"\/modules\/java.base\/java\/security\/Permissions.class\",\n+                \"\/modules\/java.base\/java\/lang\/NamedPackage.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/MethodFinder.class\",\n+                \"\/modules\/java.base\/java\/lang\/Readable.class\",\n+                \"\/modules\/java.base\/java\/nio\/CharBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/HeapCharBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CoderResult.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$IdentityHashMapIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeyIterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/Shutdown.class\",\n+                \"\/modules\/java.base\/java\/lang\/Shutdown$Lock.class\");\n+\n+        private static final Pattern SPLIT_MODULE_AND_PATH = Pattern.compile(\"\/modules\/([^\/]+)\/(.*)\");\n+\n+        private static final Map<String, List<String>> MODULE_TO_PATHS = INIT_CLASSES.stream()\n+                .map(name -> {\n+                    Matcher m = SPLIT_MODULE_AND_PATH.matcher(name);\n+                    if (!m.matches()) {\n+                        throw new IllegalArgumentException(\"Bad resource name: \" + name);\n+                    }\n+                    return m.toMatchResult();\n+                })\n+                .collect(groupingBy(m -> m.group(1), mapping(m -> m.group(2), toList())));\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/internal\/jrtfs\/ImageReaderBenchmark.java","additions":991,"deletions":866,"binary":false,"changes":1857,"status":"modified"}]}