{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,17 @@\n+ * Defines the header and version information for jimage files.\n+ *\n+ * <p>Version number changes must be synced in a single change across all code\n+ * which reads\/writes jimage files, and code which tries to open a jimage file\n+ * with an unexpected version should fail.\n+ *\n+ * <p>Known jimage file code which needs updating on version change:\n+ * <ul>\n+ *     <li>src\/java.base\/share\/native\/libjimage\/imageFile.hpp\n+ * <\/ul>\n+ *\n+ * <p>Version history:\n+ * <ul>\n+ *     <li>{@code 1.0}: Original version.\n+ *     <li>{@code 1.1}: Support preview mode with new flags.\n+ * <\/ul>\n+ *\n@@ -42,1 +59,1 @@\n-    public static final int MINOR_VERSION = 0;\n+    public static final int MINOR_VERSION = 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageHeader.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.List;\n@@ -30,0 +31,1 @@\n+import java.util.function.Predicate;\n@@ -47,1 +49,143 @@\n-    public static final int ATTRIBUTE_COUNT = 8;\n+    public static final int ATTRIBUTE_PREVIEW_FLAGS = 8;\n+    public static final int ATTRIBUTE_COUNT = 9;\n+\n+    \/\/ Flag masks for the ATTRIBUTE_PREVIEW_FLAGS attribute. Defined so\n+    \/\/ that zero is the overwhelmingly common case for normal resources.\n+\n+    \/**\n+     * Indicates that a non-preview location is associated with preview\n+     * resources.\n+     *\n+     * <p>This can apply to both resources and directories in the\n+     * {@code \/modules\/xxx\/...} namespace, as well as {@code \/packages\/xxx}\n+     * directories.\n+     *\n+     * <p>For {@code \/packages\/xxx} directories, it indicates that the package\n+     * has preview resources in one of the modules in which it exists.\n+     *\/\n+    private static final int FLAGS_HAS_PREVIEW_VERSION = 0x1;\n+    \/**\n+     * Set on all locations in the {@code \/modules\/xxx\/META-INF\/preview\/...}\n+     * namespace.\n+     *\n+     * <p>This flag is mutually exclusive with {@link #FLAGS_HAS_PREVIEW_VERSION}.\n+     *\/\n+    private static final int FLAGS_IS_PREVIEW_VERSION = 0x2;\n+    \/**\n+     * Indicates that a location only exists due to preview resources.\n+     *\n+     * <p>This can apply to both resources and directories in the\n+     * {@code \/modules\/xxx\/...} namespace, as well as {@code \/packages\/xxx}\n+     * directories.\n+     *\n+     * <p>For {@code \/packages\/xxx} directories it indicates that, for every\n+     * module in which the package exists, it is preview only.\n+     *\n+     * <p>This flag is mutually exclusive with {@link #FLAGS_HAS_PREVIEW_VERSION}\n+     * and need not imply that {@link #FLAGS_IS_PREVIEW_VERSION} is set (i.e.\n+     * for {@code \/packages\/xxx} directories).\n+     *\/\n+    private static final int FLAGS_IS_PREVIEW_ONLY = 0x4;\n+\n+    \/\/ Also used in ImageReader.\n+    static final String MODULES_PREFIX = \"\/modules\";\n+    static final String PACKAGES_PREFIX = \"\/packages\";\n+    static final String PREVIEW_INFIX = \"\/META-INF\/preview\";\n+\n+    \/**\n+     * Helper function to calculate preview flags (ATTRIBUTE_PREVIEW_FLAGS).\n+     *\n+     * <p>Since preview flags are calculated separately for resource nodes and\n+     * directory nodes (in two quite different places) it's useful to have a\n+     * common helper.\n+     *\n+     * <p>Based on the entry name, the flags are:\n+     * <ul>\n+     *     <li>{@code \"[\/modules]\/<module>\/<path>\"} normal resource or directory:<br>\n+     *     Zero, or {@code FLAGS_HAS_PREVIEW_VERSION} if a preview entry exists.\n+     *     <li>{@code \"[\/modules]\/<module>\/META-INF\/preview\/<path>\"} preview\n+     *     resource or directory:<br>\n+     *     {@code FLAGS_IS_PREVIEW_VERSION}, and additionally {@code\n+     *     FLAGS_IS_PREVIEW_ONLY} if no normal version of the resource exists.\n+     *     <li>In all other cases, returned flags are zero (note that {@code\n+     *     \"\/packages\/xxx\"} entries may have flags, but these are calculated\n+     *     elsewhere).\n+     * <\/ul>\n+     *\n+     * @param name the jimage name of the resource or directory.\n+     * @param hasEntry a predicate for jimage names returning whether an entry\n+     *     is present.\n+     * @return flags for the ATTRIBUTE_PREVIEW_FLAGS attribute.\n+     *\/\n+    public static int getFlags(String name, Predicate<String> hasEntry) {\n+        if (name.startsWith(PACKAGES_PREFIX + \"\/\")) {\n+            throw new IllegalArgumentException(\n+                    \"Package sub-directory flags handled separately: \" + name);\n+        }\n+        \/\/ Find suffix for either '\/modules\/xxx\/suffix' or '\/xxx\/suffix' paths.\n+        int idx = name.startsWith(MODULES_PREFIX + \"\/\") ? MODULES_PREFIX.length() + 1 : 1;\n+        int suffixStart = name.indexOf('\/', idx);\n+        if (suffixStart == -1) {\n+            \/\/ No flags for '[\/modules]\/xxx' paths (esp. '\/modules', '\/packages').\n+            \/\/ '\/packages\/xxx' entries have flags, but not calculated here.\n+            return 0;\n+        }\n+        \/\/ Prefix is either '\/modules\/xxx' or '\/xxx', and suffix starts with '\/'.\n+        String prefix = name.substring(0, suffixStart);\n+        String suffix = name.substring(suffixStart);\n+        if (suffix.startsWith(PREVIEW_INFIX + \"\/\")) {\n+            \/\/ Preview resources\/directories.\n+            String nonPreviewName = prefix + suffix.substring(PREVIEW_INFIX.length());\n+            return FLAGS_IS_PREVIEW_VERSION\n+                    | (hasEntry.test(nonPreviewName) ? 0 : FLAGS_IS_PREVIEW_ONLY);\n+        } else if (!suffix.startsWith(\"\/META-INF\/\")) {\n+            \/\/ Non-preview resources\/directories.\n+            String previewName = prefix + PREVIEW_INFIX + suffix;\n+            return hasEntry.test(previewName) ? FLAGS_HAS_PREVIEW_VERSION : 0;\n+        } else {\n+            \/\/ Suffix is '\/META-INF\/xxx' and no preview version is even possible.\n+            return 0;\n+        }\n+    }\n+\n+    \/**\n+     * Helper function to calculate package flags for {@code \"\/packages\/xxx\"}\n+     * directory entries.\n+     *\n+     * <p>Based on the module references, the flags are:\n+     * <ul>\n+     *     <li>{@code FLAGS_HAS_PREVIEW_VERSION} if <em>any<\/em> referenced\n+     *     package has a preview version.\n+     *     <li>{@code FLAGS_IS_PREVIEW_ONLY} if <em>all<\/em> referenced packages\n+     *     are preview only.\n+     * <\/ul>\n+     *\n+     * @return package flags for {@code \"\/packages\/xxx\"} directory entries.\n+     *\/\n+    public static int getPackageFlags(List<ModuleReference> moduleReferences) {\n+        boolean hasPreviewVersion =\n+                moduleReferences.stream().anyMatch(ModuleReference::hasPreviewVersion);\n+        boolean isPreviewOnly =\n+                moduleReferences.stream().allMatch(ModuleReference::isPreviewOnly);\n+        return (hasPreviewVersion ? ImageLocation.FLAGS_HAS_PREVIEW_VERSION : 0)\n+                | (isPreviewOnly ? ImageLocation.FLAGS_IS_PREVIEW_ONLY : 0);\n+    }\n+\n+    \/**\n+     * Tests a non-preview image location's flags to see if it has preview\n+     * content associated with it.\n+     *\/\n+    public static boolean hasPreviewVersion(int flags) {\n+        return (flags & FLAGS_HAS_PREVIEW_VERSION) != 0;\n+    }\n+\n+    \/**\n+     * Tests an image location's flags to see if it only exists in preview mode.\n+     *\/\n+    public static boolean isPreviewOnly(int flags) {\n+        return (flags & FLAGS_IS_PREVIEW_ONLY) != 0;\n+    }\n+\n+    public enum LocationType {\n+        RESOURCE, MODULES_ROOT, MODULES_DIR, PACKAGES_ROOT, PACKAGES_DIR;\n+    }\n@@ -288,0 +432,4 @@\n+    public int getFlags() {\n+        return (int) getAttribute(ATTRIBUTE_PREVIEW_FLAGS);\n+    }\n+\n@@ -297,1 +445,1 @@\n-                builder.append(\"\/modules\");\n+                builder.append(MODULES_PREFIX);\n@@ -320,30 +468,0 @@\n-    String buildName(boolean includeModule, boolean includeParent,\n-            boolean includeName) {\n-        StringBuilder builder = new StringBuilder();\n-\n-        if (includeModule && getModuleOffset() != 0) {\n-            builder.append(\"\/modules\/\");\n-            builder.append(getModule());\n-         }\n-\n-        if (includeParent && getParentOffset() != 0) {\n-            builder.append('\/');\n-            builder.append(getParent());\n-        }\n-\n-        if (includeName) {\n-            if (includeModule || includeParent) {\n-                builder.append('\/');\n-            }\n-\n-            builder.append(getBase());\n-\n-            if (getExtensionOffset() != 0) {\n-                builder.append('.');\n-                builder.append(getExtension());\n-            }\n-        }\n-\n-        return builder.toString();\n-   }\n-\n@@ -362,0 +480,36 @@\n+    \/\/ Fast (zero allocation) type determination for locations.\n+    public LocationType getType() {\n+        switch (getModuleOffset()) {\n+            case ImageStrings.MODULES_STRING_OFFSET:\n+                \/\/ Locations in \/modules\/... namespace are directory entries.\n+                return LocationType.MODULES_DIR;\n+            case ImageStrings.PACKAGES_STRING_OFFSET:\n+                \/\/ Locations in \/packages\/... namespace are always 2-level\n+                \/\/ \"\/packages\/xxx\" directories.\n+                return LocationType.PACKAGES_DIR;\n+            case ImageStrings.EMPTY_STRING_OFFSET:\n+                \/\/ Only 2 choices, either the \"\/modules\" or \"\/packages\" root.\n+                assert isRootDir() : \"Invalid root directory: \" + getFullName();\n+                return getBase().charAt(1) == 'p'\n+                        ? LocationType.PACKAGES_ROOT\n+                        : LocationType.MODULES_ROOT;\n+            default:\n+                \/\/ Anything else is \/<module>\/<path> and references a resource.\n+                return LocationType.RESOURCE;\n+        }\n+    }\n+\n+    private boolean isRootDir() {\n+        if (getModuleOffset() == 0 && getParentOffset() == 0) {\n+            String name = getFullName();\n+            return name.equals(MODULES_PREFIX) || name.equals(PACKAGES_PREFIX);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        \/\/ Cannot use String.format() (too early in startup for locale code).\n+        return \"ImageLocation[name='\" + getFullName() + \"', type=\" + getType() + \", flags=\" + getFlags() + \"]\";\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageLocation.java","additions":187,"deletions":33,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.internal.jimage.ImageLocation.LocationType;\n+\n@@ -37,0 +39,1 @@\n+import java.util.Comparator;\n@@ -43,0 +46,1 @@\n+import java.util.TreeMap;\n@@ -47,0 +51,8 @@\n+import static jdk.internal.jimage.ImageLocation.LocationType.MODULES_DIR;\n+import static jdk.internal.jimage.ImageLocation.LocationType.MODULES_ROOT;\n+import static jdk.internal.jimage.ImageLocation.LocationType.PACKAGES_DIR;\n+import static jdk.internal.jimage.ImageLocation.LocationType.RESOURCE;\n+import static jdk.internal.jimage.ImageLocation.MODULES_PREFIX;\n+import static jdk.internal.jimage.ImageLocation.PACKAGES_PREFIX;\n+import static jdk.internal.jimage.ImageLocation.PREVIEW_INFIX;\n+\n@@ -89,2 +101,4 @@\n-     * Opens an image reader for a jimage file at the specified path, using the\n-     * given byte order.\n+     * Opens an image reader for a jimage file at the specified path.\n+     *\n+     * @param imagePath file system path of the jimage file.\n+     * @param mode whether to return preview resources.\n@@ -92,5 +106,2 @@\n-    public static ImageReader open(Path imagePath, ByteOrder byteOrder) throws IOException {\n-        Objects.requireNonNull(imagePath);\n-        Objects.requireNonNull(byteOrder);\n-\n-        return SharedImageReader.open(imagePath, byteOrder);\n+    public static ImageReader open(Path imagePath, PreviewMode mode) throws IOException {\n+        return open(imagePath, ByteOrder.nativeOrder(), mode);\n@@ -100,2 +111,5 @@\n-     * Opens an image reader for a jimage file at the specified path, using the\n-     * platform native byte order.\n+     * Opens an image reader for a jimage file at the specified path.\n+     *\n+     * @param imagePath file system path of the jimage file.\n+     * @param byteOrder the byte-order to be used when reading the jimage file.\n+     * @param mode controls whether preview resources are visible.\n@@ -103,2 +117,5 @@\n-    public static ImageReader open(Path imagePath) throws IOException {\n-        return open(imagePath, ByteOrder.nativeOrder());\n+    public static ImageReader open(Path imagePath, ByteOrder byteOrder, PreviewMode mode)\n+            throws IOException {\n+        Objects.requireNonNull(imagePath);\n+        Objects.requireNonNull(byteOrder);\n+        return SharedImageReader.open(imagePath, byteOrder, mode.isPreviewModeEnabled());\n@@ -217,3 +234,0 @@\n-        private static final Map<Path, SharedImageReader> OPEN_FILES = new HashMap<>();\n-        private static final String MODULES_ROOT = \"\/modules\";\n-        private static final String PACKAGES_ROOT = \"\/packages\";\n@@ -225,0 +239,27 @@\n+        static final class ReaderKey {\n+            private final Path imagePath;\n+            private final boolean previewMode;\n+\n+            public ReaderKey(Path imagePath, boolean previewMode) {\n+                this.imagePath = imagePath;\n+                this.previewMode = previewMode;\n+            }\n+\n+            @Override\n+            public boolean equals(Object obj) {\n+                \/\/ No pattern variables here (Java 8 compatible source).\n+                if (obj instanceof ReaderKey) {\n+                    ReaderKey other = (ReaderKey) obj;\n+                    return this.imagePath.equals(other.imagePath) && this.previewMode == other.previewMode;\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public int hashCode() {\n+                return imagePath.hashCode() ^ Boolean.hashCode(previewMode);\n+            }\n+        }\n+\n+        private static final Map<ReaderKey, SharedImageReader> OPEN_FILES = new HashMap<>();\n+\n@@ -235,3 +276,0 @@\n-        \/\/ Used to classify ImageLocation instances without string comparison.\n-        private final int modulesStringOffset;\n-        private final int packagesStringOffset;\n@@ -239,1 +277,8 @@\n-        private SharedImageReader(Path imagePath, ByteOrder byteOrder) throws IOException {\n+        \/\/ Preview mode support.\n+        private final boolean previewMode;\n+        \/\/ A relativized mapping from non-preview name to directories containing\n+        \/\/ preview-only nodes. This is used to add preview-only content to\n+        \/\/ directories as they are completed.\n+        private final HashMap<String, Directory> previewDirectoriesToMerge;\n+\n+        private SharedImageReader(Path imagePath, ByteOrder byteOrder, boolean previewMode) throws IOException {\n@@ -243,4 +288,1 @@\n-            \/\/ Pick stable jimage names from which to extract string offsets (we cannot\n-            \/\/ use \"\/modules\" or \"\/packages\", since those have a module offset of zero).\n-            this.modulesStringOffset = getModuleOffset(\"\/modules\/java.base\");\n-            this.packagesStringOffset = getModuleOffset(\"\/packages\/java.lang\");\n+            this.previewMode = previewMode;\n@@ -250,4 +292,2 @@\n-            Directory packages = newDirectory(PACKAGES_ROOT);\n-            nodes.put(packages.getName(), packages);\n-            Directory modules = newDirectory(MODULES_ROOT);\n-            nodes.put(modules.getName(), modules);\n+            Directory packages = ensureCached(newDirectory(PACKAGES_PREFIX));\n+            Directory modules = ensureCached(newDirectory(MODULES_PREFIX));\n@@ -257,1 +297,8 @@\n-            nodes.put(root.getName(), root);\n+            ensureCached(root);\n+\n+            \/\/ By scanning the \/packages directory information early we can determine\n+            \/\/ which module\/package pairs have preview resources, and build the (small)\n+            \/\/ set of preview nodes early. This also ensures that preview-only entries\n+            \/\/ in the \/packages directory are not present in non-preview mode.\n+            this.previewDirectoriesToMerge = previewMode ? new HashMap<>() : null;\n+            packages.setChildren(processPackagesDirectory(previewMode));\n@@ -261,3 +308,8 @@\n-         * Returns the offset of the string denoting the leading \"module\" segment in\n-         * the given path (e.g. {@code <module>\/<path>}). We can't just pass in the\n-         * {@code \/<module>} string here because that has a module offset of zero.\n+         * Process {@code \"\/packages\/xxx\"} entries to build the child nodes for the\n+         * root {@code \"\/packages\"} node. Preview-only entries will be skipped if\n+         * {@code previewMode == false}.\n+         *\n+         * <p>If {@code previewMode == true}, this method also populates the {@link\n+         * #previewDirectoriesToMerge} map with any preview-only nodes, to be merged\n+         * into directories as they are completed. It also caches preview resources\n+         * and preview-only directories for direct lookup.\n@@ -265,6 +317,71 @@\n-        private int getModuleOffset(String path) {\n-            ImageLocation location = findLocation(path);\n-            assert location != null : \"Cannot find expected jimage location: \" + path;\n-            int offset = location.getModuleOffset();\n-            assert offset != 0 : \"Invalid module offset for jimage location: \" + path;\n-            return offset;\n+        private ArrayList<Node> processPackagesDirectory(boolean previewMode) {\n+            ImageLocation pkgRoot = findLocation(PACKAGES_PREFIX);\n+            assert pkgRoot != null : \"Invalid jimage file\";\n+            IntBuffer offsets = getOffsetBuffer(pkgRoot);\n+            ArrayList<Node> pkgDirs = new ArrayList<>(offsets.capacity());\n+            \/\/ Package path to module map, sorted in reverse order so that\n+            \/\/ longer child paths get processed first.\n+            Map<String, List<String>> previewPackagesToModules =\n+                    new TreeMap<>(Comparator.reverseOrder());\n+            for (int i = 0; i < offsets.capacity(); i++) {\n+                ImageLocation pkgDir = getLocation(offsets.get(i));\n+                int flags = pkgDir.getFlags();\n+                \/\/ A package subdirectory is \"preview only\" if all the modules\n+                \/\/ it references have that package marked as preview only.\n+                \/\/ Skipping these entries avoids empty package subdirectories.\n+                if (previewMode || !ImageLocation.isPreviewOnly(flags)) {\n+                    pkgDirs.add(ensureCached(newDirectory(pkgDir.getFullName())));\n+                }\n+                if (previewMode && ImageLocation.hasPreviewVersion(flags)) {\n+                    \/\/ Only do this in preview mode for the small set of packages with\n+                    \/\/ preview versions (the number of preview entries should be small).\n+                    List<String> moduleNames = new ArrayList<>();\n+                    ModuleReference.readNameOffsets(getOffsetBuffer(pkgDir), \/*normal*\/ false, \/*preview*\/ true)\n+                            .forEachRemaining(n -> moduleNames.add(getString(n)));\n+                    previewPackagesToModules.put(pkgDir.getBase().replace('.', '\/'), moduleNames);\n+                }\n+            }\n+            \/\/ Reverse sorted map means child directories are processed first.\n+            previewPackagesToModules.forEach((pkgPath, modules) ->\n+                    modules.forEach(modName -> processPreviewDir(MODULES_PREFIX + \"\/\" + modName, pkgPath)));\n+            \/\/ We might have skipped some preview-only package entries.\n+            pkgDirs.trimToSize();\n+            return pkgDirs;\n+        }\n+\n+        void processPreviewDir(String namePrefix, String pkgPath) {\n+            String previewDirName = namePrefix + PREVIEW_INFIX + \"\/\" + pkgPath;\n+            ImageLocation previewLoc = findLocation(previewDirName);\n+            assert previewLoc != null : \"Missing preview directory location: \" + previewDirName;\n+            String nonPreviewDirName = namePrefix + \"\/\" + pkgPath;\n+            List<Node> previewOnlyChildren = createChildNodes(previewLoc, 0, childLoc -> {\n+                String baseName = getBaseName(childLoc);\n+                String nonPreviewChildName = nonPreviewDirName + \"\/\" + baseName;\n+                boolean isPreviewOnly = ImageLocation.isPreviewOnly(childLoc.getFlags());\n+                LocationType type = childLoc.getType();\n+                if (type == RESOURCE) {\n+                    \/\/ Preview resources are cached to override non-preview versions.\n+                    Node childNode = ensureCached(newResource(nonPreviewChildName, childLoc));\n+                    return isPreviewOnly ? childNode : null;\n+                } else {\n+                    \/\/ Child directories are not cached here (they are either cached\n+                    \/\/ already or have been added to previewDirectoriesToMerge).\n+                    assert type == MODULES_DIR : \"Invalid location type: \" + childLoc;\n+                    Node childNode = nodes.get(nonPreviewChildName);\n+                    assert isPreviewOnly == (childNode != null) :\n+                            \"Inconsistent child node: \" + nonPreviewChildName;\n+                    return childNode;\n+                }\n+            });\n+            Directory previewDir = newDirectory(nonPreviewDirName);\n+            previewDir.setChildren(previewOnlyChildren);\n+            if (ImageLocation.isPreviewOnly(previewLoc.getFlags())) {\n+                \/\/ If we are preview-only, our children are also preview-only, so\n+                \/\/ this directory is a complete hierarchy and should be cached.\n+                assert !previewOnlyChildren.isEmpty() : \"Invalid empty preview-only directory: \" + nonPreviewDirName;\n+                ensureCached(previewDir);\n+            } else if (!previewOnlyChildren.isEmpty()) {\n+                \/\/ A partial directory containing extra preview-only nodes\n+                \/\/ to be merged when the non-preview directory is completed.\n+                previewDirectoriesToMerge.put(nonPreviewDirName, previewDir);\n+            }\n@@ -273,1 +390,8 @@\n-        private static ImageReader open(Path imagePath, ByteOrder byteOrder) throws IOException {\n+        \/\/ Adds a node to the cache, ensuring that no matching entry already existed.\n+        private <T extends Node> T ensureCached(T node) {\n+            Node existingNode = nodes.put(node.getName(), node);\n+            assert existingNode == null : \"Unexpected node already cached for: \" + node;\n+            return node;\n+        }\n+\n+        private static ImageReader open(Path imagePath, ByteOrder byteOrder, boolean previewMode) throws IOException {\n@@ -278,1 +402,2 @@\n-                SharedImageReader reader = OPEN_FILES.get(imagePath);\n+                ReaderKey key = new ReaderKey(imagePath, previewMode);\n+                SharedImageReader reader = OPEN_FILES.get(key);\n@@ -282,2 +407,2 @@\n-                    reader =  new SharedImageReader(imagePath, byteOrder);\n-                    OPEN_FILES.put(imagePath, reader);\n+                    reader = new SharedImageReader(imagePath, byteOrder, previewMode);\n+                    OPEN_FILES.put(key, reader);\n@@ -307,1 +432,1 @@\n-                    if (!OPEN_FILES.remove(this.getImagePath(), this)) {\n+                    if (!OPEN_FILES.remove(new ReaderKey(getImagePath(), previewMode), this)) {\n@@ -325,0 +450,2 @@\n+            \/\/ Root directories \"\/\", \"\/modules\" and \"\/packages\", as well\n+            \/\/ as all \"\/packages\/xxx\" subdirectories are already cached.\n@@ -327,12 +454,4 @@\n-                \/\/ We cannot get the root paths (\"\/modules\" or \"\/packages\") here\n-                \/\/ because those nodes are already in the nodes cache.\n-                if (name.startsWith(MODULES_ROOT + \"\/\")) {\n-                    \/\/ This may perform two lookups, one for a directory (in\n-                    \/\/ \"\/modules\/...\") and one for a non-prefixed resource\n-                    \/\/ (with \"\/modules\" removed).\n-                    node = buildModulesNode(name);\n-                } else if (name.startsWith(PACKAGES_ROOT + \"\/\")) {\n-                    node = buildPackagesNode(name);\n-                }\n-                if (node != null) {\n-                    nodes.put(node.getName(), node);\n+                if (name.startsWith(MODULES_PREFIX + \"\/\")) {\n+                    node = buildAndCacheModulesNode(name);\n+                } else if (name.startsWith(PACKAGES_PREFIX + \"\/\")) {\n+                    node = buildAndCacheLinkNode(name);\n@@ -362,1 +481,1 @@\n-            String nodeName = MODULES_ROOT + \"\/\" + moduleName + \"\/\" + resourcePath;\n+            String nodeName = MODULES_PREFIX + \"\/\" + moduleName + \"\/\" + resourcePath;\n@@ -368,1 +487,1 @@\n-                    if (loc != null && isResource(loc)) {\n+                    if (loc != null && loc.getType() == RESOURCE) {\n@@ -384,3 +503,4 @@\n-         * search). As such, it skips checking the nodes cache and only checks\n-         * for an entry in the jimage file, as this is faster if the resource\n-         * is not present. This also means it doesn't need synchronization.\n+         * search). As such, it skips checking the nodes cache if possible, and\n+         * only checks for an entry in the jimage file, as this is faster if the\n+         * resource is not present. This also means it doesn't need\n+         * synchronization most of the time.\n@@ -392,2 +512,12 @@\n-            \/\/ If the given module name is 'modules', then 'isResource()'\n-            \/\/ returns false to prevent false positives.\n+            \/\/ In preview mode, preview-only resources are eagerly added to the\n+            \/\/ cache, so we must check that first.\n+            if (previewMode) {\n+                String nodeName = MODULES_PREFIX + \"\/\" + moduleName + \"\/\" + resourcePath;\n+                \/\/ Synchronize as tightly as possible to reduce locking contention.\n+                synchronized (this) {\n+                    Node node = nodes.get(nodeName);\n+                    if (node != null) {\n+                        return node.isResource();\n+                    }\n+                }\n+            }\n@@ -395,1 +525,1 @@\n-            return loc != null && isResource(loc);\n+            return loc != null && loc.getType() == RESOURCE;\n@@ -404,2 +534,5 @@\n-        private Node buildModulesNode(String name) {\n-            assert name.startsWith(MODULES_ROOT + \"\/\") : \"Invalid module node name: \" + name;\n+        private Node buildAndCacheModulesNode(String name) {\n+            assert name.startsWith(MODULES_PREFIX + \"\/\") : \"Invalid module node name: \" + name;\n+            if (isPreviewName(name)) {\n+                return null;\n+            }\n@@ -411,2 +544,2 @@\n-                assert isModulesSubdirectory(loc) : \"Invalid modules directory: \" + name;\n-                return completeModuleDirectory(newDirectory(name), loc);\n+                assert loc.getType() == MODULES_DIR : \"Invalid modules directory: \" + name;\n+                return ensureCached(completeModuleDirectory(newDirectory(name), loc));\n@@ -417,2 +550,34 @@\n-            loc = findLocation(name.substring(MODULES_ROOT.length()));\n-            return loc != null && isResource(loc) ? newResource(name, loc) : null;\n+            loc = findLocation(name.substring(MODULES_PREFIX.length()));\n+            return loc != null && loc.getType() == RESOURCE\n+                    ? ensureCached(newResource(name, loc))\n+                    : null;\n+        }\n+\n+        \/**\n+         * Returns whether a directory name in the \"\/modules\/\" directory could be referencing\n+         * the \"META-INF\" directory\".\n+         *\/\n+        private boolean isMetaInf(Directory dir) {\n+            String name = dir.getName();\n+            int pathStart = name.indexOf('\/', MODULES_PREFIX.length() + 1);\n+            return name.length() == pathStart + \"\/META-INF\".length()\n+                    && name.endsWith(\"\/META-INF\");\n+        }\n+\n+        \/**\n+         * Returns whether a node name in the \"\/modules\/\" directory could be referencing\n+         * a preview resource or directory under \"META-INF\/preview\".\n+         *\/\n+        private boolean isPreviewName(String name) {\n+            int pathStart = name.indexOf('\/', MODULES_PREFIX.length() + 1);\n+            int previewEnd = pathStart + PREVIEW_INFIX.length();\n+            return pathStart > 0\n+                    && name.regionMatches(pathStart, PREVIEW_INFIX, 0, PREVIEW_INFIX.length())\n+                    && (name.length() == previewEnd || name.charAt(previewEnd) == '\/');\n+        }\n+\n+        private String getBaseName(ImageLocation loc) {\n+            \/\/ Matches logic in ImageLocation#getFullName() regarding extensions.\n+            String trailingParts = loc.getBase()\n+                    + ((loc.getExtensionOffset() != 0) ? \".\" + loc.getExtension() : \"\");\n+            return trailingParts.substring(trailingParts.lastIndexOf('\/') + 1);\n@@ -422,1 +587,1 @@\n-         * Builds a node in the \"\/packages\/...\" namespace.\n+         * Builds a link node of the form \"\/packages\/xxx\/yyy\".\n@@ -424,2 +589,2 @@\n-         * <p>Called by {@link #findNode(String)} if a {@code \/packages\/...} node\n-         * is not present in the cache.\n+         * <p>Called by {@link #findNode(String)} if a {@code \/packages\/...}\n+         * node is not present in the cache (the name is not trusted).\n@@ -427,7 +592,5 @@\n-        private Node buildPackagesNode(String name) {\n-            \/\/ There are only locations for the root \"\/packages\" or \"\/packages\/xxx\"\n-            \/\/ directories, but not the symbolic links below them (the links can be\n-            \/\/ entirely derived from the name information in the parent directory).\n-            \/\/ However, unlike resources this means that we do not have a constant\n-            \/\/ time lookup for link nodes when creating them.\n-            int packageStart = PACKAGES_ROOT.length() + 1;\n+        private Node buildAndCacheLinkNode(String name) {\n+            \/\/ There are only locations for \"\/packages\" or \"\/packages\/xxx\"\n+            \/\/ directories, but not the symbolic links below them (links are\n+            \/\/ derived from the name information in the parent directory).\n+            int packageStart = PACKAGES_PREFIX.length() + 1;\n@@ -435,8 +598,3 @@\n-            if (packageEnd == -1) {\n-                ImageLocation loc = findLocation(name);\n-                return loc != null ? completePackageDirectory(newDirectory(name), loc) : null;\n-            } else {\n-                \/\/ We cannot assume that the parent directory exists for a link node, since\n-                \/\/ the given name is untrusted and could reference a non-existent link.\n-                \/\/ However, if the parent directory is present, we can conclude that the\n-                \/\/ given name was not a valid link (or else it would already be cached).\n+            \/\/ We already built the 2-level \"\/packages\/xxx\" directories,\n+            \/\/ so if this is a 2-level name, it cannot reference a node.\n+            if (packageEnd >= 0) {\n@@ -444,8 +602,6 @@\n-                if (!nodes.containsKey(dirName)) {\n-                    ImageLocation loc = findLocation(dirName);\n-                    \/\/ If the parent location doesn't exist, the link node cannot exist.\n-                    if (loc != null) {\n-                        nodes.put(dirName, completePackageDirectory(newDirectory(dirName), loc));\n-                        \/\/ When the parent is created its child nodes are created and cached,\n-                        \/\/ but this can still return null if given name wasn't a valid link.\n-                        return nodes.get(name);\n+                \/\/ If no parent exists here, the name cannot be valid.\n+                Directory parent = (Directory) nodes.get(dirName);\n+                if (parent != null) {\n+                    if (!parent.isCompleted()) {\n+                        \/\/ This caches all child links of the parent directory.\n+                        completePackageSubdirectory(parent, findLocation(dirName));\n@@ -453,0 +609,1 @@\n+                    return nodes.get(name);\n@@ -464,1 +621,1 @@\n-            assert name.startsWith(MODULES_ROOT) || name.startsWith(PACKAGES_ROOT);\n+            assert name.startsWith(MODULES_PREFIX) || name.startsWith(PACKAGES_PREFIX);\n@@ -467,4 +624,2 @@\n-            \/\/ We cannot use 'isXxxSubdirectory()' methods here since we could\n-            \/\/ be given a top-level directory (for which that test doesn't work).\n-            \/\/ The string MUST start \"\/modules\" or \"\/packages\" here.\n-            if (name.charAt(1) == 'm') {\n+            LocationType type = loc.getType();\n+            if (type == MODULES_DIR || type == MODULES_ROOT) {\n@@ -473,1 +628,2 @@\n-                completePackageDirectory(dir, loc);\n+                assert type == PACKAGES_DIR : \"Invalid location type: \" + loc;\n+                completePackageSubdirectory(dir, loc);\n@@ -478,6 +634,1 @@\n-        \/**\n-         * Completes a modules directory by setting the list of child nodes.\n-         *\n-         * <p>The given directory can be the top level {@code \/modules} directory,\n-         * so it is NOT safe to use {@code isModulesSubdirectory(loc)} here.\n-         *\/\n+        \/** Completes a modules directory by setting the list of child nodes. *\/\n@@ -486,3 +637,11 @@\n-            List<Node> children = createChildNodes(loc, childLoc -> {\n-                if (isModulesSubdirectory(childLoc)) {\n-                    return nodes.computeIfAbsent(childLoc.getFullName(), this::newDirectory);\n+            List<Node> previewOnlyNodes = getPreviewNodesToMerge(dir);\n+            \/\/ We hide preview names from direct lookup, but must also prevent\n+            \/\/ the preview directory from appearing in any META-INF directories.\n+            boolean parentIsMetaInfDir = isMetaInf(dir);\n+            List<Node> children = createChildNodes(loc, previewOnlyNodes.size(), childLoc -> {\n+                LocationType type = childLoc.getType();\n+                if (type == MODULES_DIR) {\n+                    String name = childLoc.getFullName();\n+                    return parentIsMetaInfDir && name.endsWith(\"\/preview\")\n+                            ? null\n+                            : nodes.computeIfAbsent(name, this::newDirectory);\n@@ -490,0 +649,1 @@\n+                    assert type == RESOURCE : \"Invalid location type: \" + loc;\n@@ -495,0 +655,1 @@\n+            children.addAll(previewOnlyNodes);\n@@ -499,7 +660,2 @@\n-        \/**\n-         * Completes a package directory by setting the list of child nodes.\n-         *\n-         * <p>The given directory can be the top level {@code \/packages} directory,\n-         * so it is NOT safe to use {@code isPackagesSubdirectory(loc)} here.\n-         *\/\n-        private Directory completePackageDirectory(Directory dir, ImageLocation loc) {\n+        \/** Completes a package directory by setting the list of child nodes. *\/\n+        private void completePackageSubdirectory(Directory dir, ImageLocation loc) {\n@@ -507,20 +663,24 @@\n-            \/\/ The only directories in the \"\/packages\" namespace are \"\/packages\" or\n-            \/\/ \"\/packages\/<package>\". However, unlike \"\/modules\" directories, the\n-            \/\/ location offsets mean different things.\n-            List<Node> children;\n-            if (dir.getName().equals(PACKAGES_ROOT)) {\n-                \/\/ Top-level directory just contains a list of subdirectories.\n-                children = createChildNodes(loc, c -> nodes.computeIfAbsent(c.getFullName(), this::newDirectory));\n-            } else {\n-                \/\/ A package directory's content is array of offset PAIRS in the\n-                \/\/ Strings table, but we only need the 2nd value of each pair.\n-                IntBuffer intBuffer = getOffsetBuffer(loc);\n-                int offsetCount = intBuffer.capacity();\n-                assert (offsetCount & 0x1) == 0 : \"Offset count must be even: \" + offsetCount;\n-                children = new ArrayList<>(offsetCount \/ 2);\n-                \/\/ Iterate the 2nd offset in each pair (odd indices).\n-                for (int i = 1; i < offsetCount; i += 2) {\n-                    String moduleName = getString(intBuffer.get(i));\n-                    children.add(nodes.computeIfAbsent(\n-                            dir.getName() + \"\/\" + moduleName,\n-                            n -> newLinkNode(n, MODULES_ROOT + \"\/\" + moduleName)));\n+            assert !dir.isCompleted() : \"Directory already completed: \" + dir;\n+            assert loc.getType() == PACKAGES_DIR : \"Invalid location type: \" + loc.getType();\n+\n+            \/\/ In non-preview mode we might skip a very small number of preview-only\n+            \/\/ entries, but it's not worth \"right-sizing\" the array for that.\n+            IntBuffer offsets = getOffsetBuffer(loc);\n+            List<Node> children = new ArrayList<>(offsets.capacity() \/ 2);\n+            ModuleReference.readNameOffsets(offsets, \/*normal*\/ true, previewMode)\n+                    .forEachRemaining(n -> {\n+                        String modName = getString(n);\n+                        Node link = newLinkNode(dir.getName() + \"\/\" + modName, MODULES_PREFIX + \"\/\" + modName);\n+                        children.add(ensureCached(link));\n+                    });\n+            \/\/ If the parent directory exists, there must be at least one child node.\n+            assert !children.isEmpty() : \"Invalid empty package directory: \" + dir;\n+            dir.setChildren(children);\n+        }\n+\n+        \/** Returns the list of child preview nodes to be merged into the given directory. *\/\n+        List<Node> getPreviewNodesToMerge(Directory dir) {\n+            if (previewDirectoriesToMerge != null) {\n+                Directory mergeDir = previewDirectoriesToMerge.get(dir.getName());\n+                if (mergeDir != null) {\n+                    return mergeDir.children;\n@@ -529,3 +689,1 @@\n-            \/\/ This only happens once and \"completes\" the directory.\n-            dir.setChildren(children);\n-            return dir;\n+            return Collections.emptyList();\n@@ -535,1 +693,7 @@\n-         * Creates the list of child nodes for a {@code Directory} based on a given\n+         * Creates the list of child nodes for a modules {@code Directory} from\n+         * its parent location.\n+         *\n+         * <p>The {@code getChildFn} may return existing cached nodes rather\n+         * than creating them, and if newly created nodes are to be cached,\n+         * it is the job of {@code getChildFn}, or the caller of this method,\n+         * to do that.\n@@ -537,2 +701,7 @@\n-         * <p>Note: This cannot be used for package subdirectories as they have\n-         * child offsets stored differently to other directories.\n+         * @param loc a location relating to a \"\/modules\" directory.\n+         * @param extraNodesCount a known number of preview-only child nodes\n+         *     which will be merged onto the end of the returned list later.\n+         * @param getChildFn a function to return a node for each child location\n+         *     (or null to skip putting anything in the list).\n+         * @return the list of the non-null child nodes, returned by\n+         *     {@code getChildFn}, in the order of the locations entries.\n@@ -540,1 +709,3 @@\n-        private List<Node> createChildNodes(ImageLocation loc, Function<ImageLocation, Node> newChildFn) {\n+        private List<Node> createChildNodes(ImageLocation loc, int extraNodesCount, Function<ImageLocation, Node> getChildFn) {\n+            LocationType type = loc.getType();\n+            assert type == MODULES_DIR || type == MODULES_ROOT : \"Invalid location type: \" + loc;\n@@ -543,1 +714,1 @@\n-            List<Node> children = new ArrayList<>(childCount);\n+            List<Node> children = new ArrayList<>(childCount + extraNodesCount);\n@@ -545,1 +716,4 @@\n-                children.add(newChildFn.apply(getLocation(offsets.get(i))));\n+                Node childNode = getChildFn.apply(getLocation(offsets.get(i)));\n+                if (childNode != null) {\n+                    children.add(childNode);\n+                }\n@@ -552,1 +726,1 @@\n-            assert !isResource(dir) : \"Not a directory: \" + dir.getFullName();\n+            assert dir.getType() != RESOURCE : \"Not a directory: \" + dir.getFullName();\n@@ -559,26 +733,0 @@\n-        \/**\n-         * Efficiently determines if an image location is a resource.\n-         *\n-         * <p>A resource must have a valid module associated with it, so its\n-         * module offset must be non-zero, and not equal to the offsets for\n-         * \"\/modules\/...\" or \"\/packages\/...\" entries.\n-         *\/\n-        private boolean isResource(ImageLocation loc) {\n-            int moduleOffset = loc.getModuleOffset();\n-            return moduleOffset != 0\n-                    && moduleOffset != modulesStringOffset\n-                    && moduleOffset != packagesStringOffset;\n-        }\n-\n-        \/**\n-         * Determines if an image location is a directory in the {@code \/modules}\n-         * namespace (if so, the location name is the node name).\n-         *\n-         * <p>In jimage, every {@code ImageLocation} under {@code \/modules\/} is a\n-         * directory and has the same value for {@code getModule()}, and {@code\n-         * getModuleOffset()}.\n-         *\/\n-        private boolean isModulesSubdirectory(ImageLocation loc) {\n-            return loc.getModuleOffset() == modulesStringOffset;\n-        }\n-\n@@ -600,1 +748,0 @@\n-            assert name.equals(loc.getFullName(true)) : \"Mismatched location for resource: \" + name;\n@@ -832,1 +979,1 @@\n-        private void setChildren(List<Node> children) {\n+        private void setChildren(List<? extends Node> children) {\n@@ -837,0 +984,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":321,"deletions":173,"binary":false,"changes":494,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.jimage;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.function.Function;\n-\n-\/**\n- * Factory to get ImageReader\n- *\n- * @implNote This class needs to maintain JDK 8 source compatibility.\n- *\n- * It is used internally in the JDK to implement jimage\/jrtfs access,\n- * but also compiled and delivered as part of the jrtfs.jar to support access\n- * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n- *\/\n-public class ImageReaderFactory {\n-    private ImageReaderFactory() {}\n-\n-    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n-    private static final Path BOOT_MODULES_JIMAGE;\n-\n-    static {\n-        FileSystem fs;\n-        if (ImageReaderFactory.class.getClassLoader() == null) {\n-            try {\n-                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n-                        .getMethod(\"theFileSystem\")\n-                        .invoke(null);\n-            } catch (Exception e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n-        } else {\n-            fs = FileSystems.getDefault();\n-        }\n-        BOOT_MODULES_JIMAGE = fs.getPath(JAVA_HOME, \"lib\", \"modules\");\n-    }\n-\n-    private static final Map<Path, ImageReader> readers = new ConcurrentHashMap<>();\n-\n-    \/**\n-     * Returns an {@code ImageReader} to read from the given image file\n-     *\/\n-    public static ImageReader get(Path jimage) throws IOException {\n-        Objects.requireNonNull(jimage);\n-        try {\n-            return readers.computeIfAbsent(jimage, OPENER);\n-        } catch (UncheckedIOException io) {\n-            throw io.getCause();\n-        }\n-    }\n-\n-    private static Function<Path, ImageReader> OPENER = new Function<Path, ImageReader>() {\n-        public ImageReader apply(Path path) {\n-            try {\n-                return ImageReader.open(path);\n-            } catch (IOException io) {\n-                throw new UncheckedIOException(io);\n-            }\n-        }\n-    };\n-\n-    \/**\n-     * Returns the {@code ImageReader} to read the image file in this\n-     * run-time image.\n-     *\n-     * @throws UncheckedIOException if an I\/O error occurs\n-     *\/\n-    public static ImageReader getImageReader() {\n-        try {\n-            return get(BOOT_MODULES_JIMAGE);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReaderFactory.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,13 @@\n+    \/\/ String offset constants are useful for efficient classification\n+    \/\/ of location entries without string comparison. These may change\n+    \/\/ between jimage versions (they are checked during initialization).\n+\n+    \/** Fixed offset for the empty string in the strings table. *\/\n+    int EMPTY_STRING_OFFSET = 0;\n+    \/** Fixed offset for the string \"class\" in the strings table. *\/\n+    int CLASS_STRING_OFFSET = 1;\n+    \/** Fixed offset for the string \"modules\" in the strings table. *\/\n+    int MODULES_STRING_OFFSET = 7;\n+    \/** Fixed offset for the string \"packages\" in the strings table. *\/\n+    int PACKAGES_STRING_OFFSET = 15;\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageStrings.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,264 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.jimage;\n+\n+import java.nio.IntBuffer;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+\/**\n+ * Represents the module entries stored in the buffer of {@code \"\/packages\/xxx\"}\n+ * image locations (package subdirectories). These entries use flags which are\n+ * similar to, but distinct from, the {@link ImageLocation} flags, so\n+ * encapsulating them here helps avoid confusion.\n+ *\n+ * @implNote This class needs to maintain JDK 8 source compatibility.\n+ *\n+ * It is used internally in the JDK to implement jimage\/jrtfs access,\n+ * but also compiled and delivered as part of the jrtfs.jar to support access\n+ * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n+ *\/\n+public final class ModuleReference implements Comparable<ModuleReference> {\n+    \/\/ These flags are additive (hence \"has-content\" rather than \"is-empty\").\n+\n+    \/** If set, this package exists in preview mode. *\/\n+    private static final int FLAGS_HAS_PREVIEW_VERSION = 0x1;\n+    \/** If set, this package exists in non-preview mode. *\/\n+    private static final int FLAGS_HAS_NORMAL_VERSION = 0x2;\n+    \/** If set, the associated module has resources (in normal or preview mode). *\/\n+    private static final int FLAGS_HAS_CONTENT = 0x4;\n+\n+    \/**\n+     * References are ordered with preview versions first which permits early\n+     * exit when processing preview entries (it's reversed because the default\n+     * order for a boolean is {@code false < true}).\n+     *\/\n+    private static final Comparator<ModuleReference> PREVIEW_FIRST =\n+            Comparator.comparing(ModuleReference::hasPreviewVersion).reversed()\n+                    .thenComparing(ModuleReference::name);\n+\n+    \/**\n+     * Returns a reference for non-empty packages (those with resources) in a\n+     * given module.\n+     *\n+     * <p>The same reference can be used for multiple packages in the same module.\n+     *\/\n+    public static ModuleReference forPackage(String moduleName, boolean isPreview) {\n+        return new ModuleReference(moduleName, FLAGS_HAS_CONTENT | previewFlag(isPreview));\n+    }\n+\n+    \/**\n+     * Returns a reference for empty packages in a given module.\n+     *\n+     * <p>The same reference can be used for multiple packages in the same module.\n+     *\/\n+    public static ModuleReference forEmptyPackage(String moduleName, boolean isPreview) {\n+        return new ModuleReference(moduleName, previewFlag(isPreview));\n+    }\n+\n+    private static int previewFlag(boolean isPreview) {\n+        return isPreview ? FLAGS_HAS_PREVIEW_VERSION : FLAGS_HAS_NORMAL_VERSION;\n+    }\n+\n+    \/** Merges two references for the same module (combining their flags). *\/\n+    public ModuleReference merge(ModuleReference other) {\n+        if (!name.equals(other.name)) {\n+            throw new IllegalArgumentException(\"Cannot merge \" + other + \" with \" + this);\n+        }\n+        \/\/ Because flags are additive, we can just OR them here.\n+        return new ModuleReference(name, flags | other.flags);\n+    }\n+\n+    private final String name;\n+    private final int flags;\n+\n+    private ModuleReference(String moduleName, int flags) {\n+        this.name = Objects.requireNonNull(moduleName);\n+        this.flags = flags;\n+    }\n+\n+    \/** Returns the module name of this reference. *\/\n+    public String name() {\n+        return name;\n+    }\n+\n+    \/**\n+     * Returns whether the package associated with this reference contains\n+     * resources in this reference's module.\n+     *\n+     * <p>An invariant of the module system is that while a package may exist\n+     * under many modules, it only has content in one.\n+     *\/\n+    public boolean hasContent() {\n+        return ((flags & FLAGS_HAS_CONTENT) != 0);\n+    }\n+\n+    \/**\n+     * Returns whether the package associated with this reference has a preview\n+     * version (empty or otherwise) in this reference's module.\n+     *\/\n+    public boolean hasPreviewVersion() {\n+        return (flags & FLAGS_HAS_PREVIEW_VERSION) != 0;\n+    }\n+\n+    \/** Returns whether this reference exists only in preview mode. *\/\n+    public boolean isPreviewOnly() {\n+        return !hasNormalVersion(flags);\n+    }\n+\n+    private static boolean hasNormalVersion(int flags) {\n+        return (flags & FLAGS_HAS_NORMAL_VERSION) != 0;\n+    }\n+\n+    @Override\n+    public int compareTo(ModuleReference rhs) {\n+        return PREVIEW_FIRST.compare(this, rhs);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ModuleReference{ module=\" + name + \", flags=\" + flags + \" }\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof ModuleReference)) {\n+            return false;\n+        }\n+        ModuleReference other = (ModuleReference) obj;\n+        return name.equals(other.name) && flags == other.flags;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(name, flags);\n+    }\n+\n+    \/**\n+     * Reads the content buffer of a package subdirectory to return a sequence\n+     * of module name offsets in the jimage.\n+     *\n+     * @param buffer the content buffer of an {@link ImageLocation} with type\n+     *     {@link ImageLocation.LocationType#PACKAGES_DIR PACKAGES_DIR}.\n+     * @param includeNormal whether to include name offsets for modules present\n+     *     in normal (non-preview) mode.\n+     * @param includePreview whether to include name offsets for modules present\n+     *     in preview mode.\n+     * @return an iterator of module name offsets.\n+     *\/\n+    public static Iterator<Integer> readNameOffsets(\n+            IntBuffer buffer, boolean includeNormal, boolean includePreview) {\n+        int bufferSize = buffer.capacity();\n+        if (bufferSize == 0 || (bufferSize & 0x1) != 0) {\n+            throw new IllegalArgumentException(\"Invalid buffer size\");\n+        }\n+        int testFlags = (includeNormal ? FLAGS_HAS_NORMAL_VERSION : 0)\n+                + (includePreview ? FLAGS_HAS_PREVIEW_VERSION : 0);\n+        if (testFlags == 0) {\n+            throw new IllegalArgumentException(\"Invalid flags\");\n+        }\n+\n+        return new Iterator<Integer>() {\n+            private int idx = nextIdx(0);\n+\n+            int nextIdx(int idx) {\n+                for (; idx < bufferSize; idx += 2) {\n+                    \/\/ If any of the test flags are set, include this entry.\n+                    if ((buffer.get(idx) & testFlags) != 0) {\n+                        return idx;\n+                    } else if (!includeNormal) {\n+                        \/\/ Preview entries are first in the offset buffer, so we\n+                        \/\/ can exit early (by returning the end index) if we are\n+                        \/\/ only iterating preview entries, and have run out.\n+                        break;\n+                    }\n+                }\n+                return bufferSize;\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                return idx < bufferSize;\n+            }\n+\n+            @Override\n+            public Integer next() {\n+                if (idx < bufferSize) {\n+                    int nameOffset = buffer.get(idx + 1);\n+                    idx = nextIdx(idx + 2);\n+                    return nameOffset;\n+                }\n+                throw new NoSuchElementException();\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * Writes a list of module references to a given buffer. The given references\n+     * list is checked carefully to ensure the written buffer will be valid.\n+     *\n+     * <p>Entries are written in order, taking two integer slots per entry as\n+     * {@code [<flags>, <encoded-name>]}.\n+     *\n+     * @param refs the references to write, correctly ordered.\n+     * @param buffer destination buffer.\n+     * @param nameEncoder encoder for module names.\n+     * @throws IllegalArgumentException in the references are invalid in any way.\n+     *\/\n+    public static void write(\n+            List<ModuleReference> refs, IntBuffer buffer, Function<String, Integer> nameEncoder) {\n+        if (refs.isEmpty()) {\n+            throw new IllegalArgumentException(\"References list must be non-empty\");\n+        }\n+        int expectedCapacity = 2 * refs.size();\n+        if (buffer.capacity() != expectedCapacity) {\n+            throw new IllegalArgumentException(\n+                    \"Invalid buffer capacity: expected \" + expectedCapacity + \", got \" + buffer.capacity());\n+        }\n+        \/\/ This catches exact duplicates in the list.\n+        refs.stream().reduce((lhs, rhs) -> {\n+            if (lhs.compareTo(rhs) >= 0) {\n+                throw new IllegalArgumentException(\"References must be strictly ordered: \" + refs);\n+            }\n+            return rhs;\n+        });\n+        \/\/ Distinct references can have the same name (but we don't allow this).\n+        if (refs.stream().map(ModuleReference::name).distinct().count() != refs.size()) {\n+            throw new IllegalArgumentException(\"Reference names must be unique: \" + refs);\n+        }\n+        if (refs.stream().filter(ModuleReference::hasContent).count() > 1) {\n+            throw new IllegalArgumentException(\"At most one reference can have content: \" + refs);\n+        }\n+        for (ModuleReference modRef : refs) {\n+            buffer.put(modRef.flags);\n+            buffer.put(nameEncoder.apply(modRef.name));\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ModuleReference.java","additions":264,"deletions":0,"binary":false,"changes":264,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.jimage;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/**\n+ * Specifies the preview mode used to open a jimage file via {@link ImageReader}.\n+ *\n+ * @implNote This class needs to maintain JDK 8 source compatibility.\n+ *\n+ * It is used internally in the JDK to implement jimage\/jrtfs access,\n+ * but also compiled and delivered as part of the jrtfs.jar to support access\n+ * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n+ * *\/\n+public enum PreviewMode {\n+    \/**\n+     * Preview mode is disabled. No preview classes or resources will be available\n+     * in this mode.\n+     *\/\n+    DISABLED,\n+    \/**\n+     * Preview mode is enabled. If preview classes or resources exist in the jimage file,\n+     * they will be made available.\n+     *\/\n+    ENABLED,\n+    \/**\n+     * The preview mode of the current run-time, typically determined by the\n+     * {@code --enable-preview} flag.\n+     *\/\n+    FOR_RUNTIME;\n+\n+    \/**\n+     * Resolves whether preview mode should be enabled for an {@link ImageReader}.\n+     *\/\n+    public boolean isPreviewModeEnabled() {\n+        if (!ENABLE_PREVIEW_MODE) {\n+            return false;\n+        }\n+        \/\/ A switch, instead of an abstract method, saves 3 subclasses.\n+        switch (this) {\n+            case DISABLED:\n+                return false;\n+            case ENABLED:\n+                return true;\n+            case FOR_RUNTIME:\n+                \/\/ We want to call jdk.internal.misc.PreviewFeatures.isEnabled(), but\n+                \/\/ is not available in older JREs, so we must look to it reflectively.\n+                Class<?> clazz;\n+                try {\n+                    clazz = Class.forName(\"jdk.internal.misc.PreviewFeatures\");\n+                } catch (ClassNotFoundException e) {\n+                    \/\/ It is valid and expected that the class might not exist (JDK-8).\n+                    return false;\n+                }\n+                try {\n+                    return (Boolean) clazz.getDeclaredMethod(\"isEnabled\").invoke(null);\n+                } catch (NoSuchMethodException | IllegalAccessException |\n+                         InvocationTargetException e) {\n+                    \/\/ But if the class exists, the method must exist and be callable.\n+                    throw new ExceptionInInitializerError(e);\n+                }\n+            default:\n+                throw new IllegalStateException(\"Invalid mode: \" + this);\n+        }\n+    }\n+    ;\n+\n+    \/\/ Temporary system property to disable preview patching and enable the new preview mode\n+    \/\/ feature for testing\/development. Once the preview mode feature is finished, the value\n+    \/\/ will be always 'true' and this code, and all related dead-code can be removed.\n+    private static final boolean DISABLE_PREVIEW_PATCHING_DEFAULT = false;\n+    private static final boolean ENABLE_PREVIEW_MODE = Boolean.parseBoolean(\n+            System.getProperty(\n+                    \"DISABLE_PREVIEW_PATCHING\",\n+                    Boolean.toString(DISABLE_PREVIEW_PATCHING_DEFAULT)));\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/PreviewMode.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.jimage;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+\n+\/**\n+ * Static holder class for singleton {@link ImageReader} instance.\n+ *\n+ * @implNote This class needs to maintain JDK 8 source compatibility.\n+ *\n+ * It is used internally in the JDK to implement jimage\/jrtfs access,\n+ * but also compiled and delivered as part of the jrtfs.jar to support access\n+ * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n+ *\/\n+public class SystemImageReader {\n+    private static final ImageReader SYSTEM_IMAGE_READER;\n+\n+    static {\n+        String javaHome = System.getProperty(\"java.home\");\n+        FileSystem fs;\n+        if (SystemImageReader.class.getClassLoader() == null) {\n+            try {\n+                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n+                        .getMethod(\"theFileSystem\")\n+                        .invoke(null);\n+            } catch (Exception e) {\n+                throw new ExceptionInInitializerError(e);\n+            }\n+        } else {\n+            fs = FileSystems.getDefault();\n+        }\n+        try {\n+            SYSTEM_IMAGE_READER = ImageReader.open(fs.getPath(javaHome, \"lib\", \"modules\"), PreviewMode.FOR_RUNTIME);\n+        } catch (IOException e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns the singleton {@code ImageReader} to read the image file in this\n+     * run-time image. The returned instance must not be closed.\n+     *\n+     * @throws UncheckedIOException if an I\/O error occurs\n+     *\/\n+    public static ImageReader get() {\n+        return SYSTEM_IMAGE_READER;\n+    }\n+\n+    private SystemImageReader() {}\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/SystemImageReader.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -61,1 +61,0 @@\n-import java.util.Map;\n@@ -66,0 +65,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -84,3 +84,9 @@\n-    JrtFileSystem(JrtFileSystemProvider provider, Map<String, ?> env)\n-            throws IOException\n-    {\n+    \/**\n+     * Special constructor for the singleton system jrt file system. This creates\n+     * a non-closable instance, and should only be called once by {@link\n+     * JrtFileSystemProvider}.\n+     *\n+     * @param provider the provider opening the file system.\n+     *\/\n+    JrtFileSystem(JrtFileSystemProvider provider)\n+            throws IOException {\n@@ -88,1 +94,1 @@\n-        this.image = SystemImage.open();  \/\/ open image file\n+        this.image = SystemImage.open(PreviewMode.FOR_RUNTIME);  \/\/ open image file\n@@ -90,1 +96,16 @@\n-        this.isClosable = env != null;\n+        \/\/ Only the system singleton jrt file system is \"unclosable\".\n+        this.isClosable = false;\n+    }\n+\n+    \/**\n+     * Creates a new, non-system, instance of the jrt file system.\n+     *\n+     * @param provider the provider opening the file system.\n+     * @param mode controls whether preview resources are visible.\n+     *\/\n+    JrtFileSystem(JrtFileSystemProvider provider, PreviewMode mode)\n+            throws IOException {\n+        this.provider = provider;\n+        this.image = SystemImage.open(mode);  \/\/ open image file\n+        this.isOpen = true;\n+        this.isClosable = true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/JrtFileSystem.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.internal.jimage.PreviewMode;\n+\n@@ -47,1 +49,1 @@\n- * .jimage file or exploded modules directory of underlying JDK.\n+ * a jimage file, or exploded modules directory of underlying JDK.\n@@ -110,1 +112,11 @@\n-            return new JrtFileSystem(this, env);\n+            return new JrtFileSystem(this, parsePreviewMode(env.get(\"previewMode\")));\n+        }\n+    }\n+\n+    \/\/ Currently this does not support specifying \"for runtime\", because it is\n+    \/\/ expected that callers creating non-standard image readers will not be\n+    \/\/ using them to read resources for the current runtime (they would just\n+    \/\/ use \"jrt:\" URLs if they were doing that).\n+    private static PreviewMode parsePreviewMode(Object envValue) {\n+        if (envValue instanceof String && Boolean.parseBoolean((String) envValue)) {\n+            return PreviewMode.ENABLED;\n@@ -112,0 +124,2 @@\n+        \/\/ Default (unspecified\/null or bad parameter) is to not use preview mode.\n+        return PreviewMode.DISABLED;\n@@ -211,1 +225,2 @@\n-                        this.theFileSystem = fs = new JrtFileSystem(this, null);\n+                        \/\/ Special constructor call for singleton instance.\n+                        this.theFileSystem = fs = new JrtFileSystem(this);\n@@ -229,1 +244,1 @@\n-    static final JrtPath toJrtPath(Path path) {\n+    static JrtPath toJrtPath(Path path) {\n@@ -260,1 +275,1 @@\n-    public final void delete(Path path) throws IOException {\n+    public void delete(Path path) throws IOException {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/JrtFileSystemProvider.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -57,1 +58,1 @@\n-    static SystemImage open() throws IOException {\n+    static SystemImage open(PreviewMode mode) throws IOException {\n@@ -60,1 +61,1 @@\n-            final ImageReader image = ImageReader.open(moduleImageFile);\n+            final ImageReader image = ImageReader.open(moduleImageFile, mode);\n@@ -76,0 +77,1 @@\n+\n@@ -78,0 +80,4 @@\n+        \/\/ TODO: Support preview mode in ExplodedImage and remove this check.\n+        if (mode.isPreviewModeEnabled())\n+            throw new UnsupportedOperationException(\n+                    \"Preview mode not yet supported for exploded images\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/SystemImage.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-import jdk.internal.jimage.ImageReaderFactory;\n+import jdk.internal.jimage.SystemImageReader;\n@@ -395,1 +395,1 @@\n-        static final ImageReader READER = ImageReaderFactory.getImageReader();\n+        static final ImageReader READER = SystemImageReader.get();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.jimage.ImageReaderFactory;\n+import jdk.internal.jimage.SystemImageReader;\n@@ -51,1 +51,1 @@\n-    private static final ImageReader READER = ImageReaderFactory.getImageReader();\n+    private static final ImageReader READER = SystemImageReader.get();\n@@ -112,0 +112,2 @@\n+        \/\/ Note: UncheckedIOException is thrown by the Node subclass in\n+        \/\/ ExplodedImage (this not obvious, so worth calling out).\n@@ -114,1 +116,1 @@\n-        } catch (IOException ioe) {\n+        } catch (IOException | UncheckedIOException ioe) {\n@@ -127,0 +129,4 @@\n+        if (path.indexOf('%') == -1) {\n+            \/\/ Nothing to decode (overwhelmingly common case).\n+            return path;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-    private ByteOrder byteOrder;\n-    private ImageStringsWriter strings;\n+    private final ByteOrder byteOrder;\n+    private final ImageStringsWriter strings;\n@@ -44,10 +44,6 @@\n-    private List<ImageLocationWriter> input;\n-    private ImageStream headerStream;\n-    private ImageStream redirectStream;\n-    private ImageStream locationOffsetStream;\n-    private ImageStream locationStream;\n-    private ImageStream allIndexStream;\n-\n-    public BasicImageWriter() {\n-        this(ByteOrder.nativeOrder());\n-    }\n+    private final List<ImageLocationWriter> input;\n+    private final ImageStream headerStream;\n+    private final ImageStream redirectStream;\n+    private final ImageStream locationOffsetStream;\n+    private final ImageStream locationStream;\n+    private final ImageStream allIndexStream;\n@@ -78,2 +74,6 @@\n-    public void addLocation(String fullname, long contentOffset,\n-            long compressedSize, long uncompressedSize) {\n+    public void addLocation(\n+            String fullname,\n+            long contentOffset,\n+            long compressedSize,\n+            long uncompressedSize,\n+            int previewFlags) {\n@@ -82,1 +82,1 @@\n-                        contentOffset, compressedSize, uncompressedSize);\n+                        contentOffset, compressedSize, uncompressedSize, previewFlags);\n@@ -91,4 +91,0 @@\n-    int getLocationsCount() {\n-        return input.size();\n-    }\n-\n@@ -177,12 +173,0 @@\n-\n-    ImageLocationWriter find(String key) {\n-        int index = redirect[ImageStringsReader.hashCode(key) % length];\n-\n-        if (index < 0) {\n-            index = -index - 1;\n-        } else {\n-            index = ImageStringsReader.hashCode(key, index) % length;\n-        }\n-\n-        return locations[index];\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/BasicImageWriter.java","additions":16,"deletions":32,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import jdk.internal.jimage.ImageLocation;\n@@ -230,25 +231,2 @@\n-        ResourcePool resultResources;\n-        try {\n-            resultResources = pluginSupport.visitResources(allContent);\n-            if (generateRuntimeImage) {\n-                \/\/ Keep track of non-modules resources for linking from a run-time image\n-                resultResources = addNonClassResourcesTrackFiles(resultResources,\n-                                                                 writer);\n-                \/\/ Generate the diff between the input resources from packaged\n-                \/\/ modules in 'allContent' to the plugin- or otherwise\n-                \/\/ generated-content in 'resultResources'\n-                resultResources = addResourceDiffFiles(allContent.resourcePool(),\n-                                                       resultResources,\n-                                                       writer);\n-            }\n-        } catch (PluginException pe) {\n-            if (JlinkTask.DEBUG) {\n-                pe.printStackTrace();\n-            }\n-            throw pe;\n-        } catch (Exception ex) {\n-            if (JlinkTask.DEBUG) {\n-                ex.printStackTrace();\n-            }\n-            throw new IOException(ex);\n-        }\n+        ResourcePool resultResources =\n+                getResourcePool(allContent, writer, pluginSupport, generateRuntimeImage);\n@@ -285,0 +263,2 @@\n+                int locFlags = ImageLocation.getFlags(\n+                        res.path(), p -> resultResources.findEntry(p).isPresent());\n@@ -286,1 +266,1 @@\n-                writer.addLocation(path, offset[0], compressedSize, uncompressedSize);\n+                writer.addLocation(path, offset[0], compressedSize, uncompressedSize, locFlags);\n@@ -310,0 +290,34 @@\n+    private static ResourcePool getResourcePool(\n+            ResourcePoolManager allContent,\n+            BasicImageWriter writer,\n+            ImagePluginStack pluginSupport,\n+            boolean generateRuntimeImage)\n+            throws IOException {\n+        ResourcePool resultResources;\n+        try {\n+            resultResources = pluginSupport.visitResources(allContent);\n+            if (generateRuntimeImage) {\n+                \/\/ Keep track of non-modules resources for linking from a run-time image\n+                resultResources = addNonClassResourcesTrackFiles(resultResources,\n+                        writer);\n+                \/\/ Generate the diff between the input resources from packaged\n+                \/\/ modules in 'allContent' to the plugin- or otherwise\n+                \/\/ generated-content in 'resultResources'\n+                resultResources = addResourceDiffFiles(allContent.resourcePool(),\n+                        resultResources,\n+                        writer);\n+            }\n+        } catch (PluginException pe) {\n+            if (JlinkTask.DEBUG) {\n+                pe.printStackTrace();\n+            }\n+            throw pe;\n+        } catch (Exception ex) {\n+            if (JlinkTask.DEBUG) {\n+                ex.printStackTrace();\n+            }\n+            throw new IOException(ex);\n+        }\n+        return resultResources;\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageFileCreator.java","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-    static ImageLocationWriter newLocation(String fullName,\n+    static ImageLocationWriter newLocation(\n+            String fullName,\n@@ -58,1 +59,4 @@\n-            long contentOffset, long compressedSize, long uncompressedSize) {\n+            long contentOffset,\n+            long compressedSize,\n+            long uncompressedSize,\n+            int previewFlags) {\n@@ -93,7 +97,8 @@\n-               .addAttribute(ATTRIBUTE_MODULE, moduleName)\n-               .addAttribute(ATTRIBUTE_PARENT, parentName)\n-               .addAttribute(ATTRIBUTE_BASE, baseName)\n-               .addAttribute(ATTRIBUTE_EXTENSION, extensionName)\n-               .addAttribute(ATTRIBUTE_OFFSET, contentOffset)\n-               .addAttribute(ATTRIBUTE_COMPRESSED, compressedSize)\n-               .addAttribute(ATTRIBUTE_UNCOMPRESSED, uncompressedSize);\n+                .addAttribute(ATTRIBUTE_MODULE, moduleName)\n+                .addAttribute(ATTRIBUTE_PARENT, parentName)\n+                .addAttribute(ATTRIBUTE_BASE, baseName)\n+                .addAttribute(ATTRIBUTE_EXTENSION, extensionName)\n+                .addAttribute(ATTRIBUTE_OFFSET, contentOffset)\n+                .addAttribute(ATTRIBUTE_COMPRESSED, compressedSize)\n+                .addAttribute(ATTRIBUTE_UNCOMPRESSED, uncompressedSize)\n+                .addAttribute(ATTRIBUTE_PREVIEW_FLAGS, previewFlags);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageLocationWriter.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import jdk.internal.jimage.ImageLocation;\n+import jdk.internal.jimage.ModuleReference;\n+\n@@ -32,0 +35,1 @@\n+import java.util.Comparator;\n@@ -33,0 +37,1 @@\n+import java.util.HashSet;\n@@ -38,1 +43,1 @@\n-import java.util.TreeSet;\n+import java.util.stream.Collectors;\n@@ -42,1 +47,0 @@\n- *\n@@ -47,1 +51,1 @@\n-        return path.startsWith(\"\/packages\") || path.startsWith(\"\/modules\");\n+        return path.startsWith(\"\/packages\/\") || path.startsWith(\"\/modules\/\");\n@@ -53,1 +57,2 @@\n-    private static class Node {\n+    \/\/ Visible for testing only.\n+    static class Node {\n@@ -69,0 +74,8 @@\n+        private void setLocation(ImageLocationWriter loc) {\n+            \/\/ This *can* be called more than once, but only with the same instance.\n+            if (this.loc != null && loc != this.loc) {\n+                throw new IllegalStateException(\"Cannot add different locations: \" + name);\n+            }\n+            this.loc = Objects.requireNonNull(loc);\n+        }\n+\n@@ -98,1 +111,2 @@\n-    private static final class ResourceNode extends Node {\n+    \/\/ Visible for testing only.\n+    static final class ResourceNode extends Node {\n@@ -105,9 +119,22 @@\n-    private static class PackageNode extends Node {\n-        \/**\n-         * A reference to a package. Empty packages can be located inside one or\n-         * more modules. A package with classes exist in only one module.\n-         *\/\n-        static final class PackageReference {\n-\n-            private final String name;\n-            private final boolean isEmpty;\n+    \/**\n+     * A 2nd level package directory, {@code \"\/packages\/<package-name>\"}.\n+     *\n+     * <p>While package paths can exist within many modules, for each package\n+     * there is at most one module in which that package has resources.\n+     *\n+     * <p>For example, the package path {@code java\/util} exists in both the\n+     * {@code java.base} and {@code java.logging} modules. This means both\n+     * {@code \"\/packages\/java.util\/java.base\"} and\n+     * {@code \"\/packages\/java.util\/java.logging\"} will exist, but only\n+     * {@code \"java.base\"} entry will be marked as having content.\n+     *\n+     * <p>When processing module references in non-preview mode, entries marked\n+     * as {@link ModuleReference#isPreviewOnly() preview-only} must be ignored.\n+     *\n+     * <p>If all entries in a package are preview-only, then the package's flags\n+     * have {@link ImageLocation#FLAGS_IS_PREVIEW_ONLY FLAGS_IS_PREVIEW_ONLY}\n+     * set, and the entire package must be ignored.\n+     *\/\n+    \/\/ Visible for testing only.\n+    static final class PackageNode extends Node {\n+        private final List<ModuleReference> moduleReferences;\n@@ -115,3 +142,4 @@\n-            PackageReference(String name, boolean isEmpty) {\n-                this.name = Objects.requireNonNull(name);\n-                this.isEmpty = isEmpty;\n+        PackageNode(String name, List<ModuleReference> moduleReferences, Node parent) {\n+            super(name, parent);\n+            if (moduleReferences.isEmpty()) {\n+                throw new IllegalStateException(\"Package must be associated with modules: \" + name);\n@@ -119,4 +147,2 @@\n-\n-            @Override\n-            public String toString() {\n-                return name + \"[empty:\" + isEmpty + \"]\";\n+            if (moduleReferences.stream().filter(ModuleReference::hasContent).count() > 1) {\n+                throw new IllegalStateException(\"Multiple modules contain non-empty package: \" + name);\n@@ -124,0 +150,1 @@\n+            this.moduleReferences = Collections.unmodifiableList(moduleReferences);\n@@ -126,11 +153,2 @@\n-        private final Map<String, PackageReference> references = new TreeMap<>();\n-\n-        PackageNode(String name, Node parent) {\n-            super(name, parent);\n-        }\n-\n-        private void addReference(String name, boolean isEmpty) {\n-            PackageReference ref = references.get(name);\n-            if (ref == null || ref.isEmpty) {\n-                references.put(name, new PackageReference(name, isEmpty));\n-            }\n+        List<ModuleReference> getModuleReferences() {\n+            return moduleReferences;\n@@ -138,0 +156,1 @@\n+    }\n@@ -139,12 +158,5 @@\n-        private void validate() {\n-            boolean exists = false;\n-            for (PackageReference ref : references.values()) {\n-                if (!ref.isEmpty) {\n-                    if (exists) {\n-                        throw new RuntimeException(\"Multiple modules to contain package \"\n-                                + getName());\n-                    } else {\n-                        exists = true;\n-                    }\n-                }\n-            }\n+    \/\/ Not serialized, and never stored in any field of any class that is.\n+    @SuppressWarnings(\"serial\")\n+    private static final class InvalidTreeException extends Exception {\n+        public InvalidTreeException(Node badNode) {\n+            super(\"Resources tree, invalid data structure, skipping: \" + badNode.getPath());\n@@ -152,0 +164,3 @@\n+        \/\/ Exception only used for program flow, not debugging.\n+        @Override\n+        public Throwable fillInStackTrace() {return this;}\n@@ -157,1 +172,3 @@\n-    private static final class Tree {\n+    \/\/ Visible for testing only.\n+    static final class Tree {\n+        private static final String PREVIEW_PREFIX = \"META-INF\/preview\/\";\n@@ -162,2 +179,1 @@\n-        private Node modules;\n-        private Node packages;\n+        private Node packagesRoot;\n@@ -165,2 +181,4 @@\n-        private Tree(List<String> paths) {\n-            this.paths = paths;\n+        \/\/ Visible for testing only.\n+        Tree(List<String> paths) {\n+            this.paths = paths.stream().sorted(Comparator.reverseOrder()).toList();\n+            \/\/ Root node is not added to the directAccess map.\n@@ -172,21 +190,15 @@\n-            modules = new Node(\"modules\", root);\n-            directAccess.put(modules.getPath(), modules);\n-\n-            Map<String, Set<String>> moduleToPackage = new TreeMap<>();\n-            Map<String, Set<String>> packageToModule = new TreeMap<>();\n-\n-            for (String p : paths) {\n-                if (!p.startsWith(\"\/\")) {\n-                    continue;\n-                }\n-                String[] split = p.split(\"\/\");\n-                \/\/ minimum length is 3 items: \/<mod>\/<pkg>\n-                if (split.length < 3) {\n-                    System.err.println(\"Resources tree, invalid data structure, \"\n-                            + \"skipping \" + p);\n-                    continue;\n-                }\n-                Node current = modules;\n-                String module = null;\n-                for (int i = 0; i < split.length; i++) {\n-                    \/\/ When a non terminal node is marked as being a resource, something is wrong.\n+            Node modulesRoot = new Node(\"modules\", root);\n+            directAccess.put(modulesRoot.getPath(), modulesRoot);\n+            packagesRoot = new Node(\"packages\", root);\n+            directAccess.put(packagesRoot.getPath(), packagesRoot);\n+\n+            \/\/ Map of dot-separated package names to module references (those\n+            \/\/ in which the package appear). References are merged after to\n+            \/\/ ensure each module name appears only once, but temporarily a\n+            \/\/ module may have several entries per package (e.g. with-content,\n+            \/\/ without-content, normal, preview-only etc..).\n+            Map<String, Set<ModuleReference>> packageToModules = new TreeMap<>();\n+            for (String fullPath : paths) {\n+                try {\n+                    processPath(fullPath, modulesRoot, packageToModules);\n+                } catch (InvalidTreeException err) {\n@@ -194,54 +206,2 @@\n-                    \/\/ invalid directory entry marled as not directory (see 8131762)\n-                    if (current instanceof ResourceNode) {\n-                        System.err.println(\"Resources tree, invalid data structure, \"\n-                                + \"skipping \" + p);\n-                        continue;\n-                    }\n-                    String s = split[i];\n-                    if (!s.isEmpty()) {\n-                        \/\/ First item, this is the module, simply add a new node to the\n-                        \/\/ tree.\n-                        if (module == null) {\n-                            module = s;\n-                        }\n-                        Node n = current.children.get(s);\n-                        if (n == null) {\n-                            if (i == split.length - 1) { \/\/ Leaf\n-                                n = new ResourceNode(s, current);\n-                                String pkg = toPackageName(n.parent);\n-                                \/\/System.err.println(\"Adding a resource node. pkg \" + pkg + \", name \" + s);\n-                                if (pkg != null && !pkg.startsWith(\"META-INF\")) {\n-                                    Set<String> pkgs = moduleToPackage.get(module);\n-                                    if (pkgs == null) {\n-                                        pkgs = new TreeSet<>();\n-                                        moduleToPackage.put(module, pkgs);\n-                                    }\n-                                    pkgs.add(pkg);\n-                                }\n-                            } else { \/\/ put only sub trees, no leaf\n-                                n = new Node(s, current);\n-                                directAccess.put(n.getPath(), n);\n-                                String pkg = toPackageName(n);\n-                                if (pkg != null && !pkg.startsWith(\"META-INF\")) {\n-                                    Set<String> mods = packageToModule.get(pkg);\n-                                    if (mods == null) {\n-                                        mods = new TreeSet<>();\n-                                        packageToModule.put(pkg, mods);\n-                                    }\n-                                    mods.add(module);\n-                                }\n-                            }\n-                        }\n-                        current = n;\n-                    }\n-                }\n-            }\n-            packages = new Node(\"packages\", root);\n-            directAccess.put(packages.getPath(), packages);\n-            \/\/ The subset of package nodes that have some content.\n-            \/\/ These packages exist only in a single module.\n-            for (Map.Entry<String, Set<String>> entry : moduleToPackage.entrySet()) {\n-                for (String pkg : entry.getValue()) {\n-                    PackageNode pkgNode = new PackageNode(pkg, packages);\n-                    pkgNode.addReference(entry.getKey(), false);\n-                    directAccess.put(pkgNode.getPath(), pkgNode);\n+                    \/\/ invalid directory entry marked as not directory (see 8131762).\n+                    System.err.println(err.getMessage());\n@@ -251,10 +211,13 @@\n-            \/\/ All packages\n-            for (Map.Entry<String, Set<String>> entry : packageToModule.entrySet()) {\n-                \/\/ Do we already have a package node?\n-                PackageNode pkgNode = (PackageNode) packages.getChildren(entry.getKey());\n-                if (pkgNode == null) {\n-                    pkgNode = new PackageNode(entry.getKey(), packages);\n-                }\n-                for (String module : entry.getValue()) {\n-                    pkgNode.addReference(module, true);\n-                }\n+            \/\/ We've collected information for all \"packages\", including the root\n+            \/\/ (empty) package and anything under \"META-INF\". However, these should\n+            \/\/ not have entries in the \"\/packages\" directory.\n+            packageToModules.keySet().removeIf(p -> p.isEmpty() || p.equals(\"META-INF\") || p.startsWith(\"META-INF.\"));\n+            packageToModules.forEach((pkgName, modRefs) -> {\n+                \/\/ Merge multiple refs for the same module.\n+                List<ModuleReference> pkgModules = modRefs.stream()\n+                        .collect(Collectors.groupingBy(ModuleReference::name))\n+                        .values().stream()\n+                        .map(refs -> refs.stream().reduce(ModuleReference::merge).orElseThrow())\n+                        .sorted()\n+                        .toList();\n+                PackageNode pkgNode = new PackageNode(pkgName, pkgModules, packagesRoot);\n@@ -262,0 +225,16 @@\n+            });\n+        }\n+\n+        private void processPath(\n+                String fullPath,\n+                Node modulesRoot,\n+                Map<String, Set<ModuleReference>> packageToModules)\n+                throws InvalidTreeException {\n+            \/\/ Paths are untrusted, so be careful about checking expected format.\n+            if (!fullPath.startsWith(\"\/\") || fullPath.endsWith(\"\/\") || fullPath.contains(\"\/\/\")) {\n+                return;\n+            }\n+            int modEnd = fullPath.indexOf('\/', 1);\n+            \/\/ Ensure non-empty module name with non-empty suffix.\n+            if (modEnd <= 1) {\n+                return;\n@@ -263,3 +242,11 @@\n-            \/\/ Validate that the packages are well formed.\n-            for (Node n : packages.children.values()) {\n-                ((PackageNode)n).validate();\n+            String modName = fullPath.substring(1, modEnd);\n+            String pkgPath = fullPath.substring(modEnd + 1);\n+\n+            Node parentNode = getDirectoryNode(modName, modulesRoot);\n+            boolean isPreviewPath = false;\n+            if (pkgPath.startsWith(PREVIEW_PREFIX)) {\n+                \/\/ For preview paths, process nodes relative to the preview directory.\n+                pkgPath = pkgPath.substring(PREVIEW_PREFIX.length());\n+                Node metaInf = getDirectoryNode(\"META-INF\", parentNode);\n+                parentNode = getDirectoryNode(\"preview\", metaInf);\n+                isPreviewPath = true;\n@@ -268,0 +255,26 @@\n+            int pathEnd = pkgPath.lastIndexOf('\/');\n+            \/\/ From invariants tested above, this must now be well-formed.\n+            String fullPkgName = (pathEnd == -1) ? \"\" : pkgPath.substring(0, pathEnd).replace('\/', '.');\n+            String resourceName = pkgPath.substring(pathEnd + 1);\n+            \/\/ Intermediate packages are marked \"empty\" (no resources). This might\n+            \/\/ later be merged with a non-empty reference for the same package.\n+            ModuleReference emptyRef = ModuleReference.forEmptyPackage(modName, isPreviewPath);\n+\n+            \/\/ Work down through empty packages to final resource.\n+            for (int i = pkgEndIndex(fullPkgName, 0); i != -1; i = pkgEndIndex(fullPkgName, i)) {\n+                \/\/ Due to invariants already checked, pkgName is non-empty.\n+                String pkgName = fullPkgName.substring(0, i);\n+                packageToModules.computeIfAbsent(pkgName, p -> new HashSet<>()).add(emptyRef);\n+                String childNodeName = pkgName.substring(pkgName.lastIndexOf('.') + 1);\n+                parentNode = getDirectoryNode(childNodeName, parentNode);\n+            }\n+            \/\/ Reached non-empty (leaf) package (could still be a duplicate).\n+            Node resourceNode = parentNode.getChildren(resourceName);\n+            if (resourceNode == null) {\n+                ModuleReference resourceRef = ModuleReference.forPackage(modName, isPreviewPath);\n+                packageToModules.computeIfAbsent(fullPkgName, p -> new HashSet<>()).add(resourceRef);\n+                \/\/ Init adds new node to parent (don't add resources to directAccess).\n+                new ResourceNode(resourceName, parentNode);\n+            } else if (!(resourceNode instanceof ResourceNode)) {\n+                throw new InvalidTreeException(resourceNode);\n+            }\n@@ -270,3 +283,8 @@\n-        public String toResourceName(Node node) {\n-            if (!node.children.isEmpty()) {\n-                throw new RuntimeException(\"Node is not a resource\");\n+        private Node getDirectoryNode(String name, Node parent) throws InvalidTreeException {\n+            Node child = parent.getChildren(name);\n+            if (child == null) {\n+                \/\/ Adds child to parent during init.\n+                child = new Node(name, parent);\n+                directAccess.put(child.getPath(), child);\n+            } else if (child instanceof ResourceNode) {\n+                throw new InvalidTreeException(child);\n@@ -274,1 +292,1 @@\n-            return removeRadical(node);\n+            return child;\n@@ -277,13 +295,5 @@\n-        public String getModule(Node node) {\n-            if (node.parent == null || node.getName().equals(\"modules\")\n-                    || node.getName().startsWith(\"packages\")) {\n-                return null;\n-            }\n-            String path = removeRadical(node);\n-            \/\/ \"\/xxx\/...\";\n-            path = path.substring(1);\n-            int i = path.indexOf(\"\/\");\n-            if (i == -1) {\n-                return path;\n-            } else {\n-                return path.substring(0, i);\n+        \/\/ Helper to iterate package names up to, and including, the complete name.\n+        private int pkgEndIndex(String s, int i) {\n+            if (i >= 0 && i < s.length()) {\n+                i = s.indexOf('.', i + 1);\n+                return i != -1 ? i : s.length();\n@@ -291,0 +301,1 @@\n+            return -1;\n@@ -293,8 +304,3 @@\n-        public String toPackageName(Node node) {\n-            if (node.parent == null) {\n-                return null;\n-            }\n-            String path = removeRadical(node.getPath(), \"\/modules\/\");\n-            String module = getModule(node);\n-            if (path.equals(module)) {\n-                return null;\n+        private String toResourceName(Node node) {\n+            if (!node.children.isEmpty()) {\n+                throw new RuntimeException(\"Node is not a resource\");\n@@ -302,2 +308,1 @@\n-            String pkg = removeRadical(path, module + \"\/\");\n-            return pkg.replace('\/', '.');\n+            return removeRadical(node);\n@@ -306,1 +311,1 @@\n-        public String removeRadical(Node node) {\n+        private String removeRadical(Node node) {\n@@ -342,3 +347,4 @@\n-                PackageNode pkgNode = (PackageNode) current;\n-                int size = pkgNode.references.size() * 8;\n-                writer.addLocation(current.getPath(), offset, 0, size);\n+                List<ModuleReference> refs = ((PackageNode) current).getModuleReferences();\n+                \/\/ \"\/packages\/<pkg name>\" entries have 8-byte entries (flags+offset).\n+                int size = refs.size() * 8;\n+                writer.addLocation(current.getPath(), offset, 0, size, ImageLocation.getPackageFlags(refs));\n@@ -354,0 +360,2 @@\n+                    int locFlags = ImageLocation.getFlags(current.getPath(), tree.directAccess::containsKey);\n+                    \/\/ Normal directory entries have 4-byte entries (offset only).\n@@ -355,1 +363,1 @@\n-                    writer.addLocation(current.getPath(), offset, 0, size);\n+                    writer.addLocation(current.getPath(), offset, 0, size, locFlags);\n@@ -372,1 +380,1 @@\n-                    item.loc = entry.getValue();\n+                    item.setLocation(entry.getValue());\n@@ -381,12 +389,7 @@\n-                \/\/ \/packages\/<pkg name>\n-                PackageNode pkgNode = (PackageNode) current;\n-                int size = pkgNode.references.size() * 8;\n-                ByteBuffer buff = ByteBuffer.allocate(size);\n-                buff.order(writer.getByteOrder());\n-                for (PackageNode.PackageReference mod : pkgNode.references.values()) {\n-                    buff.putInt(mod.isEmpty ? 1 : 0);\n-                    buff.putInt(writer.addString(mod.name));\n-                }\n-                byte[] arr = buff.array();\n-                content.add(arr);\n-                current.loc = outLocations.get(current.getPath());\n+                \/\/ \"\/packages\/<pkg name>\" entries have 8-byte entries (flags+offset).\n+                List<ModuleReference> refs = ((PackageNode) current).getModuleReferences();\n+                ByteBuffer byteBuffer = ByteBuffer.allocate(8 * refs.size());\n+                byteBuffer.order(writer.getByteOrder());\n+                ModuleReference.write(refs, byteBuffer.asIntBuffer(), writer::addString);\n+                content.add(byteBuffer.array());\n+                current.setLocation(outLocations.get(current.getPath()));\n@@ -413,1 +416,1 @@\n-                        current.loc = outLocations.get(s);\n+                        current.setLocation(outLocations.get(s));\n@@ -416,1 +419,1 @@\n-                        current.loc = outLocations.get(current.getPath());\n+                        current.setLocation(outLocations.get(current.getPath()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageResourcesTree.java","additions":187,"deletions":184,"binary":false,"changes":371,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-    static final int EMPTY_OFFSET = 0;\n@@ -45,5 +44,6 @@\n-        \/\/ Reserve 0 offset for empty string.\n-        int offset = addString(\"\");\n-        if (offset != 0) {\n-            throw new InternalError(\"Empty string not offset zero\");\n-        }\n+        \/\/ Frequently used\/special strings for which the offset is useful.\n+        reserveString(\"\", ImageStrings.EMPTY_STRING_OFFSET);\n+        reserveString(\"class\", ImageStrings.CLASS_STRING_OFFSET);\n+        reserveString(\"modules\", ImageStrings.MODULES_STRING_OFFSET);\n+        reserveString(\"packages\", ImageStrings.PACKAGES_STRING_OFFSET);\n+    }\n@@ -51,4 +51,4 @@\n-        \/\/ Reserve 1 offset for frequently used \".class\".\n-        offset = addString(\"class\");\n-        if (offset != 1) {\n-            throw new InternalError(\"'class' string not offset one\");\n+    private void reserveString(String value, int expectedOffset) {\n+        int offset = addString(value);\n+        if (offset != expectedOffset) {\n+            throw new InternalError(\"Reserved string \\\"\" + value + \"\\\" not at expected offset \" + expectedOffset + \"[was \" + offset + \"]\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageStringsWriter.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import jdk.internal.jimage.ImageLocation;\n+import jdk.internal.jimage.ModuleReference;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @summary Tests for ImageLocation.\n+ * @modules java.base\/jdk.internal.jimage\n+ * @run junit\/othervm -esa -DDISABLE_PREVIEW_PATCHING=false ImageLocationTest\n+ *\/\n+public class ImageLocationTest {\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+            \"\/modules\/modfoo\/com\",\n+            \"\/modules\/modfoo\/com\/foo\/Foo.class\"})\n+    public void getFlags_resourceNames(String name) {\n+        String previewName = previewName(name);\n+\n+        int noPreviewFlags =\n+                ImageLocation.getFlags(name, Set.of(name)::contains);\n+        assertEquals(0, noPreviewFlags);\n+        assertFalse(ImageLocation.hasPreviewVersion(noPreviewFlags));\n+        assertFalse(ImageLocation.isPreviewOnly(noPreviewFlags));\n+\n+        int withPreviewFlags =\n+                ImageLocation.getFlags(name, Set.of(name, previewName)::contains);\n+        assertTrue(ImageLocation.hasPreviewVersion(withPreviewFlags));\n+        assertFalse(ImageLocation.isPreviewOnly(withPreviewFlags));\n+\n+        int previewOnlyFlags = ImageLocation.getFlags(previewName, Set.of(previewName)::contains);\n+        assertFalse(ImageLocation.hasPreviewVersion(previewOnlyFlags));\n+        assertTrue(ImageLocation.isPreviewOnly(previewOnlyFlags));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+            \"\/modules\",\n+            \"\/packages\",\n+            \"\/modules\/modfoo\",\n+            \"\/modules\/modfoo\/META-INF\",\n+            \"\/modules\/modfoo\/META-INF\/module-info.class\"})\n+    public void getFlags_zero(String name) {\n+        assertEquals(0, ImageLocation.getFlags(name, Set.of(name)::contains));\n+    }\n+\n+    @Test\n+    public void getFlags_packageFlags() {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ImageLocation.getFlags(\"\/packages\/pkgname\", p -> true));\n+    }\n+\n+    @Test\n+    public void getPackageFlags_noPreview() {\n+        List<ModuleReference> refs = List.of(\n+                ModuleReference.forPackage(\"modfoo\", false),\n+                ModuleReference.forEmptyPackage(\"modbar\", false),\n+                ModuleReference.forEmptyPackage(\"modbaz\", false));\n+        int noPreviewFlags = ImageLocation.getPackageFlags(refs);\n+        assertEquals(0, noPreviewFlags);\n+        assertFalse(ImageLocation.hasPreviewVersion(noPreviewFlags));\n+        assertFalse(ImageLocation.isPreviewOnly(noPreviewFlags));\n+    }\n+\n+    @Test\n+    public void getPackageFlags_withPreview() {\n+        List<ModuleReference> refs = List.of(\n+                ModuleReference.forPackage(\"modfoo\", true),\n+                ModuleReference.forEmptyPackage(\"modbar\", false),\n+                ModuleReference.forEmptyPackage(\"modbaz\", true));\n+        int withPreviewFlags = ImageLocation.getPackageFlags(refs);\n+        assertTrue(ImageLocation.hasPreviewVersion(withPreviewFlags));\n+        assertFalse(ImageLocation.isPreviewOnly(withPreviewFlags));\n+    }\n+\n+    @Test\n+    public void getPackageFlags_previewOnly() {\n+        List<ModuleReference> refs = List.of(\n+                ModuleReference.forPackage(\"modfoo\", true),\n+                ModuleReference.forEmptyPackage(\"modbar\", true),\n+                ModuleReference.forEmptyPackage(\"modbaz\", true));\n+        int previewOnlyFlags = ImageLocation.getPackageFlags(refs);\n+        \/\/ Note the asymmetry between this and the getFlags() case. Unlike\n+        \/\/ module resources, there is no concept of a separate package directory\n+        \/\/ existing in the preview namespace, so a single entry serves both\n+        \/\/ purposes, and hasPreviewVersion() and isPreviewOnly() can both be set.\n+        assertTrue(ImageLocation.hasPreviewVersion(previewOnlyFlags));\n+        assertTrue(ImageLocation.isPreviewOnly(previewOnlyFlags));\n+    }\n+\n+    private static final Pattern MODULES_PATH = Pattern.compile(\"\/modules\/([^\/]+)\/(.+)\");\n+\n+    private static String previewName(String name) {\n+        var m = MODULES_PATH.matcher(name);\n+        if (m.matches() && !m.group(2).startsWith(\"\/META-INF\/preview\/\")) {\n+            return \"\/modules\/\" + m.group(1) + \"\/META-INF\/preview\/\" + m.group(2);\n+        }\n+        throw new IllegalStateException(\"Invalid modules name: \" + name);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ImageLocationTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -46,0 +47,1 @@\n+import static java.util.stream.Collectors.toSet;\n@@ -66,1 +68,1 @@\n- * @run junit\/othervm ImageReaderTest\n+ * @run junit\/othervm -esa -DDISABLE_PREVIEW_PATCHING=false ImageReaderTest\n@@ -73,1 +75,2 @@\n-\n+    \/\/ The '@' prefix marks the entry as a preview entry which will be placed in\n+    \/\/ the '\/modules\/<module>\/META-INF\/preview\/...' namespace.\n@@ -76,3 +79,7 @@\n-                    \"com.foo.Alpha\",\n-                    \"com.foo.Beta\",\n-                    \"com.foo.bar.Gamma\"),\n+                    \"com.foo.HasPreviewVersion\",\n+                    \"com.foo.NormalFoo\",\n+                    \"com.foo.bar.NormalBar\",\n+                    \/\/ Replaces original class in preview mode.\n+                    \"@com.foo.HasPreviewVersion\",\n+                    \/\/ New class in existing package in preview mode.\n+                    \"@com.foo.bar.IsPreviewOnly\"),\n@@ -81,1 +88,7 @@\n-                    \"com.bar.Two\"));\n+                    \"com.bar.Two\",\n+                    \/\/ Two new packages in preview mode (new symbolic links).\n+                    \"@com.bar.preview.stuff.Foo\",\n+                    \"@com.bar.preview.stuff.Bar\"),\n+            \"modgus\", Arrays.asList(\n+                    \/\/ A second module with a preview-only empty package (preview).\n+                    \"@com.bar.preview.other.Gus\"));\n@@ -94,1 +107,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -109,1 +122,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -116,2 +129,2 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n-            assertNode(reader, \"\/modules\/modfoo\/com\/foo\/Alpha.class\");\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            assertNode(reader, \"\/modules\/modfoo\/com\/foo\/HasPreviewVersion.class\");\n@@ -121,3 +134,3 @@\n-            assertEquals(\"Class: com.foo.Alpha\", loader.loadAndGetToString(\"modfoo\", \"com.foo.Alpha\"));\n-            assertEquals(\"Class: com.foo.Beta\", loader.loadAndGetToString(\"modfoo\", \"com.foo.Beta\"));\n-            assertEquals(\"Class: com.foo.bar.Gamma\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.Gamma\"));\n+            assertEquals(\"Class: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n@@ -130,1 +143,1 @@\n-            \"modfoo:com\/foo\/Alpha.class\",\n+            \"modfoo:com\/foo\/HasPreviewVersion.class\",\n@@ -134,1 +147,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -150,1 +163,1 @@\n-            \"modbar:com\/foo\/Alpha.class\",\n+            \"modbar:com\/foo\/HasPreviewVersion.class\",\n@@ -155,1 +168,1 @@\n-            \"modules:modfoo\/com\/foo\/Alpha.class\",\n+            \"modules:modfoo\/com\/foo\/HasPreviewVersion.class\",\n@@ -158,1 +171,1 @@\n-            \"'':modfoo\/com\/foo\/Alpha.class\",\n+            \"'':modfoo\/com\/foo\/HasPreviewVersion.class\",\n@@ -161,1 +174,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -178,1 +191,1 @@\n-            \"modules\/modfoo\/com:foo\/Alpha.class\",\n+            \"modules\/modfoo\/com:foo\/HasPreviewVersion.class\",\n@@ -181,1 +194,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -189,1 +202,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -191,1 +204,1 @@\n-            Set<String> pkgNames = root.getChildNames().collect(Collectors.toSet());\n+            Set<String> pkgNames = root.getChildNames().collect(toSet());\n@@ -206,1 +219,1 @@\n-        try (ImageReader reader = ImageReader.open(image)) {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n@@ -214,0 +227,117 @@\n+    @Test\n+    public void testPreviewResources_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ No preview classes visible.\n+            assertEquals(\"Class: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n+\n+            \/\/ NormalBar exists but IsPreviewOnly doesn't.\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/NormalBar.class\");\n+            assertAbsent(reader, \"\/modules\/modfoo\/com\/foo\/bar\/IsPreviewOnly.class\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\", \"HasPreviewVersion.class\", \"NormalFoo.class\", \"bar\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\/bar\", \"NormalBar.class\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewResources_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ Preview version of classes either overwrite existing entries or are added to directories.\n+            assertEquals(\"Preview: com.foo.HasPreviewVersion\", loader.loadAndGetToString(\"modfoo\", \"com.foo.HasPreviewVersion\"));\n+            assertEquals(\"Class: com.foo.NormalFoo\", loader.loadAndGetToString(\"modfoo\", \"com.foo.NormalFoo\"));\n+            assertEquals(\"Class: com.foo.bar.NormalBar\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.NormalBar\"));\n+            assertEquals(\"Preview: com.foo.bar.IsPreviewOnly\", loader.loadAndGetToString(\"modfoo\", \"com.foo.bar.IsPreviewOnly\"));\n+\n+            \/\/ Both NormalBar and IsPreviewOnly exist (direct lookup and as child nodes).\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/NormalBar.class\");\n+            assertResource(reader, \"modfoo\", \"com\/foo\/bar\/IsPreviewOnly.class\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\", \"HasPreviewVersion.class\", \"NormalFoo.class\", \"bar\");\n+            assertDirContents(reader, \"\/modules\/modfoo\/com\/foo\/bar\", \"NormalBar.class\", \"IsPreviewOnly.class\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewOnlyPackages_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ No 'preview' package or anything inside it.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\/Foo.class\");\n+\n+            \/\/ And no package link.\n+            assertAbsent(reader, \"\/packages\/com.bar.preview\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewOnlyPackages_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            ImageClassLoader loader = new ImageClassLoader(reader, IMAGE_ENTRIES.keySet());\n+\n+            \/\/ In preview mode 'preview' package exists with preview only content.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\", \"Foo.class\", \"Bar.class\");\n+            assertResource(reader, \"modbar\", \"com\/bar\/preview\/stuff\/Foo.class\");\n+\n+            \/\/ And package links exists.\n+            assertDirContents(reader, \"\/packages\/com.bar.preview\", \"modbar\", \"modgus\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewModeLinks_disabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.DISABLED)) {\n+            assertDirContents(reader, \"\/packages\/com.bar\", \"modbar\");\n+            \/\/ Missing symbolic link and directory when not in preview mode.\n+            assertAbsent(reader, \"\/packages\/com.bar.preview\");\n+            assertAbsent(reader, \"\/packages\/com.bar.preview.stuff\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\");\n+            assertAbsent(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\");\n+        }\n+    }\n+\n+    @Test\n+    public void testPreviewModeLinks_enabled() throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, PreviewMode.ENABLED)) {\n+            \/\/ In preview mode there is a new preview-only module visible.\n+            assertDirContents(reader, \"\/packages\/com.bar\", \"modbar\", \"modgus\");\n+            \/\/ And additional packages are present.\n+            assertDirContents(reader, \"\/packages\/com.bar.preview\", \"modbar\", \"modgus\");\n+            assertDirContents(reader, \"\/packages\/com.bar.preview.stuff\", \"modbar\");\n+            assertDirContents(reader, \"\/packages\/com.bar.preview.other\", \"modgus\");\n+            \/\/ And the preview-only content appears as we expect.\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\", \"One.class\", \"Two.class\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\", \"stuff\");\n+            assertDirContents(reader, \"\/modules\/modbar\/com\/bar\/preview\/stuff\", \"Foo.class\", \"Bar.class\");\n+            \/\/ In both modules in which it was added.\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\", \"preview\");\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\/preview\", \"other\");\n+            assertDirContents(reader, \"\/modules\/modgus\/com\/bar\/preview\/other\", \"Gus.class\");\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {false, true})\n+    public void testPreviewEntriesAlwaysHidden(boolean previewMode) throws IOException {\n+        try (ImageReader reader = ImageReader.open(image, previewMode ? PreviewMode.ENABLED : PreviewMode.DISABLED)) {\n+            \/\/ The META-INF directory exists, but does not contain the preview directory.\n+            Node dir = assertDir(reader, \"\/modules\/modfoo\/META-INF\");\n+            assertEquals(0, dir.getChildNames().filter(n -> n.endsWith(\"\/preview\")).count());\n+            \/\/ Neither the preview directory, nor anything in it, can be looked-up directly.\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\");\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\/com\/foo\");\n+            \/\/ HasPreviewVersion.class is a preview class in the test data, and thus appears in\n+            \/\/ two places in the jimage). Ensure the preview version is always hidden.\n+            String alphaPath = \"com\/foo\/HasPreviewVersion.class\";\n+            assertNode(reader, \"\/modules\/modfoo\/\" + alphaPath);\n+            assertAbsent(reader, \"\/modules\/modfoo\/META-INF\/preview\/\" + alphaPath);\n+        }\n+    }\n+\n@@ -226,0 +356,21 @@\n+    private static void assertDirContents(ImageReader reader, String name, String... expectedChildNames) throws IOException {\n+        Node dir = assertDir(reader, name);\n+        Set<String> localChildNames = dir.getChildNames()\n+                .peek(s -> assertTrue(s.startsWith(name + \"\/\")))\n+                .map(s -> s.substring(name.length() + 1))\n+                .collect(toSet());\n+        assertEquals(\n+                Set.of(expectedChildNames),\n+                localChildNames,\n+                String.format(\"Unexpected child names in directory '%s'\", name));\n+    }\n+\n+    private static void assertResource(ImageReader reader, String modName, String resPath) throws IOException {\n+        assertTrue(reader.containsResource(modName, resPath), \"Resource should exist: \" + modName + \"\/\" + resPath);\n+        Node resNode = reader.findResourceNode(modName, resPath);\n+        assertTrue(resNode.isResource(), \"Node should be a resource: \" + resNode.getName());\n+        String nodeName = \"\/modules\/\" + modName + \"\/\" + resPath;\n+        assertEquals(nodeName, resNode.getName());\n+        assertSame(resNode, reader.findNode(nodeName));\n+    }\n+\n@@ -228,1 +379,1 @@\n-        assertTrue(link.isLink(), \"Node was not a symbolic link: \" + name);\n+        assertTrue(link.isLink(), \"Node should be a symbolic link: \" + link.getName());\n@@ -253,0 +404,4 @@\n+                boolean isPreviewEntry = fqn.startsWith(\"@\");\n+                if (isPreviewEntry) {\n+                    fqn = fqn.substring(1);\n+                }\n@@ -256,2 +411,0 @@\n-\n-                String path = fqn.replace('.', '\/') + \".class\";\n@@ -263,1 +416,1 @@\n-                                return \"Class: %s\";\n+                                return \"%s: %s\";\n@@ -266,1 +419,2 @@\n-                        \"\"\", pkg, cls, fqn);\n+                        \"\"\", pkg, cls, isPreviewEntry ? \"Preview\" : \"Class\", fqn);\n+                String path = (isPreviewEntry ? \"META-INF\/preview\/\" : \"\") + fqn.replace('.', '\/') + \".class\";\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ImageReaderTest.java","additions":183,"deletions":29,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -340,1 +341,1 @@\n-        try (ImageReader nativeReader = ImageReader.open(imageFile)) {\n+        try (ImageReader nativeReader = ImageReader.open(imageFile, PreviewMode.DISABLED)) {\n@@ -343,1 +344,1 @@\n-        } catch (IOException expected) {\n+        } catch (IOException unexpected) {\n@@ -349,1 +350,1 @@\n-        Assert.assertThrows(IOException.class, () -> ImageReader.open(imageFile, otherOrder));\n+        Assert.assertThrows(IOException.class, () -> ImageReader.open(imageFile, otherOrder, PreviewMode.DISABLED));\n","filename":"test\/jdk\/jdk\/internal\/jimage\/JImageReadTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.jimage.ModuleReference;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import java.nio.IntBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static jdk.internal.jimage.ModuleReference.forEmptyPackage;\n+import static jdk.internal.jimage.ModuleReference.forPackage;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @summary Tests for ModuleReference.\n+ * @modules java.base\/jdk.internal.jimage\n+ * @run junit\/othervm -esa ModuleReferenceTest\n+ *\/\n+public final class ModuleReferenceTest {\n+    \/\/ Copied (not referenced) for testing.\n+    private static final int FLAGS_HAS_PREVIEW_VERSION = 0x1;\n+    private static final int FLAGS_HAS_NORMAL_VERSION = 0x2;\n+    private static final int FLAGS_HAS_CONTENT = 0x4;\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {false, true})\n+    public void emptyRefs(boolean isPreview) {\n+        ModuleReference ref = forEmptyPackage(\"module\", isPreview);\n+\n+        assertEquals(\"module\", ref.name());\n+        assertFalse(ref.hasContent());\n+        assertEquals(isPreview, ref.hasPreviewVersion());\n+        assertEquals(isPreview, ref.isPreviewOnly());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {false, true})\n+    public void resourceRefs(boolean isPreview) {\n+        ModuleReference ref = forPackage(\"module\", isPreview);\n+\n+        assertEquals(\"module\", ref.name());\n+        assertTrue(ref.hasContent());\n+        assertEquals(isPreview, ref.hasPreviewVersion());\n+        assertEquals(isPreview, ref.isPreviewOnly());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {false, true})\n+    public void mergedRefs(boolean isPreview) {\n+        ModuleReference emptyRef = forEmptyPackage(\"module\", true);\n+        ModuleReference resourceRef = forPackage(\"module\", isPreview);\n+        ModuleReference merged = emptyRef.merge(resourceRef);\n+\n+        \/\/ Merging preserves whether there's content.\n+        assertTrue(merged.hasContent());\n+        \/\/ And clears the preview-only status unless it was set in both.\n+        assertEquals(isPreview, merged.isPreviewOnly());\n+    }\n+\n+    @Test\n+    public void writeBuffer() {\n+        List<ModuleReference> refs = Arrays.asList(\n+                forEmptyPackage(\"alpha\", true),\n+                forEmptyPackage(\"beta\", false).merge(forEmptyPackage(\"beta\", true)),\n+                forPackage(\"gamma\", false),\n+                forEmptyPackage(\"zeta\", false));\n+        IntBuffer buffer = IntBuffer.allocate(2 * refs.size());\n+        ModuleReference.write(refs, buffer, fakeEncoder());\n+        assertArrayEquals(\n+                new int[]{\n+                        FLAGS_HAS_PREVIEW_VERSION, 100,\n+                        FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_PREVIEW_VERSION, 101,\n+                        FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_CONTENT, 102,\n+                        FLAGS_HAS_NORMAL_VERSION, 103},\n+                buffer.array());\n+    }\n+\n+    @Test\n+    public void writeBuffer_emptyList() {\n+        IntBuffer buffer = IntBuffer.allocate(0);\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.write(List.of(), buffer, null));\n+        assertTrue(err.getMessage().contains(\"non-empty\"));\n+    }\n+\n+    @Test\n+    public void writeBuffer_badCapacity() {\n+        List<ModuleReference> refs = Arrays.asList(\n+                forPackage(\"first\", false),\n+                forEmptyPackage(\"alpha\", false));\n+        IntBuffer buffer = IntBuffer.allocate(10);\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.write(refs, buffer, null));\n+        assertTrue(err.getMessage().contains(\"buffer capacity\"));\n+    }\n+\n+    @Test\n+    public void writeBuffer_multipleContent() {\n+        \/\/ Only one module reference (at most) can have resources.\n+        List<ModuleReference> refs = Arrays.asList(\n+                forPackage(\"alpha\", false),\n+                forPackage(\"beta\", false));\n+        IntBuffer buffer = IntBuffer.allocate(2 * refs.size());\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.write(refs, buffer, null));\n+        assertTrue(err.getMessage().contains(\"content\"));\n+    }\n+\n+    @Test\n+    public void writeBuffer_badOrdering() {\n+        \/\/ Badly ordered because preview references should come first.\n+        List<ModuleReference> refs = Arrays.asList(\n+                forEmptyPackage(\"alpha\", false),\n+                forEmptyPackage(\"beta\", true));\n+        IntBuffer buffer = IntBuffer.allocate(2 * refs.size());\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.write(refs, buffer, null));\n+        assertTrue(err.getMessage().contains(\"strictly ordered\"));\n+    }\n+\n+    @Test\n+    public void writeBuffer_duplicateRef() {\n+        \/\/ Technically distinct, and correctly sorted, but with duplicate names.\n+        List<ModuleReference> refs = Arrays.asList(\n+                forEmptyPackage(\"duplicate\", true),\n+                forEmptyPackage(\"duplicate\", false));\n+        IntBuffer buffer = IntBuffer.allocate(2 * refs.size());\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.write(refs, buffer, null));\n+        assertTrue(err.getMessage().contains(\"unique\"));\n+    }\n+\n+    @Test\n+    public void readNameOffsets() {\n+        \/\/ Preview versions must be first (important for early exit).\n+        IntBuffer buffer = IntBuffer.wrap(new int[]{\n+                FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_PREVIEW_VERSION, 100,\n+                FLAGS_HAS_PREVIEW_VERSION, 101,\n+                FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_CONTENT, 102,\n+                FLAGS_HAS_NORMAL_VERSION, 103});\n+\n+        List<Integer> normalOffsets = asList(ModuleReference.readNameOffsets(buffer, true, false));\n+        List<Integer> previewOffsets = asList(ModuleReference.readNameOffsets(buffer, false, true));\n+        List<Integer> allOffsets = asList(ModuleReference.readNameOffsets(buffer, true, true));\n+\n+        assertEquals(List.of(100, 102, 103), normalOffsets);\n+        assertEquals(List.of(100, 101), previewOffsets);\n+        assertEquals(List.of(100, 101, 102, 103), allOffsets);\n+    }\n+\n+    @Test\n+    public void readNameOffsets_badBufferSize() {\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.readNameOffsets(IntBuffer.allocate(3), true, false));\n+        assertTrue(err.getMessage().contains(\"buffer size\"));\n+    }\n+\n+    @Test\n+    public void readNameOffsets_badFlags() {\n+        IntBuffer buffer = IntBuffer.wrap(new int[]{FLAGS_HAS_CONTENT, 100});\n+        var err = assertThrows(\n+                IllegalArgumentException.class,\n+                () -> ModuleReference.readNameOffsets(buffer, false, false));\n+        assertTrue(err.getMessage().contains(\"flags\"));\n+    }\n+\n+    @Test\n+    public void sortOrder_previewFirst() {\n+        List<ModuleReference> refs = Arrays.asList(\n+                forEmptyPackage(\"normal.beta\", false),\n+                forPackage(\"preview.beta\", true),\n+                forEmptyPackage(\"preview.alpha\", true),\n+                forEmptyPackage(\"normal.alpha\", false));\n+        refs.sort(Comparator.naturalOrder());\n+        \/\/ Non-empty first with remaining sorted by name.\n+        assertEquals(\n+                List.of(\"preview.alpha\", \"preview.beta\", \"normal.alpha\", \"normal.beta\"),\n+                refs.stream().map(ModuleReference::name).toList());\n+    }\n+\n+    private static <T> List<T> asList(Iterator<T> src) {\n+        List<T> list = new ArrayList<>();\n+        src.forEachRemaining(list::add);\n+        return list;\n+    }\n+\n+    \/\/ Encodes strings sequentially starting from index 100.\n+    private static Function<String, Integer> fakeEncoder() {\n+        List<String> cache = new ArrayList<>();\n+        return s -> {\n+            int i = cache.indexOf(s);\n+            if (i == -1) {\n+                cache.add(s);\n+                return 100 + (cache.size() - 1);\n+            } else {\n+                return 100 + i;\n+            }\n+        };\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ModuleReferenceTest.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -57,1 +58,1 @@\n-        try (final ImageReader reader = ImageReader.open(imagePath)) {\n+        try (final ImageReader reader = ImageReader.open(imagePath, PreviewMode.DISABLED)) {\n","filename":"test\/jdk\/tools\/jimage\/ImageReaderDuplicateChildNodesTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Whitebox tests for ImageResourcesTree.\n+ * @modules jdk.jlink\/jdk.tools.jlink.internal\n+ * @build jdk.jlink\/jdk.tools.jlink.internal.ImageResourcesTreeTest\n+ * @run junit\/othervm -ea -esa jdk.jlink\/jdk.tools.jlink.internal.ImageResourcesTreeTest\n+ *\/\n+public class ImageResourcesTreeTestDriver {}\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/ImageResourcesTreeTestDriver.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+modules = \\\n+    jdk.jlink\/jdk.tools.jlink.internal\n+bootclasspath.dirs=.\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/TEST.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,262 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal;\n+\n+import jdk.internal.jimage.ModuleReference;\n+import jdk.tools.jlink.internal.ImageResourcesTree.Node;\n+import jdk.tools.jlink.internal.ImageResourcesTree.PackageNode;\n+import jdk.tools.jlink.internal.ImageResourcesTree.ResourceNode;\n+import jdk.tools.jlink.internal.ImageResourcesTree.Tree;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class ImageResourcesTreeTest {\n+\n+    private static final String MODULES_PREFIX = \"\/modules\/\";\n+    private static final String PACKAGES_PREFIX = \"\/packages\/\";\n+\n+    @Test\n+    public void directoryNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        \/\/ All paths from the root (but not the root itself).\n+        assertTrue(nodes.containsKey(\"\/modules\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\"));\n+        assertTrue(nodes.containsKey(\"\/modules\/java.base\/java\/util\"));\n+        assertFalse(nodes.containsKey(\"\/\"));\n+\n+        \/\/ Check for mismatched modules.\n+        assertTrue(nodes.containsKey(\"\/modules\/java.logging\/java\/util\/logging\"));\n+        assertFalse(nodes.containsKey(\"\/modules\/java.base\/java\/util\/logging\"));\n+\n+        Set<String> dirPaths = nodes.keySet().stream()\n+                .filter(p -> p.startsWith(MODULES_PREFIX))\n+                .collect(Collectors.toSet());\n+        for (String path : dirPaths) {\n+            Node dir = nodes.get(path);\n+            assertFalse(dir instanceof ResourceNode, \"Unexpected resource: \" + dir);\n+            assertEquals(path, dir.getPath());\n+            assertTrue(path.endsWith(\"\/\" + dir.getName()), \"Unexpected directory name: \" + dir);\n+        }\n+    }\n+\n+    @Test\n+    public void resourceNodes() {\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.base\/java\/util\/SomeOtherClass.class\",\n+                \"\/java.base\/java\/util\/resource.txt\",\n+                \"\/java.logging\/java\/util\/logging\/LoggingClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/OtherLoggingClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        \/\/ This map *does not* contain the resources, only the \"directory\" nodes.\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.base\/java\/util\"),\n+                \"SomeClass.class\", \"SomeOtherClass.class\", \"resource.txt\");\n+\n+        assertContainsResources(\n+                nodes.get(\"\/modules\/java.logging\/java\/util\/logging\"),\n+                \"LoggingClass.class\", \"OtherLoggingClass.class\");\n+    }\n+\n+    @Test\n+    public void expectedPackages() {\n+        \/\/ Paths are only to resources. Packages are inferred.\n+        List<String> paths = List.of(\n+                \"\/java.base\/java\/util\/SomeClass.class\",\n+                \"\/java.logging\/java\/util\/logging\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        Node packages = nodes.get(\"\/packages\");\n+        List<String> pkgNames = nodes.keySet().stream()\n+                .filter(p -> p.startsWith(PACKAGES_PREFIX))\n+                .map(p -> p.substring(PACKAGES_PREFIX.length()))\n+                .sorted()\n+                .toList();\n+\n+        assertEquals(List.of(\"java\", \"java.util\", \"java.util.logging\"), pkgNames);\n+        for (String pkgName : pkgNames) {\n+            PackageNode pkgNode = assertInstanceOf(PackageNode.class, packages.getChildren(pkgName));\n+            assertSame(nodes.get(PACKAGES_PREFIX + pkgNode.getName()), pkgNode);\n+        }\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries() {\n+        \/\/ \"com.foo\" is empty in module1, and has resources in \"module2\".\n+        List<String> paths = List.of(\n+                \"\/module1\/com\/foo\/bar\/SomeClass.class\",\n+                \"\/module2\/com\/foo\/OtherClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        PackageNode pkgUtil = getPackageNode(nodes, \"com.foo\");\n+        List<ModuleReference> modRefs = pkgUtil.getModuleReferences();\n+\n+        List<String> modNames = modRefs.stream().map(ModuleReference::name).toList();\n+        assertEquals(List.of(\"module1\", \"module2\"), modNames);\n+\n+        \/\/ Ordered by name (no preview resources in either package).\n+        assertEmptyRef(modRefs.get(0), \"module1\");\n+        assertNonEmptyRef(modRefs.get(1), \"module2\");\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries_withPreviewResources() {\n+        \/\/ As above, but \"module2\" now has preview resources.\n+        List<String> paths = List.of(\n+                \"\/module1\/com\/foo\/bar\/SomeClass.class\",\n+                \"\/module2\/com\/foo\/OtherClass.class\",\n+                \"\/module2\/META-INF\/preview\/com\/foo\/OtherClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+        PackageNode pkgUtil = getPackageNode(nodes, \"com.foo\");\n+        List<ModuleReference> modRefs = pkgUtil.getModuleReferences();\n+\n+        \/\/ Existence of preview resource in \"module2\" means it comes first.\n+        List<String> modNames = modRefs.stream().map(ModuleReference::name).toList();\n+        assertEquals(List.of(\"module2\", \"module1\"), modNames);\n+    }\n+\n+    @Test\n+    public void expectedPackageEntries_previewOnlyPackages() {\n+        \/\/ \"com.foo.preview\" and \"com.foo.preview.only\" are preview-only packages.\n+        List<String> paths = List.of(\n+                \"\/module1\/com\/foo\/SomeClass.class\",\n+                \"\/module1\/META-INF\/preview\/com\/foo\/preview\/only\/PreviewClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        \/\/ Preview only package (with resources).\n+        PackageNode nonEmptyPkg = getPackageNode(nodes, \"com.foo.preview.only\");\n+        ModuleReference nonEmptyRef = nonEmptyPkg.getModuleReferences().getFirst();\n+        assertNonEmptyPreviewOnlyRef(nonEmptyRef, \"module1\");\n+\n+        \/\/ Preview only packages can be empty.\n+        PackageNode emptyPkg = getPackageNode(nodes, \"com.foo.preview\");\n+        ModuleReference emptyRef = emptyPkg.getModuleReferences().getFirst();\n+        assertEmptyPreviewOnlyRef(emptyRef, \"module1\");\n+    }\n+\n+    @Test\n+    public void expectedPackageOrder_sharedPackage() {\n+        \/\/ Resource in many modules define the same package (java.shared), but\n+        \/\/ this only has content in one module (java.content).\n+        \/\/ Order of test data is shuffled to show reordering in entry list.\n+        \/\/ \"java.moduleN\" would sort before after \"java.previewN\" if it were\n+        \/\/ only sorted by name, but preview entries come first.\n+        \/\/ Expect: preview{1..3) -> content -> module{1..3}\n+        List<String> paths = List.of(\n+                \/\/ Module with content in \"java.shared\".\n+                \"\/java.content\/java\/shared\/MainPackageClass.class\",\n+                \/\/ Other resources (in other modules) which implicitly define \"java.shared\".\n+                \"\/java.module3\/java\/shared\/three\/SomeClass.class\",\n+                \"\/java.module2\/java\/shared\/two\/SomeClass.class\",\n+                \"\/java.module1\/java\/shared\/one\/SomeClass.class\",\n+                \/\/ Preview resources in other modules which implicitly define \"java.shared\".\n+                \"\/java.preview3\/META-INF\/preview\/java\/shared\/baz\/SomeClass.class\",\n+                \"\/java.preview2\/META-INF\/preview\/java\/shared\/bar\/SomeClass.class\",\n+                \"\/java.preview1\/META-INF\/preview\/java\/shared\/foo\/SomeClass.class\");\n+\n+        Tree tree = new Tree(paths);\n+        Map<String, Node> nodes = tree.getMap();\n+\n+        PackageNode sharedPkg = getPackageNode(nodes, \"java.shared\");\n+        List<ModuleReference> refs = sharedPkg.getModuleReferences();\n+\n+        \/\/ Preview packages first, by name.\n+        int n = 1;\n+        for (ModuleReference ref : refs.subList(0, 3)) {\n+            assertEmptyPreviewOnlyRef(ref, \"java.preview\" + (n++));\n+        }\n+        \/\/ The content package (simply due to its name).\n+        assertNonEmptyRef(refs.get(3), \"java.content\");\n+        \/\/ And the non-preview empty packages after.\n+        n = 1;\n+        for (ModuleReference ref : refs.subList(4, 7)) {\n+            assertEmptyRef(ref, \"java.module\" + (n++));\n+        }\n+    }\n+\n+    static PackageNode getPackageNode(Map<String, Node> nodes, String pkgName) {\n+        return assertInstanceOf(PackageNode.class, nodes.get(PACKAGES_PREFIX + pkgName));\n+    }\n+\n+    static void assertContainsResources(Node dirNode, String... resourceNames) {\n+        for (String name : resourceNames) {\n+            Node node = assertInstanceOf(ResourceNode.class, dirNode.getChildren(name));\n+            assertEquals(name, node.getName());\n+            assertEquals(dirNode.getPath() + \"\/\" + name, node.getPath());\n+        }\n+    }\n+\n+    static void assertNonEmptyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertTrue(ref.hasResources(), \"Expected non-empty reference: \" + ref);\n+        assertFalse(ref.isPreviewOnly(), \"Expected not preview-only: \" + ref);\n+    }\n+\n+    static void assertEmptyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertFalse(ref.hasResources(), \"Expected empty reference: \" + ref);\n+        assertFalse(ref.isPreviewOnly(), \"Expected not preview-only: \" + ref);\n+    }\n+\n+    static void assertNonEmptyPreviewOnlyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertTrue(ref.hasResources(), \"Expected empty reference: \" + ref);\n+        assertTrue(ref.isPreviewOnly(), \"Expected preview-only: \" + ref);\n+    }\n+\n+    static void assertEmptyPreviewOnlyRef(ModuleReference ref, String modName) {\n+        assertEquals(modName, ref.name(), \"Unexpected module name: \" + ref);\n+        assertFalse(ref.hasResources(), \"Expected empty reference: \" + ref);\n+        assertTrue(ref.isPreviewOnly(), \"Expected preview-only: \" + ref);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/whitebox\/jdk.jlink\/jdk\/tools\/jlink\/internal\/ImageResourcesTreeTest.java","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.jimage.PreviewMode;\n@@ -34,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Param;\n@@ -42,1 +44,0 @@\n-import java.nio.ByteOrder;\n@@ -47,0 +48,1 @@\n+import java.util.Map;\n@@ -49,0 +51,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -51,0 +55,3 @@\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.mapping;\n+import static java.util.stream.Collectors.toList;\n@@ -70,1 +77,1 @@\n-    \/\/\/ per-benchmark or a per-iteration state object. The subclasses provide\n+    \/\/\/ per-trial or a per-iteration state object. The subclasses provide\n@@ -74,1 +81,0 @@\n-        protected ByteOrder byteOrder;\n@@ -79,1 +85,0 @@\n-            byteOrder = ByteOrder.nativeOrder();\n@@ -89,0 +94,2 @@\n+    \/\/\/ A {@link Level#Trial per-trial} state which provides an image reader,\n+    \/\/\/ suitable for {@link Mode#AverageTime average time} benchmarks.\n@@ -90,1 +97,3 @@\n-    public static class WarmStartWithImageReader extends BaseState {\n+    public static class WarmStart extends BaseState {\n+        @Param({\"DISABLED\", \"ENABLED\"})\n+        PreviewMode previewMode;\n@@ -96,1 +105,1 @@\n-            reader = ImageReader.open(copiedImageFile, byteOrder);\n+            reader = ImageReader.open(copiedImageFile, previewMode);\n@@ -105,0 +114,12 @@\n+    @State(Scope.Benchmark)\n+    public static class WarmStartWithCachedNodes extends WarmStart {\n+        @Setup(Level.Trial)\n+        public void setUp() throws IOException {\n+            super.setUp();\n+            countAllNodes(reader, reader.findNode(\"\/\"));\n+        }\n+    }\n+\n+    \/\/\/ A {@link Level#Iteration per-iteration} state suitable for\n+    \/\/\/ {@link Mode#SingleShotTime single shot} benchmarks. Unlike\n+    \/\/\/ {@link WarmStart}, this state does not provide a reader instance.\n@@ -107,0 +128,3 @@\n+        @Param({\"DISABLED\", \"ENABLED\"})\n+        PreviewMode previewMode;\n+\n@@ -119,1 +143,1 @@\n-    public static class ColdStartWithImageReader extends BaseState {\n+    public static class ColdStartWithImageReader extends ColdStart {\n@@ -125,1 +149,1 @@\n-            reader = ImageReader.open(copiedImageFile, byteOrder);\n+            reader = ImageReader.open(copiedImageFile, previewMode);\n@@ -140,1 +164,1 @@\n-    public void warmCache_CountAllNodes(WarmStartWithImageReader state) throws IOException {\n+    public void warmStart_CountAllNodes(WarmStartWithCachedNodes state) throws IOException {\n@@ -144,0 +168,39 @@\n+    \/\/\/ Benchmarks {@link ImageReader#containsResource(String, String)} when no\n+    \/\/\/ nodes have been cached in the {@link ImageReader}. In non-preview mode,\n+    \/\/\/ this should be identical to the case where nodes are cached (because the\n+    \/\/\/ cache isn't used) but in preview mode, the cache will be tested for\n+    \/\/\/ preview resources, and thus differ depending on whether nodes are present.\n+    \/\/\/\n+    \/\/\/ This doesn't need to be a cold start because it never modifies the nodes\n+    \/\/\/ cache.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_ContainsResource_emptyNodeCache(WarmStart state) throws IOException {\n+        state.count = countContainsResource(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As above, but the nodes cache has been filled, giving preview mode a\n+    \/\/\/ different code path.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_ContainsResource_fullNodeCache(WarmStartWithCachedNodes state) throws IOException {\n+        state.count = countContainsResource(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As {@link #warmStart_ContainsResource_emptyNodeCache}, but tests\n+    \/\/\/ {@link ImageReader#findResourceNode(String, String)}.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_FindResourceNode_emptyNodeCache(WarmStart state) throws IOException {\n+        state.count = countFindResourceNode(state.reader, ClassList.pathMap());\n+    }\n+\n+    \/\/\/ As {@link #warmStart_ContainsResource_fullNodeCache}, but tests\n+    \/\/\/ {@link ImageReader#findResourceNode(String, String)}.\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void warmStart_FindResourceNode_fullNodeCache(WarmStartWithCachedNodes state) throws IOException {\n+        state.count = countFindResourceNode(state.reader, ClassList.pathMap());\n+    }\n+\n+\n@@ -152,1 +215,1 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, state.byteOrder)) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n@@ -157,1 +220,1 @@\n-    \/\/\/ As above, but includes the time to initialize the `ImageReader`.\n+    \/\/\/ As above, but excludes the time to initialize the `ImageReader`.\n@@ -176,2 +239,2 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, state.byteOrder)) {\n-            for (String path : INIT_CLASSES) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n+            for (String path : ClassList.names()) {\n@@ -188,1 +251,1 @@\n-        state.count = INIT_CLASSES.size();\n+        state.count = ClassList.count();\n@@ -190,1 +253,1 @@\n-        if ((100 * errors) \/ INIT_CLASSES.size() >= 2) {\n+        if ((100 * errors) \/ ClassList.count() >= 2) {\n@@ -209,0 +272,27 @@\n+    static long countContainsResource(ImageReader reader, Map<String, List<String>> modToPaths)\n+            throws IOException {\n+        long count = 0;\n+        for (Map.Entry<String, List<String>> e : modToPaths.entrySet()) {\n+            String mod = e.getKey();\n+            for (String path : e.getValue()) {\n+                if (reader.containsResource(mod, path)) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n+    static long countFindResourceNode(ImageReader reader, Map<String, List<String>> modToPaths) throws IOException {\n+        long count = 0;\n+        for (Map.Entry<String, List<String>> e : modToPaths.entrySet()) {\n+            String mod = e.getKey();\n+            for (String path : e.getValue()) {\n+                if (reader.findResourceNode(mod, path) != null) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n@@ -213,2 +303,2 @@\n-        try (var reader = ImageReader.open(state.copiedImageFile, state.byteOrder)) {\n-            for (String path : INIT_CLASSES) {\n+        try (var reader = ImageReader.open(state.copiedImageFile, state.previewMode)) {\n+            for (String path : ClassList.names()) {\n@@ -225,1 +315,1 @@\n-                        errors, INIT_CLASSES.size(), String.join(\"\\n\\t\", missing)));\n+                        errors, ClassList.count(), String.join(\"\\n\\t\", missing)));\n@@ -228,851 +318,884 @@\n-    \/\/ Note: This list is inherently a little fragile and may end up being more\n-    \/\/ trouble than it's worth to maintain. If it turns out that it needs to be\n-    \/\/ regenerated often when this benchmark is run, then a new approach should\n-    \/\/ be considered, such as:\n-    \/\/ * Limit the list of classes to non-internal ones.\n-    \/\/ * Calculate the list dynamically based on the running JVM.\n-    \/\/\n-    \/\/ Created by running \"java -verbose:class\", throwing away anonymous inner\n-    \/\/ classes and anything without a reliable name, and grouping by the stated\n-    \/\/ source. It's not perfect, but it's representative.\n-    \/\/\n-    \/\/ <jdk_root>\/bin\/java -verbose:class HelloWorld 2>&1 \\\n-    \/\/   | fgrep '[class,load]' | cut -d' ' -f2 \\\n-    \/\/   | tr '.' '\/' \\\n-    \/\/   | egrep -v '\\$[0-9$]' \\\n-    \/\/   | fgrep -v 'HelloWorld' \\\n-    \/\/   | fgrep -v '\/META-INF\/preview\/' \\\n-    \/\/   | while read f ; do echo \"${f}.class\" ; done \\\n-    \/\/   > initclasses.txt\n-    \/\/\n-    \/\/ Output:\n-    \/\/    java\/lang\/Object.class\n-    \/\/    java\/io\/Serializable.class\n-    \/\/    ...\n-    \/\/\n-    \/\/ jimage list <jdk_root>\/images\/jdk\/lib\/modules \\\n-    \/\/     | awk '\/^Module: *\/ { MOD=$2 }; \/^    *\/ { print \"\/modules\/\"MOD\"\/\"$1 }' \\\n-    \/\/     > fullpaths.txt\n-    \/\/\n-    \/\/ Output:\n-    \/\/     ...\n-    \/\/     \/modules\/java.base\/java\/lang\/Object.class\n-    \/\/     \/modules\/java.base\/java\/lang\/OutOfMemoryError.class\n-    \/\/     ...\n-    \/\/\n-    \/\/ while read c ; do grep \"\/$c\" fullpaths.txt ; done < initclasses.txt \\\n-    \/\/     | while read c ; do printf '    \"%s\",\\n' \"$c\" ; done \\\n-    \/\/     > initpaths.txt\n-    \/\/\n-    \/\/ Output:\n-    private static final Set<String> INIT_CLASSES = Set.of(\n-            \"\/modules\/java.base\/java\/lang\/Object.class\",\n-            \"\/modules\/java.base\/java\/io\/Serializable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Comparable.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharSequence.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/Constable.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ConstantDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/String.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AnnotatedElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/GenericDeclaration.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Type.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfField.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class.class\",\n-            \"\/modules\/java.base\/java\/lang\/Cloneable.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/System.class\",\n-            \"\/modules\/java.base\/java\/lang\/Throwable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Error.class\",\n-            \"\/modules\/java.base\/java\/lang\/Exception.class\",\n-            \"\/modules\/java.base\/java\/lang\/RuntimeException.class\",\n-            \"\/modules\/java.base\/java\/security\/ProtectionDomain.class\",\n-            \"\/modules\/java.base\/java\/security\/SecureClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/ReflectiveOperationException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassNotFoundException.class\",\n-            \"\/modules\/java.base\/java\/lang\/Record.class\",\n-            \"\/modules\/java.base\/java\/lang\/LinkageError.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoClassDefFoundError.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassCastException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArrayStoreException.class\",\n-            \"\/modules\/java.base\/java\/lang\/VirtualMachineError.class\",\n-            \"\/modules\/java.base\/java\/lang\/InternalError.class\",\n-            \"\/modules\/java.base\/java\/lang\/OutOfMemoryError.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackOverflowError.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalMonitorStateException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Reference.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalCallerException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/SoftReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/WeakReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/FinalReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/PhantomReference.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Finalizer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runnable.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$FieldHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$Constants.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$UncaughtExceptionHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadGroup.class\",\n-            \"\/modules\/java.base\/java\/lang\/BaseVirtualThread.class\",\n-            \"\/modules\/java.base\/java\/lang\/VirtualThread.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadBuilders$BoundVirtualThread.class\",\n-            \"\/modules\/java.base\/java\/util\/Map.class\",\n-            \"\/modules\/java.base\/java\/util\/Dictionary.class\",\n-            \"\/modules\/java.base\/java\/util\/Hashtable.class\",\n-            \"\/modules\/java.base\/java\/util\/Properties.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessibleObject.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Member.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Field.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Parameter.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Executable.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Method.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Constructor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationScope.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/StackChunk.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessorImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/annotation\/Annotation.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/CallerSensitive.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessorImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MemberName.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ResolvedMethodName.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleNatives.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfMethod.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodType.class\",\n-            \"\/modules\/java.base\/java\/lang\/BootstrapMethodError.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/CallSite.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/ABIDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/VMStorage.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/UpcallLinker$CallRegs.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ConstantCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MutableCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VolatileCallSite.class\",\n-            \"\/modules\/java.base\/java\/lang\/AssertionStatusDirectives.class\",\n-            \"\/modules\/java.base\/java\/lang\/Appendable.class\",\n-            \"\/modules\/java.base\/java\/lang\/AbstractStringBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringBuffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/UnsafeConstants.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Unsafe.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/Modules.class\",\n-            \"\/modules\/java.base\/java\/lang\/AutoCloseable.class\",\n-            \"\/modules\/java.base\/java\/io\/Closeable.class\",\n-            \"\/modules\/java.base\/java\/io\/InputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/ByteArrayInputStream.class\",\n-            \"\/modules\/java.base\/java\/net\/URL.class\",\n-            \"\/modules\/java.base\/java\/lang\/Enum.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/Manifest.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$AppClassLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$PlatformClassLoader.class\",\n-            \"\/modules\/java.base\/java\/security\/CodeSource.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentMap.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractMap.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/Iterable.class\",\n-            \"\/modules\/java.base\/java\/util\/Collection.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/List.class\",\n-            \"\/modules\/java.base\/java\/util\/RandomAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractList.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayList.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackTraceElement.class\",\n-            \"\/modules\/java.base\/java\/nio\/Buffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackWalker.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackStreamFactory$AbstractStackWalker.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackWalker$StackFrame.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/StackFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/LiveStackFrame.class\",\n-            \"\/modules\/java.base\/java\/lang\/LiveStackFrameInfo.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractOwnableSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Boolean.class\",\n-            \"\/modules\/java.base\/java\/lang\/Character.class\",\n-            \"\/modules\/java.base\/java\/lang\/Number.class\",\n-            \"\/modules\/java.base\/java\/lang\/Float.class\",\n-            \"\/modules\/java.base\/java\/lang\/Double.class\",\n-            \"\/modules\/java.base\/java\/lang\/Byte.class\",\n-            \"\/modules\/java.base\/java\/lang\/Short.class\",\n-            \"\/modules\/java.base\/java\/lang\/Integer.class\",\n-            \"\/modules\/java.base\/java\/lang\/Long.class\",\n-            \"\/modules\/java.base\/java\/lang\/Void.class\",\n-            \"\/modules\/java.base\/java\/util\/Iterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/RecordComponent.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$Vector.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorMask.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/FillerObject.class\",\n-            \"\/modules\/java.base\/java\/lang\/NullPointerException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArithmeticException.class\",\n-            \"\/modules\/java.base\/java\/lang\/IndexOutOfBoundsException.class\",\n-            \"\/modules\/java.base\/java\/lang\/ArrayIndexOutOfBoundsException.class\",\n-            \"\/modules\/java.base\/java\/io\/ObjectStreamField.class\",\n-            \"\/modules\/java.base\/java\/util\/Comparator.class\",\n-            \"\/modules\/java.base\/java\/lang\/String$CaseInsensitiveComparator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/VM.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module$ArchivedData.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/CDS.class\",\n-            \"\/modules\/java.base\/java\/util\/Set.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableSet.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$Set12.class\",\n-            \"\/modules\/java.base\/java\/util\/Objects.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableList.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListN.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableMap.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangReflectAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/ReflectAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/SharedSecrets.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory.class\",\n-            \"\/modules\/java.base\/java\/io\/ObjectStreamClass.class\",\n-            \"\/modules\/java.base\/java\/lang\/Math.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory$Config.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangRefAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Null.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Lock.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps$Raw.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/Charset.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/spi\/CharsetProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/StandardCharsets.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringLatin1.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/HistoricallyNamedCharset.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/Unicode.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/StrictMath.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ArraysSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/Map$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$Node.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$TreeNode.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringConcatHelper.class\",\n-            \"\/modules\/java.base\/java\/lang\/VersionProps.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runtime.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/Lock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Segment.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CounterCell.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Node.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/LockSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ReservationNode.class\",\n-            \"\/modules\/java.base\/java\/util\/AbstractSet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$EntrySet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$HashIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$EntryIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/StaticProperty.class\",\n-            \"\/modules\/java.base\/java\/io\/FileInputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/System$In.class\",\n-            \"\/modules\/java.base\/java\/io\/FileDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaIOFileDescriptorAccess.class\",\n-            \"\/modules\/java.base\/java\/io\/Flushable.class\",\n-            \"\/modules\/java.base\/java\/io\/OutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/FileOutputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/System$Out.class\",\n-            \"\/modules\/java.base\/java\/io\/FilterInputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedInputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/FilterOutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/PrintStream.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedOutputStream.class\",\n-            \"\/modules\/java.base\/java\/io\/Writer.class\",\n-            \"\/modules\/java.base\/java\/io\/OutputStreamWriter.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/StreamEncoder.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CharsetEncoder.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8$Encoder.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CodingErrorAction.class\",\n-            \"\/modules\/java.base\/java\/util\/Arrays.class\",\n-            \"\/modules\/java.base\/java\/nio\/ByteBuffer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/ScopedMemoryAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Function.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/Preconditions.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BiFunction.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNioAccess.class\",\n-            \"\/modules\/java.base\/java\/nio\/HeapByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/ByteOrder.class\",\n-            \"\/modules\/java.base\/java\/io\/BufferedWriter.class\",\n-            \"\/modules\/java.base\/java\/lang\/Terminator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$Handler.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal.class\",\n-            \"\/modules\/java.base\/java\/util\/Hashtable$Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$NativeHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/Integer$IntegerCache.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/OSEnvironment.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$State.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Reference$ReferenceHandler.class\",\n-            \"\/modules\/java.base\/java\/lang\/Thread$ThreadIdentifiers.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Finalizer$FinalizerThread.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/Cleaner.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptySet.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyList.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/IllegalArgumentException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleStatics.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/ClassFileFormatVersion.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharacterData.class\",\n-            \"\/modules\/java.base\/java\/lang\/CharacterDataLatin1.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ClassFileDumper.class\",\n-            \"\/modules\/java.base\/java\/util\/HexFormat.class\",\n-            \"\/modules\/java.base\/java\/lang\/Character$CharacterCache.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicInteger.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MemberName$Factory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/Reflection.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN$MapNIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/KeyValueHolder.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/VerifyAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Modifier.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangModuleAccess.class\",\n-            \"\/modules\/java.base\/java\/io\/File.class\",\n-            \"\/modules\/java.base\/java\/io\/DefaultFileSystem.class\",\n-            \"\/modules\/java.base\/java\/io\/FileSystem.class\",\n-            \"\/modules\/java.base\/java\/io\/UnixFileSystem.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/DecimalDigits.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModulePatcher.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$IllegalNativeAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/HashSet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Modules.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$Counters.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedBootLayer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedModuleGraph.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModuleFinders.class\",\n-            \"\/modules\/java.base\/java\/net\/URI.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetUriAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModulesMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/SystemModules.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ExplodedSystemModules.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Watchable.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Path.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/FileSystems.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/DefaultFileSystemProvider.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/spi\/FileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/AbstractFileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystemProvider.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystemProvider.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/OpenOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/StandardOpenOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/FileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystem.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixPath.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/Util.class\",\n-            \"\/modules\/java.base\/java\/lang\/StringCoding.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixNativeDispatcher.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BootLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/Module$EnableNativeAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderHelper.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CollectionView.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$KeySetView.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$LibraryPaths.class\",\n-            \"\/modules\/java.base\/java\/io\/File$PathStatus.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$CountedLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$Sync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryContext.class\",\n-            \"\/modules\/java.base\/java\/util\/Queue.class\",\n-            \"\/modules\/java.base\/java\/util\/Deque.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayDeque.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayDeque$DeqIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibrary.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryImpl.class\",\n-            \"\/modules\/java.base\/java\/security\/cert\/Certificate.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValuesView.class\",\n-            \"\/modules\/java.base\/java\/util\/Enumeration.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Traverser.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$BaseIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValueIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/PosixFileAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileStoreAttributes.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixMountEntry.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/CopyOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/LinkOption.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Files.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffers.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/CarrierThreadLocal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/TerminatingThreadLocal.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$SetFromMap.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeySet.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerFactory.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/ThreadFactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Cleaner.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList$Node.class\",\n-            \"\/modules\/java.base\/java\/lang\/ref\/Cleaner$Cleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/PhantomCleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanerCleanable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/InnocuousThread.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer$Deallocator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$PhantomCleanableRef.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleFinder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModulePath.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/Attributes$Name.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/Array.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/perf\/PerfCounter.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/perf\/Perf.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/DirectBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/MappedByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/DirectByteBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/Bits.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicLong.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/VM$BufferPool.class\",\n-            \"\/modules\/java.base\/java\/nio\/LongBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/DirectLongBufferU.class\",\n-            \"\/modules\/java.base\/java\/util\/zip\/ZipConstants.class\",\n-            \"\/modules\/java.base\/java\/util\/zip\/ZipFile.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/JarFile.class\",\n-            \"\/modules\/java.base\/java\/util\/BitSet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilZipFileAccess.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilJarAccess.class\",\n-            \"\/modules\/java.base\/java\/util\/jar\/JavaUtilJarAccessImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/Runtime$Version.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$List12.class\",\n-            \"\/modules\/java.base\/java\/util\/Optional.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/AttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributeView.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/UserDefinedFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/DynamicFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/AbstractBasicFileAttributeView.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews$Basic.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes$UnixAsBasicFileAttributes.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream$Filter.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/Files$AcceptAllFilter.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/SecureDirectoryStream.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixSecureDirectoryStream.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReadWriteLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$FairSync.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$WriteLock.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream$UnixDirectoryIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttribute.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileModeAttribute.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory$Flags.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$EmptyIterator.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/Channel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ReadableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/WritableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SeekableByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/GatheringByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/ScatteringByteChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/InterruptibleChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractInterruptibleChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/FileChannel.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeDispatcher.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcher.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/UnixFileDispatcherImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcherImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/IOUtil.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Interruptible.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeThreadSet.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl$Closer.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/Channels.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Streams.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/SelChImpl.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/NetworkChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SelectableChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractSelectableChannel.class\",\n-            \"\/modules\/java.base\/java\/nio\/channels\/SocketChannel.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/SocketChannelImpl.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/ChannelInputStream.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Supplier.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeySet.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeyMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ReferenceKey.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/StrongReferenceKey.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodTypeForm.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/WeakReferenceKey.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper$Format.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ConstantDescs.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/ClassDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ClassOrInterfaceDescImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ArrayClassDescImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/ConstantUtils.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/MethodTypeDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/MethodTypeDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/MethodHandleDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/DirectMethodHandleDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/constant\/PrimitiveClassDescImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc$AnonymousDynamicConstantDesc.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$NamedFunction.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Holder.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/ValueConversions.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/Invokers.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchMethodException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$BasicType.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/TypeKind.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Name.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Holder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AnnotationElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Annotation.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/PoolEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/Utf8Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl$State.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Attribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/MethodElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/FieldElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util$Writable.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractElement.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundRuntimeVisibleAnnotationsAttribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Attributes.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$RuntimeVisibleAnnotationsMapper.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper$AttributeStability.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl$Intrinsic.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SplitConstantPool.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/BootstrapMethodEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/EntryMap.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ClassEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractNamedEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$ClassEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Consumer.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFile.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassFileImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AttributeHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Superclass.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SuperclassImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/SourceFileAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundSourceFileAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$SourceFileMapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BoundAttribute.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/MethodBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/MethodInfo.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefsEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$NameAndTypeEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MemberRefEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/FieldRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractMemberRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$FieldRefEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator$ClassData.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CodeBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelContext.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CodeElement.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/PseudoInstruction.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/CharacterRange.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariable.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariableType.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder$DeferredLabel.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/BufWriter.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BufWriterImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Label.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LabelTarget.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelImpl.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/util\/VerifyType.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Opcode.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Opcode$Kind.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MethodRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$MethodRefEntryImpl.class\",\n-            \"\/modules\/java.base\/sun\/invoke\/empty\/Empty.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$AdHocAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$CodeMapper.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/FieldBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/CustomAttribute.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationReader.class\",\n-            \"\/modules\/java.base\/java\/util\/ListIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListItr.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Frame.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Type.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper$CodeRange.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassLoadingClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$CachedClassHierarchyResolver.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver$ClassHierarchyInfo.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassHierarchyInfoImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/ClassReader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ModifiedUtf.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup$ClassDefiner.class\",\n-            \"\/modules\/java.base\/java\/lang\/IncompatibleClassChangeError.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchMethodError.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BootstrapMethodInvoker.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InnerClassLambdaMetafactory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleInfo.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/InfoFromMemberName.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$Access.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilCollectionAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/Interfaces.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/InterfacesImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/TypeConvertingMethodAdapter.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Constructor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangInvokeAccess.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessMode.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessType.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/Invokers$Holder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo.class\",\n-            \"\/modules\/java.base\/java\/io\/DataInput.class\",\n-            \"\/modules\/java.base\/java\/io\/DataInputStream.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$CountingDataInput.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/NativeThread.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/Blocker.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Util.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/Util$BufferCache.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ch\/IOStatus.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/util\/ByteArray.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandles.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleGuards.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarForm.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ByteArrayViewVarHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ArrayHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessDescriptor.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$Entry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$IndexEntry.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/StandardCharsets.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/US_ASCII.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/ISO_8859_1.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16BE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16LE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32BE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32LE.class\",\n-            \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$ValueEntry.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Builder.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Modifier.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag.class\",\n-            \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag$Location.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires$Modifier.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeySet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeyIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/Checks.class\",\n-            \"\/modules\/java.base\/java\/util\/ArrayList$Itr.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Provides.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableCollection.class\",\n-            \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableSet.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$Values.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$ValueIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN$SetNIterator.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$Attributes.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferences.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleReader.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixUriUtils.class\",\n-            \"\/modules\/java.base\/java\/net\/URI$Parser.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleReference.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferenceImpl.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Exports.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Opens.class\",\n-            \"\/modules\/java.base\/sun\/nio\/fs\/UnixException.class\",\n-            \"\/modules\/java.base\/java\/io\/IOException.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ArchivedClassLoaders.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$BootClassLoader.class\",\n-            \"\/modules\/java.base\/java\/lang\/ClassLoader$ParallelLoaders.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap$Entry.class\",\n-            \"\/modules\/java.base\/java\/util\/WeakHashMap$KeySet.class\",\n-            \"\/modules\/java.base\/java\/security\/Principal.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath.class\",\n-            \"\/modules\/java.base\/java\/net\/URLStreamHandlerFactory.class\",\n-            \"\/modules\/java.base\/java\/net\/URL$DefaultFactory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetURLAccess.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/ParseUtil.class\",\n-            \"\/modules\/java.base\/java\/net\/URLStreamHandler.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/protocol\/file\/Handler.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil$MASKS.class\",\n-            \"\/modules\/java.base\/sun\/net\/www\/protocol\/jar\/Handler.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderValue.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader$LoadedModule.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/DefaultRoots.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$HashMapSpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$ValueSpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamSupport.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/BaseStream.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Stream.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/PipelineHelper.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/AbstractPipeline.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$Head.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$Type.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$MaskBuilder.class\",\n-            \"\/modules\/java.base\/java\/util\/EnumMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class$ReflectionData.class\",\n-            \"\/modules\/java.base\/java\/lang\/Class$Atomic.class\",\n-            \"\/modules\/java.base\/java\/lang\/PublicMethods$MethodList.class\",\n-            \"\/modules\/java.base\/java\/lang\/PublicMethods$Key.class\",\n-            \"\/modules\/java.base\/sun\/reflect\/annotation\/AnnotationParser.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory$LazyStaticHolder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/annotation\/Stable.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$SpeciesData.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$SpeciesData.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$Factory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer$Factory.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/SimpleMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/NoSuchFieldException.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Species_L.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Accessor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle$Holder.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$TransformKey.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormBuffer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$Transform.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collectors.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collector$Characteristics.class\",\n-            \"\/modules\/java.base\/java\/util\/EnumSet.class\",\n-            \"\/modules\/java.base\/java\/util\/RegularEnumSet.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collector.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Collectors$CollectorImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BiConsumer.class\",\n-            \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Interface.class\",\n-            \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$InterfaceMethodRefEntryImpl.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/BinaryOperator.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/TerminalOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$ReduceOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/StreamShape.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Sink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/TerminalSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$AccumulatingSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$Box.class\",\n-            \"\/modules\/java.base\/java\/util\/HashMap$KeySpliterator.class\",\n-            \"\/modules\/java.base\/java\/util\/function\/Predicate.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$StatelessOp.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/Sink$ChainedReference.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleResolution.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink$OfRef.class\",\n-            \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindOp.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterators.class\",\n-            \"\/modules\/java.base\/java\/util\/Spliterators$IteratorSpliterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/Configuration.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/Resolver.class\",\n-            \"\/modules\/java.base\/java\/lang\/ModuleLayer.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedSet.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashSet.class\",\n-            \"\/modules\/java.base\/java\/util\/SequencedMap.class\",\n-            \"\/modules\/java.base\/java\/util\/LinkedHashMap.class\",\n-            \"\/modules\/java.base\/java\/lang\/module\/ResolvedModule.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Mapper.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue$Memoizer.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog$ServiceProvider.class\",\n-            \"\/modules\/java.base\/java\/util\/concurrent\/CopyOnWriteArrayList.class\",\n-            \"\/modules\/java.base\/java\/lang\/ModuleLayer$Controller.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$SafeModuleFinder.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationSupport.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation$Pinned.class\",\n-            \"\/modules\/java.base\/sun\/launcher\/LauncherHelper.class\",\n-            \"\/modules\/java.base\/sun\/net\/util\/URLUtil.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$Loader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$FileLoader.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/loader\/Resource.class\",\n-            \"\/modules\/java.base\/java\/io\/FileCleanable.class\",\n-            \"\/modules\/java.base\/sun\/nio\/ByteBuffered.class\",\n-            \"\/modules\/java.base\/java\/security\/SecureClassLoader$CodeSourceKey.class\",\n-            \"\/modules\/java.base\/java\/security\/PermissionCollection.class\",\n-            \"\/modules\/java.base\/java\/security\/Permissions.class\",\n-            \"\/modules\/java.base\/java\/lang\/NamedPackage.class\",\n-            \"\/modules\/java.base\/jdk\/internal\/misc\/MethodFinder.class\",\n-            \"\/modules\/java.base\/java\/lang\/Readable.class\",\n-            \"\/modules\/java.base\/java\/nio\/CharBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/HeapCharBuffer.class\",\n-            \"\/modules\/java.base\/java\/nio\/charset\/CoderResult.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$IdentityHashMapIterator.class\",\n-            \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeyIterator.class\",\n-            \"\/modules\/java.base\/java\/lang\/Shutdown.class\",\n-            \"\/modules\/java.base\/java\/lang\/Shutdown$Lock.class\");\n+    \/\/\/ Note: This list is inherently a little fragile and may end up being more\n+    \/\/\/ trouble than it's worth to maintain. If it turns out that it needs to be\n+    \/\/\/ regenerated often when this benchmark is run, then a new approach should\n+    \/\/\/ be considered, such as:\n+    \/\/\/ * Limit the list of classes to non-internal ones.\n+    \/\/\/ * Calculate the list dynamically based on the running JVM.\n+    \/\/\/ * Build a custom jimage file similar to ImageReaderTest\n+    private static final class ClassList {\n+        \/\/\/ Returns the names of resource nodes expected to be present in the\n+        \/\/\/ reader, excluding preview mode paths (i.e. \"\/META-INF\/preview\/\").\n+        private static Set<String> names() {\n+            return INIT_CLASSES;\n+        }\n+\n+        \/\/\/ Returns the number of resources present.\n+        private static int count() {\n+            return INIT_CLASSES.size();\n+        }\n+\n+        \/\/\/ Returns the resource nodes represented as a map from module name to\n+        \/\/\/ resource path. This is suitable for testing functions like\n+        \/\/\/ {@link ImageReader#containsResource(String, String)} without the\n+        \/\/\/ overhead of splitting resource names during the trial.\n+        private static Map<String, List<String>> pathMap() {\n+            return MODULE_TO_PATHS;\n+        }\n+\n+        \/\/ Created by running \"java -verbose:class\", throwing away anonymous inner\n+        \/\/ classes and anything without a reliable name, and grouping by the stated\n+        \/\/ source. It's not perfect, but it's representative.\n+        \/\/\n+        \/\/ <jdk_root>\/bin\/java -verbose:class HelloWorld 2>&1 \\\n+        \/\/   | fgrep '[class,load]' | cut -d' ' -f2 \\\n+        \/\/   | tr '.' '\/' \\\n+        \/\/   | egrep -v '\\$[0-9$]' \\\n+        \/\/   | fgrep -v 'HelloWorld' \\\n+        \/\/   | fgrep -v '\/META-INF\/preview\/' \\\n+        \/\/   | while read f ; do echo \"${f}.class\" ; done \\\n+        \/\/   > initclasses.txt\n+        \/\/\n+        \/\/ Output:\n+        \/\/    java\/lang\/Object.class\n+        \/\/    java\/io\/Serializable.class\n+        \/\/    ...\n+        \/\/\n+        \/\/ jimage list <jdk_root>\/images\/jdk\/lib\/modules \\\n+        \/\/     | awk '\/^Module: *\/ { MOD=$2 }; \/^    *\/ { print \"\/modules\/\"MOD\"\/\"$1 }' \\\n+        \/\/     > fullpaths.txt\n+        \/\/\n+        \/\/ Output:\n+        \/\/     ...\n+        \/\/     \/modules\/java.base\/java\/lang\/Object.class\n+        \/\/     \/modules\/java.base\/java\/lang\/OutOfMemoryError.class\n+        \/\/     ...\n+        \/\/\n+        \/\/ while read c ; do grep \"\/$c\" fullpaths.txt ; done < initclasses.txt \\\n+        \/\/     | while read c ; do printf '    \"%s\",\\n' \"$c\" ; done \\\n+        \/\/     > initpaths.txt\n+        \/\/\n+        \/\/ Output:\n+        private static final Set<String> INIT_CLASSES = Set.of(\n+                \"\/modules\/java.base\/java\/lang\/Object.class\",\n+                \"\/modules\/java.base\/java\/io\/Serializable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Comparable.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharSequence.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/Constable.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ConstantDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/String.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AnnotatedElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/GenericDeclaration.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Type.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfField.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class.class\",\n+                \"\/modules\/java.base\/java\/lang\/Cloneable.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/System.class\",\n+                \"\/modules\/java.base\/java\/lang\/Throwable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Error.class\",\n+                \"\/modules\/java.base\/java\/lang\/Exception.class\",\n+                \"\/modules\/java.base\/java\/lang\/RuntimeException.class\",\n+                \"\/modules\/java.base\/java\/security\/ProtectionDomain.class\",\n+                \"\/modules\/java.base\/java\/security\/SecureClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/ReflectiveOperationException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassNotFoundException.class\",\n+                \"\/modules\/java.base\/java\/lang\/Record.class\",\n+                \"\/modules\/java.base\/java\/lang\/LinkageError.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoClassDefFoundError.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassCastException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArrayStoreException.class\",\n+                \"\/modules\/java.base\/java\/lang\/VirtualMachineError.class\",\n+                \"\/modules\/java.base\/java\/lang\/InternalError.class\",\n+                \"\/modules\/java.base\/java\/lang\/OutOfMemoryError.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackOverflowError.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalMonitorStateException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Reference.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalCallerException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/SoftReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/WeakReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/FinalReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/PhantomReference.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Finalizer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runnable.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$FieldHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$Constants.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$UncaughtExceptionHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadGroup.class\",\n+                \"\/modules\/java.base\/java\/lang\/BaseVirtualThread.class\",\n+                \"\/modules\/java.base\/java\/lang\/VirtualThread.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadBuilders$BoundVirtualThread.class\",\n+                \"\/modules\/java.base\/java\/util\/Map.class\",\n+                \"\/modules\/java.base\/java\/util\/Dictionary.class\",\n+                \"\/modules\/java.base\/java\/util\/Hashtable.class\",\n+                \"\/modules\/java.base\/java\/util\/Properties.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessibleObject.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Member.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Field.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Parameter.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Executable.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Method.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Constructor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationScope.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/StackChunk.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodAccessorImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/annotation\/Annotation.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/CallerSensitive.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ConstructorAccessorImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MemberName.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ResolvedMethodName.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleNatives.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeDescriptor$OfMethod.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodType.class\",\n+                \"\/modules\/java.base\/java\/lang\/BootstrapMethodError.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/CallSite.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/ABIDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/VMStorage.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/foreign\/abi\/UpcallLinker$CallRegs.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ConstantCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MutableCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VolatileCallSite.class\",\n+                \"\/modules\/java.base\/java\/lang\/AssertionStatusDirectives.class\",\n+                \"\/modules\/java.base\/java\/lang\/Appendable.class\",\n+                \"\/modules\/java.base\/java\/lang\/AbstractStringBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringBuffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/UnsafeConstants.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Unsafe.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/Modules.class\",\n+                \"\/modules\/java.base\/java\/lang\/AutoCloseable.class\",\n+                \"\/modules\/java.base\/java\/io\/Closeable.class\",\n+                \"\/modules\/java.base\/java\/io\/InputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/ByteArrayInputStream.class\",\n+                \"\/modules\/java.base\/java\/net\/URL.class\",\n+                \"\/modules\/java.base\/java\/lang\/Enum.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/Manifest.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$AppClassLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$PlatformClassLoader.class\",\n+                \"\/modules\/java.base\/java\/security\/CodeSource.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentMap.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractMap.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/Iterable.class\",\n+                \"\/modules\/java.base\/java\/util\/Collection.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/List.class\",\n+                \"\/modules\/java.base\/java\/util\/RandomAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractList.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayList.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackTraceElement.class\",\n+                \"\/modules\/java.base\/java\/nio\/Buffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackWalker.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackStreamFactory$AbstractStackWalker.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackWalker$StackFrame.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/StackFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/LiveStackFrame.class\",\n+                \"\/modules\/java.base\/java\/lang\/LiveStackFrameInfo.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractOwnableSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Boolean.class\",\n+                \"\/modules\/java.base\/java\/lang\/Character.class\",\n+                \"\/modules\/java.base\/java\/lang\/Number.class\",\n+                \"\/modules\/java.base\/java\/lang\/Float.class\",\n+                \"\/modules\/java.base\/java\/lang\/Double.class\",\n+                \"\/modules\/java.base\/java\/lang\/Byte.class\",\n+                \"\/modules\/java.base\/java\/lang\/Short.class\",\n+                \"\/modules\/java.base\/java\/lang\/Integer.class\",\n+                \"\/modules\/java.base\/java\/lang\/Long.class\",\n+                \"\/modules\/java.base\/java\/lang\/Void.class\",\n+                \"\/modules\/java.base\/java\/util\/Iterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/RecordComponent.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$Vector.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorMask.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/FillerObject.class\",\n+                \"\/modules\/java.base\/java\/lang\/NullPointerException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArithmeticException.class\",\n+                \"\/modules\/java.base\/java\/lang\/IndexOutOfBoundsException.class\",\n+                \"\/modules\/java.base\/java\/lang\/ArrayIndexOutOfBoundsException.class\",\n+                \"\/modules\/java.base\/java\/io\/ObjectStreamField.class\",\n+                \"\/modules\/java.base\/java\/util\/Comparator.class\",\n+                \"\/modules\/java.base\/java\/lang\/String$CaseInsensitiveComparator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/VM.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module$ArchivedData.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/CDS.class\",\n+                \"\/modules\/java.base\/java\/util\/Set.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableSet.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$Set12.class\",\n+                \"\/modules\/java.base\/java\/util\/Objects.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableList.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListN.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$AbstractImmutableMap.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangReflectAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/ReflectAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/SharedSecrets.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory.class\",\n+                \"\/modules\/java.base\/java\/io\/ObjectStreamClass.class\",\n+                \"\/modules\/java.base\/java\/lang\/Math.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/ReflectionFactory$Config.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangRefAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Null.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/ReferenceQueue$Lock.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/SystemProps$Raw.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/Charset.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/spi\/CharsetProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/StandardCharsets.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringLatin1.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/HistoricallyNamedCharset.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/Unicode.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/StrictMath.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ArraysSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/Map$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$Node.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$TreeNode.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringConcatHelper.class\",\n+                \"\/modules\/java.base\/java\/lang\/VersionProps.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runtime.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/Lock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Segment.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CounterCell.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Node.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/LockSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ReservationNode.class\",\n+                \"\/modules\/java.base\/java\/util\/AbstractSet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$EntrySet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$HashIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$EntryIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/StaticProperty.class\",\n+                \"\/modules\/java.base\/java\/io\/FileInputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/System$In.class\",\n+                \"\/modules\/java.base\/java\/io\/FileDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaIOFileDescriptorAccess.class\",\n+                \"\/modules\/java.base\/java\/io\/Flushable.class\",\n+                \"\/modules\/java.base\/java\/io\/OutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/FileOutputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/System$Out.class\",\n+                \"\/modules\/java.base\/java\/io\/FilterInputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedInputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/FilterOutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/PrintStream.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedOutputStream.class\",\n+                \"\/modules\/java.base\/java\/io\/Writer.class\",\n+                \"\/modules\/java.base\/java\/io\/OutputStreamWriter.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/StreamEncoder.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CharsetEncoder.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_8$Encoder.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CodingErrorAction.class\",\n+                \"\/modules\/java.base\/java\/util\/Arrays.class\",\n+                \"\/modules\/java.base\/java\/nio\/ByteBuffer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/ScopedMemoryAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Function.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/Preconditions.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BiFunction.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNioAccess.class\",\n+                \"\/modules\/java.base\/java\/nio\/HeapByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/ByteOrder.class\",\n+                \"\/modules\/java.base\/java\/io\/BufferedWriter.class\",\n+                \"\/modules\/java.base\/java\/lang\/Terminator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$Handler.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal.class\",\n+                \"\/modules\/java.base\/java\/util\/Hashtable$Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Signal$NativeHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/Integer$IntegerCache.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/OSEnvironment.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$State.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Reference$ReferenceHandler.class\",\n+                \"\/modules\/java.base\/java\/lang\/Thread$ThreadIdentifiers.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Finalizer$FinalizerThread.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/Cleaner.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptySet.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyList.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/IllegalArgumentException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleStatics.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/ClassFileFormatVersion.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharacterData.class\",\n+                \"\/modules\/java.base\/java\/lang\/CharacterDataLatin1.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ClassFileDumper.class\",\n+                \"\/modules\/java.base\/java\/util\/HexFormat.class\",\n+                \"\/modules\/java.base\/java\/lang\/Character$CharacterCache.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicInteger.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MemberName$Factory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/Reflection.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$MapN$MapNIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/KeyValueHolder.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/VerifyAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Modifier.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangModuleAccess.class\",\n+                \"\/modules\/java.base\/java\/io\/File.class\",\n+                \"\/modules\/java.base\/java\/io\/DefaultFileSystem.class\",\n+                \"\/modules\/java.base\/java\/io\/FileSystem.class\",\n+                \"\/modules\/java.base\/java\/io\/UnixFileSystem.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/DecimalDigits.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModulePatcher.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$IllegalNativeAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/HashSet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Modules.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$Counters.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedBootLayer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ArchivedModuleGraph.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModuleFinders.class\",\n+                \"\/modules\/java.base\/java\/net\/URI.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetUriAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModulesMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/SystemModules.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ExplodedSystemModules.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Watchable.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Path.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/FileSystems.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/DefaultFileSystemProvider.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/spi\/FileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/AbstractFileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystemProvider.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystemProvider.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/OpenOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/StandardOpenOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/FileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/LinuxFileSystem.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixPath.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/Util.class\",\n+                \"\/modules\/java.base\/java\/lang\/StringCoding.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixNativeDispatcher.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BootLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/Module$EnableNativeAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderHelper.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$CollectionView.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$KeySetView.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$LibraryPaths.class\",\n+                \"\/modules\/java.base\/java\/io\/File$PathStatus.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$CountedLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$Sync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantLock$NonfairSync.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryContext.class\",\n+                \"\/modules\/java.base\/java\/util\/Queue.class\",\n+                \"\/modules\/java.base\/java\/util\/Deque.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayDeque.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayDeque$DeqIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibrary.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/NativeLibraries$NativeLibraryImpl.class\",\n+                \"\/modules\/java.base\/java\/security\/cert\/Certificate.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValuesView.class\",\n+                \"\/modules\/java.base\/java\/util\/Enumeration.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$Traverser.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$BaseIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ConcurrentHashMap$ValueIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/PosixFileAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileStoreAttributes.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixMountEntry.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/CopyOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/LinkOption.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Files.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffers.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/CarrierThreadLocal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/TerminatingThreadLocal.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/ThreadLocal$ThreadLocalMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$SetFromMap.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeySet.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerFactory.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/ThreadFactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Cleaner.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanableList$Node.class\",\n+                \"\/modules\/java.base\/java\/lang\/ref\/Cleaner$Cleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/PhantomCleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$CleanerCleanable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/InnocuousThread.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/NativeBuffer$Deallocator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/ref\/CleanerImpl$PhantomCleanableRef.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleFinder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModulePath.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/Attributes$Name.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/Array.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/perf\/PerfCounter.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/perf\/Perf.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/DirectBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/MappedByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/DirectByteBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/Bits.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/atomic\/AtomicLong.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/VM$BufferPool.class\",\n+                \"\/modules\/java.base\/java\/nio\/LongBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/DirectLongBufferU.class\",\n+                \"\/modules\/java.base\/java\/util\/zip\/ZipConstants.class\",\n+                \"\/modules\/java.base\/java\/util\/zip\/ZipFile.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/JarFile.class\",\n+                \"\/modules\/java.base\/java\/util\/BitSet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilZipFileAccess.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilJarAccess.class\",\n+                \"\/modules\/java.base\/java\/util\/jar\/JavaUtilJarAccessImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/Runtime$Version.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$List12.class\",\n+                \"\/modules\/java.base\/java\/util\/Optional.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/AttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/BasicFileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/DosFileAttributeView.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/UserDefinedFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/DynamicFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/AbstractBasicFileAttributeView.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributeViews$Basic.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileAttributes$UnixAsBasicFileAttributes.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream$Filter.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/Files$AcceptAllFilter.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/DirectoryStream.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/SecureDirectoryStream.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixSecureDirectoryStream.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReadWriteLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$FairSync.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock$WriteLock.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixDirectoryStream$UnixDirectoryIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/file\/attribute\/FileAttribute.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixFileModeAttribute.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixChannelFactory$Flags.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$EmptyIterator.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/Channel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ReadableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/WritableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SeekableByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/GatheringByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/ScatteringByteChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/InterruptibleChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractInterruptibleChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/FileChannel.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeDispatcher.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcher.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/UnixFileDispatcherImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileDispatcherImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/IOUtil.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Interruptible.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeThreadSet.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/FileChannelImpl$Closer.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/Channels.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Streams.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/SelChImpl.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/NetworkChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SelectableChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/spi\/AbstractSelectableChannel.class\",\n+                \"\/modules\/java.base\/java\/nio\/channels\/SocketChannel.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/SocketChannelImpl.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/ChannelInputStream.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Supplier.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeySet.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferencedKeyMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ReferenceKey.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/StrongReferenceKey.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodTypeForm.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/WeakReferenceKey.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/Wrapper$Format.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ConstantDescs.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/ClassDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ClassOrInterfaceDescImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ArrayClassDescImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/ConstantUtils.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/MethodTypeDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/MethodTypeDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/MethodHandleDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DirectMethodHandleDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/DirectMethodHandleDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/constant\/PrimitiveClassDescImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/constant\/DynamicConstantDesc$AnonymousDynamicConstantDesc.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$NamedFunction.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Holder.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/ValueConversions.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/Invokers.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchMethodException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$BasicType.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/TypeKind.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Name.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaForm$Holder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AnnotationElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Annotation.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/PoolEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/Utf8Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$Utf8EntryImpl$State.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Attribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/MethodElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/FieldElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util$Writable.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractElement.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundRuntimeVisibleAnnotationsAttribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Attributes.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$RuntimeVisibleAnnotationsMapper.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/AttributeMapper$AttributeStability.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleImpl$Intrinsic.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SplitConstantPool.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/BootstrapMethodEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/EntryMap.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/Util.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/ClassEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractNamedEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$ClassEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Consumer.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFile.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassFileImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassFileBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AttributeHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Superclass.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/SuperclassImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/attribute\/SourceFileAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$UnboundSourceFileAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$SourceFileMapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BoundAttribute.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/MethodBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/MethodInfo.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractRefsEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$NameAndTypeEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MemberRefEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/FieldRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$AbstractMemberRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$FieldRefEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InvokerBytecodeGenerator$ClassData.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CodeBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelContext.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CodeElement.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/PseudoInstruction.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/CharacterRange.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariable.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LocalVariableType.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder$DeferredLabel.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/BufWriter.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BufWriterImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Label.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/instruction\/LabelTarget.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/LabelImpl.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/util\/VerifyType.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Opcode.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Opcode$Kind.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/MethodRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$MethodRefEntryImpl.class\",\n+                \"\/modules\/java.base\/sun\/invoke\/empty\/Empty.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/UnboundAttribute$AdHocAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper$CodeMapper.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/FieldBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/CustomAttribute.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AnnotationReader.class\",\n+                \"\/modules\/java.base\/java\/util\/ListIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$ListItr.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Frame.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/StackMapGenerator$Type.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper$CodeRange.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassLoadingClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$CachedClassHierarchyResolver.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassHierarchyResolver$ClassHierarchyInfo.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl$ClassHierarchyInfoImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/ClassReader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ModifiedUtf.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandles$Lookup$ClassDefiner.class\",\n+                \"\/modules\/java.base\/java\/lang\/IncompatibleClassChangeError.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchMethodError.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BootstrapMethodInvoker.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InnerClassLambdaMetafactory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/MethodHandleInfo.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/InfoFromMemberName.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$Access.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaUtilCollectionAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/Interfaces.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/InterfacesImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/TypeConvertingMethodAdapter.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Constructor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaLangInvokeAccess.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessMode.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessType.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/Invokers$Holder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo.class\",\n+                \"\/modules\/java.base\/java\/io\/DataInput.class\",\n+                \"\/modules\/java.base\/java\/io\/DataInputStream.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$CountingDataInput.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/NativeThread.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/Blocker.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Util.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/Util$BufferCache.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ch\/IOStatus.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/util\/ByteArray.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandles.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsShorts$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleGuards.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarForm.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsChars$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsInts$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsFloats$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsLongs$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ByteArrayViewVarHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandleByteArrayAsDoubles$ArrayHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/VarHandle$AccessDescriptor.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$Entry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$IndexEntry.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/StandardCharsets.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/US_ASCII.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/ISO_8859_1.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16BE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16LE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_16.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32BE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32LE.class\",\n+                \"\/modules\/java.base\/sun\/nio\/cs\/UTF_32.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$ConstantPool$ValueEntry.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Builder.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Modifier.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag.class\",\n+                \"\/modules\/java.base\/java\/lang\/reflect\/AccessFlag$Location.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires$Modifier.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Requires.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeySet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeyIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/Checks.class\",\n+                \"\/modules\/java.base\/java\/util\/ArrayList$Itr.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Provides.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableCollection.class\",\n+                \"\/modules\/java.base\/java\/util\/Collections$UnmodifiableSet.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$Values.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$ValueIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/ImmutableCollections$SetN$SetNIterator.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleInfo$Attributes.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferences.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleReader.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixUriUtils.class\",\n+                \"\/modules\/java.base\/java\/net\/URI$Parser.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleReference.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleReferenceImpl.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Exports.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ModuleDescriptor$Opens.class\",\n+                \"\/modules\/java.base\/sun\/nio\/fs\/UnixException.class\",\n+                \"\/modules\/java.base\/java\/io\/IOException.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ArchivedClassLoaders.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaders$BootClassLoader.class\",\n+                \"\/modules\/java.base\/java\/lang\/ClassLoader$ParallelLoaders.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap$Entry.class\",\n+                \"\/modules\/java.base\/java\/util\/WeakHashMap$KeySet.class\",\n+                \"\/modules\/java.base\/java\/security\/Principal.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath.class\",\n+                \"\/modules\/java.base\/java\/net\/URLStreamHandlerFactory.class\",\n+                \"\/modules\/java.base\/java\/net\/URL$DefaultFactory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/access\/JavaNetURLAccess.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/ParseUtil.class\",\n+                \"\/modules\/java.base\/java\/net\/URLStreamHandler.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/protocol\/file\/Handler.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/IPAddressUtil$MASKS.class\",\n+                \"\/modules\/java.base\/sun\/net\/www\/protocol\/jar\/Handler.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/ClassLoaderValue.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/BuiltinClassLoader$LoadedModule.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/DefaultRoots.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$HashMapSpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$ValueSpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamSupport.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/BaseStream.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Stream.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/PipelineHelper.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/AbstractPipeline.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$Head.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$Type.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamOpFlag$MaskBuilder.class\",\n+                \"\/modules\/java.base\/java\/util\/EnumMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class$ReflectionData.class\",\n+                \"\/modules\/java.base\/java\/lang\/Class$Atomic.class\",\n+                \"\/modules\/java.base\/java\/lang\/PublicMethods$MethodList.class\",\n+                \"\/modules\/java.base\/java\/lang\/PublicMethods$Key.class\",\n+                \"\/modules\/java.base\/sun\/reflect\/annotation\/AnnotationParser.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/MethodHandleAccessorFactory$LazyStaticHolder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/annotation\/Stable.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$SpeciesData.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$SpeciesData.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/ClassSpecializer$Factory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Specializer$Factory.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/SimpleMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/NoSuchFieldException.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/BoundMethodHandle$Species_L.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Accessor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DelegatingMethodHandle$Holder.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$TransformKey.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormBuffer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/LambdaFormEditor$Transform.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collectors.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collector$Characteristics.class\",\n+                \"\/modules\/java.base\/java\/util\/EnumSet.class\",\n+                \"\/modules\/java.base\/java\/util\/RegularEnumSet.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collector.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Collectors$CollectorImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BiConsumer.class\",\n+                \"\/modules\/java.base\/java\/lang\/invoke\/DirectMethodHandle$Interface.class\",\n+                \"\/modules\/java.base\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry$InterfaceMethodRefEntryImpl.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/BinaryOperator.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/TerminalOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$ReduceOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/StreamShape.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Sink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/TerminalSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$AccumulatingSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReduceOps$Box.class\",\n+                \"\/modules\/java.base\/java\/util\/HashMap$KeySpliterator.class\",\n+                \"\/modules\/java.base\/java\/util\/function\/Predicate.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/ReferencePipeline$StatelessOp.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/Sink$ChainedReference.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleResolution.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindSink$OfRef.class\",\n+                \"\/modules\/java.base\/java\/util\/stream\/FindOps$FindOp.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterators.class\",\n+                \"\/modules\/java.base\/java\/util\/Spliterators$IteratorSpliterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/Configuration.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/Resolver.class\",\n+                \"\/modules\/java.base\/java\/lang\/ModuleLayer.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedSet.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashSet.class\",\n+                \"\/modules\/java.base\/java\/util\/SequencedMap.class\",\n+                \"\/modules\/java.base\/java\/util\/LinkedHashMap.class\",\n+                \"\/modules\/java.base\/java\/lang\/module\/ResolvedModule.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleLoaderMap$Mapper.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/AbstractClassLoaderValue$Memoizer.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ServicesCatalog$ServiceProvider.class\",\n+                \"\/modules\/java.base\/java\/util\/concurrent\/CopyOnWriteArrayList.class\",\n+                \"\/modules\/java.base\/java\/lang\/ModuleLayer$Controller.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/module\/ModuleBootstrap$SafeModuleFinder.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/ContinuationSupport.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/vm\/Continuation$Pinned.class\",\n+                \"\/modules\/java.base\/sun\/launcher\/LauncherHelper.class\",\n+                \"\/modules\/java.base\/sun\/net\/util\/URLUtil.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$Loader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/URLClassPath$FileLoader.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/loader\/Resource.class\",\n+                \"\/modules\/java.base\/java\/io\/FileCleanable.class\",\n+                \"\/modules\/java.base\/sun\/nio\/ByteBuffered.class\",\n+                \"\/modules\/java.base\/java\/security\/SecureClassLoader$CodeSourceKey.class\",\n+                \"\/modules\/java.base\/java\/security\/PermissionCollection.class\",\n+                \"\/modules\/java.base\/java\/security\/Permissions.class\",\n+                \"\/modules\/java.base\/java\/lang\/NamedPackage.class\",\n+                \"\/modules\/java.base\/jdk\/internal\/misc\/MethodFinder.class\",\n+                \"\/modules\/java.base\/java\/lang\/Readable.class\",\n+                \"\/modules\/java.base\/java\/nio\/CharBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/HeapCharBuffer.class\",\n+                \"\/modules\/java.base\/java\/nio\/charset\/CoderResult.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$IdentityHashMapIterator.class\",\n+                \"\/modules\/java.base\/java\/util\/IdentityHashMap$KeyIterator.class\",\n+                \"\/modules\/java.base\/java\/lang\/Shutdown.class\",\n+                \"\/modules\/java.base\/java\/lang\/Shutdown$Lock.class\");\n+\n+        private static final Pattern SPLIT_MODULE_AND_PATH = Pattern.compile(\"\/modules\/([^\/]+)\/(.*)\");\n+\n+        private static final Map<String, List<String>> MODULE_TO_PATHS = INIT_CLASSES.stream()\n+                .map(name -> {\n+                    Matcher m = SPLIT_MODULE_AND_PATH.matcher(name);\n+                    if (!m.matches()) {\n+                        throw new IllegalArgumentException(\"Bad resource name: \" + name);\n+                    }\n+                    return m.toMatchResult();\n+                })\n+                .collect(groupingBy(m -> m.group(1), mapping(m -> m.group(2), toList())));\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/internal\/jrtfs\/ImageReaderBenchmark.java","additions":992,"deletions":869,"binary":false,"changes":1861,"status":"modified"}]}