{"files":[{"patch":"@@ -149,1 +149,2 @@\n-            --system none, \\\n+            --system none \\\n+            --enable-preview -source $(JDK_SOURCE_TARGET_VERSION), \\\n","filename":"make\/CompileJavaModules.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape restricted\n+DISABLED_WARNINGS_java += this-escape restricted preview\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6038,0 +6038,5 @@\n+  \/\/ Fixing ACC_SUPER\/ACC_IDENTITY for old class files\n+  if ((!(flags & JVM_ACC_INTERFACE)) && _major_version <= JAVA_22_VERSION && _minor_version != JAVA_PREVIEW_MINOR_VERSION) {\n+    flags |= JVM_ACC_IDENTITY;\n+  }\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        @JEP(number=8277163, title=\"Value Objects\")\n+        @JEP(number=401, title=\"Value Classes and Objects\", status = \"Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+            case VALUE_CLASSES -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -248,1 +248,0 @@\n-        VALUE_CLASSES(JDK21, Fragments.FeatureValueClasses, DiagKind.PLURAL),\n@@ -253,0 +252,1 @@\n+        VALUE_CLASSES(JDK22, Fragments.FeatureValueClasses, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -294,1 +294,2 @@\n-        allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n+        allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -3144,1 +3145,2 @@\n-        if ((flags & ACC_STRICT) != 0) {\n+        boolean previewClassFile = minorVersion == ClassFile.PREVIEW_MINOR_VERSION;\n+        if (allowValueClasses && previewClassFile && (flags & ACC_STRICT) != 0) {\n@@ -3164,0 +3166,1 @@\n+        boolean previewClassFile = minorVersion == ClassFile.PREVIEW_MINOR_VERSION;\n@@ -3168,1 +3171,1 @@\n-        if ((flags & ACC_IDENTITY) != 0 || (majorVersion <= V66.major && (flags & INTERFACE) == 0)) {\n+        if ((flags & ACC_IDENTITY) != 0 || (majorVersion < V66.major && (flags & INTERFACE) == 0)) {\n@@ -3170,1 +3173,1 @@\n-        } else if ((flags & INTERFACE) == 0 && allowValueClasses && majorVersion > V66.major) {\n+        } else if ((flags & INTERFACE) == 0 && allowValueClasses && previewClassFile && majorVersion >= V66.major) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -198,1 +198,2 @@\n-        this.allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n+        this.allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -2575,3 +2576,0 @@\n-            long badModifiers = mods.flags & ~(Flags.VALUE_CLASS | Flags.FINAL);\n-            if (badModifiers != 0)\n-                log.error(token.pos, Errors.ModNotAllowedHere(asFlagSet(badModifiers)));\n@@ -2932,0 +2930,1 @@\n+            checkSourceLevel(Feature.VALUE_CLASSES);\n@@ -3529,0 +3528,1 @@\n+                    checkSourceLevel(Feature.VALUE_CLASSES);\n@@ -3800,1 +3800,1 @@\n-                return Source.JDK18;\n+                return Source.JDK22;\n@@ -3802,1 +3802,1 @@\n-                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK18));\n+                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK22));\n@@ -4927,1 +4927,1 @@\n-                        next.name() == names.value;\n+                        allowValueClasses && next.name() == names.value;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * @run main\/othervm\/timeout=450 -XX:+EnableValhalla compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main\/othervm\/timeout=450 -XX:+EnableValhalla --enable-preview compiler.valhalla.inlinetypes.TestLWorld\n@@ -4180,1 +4180,1 @@\n-    static abstract class MyAbstract2 implements MyInterface2 {\n+    static abstract value class MyAbstract2 implements MyInterface2 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,8 +82,1 @@\n-tools\/javac\/valhalla\/primitive-classes\/ArrayCreationWithQuestion.java 8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/BoxValCastTest.java            8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/ConstantPropagationTest.java   8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/ProjectedArrayDotClass.java    8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/QTypeTest.java                 8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassBytecodeTest.java 8323785    generic-all\n-tools\/javac\/valhalla\/primitive-classes\/ValueCreationTest.java         8323785    generic-all\n-tools\/javac\/valhalla\/value-objects\/ValueCreationTest.java             8323786    generic-all\n+tools\/javac\/valhalla\/value-objects\/ValueCreationTest.java                       8323786    generic-all\n@@ -92,0 +85,2 @@\n+\n+\n","filename":"test\/langtools\/ProblemList.txt","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+                \"--enable-preview\", \"-source\", String.valueOf(Runtime.version().feature()),\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueClasses\/TestValueClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,3 +1,5 @@\n-DA_DUConstructors.java:22:17: compiler.err.var.might.already.be.assigned: x\n-DA_DUConstructors.java:41:23: compiler.err.var.might.not.have.been.initialized: x\n-DA_DUConstructors.java:63:20: compiler.err.var.might.already.be.assigned: x\n+DA_DUConstructors.java:23:17: compiler.err.var.might.already.be.assigned: x\n+DA_DUConstructors.java:42:23: compiler.err.var.might.not.have.been.initialized: x\n+DA_DUConstructors.java:64:20: compiler.err.var.might.already.be.assigned: x\n+- compiler.note.preview.filename: DA_DUConstructors.java, DEFAULT\n+- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.out","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+- compiler.note.preview.filename: ValueClassSuperInitFails.java, DEFAULT\n+- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitFails.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ConcreteSuperclassOfValueClass.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuperClassMethodCannotBeSynchronized.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ThisExposedPrematurely.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqIdentity.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueWithIdentitySuper.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,1 +115,3 @@\n-                \"- compiler.note.proc.messager:     constructor modifiers: []\"\n+                \"- compiler.note.proc.messager:     constructor modifiers: []\",\n+                \"- compiler.note.preview.filename: Interface.java, DEFAULT\",\n+                \"- compiler.note.preview.recompile\"\n@@ -120,1 +122,1 @@\n-                    .options(\"-processor\", ValueClassesProcessor.class.getName(),\n+                    .options(\"--enable-preview\", \"-source\", String.valueOf(Runtime.version().feature()), \"-processor\", ValueClassesProcessor.class.getName(),\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestValueClasses.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Check array creation with V and V.ref\n+ * @summary Check array creation with value classes\n@@ -30,2 +30,2 @@\n- * @compile ArrayCreationWithQuestion.java\n- * @run main ArrayCreationWithQuestion\n+ * @compile --enable-preview -source ${jdk.version} ArrayCreationWithQuestion.java\n+ * @run main\/othervm -XX:+EnableValhalla --enable-preview ArrayCreationWithQuestion\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AsSuperTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8282107\n- * @summary Check that javac can compile against value classes at lower source levels\n- * @compile GenericPoint.java\n- * @compile ConsumeValueClassAtLowerLevel.java\n- * @compile --source 16 -XDrawDiagnostics ConsumeValueClassAtLowerLevel.java\n- *\/\n-\n-public class ConsumeValueClassAtLowerLevel {\n-    void m() {\n-        GenericPoint<Integer> gl = new GenericPoint<>(0, 0);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConsumeValueClassAtLowerLevel.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 16\n-ConsumeValueClassAtLowerLevel.java:16:36: compiler.err.cant.resolve.location.args: kindname.constructor, GenericPoint, , int,int, (compiler.misc.location: kindname.class, GenericPoint<T>, null)\n-1 error\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConsumeValueClassAtLowerLevel.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -5,0 +5,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/DualNonDuplicateErrors.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2 +1,4 @@\n-DualNonDuplicateErrors.java:17:13: compiler.err.cant.ref.before.ctor.called: this\n-DualNonDuplicateErrors.java:17:9: compiler.err.cant.ref.before.ctor.called: foo(DualNonDuplicateErrors)\n+DualNonDuplicateErrors.java:18:13: compiler.err.cant.ref.before.ctor.called: this\n+DualNonDuplicateErrors.java:18:9: compiler.err.cant.ref.before.ctor.called: foo(DualNonDuplicateErrors)\n+- compiler.note.preview.filename: DualNonDuplicateErrors.java, DEFAULT\n+- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/DualNonDuplicateErrors.out","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoAutoInheritanceOfIdentityFlagBit.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryPreloadsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PermitsValueTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttributeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-\n@@ -65,1 +64,0 @@\n-\n@@ -70,0 +68,3 @@\n+    private static String[] PREVIEW_OPTIONS = {\"--enable-preview\", \"-source\",\n+            Integer.toString(Runtime.version().feature())};\n+\n@@ -72,0 +73,1 @@\n+        setCompileOptions(PREVIEW_OPTIONS);\n@@ -114,12 +116,0 @@\n-    @Test\n-    void testCheckFeatureSourceLevel() {\n-        setCompileOptions(new String[]{\"--release\", \"13\"});\n-        assertFail(\"compiler.err.feature.not.supported.in.source.plural\",\n-                \"\"\"\n-                value class V {\n-                    public int v = 42;\n-                }\n-                \"\"\");\n-        setCompileOptions(new String[]{});\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"}]}