{"files":[{"patch":"@@ -830,1 +830,1 @@\n-        final int RESULT    = nameCursor-1;  \/\/ either the call or the cast\n+        final int RESULT    = nameCursor-1;  \/\/ either the call, zero instance, or the cast\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n- * @summary test VarHandle on value class array\n- * @compile -XDenablePrimitiveClasses ArrayElementVarHandleTest.java\n@@ -30,1 +28,2 @@\n- * @run testng\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n+ * @run junit\/othervm -XX:+EnableValhalla -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n+ * @summary test VarHandle on value class array\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @compile -XDenablePrimitiveClasses LambdaConversion.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaConversion.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n- * @summary Test lambdas with parameter types or return type of value class\n- * @compile -XDenablePrimitiveClasses LambdaTest.java\n@@ -29,0 +27,1 @@\n+ * @summary Test lambdas with parameter types or return type of value class\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @compile -XDenablePrimitiveClasses MHZeroValue.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n- * @summary test MethodHandle and VarHandle of value classes\n- * @compile -XDenablePrimitiveClasses MethodHandleTest.java\n@@ -30,0 +28,1 @@\n+ * @summary test MethodHandle and VarHandle of value classes\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @compile -XDenablePrimitiveClasses MethodReference.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodReference.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @compile -XDenablePrimitiveClasses Nest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/Nest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @compile -XDenablePrimitiveClasses NullRestrictedTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n- * @summary test Object methods on value classes\n- * @compile -XDenablePrimitiveClasses ObjectMethods.java\n@@ -31,0 +29,1 @@\n+ * @summary test Object methods on value classes\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @summary Test ObjectMethods::bootstrap call via condy\n@@ -29,1 +28,0 @@\n- * @compile -XDenablePrimitiveClasses ObjectMethodsViaCondy.java\n@@ -31,0 +29,1 @@\n+ * @summary Test ObjectMethods::bootstrap call via condy\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n- * @summary Test dynamic proxies with parameter types or return type of value class\n- * @compile -XDenablePrimitiveClasses ProxyTest.java\n@@ -29,0 +27,1 @@\n+ * @summary Test dynamic proxies with parameter types or return type of value class\n","filename":"test\/jdk\/valhalla\/valuetypes\/ProxyTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n- * @summary test core reflection on value classes\n- * @compile -XDenablePrimitiveClasses Reflection.java\n@@ -30,0 +28,1 @@\n+ * @summary test core reflection on value classes\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n- * @summary Basic stream tests to iterate on nullable and null-restricted values\n- * @compile -XDenablePrimitiveClasses StreamTest.java\n@@ -29,0 +27,1 @@\n+ * @summary Basic stream tests to iterate on nullable and null-restricted values\n","filename":"test\/jdk\/valhalla\/valuetypes\/StreamTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses SubstitutabilityTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n- * @summary Test ConstantDesc for value classes\n- * @compile -XDenablePrimitiveClasses ValueConstantDesc.java\n@@ -30,0 +28,1 @@\n+ * @summary Test ConstantDesc for value classes\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * @summary Test value classes with Reference types\n- * @compile -XDenablePrimitiveClasses WeakReferenceTest.java\n@@ -36,0 +34,1 @@\n+ * @summary Test value classes with Reference types\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakReferenceTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @summary Test WeakHashMap.ValuePolicy modes\n@@ -28,0 +27,1 @@\n+ * @summary Test WeakHashMap.ValuePolicy modes\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakValuePolicyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}