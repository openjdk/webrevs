{"files":[{"patch":"@@ -783,1 +783,1 @@\n-                \"boot_jdk\", \"devkit\", \"graphviz\", \"pandoc\", buildJdkDep,\n+                \"autoconf\", \"boot_jdk\", \"devkit\", \"graphviz\", \"pandoc\", buildJdkDep,\n","filename":"make\/conf\/jib-profiles.js","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,1 +231,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -4649,1 +4648,0 @@\n-    @SuppressWarnings(\"unchecked\")\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+MICROBENCHMARK_GENSRC := $(MICROBENCHMARK_OUTPUT)\/gensrc\n@@ -107,1 +108,2 @@\n-        -processor org.openjdk.jmh.generators.BenchmarkProcessor, \\\n+        -processor org.openjdk.jmh.generators.BenchmarkProcessor \\\n+        -s $(MICROBENCHMARK_GENSRC), \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -287,3 +287,3 @@\n-\n-  if (is_power_of_2(c - 1)) {\n-    __ shift_left(left, exact_log2(c - 1), tmp);\n+  juint u_value = (juint)c;\n+  if (is_power_of_2(u_value - 1)) {\n+    __ shift_left(left, exact_log2(u_value - 1), tmp);\n@@ -292,2 +292,2 @@\n-  } else if (is_power_of_2(c + 1)) {\n-    __ shift_left(left, exact_log2(c + 1), tmp);\n+  } else if (is_power_of_2(u_value + 1)) {\n+    __ shift_left(left, exact_log2(u_value + 1), tmp);\n@@ -296,2 +296,3 @@\n-  } else {\n-    return false;\n+  } else if (c == -1) {\n+    __ negate(left, result);\n+    return true;\n@@ -299,0 +300,1 @@\n+  return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/globals_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2024 SAP SE. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"compiler\/compilerDirectives.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"asm\/macroAssembler.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"runtime\/synchronizer.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,4 +46,0 @@\n-#include \"oops\/oop.inline.hpp\"\n-#include \"runtime\/vm_version.hpp\"\n-#include \"utilities\/bitMap.inline.hpp\"\n-#include \"utilities\/powerOfTwo.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"ci\/ciMethod.hpp\"\n-#include \"ci\/ciStreams.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"ci\/ciInstance.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#include \"ci\/ciMethodData.hpp\"\n-#include \"jfr\/support\/jfrIntrinsics.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"c1\/c1_Canonicalizer.hpp\"\n-#include \"c1\/c1_ValueMap.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"c1\/c1_FrameMap.hpp\"\n@@ -38,1 +37,0 @@\n-#include \"code\/pcDesc.hpp\"\n@@ -51,1 +49,0 @@\n-#include \"memory\/allocation.inline.hpp\"\n@@ -58,1 +55,0 @@\n-#include \"oops\/klass.inline.hpp\"\n@@ -72,1 +68,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/deoptimization.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"c1\/c1_Canonicalizer.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"utilities\/bitMap.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -419,0 +419,1 @@\n+        _is_multi_release = cpe->is_multi_release_jar();\n@@ -2295,1 +2296,1 @@\n-    return \/*dumptime*\/ narrow_oop_base() + r->mapping_offset();\n+    return \/*dumptime*\/ (address)((uintptr_t)narrow_oop_base() + r->mapping_offset());\n@@ -2321,1 +2322,1 @@\n-    return \/*runtime*\/ CompressedOops::base() + r->mapping_offset();\n+    return \/*runtime*\/ (address)((uintptr_t)CompressedOops::base() + r->mapping_offset());\n@@ -2774,1 +2775,1 @@\n-      ent = ClassLoader::create_class_path_entry(THREAD, path, &st, false, false);\n+      ent = ClassLoader::create_class_path_entry(THREAD, path, &st, false, false, scpe->is_multi_release());\n@@ -2809,1 +2810,1 @@\n-  if (class_loader() != nullptr && !cpe->is_modules_image()) {\n+  if (class_loader() != nullptr && !cpe->is_modules_image() && cpe->is_multi_release_jar()) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+class ReservedSpace;\n@@ -68,0 +69,1 @@\n+  bool   _is_multi_release;\n@@ -75,1 +77,1 @@\n-                           _from_class_path_attr(false), _timestamp(0),\n+                           _from_class_path_attr(false), _is_multi_release(false), _timestamp(0),\n@@ -96,0 +98,1 @@\n+  bool is_multi_release()     { return _is_multi_release; }\n@@ -519,1 +522,0 @@\n-  ReservedSpace reserve_shared_memory();\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"memory\/memoryReserver.hpp\"\n@@ -287,1 +288,1 @@\n-  _symbol_rs = ReservedSpace(symbol_rs_size, mtClassShared);\n+  _symbol_rs = MemoryReserver::reserve(symbol_rs_size, mtClassShared);\n@@ -1275,1 +1276,3 @@\n-        archive_space_rs.release();\n+        MemoryReserver::release(archive_space_rs);\n+        \/\/ Mark as not reserved\n+        archive_space_rs = {};\n@@ -1447,2 +1450,4 @@\n-    archive_space_rs = ReservedSpace(archive_space_size, archive_space_alignment,\n-                                     os::vm_page_size(), (char*)base_address);\n+    archive_space_rs = MemoryReserver::reserve((char*)base_address,\n+                                               archive_space_size,\n+                                               archive_space_alignment,\n+                                               os::vm_page_size());\n@@ -1514,4 +1519,8 @@\n-      archive_space_rs = ReservedSpace(archive_space_size, archive_space_alignment,\n-                                       os::vm_page_size(), (char*)base_address);\n-      class_space_rs   = ReservedSpace(class_space_size, class_space_alignment,\n-                                       os::vm_page_size(), (char*)ccs_base);\n+      archive_space_rs = MemoryReserver::reserve((char*)base_address,\n+                                                 archive_space_size,\n+                                                 archive_space_alignment,\n+                                                 os::vm_page_size());\n+      class_space_rs   = MemoryReserver::reserve((char*)ccs_base,\n+                                                 class_space_size,\n+                                                 class_space_alignment,\n+                                                 os::vm_page_size());\n@@ -1528,2 +1537,4 @@\n-      total_space_rs = ReservedSpace(total_range_size, base_address_alignment,\n-                                     os::vm_page_size(), (char*) base_address);\n+      total_space_rs = MemoryReserver::reserve((char*) base_address,\n+                                               total_range_size,\n+                                               base_address_alignment,\n+                                               os::vm_page_size());\n@@ -1577,1 +1588,2 @@\n-    total_space_rs.release();\n+    MemoryReserver::release(total_space_rs);\n+    total_space_rs = {};\n@@ -1581,1 +1593,2 @@\n-      archive_space_rs.release();\n+      MemoryReserver::release(archive_space_rs);\n+      archive_space_rs = {};\n@@ -1585,1 +1598,2 @@\n-      class_space_rs.release();\n+      MemoryReserver::release(class_space_rs);\n+      class_space_rs = {};\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"memory\/reservedSpace.hpp\"\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"opto\/node.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3917,0 +3917,6 @@\n+\n+  \/\/ Initialize cached modifier_flags to support Class.getModifiers().\n+  \/\/ This must follow setting inner_class attributes.\n+  int computed_modifiers = this_klass->compute_modifier_flags();\n+  this_klass->set_modifier_flags(computed_modifiers);\n+\n@@ -4237,3 +4243,7 @@\n-    if (super_ik->is_sealed() && !super_ik->has_as_permitted_subclass(this_klass)) {\n-      classfile_icce_error(\"class %s cannot inherit from sealed class %s\", super_ik, THREAD);\n-      return;\n+    if (super_ik->is_sealed()) {\n+      stringStream ss;\n+      ResourceMark rm(THREAD);\n+      if (!super_ik->has_as_permitted_subclass(this_klass, ss)) {\n+        classfile_icce_error(ss.as_string(), THREAD);\n+        return;\n+      }\n@@ -4294,6 +4304,7 @@\n-    if (k->is_sealed() && !k->has_as_permitted_subclass(this_klass)) {\n-      classfile_icce_error(this_klass->is_interface() ?\n-                             \"class %s cannot extend sealed interface %s\" :\n-                             \"class %s cannot implement sealed interface %s\",\n-                           k, THREAD);\n-      return;\n+    if (k->is_sealed()) {\n+      stringStream ss;\n+      ResourceMark rm(THREAD);\n+      if (!k->has_as_permitted_subclass(this_klass, ss)) {\n+        classfile_icce_error(ss.as_string(), THREAD);\n+        return;\n+      }\n@@ -5454,1 +5465,0 @@\n-  \/\/ The create_mirror() call will also call compute_modifiers()\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -403,0 +403,4 @@\n+  \/\/ Uses msg directly in the ICCE, with no additional content\n+  void classfile_icce_error(const char* msg,\n+                            TRAPS) const;\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-                                     bool is_boot_append, bool from_class_path_attr) : ClassPathEntry() {\n+                                     bool is_boot_append, bool from_class_path_attr, bool multi_release) : ClassPathEntry() {\n@@ -310,0 +310,1 @@\n+  _multi_release = multi_release;\n@@ -753,1 +754,2 @@\n-                                                     bool from_class_path_attr) {\n+                                                     bool from_class_path_attr,\n+                                                     bool is_multi_release) {\n@@ -766,1 +768,1 @@\n-      new_entry = new ClassPathZipEntry(zip, path, is_boot_append, from_class_path_attr);\n+      new_entry = new ClassPathZipEntry(zip, path, is_boot_append, from_class_path_attr, is_multi_release);\n@@ -799,1 +801,1 @@\n-          return new ClassPathZipEntry(zip, canonical_path, is_boot_append, false);\n+          return new ClassPathZipEntry(zip, canonical_path, is_boot_append, false, false);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1127,6 +1127,0 @@\n-  \/\/ Use this moment of initialization to cache modifier_flags also,\n-  \/\/ to support Class.getModifiers().  Instance classes recalculate\n-  \/\/ the cached flags after the class file is parsed, but before the\n-  \/\/ class is put into the system dictionary.\n-  int computed_modifiers = k->compute_modifier_flags();\n-  k->set_modifier_flags(computed_modifiers);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+#ifdef COMPILER2\n+#include \"opto\/c2_globals.hpp\"\n+#endif\n@@ -34,1 +37,0 @@\n-#include \"utilities\/xmlstream.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"opto\/c2_MacroAssembler.hpp\"\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,3 +43,0 @@\n-#ifdef COMPILER2\n-#include \"opto\/matcher.hpp\"\n-#endif\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+#include \"memory\/memoryReserver.hpp\"\n@@ -244,1 +245,7 @@\n-  _reserved_byte_size = align_up(raw_bytes, MAX2(page_sz, granularity));\n+  const size_t rs_align = MAX2(page_sz, granularity);\n+\n+  _reserved_byte_size = align_up(raw_bytes, rs_align);\n+\n+  ReservedSpace rs = MemoryReserver::reserve(_reserved_byte_size,\n+                                             rs_align,\n+                                             page_sz);\n@@ -246,3 +253,0 @@\n-  const size_t rs_align = page_sz == os::vm_page_size() ? 0 :\n-    MAX2(page_sz, granularity);\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n@@ -261,1 +265,4 @@\n-    rs.release();\n+    if (rs.is_reserved()) {\n+      MemoryReserver::release(rs);\n+      rs = {};\n+    }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciInlineKlass.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/modRefBarrierSetC1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,3 +85,0 @@\n-#ifdef COMPILER2\n-#include \"opto\/runtime.hpp\"\n-#endif\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+#include \"memory\/memoryReserver.hpp\"\n@@ -961,1 +962,11 @@\n-  ReservedHeapSpace total_rs(total_reserved, alignment, page_size, AllocateHeapAt);\n+  ReservedHeapSpace rhs = HeapReserver::reserve(total_reserved, alignment, page_size, AllocateHeapAt);\n+\n+  if (rhs.is_reserved()) {\n+    assert(total_reserved == rhs.size(),    \"must be exactly of required size\");\n+    assert(is_aligned(rhs.base(),alignment),\"must be exactly of required alignment\");\n+\n+    assert(markWord::encode_pointer_as_mark(rhs.base()).decode_pointer() == rhs.base(),\n+           \"area must be distinguishable from marks for mark-sweep\");\n+    assert(markWord::encode_pointer_as_mark(&rhs.base()[rhs.size()]).decode_pointer() ==\n+           &rhs.base()[rhs.size()],\n+           \"area must be distinguishable from marks for mark-sweep\");\n@@ -963,3 +974,0 @@\n-  if (total_rs.is_reserved()) {\n-    assert((total_reserved == total_rs.size()) && ((uintptr_t)total_rs.base() % alignment == 0),\n-           \"must be exactly of required size and alignment\");\n@@ -973,1 +981,1 @@\n-      CompressedOops::initialize(total_rs);\n+      CompressedOops::initialize(rhs);\n@@ -976,1 +984,1 @@\n-    Universe::calculate_verify_data((HeapWord*)total_rs.base(), (HeapWord*)total_rs.end());\n+    Universe::calculate_verify_data((HeapWord*)rhs.base(), (HeapWord*)rhs.end());\n@@ -978,1 +986,1 @@\n-    return total_rs;\n+    return rhs;\n@@ -987,1 +995,0 @@\n-  return ReservedHeapSpace(0, 0, os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/reservedSpace.hpp\"\n@@ -45,1 +46,0 @@\n-class ReservedHeapSpace;\n@@ -54,1 +54,0 @@\n-  friend class ReservedHeapSpace;\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -226,7 +226,0 @@\n-jint ArrayKlass::compute_modifier_flags() const {\n-  int identity_flag = (Arguments::enable_preview()) ? JVM_ACC_IDENTITY : 0;\n-\n-  return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC\n-                    | identity_flag;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -144,4 +144,0 @@\n-\n-  \/\/ jvm support\n-  jint compute_modifier_flags() const;\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-#include \"utilities\/stringUtils.hpp\"\n+#include \"utilities\/nativeStackPrinter.hpp\"\n@@ -103,0 +103,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -233,2 +234,4 @@\n-\/\/ Called to verify that k is a permitted subclass of this class\n-bool InstanceKlass::has_as_permitted_subclass(const InstanceKlass* k) const {\n+\/\/ Called to verify that k is a permitted subclass of this class.\n+\/\/ The incoming stringStream is used to format the messages for error logging and for the caller\n+\/\/ to use for exception throwing.\n+bool InstanceKlass::has_as_permitted_subclass(const InstanceKlass* k, stringStream& ss) const {\n@@ -242,1 +245,1 @@\n-    log_trace(class, sealed)(\"Checking for permitted subclass of %s in %s\",\n+    log_trace(class, sealed)(\"Checking for permitted subclass %s in %s\",\n@@ -248,3 +251,9 @@\n-    ResourceMark rm(current);\n-    log_trace(class, sealed)(\"Check failed for same module of permitted subclass %s and sealed class %s\",\n-                             k->external_name(), this->external_name());\n+    ss.print(\"Failed same module check: subclass %s is in module '%s' with loader %s, \"\n+             \"and sealed class %s is in module '%s' with loader %s\",\n+             k->external_name(),\n+             k->module()->name_as_C_string(),\n+             k->module()->loader_data()->loader_name_and_id(),\n+             this->external_name(),\n+             this->module()->name_as_C_string(),\n+             this->module()->loader_data()->loader_name_and_id());\n+    log_trace(class, sealed)(\" - %s\", ss.as_string());\n@@ -255,3 +264,9 @@\n-    ResourceMark rm(current);\n-    log_trace(class, sealed)(\"Check failed, subclass %s not public and not in the same package as sealed class %s\",\n-                             k->external_name(), this->external_name());\n+    ss.print(\"Failed same package check: non-public subclass %s is in package '%s' with classloader %s, \"\n+             \"and sealed class %s is in package '%s' with classloader %s\",\n+             k->external_name(),\n+             k->package() != nullptr ? k->package()->name()->as_C_string() : \"unnamed\",\n+             k->module()->loader_data()->loader_name_and_id(),\n+             this->external_name(),\n+             this->package() != nullptr ? this->package()->name()->as_C_string() : \"unnamed\",\n+             this->module()->loader_data()->loader_name_and_id());\n+    log_trace(class, sealed)(\" - %s\", ss.as_string());\n@@ -269,1 +284,4 @@\n-  log_trace(class, sealed)(\"- class is NOT a permitted subclass!\");\n+\n+  ss.print(\"Failed listed permitted subclass check: class %s is not a permitted subclass of %s\",\n+           k->external_name(), this->external_name());\n+  log_trace(class, sealed)(\" - %s\", ss.as_string());\n@@ -4295,8 +4313,3 @@\n-      if (os::platform_print_native_stack(&stack_stream, nullptr, buf, O_BUFLEN, lastpc)) {\n-        \/\/ We have printed the native stack in platform-specific code,\n-        \/\/ so nothing else to do in this case.\n-      } else {\n-        frame f = os::current_frame();\n-        VMError::print_native_stack(&stack_stream, f, current, true \/*print_source_info *\/,\n-                                    -1 \/* max stack_stream *\/, buf, O_BUFLEN);\n-      }\n+      NativeStackPrinter nsp(current);\n+      nsp.print_stack(&stack_stream, buf, sizeof(buf), lastpc,\n+                      true \/* print_source_info *\/, -1 \/* max stack *\/);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":32,"deletions":19,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -559,2 +559,4 @@\n-  \/\/ Called to verify that k is a permitted subclass of this class\n-  bool has_as_permitted_subclass(const InstanceKlass* k) const;\n+  \/\/ Called to verify that k is a permitted subclass of this class.\n+  \/\/ The incoming stringStream is used for logging, and for the caller to create\n+  \/\/ a detailed exception message on failure.\n+  bool has_as_permitted_subclass(const InstanceKlass* k, stringStream& ss) const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,0 +147,3 @@\n+\n+  \/\/ Compute modifier flags after bottom_klass and element_klass are initialized.\n+  set_modifier_flags(compute_modifier_flags());\n@@ -362,5 +365,2 @@\n-  \/\/ With the addition of ACC_IDENTITY\n-  if (element_klass() == nullptr) {\n-    assert(Universe::is_bootstrapping(), \"partial objArray only at startup\");\n-    return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n-  }\n+  assert (element_klass() != nullptr, \"should be initialized\");\n+\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,0 +78,7 @@\n+jint TypeArrayKlass::compute_modifier_flags() const {\n+  int identity_flag = (Arguments::enable_preview()) ? JVM_ACC_IDENTITY : 0;\n+\n+  return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC\n+                    | identity_flag;\n+}\n+\n@@ -87,0 +94,3 @@\n+\n+  \/\/ Compute modifier flags.\n+  set_modifier_flags(compute_modifier_flags());\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -975,4 +975,1 @@\n-  Node_Notes*       node_notes_at(int idx) {\n-    return locate_node_notes(_node_note_array, idx, false);\n-  }\n-  inline bool   set_node_notes_at(int idx, Node_Notes* value);\n+  Node_Notes*       node_notes_at(int idx);\n@@ -980,0 +977,1 @@\n+  inline bool   set_node_notes_at(int idx, Node_Notes* value);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"opto\/vectornode.hpp\"\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1375,0 +1375,6 @@\n+  \/\/ Replace the control input of 'node' with 'new_control' and set the dom depth to the one of 'new_control'.\n+  void replace_control(Node* node, Node* new_control) {\n+    _igvn.replace_input_of(node, 0, new_control);\n+    set_idom(node, new_control, dom_depth(new_control));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2016,0 +2016,4 @@\n+inline Node_Notes* Compile::node_notes_at(int idx) {\n+  return locate_node_notes(_node_note_array, idx, false);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"asm\/macroAssembler.inline.hpp\"\n@@ -38,1 +37,0 @@\n-#include \"memory\/allocation.inline.hpp\"\n@@ -52,3 +50,0 @@\n-#include \"opto\/runtime.hpp\"\n-#include \"opto\/subnode.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#include \"opto\/type.hpp\"\n-#include \"runtime\/deoptimization.hpp\"\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3486,2 +3486,3 @@\n-\/\/ in the safepoint protocol, thread suspension, thread interruption, or anything of that\n-\/\/ nature. JavaThreads will be \"in native\" when using this API from JDK code.\n+\/\/ in the safepoint protocol, thread suspension, thread interruption, or most things of that\n+\/\/ nature, except JavaThreads will be blocked by VM_Exit::block_if_vm_exited if the VM has\n+\/\/ shutdown. JavaThreads will be \"in native\" when using this API from JDK code.\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2699,1 +2699,1 @@\n-    result = k->compute_modifier_flags();\n+    result = k->modifier_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"memory\/memoryReserver.hpp\"\n@@ -307,1 +308,1 @@\n-  ReservedHeapSpace rhs(100 * granularity, granularity, os::vm_page_size());\n+  ReservedHeapSpace rhs = HeapReserver::reserve(100 * granularity, granularity, os::vm_page_size(), nullptr);\n@@ -334,1 +335,1 @@\n-  ReservedHeapSpace rhs(reserved_space_size * granularity, granularity, os::vm_page_size());\n+  ReservedHeapSpace rhs = HeapReserver::reserve(reserved_space_size * granularity, granularity, os::vm_page_size(), nullptr);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1602,0 +1602,33 @@\n+\/**\n+ * Gets the caller frame of `fr` for thread `t`.\n+ *\n+ * @returns an invalid frame (i.e. fr.pc() === 0) if the caller cannot be obtained\n+ *\/\n+frame frame::next_frame(frame fr, Thread* t) {\n+  \/\/ Compiled code may use EBP register on x86 so it looks like\n+  \/\/ non-walkable C frame. Use frame.sender() for java frames.\n+  frame invalid;\n+  if (t != nullptr && t->is_Java_thread()) {\n+    \/\/ Catch very first native frame by using stack address.\n+    \/\/ For JavaThread stack_base and stack_size should be set.\n+    if (!t->is_in_full_stack((address)(fr.real_fp() + 1))) {\n+      return invalid;\n+    }\n+    if (fr.is_interpreted_frame() || (fr.cb() != nullptr && fr.cb()->frame_size() > 0)) {\n+      RegisterMap map(JavaThread::cast(t),\n+                      RegisterMap::UpdateMap::skip,\n+                      RegisterMap::ProcessFrames::include,\n+                      RegisterMap::WalkContinuation::skip); \/\/ No update\n+      return fr.sender(&map);\n+    } else {\n+      \/\/ is_first_C_frame() does only simple checks for frame pointer,\n+      \/\/ it will pass if java compiled code has a pointer in EBP.\n+      if (os::is_first_C_frame(&fr)) return invalid;\n+      return os::get_sender_for_C_frame(&fr);\n+    }\n+  } else {\n+    if (os::is_first_C_frame(&fr)) return invalid;\n+    return os::get_sender_for_C_frame(&fr);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+  static frame next_frame(frame fr, Thread* t); \/\/ For native stack walking\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+#include \"utilities\/nativeStackPrinter.hpp\"\n@@ -1776,0 +1777,1 @@\n+    NativeStackPrinter nsp(this);\n@@ -1777,8 +1779,2 @@\n-    if (os::platform_print_native_stack(tty, nullptr, buf, O_BUFLEN, lastpc)) {\n-      \/\/ We have printed the native stack in platform-specific code,\n-      \/\/ so nothing else to do in this case.\n-    } else {\n-      frame f = os::current_frame();\n-      VMError::print_native_stack(tty, f, this, true \/*print_source_info *\/,\n-                                  -1 \/* max stack *\/, buf, O_BUFLEN);\n-    }\n+    nsp.print_stack(tty, buf, O_BUFLEN, lastpc,\n+                    true \/*print_source_info *\/, -1 \/* max stack *\/ );\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -614,6 +614,10 @@\n-  if (_vm_exited &&\n-      Thread::current_or_null() != _shutdown_thread) {\n-    \/\/ _vm_exited is set at safepoint, and the Threads_lock is never released\n-    \/\/ so we will block here until the process dies.\n-    Threads_lock->lock();\n-    ShouldNotReachHere();\n+  if (_vm_exited) {\n+    \/\/ Need to check for an unattached thread as only attached threads\n+    \/\/ can acquire the lock.\n+    Thread* current = Thread::current_or_null();\n+    if (current != nullptr && current != _shutdown_thread) {\n+      \/\/ _vm_exited is set at safepoint, and the Threads_lock is never released\n+      \/\/ so we will block here until the process dies.\n+      Threads_lock->lock();\n+      ShouldNotReachHere();\n+    }\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2037,2 +2037,0 @@\n-  declare_constant(JVM_ACC_WRITTEN_FLAGS)                                 \\\n-                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-#if defined(LINUX) || defined(_WIN64)\n+#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n@@ -147,1 +147,1 @@\n-#endif \/\/ LINUX or WINDOWS\n+#endif \/\/ LINUX or WINDOWS or MacOS\n@@ -1186,1 +1186,1 @@\n-#if defined(LINUX) || defined(_WIN64)\n+#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -845,1 +845,1 @@\n-#if defined(LINUX) || defined(_WIN64)\n+#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n@@ -852,1 +852,1 @@\n-    return \"Prints an annotated process memory map of the VM process (linux and Windows only).\";\n+    return \"Prints an annotated process memory map of the VM process (linux, Windows and MacOS only).\";\n@@ -865,1 +865,1 @@\n-    return \"Dumps an annotated process memory map to an output file (linux and Windows only).\";\n+    return \"Dumps an annotated process memory map to an output file (linux, Windows and MacOS only).\";\n@@ -871,1 +871,1 @@\n-#endif \/\/ LINUX or WINDOWS\n+#endif \/\/ LINUX, WINDOWS or MACOS\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -157,1 +157,0 @@\n-        java.se, \/\/ for ParticipatesInPreview\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleTreeVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreeScanner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Optional;\n@@ -36,0 +37,2 @@\n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -37,0 +40,1 @@\n+import com.sun.tools.javac.util.Log;\n@@ -367,2 +371,8 @@\n-        static LintCategory get(String option) {\n-            return map.get(option);\n+        \/**\n+         * Get the {@link LintCategory} having the given command line option.\n+         *\n+         * @param option lint category option string\n+         * @return corresponding {@link LintCategory}, or empty if none exists\n+         *\/\n+        public static Optional<LintCategory> get(String option) {\n+            return Optional.ofNullable(map.get(option));\n@@ -393,0 +403,9 @@\n+    \/**\n+     * Helper method. Log a lint warning if its lint category is enabled.\n+     *\/\n+    public void logIfEnabled(Log log, DiagnosticPosition pos, LintWarning warning) {\n+        if (isEnabled(warning.getLintCategory())) {\n+            log.warning(pos, warning);\n+        }\n+    }\n+\n@@ -437,3 +456,2 @@\n-                LintCategory lc = LintCategory.get((String) (value.value));\n-                if (lc != null)\n-                    suppress(lc);\n+                LintCategory.get((String)value.value)\n+                  .ifPresent(this::suppress);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -38,0 +39,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -153,1 +155,3 @@\n-                .anyMatch(ed -> ed.modules.contains(m));\n+                .anyMatch(ed -> ed.modules.contains(m)) ||\n+               \/\/the specification lists the java.se module as participating in preview:\n+               m.name == names.java_se;\n@@ -178,2 +182,2 @@\n-                    Warnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-                    Warnings.PreviewFeatureUse(feature.nameFragment()));\n+                    LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n+                    LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n@@ -191,2 +195,2 @@\n-            log.mandatoryWarning(LintCategory.PREVIEW, null,\n-                    Warnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n+            log.mandatoryWarning(null,\n+                    LintWarnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n@@ -200,1 +204,1 @@\n-    public void reportPreviewWarning(DiagnosticPosition pos, Warning warnKey) {\n+    public void reportPreviewWarning(DiagnosticPosition pos, LintWarning warnKey) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1712,1 +1712,0 @@\n-    @SuppressWarnings(\"preview\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -379,1 +379,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -2161,1 +2160,0 @@\n-        @SuppressWarnings(\"fallthrough\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -1968,4 +1969,2 @@\n-        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) &&\n-                identityType &&\n-                isValueBased(tree.lock.type)) {\n-            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        if (identityType && isValueBased(tree.lock.type)) {\n+            env.info.lint.logIfEnabled(log, tree.pos(), LintWarnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n@@ -2076,3 +2075,2 @@\n-                    chk.isHandled(syms.interruptedExceptionType, types.memberType(resource, close).getThrownTypes()) &&\n-                    env.info.lint.isEnabled(LintCategory.TRY)) {\n-                log.warning(LintCategory.TRY, pos, Warnings.TryResourceThrowsInterruptedExc(resource));\n+                    chk.isHandled(syms.interruptedExceptionType, types.memberType(resource, close).getThrownTypes())) {\n+                env.info.lint.logIfEnabled(log, pos, LintWarnings.TryResourceThrowsInterruptedExc(resource));\n@@ -2618,4 +2616,0 @@\n-                    } else if (methName == names._super) {\n-                        \/\/ qualifier omitted; check for existence\n-                        \/\/ of an appropriate implicit qualifier.\n-                        checkNewInnerClass(tree.meth.pos(), localEnv, site, true);\n@@ -2629,0 +2623,9 @@\n+                if (tree.meth.hasTag(IDENT)) {\n+                    \/\/ non-qualified super(...) call; check whether explicit constructor\n+                    \/\/ invocation is well-formed. If the super class is an inner class,\n+                    \/\/ make sure that an appropriate implicit qualifier exists. If the super\n+                    \/\/ class is a local class, make sure that the current class is defined\n+                    \/\/ in the same context as the local class.\n+                    checkNewInnerClass(tree.meth.pos(), localEnv, site, true);\n+                }\n+\n@@ -3096,1 +3099,1 @@\n-            boolean isLocal = type.tsym.owner.kind == MTH;\n+            boolean isLocal = type.tsym.owner.kind == VAR || type.tsym.owner.kind == MTH;\n@@ -4473,3 +4476,2 @@\n-                sym.overrides(syms.autoCloseableClose, sitesym.type.tsym, types, true) &&\n-                env.info.lint.isEnabled(LintCategory.TRY)) {\n-            log.warning(LintCategory.TRY, tree, Warnings.TryExplicitCloseCall);\n+                sym.overrides(syms.autoCloseableClose, sitesym.type.tsym, types, true)) {\n+            env.info.lint.logIfEnabled(log, tree, LintWarnings.TryExplicitCloseCall);\n@@ -4502,1 +4504,1 @@\n-                chk.warnStatic(tree, Warnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n+                chk.lint.logIfEnabled(log, tree, LintWarnings.StaticNotQualifiedByType(sym.kind.kindName(), sym.owner));\n@@ -4504,1 +4506,1 @@\n-                chk.warnStatic(tree, Warnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n+                chk.lint.logIfEnabled(log, tree, LintWarnings.StaticNotQualifiedByType2(sym.kind.kindName()));\n@@ -4717,1 +4719,1 @@\n-                        chk.warnUnchecked(tree.pos(), Warnings.UncheckedAssignToVar(v, s));\n+                        chk.warnUnchecked(tree.pos(), LintWarnings.UncheckedAssignToVar(v, s));\n@@ -4915,1 +4917,1 @@\n-                chk.warnUnchecked(env.tree.pos(), Warnings.UncheckedCallMbrOfRawType(sym, s));\n+                chk.warnUnchecked(env.tree.pos(), LintWarnings.UncheckedCallMbrOfRawType(sym, s));\n@@ -4965,1 +4967,1 @@\n-                chk.warnUnchecked(env.tree.pos(), Warnings.UncheckedMethInvocationApplied(kindName(sym),\n+                chk.warnUnchecked(env.tree.pos(), LintWarnings.UncheckedMethInvocationApplied(kindName(sym),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -58,1 +59,1 @@\n-import com.sun.tools.javac.util.JCDiagnostic.Warning;\n+import com.sun.tools.javac.util.JCDiagnostic.LintWarning;\n@@ -121,1 +122,1 @@\n-    private Lint lint;\n+    Lint lint;\n@@ -256,1 +257,1 @@\n-                    removalHandler.report(pos, Warnings.HasBeenDeprecatedForRemovalModule(sym));\n+                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemovalModule(sym));\n@@ -258,1 +259,1 @@\n-                    removalHandler.report(pos, Warnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n+                    removalHandler.report(pos, LintWarnings.HasBeenDeprecatedForRemoval(sym, sym.location()));\n@@ -263,1 +264,1 @@\n-                deprecationHandler.report(pos, Warnings.HasBeenDeprecatedModule(sym));\n+                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecatedModule(sym));\n@@ -265,1 +266,1 @@\n-                deprecationHandler.report(pos, Warnings.HasBeenDeprecated(sym, sym.location()));\n+                deprecationHandler.report(pos, LintWarnings.HasBeenDeprecated(sym, sym.location()));\n@@ -274,1 +275,1 @@\n-    public void warnPreviewAPI(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnPreviewAPI(DiagnosticPosition pos, LintWarning warnKey) {\n@@ -285,1 +286,1 @@\n-            preview.reportPreviewWarning(pos, Warnings.DeclaredUsingPreview(kindName(sym), sym));\n+            preview.reportPreviewWarning(pos, LintWarnings.DeclaredUsingPreview(kindName(sym), sym));\n@@ -293,2 +294,1 @@\n-        if (lint.isEnabled(LintCategory.RESTRICTED))\n-            log.warning(LintCategory.RESTRICTED, pos, Warnings.RestrictedMethod(sym.enclClass(), sym));\n+        lint.logIfEnabled(log, pos, LintWarnings.RestrictedMethod(sym.enclClass(), sym));\n@@ -301,1 +301,1 @@\n-    public void warnUnchecked(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnUnchecked(DiagnosticPosition pos, LintWarning warnKey) {\n@@ -306,21 +306,0 @@\n-    \/** Warn about unsafe vararg method decl.\n-     *  @param pos        Position to be used for error reporting.\n-     *\/\n-    void warnUnsafeVararg(DiagnosticPosition pos, Warning warnKey) {\n-        if (lint.isEnabled(LintCategory.VARARGS))\n-            log.warning(LintCategory.VARARGS, pos, warnKey);\n-    }\n-\n-    public void warnStatic(DiagnosticPosition pos, Warning warnKey) {\n-        if (lint.isEnabled(LintCategory.STATIC))\n-            log.warning(LintCategory.STATIC, pos, warnKey);\n-    }\n-\n-    \/** Warn about division by integer constant zero.\n-     *  @param pos        Position to be used for error reporting.\n-     *\/\n-    void warnDivZero(DiagnosticPosition pos) {\n-        if (lint.isEnabled(LintCategory.DIVZERO))\n-            log.warning(LintCategory.DIVZERO, pos, Warnings.DivZero);\n-    }\n-\n@@ -679,3 +658,1 @@\n-                if (lint.isEnabled(LintCategory.CAST))\n-                    log.warning(LintCategory.CAST,\n-                            tree.pos(), Warnings.RedundantCast(tree.clazz.type));\n+                lint.logIfEnabled(log, tree.pos(), LintWarnings.RedundantCast(tree.clazz.type));\n@@ -1037,1 +1014,1 @@\n-            warnUnsafeVararg(tree, Warnings.VarargsRedundantTrustmeAnno(\n+            lint.logIfEnabled(log, tree, LintWarnings.VarargsRedundantTrustmeAnno(\n@@ -1043,1 +1020,1 @@\n-            warnUnchecked(tree.params.head.pos(), Warnings.UncheckedVarargsNonReifiableType(varargElemType));\n+            warnUnchecked(tree.params.head.pos(), LintWarnings.UncheckedVarargsNonReifiableType(varargElemType));\n@@ -1130,1 +1107,1 @@\n-                warnUnchecked(env.tree.pos(), Warnings.UncheckedGenericArrayCreation(argtype));\n+                warnUnchecked(env.tree.pos(), LintWarnings.UncheckedGenericArrayCreation(argtype));\n@@ -1433,5 +1410,1 @@\n-            deferredLintHandler.report(_l -> {\n-                                           if (lint.isEnabled(LintCategory.STRICTFP)) {\n-                                               log.warning(LintCategory.STRICTFP,\n-                                                           pos, Warnings.Strictfp); }\n-                                       });\n+            deferredLintHandler.report(_ -> lint.logIfEnabled(log, pos, LintWarnings.Strictfp));\n@@ -1652,2 +1625,1 @@\n-        if (lint.isEnabled(LintCategory.RAW) &&\n-            tree.type.hasTag(CLASS) &&\n+        if (tree.type.hasTag(CLASS) &&\n@@ -1657,2 +1629,1 @@\n-            log.warning(LintCategory.RAW,\n-                    tree.pos(), Warnings.RawClassUse(tree.type, tree.type.tsym.type));\n+            lint.logIfEnabled(log, tree.pos(), LintWarnings.RawClassUse(tree.type, tree.type.tsym.type));\n@@ -1960,1 +1931,1 @@\n-                    Warnings.OverrideUncheckedRet(uncheckedOverrides(m, other), mtres, otres));\n+                    LintWarnings.OverrideUncheckedRet(uncheckedOverrides(m, other), mtres, otres));\n@@ -1976,1 +1947,1 @@\n-                          Warnings.OverrideUncheckedThrown(cannotOverride(m, other), unhandledUnerased.head));\n+                          LintWarnings.OverrideUncheckedThrown(cannotOverride(m, other), unhandledUnerased.head));\n@@ -1981,3 +1952,2 @@\n-        if ((((m.flags() ^ other.flags()) & Flags.VARARGS) != 0)\n-            && lint.isEnabled(LintCategory.OVERRIDES)) {\n-            log.warning(TreeInfo.diagnosticPositionFor(m, tree),\n+        if ((((m.flags() ^ other.flags()) & Flags.VARARGS) != 0)) {\n+            lint.logIfEnabled(log, TreeInfo.diagnosticPositionFor(m, tree),\n@@ -1985,2 +1955,2 @@\n-                        ? Warnings.OverrideVarargsMissing(varargsOverrides(m, other))\n-                        : Warnings.OverrideVarargsExtra(varargsOverrides(m, other)));\n+                        ? LintWarnings.OverrideVarargsMissing(varargsOverrides(m, other))\n+                        : LintWarnings.OverrideVarargsExtra(varargsOverrides(m, other)));\n@@ -2335,2 +2305,2 @@\n-                log.warning(LintCategory.OVERRIDES, pos,\n-                            Warnings.OverrideEqualsButNotHashcode(someClass));\n+                log.warning(pos,\n+                            LintWarnings.OverrideEqualsButNotHashcode(someClass));\n@@ -2398,1 +2368,1 @@\n-                        log.warning(Lint.LintCategory.MODULE, pos, Warnings.PoorChoiceForModuleName(componentName));\n+                        log.warning(pos, LintWarnings.PoorChoiceForModuleName(componentName));\n@@ -2881,2 +2851,2 @@\n-            log.warning(LintCategory.OVERLOADS, pos,\n-                Warnings.PotentiallyAmbiguousOverload(\n+            log.warning(pos,\n+                LintWarnings.PotentiallyAmbiguousOverload(\n@@ -3102,2 +3072,2 @@\n-                        log.warning(LintCategory.SERIAL, tree.pos(),\n-                                    Warnings.AccessToMemberFromSerializableLambda(sym));\n+                        log.warning(tree.pos(),\n+                                    LintWarnings.AccessToMemberFromSerializableLambda(sym));\n@@ -3107,1 +3077,1 @@\n-                                Warnings.AccessToMemberFromSerializableElement(sym));\n+                                LintWarnings.AccessToMemberFromSerializableElement(sym));\n@@ -3890,2 +3860,1 @@\n-            log.warning(LintCategory.DEP_ANN,\n-                    pos, Warnings.MissingDeprecatedAnnotation);\n+            log.warning(pos, LintWarnings.MissingDeprecatedAnnotation);\n@@ -3896,2 +3865,2 @@\n-                log.warning(LintCategory.DEPRECATION, pos,\n-                            Warnings.DeprecatedAnnotationHasNoEffect(Kinds.kindName(s)));\n+                log.warning(pos,\n+                            LintWarnings.DeprecatedAnnotationHasNoEffect(Kinds.kindName(s)));\n@@ -3957,1 +3926,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreview(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreview(s)));\n@@ -3960,1 +3929,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, Warnings.IsPreviewReflective(s)));\n+                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreviewReflective(s)));\n@@ -4248,1 +4217,1 @@\n-                deferredLintHandler.report(_l -> warnDivZero(pos));\n+                deferredLintHandler.report(_ -> lint.logIfEnabled(log, pos, LintWarnings.DivZero));\n@@ -4261,5 +4230,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.LOSSY_CONVERSIONS))\n-                    log.warning(LintCategory.LOSSY_CONVERSIONS,\n-                            pos, Warnings.PossibleLossOfPrecision(found, req));\n-            });\n+            deferredLintHandler.report(_ ->\n+                lint.logIfEnabled(log, pos, LintWarnings.PossibleLossOfPrecision(found, req)));\n@@ -4273,3 +4239,3 @@\n-        if (tree.thenpart.hasTag(SKIP) && tree.elsepart == null &&\n-                lint.isEnabled(LintCategory.EMPTY))\n-            log.warning(LintCategory.EMPTY, tree.thenpart.pos(), Warnings.EmptyIf);\n+        if (tree.thenpart.hasTag(SKIP) && tree.elsepart == null) {\n+            lint.logIfEnabled(log, tree.thenpart.pos(), LintWarnings.EmptyIf);\n+        }\n@@ -4417,2 +4383,1 @@\n-        if (lint.isEnabled(Lint.LintCategory.AUXILIARYCLASS) &&\n-            (c.flags() & AUXILIARY) != 0 &&\n+        if ((c.flags() & AUXILIARY) != 0 &&\n@@ -4422,2 +4387,2 @@\n-            log.warning(pos,\n-                        Warnings.AuxiliaryClassAccessedFromOutsideOfItsSourceFile(c, c.sourcefile));\n+            lint.logIfEnabled(log, pos,\n+                        LintWarnings.AuxiliaryClassAccessedFromOutsideOfItsSourceFile(c, c.sourcefile));\n@@ -4465,5 +4430,2 @@\n-                            deferredLintHandler.report(_l -> {\n-                                if (lint.isEnabled(LintCategory.MISSING_EXPLICIT_CTOR))\n-                                   log.warning(LintCategory.MISSING_EXPLICIT_CTOR,\n-                                               pos, Warnings.MissingExplicitCtor(c, pkg, modle));\n-                                                       });\n+                            deferredLintHandler.report(_ ->\n+                                lint.logIfEnabled(log, pos, LintWarnings.MissingExplicitCtor(c, pkg, modle)));\n@@ -4498,1 +4460,1 @@\n-                    Check.this.warnUnchecked(pos(), Warnings.ProbFoundReq(diags.fragment(uncheckedKey), found, expected));\n+                    Check.this.warnUnchecked(pos(), LintWarnings.ProbFoundReq(diags.fragment(uncheckedKey), found, expected));\n@@ -4505,1 +4467,1 @@\n-                        Check.this.warnUnsafeVararg(pos(), Warnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n+                        Check.this.lint.logIfEnabled(log, pos(), LintWarnings.VarargsUnsafeUseVarargsParam(method.params.last()));\n@@ -4760,1 +4722,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessible(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessible(kindName(what), what, what.packge().modle));\n@@ -4769,1 +4731,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleUnexported(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessibleUnexported(kindName(what), what, what.packge().modle));\n@@ -4775,1 +4737,1 @@\n-                    log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleUnexportedQualified(kindName(what), what, what.packge().modle));\n+                    log.warning(pos, LintWarnings.LeaksNotAccessibleUnexportedQualified(kindName(what), what, what.packge().modle));\n@@ -4797,1 +4759,1 @@\n-                log.warning(LintCategory.EXPORTS, pos, Warnings.LeaksNotAccessibleNotRequiredTransitive(kindName(what), what, what.packge().modle));\n+                log.warning(pos, LintWarnings.LeaksNotAccessibleNotRequiredTransitive(kindName(what), what, what.packge().modle));\n@@ -4803,4 +4765,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.MODULE))\n-                    log.warning(LintCategory.MODULE, pos, Warnings.ModuleNotFound(msym));\n-            });\n+            deferredLintHandler.report(_ ->\n+                lint.logIfEnabled(log, pos, LintWarnings.ModuleNotFound(msym)));\n@@ -4813,4 +4773,2 @@\n-            deferredLintHandler.report(_l -> {\n-                if (lint.isEnabled(LintCategory.OPENS))\n-                    log.warning(pos, Warnings.PackageEmptyOrNotFound(packge));\n-            });\n+            deferredLintHandler.report(_ ->\n+                lint.logIfEnabled(log, pos, LintWarnings.PackageEmptyOrNotFound(packge)));\n@@ -4822,1 +4780,1 @@\n-            deferredLintHandler.report(_l -> {\n+            deferredLintHandler.report(_ -> {\n@@ -4824,3 +4782,3 @@\n-                    log.warning(pos, Warnings.RequiresTransitiveAutomatic);\n-                } else if (lint.isEnabled(LintCategory.REQUIRES_AUTOMATIC)) {\n-                    log.warning(pos, Warnings.RequiresAutomatic);\n+                    log.warning(pos, LintWarnings.RequiresTransitiveAutomatic);\n+                } else {\n+                    lint.logIfEnabled(log, pos, LintWarnings.RequiresAutomatic);\n@@ -5126,1 +5084,1 @@\n-                log.warning(LintCategory.SERIAL, p.pos(), Warnings.MissingSVUID(c));\n+                log.warning(p.pos(), LintWarnings.MissingSVUID(c));\n@@ -5154,3 +5112,3 @@\n-                                    log.warning(LintCategory.SERIAL,\n-                                                TreeInfo.diagnosticPositionFor(enclosed, tree),\n-                                                Warnings.NonSerializableInstanceField);\n+                                    log.warning(\n+                                            TreeInfo.diagnosticPositionFor(enclosed, tree),\n+                                                LintWarnings.NonSerializableInstanceField);\n@@ -5165,3 +5123,3 @@\n-                                        log.warning(LintCategory.SERIAL,\n-                                                    TreeInfo.diagnosticPositionFor(enclosed, tree),\n-                                                    Warnings.NonSerializableInstanceFieldArray(elementType));\n+                                        log.warning(\n+                                                TreeInfo.diagnosticPositionFor(enclosed, tree),\n+                                                    LintWarnings.NonSerializableInstanceFieldArray(elementType));\n@@ -5240,3 +5198,3 @@\n-                    log.warning(LintCategory.SERIAL, p,\n-                            c.isValueClass() ? Warnings.SerializableValueClassWithoutWriteReplace1 :\n-                                    Warnings.SerializableValueClassWithoutWriteReplace2);\n+                    log.warning(p.pos(),\n+                            c.isValueClass() ? LintWarnings.SerializableValueClassWithoutWriteReplace1 :\n+                                    LintWarnings.SerializableValueClassWithoutWriteReplace2);\n@@ -5285,2 +5243,2 @@\n-                log.warning(LintCategory.SERIAL, tree.pos(),\n-                            Warnings.ExternalizableMissingPublicNoArgCtor);\n+                log.warning(tree.pos(),\n+                            LintWarnings.ExternalizableMissingPublicNoArgCtor);\n@@ -5313,2 +5271,2 @@\n-                                    log.warning(LintCategory.SERIAL, tree.pos(),\n-                                                Warnings.SerializableMissingAccessNoArgCtor(supertype.getQualifiedName()));\n+                                    log.warning(tree.pos(),\n+                                                LintWarnings.SerializableMissingAccessNoArgCtor(supertype.getQualifiedName()));\n@@ -5332,3 +5290,3 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(svuid, tree),\n-                             Warnings.ImproperSVUID((Symbol)e));\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n+                             LintWarnings.ImproperSVUID((Symbol)e));\n@@ -5339,3 +5297,3 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(svuid, tree),\n-                             Warnings.LongSVUID((Symbol)e));\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n+                             LintWarnings.LongSVUID((Symbol)e));\n@@ -5345,3 +5303,3 @@\n-                 log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(svuid, tree),\n-                             Warnings.ConstantSVUID((Symbol)e));\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(svuid, tree),\n+                             LintWarnings.ConstantSVUID((Symbol)e));\n@@ -5354,3 +5312,3 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(spf, tree),\n-                             Warnings.ImproperSPF);\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(spf, tree),\n+                             LintWarnings.ImproperSPF);\n@@ -5360,3 +5318,3 @@\n-                 log.warning(LintCategory.SERIAL,\n-                             TreeInfo.diagnosticPositionFor(spf, tree),\n-                             Warnings.OSFArraySPF);\n+                 log.warning(\n+                         TreeInfo.diagnosticPositionFor(spf, tree),\n+                             LintWarnings.OSFArraySPF);\n@@ -5366,3 +5324,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(spf, tree),\n-                            Warnings.IneffectualSerialFieldExternalizable);\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(spf, tree),\n+                            LintWarnings.IneffectualSerialFieldExternalizable);\n@@ -5378,2 +5336,2 @@\n-                     log.warning(LintCategory.SERIAL, initExpr.pos(),\n-                                 Warnings.SPFNullInit);\n+                     log.warning(initExpr.pos(),\n+                                 LintWarnings.SPFNullInit);\n@@ -5457,3 +5415,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.IneffectualExternalizableMethodRecord(method.getSimpleName().toString()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.IneffectualExternalizableMethodRecord(method.getSimpleName().toString()));\n@@ -5466,3 +5424,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodNotPrivate(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodNotPrivate(method.getSimpleName()));\n@@ -5472,3 +5430,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodStatic(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodStatic(method.getSimpleName()));\n@@ -5497,3 +5455,3 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n-                                        Warnings.IneffectualSerialFieldEnum(name));\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n+                                        LintWarnings.IneffectualSerialFieldEnum(name));\n@@ -5506,3 +5464,3 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(method, tree),\n-                                        Warnings.IneffectualSerialMethodEnum(name));\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(method, tree),\n+                                        LintWarnings.IneffectualSerialMethodEnum(name));\n@@ -5546,3 +5504,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.IneffectualExternMethodEnum(method.getSimpleName().toString()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.IneffectualExternMethodEnum(method.getSimpleName().toString()));\n@@ -5578,3 +5536,3 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n-                                        Warnings.IneffectualSerialFieldInterface);\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n+                                        LintWarnings.IneffectualSerialFieldInterface);\n@@ -5618,3 +5576,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.NonPrivateMethodWeakerAccess);\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.NonPrivateMethodWeakerAccess);\n@@ -5628,3 +5586,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.DefaultIneffective);\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.DefaultIneffective);\n@@ -5675,3 +5633,3 @@\n-                            log.warning(LintCategory.SERIAL,\n-                                        TreeInfo.diagnosticPositionFor(field, tree),\n-                                        Warnings.IneffectualSerialFieldRecord);\n+                            log.warning(\n+                                    TreeInfo.diagnosticPositionFor(field, tree),\n+                                        LintWarnings.IneffectualSerialFieldRecord);\n@@ -5699,3 +5657,3 @@\n-                                log.warning(LintCategory.SERIAL,\n-                                            TreeInfo.diagnosticPositionFor(method, tree),\n-                                            Warnings.IneffectualSerialMethodRecord(name));\n+                                log.warning(\n+                                        TreeInfo.diagnosticPositionFor(method, tree),\n+                                            LintWarnings.IneffectualSerialMethodRecord(name));\n@@ -5714,1 +5672,1 @@\n-                    log.warning(LintCategory.SERIAL,\n+                    log.warning(\n@@ -5716,1 +5674,1 @@\n-                            Warnings.SerialConcreteInstanceMethod(method.getSimpleName()));\n+                                LintWarnings.SerialConcreteInstanceMethod(method.getSimpleName()));\n@@ -5735,1 +5693,1 @@\n-                    log.warning(LintCategory.SERIAL,\n+                    log.warning(\n@@ -5737,2 +5695,2 @@\n-                            Warnings.SerialMethodUnexpectedReturnType(method.getSimpleName(),\n-                                    rtype, expectedReturnType));\n+                            LintWarnings.SerialMethodUnexpectedReturnType(method.getSimpleName(),\n+                                                                      rtype, expectedReturnType));\n@@ -5754,3 +5712,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodOneArg(method.getSimpleName(), parameters.size()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodOneArg(method.getSimpleName(), parameters.size()));\n@@ -5762,3 +5720,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.SerialMethodParameterType(method.getSimpleName(),\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.SerialMethodParameterType(method.getSimpleName(),\n@@ -5784,1 +5742,1 @@\n-                    log.warning(LintCategory.SERIAL,\n+                    log.warning(\n@@ -5786,1 +5744,1 @@\n-                            Warnings.SerialMethodNoArgs(method.getSimpleName()));\n+                            LintWarnings.SerialMethodNoArgs(method.getSimpleName()));\n@@ -5796,3 +5754,3 @@\n-                log.warning(LintCategory.SERIAL,\n-                            TreeInfo.diagnosticPositionFor(method, tree),\n-                            Warnings.IneffectualSerialMethodExternalizable(method.getSimpleName()));\n+                log.warning(\n+                        TreeInfo.diagnosticPositionFor(method, tree),\n+                            LintWarnings.IneffectualSerialMethodExternalizable(method.getSimpleName()));\n@@ -5826,1 +5784,1 @@\n-                            log.warning(LintCategory.SERIAL,\n+                            log.warning(\n@@ -5828,2 +5786,2 @@\n-                                    Warnings.SerialMethodUnexpectedException(method.getSimpleName(),\n-                                            thrownType));\n+                                    LintWarnings.SerialMethodUnexpectedException(method.getSimpleName(),\n+                                                                             thrownType));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":148,"deletions":190,"binary":false,"changes":338,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import com.sun.source.tree.CaseTree;\n@@ -42,0 +41,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -63,2 +63,0 @@\n-import java.util.Collections;\n-import java.util.IdentityHashMap;\n@@ -749,4 +747,2 @@\n-                    lint.isEnabled(Lint.LintCategory.FALLTHROUGH) &&\n-                    log.warning(Lint.LintCategory.FALLTHROUGH,\n-                                l.tail.head.pos(),\n-                                Warnings.PossibleFallThroughIntoCase);\n+                    lint.logIfEnabled(log, l.tail.head.pos(),\n+                                LintWarnings.PossibleFallThroughIntoCase);\n@@ -1260,5 +1256,2 @@\n-                    if (lint.isEnabled(Lint.LintCategory.FINALLY)) {\n-                        log.warning(Lint.LintCategory.FINALLY,\n-                                TreeInfo.diagEndPos(tree.finalizer),\n-                                Warnings.FinallyCannotComplete);\n-                    }\n+                    lint.logIfEnabled(log, TreeInfo.diagEndPos(tree.finalizer),\n+                                LintWarnings.FinallyCannotComplete);\n@@ -2886,2 +2879,2 @@\n-                        log.warning(Lint.LintCategory.TRY, resVar.pos(),\n-                                    Warnings.TryResourceNotReferenced(resVar.sym));\n+                        log.warning(resVar.pos(),\n+                                    LintWarnings.TryResourceNotReferenced(resVar.sym));\n@@ -3320,1 +3313,0 @@\n-        @SuppressWarnings(\"fallthrough\")\n@@ -3341,1 +3333,0 @@\n-        @SuppressWarnings(\"fallthrough\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3845,1 +3845,1 @@\n-        Assert.check(owner.kind == MTH);\n+        Assert.check(owner.kind == MTH || owner.kind == VAR);\n@@ -3857,1 +3857,3 @@\n-        return methodNotFound;\n+        return owner.kind == MTH ?\n+                methodNotFound :\n+                varNotFound;\n@@ -5201,1 +5203,0 @@\n-        @SuppressWarnings(\"overrides\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -869,2 +870,2 @@\n-                        log.warning(LintCategory.CLASSFILE, (DiagnosticPosition) null,\n-                                    Warnings.FutureAttr(name, version.major, version.minor, majorVersion, minorVersion));\n+                        log.warning((DiagnosticPosition) null,\n+                                    LintWarnings.FutureAttr(name, version.major, version.minor, majorVersion, minorVersion));\n@@ -1637,1 +1638,1 @@\n-                log.warning(LintCategory.CLASSFILE, Warnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n+                log.warning(LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n@@ -2105,1 +2106,1 @@\n-                        log.warning(Warnings.AnnotationMethodNotFound(container, name));\n+                        log.warning(LintWarnings.AnnotationMethodNotFound(container, name));\n@@ -2107,1 +2108,1 @@\n-                        log.warning(Warnings.AnnotationMethodNotFoundReason(container,\n+                        log.warning(LintWarnings.AnnotationMethodNotFoundReason(container,\n@@ -2987,1 +2988,1 @@\n-            log.warning(LintCategory.CLASSFILE, Warnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n+            log.warning(LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -684,2 +685,2 @@\n-                    log.warning(Lint.LintCategory.DANGLING_DOC_COMMENTS,\n-                            pos, Warnings.DanglingDocComment);\n+                    log.warning(\n+                            pos, LintWarnings.DanglingDocComment);\n@@ -2848,1 +2849,0 @@\n-    @SuppressWarnings(\"fallthrough\")\n@@ -2906,1 +2906,0 @@\n-    @SuppressWarnings(\"fallthrough\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.LintWarnings;\n@@ -651,1 +652,1 @@\n-                        log.warning(Warnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n+                        log.warning(LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n@@ -665,1 +666,1 @@\n-                    log.warning(Warnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n+                    log.warning(LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n@@ -673,1 +674,1 @@\n-                            log.warning(Warnings.ProcDuplicateOptionName(optionName,\n+                            log.warning(LintWarnings.ProcDuplicateOptionName(optionName,\n@@ -894,1 +895,1 @@\n-                log.warning(Warnings.ProcAnnotationsWithoutProcessors(unmatchedAnnotations.keySet()));\n+                log.warning(LintWarnings.ProcAnnotationsWithoutProcessors(unmatchedAnnotations.keySet()));\n@@ -1691,1 +1692,1 @@\n-            log.warning(Warnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n+            log.warning(LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -711,0 +711,1 @@\n+# lint: this-escape\n@@ -714,0 +715,1 @@\n+# lint: this-escape\n@@ -734,0 +736,1 @@\n+# lint: text-blocks\n@@ -737,0 +740,1 @@\n+# lint: text-blocks\n@@ -1594,0 +1598,1 @@\n+# lint: path\n@@ -1661,0 +1666,1 @@\n+# lint: output-file-clash\n@@ -1873,0 +1879,1 @@\n+# lint: serial\n@@ -1876,0 +1883,1 @@\n+# lint: dangling-doc-comments\n@@ -1880,0 +1888,1 @@\n+# lint: path\n@@ -1884,0 +1893,1 @@\n+# lint: path\n@@ -1888,0 +1898,1 @@\n+# lint: missing-explicit-ctor\n@@ -1891,0 +1902,1 @@\n+# lint: strictfp\n@@ -1894,0 +1906,1 @@\n+# lint: finally\n@@ -1898,0 +1911,1 @@\n+# lint: module\n@@ -1902,0 +1916,1 @@\n+# lint: incubating\n@@ -1906,0 +1921,1 @@\n+# lint: deprecation\n@@ -1910,0 +1926,1 @@\n+# lint: removal\n@@ -1914,0 +1931,1 @@\n+# lint: preview\n@@ -1923,0 +1941,1 @@\n+# lint: preview\n@@ -1927,0 +1946,1 @@\n+# lint: restricted\n@@ -1932,0 +1952,1 @@\n+# lint: deprecation\n@@ -1936,0 +1957,1 @@\n+# lint: removal\n@@ -1947,0 +1969,1 @@\n+# lint: serial\n@@ -1950,0 +1973,1 @@\n+# lint: serial\n@@ -1953,0 +1977,1 @@\n+# lint: serial\n@@ -1975,0 +2000,1 @@\n+# lint: serial\n@@ -1978,0 +2004,1 @@\n+# lint: serial\n@@ -1982,0 +2009,1 @@\n+# lint: serial\n@@ -1986,0 +2014,1 @@\n+# lint: serial\n@@ -1990,0 +2019,1 @@\n+# lint: serial\n@@ -1994,0 +2024,1 @@\n+# lint: serial\n@@ -1998,0 +2029,1 @@\n+# lint: serial\n@@ -2002,0 +2034,1 @@\n+# lint: serial\n@@ -2006,0 +2039,1 @@\n+# lint: serial\n@@ -2010,0 +2044,1 @@\n+# lint: serial\n@@ -2014,0 +2049,1 @@\n+# lint: serial\n@@ -2019,0 +2055,1 @@\n+# lint: serial\n@@ -2022,0 +2059,1 @@\n+# lint: serial\n@@ -2026,0 +2064,1 @@\n+# lint: serial\n@@ -2030,0 +2069,1 @@\n+# lint: serial\n@@ -2034,0 +2074,1 @@\n+# lint: serial\n@@ -2037,0 +2078,1 @@\n+# lint: serial\n@@ -2041,0 +2083,1 @@\n+# lint: serial\n@@ -2045,0 +2088,1 @@\n+# lint: serial\n@@ -2049,0 +2093,1 @@\n+# lint: serial\n@@ -2052,0 +2097,1 @@\n+# lint: serial\n@@ -2055,0 +2101,1 @@\n+# lint: serial\n@@ -2058,0 +2105,1 @@\n+# lint: serial\n@@ -2062,0 +2110,1 @@\n+# lint: serial\n@@ -2065,0 +2114,1 @@\n+# lint: serial\n@@ -2069,0 +2119,1 @@\n+# lint: serial\n@@ -2072,0 +2123,1 @@\n+# lint: serial\n@@ -2075,0 +2127,1 @@\n+# lint: serial\n@@ -2079,0 +2132,1 @@\n+# lint: overloads\n@@ -2083,0 +2137,1 @@\n+# lint: overrides\n@@ -2087,0 +2142,1 @@\n+# lint: overrides\n@@ -2099,0 +2155,1 @@\n+# lint: path\n@@ -2102,0 +2159,1 @@\n+# lint: fallthrough\n@@ -2106,0 +2164,1 @@\n+# lint: cast\n@@ -2123,0 +2182,1 @@\n+# lint: static\n@@ -2127,0 +2187,1 @@\n+# lint: static\n@@ -2131,0 +2192,1 @@\n+# lint: options\n@@ -2135,0 +2197,1 @@\n+# lint: options\n@@ -2159,0 +2222,1 @@\n+# lint: options\n@@ -2163,0 +2227,1 @@\n+# lint: options\n@@ -2174,0 +2239,1 @@\n+# lint: options\n@@ -2178,0 +2244,1 @@\n+# lint: classfile\n@@ -2181,0 +2248,1 @@\n+# lint: requires-automatic\n@@ -2184,0 +2252,1 @@\n+# lint: requires-transitive-automatic\n@@ -2193,0 +2262,1 @@\n+# lint: processing\n@@ -2197,0 +2267,1 @@\n+# lint: processing\n@@ -2201,0 +2272,1 @@\n+# lint: processing\n@@ -2205,0 +2277,1 @@\n+# lint: processing\n@@ -2209,0 +2282,1 @@\n+# lint: processing\n@@ -2217,0 +2291,1 @@\n+# lint: processing\n@@ -2221,0 +2296,1 @@\n+# lint: processing\n@@ -2229,0 +2305,1 @@\n+# lint: processing\n@@ -2233,0 +2310,1 @@\n+# lint: processing\n@@ -2238,0 +2316,1 @@\n+# lint: processing\n@@ -2265,0 +2344,1 @@\n+# lint: try\n@@ -2269,0 +2349,1 @@\n+# lint: try\n@@ -2273,0 +2354,1 @@\n+# lint: try\n@@ -2276,0 +2358,1 @@\n+# lint: unchecked\n@@ -2280,0 +2363,1 @@\n+# lint: unchecked\n@@ -2284,0 +2368,1 @@\n+# lint: unchecked\n@@ -2287,0 +2372,1 @@\n+# lint: unchecked\n@@ -2291,0 +2377,1 @@\n+# lint: unchecked\n@@ -2297,0 +2384,1 @@\n+# lint: unchecked\n@@ -2301,0 +2389,1 @@\n+# lint: unchecked\n@@ -2305,0 +2394,1 @@\n+# lint: varargs\n@@ -2308,0 +2398,1 @@\n+# lint: dep-ann\n@@ -2312,0 +2403,1 @@\n+# lint: deprecation\n@@ -2316,0 +2408,1 @@\n+# lint: path\n@@ -2328,0 +2421,1 @@\n+# lint: path\n@@ -2332,0 +2426,1 @@\n+# lint: path\n@@ -2339,0 +2434,1 @@\n+# lint: divzero\n@@ -2342,0 +2438,1 @@\n+# lint: empty\n@@ -2346,0 +2443,1 @@\n+# lint: classfile\n@@ -2350,0 +2448,1 @@\n+# lint: classfile\n@@ -2368,0 +2467,1 @@\n+# lint: rawtypes\n@@ -2385,0 +2485,1 @@\n+# lint: varargs\n@@ -2389,0 +2490,1 @@\n+# lint: serial\n@@ -2393,0 +2495,1 @@\n+# lint: serial\n@@ -2550,0 +2653,1 @@\n+# lint: classfile\n@@ -2556,0 +2660,1 @@\n+# lint: classfile\n@@ -2682,0 +2787,1 @@\n+# lint: unchecked\n@@ -2696,0 +2802,1 @@\n+# lint: lossy-conversions\n@@ -2874,0 +2981,1 @@\n+# lint: auxiliaryclass\n@@ -3078,0 +3186,1 @@\n+# lint: unchecked\n@@ -3083,0 +3192,1 @@\n+# lint: unchecked\n@@ -3088,0 +3198,1 @@\n+# lint: overrides\n@@ -3180,0 +3291,1 @@\n+# lint: preview\n@@ -3184,0 +3296,1 @@\n+# lint: preview\n@@ -3188,0 +3301,1 @@\n+# lint: preview\n@@ -3257,0 +3371,1 @@\n+# L10N: do not localize: transitive\n@@ -3570,0 +3685,1 @@\n+# lint: module\n@@ -3665,0 +3781,1 @@\n+# lint: opens\n@@ -3748,0 +3865,1 @@\n+# lint: options\n@@ -3763,0 +3881,1 @@\n+# lint: options\n@@ -3782,1 +3901,1 @@\n-    bad requires flag: {0}\n+    invalid flag for \"requires java.base\": {0}\n@@ -3796,0 +3915,1 @@\n+# lint: exports\n@@ -3799,0 +3919,1 @@\n+# lint: exports\n@@ -3802,0 +3923,1 @@\n+# lint: exports\n@@ -3805,0 +3927,1 @@\n+# lint: exports\n@@ -4156,0 +4279,1 @@\n+# lint: preview\n@@ -4159,0 +4283,1 @@\n+# lint: synchronization\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":126,"deletions":1,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+    public final Name java_se;\n@@ -325,0 +326,1 @@\n+        java_se = fromString(\"java.se\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,2 +180,0 @@\n-serviceability\/dcmd\/vm\/SystemDumpMapTest.java 8340401 windows-all\n-serviceability\/dcmd\/vm\/SystemMapTest.java 8340401 windows-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -550,1 +550,0 @@\n- -runtime\/cds\/appcds\/javaldr\/AnonVmClassesDuringDump.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -546,2 +546,0 @@\n-com\/sun\/management\/DiagnosticCommandMBean\/DcmdMBeanPermissionsTest.java 8340401 windows-all\n-\n@@ -553,3 +551,3 @@\n-sun\/management\/jdp\/JdpDefaultsTest.java                         8308807 aix-ppc64\n-sun\/management\/jdp\/JdpJmxRemoteDynamicPortTest.java             8308807 aix-ppc64\n-sun\/management\/jdp\/JdpSpecificAddressTest.java                  8308807 aix-ppc64\n+sun\/management\/jdp\/JdpDefaultsTest.java                         8308807,8241865 aix-ppc64,macosx-aarch64\n+sun\/management\/jdp\/JdpJmxRemoteDynamicPortTest.java             8308807,8241865 aix-ppc64,macosx-aarch64\n+sun\/management\/jdp\/JdpSpecificAddressTest.java                  8308807,8241865 aix-ppc64,macosx-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfComboTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/TestSymtabItems.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}