{"files":[{"patch":"@@ -840,1 +840,1 @@\n-  jlong sfoffset, jboolean writing)) {\n+                                                    jlong sfoffset, jboolean writing)) {\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,0 +136,1 @@\n+runtime\/valhalla\/inlinetypes\/StrictStaticFieldsTest.java CODETOOLS-7903081 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class Creflbefore_BAD version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict static Field F1__STRICT:\"Ljava\/lang\/String;\";\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict static Field F2__STRICT:I;\n+\n+  Method       \"<init>\":\"(LStrictStaticFieldsTest;)V\"\n+    stack 2  locals 2\n+     0:  #{ #0 final mandated }\n+  {\n+         aload_1;\n+         dup;\n+         invokestatic      Method java\/util\/Objects.requireNonNull:\"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\";\n+         pop;\n+         pop;\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  static Method \"<clinit>\":\"()V\"\n+    stack 2  locals 3\n+  {\n+         ldc               class Creflbefore_BAD;\n+         ldc               String \"F1__STRICT\";\n+         invokestatic      Method StrictStaticFieldsTest.findField:\"(Ljava\/lang\/Class;Ljava\/lang\/String;)Ljava\/lang\/reflect\/Field;\";\n+         astore_0;\n+         ldc               class Creflbefore_BAD;\n+         ldc               String \"F2__STRICT\";\n+         invokestatic      Method StrictStaticFieldsTest.findField:\"(Ljava\/lang\/Class;Ljava\/lang\/String;)Ljava\/lang\/reflect\/Field;\";\n+         astore_1;\n+         aload_1;\n+         invokestatic      Method StrictStaticFieldsTest.getstaticReflective:\"(Ljava\/lang\/reflect\/Field;)Ljava\/lang\/Object;\";\n+         checkcast         class java\/lang\/Integer;\n+         invokevirtual     Method java\/lang\/Integer.intValue:\"()I\";\n+         istore_2;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         iload_2;\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+                             String \"Early read of F2=\\u0001\"\n+                           };\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+         aload_0;\n+         ldc               String \"hello\";\n+         invokestatic      Method StrictStaticFieldsTest.putstaticReflective:\"(Ljava\/lang\/reflect\/Field;Ljava\/lang\/Object;)V\";\n+         aload_1;\n+         bipush            42;\n+         invokestatic      Method java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+         invokestatic      Method StrictStaticFieldsTest.putstaticReflective:\"(Ljava\/lang\/reflect\/Field;Ljava\/lang\/Object;)V\";\n+         return;\n+  }\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"(early read of F2=\\u0001)\"\n+                           }\n+} \/\/ end Class Creflbefore_BAD\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Creflbefore_BAD.jasm","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class Cwreflective_OK version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict static Field F1__STRICT:\"Ljava\/lang\/String;\";\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict static Field F2__STRICT:I;\n+\n+  Method       \"<init>\":\"(LStrictStaticFieldsTest;)V\"\n+    stack 2  locals 2\n+     0:  #{ #0 final mandated }\n+  {\n+         aload_1;\n+         dup;\n+         invokestatic      Method java\/util\/Objects.requireNonNull:\"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\";\n+         pop;\n+         pop;\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  static Method \"<clinit>\":\"()V\"\n+    stack 2  locals 2\n+  {\n+         ldc               class Cwreflective_OK;\n+         ldc               String \"F1__STRICT\";\n+         invokestatic      Method StrictStaticFieldsTest.findField:\"(Ljava\/lang\/Class;Ljava\/lang\/String;)Ljava\/lang\/reflect\/Field;\";\n+         astore_0;\n+         ldc               class Cwreflective_OK;\n+         ldc               String \"F2__STRICT\";\n+         invokestatic      Method StrictStaticFieldsTest.findField:\"(Ljava\/lang\/Class;Ljava\/lang\/String;)Ljava\/lang\/reflect\/Field;\";\n+         astore_1;\n+         aload_0;\n+         ldc               String \"hello\";\n+         invokestatic      Method StrictStaticFieldsTest.putstaticReflective:\"(Ljava\/lang\/reflect\/Field;Ljava\/lang\/Object;)V\";\n+         aload_1;\n+         bipush            42;\n+         invokestatic      Method java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+         invokestatic      Method StrictStaticFieldsTest.putstaticReflective:\"(Ljava\/lang\/reflect\/Field;Ljava\/lang\/Object;)V\";\n+         return;\n+  }\n+} \/\/ end Class Cwreflective_OK\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/Cwreflective_OK.jasm","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -29,1 +29,4 @@\n- * @compile Bnoinit_BAD.jasm Brbefore_BAD.jasm\n+ * @compile Bnoinit_BAD.jasm\n+ *          Brbefore_BAD.jasm\n+ *          Cwreflective_OK.jasm\n+ *          Creflbefore_BAD.jasm\n@@ -55,0 +58,3 @@\n+        \/\/ Reflectively set static fields\n+        printStaticsReflective(Cwreflective_OK.class);\n+\n@@ -71,0 +77,1 @@\n+        \/\/ Read before write\n@@ -82,0 +89,12 @@\n+        \/\/ Reflective read before write\n+        try {\n+            printStaticsReflective(Creflbefore_BAD.class);\n+            throw new RuntimeException(\"Should throw\");\n+        } catch(ExceptionInInitializerError ex) {\n+            Throwable e = (ex.getCause() != null) ? ex.getCause() : ex;\n+            if (!e.getMessage().contains(\"is unset before first read\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n@@ -87,1 +106,1 @@\n-        Field f2 = cls.getDeclaredField(\"F1__STRICT\");\n+        Field f2 = cls.getDeclaredField(\"F2__STRICT\");\n@@ -91,0 +110,35 @@\n+\n+    static void printStaticsReflective(Class<?> cls) throws Exception {\n+        Field FIELD_F1 = findField(cls, \"F1__STRICT\");\n+        Field FIELD_F2 = findField(cls, \"F2__STRICT\");\n+\n+        String f1 = (String)getstaticReflective(FIELD_F1);\n+        int f2 = (int)getstaticReflective(FIELD_F2);\n+\n+        System.out.println(f1);\n+        System.out.println(f2);\n+    }\n+\n+    static void putstaticReflective(Field f, Object x) {\n+        try {\n+            f.set(null, x);\n+        } catch (ReflectiveOperationException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    static Object getstaticReflective(Field f) {\n+        try {\n+            return f.get(null);\n+        } catch (ReflectiveOperationException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    static Field findField(Class<?> cls, String name) {\n+        try {\n+            return cls.getDeclaredField(name);\n+        } catch (ReflectiveOperationException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictStaticFieldsTest.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"}]}