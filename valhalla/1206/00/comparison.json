{"files":[{"patch":"@@ -2402,11 +2402,0 @@\n-  \/\/ Do not set_parse_bci, so that return goo is credited to the return insn.\n-  \/\/ vreturn can trigger an allocation so vreturn can throw. Setting\n-  \/\/ the bci here breaks exception handling. Commenting this out\n-  \/\/ doesn't seem to break anything.\n-  \/\/  set_bci(InvocationEntryBci);\n-  if (method()->is_synchronized() && GenerateSynchronizationCode) {\n-    shared_unlock(_synch_lock->box_node(), _synch_lock->obj_node());\n-  }\n-  if (C->env()->dtrace_method_probes()) {\n-    make_dtrace_method_exit(method());\n-  }\n@@ -2448,0 +2437,9 @@\n+  \/\/ Do not set_parse_bci, so that return goo is credited to the return insn.\n+  set_bci(InvocationEntryBci);\n+  if (method()->is_synchronized() && GenerateSynchronizationCode) {\n+    shared_unlock(_synch_lock->box_node(), _synch_lock->obj_node());\n+  }\n+  if (C->env()->dtrace_method_probes()) {\n+    make_dtrace_method_exit(method());\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -4403,0 +4403,1 @@\n+    \/\/ Test merging value classes with Object fields\n@@ -4486,0 +4487,11 @@\n+\n+    \/\/ Verify that monitor information in JVMState is correct at method exit\n+    @Test\n+    public synchronized Object test167() {\n+        return MyValue1.createWithFieldsInline(rI, rL); \/\/ Might trigger buffering which requires JVMState\n+    }\n+\n+    @Run(test = \"test167\")\n+    public void test167_verifier() {\n+        Asserts.assertEquals(((MyValue1)test167()).hash(), hash());\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}