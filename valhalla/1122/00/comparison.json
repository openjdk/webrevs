{"files":[{"patch":"@@ -113,1 +113,1 @@\n-\/\/ [0] All classes are loaded in MetaspaceShared::preload_classes(). All metadata are\n+\/\/ [0] All classes are loaded in MetaspaceShared::loadable_descriptors(). All metadata are\n@@ -730,1 +730,1 @@\n-void MetaspaceShared::preload_classes(TRAPS) {\n+void MetaspaceShared::loadable_descriptors(TRAPS) {\n@@ -767,1 +767,1 @@\n-  preload_classes(CHECK);\n+  loadable_descriptors(CHECK);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  static void preload_classes(TRAPS) NOT_CDS_RETURN;\n+  static void loadable_descriptors(TRAPS) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3367,2 +3367,2 @@\n-u2 ClassFileParser::parse_classfile_preload_attribute(const ClassFileStream* const cfs,\n-                                                                   const u1* const preload_attribute_start,\n+u2 ClassFileParser::parse_classfile_loadable_descriptors_attribute(const ClassFileStream* const cfs,\n+                                                                   const u1* const loadable_descriptors_attribute_start,\n@@ -3372,2 +3372,2 @@\n-  if (preload_attribute_start != nullptr) {\n-    cfs->set_current(preload_attribute_start);\n+  if (loadable_descriptors_attribute_start != nullptr) {\n+    cfs->set_current(loadable_descriptors_attribute_start);\n@@ -3378,2 +3378,2 @@\n-  Array<u2>* const preload_classes = MetadataFactory::new_array<u2>(_loader_data, size, CHECK_0);\n-  _preload_classes = preload_classes;\n+  Array<u2>* const loadable_descriptors = MetadataFactory::new_array<u2>(_loader_data, size, CHECK_0);\n+  _loadable_descriptors = loadable_descriptors;\n@@ -3384,1 +3384,1 @@\n-      const u2 class_info_index = cfs->get_u2_fast();\n+      const u2 descriptor_index = cfs->get_u2_fast();\n@@ -3386,4 +3386,14 @@\n-        valid_klass_reference_at(class_info_index),\n-        \"Preload class_info_index %u has bad constant type in class file %s\",\n-        class_info_index, CHECK_0);\n-      preload_classes->at_put(index++, class_info_index);\n+        valid_symbol_at(descriptor_index),\n+        \"LoadableDescriptors descriptor_index %u has bad constant type in class file %s\",\n+        descriptor_index, CHECK_0);\n+      Symbol* descriptor = _cp->symbol_at(descriptor_index);\n+      bool valid = legal_field_signature(descriptor, CHECK_0);\n+      if(!valid) {\n+        ResourceMark rm(THREAD);\n+        Exceptions::fthrow(THREAD_AND_LOCATION,\n+          vmSymbols::java_lang_ClassFormatError(),\n+          \"Descriptor from LoadableDescriptors attribute at index \\\"%d\\\" in class %s has illegal signature \\\"%s\\\"\",\n+          descriptor_index, _class_name->as_C_string(), descriptor->as_C_string());\n+        return 0;\n+      }\n+      loadable_descriptors->at_put(index++, descriptor_index);\n@@ -3684,2 +3694,2 @@\n-  \/\/ Set _preload_classes attribute to default sentinel\n-  _preload_classes = Universe::the_empty_short_array();\n+  \/\/ Set _loadable_descriptors attribute to default sentinel\n+  _loadable_descriptors = Universe::the_empty_short_array();\n@@ -3692,1 +3702,1 @@\n-  bool parsed_preload_attribute = false;\n+  bool parsed_loadable_descriptors_attribute = false;\n@@ -3718,2 +3728,2 @@\n-  const u1* preload_attribute_start = nullptr;\n-  u4  preload_attribute_length = 0;\n+  const u1* loadable_descriptors_attribute_start = nullptr;\n+  u4  loadable_descriptors_attribute_length = 0;\n@@ -3946,2 +3956,2 @@\n-            if (EnableValhalla && tag == vmSymbols::tag_preload()) {\n-              if (parsed_preload_attribute) {\n+            if (EnableValhalla && tag == vmSymbols::tag_loadable_descriptors()) {\n+              if (parsed_loadable_descriptors_attribute) {\n@@ -3951,3 +3961,3 @@\n-              parsed_preload_attribute = true;\n-              preload_attribute_start = cfs->current();\n-              preload_attribute_length = attribute_length;\n+              parsed_loadable_descriptors_attribute = true;\n+              loadable_descriptors_attribute_start = cfs->current();\n+              loadable_descriptors_attribute_length = attribute_length;\n@@ -4035,2 +4045,2 @@\n-  if (parsed_preload_attribute) {\n-    const u2 num_classes = parse_classfile_preload_attribute(\n+  if (parsed_loadable_descriptors_attribute) {\n+    const u2 num_classes = parse_classfile_loadable_descriptors_attribute(\n@@ -4038,1 +4048,1 @@\n-                            preload_attribute_start,\n+                            loadable_descriptors_attribute_start,\n@@ -4042,2 +4052,2 @@\n-        preload_attribute_length == sizeof(num_classes) + sizeof(u2) * num_classes,\n-        \"Wrong Preload attribute length in class file %s\", CHECK);\n+        loadable_descriptors_attribute_length == sizeof(num_classes) + sizeof(u2) * num_classes,\n+        \"Wrong LoadableDescriptors attribute length in class file %s\", CHECK);\n@@ -4112,1 +4122,1 @@\n-  this_klass->set_preload_classes(_preload_classes);\n+  this_klass->set_loadable_descriptors(_loadable_descriptors);\n@@ -5029,4 +5039,4 @@\n-bool ClassFileParser::is_class_in_preload_attribute(Symbol *klass) {\n-  if (_preload_classes == nullptr) return false;\n-  for (int i = 0; i < _preload_classes->length(); i++) {\n-        Symbol* class_name = _cp->klass_at_noresolve(_preload_classes->at(i));\n+bool ClassFileParser::is_class_in_loadable_descriptors_attribute(Symbol *klass) {\n+  if (_loadable_descriptors == nullptr) return false;\n+  for (int i = 0; i < _loadable_descriptors->length(); i++) {\n+        Symbol* class_name = _cp->symbol_at(_loadable_descriptors->at(i));\n@@ -5303,0 +5313,10 @@\n+bool ClassFileParser::legal_field_signature(const Symbol* signature, TRAPS) const {\n+  const char* const bytes = (const char*)signature->bytes();\n+  const unsigned int length = signature->utf8_length();\n+  const char* const p = skip_over_field_signature(bytes, false, length, CHECK_false);\n+\n+  if (p == nullptr || (p - bytes) != (int)length) {\n+    return false;\n+  }\n+  return true;\n+}\n@@ -5578,1 +5598,1 @@\n-  assert(nullptr == _preload_classes, \"invariant\");\n+  assert(nullptr == _loadable_descriptors, \"invariant\");\n@@ -5849,1 +5869,1 @@\n-  _preload_classes(nullptr),\n+  _loadable_descriptors(nullptr),\n@@ -5952,1 +5972,1 @@\n-  _preload_classes = nullptr;\n+  _loadable_descriptors = nullptr;\n@@ -6007,2 +6027,2 @@\n-  if (_preload_classes != nullptr && _preload_classes != Universe::the_empty_short_array()) {\n-    MetadataFactory::free_array<u2>(_loader_data, _preload_classes);\n+  if (_loadable_descriptors != nullptr && _loadable_descriptors != Universe::the_empty_short_array()) {\n+    MetadataFactory::free_array<u2>(_loader_data, _loadable_descriptors);\n@@ -6524,2 +6544,2 @@\n-        if (name != _class_name && is_class_in_preload_attribute(name)) {\n-          log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: field type in Preload attribute\", name->as_C_string(), _class_name->as_C_string());\n+        if (name != _class_name && is_class_in_loadable_descriptors_attribute(sig)) {\n+          log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: field type in LoadableDescriptors attribute\", name->as_C_string(), _class_name->as_C_string());\n@@ -6531,1 +6551,1 @@\n-              log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in Preload attribute) succeeded\", name->as_C_string(), _class_name->as_C_string());\n+              log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) succeeded\", name->as_C_string(), _class_name->as_C_string());\n@@ -6534,1 +6554,1 @@\n-              log_warning(class, preload)(\"Preloading class %s during loading of class %s (cause: field type in Preload attribute) but loaded class is not a value class\", name->as_C_string(), _class_name->as_C_string());\n+              log_warning(class, preload)(\"Preloading class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) but loaded class is not a value class\", name->as_C_string(), _class_name->as_C_string());\n@@ -6537,1 +6557,1 @@\n-            log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in Preload attribute) failed : %s\",\n+            log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":61,"deletions":41,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  Array<u2>* _preload_classes;\n+  Array<u2>* _loadable_descriptors;\n@@ -359,1 +359,1 @@\n-  u2 parse_classfile_preload_attribute(const ClassFileStream* const cfs,\n+  u2 parse_classfile_loadable_descriptors_attribute(const ClassFileStream* const cfs,\n@@ -496,0 +496,2 @@\n+  bool legal_field_signature(const Symbol* signature, TRAPS) const;\n+\n@@ -620,1 +622,1 @@\n-  bool is_class_in_preload_attribute(Symbol *klass);\n+  bool is_class_in_loadable_descriptors_attribute(Symbol *klass);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1161,1 +1161,1 @@\n-        if (name != ik->name() && ik->is_class_in_preload_attribute(name)) {\n+        if (name != ik->name() && ik->is_class_in_loadable_descriptors_attribute(name)) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  template(tag_preload,                               \"Preload\")                                  \\\n+  template(tag_loadable_descriptors,                  \"LoadableDescriptors\")                      \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,4 +175,4 @@\n-bool InstanceKlass::is_class_in_preload_attribute(Symbol* name) const {\n-  if (_preload_classes == nullptr) return false;\n-  for (int i = 0; i < _preload_classes->length(); i++) {\n-        Symbol* class_name = _constants->klass_at_noresolve(_preload_classes->at(i));\n+bool InstanceKlass::is_class_in_loadable_descriptors_attribute(Symbol* name) const {\n+  if (_loadable_descriptors == nullptr) return false;\n+  for (int i = 0; i < _loadable_descriptors->length(); i++) {\n+        Symbol* class_name = _constants->klass_at_noresolve(_loadable_descriptors->at(i));\n@@ -571,1 +571,1 @@\n-  _preload_classes(nullptr),\n+  _loadable_descriptors(nullptr),\n@@ -764,4 +764,4 @@\n-  if (preload_classes() != nullptr &&\n-      preload_classes() != Universe::the_empty_short_array() &&\n-      !preload_classes()->is_shared()) {\n-    MetadataFactory::free_array<jushort>(loader_data, preload_classes());\n+  if (loadable_descriptors() != nullptr &&\n+      loadable_descriptors() != Universe::the_empty_short_array() &&\n+      !loadable_descriptors()->is_shared()) {\n+    MetadataFactory::free_array<jushort>(loader_data, loadable_descriptors());\n@@ -1014,1 +1014,1 @@\n-    if (preload_classes() != nullptr) {\n+    if (loadable_descriptors() != nullptr) {\n@@ -1016,3 +1016,3 @@\n-      for (int i = 0; i < preload_classes()->length(); i++) {\n-        if (constants()->tag_at(preload_classes()->at(i)).is_klass()) continue;\n-        Symbol* class_name = constants()->klass_at_noresolve(preload_classes()->at(i));\n+      for (int i = 0; i < loadable_descriptors()->length(); i++) {\n+        Symbol* sig = constants()->symbol_at(loadable_descriptors()->at(i));\n+        TempNewSymbol class_name = Signature::strip_envelope(sig);\n@@ -1020,1 +1020,1 @@\n-        log_info(class, preload)(\"Preloading class %s during linking of class %s because of the class is listed in the Preload attribute\", class_name->as_C_string(), name()->as_C_string());\n+        log_info(class, preload)(\"Preloading class %s during linking of class %s because of the class is listed in the LoadableDescriptors attribute\", sig->as_C_string(), name()->as_C_string());\n@@ -1029,1 +1029,1 @@\n-          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: Preload attribute) succeeded\", class_name->as_C_string(), name()->as_C_string());\n+          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) succeeded\", class_name->as_C_string(), name()->as_C_string());\n@@ -1032,1 +1032,1 @@\n-              log_warning(class, preload)(\"Preloading class %s during linking of class %s (cause: Preload attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n+              log_warning(class, preload)(\"Preloading class %s during linking of class %s (cause: LoadableDescriptors attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n@@ -1035,1 +1035,1 @@\n-          log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: Preload attribute) failed\", class_name->as_C_string(), name()->as_C_string());\n+          log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) failed\", class_name->as_C_string(), name()->as_C_string());\n@@ -2839,1 +2839,1 @@\n-  it->push(&_preload_classes);\n+  it->push(&_loadable_descriptors);\n@@ -3953,1 +3953,1 @@\n-  st->print(BULLET\"preload classes:     \"); preload_classes()->print_value_on(st); st->cr();\n+  st->print(BULLET\"preload classes:     \"); loadable_descriptors()->print_value_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-  Array<u2>* _preload_classes;\n+  Array<u2>* _loadable_descriptors;\n@@ -451,1 +451,1 @@\n-  bool is_class_in_preload_attribute(Symbol* name) const;\n+  bool is_class_in_loadable_descriptors_attribute(Symbol* name) const;\n@@ -463,2 +463,2 @@\n-  Array<u2>* preload_classes() const { return _preload_classes; }\n-  void set_preload_classes(Array<u2>* c) { _preload_classes = c; }\n+  Array<u2>* loadable_descriptors() const { return _loadable_descriptors; }\n+  void set_loadable_descriptors(Array<u2>* c) { _loadable_descriptors = c; }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -932,2 +932,2 @@\n-                                the_class->preload_classes(),\n-                                scratch_class->preload_classes());\n+                                the_class->loadable_descriptors(),\n+                                scratch_class->loadable_descriptors());\n@@ -2106,5 +2106,5 @@\n-  Array<u2>* preload_classes = scratch_class->preload_classes();\n-  assert(preload_classes != nullptr, \"unexpected null preload_classes\");\n-  for (int i = 0; i < preload_classes->length(); i++) {\n-    u2 cp_index = preload_classes->at(i);\n-    preload_classes->at_put(i, find_new_index(cp_index));\n+  Array<u2>* loadable_descriptors = scratch_class->loadable_descriptors();\n+  assert(loadable_descriptors != nullptr, \"unexpected null loadable_descriptors\");\n+  for (int i = 0; i < loadable_descriptors->length(); i++) {\n+    u2 cp_index = loadable_descriptors->at(i);\n+    loadable_descriptors->at_put(i, find_new_index(cp_index));\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            oa.shouldContain(\"Preloading of class SimpleInlineType during linking of class TestUnresolvedInlineClass (cause: Preload attribute) failed\");\n+            oa.shouldContain(\"Preloading of class SimpleInlineType during linking of class TestUnresolvedInlineClass (cause: LoadableDescriptors attribute) failed\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b. Cause: field type in Preload attribute\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b (cause: field type in Preload attribute) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class1c during loading of class PreloadCircularityTest$Class1b (cause: field type in LoadableDescriptors attribute) succeeded\");\n@@ -153,2 +153,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c. Cause: field type in Preload attribute\");\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class3b during loading of class PreloadCircularityTest$Class3c (cause: field type in LoadableDescriptors attribute) failed : java\/lang\/ClassCircularityError\");\n@@ -204,1 +204,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a. Cause: field type in LoadableDescriptors attribute\");\n@@ -209,1 +209,1 @@\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5a (cause: field type in LoadableDescriptors attribute) failed : java\/lang\/ClassCircularityError\");\n@@ -211,1 +211,1 @@\n-        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info   ][class,preload] Preloading class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c. Cause: field type in LoadableDescriptors attribute\");\n@@ -216,1 +216,1 @@\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class5b during loading of class PreloadCircularityTest$Class5c (cause: field type in LoadableDescriptors attribute) failed : java\/lang\/ClassCircularityError\");\n@@ -247,2 +247,2 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b. Cause: field type in Preload attribute\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b (cause: field type in Preload attribute) succeeded\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b. Cause: field type in LoadableDescriptors attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class6c during loading of class PreloadCircularityTest$Class6b (cause: field type in LoadableDescriptors attribute) succeeded\");\n@@ -400,1 +400,1 @@\n-        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in Preload attribute\");\n+        out.shouldContain(\"[info][class,preload] Preloading class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in LoadableDescriptors attribute\");\n@@ -403,1 +403,1 @@\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a (cause: field type in Preload attribute) failed : java\/lang\/ClassCircularityError\");\n+        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a (cause: field type in LoadableDescriptors attribute) failed : java\/lang\/ClassCircularityError\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -72,3 +72,2 @@\n-    Utf8 \"Preload\"; \/\/ #31\n-    class #33; \/\/ #32\n-    Utf8 \"PreloadValue1\"; \/\/ #33\n+    Utf8 \"LoadableDescriptors\"; \/\/ #31\n+    Utf8 \"LPreloadValue1;\"; \/\/ #32\n@@ -151,1 +150,1 @@\n-    Attr(#31) { \/\/ Preload\n+    Attr(#31) { \/\/ LoadableDescriptors\n@@ -153,1 +152,1 @@\n-    } \/\/ end Preload\n+    } \/\/ end LoadableDescriptors\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadClient1.jcod","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        checkFor(pb, \"[info][class,preload] Preloading class PreloadValue0 during loading of class ValuePreloadClient0. Cause: field type in Preload attribute\");\n+        checkFor(pb, \"[info][class,preload] Preloading class PreloadValue0 during loading of class ValuePreloadClient0. Cause: field type in LoadableDescriptors attribute\");\n@@ -60,1 +60,1 @@\n-        checkFor(pb, \"[warning][class,preload] Preloading of class PreloadValue1 during linking of class ValuePreloadClient1 (cause: Preload attribute) failed\");\n+        checkFor(pb, \"[warning][class,preload] Preloading of class PreloadValue1 during linking of class ValuePreloadClient1 (cause: LoadableDescriptors attribute) failed\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}