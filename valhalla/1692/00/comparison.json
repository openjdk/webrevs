{"files":[{"patch":"@@ -217,3 +217,1 @@\n-  bool is_instance = t_oop->is_known_instance_field();\n-\n-  ciField* field = phase->C->alias_type(t_oop)->field();\n+  bool is_known_instance = t_oop->is_known_instance_field();\n@@ -226,4 +224,1 @@\n-    if (EnableValhalla) {\n-      if (field != nullptr && (field->holder()->is_inlinetype() || field->holder()->is_abstract_value_klass())) {\n-        is_strict_final_load = true;\n-      }\n+    is_strict_final_load = t_oop->is_ptr_to_strict_final_field();\n@@ -231,6 +226,2 @@\n-      if (t_oop->is_inlinetypeptr() && t_oop->inline_klass()->contains_field_offset(t_oop->offset())) {\n-        assert(is_strict_final_load, \"sanity check for basic cases\");\n-      }\n-#endif\n-    } else {\n-      is_strict_final_load = field != nullptr && t_oop->is_ptr_to_boxed_value();\n+    if ((t_oop->is_inlinetypeptr() && t_oop->inline_klass()->contains_field_offset(t_oop->offset())) || t_oop->is_ptr_to_boxed_value()) {\n+      assert(is_strict_final_load, \"sanity check for basic cases\");\n@@ -238,0 +229,1 @@\n+#endif \/\/ ASSERT\n@@ -240,1 +232,1 @@\n-  if (!is_instance && !is_strict_final_load) {\n+  if (!is_known_instance && !is_strict_final_load) {\n@@ -247,0 +239,1 @@\n+  ciField* field = nullptr;\n@@ -248,0 +241,3 @@\n+    field = phase->C->alias_type(t_oop)->field();\n+    assert(field != nullptr, \"must point to a field\");\n+\n@@ -287,1 +283,1 @@\n-        if (is_instance) {\n+        if (is_known_instance) {\n@@ -312,1 +308,1 @@\n-      if (!is_instance || !ClearArrayNode::step_through(&result, instance_id, phase)) {\n+      if (!is_known_instance || !ClearArrayNode::step_through(&result, instance_id, phase)) {\n@@ -1409,1 +1405,1 @@\n-    \/\/ Only instances and boxed values.\n+    \/\/ Only known instances and immutable fields\n@@ -1411,1 +1407,1 @@\n-        (t_oop->is_ptr_to_boxed_value() ||\n+        (t_oop->is_ptr_to_strict_final_field() ||\n@@ -1460,2 +1456,2 @@\n-         addr_t->is_ptr_to_boxed_value()) {\n-      \/\/ Use _idx of address base (could be Phi node) for boxed values.\n+         addr_t->is_ptr_to_strict_final_field()) {\n+      \/\/ Use _idx of address base (could be Phi node) for immutable fields in unknown instances\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -3578,0 +3578,1 @@\n+    _is_ptr_to_strict_final_field(false),\n@@ -3587,0 +3588,1 @@\n+    _is_ptr_to_strict_final_field = _is_ptr_to_boxed_value;\n@@ -3588,0 +3590,9 @@\n+\n+  if (klass() != nullptr && klass()->is_instance_klass() && klass()->is_loaded() &&\n+      this->offset() != Type::OffsetBot && this->offset() != Type::OffsetTop) {\n+    ciField* field = klass()->as_instance_klass()->get_field_by_offset(this->offset(), false);\n+    if (field != nullptr && field->is_strict() && field->is_final()) {\n+      _is_ptr_to_strict_final_field = true;\n+    }\n+  }\n+\n@@ -3661,1 +3672,1 @@\n-#endif\n+#endif \/\/ _LP64\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-#include \"runtime\/handles.hpp\"\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -1398,0 +1396,1 @@\n+  bool          _is_ptr_to_strict_final_field;\n@@ -1479,0 +1478,1 @@\n+  bool is_ptr_to_strict_final_field() const { return _is_ptr_to_strict_final_field; }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}