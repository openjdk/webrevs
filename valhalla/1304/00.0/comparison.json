{"files":[{"patch":"@@ -418,1 +418,1 @@\n-            dependencies: [\"devkit\", \"gtest\", \"build_devkit\", \"graphviz\", \"pandoc\"],\n+            dependencies: [\"devkit\", \"gtest\", \"build_devkit\", \"graphviz\", \"pandoc\", \"tidy\"],\n@@ -444,1 +444,1 @@\n-            dependencies: [\"devkit\", \"gtest\", \"graphviz\", \"pandoc\"],\n+            dependencies: [\"devkit\", \"gtest\", \"graphviz\", \"pandoc\", \"tidy\"],\n@@ -456,1 +456,1 @@\n-            dependencies: [\"devkit\", \"gtest\", \"graphviz\", \"pandoc\"],\n+            dependencies: [\"devkit\", \"gtest\", \"graphviz\", \"pandoc\", \"tidy\"],\n@@ -489,1 +489,1 @@\n-            dependencies: [\"devkit\", \"gtest\", \"build_devkit\", \"graphviz\", \"pandoc\"],\n+            dependencies: [\"devkit\", \"gtest\", \"build_devkit\", \"graphviz\", \"pandoc\", \"tidy\"],\n@@ -960,1 +960,1 @@\n-    if (testedProfile == null) {\n+    if (testedProfile == null || testedProfile == \"docs\") {\n@@ -1002,0 +1002,11 @@\n+    var testOnlyProfilesPrebuiltDocs = {\n+        \"run-test-prebuilt-docs\": clone(testOnlyProfilesPrebuilt[\"run-test-prebuilt\"])\n+    };\n+\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].dependencies.push(\"docs.doc_api_spec\", \"tidy\");\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].environment[\"DOCS_JDK_IMAGE_DIR\"]\n+        = input.get(\"docs.doc_api_spec\", \"install_path\");\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].environment[\"TIDY\"]\n+        = input.get(\"tidy\", \"home_path\") + \"\/bin\/tidy\";\n+    testOnlyProfilesPrebuiltDocs[\"run-test-prebuilt-docs\"].labels = \"test-docs\";\n+\n@@ -1005,1 +1016,1 @@\n-    if (input.profile == \"run-test-prebuilt\") {\n+    if (input.profile == \"run-test-prebuilt\" || input.profile == \"run-test-prebuilt-docs\") {\n@@ -1010,10 +1021,7 @@\n-    if (profiles[testedProfile] != null) {\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_os\"]\n-            = profiles[testedProfile][\"target_os\"];\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_cpu\"]\n-            = profiles[testedProfile][\"target_cpu\"];\n-    } else if (profiles[testImageProfile] != null) {\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_os\"]\n-            = profiles[testImageProfile][\"target_os\"];\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_cpu\"]\n-            = profiles[testImageProfile][\"target_cpu\"];\n+    function updateProfileTargets(profiles, testedProfile, testImageProfile, targetProfile, runTestProfile) {\n+        var profileToCheck = profiles[testedProfile] || profiles[testImageProfile];\n+\n+        if (profileToCheck != null) {\n+            targetProfile[runTestProfile][\"target_os\"] = profileToCheck[\"target_os\"];\n+            targetProfile[runTestProfile][\"target_cpu\"] = profileToCheck[\"target_cpu\"];\n+        }\n@@ -1021,0 +1029,5 @@\n+\n+    updateProfileTargets(profiles, testedProfile, testImageProfile, testOnlyProfilesPrebuilt, \"run-test-prebuilt\");\n+    updateProfileTargets(profiles, testedProfile, testImageProfile, testOnlyProfilesPrebuiltDocs, \"run-test-prebuilt-docs\");\n+\n+    profiles = concatObjects(profiles, testOnlyProfilesPrebuiltDocs);\n@@ -1070,0 +1083,2 @@\n+        profiles[\"run-test-prebuilt-docs\"] = concatObjects(profiles[\"run-test-prebuilt-docs\"],\n+            runTestPrebuiltSrcFullExtra);\n@@ -1278,0 +1293,8 @@\n+        tidy: {\n+            organization: common.organization,\n+            ext: \"tar.gz\",\n+            revision: \"5.9.20+1\",\n+            environment_path: input.get(\"tidy\", \"home_path\") + \"\/bin\/tidy\",\n+            configure_args: \"TIDY=\" + input.get(\"tidy\", \"home_path\") + \"\/bin\/tidy\",\n+            module: \"tidy-html-\" + (input.target_os === \"macosx\" ? input.target_os : input.target_platform),\n+        },\n","filename":"make\/conf\/jib-profiles.js","additions":39,"deletions":16,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-        __ ldr(rscratch1, Address(OSR_buf, slot_offset + 1*BytesPerWord));\n+        __ ldr(rscratch1, __ form_address(rscratch1, OSR_buf, slot_offset + 1*BytesPerWord, 0));\n@@ -286,2 +286,2 @@\n-      __ ldr(r19, Address(OSR_buf, slot_offset));\n-      __ ldr(r20, Address(OSR_buf, slot_offset + BytesPerWord));\n+      __ ldr(r19, __ form_address(rscratch1, OSR_buf, slot_offset, 0));\n+      __ ldr(r20, __ form_address(rscratch1, OSR_buf, slot_offset + BytesPerWord, 0));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -219,1 +219,5 @@\n-    __ unlock_object(Rtmp1, Rtmp2, lock->as_register(), *stub->entry());\n+    if (LockingMode == LM_MONITOR) {\n+      __ branch_optimized(Assembler::bcondAlways, *stub->entry());\n+    } else {\n+      __ unlock_object(Rtmp1, Rtmp2, lock->as_register(), *stub->entry());\n+    }\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3621,0 +3621,11 @@\n+void MacroAssembler::vbroadcasti128(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n+  if (reachable(src)) {\n+    Assembler::vbroadcasti128(dst, as_Address(src), vector_len);\n+  } else {\n+    lea(rscratch, src);\n+    Assembler::vbroadcasti128(dst, Address(rscratch, 0), vector_len);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1184,0 +1184,1 @@\n+  void sha512_update_ni_x1(Register arg_hash, Register arg_msg, Register ofs, Register limit, bool multi_block);\n@@ -1282,0 +1283,3 @@\n+  using Assembler::vbroadcasti128;\n+  void vbroadcasti128(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1577,1 +1577,1 @@\n-  assert(VM_Version::supports_bmi2(), \"\");\n+  assert(VM_Version::supports_bmi2() || VM_Version::supports_sha512(), \"\");\n@@ -1587,11 +1587,0 @@\n-  const XMMRegister msg = xmm0;\n-  const XMMRegister state0 = xmm1;\n-  const XMMRegister state1 = xmm2;\n-  const XMMRegister msgtmp0 = xmm3;\n-  const XMMRegister msgtmp1 = xmm4;\n-  const XMMRegister msgtmp2 = xmm5;\n-  const XMMRegister msgtmp3 = xmm6;\n-  const XMMRegister msgtmp4 = xmm7;\n-\n-  const XMMRegister shuf_mask = xmm8;\n-\n@@ -1600,3 +1589,16 @@\n-  __ sha512_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n-  buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n-\n+  if (VM_Version::supports_sha512()) {\n+      __ sha512_update_ni_x1(state, buf, ofs, limit, multi_block);\n+  } else {\n+    const XMMRegister msg = xmm0;\n+    const XMMRegister state0 = xmm1;\n+    const XMMRegister state1 = xmm2;\n+    const XMMRegister msgtmp0 = xmm3;\n+    const XMMRegister msgtmp1 = xmm4;\n+    const XMMRegister msgtmp2 = xmm5;\n+    const XMMRegister msgtmp3 = xmm6;\n+    const XMMRegister msgtmp4 = xmm7;\n+\n+    const XMMRegister shuf_mask = xmm8;\n+    __ sha512_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n+      buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1063,0 +1063,1 @@\n+    _features &= ~CPU_SHA512;\n@@ -1307,1 +1308,1 @@\n-  if (UseSHA && supports_avx2() && supports_bmi2()) {\n+  if (UseSHA && supports_avx2() && (supports_bmi2() || supports_sha512())) {\n@@ -3010,0 +3011,2 @@\n+    if (sefsl1_cpuid7_eax.bits.sha512 != 0)\n+      result |= CPU_SHA512;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3722,0 +3722,1 @@\n+  predicate(n->as_StoreVector()->memory_size() >= 16);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -389,0 +389,7 @@\n+  \/\/ Klass is being deallocated. Java mirror can still be alive, and it should not\n+  \/\/ point to dead klass. We need to break the link from mirror to the Klass.\n+  \/\/ See how InstanceKlass::deallocate_contents does it for normal mirrors.\n+  oop mirror = _scratch_java_mirror_table->get_oop(k);\n+  if (mirror != nullptr) {\n+    java_lang_Class::set_klass(mirror, nullptr);\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -756,2 +756,10 @@\n-  \/\/ Exercise the manifest processing code to ensure classes used by CDS at runtime\n-  \/\/ are always archived\n+  \/\/ Some classes are used at CDS runtime but are not loaded, and therefore archived, at\n+  \/\/ dumptime. We can perform dummmy calls to these classes at dumptime to ensure they\n+  \/\/ are archived.\n+  exercise_runtime_cds_code(CHECK);\n+\n+  log_info(cds)(\"Loading classes to share: done.\");\n+}\n+\n+void MetaspaceShared::exercise_runtime_cds_code(TRAPS) {\n+  \/\/ Exercise the manifest processing code\n@@ -761,1 +769,2 @@\n-  log_info(cds)(\"Loading classes to share: done.\");\n+  \/\/ Exercise FileSystem and URL code\n+  CDSProtectionDomain::to_file_URL(\"dummy.jar\", Handle(), CHECK);\n@@ -804,10 +813,0 @@\n-  \/\/ Dummy call to load classes used at CDS runtime\n-  JavaValue result(T_OBJECT);\n-  Handle path_string = java_lang_String::create_from_str(\"dummy.jar\", CHECK);\n-  JavaCalls::call_static(&result,\n-                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n-                         vmSymbols::toFileURL_name(),\n-                         vmSymbols::toFileURL_signature(),\n-                         path_string,\n-                         CHECK);\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  static void exercise_runtime_cds_code(TRAPS) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -774,1 +774,1 @@\n-                                                      Deoptimization::Action_none));\n+                                                         Deoptimization::Action_none));\n@@ -780,0 +780,6 @@\n+    if (!con.is_loaded()) {\n+      trap(str, nullptr, Deoptimization::make_trap_request(Deoptimization::Reason_unloaded,\n+                                                           Deoptimization::Action_reinterpret,\n+                                                           cp_index));\n+      return;\n+    }\n@@ -2269,1 +2275,0 @@\n-    \/\/ %%% FIXME: ldc of Class can generate an exception\n@@ -2273,1 +2278,1 @@\n-      return str.is_in_error();\n+      return str.is_in_error() || !str.get_constant().is_loaded();\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1043,0 +1043,1 @@\n+        !u->depends_only_on_test() && \/\/ preserve dependency on test\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2706,5 +2706,5 @@\n-  \/\/ be rewritten during runtime (see Rewriter::rewrite_jsrs()). So setting the _methods to\n-  \/\/ be writable. The length check on the _methods is necessary because classes which\n-  \/\/ don't have any methods share the Universe::_the_empty_method_array which is in the RO region.\n-  if (_methods != nullptr && _methods->length() > 0 &&\n-      !can_be_verified_at_dumptime() && methods_contain_jsr_bytecode()) {\n+  \/\/ be rewritten during runtime (see Rewriter::rewrite_jsrs()) but they cannot be safely\n+  \/\/ checked here with ByteCodeStream. All methods that can't be verified are made writable.\n+  \/\/ The length check on the _methods is necessary because classes which don't have any\n+  \/\/ methods share the Universe::_the_empty_method_array which is in the RO region.\n+  if (_methods != nullptr && _methods->length() > 0 && !can_be_verified_at_dumptime()) {\n@@ -2957,15 +2957,0 @@\n-\n-bool InstanceKlass::methods_contain_jsr_bytecode() const {\n-  Thread* thread = Thread::current();\n-  for (int i = 0; i < _methods->length(); i++) {\n-    methodHandle m(thread, _methods->at(i));\n-    BytecodeStream bcs(m);\n-    while (!bcs.is_last_bytecode()) {\n-      Bytecodes::Code opcode = bcs.next();\n-      if (opcode == Bytecodes::_jsr || opcode == Bytecodes::_jsr_w) {\n-        return true;\n-      }\n-    }\n-  }\n-  return false;\n-}\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1239,1 +1239,0 @@\n-  bool methods_contain_jsr_bytecode() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1142,0 +1142,2 @@\n+  Node* insert_convert_node_if_needed(BasicType target, Node* input);\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2757,0 +2757,2 @@\n+    \/\/ ciTypeFlow should trap if the ldc is in error state or if the constant is not loaded\n+    assert(!iter().is_in_error(), \"ldc is in error state\");\n@@ -2758,19 +2760,4 @@\n-    if (constant.is_loaded()) {\n-      const Type* con_type = Type::make_from_constant(constant);\n-      if (con_type != nullptr) {\n-        push_node(con_type->basic_type(), makecon(con_type));\n-      }\n-    } else {\n-      \/\/ If the constant is unresolved or in error state, run this BC in the interpreter.\n-      if (iter().is_in_error()) {\n-        uncommon_trap(Deoptimization::make_trap_request(Deoptimization::Reason_unhandled,\n-                                                        Deoptimization::Action_none),\n-                      nullptr, \"constant in error state\", true \/* must_throw *\/);\n-\n-      } else {\n-        int index = iter().get_constant_pool_index();\n-        uncommon_trap(Deoptimization::make_trap_request(Deoptimization::Reason_unloaded,\n-                                                        Deoptimization::Action_reinterpret,\n-                                                        index),\n-                      nullptr, \"unresolved constant\", false \/* must_throw *\/);\n-      }\n+    assert(constant.is_loaded(), \"constant is not loaded\");\n+    const Type* con_type = Type::make_from_constant(constant);\n+    if (con_type != nullptr) {\n+      push_node(con_type->basic_type(), makecon(con_type));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -163,4 +162,0 @@\n-  \/\/ Debug on cmd (only makes sense with JVMTI since the agentlib needs it).\n-#if INCLUDE_JVMTI\n-  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<DebugOnCmdStartDCmd>(full_export, true, true));\n-#endif \/\/ INCLUDE_JVMTI\n@@ -1085,39 +1080,0 @@\n-#if INCLUDE_JVMTI\n-extern \"C\" typedef char const* (JNICALL *debugInit_startDebuggingViaCommandPtr)(JNIEnv* env, jthread thread, char const** transport_name,\n-                                                                                char const** address, jboolean* first_start);\n-static debugInit_startDebuggingViaCommandPtr dvc_start_ptr = nullptr;\n-\n-void DebugOnCmdStartDCmd::execute(DCmdSource source, TRAPS) {\n-  char const* transport = nullptr;\n-  char const* addr = nullptr;\n-  jboolean is_first_start = JNI_FALSE;\n-  JavaThread* thread = THREAD;\n-  jthread jt = JNIHandles::make_local(thread->threadObj());\n-  ThreadToNativeFromVM ttn(thread);\n-  const char *error = \"Could not find jdwp agent.\";\n-\n-  if (!dvc_start_ptr) {\n-    JvmtiAgentList::Iterator it = JvmtiAgentList::agents();\n-    while (it.has_next()) {\n-      JvmtiAgent* agent = it.next();\n-      if ((strcmp(\"jdwp\", agent->name()) == 0) && (dvc_start_ptr == nullptr)) {\n-        char const* func = \"debugInit_startDebuggingViaCommand\";\n-        dvc_start_ptr = (debugInit_startDebuggingViaCommandPtr) os::find_agent_function(agent, false, &func, 1);\n-      }\n-    }\n-  }\n-\n-  if (dvc_start_ptr) {\n-    error = dvc_start_ptr(thread->jni_environment(), jt, &transport, &addr, &is_first_start);\n-  }\n-\n-  if (error != nullptr) {\n-    output()->print_cr(\"Debugging has not been started: %s\", error);\n-  } else {\n-    output()->print_cr(is_first_start ? \"Debugging has been started.\" : \"Debugging is already active.\");\n-    output()->print_cr(\"Transport : %s\", transport ? transport : \"#unknown\");\n-    output()->print_cr(\"Address : %s\", addr ? addr : \"#unknown\");\n-  }\n-}\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -914,21 +914,0 @@\n-#if INCLUDE_JVMTI\n-class DebugOnCmdStartDCmd : public DCmd {\n-public:\n-  DebugOnCmdStartDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n-  static const char* name() {\n-    return \"VM.start_java_debugging\";\n-  }\n-  static const char* description() {\n-    return \"Starts up the Java debugging if the jdwp agentlib was enabled with the option onjcmd=y.\";\n-  }\n-  static const char* impact() {\n-    return \"High: Switches the VM into Java debug mode.\";\n-  }\n-  static const JavaPermission permission() {\n-    JavaPermission p = { \"java.lang.management.ManagementPermission\", \"control\", nullptr };\n-    return p;\n-  }\n-  virtual void execute(DCmdSource source, TRAPS);\n-};\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -27,38 +27,2 @@\n-import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n-import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n-import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n-import java.lang.classfile.attribute.CodeAttribute;\n-import java.lang.classfile.attribute.CompilationIDAttribute;\n-import java.lang.classfile.attribute.ConstantValueAttribute;\n-import java.lang.classfile.attribute.DeprecatedAttribute;\n-import java.lang.classfile.attribute.EnclosingMethodAttribute;\n-import java.lang.classfile.attribute.ExceptionsAttribute;\n-import java.lang.classfile.attribute.InnerClassesAttribute;\n-import java.lang.classfile.attribute.LineNumberTableAttribute;\n-import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n-import java.lang.classfile.attribute.LocalVariableTableAttribute;\n-import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n-import java.lang.classfile.attribute.MethodParametersAttribute;\n-import java.lang.classfile.attribute.ModuleAttribute;\n-import java.lang.classfile.attribute.ModuleHashesAttribute;\n-import java.lang.classfile.attribute.ModuleMainClassAttribute;\n-import java.lang.classfile.attribute.ModulePackagesAttribute;\n-import java.lang.classfile.attribute.ModuleResolutionAttribute;\n-import java.lang.classfile.attribute.ModuleTargetAttribute;\n-import java.lang.classfile.attribute.NestHostAttribute;\n-import java.lang.classfile.attribute.NestMembersAttribute;\n-import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n-import java.lang.classfile.attribute.RecordAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.SignatureAttribute;\n-import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n-import java.lang.classfile.attribute.SourceFileAttribute;\n-import java.lang.classfile.attribute.SourceIDAttribute;\n-import java.lang.classfile.attribute.StackMapTableAttribute;\n-import java.lang.classfile.attribute.SyntheticAttribute;\n-import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.attribute.*;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":2,"deletions":38,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attributes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,25 +27,2 @@\n-import java.lang.classfile.attribute.CompilationIDAttribute;\n-import java.lang.classfile.attribute.DeprecatedAttribute;\n-import java.lang.classfile.attribute.EnclosingMethodAttribute;\n-import java.lang.classfile.attribute.InnerClassesAttribute;\n-import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n-import java.lang.classfile.attribute.ModuleAttribute;\n-import java.lang.classfile.attribute.ModuleHashesAttribute;\n-import java.lang.classfile.attribute.ModuleMainClassAttribute;\n-import java.lang.classfile.attribute.ModulePackagesAttribute;\n-import java.lang.classfile.attribute.ModuleResolutionAttribute;\n-import java.lang.classfile.attribute.ModuleTargetAttribute;\n-import java.lang.classfile.attribute.NestHostAttribute;\n-import java.lang.classfile.attribute.NestMembersAttribute;\n-import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n-import java.lang.classfile.attribute.RecordAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.SignatureAttribute;\n-import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n-import java.lang.classfile.attribute.SourceFileAttribute;\n-import java.lang.classfile.attribute.SourceIDAttribute;\n-import java.lang.classfile.attribute.SyntheticAttribute;\n-import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.attribute.*;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassElement.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+import java.lang.classfile.attribute.CharacterRangeInfo;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -29,0 +37,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -31,0 +40,1 @@\n+import java.util.List;\n@@ -34,4 +44,0 @@\n-import java.lang.classfile.attribute.ModuleAttribute;\n-import java.lang.classfile.constantpool.ClassEntry;\n-import java.lang.classfile.constantpool.ConstantPoolBuilder;\n-import java.lang.classfile.constantpool.Utf8Entry;\n@@ -40,6 +46,2 @@\n-import java.lang.reflect.AccessFlag;\n-import java.lang.classfile.attribute.CharacterRangeInfo;\n-import java.lang.classfile.attribute.LocalVariableInfo;\n-import java.lang.classfile.attribute.LocalVariableTypeInfo;\n-import java.lang.classfile.instruction.ExceptionCatch;\n-import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -48,1 +50,0 @@\n-import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -466,1 +466,1 @@\n-     * @param target a direct method handle to crack into symbolic reference components\n+     * @param target a direct method handle to crack into symbolic reference components\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2377,1 +2377,0 @@\n-         * @param name the unqualified name of the field\n@@ -2380,0 +2379,1 @@\n+         * @param name the unqualified name of the field\n@@ -2396,1 +2396,0 @@\n-         * @param name the unqualified name of the field\n@@ -2399,0 +2398,1 @@\n+         * @param name the unqualified name of the field\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3495,1 +3495,1 @@\n-     * @param <U> the class of the objects in the original array\n+     * @param <U> the class of the objects in the original array\n@@ -3789,1 +3789,1 @@\n-     * @param <U> the class of the objects in the original array\n+     * @param <U> the class of the objects in the original array\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,9 +30,1 @@\n-import java.lang.classfile.constantpool.ClassEntry;\n-import java.lang.classfile.constantpool.ConstantPool;\n-import java.lang.classfile.constantpool.ConstantValueEntry;\n-import java.lang.classfile.constantpool.LoadableConstantEntry;\n-import java.lang.classfile.constantpool.ModuleEntry;\n-import java.lang.classfile.constantpool.NameAndTypeEntry;\n-import java.lang.classfile.constantpool.PackageEntry;\n-import java.lang.classfile.constantpool.PoolEntry;\n-import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,14 @@\n+import java.lang.classfile.*;\n+import java.lang.classfile.AnnotationValue.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.attribute.StackMapFrameInfo.ObjectVerificationTypeInfo;\n+import java.lang.classfile.attribute.StackMapFrameInfo.SimpleVerificationTypeInfo;\n+import java.lang.classfile.attribute.StackMapFrameInfo.UninitializedVerificationTypeInfo;\n+import java.lang.classfile.attribute.StackMapFrameInfo.VerificationTypeInfo;\n+import java.lang.classfile.components.ClassPrinter.LeafNode;\n+import java.lang.classfile.components.ClassPrinter.ListNode;\n+import java.lang.classfile.components.ClassPrinter.MapNode;\n+import java.lang.classfile.components.ClassPrinter.Node;\n+import java.lang.classfile.components.ClassPrinter.Verbosity;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.*;\n@@ -30,9 +44,1 @@\n-import java.util.AbstractList;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n@@ -40,1 +46,0 @@\n-import java.util.Set;\n@@ -44,18 +49,5 @@\n-import java.lang.classfile.Annotation;\n-\n-import java.lang.classfile.AnnotationElement;\n-import java.lang.classfile.AnnotationValue;\n-import java.lang.classfile.AnnotationValue.*;\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassModel;\n-import java.lang.classfile.components.ClassPrinter.*;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.MethodModel;\n-import java.lang.classfile.TypeAnnotation;\n-import java.lang.classfile.attribute.*;\n-import java.lang.classfile.attribute.StackMapFrameInfo.*;\n-import java.lang.classfile.constantpool.*;\n-import java.lang.classfile.instruction.*;\n-import java.lang.classfile.CompoundElement;\n-import java.lang.classfile.FieldModel;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_CLASS;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_DOUBLE;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_FLOAT;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_LONG;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_STRING;\n@@ -65,1 +57,2 @@\n-import static jdk.internal.classfile.impl.ClassPrinterImpl.Style.*;\n+import static jdk.internal.classfile.impl.ClassPrinterImpl.Style.BLOCK;\n+import static jdk.internal.classfile.impl.ClassPrinterImpl.Style.FLOW;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":22,"deletions":29,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -27,43 +27,2 @@\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.AnnotationElement;\n-import java.lang.classfile.AnnotationValue;\n-import java.lang.classfile.ClassBuilder;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.ClassSignature;\n-import java.lang.classfile.CodeBuilder;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.CodeTransform;\n-import java.lang.classfile.FieldBuilder;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.FieldModel;\n-import java.lang.classfile.FieldTransform;\n-import java.lang.classfile.Interfaces;\n-import java.lang.classfile.MethodBuilder;\n-import java.lang.classfile.MethodElement;\n-import java.lang.classfile.MethodModel;\n-import java.lang.classfile.MethodSignature;\n-import java.lang.classfile.MethodTransform;\n-import java.lang.classfile.Signature;\n-import java.lang.classfile.Superclass;\n-import java.lang.classfile.TypeAnnotation;\n-import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n-import java.lang.classfile.attribute.EnclosingMethodAttribute;\n-import java.lang.classfile.attribute.ExceptionsAttribute;\n-import java.lang.classfile.attribute.InnerClassInfo;\n-import java.lang.classfile.attribute.InnerClassesAttribute;\n-import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n-import java.lang.classfile.attribute.ModuleAttribute;\n-import java.lang.classfile.attribute.ModuleProvideInfo;\n-import java.lang.classfile.attribute.NestHostAttribute;\n-import java.lang.classfile.attribute.NestMembersAttribute;\n-import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n-import java.lang.classfile.attribute.RecordAttribute;\n-import java.lang.classfile.attribute.RecordComponentInfo;\n-import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -73,18 +32,2 @@\n-import java.lang.classfile.instruction.ExceptionCatch;\n-import java.lang.classfile.instruction.FieldInstruction;\n-import java.lang.classfile.instruction.InvokeDynamicInstruction;\n-import java.lang.classfile.instruction.InvokeInstruction;\n-import java.lang.classfile.instruction.LocalVariable;\n-import java.lang.classfile.instruction.LocalVariableType;\n-import java.lang.classfile.instruction.NewMultiArrayInstruction;\n-import java.lang.classfile.instruction.NewObjectInstruction;\n-import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n-import java.lang.classfile.instruction.TypeCheckInstruction;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.DynamicCallSiteDesc;\n-import java.lang.constant.DynamicConstantDesc;\n-import java.lang.constant.MethodHandleDesc;\n-import java.lang.constant.MethodTypeDesc;\n+import java.lang.classfile.instruction.*;\n+import java.lang.constant.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":4,"deletions":61,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -27,10 +27,2 @@\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.AnnotationValue;\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.AttributeMapper;\n-import java.lang.classfile.Attributes;\n-import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -38,50 +30,0 @@\n-import java.lang.classfile.TypeAnnotation;\n-import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n-import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n-import java.lang.classfile.attribute.CharacterRangeInfo;\n-import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n-import java.lang.classfile.attribute.CompilationIDAttribute;\n-import java.lang.classfile.attribute.ConstantValueAttribute;\n-import java.lang.classfile.attribute.DeprecatedAttribute;\n-import java.lang.classfile.attribute.EnclosingMethodAttribute;\n-import java.lang.classfile.attribute.ExceptionsAttribute;\n-import java.lang.classfile.attribute.InnerClassInfo;\n-import java.lang.classfile.attribute.InnerClassesAttribute;\n-import java.lang.classfile.attribute.LineNumberInfo;\n-import java.lang.classfile.attribute.LineNumberTableAttribute;\n-import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n-import java.lang.classfile.attribute.LocalVariableInfo;\n-import java.lang.classfile.attribute.LocalVariableTableAttribute;\n-import java.lang.classfile.attribute.LocalVariableTypeInfo;\n-import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n-import java.lang.classfile.attribute.MethodParameterInfo;\n-import java.lang.classfile.attribute.MethodParametersAttribute;\n-import java.lang.classfile.attribute.ModuleAttribute;\n-import java.lang.classfile.attribute.ModuleExportInfo;\n-import java.lang.classfile.attribute.ModuleHashInfo;\n-import java.lang.classfile.attribute.ModuleHashesAttribute;\n-import java.lang.classfile.attribute.ModuleMainClassAttribute;\n-import java.lang.classfile.attribute.ModuleOpenInfo;\n-import java.lang.classfile.attribute.ModulePackagesAttribute;\n-import java.lang.classfile.attribute.ModuleProvideInfo;\n-import java.lang.classfile.attribute.ModuleRequireInfo;\n-import java.lang.classfile.attribute.ModuleResolutionAttribute;\n-import java.lang.classfile.attribute.ModuleTargetAttribute;\n-import java.lang.classfile.attribute.NestHostAttribute;\n-import java.lang.classfile.attribute.NestMembersAttribute;\n-import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n-import java.lang.classfile.attribute.RecordAttribute;\n-import java.lang.classfile.attribute.RecordComponentInfo;\n-import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import java.lang.classfile.attribute.SignatureAttribute;\n-import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n-import java.lang.classfile.attribute.SourceFileAttribute;\n-import java.lang.classfile.attribute.SourceIDAttribute;\n-import java.lang.classfile.attribute.StackMapTableAttribute;\n-import java.lang.classfile.attribute.StackMapFrameInfo;\n-import java.lang.classfile.attribute.SyntheticAttribute;\n@@ -93,0 +35,3 @@\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":5,"deletions":60,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -27,22 +27,1 @@\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.AnnotationValue;\n-import java.lang.constant.ClassDesc;\n-import static java.lang.constant.ConstantDescs.CLASS_INIT_NAME;\n-import static java.lang.constant.ConstantDescs.INIT_NAME;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.AttributedElement;\n-import java.lang.classfile.Attributes;\n-import java.lang.classfile.ClassModel;\n-import java.lang.classfile.ClassFileElement;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.CompoundElement;\n-import java.lang.classfile.CustomAttribute;\n-import java.lang.classfile.FieldModel;\n-import java.lang.classfile.MethodModel;\n-import java.lang.classfile.TypeAnnotation;\n-import java.lang.classfile.TypeKind;\n+import java.lang.classfile.*;\n@@ -51,0 +30,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -53,0 +33,1 @@\n+import java.util.ArrayList;\n@@ -54,0 +35,3 @@\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Consumer;\n@@ -56,0 +40,2 @@\n+import java.util.stream.Collectors;\n+\n@@ -59,0 +45,3 @@\n+import static java.lang.constant.ConstantDescs.CLASS_INIT_NAME;\n+import static java.lang.constant.ConstantDescs.INIT_NAME;\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2219,1 +2219,1 @@\n-                Assert.check(requestingOwner.owner.kind == MDL);\n+                Assert.check(requestingOwner.owner instanceof ModuleSymbol);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}