{"files":[{"patch":"@@ -1115,39 +1115,14 @@\n-        \/\/ multi dimensional array\n-        Klass* k = resolve_klass(field_signature, CHECK_(true));\n-        ArrayKlass* kelem = (ArrayKlass *)k;\n-        int rank = 0;\n-        while (field_signature[rank] == JVM_SIGNATURE_ARRAY) {\n-          rank++;\n-        }\n-        jint* dims = NEW_RESOURCE_ARRAY(jint, rank);\n-        dims[0] = length;\n-        for (int i = 1; i < rank; i++) {\n-          dims[i] = 1; \/\/ These aren't relevant to the compiler\n-        }\n-        value = kelem->multi_allocate(rank, dims, CHECK_(true));\n-      } else {\n-        if (strcmp(field_signature, \"[B\") == 0) {\n-          value = oopFactory::new_byteArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[Z\") == 0) {\n-          value = oopFactory::new_boolArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[C\") == 0) {\n-          value = oopFactory::new_charArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[S\") == 0) {\n-          value = oopFactory::new_shortArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[F\") == 0) {\n-          value = oopFactory::new_floatArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[D\") == 0) {\n-          value = oopFactory::new_doubleArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[I\") == 0) {\n-          value = oopFactory::new_intArray(length, CHECK_(true));\n-        } else if (strcmp(field_signature, \"[J\") == 0) {\n-          value = oopFactory::new_longArray(length, CHECK_(true));\n-        } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&\n-                   field_signature[1] == JVM_SIGNATURE_CLASS) {\n-          Klass* actual_array_klass = parse_klass(CHECK_(true));\n-          Klass* kelem = ObjArrayKlass::cast(actual_array_klass)->element_klass();\n-          value = oopFactory::new_objArray(kelem, length, CHECK_(true));\n-        } else if (field_signature[0] == JVM_SIGNATURE_ARRAY) {\n-          Klass* kelem = resolve_klass(field_signature + 1, CHECK_(true));\n-          parse_klass(CHECK_(true)); \/\/ eat up the array class name\n-          value = oopFactory::new_valueArray(kelem, length, CHECK_(true));\n+        if (field_signature[1] == JVM_SIGNATURE_ARRAY) {\n+          \/\/ multi dimensional array\n+          Klass* k = resolve_klass(field_signature, CHECK_(true));\n+          ArrayKlass* kelem = (ArrayKlass *)k;\n+          int rank = 0;\n+          while (field_signature[rank] == JVM_SIGNATURE_ARRAY) {\n+            rank++;\n+          }\n+          jint* dims = NEW_RESOURCE_ARRAY(jint, rank);\n+          dims[0] = length;\n+          for (int i = 1; i < rank; i++) {\n+            dims[i] = 1; \/\/ These aren't relevant to the compiler\n+          }\n+          value = kelem->multi_allocate(rank, dims, CHECK_(true));\n@@ -1155,1 +1130,28 @@\n-          report_error(\"unhandled array staticfield\");\n+          if (strcmp(field_signature, \"[B\") == 0) {\n+            value = oopFactory::new_byteArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[Z\") == 0) {\n+            value = oopFactory::new_boolArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[C\") == 0) {\n+            value = oopFactory::new_charArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[S\") == 0) {\n+            value = oopFactory::new_shortArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[F\") == 0) {\n+            value = oopFactory::new_floatArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[D\") == 0) {\n+            value = oopFactory::new_doubleArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[I\") == 0) {\n+            value = oopFactory::new_intArray(length, CHECK_(true));\n+          } else if (strcmp(field_signature, \"[J\") == 0) {\n+            value = oopFactory::new_longArray(length, CHECK_(true));\n+          } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&\n+                     field_signature[1] == JVM_SIGNATURE_CLASS) {\n+            Klass* actual_array_klass = parse_klass(CHECK_(true));\n+            Klass* kelem = ObjArrayKlass::cast(actual_array_klass)->element_klass();\n+            value = oopFactory::new_objArray(kelem, length, CHECK_(true));\n+          } else if (field_signature[0] == JVM_SIGNATURE_ARRAY) {\n+            Klass* kelem = resolve_klass(field_signature + 1, CHECK_(true));\n+            parse_klass(CHECK_(true)); \/\/ eat up the array class name\n+            value = oopFactory::new_valueArray(kelem, length, CHECK_(true));\n+          } else {\n+            report_error(\"unhandled array staticfield\");\n+          }\n@@ -1157,0 +1159,2 @@\n+        java_mirror->obj_field_put(fd->offset(), value);\n+        return true;\n@@ -1158,2 +1162,0 @@\n-      java_mirror->obj_field_put(fd->offset(), value);\n-      return true;\n@@ -1165,1 +1167,1 @@\n-    } else if (field_signature[0] == 'L') {\n+    } else if (field_signature[0] == JVM_SIGNATURE_CLASS) {\n@@ -1167,2 +1169,5 @@\n-      Klass* k = resolve_klass(instance, CHECK_(true));\n-      oop value = InstanceKlass::cast(k)->allocate_instance(CHECK_(true));\n+      oop value = nullptr;\n+      if (instance != nullptr) {\n+        Klass* k = resolve_klass(instance, CHECK_(true));\n+        value = InstanceKlass::cast(k)->allocate_instance(CHECK_(true));\n+      }\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":50,"deletions":45,"binary":false,"changes":95,"status":"modified"}]}