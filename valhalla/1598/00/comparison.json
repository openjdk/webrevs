{"files":[{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ This file contains a class file with an invalid entry in its\n+\/\/ LoadableDescriptors attribute. The class file has been generated\n+\/\/ from the source below with editing to the constant pool and\n+\/\/ the LoadableDescriptors attribute.\n+\/\/\n+\/\/\n+\/\/ import jdk.internal.vm.annotation.NullRestricted;\n+\/\/ import jdk.internal.vm.annotation.Strict;\n+\/\/\n+\/\/\n+\/\/ public class LDTest {\n+\/\/     static value class Point {\n+\/\/         short s0, s1;\n+\/\/ \t       Point(short sa, short sb) {\n+\/\/ \t           s0 = sa;\n+\/\/ \t           s1 = sb;\n+\/\/ \t       }\n+\/\/    }\n+\/\/\n+\/\/     @Strict\n+\/\/     @NullRestricted\n+\/\/     Point p = new Point((short)0, (short)0);\n+\/\/\n+\/\/      public static void main(String[] args) {\n+\/\/ \t        LDTest test = new LDTest();\n+\/\/      }\n+\/\/ }\n+\n+\n+class LDTest {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  70; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"LDTest$Point\"; \/\/ #2\n+    Method #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(SS)V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"LDTest\"; \/\/ #10\n+    Utf8 \"p\"; \/\/ #11\n+    Utf8 \"LLDTest$Point;\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #5 #17; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"()V\"; \/\/ #17\n+    Method #8 #15; \/\/ #18\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #19\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #20\n+    Utf8 \"RuntimeInvisibleAnnotations\"; \/\/ #21\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/Strict;\"; \/\/ #22\n+    Utf8 \"Code\"; \/\/ #23\n+    Utf8 \"LineNumberTable\"; \/\/ #24\n+    Utf8 \"main\"; \/\/ #25\n+    Utf8 \"([Ljava\/lang\/String;)V\"; \/\/ #26\n+    Utf8 \"SourceFile\"; \/\/ #27\n+    Utf8 \"LDTest.java\"; \/\/ #28\n+    Utf8 \"NestMembers\"; \/\/ #29\n+    Utf8 \"InnerClasses\"; \/\/ #30\n+    Utf8 \"Point\"; \/\/ #31\n+    Utf8 \"LoadableDescriptors\"; \/\/ #32\n+    Utf8 \"[V\"; \/\/ #33                        \/\/ <== new invalid descriptor\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #8;\/\/ this_cpx\n+  #14;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0800; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ RuntimeVisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #20;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeVisibleAnnotations\n+        ;\n+        Attr(#21) { \/\/ RuntimeInvisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #22;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeInvisibleAnnotations\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          5; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB0001590303B7;\n+            0x0003B500072AB700;\n+            0x0DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  14;\n+                13  5;\n+                17  14;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #25; \/\/ name_index\n+      #26; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xBB000859B700124C;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  19;\n+                8  20;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#27) { \/\/ SourceFile\n+      #28;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#29) { \/\/ NestMembers\n+      [] { \/\/ classes\n+        #1;\n+      }\n+    } \/\/ end NestMembers\n+    ;\n+    Attr(#30) { \/\/ InnerClasses\n+      [] { \/\/ classes\n+        #1 #8 #31 24;\n+      }\n+    } \/\/ end InnerClasses\n+    ;\n+    Attr(#32) { \/\/ LoadableDescriptors\n+      0x00010021;                        \/\/ <== modified index to contant pool\n+    } \/\/ end LoadableDescriptors\n+  } \/\/ Attributes\n+} \/\/ end class LDTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/LDTest.jcod","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary test a LoadableDescriptors attribute with an invalid entry\n+ * @enablePreview\n+ * @compile LDTest.jcod TestIllegalLoadableDescriptors.java\n+ * @run main\/othervm TestIllegalLoadableDescriptors\n+ *\/\n+\n+\n+public class TestIllegalLoadableDescriptors {\n+\n+  public static void main(String[] args)  throws ClassNotFoundException {\n+    boolean gotException = false;\n+      try {\n+          Class newClass = Class.forName(\"LDTest\");\n+      } catch (java.lang.ClassFormatError e) {\n+          gotException = true;\n+          if (!e.getMessage().contains(\"Descriptor from LoadableDescriptors attribute at index \\\"33\\\" in class LDTest has illegal signature \\\"[V\")) {\n+              throw new RuntimeException( \"Wrong ClassFormatError: \" + e.getMessage());\n+          }\n+      }\n+      if (!gotException) {\n+        throw new RuntimeException(\"Missing ClassFormatError\");\n+      }\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/TestIllegalLoadableDescriptors.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}