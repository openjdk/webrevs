{"files":[{"patch":"@@ -37,9 +37,9 @@\n-    public static void main(String[] args) {\n-        TestFramework.runWithFlags(\"--enable-preview\");\n-    }\n-\n-    @Run(test = {\"test1\"})\n-    public void runMethod() {\n-        float f = RunInfo.getRandom().nextFloat();\n-        Float16 f16 = Float16.valueOf(f);\n-        assertResult(f16);\n+    private short[] sin;\n+    private short[] sout;\n+    private static final int SIZE = 65504;\n+    public ConvF2HFIdealizationTests() {\n+        sin  = new short[SIZE];\n+        sout = new short[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            sin[i] = Float.floatToFloat16((float)i);\n+        }\n@@ -47,4 +47,2 @@\n-\n-    @DontCompile\n-    public void assertResult(Float16 fp16) {\n-        Asserts.assertEQ(Float.floatToFloat16((float)Math.sqrt((double)fp16.floatValue())), test1(fp16));\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--enable-preview\", \"-XX:-UseSuperWord\");\n@@ -54,1 +52,1 @@\n-    @IR(counts = {IRNode.SQRT_HF, \"1\", IRNode.REINTERPRET_S2HF, \"1\", IRNode.REINTERPRET_HF2S, \"1\"},\n+    @IR(counts = {IRNode.SQRT_HF, \">=1\", IRNode.REINTERPRET_S2HF, \">=1\", IRNode.REINTERPRET_HF2S, \">=1\"},\n@@ -58,2 +56,4 @@\n-    public short test1(Float16 x) {\n-        return Float.floatToFloat16((float)Math.sqrt((double)x.floatValue()));\n+    public void test1() {\n+        for (int i = 0; i < SIZE; i++) {\n+            sout[i] = Float.floatToFloat16((float)Math.sqrt(Float16.shortBitsToFloat16(sin[i]).floatValue()));\n+        }\n@@ -62,0 +62,9 @@\n+    @Check(test=\"test1\")\n+    public void checkResult() {\n+        for (int i = 0; i < SIZE; i++) {\n+            short expected = Float16.float16ToRawShortBits(Float16.sqrt(Float16.shortBitsToFloat16(sin[i])));\n+            if (expected != sout[i]) {\n+                throw new RuntimeException(\"Invalid result: sout[\" + i + \"] = \" + sout[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConvF2HFIdealizationTests.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-#include \"testlib_threads.h\"\n+#include \"testlib_threads.hpp\"\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/libLinkerInvokerUnnamed.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}