{"files":[{"patch":"@@ -300,1 +300,1 @@\n-        return descriptorString().startsWith(\"L\") || descriptorString().startsWith(\"Q\");\n+        return descriptorString().startsWith(\"L\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-    private final boolean isValue;\n@@ -57,1 +56,0 @@\n-        this.isValue = ConstantUtils.basicType(descriptor, 0, descriptor.length(), false) == 'Q';\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDescImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,3 +551,3 @@\n-        final Class<?> fieldType;\n-        final Object staticBase;\n-        final long staticOffset;\n+        private final Class<?> fieldType;\n+        private final Object   staticBase;\n+        private final long     staticOffset;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-     * was a constructor, else it is a simple method name or field name.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleInfo.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-            sb.append(getCharErasedType(pt));\n+            sb.append(getCharType(pt));\n@@ -607,1 +607,1 @@\n-        sb.append('_').append(getCharErasedType(guardType.returnType()));\n+        sb.append('_').append(getCharType(guardType.returnType()));\n@@ -610,1 +610,1 @@\n-    static char getCharErasedType(Class<?> pt) {\n+    static char getCharType(Class<?> pt) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3800,1 +3800,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1077,1 +1077,0 @@\n-    int ACC_VALUE    = 0x0040;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1857,2 +1857,0 @@\n-                case Opcodes.DEFAULT:\n-                case Opcodes.WITHFIELD:\n@@ -2471,1 +2469,0 @@\n-                case Opcodes.WITHFIELD:\n@@ -2478,1 +2475,3 @@\n-                        if (opcode >= Opcodes.INVOKEVIRTUAL && opcode <= Opcodes.INVOKEINTERFACE) {\n+                        if (opcode < Opcodes.INVOKEVIRTUAL) {\n+                            methodVisitor.visitFieldInsn(opcode, owner, name, descriptor);\n+                        } else {\n@@ -2482,2 +2481,0 @@\n-                        } else {\n-                            methodVisitor.visitFieldInsn(opcode, owner, name, descriptor);\n@@ -2518,1 +2515,0 @@\n-                case Opcodes.DEFAULT:\n@@ -3270,2 +3266,1 @@\n-                    char descType = methodDescriptor.charAt(currentMethodDescritorOffset);\n-                    if (descType == 'L' || descType == 'Q') {\n+                    if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -188,2 +188,4 @@\n-    \/\/ Offset to next available opcode after WITHFIELD from IFEQ\n-    static final int ASM_OPCODE_DELTA = (Opcodes.WITHFIELD + 1) - Opcodes.IFEQ;\n+    static final int ASM_OPCODE_DELTA = 49;\n+\n+    \/\/ The delta between the ASM_IFNULL and ASM_IFNONNULL opcodes and IFNULL and IFNONNULL.\n+    static final int ASM_IFNULL_OPCODE_DELTA = 20;\n@@ -209,5 +211,0 @@\n-\n-    \/\/ The delta between the ASM_IFNULL and ASM_IFNONNULL opcodes and IFNULL and IFNONNULL.\n-    \/\/ Offset to next available opcode after ASM_JSR from IFNULL.\n-    static final int ASM_IFNULL_OPCODE_DELTA = (ASM_JSR + 1) - Opcodes.IFNULL;\n-\n@@ -216,1 +213,1 @@\n-    static final int ASM_GOTO_W = GOTO_W + ASM_IFNULL_OPCODE_DELTA;\n+    static final int ASM_GOTO_W = 220;\n@@ -257,1 +254,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Constants.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -364,1 +364,0 @@\n-            case 'Q':\n@@ -399,1 +398,0 @@\n-                    case 'Q':\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Frame.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,4 +315,1 @@\n-        NA, \/\/ jsr_w = 201 (0xc9)\n-        NA, \/\/ breakpoint = 202 (0xca)\n-        NA, \/\/ default = 203 (0xcb)\n-        NA, \/\/ withfield = 204 (0xcc)\n+        NA \/\/ jsr_w = 201 (0xc9)\n@@ -1014,1 +1011,1 @@\n-            } else if (opcode == Opcodes.NEW || opcode == Opcodes.DEFAULT) {\n+            } else if (opcode == Opcodes.NEW) {\n@@ -1040,3 +1037,0 @@\n-                    case Opcodes.WITHFIELD:\n-                        size = relativeStackSize + (firstDescChar == 'D' || firstDescChar == 'J' ? -2 : -1);\n-                        break;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodWriter.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -341,1 +341,0 @@\n-    int ACC_VALUE = 0x0040; \/\/ class\n@@ -347,1 +346,0 @@\n-    int ACC_INLINE = 0x0100; \/\/ inline class\n@@ -350,1 +348,0 @@\n-    int ACC_PRIMITIVE = 0x0800; \/\/ class\n@@ -593,2 +590,0 @@\n-    int DEFAULT = 203; \/\/ visitTypeInsn\n-    int WITHFIELD = 204; \/\/ visitFieldInsn\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -65,1 +64,0 @@\n-import java.lang.reflect.Modifier;\n@@ -340,2 +338,1 @@\n-            char c = methodDescriptor.charAt(currentOffset++);\n-            if (c == 'L' || c == 'Q') {\n+            if (methodDescriptor.charAt(currentOffset++) == 'L') {\n@@ -360,2 +357,1 @@\n-            char c = methodDescriptor.charAt(currentOffset++);\n-            if (c == 'L' || c == 'Q') {\n+            if (methodDescriptor.charAt(currentOffset++) == 'L') {\n@@ -432,2 +428,1 @@\n-            char c = methodDescriptor.charAt(currentOffset++);\n-            if (c == 'L' || c == 'Q') {\n+            if (methodDescriptor.charAt(currentOffset++) == 'L') {\n@@ -476,1 +471,0 @@\n-            case 'Q':\n@@ -682,1 +676,1 @@\n-            stringBuilder.append(isPrimitiveClass(currentClass) ? 'Q' : 'L').append(getInternalName(currentClass)).append(';');\n+            stringBuilder.append('L').append(getInternalName(currentClass)).append(';');\n@@ -686,4 +680,0 @@\n-    static boolean isPrimitiveClass(Class<?> clazz) {\n-        return (clazz.getModifiers() & Opcodes.ACC_PRIMITIVE) != 0;\n-    }\n-\n@@ -783,2 +773,1 @@\n-                char c = methodDescriptor.charAt(currentOffset++);\n-                if (c == 'L' || c == 'Q') {\n+                if (methodDescriptor.charAt(currentOffset++) == 'L') {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -536,1 +536,0 @@\n-            case 'Q':\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnalyzerAdapter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -226,1 +226,0 @@\n-            \/\/ FIXME: support Q-type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Method.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-            \/\/ FIXME: support Q-type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Remapper.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-                if (currentChar == 'L' || currentChar == 'Q' || currentChar == '[' || currentChar == 'T') {\n+                if (currentChar == 'L' || currentChar == '[' || currentChar == 'T') {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -642,1 +642,1 @@\n-        while (getChar(signature, pos) == 'L' || getChar(signature, pos) == 'Q') {\n+        while (getChar(signature, pos) == 'L') {\n@@ -670,1 +670,1 @@\n-        while (\"ZCBSIFJDLQ[T\".indexOf(getChar(signature, pos)) != -1) {\n+        while (\"ZCBSIFJDL[T\".indexOf(getChar(signature, pos)) != -1) {\n@@ -681,1 +681,1 @@\n-            if (getChar(signature, pos) == 'L' || getChar(signature, pos) == 'Q') {\n+            if (getChar(signature, pos) == 'L') {\n@@ -797,6 +797,1 @@\n-        if (getChar(signature, pos) == 'L' || getChar(signature, pos) == 'Q') {\n-            pos = pos + 1;\n-        } else {\n-            throw new IllegalArgumentException(signature + \": 'L' or 'Q' expected at index \" + pos);\n-        }\n-\n+        pos = checkChar('L', signature, pos);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckClassAdapter.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1421,1 +1421,0 @@\n-            case 'Q':\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckMethodAdapter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-                return c.descriptorString();\n+                return internalize(\"L\" + c.getName() + \";\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/AccessorGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-                asm.emitConstantPoolUTF8(getClassName(c, true));\n+                asm.emitConstantPoolUTF8(getClassName(c, false));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/SerializationConstructorAccessorGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-    jdk\/modules \\\n","filename":"test\/jdk\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-            System.out.println(\"Should contain exactly Cloneable and Serializable in that order.\");\n+            System.out.println(\"Should contain exactly Cloneable, Serializable in that order.\");\n","filename":"test\/jdk\/java\/lang\/Class\/ArrayMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericStringTest\n+ * @run main\/othervm -XX:+EnableValhalla GenericStringTest\n@@ -76,2 +76,1 @@\n-                                     AValueClass.class,\n-                                     APrimitiveClass.class)) {\n+                                     AValueClass.class)) {\n@@ -120,4 +119,1 @@\n-value class AValueClass<E> {}\n-\n-@ExpectedGenericString(\"final primitive class APrimitiveClass<E>\")\n-primitive class APrimitiveClass<E> {}\n+value class AValueClass<E> {}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-# disabled till JDK-8219408 is fixed\n-allowSmartActionArgs=false\n-\n-# Reflection methods for primitive classes are in PrimitiveClass instead of java.lang.class\n-modules = java.base\/jdk.internal.value\n","filename":"test\/jdk\/java\/lang\/invoke\/TEST.properties","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -53,1 +53,1 @@\n-            if ((cf.flags().flagsMask() & (Classfile.ACC_SYNTHETIC | Classfile.ACC_VALUE | Classfile.ACC_ABSTRACT)) == Classfile.ACC_SYNTHETIC) {\n+            if ((cf.flags().flagsMask() & (Classfile.ACC_SYNTHETIC | Classfile.ACC_ABSTRACT)) == Classfile.ACC_SYNTHETIC) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}