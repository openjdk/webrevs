{"files":[{"patch":"@@ -1964,1 +1964,1 @@\n-  int remove_scalarized_frames(StackChunkFrameStream<ChunkFrames::CompiledOnly>& scfs, stackChunkOop chunk, int frames_size, int &argsize);\n+  int remove_scalarized_frames(StackChunkFrameStream<ChunkFrames::CompiledOnly>& scfs, stackChunkOop chunk, int &argsize);\n@@ -2075,1 +2075,1 @@\n-int ThawBase::remove_scalarized_frames(StackChunkFrameStream<ChunkFrames::CompiledOnly>& f, stackChunkOop chunk, int frames_size, int &argsize) {\n+int ThawBase::remove_scalarized_frames(StackChunkFrameStream<ChunkFrames::CompiledOnly>& f, stackChunkOop chunk, int &argsize) {\n@@ -2087,27 +2087,1 @@\n-  frames_size += bottom - top;\n-\n-  f.next(SmallRegisterMap::instance(), true \/* stop *\/);\n-  bool empty = f.is_done();\n-  assert(!empty || argsize == chunk->argsize(), \"\");\n-\n-  if (empty) {\n-    clear_chunk(chunk);\n-  } else {\n-    chunk->set_sp(chunk->sp() + frames_size);\n-    chunk->set_max_thawing_size(chunk->max_thawing_size() - frames_size);\n-    \/\/ We set chunk->pc to the return pc into the next frame\n-    chunk->set_pc(f.pc());\n-#ifdef ASSERT\n-    {\n-      intptr_t* retaddr_slot = (chunk_sp\n-                                + frames_size\n-                                - frame::sender_sp_ret_address_offset());\n-      assert(f.pc() == ContinuationHelper::return_address_at(retaddr_slot),\n-             \"unexpected pc\");\n-    }\n-#endif\n-  }\n-  assert(empty == chunk->is_empty(), \"\");\n-  \/\/ returns the size required to store the frame on stack, and because it is a\n-  \/\/ compiled frame, it must include a copy of the arguments passed by the caller\n-  return frames_size + argsize + frame::metadata_words_at_top;\n+  return bottom - top;\n@@ -2145,1 +2119,1 @@\n-      return remove_scalarized_frames(f, chunk, frame_size, argsize);\n+      frame_size += remove_scalarized_frames(f, chunk, argsize);\n@@ -2151,1 +2125,1 @@\n-    return remove_scalarized_frames(f, chunk, 0, argsize);\n+    frame_size = remove_scalarized_frames(f, chunk, argsize);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"}]}