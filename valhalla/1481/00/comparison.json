{"files":[{"patch":"@@ -4112,2 +4112,3 @@\n-    if (klass->as_array_klass()->is_elem_null_free()) {\n-      etype = etype->join_speculative(TypePtr::NOTNULL)->is_oopptr();\n+    const bool is_null_free = klass->as_array_klass()->is_elem_null_free();\n+    if (is_null_free) {\n+      etype = etype->join_speculative(NOTNULL)->is_oopptr();\n@@ -4116,1 +4117,2 @@\n-    const TypeAryPtr* arr = TypeAryPtr::make(TypePtr::BotPTR, arr0, klass, true, Offset(0));\n+    const bool exact = is_null_free; \/\/ Only exact if null-free because \"null-free [LMyValue <: null-able [LMyValue\".\n+    const TypeAryPtr* arr = TypeAryPtr::make(TypePtr::BotPTR, arr0, klass, exact, Offset(0));\n@@ -5645,0 +5647,1 @@\n+  const bool same_nullness = this_ary->is_null_free() == other_ary->is_null_free();\n@@ -5707,1 +5710,3 @@\n-      if (this_ptr == Constant) {\n+      if (this_ptr == Constant && same_nullness) {\n+        \/\/ Only exact if same nullness since:\n+        \/\/     null-free [LMyValue <: nullable [LMyValue.\n@@ -5735,2 +5740,0 @@\n-        \/\/ TODO 8350865 If both types are exact and have the same null-free property, the result should be exact, right? Same above for the Constant case.\n-        \/\/ && elem->make_ptr() != nullptr && elem->make_ptr()->is_inlinetypeptr() && (this_ary->is_null_free() != other_ary->is_null_free()\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353180\n+ * @summary Test that meeting TypeAry*Ptr works with new layouts and does not trigger \"not monotonic\" assert.\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=*TestMeetingAryPtr*::test* -XX:+UnlockDiagnosticVMOptions -XX:+StressCCP\n+ *                   -XX:RepeatCompilation=100 compiler.valhalla.inlinetypes.TestMeetingAryPtr\n+ * @run main         compiler.valhalla.inlinetypes.TestMeetingAryPtr\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.internal.value.ValueClass;\n+\n+public class TestMeetingAryPtr {\n+    static V vFld = new V(34);\n+\n+    static V[] vArrFlat = new V[100];\n+    static final V[] vArrFinalNullable = (V[]) ValueClass.newNullableAtomicArray(V.class, 100);\n+    static final V[] vArrFinalNullFree = (V[]) ValueClass.newNullRestrictedNonAtomicArray(V.class, 100, new V(0));\n+    static final V[] vArrFinalNullFree2 = (V[]) ValueClass.newNullRestrictedNonAtomicArray(V.class, 100, new V(0));\n+\n+    static boolean flag;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            testNonConstant();\n+            testConstantDifferentNullNess();\n+            testConstantSameNullNess();\n+            flag = !flag;\n+        }\n+    }\n+\n+    static void testNonConstant() {\n+        for (int i = 0; i < 100; ++i) {\n+            vFld = vArrFlat[i];\n+        }\n+    }\n+\n+    static void testConstantDifferentNullNess() {\n+        \/\/ Meeting:      ConP(flat+nullable)   ConP(flat+null-free)\n+        V[] arr = flag ? vArrFinalNullable   : vArrFinalNullFree;\n+        \/\/ Phi for arr after meet: flat+maybe-null-free+exact\n+        \/\/ -> Wrongly set to exact even though it's maybe null free only.\n+        \/\/    This causes an assertion failure during CCP.\n+        vFld = arr[2];\n+    }\n+\n+    static void testConstantSameNullNess() {\n+        V[] arr = flag ? vArrFinalNullable : vArrFinalNullFree2;\n+        vFld = arr[2];\n+    }\n+}\n+\n+value class V  {\n+    int x;\n+\n+    V(int x) {\n+        this.x = x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMeetingAryPtr.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -48,2 +48,0 @@\n-\/\/ TODO: 8353180: Remove requires != Xcomp\n-\n@@ -52,1 +50,0 @@\n- * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/jdk\/valhalla\/valuetypes\/FlatVarHandleTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n-\/\/ TODO: 8353180: Remove requires != Xcomp\n-\n@@ -29,1 +27,0 @@\n- * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}