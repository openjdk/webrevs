{"files":[{"patch":"@@ -546,7 +546,1 @@\n-        if (isNullable()) {\n-            sb.append(\"?\");\n-        } else if (isNonNullable()) {\n-            sb.append(\"!\");\n-        } else if (isParametric()) {\n-            sb.append(\"*\");\n-        }\n+        sb.append(getNullMarker().typeSuffix());\n@@ -767,16 +761,0 @@\n-    public boolean isNullable() {\n-        return getNullMarker() == NullMarker.NULLABLE;\n-    }\n-\n-    public boolean isNonNullable() {\n-        return getNullMarker() == NullMarker.NOT_NULL;\n-    }\n-\n-    public boolean isParametric() {\n-        return getNullMarker() == NullMarker.PARAMETRIC;\n-    }\n-\n-    public boolean isNullUnspecified() {\n-        return getNullMarker() == NullMarker.UNSPECIFIED;\n-    }\n-\n@@ -1152,7 +1130,1 @@\n-            if (isNullable()) {\n-                buf.append(\"?\");\n-            } else if (isNonNullable()) {\n-                buf.append(\"!\");\n-            } else if (isParametric()) {\n-                buf.append(\"*\");\n-            }\n+            buf.append(getNullMarker().typeSuffix());\n@@ -1475,7 +1447,1 @@\n-                if (t.isNullable()) {\n-                    sb.append(\"?\");\n-                } else if (t.isNonNullable()) {\n-                    sb.append(\"!\");\n-                } else if (t.isParametric()) {\n-                    sb.append(\"*\");\n-                }\n+                sb.append(t.getNullMarker().typeSuffix());\n@@ -2239,1 +2205,3 @@\n-                bound2 = bound2.asNullMarked(bound.getNullMarker());\n+                if (types.isParametric(qtype)) {\n+                    bound2 = bound2.asNullMarked(bound.getNullMarker());\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":6,"deletions":38,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.function.BiFunction;\n@@ -105,0 +104,1 @@\n+    private boolean tvarUnspecifiedNullity;\n@@ -134,0 +134,2 @@\n+        Options options = Options.instance(context);\n+        tvarUnspecifiedNullity = options.isSet(\"tvarUnspecifiedNullity\");\n@@ -1146,1 +1148,1 @@\n-                     if (s.isNonNullable()) {\n+                     if (isNonNullable(s)) {\n@@ -1773,1 +1775,1 @@\n-                if (s.hasTag(ERROR) || s.hasTag(BOT) && (!t.hasImplicitConstructor() || !t.isNonNullable()))\n+                if (s.hasTag(ERROR) || s.hasTag(BOT) && (!t.hasImplicitConstructor() || !isNonNullable(t)))\n@@ -2378,0 +2380,4 @@\n+                            } else if (baseParams.length() != ownerParams.length()) {\n+                                \/\/ rare type, recovery\n+                                return subst(sym.type, ownerParams,\n+                                        baseParams.map(ta -> ta.asNullMarked(NullMarker.UNSPECIFIED)));\n@@ -2379,1 +2385,9 @@\n-                                return subst(sym.type, ownerParams, baseParams);\n+                                ListBuffer<Type> newBaseParams = new ListBuffer<>();\n+                                for (Type tvar : ownerParams) {\n+                                    Type baseParam = isParametric(tvar) ?\n+                                            baseParams.head :\n+                                            baseParams.head.asNullMarked(NullMarker.UNSPECIFIED);\n+                                    newBaseParams.add(baseParam);\n+                                    baseParams = baseParams.tail;\n+                                }\n+                                return subst(sym.type, ownerParams, newBaseParams.toList());\n@@ -5400,0 +5414,19 @@\n+\n+    public boolean isNullable(Type type) {\n+        return type.getNullMarker() == NullMarker.NULLABLE;\n+    }\n+\n+    public boolean isNonNullable(Type type) {\n+        return type.getNullMarker() == NullMarker.NOT_NULL;\n+    }\n+\n+    public boolean isParametric(Type type) {\n+        return type.getNullMarker() == NullMarker.PARAMETRIC ||\n+                (type.hasTag(TYPEVAR) && type.getNullMarker() == NullMarker.UNSPECIFIED && !tvarUnspecifiedNullity);\n+    }\n+\n+    public boolean isNullUnspecified(Type type) {\n+        return type.getNullMarker() == NullMarker.UNSPECIFIED &&\n+                (!type.hasTag(TYPEVAR) || tvarUnspecifiedNullity);\n+    }\n+\n@@ -5404,1 +5437,1 @@\n-        if (s == null || t == null || t.isNullUnspecified() || s.isNullUnspecified()) {\n+        if (s == null || t == null || isNullUnspecified(t) || isNullUnspecified(s)) {\n@@ -5414,1 +5447,1 @@\n-        if (s == null || t == null || t.isNullUnspecified() || s.isNullUnspecified()) {\n+        if (s == null || t == null || isNullUnspecified(t) || isNullUnspecified(s)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1376,1 +1376,1 @@\n-                        ((result.isNonNullable() || elemOrType.isNonNullable()) && (!elemOrType.isValueClass() || !elemOrType.hasImplicitConstructor()))) {\n+                        ((types.isNonNullable(result) || types.isNonNullable(elemOrType)) && (!elemOrType.isValueClass() || !elemOrType.hasImplicitConstructor()))) {\n@@ -4468,1 +4468,1 @@\n-        if (site.isNullable()) {\n+        if (types.isNullable(site)) {\n@@ -4472,1 +4472,1 @@\n-        if (site.isParametric()) {\n+        if (types.isParametric(site)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2545,1 +2545,1 @@\n-            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && symbol.type.isNonNullable();\n+            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && types.isNonNullable(symbol.type);\n@@ -4641,1 +4641,1 @@\n-                if (expected.isParametric()) {\n+                if (types.isParametric(expected)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2219,1 +2219,1 @@\n-                            (sym.type.isNonNullable() || sym.type.isParametric()));\n+                            (types.isNonNullable(sym.type) || types.isParametric(sym.type)));\n@@ -2312,1 +2312,1 @@\n-                        if (sym.type.isNonNullable()) {\n+                        if (types.isNonNullable(sym.type)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4405,1 +4405,1 @@\n-        if (!allowNullRestrictedTypes || tree.elemtype == null || !originalElemType.type.isNonNullable()) {\n+        if (!allowNullRestrictedTypes || tree.elemtype == null || !types.isNonNullable(originalElemType.type)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1343,1 +1343,1 @@\n-                    if (sym.type.isNonNullable()) {\n+                    if (types.isNonNullable(sym.type)) {\n@@ -3526,1 +3526,1 @@\n-        return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && symbol.type.isNonNullable();\n+        return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && types.isNonNullable(symbol.type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -976,1 +976,1 @@\n-        if (allowNullRestrictedTypes && sym.kind == VAR && sym.type.isNonNullable() && !sym.type.hasTag(ARRAY)) {\n+        if (allowNullRestrictedTypes && sym.kind == VAR && types.isNonNullable(sym.type) && !sym.type.hasTag(ARRAY)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -931,1 +931,1 @@\n-            if (pts.head.isNonNullable() && !l.head.type.isNonNullable()) {\n+            if (types.isNonNullable(pts.head) && !types.isNullable(l.head.type)) {\n@@ -1116,1 +1116,1 @@\n-                if (tree.type.isNonNullable() && !tree.init.type.isNonNullable()) {\n+                if (types.isNonNullable(tree.type) && !types.isNonNullable(tree.init.type)) {\n@@ -2121,1 +2121,1 @@\n-        if (tree.lhs.type.isNonNullable() && !tree.rhs.type.isNonNullable()) {\n+        if (types.isNonNullable(tree.lhs.type) && !types.isNonNullable(tree.rhs.type)) {\n@@ -2330,1 +2330,1 @@\n-        if (tree.clazz.type.isNonNullable() && !tree.expr.type.isNonNullable()) {\n+        if (types.isNonNullable(tree.clazz.type) && !types.isNonNullable(tree.expr.type)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+ * @compile\/fail\/ref=NullabilityInferenceTest_parametric.out -XDrawDiagnostics -XDtvarUnspecifiedNullity NullabilityInferenceTest.java\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityInferenceTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-NullabilityInferenceTest.java:22:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n@@ -4,2 +3,2 @@\n-NullabilityInferenceTest.java:25:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n-NullabilityInferenceTest.java:33:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:25:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:26:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n@@ -8,2 +7,2 @@\n-NullabilityInferenceTest.java:36:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n-NullabilityInferenceTest.java:44:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:36:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:37:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n@@ -11,2 +10,3 @@\n-NullabilityInferenceTest.java:46:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n-NullabilityInferenceTest.java:47:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:46:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n+NullabilityInferenceTest.java:47:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String?>>, java.lang.Integer)\n+NullabilityInferenceTest.java:48:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String!>>, java.lang.Integer)\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityInferenceTest.out","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,17 @@\n+NullabilityInferenceTest.java:23:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:24:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:25:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:26:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:34:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:35:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:36:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:37:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:45:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:46:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:47:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+NullabilityInferenceTest.java:48:39: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<Test.Box<java.lang.String>>, java.lang.Integer)\n+- compiler.note.unchecked.filename: NullabilityInferenceTest.java\n+- compiler.note.unchecked.recompile\n+- compiler.note.preview.filename: NullabilityInferenceTest.java, DEFAULT\n+- compiler.note.preview.recompile\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityInferenceTest_parametric.out","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -6,0 +6,1 @@\n+ * @compile\/fail\/ref=NullabilityWarningsTest_parametric.out -XDrawDiagnostics -Werror -Xlint:null -XDtvarUnspecifiedNullity NullabilityWarningsTest.java\n@@ -53,0 +54,18 @@\n+\n+    void testMember() {\n+        Box<String?> bs_null = null;\n+        Box<String!> bs_nonnull = null;\n+        Box<String> bs_unknown = null;\n+\n+        String s_unknown = bs_null.get();\n+        s_unknown = bs_nonnull.get();\n+        s_unknown = bs_unknown.get();\n+\n+        String? s_null = bs_null.get();\n+        s_null = bs_nonnull.get();\n+        s_null = bs_unknown.get();\n+\n+        String! s_nonnull = bs_null.get(); \/\/warn\n+        s_nonnull = bs_nonnull.get();\n+        s_nonnull = bs_unknown.get();\n+    }\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityWarningsTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,5 +1,6 @@\n-NullabilityWarningsTest.java:23:21: compiler.warn.unchecked.nullness.conversion\n-NullabilityWarningsTest.java:30:19: compiler.warn.unchecked.nullness.conversion\n-NullabilityWarningsTest.java:31:22: compiler.warn.unchecked.nullness.conversion\n-NullabilityWarningsTest.java:40:20: compiler.warn.unchecked.nullness.conversion\n-NullabilityWarningsTest.java:48:23: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:24:21: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:31:19: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:32:22: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:41:20: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:49:23: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:68:40: compiler.warn.unchecked.nullness.conversion\n@@ -10,1 +11,1 @@\n-5 warnings\n+6 warnings\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityWarningsTest.out","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+NullabilityWarningsTest.java:24:21: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:31:19: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:32:22: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:41:20: compiler.warn.unchecked.nullness.conversion\n+NullabilityWarningsTest.java:49:23: compiler.warn.unchecked.nullness.conversion\n+- compiler.err.warnings.and.werror\n+- compiler.note.preview.filename: NullabilityWarningsTest.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n+5 warnings\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityWarningsTest_parametric.out","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"}]}