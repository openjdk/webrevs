{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main AbstractValueClassTest\n+ * @run main runtime.valhalla.inlinetypes.AbstractValueClassTest\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AbstractValueClassTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n@@ -45,1 +47,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AnnotationsTests\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI runtime.valhalla.inlinetypes.AnnotationsTests\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AnnotationsTests.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- *           ArrayQueryTest\n+ *           runtime.valhalla.inlinetypes.ArrayQueryTest\n@@ -37,0 +37,1 @@\n+ package runtime.valhalla.inlinetypes;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ArrayQueryTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n+ * @run main runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassInitializationFailuresTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +42,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n+ * @run main runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test DirectMethodTest\n+ * @test id=default\n@@ -34,2 +34,2 @@\n- * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:+UseArrayFlattening -XX:+UseFieldFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening DirectMethodTest\n- * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:-UseArrayFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening DirectMethodTest\n+ * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:+UseArrayFlattening -XX:+UseFieldFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.DirectMethodTest\n+ *\/\n@@ -37,0 +37,11 @@\n+\/*\n+ * @test id=no-array-flattening\n+ * @summary Test arguments to JVM_InvokeMethod not flattened into an args array.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 26 DirectMethodTest.java\n+ * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:-UseArrayFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.DirectMethodTest\n@@ -39,0 +50,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/DirectMethodTest.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @test FlatArraysTest\n+ * @test id=default\n@@ -56,0 +56,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-array-flattening\n+ * @summary Plain array test for Inline Types\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 26 FlatArraysTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlatArraysTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm HiddenInlineClassTest\n+ * @run main runtime.valhalla.inlinetypes.HiddenInlineClassTest\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n@@ -49,1 +51,1 @@\n-        byte[] bytes = readClassFile(\"HiddenPoint\");\n+        byte[] bytes = readClassFile(\"runtime.valhalla.inlinetypes.HiddenPoint\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenInlineClassTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @test InlineTypeArray\n+ * @test id=default\n@@ -46,0 +46,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-array-flattening\n+ * @summary Plain array test for Inline Types\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 26 InlineTypeArray.java Point.java Long8Inline.java Person.java\n@@ -47,0 +57,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-tearable\n+ * @summary Plain array test for Inline Types\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 26 InlineTypeArray.java Point.java Long8Inline.java Person.java\n@@ -48,0 +68,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=nullable-value-flattening\n+ * @summary Plain array test for Inline Types\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 26 InlineTypeArray.java Point.java Long8Inline.java Person.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n@@ -38,1 +40,1 @@\n- * @test InlineTypeDensity\n+ * @test id=compressed-oops\n@@ -49,1 +51,13 @@\n- *                   -XX:+WhiteBoxAPI InlineTypeDensity\n+ *                   -XX:+WhiteBoxAPI runtime.valhalla.inlinetypes.InlineTypeDensity\n+ *\/\n+\n+\/**\n+ * @test id=no-compressed-oops\n+ * @summary Heap density test for InlineTypes\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @enablePreview\n+ * @compile InlineTypeDensity.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -52,1 +66,13 @@\n- *                   -XX:+WhiteBoxAPI InlineTypeDensity\n+ *                   -XX:+WhiteBoxAPI runtime.valhalla.inlinetypes.InlineTypeDensity\n+ *\/\n+\n+\/**\n+ * @test id=no-explicit-compression\n+ * @summary Heap density test for InlineTypes\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @enablePreview\n+ * @compile InlineTypeDensity.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -55,1 +81,13 @@\n- *                   -XX:+WhiteBoxAPI InlineTypeDensity\n+ *                   -XX:+WhiteBoxAPI runtime.valhalla.inlinetypes.InlineTypeDensity\n+ *\/\n+\n+\/**\n+ * @test id=force-non-tearable\n+ * @summary Heap density test for InlineTypes\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @enablePreview\n+ * @compile InlineTypeDensity.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -58,1 +96,1 @@\n- *                   -XX:+WhiteBoxAPI InlineTypeDensity\n+ *                   -XX:+WhiteBoxAPI runtime.valhalla.inlinetypes.InlineTypeDensity\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":44,"deletions":6,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.InlineTypeGetField\n+ * @run main runtime.valhalla.inlinetypes.InlineTypeGetField\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeGetField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n- * @test InlineTypesTest\n+ * @test id=default\n@@ -65,0 +65,10 @@\n+ *\/\n+\n+\/**\n+ * @test id=force-non-tearable\n+ * @summary Test data movement with inline types\n+ * @modules java.base\/jdk.internal.value\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile InlineTypesTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @run main\/othervm runtime.valhalla.inlinetypes.MonitorEnterTest\n+* @run main runtime.valhalla.inlinetypes.MonitorEnterTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MonitorEnterTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\n+package runtime.valhalla.inlinetypes;\n@@ -42,1 +42,1 @@\n- * @run main\/othervm -XX:+UseArrayFlattening NullRestrictedArrayTest\n+ * @run main\/othervm -XX:+UseArrayFlattening runtime.valhalla.inlinetypes.NullRestrictedArrayTest\n@@ -45,1 +45,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/NullRestrictedArrayTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlineLayout NullableFlatFieldTest\n+ * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlineLayout runtime.valhalla.inlinetypes.NullableFlatFieldTest\n@@ -33,0 +33,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/NullableFlatFieldTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @test ObjectMethods\n+ * @test id=compressed-class-pointers\n@@ -36,0 +36,8 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-compressed-class-pointers\n+ * @summary Check object methods implemented by the VM behave with value types\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common\n+ * @enablePreview\n+ * @compile ObjectMethods.java\n@@ -37,0 +45,8 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-verify\n+ * @summary Check object methods implemented by the VM behave with value types\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common\n+ * @enablePreview\n+ * @compile ObjectMethods.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm PreloadCircularityTest\n+ * @run main PreloadCircularityTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.QuickeningTest\n+ * @run main runtime.valhalla.inlinetypes.QuickeningTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.StaticFieldsTest\n+ * @run main runtime.valhalla.inlinetypes.StaticFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/StaticFieldsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.Test8186715\n+ * @run main runtime.valhalla.inlinetypes.Test8186715\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.TestCloneableValue\n+ * @run main runtime.valhalla.inlinetypes.TestCloneableValue\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestCloneableValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @test TestFlatArrayElementMaxOops\n+ * @test\n@@ -42,0 +42,10 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that the FlatArrayElementMaxOops flag works as expected.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @library \/test\/lib\n+ * @enablePreview\n@@ -45,0 +55,10 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that the FlatArrayElementMaxOops flag works as expected.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.value\n+ * @library \/test\/lib\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFlatArrayElementMaxOops.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n+ * @run main runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestInheritedInlineTypeFields.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+package runtime.valhalla.inlinetypes;\n@@ -36,1 +37,1 @@\n- * @run main\/othervm\/native TestJNIIsSameObject\n+ * @run main\/othervm\/native runtime.valhalla.inlinetypes.TestJNIIsSameObject\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIIsSameObject.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main ValuePreloadTest\n+ * @run main runtime.valhalla.inlinetypes.ValuePreloadTest\n@@ -33,0 +33,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @test ValueTearing\n+ * @test\n@@ -61,0 +61,14 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @ignore\n+ * @summary Test tearing of inline fields and array elements\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile ValueTearing.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -65,0 +79,14 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @ignore\n+ * @summary Test tearing of inline fields and array elements\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile ValueTearing.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -68,0 +96,14 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @ignore\n+ * @summary Test tearing of inline fields and array elements\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile ValueTearing.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -72,0 +114,14 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @ignore\n+ * @summary Test tearing of inline fields and array elements\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile ValueTearing.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -76,0 +132,14 @@\n+ *\/\n+\n+\/*\n+ * @test\n+ * @ignore\n+ * @summary Test tearing of inline fields and array elements\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile ValueTearing.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -81,0 +151,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.VarArgsArray\n+ * @run main runtime.valhalla.inlinetypes.VarArgsArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @test\n+ * @test id=nf-na-nn\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -33,1 +33,1 @@\n- * @test\n+ * @test id=nf-na-n\n@@ -36,1 +36,1 @@\n- * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening -XX:+UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:-UseArrayFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -40,1 +40,1 @@\n- * @test\n+ * @test id=nf-a-nn\n@@ -43,1 +43,1 @@\n- * @run main\/othervm -XX:-UseFieldFlattening -XX:+UseArrayFlattening -XX:-UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:+UseArrayFlattening -XX:-UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -47,1 +47,1 @@\n- * @test\n+ * @test id=f-na-nn\n@@ -50,1 +50,1 @@\n- * @run main\/othervm -XX:+UseFieldFlattening -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:+UseFieldFlattening -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -54,1 +54,1 @@\n- * @test\n+ * @test id=f-na-n\n@@ -57,1 +57,1 @@\n- * @run main\/othervm -XX:+UseFieldFlattening -XX:-UseArrayFlattening -XX:+UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:+UseFieldFlattening -XX:-UseArrayFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -61,1 +61,1 @@\n- * @test\n+ * @test id=nf-a-n\n@@ -64,1 +64,1 @@\n- * @run main\/othervm -XX:-UseFieldFlattening -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:-UseFieldFlattening -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -68,1 +68,1 @@\n- * @test\n+ * @test id=f-a-nn\n@@ -71,1 +71,1 @@\n- * @run main\/othervm -XX:+UseFieldFlattening -XX:+UseArrayFlattening -XX:-UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:+UseFieldFlattening -XX:+UseArrayFlattening -XX:-UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -75,1 +75,1 @@\n- * @test\n+ * @test id=f-a-n\n@@ -78,1 +78,1 @@\n- * @run main\/othervm -XX:+UseFieldFlattening -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening WrappersOffsetTest\n+ * @run main\/othervm -XX:+UseFieldFlattening -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening runtime.valhalla.inlinetypes.WrappersOffsetTest\n@@ -81,0 +81,2 @@\n+package runtime.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WrappersOffsetTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:remote IllegalFieldModifiers\n+ * @run main\/othervm -Xverify:remote runtime.valhalla.inlinetypes.classfileparser.IllegalFieldModifiers\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes.classfileparser;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/IllegalFieldModifiers.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm TestIllegalLoadableDescriptors\n+ * @run main runtime.valhalla.inlinetypes.classfileparser.TestIllegalLoadableDescriptors\n@@ -32,0 +32,1 @@\n+package runtime.valhalla.inlinetypes.classfileparser;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/TestIllegalLoadableDescriptors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:remote ValueClassValidation\n+ * @run main\/othervm -Xverify:remote runtime.valhalla.inlinetypes.classfileparser.ValueClassValidation\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes.classfileparser;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ValueClassValidation.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main BigClassTreeClassLoader\n+ * @run main runtime.valhalla.inlinetypes.classloading.BigClassTreeClassLoader\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/BigClassTreeClassLoader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run junit\/othervm\/timeout=480 -XX:ReservedCodeCacheSize=2G ConcurrentClassLoadingTest\n+ * @run junit\/othervm\/timeout=480 -XX:ReservedCodeCacheSize=2G runtime.valhalla.inlinetypes.classloading.ConcurrentClassLoadingTest\n@@ -36,0 +36,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/ConcurrentClassLoadingTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run junit LoadableDescriptorsTest\n+ * @run junit runtime.valhalla.inlinetypes.classloading.LoadableDescriptorsTest\n@@ -33,0 +33,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/LoadableDescriptorsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run junit PreLoadCircularityTest\n+ * @run junit runtime.valhalla.inlinetypes.classloading.PreLoadCircularityTest\n@@ -34,0 +34,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/PreLoadCircularityTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run junit PreLoadDoesNotInitTest\n+ * @run junit runtime.valhalla.inlinetypes.classloading.PreLoadDoesNotInitTest\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/PreLoadDoesNotInitTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run junit PreLoadFailuresDoNotImpactApplicationTest\n+ * @run junit runtime.valhalla.inlinetypes.classloading.PreLoadFailuresDoNotImpactApplicationTest\n@@ -36,0 +36,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/PreLoadFailuresDoNotImpactApplicationTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run junit ValueClassInheritanceTest\n+ * @run junit runtime.valhalla.inlinetypes.classloading.ValueClassInheritanceTest\n@@ -36,0 +36,2 @@\n+package runtime.valhalla.inlinetypes.classloading;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classloading\/ValueClassInheritanceTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm FieldAlignmentTest 0\n+ * @run main runtime.valhalla.inlinetypes.field_layout.FieldAlignmentTest 0\n@@ -43,1 +43,1 @@\n- * @run main\/othervm FieldAlignmentTest 1\n+ * @run main runtime.valhalla.inlinetypes.field_layout.FieldAlignmentTest 1\n@@ -54,1 +54,1 @@\n- * @run main\/othervm FieldAlignmentTest 2\n+ * @run main runtime.valhalla.inlinetypes.field_layout.FieldAlignmentTest 2\n@@ -57,0 +57,2 @@\n+ package runtime.valhalla.inlinetypes.field_layout;\n+\n@@ -102,7 +104,7 @@\n-  @LooselyConsistentValue static value class ValueOneByte { byte val = 0; }\n-  @LooselyConsistentValue static value class ValueOneChar { char val = 0; }\n-  @LooselyConsistentValue static value class ValueOneShort { short val = 0; }\n-  @LooselyConsistentValue static value class ValueOneInt { int val = 0; }\n-  @LooselyConsistentValue static value class ValueOneLong { long val = 0; }\n-  @LooselyConsistentValue static value class ValueOneFloat { float val = 0f; }\n-  @LooselyConsistentValue static value class ValueOneDouble { double val = 0d; }\n+  @LooselyConsistentValue public static value class ValueOneByte { byte val = 0; }\n+  @LooselyConsistentValue public static value class ValueOneChar { char val = 0; }\n+  @LooselyConsistentValue public static value class ValueOneShort { short val = 0; }\n+  @LooselyConsistentValue public static value class ValueOneInt { int val = 0; }\n+  @LooselyConsistentValue public static value class ValueOneLong { long val = 0; }\n+  @LooselyConsistentValue public static value class ValueOneFloat { float val = 0f; }\n+  @LooselyConsistentValue public static value class ValueOneDouble { double val = 0d; }\n@@ -110,2 +112,2 @@\n-  @LooselyConsistentValue static value class ValueByteLong { byte b = 0; long l = 0; }\n-  @LooselyConsistentValue static value class ValueByteInt { byte b = 0; int i = 0; }\n+  @LooselyConsistentValue public static value class ValueByteLong { byte b = 0; long l = 0; }\n+  @LooselyConsistentValue public static value class ValueByteInt { byte b = 0; int i = 0; }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldAlignmentTest.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package runtime.valhalla.inlinetypes.field_layout;\n+\n@@ -410,0 +412,1 @@\n+    System.out.println(\"We have the layouts\");\n@@ -411,0 +414,1 @@\n+      System.out.println(\"- \" + layout.name);\n@@ -412,0 +416,1 @@\n+      System.out.println(\"-----> \" + sub);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldLayoutAnalyzer.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm NullMarkersTest 0\n+ * @run main NullMarkersTest 0\n@@ -43,1 +43,1 @@\n- * @run main\/othervm NullMarkersTest 1\n+ * @run main NullMarkersTest 1\n@@ -54,1 +54,1 @@\n- * @run main\/othervm NullMarkersTest 2\n+ * @run main NullMarkersTest 2\n@@ -65,1 +65,1 @@\n- * @run main\/othervm NullMarkersTest 3\n+ * @run main NullMarkersTest 3\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/NullMarkersTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm TestLayoutFlags 0\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 0\n@@ -41,1 +41,1 @@\n- * @run main\/othervm TestLayoutFlags 1\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 1\n@@ -50,1 +50,1 @@\n- * @run main\/othervm TestLayoutFlags 2\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 2\n@@ -59,1 +59,1 @@\n- * @run main\/othervm TestLayoutFlags 3\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 3\n@@ -68,1 +68,1 @@\n- * @run main\/othervm TestLayoutFlags 4\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 4\n@@ -77,1 +77,1 @@\n- * @run main\/othervm TestLayoutFlags 5\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 5\n@@ -86,1 +86,1 @@\n- * @run main\/othervm TestLayoutFlags 6\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 6\n@@ -95,1 +95,1 @@\n- * @run main\/othervm TestLayoutFlags 7\n+ * @run main runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags 7\n@@ -98,0 +98,2 @@\n+package runtime.valhalla.inlinetypes.field_layout;\n+\n@@ -116,1 +118,1 @@\n-            Class testClass = Class.forName(\"TestLayoutFlags\");\n+            Class testClass = Class.forName(\"runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags\");\n@@ -145,1 +147,1 @@\n-        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container0\");\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags$Container0\");\n@@ -165,1 +167,1 @@\n-        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container1\");\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags$Container1\");\n@@ -182,1 +184,1 @@\n-        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container2\");\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags$Container2\");\n@@ -253,1 +255,1 @@\n-        ProcessBuilder pb = exec(\"TestLayoutFlags$TestRunner\");\n+        ProcessBuilder pb = exec(\"runtime.valhalla.inlinetypes.field_layout.TestLayoutFlags$TestRunner\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm ValueCompositionTest 0\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest 0\n@@ -41,1 +41,1 @@\n- * @run main\/othervm ValueCompositionTest 1\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest 1\n@@ -50,1 +50,1 @@\n- * @run main\/othervm ValueCompositionTest 2\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest 2\n@@ -59,1 +59,1 @@\n- * @run main\/othervm ValueCompositionTest 3\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest 3\n@@ -62,0 +62,2 @@\n+package runtime.valhalla.inlinetypes.field_layout;\n+\n@@ -80,1 +82,1 @@\n-      Class testClass = Class.forName(\"ValueCompositionTest\");\n+      Class testClass = Class.forName(\"runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest\");\n@@ -111,1 +113,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container0\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container0\");\n@@ -138,1 +140,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container1\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container1\");\n@@ -167,1 +169,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container2\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container2\");\n@@ -192,1 +194,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container3\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container3\");\n@@ -215,1 +217,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container4\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container4\");\n@@ -239,1 +241,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container5\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container5\");\n@@ -262,1 +264,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container6\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container6\");\n@@ -285,1 +287,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container7\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container7\");\n@@ -309,1 +311,1 @@\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"ValueCompositionTest$Container8\");\n+    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest$Container8\");\n@@ -357,1 +359,1 @@\n-    ProcessBuilder pb = exec(\"ValueCompositionTest$TestRunner\");\n+    ProcessBuilder pb = exec(\"runtime.valhalla.inlinetypes.field_layout.ValueCompositionTest$TestRunner\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm ValueFieldInheritanceTest 0\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest 0\n@@ -43,1 +43,1 @@\n- * @run main\/othervm ValueFieldInheritanceTest 1\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest 1\n@@ -54,1 +54,1 @@\n- * @run main\/othervm ValueFieldInheritanceTest 2\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest 2\n@@ -65,1 +65,1 @@\n- * @run main\/othervm ValueFieldInheritanceTest 3\n+ * @run main runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest 3\n@@ -68,0 +68,2 @@\n+package runtime.valhalla.inlinetypes.field_layout;\n+\n@@ -158,1 +160,1 @@\n-      Class testClass = Class.forName(\"ValueFieldInheritanceTest\");\n+      Class testClass = Class.forName(\"runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest\");\n@@ -214,1 +216,1 @@\n-    ProcessBuilder pb = exec(compressedOopsArg, compressedKlassPointersArg, \"ValueFieldInheritanceTest$TestRunner\");\n+    ProcessBuilder pb = exec(compressedOopsArg, compressedKlassPointersArg, \"runtime.valhalla.inlinetypes.field_layout.ValueFieldInheritanceTest$TestRunner\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/ValueFieldInheritanceTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-Java_TestJNIIsSameObject_isSameObject(JNIEnv* env, jclass klass, jobject obj0, jobject obj1) {\n+Java_runtime_valhalla_inlinetypes_TestJNIIsSameObject_isSameObject(JNIEnv* env, jclass klass, jobject obj0, jobject obj1) {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/libJNIIsSameObject.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+\/\/ Must be placed in top-level package to avoid issues with RedefineClassHelper.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/RedefineStrictFieldsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Xverify:remote StrictFields\n+ * @run main\/othervm -Xverify:remote runtime.valhalla.inlinetypes.verifier.StrictFields\n@@ -31,0 +31,2 @@\n+package runtime.valhalla.inlinetypes.verifier;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFields.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions StrictStaticFieldsTest\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions runtime.valhalla.inlinetypes.verifier.StrictStaticFieldsTest\n@@ -38,0 +38,2 @@\n+package runtime.valhalla.inlinetypes.verifier;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictStaticFieldsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -29,2 +29,4 @@\n- * @run main\/othervm StrictStaticTests\n- *\n+ * @run main StrictStaticTests\n+ *\/\n+\n+\/*\n@@ -32,0 +34,3 @@\n+ * @bug 8349945\n+ * @summary test tracking of strict static fields\n+ * @enablePreview\n@@ -33,1 +38,3 @@\n- *\n+ *\/\n+\n+\/*\n@@ -35,0 +42,3 @@\n+ * @bug 8349945\n+ * @summary test tracking of strict static fields\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictStaticTests.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -Xlog:verification UninitializedThisVerificationTest\n+ * @run main\/othervm -Xlog:verification runtime.valhalla.inlinetypes.verifier.UninitializedThisVerificationTest\n@@ -35,0 +35,3 @@\n+package runtime.valhalla.inlinetypes.verifier;\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedThisVerificationTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:remote VTAssignability\n+ * @run main\/othervm -Xverify:remote runtime.valhalla.inlinetypes.verifier.VTAssignability\n@@ -32,0 +32,2 @@\n+package runtime.valhalla.inlinetypes.verifier;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xverify:remote VTMonitor\n+ * @run main\/othervm -Xverify:remote runtime.valhalla.inlinetypes.verifier.VTMonitor\n@@ -33,0 +33,2 @@\n+package runtime.valhalla.inlinetypes.verifier;\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}