{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights vectorReserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights vectorReserved.\n@@ -46,0 +46,4 @@\n+    double  [] dinp;\n+    int     [] iinp;\n+    long    [] linp;\n+\n@@ -58,0 +62,4 @@\n+        dinp      = new double[vectorDim];\n+        iinp      = new int[vectorDim];\n+        linp      = new long[vectorDim];\n+\n@@ -62,0 +70,4 @@\n+        IntStream.range(0, vectorDim).forEach(i -> {dinp[i] = vector1[i].doubleValue();});\n+        IntStream.range(0, vectorDim).forEach(i -> {iinp[i] = vector1[i].intValue();});\n+        IntStream.range(0, vectorDim).forEach(i -> {linp[i] = vector1[i].longValue();});\n+\n@@ -264,0 +276,21 @@\n+\n+    @Benchmark\n+    public void IntToFP16() {\n+        for (int i = 0; i < vectorDim; i++) {\n+            vectorRes[i] = Float16.valueOf(iinp[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void LongToFP16() {\n+        for (int i = 0; i < vectorDim; i++) {\n+            vectorRes[i] = Float16.valueOf(linp[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void DoubleToFP16() {\n+        for (int i = 0; i < vectorDim; i++) {\n+            vectorRes[i] = Float16.valueOf(dinp[i]);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Float16OpsBenchmark.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}