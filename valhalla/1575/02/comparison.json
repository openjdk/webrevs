{"files":[{"patch":"@@ -6136,1 +6136,2 @@\n-    ldp(rscratch1, rfp, Address(sp, sp_inc_offset));\n+    ldr(rscratch1, Address(sp, sp_inc_offset));\n+    ldr(rfp, Address(sp, sp_inc_offset + wordSize));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n+\n+\/*\n+ * @test\n+ * @bug 8367156\n+ * @summary On Aarch64, when the frame is very big and we need to repair it after\n+ *          scalarization of the arguments, we cannot use ldp to get the stack\n+ *          increment and rfp at the same time, since it only has a 7 bit offset.\n+ *          We use two ldr with 9-bit offsets instead.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\n+ *      -Xcomp\n+ *      -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.RepairStackWithBigFrame::test\n+ *      compiler.valhalla.inlinetypes.RepairStackWithBigFrame\n+ * @run main compiler.valhalla.inlinetypes.RepairStackWithBigFrame\n+ *\/\n+\n+public class RepairStackWithBigFrame {\n+    static final MyValue1 testValue1 = MyValue1.createWithFieldsInline(rI, rL);\n+\n+    public static void main(String[] args) {\n+        new RepairStackWithBigFrame().test(testValue1);\n+    }\n+\n+    long test(MyValue1 arg) {\n+        MyAbstract vt1 = MyValue1.createWithFieldsInline(rI, rL);\n+        MyAbstract vt2 = MyValue1.createWithFieldsDontInline(rI, rL);\n+        MyAbstract vt3 = MyValue1.createWithFieldsInline(rI, rL);\n+        MyAbstract vt4 = arg;\n+        return ((MyValue1)vt1).hash() + ((MyValue1)vt2).hash() +\n+               ((MyValue1)vt3).hash() + ((MyValue1)vt4).hash();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/RepairStackWithBigFrame.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}