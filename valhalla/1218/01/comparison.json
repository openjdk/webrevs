{"files":[{"patch":"@@ -215,0 +215,1 @@\n+            case NULL_RESTRICTED_TYPES -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -273,0 +273,1 @@\n+        NULL_RESTRICTED_TYPES(JDK23, Fragments.FeatureNullRestrictedTypes, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-    private boolean enableNullRestrictedTypes;\n+    \/* are nullable and null-restricted types allowed? *\/\n+    private boolean allowNullRestrictedTypes;\n@@ -129,2 +130,3 @@\n-        Options options = Options.instance(context);\n-        enableNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n+        Preview preview = Preview.instance(context);\n+        allowNullRestrictedTypes = (!preview.isPreview(Source.Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Source.Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -1089,1 +1091,1 @@\n-            if (enableNullRestrictedTypes) {\n+            if (allowNullRestrictedTypes) {\n@@ -1211,1 +1213,1 @@\n-                if (result && enableNullRestrictedTypes) {\n+                if (result && allowNullRestrictedTypes) {\n@@ -1491,1 +1493,1 @@\n-                if (equal && enableNullRestrictedTypes) {\n+                if (equal && allowNullRestrictedTypes) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -186,1 +186,2 @@\n-        enableNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n+        allowNullRestrictedTypes = (!preview.isPreview(Source.Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Source.Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -218,1 +219,1 @@\n-    private final boolean enableNullRestrictedTypes;\n+    private final boolean allowNullRestrictedTypes;\n@@ -746,2 +747,1 @@\n-        if (enableNullRestrictedTypes &&\n-                tree instanceof JCNullableTypeExpression nullableTypeExpression &&\n+        if (allowNullRestrictedTypes && tree instanceof JCNullableTypeExpression nullableTypeExpression &&\n@@ -1186,1 +1186,1 @@\n-            if (enableNullRestrictedTypes && tree.sym.isImplicitConstructor()) {\n+            if (allowNullRestrictedTypes && tree.sym.isImplicitConstructor()) {\n@@ -1365,1 +1365,1 @@\n-            if (enableNullRestrictedTypes) {\n+            if (allowNullRestrictedTypes) {\n@@ -2963,1 +2963,1 @@\n-                if (enableNullRestrictedTypes && owntype.getMetadata(TypeMetadata.NullMarker.class) == null) {\n+                if (allowNullRestrictedTypes && owntype.getMetadata(TypeMetadata.NullMarker.class) == null) {\n@@ -5436,2 +5436,1 @@\n-                if (enableNullRestrictedTypes &&\n-                        env != null && env.tree != null && env.tree.hasTag(CLASSDEF) && TreeInfo.getImplicitConstructor(((JCClassDecl)env.tree).defs) != null)\n+                if (allowNullRestrictedTypes && env != null && env.tree != null && env.tree.hasTag(CLASSDEF) && TreeInfo.getImplicitConstructor(((JCClassDecl)env.tree).defs) != null)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -186,1 +186,2 @@\n-        enableNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n+        allowNullRestrictedTypes = (!preview.isPreview(Source.Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Source.Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -234,1 +235,1 @@\n-    \/** Are null-restricted types allowed\n+    \/** Are null restricted types allowed\n@@ -236,1 +237,2 @@\n-    private final boolean enableNullRestrictedTypes;\n+    private final boolean allowNullRestrictedTypes;\n+\n@@ -316,1 +318,1 @@\n-        if (enableNullRestrictedTypes && lint.isEnabled(LintCategory.NULL)) {\n+        if (allowNullRestrictedTypes && lint.isEnabled(LintCategory.NULL)) {\n@@ -819,1 +821,1 @@\n-        if (enableNullRestrictedTypes) {\n+        if (allowNullRestrictedTypes) {\n@@ -2797,1 +2799,1 @@\n-            implementsLooselyConsistentValue = allowValueClasses && enableNullRestrictedTypes ? types.asSuper(c, syms.looselyConsistentValueType.tsym) != null : false;\n+            implementsLooselyConsistentValue = allowValueClasses && allowNullRestrictedTypes ? types.asSuper(c, syms.looselyConsistentValueType.tsym) != null : false;\n@@ -4574,1 +4576,1 @@\n-            if (enableNullRestrictedTypes) {\n+            if (allowNullRestrictedTypes) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    private final boolean enableNullRestrictedTypes;\n+    private final boolean allowNullRestrictedTypes;\n@@ -142,1 +142,2 @@\n-        enableNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n+        this.allowNullRestrictedTypes = (!preview.isPreview(Source.Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Source.Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -4404,1 +4405,1 @@\n-        if (!enableNullRestrictedTypes || tree.elemtype == null || !originalElemType.type.isNonNullable()) {\n+        if (!allowNullRestrictedTypes || tree.elemtype == null || !originalElemType.type.isNonNullable()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    private boolean enableNullRestrictedTypes;\n+    private boolean allowNullRestrictedTypes;\n@@ -200,1 +200,2 @@\n-        enableNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n+        allowNullRestrictedTypes = (!preview.isPreview(Source.Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Source.Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -962,1 +963,1 @@\n-        if (enableNullRestrictedTypes && csym.isValueClass() && csym.hasImplicitConstructor()) {\n+        if (allowNullRestrictedTypes && csym.isValueClass() && csym.hasImplicitConstructor()) {\n@@ -975,1 +976,1 @@\n-        if (enableNullRestrictedTypes && sym.kind == VAR && sym.type.isNonNullable() && !sym.type.hasTag(ARRAY)) {\n+        if (allowNullRestrictedTypes && sym.kind == VAR && sym.type.isNonNullable() && !sym.type.hasTag(ARRAY)) {\n@@ -978,0 +979,3 @@\n+            if (preview.isPreview(Source.Feature.VALUE_CLASSES)) {\n+                preview.markUsesPreview(null);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -198,1 +198,2 @@\n-        this.enableNullRestrictedTypes = fac.options.isSet(\"enableNullRestrictedTypes\");\n+        this.allowNullRestrictedTypes = (!preview.isPreview(Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -224,1 +225,2 @@\n-        this.enableNullRestrictedTypes = parser.enableNullRestrictedTypes;\n+        this.allowNullRestrictedTypes = (!preview.isPreview(Feature.NULL_RESTRICTED_TYPES) || preview.isEnabled()) &&\n+                Feature.NULL_RESTRICTED_TYPES.allowedInSource(source);\n@@ -272,1 +274,1 @@\n-    boolean enableNullRestrictedTypes;\n+    boolean allowNullRestrictedTypes;\n@@ -710,1 +712,1 @@\n-        if (enableNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+        if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1188,1 +1190,1 @@\n-                    if (enableNullRestrictedTypes && token.kind == QUES && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                    if (allowNullRestrictedTypes && token.kind == QUES && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1521,1 +1523,1 @@\n-                if (enableNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (peekToken(LBRACKET) || peekToken(LT))) {\n+                if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (peekToken(LBRACKET) || peekToken(LT))) {\n@@ -1546,1 +1548,1 @@\n-                            if (enableNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1677,1 +1679,1 @@\n-            if (enableNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (token.kind == QUES || token.kind == BANG || (token.kind == STAR))) {\n+            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (token.kind == QUES || token.kind == BANG || (token.kind == STAR))) {\n@@ -1803,1 +1805,1 @@\n-            if (enableNullRestrictedTypes && isMode(TYPE) && typeArgs == null && EMOTIONAL_QUALIFIER.test(token.kind) &&\n+            if (allowNullRestrictedTypes && isMode(TYPE) && typeArgs == null && EMOTIONAL_QUALIFIER.test(token.kind) &&\n@@ -1817,1 +1819,1 @@\n-                        if (enableNullRestrictedTypes && isMode(TYPE) && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                        if (allowNullRestrictedTypes && isMode(TYPE) && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1910,0 +1912,1 @@\n+        checkSourceLevel(Feature.NULL_RESTRICTED_TYPES);\n@@ -2050,1 +2053,1 @@\n-                    } else if (enableNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n+                    } else if (allowNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n@@ -2054,1 +2057,1 @@\n-                    } else if (enableNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) {\n+                    } else if (allowNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) {\n@@ -2057,1 +2060,1 @@\n-                    } else if (enableNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n+                    } else if (allowNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n@@ -2087,1 +2090,1 @@\n-                            (enableNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER, RPAREN)) ||\n+                            (allowNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER, RPAREN)) ||\n@@ -2093,1 +2096,1 @@\n-                    } else if (enableNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER)) {\n+                    } else if (allowNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER)) {\n@@ -2117,1 +2120,1 @@\n-                                (enableNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) ||\n+                                (allowNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) ||\n@@ -2520,1 +2523,1 @@\n-        } else if (enableNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n+        } else if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n@@ -3478,1 +3481,1 @@\n-                    } else if (typeDepth == 0 && enableNullRestrictedTypes &&\n+                    } else if (typeDepth == 0 && allowNullRestrictedTypes &&\n@@ -3484,1 +3487,1 @@\n-                    } else if ( enableNullRestrictedTypes &&\n+                    } else if ( allowNullRestrictedTypes &&\n@@ -3506,1 +3509,1 @@\n-                    if (enableNullRestrictedTypes && !peekToken(lookahead, LPAREN)) break;\n+                    if (allowNullRestrictedTypes && !peekToken(lookahead, LPAREN)) break;\n@@ -3688,1 +3691,1 @@\n-                if (enableNullRestrictedTypes && isImplicitModifier()) {\n+                if (isImplicitModifier()) {\n@@ -3966,1 +3969,1 @@\n-            if (enableNullRestrictedTypes && allowValueClasses) {\n+            if (allowValueClasses) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -3243,2 +3243,2 @@\n-compiler.misc.feature.bang.types=\\\n-    bang types\n+compiler.misc.feature.null.restricted.types=\\\n+    nullable and null restricted types\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n-                \"-XDenableNullRestrictedTypes\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueClasses\/TestValueClasses.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-compiler.misc.feature.bang.types\n+compiler.misc.feature.null.restricted.types\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n-\/\/ options: -XDenableNullRestrictedTypes\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantBeNonNullableType.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantImplementInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitConstructorWithBody.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBeInValueClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBePublic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCannotBeInner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantDeclareInitBlock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ options: --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDenableNullRestrictedTypes\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantHaveFieldInit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8338766\n+ * @summary [lw5] remove option enableNullRestrictedTypes and make null-restricted types a preview feature\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main NullRestrictedAttrTest\n+ * @ignore support for the NullRestricted attribute is missing in javap, class library etc\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class NullRestrictedAttrTest extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    public NullRestrictedAttrTest() {\n+        super(System.err);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new NullRestrictedAttrTest().runTests();\n+    }\n+\n+    @Test\n+    public void testLoadableDescField(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class V {\n+                    public implicit V();\n+                }\n+                class Test {\n+                    V! v1;\n+                    void m(V! v) {\n+                        v1 = v;\n+                    }\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Test.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"NullRestricted\") != null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullRestrictedAttrTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDenableNullRestrictedTypes NullabilityParsingTest.java\n+ * @compile NullabilityParsingTest.java\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityParsingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @ignore 8316628\n+ * @ignore\n","filename":"test\/langtools\/tools\/javac\/nullability\/RuntimeNullChecks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes CanonicalCtorTest.java\n+ * @compile --enable-preview -source ${jdk.version} CanonicalCtorTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CanonicalCtorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * @compile\/fail\/ref=CheckImplicitCreationAttrIsUnique.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics CheckImplicitCreationAttrIsUnique.java\n+ * @compile\/fail\/ref=CheckImplicitCreationAttrIsUnique.out --enable-preview -source ${jdk.version} -XDrawDiagnostics CheckImplicitCreationAttrIsUnique.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/implicit_creation_attr\/CheckImplicitCreationAttrIsUnique.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,2 +7,2 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes ValueClass.jcod DuplicateNullRestrictedAttr.jcod\n- * @compile\/fail\/ref=CheckNullRestrictedAttrIsUnique.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics CheckNullRestrictedAttrIsUnique.java\n+ * @compile --enable-preview -source ${jdk.version} ValueClass.jcod DuplicateNullRestrictedAttr.jcod\n+ * @compile\/fail\/ref=CheckNullRestrictedAttrIsUnique.out --enable-preview -source ${jdk.version} -XDrawDiagnostics CheckNullRestrictedAttrIsUnique.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/CheckNullRestrictedAttrIsUnique.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,2 +7,2 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes NullRestrictedOnPrimitive.jcod\n- * @compile\/fail\/ref=CheckFieldTypeTest.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics CheckFieldTypeTest.java\n+ * @compile --enable-preview -source ${jdk.version} NullRestrictedOnPrimitive.jcod\n+ * @compile\/fail\/ref=CheckFieldTypeTest.out --enable-preview -source ${jdk.version} -XDrawDiagnostics CheckFieldTypeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,2 +7,2 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes NullRestrictedOnArray.jcod\n- * @compile\/fail\/ref=CheckFieldTypeTest2.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics CheckFieldTypeTest2.java\n+ * @compile --enable-preview -source ${jdk.version} NullRestrictedOnArray.jcod\n+ * @compile\/fail\/ref=CheckFieldTypeTest2.out --enable-preview -source ${jdk.version} -XDrawDiagnostics CheckFieldTypeTest2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,2 +7,2 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes NullRestrictedOnMethod.jcod\n- * @compile\/fail\/ref=NullRestrictedAttrOnlyOnFields.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics NullRestrictedAttrOnlyOnFields.java\n+ * @compile --enable-preview -source ${jdk.version} NullRestrictedOnMethod.jcod\n+ * @compile\/fail\/ref=NullRestrictedAttrOnlyOnFields.out --enable-preview -source ${jdk.version} -XDrawDiagnostics NullRestrictedAttrOnlyOnFields.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/only_on_fields\/NullRestrictedAttrOnlyOnFields.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n- * @compile --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes CyclicValueClass.jcod\n- * @compile\/fail\/ref=CheckForCyclesAtClassLoadingTimeTest.out --enable-preview -source ${jdk.version} -XDenableNullRestrictedTypes -XDrawDiagnostics CheckForCyclesAtClassLoadingTimeTest.java\n+ * @compile --enable-preview -source ${jdk.version} CyclicValueClass.jcod\n+ * @compile\/fail\/ref=CheckForCyclesAtClassLoadingTimeTest.out --enable-preview -source ${jdk.version} -XDrawDiagnostics CheckForCyclesAtClassLoadingTimeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/cycles\/CheckForCyclesAtClassLoadingTimeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}