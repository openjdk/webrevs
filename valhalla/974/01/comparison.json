{"files":[{"patch":"@@ -277,1 +277,1 @@\n-  $1_FLAGS += $$($1_JAVAC_FLAGS)\n+  $1_FLAGS += $$($1_JAVAC_FLAGS) -XDenablePrimitiveClasses\n","filename":"make\/common\/JavaCompilation.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3148,0 +3148,16 @@\n+void Assembler::vmovw(XMMRegister dst, Register src) {\n+  assert(VM_Version::supports_avx512_fp16(), \"requires AVX512-FP16\");\n+  InstructionAttr attributes(AVX_128bit, false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6E, (0xC0 | encode));\n+}\n+\n+void Assembler::vmovw(Register dst, XMMRegister src) {\n+  assert(VM_Version::supports_avx512_fp16(), \"requires AVX512-FP16\");\n+  InstructionAttr attributes(AVX_128bit, false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x7E, (0xC0 | encode));\n+}\n+\n@@ -7329,0 +7345,16 @@\n+void Assembler::evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512_fp16(), \"requires AVX512-FP16\");\n+  InstructionAttr attributes(vector_len, false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x58, (0xC0 | encode));\n+}\n+\n+void Assembler::evaddsh(XMMRegister dst, XMMRegister nds, XMMRegister src) {\n+  assert(VM_Version::supports_avx512_fp16(), \"requires AVX512-FP16\");\n+  InstructionAttr attributes(AVX_128bit, false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x58, (0xC0 | encode));\n+}\n+\n@@ -11498,1 +11530,1 @@\n-  \/\/ of form {0F, 0F_38, 0F_3A}\n+  \/\/ of form {0F, 0F_38, 0F_3A, MAP5}\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -551,0 +551,1 @@\n+    VEX_OPCODE_MAP5  = 0x5,\n@@ -1652,0 +1653,3 @@\n+  void vmovw(XMMRegister dst, Register src);\n+  void vmovw(Register dst, XMMRegister src);\n+\n@@ -2399,0 +2403,2 @@\n+  void evaddsh(XMMRegister dst, XMMRegister nds, XMMRegister src);\n+  void evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -953,0 +953,1 @@\n+    _features &= ~CPU_AVX512_FP16;\n@@ -986,0 +987,1 @@\n+      _features &= ~CPU_AVX512_FP16;\n@@ -3021,0 +3023,3 @@\n+\n+    if (_cpuid_info.sef_cpuid7_edx.bits.avx512_fp16 != 0)\n+      result |= CPU_AVX512_FP16;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -278,1 +278,3 @@\n-                           : 11;\n+                           : 2,\n+              avx512_fp16  : 1,\n+                           : 8;\n@@ -393,1 +395,2 @@\n-    decl(AVX512_IFMA,       \"avx512_ifma\",       58) \/* Integer Vector FMA instructions*\/\n+    decl(AVX512_IFMA,       \"avx512_ifma\",       58) \/* Integer Vector FMA instructions*\/ \\\n+    decl(AVX512_FP16,       \"avx512_fp16\",       59) \/* AVX512 FP16 ISA support*\/\n@@ -699,0 +702,1 @@\n+  static bool supports_avx512_fp16()  { return (_features & CPU_AVX512_FP16) != 0; }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1464,0 +1464,7 @@\n+    case Op_AddHF:\n+    case Op_ReinterpretS2HF:\n+    case Op_ReinterpretHF2S:\n+      if (!VM_Version::supports_avx512_fp16()) {\n+        return false;\n+      }\n+      break;\n@@ -1737,0 +1744,5 @@\n+    case Op_AddVHF:\n+      if (!VM_Version::supports_avx512_fp16()) {\n+        return false;\n+      }\n+      break;\n@@ -10166,0 +10178,38 @@\n+instruct reinterpretS2H (regF dst, rRegI src)\n+%{\n+  match(Set dst (ReinterpretS2HF src));\n+  format %{ \"vmovw $dst, $src\" %}\n+  ins_encode %{\n+    __ vmovw($dst$$XMMRegister, $src$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct convF2HFAndS2HF (regF dst, regF src)\n+%{\n+  match(Set dst (ReinterpretS2HF (ConvF2HF src)));\n+  format %{ \"convF2HFAndS2HF $dst, $src\" %}\n+  ins_encode %{\n+    __ vcvtps2ph($dst$$XMMRegister, $src$$XMMRegister, 0x04, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reinterpretH2S (rRegI dst, regF src)\n+%{\n+  match(Set dst (ReinterpretHF2S src));\n+  format %{ \"vmovw $dst, $src\" %}\n+  ins_encode %{\n+    __ vmovw($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+instruct addFP16_scalar (regF dst, regF src1, regF src2)\n+%{\n+  match(Set dst (AddHF src1 src2));\n+  format %{ \"vaddsh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ evaddsh($dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -10167,0 +10217,10 @@\n+instruct vaddVHF (vec dst, vec src1, vec src2)\n+%{\n+  match(Set dst (AddVHF src1 src2));\n+  format %{ \"vaddph $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    __ evaddph($dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4234,1 +4234,1 @@\n-    \"AddVB\",\"AddVS\",\"AddVI\",\"AddVL\",\"AddVF\",\"AddVD\",\n+    \"AddVB\",\"AddVHF\", \"AddVS\",\"AddVI\",\"AddVL\",\"AddVF\",\"AddVD\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+    case T_PRIMITIVE_OBJECT: \/\/ Fall through\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -401,0 +401,1 @@\n+  static void restore_loader_data() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4733,0 +4733,16 @@\n+\/\/ utility function to skip over internal jdk primitive classes used to override the need for passing\n+\/\/ an explict JVM flag EnablePrimitiveClasses.\n+bool ClassFileParser::is_jdk_internal_class(const Symbol* class_name) const {\n+  if (vmSymbols::java_lang_Float16() == class_name) {\n+    return (EnablePrimitiveClasses = true);\n+  }\n+  return false;\n+}\n+\n+bool ClassFileParser::is_jdk_internal_class_sig(const char* sig) const {\n+  if (strstr(sig, vmSymbols::java_lang_Float16_signature()->as_C_string())) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n@@ -4763,1 +4779,1 @@\n-  if (is_primitive_class && !EnablePrimitiveClasses) {\n+  if (is_primitive_class && !is_jdk_internal_class(_class_name) && !EnablePrimitiveClasses) {\n@@ -5205,1 +5221,1 @@\n-      if ( (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) || (!EnablePrimitiveClasses)) {\n+      if ( (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) || (!EnablePrimitiveClasses && !is_jdk_internal_class_sig(signature))) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -223,0 +223,4 @@\n+  bool is_jdk_internal_class(const Symbol* class_name) const;\n+\n+  bool is_jdk_internal_class_sig(const char* sig) const;\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+  do_klass(Float16_klass,                               java_lang_Float16                                     ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -198,0 +198,6 @@\n+                                                                                                                        \\\n+  \/* Float16 intrinsics, similar to what we have in Math. *\/                                                            \\\n+  do_intrinsic(_sum_float16,              java_lang_Float16,      sum_name,           floa16_float16_signature,  F_S)   \\\n+   do_name(sum_name, \"sum\")                                                                                             \\\n+   do_signature(floa16_float16_signature, \"(Qjava\/lang\/Float16;Qjava\/lang\/Float16;)Qjava\/lang\/Float16;\")                \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,0 +84,2 @@\n+  template(java_lang_Float16,                         \"java\/lang\/Float16\")                        \\\n+  template(java_lang_Float16_signature,               \"Qjava\/lang\/Float16;\")                      \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,2 +91,3 @@\n-    \/\/ has been aborted for any reason.\n-    bool yield_if_necessary() {\n+    \/\/ has been aborted for any reason. Yielded is set if there has been an actual\n+    \/\/ yield for a pause.\n+    bool yield_if_necessary(bool& yielded) {\n@@ -95,1 +96,1 @@\n-        _cm->do_yield_check();\n+        yielded = _cm->do_yield_check();\n@@ -125,1 +126,2 @@\n-        bool mark_aborted = yield_if_necessary();\n+        bool yielded;\n+        bool mark_aborted = yield_if_necessary(yielded);\n@@ -193,1 +195,2 @@\n-        bool mark_aborted = yield_if_necessary();\n+        bool yielded;\n+        bool mark_aborted = yield_if_necessary(yielded);\n@@ -213,1 +216,2 @@\n-        bool mark_aborted = yield_if_necessary();\n+        bool yielded = true;\n+        bool mark_aborted = yield_if_necessary(yielded);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -545,0 +545,3 @@\n+  if (vmSymbols::java_lang_Float16() == name()) {\n+    EnablePrimitiveClasses = true;\n+  }\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,0 +134,8 @@\n+\/\/------------------------------AddHFNode---------------------------------------\n+\/\/ Add 2 half-precision floats\n+class AddHFNode : public AddFNode {\n+public:\n+  AddHFNode( Node *in1, Node *in2 ) : AddFNode(in1,in2) {}\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -597,0 +597,3 @@\n+  case vmIntrinsics::_sum_float16:\n+    if (!Matcher::match_rule_supported(Op_AddHF)) return false;\n+    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+macro(AddHF)\n@@ -377,0 +378,1 @@\n+macro(AddVHF)\n@@ -490,0 +492,2 @@\n+macro(ReinterpretS2HF)\n+macro(ReinterpretHF2S)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -908,0 +908,32 @@\n+\n+const Type* ReinterpretS2HFNode::Value(PhaseGVN* phase) const {\n+  const Type* type = phase->type( in(1) );\n+  \/\/ Convert FP16 constant value to Float constant value, this will allow\n+  \/\/ further constant folding to be done at float granularity by value routines\n+  \/\/ of FP16 IR nodes.\n+  if (type->isa_int() && type->is_int()->is_con()) {\n+     jshort hfval = type->is_int()->get_con();\n+     jfloat fval = StubRoutines::hf2f(hfval);\n+     return TypeF::make(fval);\n+  }\n+  return Type::FLOAT;\n+}\n+\n+Node* ReinterpretS2HFNode::Identity(PhaseGVN* phase) {\n+  if (in(1)->Opcode() == Op_ReinterpretHF2S) {\n+     assert(in(1)->in(1)->bottom_type()->isa_float(), \"\");\n+     return in(1)->in(1);\n+  }\n+  return this;\n+}\n+\n+const Type* ReinterpretHF2SNode::Value(PhaseGVN* phase) const {\n+  const Type* type = phase->type( in(1) );\n+  \/\/ Convert Float constant value to FP16 constant value.\n+  if (type->isa_float_constant()) {\n+     jfloat fval = type->is_float_constant()->_f;\n+     jshort hfval = StubRoutines::f2hf(fval);\n+     return TypeInt::make(hfval);\n+  }\n+  return TypeInt::SHORT;\n+}\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -172,0 +172,23 @@\n+\/\/-----------------------------ReinterpretS2HFNode ---------------------------\n+\/\/ Reinterpret Short to Half Float\n+class ReinterpretS2HFNode : public Node {\n+  public:\n+  ReinterpretS2HFNode(Node* in1) : Node(0, in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type* bottom_type() const { return Type::FLOAT; }\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+  virtual Node* Identity(PhaseGVN* phase);\n+  virtual uint  ideal_reg() const { return Op_RegF; }\n+};\n+\n+\/\/-----------------------------ReinterpretS2HFNode ---------------------------\n+\/\/ Reinterpret Half Float to Short\n+class ReinterpretHF2SNode : public Node {\n+  public:\n+  ReinterpretHF2SNode( Node *in1 ) : Node(0,in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+  virtual const Type* bottom_type() const { return TypeInt::SHORT; }\n+  virtual uint  ideal_reg() const { return Op_RegI; }\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-  \/\/ Get the klass defining the field layout of the inline type\n-  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n-\n@@ -80,0 +77,3 @@\n+  \/\/ Get the klass defining the field layout of the inline type\n+  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -552,0 +552,1 @@\n+  case vmIntrinsics::_sum_float16:              return inline_fp16_operations(intrinsic_id());\n@@ -5049,0 +5050,28 @@\n+bool LibraryCallKit::inline_fp16_operations(vmIntrinsics::ID id) {\n+  if (!Matcher::match_rule_supported(Op_ReinterpretS2HF) ||\n+      !Matcher::match_rule_supported(Op_ReinterpretHF2S)) {\n+    return false;\n+  }\n+\n+  Node* result = nullptr;\n+  Node* val1 = argument(0);  \/\/ receiver\n+  Node* val2 = argument(1);  \/\/ argument\n+  assert(val1->is_InlineType() && val2->is_InlineType(), \"\");\n+\n+  Node* fld1 = _gvn.transform(new ReinterpretS2HFNode(val1->as_InlineType()->field_value(0)));\n+  Node* fld2 = _gvn.transform(new ReinterpretS2HFNode(val2->as_InlineType()->field_value(0)));\n+\n+  switch (id) {\n+  case vmIntrinsics::_sum_float16:   result = _gvn.transform(new AddHFNode(fld1, fld2)); break;\n+\n+  default:\n+    fatal_unexpected_iid(id);\n+    break;\n+  }\n+  InlineTypeNode* box = InlineTypeNode::make_uninitialized(_gvn, val1->as_InlineType()->inline_klass(), true);\n+  Node* short_result  = _gvn.transform(new ReinterpretHF2SNode(result));\n+  box->set_field_value(0, short_result);\n+  set_result(_gvn.transform(box));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -310,0 +310,1 @@\n+  bool inline_fp16_operations(vmIntrinsics::ID id);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2774,0 +2774,7 @@\n+      } else if (opc == Op_ReinterpretS2HF || opc == Op_ReinterpretHF2S) {\n+        assert(n->req() == 2, \"only one input expected\");\n+        BasicType bt = velt_basic_type(n);\n+        const TypeVect* vt = TypeVect::make(bt, vlen);\n+        Node* in = vector_opd(p, 1);\n+        vn = VectorReinterpretNode::make(in, vt, vt);\n+        vlen_in_bytes = vn->as_Vector()->length_in_bytes();\n@@ -3495,0 +3502,3 @@\n+  if (VectorNode::is_float16_node(n->Opcode())) {\n+    return TypeInt::SHORT;\n+  }\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  case Op_AddHF: return (bt == T_SHORT ? Op_AddVHF : 0);\n@@ -270,0 +271,3 @@\n+  case Op_ReinterpretS2HF:\n+  case Op_ReinterpretHF2S:\n+    return Op_VectorReinterpret;\n@@ -608,0 +612,10 @@\n+bool VectorNode::is_float16_node(int opc) {\n+  switch (opc) {\n+  case Op_AddHF:\n+  case Op_ReinterpretS2HF:\n+     return true;\n+  default:\n+     return false;\n+  }\n+}\n+\n@@ -677,1 +691,1 @@\n-  case Op_AddI: case Op_AddL: case Op_AddF: case Op_AddD:\n+  case Op_AddI: case Op_AddHF: case Op_AddL: case Op_AddF: case Op_AddD:\n@@ -735,0 +749,1 @@\n+  case Op_AddVHF: return new AddVHFNode(n1, n2, vt);\n@@ -1737,0 +1752,4 @@\n+VectorNode* VectorReinterpretNode::make(Node* n, const TypeVect* dst_vt, const TypeVect* src_vt) {\n+  return new VectorReinterpretNode(n, dst_vt, src_vt);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+  static bool is_float16_node(int opc);\n+\n@@ -189,0 +191,8 @@\n+\/\/------------------------------AddVHFNode--------------------------------------\n+\/\/ Vector add float\n+class AddVHFNode : public VectorNode {\n+public:\n+  AddVHFNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1, in2, vt) {}\n+  virtual int Opcode() const;\n+};\n+\n@@ -1555,0 +1565,2 @@\n+\n+  static VectorNode* make(Node* n, const TypeVect* dst_vt, const TypeVect* src_vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1422,0 +1422,1 @@\n+  declare_c2_type(AddHFNode, AddNode)                                     \\\n@@ -1440,0 +1441,2 @@\n+  declare_c2_type(ReinterpretS2HFNode, Node)                              \\\n+  declare_c2_type(ReinterpretHF2SNode, Node)                              \\\n@@ -1698,0 +1701,1 @@\n+  declare_c2_type(AddVHFNode, VectorNode)                                 \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.constant.Constable;\n+import java.lang.constant.ConstantDesc;\n+import java.util.Optional;\n+\n+import jdk.internal.math.FloatConsts;\n+import jdk.internal.math.FloatingDecimal;\n+import jdk.internal.math.FloatToDecimal;\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n+\n+\/**\n+ * The {@code Float16} is a primitive value class holding 16-bit data in IEEE 754 binary16 format\n+ * {@code Float16} contains a single field whose type is {@code short}.\n+ *\n+ * Binary16 Format:\n+ *   S EEEEE  MMMMMMMMMM\n+ *   Sign        - 1 bit\n+ *   Exponent    - 5 bits\n+ *   Significand - 10 bits\n+ *\n+ * <p>This is a <a href=\"https:\/\/openjdk.org\/jeps\/401\">primitive value class<\/a> and its objects are\n+ * identity-less non-nullable value objects.\n+ *\n+ * @author Jatin Bhateja\n+ * @since 20.00\n+ *\/\n+\n+\/\/ Currently Float16 is a primitive class but in future will be aligned with\n+\/\/ Enhanced Primitive Boxes described by JEP-402 (https:\/\/openjdk.org\/jeps\/402)\n+public primitive class Float16 extends Number {\n+    private final short value;\n+\n+   \/**\n+    * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+    * encoded {@code short} value.\n+    *\n+    * @param  value a short value.\n+    * @since  20\n+    *\/\n+    private Float16 (short value ) {\n+        this.value = value;\n+    }\n+\n+   \/**\n+    * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+    * encoded {@code short} value.\n+    *\n+    * @param  value a short value.\n+    * @return a {@code Float16} instance representing {@code value}.\n+    * @since  20\n+    *\/\n+    public static Float16 valueOf(short value) {\n+       return new Float16(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code byte} after\n+     * a narrowing primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code byte}\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     *\/\n+    public byte byteValue() {\n+        return (byte)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code short}\n+     * after a narrowing primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code short}\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @since 1.1\n+     *\/\n+    public short shortValue() {\n+        return (short)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as an {@code int} after\n+     * a widening primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code int}\n+     * @jls 5.1.3 Widening Primitive Conversion\n+     *\/\n+    public int intValue() {\n+        return (int)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns value of this {@code Float16} as a {@code long} after a\n+     * widening conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code long}\n+     * @jls 5.1.3 Widening Primitive Conversion\n+     *\/\n+    public long longValue() {\n+        return (long)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the {@code float} value of this {@code Float16} object.\n+     *\n+     * @return the binary16 encoded {@code short} value represented by this object\n+     *         converted to type {@code float}\n+     *\/\n+    public float floatValue() {\n+        return Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code double}\n+     * after a widening primitive conversion.\n+     *\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n+     * @return the binary16 encoded {@code short} value represented by this\n+     *         object converted to type {@code double}\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     *\/\n+    public double doubleValue() {\n+        return (double)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Adds two {@code Float16} values together as per the + operator semantics.\n+     *\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b}\n+     * @since 20\n+     *\/\n+    @IntrinsicCandidate\n+    public static Float16 sum(Float16 a, Float16 b) {\n+       return Float16.valueOf(Float.floatToFloat16(Float.float16ToFloat(a.float16ToRawShortBits()) + Float.float16ToFloat(b.float16ToRawShortBits())));\n+    }\n+\n+    \/**\n+     * Return raw short value.\n+     * @return raw binary16 encoded {@code short} value represented by this object.\n+     * @since 20\n+     *\/\n+    public short float16ToRawShortBits() { return value; }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float16.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -235,0 +235,1 @@\n+        AVX512_FP16,\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug     8308363\n+* @summary Validate compiler IR for FP16 scalar operations.\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @compile -XDenablePrimitiveClasses TestFP16ScalarAdd.java\n+* @run driver compiler.vectorization.TestFP16ScalarAdd\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class TestFP16ScalarAdd {\n+    private static final int count = 1024;\n+\n+    private short[] src;\n+    private short[] dst;\n+    private short res;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestFP16ScalarAdd.class);\n+    }\n+\n+    public TestFP16ScalarAdd() {\n+        src = new short[count];\n+        dst = new short[count];\n+        for (int i = 0; i < count; i++) {\n+            src[i] = Float.floatToFloat16(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\", \"true\"}, counts = {IRNode.ADD_HF, \"> 0\", IRNode.REINTERPRET_S2HF, \"> 0\", IRNode.REINTERPRET_HF2S, \"> 0\"})\n+    public void test1() {\n+        Float16 res = Float16.valueOf((short)0);\n+        for (int i = 0; i < count; i++) {\n+            res = Float16.sum(res, Float16.valueOf(src[i]));\n+            dst[i] = res.float16ToRawShortBits();\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\", \"true\"}, failOn = {IRNode.ADD_HF, IRNode.REINTERPRET_S2HF, IRNode.REINTERPRET_HF2S})\n+    public void test2() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        res = Float16.sum(Float16.sum(Float16.sum(Float16.sum(hf0, hf1), hf2), hf3), hf4).float16ToRawShortBits();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestFP16ScalarAdd.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -222,0 +222,5 @@\n+    public static final String ADD_HF = PREFIX + \"ADD_HF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ADD_HF, \"AddHF\");\n+    }\n+\n@@ -237,0 +242,5 @@\n+    public static final String ADD_VHF = PREFIX + \"ADD_VHF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ADD_VHF, \"AddVHF\");\n+    }\n+\n@@ -1129,0 +1139,10 @@\n+    public static final String REINTERPRET_S2HF = PREFIX + \"REINTERPRET_S2HF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REINTERPRET_S2HF, \"ReinterpretS2HF\");\n+    }\n+\n+    public static final String REINTERPRET_HF2S = PREFIX + \"REINTERPRET_HF2S\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REINTERPRET_HF2S, \"ReinterpretHF2S\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import compiler.lib.ir_framework.IRNode;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawFailOnConstraint.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+        \"avx512_fp16\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test vectorization of Float16.sum operation.\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @compile -XDenablePrimitiveClasses TestFloat16VectorSum.java\n+* @run driver compiler.vectorization.TestFloat16VectorSum\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+\n+public class TestFloat16VectorSum {\n+    private Float16[] input;\n+    private Float16[] output;\n+    private static final int LEN = 2048;\n+    private Random rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestFloat16VectorSum.class);\n+    }\n+\n+    public TestFloat16VectorSum() {\n+        input  = new Float16[LEN];\n+        output = new Float16[LEN];\n+        rng = new Random(42);\n+        for (int i = 0; i < LEN; ++i) {\n+            input[i] = Float16.valueOf(Float.floatToFloat16(rng.nextFloat()));\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\" , \"true\"}, counts = {IRNode.ADD_VHF, \" >= 1\"})\n+    public void vectorSumFloat16() {\n+        for (int i = 0; i < LEN; ++i) {\n+            output[i] = Float16.sum(input[i], input[i]);\n+        }\n+        checkResult();\n+    }\n+\n+    public void checkResult() {\n+        for (int i = 0; i < LEN; ++i) {\n+            Float16 expected = Float16.sum(input[i], input[i]);\n+            if (output[i].float16ToRawShortBits() != expected.float16ToRawShortBits()) {\n+                throw new RuntimeException(\"Invalid result: output[\" + i + \"] = \" + output[i].float16ToRawShortBits() + \" != \" + expected.float16ToRawShortBits());\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorSum.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -64,1 +64,1 @@\n-    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck) {}\n+    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, boolean trivial, String threadLocalName, Consumer<Object> resultCheck) {}\n@@ -68,2 +68,6 @@\n-        Linker.Option stl = Linker.Option.captureCallState(testCase.threadLocalName());\n-        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), stl);\n+        List<Linker.Option> options = new ArrayList<>();\n+        options.add(Linker.Option.captureCallState(testCase.threadLocalName()));\n+        if (testCase.trivial()) {\n+            options.add(Linker.Option.isTrivial());\n+        }\n+        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), options.toArray(Linker.Option[]::new));\n@@ -102,0 +106,4 @@\n+    interface CaseAdder {\n+      void addCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck);\n+    }\n+\n@@ -105,0 +113,4 @@\n+        CaseAdder adder = (nativeTarget, nativeDesc, threadLocalName, resultCheck) -> {\n+          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, false, threadLocalName, resultCheck));\n+          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, true, threadLocalName, resultCheck));\n+        };\n@@ -106,16 +118,16 @@\n-        cases.add(new SaveValuesCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {}));\n-        cases.add(new SaveValuesCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42)));\n-        cases.add(new SaveValuesCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0)));\n-\n-        cases.add(structCase(\"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L)));\n-        cases.add(structCase(\"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                           JAVA_LONG.withName(\"y\"), 42L)));\n-        cases.add(structCase(\"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                            JAVA_LONG.withName(\"y\"), 42L,\n-                                            JAVA_LONG.withName(\"z\"), 42L)));\n-        cases.add(structCase(\"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D)));\n-        cases.add(structCase(\"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                           JAVA_DOUBLE.withName(\"y\"), 42D)));\n-        cases.add(structCase(\"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                            JAVA_DOUBLE.withName(\"y\"), 42D,\n-                                            JAVA_DOUBLE.withName(\"z\"), 42D)));\n+        adder.addCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {});\n+        adder.addCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42));\n+        adder.addCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0));\n+\n+        structCase(adder, \"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L));\n+        structCase(adder, \"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                         JAVA_LONG.withName(\"y\"), 42L));\n+        structCase(adder, \"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                         JAVA_LONG.withName(\"y\"), 42L,\n+                                         JAVA_LONG.withName(\"z\"), 42L));\n+        structCase(adder, \"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D));\n+        structCase(adder, \"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"y\"), 42D));\n+        structCase(adder, \"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"y\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"z\"), 42D));\n@@ -124,2 +136,2 @@\n-            cases.add(new SaveValuesCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {}));\n-            cases.add(new SaveValuesCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {}));\n+            adder.addCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {});\n+            adder.addCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {});\n@@ -131,1 +143,1 @@\n-    static SaveValuesCase structCase(String name, Map<MemoryLayout, Object> fields) {\n+    static void structCase(CaseAdder adder, String name, Map<MemoryLayout, Object> fields) {\n@@ -142,1 +154,1 @@\n-        return new SaveValuesCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n+        adder.addCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    Java_org_openjdk_foreigntest_unnamed_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n+    Java_org_openjdk_foreigntest_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/libLinkerInvokerUnnamed.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/libLinkerInvokerUnnamed.cpp","status":"copied"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8308363\n+ * @summary Test FP16 reduction operations.\n+ * @compile -XDenablePrimitiveClasses FP16ReductionOperations.java\n+ * @run main\/othervm -XX:+EnablePrimitiveClasses -XX:-TieredCompilation -Xbatch FP16ReductionOperations\n+ *\/\n+\n+import java.util.Random;\n+\n+public class FP16ReductionOperations {\n+\n+    public static Random r = new Random(1024);\n+\n+    public static short test_reduction_add_constants() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        return Float16.sum(Float16.sum(Float16.sum(Float16.sum(hf0, hf1), hf2), hf3), hf4).float16ToRawShortBits();\n+    }\n+\n+    public static short expected_reduction_add_constants() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        return Float.floatToFloat16(Float.float16ToFloat(hf0.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf1.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf2.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf3.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf4.float16ToRawShortBits()));\n+    }\n+\n+    public static boolean compare(short actual, short expected) {\n+        return !((0xFFFF & actual) == (0xFFFF & expected));\n+    }\n+\n+    public static void test_reduction_constants(char oper) {\n+        short actual = 0;\n+        short expected = 0;\n+        switch(oper) {\n+            case '+' ->  {\n+                             actual = test_reduction_add_constants();\n+                             expected = expected_reduction_add_constants();\n+                         }\n+            default  ->  throw new AssertionError(\"Unsupported Operation.\");\n+        }\n+        if (compare(actual,expected)) {\n+            throw new AssertionError(\"Result mismatch!, expected = \" + expected + \" actual = \" + actual);\n+        }\n+    }\n+\n+    public static short test_reduction_add(short [] arr) {\n+        Float16 res = Float16.valueOf((short)0);\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float16.sum(res, Float16.valueOf(arr[i]));\n+        }\n+        return res.float16ToRawShortBits();\n+    }\n+\n+    public static short expected_reduction_add(short [] arr) {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) + Float.float16ToFloat(arr[i]));\n+        }\n+        return res;\n+    }\n+\n+    public static void test_reduction(char oper, short [] arr) {\n+        short actual = 0;\n+        short expected = 0;\n+        switch(oper) {\n+            case '+' ->  {\n+                             actual = test_reduction_add(arr);\n+                             expected = expected_reduction_add(arr);\n+                         }\n+            default  ->  throw new AssertionError(\"Unsupported Operation.\");\n+        }\n+        if (compare(actual,expected)) {\n+            throw new AssertionError(\"Result mismatch!, expected = \" + expected + \" actual = \" + actual);\n+        }\n+    }\n+\n+    public static short [] get_fp16_array(int size) {\n+        short [] arr = new short[size];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = Float.floatToFloat16(r.nextFloat());\n+        }\n+        return arr;\n+    }\n+\n+    public static void main(String [] args) {\n+        int res = 0;\n+        short [] input = get_fp16_array(1024);\n+        short [] special_values = {\n+              32256,          \/\/ NAN\n+              31744,          \/\/ +Inf\n+              (short)-1024,   \/\/ -Inf\n+              0,              \/\/ +0.0\n+              (short)-32768,  \/\/ -0.0\n+        };\n+        for (int i = 0;  i < 1000; i++) {\n+            test_reduction('+', input);\n+            test_reduction('+', special_values);\n+            test_reduction_constants('+');\n+        }\n+        System.out.println(\"PASS\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ReductionOperations.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8308363\n+ * @summary Initial compiler support for Float16.add operation.\n+ * @compile -XDenablePrimitiveClasses FP16ScalarOperations.java\n+ * @run main\/othervm -XX:+EnablePrimitiveClasses -XX:-TieredCompilation -Xbatch FP16ScalarOperations\n+ *\/\n+\n+import java.util.Random;\n+\n+public class FP16ScalarOperations {\n+\n+    public static Random r = new Random(1024);\n+\n+    public static short actual_value(char oper, short val1, short val2) {\n+        Float16 obj1 = Float16.valueOf(val1);\n+        Float16 obj2 = Float16.valueOf(val2);\n+        switch ((int)oper) {\n+            case '+' : return Float16.sum(obj1, obj2).float16ToRawShortBits();\n+            default  : throw new AssertionError(\"Unsupported Operation!\");\n+        }\n+    }\n+\n+    public static void test_add(short [] arr1, short arr2[]) {\n+        for (int i = 0; i < arr1.length; i++) {\n+            validate('+', arr1[i], arr2[i]);\n+        }\n+    }\n+\n+    public static short expected_value(char oper, short input1, short input2) {\n+        switch((int)oper) {\n+            case '+' : return Float.floatToFloat16(Float.float16ToFloat(input1) + Float.float16ToFloat(input2));\n+            default  : throw new AssertionError(\"Unsupported Operation!\");\n+        }\n+    }\n+\n+    public static boolean compare(short actual, short expected) {\n+        return !((0xFFFF & actual) == (0xFFFF & expected));\n+    }\n+\n+    public static void validate(char oper, short input1, short input2) {\n+        short actual = actual_value(oper, input1, input2);\n+        short expected = expected_value(oper, input1, input2);\n+        if (compare(actual, expected)) {\n+            throw new AssertionError(\"Test Failed: \" + input1 + \" + \" + input2 + \" : \" + actual + \" != \" + expected);\n+        }\n+    }\n+\n+    public static short [] get_fp16_array(int size) {\n+        short [] arr = new short[size];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = Float.floatToFloat16(r.nextFloat());\n+        }\n+        return arr;\n+    }\n+\n+    public static void main(String [] args) {\n+        int res = 0;\n+        short [] input1 = get_fp16_array(1024);\n+        short [] input2 = get_fp16_array(1024);\n+        short [] special_values = {\n+              32256,          \/\/ NAN\n+              31744,          \/\/ +Inf\n+              (short)-1024,   \/\/ -Inf\n+              0,              \/\/ +0.0\n+              (short)-32768,  \/\/ -0.0\n+        };\n+        for (int i = 0;  i < 1000; i++) {\n+            test_add(input1, input2);\n+            test_add(special_values, special_values);\n+        }\n+        System.out.println(\"PASS\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ScalarOperations.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,613 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8233223\n+ * @summary Interoperability tests with Amazon's CA1, CA2, CA3, and CA4\n+ * @build ValidatePathWithParams\n+ * @run main\/othervm -Djava.security.debug=certpath AmazonCA OCSP\n+ * @run main\/othervm -Djava.security.debug=certpath AmazonCA CRL\n+ *\/\n+\n+\/*\n+ * Obtain TLS test artifacts for Amazon CAs from:\n+ *\n+ * Amazon Root CA 1\n+ *     Valid - https:\/\/good.sca1a.amazontrust.com\/\n+ *     Revoked - https:\/\/revoked.sca1a.amazontrust.com\/\n+ * Amazon Root CA 2\n+ *     Valid - https:\/\/good.sca2a.amazontrust.com\/\n+ *     Revoked - https:\/\/revoked.sca2a.amazontrust.com\/\n+ * Amazon Root CA 3\n+ *     Valid - https:\/\/good.sca3a.amazontrust.com\/\n+ *     Revoked - https:\/\/revoked.sca3a.amazontrust.com\/\n+ * Amazon Root CA 4\n+ *     Valid - https:\/\/good.sca4a.amazontrust.com\/\n+ *     Revoked - https:\/\/revoked.sca4a.amazontrust.com\/\n+ *\/\n+public class AmazonCA {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ValidatePathWithParams pathValidator = new ValidatePathWithParams(null);\n+\n+        if (args.length >= 1 && \"CRL\".equalsIgnoreCase(args[0])) {\n+            pathValidator.enableCRLCheck();\n+        } else {\n+            \/\/ OCSP check by default\n+            pathValidator.enableOCSPCheck();\n+        }\n+\n+        new AmazonCA_1().runTest(pathValidator);\n+        new AmazonCA_2().runTest(pathValidator);\n+        new AmazonCA_3().runTest(pathValidator);\n+        new AmazonCA_4().runTest(pathValidator);\n+    }\n+}\n+\n+class AmazonCA_1 {\n+\n+    \/\/ Owner: CN=Amazon RSA 2048 M02, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 1, O=Amazon, C=US\n+    \/\/ Serial number: 773124a4bcbd44ec7b53beaf194842d3a0fa1\n+    \/\/ Valid from: Tue Aug 23 15:25:30 PDT 2022 until: Fri Aug 23 15:25:30 PDT 2030\n+    private static final String INT_VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIEXjCCA0agAwIBAgITB3MSSkvL1E7HtTvq8ZSELToPoTANBgkqhkiG9w0BAQsF\\n\" +\n+            \"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\\n\" +\n+            \"b24gUm9vdCBDQSAxMB4XDTIyMDgyMzIyMjUzMFoXDTMwMDgyMzIyMjUzMFowPDEL\\n\" +\n+            \"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT\\n\" +\n+            \"QSAyMDQ4IE0wMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALtDGMZa\\n\" +\n+            \"qHneKei1by6+pUPPLljTB143Si6VpEWPc6mSkFhZb\/6qrkZyoHlQLbDYnI2D7hD0\\n\" +\n+            \"sdzEqfnuAjIsuXQLG3A8TvX6V3oFNBFVe8NlLJHvBseKY88saLwufxkZVwk74g4n\\n\" +\n+            \"WlNMXzla9Y5F3wwRHwMVH443xGz6UtGSZSqQ94eFx5X7Tlqt8whi8qCaKdZ5rNak\\n\" +\n+            \"+r9nUThOeClqFd4oXych\/\/Rc7Y0eX1KNWHYSI1Nk31mYgiK3JvH063g+K9tHA63Z\\n\" +\n+            \"eTgKgndlh+WI+zv7i44HepRZjA1FYwYZ9Vv\/9UkC5Yz8\/yU65fgjaE+wVHM4e\/Yy\\n\" +\n+            \"C2osrPWE7gJ+dXMCAwEAAaOCAVowggFWMBIGA1UdEwEB\/wQIMAYBAf8CAQAwDgYD\\n\" +\n+            \"VR0PAQH\/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNV\\n\" +\n+            \"HQ4EFgQUwDFSzVpQw4J8dHHOy+mc+XrrguIwHwYDVR0jBBgwFoAUhBjMhTTsvAyU\\n\" +\n+            \"lC4IWZzHshBOCggwewYIKwYBBQUHAQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8v\\n\" +\n+            \"b2NzcC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDov\\n\" +\n+            \"L2NydC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbS9yb290Y2ExLmNlcjA\/BgNVHR8E\\n\" +\n+            \"ODA2MDSgMqAwhi5odHRwOi8vY3JsLnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jv\\n\" +\n+            \"b3RjYTEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IB\\n\" +\n+            \"AQAtTi6Fs0Azfi+iwm7jrz+CSxHH+uHl7Law3MQSXVtR8RV53PtR6r\/6gNpqlzdo\\n\" +\n+            \"Zq4FKbADi1v9Bun8RY8D51uedRfjsbeodizeBB8nXmeyD33Ep7VATj4ozcd31YFV\\n\" +\n+            \"fgRhvTSxNrrTlNpWkUk0m3BMPv8sg381HhA6uEYokE5q9uws\/3YkKqRiEz3TsaWm\\n\" +\n+            \"JqIRZhMbgAfp7O7FUwFIb7UIspogZSKxPIWJpxiPo3TcBambbVtQOcNRWz5qCQdD\\n\" +\n+            \"slI2yayq0n2TXoHyNCLEH8rpsJRVILFsg0jc7BaFrMnF462+ajSehgj12IidNeRN\\n\" +\n+            \"4zl+EoNaWdpnWndvSpAEkq2P\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=Amazon RSA 2048 M01, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 1, O=Amazon, C=US\n+    \/\/ Serial number: 77312380b9d6688a33b1ed9bf9ccda68e0e0f\n+    \/\/ Valid from: Tue Aug 23 15:21:28 PDT 2022 until: Fri Aug 23 15:21:28 PDT 2030\n+    private static final String INT_REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIEXjCCA0agAwIBAgITB3MSOAudZoijOx7Zv5zNpo4ODzANBgkqhkiG9w0BAQsF\\n\" +\n+            \"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\\n\" +\n+            \"b24gUm9vdCBDQSAxMB4XDTIyMDgyMzIyMjEyOFoXDTMwMDgyMzIyMjEyOFowPDEL\\n\" +\n+            \"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT\\n\" +\n+            \"QSAyMDQ4IE0wMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOtxLKnL\\n\" +\n+            \"H4gokjIwr4pXD3i3NyWVVYesZ1yX0yLI2qIUZ2t88Gfa4gMqs1YSXca1R\/lnCKeT\\n\" +\n+            \"epWSGA+0+fkQNpp\/L4C2T7oTTsddUx7g3ZYzByDTlrwS5HRQQqEFE3O1T5tEJP4t\\n\" +\n+            \"f+28IoXsNiEzl3UGzicYgtzj2cWCB41eJgEmJmcf2T8TzzK6a614ZPyq\/w4CPAff\\n\" +\n+            \"nAV4coz96nW3AyiE2uhuB4zQUIXvgVSycW7sbWLvj5TDXunEpNCRwC4kkZjK7rol\\n\" +\n+            \"jtT2cbb7W2s4Bkg3R42G3PLqBvt2N32e\/0JOTViCk8\/iccJ4sXqrS1uUN4iB5Nmv\\n\" +\n+            \"JK74csVl+0u0UecCAwEAAaOCAVowggFWMBIGA1UdEwEB\/wQIMAYBAf8CAQAwDgYD\\n\" +\n+            \"VR0PAQH\/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNV\\n\" +\n+            \"HQ4EFgQUgbgOY4qJEhjl+js7UJWf5uWQE4UwHwYDVR0jBBgwFoAUhBjMhTTsvAyU\\n\" +\n+            \"lC4IWZzHshBOCggwewYIKwYBBQUHAQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8v\\n\" +\n+            \"b2NzcC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDov\\n\" +\n+            \"L2NydC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbS9yb290Y2ExLmNlcjA\/BgNVHR8E\\n\" +\n+            \"ODA2MDSgMqAwhi5odHRwOi8vY3JsLnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jv\\n\" +\n+            \"b3RjYTEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IB\\n\" +\n+            \"AQCtAN4CBSMuBjJitGuxlBbkEUDeK\/pZwTXv4KqPK0G50fOHOQAd8j21p0cMBgbG\\n\" +\n+            \"kfMHVwLU7b0XwZCav0h1ogdPMN1KakK1DT0VwA\/+hFvGPJnMV1Kx2G4S1ZaSk0uU\\n\" +\n+            \"5QfoiYIIano01J5k4T2HapKQmmOhS\/iPtuo00wW+IMLeBuKMn3OLn005hcrOGTad\\n\" +\n+            \"hcmeyfhQP7Z+iKHvyoQGi1C0ClymHETx\/chhQGDyYSWqB\/THwnN15AwLQo0E5V9E\\n\" +\n+            \"SJlbe4mBlqeInUsNYugExNf+tOiybcrswBy8OFsd34XOW3rjSUtsuafd9AWySa3h\\n\" +\n+            \"xRRrwszrzX\/WWGm6wyB+f7C4\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=valid.rootca1.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon RSA 2048 M02, O=Amazon, C=US\n+    \/\/ Serial number: 60c6e837b2e7586d8464eb34f4a85fe\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIGKDCCBRCgAwIBAgIQBgxug3sudYbYRk6zT0qF\/jANBgkqhkiG9w0BAQsFADA8\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g\\n\" +\n+            \"UlNBIDIwNDggTTAyMB4XDTIzMDUxMDAwMDAwMFoXDTI0MDYwNzIzNTk1OVowLTEr\\n\" +\n+            \"MCkGA1UEAxMidmFsaWQucm9vdGNhMS5kZW1vLmFtYXpvbnRydXN0LmNvbTCCASIw\\n\" +\n+            \"DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL3hA+omhUcO8nYO8\/+dkpbYz8WI\\n\" +\n+            \"1ms7Y7JA2pPFfp2N\/aWcf6m5ORm1BkyGLOttjTu318Qpa9eahQ1Pi3RNe3BtqjD9\\n\" +\n+            \"jcHncpwAFMsXy1beZA7sZ7AA4vKltA3t6yrU5ruTLUGQwUndeIBBSTW5QpdT9I\/p\\n\" +\n+            \"EM7d+Miwre63kofbJ1lVPAJvN\/udMVqGWNF8V5qscklUUHoSKA3FWWsiCyIgnthg\\n\" +\n+            \"G3u6R1KH66Qionp0ho\/ttvrBCI0C\/bdrdH+wybFv8oFFvAW2U9xn2Azt47\/2kHHm\\n\" +\n+            \"tTRjrgufhDbcz\/MLR6hwBXAJuwVvJZmSqe7B4IILFexu6wjxZfyqVm2FMr8CAwEA\\n\" +\n+            \"AaOCAzMwggMvMB8GA1UdIwQYMBaAFMAxUs1aUMOCfHRxzsvpnPl664LiMB0GA1Ud\\n\" +\n+            \"DgQWBBSkrnsTnjwYhDRAeLy\/9FXm\/7hApDBlBgNVHREEXjBcgiJ2YWxpZC5yb290\\n\" +\n+            \"Y2ExLmRlbW8uYW1hem9udHJ1c3QuY29tghpnb29kLnNjYTBhLmFtYXpvbnRydXN0\\n\" +\n+            \"LmNvbYIaZ29vZC5zY2ExYS5hbWF6b250cnVzdC5jb20wDgYDVR0PAQH\/BAQDAgWg\\n\" +\n+            \"MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjA7BgNVHR8ENDAyMDCgLqAs\\n\" +\n+            \"hipodHRwOi8vY3JsLnIybTAyLmFtYXpvbnRydXN0LmNvbS9yMm0wMi5jcmwwEwYD\\n\" +\n+            \"VR0gBAwwCjAIBgZngQwBAgEwdQYIKwYBBQUHAQEEaTBnMC0GCCsGAQUFBzABhiFo\\n\" +\n+            \"dHRwOi8vb2NzcC5yMm0wMi5hbWF6b250cnVzdC5jb20wNgYIKwYBBQUHMAKGKmh0\\n\" +\n+            \"dHA6Ly9jcnQucjJtMDIuYW1hem9udHJ1c3QuY29tL3IybTAyLmNlcjAMBgNVHRMB\\n\" +\n+            \"Af8EAjAAMIIBfgYKKwYBBAHWeQIEAgSCAW4EggFqAWgAdgDuzdBk1dsazsVct520\\n\" +\n+            \"zROiModGfLzs3sNRSFlGcR+1mwAAAYgHvXWVAAAEAwBHMEUCICAs74qT1f9ufSr5\\n\" +\n+            \"PgQqtQFiXBbmbb3i4xwVV78USU5NAiEA\/iJEfnTG+hZZaHYv2wVbg6tUY8fQgIhI\\n\" +\n+            \"2rbl6PrD9FIAdgBIsONr2qZHNA\/lagL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAYgH\\n\" +\n+            \"vXWWAAAEAwBHMEUCIQDf2nWyee\/5+vSgk\/O8P0BFvXYu89cyAugZHyd919BdAgIg\\n\" +\n+            \"UnGGpQtZmWnPMmdgpzI7jrCLuC370Tn0i7Aktdzj2X8AdgDatr9rP7W2Ip+bwrtc\\n\" +\n+            \"a+hwkXFsu1GEhTS9pD0wSNf7qwAAAYgHvXVpAAAEAwBHMEUCIGN6cT+6uwDospXe\\n\" +\n+            \"gMa8b38oXouXUT66X2gOiJ0SoRyQAiEAjDMu2vEll5tRpUvU8cD4gR2xV4hqoDxx\\n\" +\n+            \"Q+QGW+PvJxcwDQYJKoZIhvcNAQELBQADggEBACtxC3LlQvULeI3lt7ZYFSWndEhm\\n\" +\n+            \"tNUotoeKSXJXdoIpqSr10bzMPX9SHvemgOUtzP3JNqWPHw1uW9YFyeDE6yWj\/B13\\n\" +\n+            \"Xj1hv1cqYIwyaOZBerU\/9PT5PaCn20AC9DHbc7iBv+zs+DYiqlAFJ1GVaprwLul4\\n\" +\n+            \"8wp3gnC3Hjb8NykydCo6vw0AJ2UzjpjiTyVZ93jITzLOiboOUa1gQGnojzWlYaet\\n\" +\n+            \"sXe+RDylBp\/Wuj1ZS7v\/etltzYm5GanPi4y\/p7Ta3Uky6std\/GM6XbPRdBEFboFR\\n\" +\n+            \"B2IP0divd9c74Q+tLgpsAz5yXm9LtYPMcEPC2YRN2PgBg67c5+A7eIOluuw=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=revoked.rootca1.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon RSA 2048 M01, O=Amazon, C=US\n+    \/\/ Serial number: e1023665b1268d788cc25bf69a9d05e\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIGMjCCBRqgAwIBAgIQDhAjZlsSaNeIzCW\/aanQXjANBgkqhkiG9w0BAQsFADA8\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g\\n\" +\n+            \"UlNBIDIwNDggTTAxMB4XDTIzMDUxMDAwMDAwMFoXDTI0MDYwNzIzNTk1OVowLzEt\\n\" +\n+            \"MCsGA1UEAxMkcmV2b2tlZC5yb290Y2ExLmRlbW8uYW1hem9udHJ1c3QuY29tMIIB\\n\" +\n+            \"IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxSPd1PWACxZohFCAJT1JWuXK\\n\" +\n+            \"GY29wZZ9yY0zoiq6+qYiUIU0crktytUNNI1ZpW\/3qXpEw2ZQkM6WF1LshXtwGwrA\\n\" +\n+            \"zJwSeX1L9T5rOKhoBvoFeqfX7xu4VBM1\/fDGt5X+NRFfD9Op9UfK5OsnL05TYach\\n\" +\n+            \"rdnfOA5wKGvMgFiN5CeOD0AtumXSuAnTZC85ojJTHjPF+hqV893WvrrUxLyyxtvh\\n\" +\n+            \"lq\/WttFOjhfQu2IkfyDAFiH939uzUi0WSTAdsbsHuko5mDTDnOfMRbaaWZu0At01\\n\" +\n+            \"EgaIPeK+kGdi7EYwVndIwTKLeQ4mjIM8aj8Heg\/y2hZ0kOmfCUZdUmJFlNoCIQID\\n\" +\n+            \"AQABo4IDOzCCAzcwHwYDVR0jBBgwFoAUgbgOY4qJEhjl+js7UJWf5uWQE4UwHQYD\\n\" +\n+            \"VR0OBBYEFMeBhIOkuWUY4DYqFrfgbD2eUeFtMG0GA1UdEQRmMGSCJHJldm9rZWQu\\n\" +\n+            \"cm9vdGNhMS5kZW1vLmFtYXpvbnRydXN0LmNvbYIdcmV2b2tlZC5zY2EwYS5hbWF6\\n\" +\n+            \"b250cnVzdC5jb22CHXJldm9rZWQuc2NhMWEuYW1hem9udHJ1c3QuY29tMA4GA1Ud\\n\" +\n+            \"DwEB\/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwOwYDVR0f\\n\" +\n+            \"BDQwMjAwoC6gLIYqaHR0cDovL2NybC5yMm0wMS5hbWF6b250cnVzdC5jb20vcjJt\\n\" +\n+            \"MDEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMHUGCCsGAQUFBwEBBGkwZzAtBggr\\n\" +\n+            \"BgEFBQcwAYYhaHR0cDovL29jc3AucjJtMDEuYW1hem9udHJ1c3QuY29tMDYGCCsG\\n\" +\n+            \"AQUFBzAChipodHRwOi8vY3J0LnIybTAxLmFtYXpvbnRydXN0LmNvbS9yMm0wMS5j\\n\" +\n+            \"ZXIwDAYDVR0TAQH\/BAIwADCCAX4GCisGAQQB1nkCBAIEggFuBIIBagFoAHYA7s3Q\\n\" +\n+            \"ZNXbGs7FXLedtM0TojKHRny87N7DUUhZRnEftZsAAAGIB72TggAABAMARzBFAiAZ\\n\" +\n+            \"naLbRHRuaRrE304GSuWX\/79MU\/e+SSlr0cNJ0kNNaAIhAPnz9HayL4txhkTEZiMs\\n\" +\n+            \"nttNnNqD17I0J17JLVOF4i\/4AHYASLDja9qmRzQP5WoC+p0w6xxSActW3SyB2bu\/\\n\" +\n+            \"qznYhHMAAAGIB72TmwAABAMARzBFAiEAgEqT7CYGQ\/u36\/3YcxBH78QfknI9kgcY\\n\" +\n+            \"sgJLkurUF6cCIFZZ\/b803+ek6o+bmdV\/uVx2UlskAyyolZ2okBAb6IscAHYA2ra\/\\n\" +\n+            \"az+1tiKfm8K7XGvocJFxbLtRhIU0vaQ9MEjX+6sAAAGIB72TbQAABAMARzBFAiEA\\n\" +\n+            \"6z2RSoK263hvYF71rj1d0TpC70\/6zagSRR4glHOT6IACICYvaMAnrCNSTSiZ20Wz\\n\" +\n+            \"Ju5roTippO3BWKhQYrTKZuu4MA0GCSqGSIb3DQEBCwUAA4IBAQB4S1JGulFpMIaP\\n\" +\n+            \"NtLUJmjWz8eexQdWLDVF+H8dd6xpZgpiYtig\/Ynphzuk1IIF8DkT3CeK\/9vrezgI\\n\" +\n+            \"igNjneN9B4eIuzi\/rJzIKeUwpZ2k5D+36Ab4esseoc+TopmNerw8hidt2g818jER\\n\" +\n+            \"D71ppSMakeQFPGe\/Hs2\/cVa\/G1DNVcU2XAut45yRZ\/+xsZ0\/mcBDVsG9P5uGCN5O\\n\" +\n+            \"7SAp4J959WnKDqgVuU9WowPE5IjmS9BAv2gjniFYdDV2yksyf7+8edHd1KfSVX06\\n\" +\n+            \"pLx6CuCVZGJFG4Q2Aa1YAh1Wvt9hqWeXXpNRO2\/wChL5rhT4GajsrGepsk4bjxYX\\n\" +\n+            \"Wf2iZ8mX\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    public void runTest(ValidatePathWithParams pathValidator) throws Exception {\n+\n+        \/\/ Validate valid\n+        pathValidator.validate(new String[]{VALID, INT_VALID},\n+                ValidatePathWithParams.Status.GOOD, null, System.out);\n+\n+        \/\/ Validate Revoked\n+        pathValidator.validate(new String[]{REVOKED, INT_REVOKED},\n+                ValidatePathWithParams.Status.REVOKED,\n+                \"Mon May 15 13:36:57 PDT 2023\", System.out);\n+    }\n+}\n+\n+class AmazonCA_2 {\n+\n+    \/\/ Owner: CN=Amazon RSA 4096 M02, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 2, O=Amazon, C=US\n+    \/\/ Serial number: 773125b0c34c3c940299a9f04a39e5a52ccd9\n+    \/\/ Valid from: Tue Aug 23 15:29:13 PDT 2022 until: Fri Aug 23 15:29:13 PDT 2030\n+    private static final String INT = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIGXjCCBEagAwIBAgITB3MSWww0w8lAKZqfBKOeWlLM2TANBgkqhkiG9w0BAQwF\\n\" +\n+            \"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\\n\" +\n+            \"b24gUm9vdCBDQSAyMB4XDTIyMDgyMzIyMjkxM1oXDTMwMDgyMzIyMjkxM1owPDEL\\n\" +\n+            \"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT\\n\" +\n+            \"QSA0MDk2IE0wMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMGMl\/pZ\\n\" +\n+            \"1OsxHY9gw\/YfdON4mmrANkPwi7z2djHA5ELt\/vRI3Su0le6OoipLf03iyoCnYy4Y\\n\" +\n+            \"rpfTbhyDriE8NJpps2ODJ5W1h0rz6FM1Q5Jt35wfk+4CEfATBTegHVlUJ0rJgzK5\\n\" +\n+            \"Yl\/jrk12ZsC4ZeRn54shszcK6bHj4LZIHXhrYIIfetBMMD8V7hlhd54AclEWutUV\\n\" +\n+            \"eBEjkSCzDSk+pQKIjCL0crqvRSPvUNry\/BV65zfGmceSYxpcLmV7k7Spwpo+1z8w\\n\" +\n+            \"+Odfnx2vsm7olPldfaThqk6fXBtInORl4Ef32xF3VDT13UeXtQPolFhnp8UOci64\\n\" +\n+            \"bW+R8tbtGpUXIA8Dhr8SgYPH6NW4jhUD4+AG8yer8ctA1Hl9tq+6tYr26q3yuCLu\\n\" +\n+            \"5rwJdfMG634fWIRXSj+GJi8SfAdGtPyXwu5799NWesV4vUkrkSXdIBK4TQCuK+jx\\n\" +\n+            \"aJ5Y+Zo2l3GFsWyMPNORLjoQXbjF6KAyjTyICLq9VzoQKhyx4Ll2CNrQv8CxqtDC\\n\" +\n+            \"GvXi9kREJYAF6lscOB0xglAAF5lndcaNkVHEVOMdg9ZZtdJywHWm8Qed1Wty2qr+\\n\" +\n+            \"hmA7booWQNRE12nW1niC5D4cP2ykPK9HSgb7xWdUF32VidUc9tNKM6xKjSd\/R\/tP\\n\" +\n+            \"p+XAybNSwEooPt3\/OvyhpVRjLuWoqqbClTKdAgMBAAGjggFaMIIBVjASBgNVHRMB\\n\" +\n+            \"Af8ECDAGAQH\/AgEAMA4GA1UdDwEB\/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcD\\n\" +\n+            \"AQYIKwYBBQUHAwIwHQYDVR0OBBYEFJ5xHxodk6nZLY7MSFM\/A1TznuZmMB8GA1Ud\\n\" +\n+            \"IwQYMBaAFLAM8Eww9AVYAkj9M+VSr0uE42ZSMHsGCCsGAQUFBwEBBG8wbTAvBggr\\n\" +\n+            \"BgEFBQcwAYYjaHR0cDovL29jc3Aucm9vdGNhMi5hbWF6b250cnVzdC5jb20wOgYI\\n\" +\n+            \"KwYBBQUHMAKGLmh0dHA6Ly9jcnQucm9vdGNhMi5hbWF6b250cnVzdC5jb20vcm9v\\n\" +\n+            \"dGNhMi5jZXIwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC5yb290Y2EyLmFt\\n\" +\n+            \"YXpvbnRydXN0LmNvbS9yb290Y2EyLmNybDATBgNVHSAEDDAKMAgGBmeBDAECATAN\\n\" +\n+            \"BgkqhkiG9w0BAQwFAAOCAgEAl1GgKXOn0j1MWT1KJVSewQ28SGbie3UwZj1dMsjJ\\n\" +\n+            \"amCrQPn2ngSNbLm9+ulFiBDU8xKR9Zx3tZps55IUKWLUPkfMC+vkV7asDBqqzzE0\\n\" +\n+            \"F\/MkekgPfOjx1V9S6Wfg3sSg+9KcluurXFElruqKfOm4cqmkV776X1G+AaaQ7mlU\\n\" +\n+            \"giCYi6NqRQSyhn8zrKkNnbO6QL5a9ICC47kiZYRAR\/hRvZOt11QUK5tCMXJXo0iO\\n\" +\n+            \"4XKkMu+jdnehP1kh4xuZhYznIgKK6MJIITFI\/Jj89U4SOPncyuS94sUuE2EqvvO\/\\n\" +\n+            \"t81qeoey6wThz5iRbU\/0CvDFnTMgebWGUZ2UZJ+az\/rb3KYXGfVWasLIonkvYT7z\\n\" +\n+            \"vHOGNAA9oQ8TTgPOmPfSVyfpplKtO\/aybWp5QSH2csIwuvw5dkmpkc42iD57XHob\\n\" +\n+            \"5LbMJg99z3vQBmod\/ipmOpND95\/BeA2mllBZgZ53S0nvDXDzbzR9Fd81PAz9Qruo\\n\" +\n+            \"dOJKcD6plKQjZjkLzNh1v\/RoCFO8kiJGE4UBMTM8FUk0DXH4bALII4wwmDelrSUu\\n\" +\n+            \"lKvDTDxZvPF4dbEXICNPd51EMGPgETxwboOV+bzWFVI0IWQ8PhZ2VuMPDk2taOMp\\n\" +\n+            \"NsuLtlYc2twPb9r\/Hvgv7G6+ItpBHZwOVt1oI3pHbjMp7P3pOZSPr6G1WkNy9mX8\\n\" +\n+            \"rVc=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=valid.rootca2.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon RSA 4096 M02, O=Amazon, C=US\n+    \/\/ Serial number: 662f7646d76193cbb76946d111e49fa\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIICzCCBfOgAwIBAgIQBmL3ZG12GTy7dpRtER5J+jANBgkqhkiG9w0BAQwFADA8\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g\\n\" +\n+            \"UlNBIDQwOTYgTTAyMB4XDTIzMDUxMDAwMDAwMFoXDTI0MDYwNzIzNTk1OVowLTEr\\n\" +\n+            \"MCkGA1UEAxMidmFsaWQucm9vdGNhMi5kZW1vLmFtYXpvbnRydXN0LmNvbTCCAiIw\\n\" +\n+            \"DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAON5EbEKoBiujI7Ja8mLZLJbaY7f\\n\" +\n+            \"RtoWIjU\/F0l9ueWFogXmEaA1jWsl97F3WTHTyGKz6ChCjPMSyoXXpY+yoE90QUyX\\n\" +\n+            \"w35uWEhNrc40drMJkyN+QXitSrH346GCOKvpYVvu18UD4W8hDhg8vvbOQYhtmSf7\\n\" +\n+            \"Rfrs7\/qUdXpzpvR9VjWktbQAzJT8fB\/jFNjNQJTknynjGiYO5GF51+peOCLK6qw8\\n\" +\n+            \"9kKYEigR4K8\/aWL283rC4xRxZqVioy433VG02l\/Fwdv8o\/vL9YYIqkyspCB9fpFw\\n\" +\n+            \"Q50yYrwEomxuOz7rXhmdfeNaFYuyTtOUSKff6p2oqO0S7pcLujUVMlO4dYBDELQF\\n\" +\n+            \"cabByNjwblviCtGKJMIzD6Thkgamp3iXQgcU498+P5r7N5CYbMmkJEdcuILg+bgJ\\n\" +\n+            \"\/LUUTT+IMt2txYlO\/ld3N0EHlgVt7rztW5mtm6Ba8jN7cLSh7ZWu6Fr1+oK7bl5T\\n\" +\n+            \"wPxSfqT5W3BwQKS3YptIoKEWUb+VNnS\/dYx\/7IspF9+z6kw4g+V2EY9M4ZYNakzM\\n\" +\n+            \"AI7KIj4thMFoWeYrJq0dUMZ297QCBPRdAwh9hhkq2LYi2x8tMUtcBnhb\/q75sO+E\\n\" +\n+            \"icPqFVv7iMDZ\/8Xep+0UoClF3JGmZW3UNtwcbi7Pn\/OqtaMi7E8xnHUgc4ZchtXO\\n\" +\n+            \"v8VtVvDeZAlY5TjVAgMBAAGjggMWMIIDEjAfBgNVHSMEGDAWgBSecR8aHZOp2S2O\\n\" +\n+            \"zEhTPwNU857mZjAdBgNVHQ4EFgQUnGekBRKIZBYgCEajbpCMC24bp2owSQYDVR0R\\n\" +\n+            \"BEIwQIIidmFsaWQucm9vdGNhMi5kZW1vLmFtYXpvbnRydXN0LmNvbYIaZ29vZC5z\\n\" +\n+            \"Y2EyYS5hbWF6b250cnVzdC5jb20wDgYDVR0PAQH\/BAQDAgWgMB0GA1UdJQQWMBQG\\n\" +\n+            \"CCsGAQUFBwMBBggrBgEFBQcDAjA7BgNVHR8ENDAyMDCgLqAshipodHRwOi8vY3Js\\n\" +\n+            \"LnI0bTAyLmFtYXpvbnRydXN0LmNvbS9yNG0wMi5jcmwwEwYDVR0gBAwwCjAIBgZn\\n\" +\n+            \"gQwBAgEwdQYIKwYBBQUHAQEEaTBnMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5y\\n\" +\n+            \"NG0wMi5hbWF6b250cnVzdC5jb20wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQucjRt\\n\" +\n+            \"MDIuYW1hem9udHJ1c3QuY29tL3I0bTAyLmNlcjAMBgNVHRMBAf8EAjAAMIIBfQYK\\n\" +\n+            \"KwYBBAHWeQIEAgSCAW0EggFpAWcAdgDuzdBk1dsazsVct520zROiModGfLzs3sNR\\n\" +\n+            \"SFlGcR+1mwAAAYgHvX9QAAAEAwBHMEUCIQD8qPPCLL2Grd+\/YNALWqAq7LC7YBaa\\n\" +\n+            \"dNg5+6Q4kRDEqgIgEkf\/UMsMNfTRaOZvoOgAK9\/F0xX\/CfdcUTjULhmoA+cAdQBI\\n\" +\n+            \"sONr2qZHNA\/lagL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAYgHvX8UAAAEAwBGMEQC\\n\" +\n+            \"IBVFDtapMMWJOqyu8Cv6XEhFmbU8N33c2owed\/\/pa80xAiAT9T6Wba3B9DFUmrL5\\n\" +\n+            \"cCGKLqciIEUPhPbvjCuUepelrAB2ANq2v2s\/tbYin5vCu1xr6HCRcWy7UYSFNL2k\\n\" +\n+            \"PTBI1\/urAAABiAe9ft8AAAQDAEcwRQIhAP2XDC\/RlmVtH4WrfSwVosR\/f\/WXRhG5\\n\" +\n+            \"mk9Nwq+ZOIriAiAopPXSH7VwXa3bEAIiTwcV1l10QIDZaIPCU5olknU5CjANBgkq\\n\" +\n+            \"hkiG9w0BAQwFAAOCAgEAFuwMIJdP5rgz6cqOIj2EgF2OU8CUGi\/wJ45BomXWv4Rv\\n\" +\n+            \"U5mOKB+jHOGZZC9dncjAMa44RwoF2I7\/8Y3qLVaoNm46ObvvS+6UvzTcyQqXM7JU\\n\" +\n+            \"cSmdlf9DkspjKPDvMBokVrM4ak5AoxUjuru5qaia3nvbxq7XKO9\/FGUaUaU8Xlsd\\n\" +\n+            \"V6Fo8VmNwFc88VCqOp8eI\/IicHxMDLl8TKXMvr3CYh8A9nCeFGcV+4CL+7JF2t5K\\n\" +\n+            \"YvV5r074Wyk0QMlRVYMNDl0t+VAEoDJ7RRE+kEvplWcsX9S2wvr4HhkA4iChpwFm\\n\" +\n+            \"2UDTppHskSWyLsuNQvipn0zTzZ8RIxXd\/ei0qCdhKmkV7x9cgbTiyXgaI7iJEtdo\\n\" +\n+            \"RvYNcXc2RmitWjY5Av8yJGOk0eYpCwRrBv6ughbtJe3NMrqUeTyrKidIEo9KnRSA\\n\" +\n+            \"rMokRbHunkroS97VkoK\/9j9pNJki+qAH9XTLYWcm\/5+cTSGRsN+escRgZwV6KWg\/\\n\" +\n+            \"JQQe5LbwU2HHzNqWuk63GC\/ngVlWXjaVFfbNVmYEKZFFazcZchesN1YyDu+WndOx\\n\" +\n+            \"+rTcuke2feOvQ4EnVviM0k85JZNiqPDH2iafAWyqZFUYTnb7XK3HhJflAniv\/SLq\\n\" +\n+            \"DQfbJmtQtNHdJYgVmC1u2RT9gbJDIAj0ZI4vU2WVB5Hmd9F31un6jundEuG4+S4=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=revoked.rootca2.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon RSA 4096 M02, O=Amazon, C=US\n+    \/\/ Serial number: 788baa8f47bc5b1c624424216240fd3\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIIEjCCBfqgAwIBAgIQB4i6qPR7xbHGJEJCFiQP0zANBgkqhkiG9w0BAQwFADA8\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g\\n\" +\n+            \"UlNBIDQwOTYgTTAyMB4XDTIzMDUxMDAwMDAwMFoXDTI0MDYwNzIzNTk1OVowLzEt\\n\" +\n+            \"MCsGA1UEAxMkcmV2b2tlZC5yb290Y2EyLmRlbW8uYW1hem9udHJ1c3QuY29tMIIC\\n\" +\n+            \"IjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzJfddWdrWhA9dSJdmy23veN9\\n\" +\n+            \"oLvSqpM4YaXGZmPtKUmbFMLs2I3vCKrzflRKeOpl3MCc2hh6TH\/3z+Q\/fGugXLsY\\n\" +\n+            \"H8QcjSbiIOd15n+3dUFTLKaoWMyseMcWiOIVaN5rCDVXiAHdt1pc147wyFQIzqNK\\n\" +\n+            \"J\/xiV1u9eT2MFue+4bd7kUNAcmI8M+SXruhto4jtAV8ugpTEChTDlyO\/l8xmaM1Q\\n\" +\n+            \"HkijsHX7Aq72Q\/3PH\/U+wbJ9pmpTp4x2AEJoo45IGfB\/NKDTrv5otLBuiP8Y0M7b\\n\" +\n+            \"K7irRPDFBqMNZw7S7p39SnC+V\/WibJQk5Bo\/8vcwDJX+WnDkw1QD\/uXu3ugDzSDD\\n\" +\n+            \"iBDViMOdN+3K47s4x2kdssoh4WWScMlAVb4vyN7IA3J4TnwA\/1uCWhw4LE1WvY7N\\n\" +\n+            \"etekhVP1eWF8IzNY0oo2u2ie79777xvBtmtp7RnvYLGv7I+xVhjH5qGNzn9fRCUm\\n\" +\n+            \"QDego5HAfJ0PLlMEagdW8asCak1WaC117adnibL6WPtFA2FD2i6gNalTvhXhK2Ex\\n\" +\n+            \"alGxrVd\/BCseT3bMp783jqScJO1g6xRHu0Qx+RyrOGVvcKZa6Y0DcAc8psRpkHaO\\n\" +\n+            \"HZY+lE8O2CIxpAJlwSnD6BoDNo8sg1IqFNkECw3wqfeMPBcg38k6zjAxwRDcIx6U\\n\" +\n+            \"SwDl4d3sjrmy3gOFFXMCAwEAAaOCAxswggMXMB8GA1UdIwQYMBaAFJ5xHxodk6nZ\\n\" +\n+            \"LY7MSFM\/A1TznuZmMB0GA1UdDgQWBBQXpWT7gMHO+HKoHM1gU1VQVnylRzBOBgNV\\n\" +\n+            \"HREERzBFgiRyZXZva2VkLnJvb3RjYTIuZGVtby5hbWF6b250cnVzdC5jb22CHXJl\\n\" +\n+            \"dm9rZWQuc2NhMmEuYW1hem9udHJ1c3QuY29tMA4GA1UdDwEB\/wQEAwIFoDAdBgNV\\n\" +\n+            \"HSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwOwYDVR0fBDQwMjAwoC6gLIYqaHR0\\n\" +\n+            \"cDovL2NybC5yNG0wMi5hbWF6b250cnVzdC5jb20vcjRtMDIuY3JsMBMGA1UdIAQM\\n\" +\n+            \"MAowCAYGZ4EMAQIBMHUGCCsGAQUFBwEBBGkwZzAtBggrBgEFBQcwAYYhaHR0cDov\\n\" +\n+            \"L29jc3AucjRtMDIuYW1hem9udHJ1c3QuY29tMDYGCCsGAQUFBzAChipodHRwOi8v\\n\" +\n+            \"Y3J0LnI0bTAyLmFtYXpvbnRydXN0LmNvbS9yNG0wMi5jZXIwDAYDVR0TAQH\/BAIw\\n\" +\n+            \"ADCCAX0GCisGAQQB1nkCBAIEggFtBIIBaQFnAHYA7s3QZNXbGs7FXLedtM0TojKH\\n\" +\n+            \"Rny87N7DUUhZRnEftZsAAAGIB72CzgAABAMARzBFAiEA2vPYIPfGJeynPaZHq\/c0\\n\" +\n+            \"GGvyT6MpvFGMW0s0woLRT28CIEFbZbFSCnKugaqw9QDNi7vYmIF3Gyi3s6G2cCxY\\n\" +\n+            \"4RJXAHYASLDja9qmRzQP5WoC+p0w6xxSActW3SyB2bu\/qznYhHMAAAGIB72DDgAA\\n\" +\n+            \"BAMARzBFAiAvfNcgtFEwk5C9dvMUYANbIAv0IOdF1new8Umn3cM+JwIhALbs\/3L9\\n\" +\n+            \"0ndF7sRKDZmfronNruptFlrI528P5Qi2P528AHUA2ra\/az+1tiKfm8K7XGvocJFx\\n\" +\n+            \"bLtRhIU0vaQ9MEjX+6sAAAGIB72CxQAABAMARjBEAiBKUns2FPbs0cThb6e7SnyL\\n\" +\n+            \"y4\/qP3V1Q\/ASt\/ZDRTeEQQIgWSQO4Gsz32srtqYuTM9AsFd92WA44kJHincdcGVX\\n\" +\n+            \"XbIwDQYJKoZIhvcNAQEMBQADggIBAAnaNbn2wXylTCS7dtgB3rWdUf6hja1UDuvB\\n\" +\n+            \"uZEL2dUOvyXfVFLNxKdeWBPzqpwEBNNwPQXhoI97TXlyu2x60jLzQamoGoRQ3s0P\\n\" +\n+            \"NLhasLGEIQH\/oYdMV\/yp8EI8fUuRVE3xyw39FRqOrmsUFAnxNQmBO\/09JM7sLcvS\\n\" +\n+            \"wwh14p9dFTTolJHgnL4ZEtmZxSddFG+GBSTJ\/A7dVSmwIudwzd+goA6173BI6yeT\\n\" +\n+            \"hhQumLctQiOM7y1MzFeV8rL+oIpd2xuzyhKKT1EgvU6\/wyt0Ib8QqsFsrXPnUOKk\\n\" +\n+            \"HAq3SeZyq35QUaTKoaH9L1iZMbSCG9Jm6FMb12SdAz53653tYvAiUS76oD8Jot13\\n\" +\n+            \"RZu5NUlWAVLLq0OaEtuGp0bh+cVtzVnCC9m1qa46YpY0SojpvSbakgQMMGIgDlT3\\n\" +\n+            \"wFE7tST4WlsDC1f\/m+H9V5qz\/j0U8D3eNNdowxPqx\/JZq\/sk9ZK5KyMFARrvM+fh\\n\" +\n+            \"YrVYjKt91mu7JaS4pPOyZmJ8OQ14EvrN7BXc7IkNrI1reeaRFe49k5DAETB8VmP5\\n\" +\n+            \"2F0SWou2KkgtJvU4Z7YjlZ2HNHnpjTK5KdPNpRSt7EUy2zn9NCNoyQhnws70FyXv\\n\" +\n+            \"oPFyG92lnUQOKaAUhVRwTr9fvnkdMOzSKg\/spxi2Ogdzym5Jw68eguwi0dVqX2+9\\n\" +\n+            \"3zViP2aH\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    public void runTest(ValidatePathWithParams pathValidator) throws Exception {\n+\n+        \/\/ Validate valid\n+        pathValidator.validate(new String[]{VALID, INT},\n+                ValidatePathWithParams.Status.GOOD, null, System.out);\n+\n+        \/\/ Validate Revoked\n+        pathValidator.validate(new String[]{REVOKED, INT},\n+                ValidatePathWithParams.Status.REVOKED,\n+                \"Mon May 15 13:38:54 PDT 2023\", System.out);\n+    }\n+}\n+\n+class AmazonCA_3 {\n+\n+    \/\/ Owner: CN=Amazon ECDSA 256 M02, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 3, O=Amazon, C=US\n+    \/\/ Serial number: 773126de2c2fafd2c47ad88b1566e0182046d\n+    \/\/ Valid from: Tue Aug 23 15:33:24 PDT 2022 until: Fri Aug 23 15:33:24 PDT 2030\n+    private static final String INT_VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIC1DCCAnmgAwIBAgITB3MSbeLC+v0sR62IsVZuAYIEbTAKBggqhkjOPQQDAjA5\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g\\n\" +\n+            \"Um9vdCBDQSAzMB4XDTIyMDgyMzIyMzMyNFoXDTMwMDgyMzIyMzMyNFowPTELMAkG\\n\" +\n+            \"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEdMBsGA1UEAxMUQW1hem9uIEVDRFNB\\n\" +\n+            \"IDI1NiBNMDIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAS9vQLD4W\/Kg4AnFRl8\\n\" +\n+            \"x\/FUbLqtd5ICYjUijGsytF9hmgb\/Dyk+Ebt4cw6rAlGbaiOLapSJKZiZr+UQdh3I\\n\" +\n+            \"QOr+o4IBWjCCAVYwEgYDVR0TAQH\/BAgwBgEB\/wIBADAOBgNVHQ8BAf8EBAMCAYYw\\n\" +\n+            \"HQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQWBBS7eJrXaDMy\\n\" +\n+            \"nRq7bP2xNEwB3svQdTAfBgNVHSMEGDAWgBSrttvXBp43rDCGB5Fwx5zEGbF4wDB7\\n\" +\n+            \"BggrBgEFBQcBAQRvMG0wLwYIKwYBBQUHMAGGI2h0dHA6Ly9vY3NwLnJvb3RjYTMu\\n\" +\n+            \"YW1hem9udHJ1c3QuY29tMDoGCCsGAQUFBzAChi5odHRwOi8vY3J0LnJvb3RjYTMu\\n\" +\n+            \"YW1hem9udHJ1c3QuY29tL3Jvb3RjYTMuY2VyMD8GA1UdHwQ4MDYwNKAyoDCGLmh0\\n\" +\n+            \"dHA6Ly9jcmwucm9vdGNhMy5hbWF6b250cnVzdC5jb20vcm9vdGNhMy5jcmwwEwYD\\n\" +\n+            \"VR0gBAwwCjAIBgZngQwBAgEwCgYIKoZIzj0EAwIDSQAwRgIhAKSYEcDcp3kcPMzh\\n\" +\n+            \"OIYDWZOLu4InPod4fQhRTmc2zBAgAiEAmwdGE4AuNWhw9N8REhf82rJLNm7h9Myg\\n\" +\n+            \"TsR9Wu0bQYU=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=Amazon ECDSA 256 M01, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 3, O=Amazon, C=US\n+    \/\/ Serial number: 773126684d577c0fcf8d3a342bea86f94fc8f\n+    \/\/ Valid from: Tue Aug 23 15:31:46 PDT 2022 until: Fri Aug 23 15:31:46 PDT 2030\n+    private static final String INT_REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIC0zCCAnmgAwIBAgITB3MSZoTVd8D8+NOjQr6ob5T8jzAKBggqhkjOPQQDAjA5\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g\\n\" +\n+            \"Um9vdCBDQSAzMB4XDTIyMDgyMzIyMzE0NloXDTMwMDgyMzIyMzE0NlowPTELMAkG\\n\" +\n+            \"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEdMBsGA1UEAxMUQW1hem9uIEVDRFNB\\n\" +\n+            \"IDI1NiBNMDEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT80w+2RwNHzyXmVUM\/\\n\" +\n+            \"OUKBZpJkTzHyCKDl4sBrUfjzVjot\/lNba9kYzMKSHYv95CUDoMaF2h2KAqx65uLQ\\n\" +\n+            \"Y8ago4IBWjCCAVYwEgYDVR0TAQH\/BAgwBgEB\/wIBADAOBgNVHQ8BAf8EBAMCAYYw\\n\" +\n+            \"HQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQWBBRPWfy8BhYo\\n\" +\n+            \"v6LI2wj7zxMkumlCXDAfBgNVHSMEGDAWgBSrttvXBp43rDCGB5Fwx5zEGbF4wDB7\\n\" +\n+            \"BggrBgEFBQcBAQRvMG0wLwYIKwYBBQUHMAGGI2h0dHA6Ly9vY3NwLnJvb3RjYTMu\\n\" +\n+            \"YW1hem9udHJ1c3QuY29tMDoGCCsGAQUFBzAChi5odHRwOi8vY3J0LnJvb3RjYTMu\\n\" +\n+            \"YW1hem9udHJ1c3QuY29tL3Jvb3RjYTMuY2VyMD8GA1UdHwQ4MDYwNKAyoDCGLmh0\\n\" +\n+            \"dHA6Ly9jcmwucm9vdGNhMy5hbWF6b250cnVzdC5jb20vcm9vdGNhMy5jcmwwEwYD\\n\" +\n+            \"VR0gBAwwCjAIBgZngQwBAgEwCgYIKoZIzj0EAwIDSAAwRQIhALRfxq3SQIhj5xA4\\n\" +\n+            \"S5UAY\/KlKqayZDpnbBdCDH8Kqmf\/AiAUVZddALefnqRe+ifxN2FUp461LL6\/cgVM\\n\" +\n+            \"EH3Ty27f1Q==\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=valid.rootca3.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon ECDSA 256 M02, O=Amazon, C=US\n+    \/\/ Serial number: 8e2f14864fb28e4a1da0f15a5118cc8\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIEfjCCBCWgAwIBAgIQCOLxSGT7KOSh2g8VpRGMyDAKBggqhkjOPQQDAjA9MQsw\\n\" +\n+            \"CQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMR0wGwYDVQQDExRBbWF6b24gRUNE\\n\" +\n+            \"U0EgMjU2IE0wMjAeFw0yMzA1MTAwMDAwMDBaFw0yNDA2MDcyMzU5NTlaMC0xKzAp\\n\" +\n+            \"BgNVBAMTInZhbGlkLnJvb3RjYTMuZGVtby5hbWF6b250cnVzdC5jb20wWTATBgcq\\n\" +\n+            \"hkjOPQIBBggqhkjOPQMBBwNCAAQfWc7gBGBBBmseCb2XWWRQVhCUQDVml3mVgvj5\\n\" +\n+            \"RmnP1y5wpifUTFqu8ELdI7YGZ4JMSnetiKNmLtg5yhTEjzCQo4IDFTCCAxEwHwYD\\n\" +\n+            \"VR0jBBgwFoAUu3ia12gzMp0au2z9sTRMAd7L0HUwHQYDVR0OBBYEFHCE8orvZDUK\\n\" +\n+            \"5TI9MYadzxWR9CZGMEkGA1UdEQRCMECCInZhbGlkLnJvb3RjYTMuZGVtby5hbWF6\\n\" +\n+            \"b250cnVzdC5jb22CGmdvb2Quc2NhM2EuYW1hem9udHJ1c3QuY29tMA4GA1UdDwEB\\n\" +\n+            \"\/wQEAwIHgDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwOwYDVR0fBDQw\\n\" +\n+            \"MjAwoC6gLIYqaHR0cDovL2NybC5lMm0wMi5hbWF6b250cnVzdC5jb20vZTJtMDIu\\n\" +\n+            \"Y3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMHUGCCsGAQUFBwEBBGkwZzAtBggrBgEF\\n\" +\n+            \"BQcwAYYhaHR0cDovL29jc3AuZTJtMDIuYW1hem9udHJ1c3QuY29tMDYGCCsGAQUF\\n\" +\n+            \"BzAChipodHRwOi8vY3J0LmUybTAyLmFtYXpvbnRydXN0LmNvbS9lMm0wMi5jZXIw\\n\" +\n+            \"DAYDVR0TAQH\/BAIwADCCAXwGCisGAQQB1nkCBAIEggFsBIIBaAFmAHUA7s3QZNXb\\n\" +\n+            \"Gs7FXLedtM0TojKHRny87N7DUUhZRnEftZsAAAGIB71y\/gAABAMARjBEAiAEAXIb\\n\" +\n+            \"aOVR26HgFaI+qoIasCb8w2sOqVxGAxf5iPgX6QIgdAlMjqeoihi1arnJpzN8Bqxy\\n\" +\n+            \"5ULMUO7GK3JEgcogJHMAdgBIsONr2qZHNA\/lagL6nTDrHFIBy1bdLIHZu7+rOdiE\\n\" +\n+            \"cwAAAYgHvXLkAAAEAwBHMEUCIF7wDDmWxTHwBZM7Me8eOCM1aQ\/g1c1rJg\/I+NJa\\n\" +\n+            \"HkZYAiEA8p+IviuY5piHBELjUtVlZLiS9XSSMxpQNhUerqC\/YFoAdQDatr9rP7W2\\n\" +\n+            \"Ip+bwrtca+hwkXFsu1GEhTS9pD0wSNf7qwAAAYgHvXKvAAAEAwBGMEQCIFLskZDs\\n\" +\n+            \"UG4+\/88D\/5\/QbD9zT6ZmZlwXiPZ6H2YR\/KiJAiBvi4vvNsb9KNAhJMgI2T2iCg9U\\n\" +\n+            \"CIru+US6y3ua7dKKDTAKBggqhkjOPQQDAgNHADBEAiAzvgzKV\/kvBbKWCT1NNUBD\\n\" +\n+            \"AF9okIEcJx\/ukFgzmYMwUQIgXeJeVf3izkxsgiEUSknwHsErLFs\/cEme2PSRj2AW\\n\" +\n+            \"dYA=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=revoked.rootca3.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon ECDSA 256 M01, O=Amazon, C=US\n+    \/\/ Serial number: c458bfaeedae16a5e61fe64773fc898\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIEhzCCBC2gAwIBAgIQDEWL+u7a4WpeYf5kdz\/ImDAKBggqhkjOPQQDAjA9MQsw\\n\" +\n+            \"CQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMR0wGwYDVQQDExRBbWF6b24gRUNE\\n\" +\n+            \"U0EgMjU2IE0wMTAeFw0yMzA1MTAwMDAwMDBaFw0yNDA2MDcyMzU5NTlaMC8xLTAr\\n\" +\n+            \"BgNVBAMTJHJldm9rZWQucm9vdGNhMy5kZW1vLmFtYXpvbnRydXN0LmNvbTBZMBMG\\n\" +\n+            \"ByqGSM49AgEGCCqGSM49AwEHA0IABAsSs5kW5TZlS0SDrMb9iUQAqEaKa12Fc6SN\\n\" +\n+            \"9UR6qtOFdW\/1UuziDq3Hl5dqsAYZJkbJSPCIsD2HTP\/EGTMKITCjggMbMIIDFzAf\\n\" +\n+            \"BgNVHSMEGDAWgBRPWfy8BhYov6LI2wj7zxMkumlCXDAdBgNVHQ4EFgQUeE55ET2e\\n\" +\n+            \"i8KbY7KHTxOuvCkRpTowTgYDVR0RBEcwRYIkcmV2b2tlZC5yb290Y2EzLmRlbW8u\\n\" +\n+            \"YW1hem9udHJ1c3QuY29tgh1yZXZva2VkLnNjYTNhLmFtYXpvbnRydXN0LmNvbTAO\\n\" +\n+            \"BgNVHQ8BAf8EBAMCB4AwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMDsG\\n\" +\n+            \"A1UdHwQ0MDIwMKAuoCyGKmh0dHA6Ly9jcmwuZTJtMDEuYW1hem9udHJ1c3QuY29t\\n\" +\n+            \"L2UybTAxLmNybDATBgNVHSAEDDAKMAgGBmeBDAECATB1BggrBgEFBQcBAQRpMGcw\\n\" +\n+            \"LQYIKwYBBQUHMAGGIWh0dHA6Ly9vY3NwLmUybTAxLmFtYXpvbnRydXN0LmNvbTA2\\n\" +\n+            \"BggrBgEFBQcwAoYqaHR0cDovL2NydC5lMm0wMS5hbWF6b250cnVzdC5jb20vZTJt\\n\" +\n+            \"MDEuY2VyMAwGA1UdEwEB\/wQCMAAwggF9BgorBgEEAdZ5AgQCBIIBbQSCAWkBZwB2\\n\" +\n+            \"AHb\/iD8KtvuVUcJhzPWHujS0pM27KdxoQgqf5mdMWjp0AAABiAe9lQ8AAAQDAEcw\\n\" +\n+            \"RQIgZVFAX5WPZRBpEOqk620v4Rbzxh\/3wrJ5QBMBJ0Mb8B0CIQC0oxFVLfs+PAv7\\n\" +\n+            \"25wawOu2VgDXG9lJAJtCwk3gN8BshQB2AEiw42vapkc0D+VqAvqdMOscUgHLVt0s\\n\" +\n+            \"gdm7v6s52IRzAAABiAe9lQ4AAAQDAEcwRQIhAIPVMj6IfjAUKeGYbpG9s0DRdWbc\\n\" +\n+            \"b8OzsOf+kRqk03NMAiB777hfoFCUMPrN0g8o5v6zp3T3qOhRnYY0TZN4q4NnMgB1\\n\" +\n+            \"ANq2v2s\/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI1\/urAAABiAe9lN4AAAQDAEYw\\n\" +\n+            \"RAIgL0qoVbKLFD+Y3f\/V6Rw+euZrPO6d1HEVPQGo7wLzkl8CIGHp3PQmmrEofl76\\n\" +\n+            \"4da7bY0L+csFW0sB8clN0KziMfe6MAoGCCqGSM49BAMCA0gAMEUCIQC+6VdX9X5g\\n\" +\n+            \"x3NSUmJ7py01Zxf26TNBv1ildxqesvZ\/7wIgIrefriRzPiIFDHCUbdjk0VlmMwZR\\n\" +\n+            \"VzXXHINsGCiCKOs=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    public void runTest(ValidatePathWithParams pathValidator) throws Exception {\n+\n+        \/\/ Validate valid\n+        pathValidator.validate(new String[]{VALID, INT_VALID},\n+                ValidatePathWithParams.Status.GOOD, null, System.out);\n+\n+        \/\/ Validate Revoked\n+        pathValidator.validate(new String[]{REVOKED, INT_REVOKED},\n+                ValidatePathWithParams.Status.REVOKED,\n+                \"Mon May 15 13:41:22 PDT 2023\", System.out);\n+    }\n+}\n+\n+class AmazonCA_4 {\n+\n+    \/\/ Owner: CN=Amazon ECDSA 384 M02, O=Amazon, C=US\n+    \/\/ Issuer: CN=Amazon Root CA 4, O=Amazon, C=US\n+    \/\/ Serial number: 773127dfaa6b9e2b95538aa76dde4307f17c4\n+    \/\/ Valid from: Tue Aug 23 15:36:58 PDT 2022 until: Fri Aug 23 15:36:58 PDT 2030\n+    private static final String INT = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIDETCCApagAwIBAgITB3MSffqmueK5VTiqdt3kMH8XxDAKBggqhkjOPQQDAzA5\\n\" +\n+            \"MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6b24g\\n\" +\n+            \"Um9vdCBDQSA0MB4XDTIyMDgyMzIyMzY1OFoXDTMwMDgyMzIyMzY1OFowPTELMAkG\\n\" +\n+            \"A1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEdMBsGA1UEAxMUQW1hem9uIEVDRFNB\\n\" +\n+            \"IDM4NCBNMDIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATNYzWQDXV0NoNmR0hJPwJq\\n\" +\n+            \"hjYOOS9z0B2Z7MQudxg5x3Vsib6N+tJkq8dljRq5o6K0bbh\/kRVfoi9wfKhB03Yz\\n\" +\n+            \"gkerrwRCH7Z9gU5nbBY+Y5+EtImq4yOB0n7JQgQxWemjggFaMIIBVjASBgNVHRMB\\n\" +\n+            \"Af8ECDAGAQH\/AgEAMA4GA1UdDwEB\/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcD\\n\" +\n+            \"AQYIKwYBBQUHAwIwHQYDVR0OBBYEFKbZqzuHmTP\/6Gj4i2GDbNCyuq+9MB8GA1Ud\\n\" +\n+            \"IwQYMBaAFNPsxzplbszh2naaVvuc84ZtV+WBMHsGCCsGAQUFBwEBBG8wbTAvBggr\\n\" +\n+            \"BgEFBQcwAYYjaHR0cDovL29jc3Aucm9vdGNhNC5hbWF6b250cnVzdC5jb20wOgYI\\n\" +\n+            \"KwYBBQUHMAKGLmh0dHA6Ly9jcnQucm9vdGNhNC5hbWF6b250cnVzdC5jb20vcm9v\\n\" +\n+            \"dGNhNC5jZXIwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC5yb290Y2E0LmFt\\n\" +\n+            \"YXpvbnRydXN0LmNvbS9yb290Y2E0LmNybDATBgNVHSAEDDAKMAgGBmeBDAECATAK\\n\" +\n+            \"BggqhkjOPQQDAwNpADBmAjEA2zCG6x0xMlgSXWEGLN8+1XN+OCYF5vj0Z1jtVy+A\\n\" +\n+            \"pdLlzuxNt9HBWn3hvqvO2W8KAjEApNdsZOCmk5uZBYiuCSBnDH3jyKhN6dWyuuHW\\n\" +\n+            \"9Wj7SxKnOU5+wYWZA0BQAv1KT62i\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=valid.rootca4.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon ECDSA 384 M02, O=Amazon, C=US\n+    \/\/ Serial number: f579bed3369f1a147ea5d0e8e6532d3\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String VALID = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIEvjCCBESgAwIBAgIQD1eb7TNp8aFH6l0OjmUy0zAKBggqhkjOPQQDAzA9MQsw\\n\" +\n+            \"CQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMR0wGwYDVQQDExRBbWF6b24gRUNE\\n\" +\n+            \"U0EgMzg0IE0wMjAeFw0yMzA1MTAwMDAwMDBaFw0yNDA2MDcyMzU5NTlaMC0xKzAp\\n\" +\n+            \"BgNVBAMTInZhbGlkLnJvb3RjYTQuZGVtby5hbWF6b250cnVzdC5jb20wdjAQBgcq\\n\" +\n+            \"hkjOPQIBBgUrgQQAIgNiAAT6\/95JFuvx5t9MVeRZmBtXq63Q2fXZnSwEy2U2F4Qc\\n\" +\n+            \"ejhDwcYfD2HmT6S6GrKqLNJMa5n2YOvet4LZpKJLFF+BQo6FJt5cXkzHHxZ1I4z3\\n\" +\n+            \"8pGU79CpCgFOFy6QUlF68NajggMXMIIDEzAfBgNVHSMEGDAWgBSm2as7h5kz\/+ho\\n\" +\n+            \"+Ithg2zQsrqvvTAdBgNVHQ4EFgQUR\/GnpQkrUsCj8jF6\/JIE1Rs07zswSQYDVR0R\\n\" +\n+            \"BEIwQIIidmFsaWQucm9vdGNhNC5kZW1vLmFtYXpvbnRydXN0LmNvbYIaZ29vZC5z\\n\" +\n+            \"Y2E0YS5hbWF6b250cnVzdC5jb20wDgYDVR0PAQH\/BAQDAgeAMB0GA1UdJQQWMBQG\\n\" +\n+            \"CCsGAQUFBwMBBggrBgEFBQcDAjA7BgNVHR8ENDAyMDCgLqAshipodHRwOi8vY3Js\\n\" +\n+            \"LmUzbTAyLmFtYXpvbnRydXN0LmNvbS9lM20wMi5jcmwwEwYDVR0gBAwwCjAIBgZn\\n\" +\n+            \"gQwBAgEwdQYIKwYBBQUHAQEEaTBnMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5l\\n\" +\n+            \"M20wMi5hbWF6b250cnVzdC5jb20wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQuZTNt\\n\" +\n+            \"MDIuYW1hem9udHJ1c3QuY29tL2UzbTAyLmNlcjAMBgNVHRMBAf8EAjAAMIIBfgYK\\n\" +\n+            \"KwYBBAHWeQIEAgSCAW4EggFqAWgAdgDuzdBk1dsazsVct520zROiModGfLzs3sNR\\n\" +\n+            \"SFlGcR+1mwAAAYgHvZA9AAAEAwBHMEUCIQCmzmQOzunsuAg1GpIcNx0isG6ylbhP\\n\" +\n+            \"y9JP4UFclL2hdwIgBtTM89mE7QJDj7h7xr2eRPio1ehgmeYH1PHXxCqHIGYAdgBI\\n\" +\n+            \"sONr2qZHNA\/lagL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAYgHvZB1AAAEAwBHMEUC\\n\" +\n+            \"IF9hbi82CLU5umfRze4NpX6u4jlT+N8KSaBe6UbhqjBZAiEAi2Y6PTt2+107LxtM\\n\" +\n+            \"oBpHprph7hQvGfjPE+p+rfM\/X+EAdgDatr9rP7W2Ip+bwrtca+hwkXFsu1GEhTS9\\n\" +\n+            \"pD0wSNf7qwAAAYgHvZBeAAAEAwBHMEUCIAI+m4mVE3HtZOEMC5VI7m0nEPdPPJUq\\n\" +\n+            \"fxUKPpeIVmk5AiEA0scVJy7g3Fv+2nTVhbcwWCwn\/Gvc+0txQrc529juflcwCgYI\\n\" +\n+            \"KoZIzj0EAwMDaAAwZQIxAKV837BpqlNHg35EsCCtrJPoQ6RuY9UoHm1O2CdsCXGR\\n\" +\n+            \"Z3kAnlgIV8A\/waI6wQqfsQIwdCqaC+qN60JCnX09YKRD15eQjq1rN3w+llI+lEbS\\n\" +\n+            \"FSMsnoHJcqMZLo9s+4Rf0zS3\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Owner: CN=revoked.rootca4.demo.amazontrust.com\n+    \/\/ Issuer: CN=Amazon ECDSA 384 M02, O=Amazon, C=US\n+    \/\/ Serial number: 4a5d392936b4decb818b7fb106ebbd8\n+    \/\/ Valid from: Tue May 09 17:00:00 PDT 2023 until: Fri Jun 07 16:59:59 PDT 2024\n+    private static final String REVOKED = \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIIExjCCBEygAwIBAgIQBKXTkpNrTey4GLf7EG672DAKBggqhkjOPQQDAzA9MQsw\\n\" +\n+            \"CQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMR0wGwYDVQQDExRBbWF6b24gRUNE\\n\" +\n+            \"U0EgMzg0IE0wMjAeFw0yMzA1MTAwMDAwMDBaFw0yNDA2MDcyMzU5NTlaMC8xLTAr\\n\" +\n+            \"BgNVBAMTJHJldm9rZWQucm9vdGNhNC5kZW1vLmFtYXpvbnRydXN0LmNvbTB2MBAG\\n\" +\n+            \"ByqGSM49AgEGBSuBBAAiA2IABFYfMbv5\/vgqDunZj4ffJiuELtdwfEPXx9QlZnCm\\n\" +\n+            \"rBP3Z4\/GvUVRVmyh5sYdnbCGCEClH\/RxU6BC5SKv+TzhsFLEumhezanljnQXRAIL\\n\" +\n+            \"a1OGbP8zLLP6FuAD0cjY3P3adKOCAx0wggMZMB8GA1UdIwQYMBaAFKbZqzuHmTP\/\\n\" +\n+            \"6Gj4i2GDbNCyuq+9MB0GA1UdDgQWBBSqnGV5pN\/agPCtVdV37CP1z\/DUqjBOBgNV\\n\" +\n+            \"HREERzBFgiRyZXZva2VkLnJvb3RjYTQuZGVtby5hbWF6b250cnVzdC5jb22CHXJl\\n\" +\n+            \"dm9rZWQuc2NhNGEuYW1hem9udHJ1c3QuY29tMA4GA1UdDwEB\/wQEAwIHgDAdBgNV\\n\" +\n+            \"HSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwOwYDVR0fBDQwMjAwoC6gLIYqaHR0\\n\" +\n+            \"cDovL2NybC5lM20wMi5hbWF6b250cnVzdC5jb20vZTNtMDIuY3JsMBMGA1UdIAQM\\n\" +\n+            \"MAowCAYGZ4EMAQIBMHUGCCsGAQUFBwEBBGkwZzAtBggrBgEFBQcwAYYhaHR0cDov\\n\" +\n+            \"L29jc3AuZTNtMDIuYW1hem9udHJ1c3QuY29tMDYGCCsGAQUFBzAChipodHRwOi8v\\n\" +\n+            \"Y3J0LmUzbTAyLmFtYXpvbnRydXN0LmNvbS9lM20wMi5jZXIwDAYDVR0TAQH\/BAIw\\n\" +\n+            \"ADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYAdv+IPwq2+5VRwmHM9Ye6NLSk\\n\" +\n+            \"zbsp3GhCCp\/mZ0xaOnQAAAGIB72QJQAABAMARzBFAiA74zKrlL+y5rYwSLxBL8fs\\n\" +\n+            \"QYRYXF0s0sGoaSEeAg1DkgIhAPu8Z0TLIFoppmyiv+A5z6S+SG+v\/kOsAYmQmiUO\\n\" +\n+            \"5scIAHcASLDja9qmRzQP5WoC+p0w6xxSActW3SyB2bu\/qznYhHMAAAGIB72QJgAA\\n\" +\n+            \"BAMASDBGAiEAg+x7JBT3oIaZdnfgGN1G6SAiNUL7zR\/tBhbWIG9tz94CIQDGwBiV\\n\" +\n+            \"Tslt11+W3ZaNsS7UtUIiB45YHUc4qKm5ry2fTAB2ANq2v2s\/tbYin5vCu1xr6HCR\\n\" +\n+            \"cWy7UYSFNL2kPTBI1\/urAAABiAe9kAgAAAQDAEcwRQIgPvKfSpMJKRocGk9+GNr3\\n\" +\n+            \"hUj8x8WySB\/\/0X116TNgA0gCIQDhGRqxnEZmEFGEfj5GY9vjEfm0kKwcL0lCuwBu\\n\" +\n+            \"NZG4dzAKBggqhkjOPQQDAwNoADBlAjEA1PLdsrko3tDs50aAeEU9Gn+0CG8QKy7R\\n\" +\n+            \"fQaXBTjGETDgGJk\/7zGNpGelKPr\/UYV9AjASwdA32S8jIADxA8HrqiMsVYDFMnbU\\n\" +\n+            \"jLLwR6CTLtAcWtwVmoQ2x0usvTvN8YJBPoA=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n+\n+    public void runTest(ValidatePathWithParams pathValidator) throws Exception {\n+\n+        \/\/ Validate valid\n+        pathValidator.validate(new String[]{VALID, INT},\n+                ValidatePathWithParams.Status.GOOD, null, System.out);\n+\n+        \/\/ Validate Revoked\n+        pathValidator.validate(new String[]{REVOKED, INT},\n+                ValidatePathWithParams.Status.REVOKED,\n+                \"Mon May 15 13:42:48 PDT 2023\", System.out);\n+    }\n+}\n","filename":"test\/jdk\/security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/AmazonCA.java","additions":613,"deletions":0,"binary":false,"changes":613,"status":"added"},{"patch":"@@ -50,1 +50,1 @@\n-    private static final int COUNT = 97;\n+    private static final int COUNT = 96;\n","filename":"test\/jdk\/sun\/security\/lib\/cacerts\/VerifyCACerts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}