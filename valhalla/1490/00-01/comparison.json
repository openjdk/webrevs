{"files":[{"patch":"@@ -330,16 +330,0 @@\n-\n-            \/* Field may not have an initializer, example:\n-             *  class C {\n-             *      int x = 1;\n-             *      public C() {\n-             *          x = 2;\n-             *          super();\n-             *      }\n-             *  }\n-             * NOTE: it is not clear if this is a feature or a bug in the Flexible Constructor\n-             * Bodies implementation\n-             *\/\n-            if (!allowValueClasses && (v.flags() & HASINIT) != 0) {\n-                log.error(pos, Errors.CantAssignInitializedBeforeCtorCalled(v));\n-                return;\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2246,1 +2246,1 @@\n-                   (allowValueClasses && (sym.flags() & HASINIT) == 0) && !sym.isStatic()) &&\n+                   (sym.flags() & (STRICT | HASINIT | PARAMETER)) == STRICT) &&\n@@ -2250,9 +2250,0 @@\n-        \/\/ is non final instance field\n-        boolean isNonFinalUnitializedField(VarSymbol sym) {\n-            return sym.owner.kind == TYP &&\n-                    ((!sym.isFinal() &&\n-                    (sym.flags() & HASINIT) == 0 &&\n-                    !sym.isStatic()) &&\n-                    classDef.sym.isEnclosedBy((ClassSymbol)sym.owner));\n-        }\n-\n@@ -3234,1 +3225,1 @@\n-                if (trackable((VarSymbol)tree.sym) && !isNonFinalUnitializedField((VarSymbol)tree.sym)) {\n+                if (trackable((VarSymbol)tree.sym)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1555,0 +1555,7 @@\n+                            case FIELD_HAS_INIT:\n+                                if (!allowValueClasses) {\n+                                    return new RefBeforeCtorCalledError(sym, true);\n+                                } else {\n+                                    \/\/ acceptable in valhalla\n+                                    return sym;\n+                                }\n@@ -3922,0 +3929,5 @@\n+                            case FIELD_HAS_INIT:\n+                                if (!allowValueClasses) {\n+                                    sym = new RefBeforeCtorCalledError(sym, true);\n+                                }\n+                                break;\n@@ -4061,2 +4073,16 @@\n-        \/\/ OK\n-        return EarlyReferenceKind.ACCEPTABLE;\n+        \/* Field may not have an initializer, example:\n+         *  class C {\n+         *      int x = 1;\n+         *      public C() {\n+         *          x = 2;\n+         *          super();\n+         *      }\n+         *  }\n+         * in valhalla we want to allow for this as we execute initializers before the super invocation\n+         *\/\n+        if ((v.flags() & HASINIT) != 0) {\n+            return EarlyReferenceKind.FIELD_HAS_INIT;\n+        } else {\n+            \/\/ Acceptable\n+            return EarlyReferenceKind.ACCEPTABLE;\n+        }\n@@ -4068,1 +4094,2 @@\n-            NOT_ACCEPTABLE                        \/\/ this is a not acceptable state for the method above\n+            FIELD_HAS_INIT,                       \/\/ this is an error in JDK, acceptable in valhalla\n+            NOT_ACCEPTABLE,                       \/\/ this is a not acceptable state for the method above\n@@ -4844,0 +4871,2 @@\n+        boolean hasInitializer;\n+\n@@ -4845,0 +4874,4 @@\n+            this(sym, false);\n+        }\n+\n+        RefBeforeCtorCalledError(Symbol sym, boolean hasInitializer) {\n@@ -4846,0 +4879,1 @@\n+            this.hasInitializer = hasInitializer;\n@@ -4859,2 +4893,7 @@\n-            return diags.create(dkind, log.currentSource(), pos,\n-                    \"cant.ref.before.ctor.called\", errSym);\n+            return diags.create(dkind,\n+                    log.currentSource(),\n+                    pos,\n+                    !hasInitializer ?\n+                            \"cant.ref.before.ctor.called\" :\n+                            \"cant.assign.initialized.before.ctor.called\",\n+                    errSym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":44,"deletions":5,"binary":false,"changes":49,"status":"modified"}]}