{"files":[{"patch":"@@ -373,2 +373,1 @@\n-  \/\/ Query if this class implements jl.NonTearable or was\n-  \/\/ mentioned in the JVM option ForceNonTearable.\n+  \/\/ Query if this class is mentioned in the JVM option ForceNonTearable.\n@@ -377,1 +376,1 @@\n-  \/\/ It inherits from supers along with NonTearable.\n+  \/\/ It inherits from supers.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+\n+import javax.swing.LayoutFocusTraversalPolicy;\n+\n@@ -35,0 +38,4 @@\n+import jdk.internal.value.ValueClass;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -39,1 +46,0 @@\n- * @ignore Fix JDK-8328353\n@@ -44,0 +50,2 @@\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -89,1 +97,1 @@\n-            TARRAY_FLAT = UNSAFE.isFlattenedArray(TPB_array.getType());\n+            TARRAY_FLAT = UNSAFE.isFlatArray(TPB_array.getType());\n@@ -91,1 +99,1 @@\n-            NTARRAY_FLAT = UNSAFE.isFlattenedArray(NTPB_array.getType());\n+            NTARRAY_FLAT = UNSAFE.isFlatArray(NTPB_array.getType());\n@@ -115,2 +123,4 @@\n-    \/\/ A normally tearable inline value.\n-    static primitive class TPoint {\n+    \/\/ A tearable value.\n+    @LooselyConsistentValue\n+    @ImplicitlyConstructible\n+    static value class TPoint {\n@@ -136,0 +146,1 @@\n+        @NullRestricted\n@@ -137,1 +148,1 @@\n-        TPoint[] array = new TPoint[1];\n+        TPoint[] array = (TPoint[])ValueClass.newNullRestrictedArray(TPoint.class, 1);\n@@ -177,2 +188,0 @@\n-    \/\/ Add an indirection, as an extra test.\n-    interface NT extends NonTearable { }\n@@ -180,2 +189,3 @@\n-    \/\/ A hardened, non-tearable version of TPoint.\n-    static primitive class NTPoint implements NT {\n+    \/\/ A non-tearable version of TPoint.\n+    @ImplicitlyConstructible\n+    static value class NTPoint {\n@@ -188,0 +198,1 @@\n+        @NullRestricted\n@@ -189,1 +200,1 @@\n-        NTPoint[] array = new NTPoint[1];\n+        NTPoint[] array = (NTPoint[])ValueClass.newNullRestrictedArray(NTPoint.class, 1);\n@@ -238,1 +249,1 @@\n-                if (ALWAYS_ATOMIC || ex.badPoint instanceof NonTearable) {\n+                if (ALWAYS_ATOMIC || !badPointObserved.getClass().isAnnotationPresent(LooselyConsistentValue.class)) {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"}]}