{"files":[{"patch":"@@ -1651,1 +1651,1 @@\n-            VerificationType::reference_check(), CHECK_VERIFY(this));\n+            object_type(), CHECK_VERIFY(this));\n@@ -1656,1 +1656,1 @@\n-            VerificationType::reference_check(), CHECK_VERIFY(this));\n+            object_type(), CHECK_VERIFY(this));\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1055,2 +1055,1 @@\n-                        current_frame.pop_stack(\n-                            VerificationType.reference_check);\n+                        current_frame.pop_stack(object_type());\n@@ -1060,2 +1059,1 @@\n-                        current_frame.pop_stack(\n-                            VerificationType.reference_check);\n+                        current_frame.pop_stack(object_type());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2148,2 +2148,1 @@\n-                        && ((opcode == JVM_OPC_astore) || (opcode == JVM_OPC_aload)\n-                            || (opcode == JVM_OPC_ifnull) || (opcode == JVM_OPC_ifnonnull)))\n+                        && ((opcode == JVM_OPC_astore) || (opcode == JVM_OPC_aload)))\n","filename":"src\/java.base\/share\/native\/libverify\/check_code.c","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitThisAcmp version 69:0\n+{\n+  public Method \"<init>\":\"()V\"\n+    stack 2  locals 2\n+  {\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_1;\n+         aload_0;\n+         aload_1;\n+         if_acmpne         L14;\n+         nop;\n+  L14:   stack_frame_type  append;\n+           locals_map      class java\/lang\/Object;\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitThisAcmp\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitThisAcmp.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitThisAcmpOld version 49:0\n+{\n+  public Method \"<init>\":\"()V\"\n+    stack 2  locals 2\n+  {\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_1;\n+         aload_0;\n+         aload_1;\n+         if_acmpne         L14;\n+         nop;\n+  L14:   invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitThisAcmpOld\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitThisAcmpOld.jasm","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitThisIfNull version 69:0\n+{\n+  public Method \"<init>\":\"()V\"\n+    stack 2  locals 2\n+  {\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_1;\n+         aload_0;\n+         ifnonnull         L14;\n+         nop;\n+  L14:   stack_frame_type  append;\n+           locals_map      class java\/lang\/Object;\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitThisIfNull\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitThisIfNull.jasm","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitThisIfNullOld version 49:0\n+{\n+  public Method \"<init>\":\"()V\"\n+    stack 2  locals 2\n+  {\n+         new               class java\/lang\/Object;\n+         dup;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         astore_1;\n+         aload_0;\n+         ifnonnull         L14;\n+         nop;\n+  L14:   aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitThisIfNullOld\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitThisIfNullOld.jasm","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitializedAcmp version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 5  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         aload_0;\n+   L1:   new               class java\/lang\/Object;\n+         dup;\n+         dup;\n+         dup;\n+         if_acmpne         L18;\n+         nop;\n+  L18:   stack_frame_type  full;\n+           locals_map      class UninitializedAcmp;\n+           stack_map       class UninitializedAcmp, at L1, at L1;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitializedAcmp\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedAcmp.jasm","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitializedAcmpOld version 49:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 5  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         aload_0;\n+   L1:   new               class java\/lang\/Object;\n+         dup;\n+         dup;\n+         dup;\n+         if_acmpne         L18;\n+         nop;\n+  L18:   invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitializedAcmpOld\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedAcmpOld.jasm","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitializedIfNull version 69:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+   L1:   new               class java\/lang\/Object;\n+         dup;\n+         dup;\n+         ifnonnull         L18;\n+         nop;\n+  L18:   stack_frame_type  full;\n+           locals_map      class UninitializedIfNull;\n+           stack_map       at L1, at L1;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitializedIfNull\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedIfNull.jasm","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class UninitializedIfNullOld version 49:0\n+{\n+  Method       \"<init>\":\"()V\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+   L1:   new               class java\/lang\/Object;\n+         dup;\n+         dup;\n+         ifnonnull         L18;\n+         nop;\n+  L18:   invokespecial     Method java\/lang\/Object.\"<init>\":\"()V\";\n+         return;\n+  }\n+} \/\/ end Class UninitializedIfNullOld\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedIfNullOld.jasm","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8366743\n+ * @summary Test spec rules for uninitialized\n+ * @compile UninitThisAcmp.jasm UninitThisIfNull.jasm\n+ *          UninitializedIfNull.jasm UninitializedAcmp.jasm\n+ *          UninitThisAcmpOld.jasm UninitThisIfNullOld.jasm\n+ *          UninitializedAcmpOld.jasm UninitializedIfNullOld.jasm\n+ * @run main\/othervm -Xlog:verification UninitializedThisVerificationTest\n+ *\/\n+\n+public class UninitializedThisVerificationTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        String[] testNames = { \"UninitThisAcmp\", \"UninitThisIfNull\",\n+                               \"UninitializedAcmp\", \"UninitializedIfNull\",\n+                               \"UninitThisAcmpOld\", \"UninitThisIfNullOld\",\n+                               \"UninitializedAcmpOld\", \"UninitializedIfNullOld\" };\n+        int fails = 0;\n+        for (String test : testNames) {\n+            System.out.println(\"Testing \" + test);\n+            try {\n+                Class c = Class.forName(test);\n+                System.out.println(\"Failed\");\n+                fails++;\n+            } catch (java.lang.VerifyError e) {\n+                System.out.println(\"Passed\");\n+            }\n+        }\n+\n+        if (fails > 0) {\n+            throw new RuntimeException(\"Failed: Expected VerifyError in \" + fails + \" tests\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/UninitializedThisVerificationTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -43,0 +44,1 @@\n+import java.util.Arrays;\n@@ -58,0 +60,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -416,0 +421,65 @@\n+\n+    enum ComparisonInstruction {\n+        IF_ACMPEQ(Opcode.IF_ACMPEQ, 2),\n+        IF_ACMPNE(Opcode.IF_ACMPNE, 2),\n+        IFNONNULL(Opcode.IFNONNULL, 1),\n+        IFNULL(Opcode.IFNULL, 1);\n+        final Opcode opcode;\n+        final int argCount;\n+        ComparisonInstruction(Opcode opcode, int argCount) {\n+            this.opcode = opcode;\n+            this.argCount = argCount;\n+        }\n+    }\n+\n+    enum UninitializeKind {\n+        UNINITIALIZED, UNINITIALIZED_THIS\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"uninitializedInBytecodeClasses\")\n+    public void testUninitializedInComparisons(ComparisonInstruction inst, UninitializeKind kind) throws Throwable {\n+        var bytes = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(INIT_NAME, MTD_void, 0, cob -> {\n+                    StackMapFrameInfo.VerificationTypeInfo uninitializeInfo;\n+                    if (kind == UninitializeKind.UNINITIALIZED) {\n+                        uninitializeInfo = StackMapFrameInfo.UninitializedVerificationTypeInfo.of(cob.newBoundLabel());\n+                        cob.new_(CD_Object);\n+                    } else {\n+                        uninitializeInfo = StackMapFrameInfo.SimpleVerificationTypeInfo.UNINITIALIZED_THIS;\n+                        cob.aload(0);\n+                    }\n+\n+                    \/\/ Stack: uninitializeInfo\n+                    for (int i = 0; i < inst.argCount; i++) {\n+                        cob.dup();\n+                    }\n+                    var dest = cob.newLabel();\n+                    cob.branch(inst.opcode, dest)\n+                       .nop()\n+                       .labelBinding(dest)\n+                       .with(StackMapTableAttribute.of(List.of(StackMapFrameInfo.of(dest,\n+                               List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.UNINITIALIZED_THIS),\n+                               List.of(uninitializeInfo)))))\n+                       .invokespecial(CD_Object, INIT_NAME, MTD_void);\n+                    if (kind == UninitializeKind.UNINITIALIZED) {\n+                        \/\/ still need to call super constructor\n+                        cob.aload(0)\n+                           .invokespecial(CD_Object, INIT_NAME, MTD_void);\n+                    }\n+                    cob.return_();\n+                }));\n+        var errors = ClassFile.of().verify(bytes);\n+        assertNotEquals(List.of(), errors, () -> errors + \" : \" + ClassFile.of().parse(bytes).toDebugString());\n+        var lookup = MethodHandles.lookup();\n+        assertThrows(VerifyError.class, () -> lookup.defineHiddenClass(bytes, true)); \/\/ force JVM verification\n+    }\n+\n+    public static Stream<Arguments> uninitializedInBytecodeClasses() {\n+        return Arrays.stream(ComparisonInstruction.values())\n+                .mapMulti((inst, sink) -> {\n+                    for (var kind : UninitializeKind.values()) {\n+                        sink.accept(Arguments.of(inst, kind));\n+                    }\n+                });\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"}]}