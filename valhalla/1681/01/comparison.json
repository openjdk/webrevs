{"files":[{"patch":"@@ -24,2 +24,13 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n+ * @bug 8252506\n+ * @summary Verify that arraycopy intrinsics properly handle flat value class arrays with oop fields.\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main compiler.valhalla.inlinetypes.TestArrayCopyWithOops\n+ *\/\n+\n+\/*\n+ * @test id=do\n@@ -36,0 +47,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=do-no-flattening\n+ * @bug 8252506\n+ * @summary Verify that arraycopy intrinsics properly handle flat value class arrays with oop fields.\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -40,1 +61,0 @@\n- * @run main\/othervm compiler.valhalla.inlinetypes.TestArrayCopyWithOops\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,1 +25,11 @@\n- * @test\n+ * @test id=default\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=no-monomorphic\n@@ -31,1 +41,0 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestArrayMetadata\n@@ -33,15 +42,58 @@\n- *                   -XX:-MonomorphicArrayCheck -XX:-OmitStackTraceInFastThrow\n- *                   compiler.valhalla.inlinetypes.TestArrayMetadata\n- * @run main\/othervm\/timeout=300 -Xcomp\n- *                   compiler.valhalla.inlinetypes.TestArrayMetadata\n- * @run main\/othervm\/timeout=300 -XX:MultiArrayExpandLimit=0\n-                     compiler.valhalla.inlinetypes.TestArrayMetadata\n- * @run main\/othervm\/timeout=300 -Xbatch\n- *                   -XX:CompileCommand=compileonly,*TestArrayMetadata::* -XX:CompileCommand=dontinline,*TestArrayMetadata::test*\n- *                   compiler.valhalla.inlinetypes.TestArrayMetadata\n- * @run main\/othervm\/timeout=300 -Xbatch\n- *                   -XX:CompileCommand=compileonly,*TestArrayMetadata::* -XX:CompileCommand=dontinline,*TestArrayMetadata::*\n- *                   compiler.valhalla.inlinetypes.TestArrayMetadata\n- * @run main\/othervm\/timeout=300 -Xbatch\n- *                   -XX:CompileCommand=compileonly,*TestArrayMetadata::main -XX:CompileCommand=dontinline,*TestArrayMetadata::test*\n- *                   compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *                               -XX:-MonomorphicArrayCheck -XX:-OmitStackTraceInFastThrow\n+ *                               compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=xcomp\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xcomp compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=expand-zero\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -XX:MultiArrayExpandLimit=0 compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=co-di-test\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch -XX:CompileCommand=compileonly,*TestArrayMetadata::*\n+ *                               -XX:CompileCommand=dontinline,*TestArrayMetadata::test*\n+ *                               compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=co-di\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch -XX:CompileCommand=compileonly,*TestArrayMetadata::*\n+ *                               -XX:CompileCommand=dontinline,*TestArrayMetadata::*\n+ *                               compiler.valhalla.inlinetypes.TestArrayMetadata\n+ *\/\n+\n+\/*\n+ * @test id=co-main-di-test\n+ * @summary Stress test the VM internal metadata for arrays.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch -XX:CompileCommand=compileonly,*TestArrayMetadata::main\n+ *                               -XX:CompileCommand=dontinline,*TestArrayMetadata::test*\n+ *                                compiler.valhalla.inlinetypes.TestArrayMetadata\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayMetadata.java","additions":69,"deletions":17,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test\n+ * @test id=default\n@@ -44,35 +44,153 @@\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- *\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- *\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:CompileCommand=dontinline,*::test* -XX:CompileCommand=dontinline,*::check*\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-MonomorphicArrayCheck -XX:-UseArrayLoadStoreProfile\n- *                   compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=nAVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=AVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=AVF-nAVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF-nAVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF-AVF\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-di\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:CompileCommand=dontinline,*::test* -XX:CompileCommand=dontinline,*::check*\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-restrict-profiling\n+ * @summary Test support for null markers in (flat) arrays.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:+IgnoreUnrecognizedVMOptions -XX:-MonomorphicArrayCheck -XX:-UseArrayLoadStoreProfile\n+ *                               compiler.valhalla.inlinetypes.TestArrayNullMarkers\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayNullMarkers.java","additions":154,"deletions":36,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm compiler.valhalla.inlinetypes.TestArrayRematerializationWithProperties\n+ * @run main compiler.valhalla.inlinetypes.TestArrayRematerializationWithProperties\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayRematerializationWithProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestC1\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestC1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -33,1 +33,11 @@\n- *                   TestC2CCalls\n+ *                               compiler.valhalla.inlinetypes.TestC2CCalls\n+ *\/\n+\n+\/*\n+ * @test id=no-bimorphic\n+ * @key randomness\n+ * @summary Test value class calling convention with compiled to compiled calls.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -35,4 +45,14 @@\n- *                   -XX:-UseBimorphicInlining -Xbatch\n- *                   -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n- *                   -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n- *                   TestC2CCalls\n+ *                               -XX:-UseBimorphicInlining -Xbatch\n+ *                               -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               compiler.valhalla.inlinetypes.TestC2CCalls\n+ *\/\n+\n+\/*\n+ * @test id=no-bimorphic-no-prof\n+ * @key randomness\n+ * @summary Test value class calling convention with compiled to compiled calls.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -40,4 +60,14 @@\n- *                   -XX:-UseBimorphicInlining -Xbatch -XX:-ProfileInterpreter\n- *                   -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n- *                   -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n- *                   TestC2CCalls\n+ *                               -XX:-UseBimorphicInlining -Xbatch -XX:-ProfileInterpreter\n+ *                               -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               compiler.valhalla.inlinetypes.TestC2CCalls\n+ *\/\n+\n+\/*\n+ * @test id=no-bimorphic2\n+ * @key randomness\n+ * @summary Test value class calling convention with compiled to compiled calls.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -45,4 +75,14 @@\n- *                   -XX:-UseBimorphicInlining -Xbatch\n- *                   -XX:CompileCommand=compileonly,TestC2CCalls::test*\n- *                   -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n- *                   TestC2CCalls\n+ *                              -XX:-UseBimorphicInlining -Xbatch\n+ *                              -XX:CompileCommand=compileonly,TestC2CCalls::test*\n+ *                              -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                              compiler.valhalla.inlinetypes.TestC2CCalls\n+ *\/\n+\n+\/*\n+ * @test id=no-bimorphic-no-prof2\n+ * @key randomness\n+ * @summary Test value class calling convention with compiled to compiled calls.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -50,4 +90,4 @@\n- *                   -XX:-UseBimorphicInlining -Xbatch -XX:-ProfileInterpreter\n- *                   -XX:CompileCommand=compileonly,TestC2CCalls::test*\n- *                   -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n- *                   TestC2CCalls\n+ *                               -XX:-UseBimorphicInlining -Xbatch -XX:-ProfileInterpreter\n+ *                               -XX:CompileCommand=compileonly,TestC2CCalls::test*\n+ *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               compiler.valhalla.inlinetypes.TestC2CCalls\n@@ -56,0 +96,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":62,"deletions":20,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestCallingConventionC1\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestCallingConventionC1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-\/**\n- * @test TestDeoptimizationWhenBuffering\n+\/*\n+ * @test id=default\n@@ -47,1 +47,0 @@\n- * @enablePreview\n@@ -52,0 +51,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-TLAB\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -55,0 +66,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono-no-field\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -60,0 +83,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono-no-field-AII\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -65,0 +100,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -70,0 +117,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono-AII\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -75,0 +134,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono-no-FF\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -80,0 +151,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-mono-no-FF-AII\n+ * @summary Test correct execution after deoptimizing from inline type specific runtime calls.\n+ * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":86,"deletions":3,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @test\n+ * @test id=noFlags\n@@ -42,33 +42,188 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- *\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:CompileCommand=dontinline,*::testHelper*\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:+InlineTypeReturnedAsFields -XX:+InlineTypePassFieldsAsArgs\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:-InlineTypeReturnedAsFields -XX:-InlineTypePassFieldsAsArgs\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:+InlineTypeReturnedAsFields -XX:-InlineTypePassFieldsAsArgs\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n- * @run main\/othervm\/timeout=300 -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n- *                   -XX:-InlineTypeReturnedAsFields -XX:+InlineTypePassFieldsAsArgs\n- *                   compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=nAVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=AVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=AVF-nAVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:-UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF-nAVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:-UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=NVF-AVF\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:-UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-di\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:CompileCommand=dontinline,*::testHelper*\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-pass-fields\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:+InlineTypeReturnedAsFields -XX:+InlineTypePassFieldsAsArgs\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-no-pass-fields\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:-InlineTypeReturnedAsFields -XX:-InlineTypePassFieldsAsArgs\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-return-fields\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:+InlineTypeReturnedAsFields -XX:-InlineTypePassFieldsAsArgs\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n+ *\/\n+\n+\/*\n+ * @test id=all-flattening-pass-args\n+ * @key randomness\n+ * @summary Test support for null markers in flat fields.\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm\/timeout=300 -Xbatch\n+ *                               -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                               -XX:-InlineTypeReturnedAsFields -XX:+InlineTypePassFieldsAsArgs\n+ *                               compiler.valhalla.inlinetypes.TestFieldNullMarkers\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":189,"deletions":34,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestGetfieldChains\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestGetfieldChains\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n- * @run main\/othervm\/timeout=600 compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestLWorld\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestLWorldProfiling\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestLWorldProfiling\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm compiler.valhalla.inlinetypes.TestLarvalState\n+ * @run main compiler.valhalla.inlinetypes.TestLarvalState\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLarvalState.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n- * @run main\/othervm\/timeout=450 compiler.valhalla.inlinetypes.TestMethodHandles\n+ * @run main\/timeout=450 compiler.valhalla.inlinetypes.TestMethodHandles\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- * @run main\/othervm\/timeout=600 compiler.valhalla.inlinetypes.TestNullableArrays\n+ * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestNullableArrays\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- * @run main\/othervm\/timeout=1000 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n+ * @run main\/timeout=1000 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @run main\/othervm\/timeout=600 compiler.valhalla.inlinetypes.TestOnStackReplacement\n+ * @run main\/timeout=600 compiler.valhalla.inlinetypes.TestOnStackReplacement\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=int\n@@ -32,4 +32,13 @@\n- *                   -Xbatch -XX:-TieredCompilation\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention Interpreted\n+ *                               -Xbatch -XX:-TieredCompilation\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention Interpreted\n+ *\/\n+\n+\/*\n+ * @test id=c1\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -40,1 +49,10 @@\n- *                   TestOopsInReturnConvention C1\n+ *                   compiler.valhalla.inlinetypes.TestOopsInReturnConvention C1\n+ *\/\n+\n+\/*\n+ * @test id=c2\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -42,4 +60,13 @@\n- *                   -Xbatch -XX:-TieredCompilation\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention C2\n+ *                               -Xbatch\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention C2\n+ *\/\n+\n+\/*\n+ * @test id=int-stress-cc\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -47,4 +74,14 @@\n- *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention Interpreted\n+ *                               -Xbatch -XX:-TieredCompilation\n+ *                               -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                                compiler.valhalla.inlinetypes.TestOopsInReturnConvention Interpreted\n+ *\/\n+\n+\/*\n+ * @test id=c1-stress-cc\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -52,4 +89,13 @@\n- *                   -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention C1\n+ *                               -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention C1\n+ *\/\n+\n+\/*\n+ * @test id=c2-stress-cc\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -57,4 +103,13 @@\n- *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention C2\n+ *                               -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+StressCallingConvention\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention C2\n+ *\/\n+\n+\/*\n+ * @test id=int-no-preload\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -62,4 +117,14 @@\n- *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention Interpreted\n+ *                               -Xbatch -XX:-TieredCompilation\n+ *                               -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention Interpreted\n+ *\/\n+\n+\/*\n+ * @test id=c1-no-preload\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -67,4 +132,14 @@\n- *                   -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention C1\n+ *                               -Xbatch\n+ *                               -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention C1\n+ *\/\n+\n+\/*\n+ * @test id=c2-no-preload\n+ * @summary Test that oop fields in scalarized returns are properly handled.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -72,5 +147,9 @@\n- *                   -Xbatch -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n- *                   TestOopsInReturnConvention C2\n- **\/\n+ *                               -Xbatch -XX:-TieredCompilation\n+ *                               -XX:+IgnoreUnrecognizedVMOptions -XX:-PreloadClasses\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               compiler.valhalla.inlinetypes.TestOopsInReturnConvention C2\n+ *\/\n+\n+\n+package compiler.valhalla.inlinetypes;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOopsInReturnConvention.java","additions":115,"deletions":36,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -38,2 +38,4 @@\n-\/**\n- * @test id=tiered\n+\/\/ Tiered compilation runs:\n+\n+\/*\n+ * @test id=no-flattening\n@@ -51,0 +53,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening-AII\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -55,0 +69,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening-di\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -59,0 +85,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening-di-AII\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -64,1 +102,12 @@\n- *\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-no-stress\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -66,2 +115,14 @@\n- *                   -Xcomp -XX:-TieredCompilation\n- *                   compiler.valhalla.inlinetypes.TestTearing\n+ *                                -Xcomp -XX:-TieredCompilation\n+ *                                compiler.valhalla.inlinetypes.TestTearing\n+ *\/\n+\n+\/*\n+ * @test id=flattening\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -71,0 +132,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=flattening-AII\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -75,0 +148,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=flattening-di\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -79,0 +164,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=flattening-di-AII\n+ * @key randomness\n+ * @requires vm.compMode != \"Xint\" & vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @summary Detect tearing on flat accesses and buffering.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -86,3 +183,5 @@\n-\/**\n- * @test id=c1\n- * @key randomness\n+\n+\/\/ C1 only runs:\n+\n+\/*\n+ * @test id=c1-no-flattening\n@@ -98,1 +197,0 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n@@ -100,0 +198,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=c1-no-flattening-AII\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -101,1 +211,0 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n@@ -104,0 +213,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=c1-no-flattening-di\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -106,1 +227,0 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n@@ -108,0 +228,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=c1-no-flattening-di-AII\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -110,1 +242,0 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n@@ -113,1 +244,12 @@\n- *\n+ *\/\n+\n+\/*\n+ * @test id=c1-xcomp\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -115,1 +257,28 @@\n- *                   -Xcomp compiler.valhalla.inlinetypes.TestTearing C1\n+ *                                -Xcomp -XX:-TieredCompilation\n+ *                                compiler.valhalla.inlinetypes.TestTearing C1\n+ *\/\n+\n+\/*\n+ * @test id=c1-flattening\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseArrayFlattening\n+ *                   compiler.valhalla.inlinetypes.TestTearing C1\n+ *\/\n+\n+\/*\n+ * @test id=c1-flattening-AII\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -117,1 +286,0 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:+StressLCM\n@@ -120,0 +288,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=c1-flattening-di\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -123,0 +303,12 @@\n+ *\/\n+\n+\/*\n+ * @test id=c1-flattening-di-AII\n+ * @requires vm.compMode != \"Xint\" & (vm.opt.TieredStopAtLevel != null & vm.opt.TieredStopAtLevel < 4)\n+ * @summary Detect tearing on flat accesses and buffering. These runs use a much smaller loop limit to avoid timeouts\n+ *          with C1 only.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTearing.java","additions":207,"deletions":15,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=AII-fixed-seed\n@@ -35,0 +35,8 @@\n+ *\/\n+\n+\/*\n+ * @test id=AII\n+ * @bug 8270995\n+ * @summary Membars of non-escaping value class buffer allocations should be removed.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n@@ -40,0 +48,8 @@\n+ *\/\n+\n+\/*\n+ * @test id=default\n+ * @bug 8270995\n+ * @summary Membars of non-escaping value class buffer allocations should be removed.\n+ * @library \/test\/lib \/\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -36,0 +36,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=no-flattening\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -39,2 +49,21 @@\n- * @run main\/othervm -Xcomp\n- *                   TestUnloadedInlineTypeArray\n+ *\/\n+\n+\/*\n+ * @test id=xcomp\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm -Xcomp TestUnloadedInlineTypeArray\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-no-flattening\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -43,0 +72,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=c2\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -46,0 +85,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=c2-no-flattening\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -49,0 +98,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-c2\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n@@ -51,0 +110,10 @@\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-c2-no-flattening\n+ * @bug 8182997 8214898\n+ * @library \/test\/lib\n+ * @summary Test the handling of arrays of unloaded value classes.\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":73,"deletions":4,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm TestUnresolvedInlineClass\n+ * @run main TestUnresolvedInlineClass\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestValueClasses\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestValueClasses\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @run main\/othervm\/timeout=300 compiler.valhalla.inlinetypes.TestValueRematDuringTypeSharpening\n+ * @run main\/timeout=300 compiler.valhalla.inlinetypes.TestValueRematDuringTypeSharpening\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueRematDuringTypeSharpening.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -33,2 +33,11 @@\n- *                   TestVirtualThreads\n- *\n+ *                   compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=ci\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -37,1 +46,11 @@\n- *                   TestVirtualThreads\n+ *                   compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=ci-test\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -39,2 +58,12 @@\n- *                   -Xbatch -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n- *                   TestVirtualThreads\n+ *                               -Xbatch -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                                compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=ci-test-di\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -42,2 +71,14 @@\n- *                   -Xbatch -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=dontinline,*::test*\n- *                   TestVirtualThreads\n+ *                               -Xbatch -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=dontinline,*::test*\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=ci-test-di-helper\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -45,2 +86,14 @@\n- *                   -Xbatch -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=dontinline,*::*Helper\n- *                   TestVirtualThreads\n+ *                               -Xbatch -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=dontinline,*::*Helper\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=ci-test-di-exclude-helper\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -48,2 +101,14 @@\n- *                   -Xbatch -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=exclude,*::*Helper\n- *                   TestVirtualThreads\n+ *                               -Xbatch -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=exclude,*::*Helper\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-ci\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -51,2 +116,12 @@\n- *                    -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n- *                   TestVirtualThreads\n+ *                               -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-co-test\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -54,2 +129,12 @@\n- *                   -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n- *                   TestVirtualThreads\n+ *                               -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-co-test-di\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -57,2 +142,14 @@\n- *                   -Xcomp -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=dontinline,*::test*\n- *                   TestVirtualThreads\n+ *                               -Xcomp -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=dontinline,*::test*\n+ *                                compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-co-test-di-helper\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -60,2 +157,14 @@\n- *                   -Xcomp -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=dontinline,*::*Helper\n- *                   TestVirtualThreads\n+ *                               -Xcomp -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=dontinline,*::*Helper\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-co-test-di-exclude-helper\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -63,2 +172,14 @@\n- *                   -Xcomp -XX:CompileCommand=dontinline,*::dontinline -XX:CompileCommand=compileonly,TestVirtualThreads*::test* -XX:CompileCommand=exclude,*::*Helper\n- *                   TestVirtualThreads\n+ *                               -Xcomp -XX:CompileCommand=dontinline,*::dontinline\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=exclude,*::*Helper\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads\n+ *\/\n+\n+\/*\n+ * @test id=co-di\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -66,2 +187,13 @@\n- *                   -Xbatch -XX:CompileCommand=dontinline,*::* -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n- *                   TestVirtualThreads 250000\n+ *                               -Xbatch -XX:CompileCommand=dontinline,*::*\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                                compiler.valhalla.inlinetypes.TestVirtualThreads 250000\n+ *\/\n+\n+\/*\n+ * @test id=xcomp-co-di\n+ * @key randomness\n+ * @summary Test that Virtual Threads work well with Value Objects.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @enablePreview\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -69,3 +201,6 @@\n- *                   -Xcomp -XX:CompileCommand=dontinline,*::* -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n- *                   TestVirtualThreads 250000\n- **\/\n+ *                               -Xcomp -XX:CompileCommand=dontinline,*::*\n+ *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                               compiler.valhalla.inlinetypes.TestVirtualThreads 250000\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestVirtualThreads.java","additions":163,"deletions":28,"binary":false,"changes":191,"status":"modified"}]}