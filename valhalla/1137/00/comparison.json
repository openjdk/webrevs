{"files":[{"patch":"@@ -1545,3 +1545,0 @@\n-        if (!PreviewFeatures.isEnabled() && location == AccessFlag.Location.INNER_CLASS) {\n-            accessFlags &= ~Modifier.IDENTITY; \/\/ drop ACC_IDENTITY bit in inner class if not in preview\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -727,3 +727,8 @@\n-                                Set.of(PUBLIC, PRIVATE, PROTECTED,\n-                                       STATIC, FINAL, VOLATILE,\n-                                       TRANSIENT, SYNTHETIC, ENUM, STRICT_FIELD)),\n+                                PreviewFeatures.isEnabled() ?\n+                                        \/\/ STRICT_FIELD should be included only if preview is enabled\n+                                        Set.of(PUBLIC, PRIVATE, PROTECTED,\n+                                            STATIC, FINAL, VOLATILE,\n+                                            TRANSIENT, SYNTHETIC, ENUM, STRICT_FIELD) :\n+                                        Set.of(PUBLIC, PRIVATE, PROTECTED,\n+                                                STATIC, FINAL, VOLATILE,\n+                                                TRANSIENT, SYNTHETIC, ENUM)),\n@@ -736,3 +741,8 @@\n-                                Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY,\n-                                       STATIC, FINAL, INTERFACE, ABSTRACT,\n-                                       SYNTHETIC, ANNOTATION, ENUM)),\n+                                  PreviewFeatures.isEnabled() ?\n+                                          \/\/ IDENTITY should be included only if preview is enabled\n+                                          Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY,\n+                                                  STATIC, FINAL, INTERFACE, ABSTRACT,\n+                                                  SYNTHETIC, ANNOTATION, ENUM) :\n+                                          Set.of(PUBLIC, PRIVATE, PROTECTED,\n+                                                  STATIC, FINAL, INTERFACE, ABSTRACT,\n+                                                  SYNTHETIC, ANNOTATION, ENUM)),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Set;\n@@ -55,0 +56,2 @@\n+    class Inner {}\n+\n@@ -68,0 +71,2 @@\n+        Set<AccessFlag> accessFlagSet = cls.accessFlags();\n+        assertTrue(!accessFlagSet.contains(AccessFlag.IDENTITY));\n@@ -73,0 +78,1 @@\n+                Inner.class,\n","filename":"test\/jdk\/java\/lang\/reflect\/valhalla\/ValueClassesReflectionTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}