{"files":[{"patch":"@@ -1880,1 +1880,1 @@\n-  array = _gvn.transform(new CheckCastPPNode(control(), array, arytype));\n+  array = _gvn.transform(new CheckCastPPNode(control(), array, arytype, ConstraintCastNode::StrongDependency));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-          bool is_naturally_atomic = (is_null_free && vk->nof_declared_nonstatic_fields() <= 1);\n-          bool may_need_atomicity = !is_naturally_atomic && ((!is_not_null_free && vk->has_atomic_layout()) || (!is_null_free && vk->has_nullable_atomic_layout()));\n+          bool maybe_atomic = (!is_not_null_free && vk->has_atomic_layout()) || (!is_null_free && vk->has_nullable_atomic_layout());\n@@ -129,1 +128,1 @@\n-          ciArrayKlass* array_klass = ciArrayKlass::make(vk, \/* flat *\/ true, is_null_free, may_need_atomicity);\n+          ciArrayKlass* array_klass = ciArrayKlass::make(vk, \/* flat *\/ true, is_null_free, maybe_atomic);\n@@ -295,2 +294,1 @@\n-            bool is_naturally_atomic = (is_null_free && vk->nof_declared_nonstatic_fields() <= 1);\n-            bool may_need_atomicity = !is_naturally_atomic && ((!is_not_null_free && vk->has_atomic_layout()) || (!is_null_free && vk->has_nullable_atomic_layout()));\n+            bool maybe_atomic = (!is_not_null_free && vk->has_atomic_layout()) || (!is_null_free && vk->has_nullable_atomic_layout());\n@@ -298,1 +296,1 @@\n-            ciArrayKlass* array_klass = ciArrayKlass::make(vk, \/* flat *\/ true, is_null_free, may_need_atomicity);\n+            ciArrayKlass* array_klass = ciArrayKlass::make(vk, \/* flat *\/ true, is_null_free, maybe_atomic);\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1228,0 +1228,15 @@\n+\n+    static final MyValue47Holder[] MY_VALUE_47_HOLDERS = (MyValue47Holder[]) ValueClass.newNullRestrictedAtomicArray(MyValue47Holder.class, 2, new MyValue47Holder(rI));\n+\n+    @Test\n+    @IR(applyIfAnd = {\"UseFieldFlattening\", \"true\", \"UseArrayFlattening\", \"true\", \"UseAtomicValueFlattening\", \"true\"}, counts = {IRNode.LOAD_S, \"1\"})\n+    @IR(applyIfAnd = {\"UseFieldFlattening\", \"true\", \"UseArrayFlattening\", \"true\", \"UseAtomicValueFlattening\", \"true\"}, failOn = {IRNode.LOAD_B})\n+    public MyValue47Holder test48() {\n+        return MY_VALUE_47_HOLDERS[0];\n+    }\n+\n+    @Run(test = \"test48\")\n+    public void test48_verifier() {\n+        MyValue47Holder v = new MyValue47Holder(rI);\n+        Asserts.assertEQ(test48(), v);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}