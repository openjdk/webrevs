{"files":[{"patch":"@@ -187,0 +187,2 @@\n+        allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -205,0 +207,4 @@\n+    \/** Are value classes allowed\n+     *\/\n+    private final boolean allowValueClasses;\n+\n@@ -1123,1 +1129,1 @@\n-                            if (TreeInfo.hasAnyConstructorCall(tree)) {\n+                            if (!allowValueClasses && TreeInfo.hasAnyConstructorCall(tree)) {\n@@ -1205,1 +1211,1 @@\n-                        if (owner.isValueClass() || owner.hasStrict()) {\n+                        if (allowValueClasses && (owner.isValueClass() || owner.hasStrict() || ((owner.flags_field & RECORD) != 0))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1237,3 +1237,4 @@\n-                boolean isInstanceFieldOfValueClass = sym.owner.type.isValueClass() && (flags & STATIC) == 0;\n-                mask = !isInstanceFieldOfValueClass ? VarFlags : ValueFieldFlags;\n-                if (isInstanceFieldOfValueClass) {\n+                boolean isInstanceField = (flags & STATIC) == 0;\n+                boolean isInstanceFieldOfValueClass = isInstanceField && sym.owner.type.isValueClass();\n+                boolean isRecordField = isInstanceField && (sym.owner.flags_field & RECORD) != 0;\n+                if (allowValueClasses && (isInstanceFieldOfValueClass || isRecordField)) {\n@@ -1241,0 +1242,3 @@\n+                    mask = ValueFieldFlags;\n+                } else {\n+                    mask = VarFlags;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -221,0 +221,1 @@\n+    private final boolean allowValueClasses;\n@@ -347,0 +348,4 @@\n+        Preview preview = Preview.instance(context);\n+        Source source = Source.instance(context);\n+        allowValueClasses = (!preview.isPreview(Source.Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Source.Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -2202,0 +2207,1 @@\n+        private boolean isCompactOrGeneratedRecordConstructor;\n@@ -2524,0 +2530,1 @@\n+                boolean isCompactOrGeneratedRecordConstructorPrev = isCompactOrGeneratedRecordConstructor;\n@@ -2526,0 +2533,2 @@\n+                    isCompactOrGeneratedRecordConstructor = isConstructor && ((tree.sym.flags() & Flags.COMPACT_RECORD_CONSTRUCTOR) != 0 ||\n+                            (tree.sym.flags() & (GENERATEDCONSTR | RECORD)) == (GENERATEDCONSTR | RECORD));\n@@ -2553,2 +2562,0 @@\n-                    boolean isCompactOrGeneratedRecordConstructor = (tree.sym.flags() & Flags.COMPACT_RECORD_CONSTRUCTOR) != 0 ||\n-                            (tree.sym.flags() & (GENERATEDCONSTR | RECORD)) == (GENERATEDCONSTR | RECORD);\n@@ -2598,0 +2605,1 @@\n+                    isCompactOrGeneratedRecordConstructor = isCompactOrGeneratedRecordConstructorPrev;\n@@ -3099,4 +3107,1 @@\n-                        boolean isInstanceRecordField = var.enclClass().isRecord() &&\n-                                (var.flags_field & (Flags.PRIVATE | Flags.FINAL | Flags.GENERATED_MEMBER | Flags.RECORD)) != 0 &&\n-                                var.owner.kind == TYP;\n-                        if (var.owner == classDef.sym && !var.isStatic() && var.isStrict() && !isInstanceRecordField) {\n+                        if (allowValueClasses && (var.owner == classDef.sym && !var.isStatic() && (var.isStrict() || ((var.flags_field & RECORD) != 0)) && !isCompactOrGeneratedRecordConstructor)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2787,1 +2787,1 @@\n-                if (tree.sym.owner.isValueClass() || tree.sym.owner.hasStrict()) {\n+                if (allowValueClasses && (tree.sym.owner.isValueClass() || tree.sym.owner.hasStrict() || ((ClassSymbol)tree.sym.owner).isRecord())) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,0 +139,4 @@\n+        Preview preview = Preview.instance(context);\n+        Source source = Source.instance(context);\n+        allowValueClasses = (!preview.isPreview(Source.Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Source.Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -149,0 +153,1 @@\n+    private final boolean allowValueClasses;\n@@ -565,1 +570,1 @@\n-            if (md.sym.owner.isValueClass() || md.sym.owner.hasStrict()) {\n+            if (allowValueClasses & (md.sym.owner.isValueClass() || md.sym.owner.hasStrict() || ((md.sym.owner.flags_field & RECORD) != 0))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -505,6 +505,9 @@\n-                if (enclosingElement != null &&\n-                    enclosingElement.getKind().isInterface()) {\n-                    modifiers.remove(Modifier.PUBLIC);\n-                    modifiers.remove(Modifier.ABSTRACT); \/\/ only for methods\n-                    modifiers.remove(Modifier.STATIC);   \/\/ only for fields\n-                    modifiers.remove(Modifier.FINAL);    \/\/ only for fields\n+                if (enclosingElement != null) {\n+                    if (enclosingElement.getKind().isInterface()) {\n+                        modifiers.remove(Modifier.PUBLIC);\n+                        modifiers.remove(Modifier.ABSTRACT); \/\/ only for methods\n+                        modifiers.remove(Modifier.STATIC);   \/\/ only for fields\n+                        modifiers.remove(Modifier.FINAL);    \/\/ only for fields\n+                    } else if (enclosingElement.getKind() == RECORD) {\n+                        modifiers.remove(Modifier.STRICTFP);\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/\/key: compiler.warn.preview.feature.use.plural\n-\/\/key: compiler.misc.feature.var.syntax.in.implicit.lambda\n+\/\/key: compiler.warn.preview.feature.use\n+\/\/key: compiler.misc.feature.flexible.constructors\n@@ -31,2 +31,3 @@\n-    void test() {\n-        Function<String, String> f = (var s) -> s;\n+    PreviewFeatureUse() {\n+        System.out.println(\"early init!\");\n+        super();\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PreviewFeatureUse.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}