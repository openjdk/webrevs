{"files":[{"patch":"@@ -232,1 +232,0 @@\n-            case FLEXIBLE_CONSTRUCTORS -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-        FLEXIBLE_CONSTRUCTORS(JDK22, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n+        FLEXIBLE_CONSTRUCTORS(JDK25, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,0 +187,2 @@\n+        allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -205,0 +207,4 @@\n+    \/** Are value classes allowed\n+     *\/\n+    private final boolean allowValueClasses;\n+\n@@ -1123,1 +1129,1 @@\n-                            if (TreeInfo.hasAnyConstructorCall(tree)) {\n+                            if (!allowValueClasses && TreeInfo.hasAnyConstructorCall(tree)) {\n@@ -1205,1 +1211,1 @@\n-                        if (owner.isValueClass() || owner.hasStrict()) {\n+                        if (owner.isValueClass() || owner.hasStrict() || ((owner.flags_field & RECORD) != 0)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1237,3 +1237,4 @@\n-                boolean isInstanceFieldOfValueClass = sym.owner.type.isValueClass() && (flags & STATIC) == 0;\n-                mask = !isInstanceFieldOfValueClass ? VarFlags : ValueFieldFlags;\n-                if (isInstanceFieldOfValueClass) {\n+                boolean isInstanceField = (flags & STATIC) == 0;\n+                boolean isInstanceFieldOfValueClass = isInstanceField && sym.owner.type.isValueClass();\n+                boolean isRecordField = isInstanceField && (sym.owner.flags_field & RECORD) != 0;\n+                if (isInstanceFieldOfValueClass || isRecordField) {\n@@ -1241,0 +1242,3 @@\n+                    mask = ValueFieldFlags;\n+                } else {\n+                    mask = VarFlags;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2202,0 +2202,1 @@\n+        private boolean isCompactOrGeneratedRecordConstructor;\n@@ -2524,0 +2525,1 @@\n+                boolean isCompactOrGeneratedRecordConstructorPrev = isCompactOrGeneratedRecordConstructor;\n@@ -2526,0 +2528,2 @@\n+                    isCompactOrGeneratedRecordConstructor = isConstructor && ((tree.sym.flags() & Flags.COMPACT_RECORD_CONSTRUCTOR) != 0 ||\n+                            (tree.sym.flags() & (GENERATEDCONSTR | RECORD)) == (GENERATEDCONSTR | RECORD));\n@@ -2553,2 +2557,0 @@\n-                    boolean isCompactOrGeneratedRecordConstructor = (tree.sym.flags() & Flags.COMPACT_RECORD_CONSTRUCTOR) != 0 ||\n-                            (tree.sym.flags() & (GENERATEDCONSTR | RECORD)) == (GENERATEDCONSTR | RECORD);\n@@ -2598,0 +2600,1 @@\n+                    isCompactOrGeneratedRecordConstructor = isCompactOrGeneratedRecordConstructorPrev;\n@@ -3099,4 +3102,1 @@\n-                        boolean isInstanceRecordField = var.enclClass().isRecord() &&\n-                                (var.flags_field & (Flags.PRIVATE | Flags.FINAL | Flags.GENERATED_MEMBER | Flags.RECORD)) != 0 &&\n-                                var.owner.kind == TYP;\n-                        if (var.owner == classDef.sym && !var.isStatic() && var.isStrict() && !isInstanceRecordField) {\n+                        if (var.owner == classDef.sym && !var.isStatic() && (var.isStrict() || ((var.flags_field & RECORD) != 0)) && !isCompactOrGeneratedRecordConstructor) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2787,1 +2787,1 @@\n-                if (tree.sym.owner.isValueClass() || tree.sym.owner.hasStrict()) {\n+                if (tree.sym.owner.isValueClass() || tree.sym.owner.hasStrict() || ((ClassSymbol)tree.sym.owner).isRecord()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -565,1 +565,1 @@\n-            if (md.sym.owner.isValueClass() || md.sym.owner.hasStrict()) {\n+            if (md.sym.owner.isValueClass() || md.sym.owner.hasStrict() || ((md.sym.owner.flags_field & RECORD) != 0)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,4 +1,2 @@\n-DA_DUConstructors.java:23:17: compiler.err.var.might.already.be.assigned: x\n-DA_DUConstructors.java:42:23: compiler.err.var.might.not.have.been.initialized: x\n-- compiler.note.preview.filename: DA_DUConstructors.java, DEFAULT\n-- compiler.note.preview.recompile\n+DA_DUConstructors.java:22:17: compiler.err.var.might.already.be.assigned: x\n+DA_DUConstructors.java:41:23: compiler.err.var.might.not.have.been.initialized: x\n","filename":"test\/langtools\/tools\/javac\/DefiniteAssignment\/DA_DUConstructors.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/LocalClassCtorPrologue.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-LocalClassCtorPrologue.java:16:17: compiler.err.cant.ref.before.ctor.called: x\n-- compiler.note.preview.filename: LocalClassCtorPrologue.java, DEFAULT\n-- compiler.note.preview.recompile\n+LocalClassCtorPrologue.java:15:17: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/LocalClassCtorPrologue.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview1.out -XDrawDiagnostics EarlyAssignmentNoPreview1.java\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview1.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview1.java\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyAssignmentNoPreview1.java:12:14: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+EarlyAssignmentNoPreview1.java:12:14: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.flexible.constructors), 24, 25\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview2.out -XDrawDiagnostics EarlyAssignmentNoPreview2.java\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview2.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview2.java\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyAssignmentNoPreview2.java:12:14: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+EarlyAssignmentNoPreview2.java:12:14: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.flexible.constructors), 24, 25\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=EarlyAssignmentNoPreview3.out -XDrawDiagnostics EarlyAssignmentNoPreview3.java\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview3.out --release 24 -XDrawDiagnostics EarlyAssignmentNoPreview3.java\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyAssignmentNoPreview3.java:12:39: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+EarlyAssignmentNoPreview3.java:12:39: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.flexible.constructors), 24, 25\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,28 +1,26 @@\n-EarlyAssignments.java:21:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:22:17: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:23:23: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:31:21: compiler.err.cant.ref.before.ctor.called: super\n-EarlyAssignments.java:32:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:33:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:34:34: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:36:36: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:40:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:44:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:48:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:66:13: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:67:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:68:25: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:69:31: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:98:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:104:22: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:110:35: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:119:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:124:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:129:29: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:134:17: compiler.err.cant.ref.before.ctor.called: super\n-EarlyAssignments.java:139:23: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:148:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n-EarlyAssignments.java:157:13: compiler.err.cant.assign.val.to.var: final, x\n-EarlyAssignments.java:168:13: compiler.err.cant.ref.before.ctor.called: this\n-- compiler.note.preview.filename: EarlyAssignments.java, DEFAULT\n-- compiler.note.preview.recompile\n+EarlyAssignments.java:20:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:21:17: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:22:23: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:30:21: compiler.err.cant.ref.before.ctor.called: super\n+EarlyAssignments.java:31:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:32:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:33:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:35:36: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:39:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:43:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:47:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:65:13: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:66:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:67:25: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:68:31: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:97:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:103:22: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:109:35: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:118:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:123:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:128:29: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:133:17: compiler.err.cant.ref.before.ctor.called: super\n+EarlyAssignments.java:138:23: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:147:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n+EarlyAssignments.java:156:13: compiler.err.cant.assign.val.to.var: final, x\n+EarlyAssignments.java:167:13: compiler.err.cant.ref.before.ctor.called: this\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-EarlyInnerAccessErrorMessageTest.java:12:34: compiler.err.cant.ref.before.ctor.called: x\n-- compiler.note.preview.filename: EarlyInnerAccessErrorMessageTest.java, DEFAULT\n-- compiler.note.preview.recompile\n+EarlyInnerAccessErrorMessageTest.java:11:34: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-EarlyLocalClass.java:12:32: compiler.err.cant.ref.before.ctor.called: this\n-- compiler.note.preview.filename: EarlyLocalClass.java, DEFAULT\n-- compiler.note.preview.recompile\n+EarlyLocalClass.java:11:32: compiler.err.cant.ref.before.ctor.called: this\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,34 +1,32 @@\n-SuperInitFails.java:57:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:62:9: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:67:9: compiler.err.cant.ref.before.ctor.called: super\n-SuperInitFails.java:72:23: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:77:23: compiler.err.cant.ref.before.ctor.called: super\n-SuperInitFails.java:94:9: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:99:33: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:104:14: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:108:20: compiler.err.not.encl.class: java.lang.Object\n-SuperInitFails.java:112:17: compiler.err.cant.ref.before.ctor.called: super\n-SuperInitFails.java:119:22: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:125:9: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:133:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n-SuperInitFails.java:138:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n-SuperInitFails.java:155:31: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:159:15: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:168:13: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:172:17: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:176:24: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:180:18: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:195:25: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:200:33: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:205:29: compiler.err.redundant.superclass.init\n-SuperInitFails.java:33:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:37:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:41:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:45:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:49:33: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:53:32: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:83:18: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:89:13: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:150:18: compiler.err.call.must.only.appear.in.ctor\n-- compiler.note.preview.filename: SuperInitFails.java, DEFAULT\n-- compiler.note.preview.recompile\n+SuperInitFails.java:56:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:61:9: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:66:9: compiler.err.cant.ref.before.ctor.called: super\n+SuperInitFails.java:71:23: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:76:23: compiler.err.cant.ref.before.ctor.called: super\n+SuperInitFails.java:93:9: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:98:33: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:103:14: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:107:20: compiler.err.not.encl.class: java.lang.Object\n+SuperInitFails.java:111:17: compiler.err.cant.ref.before.ctor.called: super\n+SuperInitFails.java:118:22: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:124:9: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:132:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n+SuperInitFails.java:137:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n+SuperInitFails.java:154:31: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:158:15: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:167:13: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:171:17: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:175:24: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:179:18: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:194:25: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:199:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:204:29: compiler.err.redundant.superclass.init\n+SuperInitFails.java:32:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:36:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:40:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:44:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:48:33: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:52:32: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:82:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:88:13: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:149:18: compiler.err.call.must.only.appear.in.ctor\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+\/\/ key: compiler.err.return.before.superclass.initialized\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorCantHaveReturn.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n- \/\/ key: compiler.note.preview.filename\n- \/\/ key: compiler.note.preview.recompile\n@@ -27,1 +25,0 @@\n- \/\/ options: --enable-preview  -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantAssignInitializedBeforeCtorCalled.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n- \/\/ key: compiler.warn.preview.feature.use\n- \/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n+ \/\/ key: compiler.err.feature.not.supported.in.source\n+\/\/ options: --release 24\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FeatureFlexibleConstructors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/\/key: compiler.warn.preview.feature.use.plural\n-\/\/key: compiler.misc.feature.var.syntax.in.implicit.lambda\n+\/\/key: compiler.warn.preview.feature.use\n+\/\/key: compiler.misc.feature.flexible.constructors\n@@ -31,2 +31,3 @@\n-    void test() {\n-        Function<String, String> f = (var s) -> s;\n+    PreviewFeatureUse() {\n+        System.out.println(\"early init!\");\n+        super();\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PreviewFeatureUse.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ReturnBeforeSuperclassInit.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-        assertFail(\"compiler.err.var.might.not.have.been.initialized\", \"record R(int x, int y) { # }\",\n+        assertFail(\"compiler.err.strict.field.not.have.been.initialized.before.super\", \"record R(int x, int y) { # }\",\n@@ -1062,1 +1062,2 @@\n-        assertOK(\"record R(int x) { public R(int x) { this.x = x; return; } }\");\n+        assertFail(\"compiler.err.return.before.superclass.initialized\",\n+                \"record R(int x) { public R(int x) { this.x = x; return; } }\");\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-                  private final int i;\n+                  private final strictfp int i;\n@@ -104,2 +104,2 @@\n-                  private final long j;\n-                  private final java.util.List<java.lang.String> l;\n+                  private final strictfp long j;\n+                  private final strictfp java.util.List<java.lang.String> l;\n","filename":"test\/langtools\/tools\/javac\/records\/RecordReading.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}