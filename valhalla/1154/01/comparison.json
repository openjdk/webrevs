{"files":[{"patch":"@@ -35,1 +35,0 @@\n-    java\/lang\/Float16.java \\\n@@ -59,0 +58,4 @@\n+java.base-FLAT-LAYOUT-VALUE-CLASS-REPLACEMENTS := \\\n+    java\/lang\/Float16.java \\\n+    #\n+\n@@ -62,0 +65,3 @@\n+java.base-FLAT-LAYOUT-VALUE-CLASS-FILES := \\\n+    $(foreach f, $(java.base-FLAT-LAYOUT-VALUE-CLASS-REPLACEMENTS), $(addprefix $(TOPDIR)\/src\/java.base\/share\/classes\/, $(f)))\n+\n@@ -71,0 +77,9 @@\n+$(eval $(call SetupTextFileProcessing, JAVA_BASE_FLAT_LAYOUT_VALUECLASS_REPLACEMENTS, \\\n+    SOURCE_FILES := $(java.base-FLAT-LAYOUT-VALUE-CLASS-FILES), \\\n+    SOURCE_BASE_DIR := $(TOPDIR)\/src\/java.base\/share\/classes, \\\n+    OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)\/gensrc-valueclasses\/java.base\/, \\\n+    REPLACEMENTS := \\\n+        public final class => @jdk.internal.vm.annotation.ImplicitlyConstructible\\n@jdk.internal.vm.annotation.NullRestrictedArray\\npublic final value class ; \\\n+        public abstract class => public abstract value class, \\\n+))\n+\n@@ -72,0 +87,1 @@\n+TARGETS += $(JAVA_BASE_FLAT_LAYOUT_VALUECLASS_REPLACEMENTS)\n","filename":"make\/modules\/java.base\/gensrc\/GensrcValueClasses.gmk","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1192,1 +1192,2 @@\n-  CodeStub* slow_path = new NewObjectArrayStub(klass_reg, len, reg, info, x->is_null_free());\n+  bool is_null_free = x->is_null_free() ||  x->klass()->has_flat_layout();\n+  CodeStub* slow_path = new NewObjectArrayStub(klass_reg, len, reg, info, is_null_free);\n@@ -1198,1 +1199,1 @@\n-  __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_OBJECT, klass_reg, slow_path, x->is_null_free());\n+  __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_OBJECT, klass_reg, slow_path, is_null_free);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1382,1 +1382,2 @@\n-  CodeStub* slow_path = new NewObjectArrayStub(klass_reg, len, reg, info, x->is_null_free());\n+  bool is_null_free = x->is_null_free() || x->klass()->has_flat_layout();\n+  CodeStub* slow_path = new NewObjectArrayStub(klass_reg, len, reg, info, is_null_free);\n@@ -1387,1 +1388,1 @@\n-  __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_OBJECT, klass_reg, slow_path, x->is_null_free());\n+  __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_OBJECT, klass_reg, slow_path, is_null_free);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,1 +110,2 @@\n-    if (null_free && klass->is_loaded()) {\n+    bool value_based_flat_layout = klass->has_flat_layout();\n+    if ((null_free || value_based_flat_layout) && klass->is_loaded()) {\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -261,0 +261,13 @@\n+\n+\/\/-------------------------------------------------------------------\n+\/\/ ciKlass::has_flat_layout\n+\/\/\n+\/\/\n+bool ciKlass::has_flat_layout() const {\n+  GUARDED_VM_ENTRY(\n+  return is_loaded() && get_Klass()->is_instance_klass() &&\n+         InstanceKlass::cast(get_Klass())->is_implicitly_constructible() &&\n+         InstanceKlass::cast(get_Klass())->has_null_restricted_array() &&\n+         !InstanceKlass::cast(get_Klass())->must_be_atomic();\n+  )\n+}\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -134,0 +134,2 @@\n+  bool has_flat_layout() const;\n+\n","filename":"src\/hotspot\/share\/ci\/ciKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -959,0 +959,1 @@\n+    _jdk_internal_NullRestrictedArray,\n@@ -2076,0 +2077,4 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_NullRestrictedArray_signature): {\n+      if (_location != _in_class)   break; \/\/ only allow for classes\n+      return _jdk_internal_NullRestrictedArray;\n+    }\n@@ -5631,0 +5636,3 @@\n+  if (_has_null_restricted_array) {\n+    ik->set_has_null_restricted_array();\n+  }\n@@ -5907,0 +5915,1 @@\n+  _has_null_restricted_array(false),\n@@ -6390,0 +6399,7 @@\n+    if (_parsed_annotations->has_annotation(ClassAnnotationCollector::_jdk_internal_NullRestrictedArray)) {\n+      _has_null_restricted_array = true;\n+    }\n+    \/\/ Implicit constructibility and null restriction are sufficient to guarantee atomic updates to value based boxed primitives.\n+    if (_parsed_annotations->has_annotation(ClassAnnotationCollector::_jdk_internal_ValueBased) && _has_null_restricted_array && _is_implicitly_constructible) {\n+      _must_be_atomic = false;\n+    }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -216,0 +216,1 @@\n+  bool _has_null_restricted_array;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -278,0 +278,1 @@\n+  template(jdk_internal_vm_annotation_NullRestrictedArray_signature,         \"Ljdk\/internal\/vm\/annotation\/NullRestrictedArray;\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -381,1 +381,0 @@\n-  Klass*    klass = pool->klass_at(index, CHECK);\n@@ -383,1 +382,6 @@\n-  if (klass->is_inline_klass() && InlineKlass::cast(klass)->is_implicitly_constructible()) {\n+  Klass*    klass = pool->klass_at(index, CHECK);\n+  bool has_flat_layout = klass->is_inline_klass() &&\n+    InstanceKlass::cast(klass)->is_implicitly_constructible() &&\n+    InstanceKlass::cast(klass)->has_null_restricted_array() &&\n+    !InstanceKlass::cast(klass)->must_be_atomic();\n+  if (has_flat_layout) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -384,0 +384,3 @@\n+  bool has_null_restricted_array() const   { return _misc_flags.has_null_restricted_array(); }\n+  void set_has_null_restricted_array()     { _misc_flags.set_has_null_restricted_array(true); }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n-    flag(is_implicitly_constructible        , 1 << 20) \/* the class has the ImplicitlyConstrutible annotation *\/\n+    flag(is_implicitly_constructible        , 1 << 20) \/* the class has the ImplicitlyConstrutible annotation *\/ \\\n+    flag(has_null_restricted_array          , 1 << 21) \/* the class has the NullRestrictedArray annotation *\/\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5068,1 +5068,3 @@\n-  assert(val1->is_InlineType() && val2->is_InlineType(), \"\");\n+  if (!val1->is_InlineType() || !val2->is_InlineType()) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.*;\n+\n+\/**\n+ * A null-restricted array is an array whose elements are of value class type and are\n+ * never assigned a {@code null} value during the lifetime of array.\n+ * Element type must also be annotated with {@link ImplicitlyConstructible} annotation\n+ * to ensure default value assignment to array elements, thereby guarantying initialized\n+ * value array by construction.\n+ *\n+ * The initial value of the elements is the zero instance of the given class, and attempts to\n+ * write {@code null} to the element will throw an NullPointerException.\n+ * <p>\n+ * The HotSpot VM uses this annotation to enable flat runtime layout of an array that would\n+ * otherwise be impossible.\n+ * <p>\n+ * Because these behaviors are not specified by Java SE, this annotation should only be used\n+ * by internal JDK classes for experimental purposes and should not affect user-observable\n+ * outcomes.\n+ *\/\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface NullRestrictedArray {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/NullRestrictedArray.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug 8333852\n+* @summary Test NullPointerException generation on null value assignment to flat arrays.\n+* @enablePreview\n+* @library \/test\/lib \/\n+* @compile --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED TestFlatArrayNullAssignment.java\n+* @run main\/othervm --enable-preview -Xint compiler.valhalla.inlinetypes.TestFlatArrayNullAssignment\n+* @run main\/othervm --enable-preview -XX:TieredStopAtLevel=3 -Xbatch compiler.valhalla.inlinetypes.TestFlatArrayNullAssignment\n+* @run main\/othervm --enable-preview -XX:-TieredCompilation -Xbatch compiler.valhalla.inlinetypes.TestFlatArrayNullAssignment\n+*\/\n+package compiler.valhalla.inlinetypes;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.NullRestrictedArray;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+\n+@NullRestrictedArray\n+@ImplicitlyConstructible\n+@LooselyConsistentValue\n+value class MyValue {\n+   public int field;\n+   MyValue(int field_val) {\n+      field = field_val;\n+   }\n+}\n+\n+public class TestFlatArrayNullAssignment {\n+  public static void test(int i) {\n+      MyValue [] varr = new MyValue[16];\n+      \/\/ C2 will treat it as UCT and de-optimize, Interpreter will throw NPE.\n+      if (i == 15000) {\n+          varr[1] = null;\n+      }\n+  }\n+  public static void main(String [] args) {\n+     try {\n+         for (int i = 0; i < 100000; i++) {\n+           test(i);\n+         }\n+         throw new AssertionError(\"NullPointerException Expected\");\n+     } catch (NullPointerException e) {\n+         System.out.println(e);\n+         System.out.println(\"PASSED\");\n+     }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayNullAssignment.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug 8333852\n+* @summary Allow flat array layout for implicitly constructible value classes.\n+* @requires vm.compiler2.enabled\n+* @enablePreview\n+* @library \/test\/lib \/\n+* @compile --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED TestFlatArrayVectorization.java\n+* @run main\/othervm --enable-preview compiler.valhalla.inlinetypes.TestFlatArrayVectorization\n+*\/\n+\n+package compiler.valhalla.inlinetypes;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.NullRestrictedArray;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+\n+@ImplicitlyConstructible\n+@NullRestrictedArray\n+@LooselyConsistentValue\n+value class SimpleValue {\n+   int field;\n+   public SimpleValue(int field) {\n+      this.field = field;\n+   }\n+}\n+\n+public class TestFlatArrayVectorization {\n+   public static SimpleValue [] varr;\n+   public static final int SIZE = 2048;\n+   public static final int SIZE_M1 = SIZE - 1;\n+   public static int res = 0;\n+   public static Random rd = new Random(2048);\n+\n+   \/\/public static int test(int ctr) {\n+   @Test\n+   @IR(counts = {IRNode.POPULATE_INDEX, \" > 0\"}, applyIf = {\"EnableValhalla\", \"true\"})\n+   public static int test() {\n+      varr = new SimpleValue [SIZE];    \/\/ ANEWARRAY\n+      for (int i = 0; i < varr.length; i++) {\n+          varr[i] = new SimpleValue(i); \/\/ AASTORE\n+      }\n+      return varr[rd.nextInt(2047)].field;\n+   }\n+\n+   public static void main(String [] args) {\n+      TestFramework.runWithFlags(\"--enable-preview\", \"-Xbatch\", \"-XX:-TieredCompilation\", \"-XX:-UseOnStackReplacement\", \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\");\n+   }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayVectorization.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-        TestFramework.run(TestFloat16VectorSum.class);\n+        TestFramework.runWithFlags(\"--enable-preview\", \"-XX:-TieredCompilation\", \"-Xbatch\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorSum.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}