{"files":[{"patch":"@@ -176,0 +176,7 @@\n+    JCExpression generateNullCheckIfNeeded(JCExpression tree) {\n+        if (expectedNullness == JCNullableTypeExpression.NullMarker.NOT_NULL && !types.isNonNullable(tree.type)) {\n+            return attr.makeNullCheck(tree);\n+        }\n+        return tree;\n+    }\n+\n@@ -206,6 +213,5 @@\n-            if (!unerasedParamTypes.isEmpty() && unerasedParamTypes.head != null) {\n-                if (types.isNonNullable(unerasedParamTypes.head) && !types.isNonNullable(args.head.type)) {\n-                    args.head = (T)attr.makeNullCheck((JCExpression)args.head);\n-                }\n-            }\n-            args.head = translate(args.head, erasedParameterTypes.head);\n+            args.head = translate(args.head, erasedParameterTypes.head,\n+                    (!unerasedParamTypes.isEmpty() && unerasedParamTypes.head != null) ?\n+                        unerasedParamTypes.head.getNullMarker() :\n+                        JCNullableTypeExpression.NullMarker.UNSPECIFIED\n+                    );\n@@ -222,4 +228,1 @@\n-                if (types.isNonNullable(originalVarargsElement) && !types.isNonNullable(args.head.type)) {\n-                    args.head = (T)attr.makeNullCheck((JCExpression)args.head);\n-                }\n-                args.head = translate(args.head, varargsElement);\n+                args.head = translate(args.head, varargsElement, originalVarargsElement.getNullMarker());\n@@ -229,6 +232,5 @@\n-            if (!unerasedParamTypes.isEmpty() && unerasedParamTypes.head != null) {\n-                if (types.isNonNullable(unerasedParamTypes.head) && !types.isNonNullable(args.head.type)) {\n-                    args.head = (T)attr.makeNullCheck((JCExpression)args.head);\n-                }\n-            }\n-            args.head = translate(args.head, parameter);\n+            args.head = translate(args.head, parameter,\n+                    (!unerasedParamTypes.isEmpty() && unerasedParamTypes.head != null) ?\n+                            unerasedParamTypes.head.getNullMarker() :\n+                            JCNullableTypeExpression.NullMarker.UNSPECIFIED\n+            );\n@@ -470,0 +472,2 @@\n+    private JCNullableTypeExpression.NullMarker expectedNullness = JCNullableTypeExpression.NullMarker.UNSPECIFIED;\n+\n@@ -473,0 +477,4 @@\n+        return translate(tree, pt, JCNullableTypeExpression.NullMarker.UNSPECIFIED);\n+    }\n+\n+    public <T extends JCTree> T translate(T tree, Type pt, JCNullableTypeExpression.NullMarker expectedNullness) {\n@@ -474,0 +482,1 @@\n+        JCNullableTypeExpression.NullMarker prevExpectedNullness = this.expectedNullness;\n@@ -476,0 +485,1 @@\n+            this.expectedNullness = expectedNullness;\n@@ -479,0 +489,1 @@\n+            this.expectedNullness = prevExpectedNullness;\n@@ -485,0 +496,4 @@\n+        return translate(trees, pt, JCNullableTypeExpression.NullMarker.UNSPECIFIED);\n+    }\n+\n+    public <T extends JCTree> List<T> translate(List<T> trees, Type pt, JCNullableTypeExpression.NullMarker expectedNullness) {\n@@ -486,0 +501,1 @@\n+        JCNullableTypeExpression.NullMarker prevExpectedNullness = this.expectedNullness;\n@@ -489,0 +505,1 @@\n+            this.expectedNullness = expectedNullness;\n@@ -492,0 +509,1 @@\n+            this.expectedNullness = prevExpectedNullness;\n@@ -521,6 +539,1 @@\n-        if (tree.init != null) {\n-            if (types.isNonNullable(tree.type) && !types.isNonNullable(tree.init.type)) {\n-                tree.init = attr.makeNullCheck(tree.init);\n-            }\n-        }\n-        tree.init = translate(tree.init, tree.sym.erasure(types));\n+        tree.init = translate(tree.init, tree.sym.erasure(types), tree.type.getNullMarker());\n@@ -628,0 +641,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -658,0 +672,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -688,0 +703,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -731,0 +747,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -778,1 +795,1 @@\n-        tree.expr = translate(tree.expr, pt);\n+        tree.expr = translate(tree.expr, pt, expectedNullness);\n@@ -791,0 +808,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -848,0 +866,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -862,0 +881,1 @@\n+        result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -884,0 +904,1 @@\n+            result = generateNullCheckIfNeeded((JCExpression)result);\n@@ -914,1 +935,2 @@\n-            result = retype(tree, tree.sym.erasure(types), pt);\n+            result = generateNullCheckIfNeeded(tree);\n+            result = retype((JCExpression) result, tree.sym.erasure(types), pt);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":46,"deletions":24,"binary":false,"changes":70,"status":"modified"}]}