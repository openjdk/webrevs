{"files":[{"patch":"@@ -1303,3 +1303,0 @@\n-            \/* Don't want constant propagation\/folding for instance fields of primitive classes,\n-               as these can undergo updates via copy on write.\n-            *\/\n@@ -1307,1 +1304,1 @@\n-                if ((v.flags_field & FINAL) == 0 || ((v.flags_field & STATIC) == 0 && v.owner.isValueClass()) ||\n+                if ((v.flags_field & FINAL) == 0 ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1890,1 +1890,0 @@\n-            Assert.error();\n@@ -1902,1 +1901,0 @@\n-                    Assert.error();\n@@ -2741,1 +2739,0 @@\n-        \/\/ TODO - enum so is always <init>\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -322,3 +322,0 @@\n-        \/* Don't want constant propagation\/folding for instance fields of primitive classes,\n-           as these can undergo updates via copy on write.\n-        *\/\n@@ -327,1 +324,1 @@\n-            if ((v.flags_field & FINAL) != 0 && ((v.flags_field & STATIC) != 0 || !v.owner.isValueClass()) &&\n+            if ((v.flags_field & FINAL) != 0 &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3678,1 +3678,0 @@\n-            \/\/ TODO - array constructor will be <init>\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -672,1 +672,0 @@\n-        \/\/ TODO - is enum so <init>\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1599,2 +1599,1 @@\n-                            \/\/is a generic type i.e. A<S>::m or a default value creation of\n-                            \/\/the form ValueType<S>.default\n+                            \/\/is a generic type i.e. A<S>::m\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check constant propagation behavior\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses ConstantPropagationTest.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ConstantPropagationTest\n- * @modules jdk.compiler\n- * @ignore\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ConstantPropagationTest {\n-\n-    static final primitive class X {\n-        static final int sfif = 8888;\n-        final int ifif = 9999;\n-        static void foo(X x) {\n-            System.out.println(sfif);\n-            System.out.println(x.ifif);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ConstantPropagationTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ConstantPropagationTest$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"ConstantValue: int 8888\",\n-         \"3: sipush        8888\",\n-         }, new String [] {\n-         \"ConstantValue: int 9999\"\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut, String [] unexpectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        for (String eo: unexpectedOut) {\n-            if (out.contains(eo)) {\n-                System.err.println(\"Unexpected output found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConstantPropagationTest.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check constant propagation behavior\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile ConstantPropagationTest.java\n- * @run main\/othervm -Xverify:none ConstantPropagationTest\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ConstantPropagationTest {\n-\n-    static final value class X {\n-        static final int sfif = 8888;\n-        final int ifif = 9999;\n-        static void foo(X x) {\n-            System.out.println(sfif);\n-            System.out.println(x.ifif);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ConstantPropagationTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ConstantPropagationTest$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"ConstantValue: int 8888\",\n-         \"3: sipush        8888\",\n-         }, new String [] {\n-         \"ConstantValue: int 9999\"\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut, String [] unexpectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        for (String eo: unexpectedOut) {\n-            if (out.contains(eo)) {\n-                System.err.println(\"Unexpected output found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstantPropagationTest.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"}]}