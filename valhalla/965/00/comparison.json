{"files":[{"patch":"@@ -276,0 +276,1 @@\n+\n@@ -279,0 +280,4 @@\n+      if (a->is_null_free_array() && obj == nullptr) {\n+         THROW_MSG(vmSymbols::java_lang_NullPointerException(), \"null-restricted array\");\n+      }\n+\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Set;\n@@ -37,0 +38,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -99,1 +101,1 @@\n-                Arguments.of(\"MethodHandleTest$Point\", P, new String[] {\"x\", \"y\"}),\n+                Arguments.of(\"MethodHandleTest$Point\", P, Set.of(\"x\", \"y\")),\n@@ -101,1 +103,1 @@\n-                Arguments.of( \"MethodHandleTest$Line\", L, new String[] {\"p1\", \"p2\"}),\n+                Arguments.of( \"MethodHandleTest$Line\", L, Set.of(\"p1\", \"p2\")),\n@@ -103,1 +105,1 @@\n-                Arguments.of( \"MethodHandleTest$Ref\", R, new String[] {\"p\", \"l\", \"list\", \"vo\"})\n+                Arguments.of( \"MethodHandleTest$Ref\", R, Set.of(\"p\", \"l\", \"list\", \"vo\"))\n@@ -114,1 +116,1 @@\n-    public void testFieldGetterAndSetter(String cn, Object o, String[] fieldNames) throws Throwable  {\n+    public void testFieldGetter(String cn, Object o, Set<String> fields) throws Throwable  {\n@@ -116,1 +118,1 @@\n-        for (String name : fieldNames) {\n+        for (String name : fields) {\n@@ -125,1 +127,1 @@\n-            var v3 = mh.invoke(o);\n+            var v3 = mh3.invoke(o);\n@@ -132,1 +134,1 @@\n-    static Stream<Arguments> arrays() {\n+    static Stream<Arguments> setters() {\n@@ -134,3 +136,4 @@\n-                Arguments.of(Point[].class, P),\n-                Arguments.of(Line[].class, L),\n-                Arguments.of(Ref[].class, R)\n+                Arguments.of( Ref.class, R, \"p\", true),\n+                Arguments.of( Ref.class, R, \"l\", false),\n+                Arguments.of( Ref.class, R, \"list\", false),\n+                Arguments.of( Ref.class, R, \"vo\", false)\n@@ -139,0 +142,7 @@\n+    @ParameterizedTest\n+    @MethodSource(\"setters\")\n+    public void testFieldSetter(Class<?> cls, Object o, String name, boolean nullRestricted) throws Throwable {\n+        Field f = cls.getDeclaredField(name);\n+        var mh = LOOKUP.findSetter(cls, f.getName(), f.getType());\n+        var vh = LOOKUP.findVarHandle(cls, f.getName(), f.getType());\n+        var mh3 = LOOKUP.unreflectSetter(f);\n@@ -140,1 +150,10 @@\n-    private static final int ARRAY_SIZE = 5;\n+        if (nullRestricted) {\n+            assertThrows(NullPointerException.class, () -> mh.invoke(o, null));\n+            assertThrows(NullPointerException.class, () -> vh.set(o, null));\n+            assertThrows(NullPointerException.class, () -> mh3.invoke(o, null));\n+        } else {\n+            mh.invoke(o, null);\n+            vh.set(o, null);\n+            mh3.invoke(o, null);\n+        }\n+    }\n@@ -142,3 +161,12 @@\n-    @ParameterizedTest\n-    @MethodSource(\"arrays\")\n-    public void testArrayElementSetterAndGetter(Class<?> arrayClass, Object o) throws Throwable {\n+    static Stream<Arguments> arrays() throws Throwable {\n+        return Stream.of(\n+                Arguments.of(Point[].class, newArray(Point[].class), P, false),\n+                Arguments.of(Point[].class, newNullRestrictedArray(Point.class), P, true),\n+                Arguments.of(Line[].class, newArray(Line[].class), L, false),\n+                Arguments.of(Line[].class, newNullRestrictedArray(Line.class), L, true),\n+                Arguments.of(Ref[].class, newArray(Ref[].class), R, false)\n+        );\n+    }\n+\n+    private static final int ARRAY_SIZE = 5;\n+    private static Object[] newArray(Class<?> arrayClass) throws Throwable {\n@@ -146,2 +174,4 @@\n-        Object[] array = (Object[])ctor.invoke(ARRAY_SIZE);\n-        testArrayElement(array, o, false);\n+        return (Object[])ctor.invoke(ARRAY_SIZE);\n+    }\n+    private static Object[] newNullRestrictedArray(Class<?> componentClass) throws Throwable {\n+        return ValueClass.newNullRestrictedArray(componentClass, ARRAY_SIZE);\n@@ -150,1 +180,3 @@\n-    private void testArrayElement(Object array, Object o, boolean nullRestricted) throws Throwable {\n+    @ParameterizedTest\n+    @MethodSource(\"arrays\")\n+    public void testArrayElementSetterAndGetter(Class<?> arrayClass, Object[] array, Object element, boolean nullRestricted) throws Throwable {\n@@ -153,0 +185,3 @@\n+        VarHandle vh = MethodHandles.arrayElementVarHandle(arrayClass);\n+        Class<?> componentType = arrayClass.getComponentType();\n+\n@@ -154,1 +189,6 @@\n-            setter.invoke(array, i, o);\n+            var v = getter.invoke(array, i);\n+            if (nullRestricted) {\n+                assertTrue(v == ValueClass.zeroInstance(componentType));\n+            } else {\n+                assertTrue(v == null);\n+            }\n@@ -157,2 +197,2 @@\n-            Object v = (Object)getter.invoke(array, i);\n-            assertEquals(v, o);\n+            setter.invoke(array, i, element);\n+            assertTrue(getter.invoke(array, i) == element);\n@@ -163,0 +203,1 @@\n+            assertThrows(NullPointerException.class, () -> vh.set(array, 1, null));\n@@ -166,0 +207,1 @@\n+            vh.set(array, 1, null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":62,"deletions":20,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -99,3 +100,0 @@\n-    \/*\n-     * TODO: null-restricted value class array\n-     *\/\n@@ -105,0 +103,1 @@\n+        Value value = new Value(v1, v2);\n@@ -106,2 +105,4 @@\n-        V[] varray = new V[] { v1, v2 };\n-        Value[] valuearray = new Value[] { new Value(v1, v2), new Value(v1, null)};\n+        V[] varray = (V[]) Array.newInstance(V.class, 2);\n+        V[] varrayNR = (V[]) ValueClass.newNullRestrictedArray(V.class, 3);\n+        Value[] valuearray = (Value[]) Array.newInstance(Value.class, 2);\n+        Value[] valuearrayNR = (Value[]) ValueClass.newNullRestrictedArray(Value.class, 3);\n@@ -110,2 +111,5 @@\n-                Arguments.of(V[].class, varray, false),\n-                Arguments.of(Value[].class, valuearray, false)\n+                Arguments.of(V[].class, varray, false, v1),\n+                Arguments.of(V[].class, varrayNR, true, v2),\n+                Arguments.of(Value[].class, valuearray, false, value),\n+                Arguments.of(Value[].class, valuearrayNR, true, value)\n+\n@@ -121,1 +125,1 @@\n-    public void testArrays(Class<?> arrayClass, Object[] array, boolean nullRestricted) {\n+    public void testArrays(Class<?> arrayClass, Object[] array, boolean nullRestricted, Object element) {\n@@ -124,2 +128,3 @@\n-        Object[] newArray = (Object[]) Array.newInstance(componentType, array.length);\n-        assertTrue(newArray.getClass().getComponentType() == componentType);\n+        \/\/ TODO: check Array.getComponentType(array) instead\n+        assertTrue(array.getClass() == arrayClass || nullRestricted);\n+        assertTrue(array.getClass().getComponentType() == componentType || nullRestricted);\n@@ -127,1 +132,0 @@\n-        \/\/ set elements\n@@ -129,1 +133,6 @@\n-            Array.set(newArray, i, array[i]);\n+            Object o = Array.get(array, i);\n+            if (nullRestricted) {\n+                assertTrue(o == ValueClass.zeroInstance(componentType));\n+            } else {\n+                assertTrue(o == null);\n+            }\n@@ -131,0 +140,2 @@\n+\n+        \/\/ set elements\n@@ -132,2 +143,2 @@\n-            Object o = Array.get(newArray, i);\n-            assertEquals(o, array[i]);\n+            Array.set(array, i, element);\n+            assertTrue(Array.get(array, i) == element);\n@@ -135,1 +146,0 @@\n-        Arrays.setAll(newArray, i -> array[i]);\n@@ -137,2 +147,4 @@\n-        for (int i = 0; i < newArray.length; i++) {\n-            \/\/ test nullable\n+        Arrays.setAll(array, i -> array[i]);\n+\n+        \/\/ test nullable\n+        for (int i = 0; i < array.length; i++) {\n@@ -141,1 +153,1 @@\n-                assertThrows(NullPointerException.class, () -> Array.set(newArray, index, null));\n+                assertThrows(NullPointerException.class, () -> Array.set(array, index, null));\n@@ -143,1 +155,1 @@\n-                Array.set(newArray, i, null);\n+                Array.set(array, i, null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":31,"deletions":19,"binary":false,"changes":50,"status":"modified"}]}