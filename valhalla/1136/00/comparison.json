{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334334\n+ * @summary reflection test for value classes\n+ * @enablePreview\n+ * @compile ValueClassesReflectionTest.java\n+ * @run testng\/othervm ValueClassesReflectionTest\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.testng.annotations.*;\n+import static org.testng.Assert.*;\n+\n+@Test\n+public class ValueClassesReflectionTest {\n+    final static int numberOfFields = 2;\n+\n+    value class ValueClass {\n+        private int i = 0;\n+        private String s = \"\";\n+    }\n+    abstract value class AValueClass {\n+        private int i = 0;\n+        private String s = \"\";\n+    }\n+    value record ValueRecord(int i, String s) {}\n+\n+    @DataProvider(name = \"valueClasses\")\n+    public Object[][] valueClassesData() {\n+        return List.of(\n+                ValueClass.class,\n+                AValueClass.class,\n+                ValueRecord.class\n+        ).stream().map(c -> new Object[] {c}).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"valueClasses\")\n+    public void testValueClasses(Class<?> cls) {\n+        assertTrue(cls.isValue());\n+        assertTrue(!cls.isIdentity());\n+    }\n+\n+    @DataProvider(name = \"notValueClasses\")\n+    public Object[][] notSealedClassesData() {\n+        return List.of(\n+                Object.class,\n+                Void.class, Void[].class,\n+                byte[].class, Byte[].class,\n+                short[].class, Short[].class,\n+                char[].class, Character[].class,\n+                int[].class, Integer[].class,\n+                long[].class, Long[].class,\n+                float[].class, Float[].class,\n+                double[].class, Double[].class,\n+                boolean[].class, Boolean[].class,\n+                String.class, String[].class\n+        ).stream().map(c -> new Object[] {c}).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"notValueClasses\")\n+    public void testNotValueClasses(Class<?> cls) {\n+        assertTrue(!cls.isValue(), \" failing for class \" + cls);\n+        assertTrue(cls.isIdentity());\n+    }\n+\n+    @Test(dataProvider = \"valueClasses\")\n+    public void testValueClassReflection(Class<?> valueClass) throws ReflectiveOperationException {\n+        assertTrue(valueClass.isValue());\n+        Field[] fields = valueClass.getDeclaredFields();\n+        assertTrue(fields.length == numberOfFields);\n+        for (Field field : fields) {\n+            int mod = field.getModifiers();\n+            assertTrue((mod & Modifier.STRICT) != 0);\n+            assertTrue((mod & Modifier.FINAL) != 0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/valhalla\/ValueClassesReflectionTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -107,1 +107,1 @@\n-                   \"record\", \"sealed\");\n+                   \"record\", \"sealed\", \"value\");\n@@ -136,0 +136,12 @@\n+                check(true, name,  isNameVersion, \"name\", version);\n+            }\n+        }\n+    }\n+\n+    private static void testValue() {\n+        for (SourceVersion version : SourceVersion.values()) {\n+            Predicate<String> isKeywordVersion = (String s) -> isKeyword(s, version);\n+            Predicate<String> isNameVersion = (String s) -> isName(s, version);\n+\n+            for  (String name : List.of(\"value\", \"foo.value\", \"value.foo\")) {\n+                check(false, name, isKeywordVersion, \"keyword\", version);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/TestSourceVersion.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}