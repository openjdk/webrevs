{"files":[{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check behavior of synzhronized key word on primitive class instances and methods.\n- * @ignore\n- * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckSynchronized.java\n- *\/\n-\n-primitive final class CheckSynchronized implements java.io.Serializable {\n-    synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n-    }\n-    void goo() {\n-        synchronized(this) {} \/\/ <<-- ERROR, no monitor associated with `this'\n-    }\n-    synchronized static void zoo(CheckSynchronized cs) { \/\/ OK, static method.\n-        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with primitive class instance.\n-        }\n-\n-        CheckSynchronized.ref csr = cs;\n-        synchronized(csr) {\n-            \/\/ Error, no identity.\n-        }\n-\n-        synchronized(x) {\n-            \/\/ Error, no identity.\n-        }\n-\n-        Object o = cs;\n-        synchronized(o) {\n-            \/\/ Error BUT not discernible at compile time\n-        }\n-        java.io.Serializable jis = cs;\n-        synchronized(jis) {\n-            \/\/ Error BUT not discernible at compile time\n-        }\n-    }\n-    static int x = 10;\n-\n-    primitive record CheckSynchronizedRecord(int x, int y) {\n-        synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n-        }\n-        synchronized static void zoo() { \/\/ OK, static method.\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSynchronized.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Check behavior of synzhronized key word on value classes instances and methods.\n+ * @ignore\n+ * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics CheckSynchronized.java\n+ *\/\n+\n+value final class CheckSynchronized implements java.io.Serializable {\n+    synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n+    }\n+    void goo() {\n+        synchronized(this) {} \/\/ <<-- ERROR, no monitor associated with `this'\n+    }\n+    synchronized static void zoo(CheckSynchronized cs) { \/\/ OK, static method.\n+        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with value class instance.\n+        }\n+\n+        CheckSynchronized.ref csr = cs;\n+        synchronized(csr) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        synchronized(x) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        Object o = cs;\n+        synchronized(o) {\n+            \/\/ Error BUT not discernible at compile time\n+        }\n+        java.io.Serializable jis = cs;\n+        synchronized(jis) {\n+            \/\/ Error BUT not discernible at compile time\n+        }\n+    }\n+    static int x = 10;\n+\n+    value record CheckSynchronizedRecord(int x, int y) {\n+        synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n+        }\n+        synchronized static void zoo() { \/\/ OK, static method.\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckSynchronized.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckSynchronized.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSynchronized.out","status":"renamed"}]}