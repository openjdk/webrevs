{"files":[{"patch":"@@ -1357,5 +1357,0 @@\n-                if ((flags & NON_SEALED) != 0) {\n-                    \/\/ cant declare a final value class non-sealed\n-                    log.error(pos,\n-                            Errors.ModNotAllowedHere(asFlagSet(NON_SEALED)));\n-                }\n@@ -1396,4 +1391,0 @@\n-                 checkDisjoint(pos, flags,\n-                        IDENTITY_TYPE,\n-                        VALUE_CLASS)\n-                 &&\n@@ -1429,2 +1420,2 @@\n-                 && checkDisjoint(pos, flags,\n-                                IDENTITY_TYPE,\n+                && checkDisjoint(pos, flags,\n+                                VALUE_CLASS,\n@@ -1434,1 +1425,4 @@\n-                                ANNOTATION) ) {\n+                                NON_SEALED)\n+                && checkDisjoint(pos, flags,\n+                                VALUE_CLASS,\n+                                INTERFACE) ) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java             8325322    generic-all\n","filename":"test\/langtools\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8208067\n- * @summary Verify that instance methods are callable from ctor after all instance fields are DA.\n- * @compile -XDenablePrimitiveClasses CanonicalCtorTest.java\n- * @run main\/othervm -ea -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CanonicalCtorTest\n- * @ignore\n- *\/\n-\n-public primitive class CanonicalCtorTest {\n-\n-    private final int x, ymx;\n-\n-    CanonicalCtorTest(int x, int y) {\n-\n-        ymx = y - x;\n-        this.x = x;\n-\n-        \/\/ ALL fields are assigned now.\n-\n-        validate();                 \/\/ OK: DU = {}\n-        this.validate();            \/\/ OK: DU = {}\n-        CanonicalCtorTest.this.validate();          \/\/ OK: DU = {}\n-\n-        assert (this.x > 0);        \/\/ OK: DU = {}\n-        assert (this.y() > 0);      \/\/ OK: DU = {}\n-    }\n-\n-    int x() {\n-        return x;\n-    }\n-\n-    int y() {\n-        return ymx + x;\n-    }\n-\n-    void validate() {\n-        assert (x() > 0 && y() > 0);\n-    }\n-\n-    public static void main(String... av) {\n-        CanonicalCtorTest z = new CanonicalCtorTest(1, 10);\n-        assert (z.x() == 1);\n-        assert (z.y() == 10);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CanonicalCtorTest.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8215110\n- * @summary Check that casting to a value type involves a null check.\n- *\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses CastNullCheckTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CastNullCheckTest\n- * @ignore\n- *\/\n-\n-public class CastNullCheckTest {\n-\n-    final primitive class XX {\n-        final int x = 10;\n-    }\n-\n-    public static void main(String... args) {\n-        int caught = 0;\n-\n-        Object o = null;\n-        try {\n-            XX x = (XX) o;\n-        } catch (NullPointerException npe) {\n-            caught++;\n-        }\n-\n-        try {\n-            Point p = (Point) o;\n-        } catch (NullPointerException npe) {\n-            caught++;\n-        }\n-\n-        o = Point.default;\n-        try {\n-            Point p = (Point) o;\n-        } catch (NullPointerException npe) {\n-            caught++;\n-        }\n-        if (caught != 2)\n-            throw new AssertionError(\"Wrong NPE count: \" + caught);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNullCheckTest.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-CheckBadSelector.java:13:21: compiler.err.expected2: class, default\n-1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckBadSelector.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,20 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Value types may not declare fields of its own type either directly or indirectly.\n- * @compile\/fail\/ref=CheckCyclicMembership.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckCyclicMembership.java\n- * @ignore\n- *\/\n-\n-final primitive class CheckCyclicMembership {\n-    class InnerRef {\n-        CheckCyclicMembership ccm;\n-    }\n-    primitive final class InnerValue {\n-        final CheckCyclicMembership ccm = CheckCyclicMembership.default; \/\/ Error.\n-    }\n-    final CheckCyclicMembership ccm = CheckCyclicMembership.default; \/\/ Error.\n-    final int i = 10;\n-    final String s = \"blah\";\n-    final InnerRef ir = new InnerRef(); \/\/ OK.\n-    final InnerValue iv = InnerValue.default; \/\/ Error\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckCyclicMembership.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-CheckCyclicMembership.java:12:37: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership.InnerValue\n-CheckCyclicMembership.java:14:33: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n-CheckCyclicMembership.java:18:22: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n-3 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckCyclicMembership.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check field descriptors in class file\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses CheckFieldDescriptors.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckFieldDescriptors\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public primitive class CheckFieldDescriptors {\n-\n-    int x = 10;\n-\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(CheckFieldDescriptors.class.getResourceAsStream(\"CheckFieldDescriptorsAuxilliary.class\"));\n-\n-        Field [] flds = cls.fields;\n-        int fCount = 0;\n-        for (Field fld : flds) {\n-            if (fld.getName(cls.constant_pool).equals(\"f1\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"QCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field1\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"f2\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"LCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field2\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"f3\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"LCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field3\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"a1\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"[LCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field4\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"a2\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"[LCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field5\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"a3\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"[QCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field6\");\n-            } else if (fld.getName(cls.constant_pool).equals(\"a4\")) {\n-                fCount++;\n-                if (!fld.descriptor.getValue(cls.constant_pool).equals(\"[QCheckFieldDescriptors;\"))\n-                    throw new Exception(\"Bad descriptor for field7\");\n-            }\n-        }\n-        if (fCount != 7) {\n-            throw new Exception(\"Bad descriptor for field3\");\n-        }\n-    }\n-}\n-\n-class CheckFieldDescriptorsAuxilliary {\n-\n-    CheckFieldDescriptors f1;\n-    CheckFieldDescriptors.ref f2;\n-    CheckFieldDescriptors.ref f3;\n-\n-    CheckFieldDescriptors.ref[] a1 = new CheckFieldDescriptors.ref[42];\n-    CheckFieldDescriptors.ref[] a2 = new CheckFieldDescriptors.ref[42];\n-    CheckFieldDescriptors[] a3 = new CheckFieldDescriptors[42];\n-    CheckFieldDescriptors[] a4 = new CheckFieldDescriptors[42];\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFieldDescriptors.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,21 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check for cycles through fields declared flattenable.\n- *\n- * @compile\/fail\/ref=CheckFlattenableCycles.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableCycles.java\n- * @ignore\n- *\/\n-\n-final primitive class CheckFlattenableCycles {\n-    class InnerRef {\n-        CheckFlattenableCycles cfc;\n-    }\n-    primitive final class InnerValue {\n-        final CheckFlattenableCycles     cfc = CheckFlattenableCycles.default; \/\/ Error.\n-    }\n-    final CheckFlattenableCycles cfc = CheckFlattenableCycles.default; \/\/ Error.\n-    final int i = 10;\n-    final String s = \"blah\";\n-    final InnerRef ir = new InnerRef(); \/\/ OK.\n-    final InnerValue     iv = InnerValue.default; \/\/ Error\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableCycles.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-CheckFlattenableCycles.java:13:42: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles.InnerValue\n-CheckFlattenableCycles.java:15:34: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles\n-CheckFlattenableCycles.java:19:26: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles\n-3 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableCycles.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8197911\n- * @summary Check that valueness is deduced from class files and has the appropriate effect.\n- * @compile -XDenablePrimitiveClasses FlattenableFlagFromClass.java\n- * @compile\/fail\/ref=CheckFlattenableFlagFromClass.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableFlagFromClass.java\n- * @ignore\n- *\/\n-\n-public class CheckFlattenableFlagFromClass {\n-    void foo(FlattenableFlagFromClass f) {\n-        f.v = null; \/\/ Error.\n-        f.va[0] = null; \/\/ Error.\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-CheckFlattenableFlagFromClass.java:11:15: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableFlagFromClass.V)\n-CheckFlattenableFlagFromClass.java:12:19: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableFlagFromClass.V)\n-2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.out","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8207330\n- * @summary Check that flattenable flag is set for synthetic fields as needed.\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses CheckFlattenableSyntheticFields.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckFlattenableSyntheticFields\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public class CheckFlattenableSyntheticFields {\n-    public class RefOuter {\n-        primitive  class Inner {\n-            private final int value2;\n-            public Inner(int value2) {\n-                this.value2 = value2;\n-            }\n-        }\n-    }\n-    public primitive class ValueOuter {\n-        int x = 10;\n-        primitive  class Inner {\n-            private final int value2;\n-            public Inner(int value2) {\n-                this.value2 = value2;\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(CheckFlattenableSyntheticFields.class.getResourceAsStream(\"CheckFlattenableSyntheticFields$ValueOuter$Inner.class\"));\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n-            throw new Exception(\"Value flag not set\");\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_FINAL))\n-            throw new Exception(\"Final flag not set\");\n-\n-        cls = ClassFile.read(CheckFlattenableSyntheticFields.class.getResourceAsStream(\"CheckFlattenableSyntheticFields$RefOuter$Inner.class\"));\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n-            throw new Exception(\"Value flag not set\");\n-\n-        if (!cls.access_flags.is(AccessFlags.ACC_FINAL))\n-            throw new Exception(\"Final flag not set\");\n-\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableSyntheticFields.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Assignment of null to value types should be disallowed.\n- * @ignore\n- * @compile\/fail\/ref=CheckNullAssign.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullAssign.java\n- *\/\n-\n-final primitive class CheckNullAssign {\n-    CheckNullAssign foo(CheckNullAssign cna) {\n-        \/\/ All of the below involve subtype\/assignability checks and should be rejected.\n-        cna = null;\n-        foo(null);\n-        if (null instanceof CheckNullAssign) {}\n-        return null;\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullAssign.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-CheckNullAssign.java:11:15: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckNullAssign)\n-CheckNullAssign.java:12:9: compiler.err.cant.apply.symbol: kindname.method, foo, CheckNullAssign, compiler.misc.type.null, kindname.class, CheckNullAssign, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckNullAssign))\n-CheckNullAssign.java:13:13: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckNullAssign)\n-CheckNullAssign.java:14:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckNullAssign)\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullAssign.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary null cannot be casted to and compared with value types.\n- * @ignore\n- * @compile\/fail\/ref=CheckNullCastable.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullCastable.java\n- *\/\n-\n-primitive final class CheckNullCastable {\n-    void foo(CheckNullCastable cnc) {\n-        CheckNullCastable cncl = (CheckNullCastable) null;\n-        if (cnc != null) {};\n-        if (null != cnc) {};\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullCastable.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-CheckNullCastable.java:10:54: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, CheckNullCastable)\n-CheckNullCastable.java:11:17: compiler.err.incomparable.types: CheckNullCastable, compiler.misc.type.null\n-CheckNullCastable.java:12:18: compiler.err.incomparable.types: compiler.misc.type.null, CheckNullCastable\n-3 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullCastable.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check null assignment\/comparisons against VT.ref\n- * @compile -XDenablePrimitiveClasses CheckNullWithQuestion.java\n- * @ignore\n- *\/\n-\n-primitive class CheckNullWithQuestion {\n-    final int x = 0;\n-    void foo(boolean flag) {\n-        CheckNullWithQuestion.ref vBox = null;\n-        if (vBox != null) {}\n-        CheckNullWithQuestion.ref val = flag ? vBox : null;\n-    }\n-}\n-\n-class X {\n-    void foo(boolean flag) {\n-        CheckNullWithQuestion.ref vBox = null;\n-        if (vBox != null) {}\n-        CheckNullWithQuestion.ref val = flag ? vBox : null;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullWithQuestion.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Check separate compilation\n- * @compile -XDenablePrimitiveClasses CheckSeparateCompile0.java\n- * @compile -XDenablePrimitiveClasses CheckSeparateCompile.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckSeparateCompile\n- * @ignore\n- *\/\n-\n-public class CheckSeparateCompile {\n-    public static void main(String[] args) {\n-        if (new CheckSeparateCompile0().new O().new M().new I().foo().i != 890)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSeparateCompile.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @summary Test seperate compilation\n- *\/\n-\n-public class CheckSeparateCompile0 {\n-    int x = 123;\n-    public class O {\n-        int o = 456;\n-        public class M {\n-            int m = 789;\n-            public primitive class I {\n-                int i = 890;\n-                I() {\n-\n-                }\n-                I foo() {\n-                    return this;\n-                }\n-            }\n-            public String toString() {\n-                return \"o = \" + o + \" m = \" + m + \" x = \" + x;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSeparateCompile0.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,20 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check that a static final field may not be modified in a value factory\n- * @compile\/fail\/ref=CheckStaticFinalAssign.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckStaticFinalAssign.java\n- * @ignore\n- *\/\n-\n-primitive final class CheckStaticFinalAssign {\n-    static final int x;\n-    static {\n-        x = 10;\n-    }\n-\n-    static CheckStaticFinalAssign foo() {\n-       CheckStaticFinalAssign x = CheckStaticFinalAssign.default;\n-       x.x = 100;\n-       return x;\n-    }\n-    int ix = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckStaticFinalAssign.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-CheckStaticFinalAssign.java:15:9: compiler.err.cant.assign.val.to.var: static final, x\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckStaticFinalAssign.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check that value types have their super types wired to be j.l.Object\n- *\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n- * @compile -XDenablePrimitiveClasses CheckSuperCompileOnly.java\n- * @ignore\n- *\/\n-\n-public class CheckSuperCompileOnly {\n-    public static void main(String... args) {\n-        final Point p = Point.makePoint(100, 200);\n-        Object v = p;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSuperCompileOnly.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check behavior of synzhronized key word on primitive class instances and methods.\n- * @ignore\n- * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckSynchronized.java\n- *\/\n-\n-primitive final class CheckSynchronized implements java.io.Serializable {\n-    synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n-    }\n-    void goo() {\n-        synchronized(this) {} \/\/ <<-- ERROR, no monitor associated with `this'\n-    }\n-    synchronized static void zoo(CheckSynchronized cs) { \/\/ OK, static method.\n-        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with primitive class instance.\n-        }\n-\n-        CheckSynchronized.ref csr = cs;\n-        synchronized(csr) {\n-            \/\/ Error, no identity.\n-        }\n-\n-        synchronized(x) {\n-            \/\/ Error, no identity.\n-        }\n-\n-        Object o = cs;\n-        synchronized(o) {\n-            \/\/ Error BUT not discernible at compile time\n-        }\n-        java.io.Serializable jis = cs;\n-        synchronized(jis) {\n-            \/\/ Error BUT not discernible at compile time\n-        }\n-    }\n-    static int x = 10;\n-\n-    primitive record CheckSynchronizedRecord(int x, int y) {\n-        synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n-        }\n-        synchronized static void zoo() { \/\/ OK, static method.\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSynchronized.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -6,1 +6,0 @@\n- * @ignore\n@@ -9,1 +8,1 @@\n-primitive class V {\n+value class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckThisLeak.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Compiler should reject value modifier when it features in illegal contexts.\n- * @ignore\n- * @compile\/fail\/ref=CheckValueModifier.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckValueModifier.java\n- *\/\n-\n-\/* Note: value as a modifier will be rejected by the parser if it features as a\n-   modifier of a (a) catch parameter, (b) resource variable, (c) for loop's init section\n-   declarators and (d) formal parameters. We test here only for the other illegal places.\n-\n-   All uses of value below should trigger errors.\n-*\/\n-class CheckValueModifier {\n-   primitive int x;\n-   primitive int foo() {\n-   }\n-   primitive interface IFace {}\n-   primitive @interface Annot {}\n-   primitive enum Enum {}\n-   primitive abstract class Inner {}\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckValueModifier.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-CheckValueModifier.java:18:14: compiler.err.illegal.combination.of.modifiers: interface, primitive\n-CheckValueModifier.java:19:15: compiler.err.illegal.combination.of.modifiers: interface, primitive\n-CheckValueModifier.java:20:14: compiler.err.mod.not.allowed.here: primitive\n-CheckValueModifier.java:21:23: compiler.err.illegal.combination.of.modifiers: abstract, primitive\n-CheckValueModifier.java:15:18: compiler.err.mod.not.allowed.here: primitive\n-CheckValueModifier.java:16:18: compiler.err.mod.not.allowed.here: primitive\n-6 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckValueModifier.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,13 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8244796 8244799\n- * @summary Value class literal tests\n- * @compile\/fail\/ref=ClassLiteralNegativeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ClassLiteralNegativeTest.java\n- * @ignore\n- *\/\n-\n-final primitive class ClassLiteralNegativeTest {\n-    Class<ClassLiteralNegativeTest> c1 = null; \/\/ error\n-    Class<? extends ClassLiteralNegativeTest> c2 = null; \/\/ error\n-    Class<? super ClassLiteralNegativeTest> c3 = null; \/\/ error\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralNegativeTest.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-ClassLiteralNegativeTest.java:9:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)\n-ClassLiteralNegativeTest.java:10:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)\n-ClassLiteralNegativeTest.java:11:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)\n-3 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralNegativeTest.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8244796 8244799\n- * @summary Temporary typing of inline class literals.\n- * @compile -XDenablePrimitiveClasses ClassLiteralTypingTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ClassLiteralTypingTest\n- * @ignore\n- *\/\n-\n-\/* Given an inline class V that implements I1, I2, ... In,\n-   V.class and v.getClass() are typed to be Class<? extends Object & I1 & I2 .. & In>\n-*\/\n-public class ClassLiteralTypingTest {\n-\n-    interface I {}\n-\n-    public static <T> long size(Class<T> c) {\n-        return 0;\n-    }\n-\n-    public static long foo(Class<? extends I> p) {\n-        return 1;\n-    }\n-\n-    static primitive class V implements I {\n-        int x = 42;\n-    }\n-\n-    public static void main(String[] args) {\n-        if (size(V.class) != 0 || size(new V().getClass()) != 0 ||\n-             foo(V.class) != 1 ||  foo(new V().getClass()) != 1)\n-            throw new AssertionError(\"Unexpected behavior\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingTest.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222711\n- * @summary Regression test for bogus assertion failure.\n- * @compile -XDenablePrimitiveClasses CompilerNoBogusAssert.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CompilerNoBogusAssert\n- * @ignore\n- *\/\n-\n-public class CompilerNoBogusAssert {\n-\n-    static primitive class Point {\n-        int x;\n-        int y;\n-\n-        public Point(int x, int y) {\n-            this.x = x;\n-            this.y = y;\n-        }\n-    }\n-\n-\n-    static void testCastingFromBoxToVal(Point.ref p) {\n-        boolean npe = false;\n-        try {\n-            Point pv = (Point) p;\n-        } catch(NullPointerException e) {\n-            npe = true;\n-        }\n-        if (npe) {\n-        } else {\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        testCastingFromBoxToVal(new Point(3,4));\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilerNoBogusAssert.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222555 8222553\n- * @summary Prove that code suspected of not compiling actually compiles fine.\n- * @compile -XDenablePrimitiveClasses CompilesJustFine.java\n- * @ignore\n- *\/\n-\n-class CompilesFine {\n-\n-    static Point.ref nfspQm;\n-\n-    public static void main(String[] args) {\n-        nfspQm = null;\n-    }\n-}\n-primitive final class Point {\n-    final int x;\n-    final int y;\n-\n-    Point() {\n-        x = 0;\n-        y = 0;\n-    }\n-}\n-\n-class CompilesJustFine {\n-\n-    static final primitive class Value {\n-        final PointBug2.ref nfpQm;\n-\n-        private Value() {\n-            nfpQm = PointBug2.createPoint(0, 0);\n-        }\n-    }\n-}\n-primitive final class PointBug2 {\n-    final int x;\n-    final int y;\n-\n-    PointBug2(int x, int y) {\n-        this.x = x;\n-        this.y = y;\n-    }\n-\n-    public static PointBug2 createPoint(int x, int y) {\n-        return new PointBug2(x, y);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilesJustFine.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244513\n- * @summary Test conditional expression typing involving inlines.\n- * @compile -XDenablePrimitiveClasses ConditionalInlineTypeTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ConditionalInlineTypeTest\n- * @ignore\n- *\/\n-\n-public class ConditionalInlineTypeTest {\n-\n-    static primitive class V {}\n-\n-    public static void main(String [] args) {\n-\n-        var r1 = args.length == 0 ? new V() : new V();\n-        System.out.println(r1.getClass());\n-\n-        var r2 = args.length == 0 ? (V.ref) new V() : (V.ref) new V();\n-        System.out.println(r2.getClass());\n-\n-        int npe = 0;\n-        try {\n-            var r3 = args.length != 0 ? new V() : (V.ref) null;\n-            System.out.println(r3.getClass());\n-        } catch (NullPointerException e) {\n-            npe++;\n-        }\n-        try {\n-            var r4 = args.length == 0 ? (V.ref) null : new V();\n-            System.out.println(r4.getClass());\n-        } catch (NullPointerException e) {\n-            npe++;\n-        }\n-        if (npe != 2) {\n-            throw new AssertionError(\"NPEs = \" + npe);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalInlineTypeTest.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8266466\n- * @summary Enhance javac to consume unified primitive class files\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java Rectangle.java\n- * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics -XDenablePrimitiveClasses ConsumeUnifiedClass.java\n- * @ignore\n- *\/\n-\n-public primitive class ConsumeUnifiedClass {\n-    public static void main(String [] args) {\n-        Rectangle r = new Rectangle(null, null); \/\/ Check method type decoding, should error\n-        r = Rectangle.from(null, null); \/\/ OK.\n-        Rectangle.origin = null; \/\/ Check field type decoding, should error\n-        Rectangle.origin = Point.makePoint(0, 0); \/\/ OK\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConsumeUnifiedClass.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-ConsumeUnifiedClass.java:36:23: compiler.err.cant.apply.symbol: kindname.constructor, Rectangle, Point,Point, compiler.misc.type.null,compiler.misc.type.null, kindname.class, Rectangle, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: compiler.misc.type.null, Point))\n-ConsumeUnifiedClass.java:38:28: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, Point)\n-2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConsumeUnifiedClass.out","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test value instatiation using new\/ctors by chaining constructors.\n- * @compile -XDenablePrimitiveClasses CtorChain.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CtorChain\n- * @ignore\n- *\/\n-\n-public primitive class CtorChain {\n-    int x1, x2, x3, x4, x5;\n-    CtorChain() {\n-        this(10);\n-    }\n-    CtorChain(int a) {\n-        this(a, 20);\n-    }\n-    CtorChain(int a, int b) {\n-        this(a, b, 30);\n-    }\n-    CtorChain(int a, int b, int c) {\n-        this(a, b, c, 40);\n-    }\n-    CtorChain(int a, int b, int c, int d) {\n-        this(a, b, c, d, 50);\n-    }\n-    CtorChain(int a, int b, int c, int d, int e) {\n-        this.x1 = a;\n-        this.x2 = b;\n-        this.x3 = c;\n-        this.x4 = d;\n-        this.x5 = e;\n-        return;\n-    }\n-\n-    public static void main(String [] args) {\n-        CtorChain cc = new CtorChain();\n-        if (cc.x1 != 10 || cc.x2 != 20 || cc.x3 != 30 || cc.x4 != 40 || cc.x5 != 50)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CtorChain.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test Check default values for non-inline types\n- * @bug 8237067\n- * @summary [lworld] Provide linguistic support to denote default values.\n- * @compile -XDenablePrimitiveClasses DefaultNonInlines.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dtest.compiler.opts=-release=13 DefaultNonInlines\n- * @ignore\n- *\/\n-\n-public class DefaultNonInlines {\n-\n-    static primitive class Val {\n-        public int v = 42;\n-    }\n-\n-    static <T> void checkDefaultT(Class<T> clazz) throws Exception {\n-        while (T.default != null)\n-            throw new AssertionError(\"Generic object should default to null\");\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Default value is set by inline class constructor\n-        while (Val.default.v != int.default)\n-            throw new AssertionError(\"inline object fields should default to defaults\");\n-\n-        while ((new Val()).v != 42)\n-            throw new AssertionError(\"inline object fields should default to whatever constructor says\");\n-\n-        \/\/ Simple reference default is just null\n-        while (String.default != null)\n-            throw new AssertionError(\"reference object should default to null\");\n-\n-        \/\/ Reference default checked in method above\n-        checkDefaultT(String.class);\n-\n-        \/\/ Array type - different syntactically\n-        while (int[].default != null)\n-            throw new AssertionError(\"arrays should default to null\");\n-\n-        while (boolean.default != false)\n-            throw new AssertionError(\"boolean should default to false\");\n-\n-        while (char.default != '\\0')\n-            throw new AssertionError(\"char should default to '\\0'\");\n-\n-        while (int.default != 0)\n-            throw new AssertionError(\"int should default to 0\");\n-\n-        while (byte.default != 0)\n-            throw new AssertionError(\"byte should default to 0\");\n-\n-        while (short.default != 0)\n-            throw new AssertionError(\"short should default to 0\");\n-\n-        while (long.default != 0L)\n-            throw new AssertionError(\"long should default to 0L\");\n-\n-        while (float.default != 0.0F)\n-            throw new AssertionError(\"float should default to 0.0F\");\n-\n-        while (double.default != 0.0D)\n-            throw new AssertionError(\"double should default to 0.0D\");\n-\n-        \/\/ Note: The while loops above implicitly test that the SomeType.default does not\n-        \/\/ return a constant expression.\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultNonInlines.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8268671\n- * @summary Wrong code generated for PrimitiveClass.ref.default\n- * @compile -XDenablePrimitiveClasses DefaultOfPrimitiveReference.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses DefaultOfPrimitiveReference\n- * @ignore\n- *\/\n-\n-public primitive class DefaultOfPrimitiveReference {\n-    public static void main(String [] args) {\n-        Object o = DefaultOfPrimitiveReference.ref.default;\n-        if (o != null)\n-            throw new AssertionError(\"Expected NPE is missing\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultOfPrimitiveReference.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8210122\n- * @summary [lworld] javac issues bogus \"no comment\" doclint warning while compiling primitive class\n- * @compile -Xdoclint:all -Werror -XDenablePrimitiveClasses DocLintSyntheticsTest.java\n- * @ignore\n- *\/\n-\n-\/**\n- * NOTE: This test is not relevant as we don't inject synthetic methods into primitive\n- *       classes anymore, but is still left in just the same.\n- *\/\n-public primitive class DocLintSyntheticsTest {\n-  \/** field *\/\n-  private final int value;\n-  \/**\n-   * Constructor\n-   *\/\n-  public DocLintSyntheticsTest() { this.value = 0; }\n-\n-  \/**\n-   * test method\n-   *\/\n-  public static void test() {\n-  }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DocLintSyntheticsTest.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8267843\n- * @summary Check that javac diagnoses `this` being passed around and instance method being invoked before primitive class instance is fully initialized.\n- * @compile\/fail\/ref=DualNonDuplicateErrors.out -XDrawDiagnostics -XDenablePrimitiveClasses DualNonDuplicateErrors.java\n- * @ignore\n- *\/\n-\n-public primitive class DualNonDuplicateErrors {\n-\n-    int x;\n-\n-    DualNonDuplicateErrors() {\n-        \/\/ The call below should trigger two errors - they are not duplicates really.\n-        \/\/ First one is for `this` being passed around (\"exposed\")\n-        \/\/ Second is for instance method being invoked thereby allowing that method to\n-        \/\/ observe the primitive class instance in a partially initialized state.\n-        foo(this);\n-        x = 10;\n-        foo(this); \/\/ No error here.\n-    }\n-\n-    void foo(DualNonDuplicateErrors x) {\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualNonDuplicateErrors.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-DualNonDuplicateErrors.java:17:13: compiler.err.this.exposed.prematurely\n-DualNonDuplicateErrors.java:17:12: compiler.err.this.exposed.prematurely\n-2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualNonDuplicateErrors.out","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8251504\n- * @summary Test behavior with empty value type.\n- * @compile -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses EmptyValueTest.java\n- * @ignore\n- *\/\n-public final primitive class EmptyValueTest {\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/EmptyValueTest.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244711 8244712\n- * @summary Test that inline types work well with enhanced for loop.\n- * @compile -XDenablePrimitiveClasses EnhancedForLoopTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses EnhancedForLoopTest\n- * @ignore\n- *\/\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.ArrayList;\n-\n-\/* This test covers\/verifies that the asSuper calls in\n-\n-   com.sun.tools.javac.comp.Lower.visitIterableForeachLoop\n-   com.sun.tools.javac.comp.Attr#visitForeachLoop\n-\n-   work properly with primitive class types.\n-*\/\n-\n-public class EnhancedForLoopTest {\n-\n-    static primitive class PrimitiveIterator<V> implements Iterator<V> {\n-\n-        Iterator<V> iv;\n-\n-        public PrimitiveIterator(List<V> lv) {\n-            this.iv = lv.iterator();\n-        }\n-\n-        @Override\n-        public boolean hasNext() {\n-            return iv.hasNext();\n-        }\n-\n-        @Override\n-        public V next() {\n-            return iv.next();\n-        }\n-\n-    }\n-\n-    primitive static class Foo<V> implements Iterable<V> {\n-\n-        List<V> lv;\n-\n-        public Foo() {\n-            lv = new ArrayList<>();\n-        }\n-\n-        public void add(V v) {\n-            lv.add(v);\n-        }\n-\n-       public PrimitiveIterator<V> iterator() {\n-            return new PrimitiveIterator<V>(lv);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        Foo<String> foo = new Foo<String>();\n-        foo.add (\"Hello\");\n-        foo.add (\" \");\n-        foo.add (\"World\");\n-        foo.add (\"!\");\n-        String output = \"\";\n-        for (var s : foo) {\n-            output += s;\n-        }\n-        if (!output.equals(\"Hello World!\"))\n-            throw new AssertionError(\"Unexpected: \" + output);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/EnhancedForLoopTest.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8229537\n- * @summary [lworld] Poor interaction between explicit lambda parameters and nullable projection types.\n- * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.function.*;\n-import java.util.NoSuchElementException;\n-\n-primitive class OptionalInt {\n-    \/\/ private static final OptionalInt EMPTY = OptionalInt.default;\n-\n-    private boolean isPresent;\n-    private int v;\n-\n-    public static OptionalInt empty() {\n-        return OptionalInt.default;\n-    }\n-\n-    public OptionalInt(int val) {\n-        this.v = val;\n-        this.isPresent = true;\n-    }\n-\n-    public static OptionalInt of(int val) {\n-        return new OptionalInt(val);\n-    }\n-\n-    public int getAsInt() {\n-        if (!isPresent)\n-            throw new NoSuchElementException(\"No value present\");\n-\n-        return v;\n-    }\n-\n-    public boolean isPresent() {\n-        return isPresent;\n-    }\n-\n-    public void ifPresent(IntConsumer consumer) {\n-        if (isPresent)\n-            consumer.accept(v);\n-    }\n-\n-    public int orElse(int other) {\n-        return isPresent ? v : other;\n-    }\n-}\n-\n-public final class ExplicitLambdaWithNullableTypes {\n-\n-   public static void main(String[] args) {\n-       List<OptionalInt.ref> opts = new ArrayList<>();\n-       for (int i=0; i < 5; i++) {\n-           opts.add(OptionalInt.of(i));\n-           opts.add(OptionalInt.empty());\n-           opts.add(null);\n-       }\n-\n-       Integer total = opts.stream()\n-           .map((OptionalInt.ref o) -> {\n-               if (o == null)\n-                   return 0;\n-\n-               OptionalInt op = (OptionalInt)o;\n-               return op.orElse(0);\n-           })\n-           .reduce(0, (x, y) -> x + y);\n-\n-        if (total != 10) {\n-            throw new AssertionError(\"Incorrect output: \" + total);\n-        }\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8229537\n- * @summary [lworld] Poor interaction between explicit lambda parameters and nullable projection types.\n- * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes2.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes2\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.function.*;\n-import java.util.NoSuchElementException;\n-import java.util.stream.*;\n-\n-primitive class OptionalInt {\n-    \/\/ private static final OptionalInt EMPTY = OptionalInt.default;\n-\n-    private boolean isPresent;\n-    private int v;\n-\n-    public static OptionalInt empty() {\n-        return OptionalInt.default;\n-    }\n-\n-    public OptionalInt(int val) {\n-        this.v = val;\n-        this.isPresent = true;\n-    }\n-\n-    public static OptionalInt of(int val) {\n-        return new OptionalInt(val);\n-    }\n-\n-    public int getAsInt() {\n-        if (!isPresent)\n-            throw new NoSuchElementException(\"No value present\");\n-\n-        return v;\n-    }\n-\n-    public boolean isPresent() {\n-        return isPresent;\n-    }\n-\n-    public void ifPresent(IntConsumer consumer) {\n-        if (isPresent)\n-            consumer.accept(v);\n-    }\n-\n-    public int orElse(int other) {\n-        return isPresent ? v : other;\n-    }\n-}\n-\n-public final class ExplicitLambdaWithNullableTypes2 {\n-\n-   public static void main(String[] args) {\n-       List<OptionalInt.ref> opts = new ArrayList<>();\n-       for (int i=0; i < 5; i++) {\n-           opts.add(OptionalInt.of(i));\n-           opts.add(OptionalInt.empty());\n-           opts.add(null);\n-       }\n-\n-       Stream<OptionalInt.ref> soi = opts.stream();\n-       ToIntFunction<OptionalInt.ref> f = (OptionalInt.ref o) -> {\n-            if (o == null) return 0;\n-            OptionalInt op = (OptionalInt)o;\n-            return op.orElse(0);\n-       };\n-\n-       IntStream sint = soi.mapToInt(f);\n-       int total = sint.reduce(0, (x, y) -> x + y);\n-\n-       if (total != 10) {\n-            throw new AssertionError(\"Incorrect output: \" + total);\n-       }\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes2.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8229537\n- * @summary [lworld] Poor interaction between explicit lambda parameters and nullable projection types.\n- * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes3.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes3\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.function.*;\n-import java.util.NoSuchElementException;\n-import java.util.stream.*;\n-\n-primitive class OptionalInt {\n-    \/\/ private static final OptionalInt EMPTY = OptionalInt.default;\n-\n-    private boolean isPresent;\n-    private int v;\n-\n-    public static OptionalInt empty() {\n-        return OptionalInt.default;\n-    }\n-\n-    public OptionalInt(int val) {\n-        this.v = val;\n-        this.isPresent = true;\n-    }\n-\n-    public static OptionalInt of(int val) {\n-        return new OptionalInt(val);\n-    }\n-\n-    public int getAsInt() {\n-        if (!isPresent)\n-            throw new NoSuchElementException(\"No value present\");\n-\n-        return v;\n-    }\n-\n-    public boolean isPresent() {\n-        return isPresent;\n-    }\n-\n-    public void ifPresent(IntConsumer consumer) {\n-        if (isPresent)\n-            consumer.accept(v);\n-    }\n-\n-    public int orElse(int other) {\n-        return isPresent ? v : other;\n-    }\n-}\n-\n-public final class ExplicitLambdaWithNullableTypes3 {\n-\n-   public static void main(String[] args) {\n-       List<OptionalInt.ref> opts = new ArrayList<>();\n-       for (int i=0; i < 5; i++) {\n-           opts.add(OptionalInt.of(i));\n-           opts.add(OptionalInt.empty());\n-           opts.add(null);\n-       }\n-\n-       Stream<OptionalInt.ref> soi = opts.stream();\n-       ToIntFunction<OptionalInt.ref> f = o -> {\n-            if (o == null) return 0;\n-            OptionalInt op = (OptionalInt)o;\n-            return op.orElse(0);\n-        };\n-\n-       IntStream sint = soi.mapToInt(f);\n-       int total = sint.reduce(0, (x, y) -> x + y);\n-\n-       if (total != 10) {\n-            throw new AssertionError(\"Incorrect output: \" + total);\n-       }\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes3.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class FlattenableFlagFromClass {\n-\n-    public primitive final class V {\n-        final int x = 10;\n-    }\n-\n-    public V v;\n-    public V[] va;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FlattenableFlagFromClass.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8217958 8217966\n- * @summary Trouble assigning\/casting to a value array type with parameterized element type\n- * @compile -XDenablePrimitiveClasses -XDenablePrimitiveClasses GenericArrayRegression.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericArrayRegression\n- * @ignore\n- *\/\n-\n-public class GenericArrayRegression {\n-\n-   static primitive class Entry<E> {\n-     private final int value;\n-\n-     public Entry(int value) {\n-       this.value = value;\n-     }\n-\n-     public static <E> Entry<E>[] of() {\n-       return (Entry<E>[])new Entry<?>[0];\n-     }\n-   }\n-\n-   public static void main(String[] args) {\n-     var entry = Entry.of();\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayRegression.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222784\n- * @summary Check generics and values interplay\n- * @compile -XDenablePrimitiveClasses GenericsAndValues1.java\n- * @ignore\n- *\/\n-\n- primitive class Foo implements Comparable<Foo.ref>{\n-    final int value;\n-\n-    public Foo(int value) {\n-      this.value = value;\n-    }\n-\n-    @Override\n-    public int compareTo(Foo.ref o) {\n-      return Integer.compare(value, o.value);\n-    }\n- }\n-\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues1.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222784\n- * @summary Check generics and values interplay\n- * @compile -XDenablePrimitiveClasses GenericsAndValues2.java\n- * @ignore\n- *\/\n-\n-import java.util.function.Consumer;\n-\n-  primitive class CaptureBug {\n-    final int value;\n-\n-    public CaptureBug(int value) {\n-      this.value = value;\n-    }\n-\n-    private static void accept(Consumer<? super CaptureBug.ref> consumer) {\n-      consumer.accept(new CaptureBug(3));\n-    }\n-\n-    public static void main(String[] args) {\n-      accept(value -> System.out.println(value));\n-    }\n-  }\n-\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues2.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222784\n- * @summary Check generics and values interplay\n- * @compile -XDenablePrimitiveClasses GenericsAndValues3.java\n- * @ignore\n- *\/\n-\n-import java.util.stream.IntStream;\n-\n-primitive class StreamBug {\n-  final int value;\n-\n-  public StreamBug(int value) {\n-    this.value = value;\n-  }\n-\n-  public static void main(String[] args) {\n-    \/\/var bug = new StreamBug?(7);\n-\n-    IntStream.range(0, 10).mapToObj(StreamBug::new).forEach(System.out::println);\n-  }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues3.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8230121\n- * @summary Javac does not properly parse nullable projection types of parameterized inline types\n- * @compile -XDenablePrimitiveClasses GenericsAndValues4.java\n- * @ignore\n- *\/\n-\n-primitive class InlineType<E> {\n-\n-    interface Sample<K extends Comparable<? super K>, V> {\n-        void doesCompile(InlineType<? extends K> argument);\n-        void doesNotCompile(java.util.Map.Entry<InlineType.ref<? extends K>, ? extends V> arg);\n-    }\n-\n-    private E element;\n-\n-    InlineType(E element) {\n-        this.element = element;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues4.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8230121\n- * @summary Javac does not properly parse nullable projection types of parameterized inline types\n- * @compile -XDenablePrimitiveClasses GenericsAndValues5.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericsAndValues5\n- * @ignore\n- *\/\n-\n-import java.util.NoSuchElementException;\n-import java.util.Objects;\n-import java.util.function.Function;\n-import java.util.List;\n-import java.util.ArrayList;\n-\n-primitive class Optional<T> {\n-    private T value;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T> Optional<T> empty() {\n-        return (Optional<T>) Optional.default;\n-    }\n-\n-    private Optional(T value) {\n-        this.value = value;\n-    }\n-\n-    public static <T> Optional<T> of(T value) {\n-        if (value == null)\n-            return empty();\n-        return new Optional<T>(value);\n-    }\n-\n-    public T get() {\n-        if (value == null)\n-            throw new NoSuchElementException(\"No value present\");\n-        return value;\n-    }\n-\n-    public boolean isPresent() {\n-        return value != null;\n-    }\n-\n-    public T orElse(T other) {\n-        return value != null ? value : other;\n-    }\n-\n-    public <U> Optional<U> map(Function<? super T, ? extends U> mapper) {\n-        Objects.requireNonNull(mapper);\n-        if (!isPresent())\n-            return empty();\n-        else\n-            return Optional.of(mapper.apply(value));\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return value != null ? String.format(\"Optional[%s]\", value) : \"Optional.empty\";\n-    }\n-}\n-\n-public final class GenericsAndValues5 {\n-\n-   public static void main(String[] args) {\n-\n-       List<Optional.ref<Integer>> opts = new ArrayList<>();\n-       for (int i=0; i < 6; i++) {\n-           Optional<Integer> oi = Optional.of(i);\n-           opts.add((Optional.ref<Integer>)oi);\n-           Optional<Integer> oe = Optional.empty();\n-           opts.add((Optional.ref<Integer>)oe);\n-       }\n-\n-       Integer total = opts.stream()\n-           .map((Optional.ref<Integer> o) -> {\n-               Optional<Integer> op = (Optional<Integer>)o;\n-               return op.orElse(0);\n-           })\n-           .reduce(0, (x, y) -> x + y);\n-\n-        if (total != 15) {\n-            throw new AssertionError(\"Incorrect output: \" + total);\n-        }\n-   }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues5.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8271389\n- * @summary [lworld] Improve typing of primitiveObject.getClass()\n- * @compile -XDenablePrimitiveClasses GetClassTypingTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GetClassTypingTest\n- * @ignore\n- *\/\n-\n-public class GetClassTypingTest {\n-\n-    static primitive class Primitive {}\n-\n-    static void foo(Class<? extends Primitive.ref> c) {}\n-\n-    public static void main(String [] args) {\n-       foo(new Primitive().getClass());\n-    }\n-\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GetClassTypingTest.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @bug 8267910\n- * @summary Javac fails to implicitly type abstract classes as having identity\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @run main ImplicitIdentityTypeTest\n- *\/\n-\n-\/* An abstract implicitly implements IdentityObject\n-        - if it declares a field,\n-        - an instance initializer,\n-        - a non-empty constructor,\n-        - a synchronized method,\n-        - has a concrete super,\n-        - is an inner class.\n-*\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public class ImplicitIdentityTypeTest {\n-\n-    static abstract class A {}  \/\/ Not an Identity class.\n-    static abstract class B { static { System.out.println(); } }  \/\/ Not an Identity class.\n-\n-\n-    \/\/ All abstract classes below are identity classes by implicit typing.\n-\n-    abstract class C {}  \/\/ inner class implicitly implements IdentityObject\n-    static abstract class D { int f; }  \/\/ instance field lends it identity.\n-    static abstract class E { { System.out.println(); } }  \/\/ initializer lends it identity.\n-    static abstract class F { F(){ System.out.println(); }}  \/\/ non-empty ctor.\n-    static abstract class G { synchronized void f() {} }  \/\/ synchronized method.\n-\n-    static abstract class H extends ImplicitIdentityTypeTest {}  \/\/ not identity - no inheritance of flag bits from concrete super.\n-\n-    public static void main(String [] args) throws Exception {\n-\n-        ClassFile cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$A.class\"));\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should not be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$B.class\"));\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should not be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$C.class\"));\n-        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$D.class\"));\n-        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$E.class\"));\n-        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$F.class\"));\n-        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$G.class\"));\n-        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n-\n-        cls = ClassFile.read(ImplicitIdentityTypeTest.class.getResourceAsStream(\"ImplicitIdentityTypeTest$H.class\"));\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n-\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ImplicitIdentityTypeTest.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test various inference scenarios.\n- * @compile -XDenablePrimitiveClasses InferredValueParameterizationTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InferredValueParameterizationTest\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-\n-\/\/ This used to be negative test earlier in LW2.\n-\/\/ Now no value type V <: T where T is a type variable.\n-\n-public primitive class InferredValueParameterizationTest {\n-    int x = 10;\n-\n-    static class Y<T> {\n-        Y(T t) {}\n-    }\n-\n-    static <K> List<K> foo(K k) {\n-        return null;\n-    }\n-\n-    public static void main(String [] args) {\n-       var list = List.of(new InferredValueParameterizationTest());\n-       Object o = new Y<>(new InferredValueParameterizationTest());\n-       o = new Y<>(new InferredValueParameterizationTest()) {};\n-       foo(new InferredValueParameterizationTest());\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InferredValueParameterizationTest.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222745\n- * @summary Test inline modifier\n- * @compile -XDenablePrimitiveClasses InlineClassTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InlineClassTest\n- * @ignore\n- *\/\n-\n-public primitive class InlineClassTest {\n-    int x = 42;\n-    public static void main(String [] args) {\n-        if (new InlineClassTest().x != 42)\n-            throw new AssertionError(\"Unexpected state\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineClassTest.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244458 8244414\n- * @summary Diamond inference does not work with value classes\n- * @compile -XDenablePrimitiveClasses InlineDiamondTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InlineDiamondTest\n- * @ignore\n- *\/\n-\n-public class InlineDiamondTest<E> {\n-\n-    interface I<T> {\n-    }\n-\n-    public I<E> get() {\n-        return new Y<>();\n-    }\n-\n-    private primitive class Y<U> implements I<U> {\n-        int x = 42;\n-    }\n-\n-    public static void main(String [] args) {\n-        InlineDiamondTest<String> idt = new InlineDiamondTest<>();\n-        I<String> is = idt.get();\n-        String toString = is.toString();\n-        if (!toString.equals(\"InlineDiamondTest$Y@\" + Integer.toHexString(is.hashCode())))\n-            throw new AssertionError(\"Expected: \" + toString);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineDiamondTest.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8221330\n- * @summary Javac adds InnerClass attribute missing value flag\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses InnerClassAttributeValuenessTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InnerClassAttributeValuenessTest\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.AccessFlags;\n-\n-public class InnerClassAttributeValuenessTest {\n-\n-    static primitive class Inner {\n-        int f;\n-        private Inner() { f=0; }\n-        private Inner(int v) { f=v; }\n-\n-        public static Inner create(int v) {\n-            return new Inner(v);\n-        }\n-\n-        \/\/ Uncomment the next line, and Inner ceases to be a value type\n-        public static final Inner.ref ZERO = Inner.create(0);\n-        public static final Inner.ref ZERO2 = Inner.create(0);\n-    }\n-\n-    public static void main(String[] args) {\n-        if ((Inner.class.getModifiers() & AccessFlags.ACC_PRIMITIVE) == 0)\n-            throw new AssertionError(\"Primitive flag missing\");\n-        if ((Inner.class.getModifiers() & AccessFlags.ACC_VALUE) == 0)\n-            throw new AssertionError(\"Value flag missing\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerClassAttributeValuenessTest.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test value instatiation using new\/ctors.\n- * @compile -XDenablePrimitiveClasses InnerValueNew.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InnerValueNew\n- * @ignore\n- *\/\n-\n-\n-public class InnerValueNew {\n-    final primitive class Y {\n-        final int x;\n-        final int p = 123456;\n-        Y() {\n-            this(123400);\n-        }\n-\n-        Y(int x) {\n-            this.x = x;\n-        }\n-    }\n-    public static void main(String[] args) {\n-        Y y1 = new InnerValueNew().new Y();\n-        Y y2 = new InnerValueNew().new Y(56);\n-        if (y2.x + y1.x != y1.p)\n-           throw new AssertionError(\"Broken\");\n-        if (y2.x + y1.x != y2.p)\n-           throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerValueNew.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222974\n- * @summary javac doesn't like \"?\" syntax in instanceof type expression (syntax is dead)\n- * @compile -XDenablePrimitiveClasses InstanceofProjectionArray.java\n- * @ignore\n- *\/\n-\n-\n-public primitive class InstanceofProjectionArray {\n-\n-    int value;\n-    public InstanceofProjectionArray() { this.value = 0; }\n-\n-    public static void main(String[] args) throws Throwable {\n-        InstanceofProjectionArray.ref[] foos = new InstanceofProjectionArray.ref[1];\n-        if (!(foos instanceof InstanceofProjectionArray.ref[])) {\n-            throw new RuntimeException(\"Thought that should work\");\n-        }\n-        InstanceofProjectionArray.ref[][] xx = null;\n-        if (xx instanceof InstanceofProjectionArray.ref[][]) {}\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InstanceofProjectionArray.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8217875\n- * @summary [lworld] Javac does not allow express casts between value types and their light weight box types\n- * @compile -XDenablePrimitiveClasses IntercastTest.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses IntercastTest\n- * @ignore\n- *\/\n-\n-public primitive class IntercastTest {\n-\n-    int ARRAY[] = { 10, 20, 30 };\n-\n-    static primitive class Tuple {\n-        private final int index;\n-        private final int element;\n-\n-        private Tuple(int index, int element) {\n-            this.index = index;\n-            this.element = element;\n-        }\n-    }\n-\n-    static primitive class Cursor {\n-        private final int[] array;\n-        private final int index;\n-\n-        private Cursor(int[] array, int index) {\n-            this.array = array;\n-            this.index = index;\n-        }\n-\n-        Tuple current() {\n-            return new Tuple(index, array[index]);\n-        }\n-\n-        Cursor.ref next() {\n-            if (index + 1 == array.length) {\n-                return null;\n-            }\n-            return new Cursor(array, index + 1);\n-        }\n-    }\n-\n-    private static Cursor.ref indexedElements(int[] array) {\n-        if (array.length == 0) {\n-            return null;\n-        }\n-        return new Cursor(array, 0);\n-    }\n-\n-    public int sum() {\n-        int sum = 0;\n-        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {\n-            Tuple tuple = cursor.current();\n-            sum += tuple.index + tuple.element;\n-        }\n-        return sum;\n-    }\n-\n-    public static void main(String [] args) {\n-        IntercastTest x = new IntercastTest();\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        IntercastTest.ref xbox = (IntercastTest.ref) x;\n-        if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        x = (IntercastTest) xbox;\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8217875 8221545\n- * @summary [lworld] Javac does not allow express casts between value types and their light weight box types\n- * @compile -XDenablePrimitiveClasses IntercastTest2.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses IntercastTest2\n- * @ignore\n- *\/\n-\n-public primitive class IntercastTest2 {\n-\n-    int ARRAY[] = { 10, 20, 30 };\n-\n-    static primitive class Tuple {\n-        private final int index;\n-        private final int element;\n-\n-        private Tuple(int index, int element) {\n-            this.index = index;\n-            this.element = element;\n-        }\n-    }\n-\n-    static primitive class Cursor {\n-        private final int[] array;\n-        private final int index;\n-\n-        private Cursor(int[] array, int index) {\n-            this.array = array;\n-            this.index = index;\n-        }\n-\n-        Tuple current() {\n-            return new Tuple(index, array[index]);\n-        }\n-\n-        Cursor.ref next() {\n-            if (index + 1 == array.length) {\n-                return null;\n-            }\n-            return new Cursor(array, index + 1);\n-        }\n-    }\n-\n-    private static Cursor.ref indexedElements(int[] array) {\n-        if (array.length == 0) {\n-            return null;\n-        }\n-        return new Cursor(array, 0);\n-    }\n-\n-    public int sum() {\n-        int sum = 0;\n-        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {\n-            Tuple tuple = cursor.current();\n-            sum += tuple.index + tuple.element;\n-        }\n-        return sum;\n-    }\n-\n-    public static void main(String [] args) {\n-        IntercastTest2 x = new IntercastTest2();\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        IntercastTest2.ref xbox = (IntercastTest2.ref) x;\n-        if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        x = (IntercastTest2) xbox;\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest2.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test value instatiation using new\/ctors.\n- * @compile -XDenablePrimitiveClasses LocalValueNew.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LocalValueNew\n- * @ignore\n- *\/\n-\n-\n-public class LocalValueNew {\n-    int xf = 1234;\n-    void foo() {\n-        int xl = 10; int yl = 20;\n-        final primitive class Y {\n-            final int x;\n-            final int p = 123456;\n-            Y() {\n-                this(123400);\n-            }\n-\n-            Y(int x) {\n-                this.x = x;\n-            }\n-            void goo() {\n-                if (xf + xl + yl + this.x + this.p != 223485)\n-                    throw new AssertionError(\"Broken\");\n-            }\n-        }\n-\n-        new Y(98765).goo();\n-    }\n-    public static void main(String[] args) {\n-        new LocalValueNew().foo();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LocalValueNew.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8217872\n- * @summary [lworld] Javac forbids look ups on the light weight box type of a value type\n- * @compile -XDenablePrimitiveClasses LookupOnLoxTest.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LookupOnLoxTest\n- * @ignore\n- *\/\n-\n-public primitive class LookupOnLoxTest {\n-\n-    int ARRAY[] = { 10, 20, 30 };\n-\n-    static primitive class Tuple {\n-        private final int index;\n-        private final int element;\n-\n-        private Tuple(int index, int element) {\n-            this.index = index;\n-            this.element = element;\n-        }\n-    }\n-\n-    static primitive class Cursor {\n-        private final int[] array;\n-        private final int index;\n-\n-        private Cursor(int[] array, int index) {\n-            this.array = array;\n-            this.index = index;\n-        }\n-\n-        Tuple current() {\n-            return new Tuple(index, array[index]);\n-        }\n-\n-        Cursor.ref next() {\n-            if (index + 1 == array.length) {\n-                return null;\n-            }\n-            return new Cursor(array, index + 1);\n-        }\n-    }\n-\n-    private static Cursor.ref indexedElements(int[] array) {\n-        if (array.length == 0) {\n-            return null;\n-        }\n-        return new Cursor(array, 0);\n-    }\n-\n-    public int sum() {\n-        int sum = 0;\n-        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {\n-            Tuple tuple = cursor.current();\n-            sum += tuple.index + tuple.element;\n-        }\n-        return sum;\n-    }\n-\n-    public static void main(String [] args) {\n-        LookupOnLoxTest x = new LookupOnLoxTest();\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        LookupOnLoxTest.ref xbox = x;\n-        if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8217872 8221545\n- * @summary [lworld] Javac forbids look ups on the light weight box type of a value type\n- * @compile -XDenablePrimitiveClasses LookupOnLoxTest2.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LookupOnLoxTest2\n- * @ignore\n- *\/\n-\n-public primitive class LookupOnLoxTest2 {\n-\n-    int ARRAY[] = { 10, 20, 30 };\n-\n-    static primitive class Tuple {\n-        private final int index;\n-        private final int element;\n-\n-        private Tuple(int index, int element) {\n-            this.index = index;\n-            this.element = element;\n-        }\n-    }\n-\n-    static primitive class Cursor {\n-        private final int[] array;\n-        private final int index;\n-\n-        private Cursor(int[] array, int index) {\n-            this.array = array;\n-            this.index = index;\n-        }\n-\n-        Tuple current() {\n-            return new Tuple(index, array[index]);\n-        }\n-\n-        Cursor.ref next() {\n-            if (index + 1 == array.length) {\n-                return null;\n-            }\n-            return new Cursor(array, index + 1);\n-        }\n-    }\n-\n-    private static Cursor.ref indexedElements(int[] array) {\n-        if (array.length == 0) {\n-            return null;\n-        }\n-        return new Cursor(array, 0);\n-    }\n-\n-    public int sum() {\n-        int sum = 0;\n-        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {\n-            Tuple tuple = cursor.current();\n-            sum += tuple.index + tuple.element;\n-        }\n-        return sum;\n-    }\n-\n-    public static void main(String [] args) {\n-        LookupOnLoxTest2 x = new LookupOnLoxTest2();\n-        if (x.sum() != 63 || x.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-        LookupOnLoxTest2.ref xbox = x;\n-        if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {\n-            throw new AssertionError(\"Broken\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest2.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244458 8244414\n- * @summary Check that javac does not crash while computing LUB involving values.\n- * @compile -XDenablePrimitiveClasses LubWithInlines.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LubWithInlines\n- * @ignore\n- *\/\n-\n-public class LubWithInlines {\n-    interface I {}\n-    static class Node implements I {\n-    }\n-    static I foo(Node e) {\n-        var ret = (e == null) ? new XNodeWrapper() : e;\n-        return ret;\n-    }\n-    static primitive class XNodeWrapper implements I {\n-        int i = 42;\n-    }\n-    public static void main(String [] args) {\n-        I i = foo(null);\n-        if (!i.toString().equals(\"LubWithInlines$XNodeWrapper@\" + Integer.toHexString(i.hashCode())))\n-            throw new AssertionError(\"Unexpected: \" + i);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LubWithInlines.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-primitive public final class MyValue {\n-  final int f = 0;\n-  static MyValue create() {\n-    return MyValue.default;\n-  }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/MyValue.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8237072\n- * @summary Test compiler on various constructs it had issues with.\n- * @compile -XDenablePrimitiveClasses NoCrashTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses NoCrashTest\n- * @ignore\n- *\/\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-\n-public class NoCrashTest {\n-\n-    interface I {}\n-    static class C implements I {}\n-    static primitive final class V implements I { int x = 0; }\n-\n-    static void triggerNPE(V.ref [] vra) {\n-        vra[0] = null;\n-    }\n-\n-    static String foo(V[] va) {\n-        return \"array of nonnull v's\";\n-    }\n-\n-    static String foo(Object [] oa) {\n-        return \"array of nullable o's\";\n-    }\n-\n-    static public void main(String[] args) {\n-        I arg = args.length == 0 ? new V() : new C();\n-        V [] xs = new V[0];\n-        Object [] os = new Object [0];\n-        Object [] o = args.length == 0 ? xs : os;\n-        Object o2 = (o == null) ? new V()  : new Object();\n-\n-        triggerNPE(new V.ref[1]); \/\/ NO NPE.\n-        try {\n-            triggerNPE(new V[1]);\n-            throw new RuntimeException(\"Should not get here!\");\n-        } catch (NullPointerException npe) {\n-            \/\/ all is well.\n-        }\n-\n-        V [] v = new V[0];\n-        if (!foo((V.ref []) v).equals(\"array of nullable o's\"))\n-            throw new AssertionError(\"Broken\");\n-\n-        ArrayList<V.ref> vList = new ArrayList<V.ref>(Arrays.asList(new V.ref[10]));\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoCrashTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,121 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8267542\n- * @summary Verify there are no unnecessary checkcasts generated while acessing an instance\n- *          field\/method through a reference projection.\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses NoUnnecessaryCast.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses NoUnnecessaryCast\n- * @ignore\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Instruction;\n-import com.sun.tools.classfile.Method;\n-import java.util.Arrays;\n-import java.util.stream.Collectors;\n-import java.util.stream.StreamSupport;\n-\n-public class NoUnnecessaryCast {\n-\n-    static primitive class Point {\n-        int x = 0, y = 0;\n-        void foo() {\n-            Point p0 = new Point();\n-            int x0 = p0.x;\n-            p0.foo();\n-            Point.ref p1 = null;\n-            int x1 = p1.x;\n-            p1.foo();\n-        }\n-    }\n-\n-    public static void main(String[] args)\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n-        new NoUnnecessaryCast()\n-                .checkClassFile(new File(System.getProperty(\"test.classes\", \".\"),\n-                    NoUnnecessaryCast.Point.class.getName() + \".class\"));\n-    }\n-\n-    void checkClassFile(File file)\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n-        ClassFile classFile = ClassFile.read(file);\n-        ConstantPool constantPool = classFile.constant_pool;\n-\n-        Method method = Arrays.stream(classFile.methods)\n-                              .filter(m -> getName(m, constantPool)\n-                                               .equals(\"foo\"))\n-                              .findAny()\n-                              .get();\n-        String expectedInstructions = \"\"\"\n-                                    invokestatic\n-                                    astore_1\n-                                    aload_1\n-                                    getfield\n-                                    istore_2\n-                                    aload_1\n-                                    invokevirtual\n-                                    aconst_null\n-                                    astore_3\n-                                    aload_3\n-                                    getfield\n-                                    istore\n-                                    aload_3\n-                                    invokevirtual\n-                                    return\n-                                      \"\"\";\n-        Code_attribute code = (Code_attribute) method.attributes\n-                .get(Attribute.Code);\n-        String actualInstructions = printCode(code);\n-        if (!expectedInstructions.equals(actualInstructions)) {\n-            throw new AssertionError(\"Unexpected instructions found:\\n\" +\n-                                     actualInstructions);\n-        }\n-    }\n-\n-    String printCode(Code_attribute code) {\n-        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n-                            .map(Instruction::getMnemonic)\n-                            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n-    }\n-\n-    String getName(Method m, ConstantPool constantPool) {\n-        try {\n-            return m.getName(constantPool);\n-        } catch (ConstantPoolException ex) {\n-            throw new IllegalStateException(ex);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoUnnecessaryCast.java","additions":0,"deletions":121,"binary":false,"changes":121,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8237072\n- * @summary Test overload resolution.\n- * @compile -XDenablePrimitiveClasses OverloadingPhaseTest2.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses OverloadingPhaseTest2\n- * @ignore\n- *\/\n-\n-public class OverloadingPhaseTest2 {\n-\n-    interface A {}\n-    interface B extends A {}\n-\n-    static primitive class X {\n-\n-        int x = 42;\n-\n-        static int m(X.ref xr, A a) {\n-            return 0;\n-        }\n-\n-        static int m(X.ref xr, B b) {\n-            return 1;\n-        }\n-    }\n-\n-    public static void main(String [] args) {\n-        B b = null;\n-        X x = new X();\n-        if (X.m(x, null) != 1)\n-            throw new AssertionError(\"Failed\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest2.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8210906 8215109\n- * @summary [lworld] default value creation should not impose raw types on users.\n- * @compile -XDenablePrimitiveClasses ParameterizedDefault.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ParameterizedDefault\n- * @ignore\n- *\/\n-\n-public primitive class ParameterizedDefault<E> {\n-    E value;\n-    ParameterizedDefault(E value) { this.value = value; }\n-    static String foo (Object p) {\n-        return (\"Object version\");\n-    }\n-    static String foo (String p) {\n-        return (\"String version\");\n-    }\n-    static String foo (java.util.Date p) {\n-        return (\"Date version\");\n-    }\n-    public static void main(String [] args) {\n-        var foo = ParameterizedDefault.default;\n-        var soo = ParameterizedDefault<String>.default;\n-        if (!foo(foo.value).equals(\"Object version\") ||\n-            !foo(soo.value).equals(\"String version\") ||\n-            !foo(ParameterizedDefault<java.util.Date>.default.value).equals(\"Date version\"))\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ParameterizedDefault.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test basic syntax of values\n- * @ignore\n- * @compile -XDenablePrimitiveClasses Point.java\n- *\/\n-\n-primitive class Point {\n-    static final Point.ref origin = makePoint(10, 20);\n-    static final Point.ref origin2 = makePoint(10, 20);\n-    int x;\n-    int y;\n-    public Point (int x, int y) {\n-        this.x = x;\n-        this.y = y;\n-    }\n-    static Point makePoint(int x, int y) {\n-        return new Point(x, y);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/Point.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8280942\n- * @summary Preload attribute should mention primitive classes when reference projection is used in descriptors\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses PreloadAttributeTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses PreloadAttributeTest\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class PreloadAttributeTest {\n-\n-    public primitive class P1 {}\n-    public primitive class P2 {}\n-    public primitive class P3 {}\n-    public primitive class P4 {}\n-    public primitive class P5 {}\n-    public primitive class P6 {}\n-    public primitive class P7 {}\n-    public primitive class P8 {}\n-\n-    \/\/ We expect NO Preload Entries for ANY of P1 .. P4\n-    P1 p1;\n-    P2 foo(P3 p3) {\n-        P4 p4;\n-        return new P2();\n-    }\n-\n-    \/\/ We expect Preload Entries for ALL of P5 .. P8\n-    P5.ref p5;\n-    P6.ref foo(P7.ref p7) {\n-        P8.ref p8;\n-        return null;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(PreloadAttributeTest.class.getResourceAsStream(\"PreloadAttributeTest.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads == null) {\n-            throw new AssertionError(\"Missing Preload attribute!\");\n-        }\n-        if (preloads.number_of_classes != 4) {\n-            throw new AssertionError(\"Incorrect number of Preload classes\");\n-        }\n-\n-        int mask = 0xF0;\n-        for (int i = 0; i < preloads.number_of_classes; i++) {\n-            CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(\n-                                  preloads.value_class_info_index[i]);\n-            switch (clsInfo.getName()) {\n-                case \"PreloadAttributeTest$P5\":\n-                    mask &= ~16; break;\n-                case \"PreloadAttributeTest$P6\":\n-                    mask &= ~32; break;\n-                case \"PreloadAttributeTest$P7\":\n-                    mask &= ~64; break;\n-                case \"PreloadAttributeTest$P8\" :\n-                    mask &= ~128; break;\n-                default:\n-                    throw new AssertionError(\"Unexpected Preload class entry: \" + clsInfo.getName());\n-            }\n-        }\n-        if (mask != 0) {\n-          throw new AssertionError(\"Some Preload class entries are missing!\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PreloadAttributeTest.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222722\n- * @summary  Javac fails to compile V?[].class (syntax dead)\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses ProjectedArrayDotClass.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ProjectedArrayDotClass\n- * @modules jdk.compiler\n- * @ignore\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ProjectedArrayDotClass {\n-\n-    static primitive class VT {\n-        int x = 42;\n-        public static void main(String[] args) {\n-            System.out.println(VT.ref[].class);\n-            System.out.println(VT[].class);\n-            System.out.println(ProjectedArrayDotClass.VT.ref[].class);\n-            System.out.println(ProjectedArrayDotClass.VT[].class);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ProjectedArrayDotClass().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ProjectedArrayDotClass$VT.class\").toString() };\n-        runCheck(params, new String [] {\n-        \"         3: ldc           #13                 \/\/ class \\\"[LProjectedArrayDotClass$VT;\\\"\",\n-        \"        11: ldc           #21                 \/\/ class \\\"[QProjectedArrayDotClass$VT;\\\"\",\n-        \"        19: ldc           #13                 \/\/ class \\\"[LProjectedArrayDotClass$VT;\\\"\",\n-        \"        27: ldc           #21                 \/\/ class \\\"[QProjectedArrayDotClass$VT;\\\"\",\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectedArrayDotClass.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,280 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8237072\n- * @summary Test various relationships between a value type and its reference projection.\n- * @library \/tools\/lib\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @ignore\n- *\/\n-\n-import java.io.StringWriter;\n-import javax.tools.JavaFileObject;\n-import javax.tools.ToolProvider;\n-import javax.lang.model.element.Element;\n-import com.sun.source.util.JavacTask;\n-import com.sun.tools.javac.api.JavacTool;\n-import com.sun.tools.javac.code.Type;\n-import com.sun.tools.javac.code.Types;\n-import com.sun.tools.javac.code.Symtab;\n-import com.sun.tools.javac.code.Symbol;\n-import com.sun.tools.javac.code.Symbol.ClassSymbol;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.javac.util.List;\n-import com.sun.tools.javac.util.Names;\n-\n-import toolbox.ToolBox;\n-\n-public class ProjectionRelationsTest {\n-\n-    private static final ToolBox tb = new ToolBox();\n-\n-    enum Relation {\n-        SUBTYPING,\n-        CASTING,\n-        ASSIGNING,\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        String code = \"primitive class C {\\n\" +\n-                \"         C.ref cref     = new C();\\n\" +\n-                \"         C []  ca       = null;\\n\" +\n-                \"         C.ref [] cra   = null;\\n\" +\n-                \"         Object[]  oa   = null;\\n\" +\n-                      \"}\\n\";\n-        List<JavaFileObject> files = List.of(new ToolBox.JavaSource(code));\n-\n-        JavacTool compiler = (JavacTool) ToolProvider.getSystemJavaCompiler();\n-        StringWriter out = new StringWriter();\n-\n-        Context context = new Context();\n-\n-        JavacTask task = (JavacTask) compiler.getTask(out, null, null, List.of(\"-XDinlinesAreIslands\", \"-XDenablePrimitiveClasses\"), null, files, context);\n-        Iterable<? extends Element> elements = task.analyze();\n-        if (elements == null || !elements.iterator().hasNext()) {\n-            throw new RuntimeException(\"Didn't compile alright!\");\n-        }\n-\n-        Names names =  Names.instance(context);\n-\n-        ClassSymbol valueCls = (ClassSymbol) elements.iterator().next();\n-        Type vType = valueCls.type;\n-        Type vDotRefType = valueCls.members().findFirst(names.fromString(\"cref\")).type;\n-        Type vArrayType = valueCls.members().findFirst(names.fromString(\"ca\")).type;\n-        Type vRefArrayType = valueCls.members().findFirst(names.fromString(\"cra\")).type;\n-        Type jlOArrayType = valueCls.members().findFirst(names.fromString(\"oa\")).type;\n-\n-        for (Relation relation : Relation.values()) {\n-            testRelation(context, relation, vType, vDotRefType);\n-            testRelation(context, relation, vArrayType, vRefArrayType, jlOArrayType);\n-        }\n-    }\n-\n-    static void testRelation(Context context, Relation relation, Type vType, Type vDotRefType) {\n-        Types types =  Types.instance(context);\n-        Symtab syms =  Symtab.instance(context);\n-        Type intType = syms.intType;\n-        Type objectType = syms.objectType;\n-        Type integerType = types.boxedTypeOrType(syms.intType);\n-        Type stringType = syms.stringType;\n-\n-        System.out.println(\"Testing relation \" + relation + \" between \" +\n-                                       vType.tsym.name + \" and \" + vDotRefType.tsym.name);\n-            switch (relation) {\n-                case SUBTYPING:\n-\n-                    \/\/ self check\n-                    Assert.check(types.isSubtype(vType, vType));\n-                    Assert.check(types.isSubtype(vDotRefType, vDotRefType));\n-\n-                    Assert.check(types.isSubtype(vType, vDotRefType) ==\n-                                 types.isSubtype(intType, integerType));\n-                    Assert.check(types.isSubtype(vDotRefType, vType) ==\n-                                 types.isSubtype(integerType, intType));\n-\n-                    Assert.check(types.isSubtype(vType, objectType) ==\n-                                 types.isSubtype(intType, objectType));\n-                    Assert.check(types.isSubtype(objectType, vType) ==\n-                                 types.isSubtype(objectType, intType));\n-\n-                    Assert.check(types.isSubtype(vDotRefType, objectType) ==\n-                                 types.isSubtype(integerType, objectType));\n-                    Assert.check(types.isSubtype(objectType, vDotRefType) ==\n-                                 types.isSubtype(objectType, integerType));\n-\n-                    \/\/ check against a totally unrelated class.\n-                    Assert.check(types.isSubtype(vType, stringType) ==\n-                                 types.isSubtype(intType, stringType));\n-                    Assert.check(types.isSubtype(stringType, vType) ==\n-                                 types.isSubtype(stringType, intType));\n-\n-                    Assert.check(types.isSubtype(vDotRefType, stringType) ==\n-                                 types.isSubtype(integerType, stringType));\n-                    Assert.check(types.isSubtype(stringType, vDotRefType) ==\n-                                 types.isSubtype(stringType, integerType));\n-                    break;\n-\n-                case CASTING:\n-\n-                    \/\/ self check\n-                    Assert.check(types.isCastable(vType, vType));\n-                    Assert.check(types.isCastable(vDotRefType, vDotRefType));\n-\n-                    Assert.check(types.isCastable(vType, vDotRefType) ==\n-                                 types.isCastable(intType, integerType));\n-                    Assert.check(types.isCastable(vDotRefType, vType) ==\n-                                 types.isCastable(integerType, intType));\n-                    Assert.check(types.isCastable(vType, objectType) ==\n-                                 types.isCastable(intType, objectType));\n-                    Assert.check(types.isCastable(objectType, vType) ==\n-                                 types.isCastable(objectType, intType));\n-                    Assert.check(types.isCastable(vDotRefType, objectType) ==\n-                                 types.isCastable(integerType, objectType));\n-                    Assert.check(types.isCastable(objectType, vDotRefType) ==\n-                                 types.isCastable(objectType, integerType));\n-                    \/\/ check against a totally unrelated class.\n-                    Assert.check(types.isCastable(vType, stringType) ==\n-                                 types.isCastable(intType, stringType));\n-                    Assert.check(types.isCastable(stringType, vType) ==\n-                                 types.isCastable(stringType, intType));\n-\n-                    Assert.check(types.isCastable(vDotRefType, stringType) ==\n-                                 types.isCastable(integerType, stringType));\n-                    Assert.check(types.isCastable(stringType, vDotRefType) ==\n-                                 types.isCastable(stringType, integerType));\n-                    break;\n-\n-                case ASSIGNING:\n-\n-                    \/\/ self check\n-                    Assert.check(types.isAssignable(vType, vType));\n-                    Assert.check(types.isAssignable(vDotRefType, vDotRefType));\n-\n-                    Assert.check(types.isAssignable(vType, vDotRefType) ==\n-                                 types.isAssignable(intType, integerType));\n-                    Assert.check(types.isAssignable(vDotRefType, vType) ==\n-                                 types.isAssignable(integerType, intType));\n-                    Assert.check(types.isAssignable(vType, objectType) ==\n-                                 types.isAssignable(intType, objectType));\n-                    Assert.check(types.isAssignable(objectType, vType) ==\n-                                 types.isAssignable(objectType, intType));\n-                    Assert.check(types.isAssignable(vDotRefType, objectType) ==\n-                                 types.isAssignable(integerType, objectType));\n-                    Assert.check(types.isAssignable(objectType, vDotRefType) ==\n-                                 types.isAssignable(objectType, integerType));\n-                    \/\/ check against a totally unrelated class.\n-                    Assert.check(types.isAssignable(vType, stringType) ==\n-                                 types.isAssignable(intType, stringType));\n-                    Assert.check(types.isAssignable(stringType, vType) ==\n-                                 types.isAssignable(stringType, intType));\n-\n-                    Assert.check(types.isAssignable(vDotRefType, stringType) ==\n-                                 types.isAssignable(integerType, stringType));\n-                    Assert.check(types.isAssignable(stringType, vDotRefType) ==\n-                                 types.isAssignable(stringType, integerType));\n-                    break;\n-            }\n-    }\n-\n-    static void testRelation(Context context, Relation relation, Type vArrayType, Type vDotRefArrayType, Type objectArrayType) {\n-        Types types =  Types.instance(context);\n-        Symtab syms =  Symtab.instance(context);\n-\n-        System.out.println(\"Testing relation \" + relation + \" between \" +\n-                                       vArrayType.tsym.name + \" and \" + vDotRefArrayType.tsym.name);\n-            switch (relation) {\n-                case SUBTYPING:\n-\n-                    \/* check against self *\/\n-                    Assert.check(types.isSubtype(vArrayType, vArrayType));\n-                    Assert.check(types.isSubtype(vDotRefArrayType, vDotRefArrayType));\n-\n-                    \/* check against valid supers *\/\n-                    Assert.check(types.isSubtype(vArrayType, vDotRefArrayType));\n-                    Assert.check(types.isSubtype(vArrayType, objectArrayType));\n-                    Assert.check(types.isSubtype(vArrayType, syms.objectType));\n-                    Assert.check(types.isSubtype(vDotRefArrayType, objectArrayType));\n-                    Assert.check(types.isSubtype(vDotRefArrayType, syms.objectType));\n-\n-                    \/* check negative cases *\/\n-                    Assert.check(!types.isSubtype(vDotRefArrayType, vArrayType));\n-                    Assert.check(!types.isSubtype(objectArrayType, vArrayType));\n-                    Assert.check(!types.isSubtype(objectArrayType, vDotRefArrayType));\n-\n-                    break;\n-\n-                case CASTING:\n-\n-                    \/* check self cast *\/\n-                    Assert.check(types.isCastable(vArrayType, vArrayType));\n-                    Assert.check(types.isCastable(vDotRefArrayType, vDotRefArrayType));\n-\n-                    \/* check widening cast of V *\/\n-                    Assert.check(types.isCastable(vArrayType, vDotRefArrayType));\n-                    Assert.check(types.isCastable(vArrayType, objectArrayType));\n-                    Assert.check(types.isCastable(vArrayType, syms.objectType));\n-\n-                    \/* check cast of V.ref to supers *\/\n-                    Assert.check(types.isCastable(vDotRefArrayType, objectArrayType));\n-                    Assert.check(types.isCastable(vDotRefArrayType, syms.objectType));\n-\n-                    \/* check downcasts *\/\n-                    Assert.check(types.isCastable(vDotRefArrayType, vArrayType));\n-                    Assert.check(types.isCastable(objectArrayType, vArrayType));\n-                    Assert.check(types.isCastable(objectArrayType, vDotRefArrayType));\n-                    Assert.check(types.isCastable(syms.objectType, vArrayType));\n-                    Assert.check(types.isCastable(syms.objectType, vDotRefArrayType));\n-\n-                    break;\n-\n-                case ASSIGNING:\n-\n-                    \/* check self  *\/\n-                    Assert.check(types.isAssignable(vArrayType, vArrayType));\n-                    Assert.check(types.isAssignable(vDotRefArrayType, vDotRefArrayType));\n-\n-                    \/* check widening *\/\n-                    Assert.check(types.isAssignable(vArrayType, vDotRefArrayType));\n-                    Assert.check(types.isAssignable(vArrayType, objectArrayType));\n-                    Assert.check(types.isAssignable(vArrayType, syms.objectType));\n-\n-                    \/* check more widening *\/\n-                    Assert.check(types.isAssignable(vDotRefArrayType, objectArrayType));\n-                    Assert.check(types.isAssignable(vDotRefArrayType, syms.objectType));\n-\n-                    \/* misc *\/\n-                    Assert.check(!types.isAssignable(vDotRefArrayType, vArrayType));\n-                    Assert.check(!types.isAssignable(objectArrayType, vArrayType));\n-                    Assert.check(!types.isAssignable(objectArrayType, vDotRefArrayType));\n-                    Assert.check(!types.isAssignable(syms.objectType, vArrayType));\n-                    Assert.check(!types.isAssignable(syms.objectType, vDotRefArrayType));\n-\n-                    break;\n-            }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectionRelationsTest.java","additions":0,"deletions":280,"binary":false,"changes":280,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244559\n- * @summary Check that javac transforms Types to AST nodes properly.\n- * @compile -XDenablePrimitiveClasses ProperTypeApplySelectTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ProperTypeApplySelectTest\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-\n-public class ProperTypeApplySelectTest {\n-\n-  static String out = \"\";\n-\n-  primitive static class Foo<V> {\n-    int x;\n-    Foo(int x) { this.x = x; }\n-  }\n-\n-  static void m(Foo foo) {\n-    out += \"inline\";\n-  }\n-  static void m(Foo.ref foo) {\n-    out += \"ref\";\n-  }\n-\n-  public static void main(String[] args) {\n-    List<Foo.ref<Integer>> list = List.of(new Foo<Integer>(3));\n-    list.stream().forEach(e -> m(e));\n-    if (!out.equals(\"ref\"))\n-        throw new AssertionError(\"Unexpected: \" + out);\n-  }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProperTypeApplySelectTest.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-primitive class QPoint {\n-    int x = 0;\n-    int y = 0;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QPoint.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8212615\n- * @summary ClassReader has trouble coping with 'Q' types.\n- * @compile -XDenablePrimitiveClasses QPointConsumer.java\n- * @compile -XDenablePrimitiveClasses QPointConsumer.java\n- * @ignore\n- *\/\n-\n-class QPointConsumer {\n-    QPoint q;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QPointConsumer.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,180 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * bug 8212563\n- * @summary Check that javac emits Q types for values as needed\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses QTypedValue.java\n- * @run main\/othervm -Xverify:none QTypeTest\n- * @modules jdk.compiler\n- * @ignore\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class QTypeTest {\n-\n-    public static void main(String[] args) {\n-        new QTypeTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"QTypedValue.class\").toString() };\n-        runCheck(params, new String [] {\n-              \"final primitive value class QTypedValue\",\n-              \"  flags: (0x0850) ACC_FINAL, ACC_PRIMITIVE, ACC_VALUE\",\n-              \"  this_class: #1                          \/\/ QTypedValue\",\n-              \"   #1 = Class              #2             \/\/ QTypedValue\",\n-              \"   #2 = Utf8               QTypedValue\",\n-              \"   #3 = Class              #4             \/\/ \\\"QQTypedValue;\\\"\",\n-              \"   #4 = Utf8               QQTypedValue;\",\n-              \"   #5 = Fieldref           #1.#6          \/\/ QTypedValue.f1:[QQTypedValue;\",\n-              \"   #8 = Utf8               [QQTypedValue;\",\n-              \"   #9 = Fieldref           #1.#10         \/\/ QTypedValue.f2:[QQTypedValue;\",\n-              \"  #12 = Class              #13            \/\/ \\\"[[[QQTypedValue;\\\"\",\n-              \"  #13 = Utf8               [[[QQTypedValue;\",\n-              \"  #14 = Fieldref           #1.#15         \/\/ QTypedValue.f3:[[[QQTypedValue;\",\n-              \"  #17 = Fieldref           #1.#18         \/\/ QTypedValue.f4:[[[QQTypedValue;\",\n-              \"  #27 = Utf8               (QQTypedValue;I)V\",\n-              \"  #21 = NameAndType        #22:#23        \/\/ \\\"<vnew>\\\":()QQTypedValue;\",\n-              \"  #25 = NameAndType        #26:#27        \/\/ foo:(QQTypedValue;I)V\",\n-              \"   #6 = NameAndType        #7:#8          \/\/ f1:[QQTypedValue;\",\n-              \"  #10 = NameAndType        #11:#8         \/\/ f2:[QQTypedValue;\",\n-              \"  #15 = NameAndType        #16:#13        \/\/ f3:[[[QQTypedValue;\",\n-              \"  #18 = NameAndType        #19:#13        \/\/ f4:[[[QQTypedValue;\",\n-              \" final QTypedValue[] f1;\",\n-              \"    descriptor: [QQTypedValue;\",\n-              \"    flags: (0x0010) ACC_FINAL\",\n-              \"  final QTypedValue[] f2;\",\n-              \"    descriptor: [QQTypedValue;\",\n-              \"    flags: (0x0010) ACC_FINAL\",\n-              \"  final QTypedValue[][][] f3;\",\n-              \"    descriptor: [[[QQTypedValue;\",\n-              \"    flags: (0x0010) ACC_FINAL\",\n-              \"  final QTypedValue[][][] f4;\",\n-              \"    descriptor: [[[QQTypedValue;\",\n-              \"    flags: (0x0010) ACC_FINAL\",\n-              \"  void foo(QTypedValue, int);\",\n-              \"    descriptor: (QQTypedValue;I)V\",\n-              \"    flags: (0x0000)\",\n-              \"    Code:\",\n-              \"      stack=3, locals=12, args_size=3\",\n-              \"         0: aload_0\",\n-              \"         1: invokestatic  #20                 \/\/ Method \\\"<vnew>\\\":()QQTypedValue;\",\n-              \"         4: bipush        10\",\n-              \"         6: invokevirtual #24                 \/\/ Method foo:(QQTypedValue;I)V\",\n-              \"         9: iload_2\",\n-              \"        10: ifne          34\",\n-              \"        13: iconst_0\",\n-              \"        14: istore        8\",\n-              \"        16: dconst_0\",\n-              \"        17: dstore        9\",\n-              \"        19: invokestatic  #20                 \/\/ Method \\\"<vnew>\\\":()QQTypedValue;\",\n-              \"        22: astore_3\",\n-              \"        23: iload         8\",\n-              \"        25: ifne          29\",\n-              \"        28: return\",\n-              \"        29: invokestatic  #20                 \/\/ Method \\\"<vnew>\\\":()QQTypedValue;\",\n-              \"        32: astore        11\",\n-              \"        34: return\",\n-              \"      StackMapTable: number_of_entries = 2\",\n-              \"        frame_type = 255 \/* full_frame *\/\",\n-              \"          offset_delta = 29\",\n-              \"          locals = [ class \\\"QQTypedValue;\\\", class \\\"QQTypedValue;\\\", int, class \\\"QQTypedValue;\\\", top, top, top, top, int, double ]\",\n-              \"          stack = []\",\n-              \"        frame_type = 255 \/* full_frame *\/\",\n-              \"          offset_delta = 4\",\n-              \"          locals = [ class \\\"QQTypedValue;\\\", class \\\"QQTypedValue;\\\", int ]\",\n-              \"          stack = []\",\n-              \"static QTypedValue QTypedValue();\",\n-              \"    descriptor: ()QQTypedValue;\",\n-              \"    flags: (0x0008) ACC_STATIC\",\n-              \"    Code:\",\n-              \"      stack=2, locals=1, args_size=0\",\n-              \"         0: aconst_init   #1                  \/\/ class QTypedValue\",\n-              \"         3: astore_0\",\n-              \"         4: bipush        10\",\n-              \"         6: anewarray     #3                  \/\/ class \\\"QQTypedValue;\\\"\",\n-              \"         9: aload_0\",\n-              \"        10: swap\",\n-              \"        11: withfield     #5                  \/\/ Field f1:[QQTypedValue;\",\n-              \"        14: astore_0\",\n-              \"        15: bipush        10\",\n-              \"        17: anewarray     #3                  \/\/ class \\\"QQTypedValue;\\\"\",\n-              \"        20: aload_0\",\n-              \"        21: swap\",\n-              \"        22: withfield     #9                  \/\/ Field f2:[QQTypedValue;\",\n-              \"        25: astore_0\",\n-              \"        26: bipush        10\",\n-              \"        28: bipush        10\",\n-              \"        30: multianewarray #12,  2            \/\/ class \\\"[[[QQTypedValue;\\\"\",\n-              \"        34: aload_0\",\n-              \"        35: swap\",\n-              \"        36: withfield     #14                 \/\/ Field f3:[[[QQTypedValue;\",\n-              \"        39: astore_0\",\n-              \"        40: bipush        10\",\n-              \"        42: bipush        10\",\n-              \"        44: multianewarray #12,  2            \/\/ class \\\"[[[QQTypedValue;\\\"\",\n-              \"        48: aload_0\",\n-              \"        49: swap\",\n-              \"        50: withfield     #17                 \/\/ Field f4:[[[QQTypedValue;\",\n-              \"        53: astore_0\",\n-              \"        54: aload_0\",\n-              \"        55: areturn\",\n-                         }, new String [] {\n-                            });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut, String [] unexpectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        for (String eo: unexpectedOut) {\n-            if (out.contains(eo)) {\n-                System.err.println(\"Unexpected output found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QTypeTest.java","additions":0,"deletions":180,"binary":false,"changes":180,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-primitive class QTypedValue {\n-\n-    QTypedValue [] f1 = new QTypedValue[10];\n-    QTypedValue [] f2 = new QTypedValue[10];\n-\n-    QTypedValue [][][] f3 = new QTypedValue[10][10][];\n-    QTypedValue [][][] f4 = new QTypedValue[10][10][];\n-\n-    void foo(QTypedValue x, int i) {\n-        foo(new QTypedValue(), 10);\n-        QTypedValue x1, x2, x4, x5, x6;\n-        if (i == 0) {\n-            int j = 0; double d = 0.0;\n-            x1 = new QTypedValue();\n-            if (j == 0)\n-                return;\n-            QTypedValue x9 = new QTypedValue();\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QTypedValue.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test value instatiation using new\/ctors.\n- * @compile -XDenablePrimitiveClasses QualifiedSuperCtor.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses QualifiedSuperCtor\n- * @ignore\n- *\/\n-\n-primitive class A {\n-    int x = 1000000;\n-    class Inner {\n-        A aDotThis;\n-        Inner() {\n-            aDotThis = A.this;\n-        }\n-\n-        A getADotThis() {\n-            return aDotThis;\n-        }\n-    }\n-}\n-\n-public class QualifiedSuperCtor extends A.Inner {\n-    QualifiedSuperCtor(A encl) {\n-        encl.super();\n-    }\n-\n-    public static void main(String [] args) {\n-        if (new QualifiedSuperCtor(new A()).getADotThis().x !=1000000)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedSuperCtor.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test that qualified this based access to instance fields works ok.\n- * @compile -XDenablePrimitiveClasses QualifiedThisTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses QualifiedThisTest\n- * @ignore\n- *\/\n-\n-public primitive class QualifiedThisTest {\n-\n-    final int x;\n-    final int y;\n-\n-    final int thrice_x_plus_thrice_y;\n-\n-    QualifiedThisTest(int xp, int yp) {\n-        this.y = yp;\n-        this.x = xp;\n-        thrice_x_plus_thrice_y = x + this.x + QualifiedThisTest.this.x + y + this.y + QualifiedThisTest.this.y;\n-    }\n-\n-    public static void main(String [] args) {\n-        int v;\n-        if ((v = new QualifiedThisTest(1234, 10).thrice_x_plus_thrice_y) != 3732)\n-            throw new AssertionError(\"Broken\" + v);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedThisTest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public primitive class Range<T> {\n-    private final T lower;\n-    private final T upper;\n-\n-    private Range(T lower, T upper) {\n-        this.lower = lower;\n-        this.upper = upper;\n-    }\n-\n-    public static <T> Range<T> of(T lower, T upper) {\n-        return new Range<>(lower, upper);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/Range.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public primitive class Rectangle {\n-\n-    Point topLeft, bottomRight;\n-\n-    static Point origin;\n-\n-    static Rectangle from (Point.ref topLeft, Point.ref bottomRight) {\n-        return new Rectangle(topLeft, bottomRight);\n-    }\n-\n-    Rectangle (Point topLeft, Point bottomRight) {\n-        this.topLeft = topLeft;\n-        this.bottomRight = bottomRight;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/Rectangle.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222784\n- * @summary Check that we are able to get a class literal for a reference projection type\n- * @compile -XDenablePrimitiveClasses RefDotClass.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses RefDotClass\n- * @ignore\n- *\/\n-\n-public primitive class RefDotClass {\n-    final int value;\n-\n-    public RefDotClass(int value) {\n-        this.value = value;\n-    }\n-\n-    private static <T> T foo(Class<T> type) {\n-        return null;\n-    }\n-\n-    public static void main(String[] args) {\n-        foo(RefDotClass.ref.class);\n-        String tName = RefDotClass.ref.class.getTypeName();\n-        if (!tName.equals(\"RefDotClass.ref\"))\n-            throw new AssertionError(\"Unexpected type name \" + tName);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/RefDotClass.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8257846\n- * @summary Separate compilation failure of generic inline class\n- * @compile -XDenablePrimitiveClasses Range.java\n- * @compile -XDenablePrimitiveClasses SeparateCompileGenerics.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SeparateCompileGenerics\n- * @ignore\n- *\/\n-\n-public class SeparateCompileGenerics {\n-    public static void main(String[] args) {\n-        Range<Integer> r = Range.of(1, 2);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileGenerics.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8247664\n- * @summary Bogus error message: incompatible types while using separate compilation.\n- * @compile -XDenablePrimitiveClasses SeparateCompileTest01.java\n- * @compile -XDenablePrimitiveClasses SeparateCompileTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SeparateCompileTest\n- * @ignore\n- *\/\n-\n-public class SeparateCompileTest {\n-    public static void main(String[] args) {\n-        Pointer<Point.ref> p_ref = Point.TYPE.allocate();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileTest.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @bug 8247664\n- * @summary Bogus error message: incompatible types while using separate compilation.\n- * @ignore\n- *\/\n-\n-class Pointer<X> {\n-    final long addr;\n-\n-    public Pointer(long addr) {\n-        this.addr = addr;\n-    }\n-}\n-\n-class ForeignType<X> {\n-    public Pointer<X> allocate() { return null; }\n-}\n-\n-primitive class Point {\n-    final int x;\n-    final int y;\n-\n-    public Point(int x, int y) {\n-        this.x = x;\n-        this.y = y;\n-    }\n-\n-    public static ForeignType<Point.ref> TYPE = new ForeignType<>() { };\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileTest01.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8251940\n- * @summary Incorrect Signature attribute in class file\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses SignatureTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SignatureTest\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-\n-public primitive class SignatureTest<T> implements java.io.Serializable {\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(SignatureTest.class.getResourceAsStream(\"SignatureTest.class\"));\n-        Signature_attribute signature = (Signature_attribute) cls.attributes.get(Attribute.Signature);\n-        String s = signature.getSignature(cls.constant_pool);\n-        if (!s.equals(\"<T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\"))\n-            throw new AssertionError(\"Unexpected signature: \" + s);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SignatureTest.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public primitive class SmallSet {\n-\n-  final int value;\n-\n-  public SmallSet(int value) {\n-    this.value = value;\n-  }\n-\n-  private static int checkRange(final int i) {\n-    if (i > 31)\n-      throw new IllegalArgumentException(\"out of range: i>31\");\n-    if (i < 0)\n-      throw new IllegalArgumentException(\"out of range: i<0\");\n-    return i;\n-  }\n-\n-  public static SmallSet of(final int... i) {\n-    int set = 0;\n-    for (final int integer : i)\n-      set |= (1 << checkRange(integer));\n-    return new SmallSet(set);\n-  }\n-\n-  public boolean contains(final int element) {\n-    return (this.value & (1 << checkRange(element))) != 0;\n-  }\n-\n-  public SmallSet add(final int element) {\n-    return new SmallSet(this.value  | (1 << checkRange(element)));\n-  }\n-\n-  static final class MutableInt {\n-    int value = 0;\n-  }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SmallSet.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8253181\n- * @summary Javac fails to properly handle inline class files with inner classes\n- * @compile -XDenablePrimitiveClasses SmallSetTest.java\n- * @compile -XDenablePrimitiveClasses SmallSetTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SmallSetTest\n- * @ignore\n- *\/\n-\n-public class SmallSetTest {\n-    public static void main(String [] args) {\n-        SmallSet s = SmallSet.of(10, 20);\n-        if (!s.contains(10) || !s.contains(20) || s.contains(30))\n-            throw new AssertionError(\"Set is malfunctioning\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SmallSetTest.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8247567\n- * @summary Javac chokes on static member selection via the reference projection.\n- * @compile -XDenablePrimitiveClasses StaticSelectedThroughProjection.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StaticSelectedThroughProjection\n- * @ignore\n- *\/\n-\n-public class StaticSelectedThroughProjection {\n-    static primitive class MyValue {\n-        int x = 42;\n-        static String test() {\n-            return \"OK\";\n-        };\n-    }\n-    public static void main(String[] args) {\n-        if (!MyValue.ref.test().equals(\"OK\"))\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StaticSelectedThroughProjection.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8244982\n- * @summary Javac has trouble compiling method references\n- * @compile -XDenablePrimitiveClasses StreamsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StreamsTest\n- * @ignore\n- *\/\n-\n-import java.util.Arrays;\n-\n-public class StreamsTest {\n-\n-    public static primitive class X {\n-\n-        String data;\n-\n-        X(String data) {\n-            this.data = data;\n-        }\n-\n-        String data() { return data; }\n-\n-        static String accumulate = \"\";\n-\n-        static void accumulate(String s) {\n-            accumulate += s;\n-        }\n-\n-        static String streamedData() {\n-\n-            X [] xs = new X[] {\n-                                 new X(\"Streams \"),\n-                                 new X(\"test \"),\n-                                 new X(\"passed OK!\")\n-                      };\n-\n-            Arrays.stream(xs)\n-                        .map(X.ref::data)\n-                        .filter(p -> p != null)\n-                        .forEach(X::accumulate);\n-\n-            return accumulate;\n-        }\n-    }\n-\n-    public static void main(String [] args) {\n-        if (!X.streamedData().equals(\"Streams test passed OK!\"))\n-            throw new AssertionError(\"Unexpected data in stream\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StreamsTest.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8267965\n- * @summary Javac disallows calls to super.{hashCode(), equals(), toString()} on a primitive instance receiver\n- * @compile -XDenablePrimitiveClasses SuperHashCodeEqualsToStringTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SuperHashCodeEqualsToStringTest\n- * @ignore\n- *\/\n-\n-public class SuperHashCodeEqualsToStringTest {\n-\n-    static primitive class Prime {\n-\n-        @Override\n-        public int hashCode() {\n-            return super.hashCode();\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj) {\n-            return super.equals(obj);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return super.toString();\n-        }\n-    }\n-\n-    public static void main(String [] args) {\n-\n-        if (new Prime().hashCode() != new Prime().hashCode())\n-            throw new AssertionError(\"Broken\");\n-\n-        if (!new Prime().equals(new Prime()))\n-            throw new AssertionError(\"Broken\");\n-\n-        if (!new Prime().toString().equals(new Prime().toString()))\n-            throw new AssertionError(\"Broken\" + new Prime().toString());\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperHashCodeEqualsToStringTest.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8279655\n- * @summary Bogus error: incompatible types: Object cannot be converted to Foo\n- * @compile -XDenablePrimitiveClasses T8279655.java\n- * @ignore\n- *\/\n-\n-public class T8279655 {\n-\n-    sealed interface Foo permits Bar { }\n-    primitive class Bar implements Foo { }\n-\n-    class Test {\n-        void test(Object o) {\n-            Foo foo = (Foo)o;\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/T8279655.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222711\n- * @summary Ensure that static factory methods are generated with the right qualifier.\n- * @compile -XDenablePrimitiveClasses TestQualifierOnInit.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestQualifierOnInit\n- * @ignore\n- *\/\n-\n-\n-primitive final class TestValue1 {\n-    final int x;\n-    public TestValue1(int x) {\n-        this.x = x;\n-    }\n-}\n-\n-public class TestQualifierOnInit {\n-    static public void main(String[] args) {\n-        TestValue1 testValue1 = new TestValue1(42);\n-        if (testValue1.x != 42)\n-            throw new AssertionError(\"unexpected \" + testValue1);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestQualifierOnInit.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8269956\n- * @summary  javac should generate `ldc LPoint;` for class literal Point.class\n- * @modules java.base\/jdk.internal.value\n- * @compile -XDenablePrimitiveClasses TestReflectiveMirrors.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestReflectiveMirrors\n- * @ignore\n- *\/\n-\n-import jdk.internal.value.PrimitiveClass;\n-\n-public class TestReflectiveMirrors {\n-\n-    static primitive class ValDefault {}\n-\n-    public static void main(String [] args) {\n-\n-        if (ValDefault.class != new ValDefault().getClass()) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-\n-        if (ValDefault.ref.class != new ValDefault().getClass()) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-\n-        if (ValDefault.val.class != PrimitiveClass.asValueType(new ValDefault().getClass())) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-\n-        if (TestReflectiveMirrors.ValDefault.class != new ValDefault().getClass()) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-\n-        if (TestReflectiveMirrors.ValDefault.ref.class != new ValDefault().getClass()) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-\n-        if (TestReflectiveMirrors.ValDefault.val.class != PrimitiveClass.asValueType(new ValDefault().getClass())) {\n-            throw new AssertionError(\"Wrong mirror\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestReflectiveMirrors.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244235\n- * @summary Javac mistakenly treats references to _this_ as a reference to an instance field\n- * @compile -XDenablePrimitiveClasses ThisIsNotAnInstanceField.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ThisIsNotAnInstanceField\n- * @ignore\n- *\/\n-\n-public primitive class ThisIsNotAnInstanceField {\n-\n-    int i = 513;\n-\n-    Inner.ref i2 = new Inner();\n-\n-    primitive class Inner {\n-        int c = 511;\n-    }\n-\n-    static public void main(String[] args) {\n-        ThisIsNotAnInstanceField t1 = new ThisIsNotAnInstanceField();\n-        if (t1.i + t1.i2.c != 1024)\n-            throw new AssertionError(\"Unexpected: \" + Integer.valueOf(t1.i + t1.i2.c));\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ThisIsNotAnInstanceField.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222792\n- * @summary Javac should enforce the latest relationship rules between an inline type and its nullable projection\n- * @compile -XDenablePrimitiveClasses TypeRelationsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TypeRelationsTest\n- * @ignore\n- *\/\n-\n-public primitive class TypeRelationsTest {\n-\n-    int x = 42;\n-\n-    static boolean foo(TypeRelationsTest x, TypeRelationsTest.ref xq, boolean nullPassed) {\n-        TypeRelationsTest xl;\n-        TypeRelationsTest.ref xql;\n-        boolean npe = false;\n-\n-        xl = x;\n-        xl = (TypeRelationsTest) x;\n-        try {\n-            xl = (TypeRelationsTest) xq;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-\n-        xql = x;\n-        xql = (TypeRelationsTest.ref ) x;\n-        xql = xq;\n-        xql = (TypeRelationsTest.ref) xq;\n-        return npe;\n-    }\n-\n-    static String foo(Object o) {\n-        return \"Object\";\n-    }\n-\n-    static String foo(TypeRelationsTest x) {\n-        return \"TypeRelationsTest\";\n-    }\n-\n-    static String foo(TypeRelationsTest.ref xq) {\n-        return \"TypeRelationsTest.ref\";\n-    }\n-\n-    public static void main(String [] args) {\n-       if (foo(new TypeRelationsTest(), new TypeRelationsTest(), false))\n-            throw new AssertionError(\"Unexpected NPE\");\n-       if (!foo(new TypeRelationsTest(), null, true))\n-            throw new AssertionError(\"Missing NPE\");\n-\n-       TypeRelationsTest x = new TypeRelationsTest();\n-       TypeRelationsTest.ref xq = null;\n-       if (!foo(x).equals(\"TypeRelationsTest\"))\n-            throw new AssertionError(\"Wrong overload\");\n-       if (!foo(xq).equals(\"TypeRelationsTest.ref\"))\n-            throw new AssertionError(\"Wrong overload\");\n-       if (!foo((TypeRelationsTest.ref) x).equals(\"TypeRelationsTest.ref\"))\n-            throw new AssertionError(\"Wrong overload\");\n-\n-       boolean npe = false;\n-       try  {\n-           foo((TypeRelationsTest) xq);\n-       } catch (NullPointerException e) {\n-            npe = true;\n-       }\n-       if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-       }\n-       xq = x;\n-       if (!foo((TypeRelationsTest.ref) xq).equals(\"TypeRelationsTest.ref\"))\n-            throw new AssertionError(\"Wrong overload\");\n-       checkArrays();\n-    }\n-\n-    static void checkArrays() {\n-        TypeRelationsTest [] xa = new TypeRelationsTest[10];\n-        TypeRelationsTest.ref [] xqa;\n-        Object [] oa;\n-        Object o;\n-\n-        o = oa = xqa = xa;\n-        xa = (TypeRelationsTest []) (xqa = (TypeRelationsTest.ref[]) (oa = (Object []) o));\n-        xa[0] = new TypeRelationsTest(); \/\/ OK, after round trip back and forth.\n-\n-\n-        xqa = (TypeRelationsTest.ref[]) xa;\n-        boolean npe = false;\n-        try {\n-            xqa[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-           throw new AssertionError(\"Missing NPE\");\n-        }\n-        npe = false;\n-\n-        oa = xa;\n-        try {\n-            oa[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-           throw new AssertionError(\"Missing NPE\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsTest.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8267984\n- * @summary The fix for JDK-8267918 incorrectly precludes synchronization of variables of Type Variable type.\n- * @run main TypeVarSynchronize\n- *\/\n-\n-public class TypeVarSynchronize <T> {\n-    void foo(T t) {\n-        synchronized (t) {}\n-    }\n-    public static void main(String [] args) {\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeVarSynchronize.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify that primitive class declarations can be annotated\n- * @bug 8244713\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses UnannotatedProjection.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnannotatedProjection\n- * @ignore\n- *\/\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import com.sun.tools.classfile.*;\n-\n-public class UnannotatedProjection {\n-\n-    @interface DA {}\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface DARR {}\n-\n-    @Target(ElementType.TYPE_PARAMETER)\n-    @interface TA {}\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Target(ElementType.TYPE_PARAMETER)\n-    @interface TARR {}\n-\n-    @DA @DARR\n-    public primitive class V<@TA @TARR T> {}\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(UnannotatedProjection.class.getResourceAsStream(\"UnannotatedProjection$V.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        RuntimeInvisibleAnnotations_attribute inv = (RuntimeInvisibleAnnotations_attribute) cls.attributes.get(Attribute.RuntimeInvisibleAnnotations);\n-        if (inv == null || inv.annotations == null || inv.annotations.length != 1) {\n-            throw new AssertionError(\"Missing annotations\");\n-        }\n-\n-        String aName = cls.constant_pool.getUTF8Value(inv.annotations[0].type_index);\n-        if (!aName.equals(\"LUnannotatedProjection$DA;\")) {\n-            throw new AssertionError(\"Unexpected annotation: \" + aName);\n-        }\n-\n-        RuntimeInvisibleTypeAnnotations_attribute invta = (RuntimeInvisibleTypeAnnotations_attribute) cls.attributes.get(Attribute.RuntimeInvisibleTypeAnnotations);\n-        if (invta == null || invta.annotations == null || invta.annotations.length != 1) {\n-            throw new AssertionError(\"Missing annotations\");\n-        }\n-\n-        aName = cls.constant_pool.getUTF8Value(invta.annotations[0].annotation.type_index);\n-        if (!aName.equals(\"LUnannotatedProjection$TA;\")) {\n-            throw new AssertionError(\"Unexpected annotation: \" + aName);\n-        }\n-\n-        RuntimeVisibleAnnotations_attribute v = (RuntimeVisibleAnnotations_attribute) cls.attributes.get(Attribute.RuntimeVisibleAnnotations);\n-        if (v == null || v.annotations == null || v.annotations.length != 1) {\n-            throw new AssertionError(\"Missing annotations\");\n-        }\n-\n-        aName = cls.constant_pool.getUTF8Value(v.annotations[0].type_index);\n-        if (!aName.equals(\"LUnannotatedProjection$DARR;\")) {\n-            throw new AssertionError(\"Unexpected annotation: \" + aName);\n-        }\n-\n-        RuntimeVisibleTypeAnnotations_attribute vta = (RuntimeVisibleTypeAnnotations_attribute) cls.attributes.get(Attribute.RuntimeVisibleTypeAnnotations);\n-        if (vta == null || vta.annotations == null || vta.annotations.length != 1) {\n-            throw new AssertionError(\"Missing annotations\");\n-        }\n-\n-        aName = cls.constant_pool.getUTF8Value(vta.annotations[0].annotation.type_index);\n-        if (!aName.equals(\"LUnannotatedProjection$TARR;\")) {\n-            throw new AssertionError(\"Unexpected annotation: \" + aName);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnannotatedProjection.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -1,120 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8265423\n- * @summary Experimental support for generating a single class file per primitive class\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassBytecodeTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassBytecodeTest\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class UnifiedPrimitiveClassBytecodeTest {\n-\n-    public primitive class X {\n-\n-        X.ref xr = null;\n-\n-        public void foo(X.ref[] xra, X[] xa) {\n-            xa = new X[10];\n-            xra = new X.ref[10];\n-            xra[0] = xa[0];\n-            xa[1] = xra[0];\n-            Class<?> c = X.val.class;\n-            c = X.ref.class;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new UnifiedPrimitiveClassBytecodeTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"UnifiedPrimitiveClassBytecodeTest$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-        \/\/ check field\n-        \"final UnifiedPrimitiveClassBytecodeTest$X xr;\",\n-        \"descriptor: LUnifiedPrimitiveClassBytecodeTest$X;\",\n-        \"flags: (0x0010) ACC_FINAL\",\n-\n-        \/\/ check method\n-        \"public void foo(UnifiedPrimitiveClassBytecodeTest$X[], UnifiedPrimitiveClassBytecodeTest$X[]);\",\n-        \"descriptor: ([LUnifiedPrimitiveClassBytecodeTest$X;[QUnifiedPrimitiveClassBytecodeTest$X;)V\",\n-        \" 0: bipush        10\",\n-        \" 2: anewarray     #7                  \/\/ class \\\"QUnifiedPrimitiveClassBytecodeTest$X;\\\"\",\n-        \" 5: astore_2\",\n-        \" 6: bipush        10\",\n-        \" 8: anewarray     #1                  \/\/ class UnifiedPrimitiveClassBytecodeTest$X\",\n-        \"11: astore_1\",\n-        \"12: aload_1\",\n-        \"13: iconst_0\",\n-        \"14: aload_2\",\n-        \"15: iconst_0\",\n-        \"16: aaload\",\n-        \"17: checkcast     #1                  \/\/ class UnifiedPrimitiveClassBytecodeTest$X\",\n-        \"20: aastore\",\n-        \"21: aload_2\",\n-        \"22: iconst_1\",\n-        \"23: aload_1\",\n-        \"24: iconst_0\",\n-        \"25: aaload\",\n-        \"26: checkcast     #7                  \/\/ class \\\"QUnifiedPrimitiveClassBytecodeTest$X;\\\"\",\n-        \"29: aastore\",\n-        \"30: ldc           #7                  \/\/ class \\\"QUnifiedPrimitiveClassBytecodeTest$X;\\\"\",\n-        \"32: astore_3\",\n-        \"33: ldc           #1                  \/\/ class UnifiedPrimitiveClassBytecodeTest$X\",\n-        \"35: astore_3\",\n-        \"36: return\",\n-         });\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassBytecodeTest.java","additions":0,"deletions":120,"binary":false,"changes":120,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8265423\n- * @summary Experimental support for generating a single class file per primitive class\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassInnerClassesTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassInnerClassesTest\n- * @ignore\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class UnifiedPrimitiveClassInnerClassesTest {\n-\n-    primitive class V<T> implements java.io.Serializable {}\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(UnifiedPrimitiveClassInnerClassesTest.class.getResourceAsStream(\"UnifiedPrimitiveClassInnerClassesTest.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of inner class attribute *\/\n-        InnerClasses_attribute inners = (InnerClasses_attribute) cls.attributes.get(Attribute.InnerClasses);\n-        if (inners == null) {\n-            throw new AssertionError(\"Missing inner class attribute\");\n-        }\n-        boolean foundV = false, foundVref = false;\n-        for (int i = 0; i < inners.number_of_classes; i++) {\n-            String name = inners.classes[i].getInnerName(cls.constant_pool);\n-            if (name.equals(\"V\"))\n-                foundV = true;\n-            else if (name.equals(\"V$ref\"))\n-                foundVref = true;\n-        }\n-        if (!foundV || foundVref) {\n-            throw new AssertionError(\"Incorrect inner class attribute\");\n-        }\n-\n-        \/\/ Test signature attribute\n-        cls = ClassFile.read(UnifiedPrimitiveClassInnerClassesTest.class.getResourceAsStream(\"UnifiedPrimitiveClassInnerClassesTest$V.class\"));\n-        Signature_attribute signature = (Signature_attribute)cls.attributes.get(Attribute.Signature);\n-        String sign =  signature.getSignature(cls.constant_pool);\n-        if (sign == null || !sign.equals(\"<T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\")) {\n-            throw new RuntimeException(\"Wrong signature \" + sign);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassInnerClassesTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8265423\n- * @summary Experimental support for generating a single class file per primitive class\n- * @modules java.base\/jdk.internal.value\n- * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassNestHostTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassNestHostTest\n- * @ignore\n- *\/\n-\n-import java.util.Arrays;\n-import jdk.internal.value.PrimitiveClass;\n-\n-public primitive class UnifiedPrimitiveClassNestHostTest implements java.io.Serializable {\n-\n-    primitive class Inner {}\n-\n-    public static void main(String [] args) {\n-\n-       \/\/ check wiring of super types.\n-        Class<?> superClass = UnifiedPrimitiveClassNestHostTest.class.getSuperclass();\n-        if (!superClass.equals(Object.class))\n-            throw new AssertionError(\"Wrong superclass for UnifiedPrimitiveClassNestHostTest\");\n-\n-        Class<?> [] superInterfaces = UnifiedPrimitiveClassNestHostTest.class.getInterfaces();\n-        if (superInterfaces.length != 1)\n-            throw new AssertionError(\"Wrong super interfaces for UnifiedPrimitiveClassNestHostTest\");\n-\n-        if (!superInterfaces[0].equals(java.io.Serializable.class))\n-            throw new AssertionError(\"Wrong super interfaces for UnifiedPrimitiveClassNestHostTest\");\n-\n-        Class<?> nestHost = UnifiedPrimitiveClassNestHostTest.class.getNestHost();\n-        String hostName = nestHost.getName();\n-\n-        if (!hostName.equals(\"UnifiedPrimitiveClassNestHostTest\"))\n-            throw new AssertionError(\"Wrong nest host: \" + hostName);\n-\n-        Class<?> [] members = nestHost.getNestMembers();\n-        if (members.length != 2)\n-            throw new AssertionError(\"Wrong member count: \" + members.length);\n-\n-        if (!members[0].equals(nestHost))\n-            throw new AssertionError(\"Wrong initial member: \" + members[0]);\n-\n-        if (!members[1].equals(PrimitiveClass.asPrimaryType(Inner.class)))\n-            throw new AssertionError(\"Wrong initial member: \" + members[1]);\n-\n-        if (!members[1].getNestHost().equals(nestHost))\n-            throw new AssertionError(\"Wrong nest host for member[1]: \" + members[1]);\n-\n-        if (!Arrays.equals(members[1].getNestMembers(), members))\n-            throw new AssertionError(\"Wrong members for member[1]: \" + members[1]);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassNestHostTest.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8205910\n- * @summary Complain when `this' of a value class is leaked from constructor before all instance fields are definitely assigned.\n- * @compile -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses UnrelatedThisLeak.java\n- * @ignore\n- *\/\n-\n-public class UnrelatedThisLeak {\n-    primitive class V {\n-        int f;\n-        V() {\n-            UnrelatedThisLeak x = UnrelatedThisLeak.this;\n-            f = 10;\n-            x = UnrelatedThisLeak.this;\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnrelatedThisLeak.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8264977\n- * @summary A primitive class field by name val confuses javac\n- * @compile -XDenablePrimitiveClasses ValRefTokensTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValRefTokensTest\n- * @ignore\n- *\/\n-\n-public primitive class ValRefTokensTest  {\n-\n-    ValRefTokensTest.ref aa = null;\n-    static ValRefTokensTest.val bb = ValRefTokensTest.default;\n-\n-    EmptyValue empty = EmptyValue.default;\n-\n-    static primitive class ValRefTokensTestWrapper {\n-       ValRefTokensTest val = ValRefTokensTest.default;\n-       ValRefTokensTest ref = ValRefTokensTest.default;\n-    }\n-\n-    public EmptyValue test139(int x) {\n-        ValRefTokensTestWrapper w = new ValRefTokensTestWrapper();\n-        return x == 0 ? w.val.empty : w.ref.empty;\n-    }\n-\n-    int valx() {\n-        return EmptyValue.val.x;\n-    }\n-\n-    int refx() {\n-        return EmptyValue.ref.x;\n-    }\n-\n-    static primitive class EmptyValue {\n-        static int x = 42;\n-    }\n-\n-    public static void main(String [] args) {\n-        if (new ValRefTokensTest().valx() != new ValRefTokensTest().refx())\n-            throw new AssertionError(\"Broken\");\n-        if (new ValRefTokensTest().test139(0).x != new ValRefTokensTest().test139(1).x)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensTest.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8244233\n- * @summary Nested types are not handled properly across projections\n- * @compile -XDenablePrimitiveClasses ValueAsEnclosingClass.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueAsEnclosingClass\n- * @ignore\n- *\/\n-\n-public primitive class ValueAsEnclosingClass {\n-\n-    static primitive class V {\n-        int y = 52;\n-\n-        class Bar { }\n-        static class Baz { }\n-    }\n-\n-    class Inner { }\n-\n-    static ValueAsEnclosingClass.Inner xi = new ValueAsEnclosingClass().new Inner();\n-    ValueAsEnclosingClass.ref.Inner xri = xi;\n-\n-    public static void main(String[] args) {\n-        new V().new Bar();\n-        V.Baz baz1 = new V.Baz();\n-        V.ref.Baz baz2 = baz1;\n-        new ValueAsEnclosingClass();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAsEnclosingClass.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @summary test value bootstrap methods\n- * @modules java.base\/jdk.internal.value\n- * @compile -XDenablePrimitiveClasses ValueBootstrapMethodsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dvalue.bsm.salt=1 ValueBootstrapMethodsTest\n- * @ignore\n- *\/\n-\n-import java.util.List;\n-import java.util.Objects;\n-import jdk.internal.value.PrimitiveClass;\n-\n-public class ValueBootstrapMethodsTest {\n-\n-    public static final primitive class Value {\n-        private final int i;\n-        private final double d;\n-        private final String s;\n-        private final List<String> l;\n-        Value(int i, double d, String s, String... items) {\n-            this.i = i;\n-            this.d = d;\n-            this.s = s;\n-            this.l = List.of(items);\n-        }\n-\n-        private List<Object> values() {\n-            return List.of(PrimitiveClass.asValueType(Value.class), i, d, s, l);\n-        }\n-\n-        public int localHashCode() {\n-            return values().hashCode();\n-        }\n-\n-        public String localToString() {\n-            System.out.println(l);\n-            return String.format(\"%s@%s\", PrimitiveClass.asValueType(Value.class).getName(), Integer.toHexString(localHashCode()));\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj) {\n-            if (obj instanceof Value) {\n-                Value v = (Value)obj;\n-                return this.i == v.i && this.d == v.d &&\n-                        Objects.equals(this.s, v.s) &&\n-                        Objects.equals(this.l, this.l);\n-            }\n-            return false;\n-        }\n-    }\n-\n-    private static void assertEquals(Object o1, Object expected) {\n-        if (!Objects.equals(o1, expected)) {\n-            throw new RuntimeException(o1 + \" expected: \" + expected);\n-        }\n-    }\n-\n-    public static void main(String... args) throws Throwable {\n-\n-        Value value = new Value(10, 5.03, \"foo\", \"bar\", \"goo\");\n-\n-        assertEquals(value.localHashCode(), value.hashCode());\n-        assertEquals(value.localToString(), value.toString());\n-\n-        \/\/ verify ifacmp and the overridden equals method\n-\n-        \/\/ same instance\n-        if (value != value || !value.equals(value)) {\n-            throw new RuntimeException(\"expected == and equals\");\n-        }\n-\n-        \/\/ value and v2 are of different values\n-        Value v2 = new Value(20, 5.03, \"foo\", \"bar\", \"goo\");\n-        if (value == v2 || value.equals(v2)) {\n-            throw new RuntimeException(\"expected != and unequals\");\n-        }\n-\n-        \/\/ v2 and v3 are of different values but Value::equals\n-        \/\/ returns true because v2::l and v3::l field contain the same elements\n-        Value v3 = new Value(20, 5.03, \"foo\", \"bar\", \"goo\");\n-        if (v2 == v3 || !v2.equals(v3)) {\n-            throw new RuntimeException(\"expected != and equals\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueBootstrapMethodsTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test that qualified this based access to instance fields works ok.\n- * @compile -XDenablePrimitiveClasses ValueConstructorRef.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueConstructorRef\n- * @ignore\n- *\/\n-\n-import java.util.function.Supplier;\n-\n-public primitive class ValueConstructorRef {\n-\n-    final int x;\n-    final int y;\n-\n-    ValueConstructorRef() {\n-    \tx = 1234;\n-    \ty = 5678;\n-    }\n-\n-    public static void main(String [] args) {\n-       Supplier<ValueConstructorRef.ref> sx = ValueConstructorRef::new;\n-    \tValueConstructorRef x = (ValueConstructorRef) sx.get();\n-        if (x.x != 1234 || x.y != 5678)\n-            throw new AssertionError(x);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConstructorRef.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check code generation for value creation ops\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses ValueCreationTest.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueCreationTest\n- * @modules jdk.compiler\n- * @ignore\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ValueCreationTest {\n-\n-    primitive\n-    static final class Point {\n-\n-        final int x;\n-        final int y;\n-\n-        Point (int x, int y) {\n-            this.x = x;\n-            this.y = y;\n-        }\n-\n-        public static void main(String [] args) {\n-            Point p = new Point(10, 20);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ValueCreationTest().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ValueCreationTest$Point.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"0: aconst_init   #1                  \/\/ class ValueCreationTest$Point\",\n-         \"3: astore_2\",\n-         \"4: iload_0\",\n-         \"5: aload_2\",\n-         \"6: swap\",\n-         \"7: withfield     #3                  \/\/ Field x:I\",\n-        \"10: astore_2\",\n-        \"11: iload_1\",\n-        \"12: aload_2\",\n-        \"13: swap\",\n-        \"14: withfield     #7                  \/\/ Field y:I\",\n-        \"17: astore_2\",\n-        \"18: aload_2\",\n-        \"19: areturn\"\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueCreationTest.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8198749\n- * @summary Test value instatiation using new\/ctors.\n- * @compile -XDenablePrimitiveClasses ValueNewReadWrite.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueNewReadWrite\n- * @ignore\n- *\/\n-\n-public primitive class ValueNewReadWrite {\n-\n-    int y = 10;\n-    int twice_x_plus_y;\n-    int x;\n-\n-    ValueNewReadWrite(int x) {\n-        this.x = x;\n-        twice_x_plus_y = 2 * this.x + y;;\n-    }\n-\n-    public static void main(String [] args) {\n-        if (new ValueNewReadWrite(1234).twice_x_plus_y != 2478)\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueNewReadWrite.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8251116\n- * @summary Test that values code like a class - i.e are accepted in some places where only references used be, when suitable reference projection is used.\n- * @compile -XDenablePrimitiveClasses ValuesAsRefs.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValuesAsRefs\n- * @ignore\n- *\/\n-import java.util.ArrayList;\n-\n-public final primitive class ValuesAsRefs {\n-\n-    final ArrayList<? extends ValuesAsRefs.ref> ao = null; \/\/ values can be wildcard bounds.\n-\n-    final primitive class I implements java.io.Serializable {\n-        final int y = 42;\n-    }\n-\n-    void foo() {\n-        I i = this.new I();  \/\/ values can be enclosing instances.\n-        i = ValuesAsRefs.I.default;\n-        Object o = (I.ref & java.io.Serializable) i; \/\/ values can be used in intersection casts\n-    }\n-    <T> void goo() {\n-        this.<ValuesAsRefs.ref>goo(); \/\/ values can be type arguments to generic method calls\n-    }\n-\n-    public static void main(String [] args) {\n-        Object o = null;\n-        ArrayList<ValuesAsRefs.I.ref> aloi = new ArrayList<>(); \/\/ values can be type arguments.\n-        boolean OK = false;\n-        try {\n-            aloi.add((ValuesAsRefs.I) o);\n-        } catch (NullPointerException npe) {\n-            OK = true;\n-        }\n-        if (!OK)\n-            throw new AssertionError(\"Missing NPE\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValuesAsRefs.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test withfield behavior at runtime.\n- * @compile -XDenablePrimitiveClasses WithFieldRuntimeTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses WithFieldRuntimeTest\n- * @ignore\n- *\/\n-\n-public final primitive class WithFieldRuntimeTest {\n-\n-    final int x;\n-\n-    WithFieldRuntimeTest(int x) {\n-        this.x = x;\n-    }\n-\n-    static void foo(WithFieldRuntimeTest x) {\n-        if (x.x != 0)\n-            throw new AssertionError(\"Expected default value, found something else.\");\n-        x = new WithFieldRuntimeTest(20);\n-        if (x.x != 20)\n-            throw new AssertionError(\"Expected updated value, found something else.\");\n-    }\n-\n-    public static void main(String [] args) {\n-        WithFieldRuntimeTest x = WithFieldRuntimeTest.default;\n-        foo(x);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldRuntimeTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/*\n- * @test\n- * @summary [lworld] test for equal treatment of annotations on primitive records (copy of ApplicableAnnotationsOnRecords)\n- * @bug 8273018\n- * @library \/tools\/lib\n- * @modules jdk.compiler\/com.sun.tools.javac.util\n- *          jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses ApplicableAnnotationsOnPrimitiveRecords.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ApplicableAnnotationsOnPrimitiveRecords\n- * @ignore\n- *\/\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.javac.util.Assert;\n-import java.lang.annotation.*;\n-import java.io.InputStream;\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target({ElementType.FIELD})\n-@interface FieldAnnotation {\n-}\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target({ElementType.METHOD})\n-@interface MethodAnnotation {\n-}\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target({ElementType.PARAMETER})\n-@interface ParameterAnnotation {\n-}\n-\n-public value record ApplicableAnnotationsOnPrimitiveRecords(@FieldAnnotation @MethodAnnotation @ParameterAnnotation String s, @FieldAnnotation @MethodAnnotation @ParameterAnnotation int i) {\n-\n-    public static void main(String... args) throws Exception {\n-        try ( InputStream in = ApplicableAnnotationsOnPrimitiveRecords.class.getResourceAsStream(\"ApplicableAnnotationsOnPrimitiveRecords.class\")) {\n-            ClassFile cf = ClassFile.read(in);\n-            Assert.check(cf.methods.length > 5);\n-            for (Method m : cf.methods) {\n-                String methodName = m.getName(cf.constant_pool);\n-                if (methodName.equals(\"toString\") || methodName.equals(\"hashCode\") || methodName.equals(\"equals\") || methodName.equals(\"main\")) {\n-                    \/\/ ignore\n-                } else if (methodName.equals(\"<vnew>\")) {\n-                    var paAnnos = ((RuntimeVisibleParameterAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleParameterAnnotations)).parameter_annotations;\n-                    Assert.check(paAnnos != null && paAnnos.length > 0);\n-                    for (var pa : paAnnos) {\n-                        Assert.check(pa.length == 1);\n-                        Assert.check(cf.constant_pool.getUTF8Value(pa[0].type_index).equals(\"LParameterAnnotation;\"));\n-                    }\n-                } else {\n-                    var annos = ((RuntimeAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n-                    Assert.check(annos.length == 1);\n-                    Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LMethodAnnotation;\"));\n-                }\n-            }\n-            Assert.check(cf.fields.length > 0);\n-            for (Field field : cf.fields) {\n-                var annos = ((RuntimeAnnotations_attribute) field.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n-                Assert.check(annos.length == 1);\n-                Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LFieldAnnotation;\"));\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/records\/ApplicableAnnotationsOnPrimitiveRecords.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8212175\n- * @summary Trouble creating an anonymous value class with diamond syntax\n- * @ignore 8316628\n- *\/\n-\n-import java.util.function.Function;\n-\n-public class AnonymousValue {\n-    static Function<String, String> capitalizer() {\n-        return new value Function<>() {\n-            int x = 10;\n-            @Override\n-            public String apply(String t) {\n-                return t.toUpperCase();\n-            }\n-        };\n-    }\n-    public static void main(String[] args) {\n-        if (!capitalizer().apply(\"blah\").equals(\"BLAH\"))\n-            throw new AssertionError(\"Failed\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AnonymousValue.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8209400 8215246\n- * @summary Allow anonymous classes to be value types\n- * @ignore 8316628\n- *\/\n-\n-public class AnonymousValueType {\n-    public static void main(String[] args) {\n-        Object o = new value Comparable<String>() {\n-            int x = 10;\n-            @Override\n-            public int compareTo(String o) {\n-                return 0;\n-            }\n-        };\n-        if (!o.toString().equals(\"AnonymousValueType$1@\" + Integer.toHexString(o.hashCode())))\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AnonymousValueType.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Check behavior of synzhronized key word on value classes instances and methods.\n+ * @ignore\n+ * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics CheckSynchronized.java\n+ *\/\n+\n+value final class CheckSynchronized implements java.io.Serializable {\n+    synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n+    }\n+    void goo() {\n+        synchronized(this) {} \/\/ <<-- ERROR, no monitor associated with `this'\n+    }\n+    synchronized static void zoo(CheckSynchronized cs) { \/\/ OK, static method.\n+        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with value class instance.\n+        }\n+\n+        CheckSynchronized.ref csr = cs;\n+        synchronized(csr) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        synchronized(x) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        Object o = cs;\n+        synchronized(o) {\n+            \/\/ Error BUT not discernible at compile time\n+        }\n+        java.io.Serializable jis = cs;\n+        synchronized(jis) {\n+            \/\/ Error BUT not discernible at compile time\n+        }\n+    }\n+    static int x = 10;\n+\n+    value record CheckSynchronizedRecord(int x, int y) {\n+        synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n+        }\n+        synchronized static void zoo() { \/\/ OK, static method.\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckSynchronized.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckSynchronized.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSynchronized.out","status":"renamed"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8267843\n+ * @summary Check that javac diagnoses `this` being passed around and instance method being invoked before value class instance is fully initialized.\n+ * @compile\/fail\/ref=DualNonDuplicateErrors.out -XDrawDiagnostics -XDenablePrimitiveClasses DualNonDuplicateErrors.java\n+ *\/\n+\n+public value class DualNonDuplicateErrors {\n+\n+    int x;\n+\n+    DualNonDuplicateErrors() {\n+        \/\/ The call below should trigger two errors - they are not duplicates really.\n+        \/\/ First one is for `this` being passed around (\"exposed\")\n+        \/\/ Second is for instance method being invoked thereby allowing that method to\n+        \/\/ observe the value class instance in a partially initialized state.\n+        foo(this);\n+        x = 10;\n+        super();\n+        foo(this); \/\/ No error here.\n+    }\n+\n+    void foo(DualNonDuplicateErrors x) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/DualNonDuplicateErrors.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+DualNonDuplicateErrors.java:17:13: compiler.err.cant.ref.before.ctor.called: this\n+DualNonDuplicateErrors.java:17:9: compiler.err.cant.ref.before.ctor.called: foo(DualNonDuplicateErrors)\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/DualNonDuplicateErrors.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8197911\n- * @summary Test Javac's treatment of null assignment to value instances\n- * @compile -XDrawDiagnostics -XDdev FlattenableTest.java\n- *\/\n-\n-public class FlattenableTest {\n-    value final class V {\n-        final int x = 10;\n-\n-        value final class X {\n-            final V v;\n-            final V v2;\n-\n-            X() {\n-                this.v = null;\n-                this.v2 = null;\n-            }\n-\n-            X(V v) {\n-                this.v = v;\n-                this.v2 = v;\n-            }\n-\n-            V foo(X x) {\n-                x = new X(null);  \/\/ OK\n-                return x.v;\n-            }\n-        }\n-        V bar(X x) {\n-            x = new X(null); \/\/ OK\n-            return x.v;\n-        }\n-\n-        class Y {\n-            V v;\n-            V [] va = { null }; \/\/ OK: array initialization\n-            V [] va2 = new V[] { null }; \/\/ OK: array initialization\n-            void ooo(X x) {\n-                x = new X(null); \/\/ OK\n-                v = null; \/\/ legal assignment.\n-                va[0] = null; \/\/ legal.\n-                va = new V[] { null }; \/\/ legal\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/FlattenableTest.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -87,1 +87,1 @@\n-    void testAnnotationsConstraints() {\n+    void testValueModifierConstraints() {\n@@ -92,0 +92,20 @@\n+        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n+                \"\"\"\n+                value interface I {}\n+                \"\"\");\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                class Test {\n+                    value int x;\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                class Test {\n+                    value int foo();\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                value enum Enum {}\n+                \"\"\");\n@@ -125,8 +145,1 @@\n-        String[] sources = new String[] {\n-                \"static static class StaticTest {}\",\n-                \"native native class NativeTest {}\",\n-                \"value value class ValueTest {}\"\n-        };\n-        for (String source : sources) {\n-            assertFail(\"compiler.err.repeated.modifier\", source);\n-        }\n+        assertFail(\"compiler.err.repeated.modifier\", \"value value class ValueTest {}\");\n@@ -272,1 +285,1 @@\n-                value interface VI extends I {}\n+                interface VI extends I {}\n@@ -283,1 +296,1 @@\n-                value interface VI extends I {}\n+                interface VI extends I {}\n@@ -294,1 +307,1 @@\n-                value interface VI extends I {}\n+                abstract value class VI implements I {}\n@@ -298,1 +311,1 @@\n-                        synchronized ((I & VI)o) {} \/\/ error\n+                        synchronized ((VI & I)o) {} \/\/ error\n@@ -334,1 +347,1 @@\n-        assertFail(\"compiler.err.mod.not.allowed.here\",\n+        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n@@ -340,1 +353,1 @@\n-        assertFail(\"compiler.err.mod.not.allowed.here\",\n+        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n@@ -342,2 +355,2 @@\n-                sealed value interface SI {}\n-                non-sealed value class VC implements SI {}\n+                sealed value class SI {}\n+                non-sealed value class VC extends SI {}\n@@ -567,0 +580,14 @@\n+        assertOK(\n+                \"\"\"\n+                class UnrelatedThisLeak {\n+                    value class V {\n+                        int f;\n+                        V() {\n+                            UnrelatedThisLeak x = UnrelatedThisLeak.this;\n+                            f = 10;\n+                            x = UnrelatedThisLeak.this;\n+                        }\n+                    }\n+                }\n+                \"\"\"\n+        );\n@@ -591,0 +618,79 @@\n+    @Test\n+    void testAnonymousValue() throws Exception {\n+        assertOK(\n+                \"\"\"\n+                class Test {\n+                    void m() {\n+                        Object o = new value Comparable<String>() {\n+                            @Override\n+                            public int compareTo(String o) {\n+                                return 0;\n+                            }\n+                        };\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                class Test {\n+                    void m() {\n+                        Object o = new value Comparable<>() {\n+                            @Override\n+                            public int compareTo(Object o) {\n+                                return 0;\n+                            }\n+                        };\n+                    }\n+                }\n+                \"\"\"\n+        );\n+    }\n+\n+    @Test\n+    void testNullAssigment() throws Exception {\n+        assertOK(\n+                \"\"\"\n+                value final class V {\n+                    final int x = 10;\n+\n+                    value final class X {\n+                        final V v;\n+                        final V v2;\n+\n+                        X() {\n+                            this.v = null;\n+                            this.v2 = null;\n+                        }\n+\n+                        X(V v) {\n+                            this.v = v;\n+                            this.v2 = v;\n+                        }\n+\n+                        V foo(X x) {\n+                            x = new X(null);  \/\/ OK\n+                            return x.v;\n+                        }\n+                    }\n+                    V bar(X x) {\n+                        x = new X(null); \/\/ OK\n+                        return x.v;\n+                    }\n+\n+                    class Y {\n+                        V v;\n+                        V [] va = { null }; \/\/ OK: array initialization\n+                        V [] va2 = new V[] { null }; \/\/ OK: array initialization\n+                        void ooo(X x) {\n+                            x = new X(null); \/\/ OK\n+                            v = null; \/\/ legal assignment.\n+                            va[0] = null; \/\/ legal.\n+                            va = new V[] { null }; \/\/ legal\n+                        }\n+                    }\n+                }\n+                \"\"\"\n+        );\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":123,"deletions":17,"binary":false,"changes":140,"status":"modified"}]}