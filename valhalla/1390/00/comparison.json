{"files":[{"patch":"@@ -562,1 +562,2 @@\n-                TreeInfo.mapSuperCalls(md.body, supercall -> make.Block(0, initCode.append(supercall).appendList(initBlocks)));\n+                md.body.stats = initCode.appendList(md.body.stats);\n+                TreeInfo.mapSuperCalls(md.body, supercall -> make.Block(0, initBlocks.prepend(supercall)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_NameAndType_info;\n+import com.sun.tools.classfile.ConstantPool.CPRefInfo;\n@@ -1121,0 +1123,29 @@\n+\n+        source =\n+            \"\"\"\n+            value class V {\n+                int i = 1;\n+                int y;\n+                V() {\n+                    y = 2;\n+                }\n+            }\n+            \"\"\";\n+        dir = assertOK(true, source);\n+        File fileEntry = dir.listFiles()[0];\n+        ClassFile classFile = ClassFile.read(fileEntry);\n+        expectedCodeSequence = \"putfield i,putfield y,\";\n+        for (Method method : classFile.methods) {\n+            if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n+                Code_attribute code = (Code_attribute)method.attributes.get(\"Code\");\n+                String foundCodeSequence = \"\";\n+                for (Instruction inst: code.getInstructions()) {\n+                    if (inst.getMnemonic().equals(\"putfield\")) {\n+                        CPRefInfo refInfo = (CPRefInfo)classFile.constant_pool.get(inst.getShort(1));\n+                        CONSTANT_NameAndType_info nameAndType = refInfo.getNameAndTypeInfo();\n+                        foundCodeSequence += inst.getMnemonic() + \" \" + nameAndType.getName() + \",\";\n+                    }\n+                }\n+                Assert.check(foundCodeSequence.equals(expectedCodeSequence), foundCodeSequence);\n+            }\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}