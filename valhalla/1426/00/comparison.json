{"files":[{"patch":"@@ -2568,1 +2568,1 @@\n-      } else if (split_always_terminates) {\n+      } else if (mergemem_only || split_always_terminates) {\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2495,2 +2495,1 @@\n-      \/\/ TODO: 8353717\n-      \/\/assert(outer->outcnt() >= phis + 2 - be_loads && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n+      assert(outer->outcnt() >= phis + 2 - be_loads && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        IRNode.optoOnly(INLINE_ARRAY_NULL_GUARD, InlineTypeRegexes.INLINE_ARRAY_NULL_GUARD);\n+        IRNode.beforeMatching(INLINE_ARRAY_NULL_GUARD, InlineTypeRegexes.INLINE_ARRAY_NULL_GUARD);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeIRNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    public static final String INLINE_ARRAY_NULL_GUARD = \"(.*call,static.*wrapper for: uncommon_trap.*reason='null_check' action='none'.*\" + END;\n+    public static final String INLINE_ARRAY_NULL_GUARD = START + \"CallStaticJava\" + MID + \"null_check' action='none'\" + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeRegexes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2387,1 +2387,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseArrayFlattening\", \"true\"},\n+    @IR(applyIf = {\"UseArrayFlattening\", \"true\"},\n@@ -2389,2 +2389,0 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseArrayFlattening\", \"true\"},\n-        counts = {COUNTEDLOOP_MAIN, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 4\"})\n@@ -2410,1 +2408,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseArrayFlattening\", \"true\"},\n+    @IR(applyIf = {\"UseArrayFlattening\", \"true\"},\n@@ -2412,2 +2410,0 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseArrayFlattening\", \"true\"},\n-        counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n@@ -2992,5 +2988,1 @@\n-    \/* TODO: 8353717\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseArrayFlattening\", \"true\"},\n-        failOn = {STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n-        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 2\"})\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseArrayFlattening\", \"true\"},\n+    @IR(applyIf = {\"UseArrayFlattening\", \"true\"},\n@@ -2998,2 +2990,3 @@\n-        counts = {COUNTEDLOOP, \"= 3\", LOAD_UNKNOWN_INLINE, \"= 2\"})\n-    *\/\n+        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 2\"},\n+         \/\/ Match on CCP since we are removing one of the unswitched loop versions later due to being empty\n+        phase = {CompilePhase.CCP1})\n@@ -3025,1 +3018,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseArrayFlattening\", \"true\"},\n+    @IR(applyIf = {\"UseArrayFlattening\", \"true\"},\n@@ -3028,3 +3021,0 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseArrayFlattening\", \"true\"},\n-        failOn = {LOAD_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n-        counts = {COUNTEDLOOP, \"= 4\", STORE_UNKNOWN_INLINE, \"= 12\"})\n@@ -3207,1 +3197,0 @@\n-    \/* TODO: 8353717\n@@ -3211,1 +3200,0 @@\n-    *\/\n@@ -3247,1 +3235,0 @@\n-    \/* TODO: 8353717\n@@ -3251,1 +3238,0 @@\n-    *\/\n@@ -3286,1 +3272,0 @@\n-    \/* TODO: 8353717\n@@ -3289,1 +3274,0 @@\n-    *\/\n@@ -3342,1 +3326,0 @@\n-    \/* TODO: 8353717\n@@ -3345,1 +3328,0 @@\n-    *\/\n@@ -3442,3 +3424,2 @@\n-    \/* TODO: 8353717\n-      @IR(failOn = {ALLOC_G, MEMBAR},\n-      counts = {PREDICATE_TRAP, \"= 1\"}) *\/\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-    \/\/ TODO: Should be fixed with JDK-8327465.\n@@ -126,1 +125,1 @@\n-    \/\/@Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-    \/\/@IR(failOn = {ALLOC, STORE}) TODO: 8353717\n+    @IR(failOn = {ALLOC, STORE})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}